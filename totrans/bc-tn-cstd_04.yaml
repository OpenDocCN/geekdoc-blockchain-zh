- en: © The Author(s), under exclusive license to APress Media, LLC, part of Springer
    Nature 2023B. Wu, B. WuBlockchain for Teens[https://doi.org/10.1007/978-1-4842-8808-5_4](https://doi.org/10.1007/978-1-4842-8808-5_4)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: ©作者（们），受APress Media, LLC独家授权，Springer Nature的一部分2023吴布赖恩，吴布里吉特《区块链青少年》[https://doi.org/10.1007/978-1-4842-8808-5_4](https://doi.org/10.1007/978-1-4842-8808-5_4)
- en: '4. Ethereum: A Gateway to Cryptocurrency'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4. 以太坊：通往加密货币的门户
- en: Brian Wu^([1](#Aff3)  ) and Bridget Wu^([1](#Aff3))(1)Livingston, NJ, USA
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 布莱恩·吴（Brian Wu）和布里吉特·吴（Bridget Wu）(1)新泽西州，美国，Livingston
- en: Alan Turing, a mathematician, logician, and computer scientist, is widely considered
    to be the father of computer science. In the 1930s, he invented the Universal
    Turing Machine. Assuming enough memory is available, the Turing Machine could
    calculate anything using only two symbols (0 or 1) arranged in a potentially infinite
    one-dimensional sequence. This is the basis for the first computer. Turing-completeness,
    therefore, refers to any computation problem that can be solved and implemented
    in a Turing-complete environment, no matter how complex.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 艾伦·图灵是一位数学家、逻辑学家和计算机科学家，被广泛认为是计算机科学之父。在20世纪30年代，他发明了通用图灵机。假设有足够的内存可用，图灵机只需使用两个符号（0或1）组成的潜在无限一维序列，就可以计算任何东西。这是第一台计算机的基础。图灵完备性因此指的是任何可以在图灵完备环境中解决和实现的问题，无论多么复杂。
- en: Ethereum, the second-largest cryptocurrency after Bitcoin, is considered a distributed
    Turing machine. It introduced a built-in Turing-complete programming language—smart
    contract, which can be used for creating various decentralized applications (also
    called Dapps).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Ethereum，继比特币之后的第二大加密货币，被认为是一个分布式图灵机。它引入了一个内置的图灵完备编程语言——智能合约，可用于创建各种去中心化应用程序（也称为Dapps）。
- en: The previous chapter introduced Bitcoin as the first embodiment of blockchain
    technology and the world’s most popular cryptocurrency.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 上一章介绍了比特币作为区块链技术的第一个体现和世界上最受欢迎的加密货币。
- en: In this chapter, we’ll continue exploring the Ethereum blockchain, built as
    a Turing-complete blockchain. The chapter begins with the history of Ethereum.
    From there, we cover many Ethereum basic concepts and elementary operations, including
    Ether, Gas, and Ethereum Account. Then, for a deeper and more comprehensive understanding
    of Ethereum, we explore a big-picture overview of the Ethereum Virtual Machine
    (EVM). We will also see the important Ethereum clients and node implementations.
    Finally, we discuss how Ethereum works and explores the internal Ethereum architecture.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续探索作为图灵完备区块链构建的以太坊区块链。本章从以太坊的历史开始。从那里，我们涵盖了以太坊许多基本概念和基本操作，包括以太币、燃料和以太坊账户。然后，为了更深入、更全面地了解以太坊，我们探讨了以太坊虚拟机（EVM）的大图景概述。我们还将看到重要的以太坊客户端和节点实现。最后，我们讨论了以太坊的工作原理以及探索以太坊的内部架构。
- en: One of this chapter’s goals is to help you acquire the necessary technical background
    to understand Ethereum mechanics and get you ready to develop your first decentralized
    application in the next chapter.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的一个目标是帮助您掌握理解以太坊机制所需的必要技术背景，并让您为在下一章开发您的第一个去中心化应用程序做好准备。
- en: 'This chapter is organized around a few major topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章围绕几个主要主题组织：
- en: The history of Ethereum
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ethereum的历史
- en: Getting to know Ethereum
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解以太坊
- en: How Ethereum works
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊是如何工作的
- en: The History of Ethereum
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ethereum的历史
- en: Vitalik Buterin is a Russian-Canadian writer and programmer who has been involved
    in Bitcoin and crypto since 2011 just two years after Bitcoin was created. Vitalik
    became a writer, earning 5 Bitcoins for every post for the Bitcoin Magazine website.
    Soon, he became the co-founder of *Bitcoin Magazine*. Having improved his understanding
    of Bitcoin, Buterin became a Bitcoin expert and realized the limited functionality
    of Bitcoin. In 2013, for six months, Vitalik traveled around the world to learn,
    meet, and speak with Bitcoin developers. He recognized that he could build a new,
    potentially better version of blockchain by iterating on the Bitcoin.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 维塔利克·布特林是一位俄罗斯-加拿大作家和程序员，自2011年以来一直参与比特币和加密货币，就在比特币创建后的两年。维塔利克成为了一名作家，为比特币杂志网站的每篇文章赚取5个比特币。很快，他成为了《比特币杂志》的联合创始人。布特林加深了对比特币的理解，成为了一名比特币专家，并意识到了比特币功能的局限性。2013年，维塔利克环游世界六个月，学习、会见并与其他比特币开发者交流。他意识到，通过在比特币的基础上进行迭代，他可以构建一个全新的、潜在更好的区块链版本。
- en: Whitepaper Released (November 2013)
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 白皮书发布（2013年11月）
- en: 'In November 2013, Vitalik, just 19 years old, published a white paper entitled
    *Ethereum: A Next-Generation Smart Contract and Decentralized Application Platform*,
    exploring the general idea of Ethereum.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 2013年11月，19岁的Vitalik发表了题为《以太坊：下一代智能合约和去中心化应用平台》的白皮书，探讨了以太坊的一般概念。
- en: 'The white paper explaining the concept of Ethereum that includes the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 解释以太坊概念的白皮书包括以下内容：
- en: It provides a built-in Turing-complete programming language that can be used
    to create a “smart contract”—simply a self-executing program that runs on the
    blockchain.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了一个内置的图灵完备编程语言，可以用来创建“智能合约”——只是一个在区块链上运行的自我执行程序。
- en: 'It establishes peer-to-peer transactions in the blockchain. The platform can
    create and build a smart contract and decentralized application, allowing anyone
    to define, create, and exchange types of value: cryptocurrencies, shares, and
    many other assets.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它建立了区块链上的点对点交易。该平台可以创建和构建智能合约和去中心化应用程序，允许任何人定义、创建和交换各种价值类型：加密货币、股票以及许多其他资产。
- en: Yellow Paper Released (April 2014)
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 黄皮书发布（2014年4月）
- en: 'In April 2014, Dr. Gavin Wood published the Ethereum yellow paper, giving a
    technical definition of the Ethereum protocol—Ethereum: a secure decentralized
    generalized transaction ledger, which describes a technical definition of the
    Ethereum protocol.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年4月，Gavin Wood博士发表了以太坊黄皮书，给出了以太坊协议的技术定义——以太坊：一个安全的去中心化通用交易账本，描述了以太坊协议的技术定义。
- en: The Birth of Ethereum (July 2014)
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以太坊的诞生（2014年7月）
- en: Ethereum was publicly announced at the North American Bitcoin Conference in
    Miami in January 2014\. Ethereum Foundation, as a nonprofit organization, was
    formed on July 6th, 2014, in Zug, Switzerland. Ethereum’s founding members were
    Vitalik Buterin, Gavin Wood, Charles Hoskinson, Anthony Di Iorio, Mihai Alise,
    and Joe Lubin.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年1月，在迈阿密的北美比特币会议上，以太坊被公开宣布。作为一个非营利组织，以太坊基金会于2014年7月6日在瑞士楚格成立。以太坊的创始成员包括Vitalik
    Buterin、Gavin Wood、Charles Hoskinson、Anthony Di Iorio、Mihai Alise和Joe Lubin。
- en: Launching the Ether Sale (July–September 2014)
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动以太币众售（2014年7月至9月）
- en: On July 20th, 2014, the Ethereum Foundation launched a 42-day crowdfunding campaign.
    On September 2nd, 2014, the public crowd sale ended. Ethereum foundation raised
    31,591 Bitcoin, that’s about $18 million at the time of the sale’s close.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年7月20日，以太坊基金会启动了一个为期42天的众筹活动。2014年9月2日，公共众售结束。以太坊基金会筹集了31,591个比特币，这在售罄时大约是1800万美元。
- en: Ethereum Released (June 2015)
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以太坊发布（2015年6月）
- en: During 2014 and 2015, many proofs-of-concept were developed. “Olympic” was the
    ninth and last prototype. On June 30, 2015, Ethereum went live, and the first
    “genesis block” was created.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年至2015年间，许多原型概念被开发出来。“奥林匹克”是第九个也是最后一个原型。2015年6月30日，以太坊上线，第一个“创世区块”被创建。
- en: DAO Attack (July 2016)
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DAO攻击（2016年7月）
- en: In May 2016, a Decentralised Anonymous Organisation (DAO) was created on the
    Ethereum blockchain by developers. The DAO uses a smart contract to self-govern
    and automate decisions without a typical centralized management structure. Anyone
    has the right to participate and vote regardless of their location. The first
    DAO crowd sale is very successful. It raised a record 12.7M Ether (worth around
    $150 million at the time) to fund the project.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 2016年5月，开发者在以太坊区块链上创建了一个去中心化匿名组织（DAO）。该DAO使用智能合约进行自我治理和自动化决策，没有典型的集中式管理结构。任何人都无论其位置如何都有权参与和投票。首个DAO众售非常成功。它筹集了创纪录的1270万以太币（在当时价值约1.5亿美元）来资助项目。
- en: However, on June 17, 2016, a hacker exploited some vulnerabilities in the smart
    contract of the DAO. The hacker was able to invoke the DAO smart contract to give
    the Ether back multiple times before the smart contract could update its balance.
    The hackers managed to steal more than 3.6 million ETH (worth around $50 million
    at the time).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，2016年6月17日，一名黑客利用了DAO智能合约中的某些漏洞。黑客能够多次调用DAO智能合约以在智能合约更新其余额之前退还以太币。黑客成功窃取了超过360万个ETH（在当时价值约5000万美元）。
- en: Because of the huge amount of funds lost among DAO investors, the Ethereum community
    decided to reverse the attack to refund the lost money, which lead to Ethereum
    forked into two blockchains. One is the current Ethereum blockchain. The token
    owners were given an exchange rate of 1 ETH to 100 DAO tokens, the same rate as
    the initial offering. The lost funds of the DAO investors were recovered. In September
    2016, digital exchange currencies de-listed the DAO token. In the meantime, part
    of the Ethereum community did not agree with the hard fork and decided to continue
    to maintain the old blockchain, which is now known as Ethereum Classic.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于DAO投资者损失了大量资金，以太坊社区决定回滚攻击以退款损失的资金，导致以太坊分叉成两个区块链。一个是当前的以太坊区块链。代币所有者按1 ETH兑换100
    DAO代币的汇率获得，与首次发行相同。恢复了DAO投资者的损失资金。2016年9月，数字货币交易所将DAO代币除名。与此同时，以太坊社区的一部分不同意硬分叉，决定继续维护旧区块链，现称为以太坊经典。
- en: Ethereum 2.0 (The Merge)
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以太坊2.0（合并）
- en: In recent years, the Ethereum community started to migrate from Ethereum 1.0
    to Ethereum 2.0, also known as Eth2, The Merge, or Serenity. Ethereum 1.0 was
    created based on a proof-of-work blockchain. Compared to Ethereum 1.0, 2.0 has
    several major advantages. Table [4-1](#Tab1) shows these differences.Table 4-1
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，以太坊社区开始从以太坊1.0迁移到以太坊2.0，也称为Eth2、合并或宁静。以太坊1.0是基于工作量证明区块链创建的。与以太坊1.0相比，2.0有几个主要优势。表[4-1](#Tab1)显示了这些差异。表4-1
- en: Comparing Ethereum 1.0 and 2.0
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对比以太坊1.0和2.0
- en: '|   | Ethereum 1.0 | Ethereum 2.0 |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|   | 以太坊1.0 | 以太坊2.0 |'
- en: '| --- | --- | --- |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Consensus | Uses proof-of-work (PoW) consensus. | Uses proof-of-stake (PoS)
    consensus. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 共识 | 使用工作量证明（PoW）共识。 | 使用权益证明（PoS）共识。 |'
- en: '| Speed | The network can process around 15 transactions per second (15 TPS);
    it often causes network congestion and delay. | The ETH 2.0 network will scale
    up to a potential 100,000 TPS, compared to Visa, 30,000 TPS. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 速度 | 网络每秒可以处理大约15笔交易（15 TPS）；它经常导致网络拥堵和延迟。 | 与维萨相比，以太坊2.0网络的潜在TPS可扩展到100,000，而维萨为30,000。
    |'
- en: '| Energy | Proof-of-Work requires miners to consume large amounts of computing
    power to solve a complex mathematical puzzle. | Ethereum 2.0 use PoS Consensus
    by staking its tokens as a collateral asset to check and validate the transactions
    and add block. It requires minimum hardware power, which can reduce 99% fewer
    resources than the proof of work consensus. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 能源 | 工作量证明（PoW）要求矿工消耗大量计算能力来解决一个复杂的数学难题。 | 以太坊2.0通过质押其代币作为抵押资产来检查和验证交易以及添加区块。它需要的硬件功率最小，可以比工作量证明（PoW）共识减少99%的资源。
    |'
- en: '| Security | Some powerful group of miners could control more than 50% of the
    network’s activities which could lead to vulnerabilities like a 51% attack. |
    In Ethereum 2.0, it is more decentralized. The network requires around 16,384
    validators. The user just needs to stake 32 ethers to participate in validating
    the Ethereum network. Even with less ether, users can join a mining pool that
    enables everyone to stake together and share the rewards. There are no miners
    controlling the blockchain. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 安全性 | 一些强大的矿工群体可能控制网络50%以上的活动，可能导致51%攻击等漏洞。 | 在以太坊2.0中，它更加去中心化。网络需要大约16,384个验证者。用户只需质押32个以太币就可以参与验证以太坊网络。即使以太币较少，用户也可以加入一个矿池，使大家能够一起质押并分享奖励。在区块链上没有矿工控制。
    |'
- en: '| Gas fee (transaction fees) | As the network can only handle a limited number
    of transactions per second, leading to high transaction fees known as “gas,” and
    slow transactions. Typically, avg gas fee per transaction is around $12\. With
    demand rising sharply, the gas fee could be much higher, such as $100. | The Ethereum
    2.0 uses PoS consensus to process transactions that require a nearly zero gas
    fee. So, it just charges some basic fee to avoid malicious activities on the Network.
    | There are three phases to launching Ethereum 2.0, it will take several years
    to completely roll out Ethereum 2.0 as Figure [4-1](#Fig1) shows.![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig1_HTML.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '| 燃气费（交易费）| 由于网络每秒只能处理有限数量的交易，导致所谓的“燃气费”高昂，交易缓慢。通常，每笔交易的平均燃气费约为12美元。随着需求的急剧上升，燃气费可能会很高，例如100美元。
    | 以太坊2.0使用权益证明（PoS）共识来处理几乎零燃气费的交易。因此，它只收取一些基本费用以避免网络上恶意活动。 | 启动以太坊2.0有三个阶段，如图[4-1](#Fig1)所示，完全推出以太坊2.0需要几年时间。![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig1_HTML.jpg)'
- en: An illustration of three phases of Ethereum 2.0 depicts Ethereum 1.0 to Ethereum
    2.0 from phase 0 of beacon chain, to phase 1 of merge, and lastly phase 2 of shard
    chain.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一张描绘以太坊2.0三个阶段的插图展示了从beacon链的阶段0到合并阶段的阶段1，最后到分片链阶段的2。
- en: Figure 4-1
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-1
- en: Three phases of Ethereum 2.0
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊2.0的三个阶段
- en: Phase 0 – Beacon Chain
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阶段0 – Beacon Chain
- en: Phase 0 started with the official launch of Beacon Chain in December 2020\.
    Beacon Chain builds based PoS in the Ethereum network and manages the registry
    of validators.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 阶段0始于2020年12月正式推出的Beacon Chain。Beacon Chain在以太坊网络上建立基于权益证明（PoS）并管理验证者注册表。
- en: Phase 1 – Merge
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第一阶段 – 合并
- en: The Ethereum main net merged with the Beacon Chain in this phase. It officially
    ends the POW consensus on the network and starts with PoS. On September 15, 2022,
    Ethereum switched from the original proof-of-work mechanism to proof-of-stake,
    called “the merge.” The merge reduced Ethereum’s energy consumption by ~99.95%.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，以太坊主网络与Beacon Chain合并。它正式结束了网络上的工作量证明（POW）共识并开始使用权益证明（PoS）。2022年9月15日，以太坊从原有的工作量证明机制切换到权益证明，这一过程被称为“合并”。合并减少了以太坊约99.95%的能源消耗。
- en: Users who staked Ethereum on the Beacon Chain can become validators.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在Beacon Chain上质押以太坊的用户可以成为验证者。
- en: Transactions and Dapps will continue to run the same behavior as before.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 交易和Dapp将继续以与之前相同的行为运行。
- en: Phase 2 – Shard Chain
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第二阶段 – 分片链
- en: In this phase, Shard Chains will introduce to the network. At the same time,
    the Ethereum main network will be split into 64 shards. Each shard can run a fully
    functional smart contract. The network allows each shard to communicate with each
    other.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，分片链将被引入网络。同时，以太坊主网络将被分成64个分片。每个分片都可以运行一个功能完备的智能合约。网络允许每个分片彼此之间进行通信。
- en: Getting to Know Ethereum
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解以太坊
- en: In the Bitcoin network, Bitcoin is digital gold, designed as a medium of exchange
    and a way to store value. Bitcoin provides a payment way for people who can transfer
    value from one to another using a decentralized way without a central bank. On
    the other hand, the Ethereum network is built as a Turing-complete blockchain.
    The network was built in a Turing-complete programming language called Solidity,
    which can run in the Ethereum Virtual Machine (EVM). Users can create and run
    decentralized applications (Dapps) in EVM. EVM is where all Ethereum accounts
    and smart contracts live. As the native currency in the Ethereum blockchain, Ether
    was used internally by Dapp in the Ethereum network to process transactions. For
    example, when a smart contract executes a transaction, Dapp must pay a gas fee
    (Ether) for the miner to perform mining work.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在比特币网络中，比特币被视为数字黄金，被设计为一种交换媒介和价值储存手段。比特币为人们提供了一种使用去中心化方式（没有中央银行）从一个人转移到另一个人价值的支付方式。另一方面，以太坊网络是一个图灵完备的区块链。这个网络是用一种叫做Solidity的图灵完备编程语言构建的，它可以在以太坊虚拟机（EVM）上运行。用户可以在EVM中创建和运行去中心化应用程序（Dapps）。EVM是所有以太坊账户和智能合约的所在地。作为以太坊区块链的原生货币，以太币（Ether）被Dapp在以太坊网络内部使用以处理交易。例如，当智能合约执行一个交易时，Dapp必须为矿工执行挖矿工作支付一个燃气费（以太币）。
- en: Ether (Unit)
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以太币（单位）
- en: Each blockchain has its own native currency. Similar to Bitcoin, the native
    currency is called Ether (ETH) in the Ethereum blockchain.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 每个区块链都有自己的原生货币。与比特币相似，以太坊区块链的原生货币被称为以太币（ETH）。
- en: Ether acts as the “fuel,” to pay for the execution of smart contracts on the
    EVM. When miners solve the computational puzzle, they will get Ether as a currency
    reward. Ether can also be used for payments and users can send ether to other
    users as payment.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以太币作为“燃料”，用于支付在EVM上执行智能合约的费用。当矿工解决计算谜题时，他们将获得以太币作为货币奖励。以太币也可以用于支付，用户可以将以太币发送给其他用户作为支付。
- en: 'Like the US dollar, which come in seven denominations: $1, $2, $5, $10, $20,
    $50, and $100, Ether is broken into denominations. The smallest denomination unit
    of ether is called Wei, named after a digital money and cryptography pioneer,
    Wei Dai. Wei created Crypto++ cryptographic library and invented B-money. Other
    units include a Gwei, Mwei, Kwei, microether, and milliether. They are known by
    other names as well. For example, a milliether is also called Finney, named after
    another digital money pioneer, Harold Thomas Finney II, who in 2004 implemented
    the world’s first reusable proofs of work system (RPOW) before Bitcoin. In January
    2009, Finney was the recipient of the Bitcoin network’s first transaction. Table
    [4-2](#Tab2) lists the named denominations of Ether and other units:Table 4-2'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 就像美元一样，有七种面额：$1、$2、$5、$10、$20、$50和$100，以太坊也被划分成不同的面额。以太坊最小的货币单位被称为 Wei，这个名字来源于数字货币和加密技术的先驱
    Wei Dai。Wei 创造了 Crypto++ 加密库，并发明了 B-money。其他单位包括 Gwei、Mwei、Kwei、微以太坊和毫以太坊。它们也有其他的名称。例如，毫以太坊也被称为
    Finney，这个名字来源于另一位数字货币先驱，哈罗德·托马斯·芬尼二世（Harold Thomas Finney II），他在2004年实施了世界上第一个可重用的工作量证明系统（RPOW），在比特币之前。2009年1月，芬尼收到了比特币网络的第一笔交易。表
    [4-2](#Tab2) 列出了以太坊的命名面额和其他单位：表 4-2
- en: Ether denominations and unit name
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊的货币单位和名称
- en: '| Unit Name | Value (in Wei) | Ether |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 单位名称 | 以 Wei 的值 | 以太坊 |'
- en: '| --- | --- | --- |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Wei | 1 wei | 10^(-18) ETH |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| Wei | 1 wei | 10^(-18) ETH |'
- en: '| Kilowei (Babbage) | 1,000 wei | 10^(-15) ETH |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 千 Wei（Babbage）| 1,000 wei | 10^(-15) ETH |'
- en: '| Mwei (Lovelace) | 10⁶ wei | 10^(-12) ETH |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| Mwei (Lovelace) | 10⁶ wei | 10^(-12) ETH |'
- en: '| Gwei (Shannon) | 10⁹ wei | 10^(-9) ETH |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| Gwei (Shannon) | 10⁹ wei | 10^(-9) ETH |'
- en: '| Microether (Szabo) | 10^(12) wei | 10^(-6) ETH |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 微以太坊（Szabo）| 10^(12) wei | 10^(-6) ETH |'
- en: '| Millether (Finny) | 10^(15) wei | 0.001 ETH |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 毫以太坊（Finny）| 10^(15) wei | 0.001 ETH |'
- en: '| Ether | 10^(18) wei | 1 ETH |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 以太坊 | 10^(18) wei | 1 ETH |'
- en: Gas, Gas Price, and Gas Limit
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 气体、气体价格和气体限制
- en: Like Bitcoin, Ethereum currently uses a proof-of-work (PoW) consensus mechanism.
    It required miners to compute and solve complex mathematical puzzles, verify transactions,
    and create a block of transactions to be added to the blockchain. A miner is rewarded
    with Ether (ETH). When users submit transactions, they need to pay Ether for the
    miner to execute such work.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 像比特币一样，以太坊目前使用工作量证明（PoW）共识机制。它要求矿工计算和解决复杂的数学难题，验证交易，并创建一个交易区块以添加到区块链中。矿工将获得以太币（ETH）奖励。当用户提交交易时，他们需要支付以太币以供矿工执行此类工作。
- en: According to coinwarz.com, assume you use a machine with a hash rate of 750.00
    MH/s (Megahashes per second) and 1350 power consumption in watts. You need about
    $20,000\. Assume the cost of electricity is $0.10 per kWh (depending on your location,
    the average is $0.14/kWh in the United States). It will take up to around 103
    days to mine one Ether. The current ether price is around $1100, it will take
    a while to become profitable. Figure [4-2](#Fig2) shows the result of the Ethereum
    mining calculator.![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig2_HTML.jpg)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 coinwarz.com 的数据，假设你使用一台 hash 率为 750.00 MH/s（每秒兆哈希）和 1350 瓦的电力消耗的机器。你需要大约
    $20,000。假设电费是每千瓦时 $0.10（根据你的位置，美国的平均电费是 $0.14/kWh）。挖掘一个以太坊可能需要大约 103 天。当前以太坊的价格约为
    $1100，需要一段时间才能盈利。图 [4-2](#Fig2) 显示了以太坊挖掘计算器的结果。![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig2_HTML.jpg)
- en: 3 radial gauge of mining revenue, mining fees, and electricity costs along with
    values for Ethereum mining hashrate, power consumption, electricity costs, pool
    fees, and E T H mined per hour and day.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 3 径向挖掘收入、挖掘费用和电力成本，以及以太坊挖掘哈希率、电力消耗、电力成本、池费用和每小时及每天的挖掘 E T H。
- en: Figure 4-2
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-2
- en: Ethereum mining calculator
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊挖掘计算器
- en: Gas refers to such fees required to execute a transaction on Ethereum successfully,
    that is, the fees that need to be paid to miners for processing transactions.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 燃气是指成功在以太坊上执行交易所需的费用，即需要支付给矿工处理交易的费用。
- en: One of the commonly used Ether units is Gwei. It is used to specify Ethereum
    gas prices and pay for transaction fees. For example, one Gwei is the same as
    0.000000001 ETH. If a transaction cost is 0.000000050 ETH, we can say that the
    cost was 50 Gwei.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 常用的以太坊单位之一是 Gwei。它用于指定以太坊燃气价格和支付交易费用。例如，一个 Gwei 等于 0.000000001 ETH。如果交易成本为 0.000000050
    ETH，我们可以称成本为 50 Gwei。
- en: 'In the current Ethereum blockchain, the standard transaction fee is 21,000
    Gwei. The gas fee can be calculated using the following formula:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前的以太坊区块链中，标准交易费用为 21,000 Gwei。燃气费可以使用以下公式计算：
- en: Total Fee = Gas unit (limits) * (Base fee + Tip)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 总费用 = 气体单位（限制）*（基本费用+小费）
- en: '**Gas units (limits)** – This refers to the maximum amount of gas you want
    to spend to execute a transaction.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**燃气单位（限制）** – 指的是你想用来执行交易的最大的燃气量。'
- en: '**Base fee** – It refers to a minimum amount of gas fee that requires a user
    transaction to be included in a block. The base fee amount is automatically dynamic
    and calculated by Ethereum based on market demand at any given time.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**基本费用** – 它指的是用户交易被包含在一个区块中所需要的最低的燃气费。基本费用数额是自动动态计算的，由以太坊根据任何时候的市场需求来决定。'
- en: '**Tips** – Also known as a priority fee, a miner tip. It is an optional fee,
    determined by the user and directly paid to miners. The priority fee helps your
    transaction can be picked and processed faster by the miner.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**小费** – 也被称为优先费，矿工小费。这是一个可选费用，由用户确定并直接支付给矿工。优先费帮助你的交易被矿工更快地挑选和处理。'
- en: Let’s take a real Ethereum blockchain transaction as an example (see Figure
    [4-3](#Fig3), the data is from etherscan.io) and calculate the cost of an Ethereum
    transaction today.![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig3_HTML.png)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一个真实的以太坊区块链交易为例（见图[4-3](#Fig3)，数据来自etherscan.io）来计算今天的以太坊交易成本。![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig3_HTML.png)
- en: An image represents the E T H transaction cost consisting of status, block,
    timestamp, value, transaction fees, gas price, gas limit, and gas fees.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一张图片代表了以太坊交易成本，包括状态、区块、时间戳、价值、交易费、燃气价格、燃气限制和燃气费。
- en: Figure 4-3
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-3
- en: Ethereum transaction cost (etherscan.io)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊交易成本（etherscan.io）
- en: From the preceding example, a transaction’s gas limit is 201,027 units, the
    base fee is 33.529 Gwei, and the priority fee is 1.101 Gwei; the total transaction
    fees to execute the transaction would be 0.006961 ETH (201,027* (33.529 + 1.101)
    = 2,310,000 Gwei). In the current market, one Ether is around $1100 so this transaction
    fee is about 0.006961* 1100 = $7.65.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的例子中，一个交易的燃气限制是201,027单位，基本费用是33.529 Gwei，优先费是1.101 Gwei；执行该交易的总交易费用将是0.006961
    ETH（201,027* (33.529 + 1.101) = 2,310,000 Gwei）。在当前市场上，一以太币大约是1100美元，所以这个交易费用大约是0.006961*
    1100 = 7.65美元。
- en: It’s important to note that if you pay less than the required transaction fee,
    the transaction will be reverted, and you won’t receive your gas fee back because
    the miners have done the amount of mining work to process your transaction. They
    would collect the fee for their work even if the transaction failed. On the other
    hand, if you pay more gas fees, the extra gas fee will return to you once the
    transaction is complete. In the preceding example, there is field “usage by Txn”
    indicated that only 40.21% gas fee was used, the remaining fee will return to
    the user (500,000 - 201,027 = 298,973).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，如果你支付的燃气费少于所需的交易费，交易将会被撤销，你不会收回你的燃气费，因为矿工已经完成了处理你交易的工作量。即使交易失败，他们也会为他们的劳动收取费用。另一方面，如果你支付了更多的燃气费，交易完成后，多余的燃气费将会退还给你。在前面的例子中，“Txn的用途”字段表明只有40.21%的燃气费被使用，剩余的费用将会退还给用户（500,000
    - 201,027 = 298,973）。
- en: Ethereum Account
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以太坊账户
- en: 'Each Ethereum account has an Ethereum address. Ethereum has two types of accounts:
    Externally Owned Account (EOA) and Contract Account.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 每个以太坊账户都有一个以太坊地址。以太坊有二种类型的账户：外部所有账户（EOA）和合约账户。
- en: Externally Owned Account (EOA)
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 外部所有账户（EOA）
- en: An Externally Owned Account is controlled by a public/private key pair owned
    by a user. In Chapter [2](535492_1_En_2_Chapter.xhtml), we have learned how the
    Ethereum address is derived from the public key using Keccak-256 hashes. Each
    Ethereum addresses are 42 hex string characters starting with 0x, representing
    a hexadecimal format. There is no cost to create an Ethereum account. The Externally
    Owned Account can be used for fund (Ether) transfer or send transactions to smart
    contracts. You need the private key to access your fund or send funds to other
    people.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 外部所有账户（EOA）是由用户拥有的公钥/私钥对控制的。在第[2](535492_1_En_2_Chapter.xhtml)章中，我们学习了如何通过使用Keccak-256散列从公钥派生出以太坊地址。每个以太坊地址都是42个十六进制字符的串，以0x开头，代表十六进制格式。创建以太坊账户没有成本。外部所有账户可以用于资金（以太币）转移或向智能合约发送交易。你需要私钥来访问你的资金或向其他人发送资金。
- en: Contract Account (CA)
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 合约账户（CA）
- en: A contract account is controlled by code executed by the Ethereum Virtual Machine.
    These codes are typically referred to as the smart contract code. Creating a contract
    account is costly because it will use network storage. A contract account can
    do Ether transfers and create Smart Contract accounts.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 合约账户由以太坊虚拟机执行的代码控制。这些代码通常被称为智能合约代码。创建合约账户是昂贵的，因为它将使用网络存储。合约账户可以进行以太币转账和创建智能合约账户。
- en: Figure [4-4](#Fig4) highlights the USDT token smart contract creator address,
    which is a contract account:![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig4_HTML.png)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图[4-4](#Fig4) 突出了USDT代币智能合约创建者地址，这是一个合约账户：![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig4_HTML.png)
- en: A screenshot of the U S D T contract account with many fields. On left, contract
    overview lists values of balance, ether value, and token. On the right, more info
    lists status of My name tag, contract creator, and token tracker. On top right
    is 4 pop-up buttons.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一个USDT合约账户带有许多字段的屏幕截图。在左边，合约概要列出余额、以太币价值和代币。在右边，更多信息列出我的名字标签、合约创建者和代币追踪器的状态。在右上角是4个弹出按钮。
- en: Figure 4-4
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-4
- en: USDT Contract account (etherscan.io)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: USDT合约账户（etherscan.io）
- en: 'All accounts have four common fields:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 所有账户都有四个公共字段：
- en: '**Nonce** – Each address has a nonce, which represents the transaction count
    of an account. Different account addresses can have the same nonce. The number
    used in nonce is unique to prevent double-spending situations.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**nonce**——每个地址都有一个nonce，代表一个账户的交易计数。不同的账户地址可以有相同的nonce。nonce中使用的数字是唯一的，以防止双重花费的情况。'
- en: '**Balance** – It is the Ether owned by this account.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**余额**——该账户拥有的以太币。'
- en: '**Storage hash** – Sometimes it is called storageRoot. Each Ethereum contract
    account has its own storage trie (ordered tree data structure) where the contract
    data is present. StorageRoot is a Merkle Patricia trie of the current contact
    state as a mapping between 32-byte integers. A 256-bit hash value is calculated
    based on these contract data. The hash value will change anytime when its state
    charges. It could be used to verify the past state. Storage hash is only for contract
    accounts. Figure [4-5](#Fig5) represents Ethereum account storageRoot.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储哈希**——有时它被称为存储根。每个以太坊合约账户都有自己的存储树（有序树数据结构），其中包含合约数据。存储根是当前合约状态的Merkle Patricia树，它是一个32字节整数之间的映射。基于这些合约数据计算出一个256位的哈希值。当其状态发生变化时，哈希值会随时改变。它可以用来验证过去的状态。存储哈希只适用于合约账户。图[4-5](#Fig5)
    表示以太坊账户的存储根。'
- en: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig5_HTML.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig5_HTML.png)'
- en: Account storage trie has circular diagram with of root node divided into 2 blocks
    and those 2 blocks divided into 2 blocks. Root node leads to storageRoot.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 账户存储树有一个带有根节点分为2个区块的循环图，这2个区块再分为2个区块。根节点指向存储根（storageRoot）。
- en: Figure 4-5
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-5
- en: Ethereum account storageRoot
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊账户存储根
- en: '**Code hash** – It refers to your contract’s code under this account on the
    EVM. It’s immutable.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码哈希**——它指的是在EVM上此账户下的合约代码。它是不可变的。'
- en: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig6_HTML.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig6_HTML.png)'
- en: A rectangular block of Ethereum account has blocks of account address 1 to n.
    Account address 1 leads to account state that has 4 text circles for nonce, balance,
    storage hash, and code hash. Storage and code hash leads to E V M account and
    code respectively.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊账户的矩形块有账户地址1到n的区块。账户地址1指向具有nonce、余额、存储哈希和代码哈希的4个文本圆圈的账户状态。存储和代码哈希分别指向EVM账户和代码。
- en: Figure 4-6
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-6
- en: Ethereum account structure
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊账户结构
- en: Smart Contract
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 智能合约
- en: A contract is a written and oral arrangement between two or more parties to
    do certain things.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 合同是两个或更多方之间达成的书面和口头协议，以执行某些事情。
- en: 'Here are just a few examples in our everyday life:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们日常生活中的一些例子：
- en: '**House rental contract** – A lease agreement between a landlord who rents
    a property to a tenant in exchange for monthly payments.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**房屋租赁合同**——房东将物业出租给租户，以换取月付款的租赁协议。'
- en: '**Landscaping contract** – An obligation between the landscaper and the client.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**景观合约**——景观设计师与客户之间的义务。'
- en: '**Software license agreements** – An agreement between the software company
    and customers to offer the right to use software legally.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件许可协议**——软件公司与客户之间为了合法使用软件而达成的协议。'
- en: '**Personal loan** – A written agreement between a lender that lends money to
    a borrower in exchange for a refund plus interest.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**个人贷款** - 贷款人向借款人提供资金，并以退款加利息的形式进行交换的书面协议。'
- en: An effective contract will describe the formal requirements in detail, the responsibilities
    each party must follow, when and how contract items ought to be performed, and
    what happens when these rules are not followed. As a result, contracts act as
    a reliable document for each party expected to meet as planned.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有效的合约将详细描述正式要求，各方必须遵守的责任，合同项目应何时何地执行，以及当这些规则不被遵守时会发生什么。因此，合约成为各方计划相遇的可靠文档。
- en: Smart contracts are very similar, but the contracts are implemented for these
    detailed agreements by using computer code. They can’t be changed once created
    in a decentralized blockchain network. When the conditions are met, smart contracts
    will be executed automatically instead of by a third party. Since blockchain is
    decentralized, immutable, and transparent, everyone in the network can publicly
    verify the smart contract transaction result.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约非常相似，但是这些详细的协议是通过使用计算机代码来实施的。一旦在去中心化的区块链网络上创建，它们就无法更改。当条件满足时，智能合约会自动执行，而不是由第三方执行。由于区块链是去中心化、不可篡改且透明的，网络中的每个人都可以公开验证智能合约的交易结果。
- en: Nick Szabo was the first person to describe smart contracts. He published a
    paper *The Idea of Smart Contracts* in 1997\. He imagined converting contracts
    into code to achieve self-enforcing contracts that removed the need for trust
    among the parties. To illustrate his concept, Nick used a vending machine to explain
    how smart contracts work. When you insert the correct amount of money into the
    machine, you get the desired product. The software instructions inside the vending
    machine guarantee that the contract will be fulfilled as intended. Today, this
    idea has now spread all over the world.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 尼克·萨博（Nick Szabo）是第一个描述智能合约的人。他在1997年发表了一篇论文《智能合约的理念》。他设想将合同转换为代码，以实现自我执行的合同，从而消除了各方之间的信任需求。为了说明他的概念，尼克使用自动售货机来解释智能合约是如何工作的。当你向机器投入正确的金额时，你会得到想要的产品。自动售货机内部的软件指令保证合同将按预期履行。如今，这个想法已经遍布全球。
- en: Ethereum is the most popular smart contract platform. Anyone can create smart
    contracts in the blockchain. The code is transparent and publicly verifiable.
    Everyone can see what kind of implementation logic is for smart contracts. Here
    is an example of SHIBA INU from etherscan.io.![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig7_HTML.png)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊是最受欢迎的智能合约平台。任何人都可以在区块链上创建智能合约。代码是透明的，可以公开验证。每个人都可以看到智能合约的实现逻辑是怎样的。以下是来自etherscan.io的SHIBA
    INU示例！[](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig7_HTML.png)
- en: A screenshot of the ethereum S H I B A I N U contract depicts a token application
    of the overview field select contract, and profile summary. At the top right there
    are 4 drop down icons.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊S H I B A I N U合约的屏幕截图展示了一个概览字段选择合约和资料概要的代币应用。右上角有4个下拉图标。
- en: Figure 4-7
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-7
- en: Ethereum SHIBA INU contract example
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊SHIBA INU合约示例
- en: In Ethereum, smart contracts are written in a variety of programming languages,
    including Solidity and Vyper. Solidity is the most popular Smart contract language
    used in Ethereum as we will explore more in a later section.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊中，智能合约是用多种编程语言编写的，包括Solidity和Vyper。Solidity是以太坊中最受欢迎的智能合约语言，我们将在后面的章节中进一步探索。
- en: Each network computer node stores a copy of all existing smart contract codes
    and their current state alongside transaction data. A user is typically required
    to pay a gas fee to execute the function of the smart contract and include the
    transaction in a new block.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 每个网络计算机节点都存储了所有现有智能合约代码及其当前状态的副本，以及交易数据。用户通常需要支付燃料费以执行智能合约的功能并将交易包含在新的区块中。
- en: Ethereum Virtual Machine (EVM)
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ethereum虚拟机（EVM）
- en: A “Virtual Machine” or “VM” is a simulated computer system you can use to run
    software on a physical computer. Virtual machines are essentially establishing
    an isolate level between a simulated computer system and the running operation
    system like Windows, macOS, or Linux. For instance, using “Parallels Desktop for
    Mac,” you can run Windows on your Apple Mac computer, as shown in Figure [4-8](#Fig8).![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig8_HTML.jpg)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: “虚拟机”或“VM”是一个你可以在物理计算机上运行软件的模拟计算机系统。虚拟机本质上是在模拟计算机系统和运行操作系统如Windows、macOS或Linux之间建立一个隔离层。例如，使用“Parallels
    Desktop for Mac，”你可以在你的苹果Mac电脑上运行Windows，如图 [4-8](#Fig8) 所示。![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig8_HTML.jpg)
- en: An image of a laptop showing windows running on a Mac laptop. Menu bar is in
    the top left corner and status bar is in the top right corner. 15 icons are present
    in the bottom row.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一张显示运行在Mac笔记本上的Windows操作系统的笔记本电脑图片。菜单栏在左上角，状态栏在右上角。底部有15个图标。
- en: Figure 4-8
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-8
- en: VM example – Window runs on Mac
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机示例 - Windows在Mac上运行
- en: The Ethereum Virtual Machine (EVM) is a Turing-complete virtual machine that
    allows EVM Byte Code runs on an isolated and sandboxed runtime environment. Bytecode
    is compiled from a high-level smart contract programming language such as Solidity.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊虚拟机（EVM）是一个图灵完备的虚拟机，它允许EVM字节码在一个隔离的沙盒化运行环境中运行。字节码是由Solidity等高级智能合约编程语言编译而成的低级二进制机器码。
- en: On Ethereum, smart contracts are typically written in a high-level programming
    language called Solidity. Solidity compiler compiles smart contract into low-level
    binary machine code (Bytecode). A user just needs to send an Ethereum transaction
    containing these Bytecodes, and this transaction doesn’t need to specify any recipient.
    Once the contract transaction is committed to the blockchain, a new Ethereum account
    is created. The contract account stores the contract balance, the contract nonce,
    the code, and the data. The contract account storage hash is effectively a hash
    of the smart contract’s data. The creation of a contract address is determined
    based on the sender’s EOA address and nonce. RLP encoded nonce and EOA address
    data and hashed with keccak-256 algorithm. RLP (Recursive Length Prefix) is the
    way of encoding arbitrarily nested arrays of binary data. When you call a smart
    contract function, you interact with this contract address, and the contract storage
    Opcode will instruct EVM to execute the operation. The contract deployment process
    is illustrated in Figure [4-9](#Fig9).![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig9_HTML.png)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊上，智能合约通常是用名为Solidity的高级编程语言编写的。Solidity编译器将智能合约编译成低级的二进制机器码（字节码）。用户只需发送一个包含这些字节码的以太坊交易，而这个交易不需要指定任何接收者。一旦合约交易被提交到区块链，就会创建一个新的以太坊账户。合约账户存储合约余额、合约nonce、代码和数据。合约账户存储哈希实际上是智能合约数据的哈希。合约地址的创建是基于发送者的EOA地址和非ce。RLP编码的非ce和EOA地址数据与keccak-256算法进行哈希。RLP（递归长度前缀）是编码任意嵌套的二进制数据数组的方式。当你调用智能合约函数时，你与这个合约地址进行交互，合约存储操作码将指导EVM执行操作。合约部署过程如图
    [4-9](#Fig9) 所示。![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig9_HTML.png)
- en: A flow chart from a human figure flows through E O A, smart contract, bytecode
    and O P C O D E, contract address, and block diagram of E V M.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一个人形图从E O A流向智能合约、字节码和O P C O D E、合约地址以及E VM的流程图。
- en: Figure 4-9
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-9
- en: Smart contract deployment
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约部署
- en: Once the contract is compiled, the compiler will generate Abi, Bytecode, and
    Opcode. ABI (Application Binary Interface) is a JSON (JavaScript Object Notation)
    file that describes the deployed contract and its functions. It allows us to call
    contract functions externally. Bytecode and Opcode (operation code) are compact
    binary representations. They are stored on the blockchain and associated with
    a contract address.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦合约被编译，编译器将生成Abi、字节码和操作码。ABI（应用程序二进制接口）是一个描述部署的合约及其功能的JSON（JavaScript对象表示法）文件。它允许我们外部调用合约函数。字节码和操作码（操作码）是紧凑的二进制表示。它们存储在区块链上，并与合约地址相关联。
- en: EVM runtime environment will interpret Bytecode to correspond to a series of
    Opcode as a set of instructions and execute the Opcode when the user calls smart
    contracts. Figure [4-10](#Fig10) shows compiled contract Bytecode and Opcode example.![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig10_HTML.png)
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户调用智能合同时，EVM运行环境将解释字节码以对应一系列操作码作为一组指令，并执行操作码。图4-10展示了编译的合约字节码和操作码示例。![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig10_HTML.png)
- en: The bytecode and opcodes. They begin with object and opcodes respectively. The
    codes consist of numbers and alphabets.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 字节码和操作码。它们分别以对象和操作码开头。代码由数字和字母组成。
- en: Figure 4-10
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-10
- en: Solidity compiled Bytecode and Opcode example
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Solidity编译的字节码和操作码示例
- en: You can find the Opcodes reference for each Bytecode from Ethereum’s official
    website ([https://ethereum.org/en/developers/docs/evm/opcodes/](https://ethereum.org/en/developers/docs/evm/opcodes/)).
    There are around 148 unique Opcodes, which enable EVM to compute almost any task
    to make it a Turing-complete machine.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从以太坊官方网站找到每个字节码的操作码参考（[https://ethereum.org/en/developers/docs/evm/opcodes/](https://ethereum.org/en/developers/docs/evm/opcodes/)）。大约有148个独特的操作码，这使得EVM能够计算几乎任何任务，使其成为图灵完备机器。
- en: 'The Opcodes can be divided into the following categories:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 操作码可以分为以下几类：
- en: Arithmetic operations, comparison, and bitwise logic operations (ADD, SUB, GT,
    LT, AND, OR, etc.)
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 算术运算、比较和位逻辑运算（ADD, SUB, GT, LT, AND, OR等）
- en: Execution context inquiries (CALL, DELEGATECALL, CALLCODE, etc.)
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行上下文查询（CALL, DELEGATECALL, CALLCODE等）
- en: Stack, memory, and storage access (POP, PUSH, UP, SWAP, LOAD, STORE, MSSTORE
    8, M SIZE, etc.)
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 栈、内存和存储访问（POP, PUSH, UP, SWAP, LOAD, STORE, MSSTORE 8, M SIZE等）
- en: Control flow operations (STOP, RETURN, REVERT, etc.)
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制流运算（STOP, RETURN, REVERT等）
- en: Logging, calling, and other operators (LOG0, LOG1, LOG2, etc.)
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志记录、调用和其他操作符（LOG0, LOG1, LOG2等）
- en: 'Let’s use the preceding Bytecode example to simulate EVM interpreter. We will
    focus on the first 16 bytes of the contract Bytecode: 6080604052348015\. Based
    on Opcode reference, we can translate Bytecode to Opcode, as shown in Table [4-3](#Tab3).Table
    4-3'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用前面的字节码示例来模拟EVM解释器。我们将关注合约字节码的前16个字节：6080604052348015。根据操作码参考，我们可以将字节码翻译为操作码，如表4-3所示。表4-3
- en: Bytecode to Opcode conversion (6080604052348015)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 字节码到操作码转换（6080604052348015）
- en: '| Bytecode | Opcode | Reference(Opcode, Name) | Description | Gas |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| 字节码 | 操作码 | 参考（操作码，名称） | 描述 | 燃料 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| 60 80 | PUSH1 0x80 | 0x60 = PUSH1, | Duplicate 1st stack item | 3 |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| 60 80 | PUSH1 0x80 | 0x60 = PUSH1, | 复制栈顶元素 | 3 |'
- en: '| 60 40 | PUSH1 0x40 | 0x60 = PUSH1 | Duplicate 1st stack item | 3 |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 60 40 | PUSH1 0x40 | 0x60 = PUSH1 | 复制栈顶元素 | 3 |'
- en: '| 52 | MSTORE | 0x52 = MSTORE | Save word to memory | 3* |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| 52 | MSTORE | 0x52 = MSTORE | 将单词保存到内存中 | 3* |'
- en: '| 34 | CALLVALUE | 0x34 = CALLVALUE | Get deposited value by the instruction
    | 2 |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| 34 | CALLVALUE | 0x34 = CALLVALUE | 通过指令获取存款值 | 2 |'
- en: '| 80 | DUP1 | 0x80 = DUP1 | Duplicate 1st stack item | 3 |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| 80 | DUP1 | 0x80 = DUP1 | 复制栈顶元素 | 3 |'
- en: '| 15 | ISZERO | 0x15 = ISZERO | Simple NOT operator | 3 |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| 15 | ISZERO | 0x15 = ISZERO | 简单的不操作符 | 3 |'
- en: 'The EVM is a simple stack-based execution machine that will execute Opcode
    instructions. Stack (sometimes called a “push-down stack”) is a linear collection
    of items where the new element is inserted into the last position (referred to
    as the “top”), and the removal of existing items always takes place at the top
    position. It is also called Last In First Out (LIFO). In the preceding interpreted
    Opcode example, we will expect EVM will execute standard stack operations sequentially:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊虚拟机（EVM）是一个简单的基于栈的执行机器，将执行操作码指令。栈（有时被称为“压栈”）是一种线性集合，新元素插入到最后位置（称为“顶部”），现有元素的移除总是在顶部位置进行。它也被称为后进先出（LIFO）。在前面的解释操作码示例中，我们期望EVM将按顺序执行标准栈操作：
- en: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figa_HTML.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figa_HTML.jpg)'
- en: A flow diagram of bytecode to opcode conversion in a text-form with step-by-step
    process.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 一个以文本形式展示字节码到操作码转换的流程图，带有逐步过程。
- en: EVM stack has a depth of *1024* items, each item contains a 256-bit (32 bytes)
    word or 32 chunks where each chunk is 8-bit (1 byte) size. The reason for 256
    bits is mainly to apply the Keccak-256 cryptographic hash function to any number
    of inputs and convert it to a unique 256 bits hash. In EVM, contract can store
    and read data in the above items. The EVM has three places where it can store
    items—storage, memory, and stack.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: EVM堆栈深度为*1024*项，每项包含一个256位（32字节）单词或32个块，每个块大小为8位（1字节）。256位的主要原因主要是为了对任意数量的数据应用Keccak-256加密哈希函数，并将其转换为唯一的256位哈希。在EVM中，合约可以在上述项中存储和读取数据。EVM有三个可以存储项的地方——存储、内存和堆栈。
- en: Memory is the location to hold temporary values for the short term. It will
    be erased between smart contract function calls.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 内存是用于短期保存临时值的位置。它将在智能合约函数调用之间被清除。
- en: When reading data from memory, EVM will use MLOAD. To write 32 bytes (256-bit)
    of data, Opcode MSTORE will be used. When writing 1 byte (8-bit) of data, EVM
    will use MSTORE8\. Figure [4-11](#Fig11) represents how EVM uses Opcode to read
    and write contract memory.![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig11_HTML.png)
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当从内存中读取数据时，EVM将使用MLOAD。要写入32字节（256位）的数据，将使用MSTORE Opcode。当写入1字节（8位）的数据时，EVM将使用MSTORE8。图[4-11](#Fig11)表示EVM如何使用Opcode读取和写入合约内存。![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig11_HTML.png)
- en: A block diagram consists of stacked blocks of memory with push and pop. It has
    the label E V M stack. Inward and outward arrows label M S T O R E and M L O A
    D respectively.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 块图由堆叠的内存块组成，带有推和拉操作。它有标签E VM堆栈。内向和外向箭头分别标记为M S T O R E和M L O A D。
- en: Figure 4-11
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-11
- en: Opcode read and write contract memory
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Opcode读写合约内存
- en: Storage is where you save data permanently. When a smart contract running in
    EVM uses permanent storage, these data will be part of the Ethereum state. You
    can consider storage as an array in which each array item is 256 bits (32 bytes).
    There are no fees for externally reading the storage value. However, it is very
    expensive to write data into storage, Opcode is SSTORE and the current cost per
    one 32-byte word is 20,000 Gas. Let’s look at how much it costs.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 存储是您永久保存数据的地方。当在EVM中运行的智能合约使用永久存储时，这些数据将成为以太坊状态的一部分。您可以将存储视为一个数组，其中每个数组项都是256位（32字节）。外部读取存储值没有费用。然而，将数据写入存储非常昂贵，Opcode是SSTORE，当前每个32字节单词的成本是20,000
    Gas。我们来看看这需要多少钱。
- en: First, convert gas (Gwei) to ETH - 20,000 * 0.000000001 ETH = 0.00002 ETH,
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将gas（Gwei）转换为ETH - 20,000 * 0.000000001 ETH = 0.00002 ETH，
- en: 'Then, calculate cost: $1100*0.00002 = $0.022.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，计算成本：$1100*0.00002 = $0.022。
- en: Writing to storage is more than 6000x the cost compared to writing to memory.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据写入存储的成本比写入内存的成本高出超过6000倍。
- en: In the previous table (Table [4-3](#Tab3)), we list the first few steps of Opcode
    instruction with gas cost, and every Opcode has its own base gas cost. All Ethereum
    contract executions are run publicly. Attackers could create a contract to perform
    massive, expensive operations (DDoS – Distributed Denial of Service attack) to
    slow down the Ethereum network. By including gas cost in each EVM Opcode execution,
    the Ethereum network can prevent such attacks.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的表格（表[4-3](#Tab3)）中，我们列出了Opcode指令的前几个步骤及其gas成本，每个Opcode都有自己的基础gas成本。所有的以太坊合约执行都是公开运行的。攻击者可以创建一个合约来执行大量昂贵的操作（DDoS
    – 分布式拒绝服务攻击），从而减慢以太坊网络的速度。通过在每次EVM Opcode执行中包含gas成本，以太坊网络可以防止此类攻击。
- en: Ethereum Nodes
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以太坊节点
- en: On the Internet, any system or device connected to the network is also called
    a node. The same goes for a blockchain network. When a node is connected to the
    Ethereum network, it will download a copy of the blockchain data and participate
    in the network, communicating with other nodes. Based on etherscan.io data, around
    4,131,021 nodes are connected to the Ethereum network.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网上，任何连接到网络的系统或设备也称为节点。区块链网络也是如此。当一个节点连接到以太坊网络时，它会下载区块链数据的一个副本并参与网络，与其他节点进行通信。根据etherscan.io的数据，大约有4,131,021个节点连接到以太坊网络。
- en: 'There are three types of nodes: full nodes, archive nodes, and light nodes.
    Each type of node consumes data differently.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 节点分为三种类型：完整节点、归档节点和轻节点。每种类型的节点消耗数据的方式不同。
- en: Full Node
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 完整节点
- en: Full nodes will store all the recent blockchain data, run their own EVM environment,
    and can operate EVM instructions. They can be helpful when participating in blockchain
    transaction validation and maintaining the current state of the blockchain. When
    transactions in a new block do not comply with the rules defined in the Ethereum
    specifications, they will be discarded. For example, if Alice sends 50 ETH to
    Bob, but Alice’s account doesn’t have enough ether or pays a very little gas fee
    when a full node verifies transactions, it will mark this transaction as invalid
    and revert it. A full node can directly deploy a smart contract and interact with
    any smart contract in the network.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 全节点将存储所有最近的区块链数据，运行自己的EVM环境，并可以操作EVM指令。它们在参与区块链交易验证和维护区块链当前状态时会有帮助。当新区块中的交易不符合以太坊规范中定义的规则时，它们将被丢弃。例如，如果Alice向Bob发送50
    ETH，但当全节点验证交易时Alice的账户没有足够的以太币或支付了非常少的燃料费，它将把这个交易标记为无效并回滚它。全节点可以直接部署智能合约并与网络上的任何智能合约互动。
- en: A full node stores a limited number of most recent blocks. The default is 128
    (or 64 if you use the fast sync option). Each Ethereum block is typically around
    80KB in size or around 4 MB in ten minutes. The 128 blocks are about a recent
    one week of trace data. When you query historical block data that is not accessible
    from a full node, you will generally get the “Missing trie node” error. The error
    means you need an archive node.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 全节点存储最近的一小部分区块。默认情况下是128个（如果你使用快速同步选项则是64个）。每个以太坊区块通常大小约为80KB，或者在十分钟内约为4 MB。128个区块大约是一周的追踪数据。当你查询无法从全节点访问的历史区块数据时，你通常会得到“缺失trie节点”错误。这个错误意味着你需要一个归档节点。
- en: When a full node is the first time connected to the network, syncing full node
    data can be very time-consuming, it may take weeks to sync! After that node needs
    to stay online for block data upgrade and maintenance. Otherwise, it has to repeat
    the full synchronization process. It typically takes 13 seconds to create a new
    block. When new data arrives, a full node could delete old blockchain data to
    conserve disk space.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个全节点第一次连接到网络时，同步全节点数据可能非常耗时，可能需要几周时间来同步！此后，节点需要保持在线以进行区块数据升级和维护。否则，它必须重复全同步过程。创建新区块通常需要13秒。当新数据到达时，全节点可以删除旧的区块链数据以节省磁盘空间。
- en: 'Hardware requirements to run a full node with fast sync:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 运行具有快速同步的全节点的硬件要求：
- en: Fast CPU with 4+ cores
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 配备4+核心的快速CPU
- en: 16 GB+ RAM
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 16 GB+的RAM
- en: Fast SSD with at least 500 GB of free space
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 至少拥有500 GB免费空间的快速SSD
- en: 25+ MBit/s bandwidth
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 25+ MBit/s带宽
- en: Archive Node
  id: totrans-184
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 归档节点
- en: Archive nodes run with a special configuration called “archive mode.” Archive
    nodes will store all the blockchain data since the genesis block. It also builds
    an archive of historical states.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 归档节点运行在一种特殊的配置下，称为“归档模式”。归档节点将存储从创世区块以来的所有区块链数据，并构建一个历史状态的归档。
- en: Current archive Ethereum blockchain sizes are ~12 TB.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的归档以太坊区块链大小约为12 TB。
- en: Typically, in most cases, we don’t need archive node data. A full node can provide
    most data, such as check account balances, transfer funds, etc. But sometimes,
    you may need to check last year’s account balance, assets you owned, or transactions.
    The full node prunes data periodically and only stores the most recent 128 blocks
    of data (about 25 minutes). The node has to resync to get earlier data, which
    would be too slow to extract. The archive node has all data locally, which can
    quickly get past data.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在大多数情况下，我们不需要归档节点数据。全节点可以提供大部分数据，比如检查账户余额、转账资金等。但有时，你可能需要查看去年的账户余额、你所拥有的资产或交易。全节点会定期修剪数据，只存储最近128个区块的数据（大约25分钟）。节点必须重新同步以获取更早的数据，这样提取速度会太慢。归档节点本地拥有所有数据，可以快速获取过去的数据。
- en: Archive node data are often used for blockchain services such as block explorers,
    data analysis, etc. Syncing full archive node data will be much longer than full
    node syncing. It may take at least one month.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 归档节点数据通常用于区块链服务，如区块链浏览器、数据分析等。同步全归档节点数据将比全节点同步要长得多。至少需要一个月的时间。
- en: 'These are the hardware requirements to run a full archive node:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 运行全归档节点所需的硬件要求：
- en: Fast CPU with 4+ cores.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 配备4+核心的快速CPU。
- en: 16 GB+ of RAM.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 16 GB+的RAM。
- en: Fast SSD drive with at least 6 TB+ of space.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 至少6 TB+空间的快速SSD驱动器。
- en: 25 MBit/s+ bandwidth.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 25 MBit/s+带宽。
- en: Light Node
  id: totrans-194
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 轻节点
- en: Light nodes only download the minimum block headers information and use it to
    verify the data validity by checking the state roots in the block headers. Light
    nodes are designed to interact with full nodes as intermediaries and rely on full
    nodes to perform blockchain operations, from requesting account balance to smart
    contract interaction. So, light nodes don’t need to keep running online and store
    large amounts of Gigabytes of data locally. Light nodes can be very useful for
    running on low memory and computational devices, like mobile, IoT devices, and
    laptops.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 轻节点只下载最小的区块头信息，并使用它通过检查区块头中的状态根来验证数据的有效性。轻节点被设计为与完整节点作为中介交互，并依赖完整节点执行区块链操作，从请求账户余额到智能合约交互。因此，轻节点无需保持在线并本地存储大量GB数据。轻节点对于在低内存和计算设备上运行非常有用，例如移动设备、IoT设备和笔记本电脑。
- en: Ethereum Clients
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以太坊客户端
- en: 'As we just learned, Light Clients are mostly implemented on mobile devices.
    Although setting up a full node or archive node will take a long time to sync,
    there are multiple benefits to running your own node:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们刚刚学到的，轻客户端主要是在移动设备上实现的。尽管设置一个完整节点或归档节点需要很长时间来同步，但运行您自己的节点有多个好处：
- en: '1.'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: Your node can be a network validator to verify all the transactions and blocks.
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您的节点可以作为一个网络验证者来验证所有的交易和区块。
- en: '2.'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: You can verify your application client transaction data by yourself, without
    the need for a third party to verify a transaction—“Don’t Trust. Verify.”
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以自行验证您的应用程序客户端交易数据，无需第三方验证交易——“不要信任。验证。”
- en: '3.'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: You will have a consistent view of the current network state and not need to
    rely on other public nodes or services where data could be delayed or untrusted.
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将拥有当前网络状态的一致视图，并且不需要依赖其他公共节点或服务，这些服务中的数据可能会延迟或不值得信任。
- en: '4.'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: You have more data privacy. When you use third-party software or tool to submit
    a transaction, these services could read your IP address along with your account
    information. IP addresses will reveal your current location.
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将拥有更多的数据隐私。当您使用第三方软件或工具提交交易时，这些服务可能会读取您的IP地址以及您的账户信息。IP地址会暴露您当前的位置。
- en: To sync and communicate to the Ethereum network, you need to install Ethereum
    client software. The most used Ethereum clients are Geth. etherscan.io show that
    90.3% of Ethereum node install Geth as an Ethereum client to join the network
    and establish a p2p communication channel with other nodes. Diagram [4-12](#Fig12)
    shows overall Ethereum client usage.![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig12_HTML.jpg)
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与以太坊网络同步并进行通信，您需要安装以太坊客户端软件。最常用的以太坊客户端是Geth。etherscan.io显示，90.3%的以太坊节点安装Geth作为以太坊客户端来加入网络并与其他节点建立p2p通信通道。图[4-12](#Fig12)显示了总体以太坊客户端使用情况。![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig12_HTML.jpg)
- en: A pie chart consists of overall ETM client usage. The most used ETM clients
    are Geth at 90.3%. 8 other clients are estimated.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 饼图包括总体ETM客户端使用情况。最常用的ETM客户端是Geth，占90.3%。还有8个其他客户端有待估计。
- en: Figure 4-12
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-12
- en: Overall Ethereum client usage
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 总体以太坊客户端使用情况
- en: Geth (Go Ethereum) is an open source command line interface (cli) for running
    an Ethereum node written in Google’s programming language Go.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Geth（Go Ethereum）是用谷歌的编程语言Go编写的开源命令行界面（cli），用于运行以太坊节点。
- en: The Ethereum community built and maintained Go Ethereum.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊社区构建并维护了Go Ethereum。
- en: Using Geth allows the node to perform transactions, mining, transfer ether between
    accounts, and deploy and interact with smart contracts on the Ethereum blockchain.
    Geth can be directly downloaded from Geth’s official website—[https://geth.ethereum.org/downloads/](https://geth.ethereum.org/downloads/).
    The site provides a standard installation guide.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Geth可以让节点执行交易、挖矿、在账户之间转移以太币，以及在以太坊区块链上部署和与智能合约交互。您可以直接从Geth的官方网站[https://geth.ethereum.org/downloads/](https://geth.ethereum.org/downloads/)下载Geth。该网站提供了一个标准的安装指南。
- en: Once installed Geth, you can run Geth in sync mode to become a full, light,
    archive node.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了Geth，您可以以同步模式运行Geth，以成为完整、轻、归档节点。
- en: 'Geth command to sync full node:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Geth同步完整节点的命令：
- en: geth --syncmode full
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: geth --syncmode full
- en: When sync mode is a full mode, Geth will download all blocks and replay all
    transactions from the genesis block. The state for full nodes will keep the last
    128 blocks in memory.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 当同步模式为完整模式时，Geth将下载所有区块并从创世区块重新播放所有交易。对于完整节点，将保持最后128个区块在内存中。
- en: 'Geth command to sync light node:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Geth同步轻节点的命令：
- en: geth --syncmode light
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: geth --syncmode light
- en: When sync mode is a light mode, Geth will download the most recent 2,300 blocks
    and replay related transactions. As a result, the sync process for light mode
    is much faster than in full mode.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当同步模式为轻量级模式时，Geth将下载最近的2300个区块并重放相关交易。因此，轻量级模式的同步过程比完整模式快得多。
- en: 'Geth command to sync archive node:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: Geth同步归档节点的命令：
- en: syncmode full --gcmode archive
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: syncmode full --gcmode archive
- en: Geth will download all blocks and replay all transactions from the genesis block
    and write all intermediate states to the archive disk.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Geth将下载所有区块并从创世区块重新播放所有交易，并将所有中间状态写入归档磁盘。
- en: There are many other Ethereum clients that are available in the Ethereum community.
    These clients are developed by different teams and implemented in different programming
    languages. All of these clients are actively used in the industry. Table [4-4](#Tab4)
    summarizes the different client’s usage.Table 4-4
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊社区还有许多其他的以太坊客户端。这些客户端由不同的团队开发，并用不同的编程语言实现。所有这些客户端都在行业中得到积极使用。表[4-4](#Tab4)总结了不同客户端的使用情况。表4-4
- en: Ethereum clients
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊客户端
- en: '| Client | Programing language | Disk size (fast sync) | Disk size (full archive)
    |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| 客户端 | 编程语言 | 磁盘大小（快速同步） | 磁盘大小（完整归档） |'
- en: '| --- | --- | --- | --- |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Geth | Go | 400 GB+ | 6 TB+ |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| Geth | Go | 400 GB+ | 6 TB+ |'
- en: '| OpenEthereum | Rust | 280 GB+ | 6 TB+ |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| OpenEthereum | Rust | 280 GB+ | 6 TB+ |'
- en: '| Besu | Java | 750 GB+ | 5 TB+ |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| Besu | Java | 750 GB+ | 5 TB+ |'
- en: '| Nethermind | C#, .NET | 200 GB+ | 5 TB+ |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| Nethermind | C#, .NET | 200 GB+ | 5 TB+ |'
- en: Geth has a JavaScript console built using the GoJa JS Virtual Machine.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: Geth有一个使用GoJa JS虚拟机构建的JavaScript控制台。
- en: 'Geth has a built-in JavaScript console and supports all standard web3 JSON-RPC
    APIs, called web3\. js, which is compatible with ECMAScript 5.1\. You can use
    JSON-RPC APIs to interact with your node. Geth supports multiple ways to let client
    applications send raw JSON objects to the node. One of the most widely used protocols
    is called JSON-RPC over HTTP. JSON stands for JavaScript Object Notation. It is
    an open standard file format that transmits data between a server and web application.
    The data are in key/value pairs separated by a comma in the JSON file. Here is
    an example:{    ''name'': ''Alice'',    ''gender'': ''Female'',    ''account'':
    12345}RPC stands for “Remote Procedure Call” and is used for other remote system
    processes. When client applications use JSON-RPC over HTTP to send JSON data to
    Geth, Geth will execute specific tasks provided by Web3 API in the blockchain.
    Web3 is run on top of the RPC layer, as shown in Figure [4-13](#Fig13).![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig13_HTML.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 'Geth有一个内置的JavaScript控制台，并支持所有标准的web3 JSON-RPC API，称为web3.js，与ECMAScript 5.1兼容。您可以使用JSON-RPC
    API与您的节点交互。Geth支持多种让客户端应用程序向节点发送原始JSON对象的方式。其中最广泛使用的协议被称为基于HTTP的JSON-RPC。JSON代表JavaScript对象表示法。它是一个开放标准的文件格式，用于在服务器和网络应用程序之间传输数据。数据在JSON文件中以逗号分隔的关键字/值对形式存在。以下是一个示例：{
    ''name'': ''Alice'', ''gender'': ''Female'', ''account'': 12345 }RPC代表“远程过程调用”，用于其他远程系统进程。当客户端应用程序使用基于HTTP的JSON-RPC将JSON数据发送到Geth时，Geth将执行区块链中提供的Web3
    API的特定任务。Web3在RPC层之上运行，如图[4-13](#Fig13)所示。![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig13_HTML.jpg)'
- en: A schema depicts the interrelation between the client app, Ethereum client,
    full node E V M, and Ethereum blockchain.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 架构图展示了客户端应用、以太坊客户端、完整节点EVM和以太坊区块链之间的相互关系。
- en: Figure 4-13
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 4-13
- en: Call Ethereum client via JSON-RPC
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 通过JSON-RPC调用以太坊客户端
- en: Geth Console
  id: totrans-236
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Geth控制台
- en: To start Geth JavaScript console, you can run the command—Geth attach with IPC.
    IPC (Inter-Process Communication) provides unrestricted access to all Web3 APIs.
    You can use IPC to connect when the Geth console is running on the same machine
    as the Geth node.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动Geth JavaScript控制台，您可以运行命令——Geth attach with IPC。IPC（进程间通信）为所有Web3 API提供无限制的访问。当Geth控制台在同一台机器上的Geth节点上运行时，您可以使用IPC进行连接。
- en: 'They opened the console from the running Geth instance, the result will look
    like this:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 他们从运行中的Geth实例打开控制台，结果将看起来像这样：
- en: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figb_HTML.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figb_HTML.jpg)'
- en: A code for Geth JavaScript console. It contains the labels instance, coinbase,
    at block, datadir, modules, and exit
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Geth JavaScript控制台的代码。它包含标签实例、coinbase、at块、datadir、模块和退出
- en: To get support for web3 APIs including eth,personal, admin, and miner, Geth
    console provide web3 command. Let’s take a look at eth related API. Type eth in
    Geth console. It will show all supported eth commands.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持包括eth、personal、admin和miner在内的web3 API，Geth控制台提供了web3命令。让我们来看看与eth相关的API。在Geth控制台中输入eth。它会显示所有支持的eth命令。
- en: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figc_HTML.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figc_HTML.jpg)'
- en: A list of eth commands which starts with eth..
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列以eth开头的eth命令。
- en: To list all of your current accounts in the network, simply run the following:eth.accounts.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出网络中您当前的所有账户，只需运行以下命令：eth.accounts.
- en: 'The listed account output should be similar to the following:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 列出的账户输出应与以下类似：
- en: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figd_HTML.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figd_HTML.jpg)'
- en: A text represents eth. account outputs in the console. It consists of numbers
    and letters.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 文本表示eth.账户在控制台中的输出。它由数字和字母组成。
- en: To check the account balance, covert wei to ether, run the following command:eth.getBalance('0x88437244acbb6276de36175740a8d686a9531ba7')
    to get weiOr, we can directly convert to ether:web3.fromWei(eth.getBalance('0x88437244acbb6276de36175740a8d686a9531ba7'),'ether')![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fige_HTML.jpg)
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查账户余额，将wei转换为ether，运行以下命令：eth.getBalance('0x88437244acbb6276de36175740a8d686a9531ba7')
    以获取wei，或者，我们可以直接转换为ether：web3.fromWei(eth.getBalance('0x88437244acbb6276de36175740a8d686a9531ba7'),'ether')![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fige_HTML.jpg)
- en: An image consists of a code to get the account balance it starts from eth. get
    a balance and directly convert to the web3.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 一张包含获取账户余额的代码的图片，该代码从eth开始获取余额并直接转换为web3。
- en: 'To get the latest block number of the blockchain, run the following command:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取区块链的最新区块号，运行以下命令：
- en: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figf_HTML.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figf_HTML.jpg)'
- en: An image consists of a command to get the block number of the blockchain run
    command>eth. block number and displays 518560.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 一张包含获取区块链区块号的命令的图片，运行命令>eth. block number并显示518560。
- en: Then, you can display a matching block summary information by calling:eth.getBlock
    (blockNumber)![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figg_HTML.png)
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过调用以下命令可以显示匹配的区块摘要信息：eth.getBlock (blockNumber)![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figg_HTML.png)
- en: An image of eth console of eth.getBlock opens a new window of eth. The command
    will appear in the console.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 一张展示eth控制台打开的eth.getBlock新窗口的图片，命令将出现在控制台中。
- en: To exit the Geth console, just simply run exit or press CTRL-C.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出Geth控制台，只需运行exit或按CTRL-C。
- en: Geth JSON-RPC via Command
  id: totrans-256
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Geth JSON-RPC命令
- en: cURL stands for “Client URL” and is a command-line tool for transferring data
    using various supported protocols (HTTP, IMAP, SCP, SFTP, SMTP, LDAP, FILE, and
    many others). The curl syntax iscurl [options] [URL...]For example, you can open
    a window or mac terminal, type the below curl command, you will see HTTP response
    from the remote server:curl -k www.apress.com/usTo start Geth in http mode, you
    can use the --http flag as follows:geth –http
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: cURL代表“客户端URL”，是一个命令行工具，用于使用各种支持协议（HTTP、IMAP、SCP、SFTP、SMTP、LDAP、FILE，以及其他许多协议）传输数据。curl语法是curl
    [选项] [URL...]例如，您可以在window或mac终端中打开一个窗口，输入下面的curl命令，您将看到远程服务器的HTTP响应：curl -k www.apress.com/us要以http模式启动Geth，您可以使用--http标志如下：geth
    –http
- en: The default port is 8545\. Once the Geth node starts, we can run the curl command
    to query some useful blockchain information.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 默认端口是8545。一旦Geth节点启动，我们就可以运行curl命令来查询一些有用的区块链信息。
- en: 'To get the web3 client version, run the following curl command:curl -X POST
    -H ''Content-Type: application/json'' \--data ''{''jsonrpc'':''2.0'',''method'':''web3_clientVersion'',''params'':[],''id'':11}''
    \http://localhost:8545'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '要获取web3客户端版本，运行以下curl命令：curl -X POST -H ''Content-Type: application/json''
    \--data ''{''jsonrpc'':''2.0'',''method'':''web3_clientVersion'',''params'':[],''id'':11}''
    \http://localhost:8545'
- en: Here id - 11 is blockchain Id. The response result shows that web3_clientVersion
    is Geth/v1.10.17-stable-25c9b49f/linux-amd64/gol.18
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这里id - 11是区块链Id。响应结果显示web3_clientVersion是Geth/v1.10.17-stable-25c9b49f/linux-amd64/gol.18。
- en: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figh_HTML.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figh_HTML.jpg)'
- en: An image of a code to get a web3 client that runs the curl command in a console
    and web3_clientVersion is in the console. The code has numbers and letters.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 一张展示获取运行curl命令的web3客户端的图片，该命令在控制台中输出web3_clientVersion。代码包含数字和字母。
- en: 'To check account balance, we saw in the previous Geth console example, running
    the following curl command:curl -X POST \-H ''Content-Type: application/json''
    \--data ''{''jsonrpc'':''2.0'',''method'':''eth_getBalance'',''params'':[''0x88437244acbb6276de36175740a8d686a9531ba7'',''latest''],''id'':11}''
    \http://localhost:8545![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figi_HTML.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '要检查账户余额，我们在之前的Geth控制台示例中看到，运行以下curl命令：curl -X POST \-H ''Content-Type: application/json''
    \--data ''{''jsonrpc'':''2.0'',''method'':''eth_getBalance'',''params'':[''0x88437244acbb6276de36175740a8d686a9531ba7'',''latest''],''id'':11}''
    \http://localhost:8545![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figi_HTML.jpg)'
- en: An image of a code to check balance. It has texts in numbers and letters.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 一个检查余额的代码图片。它包含数字和字母的文本。
- en: We get hex result - 0x56bbc5d759fba6400
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到十六进制结果 - 0x56bbc5d759fba6400
- en: By converting Hex value to decimal ([www.binaryhexconverter.com/hex-to-decimal-converter](http://www.binaryhexconverter.com/hex-to-decimal-converter)),
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将十六进制值转换为十进制值（[www.binaryhexconverter.com/hex-to-decimal-converter](http://www.binaryhexconverter.com/hex-to-decimal-converter)），
- en: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figj_HTML.png)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figj_HTML.png)'
- en: An image of a hex value and a decimal value box. At the bottom left there is
    the convert icon.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 一个十六进制值和十进制值框的图片。在左下角有一个转换图标。
- en: And then, we convert Wei to Ether and divide the decimal number by 10^(18).
    The final result is 99.996902986 Ether, which is matched to the previous result
    we run in Geth console.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将Wei转换为Ether，并将十进制数除以10^(18)。最终结果是99.996902986 Eth，这与我们在Geth控制台中运行的前一个结果相匹配。
- en: Geth Folder Structure
  id: totrans-270
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Geth文件夹结构
- en: 'Once Geth installed, it stores the default Geth local data directory based
    on operating systems:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了Geth，它将根据操作系统存储默认的Geth本地数据目录：
- en: 'Mac: ~/Library/Ethereum'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac：~/Library/Ethereum
- en: 'Linux: ~/.ethereum'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux：~/.ethereum
- en: 'Windows: %LOCALAPPDATA%\Ethereum'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows：%LOCALAPPDATA%\Ethereum
- en: It is structured as shown in Figure [4-14](#Fig14).![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig14_HTML.jpg)
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 如图4-14所示结构。![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig14_HTML.jpg)
- en: The structure of Geth folder consists of chain data, ancient, ethash, light
    chain data, node keys, nodes, Keystore, and geth.ipc.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Geth文件夹结构包括链数据、古代、ethash、轻量级链数据、节点密钥、节点、Keystore和geth.ipc。
- en: Figure 4-14
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-14
- en: Geth folder structure
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: Geth文件夹结构
- en: '**chaindata** – Directory of the downloaded blocks data and EVM state data.'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '**chaindata** – 下载的区块数据和EVM状态数据的目录。'
- en: '**ancient** – When chaindata passes approximately 100k blocks, the past blocks
    are moved to the ancient directory.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '**ancient** – 当链数据超过大约100k块时，过去的块会被移动到古代目录。'
- en: '**ethash** – Ethash is Ethereum’s Proof of Work hashing algorithm, the files
    under this location are part of the Ethereum mining computation. It can be regenerated
    and deleted safely.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '**ethash** – Ethash是Ethereum的证明工作散列算法，此位置下的文件是Ethereum挖矿计算的一部分。它可以安全地重新生成和删除。'
- en: '**lightchaindata**– Contain a light version of the blockchain, just the receipts
    (not data) and content.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '**lightchaindata**– 包含区块链的轻量级版本，仅包含收据（不包含数据）和内容。'
- en: '**nodekey** – File of public key used for other public peer nodes to connect
    or add a peer node to network.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '**nodekey** – 其他公共对等节点用于连接或向网络添加对等节点的公钥文件。'
- en: '**nodes** – Contains peer connection data, used to establish network at the
    start.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '**nodes** – 包含对等连接数据，用于在启动时建立网络。'
- en: '**keystore** – Stores account information, the account key can be found in
    the keystore folder.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '**keystore** – 存储账户信息，账户密钥可以在keystore文件夹中找到。'
- en: '**geth.ipc** – File for inter-process-communication as used by Geth connection.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '**geth.ipc** – Geth连接用于进程间通信的文件。'
- en: By default, the Geth uses Google LevelDB as the underlying database implementation
    to store blockchain data, for example, 000002.ldb and 000011.ldb under chaindata
    folder in the Figure [4-14](#Fig14) folder structure. LevelDB is an open source
    on-disk key-value storage.![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig15_HTML.jpg)
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Geth使用Google LevelDB作为底层数据库实现来存储区块链数据，例如，在图4-14的链数据文件夹中的000002.ldb和000011.ldb。LevelDB是一个开源的磁盘上键值存储。![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig15_HTML.jpg)
- en: A flow diagram of E V M, flows from world state n to transaction and lastly
    world state n plus 1.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: E VM流程图，从世界状态n流向交易，最后是世界状态n+1。
- en: Figure 4-15
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-15
- en: The state of Ethereum changing through a transaction
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 通过交易查看以太坊的状态变化
- en: As we know from Chapter [2](535492_1_En_2_Chapter.xhtml), “Cryptography,” every
    Ethereum account is defined by a private key and public key pair. The account’s
    address is derived from the public key by taking the last 20 bytes. When we use
    Geth to generate a new account, the new account address with the private key pair
    is encoded in a JSON text file as a keyfile. Since it contains your account’s
    private key, the file content is always encrypted. This keyfile can be used to
    access your Ethereum account and transfer fund. So, you need to back up your keyfiles
    regularly and make sure this file is secure and not accessible by others.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在第[2](535492_1_En_2_Chapter.xhtml)章“密码学”中所知道的，每个以太坊账户都是由私钥和公钥对定义的。账户的地址是通过取公钥的最后20个字节得到的。当我们使用Geth生成新账户时，新的账户地址和私钥对被编码为一个JSON文本文件中作为密钥文件。因为它包含您的账户私钥，所以文件内容总是加密的。这个密钥文件可以用来访问您的以太坊账户和转移资金。因此，您需要定期备份您的密钥文件，并确保这个文件是安全的，不被他人访问。
- en: 'Let’s use Geth console to generate a new account address by running command
    personal.newAccount() and enter a passphrase:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Geth控制台通过运行命令personal.newAccount()并输入密码短语来生成新账户地址：
- en: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figk_HTML.jpg)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figk_HTML.jpg)'
- en: An image consists of the Geth console generating a new account address and running
    commands personally. new account() and enter a passphrase are written.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 这张图片由Geth控制台生成新账户地址和运行命令组成。new account()和输入密码短语被写入。
- en: The account address 0x0b1400031bea2def60a9d8f28fa373ab95d641f6 is generated.
    Now check keystore directory, there is a new JSON text keyfile generated for this
    account:└── keystore    ├── UTC--2022-06-28T04-14-13.945107969Z--0b1400031bea2def60a9d8f28fa373ab95d641f6
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的账户地址为0x0b1400031bea2def60a9d8f28fa373ab95d641f6。现在检查密钥库目录，为这个账户生成了一个新的JSON文本密钥文件：└──
    密钥库    ├── UTC--2022-06-28T04-14-13.945107969Z--0b1400031bea2def60a9d8f28fa373ab95d641f6
- en: 'The content of this keyfile is encrypted, as displayed in the following:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 这个密钥文件的内容是加密的，如下所示：
- en: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figl_HTML.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figl_HTML.png)'
- en: A code to generate the account address in the console and new JSON text for
    that account and address, new versions, and OS is displayed in the console.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台中生成账户地址以及为新账户和地址创建的新JSON文本，新版本和操作系统都显示在控制台中。
- en: We have now learned Ethereum client—Geth and clarified how remote clients (command
    line or web app) can call the Ethereum client via web3j API and interact with
    the Ethereum blockchain.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经学习了以太坊客户端—Geth，并澄清了远程客户端（命令行或网络应用）如何通过web3j API调用以太坊客户端并与以太坊区块链进行交互。
- en: Ethereum Network
  id: totrans-300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以太坊网络
- en: Typically, when people are discussing the Ethereum network and ETH prices, they
    are talking about the Ethereum mainnet. The mainnet is the primary public Ethereum
    production blockchain. When we deploy a smart contract to mainnet, we have to
    pay gas fees, and these gas fees cost real money. Since the nodes connected in
    Ethereum run a protocol, there are many other similar controlled public environments
    that run the similar or same protocol to simulate the mainnet environments. Contract
    developers can run and test smart contracts in these production-like environments
    to ensure that the result is working as expected. These public networks we call
    Ethereum testnet.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当人们讨论以太坊网络和ETH价格时，他们是在谈论以太坊主网。主网是以太坊的主要公共生产区块链。当我们把智能合约部署到主网时，我们必须支付手续费，这些手续费需要花费真实货币。由于以太坊节点运行一个协议，因此有许多其他类似受控的公共环境运行相同的或类似的协议来模拟主网环境。合约开发者可以在这些类似生产的环境中运行和测试智能合约，以确保结果如预期工作。我们称这些公共网络为以太坊测试网。
- en: In testnet, you don’t spend real money when testing your smart contracts. Ethereum
    testnet provides free ethers you can use to pay for gas fees. These ethers can
    only use in testnet, not for any other environments, and they have no value in
    the real world. As the best practice, you should test your smart contract code
    in the testnet before deploying it to the mainnet.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试网上，您在测试智能合约时不会花费真实货币。以太坊测试网提供了免费的以太币，您可以用来支付手续费。这些以太币只能在测试网上使用，不能在任何其他环境中使用，在现实世界中它们也没有价值。最佳实践是，在将智能合约部署到主网之前，您应该在测试网上测试您的智能合约代码。
- en: Many testnets use a proof-of-authority consensus mechanism. A smart number of
    nodes are chosen as a validator to do consensus work and create new blocks. Testnets
    do not incentivize proof-of-work mining. There are a few Ethereum test networks
    available. You can choose your own favorite testnet. Since the Ethereum 2.0 merged
    on Sep 15, 2022, few public proof-of-work and proof-of-authority testnets became
    proof-of-stake. Some popular testnet will soon be deprecated, like Ropsten, Rinkeby,
    and Kovan. We will not discuss these testnets here. Goerli testnet is a proof-of-authority
    testnet. It merged to proof-of-stake and is expected to be maintained long-term
    as a proof-of-stake testnet.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 许多测试网络使用证明权限的共识机制。选择一些节点作为验证者进行共识工作并创建新区块。测试网络不激励工作量证明挖矿。有几个以太坊测试网络可供使用。你可以选择你最喜欢的测试网络。由于以太坊2.0在2022年9月15日合并，一些公共工作量证明和证明权限测试网络变成了权益证明。一些流行的测试网络很快将被弃用，如Ropsten、Rinkeby和Kovan。我们在这里不会讨论这些测试网络。戈尔利测试网络是一个证明权限的测试网络。它已经合并到权益证明，并预计将长期作为一个权益证明测试网络维护。
- en: The Görli test network was established in March 2019\. It is a Proof-of-Authority
    testnet using the Clique consensus mechanism for Ethereum, originally proposed
    by Chainsafe and Afri Schoedon. You can use the official Goerli Testnet Faucet
    ([https://goerli-faucet.slock.it/](https://goerli-faucet.slock.it/)) to acquire
    free ETH. In a later section, we will use Goerli Testnet to get some ether to
    our wallet.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 戈尔利测试网络于2019年3月建立。它是一个使用Clique共识机制的以太坊证明权限测试网络，最初由Chainsafe和Afri Schoedon提出。你可以使用官方的戈尔利测试网络水龙头（[https://goerli-faucet.slock.it/](https://goerli-faucet.slock.it/)）来获取免费的ETH。在后面的章节中，我们将使用戈尔利测试网络向我们的钱包中获取一些以太币。
- en: Now, we have covered most of the basic Ethereum fundamentals. In the next section,
    we will go over how Ethereum works.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经涵盖了以太坊大部分的基本原理。在下一节中，我们将了解以太坊是如何工作的。
- en: How Ethereum Works
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以太坊是如何工作的
- en: As we learned earlier, there is a multi-phased upgrade that aims to switch from
    a current proof-of-work (PoW) consensus mechanism to a proof-of-stake (PoS) model.
    In PoW, the miner verified transactions and added transactions to a new block.
    The new block is broadcast to the entire network, and validators will verify and
    eventually commit to the Ethereum network. The process typically takes at a constant
    rate of between 10 and 20 seconds. In ETH 2.0 PoS, the network could speed up
    to 100,000 transactions per second capacity.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前学到的，有一个分阶段的升级，旨在从当前的工作量证明（PoW）共识机制切换到权益证明（PoS）模型。在PoW中，矿工验证交易并将交易添加到新区块。新区块广播给整个网络，验证者将验证并最终提交给以太坊网络。这个过程通常以每秒10到20秒的恒定速率进行。在ETH
    2.0 PoS中，网络的吞吐量可以提高到每秒100,000笔交易的能力。
- en: In Ethereum, a transaction is initiated and securely signed by a user’s EOA
    account. For example, Alice wants to send one Ether to bob. Alice will initiate
    a transaction for this transfer. Next, the Ethereum network transmits the transaction.
    Once the transfer completes, Bob’s account will be debited one Ether and Alice’s
    must be credited. Ethereum is a singleton world state machine. Transactions are
    the only things that can trigger a change and update the state of Ethereum. Figure
    [4-15](#Fig15) depicts the changing state of Ethereum in a transaction.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊中，用户通过其EOA账户安全地发起并签署交易。例如，Alice想要向bob发送一个以太币。Alice将为这笔转账发起一笔交易。接下来，以太坊网络将传输这笔交易。一旦转账完成，Bob的账户将会被扣减一个以太币，而Alice的账户必须得到相应的支付。以太坊是一个单例世界状态机。交易是唯一可以触发以太坊状态更改和更新的事物。图[4-15](#Fig15)描述了在交易中以太坊状态的更改。
- en: 'There are three types of transactions in Ethereum:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊有三种类型的交易：
- en: '1.'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: Transactions that transfer funds between two EOAs (e.g., Alice sends one Ether
    to Bob).
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在两个EOA之间转移资金的交易（例如，Alice向Bob发送一个以太币）。
- en: '2.'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: Transactions that deploy a contract.
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 部署合约的交易。
- en: '3.'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: Transactions that interact and execute a deployed contract function (e.g., update
    a total token supply).
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与已部署合约函数互动并执行的交易（例如，更新总代币供应量）。
- en: The Structure of a Transaction
  id: totrans-316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 交易的结构
- en: The blockchain requires a gas fee for miner mining and verifying when a user
    submits a transaction.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链要求用户提交交易时矿工挖掘和验证费用。
- en: Let’s use Geth console to submit one transaction by transfer 0.05 Ether and
    then, get the transaction receipt from the returning transaction hash as shown
    in Figure [4-16](#Fig16).![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig16_HTML.png)
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Geth控制台提交一笔发送0.05以太币的交易，然后，从返回的交易哈希中获取交易收据，如图[4-16](#Fig16)所示。![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig16_HTML.png)
- en: A code to submit a transaction and to get a receipt. The code contains alphanumeric
    letters.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 提交交易并获得收据的代码。代码包含字母数字字母。
- en: Figure 4-16
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-16
- en: Submit a transaction and get a transaction receipt
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 提交交易并获得交易收据
- en: 'From logs of Geth, we can see that transaction is submitted, a transaction
    hash, and a nonce is generated:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 从Geth的日志中，我们可以看到交易被提交，生成一个交易哈希和非数值：
- en: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figm_HTML.png)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/535492_1_En_4_Chapter/535492_1_En_4_Figm_HTML.png)'
- en: An image of the submitted Geth transaction and the transaction hash is generated
    with text and letters.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 提交交易的Geth交易和交易哈希的图片，带有文本和字母。
- en: Figure [4-17](#Fig17) shows an example of the transaction detail from etherscan.io.![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig17_HTML.png)
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 图 [4-17](#Fig17) 显示了来自etherscan.io的交易细节示例。![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig17_HTML.png)
- en: A screenshot of overview tab that lists transaction details like transaction
    hash, status, block, from and to, and value. State and comments tab are present.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 显示交易详细信息的概览标签页，列出交易哈希，状态，区块，自和至，以及值。状态和评论标签页存在。
- en: Figure 4-17
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-17
- en: Submit a transaction and get a transaction receipt
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 提交交易并获得交易收据
- en: 'A transaction detail contains the following data:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 交易详情包含以下数据：
- en: '**From** – The sender’s Ethereum address.'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '**自** – 发送者的以太坊地址。'
- en: '**To** – The receiver’s Ethereum address.'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '**至** – 接收者的以太坊地址。'
- en: '**Nonce** – The sequence number of a transaction. The Nonce is issued by the
    originating EOA, which initiates the transaction. It is a unique number and prevents
    to replay of the same transaction.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '**非数值** – 交易序列号。非数值由发起交易的EOA发行。这是一个独特的数字，可以防止重复交易。'
- en: '**Gas Price** – The required transaction fee in the price of gas (in Gwei)
    that the transaction creator pays.'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '**燃气价格** – 交易创作者支付的以燃气(Gwei)为单位的交易费用。'
- en: '**Gas Limit** – Maximum limit of gas that would be consumed for the transaction.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '**燃气限制** – 该交易将消耗的最大燃气量。'
- en: '**Value** – The amount of ether to send to the recipient.'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '**值** – 发送给接收者的以太币数量。'
- en: '**Data** – Transaction input binary payload data that is only used for sending
    a message call and executing functions of the contract.'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据** – 仅用于发送消息调用和执行合约函数的交易输入二进制有效载荷数据。'
- en: '**Signature** – v, r, s. It is the identification of the sender. The sender
    uses EOA to sign the transaction via its private key. It uses a cryptographic
    ECDSA digital signature. v, r, and s are the values for the transaction’s signature.'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '**签名** – v, r, s。这是发送者的标识。发送者使用EOA通过其私钥签名交易。它使用一种加密的ECDSA数字签名。v, r和s是交易签名的值。'
- en: Take your time to read this long list. You don’t need to memorize each one of
    the fields. We describe each field to help you to understand what they mean. These
    terms may quite often appear when you work on more in Ethereum.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 慢慢阅读这个长长的列表。你不需要记住每一个字段。我们描述每个字段以帮助你理解它们的含义。当你在以太坊上工作时，这些术语可能经常会出现。
- en: Transaction Receipt
  id: totrans-339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 交易收据
- en: In Figure [4-16](#Fig16), we see the transaction receipt output after running
    web3.eth.getTransactionReceipt(transactionHash). When the transaction receipt
    becomes available, it means that the transaction is added to a block. When a transaction
    is a pending status, the receipt returns null.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在图 [4-16](#Fig16) 中，我们在运行web3.eth.getTransactionReceipt(transactionHash)后看到交易收据输出。当交易收据可用时，意味着交易已添加到一个区块。当交易是待处理状态时，收据返回null。
- en: 'Here are the fields that the transaction receipt contains:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 这里交易收据包含的字段有：
- en: '**BlockHash** – Hash of the block where this transaction was in.'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '**区块哈希** – 包含此交易的区块的哈希。'
- en: '**BlockNumber** – This transaction block number.'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '**区块号码** – 该交易的区块号码。'
- en: '**TransactionHash** – String, 32 Bytes—hash of the transaction.'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '**交易哈希** – 字符串，32字节—交易的哈希。'
- en: '**TransactionIndex** – The transactions index position in the block.'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '**交易索引** – 交易在区块中的位置。'
- en: '**From** – The sender’s Ethereum address.'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '**自** – 发送者的以太坊地址。'
- en: '**To** – The receiver’s Ethereum address. Null when it’s a contract creation
    transaction.'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '**至** – 接收者的以太坊地址。当它是一个合约创建交易时，此值为空。'
- en: '**CumulativeGasUsed** – The total amount of gas used by this transaction and
    all previous transactions in the same block.'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '**累计燃气使用量** – 在同一区块中，该交易及其所有先前交易使用的总燃气量。'
- en: '**GasUsed** – The total amount of gas used by this specific transaction.'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '**燃气使用量** – 该特定交易使用的总燃气量。'
- en: '**ContractAddress** – The contract address is associated with this transaction.
    If the transaction was a contract creation, otherwise null.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '**合约地址** – 该地址与此次交易关联。如果此次交易是创建合约，否则为空。'
- en: '**Logs** – Log information for this transaction.'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '**日志** – 该交易的日志信息。'
- en: '**Status** – “0x0” indicates transaction failure, “0x1” indicates transaction
    succeeded.'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '**状态** – “0x0”表示交易失败，“0x1”表示交易成功。'
- en: Block
  id: totrans-353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 区块
- en: As we learned from Chapter [1](535492_1_En_1_Chapter.xhtml), each block has
    header and body. Block body contains a list of transactions. This is true for
    both Bitcoin and Ethereum. Ethereum block structure is shown in Figure [4-18](#Fig18).![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig18_HTML.jpg)
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们从第 [1](535492_1_En_1_Chapter.xhtml) 章学到的，每个区块都有头和体。区块体包含交易的列表。这对于比特币和以太坊都是正确的。以太坊区块结构如图
    [4-18](#Fig18) 所示。![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig18_HTML.jpg)
- en: '2 blocks of block header and block body. Block body contains 2 more blocks
    in it: transactions and uncle blocks headers.'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 区块头和区块体的 2 个块。区块体中还包含 2 个块：交易和叔块头。
- en: Figure 4-18
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-18
- en: Ethereum block structure
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊区块结构
- en: Ethereum block body also contains “ommer” blocks, usually called “uncle” blocks.
    Uncle blocks are created to help reward miners when multiple block solutions are
    found.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊区块体还包含“ommer”块，通常称为“叔块”。叔块是在找到多个区块解决方案时为了奖励矿工而创建的。
- en: When there are multiple miners who solve a cryptographic puzzle and propose
    a new block for a chain, only one of the blocks will be accepted in the network.
    Since other miners did the same work, the network will reward them. Those stabled
    blocks will be attached to the new accepted block. We call it uncle block, as
    shown in Figure [4-19](#Fig19).![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig19_HTML.jpg)
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 当有多个矿工解决一个加密谜题并为链提出一个新的区块时，网络只会接受区块中的一个。由于其他矿工也做了同样的工作，网络会奖励他们。那些稳定的区块将被附加到新接受的区块上。我们称之为叔块，如图
    [4-19](#Fig19) 所示。![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig19_HTML.jpg)
- en: A flow diagram of 3 layers of cubes labeled 1, 2, and 3 from the top. Cube 1
    leads to 2 cubes in second layer that are labeled 2 A and 2 B for Alice and Bob
    labeled respectively. There is a tick for 2 A and cross for 2 B. Cube 2 B goes
    to cube 3 through uncle for block 3.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 一个三层立方体流程图，从顶部标有 1、2 和 3。立方体 1 导致第二层有两个标有 2 A 和 2 B 的立方体，分别为 Alice 和 Bob 标明。2
    A 有勾号，2 B 有叉号。立方体 2 B 通过叔块进入区块 3。
- en: Figure 4-19
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-19
- en: Ethereum uncle block
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊叔块
- en: 'For example, in Figure [4-19](#Fig19), there are two blocks that were proposed
    by miner Alice and miner Bob. Alice’s block (A) is eventually accepted and added
    as a new block #2\. Bob’s block (B) is ultimately rejected. Then, a miner in the
    network created a block (#3) using Bob’s block (B) and specified that Alice’s
    block is the parent block and Bob’s block is an uncle/ommer block. This way, Alice
    will get the full reward, but Bob still gets a partial reward.'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，在图 [4-19](#Fig19) 中，有两个由矿工 Alice 和矿工 Bob 提出的区块。Alice 的区块（A）最终被接受并作为新的区块
    #2 添加。Bob 的区块（B）最终被拒绝。然后，网络中的一个矿工创建了一个区块 (#3)，使用 Bob 的区块（B）并指定 Alice 的区块是父区块，Bob
    的区块是叔块/ommer 块。这样，Alice 将获得全额奖励，但 Bob 仍然获得部分奖励。'
- en: As we mentioned later, each block body contains the list of transactions, here
    is an example of a block from etherscan.io. We can see there are 374 transactions
    in this block as shown in Figure [4-20](#Fig20).![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig20_HTML.png)
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们稍后提到的，每个区块体包含交易的列表，这里是一个来自 etherscan.io 的区块示例。我们可以看到这个区块中有 374 次交易，如图 [4-20](#Fig20)
    所示。![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig20_HTML.png)
- en: 'A screenshot of a table of transactions with column headers: T x n hash, method,
    block, age, from, to, value, and t x n fee. There are 374 transactions in this
    block.'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 交易表格的屏幕截图，包含列标题：T x n 散列、方法、区块、年龄、发送方、接收方、价值以及 T x n 费用。这个区块中有 374 次交易。
- en: Figure 4-20
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-20
- en: 'A block: a list of transactions'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 一个区块：交易列表
- en: The block number is 15039689\. Let’s take a look at other block detail as in
    Figure [4-21](#Fig21).![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig21_HTML.png)
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 区块编号是 15039689。让我们看看其他区块详情，如图 [4-21](#Fig21) 所示。![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig21_HTML.png)
- en: An image of the ETM block in detail presents the overview and comments. An overview
    is a list of details of transactions, timestamps, difficulty, size, gas limit,
    and fees.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 详细展示 ETM 区块的图片，包含了概述和注释。概述是交易的详细信息、时间戳、难度、大小、燃料限制和费用。
- en: Figure 4-21
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-21
- en: Ethereum block detail
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊区块详情
- en: 'The Block Header contains some key information about an Ethereum block. Each
    block header has the following important fields:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊区块头包含有关以太坊区块的一些关键信息。每个区块头都有以下重要字段：
- en: '**Block number** – Also called block height. The length of the blockchain ancestor
    blocks. The first block (genesis block) has the number zero. This number represents
    the height of the chain.'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**区块号码** – 也称为区块高度。区块链祖先区块的长度。第一个区块（创世区块）编号为零。这个数字代表链的高度。'
- en: '**Difficulty** – Indicating how hard for hashing or staking effort to mine
    a block.'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**难度** – 表示挖掘一个区块的哈希或质押努力有多难。'
- en: '**Total difficulty** – Indicating how hard it was to chain up to a specified
    block by an integer value.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**总难度** – 通过整数值表示 chain up to a specified block 的难度。'
- en: '**Timestamp** – A UNIX timestamp for when the block was mined.'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间戳** – 区块挖掘时的UNIX时间戳。'
- en: '**Nonce** – Please check the Ethereum Account section.'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**Nonce** – 请参阅以太坊账户部分。'
- en: '**Parent hash** – Also called previous hash. The hash came from the previous
    block (or the parent block). Each block contains a previous hash. By the way,
    we can link back to the first block in the chain.'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**父哈希** – 也称为前一个哈希。来自前一个区块（或父区块）的哈希。每个区块都包含一个前一个哈希。顺便说一下，我们可以追溯到链中的第一个区块。'
- en: '**Beneficiary** – Also called “Mined by.” It is the beneficiary miner address
    that receives a mining reward.'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**受益人** – 也称为“由谁挖出”。这是接收挖矿奖励的矿工地址。'
- en: '**Gas price** – Please check the Gas, Gas Price, and Gas Limit section.'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**燃料费** – 请参阅燃料费、燃料价格和燃料限制部分。'
- en: '**Gas limit** – Please check the Gas, Gas Price, and Gas Limit section.'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gas限制** – 请参阅燃料费、燃料价格和燃料限制部分。'
- en: '**Size** – The block size in bytes.'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大小** – 区块大小（以字节为单位）。'
- en: '**Hash** – A unique Keccak hash of the block.'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**哈希** – 块的唯一Keccak哈希值。'
- en: '**Extra data** – A field containing additional data from a block. When miners
    are creating a block, they can add anything in this field.'
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**额外数据** – 包含来自区块的附加数据的字段。当矿工创建区块时，他们可以在这个字段中添加任何内容。'
- en: '**State root**: Hash of the root node of a specialized kind of Merkle tree
    that stores the entire network state, also known as world state. It contains the
    Keccak hash of all account balances, contract storage, contract code, and account
    nonces. If any piece of the data changes, the entire state root value will also
    change.'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态根**：存储整个网络状态的特殊类型Merkle树的根节点的哈希，也称为世界状态。它包含所有账户余额、合约存储、合约代码和账户nonce的Keccak哈希。如果任何数据发生变化，整个状态根值也将发生变化。'
- en: '**Transactions root**: Hash of the root node of the transactions trie that
    stores all transactions in this block body.'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交易根**：存储此区块体的所有交易的交易trie的根节点的哈希。'
- en: '**Receipt root**: Hash of the root node of the transactions receipt trie that
    stores all transactions receipt in this block.'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**收据根**：存储此区块的所有交易收据的交易收据trie的根节点的哈希。'
- en: At this stage, we have deep dive into how Ethereum works, and especially we
    are anatomizing Ethereum block, transaction, account, and state. The relation
    between these Ethereum block structures. Let’s summarize what we have learned
    and link it all together, as shown in the Ethereum architecture diagram (Figure
    [4-22](#Fig22)).![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig22_HTML.png)
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们已经深入了解了以太坊的工作方式，特别是我们对以太坊区块、交易、账户和状态进行了剖析。这些以太坊区块结构之间的关系。让我们总结我们已经学到的内容，并将它们联系在一起，如图所示（图
    [4-22](#Fig22")）。![](../images/535492_1_En_4_Chapter/535492_1_En_4_Fig22_HTML.png)
- en: A schema of ETM architecture consists of header and body in a separate block.
    The trie of world state, transaction, receipt points to their respective layers
    in the header block. Table for account state, transaction, and transaction receipt
    leads to their respective trio. Account storage trio leads to account state table.
    Body block leads to table of transaction receipt.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: ETM架构的架构图包括单独的块中的头部和正文。世界状态、交易、收据trie指向它们各自的层在头部块中。账户状态、交易和交易收据的表格分别指向它们的三元组。账户存储三元组指向账户状态表。正文块指向交易收据表。
- en: Figure 4-22
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-22
- en: 'Ethereum architecture: block, state, transactions'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊架构：区块、状态、交易
- en: We’ve now described most of the important concepts about Ethereum.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经描述了关于以太坊的大部分重要概念。
- en: Summary
  id: totrans-393
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: The main purpose of this chapter was to introduce the key concepts of Ethereum.
    We’ve started to learn about the history of Ethereum as well as the key components
    and elements behind Ethereum, including accounts, contracts, and gas. So, now
    you know the fundamentals of how Ethereum account works. We went over Ethereum
    node and Ethereum clients—geth technologies with some examples. We delve into
    the Ethereum architecture, understand how the Ethereum Virtual Machine (EVM) works,
    how smart contract Opcode is executed within the EVM, the structure of the block,
    state, and transactions in EVM. At this stage, you should be ready to go for the
    next chapter and start with developing your first smart contracts and end-to-end
    decentralized applications. We will show you how to build it step-by-step. Stay
    tuned.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要目的是介绍以太坊的关键概念。我们已经开始了解以太坊的历史以及以太坊背后的关键组成部分和元素，包括账户、合约和燃料（gas）。所以，现在你知道了以太坊账户的基本工作原理。我们讨论了以太坊节点和以太坊客户端，举了一些geth技术的例子。我们深入探讨了以太坊的架构，理解以太坊虚拟机（EVM）是如何工作的，智能合约的Opcode如何在EVM内执行，区块、状态和交易在EVM中的结构。在这个阶段，你应该已经准备好进入下一章，开始开发你的第一个智能合约和端到端的去中心化应用。我们将逐步向你展示如何构建。请继续关注。
