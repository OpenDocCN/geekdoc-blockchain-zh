- en: Chapter Six
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第六章
- en: Testing at scale of IoT blockchain applications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物联网区块链应用的规模化测试
- en: Michael A. Walker; Douglas C. Schmidt; Abhishek Dubey    ^(Institute for Software
    Integrated Systems, Vanderbilt University, Nashville, TN, United States)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 迈克尔·A·沃克；道格拉斯·C·施密特；阿比希克·杜贝    （范德堡大学软件集成系统研究所，美国田纳西州纳什维尔）
- en: Abstract
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Due to the ever-increasing adaptation of Blockchain technologies in the private,
    public, and business domains, both the use of Distributed Systems and the increased
    demand for their reliability has exploded recently, especially with their desired
    integration with Internet-of-Things devices. This has resulted in a lot of work
    being done in the fields of distributed system analysis and design, specifically
    in the areas of blockchain smart contract design and formal verification. However,
    the focus on formal verification methodologies has meant that less attention has
    been given toward more traditional testing methodologies, such as unit testing
    and integration testing. This includes a lack of full support by most, if not
    all, the major blockchain implementations for testing at scale, except on fully
    public test networks. This has several drawbacks, such as: (1) The inability to
    do repeatable testing under identical scenarios, (2) reliance upon public mining
    of blocks, which introduces unreasonable amounts of delay for a test driven development
    scenario that a private network could reduce or eliminate, and (3) the inability
    to design scenarios where parts of the network go down. In this chapter we discuss
    design, testing methodologies, and tools to allow Testing at Scale of IoT Blockchain
    Applications.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由于区块链技术在私人、公共和商业领域的不断应用，分布式系统的使用和对其可靠性的需求近年来急剧增加，特别是在其与物联网设备的期望集成方面。这导致在分布式系统分析和设计领域开展了大量工作，特别是在区块链智能合约设计和形式验证方面。然而，对形式验证方法的关注意味着对传统测试方法的关注较少，如单元测试和集成测试。其中包括大多数，如果不是所有，主要区块链实现对规模化测试的支持不足，除了完全公开的测试网络。这带来了一些缺点，例如：（1）无法在相同的场景下进行可重复的测试，（2）依赖于区块的公开挖掘，这引入了在私有网络可以减少或消除的测试驱动开发场景下的不合理的延迟，以及（3）无法设计部分网络崩溃的场景。在本章中，我们将讨论设计、测试方法和工具，以允许对物联网区块链应用进行规模化测试。
- en: Keywords
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关键词
- en: Automation; Blockchain; Distributed systems; IoT; Scalability; Testing; Testing
    at scale
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化；区块链；分布式系统；物联网；可扩展性；测试；规模化测试
- en: 1 Introduction
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1 引言
- en: Blockchain deployments (and specifically Ethereum, which is the main focus of
    this chapter due to its large installed base and its powerful smart contract language)
    are generally managed via programs that have different modes in which they can
    operate. They broadly fall into Command-Line Interfaces (CLI), RPC APIs, or creating
    Graphical Interfaces via the use of HTML pages and JavaScript code. These interfaces
    provide standard means to either run Ethereum applications within the clients
    themselves, or to interface other applications with the Ethereum clients.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链部署（特别是以太坊，由于其庞大的安装基数和强大的智能合约语言，本章将重点关注）通常通过具有不同运行模式的程序来管理。它们大致分为命令行界面（CLI）、RPC
    API或通过使用HTML页面和JavaScript代码创建图形界面。这些界面提供了标准手段，可以在客户端内部运行以太坊应用程序，或者将其他应用程序与以太坊客户端进行接口。
- en: In practice, however, the existing blockchain deployment interfaces lack built-in
    fault tolerance, most notably for either network communication errors or application
    execution faults. Moreover, Ethereum clients are deployed manually since no official
    manager exists for them. As a result, developers can—and do—lose all of their
    Ether (Ethereum's digital currency) due to insecure client configurations. Addressing
    this problem requires patterns and tools that enable the deployment of blockchain
    clients in a repeatable and systematic way. This requirement becomes even more
    important when integrating IoT blockchain applications (ITBAs). The IoT component
    of ITBAs add other requirements atop traditional blockchain applications due to
    their interactions with the physical environment and increased privacy concerns,
    e.g., thus preventing leakage of personal data, such as energy usage that would
    reveal a user's activity patterns in their home. Additionally, ITBAs may not only
    communicate over the blockchain, but may also use off-blockchain communications
    via TCP/IP or other networking protocols for reasons related to their operation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，现有的区块链部署界面缺乏内置的容错能力，特别是对于网络通信错误或应用执行故障。此外，由于没有官方管理器存在，以太坊客户端是手动部署的。因此，开发者可能会因为不安全的客户端配置而失去他们所有的以太币（以太坊的数字货币）。解决这个问题需要模式和工具，可以以可重复和系统化的方式部署区块链客户端。当集成物联网区块链应用程序（ITBA）时，这一要求变得更加重要。ITBA的物联网组件由于与物理环境的交互和增加的隐私问题而在传统区块链应用程序之上添加了其他要求，例如防止个人数据泄漏，比如能源使用量可能会显示用户在家中的活动模式。此外，ITBA可能不仅仅通过区块链进行通信，还可能出于与其运行相关的原因使用基于TCP/IP或其他网络协议的区块链之外的通信。
- en: 'In this book chapter we present Best Practices for Testing-at-Scale of Blockchain
    Systems making use of the structure and functionality of PlaTIBART, which is a
    Platform for Transactive IoT Blockchain Applications with Repeatable Testing that
    provides a set of tools and techniques for enhancing the development, deployment,
    execution, management, and testing of blockchain systems and specifically ITBAs.
    Sections of this chapter originate from an article by the name of PlaTIBART: a
    platform for transactive IoT blockchain applications with repeatable testing,
    and is available at [https://doi.org/10.1145/3152141.3152392](https://doi.org/10.1145/3152141.3152392).
    In particular, we describe a pattern for developing ITBAs, a Domain Specific Language
    (DSL) for defining a private blockchain deployment network, Actor components upon
    which the application can be deployed and tested, a tool using these DSL models
    to manage deployment networks in a reproducible test environment, and interfaces
    that provide fault tolerance via an application of the Observer pattern. The technology/technical
    terms used in the book chapter are explained wherever they appear or [Section
    11](S0065245819300348.xhtml#s0145) and then References are provided.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '在本书章节中，我们介绍了利用 PlaTIBART 的结构和功能的区块链系统规模测试的最佳实践。PlaTIBART 是一个用于可重复测试的可交易物联网区块链应用的平台，提供了一套工具和技术，用于增强区块链系统和特别是
    ITBA 的开发、部署、执行、管理和测试。本章的部分内容源自一篇名为 PlaTIBART: a platform for transactive IoT blockchain
    applications with repeatable testing 的文章，可在[https://doi.org/10.1145/3152141.3152392](https://doi.org/10.1145/3152141.3152392)获取。具体而言，我们描述了开发
    ITBA 的模式，用于定义私有区块链部署网络的领域特定语言（DSL），可以在其上部署和测试应用的 Actor 组件，使用这些 DSL 模型的工具来管理可重复测试环境中的部署网络，以及通过应用观察者模式提供容错性的接口。书中使用的技术/技术术语在出现时都有解释，或者可以参考
    [第11节](S0065245819300348.xhtml#s0145)，然后提供参考资料。'
- en: 2 Introduction of distributed ledgers/blockchain testing concepts
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2 分布式账本/区块链测试概念的介绍
- en: Interest in—and commercial adoption of—blockchain technology has increased in
    recent years [[1]](S0065245819300348.xhtml#bb0010). For example, blockchain adoption
    in the financial industry has yielded market capitalization surpassing $75 billion
    USD [[2]](S0065245819300348.xhtml#bb0015) for Bitcoin and $36 billion USD for
    Ethereum [[3]](S0065245819300348.xhtml#bb0020). Blockchain's growth, at least
    partially, stems from its combination of existing technologies to enable the interoperation
    of non-trusted parties in a decentralized, cryptographically secure, and immutable
    ecosystem without the need of a trusted central authority. Blockchain, a specific
    type of Distributed Ledger, provides these features in different ways depending
    on implementation. However, generally blockchains work by creating a cryptographically
    signed chain of blocks, hence the name, that are decentralized via a consensus
    mechanism such as Proof-of-Work, that is not controlled by a central authority.
    Distributed Ledgers, which share many similarities to blockchain, do not necessarily
    require decentralized authority. However, for this chapter we discuss both but
    focus on blockchain versions of distributed ledgers due to the fully distributed
    non-central authority being easier to implement and manage, and therefore we assume
    more likely, for IoT manufacturers to integrate with. Blockchain deployments (and
    specifically Ethereum, which is the focus of this chapter due to its large installed
    base and its powerful, smart contract language) are generally managed via programs
    that have different modes in which they can operate. They broadly fall into Command-Line
    Interfaces (CLI), RPC APIs, or creating Graphical Interfaces via the use of HTML
    pages and JavaScript code [[4]](S0065245819300348.xhtml#bb0025). These interfaces
    provide standard means to either run Ethereum applications within the clients
    themselves or to interface other applications with the Ethereum clients. In practice,
    however, the existing blockchain deployment interfaces lack built-in fault tolerance,
    most notably for either network communication errors or application execution
    faults. Moreover, Ethereum clients are deployed manually since no official manager
    exists for them. As a result, developers can—and do [[5]](S0065245819300348.xhtml#bb0030)—lose
    all their Ether (Ethereum's digital currency) due to unsecure client configurations.
    This problem is compounded by the fact that Ethereum's clients do not warn of
    this risk within their built-in help feature, and instead rely upon online documentation
    to warn developers. Addressing this problem requires patterns and tools that enable
    the deployment of blockchain clients in a repeatable and systematic way.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对区块链技术的兴趣以及商业应用在近年来有所增加[[1]](S0065245819300348.xhtml#bb0010)。例如，金融业中对区块链的采用已经使比特币的市值超过了750亿美元[[2]](S0065245819300348.xhtml#bb0015)，以太坊的市值达到了360亿美元[[3]](S0065245819300348.xhtml#bb0020)。区块链的增长至少部分源自它将现有技术结合起来，以实现不需要信任中心权威的去中心化、密码学安全和不可变的生态系统的互操作。区块链作为一种特定类型的分布式账本，根据实现方式以不同的方式提供这些特性。然而，通常情况下，区块链通过创建一个经过密码签名的区块链来运行，因此得名，这些区块链通过诸如工作量证明这样的共识机制来实现去中心化，而这种机制并不受中央权威的控制。虽然分布式账本与区块链有许多相似之处，但并不一定需要分散的权威。然而，在本章中，我们讨论两者，并侧重于区块链版本的分布式账本，因为完全分布的非中央权威更容易实现和管理，因此我们假设对物联网制造商更有可能进行集成。区块链部署（特别是以太坊，因为它具有庞大的已安装基础和强大的智能合约语言）通常通过具有不同运行模式的程序进行管理。它们大致分为命令行界面（CLI）、RPC
    API或通过使用HTML页面和JavaScript代码创建图形界面[[4]](S0065245819300348.xhtml#bb0025)。这些界面提供了标准的方式，要么在客户端内部运行以太坊应用程序，要么将其他应用程序与以太坊客户端进行接口交互。然而，在实践中，现有的区块链部署界面缺乏内置的容错能力，尤其是对于网络通信错误或应用程序执行故障。此外，由于不存在官方管理器，以太坊客户端是手动部署的。因此，开发人员可能会因为不安全的客户端配置而丢失他们所有的以太币（以太坊的数字货币）。这个问题被加剧了以太坊的客户端在其内置的帮助功能中没有警告这个风险，而是依赖在线文档来警告开发人员。解决这个问题需要模式和工具，以便以可重复和系统化的方式部署区块链客户端。
- en: 3 Testing analysis of blockchain and IoT systems
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区块链和物联网系统的测试分析
- en: 'Blockchain systems can be subdivided into two broad categories: Turing Complete
    and Non-Turing Complete. This means the design of the system''s contract language
    is either Turing Complete or it is not. The largest of each of these two categories
    is Bitcoin as a non-Turing Complete contract language and Ethereum as a Turing-Complete
    contract language. The reason this is important is because it describes the inherent
    design goal of language. Turing-Complete languages allow for theoretically any
    computation to be completed, whereas non-Turing Complete languages have a more
    limited instruction set that specifically limit the actions available in that
    language. The reason for adding these limitations to the language is to limit
    the functionality and therefore potential complexity of code put onto the blockchain''s
    public ledger and executed distributedly. Non-Turing Complete contract languages
    are easier to analyze and predict runtime behavior, results, and potential faults.
    Additionally, there are blockchain/distributed ledger frameworks such as Hyperledger
    Fabric which do not provide a specific public blockchain for use, but instead
    provide tools for developing customizable blockchain/distributed ledger applications
    or implementations modularly.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链系统可以分为两大类：图灵完备和非图灵完备。这意味着系统合约语言的设计要么是图灵完备的，要么不是。这两个类别中最大的分别是作为非图灵完备合约语言的比特币和作为图灵完备合约语言的以太坊。这一点之所以重要，是因为它描述了语言的固有设计目标。图灵完备语言允许理论上完成任何计算，而非图灵完备语言具有更受限的指令集，专门限制了该语言中可用的操作。向语言添加这些限制的原因是为了限制功能，从而限制放置在区块链的公共账本上并分布执行的代码的潜在复杂性。非图灵完备合约语言更容易分析和预测运行时行为、结果和潜在故障。此外，还有诸如Hyperledger
    Fabric之类的区块链/分布式分类帐框架，它们不提供特定的可供使用的公共区块链，而是提供用于模块化开发可定制的区块链/分布式分类帐应用或实现的工具。
- en: During roughly the same time as the growth of blockchain, the increased proliferation
    of IoT devices has motivated the need for transactional integrity due to the transition
    of IoT devices from just being smart-sensors to being active participants that
    impact their environment via communication, decision making, and physical actuation.
    These abilities require transactional integrity to provide auditing of actions
    made by potentially untrusted networked third party IoT devices. The demand for
    transactional integrity in IoT devices that simultaneously leverage blockchain
    features (such as decentralization, cryptographic security, and immutability)
    has motivated research on creating transactive IoT blockchain applications [[6](S0065245819300348.xhtml#bb0035),[7]](S0065245819300348.xhtml#bb0040).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在区块链增长的大致同时期，物联网设备的增加使得由于物联网设备从仅仅是智能传感器转变为通过通信、决策和物理作用影响其环境的主动参与者的需求逐渐增加，因此需要交易完整性。这些能力要求交易完整性以对潜在的不受信任的网络第三方物联网设备所做的操作进行审计。对同时利用区块链特性（如去中心化、加密安全性和不可变性）的物联网设备的交易完整性的需求已经促使研究创建交易型物联网区块链应用程序[[6](S0065245819300348.xhtml#bb0035),[7]](S0065245819300348.xhtml#bb0040)。
- en: 'This requirement becomes even more important when integrating IoT blockchain
    applications (ITBAs). The IoT component of ITBAs add other requirements atop traditional
    blockchain applications due to their interactions with the physical environment
    and increased privacy concerns, e.g., thus preventing leakage of personal data,
    such as energy usage that would reveal a user''s activity patterns in their home
    [[8]](S0065245819300348.xhtml#bb0045). Moreover, ITBAs may not only communicate
    over the blockchain, but may also use off-blockchain communications via TCP/IP
    or other networking protocols for the following reasons:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当集成物联网区块链应用程序（ITBA）时，这一要求变得更加重要。由于它们与物理环境的交互和增加的隐私问题，ITBA的物联网组件在传统区块链应用程序之上增加了其他要求，例如，防止个人数据泄露，如揭示用户在家中的活动模式的能源使用[[8]](S0065245819300348.xhtml#bb0045)。此外，ITBA不仅可以通过区块链进行通信，还可以通过TCP/IP或其他网络协议进行离线通信，原因如下：
- en: • There are interactions with the physical environment that might require communication
    with sensors and/or actuators. For example, a user's smart-meter might communicate
    wirelessly with their smart-car's battery to activate charging based on current
    energy production/cost considerations.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 可能需要与传感器和/或执行器进行通信以与物理环境进行交互。例如，用户的智能电表可能通过无线方式与其智能汽车电池通信，以根据当前能源生产/成本考虑激活充电。
- en: • The distributed ledger (which makes an immutable record of transactions in
    blockchain) is public, so it is common to only include information within transactions
    that can safely be stored publicly. In particular, if some or all data from a
    transaction must be kept secret for privacy or any other reasons the transaction
    can, instead, contain the meta-data and a cryptographic hash of the secret data.
    Private information must, therefore, be communicated off-blockchain while still
    preserving integrity by storing meta-data and hash information on the blockchain
    ledger.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: - 分布式账本（用于在区块链中记录交易的不可变记录）是公开的，因此通常只包括可以安全存储为公开信息的交易内部信息。特别是，如果某个或所有交易数据必须因隐私或其他原因保密，交易可以包含元数据和秘密数据的加密哈希值。因此，私人信息必须通过区块链之外的通信来传达，同时通过在区块链账本上存储元数据和哈希信息来保持完整性。
- en: '• Management tasks such as: updates, monitoring, calibration, debugging, or
    auditing may require off-blockchain communication (with possible on-blockchain
    components for logging). Currently, these management tasks are done manually in
    conventional blockchain ecosystems. Similar to the need for a systematic means
    of deploying apps in a blockchain network, there is a need to systematically configure
    the network topology between all components of ITBAs.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: - 管理任务，如：更新、监控、校准、调试或审核可能需要区块链之外的通信（可能包括用于日志记录的区块链组件）。目前，这些管理任务在传统的区块链生态系统中是手动完成的。类似于需要系统化地在区块链网络中部署应用程序的需求，有必要系统化地配置ITBAs各个组件之间的网络拓扑结构。
- en: 4 Desired functionality of testing IoT blockchain systems
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '- 测试物联网区块链系统的期望功能'
- en: 'In this section we list desired functionality of Testing IoT Blockchain Systems.
    Specifically, what we believe is the simplest way to delineate progressive levels
    of increased testing of IoT blockchain systems. These stages, starting at the
    most easily achievable and becoming progressively more difficult, are: Unit Testing,
    Simple IoT Device Integration, Multiple IoT Device Integration, Test Driven Development,
    and Fully Automated Test-Driven Development.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '- 在本节中，我们列出了测试物联网区块链系统的期望功能。具体来说，我们认为最简单的区分物联网区块链系统不断增加的测试水平的方法是什么。这些阶段，从最容易实现的开始，逐渐变得更加困难，包括：单元测试、简单物联网设备集成、多个物联网设备集成、测试驱动开发和完全自动化的测试驱动开发。'
- en: 'Unit testing of software has become a standard requirement in well developed
    code. However, contract languages do not always include default unit-testing capability
    in the language or default build environment. However, the largest implementations
    for different categories of Blockchain solutions: Ethereum, Bitcoin, and Hyperledger
    Fabric all provide unit testing functionality, so any solution that does not do
    so should not be considered production level ready.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 软件的单元测试已成为良好开发代码的标准要求。 然而，合同语言并不总是在语言或默认构建环境中包含默认的单元测试能力。 但是，不同类别的区块链解决方案的最大实现：以太坊、比特币和超级账本都提供单元测试功能，因此，任何不提供此功能的解决方案都不应被视为生产级别准备。
- en: 'Beyond unit testing, the next level of desired testing of ITBAs is integration
    testing. Integration testing of purely software-based distributed systems provides
    a unique challenge due to coordination of multiple instances, networking and runtime
    configuration, etc. ITBAs compound this by requiring not only multiple software
    instances to be run for integration testing, but also require integration with
    the IoT component(s) of the system to verify runtime characteristics, hardware
    and software compatibility, etc. Therefore, we have decided to split the stage
    of testing with IoT devices into two sub-stages: one where integration testing
    is only done with one device, and then into a second stage where multiple devices
    are integrated into testing. This division provides a cleaner progression of desirability
    for analysis of testing progress.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 除了单元测试之外，ITBA 的期望测试的下一个级别是集成测试。 纯软件为基础的分布式系统的集成测试由于多个实例、网络和运行时配置等的协调而提供了独特的挑战。
    ITBA 通过要求不仅要运行多个软件实例进行集成测试，还要求与系统的物联网组件集成以验证运行时特性、硬件和软件兼容性等，使这种挑战更加复杂。 因此，我们决定将带有物联网设备的测试阶段分为两个子阶段：一个只与一个设备进行集成测试的阶段，然后是第二个阶段，将多个设备集成到测试中。
    这种划分提供了测试进度分析的更清晰的进展方式。
- en: The next level of desired testing ITBA systems is continuous integration. Continuous
    integration, like unit testing and integration testing, are commonplace in software
    development now. However, the adoption of these practices is less dependent upon
    the core blockchain, or even IoT, system being used and more about the support
    software designed to assist in development of that specific system. Therefore,
    like unit testing, we suggest considering any system that doesn't yet provide
    continuous integration support via support libraries, tools, etc. to be non-production
    level ready.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于期望进行测试的 ITBA 系统的下一个级别是持续集成。 持续集成，像单元测试和集成测试一样，现在在软件开发中很普遍。 然而，采用这些实践与使用的核心区块链或甚至物联网系统的依赖程度较小，更多地取决于旨在辅助开发该特定系统的支持软件。
    因此，像单元测试一样，我们建议考虑任何尚未通过支持库、工具等提供持续集成支持的系统为非生产级别准备。
- en: 5 Existing shortcomings in testing IoT blockchain systems
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5 测试物联网区块链系统中的现有缺陷
- en: This section reviews the state-of-the-art in IoT and blockchain integration,
    focusing on testing. Prior work [[9]](S0065245819300348.xhtml#bb0050) has shown
    that IoT and blockchain can be integrated, allowing peers to interact in a trustless,
    auditable manner via the use of blockchain as a resilient, decentralized, and
    peer-to-peer ledger. Work has also been done on the topics of security and privacy
    of IoT and Blockchain integrations [[10](S0065245819300348.xhtml#bb0055),[11]](S0065245819300348.xhtml#bb0060).
    Beyond that, work has focused on formal verification of smart contracts [[12]](S0065245819300348.xhtml#bb0065),
    and how to write smart contracts “defensively” [[13]](S0065245819300348.xhtml#bb0070)
    to avoid exceptions when multiple contracts interact. The current state-of-the-art
    with respect to testing, however, is lacking because blockchains are infrequently
    tested at scale in a systematic and repeatable manner, so we focus on that below.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '本节回顾了物联网和区块链集成的最新技术，重点放在测试上。之前的工作[[9]](S0065245819300348.xhtml#bb0050)已经表明，物联网和区块链可以集成，允许对等方通过使用区块链以不可信赖、可审计的方式进行交互，区块链作为一个弹性、去中心化和点对点的分类帐。关于物联网和区块链集成的安全性和隐私性也已经做了一些工作[[10]](S0065245819300348.xhtml#bb0055),[11](S0065245819300348.xhtml#bb0060)。此外，已经对智能合约的形式验证[[12]](S0065245819300348.xhtml#bb0065)以及如何“防御性地”编写智能合约[[13]](S0065245819300348.xhtml#bb0070)以避免多个合同交互时出现异常进行了研究。然而，关于测试的最新技术还不够完善，因为区块链很少以系统化和可重复的方式进行规模化测试，因此我们将重点放在下面。  '
- en: 5.1 Functional vs model-based declarations
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.1 功能性与基于模型的声明
- en: Currently, as far as we can tell, PlaTIBART is the only model-based system for
    deploying Blockchain test networks, with Ethereum or otherwise. There are some
    tools, such as Nixos,^([a](S0065245819300348.xhtml#fn0010)) that provide for repeatable
    installation of their Linux distribution and therefore via use of the NixOps devops
    tool, can declaratively define deployments of private Ethereum networks. However,
    this still requires functional declaration of the instances to be created. The
    benefits of a model-based approach are that it allows much easier variation in
    the outputs, additionally, a model-based declaration can be modified to create
    the functional declaration inputs of other systems easily, thereby maintaining
    easy adaptability while also increasing interoperability with other tools, toolchains,
    and workflows.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，据我们所知，PlaTIBART是唯一一个基于模型的系统，用于部署区块链测试网络，无论是以太坊还是其他区块链。有一些工具，如Nixos[^1]，可以提供其Linux发行版的可重复安装，因此通过使用NixOps
    devops工具，可以声明性地定义私有以太坊网络的部署。然而，这仍然需要对要创建的实例进行功能性声明。基于模型的方法的好处在于它允许输出的变化更加容易，此外，基于模型的声明可以被修改以轻松地创建其他系统的功能性声明输入，从而保持易于适应性，同时增加与其他工具、工具链和工作流的互操作性。
- en: 5.2 Testing on live environments, non-repeatable
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.2 在实时环境中进行测试，不可重复
- en: Blockchain systems, particularly Ethereum, focused extensively at the start
    on testing your smart contract code on a public, global, and non-modifiable instance
    of the Ethereum network they call the Test Network. Ethereum has at least added
    support for smart contract unit testing, testing smart contracts in an emulator,
    and calling that integration testing. However, these approaches lack robustness
    and repeatability.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链系统，特别是以太坊，在开始阶段主要集中于在称为测试网络的公共、全球性和不可修改的以太坊网络实例上测试您的智能合约代码。以太坊至少增加了对智能合约单元测试、在模拟器中测试智能合约以及称之为集成测试的功能支持。然而，这些方法缺乏稳健性和可重复性。
- en: The use of a public non-blockchain, even a testing one, for development poses
    several potential issues for developers. Firstly, the chance of publishing content
    to the blockchain that is intended to be secret is a high concern in a test environment.
    Secondly, reliance upon a public blockchain for testing removes the ability to
    control the frequency, latency, and predictability, or lack thereof, of your testing
    environment. This is important due to the common need for tests to be faster than
    real-time execution speed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发者来说，使用公共的非区块链，即使是测试环境，也会带来几个潜在问题。首先，在测试环境中发布旨在保密的内容的可能性是一个很大的问题。其次，依赖公共区块链进行测试剥夺了对测试环境的频率、延迟和可预测性（或缺乏可预测性）的控制能力。这很重要，因为测试通常需要比实时执行速度更快。
- en: The use of an emulator to do integration testing of only the smart contract
    component of the system lacks robustness because of several reasons. First, it
    does not use the same client as production code would. Second, it ignores the
    need to include the client itself in the integration testing process. Third, it
    focuses on the HTML/JavaScript interface of the official client, while ignoring
    the other interfaces that geth provides, such as the JSON RPC API.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 仅对系统的智能合约组件进行集成测试使用模拟器缺乏稳健性，原因有几点。首先，它不使用与生产代码相同的客户端。其次，它忽略了将客户端本身纳入集成测试过程的必要性。第三，它专注于官方客户端的
    HTML/JavaScript 接口，而忽略了 geth 提供的其他接口，比如 JSON RPC API。
- en: Therefore, we believe Ethereum has issues with the design philosophy of their
    testing mechanisms. Additionally, we have noted previously [[14]](S0065245819300348.xhtml#bb0075)
    that Ethereum's documentation was incomplete and spread across multiple pages
    for the same APIs, and as of the date of this publication the issue still exists.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们认为以太坊在其测试机制的设计理念上存在问题。此外，我们此前已经注意到[【14】](S0065245819300348.xhtml#bb0075)以太坊的文档不完整，并且同一
    API 的文档分散在多个页面上，截至本出版日期，这个问题仍然存在。
- en: 5.3 Lack of defined integration/testing methodologies
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.3 缺乏定义的集成/测试方法论
- en: 'Unfortunately, there is currently a severe lack of support for testing Blockchain
    systems and software when not using the precise scenarios envisioned by the Blockchain
    system''s creators. For instance, Ethereum does not have any tools, testing or
    otherwise, that assist in integrating the official command line client of Ethereum:
    geth into applications. There is an official IDE, the Remix Solidity IDE, which
    enables unit testing but no support for integration testing at all currently.
    Their focus is on unit testing their smart contracts and “integration testing”
    their contracts inside a separate simulator, and not the geth client and private
    test networks. Other Blockchain and/or Distributed Ledger technologies, such as
    Hyperledger Fabric, at least have unit testing support and support integration
    testing, but at the time of writing, they have zero documentation on it.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，目前对于测试区块链系统和软件的支持严重不足，并且没有使用区块链系统创建者构想的精确场景。例如，以太坊没有任何工具，无论是测试还是其他用途，能够帮助将以太坊的官方命令行客户端
    geth 集成到应用程序中。官方的 IDE 是 Remix Solidity IDE，它可以进行单元测试，但目前完全不支持集成测试。他们的重点在于对智能合约进行单元测试，以及在一个独立的模拟器中“集成测试”他们的合约，而不是
    geth 客户端和私有测试网络。其他区块链或分布式分类账技术，如超级账本 Fabric，至少有单元测试支持和集成测试支持，但在撰写本文时，它们还没有相关文件。
- en: 6 Platform for transactive IoT blockchain applications with repeatable testing
    (PlaTIBART)
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6 平台用于可重复测试的可交互物联网区块链应用 (PlaTIBART)
- en: The following sections will describe the PlaTIBART architecture, components,
    and components.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下章节将描述 PlaTIBART 架构、组件和组件。
- en: 6.1 System design/rationale
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6.1 系统设计/原理
- en: PlaTIBART architecture for creating repeatable test network deployments of IoT/blockchain
    applications combines a Domain Specific Language (DSL) to define the network topology
    and settings, a Python program leveraging the Fabric API to manage the test network,
    and the RIAPS middleware [[15]](S0065245819300348.xhtml#bb0080) to facilitate
    communication between nodes on the network. Each of these components is described
    below.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: PlaTIBART 架构用于创建可重复测试网络部署的物联网/区块链应用，结合了特定领域语言 (DSL) 来定义网络拓扑和设置，一个利用 Fabric API
    管理测试网络的 Python 程序，以及 RIAPS 中间件 [[15]](S0065245819300348.xhtml#bb0080) 来促进网络节点之间的通信。下面将分别描述这些组件。
- en: 6.2 Application platform
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6.2 应用平台
- en: The Resilient Information Architecture Platform for Smart Grid (RIAPS) [[15]](S0065245819300348.xhtml#bb0080)
    is the application platform used by PlaTIBART to implement our case-study examples.]
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Resilient Information Architecture Platform for Smart Grid (RIAPS) [[15]](S0065245819300348.xhtml#bb0080)
    是 PlaTIBART 用来实现我们案例研究示例的应用平台。
- en: RIAPS provides actor and component based abstraction, as well as support for
    deploying algorithms on devices across the network^([b](S0065245819300348.xhtml#fn0015))
    and solves problems collaboratively by providing micro-second level time synchronization
    [[15]](S0065245819300348.xhtml#bb0080), failure based reconfiguration [[7]](S0065245819300348.xhtml#bb0040),
    and group creation and coordination services (still under active development),
    in addition to the services described in [[18]](S0065245819300348.xhtml#bb0095).
    It is capable of handling different communications and running implemented algorithms
    in real-time.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: RIAPS 提供了基于演员和组件的抽象，以及对通过网络部署算法的支持^([b](S0065245819300348.xhtml#fn0015))，并通过提供微秒级时间同步
    [[15]](S0065245819300348.xhtml#bb0080)，基于故障的重新配置 [[7]](S0065245819300348.xhtml#bb0040)，以及组创建和协调服务（仍在积极开发中），解决了协作解决问题，除了
    [[18]](S0065245819300348.xhtml#bb0095) 中描述的服务外。它能够处理不同的通信并实时运行已实现的算法。
- en: 6.3 Actor pattern
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6.3 演员模式
- en: 'Each application client in the network is implemented as an actor with two
    main components: (1) a wrapper class specific to the role the actor is given and
    (2) a geth client, the reference client for Ethereum.^([c](S0065245819300348.xhtml#fn0020))
    [Fig. 1](S0065245819300348.xhtml#f0010) shows a small network of five actors (indicated
    by an ellipse around a wrapper and geth client pair) and the networking connections
    between each actor''s components. Geth clients communicate exclusively via on-blockchain
    means, i.e., the geth client of each actor communicates directly with its associated
    wrapper, and the wrapper communicates directly with other wrappers via an off-blockchain
    channel, such as TCP P2P communications.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 网络中的每个应用客户端都实现为一个演员，具有两个主要组件：（1）特定于演员所给定角色的包装器类和（2）geth 客户端，以太坊的参考客户端。^([c](S0065245819300348.xhtml#fn0020))
    [图 1](S0065245819300348.xhtml#f0010) 显示了五个演员的小网络（通过包装器和 geth 客户端对的椭圆表示），以及每个演员组件之间的网络连接。Geth
    客户端专门通过区块链方式进行通信，即每个演员的 geth 客户端直接与其关联的包装器通信，并且包装器通过脱离区块链通道（例如 TCP P2P 通信）直接与其他包装器通信。
- en: '![Fig. 1](images/S0065245819300348/f06-01-9780128171899.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 1](images/S0065245819300348/f06-01-9780128171899.jpg)'
- en: Fig. 1 Sample actor component network with an actor is a geth client and a wrapper.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1 演员组件网络示例，其中一个演员是 geth 客户端和一个包装器。
- en: 6.4 Fault tolerance
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6.4 容错
- en: A key benefit of decoupling the blockchain client and the wrapper into two components
    of an actor is enhanced fault tolerance around transaction loss, compared with
    tightly coupled solutions. Specifically, it allows the wrapper to not only monitor
    the blockchain client, but also shut down and restart the client as needed. This
    design allows the wrapper component to ensure that if any known or discovered
    faults arise from defects in the blockchain software, the wrapper can at least
    attempt to recover.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将区块链客户端和包装器解耦为actor的两个组件的关键好处是，与紧密耦合的解决方案相比，在交易丢失方面提高了容错性。具体来说，它允许包装器不仅监视区块链客户端，还可以根据需要关闭并重新启动客户端。这种设计使得包装器组件能够确保，如果区块链软件中出现任何已知或发现的缺陷引起的故障，包装器至少可以尝试恢复。
- en: For example, in our Ethereum test network described in [Section 8](S0065245819300348.xhtml#s0100),
    we have encountered faults where transactions are never mined [[5]](S0065245819300348.xhtml#bb0030)
    a client is restarted. These lost transactions are problematic since they prevent
    a client from being able to interact with the blockchain network. Other types
    of faults, such as those related to an actor's communication with other components
    of the network, are handled by other middleware solutions, such as RIAPS.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我们描述的以太坊测试网络中[第8节](S0065245819300348.xhtml#s0100)，我们遇到了交易从未被挖掘的故障[[5]](S0065245819300348.xhtml#bb0030)在客户端重新启动时。这些丢失的交易是有问题的，因为它们阻止了客户端能够与区块链网络进行交互。其他类型的故障，如与网络的其他组件通信相关的故障，由其他中间件解决方案处理，如RIAPS。
- en: PlaTIBART applies the Observer pattern to notify the wrapper of the occurrence
    of events, such as faults and other blockchain-related conditions. This notification
    is accomplished by a separate thread within the wrapper that monitors its paired
    geth client for new events, such as completed transactions, or potential faults.
    This thread then notifies registered callback(s) when target events occur. For
    example, if the geth client becomes unresponsive or transactions appear to have
    stalled, then registered callback method(s) are called to notify the wrapper.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: PlaTIBART应用了观察者模式来通知包装器发生的事件，如故障和其他与区块链相关的条件。这个通知是通过包装器内部的一个独立线程完成的，该线程监视其配对的geth客户端以获取新事件，如完成的交易或潜在故障。然后，当目标事件发生时，该线程通知已注册的回调函数。例如，如果geth客户端变得无响应或交易似乎已经停滞不前，则调用注册的回调方法来通知包装器。
- en: 6.5 Domain specific language
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6.5 领域特定语言
- en: PlaTIBART's DSL defines the roles that different clients in our net-work have,
    based on the Actor pattern. This DSL model implements a correct-by-construction
    design, thereby allowing for a verification stage on the model to check for internal
    consistency before any deployment is attempted. This verification prevents inconsistencies,
    such as two clients requesting the same port on the same host.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: PlaTIBART 的 DSL 定义了我们网络中不同客户的角色，基于 Actor 模式。 这个 DSL 模型实现了一个正确构建的设计，因此允许在部署之前对模型进行验证阶段，以检查内部一致性。
    这种验证可以防止不一致，例如两个客户在同一主机上请求相同的端口。
- en: '[Fig. 1](S0065245819300348.xhtml#f0010) shows an example of our DSL, which
    specifies a full network configuration file for a test network. The first two
    lines of the configuration file contain two unique identifiers for this test network
    and its current version, “configurationName” and “configurationVersion,” respectively.
    Next, it contains values specific for the creation of an Ethereum private network''s
    Genesis block.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1](S0065245819300348.xhtml#f0010) 展示了我们 DSL 的一个示例，该示例指定了一个测试网络的完整网络配置文件。
    配置文件的前两行包含了该测试网络及其当前版本的两个唯一标识符，“configurationName” 和 “configurationVersion”。 接下来，它包含了特定于创建以太坊私有网络创世区块的值。'
- en: A Genesis block in Ethereum is the first block in a blockchain and has special
    properties, such as not having a predecessor and being able to declare accounts
    that already have balances before any mining or transactions begin. The “chainID”
    is a unique positive integer identifying which blockchain the test network is
    using; 1 through 4 are public Ethereum blockchains of varying production/testing
    phases and should not be used for creation of private networks.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊中的创世区块是区块链中的第一个区块，具有特殊属性，例如没有前任和能够在任何挖掘或交易开始之前声明已经有余额的帐户。 "chainID" 是一个唯一的正整数，用于标识测试网络正在使用的区块链；
    1 到 4 是不同生产/测试阶段的公共以太坊区块链，不应该用于创建私有网络。
- en: Next, “difficulty” indicates how computationally hard it is to mine a block,
    and “gasLimit” is the maximum difficulty of a transaction based on length in bytes
    of the data and other Ethereum runtime values. The “balance” is the starting balance
    that we allocate to each client's starting account upon creation of the network,^([d](S0065245819300348.xhtml#fn0025))
    which eliminates the situation where clients cannot begin transactions to request
    assets before any mining has begun. Lastly, the “clients” represent the actual
    nodes in our network.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，“difficulty” 表示挖掘一个区块的计算难度有多大，“gasLimit” 是基于数据的长度（以字节为单位）和其他以太坊运行时值的交易的最大难度。
    “balance” 是我们在创建网络时分配给每个客户起始帐户的起始余额，^([d](S0065245819300348.xhtml#fn0025)) 这消除了在任何挖掘开始之前客户无法开始交易以请求资产的情况。
    最后，“clients” 代表我们网络中的实际节点。
- en: '[Fig. 2](S0065245819300348.xhtml#f0015) shows how Clients are defined. Clients
    in the DSL represent the individual actors in our network, comprised of a geth
    client and a RIAPs instance using a wrapper interface. The geth client has two
    interface/TCP port pairs associated with it: one for incoming Blockchain connections,
    and one for administration and communication with RIAPs.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[图2](S0065245819300348.xhtml#f0015) 显示了如何定义客户端。DSL 中的客户端代表我们网络中的个体参与者，包括使用包装接口的
    geth 客户端和 RIAPs 实例的客户端。geth 客户端有两个接口/TCP 端口对与其关联：一个用于传入的区块链连接，另一个用于与 RIAPs 的管理和通信。'
- en: '![Fig. 2](images/S0065245819300348/f06-02-9780128171899.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图2](images/S0065245819300348/f06-02-9780128171899.jpg)'
- en: Fig. 2 Sample DSL model.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图2 样本 DSL 模型。
- en: 6.6 Network manager
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6.6 网络管理器
- en: 'Based on our experience developing decentralized apps (DApps) for blockchain
    ecosystems [[14](S0065245819300348.xhtml#bb0075),[19]](S0065245819300348.xhtml#bb0100),
    three key capabilities are essential for DApps to function effectively in an ITBA
    ecosystem: traditional IoT computations and interactions should be supported,
    information should be robustly sorted in a distributed database, and a system-wide
    accepted sequential log of events should be provided. Each requirement can be
    delegated to a separate layer in a three-tiered architecture. The first tier is
    the IoT middleware layer that facilitates communication between networked devices,
    which can be addressed by existing IoT middleware, such as RIAPS [[15]](S0065245819300348.xhtml#bb0080).
    The second tier is a distributed database layer. The third tier is a sequential
    log of events layer, which can be solved by blockchain integration. PlaTIBART
    provides an architecture for coordinating all these layers in a fault tolerant
    manner, along with tools for repeatable testing at scale. It leverages the Actor
    model [[20]](S0065245819300348.xhtml#bb0105) to integrate these three layers.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 基于我们开发区块链生态系统的去中心化应用程序（DApps）的经验[[14](S0065245819300348.xhtml#bb0075),[19]](S0065245819300348.xhtml#bb0100)，DApps
    在 ITBA 生态系统中有效运行所需的三个关键能力是必不可少的：应支持传统的 IoT 计算和交互，信息应该在分布式数据库中得到健壮的排序，并提供系统范围内被接受的事件顺序日志。每个要求可以委托给三层架构中的一个单独层。第一层是
    IoT 中间件层，便于网络设备之间的通信，可以通过现有的 IoT 中间件来解决，如 RIAPS [[15]](S0065245819300348.xhtml#bb0080)。第二层是分布式数据库层。第三层是事件顺序日志层，可以通过区块链集成来解决。PlaTIBART
    提供了一种以容错的方式协调所有这些层的架构，同时提供了大规模重复测试的工具。它利用 Actor 模型 [[20]](S0065245819300348.xhtml#bb0105)
    来集成这三个层。
- en: 'Each layer is composed of components that accomplish their designated layer-dependent
    tasks. These components are then combined into a single actor that can interact
    with each layer and other actors in the network, as described in [Section 8](S0065245819300348.xhtml#s0100)
    Case Study: Transactive Energy System. Transactive Energy Systems (TES) have emerged
    in response to the shift in the power industry away from centralized, monolithic
    business models characterized by bulk generation and one-way delivery toward a
    decentralized model in which end users play a more active role in both production
    and consumption [[21](S0065245819300348.xhtml#bb0110),[22]](S0065245819300348.xhtml#bb0115).
    The GridWise Architecture Council defines TES as “a system of economic and control
    mechanisms that allows the dynamic balance of supply and demand across the entire
    electrical infrastructure, using value as a key operational parameter” [[22]](S0065245819300348.xhtml#bb0115).
    In this paper, we consider a class of TES that operates in a gridconnected mode,
    meaning the local electric network is connected to a Distribution System Operator
    (DSO) that provides electricity when the demand is greater than what the local-network
    can generate. The main actors are the consumers, which are comprised primarily
    of residential loads, and prosumers who operate distributed energy resources,
    such as rooftop solar batteries or flexible loads capable of demand/response.
    Additionally, the DSO manages the grid connection of the network. Such installations
    are equipped with an advanced metering infrastructure consisting of TES-enabled
    smart meters. Examples of such installations include the Brooklyn Microgrid Project
    [[23]](S0065245819300348.xhtml#bb0120) and the Sterling Ranch learning community
    [[24]](S0065245819300348.xhtml#bb0125). A key component of TES is a transaction
    management platform (TMP), which handles market clearing functions in a way that
    balances supply and demand in a local market.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 每一层都由完成其指定层任务的组件组成。然后将这些组件组合成一个单一的演员，该演员可以与网络中的每一层和其他演员进行交互，如[第 8 节](S0065245819300348.xhtml#s0100)案例研究：交易能源系统所述。交易能源系统（TES）是对电力行业从集中式、单一的大规模发电和单向供电模式向去中心化模式转变的响应而出现的，该模式特点是终端用户在生产和消费方面发挥更积极的作用[[21](S0065245819300348.xhtml#bb0110),[22]](S0065245819300348.xhtml#bb0115)。GridWise
    架构委员会将 TES 定义为“一种经济和控制机制系统，允许使用价值作为关键运行参数来动态平衡整个电气基础设施的供需”[[22]](S0065245819300348.xhtml#bb0115)。在本文中，我们考虑一类以接网模式运行的
    TES，这意味着当需求大于本地网络能够生成的电量时，本地电网与配电系统运营商（DSO）相连，由其提供电力。主要演员是消费者，其中主要包括住宅负载，以及操作分布式能源资源的自给自足者，例如屋顶太阳能电池或具有需求/响应能力的灵活负载。此外，DSO
    管理网络的电网连接。这些安装配备有一个由 TES 启用的智能电表组成的先进计量基础设施。这些安装示例包括布鲁克林微网项目[[23]](S0065245819300348.xhtml#bb0120)和
    Sterling Ranch 学习社区[[24]](S0065245819300348.xhtml#bb0125)。TES 的一个关键组成部分是交易管理平台（TMP），它以平衡本地市场的供需方式处理市场结算功能。
- en: 7 In-depth guided walkthrough of PlaTIBART network manager
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7 PlaTIBART 网络管理器的深入引导式演示
- en: The goal of PlaTIBAT is to use models to design and deploy repeatable testing
    networks for IoT Blockchain Applications. Therefore, we present a guided walkthrough
    of how PlaTIBART's Network Manager allows for simple command line creation of
    blockchain networks, currently only Ethereum but with more to come in future revisions
    of the software.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: PlaTIBART 的目标是使用模型设计和部署可重复测试的物联网区块链应用网络。因此，我们提供了 PlaTIBART 的网络管理器如何允许通过简单的命令行创建区块链网络的引导式演示，目前仅支持以太坊，但在软件的未来版本中会支持更多。
- en: The Network Manager, having file name network-manager.py, is designed to be
    a command line tool for eventual integration into other systems, such as automated
    build systems, etc. Therefore, it follows best practices of command line tools
    and has a built-in help menu to assist users when learning the system. Additionally,
    it doesn't do anything to the system that can't already be done by a series of
    repetitive, and potentially complicated, command line instructions. Meaning that
    the purpose of the Network Manager is to simplify the process of creating blockchain
    test networks in a repeatable and model-driven manner. The use of a model allows
    the command line instructions to remain the same for almost all variations of
    supported network designs. Currently the Network Manager only supports networks
    designs where each blockchain node connects to each of the bootnodes, or to each
    of the first class of clients. Higher level of customization in network connections
    is a future area of research and development. Having the same series of instructions
    for the Network Manager enables a series of simple commands to be written that
    fully automate test network creation and testing. To show this, we'll be examining
    a complete cycle of creating, running, stopping and deleting a test network.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 网络管理器，文件名为 network-manager.py，旨在成为命令行工具，最终将集成到其他系统中，例如自动化构建系统等。因此，它遵循命令行工具的最佳实践，并具有内置的帮助菜单，以帮助用户学习系统。此外，它不会对系统进行任何无法通过一系列重复且潜在复杂的命令行指令完成的操作。这意味着网络管理器的目的是简化以可重复和基于模型的方式创建区块链测试网络的过程。使用模型允许命令行指令对几乎所有支持的网络设计变体保持相同。目前，网络管理器仅支持每个区块链节点连接到每个引导节点或到每个第一类客户端的网络设计。网络连接中更高级别的定制是未来的研究和开发领域。使用相同的一系列指令对网络管理器使得可以编写一系列简单的命令，从而完全自动化测试网络的创建和测试。为了证明这一点，我们将检查一个完整的周期，包括创建、运行、停止和删除一个测试网络。
- en: 7.1 Guided walkthrough of creating new test network
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.1 创建新测试网络的引导式演示
- en: 'The first step in creating a test network is to delete the temporary files
    that can be used. The following commands delete the /new-blockchain/ directory
    where the blockchain is created and saved to. The remaining files are possible
    files that may or may not be created depending on system design. The file static-nodes.json
    is a list of static nodes, a possible Ethereum discovery mechanism, that could
    have been previously created. The new miners and clients json files are lists
    of newly created miner clients and standard non-miner clients. Clients are separated
    into two categories due to the relatively massive memory requirements for miners,
    4 GB minimum to even start mining and growing from there as the blockchain grows
    in length, versus the relatively minor approximately 250 MB of ram used by a non-miner
    client note these requirements being specific to the Ethereum network and Ethereum''s
    client: geth. The genesis-data.json file is the traditional input file that geth
    uses to create a new blockchain network, the Network Manager creates this as an
    intermediary artifact during network creation ([Figs. 3](S0065245819300348.xhtml#f0020)
    and [4](S0065245819300348.xhtml#f0025)).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 创建测试网络的第一步是删除可以使用的临时文件。以下命令删除了区块链被创建和保存到的 /new-blockchain/ 目录。其余文件是可能的文件，可能会根据系统设计创建或不创建。static-nodes.json
    文件是静态节点列表，是一种可能的以太坊发现机制，可能已经事先创建。新的矿工和客户端 json 文件是新创建的矿工客户端和标准非矿工客户端的列表。由于矿工相对较大的内存需求，至少需要
    4 GB 的内存才能开始挖矿，并随着区块链的长度增加而增加，而非矿工客户端使用的内存约为 250 MB，这些需求是针对以太坊网络和以太坊的客户端 geth
    的。genesis-data.json 文件是 geth 用于创建新区块链网络的传统输入文件，网络管理器在网络创建过程中创建这个中间产物（参见[图 3](S0065245819300348.xhtml#f0020)
    和 [图 4](S0065245819300348.xhtml#f0025)）。
- en: '![Fig. 3](images/S0065245819300348/f06-03-9780128171899.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 3](images/S0065245819300348/f06-03-9780128171899.jpg)'
- en: Fig. 3 Commands to delete network manager temporary files.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3 删除网络管理器临时文件的命令。
- en: '![Fig. 4](images/S0065245819300348/f06-04-9780128171899.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 4](images/S0065245819300348/f06-04-9780128171899.jpg)'
- en: Fig. 4 How to create bootnodes with the network manager.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4 如何使用网络管理器创建 Bootnodes。
- en: The first step in creating a new Ethereum test network is to create Bootnodes
    if your network is going to use them. We're going to assume a valid PlaTIBART
    model file is passed as a parameter to $1 in the following command line instructions
    both save space and to reinforce that the Network Manager's commands don't change
    based on input model.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的以太坊测试网络的第一步是如果你的网络要使用 Bootnodes 则创建 Bootnodes。我们将假设一个有效的 PlaTIBART 模型文件作为参数传递给
    $1 在以下命令行说明中，既节省空间又强调网络管理器的命令不会根据输入模型而改变。
- en: The next step in creating a new Ethereum test network is to create the clients
    and miners defined in the input model file. The order of these commands isn't
    dependent upon one another ([Fig. 5](S0065245819300348.xhtml#f0030)).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的以太坊测试网络的下一步是创建输入模型文件中定义的客户端和矿工。这些命令的顺序不依赖于彼此（参见[图 5](S0065245819300348.xhtml#f0030)）。
- en: '![Fig. 5](images/S0065245819300348/f06-05-9780128171899.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 5](images/S0065245819300348/f06-05-9780128171899.jpg)'
- en: Fig. 5 Creating miners and clients.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5 创建矿工和客户端。
- en: Next in creating a new Ethereum test network is to make the genesis-data.json
    input file that allows Ethereum's geth client to create a new blockchain network.
    This file contains all the meta-data about the network to be created, such as
    staring Ether for known clients, complexity of the beginning mining calculations,
    and the ChainID, which prevents unrelated chains from communicating with each
    other. This is then fed to the local copy of geth on the host machine and creates
    the genesis block (first block in a blockchain) ([Fig. 6](S0065245819300348.xhtml#f0035)).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在创建新的以太坊测试网络时，需要制作 genesis-data.json 输入文件，该文件允许以太坊的 geth 客户端创建新的区块链网络。此文件包含有关要创建的网络的所有元数据，例如已知客户端的起始
    Ether，初始挖矿计算的复杂度以及 ChainID，它防止不相关的链相互通信。然后将其提供给主机机器上的 geth 的本地副本，并创建创世块（区块链中的第一个区块）（参见
    [图 6](S0065245819300348.xhtml#f0035)）。
- en: '![Fig. 6](images/S0065245819300348/f06-06-9780128171899.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 6](images/S0065245819300348/f06-06-9780128171899.jpg)'
- en: Fig. 6 Making genesis file for new test network.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6 为新的测试网络制作创世文件。
- en: Here is the creation of the genesis block, which is done on the host machine's
    local geth client ([Figs. 7](S0065245819300348.xhtml#f0040) and [8](S0065245819300348.xhtml#f0045)).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是在主机机器的本地 geth 客户端上创建创世块，参见 ([图 7](S0065245819300348.xhtml#f0040)) 和 ([图 8](S0065245819300348.xhtml#f0045))。
- en: '![Fig. 7](images/S0065245819300348/f06-07-9780128171899.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 7](images/S0065245819300348/f06-07-9780128171899.jpg)'
- en: Fig. 7 Creating the new blockchain genesis block.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7 创建新的区块链创世块。
- en: '![Fig. 8](images/S0065245819300348/f06-08-9780128171899.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图 8](images/S0065245819300348/f06-08-9780128171899.jpg)'
- en: Fig. 8 Distributing genesis block to clients and miners.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8 将创世块分发给客户端和矿工。
- en: This newly created block contains all the model's meta data and allows pre-mining
    distribution to each of the miners and clients. This pre-mining distribution helps
    prevent a potential race-condition where a client is always trying to “catch-up”
    to the newest created block and never does. If the mining difficulty is set too
    low compared to the processing power of the system(s) hosting the miner(s) this
    is a possibility that can occur.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新创建的区块包含了模型的所有元数据，并允许将预先挖矿的结果分发给每个矿工和客户端。这种预先挖矿的分发有助于防止潜在的竞争条件，即客户端始终试图“赶上”最新创建的区块，但始终无法赶上。如果与主机系统托管的矿工相比，挖矿难度设置过低，这种情况可能会发生。
- en: At this point, localized logic and data files can also be distributed via the
    Network manager to the hosts for each one of the generated clients from the model.
    The specifics of these files will depend upon the ITBA(s) that you are testing.
    This example distributed the code used in our Use-Case 1\. At this point the new
    Blockchain, Ethereum in this example, test network is now fully created and ready
    for use. Some use cases, such as our Use-Case 2, will archive this network for
    future use, while others will make use of it as is.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，局部逻辑和数据文件也可以通过网络管理器分发到为模型生成的每个主机的主机。这些文件的具体内容将取决于正在测试的ITBA（S）。本示例分发了我们用于Use-Case
    1的代码。此时，新的区块链，在本示例中为以太坊，测试网络现在已完全创建并准备就绪。一些用例，例如我们的Use-Case 2，将对此网络进行归档以备将来使用，而其他用例将按原样使用它。
- en: 7.2 Guided walkthrough of starting and stopping test networks
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.2 启动和停止测试网络的指导漫游
- en: Starting the network for mining and then the processing of data and requests
    start by starting the miners and clients. If the miners and clients can reach
    a single bootnode in the bootnode network, then they should eventually sync up
    if the network is moderately reliable. Otherwise, if not using bootnodes, the
    miners will need connected to the clients manually ([Figs. 9](S0065245819300348.xhtml#f0050)–[11](S0065245819300348.xhtml#f0060)).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行挖矿并开始数据和请求的处理，首先启动矿工和客户端。如果矿工和客户端可以连接到引导节点网络中的单个引导节点，那么如果网络相当可靠，它们最终会同步。否则，如果不使用引导节点，矿工将需要手动连接到客户端（[图
    9](S0065245819300348.xhtml#f0050)–[11](S0065245819300348.xhtml#f0060)）。
- en: '![Fig. 9](images/S0065245819300348/f06-09-9780128171899.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 9](images/S0065245819300348/f06-09-9780128171899.jpg)'
- en: Fig. 9 Distributing logic code and data to each client.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9 分发逻辑代码和数据到每个客户端。
- en: '![Fig. 10](images/S0065245819300348/f06-10-9780128171899.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图 10](images/S0065245819300348/f06-10-9780128171899.jpg)'
- en: Fig. 10 Connecting miners to each client to connect the network.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10 连接矿工到每个客户端以连接网络。
- en: '![Fig. 11](images/S0065245819300348/f06-11-9780128171899.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 11](images/S0065245819300348/f06-11-9780128171899.jpg)'
- en: Fig. 11 Starting miner and clients.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11 启动矿工和客户端。
- en: Stopping the entire network can be done step-by-step by using the above commands,
    substituting “start” with “stop”. Alternatively, you can use the Network Manager's
    network options to stop the entire network at once. Starting the entire network
    also works, but it was explained in detail above for clarity ([Fig. 12](S0065245819300348.xhtml#f0065)).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用上述命令逐步停止整个网络。或者，您可以使用网络管理器的网络选项一次性停止整个网络。启动整个网络也行，但出于清晰起见，上面已对此进行了详细解释（[图
    12](S0065245819300348.xhtml#f0065)）。
- en: '![Fig. 12](images/S0065245819300348/f06-12-9780128171899.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 12](images/S0065245819300348/f06-12-9780128171899.jpg)'
- en: Fig. 12 Network manager stopping entire network.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12 网络管理器停止整个网络。
- en: Deleting the network will delete all files created by the setup process on all
    clients, miners, and bootnodes in the network, but will not delete the host machine's
    generated files, if those are to be kept separately ([Fig. 13](S0065245819300348.xhtml#f0070)).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 删除网络将删除网络中所有客户端、矿工和引导节点在设置过程中创建的所有文件，但不会删除主机机器生成的文件，如果这些文件要单独保留的话（[图 13](S0065245819300348.xhtml#f0070)）。
- en: '![Fig. 13](images/S0065245819300348/f06-13-9780128171899.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 13](images/S0065245819300348/f06-13-9780128171899.jpg)'
- en: Fig. 13 Network manager deleting entire network.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13 网络管理员删除整个网络。
- en: '8 Example use-case 1: Transactive energy'
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8 示例用例 1：可交易能源
- en: Transactive Energy Systems (TES) have emerged in response to the shift in the
    power industry away from centralized, monolithic business models characterized
    by bulk generation and one-way delivery toward a decentralized model in which
    end users play a more active role in both production and consumption [[21](S0065245819300348.xhtml#bb0110),[22]](S0065245819300348.xhtml#bb0115).
    The GridWise Architecture Council defines TES as “a system of economic and control
    mechanisms that allows the dynamic balance of supply and demand across the entire
    electrical infrastructure, using value as a key operational parameter” [[22]](S0065245819300348.xhtml#bb0115).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 可交易能源系统（Transactive Energy Systems，TES）是对电力行业向去中心化模式转变的响应，这种模式不再以大规模发电和单向输送为特征，而是朝着一个更为去中心化的模式，其中最终用户在生产和消费中发挥更积极的作用[[21](S0065245819300348.xhtml#bb0110)，[22]](S0065245819300348.xhtml#bb0115)。GridWise
    Architecture Council 将 TES 定义为“一种经济和控制机制系统，允许在整个电气基础设施中动态平衡供需，以价值作为关键的操作参数”[[22]](S0065245819300348.xhtml#bb0115)。
- en: 8.1 Sample problem
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.1 示例问题
- en: In this section, we consider a class of TES that operates in a gridconnected
    mode, meaning the local electric network is connected to a Distribution System
    Operator (DSO) that provides electricity when the demand is greater than what
    the local-network can generate. The main actors are the consumers, which are comprised
    primarily of residential loads, and prosumers who operate distributed energy resources,
    such as rooftop solar batteries or flexible loads capable of demand/response.
    Additionally, the DSO manages the grid connection of the network. Such installations
    are equipped with an advanced metering infrastructure consisting of TES-enabled
    smart meters. Examples of such installations include the Brooklyn Microgrid Project
    [[23]](S0065245819300348.xhtml#bb0120) and the Sterling Ranch learning community
    [[24]](S0065245819300348.xhtml#bb0125). A key component of TES is a transaction
    management platform (TMP), which handles market clearing functions in a way that
    balances supply and demand in a local market.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们考虑一类在并网模式下运行的TES，这意味着当本地电网需求超过本地网络所能生成的电量时，本地电网与配电系统运营商（DSO）相连，后者提供电力。主要参与者是消费者，主要包括居民负载，以及运营分布式能源资源的生产者，例如屋顶太阳能电池或可进行需求/响应的灵活负载。此外，DSO管理网络的电网连接。此类安装配备了由TES启用的智能电表的先进计量基础设施。此类安装示例包括布鲁克林微电网项目[[23]](S0065245819300348.xhtml#bb0120)和Sterling
    Ranch学习社区[[24]](S0065245819300348.xhtml#bb0125)。TES的一个关键组成部分是交易管理平台（TMP），它以平衡本地市场的供需方式处理市场清算功能。
- en: 8.2 In-depth guided walkthrough
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.2 深入的指导性漫游
- en: 'To test PlaTIBART we implemented a solution to the Transactive Energy case
    study and deployed it to the test network defined in [Fig. 2](S0065245819300348.xhtml#f0015).
    This network was installed on a private cloud instance hosted at Vanderbilt University.
    We ran our tests on 6 virtual hosts, each with: 4GB RAM, 40GB hard drive space,
    running Ubuntu 16.04.02, and gigabit networking. For these tests we implemented
    a custom smart contract and wrappers for both Smart Grid distribution system operators
    (DSO) and prosumer clients in Python. Each wrapper had one geth client associated
    with it. We used PlaTIBART''s network manager tool outlined in [Section 6.6](S0065245819300348.xhtml#s0080)
    and commands detailed in [Sections 7.1](S0065245819300348.xhtml#s0090) and [7.2](S0065245819300348.xhtml#s0095)
    to create, start, shutdown, and delete the test network. We manually paired each
    wrapper with its geth client''s IP address and port (in future work this is to
    be integrated and automated into the network manager''s capabilities). Using our
    custom written wrappers, smart contract, and managed test network we simulated
    a day''s worth of transactive energy trading between actors. Via the Linux “time”
    command we measured each step needed in the entire process to create a test network,
    including Clients Create, Miners Create, Blockchain Make, Blockchain Create, Distribute
    to Clients, and Distribute to Miners. We also measured the steps required to start
    and connect the geth instance for each “clients” (“prosumer” and “DSO”) to the
    geth client of each “miner.” Currently, this star-network is the only network
    topology supported by PlaTIBART, but we will expand the supported topologies in
    the future.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试 PlaTIBART，我们实现了一个解决方案来处理可交易能源案例研究，并将其部署到[图2](S0065245819300348.xhtml#f0015)中定义的测试网络中。该网络安装在范德堡大学托管的私有云实例上。我们在6个虚拟主机上运行了我们的测试，每个主机都有：4GB
    RAM、40GB硬盘空间、运行 Ubuntu 16.04.02，并具有千兆网络。为了进行这些测试，我们在 Python 中实现了自定义的智能合约以及智能电网配电系统运营商（DSO）和用户客户端的包装器。每个包装器都与一个
    geth 客户端相关联。我们使用了 PlaTIBART 中的网络管理工具，该工具在[第6.6节](S0065245819300348.xhtml#s0080)中概述，并在[第7.1节](S0065245819300348.xhtml#s0090)和[7.2节](S0065245819300348.xhtml#s0095)中详细说明了命令，以创建、启动、关闭和删除测试网络。我们手动将每个包装器与其
    geth 客户端的 IP 地址和端口配对（在未来的工作中，这将被集成和自动化到网络管理器的功能中）。使用我们自己编写的包装器、智能合约和管理的测试网络，我们模拟了参与者之间一天的可交易能源交易。通过
    Linux 中的“time”命令，我们测量了创建测试网络的整个过程中每个步骤所需的时间，包括客户端创建、矿工创建、区块链制作、区块链创建、分发到客户端和分发到矿工。我们还测量了为每个“客户端”（“用户”和“DSO”）启动和连接
    geth 实例所需的步骤。目前，这种星型网络是 PlaTIBART 唯一支持的网络拓扑，但我们将来会扩展支持的拓扑结构。
- en: 8.3 System output and analysis
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.3 系统输出与分析
- en: After running our tests, described above, we found the standard deviation for
    each testing phase was small (the largest being 0.09% of the time taken). Likewise,
    the average time either remained relatively static, or scaled linearly, in relation
    to the number of clients (2, 5, 10, 15, 20 prosumers + 1 DSO + 1 miner).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述测试后，我们发现每个测试阶段的标准偏差很小（最大值为时间的0.09%）。同样，平均时间要么保持相对静态，要么与客户数量线性增长（2、5、10、15、20个prosumer
    + 1个DSO + 1个矿工）。
- en: 'The test phases that remained relatively static included: Miners Create, Blockchain
    Make, Blockchain Create, Distribute to Miners, Miners Start, and Network Delete.
    The test phases that scaled with increase in number of prosumers were: Clients
    Create, Distribute to Clients, Full Network Created, Clients Start, Network Connect,
    and Network Stop. The scaling increases were linear (Std Dev < 0.065) after dividing
    the average time increase by the difference in number of clients.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 保持相对静态的测试阶段包括：矿工创建、区块链生成、区块链创建、分发给矿工、矿工启动和网络删除。随着prosumer数量的增加而扩展的测试阶段包括：客户创建、分发给客户、完整网络创建、客户启动、网络连接和网络停止。在将平均时间增加除以客户数量的差异后，扩展增长是线性的（标准偏差 < 0.065）。
- en: The results of our experiments indicate that there exists high consistency and
    predictability of managing PlaTIBART-managed blockchain test networks. These results
    help build confidence that PlaTIBART's approach to creating repeatable testing
    networks for IoT blockchain applications scales well, which is important to encourage
    adoption by IoT system developers.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实验的结果表明，管理PlaTIBART管理的区块链测试网络存在很高的一致性和可预测性。这些结果有助于增强对PlaTIBART为物联网区块链应用创建可重复测试网络的方法的信心，这对于鼓励物联网系统开发人员采用是很重要的。
- en: '9 Example use-case 2: Blockchain/distributed systems education'
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9 用例示例 2：区块链/分布式系统教育
- en: 'As we discussed in An Elastic Platform for Large-scale Assessment of Software
    Assignments for MOOCs (EPLASAM), there are significant challenges presented when
    attempting to scale software assignments for use in MOOCs [[25]](S0065245819300348.xhtml#bb0130).
    Attempting to scale distributed system, specifically ITBA, software assignments
    presents additional challenges beyond those of traditional software assignments.
    Even ignoring the need for physical IoT hardware to test code on, the need for:
    private repeatable Blockchain networks, easily adjustable network designs, and
    ease of use of network setup by both instructors and staff, but also learners,
    becomes crucial for individual assessment.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在《用于MOOCs的大规模软件作业评估的弹性平台》（EPLASAM）中所讨论的，尝试扩展软件作业以供MOOCs使用时存在重大挑战。尝试扩展分布式系统，特别是ITBA，软件作业会带来比传统软件作业更多的挑战。即使忽略在上面测试代码所需的物理物联网硬件的需求，对于个人评估来说，私有可重复的区块链网络、易于调整的网络设计以及教师、工作人员甚至学习者都能轻松设置网络的需求变得至关重要。
- en: 9.1 Sample problem
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 9.1 示例问题
- en: The use of PlaTIBART does not provide a complete solution, as described in EPLASM,
    for MOOC scalable assessment, or even just testing, of ITBAs. However, it does
    provide the design philosophy, tools, and methods that enable repeatable individual
    assessment of ITBAs and/or ITBA components. In our classes at both Vanderbilt
    University and Youngstown State University, we have made use of PlaTIBART to assist
    in the creation assignments that assessed the Blockchain components of ITBAs.
    Additionally, we were able to leverage PlaTIBART to provision 25 × IoT clusters
    (Cisco router, 4 × Raspberry Pi 3B +, ethernet cabling, and an IoT Electronics
    kit) for a series of IoT lectures and workshops held in partnership with Youngstown
    State University, the Youngstown Business Incubator, with support from Cisco.^([e](S0065245819300348.xhtml#fn0030))
    These clusters included a custom PDF guide, all the software required to operate
    the electronics kits via Python, and all the software required to operate an Ethereum
    network on each of the clusters, including PlaTIBART being installed on each cluster's
    first Raspberry Pi device.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: PlaTIBART 的使用并未提供完整的解决方案，如 EPLASM 中所述，用于 MOOC 可扩展评估或仅用于 ITBA 的测试。但是，它提供了设计哲学、工具和方法，可实现可重复的个体
    ITBA 和/或 ITBA 组件评估。在我们的课程中，无论是在范德堡大学还是在杨斯敦州立大学，我们都利用 PlaTIBART 协助创建了评估 ITBA 区块链组件的作业。此外，我们能够利用
    PlaTIBART 为一系列与杨斯敦州立大学、杨斯敦商业孵化器合作举办的物联网讲座和研讨会配置了 25 × IoT 集群（思科路由器、4 × 树莓派 3B +、以太网电缆和物联网电子套件），并得到了思科的支持。^([e](S0065245819300348.xhtml#fn0030))
    这些集群包括自定义 PDF 指南，通过 Python 操作电子套件所需的所有软件，以及在每个集群上操作以太坊网络所需的所有软件，包括在每个集群的第一个树莓派设备上安装的
    PlaTIBART。
- en: 9.2 In-depth guided walkthrough
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 9.2 深度引导式演练
- en: The benefit to the design of PlaTIBART is that the only difference between creating
    a Dockerized container containing all the required code to allow students to easily
    start learning Blockchain and configuring IoT workshop clusters is slight modification
    of the input model file and changing the files distributed to each client. [Fig.
    14](S0065245819300348.xhtml#f0075) shows the model input we used for creating
    the Docker image with a single client and a single miner, both on the same host,
    using localhost 127.0.0.1, but the network manager handles giving them ports in
    different ranges.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: PlaTIBART 的设计好处在于，创建包含所有必需代码的 Docker 化容器，以便学生可以轻松开始学习区块链和配置物联网研讨会集群的唯一区别是轻微修改输入模型文件并更改分发给每个客户端的文件。[图
    14](S0065245819300348.xhtml#f0075) 展示了我们用于创建具有单个客户端和单个矿工的 Docker 镜像的模型输入，两者都在同一主机上使用本地主机
    127.0.0.1，但网络管理器负责为它们提供不同范围的端口。
- en: '![Fig. 14](images/S0065245819300348/f06-14-9780128171899.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 14](images/S0065245819300348/f06-14-9780128171899.jpg)'
- en: Fig. 14 Blockchain assignment sample model json file.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14 区块链分配示例模型 json 文件。
- en: Now to support deploying to actual individual ITBA clusters the only requirement
    is that each system already have the host machine's public SSH key, have geth
    installed, and accept SSH connections.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了支持部署到实际的个体ITBA集群，唯一的要求是每个系统都已经有主机机器的公共SSH密钥，已安装了geth，并接受SSH连接。
- en: '[Fig. 15](S0065245819300348.xhtml#f0080) shows that the only change needed
    is adjusting the “client” section of the json. Increasing the number of clients
    and changing what IPs the clients will be installed on. Both scenarios were completed
    via the exact same command line instructions as discussed in [Sections 7.1](S0065245819300348.xhtml#s0090)
    and [7.2](S0065245819300348.xhtml#s0095), the only difference being what files
    were distributed to each client.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[图15](S0065245819300348.xhtml#f0080)显示唯一需要更改的是调整json的“客户端”部分。增加客户端数量并更改客户端将安装在哪些IP上。这两种情况均通过与[7.1](S0065245819300348.xhtml#s0090)和[7.2](S0065245819300348.xhtml#s0095)讨论的完全相同的命令行指令完成，唯一的区别在于将哪些文件分发给了每个客户端。'
- en: '![Fig. 15](images/S0065245819300348/f06-15-9780128171899.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图15](images/S0065245819300348/f06-15-9780128171899.jpg)'
- en: Fig. 15 IoT/blockchain-cluster configuration sample model json file.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图15 IoT/区块链集群配置示例模型json文件。
- en: 9.3 System output and analysis
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 9.3 系统输出和分析
- en: Both examples discussed in this section proved to be viable and were successful
    in creating ITBA component educational assessments. Both Docker images of Blockchain
    assignments for university courses, and IoT and Blockchain workshop preparation
    and instruction were successful. However, neither of these were studied in-depth
    for formal verification, but instead were used as a means of rapidly creating
    repeatable Blockchain test networks in the educational scenarios. Therefore, these
    examples show more the adaptability of the PlaTIBART design when crafting future
    ITBA assignments. Future work will need to verify the efficacy of this approach.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论的两个示例都被证明是可行的，并成功创建了ITBA组件教育评估。区块链课程的两个Docker镜像以及IoT和区块链研讨会的准备和指导都取得了成功。然而，这两者都没有进行深入的正式验证研究，而是被用作在教育场景中快速创建可重复的区块链测试网络的手段。因此，这些示例更多地展示了在设计未来ITBA任务时PlaTIBART设计的适应性。未来的工作将需要验证这种方法的有效性。
- en: 10 Research directions in testing at scale of IoT and distributed systems
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10 测试IoT和分布式系统规模的研究方向
- en: Testing at scale of distributed systems is an ongoing research focus that will
    simultaneously have many different approaches. Formal validation of Blockchain
    related contract languages, systems, and tools, including PlaTIBART, is one area
    that will see continued focus. Additionally, verification of the efficacy of using
    PlaTIBART in an educational environment to teach ITBAs needs to be proven; this
    is a research area which we are currently pursuing. Expanding the network topology
    supported by PlaTIBART is future work that needs to be addressed, possibly with
    the integration with network simulation or management software. Work needs to
    be done on including private test Blockchain networks into both Unit and Integration
    Testing frameworks, and currently there don't appear to be tools, at least for
    Ethereum, for integration testing outside of Solidity IDE.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '分布式系统的规模化测试是一个持续的研究重点，将同时有许多不同的方法。区块链相关合同语言、系统和工具的正式验证，包括 PlaTIBART，是一个将继续关注的领域。此外，需要证明在教授
    ITBAs 方面使用 PlaTIBART 的有效性验证；这是我们目前正在追求的研究领域。扩展 PlaTIBART 支持的网络拓扑结构是未来需要解决的工作，可能需要与网络模拟或管理软件集成。需要在单元测试和集成测试框架中包含私有测试区块链网络的工作已经进行了，目前至少对以太坊来说，在
    Solidity IDE 之外进行集成测试似乎没有工具。 '
- en: 11 Key terminology and definitions
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11个关键术语和定义
- en: 'IoT Blockchain Applications (ITBAs): Blockchain Applications that run on an
    IoT system where Blockchain is leveraged for a wide range of potential uses ranging
    from distributed logging up to integration into the command and control decision
    making process of the IoT device. Both Blockchain and IoT use case scenarios can
    change drastically when they are used together in a system. Therefore, we use
    this term to describe the added complexity of Blockchain applications that interact
    with the physical world through IoT devices.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物联网区块链应用（ITBAs）：在物联网系统上运行的区块链应用，其中区块链被利用于从分布式日志记录到整合到物联网设备的指挥和控制决策过程等各种潜在用途。当区块链和物联网一起在系统中使用时，区块链和物联网用例场景都可能发生巨大变化。因此，我们使用这个术语来描述与物联网设备通过物理世界进行交互的区块链应用的增加复杂性。
- en: 'Testing-at-Scale: Testing distributed systems incurs a much heavier cost, both
    in complexity and required resources, when attempting to test a fully integrated
    distributed system versus traditional systems. This is because fully testing a
    distributed system requires a large amount of potentially heterogeneous devices
    running on potentially multiple platforms and/or architectures. This not only
    requires a system and methodology of testing that can be run easily with each
    new variation of the overall system, be it hardware or software, but also allows
    for consistent benchmarking, profiling, and analysis of performance, reliability,
    and other metrics.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在规模测试中：测试分布式系统比测试传统系统要花费更多的成本，无论是在复杂性还是所需资源方面，尝试测试一个完全集成的分布式系统与传统系统相比。这是因为完全测试一个分布式系统需要大量潜在异构的设备运行在潜在的多个平台和/或架构上。这不仅需要一种可以轻松运行每个新的整体系统变体的测试系统和方法，无论是硬件还是软件，而且还允许对性能、可靠性和其他指标进行一致的基准测试、分析和性能分析。 '
- en: References
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] HBR. *The Truth About Blockchain, HBR.* (Accessed on 08/30/2017), January
    [https://hbr.org/2017/01/the-truth-about-blockchain](https://hbr.org/2017/01/the-truth-about-blockchain).
    2017.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] HBR。*关于区块链的真相，HBR*。（访问日期：2017年01月08日），2017年1月 [https://hbr.org/2017/01/the-truth-about-blockchain](https://hbr.org/2017/01/the-truth-about-blockchain)。'
- en: '[2] CoinMarketCap. *Bitcoin (BTC) Price, Charts, Market Cap, and Other Metrics,
    CoinMarketCap.* (Accessed on 08/30/2017), August [https://coinmarketcap.com/currencies/bitcoin/](https://coinmarketcap.com/currencies/bitcoin/).
    2017.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] CoinMarketCap。*比特币 (BTC) 价格、图表、市值和其他指标，CoinMarketCap*。（访问日期：2017年08月30日），2017年8月
    [https://coinmarketcap.com/currencies/bitcoin/](https://coinmarketcap.com/currencies/bitcoin/)。'
- en: '[3] CoinMarketCap. *Ethereum (ETH) $381.84 (3.83%), CoinMarketCap.* (Accessed
    on 08/30/2017), August [https://coinmarketcap.com/currencies/ethereum[/]](https://coinmarketcap.com/currencies/ethereum/).
    2017.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] CoinMarketCap。*以太坊 (ETH) 381.84美元 (上涨3.83%)，CoinMarketCap*。（访问日期：2017年08月30日），2017年8月
    [https://coinmarketcap.com/currencies/ethereum/](https://coinmarketcap.com/currencies/ethereum/)。'
- en: '[4] Ethereum Git Books. *Interfaces | Ethereum Frontier Guide.* (Accessed on
    08/30/2017) [https://ethereum.gitbooks.io/frontier-guide/content/interfaces.html](https://ethereum.gitbooks.io/frontier-guide/content/interfaces.html).
    2017.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[4] 以太坊 Git 图书。*接口 | 以太坊前沿指南*。（访问日期：2017年08月30日）[https://ethereum.gitbooks.io/frontier-guide/content/interfaces.html](https://ethereum.gitbooks.io/frontier-guide/content/interfaces.html)。2017年。'
- en: '[5] Github. *Use RPC API Personal_SendTransaction Lost Coin Issue #14901 ·
    Ethereum/Goethereum, Github.* (Accessed on 08/30/2017), August [https://github.com/ethereum/go-ethereum/issues/14901](https://github.com/ethereum/go-ethereum/issues/14901).
    2017.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[5] Github。*使用 RPC API Personal_SendTransaction 丢失硬币问题 #14901 · Ethereum/Goethereum，Github*。（访问日期：2017年08月30日），2017年8月
    [https://github.com/ethereum/go-ethereum/issues/14901](https://github.com/ethereum/go-ethereum/issues/14901)。'
- en: '[6] Bogner A., Chanson M., Meeuw A. A decentralised sharing app running a smart
    contract on the Ethereum blockchain. In: *Proceedings of the 6th International
    Conference on the Internet of Things, 177–178\. IoT’16.* Stuttgart, Germany: ACM;
    2016:doi:10.1145/2991561.2998465 Isbn: 978-1-4503-48140.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[6] Bogner A., Chanson M., Meeuw A.在以太坊区块链上运行智能合约的分散共享应用程序。在：《第6届国际物联网大会，177–178。IoT’16》。德国斯图加特：ACM；2016：doi:10.1145/2991561.2998465
    ISBN：978-1-4503-48140。'
- en: '[7] Buccafurri F., Lax G., Nicolazzo S., Nocera A. Overcoming limits of blockchain
    for IoT applications. In: *Proceedings of the 12th International Conference on
    Availability, Reliability and Security, 26:1–26:6\. ARES ‘17.* Reggio Calabria,
    Italy: ACM; 2017:doi:10.1145/3098954.3098983 Isbn: 978-1-45035257-4.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[7] Buccafurri F., Lax G., Nicolazzo S., Nocera A.克服物联网应用的区块链限制。在：《第12届可用性、可靠性和安全性国际会议，26：1–26：6。ARES
    ‘17》。意大利雷焦卡拉布里亚：ACM；2017：doi:10.1145/3098954.3098983 ISBN：978-1-45035257-4。'
- en: '[8] Gubbi J., Buyya R., Marusic S., Palaniswami M. Internet of things (IoT):
    a vision, architectural elements, and future directions. *Futur. Gener. Comput.
    Syst.* 2013;29(7):1645–1660.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[8] Gubbi J., Buyya R., Marusic S., Palaniswami M.物联网（IoT）：愿景、架构要素和未来方向。《未来。计算机系统》2013年；29（7）：1645–1660。'
- en: '[9] Christidis K., Devetsikiotis M. Blockchains and smart contracts for the
    internet of things. *IEEE Access.* 2016;4:2292–2303.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[9] Christidis K., Devetsikiotis M.区块链和智能合约用于物联网。《IEEE Access》。2016；4：2292–2303。'
- en: '[10] Dorri A., Kanhere S.S., Jurdak R., Gauravaram P. *Blockchain for IoT security
    and privacy: the case study of a smart home.* In: IEEE International Conference
    on Pervasive Computing and Communications Workshops (PerCom Workshops), 2017;
    IEEE; 2017:618–623.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '[10] Dorri A., Kanhere S.S., Jurdak R., Gauravaram P.物联网安全和隐私的区块链：智能家居的案例研究。在：IEEE国际普适计算与通信研讨会（PerCom
    Workshops）2017年；IEEE；2017：618–623。'
- en: '[11] Ouaddah A., Abou Elkalam A., Ouahman A.A. Towards a novel privacy-preserving
    access control model based on blockchain technology in IoT. In: *Europe and MENA
    Cooperation Advances in Information and Communication Technologies.* Springer;
    2017:523–533.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[11] Ouaddah A., Abou Elkalam A., Ouahman A.A.致力于基于区块链技术的物联网隐私保护访问控制模型的创新。在：《欧洲和中东北非合作信息和通信技术进展》。Springer；2017：523–533。'
- en: '[12] Kumaresan R., Bentov I. *How to use bitcoin to incentivize correct computations.*
    In: Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications
    Security; ACM; 2014:30–41.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[12] Kumaresan R., Bentov I.如何使用比特币激励正确计算。在：2014年ACM SIGSAC计算机和通信安全会议论文集；ACM；2014：30–41。'
- en: '[13] Delmolino K., Arnett M., Kosba A., Miller A., Shi E. Step by step towards
    creating a safe smart contract: lessons and insights from a cryptocurrency lab.
    In: *International Conference on Financial Cryptography and Data Security.* Springer;
    2016:79–94.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[13] Delmolino K., Arnett M., Kosba A., Miller A., Shi E.逐步创建安全智能合约的经验和见解：来自加密货币实验室的教训。在：《金融密码学和数据安全国际会议》。Springer；2016：79–94。'
- en: '[14] Walker M.A., Dubey A., Laszka A., Schmidt D.C. Platibart: a platform for
    transactive IoT blockchain applications with repeatable testing. In: *Proceedings
    of the 4th Workshop on Middleware and Applications for the Internet of Things.*
    ACM; 2017:17–22.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[14] Walker M.A., Dubey A., Laszka A., Schmidt D.C. Platibart：一个可重复测试的传感器物联网区块链应用平台。在：*物联网中间件和应用程序第四届研讨会论文集.*
    ACM; 2017:17–22.'
- en: '[15] Eisele S., Mardari I., Dubey A., Karsai G. *RIAPS: resilient information
    architecture platform for decentralized smart systems.* In: [2017 IEEE] 20^(th)
    International Symposium on Real-Time Distributed Computing (ISORC); 2017:125–132\.
    May [https://doi.org/10.1109/ISORC.2017.22](https://doi.org/10.1109/ISORC.2017.22).'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[15] Eisele S., Mardari I., Dubey A., Karsai G. *RIAPS：去中心化智能系统的弹性信息架构平台.*
    在：[2017 IEEE] 第20届实时分布式计算国际研讨会（ISORC）; 2017:125–132\. May [https://doi.org/10.1109/ISORC.2017.22](https://doi.org/10.1109/ISORC.2017.22).'
- en: '[16] ZeroMQ, Hintjens P. *ZeroMQ: The Guide, ZeroMQ.* URL [http://zeromq.org](http://zeromq.org).
    2010.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[16] ZeroMQ, Hintjens P. *ZeroMQ：指南，ZeroMQ.* URL [http://zeromq.org](http://zeromq.org).
    2010.'
- en: '[17] Cap''n Proto, Varda K. *Cap''n Proto.* 2015\. [https://capnproto.org/](https://capnproto.org/).'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[17] Cap''n Proto, Varda K. *Cap''n Proto.* 2015\. [https://capnproto.org/](https://capnproto.org/).'
- en: '[18] Lee H., Niddodi S., Srivastava A., Bakken D. Decentralized voltage stability
    monitoring and control in the smart grid using distributed computing architecture.
    In: *2016 IEEE Industry Applications Society Annual Meeting.* 2016:1–9\. October
    [https://doi.org/10.1109/IAS.2016.7731871](https://doi.org/10.1109/IAS.2016.7731871).'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '[18] Lee H., Niddodi S., Srivastava A., Bakken D. 在智能电网中使用分布式计算架构进行去中心化电压稳定性监控和控制。
    在：*2016 IEEE工业应用学会年会.* 2016:1–9\. October [https://doi.org/10.1109/IAS.2016.7731871](https://doi.org/10.1109/IAS.2016.7731871).'
- en: '[19] GitHub. *JSON RPC—Ethereum/Wiki.* Accessed on 08/28/2017 [https://github.com/ethereum/wiki/wiki/JSON-RPC](https://github.com/ethereum/wiki/wiki/JSON-RPC).
    2017.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[19] GitHub. *JSON RPC—以太坊/Wiki.* 访问于08/28/2017 [https://github.com/ethereum/wiki/wiki/JSON-RPC](https://github.com/ethereum/wiki/wiki/JSON-RPC).
    2017.'
- en: '[20] Lee E.A., Neuendorffer S., Wirthlin M.J. Actor-oriented design of embedded
    hardware and software systems. *J. Circuit. Syst. Comp.* 2003;12(03):231–260.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[20] Lee E.A., Neuendorffer S., Wirthlin M.J. 嵌入式硬件和软件系统的面向演员的设计。 *J. Circuit.
    Syst. Comp.* 2003;12(03):231–260.'
- en: '[21] Cazalet E., De Marini P., Price J., Woychik E., Caldwell J. *Transactive
    Energy Models.* Technical Report National Institute of Standards Technology; 2016.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[21] Cazalet E., De Marini P., Price J., Woychik E., Caldwell J. *Transactive
    Energy Models.* 国家标准技术研究所技术报告; 2016.'
- en: '[22] Melton R.B. *Gridwise Transactive Energy Framework.* Technical Report
    Pacific Northwest National Laboratory; 2013.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[22] Melton R.B. *Gridwise Transactive Energy Framework.* 太平洋西北国家实验室技术报告; 2013.'
- en: '[23] Brooklyn Microgrid, Brooklyn Microgrid - Home. [http://brooklynmicrogrid.com/](http://brooklynmicrogrid.com/).
    2017.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[23] Brooklyn Microgrid, Brooklyn Microgrid - 主页。 [http://brooklynmicrogrid.com/](http://brooklynmicrogrid.com/).
    2017.'
- en: '[24] Sterling Ranch Development Company. *The Nature of Sterling Ranch, Sterling
    Ranch Development Company.* [http://sterlingranchcolorado.com/about/](http://sterlingranchcolorado.com/about/).
    2017.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[24] Sterling Ranch 开发公司。 *Sterling Ranch 的本质，Sterling Ranch 开发公司.* [http://sterlingranchcolorado.com/about/](http://sterlingranchcolorado.com/about/)。
    2017.'
- en: '[25] Walker M., Schmidt D.C., White J. An elastic platform for large-scale
    assessment of software assignments for MOOCs (EPLASAM). In: *User-Centered Design
    Strategies for Massive Open Online Courses (MOOCs).* IGI Global; 2016:187–206.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[25] Walker M., Schmidt D.C., White J. 用于大规模软件作业评估的弹性平台（EPLASAM）。在：*大规模开放在线课程（MOOCs）的用户中心设计策略.*
    IGI Global; 2016:187–206.'
- en: Further reading
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '[26] Agrawal H., Horgan J.R., Krauser E.W., London S.A. *Incremental regression
    testing.* In: Proceedings., Conference on Software Maintenance, 1993\. CSM93;
    IEEE; 1993:348–357.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[26] Agrawal H., Horgan J.R., Krauser E.W., London S.A. *增量回归测试.* 在：会议论文集，1993年软件维护会议;
    IEEE; 1993:348–357.'
- en: '[27] Banafa A. *IoT and Blockchain Convergence: Benefits and Challenges—IEEE
    Internet of Things, IEEE.* Accessed on 08/31/2017 [https://iot.ieee.org/newsletter/january2017/iot-and-blockchain-convergence-benefits-and-challenges.html](https://iot.ieee.org/newsletter/january2017/iot-and-blockchain-convergence-benefits-and-challenges.html).
    2017.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[27] Banafa A. *物联网与区块链的融合：好处与挑战—IEEE物联网, IEEE.* 访问日期08/31/2017 [https://iot.ieee.org/newsletter/january2017/iot-and-blockchain-convergence-benefits-and-challenges.html](https://iot.ieee.org/newsletter/january2017/iot-and-blockchain-convergence-benefits-and-challenges.html)。
    2017.'
- en: '[28] Beck R., Stenum Czepluch J., Lollike N., Malone S. *Blockchain-the Gateway
    to Trust-Free Cryptographic Transactions.* ECIS; 2016 ResearchPaper153.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[28] Beck R., Stenum Czepluch J., Lollike N., Malone S. *区块链——无需信任的加密交易门户.*
    ECIS; 2016 ResearchPaper153.'
- en: '[29] Dubey A., Karsai G., Pradhan S. *Resilience at the edge in cyber-physical
    systems.* In: 2017 Second International Conference on Fog and Mobile Edge Computing
    (FMEC); IEEE; 2017:139–146.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[29] Dubey A., Karsai G., Pradhan S. *物联网系统中边缘的韧性.* 在：2017年第二届雾计算与移动边缘计算国际会议（FMEC）;
    IEEE; 2017:139–146.'
- en: '[30] Leung H.K.N., White L. *A study of integration testing and software regression
    at the integration level.* In: Proceedings, Conference on Software Maintenance,
    1990; IEEE; 1990:290–301.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[30] Leung H.K.N., White L. *关于集成测试和软件回归的集成级别研究.* 在：会议论文集，1990年软件维护会议; IEEE;
    1990:290–301.'
- en: '[31] Mirkovic J., Benzel T. Teaching cybersecurity with DeterLab. *IEEE Secur.
    Priv..* 2012;10(1):73–76.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[31] Mirkovic J., Benzel T. 使用 DeterLab 进行网络安全教学。*IEEE安全与隐私.* 2012;10(1):73–76.'
- en: '[32] Rothermel G., Untch R.H., Chu C., Harrold M.J. Prioritizing test cases
    for regression testing. *IEEE Trans. Softw. Eng..* 2001;27(10):929–948.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[32] Rothermel G., Untch R.H., Chu C., Harrold M.J. 将测试用例按照回归测试的优先级排序。*IEEE软件工程交易.*
    2001;27(10):929–948.'
- en: '[33] Siaterlis C., Garcia A.P., Genge B. On the use of Emulab testbeds for
    scientifically rigorous experiments. *IEEE Commun. Surv. Tutorials.* 2013;15(2):929–942.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[33] Siaterlis C., Garcia A.P., Genge B. 关于使用 Emulab 实验平台进行科学严谨实验的研究。*IEEE通信调查与教程.*
    2013;15(2):929–942.'
- en: '[34] Simić M., Sladić G., Milosavljević B. *A Case Study IoT and Blockchain
    Powered Healthcare.* June 2017 In: The 8th PSU-UNS International Conference on
    Engineering and Technology (ICET-2017).'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[34] Simić M., Sladić G., Milosavljević B. *物联网和区块链驱动的医疗保健案例研究.* 2017年6月，收录于：第八届PSU-UNS国际工程与技术会议（ICET-2017）。'
- en: '[35] Github. *Sometimes, Transactions Disappear From Txpool Rather Than Being
    Mined Into the Next Block—Issue #14893—Ethereum/Go-Ethereum.* 2017\. [https://github.com/ethereum/go-ethereum/issues/14893](https://github.com/ethereum/go-ethereum/issues/14893).'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[35] Github. *有时，交易会从Txpool中消失，而不是被挖掘进入下一个区块—问题 #14893—以太坊/Go-Ethereum.* 2017年。[https://github.com/ethereum/go-ethereum/issues/14893](https://github.com/ethereum/go-ethereum/issues/14893).'
- en: '[36] Zhang F., Cecchetti E., Croman K., Juels A., Shi E. *Town crier: an authenticated
    data feed for smart contracts.* In: Proceedings of the 2016 ACM SIGSAC Conference
    on Computer and Communications Security; Vienna, Austria: ACM; 2016:270–282\.
    isbn: 978-1-45034139-4\. CCS ’16 [https://doi.org/10.1145/2976749.2978326](https://doi.org/10.1145/2976749.2978326).'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[36] Zhang F., Cecchetti E., Croman K., Juels A., Shi E. *城镇信使：智能合约的认证数据源.*
    收录于：2016年ACM SIGSAC计算机与通信安全会议论文集；维也纳，奥地利：ACM；2016年：270–282。isbn: 978-1-45034139-4。CCS
    ’16 [https://doi.org/10.1145/2976749.2978326](https://doi.org/10.1145/2976749.2978326)。'
- en: '**Mr. Michael A. Walker** is a Graduate Research Assistant pursuing his PhD
    in Computer Science at Vanderbilt University, Nashville, TN, USA. Currently he
    is an Instructor for the Computer Science & Information Systems department at
    Youngstown State University. He previously received his Masters in Science in
    Computer Science from Vanderbilt University [2011 − 2013], and obtained his Bachelors
    of Science in Computer Science from Youngstown State University [2006–2011].'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**Michael A. Walker先生**是一位攻读计算机科学博士学位的研究生助理，就读于美国田纳西州纳什维尔的范德堡大学。目前，他是杨斯顿州立大学计算机科学与信息系统系的讲师。他曾于[2011 − 2013年]在范德堡大学获得计算机科学硕士学位，并于2006年至2011年在杨斯顿州立大学获得计算机科学学士学位。'
- en: Mr. Walker's research interests include Distributed Systems, Learning-at-Scale,
    Privacy, Security, and Software Design Patterns. He has published more than 11
    research papers in various conferences, workshops and international journals of
    repute, including IEEE and ACM. He has been involved with 10 Massive Open Online
    Courses, acting as a Teaching Staff for three and an Instructor for four courses.
    He is a present and past board member of several non-profits directed toward outreach
    and education of Science, Technology, Engineering, and Mathematics, with a concentration
    on computer literacy and scientific understanding, specifically focused on benefiting
    young girls from disadvantaged backgrounds. Additionally, he has given several
    conference presentations on the subject of bridging the academic and industry
    divide for non-traditional students.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Mr. Walker 的研究兴趣包括分布式系统、大规模学习、隐私、安全和软件设计模式。他在各种会议、研讨会和国际著名期刊上发表了超过 11 篇研究论文，包括
    IEEE 和 ACM。他参与了 10 门大规模开放在线课程，担任三门课程的教学人员和四门课程的讲师。他是几个非营利组织的现任和前任董事会成员，致力于推广科学、技术、工程和数学教育，重点关注计算机素养和科学理解，特别是惠及来自贫困背景的年轻女孩。此外，他还就弥合非传统学生之间的学术和产业分歧问题进行了多次会议演讲。
- en: '**Dr. Douglas C. Schmidt** is the Cornelius Vanderbilt Professor of Computer
    Science, Associate Provost for Research Development and Technologies, Co-Chair
    of the Data Sciences Institute, and a Senior Researcher at the Institute for Software
    Integrated Systems, all at Vanderbilt University. His research covers a range
    of software-related topics, including patterns, optimization techniques, and empirical
    analyses of middleware frameworks for distributed real-time embedded systems and
    mobile cloud computing applications.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**Douglas C. Schmidt 博士**是范德堡大学的康奈利斯·范德比尔特计算机科学教授、研究发展和技术副教务长、数据科学研究所联合主席以及软件集成系统研究所的高级研究员。他的研究涵盖了一系列与软件相关的主题，包括模式、优化技术以及用于分布式实时嵌入式系统和移动云计算应用的中间件框架的经验分析。'
- en: Dr. Schmidt has published 12 books and > 600 technical papers covering a range
    of software-related topics, including patterns, optimization techniques, and empirical
    analyses of frameworks and model-driven engineering tools that facilitate the
    development of mission-critical middleware and mobile cloud computing applications
    running over wireless/wired networks and embedded system interconnects. For the
    past three decades, Dr. Schmidt has led the development of ACE and TAO, which
    are open-source middleware frameworks that constitute some of the most successful
    examples of software R&D ever transitioned from research to industry.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 施密特博士已发表了 12 本书和超过 600 篇技术论文，涵盖了一系列与软件相关的主题，包括模式、优化技术以及框架和模型驱动工程工具的实证分析，这些工具有助于开发在无线/有线网络和嵌入式系统互连上运行的任务关键型中间件和移动云计算应用。在过去的三十年里，施密特博士一直领导着
    ACE 和 TAO 的开发，这是一些最成功的软件研发范例之一，已经从研究转向产业。
- en: Dr. Schmidt received B.A. and M.A. degrees in Sociology from the College of
    William and Mary in Williamsburg, Virginia, and an M.S. and a Ph.D. in Computer
    Science from the University of California, Irvine in 1984, 1986, 1990, and 1994,
    respectively.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 施密特博士分别于 1984 年、1986 年、1990 年和 1994 年从弗吉尼亚州威廉斯堡的威廉玛丽学院获得社会学学士和硕士学位，以及从加利福尼亚大学尔湾分校获得计算机科学硕士和博士学位。
- en: '**Dr. Abhishek Dubey** is an Assistant Professor of Electrical Engineering
    and Computer Science at Vanderbilt University, Senior Research Scientist at the
    Institute for Software-Integrated Systems and co-lead for the Vanderbilt Initiative
    for Smart Cities Operations and Research (VISOR). His research interests include
    model-driven and data-driven techniques for dynamic and resilient human cyber
    physical systems. He directs the Smart computing laboratory ([scope.isis.vanderbilt.edu](https://na01.safelinks.protection.outlook.com/?url=http%3A%2F%2Fscope.isis.vanderbilt.edu&data=02%7C01%7Cabhishek.dubey%40Vanderbilt.Edu%7Cc1bc5ff6ca16470115b908d5c176ef8d%7Cba5a7f39e3be4ab3b45067fa80faecad%7C0%7C0%7C636627638934148505&sdata=7jGNtuWHa9XybgoJEZO0EC8G25k6eMbbeyRLG1fDzoI%3D&reserved=0))
    at the university. The lab conducts research at the intersection of Distributed
    Systems, Big Data, and Cyber Physical System, especially in the domain of transportation
    and electrical networks. Abhishek completed his PhD in Electrical Engineering
    from Vanderbilt University in 2009\. He received his M.S. in Electrical Engineering
    from Vanderbilt University in August 2005 and completed his undergraduate studies
    in Electrical Engineering from the Indian Institute of Technology, Banaras Hindu
    University, India in May 2001\. He is a senior member of IEEE.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**阿比舍克·杜贝**是范德堡大学电气工程和计算机科学的助理教授，也是软件集成系统研究所的高级研究科学家，范德堡智慧城市运营和研究计划的联合负责人。他的研究兴趣包括用于动态和有弹性的人类网络物理系统的模型驱动和数据驱动技术。他在大学指导着智能计算实验室（[scope.isis.vanderbilt.edu](https://na01.safelinks.protection.outlook.com/?url=http%3A%2F%2Fscope.isis.vanderbilt.edu&data=02%7C01%7Cabhishek.dubey%40Vanderbilt.Edu%7Cc1bc5ff6ca16470115b908d5c176ef8d%7Cba5a7f39e3be4ab3b45067fa80faecad%7C0%7C0%7C636627638934148505&sdata=7jGNtuWHa9XybgoJEZO0EC8G25k6eMbbeyRLG1fDzoI%3D&reserved=0)）。该实验室在分布式系统、大数据和网络物理系统的交叉领域开展研究，尤其是在交通和电力网络领域。阿比舍克于2009年从范德堡大学取得电气工程博士学位。他于2005年8月从范德堡大学获得电气工程硕士学位，并于2001年5月从印度理工学院班拉斯大学取得电气工程学士学位。他是IEEE的高级成员。'
- en: '* * *'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: ^([a](S0065245819300348.xhtml#xfn0010 "label")) [https://nixos.org/](https://nixos.org/).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: ^([a](S0065245819300348.xhtml#xfn0010 "label")) [https://nixos.org/](https://nixos.org/).
- en: ^([b](S0065245819300348.xhtml#xfn0015 "label")) RIAPS uses ZeroMQ [[16]](S0065245819300348.xhtml#bb0085)
    and Cap'n Proto [[17]](S0065245819300348.xhtml#bb0090) to manage the communication
    layer.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: ^([b](S0065245819300348.xhtml#xfn0015 "label")) RIAPS使用ZeroMQ [[16]](S0065245819300348.xhtml#bb0085)和Cap'n
    Proto [[17]](S0065245819300348.xhtml#bb0090)来管理通信层。
- en: ^([c](S0065245819300348.xhtml#xfn0020 "label")) [https://github.com/ethereum/go-ethereum/wiki/geth](https://github.com/ethereum/go-ethereum/wiki/geth).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: ^([c](S0065245819300348.xhtml#xfn0020 "label")) [https://github.com/ethereum/go-ethereum/wiki/geth](https://github.com/ethereum/go-ethereum/wiki/geth).
- en: ^([d](S0065245819300348.xhtml#xfn0025 "label")) “balance” applies only to accounts
    created before a new blockchain is created. Accounts created after the blockchain,
    be it public or private, is created will not receive any starting balance.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: ^([d](S0065245819300348.xhtml#xfn0025 "label")) “balance” 仅适用于在创建新区块链之前创建的帐户。在区块链创建之后创建的帐户，无论是公共的还是私有的，都不会收到任何初始余额。
- en: ^([e](S0065245819300348.xhtml#xfn0030 "label")) [https://oh-iot.com/](https://oh-iot.com/).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: ^([e](S0065245819300348.xhtml#xfn0030 "label")) [https://oh-iot.com/](https://oh-iot.com/).
