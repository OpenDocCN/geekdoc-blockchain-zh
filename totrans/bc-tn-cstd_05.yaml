- en: © The Author(s), under exclusive license to APress Media, LLC, part of Springer
    Nature 2023B. Wu, B. WuBlockchain for Teens[https://doi.org/10.1007/978-1-4842-8808-5_5](https://doi.org/10.1007/978-1-4842-8808-5_5)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: ©作者，受独家授权于APress Media, LLC，是Springer Nature的一部分 2023B. Wu，B. Wu青少年区块链[https://doi.org/10.1007/978-1-4842-8808-5_5](https://doi.org/10.1007/978-1-4842-8808-5_5)
- en: '5. Smart Contracts and Dapps: From Theory to Practice'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5. 智能合约与Dapps：从理论到实践
- en: Brian Wu^([1](#Aff3)  ) and Bridget Wu^([1](#Aff3))(1)Livingston, NJ, USA
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 布莱恩·吴（Brian Wu）和布里吉特·吴（Bridget Wu）(1)美国新泽西州Livingston
- en: Brian Kernighan, a computer scientist, wrote the first “Hello, World!” program
    in 1972 for the language B to be used internally at Bell Labs. Brian wrote a manual
    titled *A Tutorial Introduction to the Language B* to demonstrate how to use B’s
    language. From there, this popular text spread quickly. It was used in a Bell
    Laboratories memo in 1974, as well as *The* *C Programming Language* in 1978\.
    “Hello, World!” remains popular to this day. It became a standard for new programmers
    for their first program. This particular piece of code proves your code syntax,
    compiles, and executes to consistently produce the desired output. “Hello, World!”
    offers the code in more than 60 programming languages.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机科学家布莱恩·卡恩（Brian Kernighan）在1972年为贝尔实验室内部使用的B语言编写了第一个“Hello, World!”程序。布莱恩编写了一本名为《B语言入门教程》的手册，以展示如何使用B语言。从那时起，这本受欢迎的文本迅速传播开来。1974年，它在贝尔实验室的一份备忘录中使用，1978年出现在《C编程语言》一书中。“Hello,
    World!”至今仍然很受欢迎。它成为了新手程序员的第一程序的标准。这段特定的代码证明了你的代码语法、编译和执行能够一致地产生期望的输出。“Hello, World!”提供了超过60种编程语言的版本。
- en: In the previous chapter, we have theoretically explained the Ethereum network,
    including Ethereum key components, EVM, architecture, etc. The best way to better
    understand what we learned so far is to start practicing and writing a smart contract
    and Dapps for the Ethereum blockchain.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们从理论上解释了以太坊网络，包括以太坊的关键组成部分、EVM、架构等。更好地理解我们已经学到的内容的最佳方式是开始实践，并为以太坊区块链编写智能合约和Dapps。
- en: By using the online Remix tool, you’ll learn how to write HelloWorld code in
    Solidity with all needed syntax. You’ll start from the very beginning, line by
    line. You will also learn how to compile and deploy your smart contract locally
    as well as on a globally distributed testnet. Then, we will install and connect
    our Metamask wallet to testnet. After setting up all that is required in your
    local Dapp development environment, you will start developing your own Dapp with
    minimal effort to connect the contract in testnet. By taking control of your Ethereum
    wallet at the end of this chapter, you should be able to run end-to-end HelloWorld
    Dapp.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用在线Remix工具，你将学会如何在Solidity中编写HelloWorld代码，并掌握所有所需的语法。你会从最基础的部分开始，一步一步地进行。你还将学习如何在本地以及全球分布式的测试网上编译和部署你的智能合约。然后，我们将安装并连接我们的MetaMask钱包到测试网。在设置好你本地的Dapp开发环境后，你将可以轻松地开发出自己的Dapp，并在测试网上连接合约。在本章结束时，当你控制好自己的以太坊钱包时，你应该能够运行完整的HelloWorld
    Dapp。
- en: 'This chapter will help you to achieve the following practical goals:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助你实现以下实际目标：
- en: Introducing Remix
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Remix
- en: Writing your first smart contract
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写你的第一个智能合约
- en: Taking control of your first Ethereum wallet
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制你的第一个以太坊钱包
- en: Decentralized Applications (Dapps)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 去中心化应用（Dapps）
- en: Tokens standard
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代币标准
- en: In the last section, we talk about token standards with the two most important
    tokens—ERC-20 and ERC-721\. ERC-721 is the NFT token standard that we will go
    over in the next chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们讨论了两种最重要的代币标准——ERC-20和ERC-721。ERC-721是我们将在下一章讨论的NFT代币标准。
- en: This will help make you more familiar with smart contracts and Dapps.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这将帮助你更加熟悉智能合约和Dapps。
- en: Introducing Remix
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍Remix
- en: Gavin Wood proposed Solidity programming language in August 2014\. Alex Beregszaszi,
    Christian Reitwiessner, and other Ethereum core contributors created Solidity.
    It is a high-level object-oriented programming language that is inspired by JavaScript,
    C++, and Python. The purpose of solidity is to execute smart contracts on EVM-based
    blockchain networks.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 加文·伍德在2014年8月提出了Solidity编程语言。亚历克斯·贝雷加萨兹（Alex Beregszaszi）、克里斯蒂安·雷特魏瑟纳（Christian
    Reitwiessner）以及其他以太坊核心贡献者创造了Solidity。它是一种高级的面向对象编程语言，灵感来源于JavaScript、C++和Python。Solidity的目的是在基于EVM的区块链网络上执行智能合约。
- en: Many tools are available for creating and developing Solidity smart contracts.
    Remix, HardHat, Truffle, and others are popular tools used by Solidity developers.
    Remix is a powerful online integrated development environment (IDE) for coding,
    compiling, testing, and debugging smart contracts in Solidity. We don’t need to
    install any other special software, apart from your web browser.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多工具可用于创建和开发Solidity智能合约。Remix、HardHat、Truffle等是Solidity开发者常用的流行工具。Remix是一个功能强大的在线集成开发环境（IDE），用于在Solidity中编码、编译、测试和调试智能合约。我们不需要安装任何其他特殊软件，只需安装一个网络浏览器即可。
- en: 'You can type the Remix IDE in your browser URL box using the following URL:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在浏览器URL框中输入以下URL来打开Remix IDE：
- en: '[https://remix.ethereum.org](https://remix.ethereum.org). You’ll then be navigated
    to the Remix home page as shown in Figure [5-1](#Fig1).![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig1_HTML.png)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://remix.ethereum.org](https://remix.ethereum.org)。然后您将被引导到如图5-1所示的Remix主页。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig1_HTML.png)'
- en: A screenshot of an interface labeled file explorers with toolbars. Homepage
    is displayed on the right with a caption labeled as remix I D E and below it shows
    a scan alert message.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 显示一个带有工具栏的文件资源管理器界面。右侧显示主页，带有“remix I D E”标题，下方显示扫描警告信息。
- en: Figure 5-1
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-1
- en: Remix home page
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Remix主页
- en: You will notice that there is a left toolbar menu on the Remix screen. When
    you click each menu icon, you will see different modules provided.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到Remix屏幕上有一个左侧工具栏菜单。当你点击每个菜单图标时，你会看到提供的不同模块。
- en: File Explorers
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件资源管理器
- en: On File Explorer module, you can manage your workspaces and create contract
    files under workspaces. When you work on multiple projects, workspaces can help
    organize your files in different project workspaces. You can create smart contract
    files, create folders, and upload local files to the current workspace. It is
    very similar to other cloud browser-based tools, like google drive, dropbox, etc.
    Under contracts folder, Remix creates three default contracts for you. If you
    don’t use, you can delete them.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig2_HTML.jpg)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件资源管理器模块中，您可以管理您的工作区并在工作区下创建合约文件。当你处理多个项目时，工作区可以帮助你在不同的项目工作区中组织文件。您可以创建智能合约文件、创建文件夹和将本地文件上传到当前工作区。它与其他基于浏览器的云工具非常相似，例如Google
    Drive、Dropbox等。在合约文件夹下，Remix为您创建了三个默认合约。如果您不使用，可以删除它们。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig2_HTML.jpg)
- en: A screenshot of a interface labeled default workspace illustrates 3 markings
    for 3 icons. The markings are create new contact, create new folder and load local
    file to current workspace.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 显示一个带有三个图标标记的默认工作区界面。标记包括创建新合约、创建新文件夹和将本地文件加载到当前工作区。
- en: Figure 5-2
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-2
- en: Remix File explorer page
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Remix文件资源管理器页面
- en: Solidity Compiler
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Solidity编译器
- en: On the Solidity compiler module, you can select a different version of the Solidity
    compiler, the current version at this writing is 0.8.7\. Since Solidity evolves
    quite frequently, you need to pay close attention to choosing the configuration
    you need. Once you create Solidity files, you can compile files by clicking the
    compile button. The Remix contract section will display a file compilation information,
    for example, error and warning. The Remix will auto-save the current file change
    continuously every 5 seconds.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig3_HTML.jpg)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在Solidity编译器模块中，您可以选择不同的Solidity编译器版本，目前版本为0.8.7。由于Solidity频繁更新，您需要密切关注选择您需要的配置。创建Solidity文件后，可以通过点击编译按钮来编译文件。Remix合约部分将显示文件编译信息，例如错误和警告。Remix会每5秒自动保存一次当前文件更改。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig3_HTML.jpg)
- en: A screenshot of an interface labeled solidity compiler illustrating advanced
    configurations with file selection and run options.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 显示一个带有文件选择和运行选项的高级配置的Solidity编译器界面。
- en: Figure 5-3
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-3
- en: Remix Solidity compiler page
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Remix Solidity编译器页面
- en: Deploy and Run Transactions
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署和运行交易
- en: After you have compiled a smart contract, you can use deploy and run transactions
    module to deploy the contract. You need to select one contract in the Contract
    Editor to deploy if you have multiple contracts compiled.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig4_HTML.png)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 编译智能合约后，你可以使用部署和运行交易模块来部署合约。如果你编译了多个合约，需要在合约编辑器中选择一个合约来部署。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig4_HTML.png)
- en: A screenshot labeled deploy and run transactions page with environment, account,
    gas limit, value and contract details filling form. Lower part illustrates adress
    adding, transactions recorded, and deployed contacts section.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一张标记为“部署和运行交易页面”的截图，其中包括环境、账户、燃料限制、值和合约详细信息填写表单。下半部分说明了地址添加、记录的交易和部署的合约部分。
- en: Figure 5-4
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-4
- en: Remix Deploy and Run Transaction module
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Remix部署和运行交易模块
- en: 'This module provides multiple EVM Environments:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块提供多个EVM环境：
- en: '**JavaScript VM** – JS VM has its own sandbox blockchain simulated Environment
    running in your browser. It runs transactions very fast (no mining). When you
    execute transactions, the data is only saved temporarily in the browser. Once
    you close or reload the page, all transaction data will be lost. You will have
    to start from scratch. It is very useful for a quick try and tests simple contracts.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig5_HTML.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**JavaScript虚拟机** – JS VM在浏览器中运行自己的沙盒区块链模拟环境。它能够非常快速地执行交易（无需挖矿）。当你执行交易时，数据只在浏览器中临时保存。一旦你关闭或重新加载页面，所有交易数据都将丢失。你必须从头开始。这对于快速尝试和测试简单合约非常有用。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig5_HTML.jpg)'
- en: A screenshot of the a section from an interface labeled environment. Environment
    has a box for selection of java scripts, web providers and connect list.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一张来自标记为“环境”界面的截图。该环境包含一个用于选择JavaScript、网络提供商和连接列表的盒子。
- en: Figure 5-5
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-5
- en: Remix EVM environments
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Remix EVM环境
- en: '**Injected Provider** – Remix will connect to a web3 provider injected in the
    browser (commonly known as a browser extension for your wallet). Metamask is currently
    the most popular Injected Provider. You can also use other popular wallets like
    Coinbase wallet, Trust Wallet, and Ledger. You can connect to Ethereum’s main
    network or various testnets through the provider. This allows the Remix to interact
    with a real network.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**注入式提供商** – Remix将连接到浏览器中注入的web3提供商（通常被称为您的钱包的浏览器扩展）。目前，MetaMask是最受欢迎的注入式提供商。您还可以使用其他流行的钱包，如Coinbase钱包、Trust
    Wallet和Ledger。通过提供商，您可以连接到以太坊主网络或各种测试网络。这使得Remix能够与真实网络互动。'
- en: '**Web3 Provider** – Remix will connect to a remote node. You will need to provide
    the URL for the selected provider. Infura, Alchemy, and QuikNode are some popular
    Web3 providers.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**Web3提供商** – Remix将连接到远程节点。您需要为所选提供商提供URL。Infura、Alchemy和QuikNode是一些流行的Web3提供商。'
- en: Other Modules
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他模块
- en: We have introduced the important remix modules, which we typically use often.
    Other modes like plugin module allow you to install the needed plugin like debug
    plugin, Solidity static analysis module, Solidity Unit test module, and Settings
    module. If interested, you can refer to the remix document for detail ([https://remix-ide.readthedocs.io](https://remix-ide.readthedocs.io)).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了我们通常经常使用的Remix重要模块。其他如插件模块允许您安装所需的插件，如调试插件、Solidity静态分析模块、Solidity单元测试模块和设置模块。如果您有兴趣，可以参考Remix文档以获取详细信息([https://remix-ide.readthedocs.io](https://remix-ide.readthedocs.io))。
- en: At this stage, we should have the basic knowledge of Remix.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们应该已经掌握了Remix的基本知识。
- en: Let’s start to learn Solidity by writing “Hello, World!” smart contract.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过编写“Hello, World!”智能合约来开始学习Solidity。
- en: Writing Your First Smart Contract
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写您的第一个智能合约
- en: According to dune.com, the total number of smart contracts created in the second
    quarter of 2022 was 0.93 million. In Q2 2021, nearly 6 million smart contracts
    were created, as shown in Figure [5-6](#Fig6). In the current Ethereum blockchain,
    most smart contracts use Solidity programming language.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig6_HTML.png)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 根据dune.com的数据，2022年第二季度创建的智能合约总数为0.93百万。2021年Q2，近6百万智能合约被创建，如图[5-6](#Fig6)所示。在当前的以太坊区块链中，大多数智能合约使用Solidity编程语言。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig6_HTML.png)
- en: A screenshot of smart contract creation bar chart, with quarter 2 of year 2021
    having the highest contract creation.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 2021年第二季度创建的智能合约数量创下了最高纪录。[费曼学习法](https://wiki.example.org/feynmans_learning_method)的灵感源于诺贝尔物理奖获得者**理查德·费曼**。
- en: Figure 5-6
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-6
- en: Number of Smart contract creation from Q1 2021 to Q2 2022
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 2021年第一季度至2022年第二季度智能合约创建数量
- en: Write a Contract
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写合约
- en: On Remix File Explorer module, under contracts folder, click the create new
    contract icon (page icon) or use context menu by right-clicking to add our first
    contract. We will name our first smart contract HelloWorld.sol. Solidity Smart
    contracts will always have an extension of .sol as file type.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在Remix文件浏览器模块中，在合约文件夹下，点击创建新合约图标（页面图标）或使用右键菜单添加我们的第一个合约。我们将我们的第一个智能合约命名为HelloWorld.sol。Solidity智能合约总是有一个`.sol`作为文件类型扩展名。
- en: Software License
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 软件许可
- en: 'On the first line of a smart contract, you will write your smart contract license.
    SPDX License Identifiers indicate relevant license information. The MIT License
    grants anyone who uses this software the right to copy, modify, merge, distribute,
    and so on:// SPDX-License-Identifier: MIT'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个智能合约的第一行，你会写你的智能合约许可。SPDX许可标识符指示相关的许可信息。MIT许可授予使用此软件的任何权利，如复制、修改、合并、分发等：
- en: Here Comments (//) is a line of text that appears in a Solidity program but
    is not executed by the program.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这里`//`是一个出现在Solidity程序中的一行文本，但不被程序执行。
- en: Pragmas
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`pragma`'
- en: The second line is Pragmas like the following:pragma solidity ^0.8.15;
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行是如下所示的`pragma`：
- en: The pragma keyword is similar to the C language, which provides the current
    Solidity compiler. Here 0.8.15 is the Solidity compiler version. The ^ symbol
    means this file will only support compiler version starting from 0.8.7 till future
    break changes, which will cause this file to not compile. For example, pragma
    solidity >=0.4.0 <0.6.0 such as the contract won’t compile in 0.6.0 because of
    a major solidity change. In that case, you need to modify the related syntax in
    the file to use the newer version.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`pragma`关键字与C语言相似，提供了当前的Solidity编译器。在这里，0.8.15是Solidity编译器的版本。`^`符号意味着这个文件将只支持从0.8.7开始的编译器版本，直到未来的重大更改，这将导致这个文件无法编译。例如，像`pragma
    solidity >=0.4.0 <0.6.0`这样的合约在0.6.0中无法编译，因为有一个主要的变化。在这种情况下，您需要修改文件中的相关语法以使用新版本。'
- en: Define Contract
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义合约
- en: To make the code cleaner, you typically leave a blank line after the pragma
    entry. Then, in the following line of code, you start to declare the contract.
    In Solidity, we use the **contract** keyword followed by the name of the contract.
    In our case, it will be HelloWorld. The contract name should match the filename
    you created. The contents of the contract will be enclosed within curly braces
    {}:contract HelloWorld {}So far, the contract should look like Figure [5-7](#Fig7).![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig7_HTML.jpg)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使代码更整洁，你通常会在`pragma`条目后留一个空行。然后，在下一行代码中，你开始声明合约。在Solidity中，我们使用`contract`关键字，后跟合约的名称。在我们这个案例中，将是HelloWorld。合约名称应与您创建的文件名匹配。合约的内容将被大括号`{}`所包含：
- en: A screenshot of the solidity compiler configuration and compiling the hello
    world.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: solidity编译器配置和编译hello world的截图。
- en: Figure 5-7
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-7
- en: HelloWorld Empty contract
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: HelloWorld空合约
- en: Declare Contract Variable
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 声明合约变量
- en: In the next line, we enter **string public message**.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一行，我们输入**字符串公共信息**。
- en: Here the **string** keyword is a state variable type. State variables are values
    permanently stored in contract storage and are used to maintain the contract’s
    state.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`string`关键字是一个状态变量类型。状态变量是永久存储在合约存储中的值，用于维护合约的状态。
- en: The visibility of a state variable can be defined as public, private, or internal.
    In our case, because we set the visibility to public, the message field can be
    publicly accessed outside of the smart contract.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 状态变量的可见性可以被定义为公共、私有或内部。在我们这个案例中，因为我们将可见性设置为公共，所以消息字段可以在智能合约之外公开访问。
- en: Define Contract Constructor
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义合约构造函数
- en: The next thing is to create a constructor function:    constructor(string memory
    initMessage) {      message = initMessage;    }The HelloWorld.sol will be like
    Figure [5-8](#Fig8).![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig8_HTML.jpg)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个构造函数函数：
- en: A screenshot of hello world contract with messages.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 带有消息的hello world合约截图。
- en: Figure 5-8
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-8
- en: HelloWorld contract constructor
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: HelloWorld合约构造函数
- en: The constructor is a function that can be compared to a factory machine. Once
    given an input, they can run a specific task to return a result.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数是一个可以与工厂机器相比较的函数。一旦给出一个输入，它们可以运行一个特定的任务以返回一个结果。
- en: To declare a constructor, we use the constructor keyword. Once we create our
    constructor, we can create many different contracts using the same constructor.
    Whenever a new contract is created, the system automatically calls on the constructor;
    they only need to use the constructor once to create the contract. If a constructor
    is not defined explicitly, the Solidity compiler will create a default constructor,
    which does not require any input.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要声明一个构造函数，我们使用constructor关键字。一旦我们创建了我们的构造函数，我们可以使用相同的构造函数创建许多不同的合约。每当创建一个新的合约时，系统会自动调用构造函数；他们只需要使用一次构造函数来创建合约。如果没有显式定义构造函数，Solidity编译器将创建一个默认构造函数，它不需要任何输入。
- en: Most often, you may need a constructor that passes one or more parameters. Inside
    the {}, we add the initialization logic. In our example, we pass “string memory
    initMessage” input. The memory keyword we use here indicates that we want initMessage
    parameter to be mutable, or changeable, and the initMessage value is assigned
    to message variable and initialized during contract creation time.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您可能需要一个传递一个或多个参数的构造函数。在{}内部，我们添加初始化逻辑。在我们的示例中，我们传递“string memory initMessage”输入。我们在这里使用的memory关键字表示我们想要initMessage参数是可变的，或可更改的，并且initMessage值在合约创建时分配给message变量并初始化。
- en: Define Functions
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义函数
- en: 'HelloWorld contract will have two functions. One to update message and the
    other to get message:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: HelloWorld合约将有两个函数。一个用于更新消息，另一个用于获取消息：
- en: '1.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: Update contract message function
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新合约消息函数
- en: Update function will be like as follows:    function update(string memory newMessage)
    public {      message = newMessage;    }
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新函数将如下所示：function update(string memory newMessage) public {  message = newMessage; }
- en: 2.Get contract message function    function getMessage() public view returns
    (string memory) {        return message;    }
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2.获取合约消息函数function getMessage() public view returns (string memory) {        return
    message;    }
- en: A Solidity function is defined with the function keyword, followed by
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Solidity函数定义为关键字function，后跟
- en: The name of the function. Here “update” is the function name.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数的名称。这里“update”是函数名称。
- en: A list of parameters to the function is enclosed in parentheses and separated
    by commas (parameter1, parameter2, ...). It could be empty (). (string memory
    newMessage) are parameters in the HelloWorld function.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数的参数列表用括号括起来，并用逗号分隔（parameter1, parameter2, ...）。它可能是空的（）。（string memory newMessage）是HelloWorld函数的参数。
- en: Function visibility – public, private, internal, and external.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数可见性 - 公共、私有、内部和外部。
- en: Functions behavior – pure, view, and payable.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数行为 - 纯净、视图和可支付。
- en: Followed by optional returns keyword and return value type (type1, type2, ...)
    when the function has return values. In our update function, we don’t have a return
    value. But in getMessage, we return (string memory)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当函数有返回值时，接下来是可选的返回关键字和返回值类型（type1, type2, ...）。在我们的更新函数中，没有返回值。但在getMessage函数中，我们返回（string
    memory）。
- en: A statement block that defines the function, surrounded by curly brackets, {...}.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义函数的语句块，由大括号{}包围。
- en: Syntax
  id: totrans-92
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 语法
- en: The basic syntax is shown as follows:function function_name(<parameter types>…)
    {internal|external|private|public} [pure |view|payable] [returns(<return types>…)]
    {        //statements}
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 基本语法如下：function function_name(<parameter types>…) {internal|external|private|public}
    [pure |view|payable] [returns(<return types>…)] {        //statements}
- en: Function Visibility
  id: totrans-94
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 函数可见性
- en: 'A function’s scope of visibility can be set by one of these four modifiers:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数的可见性范围可以通过这四个修改器之一来设置：
- en: '**Public** – It can be called internally or externally.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公共** - 它可以在内部或外部调用。'
- en: '**Internal** – Internal functions can only be accessed from inside the current
    contract and related deriving contracts.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内部** - 内部函数只能从当前合约和相关派生合约中访问。'
- en: '**External** – It can be called from other external contracts, but cannot be
    called internally (inside the current contract).'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部** - 它可以被其他外部合约调用，但不能被内部调用（在当前合约内）。'
- en: '**Private** – Like internal visibility, but the function cannot be accessed
    from related deriving contracts.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**私有** - 类似于内部可见性，但函数不能从相关派生合约中访问。'
- en: Functions Behavior
  id: totrans-100
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 函数行为
- en: The pure, constant, view, and payable keywords dictate a Solidity functions
    behavior.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 纯净的、常量的、视图的和可支付的关键字决定了Solidity函数的行为。
- en: If the function behavior is not specified, it will read and modify the state
    of the blockchain.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数行为未指定，它将读取和修改区块链的状态。
- en: 'Pure Functions: It ensures that the caller can’t read or modify the state.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 纯净函数：它确保调用者无法读取或修改状态。
- en: 'View Functions: View functions are read-only functions that ensure that state
    variables will not be modified after calling them.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 视图函数：视图函数是只读函数，确保在调用它们之后状态变量不会被修改。
- en: 'Payable: A payable fallback function is also executed for plain Ether transfers.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 可支付：可支付回退函数也适用于简单的以太坊转账。
- en: Once you completed HelloWorld.sol, you should have 15 lines of code, as shown
    in Figure [5-9](#Fig9).![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig9_HTML.jpg)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了HelloWorld.sol，你应该有15行代码，如图[5-9](#Fig9)所示。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig9_HTML.jpg)
- en: A screenshot of the hello world completed code.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后的hello world代码的屏幕截图。
- en: Figure 5-9
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-9
- en: HelloWorld completed contract
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: HelloWorld完成的合约
- en: Compile a Contract
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编译合约
- en: As we learned in the EVM section, the smart contract needs to be compiled to
    Bytecode, before it can be deployed to the blockchain. In this step, we will compile
    our HelloWorld smart contract.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在EVM部分所学习的那样，在将合约部署到区块链之前，需要将其编译成字节码。在这个步骤中，我们将编译我们的HelloWorld智能合约。
- en: Remix IDE allows us to compile our Solidity smart contracts directly from our
    browser. Click on the compiler icon in the navigation. On the Solidity compiler
    page, select 0.8.15 compiler version; click the compile button to compile HelloWorld
    smart contract. If it compiles successfully, you will see a green checkmark on
    the compiler icon in the navigation. Notice also that compilation details button
    with Application Binary Interface (ABI) and Bytecode will show up after compiling.
    ABI contains JSON format data which encodes smart contract information that EVM
    understands and provides the standard way for Dapp to interact with contracts.
    You can check compilation detail by clicking the button, as shown in Figure [5-10](#Fig10).
    The result will have Bytecode, Abi, Assembly (Opcode), and other useful compiled
    contract information. You should copy abi content to some place; we will use this
    abi String in Dapp section to call with smart contract.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig10_HTML.png)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Remix IDE允许我们从浏览器直接编译我们的Solidity智能合约。点击导航中的编译器图标。在Solidity编译器页面，选择0.8.15编译器版本；点击编译按钮来编译HelloWorld智能合约。如果编译成功，您将在导航中的编译器图标上看到一个绿色的勾选标记。注意，编译详情按钮（包含应用程序二进制接口（ABI）和字节码）在编译后会出现。ABI包含JSON格式的数据，编码了EVM理解的智能合约信息，并为Dapp与合约交互提供了标准方式。您可以通过点击按钮查看编译详情，如图[5-10](#Fig10)所示。结果将包含字节码、ABI、汇编（操作码）以及其他有用的编译合约信息。您应该将abi内容复制到某个地方；我们将在Dapp部分使用这个abi字符串来与智能合约调用。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig10_HTML.png)
- en: Snapshot of the hello world contract with sections marked as bytecode, a b i,
    storage layout, web 3 deploy, meradata hash, function hashes, gasestimates, devdoc,
    userdoc, runtime bytecode, and assembly.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 合约的快照，其中用字节码标记了部分，存储布局，Web3部署，元数据哈希，函数哈希，燃料估算，开发文档，用户文档，运行时字节码和汇编语言。
- en: Figure 5-10
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-10
- en: Compiled HelloWorld contract
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 编译的HelloWorld合约
- en: Deploy and Run a Contract
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署和运行合约
- en: To deploy our contract, click on deploy and run transactions module on the left
    menu. You should see a dropdown menu listing all the available smart contracts
    under the Contract Heading, HelloWorld. HelloWorld.sol will be the default selected
    contract, with an orange Deploy button directly beneath it.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig11_HTML.png)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署我们的合约，请点击左侧菜单的部署和运行交易模块。您应该会看到一个下拉菜单，其中列出了所有可用的智能合约，合约标题下为HelloWorld。HelloWorld.sol将是默认选中的合约，下面有一个橙色的部署按钮。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig11_HTML.png)
- en: A screenshot of deploy and run transactions interface displaying hello world
    code on the right. The left side illustrates options for selecting environment,
    account, gas limit, value, and contract.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 显示hello world代码在右侧的部署和运行交易界面。左侧说明了选择环境、账户、燃料限制、值和合约的选项。
- en: Figure 5-11
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-11
- en: HelloWorld contract deployment
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: HelloWorld合约部署
- en: So far the contract hasn’t been deployed yet. So, to deploy HelloWorld, we need
    to provide the string initMessage just beside the Deploy button.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，合约还没有被部署。所以，要部署HelloWorld，我们只需在部署按钮旁边提供字符串initMessage。
- en: We can leave Environment as default selected JavaScript VM, default selected
    account, Gas limit, and value. Let’s enter Hello Solidity and click the Deploy
    button.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig12_HTML.png)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将环境保留为默认选中的JavaScript VM，默认选中的账户，燃料限制和值。输入Hello Solidity并点击部署按钮。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig12_HTML.png)
- en: A screenshot of an interface labeled deploy and run transactions illustrating
    hello world contract entry and deployed contracts on the left and the code on
    the right.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一个界面截图，标有部署和运行交易，左边显示了hello world合约入口和已部署合约，右边是代码。
- en: Figure 5-12
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-12
- en: Deployed HelloWorld contract
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 部署了HelloWorld合约
- en: The built-in terminal console shows deployment information. The default account
    amount was reduced by a small amount of gas fee, or a transaction fee, from 100.00000
    ETH to 99.99999 ETH.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 内置终端控制台显示部署信息。默认账户的以太币余额减少了少量的燃料费，或者交易费，从100.00000 ETH降至99.99999 ETH。
- en: Under deployed contracts panel, you will see deployed HelloWorld contract with
    the contract address.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在已部署合约面板下，您将看到已部署的HelloWorld合约和合约地址。
- en: If you expand the deployed HelloWorld contract entry, it will show all contract
    items—state variables or functions—defined as *public* in your smart contract.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您展开已部署的HelloWorld合约条目，它将显示所有作为*public*在您的智能合约中定义的合约项—状态变量或函数。
- en: We can see the update, getMessage function, and message variables in our case.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到在我们的案例中更新、getMessage函数和message变量。
- en: When you click the message button, you should see “Hello Solidity” under the
    message button. The same thing happens when you click the getMessage button.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig13_HTML.jpg)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击信息按钮时，你应该在信息按钮下方看到“Hello Solidity”。当你点击getMessage按钮时，情况也是如此。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig13_HTML.jpg)
- en: A screenshot labeled as deployed contacts illustrates a section as hello world
    message deployed to contracts.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一个标有已部署合约的截图，展示了hello world信息部署到合约的部分。
- en: Figure 5-13
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-13
- en: Call HelloWorld contract message
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 调用HelloWorld合约信息
- en: To change the message, enter “Hello Ethereum” for the update function and then
    click the button to set the new value.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改信息，请为更新函数输入“Hello Ethereum”，然后点击按钮设置新值。
- en: You can validate that the message variable was updated by clicking on the getMessage
    function or message variable.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig14_HTML.jpg)
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过点击getMessage函数或message变量来验证消息变量是否已更新。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig14_HTML.jpg)
- en: A screenshot of the hello world message updated. The new message is hello ethereum.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 一个截图，显示了更新的hello world信息。新信息是hello ethereum。
- en: Figure 5-14
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-14
- en: Update HelloWorld contract message
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 更新HelloWorld合约信息
- en: Congratulations! You have successfully written your very first Hello World smart
    contract in Solidity and deployed it to the blockchain. To learn more about Solidity,
    you can visit the Solidity Official Documentation ([https://docs.soliditylang.org/en/v0.8.15/contracts.xhtml](https://docs.soliditylang.org/en/v0.8.15/contracts.xhtml)).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜您！您已经成功编写了第一个Solidity智能合约，并在区块链上部署了它。为了了解更多关于Solidity的信息，您可以访问Solidity官方文档([https://docs.soliditylang.org/en/v0.8.15/contracts.xhtml](https://docs.soliditylang.org/en/v0.8.15/contracts.xhtml))。
- en: Taking Control of Your First Ethereum Wallet
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制您的第一个以太坊钱包
- en: In Remix, when we use Injected Provider, Metamask is one of the most widely
    used wallet providers. MetaMask was founded in 2016 by Aaron Davis and Daniel
    Finlay and is currently owned by ConsenSys. As of March 2022, Metamask has over
    30 million monthly active users. As a free browser extension for Chrome, Firefox,
    Brave, and Edge, MetaMask allows your regular browser to behave as a web3 browser
    for storing and exchanging cryptocurrencies, as well as interacting with Ethereum
    Dapps without running an Ethereum node. Simply put, MetaMask is a mobile crypto
    wallet you can access in your browser. To manage Metamask access, the user needs
    only a password and a 12-word recovery phrase, also known as a seed phrase. The
    seed phrase can be made up of any real words, such as dog, cat, or chicken.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在Remix中，当我们使用注入式提供者时，MetaMask是最广泛使用的钱包提供者之一。MetaMask是由Aaron Davis和Daniel Finlay于2016年创立，目前隶属于ConsenSys。截至2022年3月，MetaMask拥有超过3000万月活跃用户。作为一个免费的Chrome、Firefox、Brave和Edge浏览器扩展程序，MetaMask允许您的普通浏览器作为web3浏览器来存储和交换加密货币，以及与以太坊Dapps进行交互，而无需运行以太坊节点。简而言之，MetaMask是一个可以通过浏览器访问的移动加密钱包。要管理MetaMask的访问权限，用户只需要一个密码和12个单词的恢复短语，也称为种子短语。种子短语可以由任何真实单词组成，例如dog、cat或chicken。
- en: If you forget or lose wallet recovery phrase, there is no way to recover your
    crypto wallet password. It is very important that you back up these seed phrase
    in a safe and secure place, maybe a hard disk, USB drive, or paper. Don’t store
    it where it’ll be vulnerable, like an email, online storage, etc.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您忘记了或者丢失了钱包恢复短语，就没有办法恢复您的加密钱包密码。非常重要的一点是，您要在一个安全的地方备份这些种子短语，比如硬盘、USB驱动器或纸张。不要将其存储在可能不安全的地方，比如电子邮件、在线存储等。
- en: MetaMask may not be the best place to store large amounts of crypto or valuable
    crypto assets, such as NFTs. When connecting to the mainnet for trading, use MetaMask
    as the only tab in that browser and avoid connecting to social media accounts
    in the same browser—some social media sites have plugins that can steal your data.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: MetaMask可能不是存储大量加密货币或宝贵加密货币资产（如NFT）的最佳场所。在连接主网进行交易时，请将MetaMask作为该浏览器中唯一的标签页使用，并避免在同一个浏览器中连接社交媒体账户——一些社交媒体网站有插件可以窃取您的数据。
- en: Install MetaMask from [https://metamask.io](https://metamask.io). Then download
    the MetaMask wallet software onto your chosen browser. Select the “Create a Wallet”
    option, read the terms and conditions, and create a password. Once installed,
    you will see a fox on the top right of your browser. Open MetaMask, enable the
    test network, or testnet, by clicking Settings➤ Advanced ➤ Show test networks
    and select on button for “Select this to show test networks in network list.”
    Transactions on a testnet are meant to only simulate mainnet transactions, or
    real blockchain transactions.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig15_HTML.png)
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 从[https://metamask.io](https://metamask.io) 安装MetaMask。然后将MetaMask钱包软件下载到您选择的浏览器中。选择“创建钱包”选项，阅读条款和条件，并创建密码。安装后，您将在浏览器的右上角看到一只狐狸。打开MetaMask，通过点击设置➤高级➤显示测试网络，并选择一个按钮来“在网络列表中显示测试网络”。测试网络上的交易旨在仅模拟主网交易，或真正的区块链交易。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig15_HTML.png)
- en: A screenshot of the meta mask interface with a settings page. The option advanced
    settings is selected and the options are labeled as storage logs, sync with mobile,
    reset account, advanced gas controls, show hex data and networks.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 元掩码界面截图，包括一个设置页面。已选择高级设置选项，选项分别为存储日志、与移动设备同步、重置账户、高级气体控制、显示十六进制数据和网络。
- en: Figure 5-15
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-15
- en: Update Metamask setting for testnet
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 更新MetaMask的测试网络设置
- en: Now you can switch to the Goerli test network from MetaMask’s network list settings.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig16_HTML.jpg)
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以从MetaMask的网络列表设置中切换到Goerli测试网络。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig16_HTML.jpg)
- en: A screenshot of the goerli test networks adding new network.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Goerli测试网络添加新网络的截图。
- en: Figure 5-16
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-16
- en: Connect Metamask with Goerli test network
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 将MetaMask连接到Goerli测试网络
- en: You will see there is default account in account 1 without any ether.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 您会看到账户1中有默认账户，但没有以太币。
- en: 'We will get some free test ether from the Goerli test network. Copy account
    1 Ethereum address and use one of Goerli Testnet Faucet to get the ether through
    your Ethereum account address:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从Goerli测试网络获得一些免费的测试以太币。复制账户1的以太坊地址，并使用Goerli测试网络水龙头之一通过您的以太坊账户地址获取以太币：
- en: 'Official Goerli Testnet Faucet: [https://goerli-faucet.slock.it/](https://goerli-faucet.slock.it/)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方Goerli测试网络水龙头：[https://goerli-faucet.slock.it/](https://goerli-faucet.slock.it/)
- en: 'Starknet Faucet : [https://faucet.goerli.starknet.io/](https://faucet.goerli.starknet.io/)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Starknet Faucet : [https://faucet.goerli.starknet.io/](https://faucet.goerli.starknet.io/)'
- en: 'Goerlifaucet: [https://goerlifaucet.com/](https://goerlifaucet.com/) Note'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Goerlifaucet: [https://goerlifaucet.com/](https://goerlifaucet.com/) 注意'
- en: Most testnets will be discontinued after several months (as of July 2022). Currently,
    Goerli is confirmed to continue in the future, so test ether in this network is
    usually in high demand. You may need to try several times to obtain some ether.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数测试网络在几个月后将会被终止（截至2022年7月）。目前，Goerli已确认会在将来继续运行，所以这个网络中的测试以太币通常需求量大。您可能需要尝试几次才能获得一些以太币。
- en: Once you have successfully submitted the faucet request, you will get some ether
    in your account.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig17_HTML.jpg)
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您成功提交了水龙头请求，您将会在您的账户中得到一些以太币。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig17_HTML.jpg)
- en: A screenshot of Account 1 in the goerli test network with 0.05 goerli E T H.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在Goerli测试网络上，账户1的截图，显示0.05 goerli E T H。
- en: Figure 5-17
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-17
- en: Get ether from Goerli test network faucet
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 从Goerli测试网络水龙头获取以太币
- en: With these Ethers, you have done all the hard work of bringing your smart contract
    to life. Now it’s time to share your first smart contract with the world! Let’s
    deploy our HelloWorld smart contract to the Goerli test network from Remix.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些以太币，你已经完成了将你的智能合约带入生命的所有艰苦工作。现在该是与世界分享你的第一个智能合约的时候了！让我们从 Remix 部署我们的 HelloWorld
    智能合约到 Goerli 测试网络。
- en: In Remix, deploy and run the transaction module, select Injected Web3 environment.
    A popup from Metamask will ask to connect with Account 1 in Metamask in the Goerli
    test network.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig18_HTML.png)
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Remix 中，部署并运行交易模块，选择注入的 Web3 环境。Metamask 将弹出一个提示，要求连接到 Goerli 测试网络中的账户 1。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig18_HTML.png)
- en: A screenshot labeled deploy and run transactions with an interface at the right
    labeled connect with metamask and an account is selected. The lower part displays
    cancel and next options.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 一张标记有“部署并运行交易”的屏幕截图，右侧有一个标记为“连接 Metamask”的界面，且已选择一个账户。下方部分显示取消和下一步选项。
- en: Figure 5-18
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-18
- en: Connect Remix to Goerli test network
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 连接 Remix 到 Goerli 测试网络
- en: Click next and connect. It will connect remix IDE with Metamask in the Goerli
    test network. As shown in the following screenshot, you should see a green button
    showing a connected status.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig19_HTML.png)
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“下一步”，将连接 Remix IDE 与 Metamask 的 Goerli 测试网络。如图所示，你应该会看到一个显示连接状态的绿色按钮。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig19_HTML.png)
- en: A screenshot of an account connected in the test network labeled 0.05 goerli
    E T H.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 一张显示在测试网络中连接的账户，标记为“0.05 goerli E T H”的屏幕截图。
- en: Figure 5-19
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-19
- en: Connected Metamask Goerli test network
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到 Goerli 测试网络的 Metamask
- en: Now we can deploy our HelloWorld.sol to the Goerli test network. Enter “Hello
    Solidity” as the initial message to the right of the orange deploy button. Then
    click deploy. Metamask will dynamically calculate the estimated gas fee. You can
    confirm or reject this request before submitting to testnet. Let’s confirm this
    deployment transaction.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig20_HTML.png)
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将我们的 HelloWorld.sol 部署到 Goerli 测试网络。在橙色的部署按钮右侧输入“Hello Solidity”作为初始信息。然后点击部署。Metamask
    将动态计算预计的燃料费。在提交到测试网之前，你可以确认或拒绝这个请求。让我们确认这个部署交易。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig20_HTML.png)
- en: A screenshot of an interface labeled deploy and run transactions the meta mask
    notification page is displayed at the right.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一张标记有“部署并运行交易”的界面截图，右侧显示 Meta Mask 通知页面。
- en: Figure 5-20
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-20
- en: Deploy contract to Goerli test network
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 将合约部署到 Goerli 测试网络
- en: 'In the Remix console, you will see a block transaction confirmation message
    which returns the transaction hash and other transaction information. Here is
    the transaction hash: 0x7f773384290cff58ff6bb6e4f0411bfb625d3c1aa957208c6e8b8abeeed9d710![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig21_HTML.png)'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Remix 控制台中，你将看到一个区块交易确认信息，它返回了交易哈希和其他交易信息。交易哈希为：0x7f773384290cff58ff6bb6e4f0411bfb625d3c1aa957208c6e8b8abeeed9d710![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig21_HTML.png)
- en: A screenshot of an transaction receipt for hello world contact.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 一张显示 hello world 合约交易收据的屏幕截图。
- en: Figure 5-21
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-21
- en: Deployed contract with transaction receipt
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 带有交易收据的部署合约
- en: In Metamask, we can see a new contract deployment information is displayed under
    the Active tab. Notice that the account ether value was deducted by the transaction
    gas fee. The original value is 0.05 ETH. Now it is 0.0487 ETH.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig22_HTML.png)
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Metamask 中，我们可以看到在“活动”标签下，新合约的部署信息被显示出来。注意账户的以太币价值被交易燃料费扣除了。原来的值是 0.05 ETH。现在它是
    0.0487 ETH。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig22_HTML.png)
- en: A screenshot of an interface labeled goerli test network with account 1 selected.
    At the centre 0.0487 goerli E T H displays buy, send, and swap option.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 一张显示“goerli 测试网络”界面，账户 1 被选中的屏幕截图。在中心部分，“0.0487 goerli E T H”显示购买、发送和交换选项。
- en: Figure 5-22
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-22
- en: Deployed contract with gas fee When you click Contract deployment, it will display
    details of deployment information.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig23_HTML.png)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 部署合约时消耗的燃料费当你点击“合约部署”，它将显示部署信息的详细细节。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig23_HTML.png)
- en: A screenshot of the contract deployment status and transactions details labeled
    confirmed.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 一张标记有“合约部署状态和交易详情”的屏幕截图，右侧有一个标记为“已确认”的界面。
- en: Figure 5-23
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-23
- en: Contract deployment detail
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 合约部署详情
- en: 'You can click the “View on the block explorer.” The link will lead to the etherscan.io
    page and show this contract deployment detail. You can see that contract was deployed
    to address 0xe02cfad8b29d0aad478862facb2e6a9b1fed7bc9 (Note: it will display a
    different address number when you deploy it). This address is publicly accessible
    for everyone.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以点击“在区块链浏览器中查看”。链接将引导你到 etherscan.io 页面，并显示此合约部署的详细信息。你可以看到合约被部署到了地址 0xe02cfad8b29d0aad478862facb2e6a9b1fed7bc9（注意：当你部署它时，它会显示不同的地址号码）。这个地址对所有人公开可用。
- en: Now that you have deployed your first blockchain smart contract, the transaction
    hash matches the value we see in the Remix console. You can search the address
    from the etherscan search bar.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig24_HTML.png)
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经部署了你的第一个区块链智能合约，交易哈希与我们在 Remix 控制台看到的值相匹配。你可以在 etherscan 搜索栏中搜索该地址。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig24_HTML.png)
- en: A screenshot of an interface for ether scan contract page illustrating transaction
    details marked success.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 一个截图，显示了一个 ether scan 合约页面界面，标记了交易详情成功。
- en: Figure 5-24
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-24
- en: Deployed contract in etherscan
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在 etherscan 上部署的合约
- en: Great! You have published the HelloWorld contract in the Goerli test network,
    which is open to the public and accessible from anywhere. Next, let’s build a
    simple Dapp to interact with our smart contract.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！你已经将 HelloWorld 合约部署到了 Goerli 测试网络，该网络对公众开放，从任何地方都可以访问。接下来，让我们构建一个简单的 Dapp
    来与我们的智能合约交互。
- en: Decentralized Applications (Dapps)
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 去中心化应用（Dapps）
- en: 'Generally, a Dapp is a three-tier application comprised of three main components:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，一个 Dapp 是一个由三个主要组件组成的三层应用程序：
- en: '**A front-end layer** – A web browser with web servers to host a web page.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**前端层** – 带有网页服务器的网络浏览器。'
- en: '**Web3 Provider layer** – The middle layer between the frontend and the smart
    contracts, that is, Metamask wallet.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web3 提供者层** – 前端和智能合约之间的中间层，即 Metamask 钱包。'
- en: '**A backend (smart contract)** – Contracts run in the blockchain network.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后端（智能合约）** – 合约在区块链网络上运行。'
- en: Figure [5-25](#Fig25) shows a typical DApp layer architecture:![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig25_HTML.jpg)
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 [5-25](#Fig25) 显示了一个典型的 DApp 层架构：![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig25_HTML.jpg)
- en: An illustration of the dapp layer architecture flow diagram, with web client,
    web provider, smart contract and ethereum block chain.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 一个带有 web 客户端、web 提供者、智能合约和以太坊区块链的 dapp 层架构流程图。
- en: Figure 5-25
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-25
- en: Dapp layer architecture
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Dapp 层架构
- en: In the Ethereum client section, we use web3 API to query some blockchain information
    from the geth console. In this section, we will explore another Ethereum JavaScript
    Open source library—Ether.js, which also enables web clients to communicate and
    interact with the Ethereum network.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊客户端部分，我们使用 web3 API 从 geth 控制台查询一些区块链信息。在本节中，我们将探讨另一个以太坊 JavaScript 开源库——Ether.js，它也使
    web 客户端能够与以太坊网络进行通信和交互。
- en: Getting Started
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开始
- en: 'Before proceeding with this section, you need to install the following:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续本节之前，你需要安装以下内容：
- en: Installing node.js
  id: totrans-204
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装 node.js
- en: 'Follow the node office installation guide, download and install node.js:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循节点办公室安装指南，下载并安装 node.js：
- en: '[https://nodejs.org/en/download/](https://nodejs.org/en/download/)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://nodejs.org/en/download/](https://nodejs.org/en/download/)'
- en: Installing Git
  id: totrans-207
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装 Git
- en: 'Follow the git office installation guide to install Git:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循 Git 办公室安装指南来安装 Git：
- en: '[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)'
- en: Git clone HelloWorld Dapp Project
  id: totrans-210
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 Git 克隆 HelloWorld Dapp 项目
- en: Once you install node and Git, you need go to this book’s Apress website, git
    clone chapter [5](535492_1_En_5_Chapter.xhtml) HelloWorld Dapp source code:git
    clone https://github.com/Apress/Blockchain-for-Teens.git
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 node 和 Git 之后，你需要前往本书的 Apress 网站，用 Git 克隆第 [5](535492_1_En_5_Chapter.xhtml)
    章的 HelloWorld Dapp 源代码：git clone https://github.com/Apress/Blockchain-for-Teens.git
- en: Install HelloWorld Dapp Project
  id: totrans-212
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装 HelloWorld Dapp 项目
- en: Open terminal, navigate to helloworld project location. Run npm install
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端，导航到 helloworld 项目位置。运行 npm install
- en: '![](../images/535492_1_En_5_Chapter/535492_1_En_5_Figa_HTML.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/535492_1_En_5_Chapter/535492_1_En_5_Figa_HTML.jpg)'
- en: A screenshot of the hello world project location.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: hello world 项目位置的截图。
- en: This will install node library needed to run Helloworld Dapp
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装运行 HelloWorld Dapp 所需的节点库。
- en: The project structure should be similar to the one shown in Figure [5-26](#Fig26).![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig26_HTML.jpg)
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 项目结构应与图[5-26](#Fig26)所示的类似。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig26_HTML.jpg)
- en: A screenshot of the project structure folders illustrating options after selecting
    client dot js.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 项目结构文件夹的截图，说明在选择client.js后的选项。
- en: Figure 5-26
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-26
- en: Dapp project structure
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: Dapp项目结构
- en: Note, the source code points to the Goerli test network contract address at:0xe02cfad8b29d0aad478862facb2e6a9b1fed7bc9
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，源代码指向Goerli测试网络合约地址：0xe02cfad8b29d0aad478862facb2e6a9b1fed7bc9
- en: You can use this address for testing or you modify this address to your own
    deployed contract address.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用此地址进行测试，或者修改此地址为您的部署合约地址。
- en: Open client.js, update line 3 of your own address. If you modified the contract
    and have different contract abi, replace line 4 with your own contract abi.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 打开client.js，更新第3行您的地址。如果您修改了合约并且有不同的合约abi，用您自己的合约abi替换第4行。
- en: '![](../images/535492_1_En_5_Chapter/535492_1_En_5_Figb_HTML.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/535492_1_En_5_Chapter/535492_1_En_5_Figb_HTML.png)'
- en: A screenshot of the address testing for own contract address.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 截图测试您合约地址的地址。
- en: Run HelloWorld Dapp Project
  id: totrans-226
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运行HelloWorld Dapp项目
- en: Run the following command shown after the helloworld folder from terminal:node
    index.jsThis will bring up node server to host HelloWorld Dapp. The port number
    is 3000.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig27_HTML.jpg)
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 从终端运行以下命令，该命令位于helloworld文件夹之后：node index.js这将启动节点服务器以托管HelloWorld Dapp。端口号是3000。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig27_HTML.jpg)
- en: A screenshot of the dapp node server address.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: Dapp节点服务器地址的截图。
- en: Figure 5-27
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-27
- en: Start Dapp node server
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Dapp节点服务器
- en: Open HelloWorld Dapp from Browser
  id: totrans-231
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从浏览器打开HelloWorld Dapp
- en: Now you can open Dapp from the browser by entering http://localhost:3000\. You
    should see the HelloWorld Dapp page. You can see the top right corner has connect
    button, which will connect to Metamask. On the middle of the page, there is a
    blue message button that can be used to retrieve the blockchain message. The red
    update button with a Message input field will update contract message content.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig28_HTML.png)
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以从浏览器中通过输入http://localhost:3000来打开Dapp。您应该看到HelloWorld Dapp页面。您可以看到右上角有一个连接按钮，将连接到MetaMask。页面中间有一个蓝色的消息按钮，可以用来获取区块链消息。带有消息输入框的红色更新按钮将更新合约消息内容。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig28_HTML.png)
- en: A screenshot of E 2 E hello world dapp page. A box captioned message update
    is located at the centre.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: E 2 E hello world dapp页面的截图。位于中心的带有标题消息更新的盒子。
- en: Figure 5-28
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-28
- en: Dapp initial page
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: Dapp初始页面
- en: Connect to Metamask
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接到MetaMask
- en: Ether.js use Web3Provider api to connect Metamask wallet:ethers.providers.Web3Provider(window.ethereum)Click
    the connect button. If you are not signed in, it will prompt you to sign in:await
    provider.send("eth_requestAccounts", []);
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: Ether.js使用Web3Provider API连接MetaMask钱包：ethers.providers.Web3Provider(window.ethereum)。点击连接按钮。如果您尚未登录，它将提示您登录：await
    provider.send("eth_requestAccounts", []);
- en: Once connected, we can get user wallet, network, and account information from
    the provider. provider.getSigner() will get Ethereum Accounts from Metamask wallet.
    provider.getNetwork() returns current Ethereum Network that wallet connected.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦连接，我们就可以从提供商获取用户钱包、网络和账户信息。provider.getSigner()将从MetaMask钱包获取以太坊账户。provider.getNetwork()返回钱包连接的当前以太坊网络。
- en: 'Here is a snippet of the code:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一段代码片段：
- en: '![](../images/535492_1_En_5_Chapter/535492_1_En_5_Figc_HTML.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/535492_1_En_5_Chapter/535492_1_En_5_Figc_HTML.png)'
- en: A screenshot of the snippet code.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 代码片段的截图。
- en: Since you are running Dapp for the first-time and are not connected to Metamask
    yet, the Dapp page connect button will be orange. So let’s click the connect button
    to connect to Metamask. Once again, if you are not signed in, you will see a popup
    from Metamask asking you to sign in.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig29_HTML.png)
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您是第一次运行Dapp，并且尚未连接到MetaMask，Dapp页面的连接按钮将是橙色的。所以让我们点击连接按钮以连接到MetaMask。再次，如果您尚未登录，您将看到来自MetaMask的弹出窗口，要求您登录。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig29_HTML.png)
- en: Screenshot of an interface labeled E 2 E hello world dapp and a metamask page
    asking for login information.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 带有标签E 2 E hello world dapp的界面截图和一个要求登录信息的MetaMask页面。
- en: Figure 5-29
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-29
- en: Dapp connect to Metamask
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: Dapp连接到MetaMask
- en: Login to Metamask. The page will automatically connect to Metamask and display
    related account and network information on the green display area across the top.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig30_HTML.png)
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到 Metamask。页面将自动连接到 Metamask，并在顶部的绿色显示区域显示相关账号和网络信息。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig30_HTML.png)
- en: A screenshot of an interface labeled E 2 E hello world dapp and a success icon
    on the right displaying a box for message update.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 一个界面截图，标签为 E 2 E hello world dapp，右侧有一个成功图标，显示一个用于信息更新的盒子。
- en: Figure 5-30
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-30
- en: Dapp connected to Metamask with blockchain data
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: Dapp 连接到 Metamask，带有区块链数据
- en: Get Contract and Call Get Message
  id: totrans-250
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 获取合约并调用获取信息
- en: In Remix smart contract compile and deployment, we have gotten abi and contract
    address information. Ether.js is provided below api to get contract information
    and you can use new ethers.Contract(contactAddress, abi, provider) API to get
    deployed contract instances.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Remix 智能合约编译和部署中，我们已经获得了 abi 和合约地址信息。下面提供了 ether.js  api 以获取合约信息，你可以使用新的 ethers.Contract(contactAddress,
    abi, provider) API 来获取已部署的合约实例。
- en: '![](../images/535492_1_En_5_Chapter/535492_1_En_5_Figd_HTML.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/535492_1_En_5_Chapter/535492_1_En_5_Figd_HTML.png)'
- en: A screenshot of the read only contract message code.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 一个只读合约消息代码的截图。
- en: 'With ether contract object, you can start “call getMessag” function:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ether 合约对象，你可以开始调用“getMessag”函数：
- en: '![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fige_HTML.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/535492_1_En_5_Fige_HTML.jpg)'
- en: A screenshot of the call get message function code.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 一个截图，显示调用获取信息函数代码。
- en: You will get the Hello Solidity message from the Goerli test network:![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig31_HTML.png)
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从 Goerli 测试网络收到“Hello Solidity”消息：![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig31_HTML.png)
- en: A screenshot of the hello solidity message update box in the E 2 E hello world
    dapp interface.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 一个截图，显示 E 2 E hello world dapp 界面中的“Hello Solidity”消息更新框。
- en: Figure 5-31
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-31
- en: Dapp get First message
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: Dapp 获取第一条信息
- en: Get Contract and Call Update Message
  id: totrans-261
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 获取合约并调用更新信息
- en: 'When you need to call state-changing methods, such as an update message, you
    must connect to the signer and pay a gas fee to send the state-changing transaction:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要调用改变状态的方法时，例如更新信息，你必须连接到签名者并支付一笔交易费用来发送改变状态的交易：
- en: '![](../images/535492_1_En_5_Chapter/535492_1_En_5_Figf_HTML.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/535492_1_En_5_Chapter/535492_1_En_5_Figf_HTML.jpg)'
- en: A screenshot of the signer contract object input message to update contract.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 一个截图，显示签名者合约对象输入信息以更新合约。
- en: 'With the signer contract object, you can now pass input message to update contract:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 有了签名者合约对象，你现在可以将输入信息传递给合约以更新合约：
- en: '![](../images/535492_1_En_5_Chapter/535492_1_En_5_Figg_HTML.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/535492_1_En_5_Chapter/535492_1_En_5_Figg_HTML.jpg)'
- en: A screenshot of the a sync function update message.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 一个截图，显示一个同步函数更新信息。
- en: Let’s update our message, enter “Hello Ethereum.”![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig32_HTML.png)
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新我们的信息，输入“你好 Ethereum”。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig32_HTML.png)
- en: A screenshot of the reject and confirm transactions page in the E 2 E hello
    world dapp with the message hello ethereum.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 一个截图，显示 E 2 E hello world dapp 中带有“hello ethereum”消息的拒绝和确认事务页面。
- en: Figure 5-32
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-32
- en: Dapp update message
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: Dapp 更新信息
- en: Metamask will popup and ask to confirm transaction with an estimated gas fee.
    You review the transaction and submit. The block explorer allows you to view transactions.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig33_HTML.jpg)
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: Metamask 将会弹出，并要求确认带有估算的交易费用的事务。你审查事务并提交。区块浏览器允许你查看事务。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig33_HTML.jpg)
- en: A screenshot of the update message and the details of transactions with a message
    confirmed and from and to information.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 一个截图，显示更新信息以及带有已确认交易和来自和到的信息的交易详情。
- en: Figure 5-33
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-33
- en: Dapp update message transaction detail
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: Dapp 更新信息事务详情
- en: Click view on block explorer to see your transaction in etherscan.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig34_HTML.png)
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 点击区块浏览器中的查看，以在 etherscan 上查看你的事务。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig34_HTML.png)
- en: A screenshot of the etherscan transaction details with a message success highlighted.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 一个截图，显示 etherscan 事务详情，其中成功信息被突出显示。
- en: Figure 5-34
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-34
- en: Dapp update message transaction in etherscan
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: Dapp 在 etherscan 上的更新信息事务
- en: Once the transaction is confirmed, you will get transaction receipt in page
    popup.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig35_HTML.png)
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦事务被确认，你将在页面弹出窗口中收到交易收据。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig35_HTML.png)
- en: A screenshot of a transaction receipt with a message success at the right and
    a box communicating a localhost message with an option marked ok.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 交易收据的屏幕截图，右侧显示成功消息，一个盒子显示本地主机消息，一个选项标记为确定。
- en: Figure 5-35
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-35
- en: Dapp with response transaction receipt
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 带有响应交易收据的Dapp
- en: Finally, verify your updated message by clicking the message button. “Hello
    Ethereum” should show on the page.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig36_HTML.png)
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过点击信息按钮验证您的更新信息。“Hello Ethereum”应该显示在页面上。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig36_HTML.png)
- en: A screenshot of the update message saying hello Ethereum in the E 2 E hello
    world dapp interface.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕截图，显示在E 2 E hello world dapp界面中更新信息，说你好以太坊。
- en: Figure 5-36
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-36
- en: Dapp verify updated message
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: Dapp验证更新信息
- en: Congratulations, you have successfully published your first smart contract to
    the public testnet and built a Dapp to call and update the message content! You
    have now completed an end-to-end Dapp development cycle, which is a huge accomplishment.
    Pat yourself on the back, because that was a lot of work.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你，你已经成功将你的第一个智能合约发布到公共测试网，并构建了一个Dapp来调用和更新信息内容！您现在已经完成了一个端到端的Dapp开发周期，这是一个巨大的成就。拍拍自己的背，因为那是一份辛苦的工作。
- en: Despite the fact that we have spent enough time exploring Ethereum Dapp and
    Solidity principles to get you to build a Dapp, this book only provides a basic
    introduction. There are a lot of good online documentation covering all aspects
    of Javascript, JQuery, express.js, and ether.js.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已经花了很多时间探索以太坊Dapp和Solidity原则，以便让您构建一个Dapp，但这本书只提供了基础介绍。有很多优秀的在线文档涵盖了JavaScript、JQuery、express.js和ether.js的所有方面。
- en: 'Here are some useful links:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些有用的链接：
- en: 'ether.js: the document can be found at [https://docs.ethers.io/v5/](https://docs.ethers.io/v5/)'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ether.js：文档可以在[https://docs.ethers.io/v5/](https://docs.ethers.io/v5/)找到
- en: 'JQuery: the document can be found at [https://jquery.com/](https://jquery.com/)'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JQuery：文档可以在[https://jquery.com/](https://jquery.com/)找到
- en: 'express.js: the document can be found at [https://expressjs.com/en/starter/hello-world.xhtml](https://expressjs.com/en/starter/hello-world.xhtml)'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: express.js：文档可以在[https://expressjs.com/en/starter/hello-world.xhtml](https://expressjs.com/en/starter/hello-world.xhtml)找到
- en: 'Node.js: he document can be found at [https://nodejs.org/en/docs/guides/getting-started-guide/](https://nodejs.org/en/docs/guides/getting-started-guide/)'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js：文档可以在[https://nodejs.org/en/docs/guides/getting-started-guide/](https://nodejs.org/en/docs/guides/getting-started-guide/)找到
- en: Tokens Standard
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代币标准
- en: In Chapter [1](535492_1_En_1_Chapter.xhtml), we learned Mohammad Bin Tughlaq
    invented token money—Tanka, which used copper currency to represent the same value
    as a silver coin. In a blockchain, the coin represents the native currency. For
    instance, ether is the coin in Ethereum. And a token is created by a smart contract,
    which defines basic token properties, then builds and operates.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在第[1](535492_1_En_1_Chapter.xhtml)章中，我们了解到莫卧儿王朝的货币改革家莫卧儿·宾·图格勒克发明了代币货币——坦卡，它使用铜币代表与银币相同的价值。在区块链中，硬币代表原生货币。例如，以太坊中的货币是以太币。而代币是由智能合约创建的，该合约定义了基本代币属性，然后构建和运行。
- en: A crypto token is a virtual currency token representing programmable assets
    or shared ownership with access rights to an entity with a specific value. The
    token is managed by a smart contract, which allows for the efficient and secure
    purchase or sale of an item such as an art collection, the exchange of token ownership,
    the transfer of token balance, the storage of token value, and the verification
    of transactions on the blockchain.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 加密代币是一种代表可编程资产或具有特定价值的共享所有权的虚拟货币代币。代币由智能合约管理，该合约允许高效安全地购买或出售艺术品收藏等物品，进行代币所有权的交换，代币余额的转移，代币价值的存储以及区块链上交易的验证。
- en: To assist developers in standardizing token creation, the Ethereum community
    has developed many token standards through the Ethereum Improvement Proposal (EIP)
    process.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助开发者标准化代币创建，以太坊社区通过以太坊改进提案（EIP）过程开发了许多代币标准。
- en: EIPs contain standard technical specifications for potential new Ethereum features
    or processes, including core protocol specifications, improvements, client APIs,
    and contract standards. It acts as the “source of truth” for the community. Anyone
    can create an EIP by following standards guidelines in the EIP-1, published in
    2015 ([https://eips.ethereum.org/EIPS/eip-1](https://eips.ethereum.org/EIPS/eip-1)).
    As stated in EIP-1, Ethereum Request for Comment (ERC) is the application-level
    standards and conventions. If the specific ERC is approved in the Ethereum community,
    it becomes a new token standard rule which will be outlined in the document through
    a related smart contract.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: EIP 包含潜在的新以太坊功能或过程的技术规范，包括核心协议规范、改进、客户端 API 和合约标准。它作为社区的“真相来源”。任何人都可以通过遵循 2015
    年发布的 EIP-1 中的标准指南创建 EIP（[https://eips.ethereum.org/EIPS/eip-1](https://eips.ethereum.org/EIPS/eip-1)）。如
    EIP-1 所述，以太坊请求评论（ERC）是应用级标准和约定。如果特定的 ERC 在以太坊社区中获得批准，它将成为新的代币标准规则，并通过相关智能合约在文档中概述。
- en: 'There are many token standards, including:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多代币标准，包括：
- en: Standards of token (ERC-20, ERC-721, ERC-1155, ERC-777)
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代币标准（ERC-20、ERC-721、ERC-1155、ERC-777）
- en: Name registries (ERC-26, ERC-137)
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称注册表（ERC-26、ERC-137）
- en: URI schemes (ERC-67)
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 统一资源标识符方案（ERC-67）
- en: Library/packet formats (EIP-82)
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库/数据包格式（EIP-82）
- en: Wallet formats (EIP-75, EIP-85)
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 钱包格式（EIP-75、EIP-85）
- en: 'There are many other tokens still in draft and review status. You can check
    all token ERC through this link: [https://eips.ethereum.org/erc](https://eips.ethereum.org/erc)'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他代币仍处于草稿和审查状态。您可以通过此链接查看所有 ERC 代币：[https://eips.ethereum.org/erc](https://eips.ethereum.org/erc)
- en: Let’s take a look at the two most popular ERC standards, ERC-20 and ERC-721.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下两个最受欢迎的 ERC 标准，ERC-20 和 ERC-721。
- en: ERC-20
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ERC-20
- en: ERC-20 is the most popular Ethereum token standard and was proposed on November
    19, 2015 by Fabian Vogelsteller. Most ICOs (Initial Coin Offering) that have issued
    their tokens on the Ethereum platform or EVM-based blockchain (like Binance) are
    ERC-20 tokens. The ICO is cryptocurrency version of the IPO (initial public offering),
    which is used in the stock market to raise capital or participate in investment
    opportunities. There are around 508k ERC-20 tokens in the Ethereum mainnet on
    March 2022\. The total market cap of all ERC-20 tokens is around $18.7 billion,
    and there are more than 160K ERC-20 in Binance.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: ERC-20 是最受欢迎的以太坊代币标准，由 Fabian Vogelsteller 于 2015 年 11 月 19 日提出。大多数在以太坊平台或基于
    EVM 的区块链（如 Binance）发行其代币的 ICO（首次代币发行）都是 ERC-20 代币。ICO 是加密货币版本的 IPO（首次公开募股），在股票市场中用于筹集资本或参与投资机会。截至
    2022 年 3 月，以太坊主网上有大约 508k ERC-20 代币。所有 ERC-20 代币的总市值约为 187 亿美元，Binance 上有超过 160K
    ERC-20。
- en: 20 is a unique identification number to distinguish the ERC-20 standard from
    others.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 20 是一个独特的识别号码，用于区分 ERC-20 标准与其他标准。
- en: The ERC-20 token has several optional fields such as name and symbol and defines
    the following rules in the smart contract:contract ERC20Interface {    function
    totalSupply() public view returns (uint);    function balanceOf(address tokenOwner)
    public view returns (uint balance);    function allowance(address tokenOwner,
    address spender) public view returns (uint remaining);    function transfer(address
    to, uint tokens) public returns (bool success);    function approve(address spender,
    uint tokens) public returns (bool success);    function transferFrom(address from,
    address to, uint tokens) public returns (bool success);    event Transfer(address
    indexed from, address indexed to, uint tokens);    event Approval(address indexed
    tokenOwner, address indexed spender, uint tokens);}
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: ERC-20 代币有几个可选字段，如名称和符号，并在智能合约中定义了以下规则：contract ERC20Interface {    function
    totalSupply() public view returns (uint);    function balanceOf(address tokenOwner)
    public view returns (uint balance);    function allowance(address tokenOwner,
    address spender) public view returns (uint remaining);    function transfer(address
    to, uint tokens) public returns (bool success);    function approve(address spender,
    uint tokens) public returns (bool success);    function transferFrom(address from,
    address to, uint tokens) public returns (bool success);    event Transfer(address
    indexed from, address indexed to, uint tokens);    event Approval(address indexed
    tokenOwner, address indexed spender, uint tokens);}
- en: 'totalSupply(): Gets the total number of token supply.'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 'totalSupply(): 获取代币总供应量。'
- en: 'balanceOf(): Gets the account balance for the specified address.'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 'balanceOf(): 获取指定地址的账户余额。'
- en: 'allowance(): Returns the amount of tokens which the spender is allowed to withdraw
    from the owner.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 'allowance(): 返回允许从所有者账户中提取的代币数量。'
- en: 'transfer(): Transfer the balance from the owner’s account to another specified
    address and must fire the transfer event.'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 'transfer(): 将所有者账户的余额转移到另一个指定地址，并必须触发转移事件。'
- en: 'transferFrom (): Send the amount of tokens from address `from` to address `to`.
    The transferFrom method is used for a withdraw workflow, allowing contracts to
    transfer tokens on your behalf.'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 'transferFrom (): 从地址`from`向地址`to`发送代币数量。transferFrom方法用于提现工作流程，允许合约代表你转移代币。'
- en: 'approve(): Allows spender to withdraw the specified amount of tokens from your
    account multiple times.'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 'approve(): 允许花费者从你的账户中多次提取指定数量的代币。'
- en: If you ever find yourself working on a project that requires creating and deploying
    an ERC-20 token, you can create a smart contract by implementing these ERC-20
    functions. Here is a simple example:MyToken is ERC20 { // implement the functions
    required by ERC20 interface standard // other functions... }In Etherscan, you
    can find many ERC-20-compliant tokens that have been deployed mainnet. Here is
    a real-world example of an ERC-20 token transaction on the Etherscan.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig37_HTML.png)
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己正在从事一个需要创建和部署ERC-20代币的项目，你可以通过实现这些ERC-20函数来创建智能合约。这是一个简单的例子：MyToken是ERC20
    { // 实现ERC20接口标准所需的函数 // 其他函数... }在Etherscan上，你可以找到许多符合ERC-20标准的已部署主网代币。以下是在Etherscan上的一个ERC-20代币交易的真实世界示例！[](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig37_HTML.png)
- en: A screenshot of an interface labeled token kucoin token highlighting an overview,
    profile summary and transfer information with 34, 718 transactions found marked
    as transfer and transfer from.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 一张界面截图，标签为“kucoin token”的代币，展示了概览、简介和34,718笔交易记录，标记为转账和转出。
- en: Figure 5-37
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-37
- en: ERC-20 example
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: ERC-20示例
- en: The screenshot shows the amount of ERC-20 tokens being transferred from one
    address to another address by the transfer or transferFrom method.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 截图显示了通过transfer或transferFrom方法将ERC-20代币从一方地址转移到另一方地址的金额。
- en: In ERC-20 token, tokens are fungible, meaning that each token has exactly the
    same type and value as another token. If you swap one ERC-20 for another, there
    will be no difference in authenticity or value; they are interchangeable and represent
    a single entity.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在ERC-20代币中，代币是可互换的，意味着每个代币与其他代币完全相同类型和价值。如果你用一个ERC-20交换另一个，它们的真伪或价值上不会有任何差异；它们是可互换的，代表单一实体。
- en: For example, Tether (USDT) is an ERC-20 Token. It is a stablecoin—a crypto asset
    value pegged to the US dollar at a 1 to 1 ratio and 100% backed by Tether’s equivalent
    reserves. These reserves are a mix of assets, including cash. USDT is similar
    to the ETH, meaning that 1 Token is and will always be equal to all the other
    USDT Tokens. They are the same type, represent the US dollar, and are mutually
    interchangeable. USDT is also divisible, which can be broken down into smaller
    units like cents.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，泰达币（USDT）是一种ERC-20代币。它是一种稳定币——一种与美元挂钩的加密货币资产，比例为1比1，100%由泰达币等值储备支持。这些储备包括现金等多种资产。USDT与ETH相似，意味着1个代币始终等于所有其他USDT代币。它们属于同一类型，代表美元，可以互相替换。USDT也是可分割的，可以分解成像分币这样的更小单位。
- en: 'So fungible tokens have the following properties: interchangeable, uniform,
    and divisible.'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，同质化代币具有以下特性：可互换、统一和可分割。
- en: Next let’s talk about tokens that are not mutually interchangeable or, in other
    words, nonfungible.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来让我们谈谈不可互换的代币，换言之，非同质化代币。
- en: ERC-721
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ERC-721
- en: All ERC-20 tokens (like USDT) are identical and provide the same value. So what
    matters is how many tokens you own in the wallet, not their individual identities.
    Nonfungible tokens (NFTs) can be uniquely identified; they are assets whose data
    is stored on blockchain networks. NFTs are not interchangeable with other NFTs
    because they are unique. Think of a unique work of art created by an artist, luxury
    brands item from fashion companies, and different videos.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 所有ERC-20代币（如USDT）都是相同的，并提供相同的价值。所以重要的是你的钱包里拥有多少代币，而不是它们各自的独特身份。非同质化代币（NFTs）可以被唯一标识；它们是存储在区块链网络上的数据的资产。NFTs与其他NFTs不可互换，因为它们是独一无二的。想想看，一个由艺术家创作的独特艺术作品，时尚公司的高端品牌物品，以及不同的视频。
- en: ERC-721 is a standard interface for nonfungible tokens, also known as deeds,
    and is available at [https://eips.ethereum.org/EIPS/eip-721](https://eips.ethereum.org/EIPS/eip-721).
    The proposal for the creation of this new standard was created in Jan 2018, proposed
    by William Entriken, Dieter Shirley, Jacob Evans, and Nastassia Sachs. According
    to a Bloomberg report, NFT Market surpassed $40 Billion in 2021 and over $37 billion
    in NFT marketplaces in 2022 on May 1.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: ERC-721是一个非同质化代币的标准接口，也称为产权证明，可在[https://eips.ethereum.org/EIPS/eip-721](https://eips.ethereum.org/EIPS/eip-721)找到。这个新标准的提案是在2018年1月创建的，由William
    Entriken、Dieter Shirley、Jacob Evans和Nastassia Sachs提出。根据彭博社的报道，NFT市场在2021年超过了400亿美元，在2022年5月1日的NFT市场平台上超过了370亿美元。
- en: Similar to the ERC-20 token standard, the ERC-721 specification provides details
    and defines functions and events that a derived contract should implement to develop
    an NFT, shown in the following code block:interface ERC721 {    event Transfer(address
    indexed _from, address indexed _to, uint256 indexed _tokenId);    event Approval(address
    indexed _owner, address indexed _approved, uint256 indexed _tokenId);    event
    ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);    function
    balanceOf(address _owner) external view returns (uint256);    function ownerOf(uint256
    _tokenId) external view returns (address);    function safeTransferFrom(address
    _from, address _to, uint256 _tokenId, bytes data) external payable;    function
    safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;    function
    transferFrom(address _from, address _to, uint256 _tokenId) external payable;    function
    approve(address _approved, uint256 _tokenId) external payable;    function setApprovalForAll(address
    _operator, bool _approved) external;    function getApproved(uint256 _tokenId)
    external view returns (address);    function isApprovedForAll(address _owner,
    address _operator) external view returns (bool);}
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 与ERC-20代币标准相似，ERC-721规格提供了详细信息，并定义了派生合约应实现的功能和事件，以开发NFT，如下面的代码块所示：interface
    ERC721 {    event Transfer(address indexed _from, address indexed _to, uint256
    indexed _tokenId);    event Approval(address indexed _owner, address indexed _approved,
    uint256 indexed _tokenId);    event ApprovalForAll(address indexed _owner, address
    indexed _operator, bool _approved);    function balanceOf(address _owner) external
    view returns (uint256);    function ownerOf(uint256 _tokenId) external view returns
    (address);    function safeTransferFrom(address _from, address _to, uint256 _tokenId,
    bytes data) external payable;    function safeTransferFrom(address _from, address
    _to, uint256 _tokenId) external payable;    function transferFrom(address _from,
    address _to, uint256 _tokenId) external payable;    function approve(address _approved,
    uint256 _tokenId) external payable;    function setApprovalForAll(address _operator,
    bool _approved) external;    function getApproved(uint256 _tokenId) external view
    returns (address);    function isApprovedForAll(address _owner, address _operator)
    external view returns (bool);}
- en: 'balanceOf: Gets the account balance for the specified address.'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 'balanceOf: 获取指定地址的账户余额。'
- en: 'ownerOf: The function returns the unique address of the owner of a token based
    on the provided tokenId.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 'ownerOf: 该函数根据提供的tokenId返回代币所有者的唯一地址。'
- en: 'safeTransferFrom: Transfers the ownership of an NFT from one address to another
    address. It is required that msg.sender is the current owner, an authorized operator,
    or the approved address for this NFT.'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 'safeTransferFrom: 将NFT的所有权从一个地址转移到另一个地址。要求msg.sender是当前所有者、授权的操作员或此NFT的批准地址。'
- en: 'transferFrom (): Send the amount of tokens from address `from` to address `to`.
    The transferFrom method is used for a withdraw workflow, allowing contracts to
    transfer tokens on your behalf.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 'transferFrom (): 从地址`from`向地址`to`发送代币金额。transferFrom方法用于提现工作流程，允许合约代表您转移代币。'
- en: 'approve(): Allows spender to withdraw the specified amount of tokens from your
    account multiple times.'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 'approve(): 允许花费者多次从您的账户中提取指定数量的代币。'
- en: 'setApprovalForAll: Assign or revoke approval rights for the given operator
    to manage all of `msg.sender`’s assets.'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 'setApprovalForAll: 为给定的操作员分配或撤销管理所有`msg.sender`资产的权利。'
- en: 'getApproved: Get the approved address for a single NFT'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 'getApproved: 获取单个NFT的已批准地址。'
- en: 'isApprovedForAll: Check if the given operator address has access right to operate
    for the given owner’s tokens.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 'isApprovedForAll: 检查给定的操作员地址是否具有操作给定所有者代币的权利。'
- en: The most known example of ERC-721 is the CryptoKitties game, the first NFT token.
    In the game, there are thousands of CryptoKittie. Each cat has their own profile,
    which includes unique genes, name, color, shape, price, and other profiles. The
    game player can collect and breed adorable kittens. As shown in Figure [5-38](#Fig38),
    each cryptoKittie as a collectible digital asset can be traded, sold, and bought
    by the player:![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig38_HTML.png)
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: ERC-721 最著名的例子是加密猫游戏，这是第一个 NFT 代币。在游戏中，有数千只 CryptoKittie。每只猫都有自己的资料，包括独特的基因、名字、颜色、形状、价格和其他资料。游戏玩家可以收集和繁殖可爱的猫咪。如图
    [5-38](#Fig38) 所示，每只加密猫作为可收藏的数字资产可以被玩家交易、出售和购买：![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig38_HTML.png)
- en: A screenshot of an animated cat and a label marked as kitty hash 1111 with information
    like owner, born, generation, block number, block hash, official profile, and
    attributes. On the lower side information is displayed under the label genes.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 一张动画猫的屏幕截图，以及标记为kitty hash 1111的标签，附有诸如所有者、出生、代数、区块号、区块哈希、官方资料和属性的信息。在标签下方，展示了基因信息。
- en: Figure 5-38
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-38
- en: ERC-721 CryptoKitties example
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: ERC-721 加密猫示例
- en: We can find CryptoKittie in etherscan. These tokens are bid and trade daily
    by game player. Some individual cryptokitties have sold for more than $300,000
    a piece.![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig39_HTML.png)
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 etherscan 上找到 CryptoKittie。这些代币每天由游戏玩家进行出价和交易。一些个体的加密猫已经以每只超过 30 万美元的价格售出。![](../images/535492_1_En_5_Chapter/535492_1_En_5_Fig39_HTML.png)
- en: A screenshot of the ether scan crypto kitties inventory.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊扫描加密猫库存的屏幕截图。
- en: Figure 5-39
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-39
- en: ERC-721 CryptoKitties in Etherscan
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: ERC-721 CryptoKitties 在 Etherscan
- en: NFT collectibles market continues to grow as fan engagement increases, which
    will likely increase mainstream adoption. NFTs can have only one owner at a time.
    True ownership is one of the key characteristics of any NFT, and it has the potential
    to play a critical role in bringing the digital and physical worlds closer together
    than they have ever been.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 随着粉丝参与度的提高，NFT 收藏品市场仍在不断增长，这可能会增加主流采用率。NFT 同一时间只能有一个所有者。真正所有权是任何 NFT 的关键特征之一，它有可能在将数字世界和物理世界联系得比以往任何时候都更紧密方面发挥关键作用。
- en: Summary
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: You have written your first smart contract through Remix IDE, and deployed HelloWorld
    Solidity file to the Goerli test network. We demonstrated the basics of Dapp and
    web3.js and how Dapp interacts with smart contract by connecting with Metamask
    wallet.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经通过 Remix IDE 编写了第一个智能合约，并将 HelloWorld Solidity 文件部署到了 Goerli 测试网络。我们展示了 Dapp
    和 web3.js 的基础知识，以及通过与 Metamask 钱包连接来演示 Dapp 如何与智能合约互动。
- en: But our journey doesn’t end here—in the next chapter, we will cover more exciting
    details on the NFT.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们的旅程并未就此结束——在下一章中，我们将详细介绍 NFT 的更多激动人心之处。
