- en: Chapter 2\. Cryptocurrency Fundamentals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章. 加密货币基础知识
- en: Like many emerging technologies, cryptocurrencies have ushered in a new way
    of thinking—about finance, in this case. As a result, new ways of storing value
    are being considered. Cryptocurrency has some similarities to fiat money, stocks,
    and bonds, as well as to precious assets such as gold. But the methods of acquiring,
    transferring, and storing cryptocurrency, or crypto for short, are very different
    from other assets.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 像许多新兴技术一样，加密货币引发了一种新的思考方式——在这种情况下，是关于金融。因此，人们正在考虑新的存储价值的方式。加密货币与法定货币、股票和债券以及黄金等贵重资产有一些相似之处。但是，获取、转移和存储加密货币（或简称为“加密货币”）的方法与其他资产大不相同。
- en: Note
  id: totrans-2
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Major differences are involved regarding security and sending/receiving value
    in cryptocurrencies. It is possible to lose funds in these systems without recourse.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在加密货币中，涉及到安全性和价值的发送/接收方面有很大的区别。在这些系统中可能会丧失资金而无法追索。
- en: Using cryptocurrency can be confusing as it introduces a large number of new
    terms that even people in traditional finance are often unfamiliar with. Although
    today there are a number of services that make a lot of the basic underpinnings
    of crypto easier for consumers, becoming familiar with at least the basics of
    how cryptocurrency systems work can be helpful when trying to understand how these
    new systems are different. This chapter will cover some basic terminology and
    processes that will set you up for understanding the rest of the book.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用加密货币可能会让人感到困惑，因为它引入了许多新术语，即使是传统金融领域的人们也经常不熟悉。尽管如今有许多服务可以使加密货币的基本原理对消费者更加容易理解，但了解加密货币系统运作的基础知识至少对于理解这些新系统的不同之处是有帮助的。本章将介绍一些基本术语和流程，为您理解本书的其他内容做好准备。
- en: Note
  id: totrans-5
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Although the examples here will primarily use bitcoin, most of these concepts
    translate to other cryptocurrencies as well. Ethereum introduces some new ideas,
    which are covered starting in [Chapter 4](ch04.xhtml#the_evolution_to_ethereum).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这里的例子主要使用比特币，但大多数概念也适用于其他加密货币。以太坊引入了一些新的思想，在[第四章](ch04.xhtml#the_evolution_to_ethereum)中进行了介绍。
- en: Public and Private Keys in Cryptocurrency Systems
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密货币系统中的公钥和私钥
- en: The use of cryptography, or encryption, goes back thousands of years. Its primary
    use has been to safeguard information. Up until the twentieth century, all that
    was needed for rudimentary cryptography was a writing implement and something
    to write on, which could be used to create rudimentary codes. In modern times,
    the use of machinery and subsequently computers fueled encryption’s uses. For
    example, the success of the Allies in eventually breaking and deciphering German
    cryptography in World War II contributed to the end of that conflict.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 密码学或加密的使用可以追溯到数千年前。其主要用途是保护信息。直到二十世纪， rudimentary cryptography 所需的一切都只是一种书写工具和一些可以书写的东西，这可以用来创建
    rudimentary codes。在现代，机械和随后的计算机的使用推动了加密的应用。例如，盟军最终成功破译并解密二战中的德国密码有助于结束了那场冲突。
- en: Modern cryptography was used mostly by governments up until the 1970s. It was
    the invention of *public key*, or *asymmetric*, cryptography that allowed its
    use to become more widespread, along with the growing proliferation of computer
    networks. Public key cryptography allows anyone to easily encrypt a message using
    a receiver’s *public* key, which is available to anybody; the message can then
    be decrypted using the receiver’s *private* key, which (hopefully) only the recipient
    knows.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现代密码学在 1970 年代之前主要由政府使用。是 *公钥* 或 *不对称* 加密的发明使得它的使用变得更加普遍，同时计算机网络的日益普及也起到了作用。公钥密码学允许任何人轻松地使用接收者的
    *公钥* 加密消息，该公钥对任何人都可用；然后可以使用接收者的 *私钥* 解密消息，希望只有接收者知道。
- en: 'Cryptography has become crucial to major systems that underpin the internet.
    This includes the fundamentals underlying cryptocurrencies such as Bitcoin. For
    example, signing up for a hosted Bitcoin wallet generates a public key and a private
    key, and a Bitcoin address (we’ll talk more about wallets in [“Custody: Who Holds
    the Keys”](#custody_who_holds_the_keys)). The Bitcoin address is a translation
    of the public key and is the identity of the wallet where funds can be received
    and from which they can be sent to other addresses. This address can be shared
    with anybody for receiving and sending, a bit like a username or email address.
    The private key is kept secret and is used to unlock stored cryptocurrency, somewhat
    like how you use a password to access your bank account. Here’s an example of
    what they look like:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '密码学已经成为支撑互联网的主要系统的关键。这包括支撑像比特币这样的加密货币的基础。例如，注册托管的比特币钱包会生成一个公钥和一个私钥，以及一个比特币地址（我们将在[“Custody:
    Who Holds the Keys”](#custody_who_holds_the_keys)中更多地讨论钱包）。比特币地址是公钥的翻译，也是可以接收资金并从中发送到其他地址的钱包的身份。这个地址可以与任何人分享以进行接收和发送，有点像用户名或电子邮件地址。私钥保密并用于解锁存储的加密货币，有点像您使用密码访问银行账户的方式。以下是它们的一个示例：'
- en: '| Private key | Kyc9JCPPKNPrMUopkCc7ng9PU5Bp9SGsjVkh8Hpfx4tCr5LGXgBf |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 私钥 | Kyc9JCPPKNPrMUopkCc7ng9PU5Bp9SGsjVkh8Hpfx4tCr5LGXgBf |'
- en: '| Public key | 033b368bfccf5921f8a5a42b81b0f5ecdc66583fac8dc13bcf860cf31290964c64
    |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 公钥 | 033b368bfccf5921f8a5a42b81b0f5ecdc66583fac8dc13bcf860cf31290964c64 |'
- en: '| Bitcoin address | 19PacjCFSSt9guX4zZ3GPpXpDrvDNQ7DC4 |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 比特币地址 | 19PacjCFSSt9guX4zZ3GPpXpDrvDNQ7DC4 |'
- en: As mentioned in the previous chapter, Bitcoin private keys are used to digitally
    sign transactions. That’s how the owner of a Bitcoin address proves to the Bitcoin
    network that they are the rightful owner of that address, and how they authorize
    a transaction. In the real world, a bank card user walks up to an ATM, inserts
    their card, and enters their personal identification number (PIN). That PIN is
    private—only the user is supposed to know it. For the ATM network, a valid PIN
    indicates that the ATM user has “signed” a transaction.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前一章所述，比特币私钥用于数字签名交易。这就是比特币地址的所有者向比特币网络证明他们是该地址的合法所有者，并授权交易的方式。在现实世界中，银行卡用户走到自动取款机旁，插入他们的卡片，输入他们的个人识别码（PIN）。这个PIN是私密的——只有用户知道它。对于ATM网络来说，有效的PIN表示ATM用户已经“签署”了一笔交易。
- en: Bitcoin public keys are only used to generate a Bitcoin address. This address
    is essentially a compressed version of the public key, making it much easier to
    read. A Bitcoin address can be shared publicly with anyone, often when requesting
    that someone send bitcoin to that address.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币公钥仅用于生成比特币地址。这个地址实质上是公钥的一个压缩版本，使其更容易阅读。比特币地址可以向任何人公开共享，通常在要求某人向该地址发送比特币时这样做。
- en: A private key in Bitcoin is a random 256-bit number that is created by a random
    generator. Private keys are displayed in hexadecimal format. Once a user has a
    private key, it can be paired with a public key to unlock a Bitcoin address. Everything
    starts with the private key. From this, a user can generate a public key and Bitcoin
    address. As a reminder, [Figure 2-1](#the_process_of_finding_a_bitcoin_addres)
    illustrates the process for generating a Bitcoin address and which encryption
    algorithms are used at each step.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币中的私钥是由随机生成器创建的随机 256 位数字。私钥以十六进制格式显示。一旦用户拥有了私钥，它就可以与公钥配对以解锁比特币地址。一切都从私钥开始。从这个私钥，用户可以生成一个公钥和比特币地址。作为提醒，[图
    2-1](#the_process_of_finding_a_bitcoin_addres)说明了生成比特币地址的过程，以及在每个步骤中使用了哪些加密算法。
- en: '![](Images/mabc_0201.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0201.png)'
- en: Figure 2-1\. The process of finding a Bitcoin address from a private key
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-1\. 从私钥找到比特币地址的过程
- en: As you can see, the public key is generated by running the private key through
    an [ECDSA secp256k1 function](https://oreil.ly/UrWtL). The public key hash is
    generated by running the public key through the SHA256 and RIPEMD160 functions.
    The Bitcoin address is generated by first adding 00 to the public key hash and
    then running that value through a [Base58Check function](https://oreil.ly/bJSdN).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，公钥是通过将私钥运行通过[ECDSA secp256k1 函数](https://oreil.ly/UrWtL)来生成的。公钥哈希是通过将公钥运行通过
    SHA256 和 RIPEMD160 函数生成的。比特币地址是通过首先向公钥哈希添加 00，然后将该值运行通过[Base58Check 函数](https://oreil.ly/bJSdN)来生成的。
- en: The UTXO Model
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UTXO 模型
- en: Bitcoin transactions follow a unique type of accounting called *unspent transaction
    output* (UTXO). A bitcoin transaction is essentially a list of inputs and a list
    of outputs. Each *input* identifies a Bitcoin address that is providing the funds,
    and an unspent transaction that address has received in the past. Similarly, each
    *output* represents the Bitcoin address receiving the funds and the amount that
    address receives. The difference between the input and the output is the *transaction
    fee*, which will be earned by the bitcoin miner. Each input also contains a digital
    signature, proving that the owner of that Bitcoin address authorizes that transaction.
    [Figure 2-2](#a_sample_transactioncomma_and_how_it_lo) shows an example of a bitcoin
    transaction.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mabc_0202.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: Figure 2-2\. A sample transaction, and how it looks in a Bitcoin block explorer
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this example, there are four inputs. Two of the inputs come from the same
    address (*1HXpg8D9AMGFVZ9FEU2tkZYvAZ8xBhVudo*). However, these two inputs represent
    two different transactions that address has received in the past, one for 0.0027867
    BTC and another for 0.0034977 BTC. The other inputs represent transactions that
    the addresses *14yPyVmGhNCSM9JgaabRZ8C3cT2RWEGd71* and *1MXDLBc2Tq2hnQ2x5qXTEPUen5xq9hDA39*
    have received in the past.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'The inputs in this case total 0.0128 BTC, and the total amount output is 0.01145732
    BTC. The difference between the two, 0.00134268 BTC, is paid to the miner who
    added the block the transaction is in to the blockchain (known as “mining” a block).
    The creator of the transaction pays this fee to incentivize the miner to include
    this transaction ahead of other transactions that are in the memory pool, where
    all valid transactions are waiting to be confirmed. We’ll talk more about all
    of these concepts later in the chapter, but first let’s take a look at how a bitcoin
    transaction is structured. Here’s an [example](https://oreil.ly/lSJjm) of a raw
    transaction:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The fields are described in [Table 2-1](#anatomy_of_a_bitcoin_transaction).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字段在 [表 2-1](#anatomy_of_a_bitcoin_transaction) 中描述。
- en: Table 2-1\. Anatomy of a bitcoin transaction
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2-1\. 比特币交易解剖
- en: '| **Field** | **Description** |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| **字段** | **描述** |'
- en: '| --- | --- |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Version no. | 4 bytes. Identifies which protocol version the node generating
    the transaction is using (currently 1). |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 版本号 | 4 字节。标识生成交易的节点所使用的协议版本（目前为 1）。 |'
- en: '| Flag | If the flag is present, showing a value of 0001, then the node is
    using Segregated Witness (SegWit), which removes signature information from the
    transaction. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 标志 | 如果标志存在，显示值为 0001，则节点正在使用隔离见证（SegWit），从交易中移除签名信息。 |'
- en: '| In-counter | The number of inputs. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 输入计数器 | 输入数量。 |'
- en: '| List of inputs | List of input data. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 输入列表 | 输入数据列表。 |'
- en: '| Out-counter | The number of outputs. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 输出计数器 | 输出数量。 |'
- en: '| List of outputs | List of output data. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 输出列表 | 输出数据列表。 |'
- en: '| Witnesses | If using SegWit, then this field shows a list of witnesses. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 证人 | 如果使用隔离见证（SegWit），则此字段显示证人列表。 |'
- en: '| Lock time | 4 bytes. If this field is not empty, it identifies the earliest
    time that the transaction can be added to the blockchain as determined by the
    network. This field can be represented as either a block height or a Unix-like
    timestamp. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 锁定时间 | 4 字节。如果此字段不为空，则表示交易可被加入区块链的最早时间，由网络确定。此字段可以表示为区块高度或类似 Unix 时间戳的形式。
    |'
- en: Transactions
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易
- en: In cryptocurrency, *transactions* represent the movement of value from one address
    to another. Transactions that are published on the blockchain are said to be *confirmed*.
    Transfer of control of funds requires signing a transaction with a private key.
    The corresponding public key is then used by the recipient to verify the signature
    and validate the transaction. In most cryptocurrencies, users must also pay a
    small fee to the network in order for a transaction to go through. This fee, which
    usually goes to the miner who discovered the block in which the transaction is
    included, is to incentivize the miners publishing blocks to continue to secure
    the network. Online tools like the [Bitcoin Fee Estimator & Calculator](https://bitcoinfees.info)
    can help you predict how big a fee you should include with a transaction to get
    it recorded on the blockchain within the desired time frame (see [Figure 2-3](#estimating_the_fee_to_get_a_transaction)).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在加密货币中，*交易*代表了价值从一个地址到另一个地址的转移。发布在区块链上的交易被称为*已确认*。资金的控制转移需要使用私钥对交易进行签名。然后接收方使用相应的公钥来验证签名并验证交易。在大多数加密货币中，用户还必须向网络支付一小笔费用，以便交易顺利进行。这笔费用通常归属于发现包含该交易的区块的矿工，旨在激励发布区块的矿工继续维护网络安全。在线工具，如[比特币费用估算器和计算器](https://bitcoinfees.info)，可以帮助您预测应在交易中包含多大的费用，以在期望的时间内将其记录在区块链上（见[图 2-3](#estimating_the_fee_to_get_a_transaction)）。
- en: '![](Images/mabc_0203.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0203.png)'
- en: Figure 2-3\. Estimating the fee to get a transaction included on the blockchain
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-3\. 估算将交易包含在区块链中所需的费用
- en: 'Bitcoin transaction fees can vary depending on network capacity, how quickly
    confirmation is needed, and other factors. Because there is a limit on the number
    of transactions that can be recorded on a block—the current limit is 1 MB of data,
    or roughly 3,500 transactions per block—a higher fee may be required for greater
    urgency. There is essentially a competition in place for getting miners to confirm
    a transaction: higher fees mean faster confirmation. [Figure 2-4](#series_of_events_involved_in_executing)
    illustrates the series of [events that occur in executing a bitcoin transaction](http://learnmeabitcoin.com).'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币交易费用可能会根据网络容量、确认所需的速度以及其他因素而变化。由于区块中记录的交易数量有限——当前限制为 1 MB 的数据，或大约每个区块 3,500
    笔交易——因此可能需要更高的费用来加速处理。实际上，这是一个竞争，目的是让矿工确认交易：更高的费用意味着更快的确认。[图 2-4](#series_of_events_involved_in_executing)说明了执行比特币交易所涉及的[事件系列](http://learnmeabitcoin.com)。
- en: '![](Images/mabc_0204.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0204.png)'
- en: Figure 2-4\. Series of events involved in executing a bitcoin transaction—“block
    mined onto blockchain” refers to miners adding a new block to be confirmed by
    the network
  id: totrans-45
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-4\. 执行比特币交易所涉及的事件系列——“区块挖掘到区块链上”指的是矿工将新区块添加到待网络确认的区块链
- en: The Merkle Root
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默克尔根
- en: The *Merkle root* is used to show a snapshot of the state of all the transactions
    in the current block, stored in just 256 bits. The name comes from computer scientist
    Ralph Merkle, who came up with *Merkle trees,* which are digital signature data
    structures*.* The Merkle root has a special purpose aside from capturing the transaction
    snapshot. When a node in the network wants to ensure it has the exact same list
    of transactions as every other node, it does not need to compare each transaction
    individually. Instead, it only needs to compare its Merkle root with every other
    node’s Merkle root. This allows for the building of light software clients that
    do not require storing the entire blockchain to validate their own transactions.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*默克尔根*用于展示当前区块中所有交易状态的快照，仅存储在 256 位中。其名称源自计算机科学家 Ralph Merkle，他提出了 *默克尔树*，这是数字签名数据结构。默克尔根除了捕获交易快照之外还有一个特殊目的。当网络中的节点想要确保它与每个其他节点具有完全相同的交易列表时，它不需要逐个比较每个交易。相反，它只需要将其默克尔根与每个其他节点的默克尔根进行比较。这允许构建轻量级软件客户端，无需存储整个区块链即可验证其自己的交易。'
- en: To calculate the Merkle root, you first create a Merkle tree, where the leaves
    are the transactions in the current block. [Figure 2-5](#flow_chart_of_a_sample_merkle_tree)
    shows the structure of a Merkle tree.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 计算默克尔根时，首先创建一个默克尔树，其中叶子节点是当前区块中的交易。[图 2-5](#flow_chart_of_a_sample_merkle_tree)展示了默克尔树的结构。
- en: '![](Images/mabc_0205.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0205.png)'
- en: Figure 2-5\. Flow chart of a sample Merkle tree
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-5\. 示例默克尔树的流程图
- en: H[A] is the transaction (tx) hash of the first transaction, H[B] is the tx hash
    of the second transaction, and so on (we’ll talk more about cryptographic hashes
    in [“Hashes”](#hashes)). H[AB] is the hash of H[A] + H[B] *=> H[A+B] = SHA256(
    SHA256 (H[A] + H[B]))*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: H[A] 是第一笔交易的交易 (tx) 哈希，H[B] 是第二笔交易的 tx 哈希，以此类推（我们将在 [“哈希”](#hashes) 中更多地讨论密码哈希）。H[AB]
    是 H[A] + H[B] 的哈希 *=> H[A+B] = SHA256( SHA256 (H[A] + H[B]))*。
- en: Note
  id: totrans-52
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The hash function for Bitcoin is double SHA-256.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Bitcoin 的哈希函数是双 SHA-256。
- en: By moving up the Merkle tree and generating hashes of all the leaves, you eventually
    reach the Merkle root (yes, the Merkle tree is an upside-down tree). If the number
    of transactions is odd, then the last transaction is replicated in order to continue
    this process. The Merkle root is an important value that helps to generate the
    block hash (see [“Block Hashes”](#block_hashes)).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向上移动 Merkle 树并生成所有叶子的哈希，最终到达 Merkle 根（是的，Merkle 树是一棵倒置的树）。如果交易数量为奇数，则最后一个交易将被复制以继续此过程。Merkle
    根是一个重要的值，有助于生成区块哈希（参见 [“区块哈希”](#block_hashes)）。
- en: '[Figure 2-6](#overview_of_bitcoin_block_hashonetwofiv) shows the Merkle root
    generated for a sample block, and [Figure 2-7](#flow_chart_of_the_example_merkle_tree)
    shows the flow chart of this Merkle tree.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-6](#overview_of_bitcoin_block_hashonetwofiv) 显示了样本区块生成的 Merkle 根，而 [图 2-7](#flow_chart_of_the_example_merkle_tree)
    显示了此 Merkle 树的流程图。'
- en: '![](Images/mabc_0206.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0206.png)'
- en: 'Figure 2-6\. Overview of Bitcoin block #125552'
  id: totrans-57
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: '图 2-6\. Bitcoin 区块 #125552 概览'
- en: '![](Images/mabc_0207.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0207.png)'
- en: Figure 2-7\. Flow chart of the example Merkle tree
  id: totrans-59
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-7\. 示例 Merkle 树的流程图
- en: 'Here’s how we arrive at the Merkle root for this example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们为这个示例得到 Merkle 根的过程：
- en: 'This is the tx hash of the first transaction:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第一笔交易的交易哈希：
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is the tx hash of the second transaction:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第二笔交易的交易哈希：
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is the tx hash of the third transaction:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第三笔交易的交易哈希：
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is the tx hash of the fourth transaction:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第四笔交易的交易哈希：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Thus:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因此：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The important takeaway here is that the Merkle root can be used to quickly detect
    tampering in blockchain nodes. If there has been any tampering or corruption of
    transactions in the blockchain on any given node, its Merkle root hash will no
    longer match that of the other nodes.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的重要信息是，Merkle 根可以用于快速检测区块链节点中的篡改。如果在任何给定节点的区块链上发生了任何篡改或交易损坏，其 Merkle 根哈希将不再与其他节点的相匹配。
- en: Signing and Validating Transactions
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 签名和验证交易
- en: Each transaction input contains a signature that provides proof that the owner
    of the sending address has authorized the transaction.  The signature is generated
    and encrypted using ECDSA, a cryptographic algorithm that takes the private key
    and transaction data as inputs, as illustrated in [Figure 2-8](#encryption_process_to_generate_a_transa).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 每个交易输入都包含一个签名，提供了证明发送地址的所有者已经授权该交易的证据。签名是使用 ECDSA 生成和加密的，这是一个密码算法，它将私钥和交易数据作为输入，如
    [图 2-8](#encryption_process_to_generate_a_transa) 所示。
- en: '![](Images/mabc_0208.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0208.png)'
- en: Figure 2-8\. Encryption process to generate a transaction signature
  id: totrans-75
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-8\. 生成交易签名的加密过程
- en: When all the nodes are verifying the transaction, they can easily verify the
    validity of the signature by using an ECDSA verify function, as illustrated in
    [Figure 2-9](#verifying_the_signature_on_a_transactio).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有节点都在验证交易时，它们可以通过使用 ECDSA 验证函数轻松验证签名的有效性，如[图 2-9](#verifying_the_signature_on_a_transactio)所示。
- en: '![](Images/mabc_0209.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0209.png)'
- en: Figure 2-9\. Verifying the signature on a transaction
  id: totrans-78
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-9\. 验证交易上的签名
- en: The important thing is that the private key is not required to check whether
    the digital signature authorizing the transaction is valid or not. Therefore,
    all nodes can easily validate the transaction using public information, but they
    can’t generate the signatures themselves because the private key is required for
    that.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是，不需要私钥来检查授权交易的数字签名是否有效。因此，所有节点都可以使用公共信息轻松验证交易，但他们无法生成签名，因为需要私钥。
- en: The Coinbase Transaction
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Coinbase 交易
- en: 'The first transaction recorded on every block is called a *coinbase* transaction.
    It is made up of two values:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 每个区块记录的第一笔交易称为*coinbase*交易。它由两个值组成：
- en: Block reward
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 区块奖励
- en: This is the reward a miner receives from the network for performing the work
    to discover a block and doing their part to provide processing power to the Bitcoin
    network. The reward comes in the form of new bitcoin being added to the world
    supply.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是矿工从网络中收到的奖励，用于发现一个区块并为比特币网络提供处理能力。奖励以新比特币的形式增加到世界供应中。
- en: Transaction fees
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 交易费
- en: This is the sum of all the transaction fees that are included in each transaction
    that gets added to the current block. There are often more transactions waiting
    to be processed than can fit into a block, generating a marketplace for transaction
    fees. The faster the miner wants a transaction to be processed, the higher the
    fee. The [Bitcoin Fees](https://bitcoinfees.net) site shows what current average
    transaction fees are.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是包括在每个添加到当前区块的交易中的所有交易费的总和。通常有更多交易等待处理而无法适应一个区块，从而产生了交易费用的市场。矿工希望交易快速处理的程度越高，费用就越高。
    [比特币费用](https://bitcoinfees.net) 网站显示当前平均交易费用。
- en: The coinbase transaction has only one input, called the coinbase, which is blank.
    It also has some other special properties—for example, the previous transaction
    is 32 bytes of 0, and the script signature is permitted to contain arbitrary data
    that the miner can choose, such as the nonce header overflow (see [“The mining
    process”](#the_mining_process)).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Coinbase 交易仅有一个输入，称为 coinbase，它为空白。它还具有一些其他特殊属性——例如，上一笔交易是 32 字节的 0，并且脚本签名允许包含矿工可以选择的任意数据，例如
    nonce 头溢出（见[“挖矿过程”](#the_mining_process)）。
- en: '[Figure 2-10](#sample_coinbase_transaction) shows an example of what a coinbase
    transaction looks like in a Bitcoin block explorer.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-10](#sample_coinbase_transaction) 显示了比特币区块浏览器中一个 coinbase 交易的示例。'
- en: '![](Images/mabc_0210.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0210.png)'
- en: Figure 2-10\. Sample coinbase transaction
  id: totrans-89
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-10\. coinbase 交易示例
- en: Bitcoin Transaction Security
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比特币交易安全性
- en: 'Bitcoin transactions are *push* transactions, meaning that the sender—the one
    pushing the funds out of an account they control—is the one to initiate the transaction.
    In contrast, a *pull* transaction is initiated by the receiver. An example is
    a credit card transaction: in this case, the merchant who is receiving the funds
    initiates the transaction.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币交易是*推送*交易，这意味着发送方——将资金从其控制的账户推出的一方——发起交易。相反，*拉取*交易是由接收方发起的。一个例子是信用卡交易：在这种情况下，接收资金的商家发起交易。
- en: Pull transactions are significantly less secure because they require the sender
    to share their account details with the receiver. To compensate for this weakness,
    pull payment networks (like Visa) provide *chargebacks*, or the ability to dispute
    a transaction and ask for a refund*.*
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取交易的安全性明显较低，因为它们要求发送方与接收方共享其账户详情。为了弥补这一弱点，拉取支付网络（如 Visa）提供*返还权*，或者争议交易并要求退款*。*
- en: As push transactions, bitcoin transactions are significantly more secure. When
    initiating a transaction, a sender never has to reveal any of their account information.
    The only way a fraudulent transaction can take place is if an unauthorized person
    gets a copy of someone’s private key.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 作为推送交易，比特币交易更加安全。当发起交易时，发送方无需透露任何账户信息。欺诈交易唯一可能发生的方式是未经授权的人获取了某人的私钥副本。
- en: Note
  id: totrans-94
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The most common way for an unauthorized person to get hold of a private key
    is by breaking into an unsecured server or database.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 未经授权的人获取私钥的最常见方式是侵入不安全的服务器或数据库。
- en: With the technology available today, it is considered to be impossible to guess
    or reverse engineer what someone’s private key is. The only way to guess a private
    key is through *brute force*—trying every possible combination.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今可用的技术下，被认为是不可能猜测或反向工程某人的私钥。唯一猜测私钥的方式是通过*穷举法*——尝试每一个可能的组合。
- en: 'A private key is a 256-bit number, which means there are 2^(256) potential
    combinations to try:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 私钥是一个 256 位数字，这意味着有 2^(256) 个潜在的组合可供尝试：
- en: 2^(256) = 1.15^(77) = 4 billion⁸
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2^(256) = 1.15^(77) = 4 billion⁸
- en: The combined total power of the Bitcoin network in 2020 is greater than that
    of any of the world’s supercomputers. Currently the bitcoin hash rate—an estimate
    of how many hashes are being generated by all the miners trying to solve any given
    block—is 90 exahashes per second. That works out to something like pow(2,128)/(90000000000000000000*3600*24*365)=119,892,034,120
    per year. (The use of pow(2,128) is because ECDSA, the cryptographic algorithm
    used to generate a bitcoin private key, can be cracked in proportion to the square
    root of the key size.)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 2020年比特币网络的综合总功率超过了世界上任何一台超级计算机的总功率。目前，比特币的哈希率——估计所有尝试解决任何给定区块的矿工所生成的哈希数量——为每秒90艾哈希。这相当于pow(2,128)/(90000000000000000000*3600*24*365)=119,892,034,120每年。（使用pow(2,128)的原因是因为ECDSA，生成比特币私钥的加密算法，可以按比例破解密钥大小的平方根。）
- en: 'So, if you harnessed the processing power of all the miners in the Bitcoin
    network, it would take them this long to go through every combination:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您利用比特币网络中所有矿工的处理能力，他们需要这么长时间才能穷尽每个组合：
- en: 4,589,678,828,851^(37) years
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4,589,678,828,851^37年
- en: Brute force attacks are commonly used to hack into computer systems, with the
    attacker trying a huge number of possible user passwords. Bitcoin private keys
    are resistant to brute force attacks because there are so many possible combinations
    to try.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 常用的暴力破解攻击是用来入侵计算机系统的，攻击者尝试大量可能的用户密码。比特币私钥对暴力破解攻击具有抵抗力，因为有很多可能的组合可供尝试。
- en: Hashes
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈希
- en: 'A *cryptographic hash* is a function that encrypts any form of data into a
    fixed-size string. Hashes have the following attributes that make them attractive
    for blockchain:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*加密哈希*是一个将任何形式的数据加密为固定大小字符串的函数。哈希具有以下属性，使其对区块链具有吸引力：
- en: No matter the input, the resulting hash will always be a fixed length. For example,
    the hash generated by SHA-256 will always be 256 bits long.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无论输入是什么，生成的哈希始终是固定长度。例如，SHA-256生成的哈希始终是256位长。
- en: A hash is a one-way encryption, meaning it is easy to encrypt the data.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个哈希是单向加密的，这意味着很容易加密数据。
- en: Conversely, it is extremely difficult, if not impossible, to decrypt the hash
    back to the original input data. The only way to decrypt a hash without a private
    key is through brute force, which basically means trying every possible combination
    of input data and seeing if the resulting hash matches the valid hash.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相反，要将哈希解密回原始输入数据是极其困难的，如果不是不可能的话。除了通过暴力破解，也就是尝试每种可能的输入数据组合，并查看生成的哈希是否与有效哈希匹配之外，没有私钥解密哈希的唯一方法。
- en: A hash is *deterministic*. This means every time the same input data is entered,
    the resulting hash will always be the same. It is also easy to re-create a hash
    later using the same inputs, and compare it to the original to see if any tampering
    or corruption of data has occurred.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个哈希是*deterministic*。这意味着每次输入相同的数据时，生成的哈希值都是相同的。稍后可以轻松地使用相同的输入重新创建哈希，并将其与原始哈希进行比较，以查看是否发生了任何篡改或数据损坏。
- en: Any slight change to the input data makes the resulting hash look very different.
    This adds to the difficulty of decrypting a hash.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入数据的任何轻微变化都会使得生成的哈希看起来非常不同。这增加了解密哈希的难度。
- en: Cryptographic hashes are *collision resistant*. It is extremely unlikely to
    find two different input values that yield the same hash value. This means every
    unique input will have a unique output.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密哈希是*抗碰撞*的。极不可能找到两个不同的输入值产生相同的哈希值。这意味着每个唯一的输入都将有一个唯一的输出。
- en: 'There are many different cryptographic hash algorithms. Two of the most common
    are:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的加密哈希算法。最常见的两种是：
- en: '*SHA-256*, commonly used by Bitcoin'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*SHA-256*，比特币常用'
- en: '*Keccak-256*, commonly used by Ethereum'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Keccak-256*，以太坊常用'
- en: A common use case for a hash is a secure website storing a hash of your password
    in its database. Let’s say your password for the website *[www.store.com](http://www.store.com)*
    is *FNj`{:;`k#F43rQ\*.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希的一个常见用例是安全网站在其数据库中存储您密码的哈希。假设您在网站*[www.store.com](http://www.store.com)*的密码是*FNj`{:;`k#F43rQ\*。
- en: 'For extra protection the website’s database will store not the password, but
    a hash of the password. If the website uses the hash function SHA-256, the resulting
    string stored in the database will be:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了额外的保护，网站的数据库不会存储密码，而是密码的哈希值。如果网站使用哈希函数SHA-256，存储在数据库中的结果字符串将是：
- en: '[PRE6]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Then, when you log in, the website only needs to verify the entered password
    by comparing the hash of the string you typed in to the hash stored in its database.
    This process makes the website more secure because if a hacker breaks into the
    database, they’ll only get the hashes of customer passwords.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，当您登录时，网站只需通过比较您输入的字符串的哈希与其数据库中存储的哈希来验证输入的密码。这个过程使网站更加安全，因为如果黑客入侵了数据库，他们只能获得客户密码的哈希值。
- en: Block Hashes
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区块哈希
- en: A *block hash* is a snapshot of what the entire blockchain looked like at the
    moment that block was created. In accounting terms, it’s like a balance sheet
    for the entire network. Every node in the network refers to the block hash to
    verify that its view of the network is the exact same as everyone else’s (see
    [Figure 2-11](#all_nodes_in_the_network_maintain_the_s)). If there’s even one
    minor difference in a node’s ledger, its hash will look significantly different.
    This is what makes blockchain *tamper-evident*; if the content experiences tampering
    or corruption, the resulting hash will no longer be the same.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*区块哈希*是整个区块链在该区块创建时的快照。在会计术语中，它就像是整个网络的资产负债表。网络中的每个节点都参考区块哈希来验证其对网络的视图是否与其他人完全相同（见[图 2-11](#all_nodes_in_the_network_maintain_the_s)）。如果节点的账本中甚至有一点点差异，它的哈希值就会看起来非常不同。这就是使区块链具有*防篡改性*的原因；如果内容受到篡改或损坏，生成的哈希值将不再相同。'
- en: 'In [Figure 2-11](#all_nodes_in_the_network_maintain_the_s), for example, Anonymous
    #4 has a different block hash than every other node—which means that node’s view
    of the network is wrong. Verifying the block hash is a much faster process than
    each node checking what every other node’s history of transactions would be.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'A Bitcoin block hash is generated using a double SHA-256 hash function on the
    `Block_Header`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: A `Block_Header` is made up of the data shown in [Table 2-2](#anatomy_of_a_bitcoin_block).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Table 2-2\. Anatomy of a Bitcoin block
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field** | **Description** | **Size (bytes)** |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
- en: '| Version | Block version number | 4 |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
- en: '| `hashPrevBlock` | 256-bit hash of the previous block header | 32 |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
- en: '| `hashMerkleRoot` | 256-bit hash based on all of the transactions in the current
    block | 32 |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
- en: '| Time | Current [block timestamp](https://en.bitcoin.it/wiki/Block_timestamp)
    as seconds since 1970-01-01T00:00 UTC | 4 |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
- en: '| Bits | Current [target](https://en.bitcoin.it/wiki/Target) in compact format
    | 4 |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
- en: '| Nonce | 32-bit number (starts at 0) | 4 |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
- en: The two most important fields in the `Block_Header` are `hashPrevBlock`, which
    provides a snapshot of what the Bitcoin network looked like in the previous block,
    and `hashMerkleRoot`, a snapshot of all the transactions included in the current
    block.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mabc_0211.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
- en: Figure 2-11\. All nodes in the network maintain the same view of the state of
    the network by having the same blockhash
  id: totrans-135
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Including the previous block hash when generating the new block hash ensures
    that every block is connected, or “chained,” to the previous block, as shown in
    [Figure 2-12](#block_hashes_connect_successive_blocks)—hence the name *blockchain*.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mabc_0212.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
- en: Figure 2-12\. Block hashes connect successive blocks together in one big chain
  id: totrans-138
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Custody: Who Holds the Keys'
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In financial services, custody refers to the ability to hold, move, and protect
    assets. It’s a good idea to know the concepts that support custody because of
    the number of different ways there are to store crypto assets.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在金融服务中，托管是指持有、移动和保护资产的能力。了解支持托管的概念是个好主意，因为有许多不同的方式可以存储加密资产。
- en: 'Wallet Types: Custodial Versus Noncustodial'
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 钱包类型：托管与非托管
- en: Similar to how people usually store value such as cash and credit cards in a
    folding piece of leather, cryptocurrency is stored in what is also known as a
    *wallet*. In this case, however, it’s really just an interface for storing cryptographic
    keys and keeping them secure; the cryptocurrency itself does not physically exist
    on any device, and the wallet is used exclusively for storing the keys associated
    with it. Many people say crypto and blockchain are “secured by math,” and this
    is what they are talking about.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 与人们通常将现金和信用卡存放在折叠的皮革制品中一样，加密货币存储在被称为*钱包*的东西中。然而，在这种情况下，它实际上只是一个用于存储加密密钥并保持其安全性的接口；加密货币本身并不实际存在于任何设备上，钱包仅用于存储与之关联的密钥。许多人说加密货币和区块链是“由数学保护的”，这就是他们所说的内容。
- en: 'In general, there are two types of cryptocurrency wallets: custodial and noncustodial.
    A *custodial* wallet is controlled by a trusted entity, with the user typically
    having to access its contents via a web interface. These sites store private keys
    for users; this way, users don’t have to worry about them.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，加密货币钱包有两种类型：托管和非托管。*托管*钱包由受信任的实体控制，用户通常通过网页界面访问其内容。这些网站为用户存储私钥；这样，用户就不必担心私钥的安全问题。
- en: Exchanges are a common example of custodial wallets—they hold your cryptocurrency
    in an account, and they own and control the keys. One popular example is [Coinbase](https://www.coinbase.com),
    which was founded in 2012 and is one of the oldest and largest custodial wallet
    providers in the market.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 交易所是托管钱包的常见例子——它们在账户中持有您的加密货币，并拥有并控制密钥。一个常见的例子是[Coinbase](https://www.coinbase.com)，该公司成立于2012年，是市场上最古老和最大的托管钱包提供商之一。
- en: 'The obvious downside of this arrangement is that if the exchange goes bankrupt
    or runs away with the funds, there’s nothing the user can do because they don’t
    directly own or control the keys. Trust is therefore an important issue: users
    must trust the service to safeguard their keys and act responsibly.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这种安排的明显缺点是，如果交易所破产或带着资金跑路，用户无能为力，因为他们不直接拥有或控制密钥。因此，信任是一个重要问题：用户必须信任服务来保护他们的密钥并负责任地行事。
- en: '*Noncustodial* wallets give users complete control of keys. However, there
    is a downside here too. The user is entirely responsible for the security of their
    private keys. If they lose them, that could result in complete and total inaccessibility
    of their funds. [Blockchain.com](https://www.blockchain.com), founded in 2011,
    is one of the oldest and largest noncustodial wallet providers in the market.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '*非托管*钱包给用户完全控制密钥。然而，这里也有一个缺点。用户完全负责其私钥的安全。如果他们丢失了私钥，那可能导致完全无法访问他们的资金。成立于2011年的[Blockchain.com](https://www.blockchain.com)是市场上最古老最大的非托管钱包提供商之一。'
- en: Note
  id: totrans-147
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Using noncustodial wallets takes effort and is not recommended for people with
    no experience in computer security, but it can be done with fairly simple steps.
    We’ll talk more about securing noncustodial wallets in [“Security Fundamentals”](#security_fundamentals).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用非托管钱包需要付出一些努力，不建议对计算机安全没有经验的人，但只需采取相当简单的步骤就可以做到。我们将在[“安全基础知识”](#security_fundamentals)中更多地讨论保护非托管钱包的方法。
- en: Wallet Type Variations
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 钱包类型的变化
- en: 'The two primary wallet types can be implemented in a variety of ways:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 两种主要的钱包类型可以以多种方式实现：
- en: A *hot wallet* is connected to the internet, so keys are readily available for
    creating transactions. This means it’s easy to move funds into and out of them.
    Many custodial wallets are hot wallets, including exchange wallets and web wallets.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*热钱包*连接到互联网，因此密钥可用于创建交易。这意味着很容易将资金转入和转出。许多托管钱包都是热钱包，包括交易所钱包和网页钱包。'
- en: A *cold wallet* is one where private keys are stored completely offline. This
    could be on a piece of paper or some other physical object completely separate
    from the internet. Large cryptocurrency companies keep the majority of their funds
    in cold wallets for safekeeping.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*冷钱包*是私钥完全离线存储的一种。这可以是在一张纸上或者是一些与互联网完全隔离的其他物理对象上。大型加密货币公司将大部分资金保存在冷钱包中以供安全保管。'
- en: A *hardware wallet* lets individual users keep funds in cold storage. This device
    is a noncustodial wallet that is not constantly connected to the internet, which
    provides safer storage of cryptocurrency keys. Examples include [Ledger](https://www.ledger.com)
    and [KeepKey](https://shapeshift.com/keepkey), both of which support dozens of
    kinds of crypto assets.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*硬件钱包*允许个人用户将资金存放在冷藏中。这种设备是一种非托管钱包，不会持续连接到互联网，从而提供了加密货币密钥更安全的存储方式。例如[Ledger](https://www.ledger.com)和[KeepKey](https://shapeshift.com/keepkey)，它们都支持数十种加密资产。'
- en: Pros
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 优点
- en: Support for multiple assets
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持多种资产
- en: Great cold storage method for large amounts of value
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于大量价值来说是一种很好的冷藏存储方法
- en: Cons
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 缺点
- en: Not as easy to use as other wallets
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不像其他钱包那么容易使用
- en: Funds are not as readily accessible
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资金不那么容易获得
- en: A *paper wallet* is a type of noncustodial wallet where the private key is printed
    or written out and stored somewhere physically safe, offline. Examples include
    [Walletgenerator.net](https://walletgenerator.net) (Bitcoin) and [MyEtherWallet](https://www.myetherwallet.com)
    (Ethereum).
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种*纸钱包*是一种非托管钱包，其中私钥被打印或书写出来，并安全地存储在离线的地方。例如[Walletgenerator.net](https://walletgenerator.net)（比特币）和[MyEtherWallet](https://www.myetherwallet.com)（以太坊）。
- en: Pros
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 优点
- en: Great long-term cold storage method
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 极佳的长期冷存储方法
- en: Keys are offline, so risk of online theft is minimal
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密钥处于离线状态，因此在线盗窃的风险很小
- en: Cons
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 缺点
- en: Funds are not as readily accessible as with online wallets
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资金不像在线钱包那样容易访问
- en: Physical damage could occur if keys are not stored properly
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果密钥未妥善存储，可能会造成物理损坏
- en: A *web wallet* is a website-based wallet accessed via a browser. Examples include
    [Coinbase](http://coinbase.com) (custodial) and [Blockchain.com](https://www.blockchain.com)
    (noncustodial).
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*网络钱包*是通过浏览器访问的基于网站的钱包。例如[Coinbase](http://coinbase.com)（托管）和[Blockchain.com](https://www.blockchain.com)（非托管）。'
- en: Pros
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 优点
- en: Very easy to access from any computer
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从任何计算机都非常容易访问
- en: May have buy/sell capability
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能具有购买/出售功能
- en: Cons
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 缺点
- en: User doesn’t usually have control of keys
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户通常不控制密钥
- en: Must trust website operator for security
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须信任网站运营者的安全性
- en: A *desktop wallet* is software that runs on a Windows, Mac, or Linux computer.
    Examples include [Electrum](https://electrum.org) (Bitcoin) and [MetaMask](https://metamask.io)
    (Ethereum).
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*桌面钱包*是在Windows、Mac或Linux计算机上运行的软件。例如[Electrum](https://electrum.org)（比特币）和[MetaMask](https://metamask.io)（以太坊）。'
- en: Pros
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 优点
- en: User controls keys
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户控制密钥
- en: Can be used mostly offline for better security
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以大部分离线使用以获得更好的安全性
- en: Cons
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 缺点
- en: No one desktop wallet is best for all cryptocurrencies
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有一种桌面钱包适用于所有加密货币
- en: Desktop security must be maintained by the user
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户必须维护桌面安全性
- en: '*A mobile wallet* is an app-based wallet, found in the app stores for Android
    or iOS. Examples include [Mycelium](https://wallet.mycelium.com) (Bitcoin) and
    [Edge](https://edge.app) (dozens of assets).'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*移动钱包*是一种基于应用程序的钱包，在Android或iOS的应用商店中可以找到。例如[Mycelium](https://wallet.mycelium.com)（比特币）和[Edge](https://edge.app)（数十种资产）。'
- en: Pros
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 优点
- en: Great for sending transactions from anywhere
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于从任何地方发送交易
- en: Many mobile wallets offer control of keys
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多移动钱包提供密钥控制
- en: Cons
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 缺点
- en: Security implications if someone were to get access to the user’s device
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有人能够访问用户的设备，会带来安全隐患
- en: Not a great method for storing large amounts of value
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不适合存储大量价值
- en: Security Fundamentals
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全基础
- en: It should go without saying that it’s important to keep private keys private.
    If someone is able to access your private key, it won’t be difficult for them
    to sign transactions on your behalf and empty out your wallet.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 毋庸置疑，保持私钥的私密性非常重要。如果有人能够访问您的私钥，他们就很容易代表您签署交易并清空您的钱包。
- en: 'One of the most common ways people lose crypto funds is through authentication
    issues. That means exposure of either private keys or passwords associated with
    a cryptocurrency wallet. There are a few ways to help prevent this from happening:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 人们失去加密资金最常见的方式之一是通过身份验证问题。这意味着泄露与加密货币钱包关联的私钥或密码。有几种方法可以帮助防止这种情况发生：
- en: Identity verification
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证
- en: With so many different messaging services being used today, it can be hard to
    tell whether someone is who they say they are. Make sure to verify through personally
    known information who you are talking to, especially if someone starts making
    strange requests—like asking for cryptocurrency.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 由于今天使用了许多不同的消息传递服务，很难确定某人是否是他们所说的那个人。一定要通过个人已知信息验证您正在与谁交谈，特别是如果有人开始提出奇怪的要求，比如要求加密货币。
- en: Two-factor authentication
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 两步验证
- en: In addition to using a password, turning on two-factor authentication is a good
    idea. Two-factor authentication requires another source for verification, such
    as when a website sends a text message to your phone containing a code you must
    enter in order to access your account on the site. There are multiple ways of
    doing two-factor authentication, and some are more secure than others. SMS verification
    using an app like Authy or Google Authenticator is one way. It can also be done
    via a hardware device like the YubiKey that plugs into the user’s computer. Note
    that the first option can be susceptible to porting (see below) if not done properly.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用密码之外，启用两步验证是一个好主意。两步验证需要另一个验证来源，例如当网站向您的手机发送包含您必须输入的代码的短信，以便访问您在该网站上的帐户时。有多种进行两步验证的方法，其中一些比其他方法更安全。使用
    Authy 或 Google Authenticator 等应用进行 SMS 验证是一种方法。也可以通过像 YubiKey 这样的硬件设备来进行，该设备插入用户的计算机中。请注意，如果未正确执行，第一种选项可能容易受到转移的影响（见下文）。
- en: 'Types of attacks to watch out for include:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 要注意的攻击类型包括：
- en: Cell phone porting
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 手机转移
- en: Porting is a common type of attack where someone takes over your cell phone’s
    number, allowing them to intercept incoming messages. This is often accomplished
    by calling the carrier and providing some personal information the attacker has
    learned. Because of the dangers of this attack vector, it’s best not to use SMS
    verification for two-factor authentication. A good alternative is to set up a
    portable VoIP phone number that supports text, like [Google Voice](https://voice.google.com).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 转移是一种常见的攻击类型，其中有人接管您的手机号码，使他们能够拦截传入的消息。这通常是通过致电运营商并提供攻击者已了解的一些个人信息来实现的。由于这种攻击向量的危险性，最好不要使用短信验证进行两步验证。一个好的替代方案是设置支持文本的可携带
    VoIP 电话号码，比如[Google Voice](https://voice.google.com)。
- en: Phishing
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 钓鱼
- en: Phishing is a very effective way for hackers to take control of accounts (and
    cryptocurrency). The attacker typically claims to be from a familiar and trusted
    organization, like a government agency or a well-known company, and sends the
    user a message containing a link that encourages them to reveal personal information,
    such as a password. This might be a spoofed email that looks like it’s from your
    boss and asks for your Social Security number, or the attacker could even ask
    an innocent question first to establish trust. Although it may sound far-fetched,
    phishing is the most effective tool attackers have—all they need is to obtain
    some personal information. The best policy is to never give personal information
    out to anyone in response to an unverified email or text. Always try another means
    of communication, like a phone call, to verify the request as valid.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to keep these fundamentals in mind. Even Steve Wozniak, the cofounder
    of Apple, was scammed out of bitcoins by letting a prospective buyer [use a credit
    card to send funds to him via PayPal](https://oreil.ly/WOGiT). The card transaction
    was reversed, but the bitcoin had already been sent. Be very careful, as cryptocurrency
    is a major attraction for scammers!
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Recovery Seed
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A *recovery seed* is a series of words that can be used to retrieve a private
    key stored in a noncustodial wallet. Seeds are commonly used as a memory aid because
    it is very difficult to remember a private key, which is just a string of random
    numbers and letters. Seed phrases usually store enough information to allow the
    user to recover their wallet. An example seed phrase might look like this:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-204
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: It’s very important to store the seed phrase for a noncustodial wallet somewhere
    safe. Indeed, for practical purposes, the recovery seed phrase *is* your “wallet,”
    and with it an attacker can easily access your funds. Cryptocurrency gives you
    complete control over your balances, but it’s up to you to secure them.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: If you record your seed on paper, be sure to laminate it or otherwise make sure
    the writing does not fade. Using an etched metal seed storage device like the
    one shown in [Figure 2-13](#sample_cold_storagecomma_embedding_reco) can also
    be useful, but it’s important to consider factors like corrosion or humidity.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mabc_0213.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-13\. Sample cold storage, embedding recovery seed onto metal (image
    credit: [*http://www.coldti.com*](http://www.coldti.com))'
  id: totrans-208
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Tip
  id: totrans-209
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The most common mechanism for generating a mnemonic to use as a wallet seed
    is [BIP39](https://oreil.ly/Jr2JU), the standard for creating phrases from addresses.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: Cryptocurrency can and has been lost, whether a user controls their private
    keys or not. It’s important to use secure communication tools, set up two-factor
    authentication, have a PIN with a cellular carrier, and be aware of phishing.
    Once cryptocurrency leaves a wallet, it’s almost impossible to get it back.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Mining
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the beginning, cryptocurrency mining was solely a hobbyist’s pursuit. Early
    adopters who wanted to support the Bitcoin network [downloaded and ran the Bitcoin
    Core software](https://bitcoincore.org/en/download), and they were able to mine
    a few bitcoins here and there just by running the software on their computers.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: In 2010, 1 bitcoin was worth $0.30, so miners weren’t making much money—it was
    just a hobby. Block rewards at that time were 50 BTC, so if a miner discovered
    1 block a day, they’d earn $15\. However, that changed over time as the hobbyists
    gave way to serious professionals.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Mining Is About Incentives
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Over time, as the price per bitcoin grew and interest in more professional mining
    hardware resulted in new equipment, the “difficulty” of mining also went up. It
    did not take long before just using a regular computer to mine was not enough.
    Miners needed special computer hardware known as *graphics processing units* (GPUs)
    to compete. Then they started using special microprocessors called *application-specific
    integrated circuits* (ASICs) to improve efficiency. Today, most cryptocurrency
    mining is done in huge data centers, with racks upon racks of machines requiring
    large amounts of power and cooling. So how did we get here?
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: It’s all about incentives. In the beginning, miners were competing with one
    another using personal computers to solve what can basically be called puzzles.
    The reward for doing this was 50 brand-new bitcoins—and a new block would be published
    to the chain. Over time, however, the crypto rewards for solving these “puzzles”
    turned into serious revenue ([Figure 2-14](#mining_revenue_in_bitcoin_is_as_volatil)).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mabc_0214.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
- en: Figure 2-14\. Mining revenue in bitcoin is as volatile as its price
  id: totrans-219
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: There are massive benefits to mining bitcoins at scale. With access to cheap
    power and data centers, mining cryptocurrency can be profitable. As a result,
    mining has mostly moved beyond the purview of the hobbyist. New cryptocurrencies
    may arrive that welcome hobbyist miners, but Bitcoin has reached an enterprise
    level of large-scale data center–based mining.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Block Generation
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Why does mining exist? Many cryptocurrencies require mining because they use
    a consensus algorithm called *proof-of-work* (we’ll talk about consensus in the
    next section). The “work” is “proven” by running computations to solve a puzzle—in
    the case of Bitcoin, generating a hash that matches a specific pattern—which when
    completed reveals the address of the block being mined. A new block is added to
    the blockchain only once the current puzzle has been solved.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: This process of proving work to generate blocks is called mining. The idea is
    that the sheer computing power necessary to mine blocks acts as a sufficient deterrent
    to make Bitcoin secure—and indeed the network has never been compromised. The
    amount of computing power needed to solve the cryptographic puzzles is increasing
    rapidly, as [Figure 2-15](#history_of_mining_difficulty_in_the_bit) illustrates.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mabc_0215.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
- en: Figure 2-15\. History of mining difficulty in the Bitcoin network
  id: totrans-225
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This is no accident. Bitcoin is designed to adjust its mining difficulty every
    2,016 blocks, so as time goes along the puzzles actually get harder to solve.
    The math is designed so that as more miners join the network, the time gap between
    blocks being generated stays the same—around 10 minutes.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Consensus
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Consensus* is a way of reaching agreement between various participants who
    have shared values and goals, and it is an important component of how blockchain
    networks succeed. Though there are other ways of achieving consensus, in blockchain
    the two most popular are proof-of-work and proof-of-stake. Since we are focused
    on cryptocurrency and mining, this explanation will concentrate on proof-of-work
    and how it applies to Bitcoin. Note that enterprise applications that use blockchain
    generally do not use proof-of-work consensus and do not require miners.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Proof-of-Work
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Proof-of-work enables cryptocurrency transactions to be confirmed and blocks
    to be published on the Bitcoin blockchain. First described in a [research paper](https://oreil.ly/rLEvs)
    by Markus Jakobsson of Bell Labs and Ari Juels of RSA Laboratories, proof-of-work
    was initially created to bind economic value via computer processing to otherwise
    free services, like email, in order to stop spam. Because proof-of-work requires
    computing power, it reduces the incentive to attack or flood a system. The economic
    value provided in proof-of-work is directly correlated to the price of the electric
    power that is used in the mining process.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: In proof-of-work cryptocurrency mining, a hash function is used to verify data.
    A hash is output on the blockchain as public proof using a *hash algorithm*. The
    computer speed at which this is done is known as the *hash rate*. With many cryptocurrencies,
    proof-of-work–based computer power is what secures the network—and that power
    has become quite substantial. Although hash rates fluctuate, Bitcoin has surpassed
    70 million terahashes per second in the past (see [Figure 2-16](#history_of_the_hash_rate_for_the_bitcoi)).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: In cryptography, many different types of proof-of-work have been devised. For
    cryptocurrencies, a few are used. Bitcoin uses the SHA-256 hash algorithm, for
    example, while Litecoin uses a more memory-intensive cryptographic Scrypt algorithm.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mabc_0216.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
- en: Figure 2-16\. History of the hash rate for the Bitcoin network
  id: totrans-234
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Block discovery
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: About every 10 minutes, a new block of bitcoin transactions is confirmed by
    one miner. Since there are thousands of miners in the network, the network needs
    to achieve consensus on which miner gets the right to confirm the new block.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 'All a miner has to do to discover a new block is generate a Bitcoin block hash
    that is considered valid by the network, using the following criteria:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: It is a hash of a valid block header.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The resulting block hash is a number that is lower than the current network
    target.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The *target* is a constantly changing number that must always be higher than
    a valid block hash. The *difficulty* is the average number of attempts required
    to discover a valid block hash. The *network hash rate* refers to how many times
    per second the miners in the network collectively attempt to generate a valid
    block hash.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: The goal for the network, set in Bitcoin’s initial parameters, is that a new
    valid block should be discovered approximately every 10 minutes. Over time, the
    number of miners using computer processing power to discover a block changes along
    with variables like electricity use and processing power, among other factors.
    The processing power they are consuming is called the *hash power*. The miners’
    computers are consuming this power to try to generate a valid Bitcoin block hash.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: When the hash power of the Bitcoin network *increases*—that is, when more computer
    processing power is being applied to generate a valid block hash—it naturally
    takes *less* time for the network to discover a block. Therefore, in order to
    maintain an average of 1 block being discovered every 10 minutes, the Bitcoin
    network changes the network target to make it more or less difficult for the network
    of miners to discover a valid block hash.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: 'The target value when the first Bitcoin block was generated was:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is the highest possible target value. When you compare the first block’s
    hash to this, you can see that it is a (hex) number lower than the target at that
    moment:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '| Initial target | **`00000000`**`ffff0000000000000000000000000000000000000000000000000000`
    |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
- en: '| Block #0 hash | **`0000000000`**`19d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f`
    |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
- en: 'A simple way to see which number is lower in hex is by counting how many zeros
    are at the beginning of the hash. The initial target has 8 zeros, whereas the
    first block hash has 10 zeros; therefore the block #0 hash is a lower number,
    and therefore it is valid.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: 'When block #0 was discovered, there was little competition in the Bitcoin network
    to discover a block. So, the target value was high. The difficulty at that moment
    was 1, meaning that on average it would require 1 attempt to generate a valid
    hash. Ten years later, there are thousands of miners consuming significantly more
    hash power to discover a block. Therefore, the target 10 years later is a lower
    value, requiring more attempts.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: 'Compare the target with a valid block hash from July 28, 2019:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '| Target | **`000000000000000000`**`1f3a08000000015667e3e2c52a81e977a0b71f70e5af97`
    |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
- en: '| Block #587409 hash | **`000000000000000000000`**`1f57b098911a90b164b9812304f4f7615cf9f91f66a`
    |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
- en: '| Difficulty | 9,013,786,945,891.68 estimated attempts required to discover
    a valid block hash |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
- en: Bitcoin is designed to have a new target recalculated by all the nodes in the
    network every 2,016 blocks (approximately 14 days). The new target value is calculated
    as the target value that would have generated the previous 2,016 blocks at intervals
    of exactly 10 minutes. This is the Bitcoin network’s way of self-correcting the
    difficulty required to generate a valid block hash by the miners that participated
    in the network over the previous 2,016 blocks.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: The main reason this difficulty process is in place is to ensure the supply
    of bitcoin is predictable and follows a specific schedule (see [Figure 2-17](#bitcoin_supply_over_time)).
    When each new block is created, new bitcoin is created as well, although over
    time this supply is diminished. With bitcoin, the size of the reward is also designed
    to get smaller as supply fills. Every 210,000 blocks, or approximately every 4
    years, the block reward is cut in half. It went from 50 bitcoins to 25, then from
    25 to 12.5, and so on, and will continue decreasing until 2140, when roughly 21
    million total bitcoins (a hard cap) will have been mined.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mabc_0217.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
- en: Figure 2-17\. Bitcoin supply over time
  id: totrans-257
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The mining process
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At every moment, hundreds of thousands of miners on the Bitcoin network are
    competing to discover the next valid block on the blockchain. Miners are incentivized
    to do this because of the block reward and transaction fees. As mentioned earlier,
    the miner needs to make sure the following are true to generate a valid block
    hash:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: It is a hash of a valid block header.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The resulting block hash is a number that is lower than the current network
    target.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To generate a valid block hash, the miner needs to input the information shown
    in [Table 2-3](#contents_of_a_valid_bitcoin_block).
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: Table 2-3\. Contents of a valid Bitcoin block
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field** | **Description** |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
- en: '| Version | The Bitcoin client version that the miner is currently using |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
- en: '| `hashPrevBlock` | The hash of the last block that the miner sees at this
    moment |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
- en: '| `hashMerkleRoot` | The hash of all the transactions the miner decides to
    include in the current block |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
- en: '| Time | The block timestamp, calculated as seconds since 1970-01-01T00:00
    UTC |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
- en: '| Bits | The current Bitcoin network target |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
- en: '| Nonce | Starts at 0; if the resulting hash is not valid, then add 1 and try
    the new hash |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
- en: All the fields except for the nonce are taken from public sources of information.
    When a miner begins trying to discover a valid block, they initially set the nonce
    to 0 and then try to generate a hash that matches the block hash, which is randomly
    generated. Miners try over and over and to find this block hash, using hash power,
    meaning the more efficient a miner is at generating these hashes, the higher a
    hash rate they have.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: If the resulting block hash is invalid, the miner adds 1 to the 32-bit nonce
    and generates a new block hash, which it hopes will be valid. If the miner runs
    out of nonce space, known as an *overflow,* they use script sig space in the coinbase
    transaction. If a miner finds a block hash that is valid, which includes satisfying
    the target criteria, then they have discovered a valid block. The process of continuously
    trying new block hashes is the proof-of-work every miner puts effort into, as
    shown in [Figure 2-18](#the_proof-of-work_process_miners_go_thr).
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mabc_0218.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
- en: Figure 2-18\. The proof-of-work process miners go through to attempt to discover
    a new block
  id: totrans-275
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: After a miner discovers a valid block hash, the miner then broadcasts that new
    block hash to all the other miners in the network. There is a possibility that
    two different miners will discover a valid block and broadcast the new blocks
    to the network at the same time. It is then up to all the other miners in the
    network to achieve consensus on which new block will be added to the blockchain,
    as [Figure 2-19](Images/#an_event_when_two_miners_discover_a_new) illustrates.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mabc_0219.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
- en: Figure 2-19\. An event when two miners discover a new block at the same time
  id: totrans-278
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Before a miner adds a new block to the blockchain, the miner verifies that
    the following are true:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: The block is valid.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All the transactions in the block are valid. This includes confirming the data
    signatures used to unlock transaction outputs.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Consensus is achieved when more than 50% of the other miners in the network
    include the same new block into their copies of the blockchain. The miners collectively
    “vote” on which block they recognize to be added at that moment to the blockchain,
    as well as verifying that all the transactions are valid.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-283
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The *longest chain rule* dictates that miners follow the chain with the most
    work—in other words, the longest chain. If two versions of the chain are both
    the same length, as is the case when two different miners find a solution simultaneously,
    then miners stay on the first chain they see, and then switch over the moment
    they see a longer one. The longest chain rule is essential to most forms of consensus,
    especially proof-of-work**.**
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: Transaction life cycle
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a centralized payments system like PayPal, the life cycle of a transaction
    is pretty straightforward. You log in to the PayPal website or app, enter the
    transaction details, and press Enter. If PayPal responds with a “Completed” notification,
    then your transaction has been processed and you are done.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: 'The transaction life cycle in Bitcoin is very different, and there are many
    different steps involved in the process. The following are the four main stages
    a transaction goes through:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '*Broadcast.* The first step is generating a valid bitcoin transaction and then
    broadcasting the transaction details to the Bitcoin network. Most Bitcoin users
    will use an online wallet (such as Coinbase), and in the background there is software
    running a client connected to the Bitcoin network that enables them to see these
    transactions.'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Unconfirmed/Mempool.* As every miner in the network receives the transaction,
    it places that transaction into its *memory pool*, or *mempool*. The mempool is
    a collection of all the bitcoin transactions that are in an unconfirmed state
    and are still considered active. By default, if a transaction has been sitting
    in the mempool for more than two weeks, it is considered inactive and is dropped
    from the mempool.'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Confirmed by miner.* When a miner discovers a new block, the miner decides
    which transactions to include in that block, choosing from transactions that are
    sitting in the mempool. Miners choose transactions in order of transaction fees,
    starting with the highest ones. A transaction is considered confirmed by a miner
    when that miner adds a block containing that transaction to its blockchain. However,
    that miner cannot see the other miners’ copies of the blockchain, and there is
    no assurance that the same block of transactions has been added to their chains.'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Confirmed by the network.* As a block is buried under newer blocks, the chances
    that the Bitcoin network has achieved consensus to include that block increase.
    A transaction is considered to be confirmed by the entire Bitcoin network when
    the network has achieved consensus to include the transaction’s block in the blockchain.'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirmations
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bitcoin wallets, and most people in the industry, consider a transaction to
    be safely confirmed by the network when that transaction has reached at least
    six confirmations. A *confirmation* involves a miner adding a block that contains
    transactions to the chain. [Figure 2-20](#example_of_proof-of-work_miners_decidin)
    illustrates the decision process of miners for including a block.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mabc_0220.png)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
- en: Figure 2-20\. Example of proof-of-work miners deciding on which block to include
    in the blockchain
  id: totrans-295
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In [Figure 2-20](#example_of_proof-of-work_miners_decidin), block #100 has
    reached three confirmations. All four miners in the network have included the
    same block. At block #101, three of the miners (75%) have included the block discovered
    by Bob, but one (miner D) has included the block discovered by Charlie. At this
    moment, miner D does not realize yet that their view of the blockchain from block
    #101 on will have to change. If there is a transaction in miner D’s block #101
    that is not in the other miners’ block #101, that transaction will not be included
    in the network’s blockchain. This is why the more confirmations a transaction
    has, the more likely it is to be included in the Bitcoin network’s blockchain.'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-297
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Many services have different cryptocurrency confirmation schedules. For example,
    some services require as few as three Bitcoin network confirmations before a transaction
    is considered complete, although the standard is usually six confirmations. Some
    services may require even more confirmations, depending on a variety of factors
    (including the type of cryptocurrency used).
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: Proof-of-Stake
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Proof-of-stake is a consensus algorithm that aims to improve on proof-of-work
    by eliminating the need for mining. Instead, holders of a cryptocurrency “stake”
    their balances to gain voting rights and have a chance of being selected by the
    network to validate transactions. Staking therefore allows you to act as a node,
    or validator. Though there are no expensive hardware requirements or difficult
    computational processes to worry about, there are economics in play with the cryptocurrency
    holders putting up funds. And there are incentives: those who stake are provided
    rewards in proportion to their holdings.'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-301
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In a proof-of-stake network, nodes are not considered miners because they are
    not doing work to discover a block. Instead, the role nodes have in the network
    is to *validate* transactions, so the nodes in the network creating blocks are
    called *validators*.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: Instead of selecting the miner who can discover a valid block hash first by
    doing work, proof-of-stake consensus selects a node based on various staking criteria,
    which may include size of stake (the amount staked), age (which address has held
    onto the cryptocurrency for the longest time), wealth (which address has held
    onto the most cryptocurrency for more than *X* amount of time), etc. Alternatively,
    in some systems an address that has staked some of the cryptocurrency is selected
    at random.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: Pros
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: Because there is no mining, little energy is consumed in creating blocks, so
    less energy is wasted powering the network.
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gives more control to those who are more invested in the network.
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cons
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: Control of the network is tied to the distribution of wealth in the network.
    Most cryptocurrency wealth is concentrated among a small group, and therefore
    control of the network is more centralized than in a proof-of-work network.
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By giving more control to those who are more “invested” in the network, rather
    than the ones who are doing more “work,” proof-of-stake could lead to more divergence
    between the rich and the poor than proof-of-work.
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There has been a lot of criticism of the proof-of-work model. Although a novel
    idea for cryptocurrency when Satoshi Nakamoto proposed it, the hardware arms race
    to develop the most powerful ASIC has arguably made proof-of-work more resource-intensive
    than it should be. One side of this argument says Bitcoin has become an environmental
    problem because the amount of electricity required to confirm transactions and
    generate new bitcoin [is no longer economically efficient](https://oreil.ly/ttdDl).
    Another side points out that most of the electricity consumed by Bitcoin is actually
    from renewable sources like hydroelectricity, which is where miners get cheap
    power.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: Determining who gets to generate the next block in proof-of-stake systems is
    very different from in proof-of-work systems, and there are a few different ways
    to do it. Some cryptocurrencies use randomized block selection, which is based
    on a combination of stake size (the higher the better) and hash value (the lower
    the better). Another method is coin age–based selection, which is based on the
    number of coins staked and the number of days the coins have been held (possibly
    combined with the randomized selection method). The latest method of securely
    introducing randomness is by using the [RANDAO random number generator](https://oreil.ly/WcsLC)
    and [verifiable delay functions (VDFs)](https://oreil.ly/kE03f) together.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: A few cryptocurrencies currently use staking, including Dash, Neo, and Tezos,
    but it’s still a relatively new concept and has not yet seen widespread use like
    proof-of-work. There are criticisms that proof-of-stake is not a secure consensus
    mechanism, as a *fork* would in theory create [equal incentives on two different
    chains](https://oreil.ly/tjBAS) (forks, which occur when a blockchain diverges,
    are covered further in [Chapter 3](ch03.xhtml#forks_and_altchains)). There is
    also the risk of a “fake stake” attack, where a staker with little to no balance
    could disrupt a network, as validation is much more complex to complete than with
    proof-of-work.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: Another theoretical safety issue is the Nothing-at-Stake problem, where a miner
    freely creates several blocks, causing forks and denial-of-service attack possibilities.
    This has typically been addressed with *slashing algorithms* to reduce stake in
    order to penalize badly behaved validators.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: Other Concepts for Consensus
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are other ideas outside of proof-of-work and proof-of-stake. Achieving
    consensus is still a new and evolving technology concept, and different ideas
    are being tested. This is why consensus algorithms are frequently decoupled from
    blockchains—in other words, the blockchain technology itself is not tied to one
    particular method of consensus. This way, third parties can build and market consensus
    algorithms to be added to commonly used blockchains.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: Cryptocurrencies like Ripple and Stellar are active projects that use some very
    different types of consensus protocols, although it can be argued these systems
    are not entirely distributed. Both use what is known as [*Byzantine agreement*](https://oreil.ly/5R7yb),
    a way for distributed nodes to cooperate to confirm transactions. Many of these
    nodes are controlled by the projects themselves, so they may seem centralized.
    However, both Ripple and Stellar bypass traditional banking and payments systems
    by having a blockchain-based unit of account. This allows users to [save on the
    costs](https://oreil.ly/SjTUT) usually incurred in traditional financial systems.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: Alternative methods
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One approach being looked at is called *proof-of-storage*. Something that can
    be done computationally and is also resistant to ASICs, proof-of-storage uses
    the validation of storage through filesystems to verify transactions. Projects
    such as [Permacoin, Torcoin, and Chia](https://oreil.ly/66NFs) are utilizing a
    version of proof-of-storage.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting approach to scaling is *proof-of-history*. For example,
    in proof-of-work, Bitcoin can be reimagined as a clock that ticks every 10 minutes
    (thanks to the difficulty adjustment), and the ordering of messages is not agreed
    upon until 10 minutes pass and the network reaches consensus. In proof-of-stake,
    everyone is receiving messages from the network, and they need to communicate
    with other’s nodes to agree on the ordering and timing of these messages before
    they finally reach consensus, and the network progresses.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: 'Proof-of-history is a way to create objective timestamps that nodes within
    the network can rely on, enabling them to optimistically trust the ordering and
    timing of the messages before consensus is reached. Consensus then comes in later:
    participants within the network vote on what they believe to be the main branch,
    and each time they do this, they commit to not voting on another branch for a
    set amount of time. The more they vote for a particular branch, their commitment
    to not vote on another branch grows exponentially. They’re incentivized to consistently
    vote for what they believe to be the major branch because until they have stacked
    32 votes for one particular branch, they won’t earn any network rewards.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-321
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In her paper [“Practical Uses of Synchronized Clocks in Distributed Systems”](https://oreil.ly/kQcL1),
    Barbara Liskov of the MIT computer lab states, “Synchronized clocks are interesting
    because they can be used to improve the performance of distributed algorithms.
    They make it possible to replace communication with local computation.”
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: '*Delegated proof-of-stake* consensus is an energy-efficient form of consensus
    where users *delegate*, placing tokens with a “candidate,” and use voting to help
    govern the network. There is also *voting-based* consensus, and *lottery-based*
    consensus is used in more private implementations of blockchain.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: Stakeholders
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition to a protocol network, wallets, and miners, there are other stakeholders
    in the cryptocurrency ecosystem. These may be centralized services or for-profit
    businesses, and they provide important functionality needed in the ecosystem.
    There are five categories of stakeholders that a typical user might interact with
    in cryptocurrency: brokerages, exchanges, custody services, analytics services,
    and information providers.'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: Brokerages
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As services that help facilitate cryptocurrency transactions, *brokerages* act
    as intermediaries for buying, selling, and holding crypto in the ecosystem. This
    includes merchant payments. In name-brand services like the mobile apps [Robinhood](https://robinhood.com)
    and [Square’s Cash App](https://cash.app), which allow people to purchase cryptocurrency,
    a brokerage transaction occurs. Robinhood acts as an intermediary, doing the work
    of acquiring cryptocurrency and storing it for the user.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: For merchant transactions, companies like [BitPay](https://bitpay.com) handle
    all of the processing. Any merchant that accepts bitcoin or other cryptocurrency
    usually has a brokerage take possession of the cryptocurrency. The merchant is
    then paid in cash by the broker since this is the primary way businesses pay for
    other expenses, like payroll, rent, inventory, and so on.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-329
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[BTCPay Server](https://oreil.ly/RT9E-) is an open source, self-hosted solution
    for accepting bitcoin payments. It enables acceptance of cryptocurrencies via
    an invoicing function at checkout, and has a number of plug-ins for popular web
    platforms.'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: Exchanges
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As on-ramps to the world of fiat-backed currency, exchanges allow people to
    directly trade with others. Exchanges like [Coinbase Pro](http://pro.coinbase.com/trade)
    in the US and [Bitstamp](https://www.bitstamp.net) in Europe have trading engines
    that match buyers with sellers. Trading pairs are typically in fiat, but can also
    be crypto to crypto. Example trading pairs include USD/BTC, EUR/BTC, and BTC/ETH.
    When compared to brokerages, exchanges offer increased risk, though the aforementioned
    exchanges have been around for many years and work with government regulators.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-333
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Exchanges have custody of users’ keys and provide the trading engine. You must
    trust that a cryptocurrency exchange is reliable and will not manipulate the market
    or misuse funds, which is a problem in cryptocurrency.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: In an effort to entice users to their platforms, some exchanges are also now
    offering staking and functioning on fractional reserves, topics that are covered
    in later chapters.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: Custody
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A number of businesses focus on long-term hosting and protection of cryptocurrency
    for users. These services, known simply as crypto custody solutions, usually charge
    a small fee for balances held or withdrawals. However, they are great services
    for those who don’t ever want to worry about the custody of cryptocurrency. These
    businesses have worked for years to devise novel technologies to store crypto
    for users.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: Two of the biggest names in the crypto custody business are [BitGo](https://www.bitgo.com)
    and [Coinbase](https://www.coinbase.com). Both are multicrypto asset custody providers,
    adding new cryptocurrencies all the time. Often these services offer various levels
    of hot, warm, or cold storage. With cold storage, it’s important to note that
    it may take some time to withdraw cryptocurrency from the service.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: Analytics
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cryptocurrency blockchains produce a voluminous amount of information. There
    are a number of products and services on the market to take this raw data and
    put it into a format that is easy for people to use. The most common tool is called
    a *blockchain explorer*. It allows users to better view transactions. Two popular
    services are [Blockchain.com](https://www.blockchain.com) for Bitcoin and [Etherscan](https://etherscan.io)
    for Ethereum, which let you see the full contents of a block. [Figure 2-21](#screenshot_from_a_blockchain_explorer)
    shows a transaction in a blockchain explorer.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mabc_0221.png)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
- en: Figure 2-21\. Screenshot of a Bitcoin transaction from a blockchain explorer
  id: totrans-342
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: There are also companies that do deeper dives into following cryptocurrency
    transactions. One of the largest is [Chainalysis](https://www.chainalysis.com),
    which helps exchanges and other stakeholders identify transactions. There are
    also free tools to help people follow trading patterns, such as [TradingView](https://www.tradingview.com),
    a charting tool that has cryptocurrency charts for almost all the major assets
    on most of the global exchanges.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: Information
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The blockchain industry is changing on a daily basis. New companies, new ideas,
    and brand-new cryptocurrencies seem to pop up all the time. [CoinDesk](https://www.coindesk.com),
    which was founded in 2013, is one of the oldest and largest organizations dedicated
    to providing news and other research on the industry. Major publishers like the
    *New York Times*, the *Wall Street Journal*, and Bloomberg also do a good job
    of covering the cryptocurrency industry with dedicated beat journalists.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: Conferences are great educational resources, but can be expensive. For the budget-conscious,
    [Meetup.com](https://www.meetup.com) is a great source to find local cryptocurrency
    events. Using the search terms *bitcoin*, *ethereum*, or *blockchain* will usually
    turn up some local meetups, most of them featuring speakers talking about current
    events, best practices, or interesting technical topics.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The basics of cryptocurrency can be a lot to take in at first. We hope this
    chapter hasn’t been too overwhelming. A good understanding of the material covered
    here will set you up for better understanding in the chapters ahead. The world
    of cryptocurrency is changing fast, but the basics seem pretty much here to stay.
    The next chapters cover a range of topics that build on this early material. It’s
    perfectly fine if you find yourself coming back to this chapter as a reference!
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
