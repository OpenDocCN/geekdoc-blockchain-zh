- en: Chapter 3
  prefs: []
  type: TYPE_NORMAL
- en: Getting Your Hands on Blockchain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IN THIS CHAPTER
  prefs: []
  type: TYPE_NORMAL
- en: '![check](images/check.png) **Creating and using a Bitcoin wallet**'
  prefs: []
  type: TYPE_NORMAL
- en: '![check](images/check.png) **Creating a simple smart contract**'
  prefs: []
  type: TYPE_NORMAL
- en: '![check](images/check.png) **Deploying a private blockchain**'
  prefs: []
  type: TYPE_NORMAL
- en: Blockchains are very powerful tools and are positioned to change how the world
    moves money, secures systems, and builds digital identities. If you aren’t a core
    developer, you probably won’t be doing any in-depth blockchain development in
    the near future. That said, you still need to understand how blockchains work
    and what their core limitations are, because they’ll be integrated into many everyday
    online interactions — from how businesses pay people to how governments know that
    their systems and data are intact and secure.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter helps you get started in the blockchain world. You’ll get acquainted
    with many of the most important aspects of working with blockchains and cryptocurrencies,
    yet you’ll be working with tools that keep you at a comfortable distance from
    the intimidating and complex inner workings of blockchains. This chapter also
    helps you establish the basic crypto accounts that you need in later chapters.  ##
    Diving into the Bitcoin Blockchain'
  prefs: []
  type: TYPE_NORMAL
- en: The Bitcoin blockchain is one of the largest and most powerful blockchains in
    the world. It was designed primarily to send Bitcoin, the cryptocurrency. So,
    naturally, in order to create a message in the Bitcoin blockchain, you must send
    some Bitcoins from one account to another.
  prefs: []
  type: TYPE_NORMAL
- en: When you send Bitcoins from one account to another, a transaction history is
    recorded in the Bitcoin blockchain. After a transaction has been entered, the
    information can’t be removed — your message will be around as long as Bitcoin
    is in existence. This concept of permanence is powerful — it’s the most important
    characteristic of any blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: You have several ways of adding extra little messages inside your transaction,
    but sometimes these methods don’t always produce easily readable messages. In
    this section, I explain how to build the message directly into the Bitcoin transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Embedding the data into the Bitcoin address ensures that it will be easily readable.
    You can do this by utilizing a Bitcoin vanity address. Think of a vanity address
    like a vanity license plate on a car. Six-letter Bitcoin vanity addresses can
    be obtained for free; longer ones cost money. The longer the vanity address, the
    more costly it is.
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you create two Bitcoin wallets, add funds to one of them, obtain
    a vanity address, and send a little Bitcoin between your accounts.
  prefs: []
  type: TYPE_NORMAL
- en: '![tip](images/tip.png) If you already have a Bitcoin wallet with funds in it,
    you can skip the first section and use that wallet.'
  prefs: []
  type: TYPE_NORMAL
- en: '### Creating your first Bitcoin wallet'
  prefs: []
  type: TYPE_NORMAL
- en: A Bitcoin wallet address is composed of 32 unique characters. It allows you
    to send and receive Bitcoins. Your private key is a secret code associated with
    your Bitcoin address that lets you prove your ownership of the Bitcoins linked
    with the address.
  prefs: []
  type: TYPE_NORMAL
- en: '![warning](images/warning.png) Anyone with your private key can spend your
    Bitcoins, so never share it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Your first Bitcoin wallet needs to be linked to a credit card or bank account.
    I recommend using one of the following Bitcoin wallets:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Coinbase (**[`www.coinbase.com`](https://www.coinbase.com)**)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Xapo (**[`www.circle.com`](https://www.circle.com)**)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To set up your first wallet, just go to one of these URLs and create an account.
    It just takes a few minutes. When you have your account open, add a little money
    to it so you can experiment — $5 is a great starting point.  ### Creating a second
    Bitcoin wallet'
  prefs: []
  type: TYPE_NORMAL
- en: To receive the Bitcoins you’ll send, you need to make a second Bitcoin wallet.
    For this second wallet, don’t use a Circle or Coinbase wallet — they don’t have
    the functionality you need for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest Bitcoin wallet to use for this project is the Blockchain.info wallet.
    Follow these steps to create it:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Go to the Blockchain.info website (**[`www.blockchain.info`](http://www.blockchain.info)**).**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Click Wallet.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Click Create Your Wallet.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Enter an email address and password.**  ### Generating a Bitcoin vanity address'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A Bitcoin vanity address is like having a personalized license plate for your
    car. It is a Bitcoin address that has a string of numbers or letters that appeals
    to you. A vanity address is optional, but a fun way to see your message in Bitcoin.
    There are a several free ways to create a Bitcoin wallet vanity address. My favorite
    is BitcoinVanityGen.com. To create your vanity address using BitcoinVanityGen.com,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Go to the BitcoinVanityGen.com website (**[`www.bitcoinvanitygen.com`](http://www.bitcoinvanitygen.com)**).**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Enter six letters into the Type Letters field.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bitcoin only allows for small messages, and your vanity address will make up
    the content of your message, which you can easily read in Bitcoin.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![tip](images/tip.png) Choose something cool because you can reuse your address
    whenever you want after it has been created.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Click Generate.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Click Email.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Enter your email address.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: BitcoinVanityGen.com emails you when your vanity address has been found.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Click the link in the email from BitcoinVanityGen.com.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’ll be given your new vanity address and the private key associated with
    the address.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Copy your address and private key, and keep them in a safe place.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will need your address and private key for the next section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![warning](images/warning.png) Never share your private keys! Save your private
    key and a public key someplace safe. Use your public key to receiving or send
    Bitcoins. (You can share your public Bitcoin keys as much as you want.) The private
    key is the actual keys to your Bitcoins. If your private key is stolen or lost,
    you’ve lost your coins forever.'
  prefs: []
  type: TYPE_NORMAL
- en: '![remember](images/remember.png) Cryptocurrency is unforgiving. Start off with
    small amounts of money when you’re learning how to use these systems.  ### Transferring
    your vanity address'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, you transfer your vanity address to a wallet. Transferring
    it will allow you to manage your address, and send and receive Bitcoins easily.
    Follow these steps to get started :'
  prefs: []
  type: TYPE_NORMAL
- en: '**Log into your Blockchain.info wallet (see “**[**Creating a second Bitcoin
    wallet**](#c03-sec-0004)**,” earlier in this chapter).**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 3-3](#c03-fig-0003) shows The settings page at blockchain.info.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Click Settings and then click Addresses.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Next to Imported Addresses, click Manage Addresses.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The screen shown in [Figure 3-1](#c03-fig-0001) appears.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Click Import Address, enter your private key, and click Import.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’ve now created an address that allows anyone to read your vanity address
    when you send or receive Bitcoins.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](images/9781119365594-fg0301.png)'
  prefs: []
  type: TYPE_IMG
- en: '[FIGURE 3-1:](#rc03-fig-0001) Managing your addresses.  ### Making an entry
    into the Bitcoin blockchain'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have two Bitcoin wallets, you can make an entry into the Bitcoin
    blockchain. You do that by sending Bitcoins between your two wallets. Here’s how
    (the specifics vary from one wallet to the next, but this is the general idea):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Log into the Bitcoin wallet that you added the initial funds to (see “**[**Creating
    your first Bitcoin wallet**](#c03-sec-0003)**,” earlier in this chapter).**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It prompts you to enter the recipient.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Navigate to the page where you can send money, and copy and paste your vanity
    address (see “[Generating a Bitcoin wallet vanity address](#c03-sec-0005)”) into
    the address field.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Enter a small amount of money that you would like to send, and then click
    Send.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations! You’ve just sent your first permanent message! You have forever
    engraved your message into the history of Bitcoin.
  prefs: []
  type: TYPE_NORMAL
- en: If you enjoyed learning how to do this and want to take your knowledge further,
    you can access a helpful online tutorial on sending Bitcoin messages at [`www.blockchainpie.com/blockchain-tutorial-bitcoin-message`](http://www.blockchainpie.com/blockchain-tutorial-bitcoin-message).
  prefs: []
  type: TYPE_NORMAL
- en: '![technicalstuff](images/technicalstuff.png) A Bitcoin transaction normally
    takes ten minutes to be confirmed, but could take several hours. The larger the
    value of the transaction, the longer you should wait. An unconfirmed transaction
    has not yet been included in the blockchain and is still reversible.  ### Reading
    a blockchain entry in Bitcoin'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding section, I show you how to create a small permanent message
    in Bitcoin. Data on the Bitcoin blockchain is not encrypted because the data needs
    to be confirmed by the nodes. This means it will be easy to find the message that
    you created in the last project.
  prefs: []
  type: TYPE_NORMAL
- en: '![tip](images/tip.png) If you’ve just made the transfer of Bitcoins between
    your two wallets, wait about 10 or 15 minutes before following these steps.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Go to the Blockchain.info website (**[`www.blockchain.info`](http://www.blockchain.info)**).**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Enter your vanity address in the Search box and press Enter.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The transaction page appears.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'That’s all it takes to find your transaction and read the massage that you
    built into the address.  ## Using Smart Contracts with Bitcoin'
  prefs: []
  type: TYPE_NORMAL
- en: A *smart contract* is autonomous software that can make financial decisions.
    The blockchain world is abuzz about smart contracts because they’re both amazing
    and terrifying in their implications for how the world economy operates.
  prefs: []
  type: TYPE_NORMAL
- en: In simple terms, a smart contract is a written contract that has been translated
    into code and build as complex if-then statements. The contract can self-verify
    that conditions have been met to execute the contract. It does this by pulling
    trusted data from outside sources. Smart contracts can also self-execute by releasing
    payment data or other types of data. They can be built around many different types
    of ideas and do not need to be financial in nature. Smart contracts can do all
    this while remaining tamper resistant from outside control.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain technology allowed smart contracts to come into existence because
    smart contracts offer the permanence and corrupt resistances that were once provided
    only by paper, ink, and a trusted authority to enforce it all. Smart contracts
    are a revolution in how we conduct business. They ensure that a contract will
    be executed as it was written. No outside enforcement is needed. The blockchain
    acts as the intermediary and enforcer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Smart contracts are a big deal because when machines start executing contracts,
    it becomes difficult or impossible to undo. It also brings up an important nature
    of these instruments that can’t be overlooked and my first law of smart contracts:
    *She who controls the data, controls the contract.* All smart contracts verify
    an external data feed to prove performance and release payment to the correct
    party.'
  prefs: []
  type: TYPE_NORMAL
- en: '![warning](images/warning.png) Although smart contracts are a revolutionary
    new technology, they can’t yet interpret the *intent* of the parties entering
    into the contract. Legal contracts in our society rely on people to interpret
    what the parties entering into the contract meant. Computers (at least so far)
    can only understand code, not the intent of the parties.'
  prefs: []
  type: TYPE_NORMAL
- en: '### Building your first smart bond'
  prefs: []
  type: TYPE_NORMAL
- en: A *smart bond* is a type of smart contract that can hold and release an object
    of value on its own, while also monitoring payments in various currencies using
    spot price data feeds. Many different types of smart contracts exist, and new
    ones are being invented every day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to build your first smart bond:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Go to the SmartContract website (**[`www.smartcontract.com`](http://www.smartcontract.com)**).**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Click Sign Up.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Sign Up page appears.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Enter an email address and password and click Create an Account.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SmartContract sends you an email with a confirmation link.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Click the link in the email sent to you by SmartContract to verify your account
    and log in.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Click Create Contract.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Click the Smart Bond tab (see** [**Figure 3-2**](#c03-fig-0002)**).**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Click the Create Contract button.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’re ready to build your first if-then statement.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Click the Smart Terms tab.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Smart contracts verify an outside data feed to prove the performance of your
    contract and trigger the release of payment. Here you choose the conditions that
    will trigger your smart contract.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Choose Performance Monitoring.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Performance monitoring will look to see if an action has been taken outside
    of the contract. In your case, this will be the movement of funds from one account
    to another.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**In the If Payment To field, enter one of your Bitcoin addresses (created
    earlier in this chapter).**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**In the Is field, enter a small dollar amount that you would like to transfer
    from one Bitcoin address to the other.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**In the By Expiration Date field, enter a date a few days from now.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This sets the time parameters that the contract will use to monitor outside
    sources.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Click the Description tab (see** [**Figure 3-3**](#c03-fig-0003)**).**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**In the Smart Contract Title field, enter a name for your contract.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**In the Brief Description field, enter — you guessed it! — a brief description
    of the contract.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The description should act as a brief summary of the agreement’s purpose. Here
    you can also attach a legal document or other data, such as a image.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Click the Attachments section.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![warning](images/warning.png) Smart contracts are new technology and can have
    hiccups. It is best to only attach things that are unimportant and that you’d
    be okay exposing publicly.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Click Attach Documents.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can attach an image or a PDF.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Click the Sign & Send tab.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**In the Address field, enter your email address to send yourself the contract.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Click the Finalize Contract button.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now your contract will be monitoring the Bitcoin blockchain to monitor whether
    you send funds to the Bitcoin wallet address that you listed earlier.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Return to your Bitcoin wallets and send funds between the two wallets.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure to use the address and a little more than the amount that you listed
    on the contract in Steps 10 and 11\. When the contract you created sees the record
    of the transaction of the Bitcoin blockchain, you’ll be notified by email.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![remember](images/remember.png) The Bitcoin network will take a cut of the
    transaction, so add a little more to it so that it will meet the terms of the
    contract. For example, if you set the contract to $5, send $5.15 just to be safe.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](images/9781119365594-fg0302.png)'
  prefs: []
  type: TYPE_IMG
- en: '[FIGURE 3-2:](#rc03-fig-0002) The Smart Bond tab.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/9781119365594-fg0303.png)'
  prefs: []
  type: TYPE_IMG
- en: '[FIGURE 3-3:](#rc03-fig-0003) The Description tab.  ### Checking the status
    of your contract'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check the status of your contract at any time by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Log into your SmartContract account at** [`www.smartcontract.com`](http://www.smartcontract.com)**.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Go to your Contract Dashboard.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After your transaction has been completed, the contract will show as complete.
    Your contract status is located below the Contract Dashboard.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![remember](images/remember.png) Give the Bitcoin network 10 to 15 minutes
    to process your transaction before checking the status of it.  ## Building a Private
    Blockchain with Docker and Ethereum'
  prefs: []
  type: TYPE_NORMAL
- en: 'Private blockchains hold the promises of both having the benefits of a private
    database and the security of blockchains. The idea is most appealing for two reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Private blockchains are great for developers because they allow them to test
    ideas without using cryptocurrency.** The developers’ ideas can remain a secret
    as well, because the data has not been published publicly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Large institutions can capitalize on the security and permanence of blockchain
    technology without their transactions being public the way they are in traditional
    blockchains.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![tip](images/tip.png) Most of this book assumes you’re just learning about
    blockchain for the first time and have little to no programing skills, but this
    section requires some knowledge of GitHub, Docker, and how to use your computer’s
    terminal. If you need a quick recap on coding before you dive in, I recommend
    *Coding For Dummies* by Nikhil Abraham (Wiley) for a great overview on coding
    for nontechnical people. If you don’t plan to ever be hands-on with blockchain
    technology, you might want to skip the rest of this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you dive into building your first blockchain. You build it
    in two steps. The first step is to prepare your computer to create your private
    blockchain. Don’t worry — it’s made easier with tools from Docker and work that
    has been done by talented developers on GitHub. The second step is building your
    blockchain inside your Docker terminal.
  prefs: []
  type: TYPE_NORMAL
- en: '### Preparing your computer'
  prefs: []
  type: TYPE_NORMAL
- en: You need to download some software on to your computer in order to try this
    blockchain project. Start by downloading the Docker Toolbox. Go to [`www.docker.com/toolbox`](http://www.docker.com/toolbox)
    to download the correct version for your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Next, download GitHub Desktop. Go to [`http://desktop.github.com`](http://desktop.github.com).
    After you’ve installed GitHub Desktop, create a GitHub account at [`www.github.com`](http://www.github.com)
    by clicking Sign Up and entering a username, email address, and password, and
    then clicking the Sign Up for GitHub button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you need to create a place to store your blockchain data. Create a folder
    on your computer’s desktop called `ethereum`. You’ll use this folder to hold your
    future repository and other files. Follow these steps to complete the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Open GitHub Desktop.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Sign into the GitHub Desktop application on your computer with your new GitHub
    account.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Return to your web browser and go to** [`www.github.com/Capgemini-AIE/ethereum-docker`](https://www.github.com/Capgemini-AIE/ethereum-docker)**.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You see the page shown in [Figure 3-4](#c03-fig-0004).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Click the Clone or Download button.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You’ll be given two choices: Open in Desktop or Download Zip (see [Figure 3-5](#c03-fig-0005)).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Select the Open in Desktop option.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The GitHub Desktop application will reopens.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**In the GitHub Desktop application, navigate to the project folder** `ethereum`
    **and click Clone.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](images/9781119365594-fg0304.png)'
  prefs: []
  type: TYPE_IMG
- en: '[FIGURE 3-4:](#rc03-fig-0004) Navigate to this page at GitHub.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/9781119365594-fg0305.png)'
  prefs: []
  type: TYPE_IMG
- en: '[FIGURE 3-5:](#rc03-fig-0005) Open in Desktop.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cloning from GitHub copies the information you need to build your new blockchain.
    Follow the steps in the next section to get started building your private blockchain.  ###
    Building your blockchain'
  prefs: []
  type: TYPE_NORMAL
- en: You’re going to use the free Docker Quick Start Terminal tool to build your
    blockchain. It gives you access to a virtual machine, cutting down the time required
    to set up and debug your system. Because of these features, it lets you create
    a stable environment for your blockchain, so you don’t have to worry about the
    settings on your machine, and you can get up and running faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Launch Docker on your computer using the Docker Quick Start Terminal.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![tip](images/tip.png) The Quick Start Terminal should be located with your
    applications or on your desktop.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Docker application launches a terminal you will use to build your blockchain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Change directories in the terminal to** `ethereum`**.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The files you create making the new blockchain will go into the desktop file
    you made in the preceding section. You need to give a command to the terminal
    in order to change directories. If you’re on a Mac or running Linux, enter the
    following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`cd ~ /Desktop/ethereum/ethereum-docker/`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you’re on a PC, enter the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`cd ~ \Desktop\ethereum\ethereum-docker\`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![tip](images/tip.png) If these commands don’t work for some reason, search
    the web for tutorials that explain how to change directories for your type of
    system.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now you can utilize the Ethereum–Docker files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Create one standalone Ethereum node by entering the following command into
    your terminal:** `docker-compose -f docker-compose-standalone.yml up -d`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This one line of code will have created the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: One Ethereum bootstrapped container
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One Ethereum container that connects to the bootstrapped container
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One Netstats container with a web UI to view activity in the cluster
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Take a look at your new blockchain by opening a web browser and going to**
    `http://$(docker-machine ip default):3000`**.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations! You’ve built your own private blockchain. If you’re so inclined,
    say a word of thanks to Graham Taylor and Andrew Dong, who put a lot of time into
    creating the Ethereum–Docker integration.
  prefs: []
  type: TYPE_NORMAL
