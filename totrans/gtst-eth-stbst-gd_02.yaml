- en: © The Author(s), under exclusive license to APress Media, LLC, part of Springer
    Nature 2022D. P. BauerGetting Started with Ethereum [https://doi.org/10.1007/978-1-4842-8045-4_2](https://doi.org/10.1007/978-1-4842-8045-4_2)
  prefs: []
  type: TYPE_NORMAL
- en: 2. Solidity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Davi Pedro Bauer^([1](#Aff2)  )(1)Campo Bom, Rio Grande do Sul, Brazil
  prefs: []
  type: TYPE_NORMAL
- en: Solidity is an object-oriented, high-level programming language that is used
    to construct smart contracts that automate blockchain transactions. The language
    was proposed in 2014 by Gavin Wood and developed by participants of the Ethereum
    project. Solidity was influenced by C++, Python, and JavaScript, so you will find
    similar language structures as in those languages. The language is primarily used
    to build smart contracts on the Ethereum blockchain, but it can also be used to
    create smart contracts on other blockchains.
  prefs: []
  type: TYPE_NORMAL
- en: Solidity, being a high-level language, eliminates the need to type code in ones
    and zeros. It makes it much easier for people to create programs in a form that
    they can comprehend, by combining letters and numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because Solidity is statically typed, each variable must be specified by the
    user. Data types enable the compiler to validate variable usage. Solidity data
    types are often divided into two categories: value types and reference types.'
  prefs: []
  type: TYPE_NORMAL
- en: The Ethereum ecosystem is distinctive in that it can be used by a wide range
    of cryptocurrencies and decentralized apps. On Ethereum, smart contracts enable
    the creation of solutions for all types of enterprises and organizations.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of this chapter, you will be able to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a basic Solidity project using the VS Code extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compile the contract
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy the contract to a local blockchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting Started with the Solidity Project on VS Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ethereum is the most often utilized platform for smart contracts. Ethereum is
    the first programmable blockchain in the world. It enables the creation of smart
    contracts to aid in the transfer of digital assets such as ether.
  prefs: []
  type: TYPE_NORMAL
- en: Solidity^([1](#Fn1)) is the language you will use to build contracts; it is
    Turing-complete, which means that it allows you to build complex contracts in
    a well-defined and coded manner.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a New Project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Select “View ➤ Command Palette” and then click “Blockchain: New Solidity Project”
    (Figure [2-1](#Fig1)). Finally, click “Create basic project” (Figure [2-2](#Fig2)).![](../images/521550_1_En_2_Chapter/521550_1_En_2_Fig1_HTML.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: A Solidity command palette window has 2 bars. The first bar has the text right
    angle bracket Blockchain colon New S and the cursor after S. The second bar reads
    Blockchain colon New Solidity Project. On the right corner of the bar, there is
    a settings icon.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2-1
  prefs: []
  type: TYPE_NORMAL
- en: New Solidity project
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/521550_1_En_2_Chapter/521550_1_En_2_Fig2_HTML.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A Solidity command palette window has 3 bars with text. The first one reads
    Select type of solidity project. The second one reads Create basic project, which
    is selected. The third one reads Create Project from Truffle box.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2-2
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic project
  prefs: []
  type: TYPE_NORMAL
- en: Select a folder where the project will be scaffolded and wait for the project
    to be created. Make sure the project structure was created, as shown in Figure
    [2-3](#Fig3).![](../images/521550_1_En_2_Chapter/521550_1_En_2_Fig3_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: A Solidity project creation palette has the menu icons on the left. On the main
    screen, there are sections under Get started, such as contracts, migrations, node
    underscore modules, test, and more. Helloblockchain dot Sol is selected under
    contracts.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2-3
  prefs: []
  type: TYPE_NORMAL
- en: Solidity project structure created
  prefs: []
  type: TYPE_NORMAL
- en: Compiling the Project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Right-click the HelloBlockchain.sol file, select “Build contracts,” and wait
    for contracts to be built.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to a Development Blockchain
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Right-click the HelloBlockchain.sol file, select “Deploy contracts,” and then
    select Development 127.0.0.1:8545\. Wait for the contracts to be deployed to the
    blockchain development network. That’s it!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned what Solidity is, and you created, compiled, and
    deployed your first smart contract.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will explore the ERC-20 token standard and learn how
    to create and deploy to development, test, and production environments.
  prefs: []
  type: TYPE_NORMAL
