- en: © The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2021Z.
    Zheng et al. (eds.)Blockchain Intelligence[https://doi.org/10.1007/978-981-16-0127-9_2](https://doi.org/10.1007/978-981-16-0127-9_2)
  prefs: []
  type: TYPE_NORMAL
- en: 2. On-chain and Off-chain Blockchain Data Collection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Peilin Zheng^([1](#Aff4) [ ](#ContactOfAuthor1)), Zibin Zheng^([2](#Aff5) [ ](#ContactOfAuthor2)),
    Jiajing Wu^([2](#Aff5), [3](#Aff6) [ ](#ContactOfAuthor3)) and Hong-Ning Dai^([4](#Aff7) [ ](#ContactOfAuthor4))(1)Sun
    Yat-sen University, Guangzhou, China(2)National Engineering Research Center of
    Digital Life, Sun Yat-sen University, Guangzhou, China(3)School of Data and Computer
    Science, Sun Yat-sen University, Guangzhou, China(4)Macau University of Science
    and Technology, Macau SAR, ChinaPeilin ZhengEmail: [zhengpl3@mail2.sysu.edu.cn](mailto:zhengpl3@mail2.sysu.edu.cn)Zibin Zheng (Corresponding
    author)Email: [zhzibin@mail.sysu.edu.cn](mailto:zhzibin@mail.sysu.edu.cn)Jiajing WuEmail:
    [wujiajing@mail.sysu.edu.cn](mailto:wujiajing@mail.sysu.edu.cn)Hong-Ning DaiEmail:
    [hndai@ieee.org](mailto:hndai@ieee.org)'
  prefs: []
  type: TYPE_NORMAL
- en: Abstract
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the introduction of blockchain intelligence in Chap. [1](506524_1_En_1_Chapter.xhtml),
    in this chapter, we present an overview of blockchain data collection. We first
    review the data growth brought about by the rapid development of blockchain in
    recent years, then analyze the data processing and exploration challenges caused
    by this phenomenon, and finally propose our solution XBlock-ETH, well-processed
    up-to-date on-chain datasets.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Academia and industry are paying close attention to the blockchain with huge
    value. In different blockchain systems, they made a lot of efforts on the unlicensed
    blockchain (or common blockchain) to solve the problems caused by the decentralized
    layout of the blockchain (or common blockchain) (Zheng et al. [2018b](#CR51)).
    The permissionless blockchain is a pioneering initiative on Bitcoin (Nakamoto
    [2008](#CR35)). Each peer owned by the blockchain system is equivalent to a ledger.
    Considering the characteristics of the ledger, it is often used as a riot public
    tally. Ethereum (Buterin [2013](#CR3)) is an innovation behind Bitcoin and is
    a permissionless blockchain system that can enable Turing-complete smart contracts.
    The unimaginable development of the blockchain has allowed the rapid growth of
    blockchain data. According to the Statista ([https://​www.​statista.​com/​](https://www.statista.com/))
    report, Bitcoin data easily reached 242 GB in the third quarter of 2019\. In this
    chapter, considering that Ethereum has Turing-complete smart contracts, we pay
    more attention to Ethereum. Similarly, more than 16,000,000 smart contracts have
    been deployed on Ethereum. The two token protocols pioneered by the Ethereum community
    facilitate the initial token issuance (so-called ICO) (Buterin and Fabian [2015](#CR4)),
    so there are more than 100,000 ERC20 tokens and 1600 ERC721 tokens that can be
    transferred on Ethereum.
  prefs: []
  type: TYPE_NORMAL
- en: 'The massive amount of blockchain data that allows researchers to discover the
    openness, decentralization and high temperature resistance of the blockchain system
    means huge business opportunities and research opportunities (Dai et al. [2019](#CR11)).
    It is difficult for researchers to break through privacy protection and ownership
    protection to obtain real business transaction data. In contrast, the data in
    the blockchain system is all stored on the chain and is completely public. Its
    decentralized nature also means that permissionless blockchains can easily access
    any data anywhere. In addition, the distributed consensus of the blockchain also
    ensures the fatigue resistance of the blockchain data. Blockchain transactions
    are very important, but the smart contracts and cryptocurrencies provided by Ethereum
    (or its alternatives) are also the main research directions. Big data analysis
    of relevant data is conducive to advances in transaction fraud detection, smart
    contract vulnerability detection, and smart contract software development. In
    the rapid development of the blockchain system, the challenge came quietly: **(1)
    Difficulties encountered in the data synchronization of the blockchain peer nodes.**
    The decentralization of the blockchain means that blockchain data requires a long
    period of node synchronization. In the node selection section of the blockchain
    white paper, it is emphasized that a full node completely synchronizes the entire
    Ethereum, which takes more than a week and more than 500 GB of storage space.
    The huge demand for storage space and network bandwidth hinders the analysis of
    blockchain data. **(2) Challenges in blockchain data extraction and processing.**
    The storage method of blockchain data also affects the effect of big data analysis.
    All data is encrypted or binary, which further hinders the advancement of related
    research. It is clear that traditional data analysis methods may not be suitable
    for this type of data, and new analysis methods for blockchains are still under
    study, so processing heterogeneous blockchain data is not easy. **(3) Lack of
    general data extraction tools for blockchain.** There are many related tools to
    extract blockchain data, but the huge amount of complete data means that these
    tools can only obtain part of the data to complete specific research tasks in
    related papers. **(4) Lack of basic data exploration of blockchain.**Existing
    research only focuses on specific data analysis of blockchain data, for example,
    transaction graphs (Chen et al. [2018a](#CR7)) and contract security (Luu et al.
    [2016](#CR28)). Basic data exploration, such as statistical analysis, text analysis,
    and data visualization, is currently the shortcoming of blockchain big data analysis.
    A blockchain data analysis framework proposed by us may solve these challenges,
    namely e underline X plore underline Block chain underline ETH (XBlock-ETH) to
    analyze Ethereum data. In particular, we extracted raw data containing 8,100,000
    blocks from Ethereum. The original data includes three types of Ethereum data:
    *blocks*, *traces*, and *receipts*. Since it is difficult to analyze the original
    Ethereum data, we divide the obtained Ethereum blockchain data into six data sets:
    *(1) Block and Transaction*, *(2) Internal Ether Transaction*, *(3) contract information*,
    *(4) contract call*, *(5) ERC20 token transaction*, *(6) ERC721 token transaction*.
    The new classification of Ethereum data we provide can help other researchers
    to better advance most research tasks from a general perspective. However, it
    is not easy to partition and process the original data, because it takes a lot
    of effort to extract metadata information from the original data and associate
    it with the six data sets. Then, we perform statistical analysis on six refined
    data sets. We will also discuss potential applications of XBlock-ETH, such as
    blockchain system analysis, smart contract analysis, and cryptocurrency analysis.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary, we highlight the major contributions of this chapter as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The data on the chain is more comprehensively included by XBlock-ETH (only part
    of Ethereum data is covered). It especially includes blockchain data, smart contract
    data, and encrypted currency data. Therefore, these carefully processed data sets
    allow processing personnel to easily conduct data exploration. Furthermore, XBlock-ETH
    data formally released online^([1](#Fn1)) has been periodically updated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The XBlock-ETH framework also offers basic statistics and exploration functions
    to analyze blockchain datasets. This chapter also outlines the research opportunities
    brought by XBlock-ETH. In particular, we discuss the applications of XBlock-ETH
    in aspects of blockchain system analysis, smart contract analysis, and cryptocurrency
    analysis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rest of this chapter is organized as follows. Sections [2.3](#Sec6) and
    [2.4](#Sec10) then present raw data acquisition from Ethereum and data exploration
    of six datasets. Section [2.5](#Sec17) discusses the applications of XBlock-ETH
    data. Finally, the chapter is concluded in Sect. [2.6](#Sec31).
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Ethereum and Smart Contracts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Figure [2.1](#Fig1) presents an overview of Ethereum blockchain, which consists
    of the following layers from bottom to top: peer, blockchain, smart contract,
    and token. We next review the basic concepts of each layer in Ethereum.![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig1_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig1_HTML.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.1
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Ethereum Blockchain
  prefs: []
  type: TYPE_NORMAL
- en: 2.2.1 Peer and Blockchain
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In short, a chain-like data structure composed of multiple special blocks is
    what we often call a blockchain. All peers in the P2P blockchain network maintain
    the chain together. In a set time, the consensus protocol can only confirm one
    block in the entire blockchain network. The miner plays an important role. It
    can generate the hash value of the block containing the confirmed transaction
    and the previous block, and the verification of the block will be done independently
    by other peers. Waiting for the verification and confirmation of most peers in
    the blockchain network, the transaction in this block will be regarded as emph
    completed. In this way, the concept of ledger is extended, that is, since all
    peers have verified the transaction, each peer can trust the entire blockchain.
    In other words, the trustworthiness of the transaction data of the distributed
    system of the blockchain needs to be maintained by replicating calculations and
    storage on each peer.
  prefs: []
  type: TYPE_NORMAL
- en: The blocks of permission-free blockchain peers must be intact, so the entire
    blockchain data can be obtained by researchers through blockchain peers that have
    been connected to the blockchain network. A large amount of business value is
    contained in the blockchain data composed of all operations completed by users
    and miners in the blockchain, considering that transaction records are essentially
    operations completed by different business parties. Various behaviors represented
    by blockchain data can be mapped to user behaviors in the real-world economic
    system (such as remittances). At the same time, with the surge of users and transactions
    in Bitcoin and Ethereum, the scale of blockchain data has grown rapidly. Analysis
    of blockchain data may also help predict economic trends.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2.2 Smart Contract
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The key to reshaping the modern industry may be smart contracts earlier than
    the blockchain (Szabo [1997](#CR38)). Smart contracts are actually some computer
    programs. They are based on the blockchain and store the execution state on top
    of the blockchain. Unlike Bitcoin, blockchain transactions represent the deployment
    or invocation of smart contracts. Therefore, the existence of the blockchain itself
    means the trustworthiness of smart contracts.
  prefs: []
  type: TYPE_NORMAL
- en: Smart contracts are already a common function of existing blockchain systems.
    For example, Bitcoin enables users to run simple scripts during transactions.
    Although this script is Turing incomplete, it can be regarded as the prototype
    of a blockchain-based smart contract, so it cannot enable complex logical expressions
    in the contract. And Ethereum’s support for Turing-complete smart contracts truly
    represents the value of the blockchain system. In Ethereum, smart contracts are
    executed in an environment called the Ethereum Virtual Machine (EVM). EVM read
    and write state (stored in key-value pairs) as operations defined in the smart
    contract. During the execution of the contract, miners use “*Gas*” as the unit
    to evaluate the consumption of a smart contract. During the execution of the contract,
    the contract user will be charged by “GasUsed” and“ GasPrice”. The more “GasPrice”
    users promise to pay for miners, the faster the contract will be executed. After
    completing the transaction (i.e., operation), the EVM will generate a hash value
    of the state and record it in the blockchain. Therefore, we can understand from
    Fig. [2.1](#Fig1) that the smart contracts on Ethereum are not directly stored
    on the blockchain. They are basically stored in a state operated by the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2.3 Tokens and Clients
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is worth mentioning that Ethereum has two standard token protocols (a.k.a.
    templates) of smart contracts. These token protocols define the standard variables,
    functions, and interfaces in the smart contract. With the protocols, users can
    issue tokens (or so-called cryptocurrencies) based on smart contracts on top of
    Ethereum. There are four typical tokens USDT,^([2](#Fn2)) Cryptokitties (Kharif
    [2017](#CR21)), Kyber (Luu [2017](#CR29)), and MarkerDAO^([3](#Fn3)) as shown
    in Fig. [2.1](#Fig1) (i.e., the top layer). For example, a user can publish an
    ERC20 contract on Ethereum issuing tokens to others. After that, any other users
    (even contracts) can receive or send the token without a centralized authority
    (e.g., stock exchange). The standard token protocols greatly enrich the ecosystem
    of Ethereum so as to make Ethereum become a flexible financial system. In Sects.
    [2.4.5](#Sec15) and [2.4.6](#Sec16), we will explore the data of tokens in Ethereum.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum allows that any computer programs can join into the network if they
    meet the requirement of the protocol just like P2P protocols (e.g., BitTorrent).
    As a result, there are a number of diverse Ethereum clients that can validate
    the blocks and transactions. Among most of Ethereum clients, Go-Ethereum (Geth)
    and Parity have been the most widely used according to the statistic from Ether
    nodes.^([4](#Fn4)) Both of them provide JSON-RPC interfaces for users to interact
    with Ethereum blockchain. Through the JSON-RPC interfaces, the user can obtain
    the blockchain data from Ethereum. Geth has been generally used in many previous
    studies, while the interfaces designed in Geth are not suitable for data acquisition.
    Even though many researchers attempted to modify source codes of Geth to obtain
    the detailed run-time data, the whole procedure of the code modification is time-consuming
    and complex. In addition, the obtained data is not absolutely accurate in some
    cases. Different from Geth, Parity better designs the interfaces so that it can
    obtain the index of each block corresponding to each piece of the data that we
    need. The details on data acquisition of blockchain data will be described in
    Sect. [2.3](#Sec6).
  prefs: []
  type: TYPE_NORMAL
- en: 2.3 Raw Data Extraction from Ethereum
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section describes the procedure of how the raw data was obtained from
    Ethereum blockchain. Figure [2.2](#Fig2) illustrates the typical Ethereum transaction
    execution flow from Block *N* to EVM through Blockchain peer. During this procedure,
    we collect the three types of blockchain raw data: Block, Receipt, and Trace.
    We next describe the details on the composition and acquisition of each kind of
    raw data.![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig2_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig2_HTML.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.2
  prefs: []
  type: TYPE_NORMAL
- en: Raw data collection during Ethereum transaction flow
  prefs: []
  type: TYPE_NORMAL
- en: 2.3.1 Block
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Block data is directly stored in the Ethereum blockchain. Each block consists
    of two components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Block Header:** Block header is the basic information of a block, including
    the miner’s address, timestamp, gas limit, etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Block Transactions:** Block transactions construct the body of the block.
    Each transaction consists of the fields: *From*, *To*, *Value*, *Input*, etc.
    If the transaction is used to deploy a contract, the *To* field is “null” in the
    block transaction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Almost all the Ethereum clients, including Geth and Parity, offer the interfaces
    to query the blocks. For example, “eth_getBlock” is available in both Geth and
    Parity with similar efficiency. However, the input of a block transaction only
    represents the operation of the EVM during the contract deployment phase, and
    the contract code will only be stored at the end of the transaction execution,
    and is different from the transaction input. This means that the analysis of block
    data can only allow us to obtain very little information about blockchain users.
    In large transactions, the exact contract code cannot be obtained by us. We cannot
    know whether the transaction is successfully executed, and what kind of errors
    will be thrown during the execution of the transaction. It is the contract that
    sends messages to other contracts or the cryptocurrency that causes problems.
  prefs: []
  type: TYPE_NORMAL
- en: 2.3.2 Trace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Trace data is essentially the detailed run-time data that was generated in
    EVM (e.g., internal contract calls, transferring money from the contract to a
    person). Trace data cannot be directly obtained or observed from the block data
    but can be recorded during the contract execution. In this chapter, trace data
    is referred to the data that cannot be obtained before or after the transaction
    execution, but only appears during the execution. Trace data includes the following
    types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create** is the trace, including the creator, code, and initial balance when
    a smart contract is deployed. The creator of a contract can be a person or another
    smart contract.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Call** occurs when money or messages are transferred through different Ethereum
    addresses. Contract call or Ether transferring is shown as a “Call” trace.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Suicide** is the trace that smart contract “suicide” deletes its code, and
    refunds the value to a specific account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reward** is the trace that miners get the Ether reward when they mine a block.
    The reward value varies depending on the contribution of the miners.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Geth, the interface of trace is “debug_traceTransaction”. However, this interface
    returns all the operations during the transaction, resulting in large resource
    consumption and low efficiency. Thus, many previous studies attempt to modify
    the source codes of Geth to obtain detailed run-time data, while this procedure
    is extremely time-consuming. In this chapter, we adopt “parity_trace” in Parity
    to obtain the trace data. This interface is provided and maintained by the official
    developers so that the correctness is guaranteed in contrast to Geth. Meanwhile,
    it also provides enough information that we need, such as the basic trace types
    and errors. Moreover, another advantage of Parity is the updating convenience
    as the data is indexed by blocks.
  prefs: []
  type: TYPE_NORMAL
- en: 2.3.3 Receipt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After the transaction is executed, some of the Ethereum states have been changed
    (e.g., the balance of the account in a token contract). Then the clients need
    to know what has been changed. To reduce the query overhead of clients, many contracts
    leave one kind of outputs called “Event” in the execution. For example, a standard
    token contract will output a “Transfer( from,to,value) ” event to let the clients
    know what happens during the execution. This kind of output is a one-way output,
    as it is just written in the receipt of the transaction, and can be read by external
    clients or persons but cannot be read by internal EVMs.
  prefs: []
  type: TYPE_NORMAL
- en: Section [2.4](#Sec10) will then give the statistics of Ethereum data. In particular,
    there are over 100,000 kinds of cryptocurrencies using smart contracts on Ethereum.
    As for these token contracts, the receipt data is an important source to learn
    about the holders, owners, and user behaviors. Thus, it is necessary to obtain
    receipt data. Both Geth and Parity provide the interfaces to get the transaction
    receipts. The main difference between Geth and Parity interfaces lies in the query
    index of the receipts. In particular, the receipt of the interface of Geth is
    “eth_getTransactionReceipt” that is indexed by the transaction hash, while the
    interface of Parity is “parity_getBlockReceipts” that is indexed by block number.
    In this way, Parity is much more efficient than Geth since it can return a batch
    of receipts in one query.
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary, there are three kinds of raw datasets that can be obtained in Ethereum:
    block, trace, and receipt. More specifically, it takes almost 2 weeks to synchronize
    the entire Ethereum blockchain and obtain the raw data, with the implement in
    Shell, NodeJS, and Python. After compression, the size of the data is about 313
    GBytes. Because of the massive volume and redundant information of the raw data,
    data procession is necessary to simplify data representation and fasten data analysis
    for further study.'
  prefs: []
  type: TYPE_NORMAL
- en: 2.4 Data Exploration of Ethereum
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we process the obtained raw data from Ethereum and divide
    it into six datasets: (1) Block and Transaction, (2) Internal Ether Transaction,
    (3) Contract Info, (4) Contract Call, (5) ERC20 Token Transaction, (6) ERC721
    Token Transaction. The relationship from the raw data to the processed datasets
    is shown in Fig. [2.3](#Fig3). The reason for dividing these six datasets is that
    we want to find the minimum necessary subset of data for the researchers in a
    specific research field. For example, if a researcher wants to study the Ether
    transferring network, he can only study the Dataset 2 (Internal Ether Transaction),
    rather than dealing with the raw data or other sub-datasets, saving his workload.![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig3_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig3_HTML.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.3
  prefs: []
  type: TYPE_NORMAL
- en: Mapping from raw data to datasets
  prefs: []
  type: TYPE_NORMAL
- en: This section will introduce how the datasets are generated, with statistics
    and observations.
  prefs: []
  type: TYPE_NORMAL
- en: '2.4.1 Dataset 1: Block and Transaction'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To investigate the basic statistics of Ethereum, we extract the information
    about the blocks and the transactions inside the blocks. In particular, there
    are 8,100,000 blocks and 491,562,222 transactions generated from the block data.
    For each block, we also obtain the statistic values of the “gasPrice”: minimum,
    average, and maximum. Meanwhile, corresponding to the hash of each transaction,
    the fields of “minerReward”, “gasUsed”, and “error” are extracted from the receipt
    and trace. Regarding the miners of the Ethereum blockchain, there are 5122 unique
    addresses of miners, as shown in Table [2.1](#Tab1). It implies that there are
    no more than 5122 peers that serve as miners since one peer may own more than
    one address. Meanwhile, each miner has the right to write extra texts in the block.
    So, we also use the word cloud to analyze the texts of miners. Figure [2.4](#Fig4)a
    shows the visualization of the texts of the word cloud. The results show that
    there are texts left by the mining pool, since most miners are in the mining pool,
    and they have left their names in the blocks to promote their mining capability.![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig4_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig4_HTML.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.4
  prefs: []
  type: TYPE_NORMAL
- en: Visualization of Dataset 1 (better viewed in color). (**a**) Word cloud of miners’
    text. (**b**) Transaction Count. (**c**) Macro view of GasPrice. (**d**) Micro
    view of GasPrice
  prefs: []
  type: TYPE_NORMAL
- en: Table 2.1
  prefs: []
  type: TYPE_NORMAL
- en: Statistics of Dataset 1
  prefs: []
  type: TYPE_NORMAL
- en: '| Statistics | Values |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| No. of blocks | 8,100,000 |'
  prefs: []
  type: TYPE_TB
- en: '| No. of transactions | 491,562,222 |'
  prefs: []
  type: TYPE_TB
- en: '| No. of miner addresses | 5122 |'
  prefs: []
  type: TYPE_TB
- en: '| Mean of transaction counts per block | 60.68 |'
  prefs: []
  type: TYPE_TB
- en: '| Mean of block time | 15.33 s |'
  prefs: []
  type: TYPE_TB
- en: '| Mean of block size | 11,457 bytes |'
  prefs: []
  type: TYPE_TB
- en: As shown in Table [2.1](#Tab1), the mean of transaction counts per block is
    60.68, and the block time is 15.33 s. In other words, the average throughput of
    Ethereum is about 4 transactions per second. Even when most of the network is
    active, as shown at 4,900,000 blocks in Fig. [2.4](#Fig4)b, the throughput is
    about 16.7 transactions per second. This result implies that Ethereum still has
    a long way to go to support real-time Internet applications. In Ethereum, a miner
    has a higher priority to package the transactions with higher “gasPrice” into
    the block. The visualization of “gasPrice” is shown in Fig. [2.4](#Fig4)c and
    d. In a macro view, the “gasPrice” is gradually decreasing with the development
    of the Ethereum community, except for several peaks caused by the extremely frequent
    transaction when the network is congested. In a micro view, we extract the time
    from 8,000,000 to 8,020,000 blocks and find that such fluctuations of “gasPrice”
    can be observed by the tidal law. This observation implies that the fluctuations
    of “gasPrice” can potentially be predicted.
  prefs: []
  type: TYPE_NORMAL
- en: '2.4.2 Dataset 2: Internal Ether Transaction'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ether is the native cryptocurrency of Ethereum. The transactions of Ether not
    only happen in the transactions recorded in the block but also occur during the
    smart contract execution. For example, if someone asks a smart contract to send
    10 Ethers to another one, the Ether transaction from the contract will not be
    observed in the block. In some blockchain explorers such as Etherscan,^([5](#Fn5))
    this kind of transactions is also called “*Internal Transaction*.” To investigate
    all the Ether transactions, we process the block and trace data to conduct the
    internal Ether transaction dataset. As shown in Table [2.2](#Tab2), 330,239,865
    Ether transactions which occur among 54,688,782 addresses are collected. The values
    of Ether have a large variance, as the maximum is 11,901,464.24 Ethers (about
    two billion dollars now), but the mean is only 22.26 Ethers. Figure [2.5](#Fig5)a
    presents statistics on the total transaction amount of every 10,000 blocks. It
    is shown that the most active time for Ether transaction is the time during 4,000,000
    to 4,300,000 blocks, matching with the most active time of Initial Coin Offering
    (ICO). Regarding the Ether distribution as shown in Fig. [2.5](#Fig5)b, we find
    that most of Ether transactions fall in the range from 0.1 Ether to 1 Ether, indicating
    that most of transactions only transfer small amounts of Ethers.![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig5_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig5_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.5
  prefs: []
  type: TYPE_NORMAL
- en: Visualization of Dataset 2\. (**a**) Ether transferred amount. (**b**) Ether
    transaction distribution
  prefs: []
  type: TYPE_NORMAL
- en: Table 2.2
  prefs: []
  type: TYPE_NORMAL
- en: Statistics of Dataset 2
  prefs: []
  type: TYPE_NORMAL
- en: '| Statistics | Values |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| No. of ether transactions | 330,239,865 |'
  prefs: []
  type: TYPE_TB
- en: '| No. of addresses | 54,688,782 |'
  prefs: []
  type: TYPE_TB
- en: '| Mean of amount of ether | 22.26 |'
  prefs: []
  type: TYPE_TB
- en: '| Maximum of amount of ether | 11,901,464.24 |'
  prefs: []
  type: TYPE_TB
- en: '2.4.3 Dataset 3: Contract Info'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The more important platform for smart contracts is Ethereum. Creator, creation
    time, initial value, contract code, creation code, these basic information of
    smart contracts after we process tracking data, we are step by step to achieve
    the purpose of investigating all smart contracts on Ethereum. The “SUICIDE” operation
    code can delete the smart contract with this operation code in the function and
    return it to others. To observe the behavior of contract deletion, according to
    the statistical information in the “Table of Data Set 3”, 16,557,477 smart contracts
    were created from 133,039 addresses. This means that there should be a large percentage
    of users who create multiple contracts. When the main anomaly can be found from
    Table [2.3](#Tab3), 5,704,054 contracts were deleted, and the ether balance was
    returned to 19,133,738 addresses. Generally, smart contracts will not refund Ether
    to multiple addresses during the deletion process. This comes from a denial of
    service (DoS) attack. Ethereum has suffered from this attack. The attacker used
    the vulnerability of the “SUICIDE” price to create an account in Ethereum. Before
    fixing the vulnerability, a large number of contracts were deleted to be directed
    to empty addresses, which resulted in the closure of many Ethereum peers, as shown
    in previous work (Chen et al. [2017](#CR6)).Table 2.3
  prefs: []
  type: TYPE_NORMAL
- en: Statistics of Dataset 3
  prefs: []
  type: TYPE_NORMAL
- en: '| Statistics | Values |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| No. of created contracts | 16,557,477 |'
  prefs: []
  type: TYPE_TB
- en: '| No. of creator addresses | 133,039 |'
  prefs: []
  type: TYPE_TB
- en: '| No. of deleted contracts | 5,704,054 |'
  prefs: []
  type: TYPE_TB
- en: '| No. of refunded addresses | 19,133,738 |'
  prefs: []
  type: TYPE_TB
- en: '| Mean of contract hex code size | 962.00 |'
  prefs: []
  type: TYPE_TB
- en: Regarding the contract code, we translate the bytecode into hexadecimal code.
    Figure [2.6](#Fig6)a gives the statistics of contract size. Particularly, the
    mean of contract size is 962.00, indicating that the smart contracts take up little
    space of storage. The contract size distribution also implies that the sizes of
    most contracts have focused on some clusters. This indicates that many smart contracts
    may look similar. This similarity will be further investigated in Dataset 4\.
    Figure [2.6](#Fig6)b presents the count of created contracts. It is shown in Fig.
    [2.6](#Fig6)b that the number of new smart contracts is increasing, especially
    at the time after the concept of “ICO” (Howell et al. [2018](#CR16)) comes out.![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig6_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig6_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.6
  prefs: []
  type: TYPE_NORMAL
- en: Visualization of Dataset 3\. (**a**) Contract size distribution. (**b**) Count
    of created contracts
  prefs: []
  type: TYPE_NORMAL
- en: '2.4.4 Dataset 4: Contract Call'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In EVM, a smart contract can call another one to invoke some codes or functions.
    To investigate the calls among the Ethereum contracts (which are represented as
    addresses), we extract Contract Calls in the execution from the trace dataset.
    The contract call dataset includes the caller, called address, calling function.
    As shown in Table [2.4](#Tab4), it consists of 1,148,572,009 Contract Calls, among
    which 639,336,722 contain input codes and 169,463,261 contain errors. Figure [2.7](#Fig7)
    gives the visualization of Contract Calls. In particular, Fig. [2.7](#Fig7)a and
    c show that, during the time from 2,300,000 to 2,460,000 blocks, contract calls
    and errors occur very frequently. This is caused by the DoS attacks mentioned
    in the above subsection, as the attackers invoked a large number of contracts
    in batches and some of them throw errors. Figure [2.7](#Fig7)b gives the distribution
    of call types. In particular, Fig. [2.7](#Fig7)b shows that most of developers
    prefer to use “call” and “delegatecall” rather than “staticcall” and “callcode”,
    since the logic of “call” and “delegatecall” is clearer and more practical than
    other two calls. Figure [2.7](#Fig7)d shows the error types during calling contract,
    indicating that most of errors are caused by “Out of gas”, which is mainly resulted
    from the wrong settings of message senders. The second most common error is “Reverted”,
    which is a manually thrown exception by the developers. Moreover, other errors
    such as “Bad instruction” and “Bad jump destination” are often caused by the contract
    codes themselves.![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig7_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig7_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.7
  prefs: []
  type: TYPE_NORMAL
- en: Visualization of Dataset 4\. (**a**) Count of contract call. (**b**) Call type
    distribution. (**c**) Count of contract error. (**d**) Error type distribution.
    (**e**) Calling count of top 10 contract function
  prefs: []
  type: TYPE_NORMAL
- en: Table 2.4
  prefs: []
  type: TYPE_NORMAL
- en: Statistics of Dataset 4
  prefs: []
  type: TYPE_NORMAL
- en: '| Statistics | Values |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| No. of contract calls | 1,148,572,009 |'
  prefs: []
  type: TYPE_TB
- en: '| No. of calls with inputs | 639,336,722 |'
  prefs: []
  type: TYPE_TB
- en: '| No. of calls with errors | 169,463,261 |'
  prefs: []
  type: TYPE_TB
- en: 'Generally, the compiler of smart contracts will use the hash value of function
    name and parameters as the entry of the function. In other words, in Ethereum
    smart contracts, the identical function in source code will have the identical
    entry in the complied contract code. We then count the calling contract functions
    to see what functions are the most common ones. The distribution of top-10 functions
    is shown in Fig. [2.7](#Fig7)e. The results show that most of the calling functions
    concentrated on some types of them. For example, top-10 functions have occupied
    46.32% of the contract calls. Moreover, after verifying the hash values of functions
    with the open-source contracts, we obtain the functions in source code. We then
    have the top-3 functions: “transfer( address,uint256) ”,“balanceOf( add-ress)
    ”, and “transferFrom( address, address, uint256) ”. This result implies that the
    most common contract calls are about tokens, and there might be a great similarity
    among the contracts due to the similar calls.'
  prefs: []
  type: TYPE_NORMAL
- en: '2.4.5 Dataset 5: ERC20 Token Transaction'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From the above analysis, we observe that the most active smart contracts on
    Ethereum now are the token contracts. We next further investigate the token contracts.
    In order to collect the information of tokens, we process the receipt dataset
    to extract the standard events, which are defined in the standard ERC20 protocol
    of the Ethereum community.^([6](#Fn6)) Additionally, each ERC20 token contains
    basic information like name, symbol, total supply, etc. We then send calls to
    the local Ethereum peers to collect such basic information of ERC20 tokens. As
    shown in Table [2.5](#Tab5), 106,683 smart contracts are considered as ERC20 contracts,
    since they output the events that are defined as the standard ERC20 token transactions.
    There are 227,698,645 ERC20 transactions among 42,146,575 holder addresses. Generally,
    the number of holder addresses could be much larger than that of exact human holders
    because a user may own several addresses. Meanwhile, some token issuers will send
    the tokens to other users without their permissions (also called *token air-drop*
    (van Valkenburgh [2017](#CR40))). Figure [2.8](#Fig8)a shows the transaction count
    distribution for each ERC20 token. We can easily observe the Matthew effect (Merton
    [1968](#CR34)) from Fig. [2.8](#Fig8)a as most of the token transactions happen
    in a few token contracts. Figure [2.8](#Fig8)b presents the word cloud of names
    of ERC20 tokens. It is shown in Fig. [2.8](#Fig8)b that the most common words
    are “Chain,” “Coin,” and “Share,” on which the most ERC20 tokens focus. In addition,
    another common word is “Test,” implying that many ERC20 contracts deployed on
    Ethereum are just for the testing purpose.![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig8_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig8_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.8
  prefs: []
  type: TYPE_NORMAL
- en: Visualization of Dataset 5 (better viewed in color). (**a**) ERC20 popularity
    distribution. (**b**) Word cloud of ERC20 tokens
  prefs: []
  type: TYPE_NORMAL
- en: Table 2.5
  prefs: []
  type: TYPE_NORMAL
- en: Statistics of Dataset 5
  prefs: []
  type: TYPE_NORMAL
- en: '| Statistics | Values |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| No. of ERC20 contracts | 106,683 |'
  prefs: []
  type: TYPE_TB
- en: '| No. of ERC20 transactions | 227,698,645 |'
  prefs: []
  type: TYPE_TB
- en: '| No. of holder addresses | 42,146,575 |'
  prefs: []
  type: TYPE_TB
- en: '2.4.6 Dataset 6: ERC721 Token Transaction'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ERC721 token is another contract protocol proposed by Ethereum community.^([7](#Fn7))
    Different from ERC20 token, ERC721 token is indivisible. In the contract function,
    the parameter is not the value of token but the token ID. For example, a virtual
    pet in smart contract could be a ERC721 token, which is not separable but can
    be transferred. Table [2.6](#Tab6) presents the statistics of ERC721 contracts.
    We find that 1954 ERC721 contracts contain 7,524,827 token transactions and 414,829
    holder addresses. It is worth mentioning that some of the collected contracts
    do not follow the standard ERC721 protocol exactly. These contracts are also included
    in the dataset since they output the token transferred events in the receipt.
    Figure [2.9](#Fig9)a shows the popularity distribution of ERC721 tokens. Compared
    with ERC20 tokens, the amount of ERC721 tokens is much lower. The major reason
    is that ERC721 applications require much more workloads on visualization at each
    token, consequently improving the development difficulty. We also investigate
    a popular ERC721 token contract called CryptoKitties. It is one of the most famous
    ERC721 token contracts, selling the virtual cats as tokens. Each cat is represented
    as a token in the ERC721 contract. We count the turnover times distributed by
    birth block of the cats, as shown in Fig. [2.9](#Fig9)b. Figure [2.9](#Fig9)b
    also shows that the cats that were born in 4,500,000 to 5,000,000 blocks have
    the higher turnover times than others. At that time, the type of CryptoKitties
    reaches the peak. The time to obtain the peak in Fig. [2.9](#Fig9)b is almost
    the same as that in Fig. [2.4](#Fig4)b and c, implying that the popularity of
    CryptoKitties leads to the congestion of Ethereum.![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig9_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig9_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.9
  prefs: []
  type: TYPE_NORMAL
- en: Visualization of Dataset 6\. (**a**) ERC721 popularity distribution. (**b**)
    CryptoKitties turnover times
  prefs: []
  type: TYPE_NORMAL
- en: Table 2.6
  prefs: []
  type: TYPE_NORMAL
- en: Statistics of Dataset 6
  prefs: []
  type: TYPE_NORMAL
- en: '| Statistics | Values |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| No. of ERC721 contracts | 1954 |'
  prefs: []
  type: TYPE_TB
- en: '| No. of ERC721 transactions | 7,524,827 |'
  prefs: []
  type: TYPE_TB
- en: '| No. of holder addresses | 414,829 |'
  prefs: []
  type: TYPE_TB
- en: 2.5 Applications of XBlock-ETH
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section presents applications of the XBlock-ETH framework. As shown in
    Fig. [2.1](#Fig1), the architecture of Ethereum consists of peers, blockchain,
    smart contracts, and tokens. Thus, we also categorize the applications according
    to the top three layers in this architecture. Meanwhile, we also discuss the research
    opportunities in each layer.
  prefs: []
  type: TYPE_NORMAL
- en: 2.5.1 Blockchain System Analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since XBlock-ETH processes data from realistic blockchain systems, it can be
    used to support the following applications.
  prefs: []
  type: TYPE_NORMAL
- en: 2.5.1.1 Decentralization Analysis
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Decentralization is one of the key features of blockchain systems. However,
    there are few studies on the decentralization evaluation of the blockchain systems.
    In particular, the work of Wang et al. ([2019](#CR43)) presents the measurement
    of the mining pool for Bitcoin. Although Gencer et al. ([2018](#CR14)) present
    a measurement study on the decentralization level of Bitcoin and Ethereum, their
    study only considers several metrics such as network bandwidth, mining power,
    and fairness. In contrast, our XBlock-ETH data offers a more comprehensive measurement
    of Ethereum. Moreover, our work can be used to analyze the decentralization of
    users, contract owners, and miners. In addition, our XBlock-ETH can also be used
    to make comparisons with other blockchain systems, such as Bitcoin, EOS, or other
    blockchain systems.
  prefs: []
  type: TYPE_NORMAL
- en: 2.5.1.2 Gasprice Prediction
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Since the transaction fees are equal to “gasPrice” times “gasUsed”, the users
    can control the “gasUsed” in a reasonably low range to minimize the transaction
    fees charged by miners. Meanwhile, we can learn from Sect. [2.4.1](#Sec11) that
    there is always a gap between the minimum “gasPrice” and the average “gasPrice”
    in a block, leading to the opportunity to save fees. Recent studies such as Other-tech
    (Jin [2018](#CR19)) and Majuri ([2018](#CR30)) analyze the “gasPrice” of Ethereum,
    while several Ethereum websites (e.g., Etherscan (see footnote 5), Etherchain^([8](#Fn8)))
    provide tools to predict the “gasPrice” in a short time. However, those tools
    are essentially *black boxes*, and the accuracy and correctness of them cannot
    be assured. In summary, the prediction of “gasPrice” has great economic value
    such that the user of Ethereum can save the money or shorten waiting time through
    the “gasPrice” prediction while it is worthwhile to conduct an in-depth study
    in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 2.5.1.3 Performance Benchmark
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Performance is crucial to blockchain systems. There are a number of studies
    on blockchain performance optimizations, such as Omniledger (Kokoris-Kogias et
    al. [2018](#CR22)), Algorand (Gilad et al. [2017](#CR15)), and RapidChain (Zamani
    et al. [2018](#CR49)). Meanwhile, some optimized blockchain systems (e.g., Monoxide
    (Wang and Wang [2019](#CR44))) adopt the realistic blockchain transaction data
    to conduct the performance evaluation for blockchain systems. To compare the performance
    of different optimization methods, a common benchmark of real-world use cases
    for blockchain systems is needed. Zheng et al. ([2018a](#CR50)) and BlockBench
    (Dinh et al. [2017](#CR12)) propose performance evaluation tools for blockchain
    systems. The performance benchmark requires simulating the user behaviors and
    obtaining data similar to real-world blockchain systems. In this context, the
    XBlock-ETH framework can be regarded as a benchmark since the source data is generated
    exactly by real-world users.
  prefs: []
  type: TYPE_NORMAL
- en: 2.5.2 Smart Contract Analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As one of the most popular smart contract platforms, Ethereum has attracted
    a large number of software developers as well as a huge number of smart contracts.
    Therefore, Ethereum has a more active developer community compared with other
    smart contract platforms such as EOS and Tron, which claim to have higher throughput
    and lower latency than Ethereum. Consequently, our XBlock-ETH framework (on top
    of Ethereum) can be used in the studies of smart contracts. We summarize the potential
    applications of XBlock-ETH as follows.
  prefs: []
  type: TYPE_NORMAL
- en: 2.5.2.1 Contract Similarity and Recommendation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As indicated in Sect. [2.4](#Sec10), there is a great similarity between the
    smart contract codes and the call of smart contracts. Code similarity evaluation
    is a traditional research topic in software engineering as a number of studies
    concentrate on code similarity detection (Chilowicz et al. [2009](#CR10); Luo
    et al. [2014](#CR27)). Several recent studies focus on the similarity analysis
    of smart contracts. In particular, Etherscan (see footnote 5) provides the query
    system based on similar contracts. Finding similar contracts is beneficial to
    developers while developing new contracts. For example, developers can estimate
    user behaviors before publishing the contract. Meanwhile, Huang et al. ([2019](#CR17))
    propose the method to recommend differentiated codes to update smart contracts
    based on the existing codes of smart contracts. In addition, in the aspect of
    users, recommending similar smart contracts will help users to find the contracts
    suitable for themselves. The details of contract similarity and recommendation
    would be discussed in Chap. [4](506524_1_En_4_Chapter.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: 2.5.2.2 Contract Developer Analysis
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Developer analysis which is another traditional research topic in software engineering
    includes developer network analysis (Meneely et al. [2008](#CR32)), behavior analysis
    (Layman et al. [2007](#CR25)), fault prediction (Weyuker et al. [2007](#CR45)),
    and so on. With respect to developer analysis, XBlock-ETH also includes a large
    network of smart contract developers. For example, there some on-chain libraries
    deployed and provided by different developers; these libraries can be invoked
    by others. Each developer can be identified by his/her own Ethereum address. Thus,
    the contract calling network can also be regarded as the collaboration network
    of contract developers. The network and structure of developer collaboration may
    inform us about the reliability of the contract codes. For example, the developer
    who develops a smart contract with vulnerabilities will have a higher risk of
    developing new contracts with vulnerabilities than others. In this sense, our
    XBlock-ETH can be beneficial to the developer analysis after analyzing the smart
    contracts of developers.
  prefs: []
  type: TYPE_NORMAL
- en: 2.5.2.3 Contract Vulnerability Detection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Blockchain security and privacy have drawn extensive attention recently (Su
    et al. [2020](#CR37); Xu et al. [2019](#CR46), [2020a](#CR47),[b](#CR48)). The
    security of smart contracts has been a hot research topic in the blockchain research
    community. In particular, the vulnerability of smart contracts has attracted extra
    attention. A number of malicious attacks on Ethereum (e.g., TheDAO attack) have
    already resulted in a huge loss (in terms of millions of dollars) (Mehar et al.
    [2019](#CR31)). To prevent smart contracts from malicious attacks, the vulnerability
    detection on contracts is a critical step. There are some recent attempts in vulnerability
    detection. For example, Oyente (Luu et al. [2016](#CR28)), Zeus (Kalra et al.
    [2018](#CR20)), teEther (Krupp and Rossow [2018](#CR23)), S-gram (Liu et al. [2018](#CR26)),
    and ContractFuzzer (Jiang et al. [2018](#CR18)) propose the tools of vulnerability
    detection on smart contracts. In some cases, the vulnerability detection methods
    of smart contracts can be inspired and motivated by traditional software vulnerability
    detection methods as they are essentially equivalent to the verification of the
    codes. In this aspect, several studies focus on verifying contract codes on blockchains;
    these contract codes are also called “bytecode” or “opcode”. Our XBlock-ETH that
    essentially includes the data of contract codes can be applied to contract vulnerability
    detection.
  prefs: []
  type: TYPE_NORMAL
- en: 2.5.2.4 Fraud Detection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Due to the huge economic value and the popularity of smart contracts, smart
    contracts can be exploited by malicious users as scams. For example, crowd-funding
    contracts with a promised huge return to attract victims for investment. It is
    reported in Chen et al. ([2018b](#CR8)) that Ponzi scam contracts can defraud
    others’ cryptocurrencies. Several approaches (Bartoletti et al. [2020](#CR2);
    Chen et al. [2018b](#CR8), [2019](#CR9); Torres et al. [2019](#CR39)) have been
    proposed to detect the fraud contracts on Ethereum. Most of the methods are mainly
    based on the codes and transaction records of smart contracts while they are included
    in XBlock-ETH data. Thus, XBlock-ETH data can be further leveraged in fraud detection.
  prefs: []
  type: TYPE_NORMAL
- en: 2.5.3 Cryptocurrency Analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Blockchain-based cryptocurrency has become a hot topic in recent years due to
    decentralization and the reduced cost. There are a large number of cryptocurrencies
    in Ethereum, including the Ether, ERC20 tokens, and ERC721 tokens. It is shown
    in the CoinMarketCap^([9](#Fn9)) that more than 2000 kinds of tokens can be used
    in third-party exchange. Therefore, cryptocurrency analysis based on blockchain
    data can bring huge financial values. We roughly categorize the cryptocurrency
    analysis into cryptocurrency transferring analysis, cryptocurrency price analysis,
    and fake user detection, which are explained as follows.
  prefs: []
  type: TYPE_NORMAL
- en: 2.5.3.1 Cryptocurrency Transferring Analysis
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Analysis of cryptocurrency transactions is a preliminary step to conduct cryptocurrency
    transferring analysis. Regarding Ether transferring, Chen et al. ([2018a](#CR7))
    propose the graph analysis on Ether transactions and derive some insights from
    graph analysis. With regard to ERC20/ERC721 tokens, Victor and Lüders ([2019](#CR42))
    and Somin et al. ([2018](#CR36)) propose the analysis of the token trading network.
    After the analysis of cryptocurrency transactions, further analysis of user behaviors
    can be done. For example, the users of tokens may form different communities.
    The community discovery can be conducted through analyzing cryptocurrency transactions.
    Moreover, the anonymity of blockchain-based cryptocurrency can result in money-laundering
    behaviors, which can be essentially identified and detected via cryptocurrency
    transaction analysis. Our XBlock-ETH data offers potential solutions to these
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: 2.5.3.2 Cryptocurrency Price Analysis
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The price of blockchain-based cryptocurrencies has been affected by multiple
    different factors, such as government policies, technology innovations, social
    sentiment, and business activities. Several recent studies focus on the price
    analysis and prediction of cryptocurrencies (Abraham et al. [2018](#CR1); Lamon
    et al. [2017](#CR24); Mensi et al. [2019](#CR33)). The typical cryptocurrency
    price analysis consists of three steps: (1) collect price data from the cryptocurrency
    exchanges, (2) identify the relevance between cryptocurrency prices and other
    factors, (3) forecast the future prices and predict the potential profits. However,
    the price of cryptocurrencies can sometimes be maliciously controlled by some
    parties. Thus, the data cleaning process is necessary to obtain accurate and normal
    cryptocurrency price data. Some of the cryptocurrency price data is stored in
    the decentralized exchange contracts, which can be used for cryptocurrency price
    analysis, while the raw data may require further preprocess to benefit future
    analysis.'
  prefs: []
  type: TYPE_NORMAL
- en: 2.5.3.3 Fake User Detection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Fake user detection (Cao et al. [2012](#CR5); Ferrara et al. [2016](#CR13);
    Varol et al. [2017](#CR41)) is a traditional research topic in social networks.
    The cryptocurrency users in blockchain systems also form social-network-like communities,
    in which there are also some fake users controlled by the developers to improve
    the DApps activity rankings. Because the DApp (or cryptocurrency) ranking is based
    on some metrics related to the user activities, such as Daily Active Users (DAU).
    Therefore, many developers exploit the loophole to fabricate some fake users to
    improve activities so as to gain higher rankings. Although some DApp websites,
    such as DAppReview^([10](#Fn10)) mark the cryptocurrencies with fake users, this
    kind of fake user detection is almost done in a black box or manually. In addition,
    there are few studies on fake user detection on cryptocurrency. The permission-less
    blockchain systems which are often free of charge may advocate more frequent fake
    user activities than permissioned blockchain systems. Our XBlock-ETH will be further
    improved to support fake user detection in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 2.6 Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This chapter introduces a well-processed up-to-date on-chain dataset of Ethereum,
    namely XBlock-ETH, which includes the data of the Ethereum blockchain, smart contracts,
    and cryptocurrencies. Moreover, comprehensive statistics and exploration of the
    datasets are presented. The XBlock-ETH datasets have been released on the XBlock.pro
    website. Furthermore, the research opportunities of the XBlock-ETH datasets are
    also outlined. Our XBlock-ETH is promising to promote the studies on Ethereum.
    The future improvements are listed as following: **(1) More features:** The exploration
    of the basic features of the datasets is given in this chapter. Ethereum is a
    complex ecosystem that includes decentralized finance, stable coin, and so on.
    More features of the Ethereum data will be explored in the future. **(2) Extra
    off-chain data from Ethereum:** The off-chain data is also important since it
    provides information about the off-chain behaviors of both developers and users.
    In the future, the off-chain data will be collected. **(3) Joint data analysis
    with other blockchain systems:** There are some other blockchain systems that
    have also attracted a large number of users and developers. The joint data analysis
    of Ethereum and other permissionless blockchains will be conducted in the future.'
  prefs: []
  type: TYPE_NORMAL
