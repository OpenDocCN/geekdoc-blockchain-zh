- en: © The Editor(s) (if applicable) and The Author(s), under exclusive license to
    Springer Nature Switzerland AG 2020K. S. MohamedNew Frontiers in Cryptography[https://doi.org/10.1007/978-3-030-58996-7_1](https://doi.org/10.1007/978-3-030-58996-7_1)
  prefs: []
  type: TYPE_NORMAL
- en: 1. Introduction to Cyber Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Khaled Salah Mohamed^([1](#Aff2) )(1)A Siemens Business, Fremont, CA, USAKeywordsConfidentialityIntegrityAvailabilityVulnerabilityThreatCybersecurityAttacksCryptographicSSLIPSecToday,
    cryptography plays a vital role in every electronic and communication system.
    Everyday many users generate and interchange large amount of information in various
    fields through the Internet, telephone conversations, and e-commerce transactions.
    In modern system-on-chips (SoCs), cybersecurity plays an integral role in protecting
    the confidentiality and integrity of information. *Cybersecurity* is protecting
    computers, servers, mobiles, networks, electronic devices, and data from malicious
    attacks [[1](#CR1)]. Recent years have seen an unfortunate and disruptive growth
    in the number of cyber-attacks. There are mainly three threats to data security
    [[2](#CR2), [3](#CR3)]:'
  prefs: []
  type: TYPE_NORMAL
- en: Theft them (confidentiality/privacy).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify them (Integrity).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You are prevented to get them (access/availability).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The aim of any secure system is to ban these threats. There are many techniques
    for achieving this such as encryption and data hiding. We will cover them in this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 Security Terms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Confidentiality* refers to the protection of information, such as computer
    files or database elements, so that only authorized persons may access it in a
    controlled way [[4](#CR4)].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Integrity* refers to not being able to modify information unless proper authorization
    is used. *Availability* refers to the presence of information when it is needed
    by authorized personnel and accessed using proper security measures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Vulnerability* means weakness in the secure system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Threat* is set of circumstances that have the potential to cause loss or harm.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Attack* is the act of a human exploiting the vulnerability in the system [[5](#CR5)].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Trojan horse* is software that appears to perform legitimately but has malicious
    side effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Virus* is a self-propagating Trojan horse; infects other software.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Worm* is a Virus which propagates over network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1.2 Security Threats/Attacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Security means freedom from risk or danger. Generally, nothing is ever 100%
    secured. Given enough time, resources, and motivation, an attacker can break any
    system. There are many threats to data security (Fig. [1.1](#Fig1)):'
  prefs: []
  type: TYPE_NORMAL
- en: '*Interception*: Theft them (confidentiality/*privacy attack* ), i.e., *eavesdrop
    (nondestructive).*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Modification*: Modify them (Integrity attack), i.e., *insert* messages into
    connection (destructive). *Hijacking by* taking over ongoing connection by removing
    sender or receiver, inserting himself as an attacker in place. It is also called
    fabrication of data or counterfeit data [[6](#CR6), [7](#CR7)].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Interruption*: You are prevented to get them (access/*availability attack*
    ), i.e., *denial of service (DoS)* as attacker can prevent service from being
    used by others (e.g., by overloading resources).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![../images/501530_1_En_1_Chapter/501530_1_En_1_Fig1_HTML.png](../images/501530_1_En_1_Chapter/501530_1_En_1_Fig1_HTML.png)'
  prefs: []
  type: TYPE_IMG
- en: Fig. 1.1
  prefs: []
  type: TYPE_NORMAL
- en: Security attacks and threats
  prefs: []
  type: TYPE_NORMAL
- en: Cybercrimes are criminal offenses committed via the Internet or otherwise aided
    by various forms of computer technology. There are many privacy concerns surrounding
    cybercrime when confidential information is intercepted or disclosed, lawfully
    or otherwise [[8](#CR8)].
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 Security Requirements/Services/Objectives/Goals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below we describe the main security requirements to overcome the security threats
    (Fig. [1.2](#Fig2)):![../images/501530_1_En_1_Chapter/501530_1_En_1_Fig2_HTML.png](../images/501530_1_En_1_Chapter/501530_1_En_1_Fig2_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 1.2
  prefs: []
  type: TYPE_NORMAL
- en: Security goals intersections
  prefs: []
  type: TYPE_NORMAL
- en: 1.3.1 Confidentiality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refers to the protection of information, such as computer files or database
    elements, so that only authorized persons may access it in a controlled way. Confidentiality
    ensures that the message is encoded in order to conceal it, so the sender encrypts
    the message (plaintext) to create a ciphertext that is transmitted. The receiver,
    who possesses the cryptographic key, decrypts the ciphertext into the original
    plaintext.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3.2 Authentication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Authentication answers the following question “how does a receiver know that
    remote communicating entity is who it is claimed to be?”. It is also called *identification*.
    Nowadays, most cryptographic algorithms support authenticated encryption (AE)
    or authenticated encryption with associated data (AEAD). This basically means
    that both confidentiality and authenticity of the data is achieved. When referring
    to the AEAD scheme, it is assumed that the recipient is able to verify the integrity
    of both the encrypted and the decrypted message. To clarify this even more, the
    associated data (AD) are used to bind a ciphertext to the context that it is supposed
    to be. So, any attempt to place a valid ciphertext along with a different context
    is detectable and can be rejected.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3.3 Integrity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refers to not being able to modify information unless proper authorization is
    used. The information and data sent can’t be modified in storage or during the
    transmission between the source and destination in a way that the alteration is
    not detectable. Data integrity assures that the message received is exactly the
    same as the one sent by the sender. This may be accomplished, e.g., with the use
    of hash functions like SHA256 that create a unique digest from the original message,
    which is sent along with the message.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3.4 Access Control/Authorization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Who is allowed to do what. Access control is the process of controlling who
    does what and ranges from managing physical access to equipment to dictating who
    has access to a resource, such as a file, and what they can do with it, such as
    read or change the file. Many security vulnerabilities are created by the improper
    use of access controls.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3.5 Availability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refers to the presence of information when it is needed by authorized personnel
    and accessed using proper security measures.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3.6 Non-repudiation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ability to ensure that a party to a contract or a communication cannot deny
    the authenticity of their signature on a document or the sending of a message
    that they originated. You can’t deny doing something you did. Generally, it is
    the assurance that the sender can’t repudiate the validity of the message transmitted.
    This is accomplished with the use of digital signatures (especially used in online
    transactions) and message authentication codes, which are basically hash functions
    containing a key. It should be noted that such cryptographic primitives also ensure
    the integrity of the information, in a more robust manner than a simple hash function.
  prefs: []
  type: TYPE_NORMAL
- en: System is secured when all these goals are achieved (Fig. [1.2](#Fig2)).
  prefs: []
  type: TYPE_NORMAL
- en: 1.4 Security Mechanisms/Tools/Defenses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Security tools are summarized as below (Fig. [1.3](#Fig3)):'
  prefs: []
  type: TYPE_NORMAL
- en: '*Cryptographic algorithms* (Table [1.1](#Tab1)): can be symmetric (one shared
    key) or asymmetric algorithms (we have two keys: one is secret, other is public)
    [[9](#CR9), [10](#CR10)].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Authentication* *:* who the user actually is. It is achieved by digital signature.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Public/private keys:* give out public key. Encrypt with this. Decrypt with
    private key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hashes* *:* create a unique, fixed length signature (hash) of a data set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Digital signatures* *:* encrypt hash with private key. Decrypt with public
    key. Encryption does *not* ensure integrity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Passwords* *:* something you know. It should be hard enough.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Firewalls* *:* a firewall is like a castle with a drawbridge. Only one point
    of access into the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Trusted third party* *:* a trusted third party can issue declarations such
    as “the holder of this key is a person who is legally known.”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![../images/501530_1_En_1_Chapter/501530_1_En_1_Fig3_HTML.png](../images/501530_1_En_1_Chapter/501530_1_En_1_Fig3_HTML.png)'
  prefs: []
  type: TYPE_IMG
- en: Fig. 1.3
  prefs: []
  type: TYPE_NORMAL
- en: Security services and tools
  prefs: []
  type: TYPE_NORMAL
- en: Table 1.1
  prefs: []
  type: TYPE_NORMAL
- en: Classifications of cryptographic algorithms
  prefs: []
  type: TYPE_NORMAL
- en: '|   | Symmetric algorithms | Asymmetric algorithms(Public/private keys) | Hash
    algorithms |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Examples | DES, AES, 3DES, RC5 | RSA, ECC, DH, ECDH | MD4, HMAC, SHA-1 |'
  prefs: []
  type: TYPE_TB
- en: '| Math | Table lookupPermutationsMultiplicationModular additionModular multiplicationFixed
    shift/rotateVariable shift/rotate | Modular exponentiationPoint multiplication
    on elliptic curves | MultiplicationAdditionLogical operationsFixed shift/rotate
    |'
  prefs: []
  type: TYPE_TB
- en: 1.5 Security Hierarchy/Levels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A computing system is a collection of hardware (HW), software (SW), storage
    media, data, networks, and human interacting with them. We need to secure SW,
    data, and communication, and HW (Fig. [1.4](#Fig4)).![../images/501530_1_En_1_Chapter/501530_1_En_1_Fig4_HTML.png](../images/501530_1_En_1_Chapter/501530_1_En_1_Fig4_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 1.4
  prefs: []
  type: TYPE_NORMAL
- en: An example for security hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: Another prospective for the security hierarchy is shown in Fig. [1.5](#Fig5).
    Vulnerabilities can happen on the level of hardware, software, and data [[11](#CR11),
    [12](#CR12)].![../images/501530_1_En_1_Chapter/501530_1_En_1_Fig5_HTML.png](../images/501530_1_En_1_Chapter/501530_1_En_1_Fig5_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 1.5
  prefs: []
  type: TYPE_NORMAL
- en: Security hierarchy. Another prospective
  prefs: []
  type: TYPE_NORMAL
- en: '*Hardware Vulnerabilities:* Adding devices, changing them, removing them, intercepting
    the traffic to them, or flooding them with traffic until they can no longer function.
    Hardware vulnerabilities are often introduced by hardware design flaws. RAM memory,
    for example, is essentially capacitors installed very close to one another. It
    was discovered that, due to proximity, constant changes applied to one of these
    capacitors could influence neighbor capacitors. Based on that design flaw, an
    exploit called Rowhammer was created. By repeatedly rewriting memory in the same
    addresses, the Rowhammer exploit allows data to be retrieved from nearby address
    memory cells, even if the cells are protected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Software Vulnerabilities:* Software can be replaced, changed, or destroyed
    maliciously, or it can be modified, deleted, or misplaced accidentally. Whether
    intentional or not, these attacks exploit the software’s vulnerabilities. *Malware*
    is any code that can be used to steal data, bypass access controls, or cause harm
    to, or compromise a system such as spyware and Ransomware*.* Software vulnerabilities
    are usually introduced by errors in the operating system or application code;
    despite all the effort companies put into finding and patching software vulnerabilities,
    it is common for new vulnerabilities to surface. Microsoft, Apple, and other operating
    system producers release patches and updates almost every day. Application updates
    are also common. Applications such as web browsers, mobile apps, and web servers
    are often updated by the companies or organizations responsible for them. *Phishing*
    is when a malicious party sends a fraudulent email disguised as being from a legitimate,
    trusted source. The message intent is to trick the recipient into installing malware
    on their device or into sharing personal or financial information. An example
    of phishing is an email forged to look like it was sent by a retail store asking
    the user to click a link to claim a prize. The link may go to a fake site asking
    for personal information, or it may install a virus.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Data Vulnerabilities:* Confidential data leaked to a competitor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example for different types of embedded system attacks are shown in Fig. [1.6](#Fig6).
    IP protection is also an important topic. Without IP protection, companies can
    lose revenue and market share.![../images/501530_1_En_1_Chapter/501530_1_En_1_Fig6_HTML.png](../images/501530_1_En_1_Chapter/501530_1_En_1_Fig6_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 1.6
  prefs: []
  type: TYPE_NORMAL
- en: Embedded system attacks [[13](#CR13)]
  prefs: []
  type: TYPE_NORMAL
- en: 'IP vendors are facing major challenges to protect hardware IPs from IP piracy
    as, unfortunately, recent trends in IP piracy and reverse engineering efforts
    to produce counterfeit ICs have raised serious concerns in the IC design community.
    IP piracy can take several forms, as illustrated by the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A chip design house buys an IP core from an IP vendor and makes an illegal copy
    or “clone” of the IP. The IC design house then sells it to another chip design
    house (after minor modifications) claiming the IP to be its own.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An untrusted fabrication house makes an illegal copy of the GDS-II database
    supplied by a chip design house and then illegally sells them as hard IP.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An untrusted foundry manufactures and sells counterfeit copies of the IC under
    a different brand name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An adversary performs post silicon reverse engineering on an IC to manufacture
    its illegal clone.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: These scenarios demonstrate that all parties involved in the IC design flow
    are vulnerable to different forms of IP infringement which can result in loss
    of revenue and market share. Hence, there is a critical need of a piracy proof
    design flow that equally benefits the IP vendor, the chip designer, as well as
    the system designer. A desirable characteristic of such a secure design flow is
    that it should be transparent to the end user, i.e., it should not impose any
    constraint on the end user with regard to its usage, cost, or performance.
  prefs: []
  type: TYPE_NORMAL
- en: To secure an IP, we need to obfuscate it then encrypt the contents before sending
    it to the customer. *Obfuscation* is a technique that transforms an application
    or a design into one that is functionally equivalent to the original but is significantly
    more difficult to reverse engineer. So, obfuscation changes the name of all signals
    to numbers and characters combination. The second level is to encrypt the whole
    files. Although encryption is effective, code obfuscation is an effective enhancement
    that further deters code understanding for attackers. Moreover, *watermarking*
    can be used to protect soft-IPs. It includes modules duplication or module splitting.
    For ASIC, circuit camouflage is used. *Circuit camouflage* lets individual logic
    cells appear identical at each mask layer, when in fact subtle changes are present
    to differentiate logic functions. Changes are designed so that the reverse engineer
    is unable to automate cell recognition. To protect PCB, we encapsulate the PCB
    into epoxy (black blobs) and add a few fake layers for complexity.
  prefs: []
  type: TYPE_NORMAL
- en: 1.6 Mathematical Background
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1.6.1 Modular Arithmetic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In modular arithmetic, we map the product of any computation (addition, multiplication)
    to a bounded set of integers. The bound is defined by the *modulus* (or base).
    Let *a, r, m* integers and *m > 0*, then
  prefs: []
  type: TYPE_NORMAL
- en: '*a* ≡ *r* mod *m*, if *m* divides *a − r.* An example is 43 ≡ 1 mod 7.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1.6.2 Greatest Common Divisor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Assume we need to find gcd (*r*[0], *r*[1]). A solution is to factor *r*[0],
    *r*[1.] Then, the gcd should be the highest common factor. Factoring is complicated
    and hard for large numbers. An example is shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '*r*[0] = 72 = 2 × 2 × 3 × 7 and *r*[1] = 24 = 2 × 3 × 4 then gcd (*r*[0], *r*[1]) = 6.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1.7 Security Protocols
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A protocol is a series of steps carried out by two or more entities. A security
    protocol is a protocol that runs in an untrusted environment and tries to achieve
    a security goal. Examples for security protocol are *IPSec* and *SSL*. Nowadays,
    for data encryption through the Internet, the HTTPS (Hypertext Transfer Protocol
    Secure) protocol uses SSL/TLS-based encryption to create a secure channel to shared
    data. The cryptographic protocols TLS (Transport Layer Security) and SSL (Secure
    Sockets Layer) used by HTTPS use asymmetric cryptography which uses a pair of
    keys for sending information, authenticating the receiver more reliably.
  prefs: []
  type: TYPE_NORMAL
- en: 1.7.1 SSL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is widely deployed security protocol and supported by almost all browsers,
    web servers. Moreover, it is available to all TCP applications [[14](#CR14)].
    SSL  operates at the *presentation layer* in the OSI model (Layer6) as depicted
    in Fig. [1.7](#Fig7) [[15](#CR15)]. Public key encryption lies at the heart of
    Secure Sockets Layer, which is another common form of encryption on the Internet.
    In an SSL connection, your computer and the target computer take the roles of
    the two correspondents, swapping public keys and encoding all data that travels
    back and forth between the two machines. This ensures that file transfers and
    other communications remain secure, although outsiders may still be able to determine
    the nature of the transfer by looking at public packet information – a packet’s
    destination port, for example, may give away the type of transfer, as most Internet
    protocols use easily identifiable port numbers.![../images/501530_1_En_1_Chapter/501530_1_En_1_Fig7_HTML.png](../images/501530_1_En_1_Chapter/501530_1_En_1_Fig7_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 1.7
  prefs: []
  type: TYPE_NORMAL
- en: Open System Interconnection (OSI) model
  prefs: []
  type: TYPE_NORMAL
- en: 1.7.2 IPSec
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is an Internet Engineering Task Force (IETF) standard suite of protocols
    between two communication points across the IP network that provide data authentication,
    integrity, and confidentiality. It also defines the encrypted, decrypted, and
    authenticated packets [[16](#CR16), [17](#CR17)]. SSL and IPSec  both boast strong
    security pedigrees with comparable throughput speed, security, and ease of use
    for most customers of commercial VPN services [[18](#CR18)]. IPSec works on *network
    layer* from the OSI layers (Fig. [1.7](#Fig7)).There’s a hierarchy of seven levels
    in the OSI model, namely:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The physical layer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The data link layer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The network layer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The transport layer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The session layer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '6.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The presentation layer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '7.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The application layer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: IPSec encryption can create significant network bottlenecks, whereas Layer 2
    encryption introduces virtually no latency or overhead to the network.
  prefs: []
  type: TYPE_NORMAL
- en: 1.8 Conclusions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This chapter discusses the fundamentals of cryptography. It provides a comprehensive
    study of the three critical aspects of security: confidentiality, integrity, and
    authentication. Cryptography plays a vital and critical role in achieving the
    primary aims of security goals, such as authentication, integrity, confidentiality,
    and non-repudiation. Cryptographic algorithms are developed in order to achieve
    these goals.'
  prefs: []
  type: TYPE_NORMAL
