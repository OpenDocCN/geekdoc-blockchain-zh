["```\n$ git --version\ngit version 2.26.2\n```", "```\n$ curl -V\ncurl 7.54.0 (x86_64-apple-darwin18.0) libcurl/7.54.0 LibreSSL/2.6.5 zlib/1.2.11 nghttp2/1.24.1\nProtocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smb smbs smtp smtps\ntelnet tftp\nFeatures: AsynchDNS IPv6 Largefile GSS-API Kerberos SPNEGO NTLM NTLM_WB SSL libz HTTP2 UnixSockets HTTPS-\nproxy\n```", "```\n$ node -v\nv10.15.3\n\n$ npm -v\n6.11.2\n```", "```\n$ docker -v\nDocker version 19.03.13, build 4484c46d9d\n```", "```\n$ docker-compose --version\ndocker-compose version 1.27.4, build 40524192\n```", "```\ncurl -sSL https://bit.ly/2ysbOFE | bash -s\n```", "```\ncurl -sSL https://bit.ly/2ysbOFE > FabricDevInstall.sh\n```", "```\n$ chmod +x FabricDevInstall.sh\n```", "```\nFabricDevInstall.sh\n```", "```\n\"dependencies\": {\n    \"fabric-contract-api\": \"^2.0.0\",\n    \"fabric-shim\": \"^2.0.0\"\n},\n```", "```\nconstructor(name) {\n    this.__isContract = true;\n    if (typeof name === 'undefined' || name === null) {\n        this.name = this.constructor.name;\n    } else {\n        this.name = name.trim();\n    }\n    logger.info('Creating new Contract', name);\n}\n```", "```\nasync beforeTransaction(ctx) {\n// default implementation is do nothing\n}\n```", "```\nasync afterTransaction(ctx, result) {\n    // default implementation is do nothing\n}\n```", "```\ngetName() {\n    return this.name;\n}\n```", "```\ncreateContext() {\n    return new Context();\n}\n```", "```\nconst AssetList = require('./assetlist.js');\n\nclass MyContext extends Context {\n    constructor() {\n        super();\n        this.assetList = new AssetList(this);\n    }\n\n}\n\nclass AssetContract extends Contract {\n    constructor() {\n        super('org.my.asset');\n    }\n\n    createContext() {\n        return new MyContext();\n    }\n}\n```", "```\nasync queryCar(*ctx*, *carNumber*) \nasync createCar(*ctx*, *carNumber*, *make*, *model*, *color*, *owner*)\nasync queryAllCars(*ctx*)\n```", "```\nasync CreateAsset(*ctx*, *id*, *amount*, *owner*) {\n        const asset = {\n            ID: id,\n            Amount: *amount*,\n            Owner: *owner*\n        };\n        return ctx.stub.putState(id,Buffer.from(\n           JSON.stringify(asset)));\n}\n```", "```\nfunc (c *Asset) Invoke(stub shim.ChaincodeStubInterface) pb.Response {\n    function, args := stub.GetFunctionAndParameters()\n    if function == \"Process\" {\n        return c.Process(stub, args)\n    } \n    return shim.Error(\"Invalid function name\")\n}\n```", "```\ngetState(key: *string*): Promise<*Uint8Array*>;\nputState(key: *string*, value: *Uint8Array*): Promise<void>;\ndeleteState(key: *string*): Promise<void>;\n```", "```\n$ npm install\n```", "```\n/*\n * Copyright IBM Corp. All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n'use strict';\nconst { Contract } = require('fabric-contract-api');<1>\nclass FabCar extends Contract {<2>\n    async initLedger(ctx) {<3>\n        console.info('============= START : Initialize Ledger ===========');\n\n        const cars = [<4>\n            {\n                color: 'blue',\n                make: 'Toyota',\n                model: 'Prius',\n                owner: 'Tomoko',\n            },\n...\n        ];\n        for (let i = 0; i < cars.length; i++) {<5>\n            cars[i].docType = 'car';\n            await ctx.stub.putState('CAR' + i, \n            Buffer.from(JSON.stringify(cars[i])));<6>\n        }\n    }\n    async queryCar(ctx, carNumber) {<7>\n        const carAsBytes = await ctx.stub.getState(\n        carNumber); // get the car from chaincode state<8>\n        if (!carAsBytes || carAsBytes.length === 0) {\n            throw new Error(`${carNumber} does not exist`);\n        return carAsBytes.toString();\n    }\n    async createCar(ctx, carNumber, make, model, color, owner) {<9>\n        console.info('============= START : Create Car ===========');\n        const car = {color, docType: 'car',make, model, owner}\n\n        await ctx.stub.putState(carNumber, Buffer.from(\n        JSON.stringify(car)));<10>\n    }\n    async queryAllCars(ctx) {<11>\n        const startKey = '';\n        const endKey = '';\n        const allResults = [];\n        for await (const {key, value} of ctx.stub.getStateByRange(\n            startKey, endKey)) {<12>\n            const strValue = Buffer.from(value).toString('utf8');\n\n            let record;\n            try {\n                record = JSON.parse(strValue);\n            } catch (err) {\n                record = strValue;\n            }\n            allResults.push({ Key: key, Record: record });\n        }\n        return JSON.stringify(allResults);\n    }\n    async changeCarOwner(ctx, carNumber, newOwner) {<13>\n\nconst carAsBytes = await ctx.stub.getState(carNumber);<14>\nif (!carAsBytes || carAsBytes.length === 0) {\n            throw new Error(`${carNumber} does not exist`);\n        }\n        const car = JSON.parse(carAsBytes.toString());\n        car.owner = newOwner;\n        await ctx.stub.putState(carNumber, Buffer.from(\nJSON.stringify(car)));<15>\n    }\n}\nmodule.exports = FabCar;<16>\n```", "```\nconst assets = [\n    {\n        color: 'blue',\n        make: 'Honda',\n        model: 'Accord',\n        owner: 'Jones',\n    },  \n    {\n        color: 'red',\n        make: 'Ford',\n        model: 'Mustang',\n        owner: 'Smith',\n    },\n];\nfor (let i = 0; i < assets.length; i++) { \n    assets[i].docType = 'asset';\n    await ctx.stub.putState('ASSET' + i,     Buffer.from(JSON.stringify(assets[i])));\n}\n```", "```\nasync createAsset(ctx, assetNumber, make, model, color, owner) {\n        const asset = {\n        color,\n        docType: 'asset',\n        make,\n        model,\n        owner,\n        };\n    await  ctx.stub.putState(assetNumber,Buffer.from(JSON.stringify(asset)));\n}\n```", "```\ngetPrivateData(collection: *string*, key: *string*): Promise<*Uint8Array*>\n```", "```\nassertAttributeValue(attrName: *string*, attrValue: *string*): *boolean*;\ngetAttributeValue(attrName: *string*): *string* | null;\n```", "```\nasync initLedger(ctx) {\n    const cars = [\n         {\n              color: 'blue',\n              make: 'Toyota',\n              model: 'Prius',\n              owner: 'Tomoko',\n         },\n         .\n         .\n         .\n         {\n              color: 'brown',\n              make: 'Holden',\n              model: 'Barina',\n              owner: 'Shotaro',\n              },\n    ];\n    for (let i = 0; i < cars.length; i++) {\n              cars[i].docType = 'car';\n              await ctx.stub.putState('CAR' + i,\n              Buffer.from(JSON.stringify(cars[i])));\n              console.info('Added <--> ', cars[i]);\n    }\n}\n```", "```\npeer chaincode invoke \n-o localhost:7050 \n--ordererTLSHostnameOverride orderer.example.com \n--tls true \n--cafile /OReilly/fabric-samples/test-network/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tls\nca.example.com-cert.pem \n-C mychannel \n-n fabcar \n--peerAddresses localhost:7051 \n--tlsRootCertFiles /OReilly/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \n--isInit \n-c '{\"function\":\"initLedger\",\"Args\":[]}'\n\n[chaincodeCmd] chaincodeInvokeOrQuery -> INFO 001 Chaincode invoke successful. result: status:200\n```", "```\npeer chaincode query \n-C mychannel \n-n fabcar \n-c '{\"Args\":[\"queryAllCars\"]}'\n```", "```\n[{\"Key\":\"CAR0\",\"Record\":{\"color\":\"blue\",\"docType\":\"car\",\"make\":\"Toyota\",\"model\":\"Prius\",\"owner\":\"Tomoko\"}},\n.\n.\n.\n{\"Key\":\"CAR9\",\"Record\":{\"color\":\"brown\",\"docType\":\"car\",\"make\":\"Holden\",\"model\":\"Barina\",\"owner\":\"Shotaro\"}}]\n```", "```\npeer lifecycle chaincode package fabcar.tar.gz \\ \n        --path ../chaincode/fabcar/javascript/ \\\n        --lang node \\\n        --label fabcar_1\n```", "```\npeer lifecycle chaincode install fabcar.tar.gz\n\n[cli.lifecycle.chaincode] submitInstallProposal -> INFO 001 Installed\n```", "```\npeer lifecycle chaincode queryinstalled\n\nInstalled chaincodes on peer:\nPackage ID: fabcar_1:5a00a40697â€¦330bf5de39, \nLabel: fabcar_1\n```", "```\npeer lifecycle chaincode approveformyorg \n-o localhost:7050 \n--ordererTLSHostnameOverride orderer.example.com \n--tls true \n--cafile /OReilly/fabric-samples/test-network/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.\nexample.com-cert.pem \n--channelID mychannel \n--name fabcar \n--version 1 \n--init-required \n--package-id fabcar_1:5a00a406972168ac5856857b5867f51d5244208b876206b7e0e418330bf5de39 \n--sequence 1\n```", "```\npeer lifecycle chaincode checkcommitreadiness \n--channelID mychannel \n--name fabcar \n--version 1 \n--sequence 1 \n--output json \n--init-required\n\n{\n    \"approvals\": {\n        \"Org1MSP\": true,\n        \"Org2MSP\": false\n    }\n}\n```", "```\npeer lifecycle chaincode commit \n-o localhost:7050 \n--ordererTLSHostnameOverride orderer.example.com \n--tls true \n--cafile /OReilly/fabric-samples/test-network/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.\nexample.com-cert.pem \n--channelID mychannel \n--name fabcar \n--peerAddresses localhost:7051 \n--tlsRootCertFiles /OReilly/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt\n--version 1 \n--sequence 1\n--init-required\n```", "```\n[chaincodeCmd] ClientWait -> INFO 001 txid\n[ef59101c320469be3242daa9ebe262771fc8cc8bd5cd0854c6424e1d2a0c61c2] committed with status (VALID) at\nlocalhost:9051\n```", "```\npeer lifecycle chaincode querycommitted \n--channelID mychannel \n--name fabcar\n```", "```\nCommitted chaincode definition for chaincode 'fabcar' on channel 'mychannel':\nVersion: 1, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [Org1MSP: true,\nOrg2MSP: true]\n```", "```\npeer chaincode invoke \n-o localhost:7050 \n--ordererTLSHostnameOverride orderer.example.com \n--tls true \n--cafile /OReilly/fabric-samples/test-network/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.\nexample.com-cert.pem \n-C mychannel \n-n fabcar \n--peerAddresses localhost:7051 \n--tlsRootCertFiles /OReilly/fabric-samples/test-\nnetwork/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \n--peerAddresses localhost:9051 \n--tlsRootCertFiles /OReilly/fabric-samples/test-network/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \n--isInit \n-c '{\"function\":\"initLedger\",\"Args\":[]}'\n```", "```\n[chaincodeCmd] chaincodeInvokeOrQuery -> INFO 001 Chaincode invoke successful. result: status:200\n```", "```\npeer chaincode query \n-C mychannel \n-n fabcar \n-c '{\"Args\":[\"queryAllCars\"]}'\n```", "```\n[{\"Key\":\"CAR0\",\"Record\":{\"color\":\"blue\",\"docType\":\"car\",\"make\":\"Toyota\",\"model\":\"Prius\",\"owner\":\"Tomoko\"}},\n.\n.\n.\n{\"Key\":\"CAR9\",\"Record\":{\"color\":\"brown\",\"docType\":\"car\",\"make\":\"Holden\",\"model\":\"Barina\",\"owner\":\"Shotaro\"}}]\n```"]