- en: '[CHAPTER 8](toc.xhtml#c08)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Technology Limitations, Threats, and Vulnerabilities](toc.xhtml#c08)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned the technical details of communication
    between nodes. This helped you understand the way transactions and blocks are
    propagated over the network, the way nodes find peers, and the way nodes determine
    which nodes to connect with.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have learned Bitcoin protocol in-depth, you can understand its
    limitations and vulnerabilities from a technical point of view.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how Bitcoin design and implementation create
    limitations for its use. We will understand why these limitations are important
    and how it gives Bitcoin its characteristics. We will also learn different ways
    in which the Bitcoin network can or may be compromised and why it is still secure
    and may not get attacked anytime soon. Additionally, we will discuss the vulnerabilities
    that seem to be secure today but may become potential risks for its security in
    the future.
  prefs: []
  type: TYPE_NORMAL
- en: '[Structure](toc.xhtml#s148a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Design limitations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Block size limitation
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Effect on transaction verification
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](images/ent.jpg) FIBER: Fast Internet Bitcoin Relay Engine'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Effect on blockchain size
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Block time limitation
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Privacy limitation
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Solutions to privacy and scaling
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved hardware
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Utreexo accumulators
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Signature aggregation
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MAST: Merklized Abstract Syntax Trees'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Taproot
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightning Network
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: CoinJoin
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tumbler services
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitcoin mining energy usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threats to individuals and network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threats from governments
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Threats from central banks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Malicious hackers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitcoin theft
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](images/ent.jpg) Exploiting cryptographic weaknesses'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](images/ent.jpg) Malware'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Ransomware
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Losing private keys or seed phrase
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat due to vulnerabilities
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Transaction malleability
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Dusting attack
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Mempool flood attack
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Selfish mining
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: BGP hijacking attack
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](images/ent.jpg) Network partitioning attack'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](images/ent.jpg) Delay attack'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 0-confirmation attack
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiding hash rate
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Blacklist addresses
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Replay attack
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Empty block mining
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitcoin mining centralization
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](images/ent.jpg) 51% Attack'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Sybil attack
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Denial-of-Service (DoS) attack
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Quantum computing attack
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden bugs, bug exploit, and reorg
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Frauds and robbery
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Objectives](toc.xhtml#s149a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main objective of this chapter is to allow readers to question Bitcoin legitimacy,
    necessity, and value from technological and non-technical points of view.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, knowing the attack vector of technology can help you better prepare
    for it and take precautions so that it will have less impact on you.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we will try to answer the following questions in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Why doesn’t Bitcoin have very big block sizes?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why doesn’t Bitcoin have a shorter block time?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does Bitcoin really need to consume so much energy, and how does this impact
    the environment?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are different ways Bitcoin network can be attacked? How serious are those
    attack vectors?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there any future risks to the technology?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apart from technical vulnerability, what may be the other vulnerabilities?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Design limitations](toc.xhtml#s150a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bitcoin blocks are mined every 10 minutes, and each block is limited to 1MB
    size for pre-SegWit and 1MB of v-size for SegWit. This leads to a low transaction
    rate. The following is a chart of a historic number of transactions per second:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.1:** Average transactions per second'
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the Bitcoin transaction rate reached 18 transactions per sec.
    Even if blocks have all SegWit transactions, it will only reach an average of
    25 transactions per sec. In comparison, Visa processes 2,000 transactions per
    sec on an average. This means Bitcoin is not suitable for small value payments
    on a global scale. To compete with Visa, Bitcoin requires a hundred times the
    current block size, or it needs to generate blocks in less than 10 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin is also not very good at providing privacy. Since all transactions are
    on the blockchain and most bitcoin buying and selling happens through exchanges
    that work under regulations, almost all transactions can be linked by performing
    big data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: '[Block size limitation](toc.xhtml#s151a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Increasing the block size or decreasing block time has a similar impact on the
    network and blockchain size. Increasing block size by 10 times or reducing block
    time by 10 times causes a similar increase in network traffic due to block propagation
    and a similar rise in blockchain size.
  prefs: []
  type: TYPE_NORMAL
- en: '[Effect on transaction verification](toc.xhtml#s152a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mining nodes are competing to solve a cryptographic puzzle to mine a block.
    When a block is mined, it is published on the network. The block needs to reach
    all the nodes quickly. If during the propagation of the block, another node solves
    the cryptographic puzzle and publishes its block, there will be disagreement between
    nodes on the next block of the Bitcoin blockchain. So, two competing chains are
    formed, which compete to prove that they are the right chain. A chain with higher
    accumulated *PoW* is considered the longer chain and is accepted, while the other
    chain is discarded.
  prefs: []
  type: TYPE_NORMAL
- en: As you can imagine, if block propagation doesn’t happen quickly, multiple competing
    chains can get formed, and the time to resolve the correct chain may increase
    exponentially with an increase in propagation delay.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the chart of Block propagation delay since 2015\. There are
    some gaps in the chart as some data is missing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.2:** 30-day rolling average for time for the block to reach 90%
    nodes'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, block propagation delay got reduced from 15 seconds in 2015
    to 2 seconds in 2018\. Since 2016, there have been multiple enhancements introduced
    in P2P Bitcoin network protocol messages. This might be the reason propagation
    delay has rapidly reduced.
  prefs: []
  type: TYPE_NORMAL
- en: It is standard practice to wait for 6 confirmations before accepting a transaction.
    This is because if a race condition arises due to simultaneous mining of blocks,
    it normally gets resolved before the sixth confirmation.
  prefs: []
  type: TYPE_NORMAL
- en: If the race condition arises because of simultaneous mining of blocks but does
    not get resolved within the next six blocks, then it will impact the overall confidence
    of a confirmed transaction.
  prefs: []
  type: TYPE_NORMAL
- en: So, block size is an important factor in propagation delay and confidence in
    the Bitcoin network.
  prefs: []
  type: TYPE_NORMAL
- en: 'FIBRE: Fast Internet Bitcoin Relay Engine'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Fast Internet Bitcoin Relay Engine** (**FIBRE**) is a protocol designed with
    an intention to deliver Bitcoin blocks to the connected nodes with delays comparable
    to the physical limit of the connection. It depends on a well-managed network
    to deliver the intended outcome.'
  prefs: []
  type: TYPE_NORMAL
- en: With FIBRE, it becomes far less likely that there will be two competing chains.
    This makes selfish mining difficult and makes the network fairer.
  prefs: []
  type: TYPE_NORMAL
- en: '[Effect on blockchain size](toc.xhtml#s153a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have learned by improving gossip protocol, we can greatly reduce propagation
    delay and, consequently, allow block size to increase. However, blockchain size
    is another important barrier in increasing block size. Currently, the Bitcoin
    blockchain is already 400GB, which has increased nearly 60GB in the last year.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the chart of rise in the blockchain size with year:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.3:** Change in blockchain size over the years'
  prefs: []
  type: TYPE_NORMAL
- en: If we also include all the indexes, this number goes up to 390GB. If the number
    of transactions goes even higher, then we may see up to 100GB addition every year.
    This is a significant number, which makes it a bit costly to run full node now.
    For most Bitcoin enthusiasts, to run full node means giving up 400GB of disk space,
    and this may increase by 100GB every year. In 2 years, it will become 500GB of
    spare storage and 1TB in a few more years. To allow college students or enthusiasts
    to maintain full node, disk storage costs should come down, and higher than 1TB
    becomes the norm in laptops.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following chart shows how blockchain size is adding up every 365 days:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.4:** Blockchain size change rate (365-day rolling sum)'
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative, Bitcoin Core provides an option to prune blockchain and limit
    it to a much smaller size. Bitcoin Core maintains indexes of unspent transactions
    and blocks, so a prune node can still verify transactions and blocks and is still
    considered a full node. However, it cannot reconstruct a pruned block and cannot
    fulfill the block request for peer nodes. Since each block contains a reference
    to older blocks, this is not a problem if recent blocks are maintained, and there
    are enough nodes maintaining the full blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Pruned nodes have several advantages. A pruned node can be created with just
    288 blocks, which will not be more than 1GB. So, using pruned node, we can have
    a full node running on embedded devices.
  prefs: []
  type: TYPE_NORMAL
- en: However, this still does not help increase block size as blockchain verification
    takes days to complete. So, blockchain size on disk is not the main limiting factor
    in increasing block size; instead, blockchain verification time itself is the
    main factor stopping us from increasing block size.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, it takes between 1 and 7 days to download the whole blockchain because
    of verification time.
  prefs: []
  type: TYPE_NORMAL
- en: To reduce the blockchain verification time, we either need to wait till better-performing
    computers will be able to reduce the verification time, or we need to find a more
    efficient block verification algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '[Block time limitation](toc.xhtml#s154a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Block time adjustment happens every 2016 block and is based on network hash
    rate. Network hash rate is not very well distributed, so it gets affected by environmental
    disasters and govt. controls.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the average time to mine a block with a rolling average of
    2016 blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.5:** Average time to mine a block (Rolling average of 2016 blocks)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A few incidents in the past have caused the hash rate to drop:'
  prefs: []
  type: TYPE_NORMAL
- en: In August 2020, heavy rainstorms in China lead to a 15% drop in the Hash rate.
  prefs: []
  type: TYPE_NORMAL
- en: In June 2021, China enforced ban on cryptocurrency mining which led to the drop
    of more than 50% in the network hash rate. We can see the corresponding rise in
    block time of more than 15 min in the preceding figure.
  prefs: []
  type: TYPE_NORMAL
- en: A drop in the hash rate causes block-time to increase, which leads to more transactions
    reaching mempool before getting included in a block. Since more transactions compete
    for entry into blockchain, the transaction fee rises. However, this problem goes
    away after the next difficulty adjustment, which happens after every 2016 blocks
    or nearly 2 weeks. A drop in hash rate extends block time, so 2016 blocks may
    take more than 2 weeks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an illustration of how the number of transactions waiting
    to get added to a block grows as the block time increases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.6:** Dependence of mempool size on Block time'
  prefs: []
  type: TYPE_NORMAL
- en: This is an inconvenient disruption that lasts for more than 2 weeks. A solution
    for this problem could be to adjust the difficulty in every block by taking the
    rolling average of 2016 blocks.
  prefs: []
  type: TYPE_NORMAL
- en: However, there is a reason this is not implemented in Bitcoin. Since only a
    few mining pools control almost all the Bitcoin network hashrate, a sophisticated
    DDOS attack on those large miners can bring down the hashrate of the network,
    which will give an attacker a window to compromise the network. For the greater
    good of security, this inconvenience is a necessary evil.
  prefs: []
  type: TYPE_NORMAL
- en: '[Privacy limitation](toc.xhtml#s155a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bitcoin is not a privacy coin. It does not support Privacy protocols such as
    Zero Knowledge Proof. So, we need to realize that Bitcoin does record trails of
    information in the blockchain and exchanges from where we buy them and online
    merchants/websites we use them at. However, Bitcoin does provide ways to hide
    identity by using CoinJoin or tumbler services, by simply buying from individuals
    directly, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '[Solutions to privacy and scaling](toc.xhtml#s156a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous subtopics, you learned that the major reason we do not want
    block size to rise is the initial block download verification time. There are
    quite a few developments happening that might help Bitcoin to scale and as well
    as improve its privacy.
  prefs: []
  type: TYPE_NORMAL
- en: Criminals can hack into data in exchanges and merchants and relate them with
    information in blockchain to obtain insights about individuals. A totalitarian
    government can also get information from exchanges and merchants. They can ultimately
    use that information against the individuals whose information is revealed. Therefore,
    bitcoin is sometimes considered *pseudo-anonymous.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Bitcoin does provide ways to hide identity. Here are a few ways identity can
    be made hidden:'
  prefs: []
  type: TYPE_NORMAL
- en: The simplest method of hiding information is never to use an address twice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Some wallets, like the Samourai wallet and the Wasabi wallet, provide variations
    of CoinJoin to make a transaction fungible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A person can also send or receive transactions directly from another person
    or a miner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These are some of the ways to maintain privacy*.* It depends on the individual
    how well they can manage their privacy, and under political pressure, individuals
    can be forced to make their transactions more private and hidden. Therefore, bitcoin
    is also considered *censorship-resistant*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the different privacy and scaling solutions that are already
    in use or are under development:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/254.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Table 8.1:** Impact of different solutions on the privacy and scalability
    of the Bitcoin network and transaction'
  prefs: []
  type: TYPE_NORMAL
- en: '[Improved hardware](toc.xhtml#s157a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Improvement in chip technology and miniaturization can reduce time to verify
    blocks, reducing initial block download time. There is a possibility that we may
    be able to develop microprocessors with 2nm technology and have improved RISC
    architecture and other hardware design elements that will produce more performant
    hardware, which will verify blockchain in lesser time.
  prefs: []
  type: TYPE_NORMAL
- en: '[Utreexo accumulators](toc.xhtml#s158a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Utreexo makes improvements in the transaction and block verification by changing
    the structure of UTXO indexes. The feature is still in development and has shown
    promising results. If successful, it will allow an increase in the block size
    by reducing the blockchain verification time for Initial Block Download.
  prefs: []
  type: TYPE_NORMAL
- en: '[Signature aggregation](toc.xhtml#s159a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bitcoin is going through a lot of changes, though it is quite difficult to get
    an enhancement into the consensus rules. Enhancements are important as it makes
    the technology future-proof. At the same time, enhancements related to the consensus
    rules are not reversible, and there is a very high cost to the network if a wrong
    enhancement is introduced. Plus, consensus rules need to be backward compatible,
    so every change needs to be introduced as a soft fork, which makes consensus rules
    more complicated with each enhancement.
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin is going to have a new signature scheme called Schnorr signature. Unlike
    ECDSA, Schnorr signatures are linear, which means Signatures can be aggregated
    into a new Signature without affecting its size.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be understood as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.7:** Signature aggregation using Schnorr Signature'
  prefs: []
  type: TYPE_NORMAL
- en: As we know, signatures take quite a bit of space in a transaction, so we can
    reduce the effective size of a transaction by aggregating multiple signatures
    in a Multisig input. This will help accommodate more transactions in a block,
    increasing Bitcoin’s transaction rate.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, since signature aggregation allows multiple signatures and public
    keys to be aggregated into a single signature and public key, it becomes difficult
    to know if funds are held by a single person or a group of persons. This makes
    tracing of the consumers of bitcoin difficult without compromising the verifiability
    of the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: '[MAST: Merklized Abstract Syntax Trees](toc.xhtml#s160a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In P2SH transactions, we can embed complex scripts with conditions and sub-conditions.
    When the transaction is spent, only a portion of the nesting of multiple conditionals
    gets executed. The spender must reveal the script to utilize the locked fund.
    This has unnecessary high costs and is bad for privacy.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand conditionals and sub-conditionals, a script can be represented
    as an Abstract Syntax Tree. This kind of notation is commonly used by compilers
    to compile a programing language. As an example, the common script we use is 2-3-multisig.
    Considering, 2-3-multisig between Alice, Bob, and Carol, we can represent it as
    the following conditional statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(Alice AND Bob) OR (Bob AND Carol) OR (Carol AND Alice)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a representation of the Abstract Syntax Tree for the 2-of-3-multisig
    between Alice, Bob, and Carol:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.8:** Abstract Syntax Tree for the 2-of-3-multisig'
  prefs: []
  type: TYPE_NORMAL
- en: MAST uses the Merkle tree to represent the Bitcoin script. The Merkle tree is
    a modification of the Abstract Syntax tree, in which each side of a condition
    is joined by the concatenated hash of both sides. This separates each condition
    in such a way that a transaction spender only needs to reveal the conditionals
    required for Merkle proof and leave other conditionals hidden. So, this is like
    Merkle Proof, which was explained in *[Chapter 5, The Whitepaper](c05.xhtml),*
    under the topic ***Simplified Payment Verification*** *section of the whitepaper*.
    MAST is a concept that does not have direct use in Bitcoin transactions. There
    is no such thing as Pay-2-Script-Merkle-Root. It is just a concept to understand
    MAST, but MAST does get used in Taproot, so this is important to understand.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in a hypothetical P2SMR transaction, the following will happen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.9:** A hypothetical P2SMR transaction based on MAST'
  prefs: []
  type: TYPE_NORMAL
- en: Since only a part of the script is revealed, it reduces the number of bytes
    used in the transaction, which helps in scaling, and it improves privacy since
    it does not reveal the whole script.
  prefs: []
  type: TYPE_NORMAL
- en: '[Taproot](toc.xhtml#s161a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Taproot goes even further. It hides a whole script or most parts of the script
    under the public key signature pair. So, we can have a complex script with multiple
    conditionals and parties hidden under the address. This reduces transaction size,
    and a complex script takes the space of only a P2PKH transaction or a bit more
    for script hashes. And the transaction hides all the details of a script within
    a public key and a signature so that an observer cannot determine that it is a
    single signature or a multisig or a complex smart contract. Therefore, it is great
    for privacy as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the illustration for funding transaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.10:** Funding transaction for Taproot'
  prefs: []
  type: TYPE_NORMAL
- en: To spend the P2TR UTXO, we can either sign the transaction with a private key
    or tweak the public key, which only Alice and Bob will know, or we will need to
    provide the required hashes, as in Merkle Proof, along with Signature.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, there are two possible transactions created using P2TR UTXO:'
  prefs: []
  type: TYPE_NORMAL
- en: When Alice and Bob sign the transaction, in this case, since they have created
    a tweak public key, they can also create Aggregated signature. Here’s the illustration:![](images/Figure-8.11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Figure 8.11:** Taproot Spending transaction with the main condition'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When Bob and Carol or Carol and Alice sign the transaction, since they have
    not created a tweak public key, they need to provide hashes as in Merkle Proof
    to allow validation. Here’s the illustration:![](images/Figure-8.12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Figure 8.12:** Taproot Spending transaction for other conditions'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Lightning Network](toc.xhtml#s162a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any of the enhancements or changes in block size can only have a limited effect
    on the increase in the number of transactions per second. Even if we could increase
    the block size by 10 times, the number of transactions per second will only reach
    200 to 250 transactions per second, which is still much smaller than credit cards.
    Visa handles 65,000 transactions per second as per records.
  prefs: []
  type: TYPE_NORMAL
- en: Lightning Network is a layer 2 protocol on Bitcoin blockchain. We already covered
    the Lightning Network in [Chapter 4](c04.xhtml) titled *Bitcoin in the real world*
    and Topic *Accepting bitcoins by an online merchant.*
  prefs: []
  type: TYPE_NORMAL
- en: The lightning Network allows transactions to happen off-chain. And since it
    is between individuals through a route involving a few more hops, there is no
    constrained-on number of transactions that can happen in a second. This enhances
    Bitcoin’s ability to complete a substantial number of transactions and compete
    with MasterCard and Visa Card.
  prefs: []
  type: TYPE_NORMAL
- en: Since there could be any number of transactions between parties without recording
    them on the blockchain and only the final transaction is recorded, it improves
    the privacy of payments between two parties.
  prefs: []
  type: TYPE_NORMAL
- en: Schnorr Signature will further reduce the cost of creating and closing a Lightning
    Network channel by integrating the signatures of both parties into a single signature.
    We can even have multiparty channels as we can now aggregate signatures.
  prefs: []
  type: TYPE_NORMAL
- en: '[CoinJoin](toc.xhtml#s163a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CoinJoin is a method of making bitcoin fungible by joining multiple transactions
    in such a way that it is difficult to know which outputs are receiving coins from
    which UTXO. There are diverse ways to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: One way is to divide values in inputs and join values in output such that output
    values are matched. This way, it becomes difficult to match inputs with outputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following are the three required transactions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.13:** Transactions to be in a CoinJoin'
  prefs: []
  type: TYPE_NORMAL
- en: To do the CoinJoin, we try to join all three transactions into one transaction
    such that it is difficult to know which UTXOs are going to which recipient. This
    removes identity from bitcoin, making them similar to cash.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of the CoinJoin transaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.14:** Example of a CoinJoin'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, it is impossible to know which addresses belong to
    Bob, Dave, and Kirsten and who paid in which output.
  prefs: []
  type: TYPE_NORMAL
- en: '[Tumbler services](toc.xhtml#s164a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tumbler services are provided by anonymous exchanges and are not traceable as
    they mostly use the TOR network. They charge fees for mixing transactions. The
    tumbler services take the bitcoin from the sender and forward them to the receiver,
    but in between, they mix them with other transactions or their own transactions
    and move them between multiple addresses. This makes them impossible to track.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be understood from the following illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.15:** Example of a Tumbler service'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding illustration, there is no way to know that Alice is paying
    Bob or Carol is paying Dave or John is paying Kirsten because all are separate
    and unrelated fully mixed transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike CoinJoin, which is provided by some popular wallets, Tumbler services
    are not provided by any known entity. This is the very nature of their operations.
    Consequently, such services are risky as they can steal your coins.
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitcoin mining energy usage](toc.xhtml#s165a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bitcoin has a bad image because of its high energy usage, and that is true,
    as we can see in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.16:** Bitcoin mining energy usage compared to top electricity consuming
    nations'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding image shows the 50 highest energy-consuming countries. Bitcoin
    currently occupies the 24^(th) place, and it is nearly equal to the Poland, which
    is a rich and developed country in Europe.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, global energy usage is 23000 TWh, and Bitcoin energy usage is only
    154TWh, which is less than 1.0%. Bitcoin energy usage is related to growth in
    the currency. As the interest in Bitcoin grows, so will be the energy usage by
    the Bitcoin network.
  prefs: []
  type: TYPE_NORMAL
- en: We will do some calculations to understand why it is not as bad as it appears
    to be.
  prefs: []
  type: TYPE_NORMAL
- en: To not promote mining equipment, we will not disclose the name of mining equipment
    we are using as a reference.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider that I am using mining equipment in a location in Bengaluru city,
    which currently has the following power costs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/262.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Table 8.2:** Electricity charges in Bengaluru City'
  prefs: []
  type: TYPE_NORMAL
- en: We use the same programs as in *[Chapter 6, Blockchain, Transactions and Mining](c06.xhtml),*
    under topic *Mining cost*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We take a miner with a hash rate of 90 TH/s and Energy consumption of 3050W,
    which is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`def getMinerHashRate():`'
  prefs: []
  type: TYPE_NORMAL
- en: '`return 100 * 10**12`'
  prefs: []
  type: TYPE_NORMAL
- en: '`def getMinerPowerWatt():`'
  prefs: []
  type: TYPE_NORMAL
- en: '`return 3050`'
  prefs: []
  type: TYPE_NORMAL
- en: '`We define unit price as follows:`'
  prefs: []
  type: TYPE_NORMAL
- en: '`electricity_rates = {“rate_slabs”: [{“min”: 1, “max”: 30, “unit_price”: 4},
    {“min”: 31, “max”: 100, “unit_price”: 5.45}, {“min”: 101, “max”: 200, “unit_price”:
    7}, {“min”: 201, “unit_price”: 8.05}]}`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If the current price of bitcoin is ₹28,05,753, which is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`def getCurrentSellPrice():`'
  prefs: []
  type: TYPE_NORMAL
- en: '`return 2805753`'
  prefs: []
  type: TYPE_NORMAL
- en: 'And following is the code to call the `**miningReturn**` method to get mining
    profit:'
  prefs: []
  type: TYPE_NORMAL
- en: '`blk_hash = ‘000000000000000000016acc33775c2ea52abeb4407381b84fee5f7af97fdd8b’`'
  prefs: []
  type: TYPE_NORMAL
- en: '`blk_hash_b = bytes.fromhex(blk_hash)[::-1]`'
  prefs: []
  type: TYPE_NORMAL
- en: '`blk_index = getBlockIndex(blk_hash, block_db_g)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`blk_hdr_b = getBlockHeaderBytes(blk_hash_b)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`jsonobj = getBlockHeader(blk_hdr_b)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`blk_reward = getBlockReward(blk_index[‘height’])`'
  prefs: []
  type: TYPE_NORMAL
- en: '`miner_hashrate = getMinerHashRate()`'
  prefs: []
  type: TYPE_NORMAL
- en: '`print(“Miner hashrate = %d” % (miner_hashrate))`'
  prefs: []
  type: TYPE_NORMAL
- en: '`miner_power = getMinerPowerWatt()`'
  prefs: []
  type: TYPE_NORMAL
- en: '`print (“Miner Power in Watt = %f” % (miner_power))`'
  prefs: []
  type: TYPE_NORMAL
- en: '`expense = getMiningPowerExpense(miner_power)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`print (“Miner Power Expense Per Month = %.2f” % (expense))`'
  prefs: []
  type: TYPE_NORMAL
- en: '`bits_b = bytes.fromhex(jsonobj[‘bits’])[::-1]`'
  prefs: []
  type: TYPE_NORMAL
- en: '`mining_return = miningReturn(miner_power, miner_hashrate, bits_b, blk_reward)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`print(“Mining Return Per Month = %s” % (mining_return))`'
  prefs: []
  type: TYPE_NORMAL
- en: 'On running it, we get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.17:** Mining profitability of test miner in Bangalore'
  prefs: []
  type: TYPE_NORMAL
- en: The equipment cost nearly ₹9,00,000/-.
  prefs: []
  type: TYPE_NORMAL
- en: If mining reward remains constant, it will take 3 years to achieve breakeven
    with the equipment. This looks like reasonable returns, but considering that the
    mining hash-rate might double during this period, it might reduce the monthly
    mining returns to between 0 and ₹5,000, which is negligible, and you will need
    to buy another equipment, which might be more costly and might consume more power.
    Consequently, you might never reach breakeven. On the positive side, in 3 years,
    the price of bitcoin may rise and mining remains profitable.
  prefs: []
  type: TYPE_NORMAL
- en: This makes mining a bit risky unless you get subsidized power, power from a
    cheap source, or power source that comes from wasted fuel or energy.
  prefs: []
  type: TYPE_NORMAL
- en: Consequently, large miners are mostly situated in countries where electricity
    is subsidized. Additionally, many powers generation companies and fossil fuel
    companies are also mining bitcoin to utilize their excess power and fuel. Natural
    gas and oil drilling companies are using waste gas for bitcoin mining, which is
    especially good for the environment as methane is a much bigger greenhouse gas
    than carbon dioxide.
  prefs: []
  type: TYPE_NORMAL
- en: The fuel efficiency of wind and solar power is better than non-renewable energy
    sources, except natural gas and nuclear power. Additionally, off-grid power saves
    energy wastage due to transmission which further improves mining profitability.
    This makes off-grid renewable energy the energy of choice for non-subsidized mining.
  prefs: []
  type: TYPE_NORMAL
- en: And for governments subsidizing power for bitcoin, mining is costly as it hardly
    creates any jobs, so governments tend to attack such facilities, like in China
    and Iran.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, contrary to contemporary belief, we learned that bitcoin mining is good
    for the environment because of the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Miners prefer off-grid renewable energy as a source of electricity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Waste fuel, which consists of the most potent greenhouse gases, is utilized
    for bitcoin mining and converted to a less potent greenhouse gas, i.e., carbon
    dioxide.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitcoin mining discourages governments to subsidize power to mining companies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Threats to individuals and network](toc.xhtml#s166a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Till now in this chapter, you learned about the design limitations and how the
    Bitcoin developer community is working to overcome those limitations. You also
    learned about how large energy consumption in bitcoin mining is not a big problem
    for the environment.
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin, being a decentralized peer-to-peer open network for value transfer,
    is both lucrative for an attacker and perceived as a threat to the existing global
    monetary system. So, the Bitcoin network and bitcoin investors may have to deal
    with various attacks, such as attacks from governments, central banks, malicious
    hackers, fraudsters, or robbery.
  prefs: []
  type: TYPE_NORMAL
- en: However, threats may not always be because of diverse types of attacks but may
    also be because of risk and potential vulnerabilities that exist today or may
    be a problem in the future.
  prefs: []
  type: TYPE_NORMAL
- en: '[Threats from governments](toc.xhtml#s167a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in ***[Chapter 4, Bitcoin in the Real World](c04.xhtml)****,* under
    the topic ***Bitcoin and*** *c****ryptocurrency*** ***egulations***, in most countries
    around the world, the laws on cryptocurrencies are not clear or are non-existent.
    This gives authorities extra judicial powers to handle cryptocurrencies, which
    sometimes involve threat and corruption. Sometimes, taxes are to be paid, but
    the clause to pay taxes is not clear. This is the problem in India, like in many
    other countries. This affects exchanges, traders, investors, and merchants, leading
    to inflated prices of cryptocurrencies and related services and risk of loss of
    investments or business.
  prefs: []
  type: TYPE_NORMAL
- en: There is also no legal protection, which is sometimes misused by miscreates
    through extortions and frauds.
  prefs: []
  type: TYPE_NORMAL
- en: Ban on dealing in bitcoin is a potential risk, and some countries do take that
    route, which means anyone dealing in cryptocurrencies gets punished. However,
    this has been done by very few countries.
  prefs: []
  type: TYPE_NORMAL
- en: '[Threats from central banks](toc.xhtml#s168a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most countries, developed or developing, do not have fully convertible currencies,
    and they see stronger currencies as a threat. The fear is that the central banks
    will lose control, and their currencies may become weak and lose value. This is
    a legitimate concern, mostly because of the weakness in the fiscal policies of
    a country. There is also a risk that central banks may not be able to know the
    use of funds for illicit activities. So, as a precautionary measure, KYC and AML
    norms are strongly enforced by all financial institutions.
  prefs: []
  type: TYPE_NORMAL
- en: Cryptocurrencies are quite fluid, and they can easily slip through regulatory
    loopholes. This is why central banks are wary of their widespread use. In many
    countries, we have seen a banking ban exists and, in some countries, large institutions
    are also not allowed to deal in cryptocurrencies. On the other hand, in some countries,
    certain activities related to cryptocurrencies are prohibited.
  prefs: []
  type: TYPE_NORMAL
- en: As we have learned, unlike most other cryptocurrencies, bitcoin is not really
    a good speculative instrument and is more of an asset like gold. Like gold, bitcoin
    should not be seen as a threat to the global monetary system, and central banks
    should recognize that the risk of money laundering is the lack of regulation,
    so each country needs more regulation, not less.
  prefs: []
  type: TYPE_NORMAL
- en: '[Malicious hackers](toc.xhtml#s169a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hackers may attack individuals, exchanges, and networks in various ways. Hacking
    may be stealing, robbery, or exploiting protocol weaknesses. Stealing could be
    done by trying to crack security by brute force or knowledge-based attacks, or
    it could be through social engineering, among other ways. Robbery can also involve
    social engineering and ransomware.
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitcoin theft](toc.xhtml#s170a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bitcoin theft can happen by weakness in cryptography being used by the bitcoin
    wallet. Theft can also happen by other methods through malware, spyware, or social
    engineering.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting cryptographic weaknesses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Hashing and ECDSA algorithm used by Bitcoin is quite safe, but there are
    still some risks because of the selection of entropy, salt, or other parameters
    in cryptographic algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: '**Brute force attack**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 256-bit ECDSA cryptography used in Bitcoin has the same security strength
    as the 3072-bit RSA cryptography. It will take billions of years to crack 256-bit
    ECDSA cryptography used by Bitcoin by just brute force. There is still a possibility
    that in a few decades, we may learn the way to crack cryptography. When that happens,
    Bitcoin will need to shift to a new algorithm.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Low entropy attack**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The signature algorithm used by Bitcoin is very secure and cannot be broken
    by even the most advanced computers in millions of years. However, the security
    of a private key depends on the entropy of the random generator used to generate
    the private key. If a low entropy system is used to generate the private key,
    then the private key can be guessed by brute force.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Collision attack**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SHA256 is considered collision-resistant, which means it is almost impossible
    to generate two messages with the same hash value. So, Bitcoin is secure from
    such attacks.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Precomputed hashes or rainbow tables**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The PBKDF2-HMAC-SHA512 algorithm is used in hierarchical deterministic wallets
    for the generation of private and public keys. The algorithm requires a large
    number of iterations to generate secure keys, and it must be used with salt, else
    the generated keys are prone to attacks using precomputed hashes. Additionally,
    the iterations or rounds should be at least 2048 but are expected to be 10,000
    or even higher. Using high computational power, a lower round generated key can
    be derived and all bitcoin in the wallet can be stolen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Malware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Malware is a malicious program that intends to steal information or damage the
    computer or network. Malware could be used to steal information by **spyware or
    trojan**. Malware can be installed through some form of **social engineering**,
    which can use urgency, greed, and fear to make you click on a link or download
    from a link in mail or web page. Malware can also be installed through a fake
    website that looks real. These malware are called **trojan**.
  prefs: []
  type: TYPE_NORMAL
- en: A malware called **spyware** then gets installed in the computer without the
    user’s knowledge and can read files, collect information from websites, and read
    keystrokes from the keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: Ransomware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ransomware is a new form of hacking where an attacker encrypts files on the
    system after getting access to a system through malware. After that, the attacker
    asks for bitcoin as ransom in exchange for decrypting the files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps taken by ransomware to rob bitcoin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.18:** Steps taken by the attacker to perform a ransomware attack'
  prefs: []
  type: TYPE_NORMAL
- en: '[Losing private keys or seed phrase](toc.xhtml#s171a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Losing private keys and wallet seed is so common that it is estimated that 20%
    of all bitcoin are lost and will never be recovered. When bitcoin was new and
    it had little to no value, people did not care about the private keys that much,
    so losing bitcoin was easy. Even after bitcoin started becoming a valuable wallet,
    software were not easy to use, and losing a private key was still easy.
  prefs: []
  type: TYPE_NORMAL
- en: With Hierarchical Deterministic wallets, it has become easier to manage private
    keys, but people still forget where they saved the seed and so, lose their bitcoin
    forever. Since hardware wallets have become quite common, it has become a lot
    less common to lose Bitcoins. Nevertheless, people do lose their bitcoin because
    of carelessness, natural disasters, or other such circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: '[Threat due to vulnerabilities](toc.xhtml#s172a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Bitcoin network does have certain risks because of design and ongoing technology
    improvements.
  prefs: []
  type: TYPE_NORMAL
- en: '[Transaction malleability](toc.xhtml#s173a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Transaction malleability will be discussed in detail in *[Chapter 12, Segregated
    Witness](c12.xhtml)*, so we are not discussing it here.
  prefs: []
  type: TYPE_NORMAL
- en: '[Dusting attack](toc.xhtml#s174a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A dusting attack is used to deanonymize the user. An attacker sends dust transactions
    or extremely low-value transactions to a substantial number of target addresses.
    The attacker then tracks the funds to determine which addresses belong to the
    same wallet and then tries to deanonymize the user to which the wallet belongs.
    This requires a sophisticated analysis of transactions related to dust transactions.
    Once user identity is found, the attacker performs a phishing or malware attack
    on the target user.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be understood from the following illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.19:** Steps taken by the attacker to perform dusting attack'
  prefs: []
  type: TYPE_NORMAL
- en: Dusting may be used for other purposes; for example, money launderers can send
    dust transactions to a substantial number of recipients to make such transactions
    difficult to track.
  prefs: []
  type: TYPE_NORMAL
- en: To prevent dusting attacks, a wallet should not accept small value transactions.
    Bitcoin nodes do not forward transactions with network fees smaller than the relay
    fee, which is 5000 satoshis for many nodes. This is quite high, so the relay fee
    should be itself a deterrent for dusting attacks.
  prefs: []
  type: TYPE_NORMAL
- en: '[Mempool flood attack](toc.xhtml#s175a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mempool flood attack is a type of DoS attack in which a mempool of nodes is
    filled with low-value unconfirmed transactions. This type of attack has happened
    on the Bitcoin network, which caused network fees to rise.
  prefs: []
  type: TYPE_NORMAL
- en: The attack was first reported in July 2015, and in May, August, and November
    2017, such attacks again happened on the Bitcoin network. It is suspected that
    these attacks were done to influence support for larger block sizes within Bitcoin
    developers, miners, and exchanges.
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin nodes avoid this attack by configuring the minimum relay fee a transaction
    needs to pay to get it broadcasted to the network. In Bitcoin core, this is set
    to 5000 satoshi by default. Currently, its value is nearly $2, which is still
    a significant amount to deter an attacker. Also, unlike in 2017, the transaction
    fee is much higher now as bitcoin prices have gone up, so such an attack is not
    possible anymore.
  prefs: []
  type: TYPE_NORMAL
- en: '[Selfish mining](toc.xhtml#s176a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selfish mining is a malicious mining attack where there are only a few miners
    with high mining power, but none has more than 50% mining hash power. In this
    attack, the selfish miner gets a greater hash power share by inflicting cost to
    the competing miners.
  prefs: []
  type: TYPE_NORMAL
- en: Mining hash power share is the average probability of a miner to find a block.
    Since it is an average probability, a miner with a lower probability can sometimes
    find a block faster than it would on an average. A selfish miner utilizes this
    to inflict a cost on other miners.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider a scenario in which there are three miners:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Alice: 40%, Bob: 25%, and Carol: 35%'
  prefs: []
  type: TYPE_NORMAL
- en: Suppose Carol is the selfish miner. When Carol finds a block, instead of publishing
    the block immediately, it holds it for some time and tries to find another block.
  prefs: []
  type: TYPE_NORMAL
- en: If Carol is lucky and finds another block, then she waits for another miner
    to publish a block while trying to find another block. If in the meantime, Bob
    or Alice publishes a block, then Carol publishes both the blocks. Since Carol
    has a longer chain, the other block published by Bob or Alice gets rejected. This
    inflicts a cost on the other miner, which is greater than the cost Carol has paid
    by holding block.
  prefs: []
  type: TYPE_NORMAL
- en: If Carol finds three blocks, then she waits for two blocks to get published
    by other miners. If Carol finds four blocks, then she waits for three blocks to
    get published by other miners.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, if Carol is not lucky and Alice or Bob publishes their block
    before Carol, then Carol immediately publishes the block held by her and does
    not propagate the competing block. So, even though Alice or Bob published the
    block first, some nodes will still receive Carol’s block first and will consider
    the other block as the competing chain. In this case, which chain wins depends
    on probability and the advantage Carol has in block propagation delay. Even if
    Carol has a very low chance of winning this and if her hash rate is more than
    33% of the share of network hash rate, she still will be able to increase her
    affective probability of mining a block as a selfish miner.
  prefs: []
  type: TYPE_NORMAL
- en: We can see that selfish mining does not reduce the cost of mining new blocks.
    In fact, it increases the cost of mining a block, even for Carol. Since it inflicts
    more cost on the competing miners, Carol gets the advantage.
  prefs: []
  type: TYPE_NORMAL
- en: 'This may have multiple consequences:'
  prefs: []
  type: TYPE_NORMAL
- en: Competing miners will stop their loss-making mining equipment, which will increase
    Carol’s share of the network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Competing nodes will join Carol and start mining with her, giving her more than
    a 51% share of the network hash rate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The competing node will go bankrupt and stop operation altogether, leading pool
    miners to switch to other remaining miners, which might lead Carol to have more
    than a 51% hash rate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Competing nodes will upgrade their loss-making equipment, which will cost them
    a fortune, but in the end, other miners will remain profitable and continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here’s the flowchart of the selfish mining scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.20:** Flowchart of the steps taken by the miner to perform selfish
    mining attack'
  prefs: []
  type: TYPE_NORMAL
- en: It is easy to identify if a miner is involved in selfish mining as selfish mining
    increases the likelihood of the existence of competing chains compared to the
    normal case when there is no selfish miner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Selfish mining gives the advantage to a selfish miner. but there are multiple
    reasons why miners will not want to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: Selfish mining can be easily identified. which will affect Bitcoin network reputation
    and consequently, bitcoin’s long-term value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mining has extremely high input costs and most of the time, profit margins are
    slim. So, a miner needs to look at the long term and would not want to engage
    in anything that affects bitcoin’s value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mining is done by pools that depend on pool miners. A bad reputation of the
    pool may cause pool-miners to switch to a different pool, so the pool will ultimately
    lose hash rate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Bitcoin network has largely avoided this kind of attack in the past, even
    though there may have been one or two such incidents.
  prefs: []
  type: TYPE_NORMAL
- en: The bitcoin developer community has been pushing for the adoption of the FIBRE
    protocol to reduce block propagation delay. If FIBRE is widely used, it will become
    exceedingly difficult for miners to attack networks by selfish mining.
  prefs: []
  type: TYPE_NORMAL
- en: '[BGP hijacking attack](toc.xhtml#s177a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: BGP stands for **Border Gateway Protocol**. It is a gateway protocol that exchanges
    reachability information between Autonomous Systems or AS. AS is like the network
    created by an ISP or Internet Service Provider.
  prefs: []
  type: TYPE_NORMAL
- en: There are multiple ways BGP hacking can be used to attack Bitcoin networks.
    The reason this attack is possible is bitcoin mining is highly centralized as
    there are only a few mining pools controlling most of the network hash rate. Additionally,
    Bitcoin network messages are unencrypted and so, can be modified by an attacker.
  prefs: []
  type: TYPE_NORMAL
- en: By hacking the BGP server in AS, attackers can delay, modify, or even drop Bitcoin
    network messages. This can be used to perform multiple types of attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Network partitioning attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Network partitioning means disconnecting nodes in such a way that it creates
    a disjoint network.
  prefs: []
  type: TYPE_NORMAL
- en: If an attacker gets control of ISP servers responsible for sending BGP routing
    messages, it can effectively partition the network into two disjoint networks.
  prefs: []
  type: TYPE_NORMAL
- en: Because of partition attacks, mining pools can unknowingly start working on
    separate chains. This will appear as a DoS attack as the mining hash-rate share
    between mining pools will change, and it will be quickly known to the world.
  prefs: []
  type: TYPE_NORMAL
- en: However, till the issue gets resolved, the attacker can broadcast two different
    transactions that use the same UTXOs in both the network and perform a double-spend
    attack. If the issue does not get resolved till six confirmations are received,
    then both the retailers would have accepted the payment, essentially double-spending.
    When the network partition gets removed, the chain with the greater accumulated
    Proof-of-work gets accepted and the other chain gets rejected. The merchant whose
    transaction was rejected will be at a loss.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be understood with the following illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.21:** Illustration of network partition by BGP hijacking attack'
  prefs: []
  type: TYPE_NORMAL
- en: If you are a merchant, it makes sense to watch hash rate distribution among
    mining pools.
  prefs: []
  type: TYPE_NORMAL
- en: Delay attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A variant of the partitioning attack is the delay attack. In this type of attack,
    instead of creating disjoint networks, the attacker delays messages from one set
    of AS to another set of AS, essentially giving an advantage to some AS over others.
  prefs: []
  type: TYPE_NORMAL
- en: In this attack, the attacker keeps the victim uninformed about the latest blocks.
    If the victim is a merchant, then the merchant will not know that the spending
    is already done by the attacker and so, will successfully double-spend. If the
    victim is a miner, then the miner will be working on an obsolete chain wasting
    hash power leading to losses.
  prefs: []
  type: TYPE_NORMAL
- en: If you are a merchant, then it makes sense to monitor the latest blocks through
    applications running on different AS such as cloud platforms or web-APIs provided
    by popular websites.
  prefs: []
  type: TYPE_NORMAL
- en: '[0-confirmation attack:](toc.xhtml#s178a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A zero-confirmation attack can be executed if a merchant does not wait for
    transaction confirmation. To execute this attack, the attacker creates two different
    transactions utilizing the same UTXO: one for paying the merchant, and the other
    for moving the value to a different address. The attacker publishes the transaction
    for the merchant only to the merchant’s node while publishing the other transaction
    simultaneously to other nodes.'
  prefs: []
  type: TYPE_NORMAL
- en: The merchant nodes accept the transaction it received first, which is the transaction
    paid to him, and rejects the other one. If the other transaction gets into a block,
    then the transaction containing payment to the merchant is rejected, and the merchant
    loses the payment.
  prefs: []
  type: TYPE_NORMAL
- en: The attacker can connect to multiple distant nodes to publish the other transaction
    to improve the probability of success.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the illustration of the attack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.22:** Steps that an attacker takes to perform a 0-confirmation attack'
  prefs: []
  type: TYPE_NORMAL
- en: To execute this attack, the attacker needs to know the merchant’s node address
    and needs to connect to it. This attack becomes easier if the merchant is not
    hiding its IP address using the TOR network. The attacker can find out the merchant’s
    IP address by pinging on his website. Alternatively, if it’s a physical store
    that provides WIFI, then the attacker can find IP addresses through the public
    network. There could be other ways to find IP addresses, like using phishing attacks.
  prefs: []
  type: TYPE_NORMAL
- en: '[Hiding hash rate](toc.xhtml#s179a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *[Chapter 6, Blockchain, Transactions, and Mining](c06.xhtml)* under Topic
    ***Coinbase*** *t****ransaction*****,** you learned that miner adds fingerprint
    in the mined block. This fingerprint can be used to determine the relative hash
    rate contribution of each mining pool. Since we can calculate network hash rate,
    we can utilize this information to calculate the hash rate of each mining pool.
  prefs: []
  type: TYPE_NORMAL
- en: However, this happens because miners tell us when they have successfully mined
    a block. If they don’t, then they can easily increase their hash-rate contribution
    without anyone knowing it, except its pool miner who rarely bothers to know. Pool
    miners don’t even try to know if they are really mining Bitcoin or Bitcoin Cash
    or Bitcoin SV.
  prefs: []
  type: TYPE_NORMAL
- en: '[Blacklist addresses](toc.xhtml#s180a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to estimates prior to mining crackdown, Chinese miners contributed
    almost two-thirds of the Bitcoin network hash rate. Consequently, the Bitcoin
    network was prone to Chinese political decisions. For instance, China could blacklist
    Bitcoin addresses belonging to a specific entity, such as businesses, institutions,
    or individuals.
  prefs: []
  type: TYPE_NORMAL
- en: As a clarification, this attack is not about China, because if the mining hash
    rate of another country or a group of countries was higher than 50% of the network
    hash rate, then those countries could also blacklist addresses belonging to specific
    entities.
  prefs: []
  type: TYPE_NORMAL
- en: Since China’s hash rate was greater than 50%, it could ignore any block, which
    includes transactions originating from or received by certain entities, and it
    would be always able to mine longer chains. Consequently, other miners would also
    have to comply with Chinese law enforcement, otherwise they would make losses
    on mined blocks and will soon become bankrupt.
  prefs: []
  type: TYPE_NORMAL
- en: A country with high network hash rate can also perform a variation of Blacklist
    attack where even with lower than 50% mining hash power it can enforce blacklisting
    by utilizing selfish mining technique.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen recently that a miner accepted **Office of Foreign Assets Control**
    (**OFAC**) compliance norms. OFAC is a financial intelligence and enforcement
    agency of the US. Consequently, the miner blacklisted non-compliant transactions
    for sometime but the miner later agreed to not enforce OFAC
  prefs: []
  type: TYPE_NORMAL
- en: '[Replay attack](toc.xhtml#s181a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the Bitcoin network has a hard-fork and a new type of cryptocurrency is
    created, the new type of coin is akin to a new coin created from scratch. except
    that it shares the same history as the parent cryptocurrency. It is an unnecessary
    burden for a new cryptocurrency to have a history that is not useful. However,
    the benefit is that the new currency can have a name like the original coin so
    that it looks familiar and can easily get recognized.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an illustration of a hardfork:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.23:** illustration of a hardfork'
  prefs: []
  type: TYPE_NORMAL
- en: If the new cryptocurrency maintains the same addressing scheme as the parent
    cryptocurrency, then it doesn’t need to onboard users as the users of parent cryptocurrency
    automatically become users of new cryptocurrency. Additionally, their UTXO is
    valid on both chains.
  prefs: []
  type: TYPE_NORMAL
- en: However, this has issues as people can mistakenly send coins to the receiver
    on a different chain and lose the payment.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, if transaction format or address schemes are not changed, then
    a transaction that is valid in one network will be also valid in another network.
    These valid transactions can be replayed in different networks and coins can be
    stolen. This is called a ***Replay attack***.
  prefs: []
  type: TYPE_NORMAL
- en: When a hardfork happens, many users realize that they have additional coins
    in the new forked network. They transfer or sell their coins in order to make
    quick money, but this transaction can be replayed by the attacker on the original
    higher valued network and since the transaction has a much higher value on the
    original network, the attacker gets a bigger value.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be understood from the following illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.24:** Bob performing a replay attack'
  prefs: []
  type: TYPE_NORMAL
- en: In our view, it is unethical for a cryptocurrency to not implement a new addressing
    scheme and transaction format.
  prefs: []
  type: TYPE_NORMAL
- en: '[Empty block mining](toc.xhtml#s182a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bitcoin consensus rules do not stop miners from mining empty blocks. This means
    in the race to find the correct nonce, a miner can just mine an empty block, and
    it will have the advantage over other miners, which will be using additional processing
    power in selecting, adding transactions to blocks, and calculating total network
    fees they have collected.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following chart shows the transaction fees as a percentage of block reward:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.25:** Transaction fee as a percentage of Block Reward'
  prefs: []
  type: TYPE_NORMAL
- en: After the recent block reward update, block reward in each block is 6.25![](images/Bitcoin.jpg)
    and network fees collected per block is nearly 0.7![](images/Bitcoin.jpg), which
    is significantly large, and no miner will want to lose that amount.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following chart shows the number of empty blocks mines each year:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.26:** Count of Empty blocks mined each year'
  prefs: []
  type: TYPE_NORMAL
- en: We also need to realize that mining has become more competitive over the years,
    which means miners have to spend a lot of money to buy the most efficient equipment.
    Due to this, mining empty blocks is not in the interest of the miners. Consequently,
    as we can see in the preceding chart, the number of empty blocks has reduced over
    the years.
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitcoin mining centralization](toc.xhtml#s183a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We know that miners join and form a pool. Few Mining pools control most of the
    network computational power.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows the distribution of mining hash rate among mining
    pools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-8.27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8.27:** Hash rate distribution of each mining pool'
  prefs: []
  type: TYPE_NORMAL
- en: At the time of authoring the book, the top 4 mining pools were F2Pool, AntPool,
    Poolin, and BTC.com.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is expected mining should get more decentralized over time. In fact, it
    has already become more decentralized in the last 2-3 years. There are two reasons
    why it might happen:'
  prefs: []
  type: TYPE_NORMAL
- en: Mining pools are mostly located at colder places where electricity is subsidized.
    This affects the people of those places. As mining energy need increases, it will
    discourage the government to subsidize power and encourage them to move to the
    off-grid energy source. This will allow miners to move to locations that get more
    sunlight or wind or waste energy from natural gas or oil mines.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chip miniaturization allows producing more efficient microprocessors, which
    improve ASIC machines to have better energy efficiency. Since ASIC machines were
    improving quite rapidly, the miners closer to chip manufacturing had the advantage
    over miners which were far away as transportation adds to cost and time. As chip
    miniaturization is hitting the limits, efficiency improvements have slowed down
    and so, the advantage is quickly going away. This will allow miners from other
    locations to compete with Chinese miners, leading to further decentralization
    of mining hash power.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 51% Attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A 51% attack is the attack in which a miner has more than half of the network
    hash rate. In such a condition, the miner can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove a transaction from a block in the blockchain by mining an already mined
    block.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Censor individuals by not including transactions that send or receive bitcoin
    belonging to addresses owned by specific blacklisted addresses of businesses,
    institutions, or individuals.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change its own recent transactions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the top four miners join hands, their combined hash rate will be more than
    50%, and they can out-compete the rest of the miners and perform a 51% attack.
  prefs: []
  type: TYPE_NORMAL
- en: In July 2014, Ghash.io reached more than half of the network computational power,
    but it later agreed that it will never cross 50% computational power. It is important
    to understand why we never had such a scenario since then and why any miner would
    agree to not take over the network.
  prefs: []
  type: TYPE_NORMAL
- en: Mining also adds value to the network, which means even though miners can join
    and block transactions from specific countries or exchanges, they will not do
    anything that will get noticed and will affect the network, which is their source
    of earning.
  prefs: []
  type: TYPE_NORMAL
- en: '[Sybil attack](toc.xhtml#s184a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the case of the Sybil attack, the attacker creates a substantial number of
    nodes. The victim node will only connect to an attacker node. The attacker nodes
    do not forward transactions and blocks to the target node, essentially disconnecting
    it from the network. The attacker can send the blocks it has created to the target
    node containing transactions that the attacker wants the node to get. Since the
    target node is only getting blocks from attacking nodes, it considers the transaction
    valid even though it was already spent in the actual network.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid Sybil attack, Bitcoin core client only makes one connection in /16
    addresses, which means attacking nodes will need to be widely distributed and
    be in multiple /16 addresses and still isolate the node, which is not possible
    as then the attacker will have to take over the entire Bitcoin network.
  prefs: []
  type: TYPE_NORMAL
- en: '[Denial-of-Service (DoS) Attack](toc.xhtml#s185a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A denial-of-service attack or DoS attack is an attack in which the attacker
    floods the target with lots of data, which makes it busy and so the target is
    unable to provide the service it needs to provide.
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin nodes are robust in handling denial-of-service attacks, but this does
    not mean that DoS attacks can’t happen to Bitcoin nodes. If malicious nodes try
    to flood a node, it will simply blacklist those connections and close them. Flooding
    with a valid message is costly, and invalid messages get quickly rejected. Additionally,
    there are limits being set on transactions, relay fees, and block size by nodes
    to avoid such attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the ways nodes avoid being flooded by DoS messages:'
  prefs: []
  type: TYPE_NORMAL
- en: Transactions greater than 100 Kbytes are considered nonstandard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Block size is limited to 1MB vsize.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nodes do not accept or forward transactions with network fees lesser than the
    relay fee set by the node.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nodes do not forward a double spent transaction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nodes do not forward orphan transactions. Transactions that do not have known
    unspent transactions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nodes limit the number of orphan transactions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nodes ignore big orphan transactions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nodes do not forward orphan blocks, i.e., blocks that do not have known the
    previous block.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nodes do not forward blocks that have already been seen or forwarded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bans IP Addresses that misbehaves for 24 hours by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintains DoS score for each connected node and disconnects if a node misbehaves
    multiple times.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nodes have an upper limit of the number of signatures they can accommodate in
    the signature cache.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limits the size of the script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limits the keys in OP_CHECKMULTISIG operation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limits the size of each value in a transaction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only UTXOs are stored in memory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limits the number of signature checks a transaction input may request.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more detailed information, refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[https://en.bitcoin.it/wiki/Weaknesses#Denial_of_Service_.28DoS.29_attacks](https://en.bitcoin.it/wiki/Weaknesses#Denial_of_Service_.28DoS.29_attacks)**.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Quantum computing attack](toc.xhtml#s186a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quantum computers use superimposition of electron states and entanglement of
    electrons to perform complex operations, which are not possible by classical computers.
    However, quantum computers are not general-purpose computers, and they are useful
    for only certain types of operations.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike conventional computers, quantum computers use qubits instead of bits.
    While bits can be either 0 or 1, qubits can be both 0 and 1 at the same time.
    So, one qubit has 2 superpositions of states, and N qubits will have 2 to the
    power N superposition of states. This makes N qubit quantum computer equivalent
    to the 2^N bit classical computers. A 500-qubit quantum computer is a 2^500 classical
    computer, which is more than the number of atoms in the whole universe.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there is a catch: the moment we try to find the quantum states, the
    superposition is lost, and the qubits become normal bits. This is called **quantum
    decoherence**. So, any quantum computation must finally result in non-superimposed
    bits. This makes Quantum computers difficult to program and requires a complete
    redesign of the way computation happens right from the gates to programming language.
    Additionally, it is only suitable for calculations that require a very high level
    of parallelism but results in a relatively short value.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following algorithms that can be used by attackers against Bitcoin:'
  prefs: []
  type: TYPE_NORMAL
- en: Shor’s algorithm, which, according to estimates, will need nearly 2500 qubits
    to crack the 256-bit ECDSA algorithm used by Bitcoin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grover’s algorithm can exponentially speed up Bitcoin mining.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SHA-256 hashing used by Bitcoin is safe from Quantum computers.
  prefs: []
  type: TYPE_NORMAL
- en: In December 2020, Chinese researchers achieved 76 qubit systems. There are still
    problems with Quantum computers. The biggest problem that Quantum Computer faces
    is Quantum Decoherence, which leads to errors and loss of coherence (superposition).
  prefs: []
  type: TYPE_NORMAL
- en: Quantum decoherence can arise from any environmental factors, such as thermal
    fluctuations, radiations, and magnetic fields. This makes a qubit very unstable,
    and superimposition can be lost within a fraction of milliseconds. Researchers
    try to increase decoherence time by creating an environment that has a very low
    temperature, very low radiation, and a very low magnetic field. We have not been
    successful in achieving that, and as of now, a Quantum computer, irrespective
    of its qubit count, cannot perform any deep operation, which makes them almost
    useless for any real-world applications.
  prefs: []
  type: TYPE_NORMAL
- en: The problem of noise-induced quantum error can be solved by quantum error correction.
  prefs: []
  type: TYPE_NORMAL
- en: This may change in the future as we become better at controlling these environmental
    factors. However, we don’t know when or if quantum computers will ever be a threat
    to asymmetric cryptography.
  prefs: []
  type: TYPE_NORMAL
- en: If we can build significantly reliable quantum computers with several thousand
    qubits sufficient to crack 256-bit ECDSA used for Bitcoin, then it would only
    affect bitcoins, which is held in addresses with known public keys. As you learned
    in the previous chapters, it is advisable not to reuse addresses. If we don’t
    reuse addresses, hackers cannot use quantum computing to steal bitcoin.
  prefs: []
  type: TYPE_NORMAL
- en: If quantum computers can crack Bitcoin public keys, then Bitcoin can move to
    quantum-resistant algorithms such as Lamport signatures.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, Grover’s algorithm can only accelerate nonce search and give
    an advantage to the miner using quantum computers. However, like other mining
    devices, it will be competing against other quantum computers doing the mining.
    The scenario will be like the situation when ASIC miners introduced mining advantage.
    This does not affect the network; instead, over time, it improves the security
    of the network.
  prefs: []
  type: TYPE_NORMAL
- en: '[Hidden bugs, bug exploit, and reorg](toc.xhtml#s187a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is always possible that there exists an unidentified bug in the Bitcoin core
    software, consensus rules, etc. which may get exploited by an attacker. This could
    be an inflation bug that would allow an attacker to pay themselves extra bitcoin
    and would lead to an increase in bitcoin supply. It could lock unspent transactions
    indefinitely. It can affect the miner or user.
  prefs: []
  type: TYPE_NORMAL
- en: If a bug is exploited, then it needs to be identified immediately or within
    a few blocks. Once identified bug needs to be fixed, it may be required for the
    Bitcoin community to plan Bitcoin blockchain reorg. Blockchain reorg means convincing
    Miners to upgrade Bitcoin software, invalidating the blocks from the exploited
    blocks, and restart mining.
  prefs: []
  type: TYPE_NORMAL
- en: When a block is mined, the miner cannot immediately move the newly minted bitcoin.
    The miner needs to wait for 100 blocks before they can move it. This allows developers
    to fix the bug and convince miners to reorg before 100 blocks get mined, which
    is roughly 16 hours and 40 minutes. The transactions that were confirmed during
    this time will need to wait to get confirmed again. It is also possible that the
    transaction that was confirmed earlier may not get confirmed again before getting
    dropped by the mempool of most nodes. This will negatively affect the Bitcoin
    network’s credibility.
  prefs: []
  type: TYPE_NORMAL
- en: '[Frauds and robbery](toc.xhtml#s188a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bitcoin is very valuable, so it attracts criminals. Like gold, bitcoin is sometimes
    robbed at gunpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin can also be stolen by fraudsters through social engineering like using
    rewards, urgency, and fear or through fake services. The frauds could be like
    banking frauds where one gains access to crypto exchange through OTP. A fraudster
    can ask you to fill in details and can take your PIN or wallet seeds. A fraudster
    can also ask you to transfer coins to your wallet in return for service.
  prefs: []
  type: TYPE_NORMAL
- en: '[Conclusion](toc.xhtml#s189a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the limitations of Bitcoin design, why those
    limitations are necessary, and what developments are happening to address those
    limitations. You also learned about the different ways bitcoin holders and networks
    could be attacked, the different ways by which merchants, miners, and holders
    of Bitcoin can mitigate most of those risks, and why some of the risks are not
    really a risk because those are either too difficult or are financially unviable
    for an attacker.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed how Bitcoin centralization is both bad for network security and
    good for getting enhancement accepted by the Bitcoin mining community. We also
    saw how Bitcoin energy usage is good for the environment.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about the Bitcoin address format and understand
    how to generate the private key, public key, and addresses. You will also learn
    about how you can create your bitcoin wallet and how you can protect the wallet
    from hackers.
  prefs: []
  type: TYPE_NORMAL
- en: '[Points to remember](toc.xhtml#s190a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blockchain verification time is the most important reason due to which Bitcoin
    block size is limited to 1MB to 4 MB.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By replacing multiple signatures and complex scripts with a single public key
    and signature using Taproot, signature aggregation, and Schnorr signatures, we
    can accommodate more transactions in a block and have better privacy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightning Network is a layer two payment protocol.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightning Network provides privacy as individual transactions are not recorded
    on the Bitcoin blockchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightning Network provides scaling as an unlimited number of transactions can
    happen between peers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitcoin mining helps lower carbon footprint by encouraging the use of off-grid
    renewable energy sources and utilizing waste energy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitcoin mining difficulty is adjusted at every 2016 block.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mining pools being centralized are prone to natural disasters, power failures,
    government crackdowns, or DDoS attacks, which leads to drop in network hash rate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A sudden drop-in hash rate causes block time to increase and network fees to
    spike.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of legal protection encourages fraud and illegal activities in bitcoin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most central banks discourage the use of bitcoin and other cryptocurrencies
    to protect their currencies against capital flight.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High entropy random number generators help generate private keys that are safe
    from brute force attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SHA256 is collision-resistant.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Salt protects against rainbow table attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Low-round PBKDF2-HMAC-SHA512 algorithms are prone to brute force attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hierarchical Deterministic Wallets, along with 12- to 24-word mnemonic code,
    eases securing of private keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A trojan is a malware that disguises itself as legitimate software.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spyware is malicious software that gets installed without the victim’s knowledge
    and steals information and sends it to attackers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social Engineering is the use of psychological manipulations in order to collect
    private information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transaction malleability bug affects the non-SegWit transactions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BIP62 solves most of the transaction malleability issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitcoin nodes, by default, enforce a minimum transaction fee on all the received
    transactions in order to accept and forward them. This fee is called the relay
    fee.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relay fee protects addresses from dusting attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To protect against dusting attacks, a wallet should not accept very small value
    transactions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In mempool flood attack, an attacker publishes a large number of small value
    transactions, which increases network fees.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mempool flood attacks have become unviable because even relay fee is not cheap.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In selfish mining, a malicious mining pool takes greater control over the network
    hash rate by inflicting cost to the competing mining pools.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selfish mining is easy to identify as it causes a greater occurrence of competing
    chains.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FIBRE stands for Fast Internet Bitcoin Relay Engine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FIBRE is a protocol design that can achieve propagation delay nearly close to
    the physical limit with the help of a well-managed network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FIBRE reduces propagation delay to less than a second, which gives little room
    for a malicious mining pool to attack networks using selfish mining.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mining pools being centralized are also prone to network partitioning and delay
    attacks using BGP hijacking.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unconfirmed transactions, even if those are SegWit, are prone to double-spend
    attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always run a full node to connect using Tor routing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miners add fingerprints in the coinbase transaction of a newly mined block,
    which helps the network know the mining hash rate of each miner.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A miner can hide its real hash rate and can mine over 51% hash rate if it does
    not add its fingerprints.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since Bitcoin mining is not well distributed across geographies, it is easy
    for governments to enforce blacklisting of addresses based on their political
    agenda.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A hardfork on Bitcoin consensus can lead investors to replay attacks who try
    to take the profit out of newly added coins.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardfork coin having the same address and transaction format as the parent coin
    is the reason for the existence of Replay attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the top four mining pools join hands, then they can execute a 51% attack
    on the network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 51% attacker can force the network to blacklist addresses or double-spend
    the transactions it controls.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a Sybil attack, the attacker eclipses the entire network for a victim by
    launching a large number of nodes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitcoin core client only makes one connection in /16 addresses to prevent Sybil
    attack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a DoS attack, the attacker floods the victim with lots of data, which prevents
    the victim from providing the intended service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quantum computers use superimposition of electron states and entanglement of
    electrons to perform complex reversible operations, which are not possible by
    classical computers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quantum computers are prone to even the smallest environmental disturbances,
    which cause waveform collapse, and this phenomenon is called quantum decoherence.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quantum computers can theoretically crack the 256-bit ECDSA algorithm used by
    Bitcoin using few thousand qubits.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quantum computers can use Grover’s algorithm to accelerate Nonce search in bitcoin
    mining.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The miner needs to wait for 100 blocks to use the minted coins, which gives
    a window of several hours for developers to fix an exploit and reorg the blockchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Questions](toc.xhtml#s191a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Explain how block size affects Initial Block Download (IBD).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How will the decentralization of Bitcoin mining secure the Bitcoin network?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain all the necessary precautions a retailer should take to protect itself
    from double-spend attacks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain all the necessary precautions a miner should take to protect against
    different types of attacks and improve profitability.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain all the necessary precautions a Bitcoin user should take to protect
    against different types of attacks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain why privacy is important, and explain the different ways in which Bitcoin
    user can protect their privacy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True/False:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SegWit transactions are safe against 0-confirmation attacks.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Bitcoin is fungible because it is replaceable by an equal quantity of bitcoin
    received from different sources.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CoinJoin is better than mixer services because mixers can steal your coins.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SHA256 is safe against quantum computation attacks.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Grover’s algorithm will end bitcoin mining, and Bitcoin will need to change
    the mining algorithm.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill in the blanks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a _________ attack, the attacker floods a node with messages, so the node
    fails to serve other legitimate nodes.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In a ________ attack, the attacker floods the Bitcoin network with transaction
    messages, which increases transaction fees.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: An attacker can partition Bitcoin network by hijacking _________.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Replay attack happens when hard forked coin uses the same __________ format
    and ___________ scheme.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: By __________ mining, a mining pool with a hash rate greater than 25% can take
    greater control over network hash power.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Transaction ______________ was resolved with _____________ witness enhancement.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
