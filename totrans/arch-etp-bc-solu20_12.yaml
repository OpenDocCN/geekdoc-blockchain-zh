- en: Chapter 11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blockchain Security and Threat Landscape
  prefs: []
  type: TYPE_NORMAL
- en: This chapter covers the basics of how blockchains fit into the overall picture
    of IT security. The chapter's main mission is to focus on blockchain security,
    so if you are not familiar with IT networking or IT security best practices and
    concepts, you may need to follow up with other resources.
  prefs: []
  type: TYPE_NORMAL
- en: I will cover many of the vulnerabilities in the threat landscape that a blockchain
    network could be exposed to, including DDOS attacks and 51 percent attacks. The
    focus will be on Ethereum, Corda, Hyperledger, and Quorum.
  prefs: []
  type: TYPE_NORMAL
- en: I will discuss how hashing, encryption, and decryption play into blockchain
    security. Risk assessments and risk mitigation also will be covered in detail.
  prefs: []
  type: TYPE_NORMAL
- en: I will then cover security concerns surrounding smart contracts, including legal
    enforcement and legal prose.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, I will dive into each enterprise blockchain security-related feature
    and discuss the most common aspects of the blockchains that can affect security
    and privacy.  ## Blockchain Security Basics'
  prefs: []
  type: TYPE_NORMAL
- en: A blockchain is essentially a distributed ledger that in most cases should be
    immutable—that is, the information (transactions) that is written to the ledger
    cannot be modified or deleted. This feature of a blockchain provides some distinct
    advantages over a traditional centralized database. For example, a centralized
    database could be tampered with.
  prefs: []
  type: TYPE_NORMAL
- en: A traditional database is centralized, meaning the control of data is managed
    by a central authority. The distributed ledger is different than the approach
    for deployment since it is a distributed database and not centralized. In a decentralized
    database, the data is not only kept in one location but generally replicated to
    all other nodes in the network, which could be located all over the world. For
    example, the Ethereum distributed ledger is on a worldwide computer network with
    other devices. Because it's on a shared network, it should be expected to have
    the potential of being exposed to network vulnerabilities and for that matter
    even concerns around privacy, security, and availability.
  prefs: []
  type: TYPE_NORMAL
- en: In regard to blockchain security, we need to consider the technology it has
    been derived from in a holistic manner. Blockchains are not built from one technology
    but from multiple technologies, which can expose the blockchain nodes to different
    threats. These threats could be malware, network attacks, data theft, and a multitude
    of other issues that you likely already deal with in the realm of traditional
    IT.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchains are built from three distinct technologies.
  prefs: []
  type: TYPE_NORMAL
- en: P2P networks, which can be exposed to distributed denial-of-service (DDoS) attacks
    wherein a node's buffer is overflowed, for example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private/public key encryption, which can be cracked through the use of reverse
    engineering or through flaws that affect keys generated for the RSA and OpenPGP
    algorithms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Programs (smart contracts), which use development languages such as JavaScript,
    Golang, and C++, which have their own unique vulnerabilities, threats, and concerns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because these technologies all have their own specific vulnerabilities, it's
    important to understand the technologies involved in order to address any possible
    vulnerability of the blockchain ledger and the components of the network, development
    languages, client applications, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '### Confidentiality, Integrity, and Availability'
  prefs: []
  type: TYPE_NORMAL
- en: The CIA triad is a well-known staple in the world of IT security. It is one
    of the oldest and most popular security frameworks connected with IT security,
    and it certainly should be used with blockchain as well.
  prefs: []
  type: TYPE_NORMAL
- en: As shown in [Figure 11.1](#c11-fig-0001), the CIA triad comprises three main
    components.
  prefs: []
  type: TYPE_NORMAL
- en: '**Confidentiality**—The information cannot be understood by anyone other than
    for whom it was unintended'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integrity**—The information cannot be altered in storage or transit between
    sender and intended receiver without the alteration being detected'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication**—The sender and receiver can confirm each other''s identity
    and the origin/destination of the information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Diagram depicting a triangle with on the three sides.](images/c11f001.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 11.1**](#R_c11-fig-0001) The CIA triad'
  prefs: []
  type: TYPE_NORMAL
- en: The CIA triad model's main goal is to help organizations to structure their
    security posture appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: One area of concern is around consortium networks where potential competitors
    are participating on the same network as your company. One way to mitigate concerns
    around privacy or confidentiality is to enable blockchain channels between peers
    that are not visible to all members of a consortium network.
  prefs: []
  type: TYPE_NORMAL
- en: Data confidentiality can also be potentially hidden using cryptography or more
    advanced zero-knowledge proof schemes that may not be available in all blockchains.
    For example, if your enterprise does not use channels for privacy, then another
    competitor on the same blockchain network may gain insight into your transactions
    between other peers in the consortium blockchain. These transactions could provide
    your competitor insight into what your company is doing and therefore bring competitive
    advantages. When properly implemented on a blockchain network, channels provide
    confidentiality.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing confidentiality is not really possible on a permissionless blockchain.
    However, it's more than reasonable to implement and expect privacy on Corda or
    Hyperledger Fabric since these platforms are membership based.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hyperledger Fabric implements confidentiality differently by leveraging different
    consensus methods in its architecture through the use of an execute-order-validate
    consensus approach. Hyperledger Fabric also supports channels natively. These
    channels are private channels that provide confidentiality on a shared blockchain
    infrastructure such as a consortium blockchain.  ### Blockchain Best Practices'
  prefs: []
  type: TYPE_NORMAL
- en: 'As with just about anything IT related, there are best practices to consider
    when implementing, managing, or securing your blockchain. This section focuses
    on three areas: high-level best practices, software development best practices,
    and wallet best practices.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### HIGH-LEVEL BEST PRACTICES'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some common high-level best practices your enterprise should consider
    with your blockchain project for ensuring security, privacy, and confidentiality:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the blockchain vendor best practices focused on blockchain security
    for the development of the smart contracts. (Corda, for example, has detailed
    documentation.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement vendor best practices for crypto wallets if applicable for your enterprise
    environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevent access to only those members that require access with close adherence
    to the least privilege best practice.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deny all attempts to change data or modify your client applications without
    a review process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guard your encryption keys with solid security standards so they are not compromised.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document a concise membership policy with acceptable rules and a permissioning
    process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement decentralized identity as an approach to mitigate password-related
    concerns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Train your developers and blockchain users on best practices for IT security.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audit your blockchain applications, networks, and nodes routinely for appropriate
    membership but likely vulnerabilities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read all vendor or consortium documentation before implementation and after
    implementation and subscribe to the appropriate security bulletins and blockchain
    newsletters. If your blockchain has paid support, then contact your vendor for
    additional help.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ethereum, Hyperledger, Corda, and Quorum will have different recommended best
    practices and instructions for implementing specific services. Following the vendor
    or the consortium documentation should be the first step when designing a secure
    blockchain for your enterprise.  #### SOFTWARE DEVELOPMENT BEST PRACTICES'
  prefs: []
  type: TYPE_NORMAL
- en: Developing your blockchain services such as smart contracts or the client applications
    that use the blockchain with a development approach that follows best practices
    can certainly provide value. The value provided could be around reducing risk
    in both your development and deployment cycles.
  prefs: []
  type: TYPE_NORMAL
- en: As a previous developer who has worked in numerous enterprises, I feel you can
    benefit by adhering to some common best practices.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to remove security threats or vulnerabilities is to actually identify
    them during the development process. Identifying vulnerabilities after the development
    process, such as in the production modes, means that your blockchain has been
    deployed with vulnerabilities. Results are based on whether you are proactive
    or are reactive in the software process, such as DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: An agile DevOps-focused environment is clearly the most effective when properly
    invested in by the enterprise to mitigate rookie mistakes in development.
  prefs: []
  type: TYPE_NORMAL
- en: The following are the most common best practices I recommend for securing your
    code development resources. Also included are ways to reduce your enterprise's
    risk to security exploits.
  prefs: []
  type: TYPE_NORMAL
- en: Use a software development lifecycle (SDLC), such as Agile, to facilitate best
    practice processes to design, develop, and test high-quality software programs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Implement a DevOps-based operation. In the simplest terms, DevOps represents
    the intersection of two large trends in software development: Agile development
    and Lean operational processes. Agile software development promotes the collaboration
    of the whole enterprise and even can involve customers as part of the processes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audit your smart contracts effectively, as smart contracts in most blockchains
    are immutable and cannot be deleted or modified later. The audits should be performed
    on a release candidate (RC), the final stage before software is launched.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage your smart contract releases in an effective software release lifecycle
    such as a release candidate (RC).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove code churn by performing an audit on a release candidate (RC). This can
    be done by using a mainnet address, which is your production network, and then
    comparing the release candidate with your development network, which is your testnet.
    Code churn is a common practice to measure the performance of both the developer
    and the code they turn out, which can affect the value of code/program. You can
    use a free tool called Gitprime to obtain this insight. Gitprime offers a wealth
    of features to visualize the data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validate your source code to ensure the “validated” build is uploaded from the
    proper repository and is a secure copy. Use a source code validator tool to verify
    that source code matches the bytecode at the specific address that is required
    for deployment and matches the compiled output from source code. One tool that
    is used for source code validation with Ethereum development is called the Ethereum
    Bytecode Verifier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more on blockchain development best practices, refer to [Chapter 10](c10.xhtml),
    “Blockchain Development.”  #### WALLET BEST PRACTICES'
  prefs: []
  type: TYPE_NORMAL
- en: Some security-related best practices revolve around how you store your private
    keys and how you secure your blockchain wallets. Wallets are, of course, a requirement
    to maintain in Ethereum development so that your developers will be able to develop,
    test, and integrate smart contracts into your token platforms. Protecting these
    wallets and the keys is critical because Ether, when stolen or lost, is not likely
    going to be recovered. Losing your Ether wallet private keys could also be a costly
    way to lose your Ether tokens.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should consider the following best practices:'
  prefs: []
  type: TYPE_NORMAL
- en: Restrict unsupervised access with Ethereum wallets whether on a web-based wallet
    or a hardware wallet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide a strict acceptable user policy (AUP) that ensures strong passwords
    are maintained.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Close all network ports that do not need to be open and maintain a strict firewall.
    A network assessment should identify the ports.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practice frequently changing address schemes with your Ethereum wallet transactions.
    A common practice is to use a different address for every transaction. This can
    reduce brute-force guessing attempts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure multiple signatures (Multi-sig) with your private keys to deter most
    common breach attempts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform audits on your Ethereum wallet balances and your user base to ensure
    the security procedures are followed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Corda, Quorum, and Hyperledger Fabric implementations do not have wallets,
    and therefore wallets should not be a concern. However, you may have off-chain
    services that go to a crypto exchange as part of your enterprise application.
    If this is the case, then ensure that your user base has best practices implemented
    as well as being clearly defined for them. If your users are not trained and provided
    specific instructions, then the risk of security vulnerabilities could easily
    exist in your enterprise.  ### Blockchain Security Audits'
  prefs: []
  type: TYPE_NORMAL
- en: Security audits need to be performed regularly, whether that's every month or
    every quarter. It is not possible to audit every device on the network every time,
    so considering your blockchain audit schedule is really important.
  prefs: []
  type: TYPE_NORMAL
- en: From a blockchain perspective, security audits identify vulnerabilities and
    certify the functional correctness of your blockchain code, smart contracts, and
    blockchain projects.
  prefs: []
  type: TYPE_NORMAL
- en: Hiring an experienced code auditor with blockchain expertise is critical for
    your success.
  prefs: []
  type: TYPE_NORMAL
- en: 'The common security code audit processes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Static code review, also known as source code analysis, is performed during
    a code review. This review is focused on finding vulnerabilities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data flow analysis is used to collect runtime information about data in the
    software program while it is in a static state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code analysis can be manual or automated. In manual reviews, also known as secure
    code reviews or dynamic reviews, code is reviewed line by line to look at every
    detail. Automated reviews perform more of a scan and generally do not test every
    link or function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taint analysis is an audit method that checks variables that can be modified
    by the user input. Some languages have this feature built in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test coverage analysis is a focused technique that determines which test cases
    are going to be covering the application code. This form of testing also determines
    how much code is exercised when running test cases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expert code analysis is performed by a third-party software coding expert/auditor
    who reviews the code to determine whether there are concerns such as vulnerabilities
    or fraudulent transactions. The auditor may even reverse engineer the software
    program as part of the audit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I will address most of these during the chapter in various levels of detail.  ###
    Blockchain Security Assumptions'
  prefs: []
  type: TYPE_NORMAL
- en: When considering security in blockchains, you should expect the security of
    the cryptographic algorithms to be implemented appropriately. At least that is
    what is assumed in most blockchain implementations.
  prefs: []
  type: TYPE_NORMAL
- en: However, in the world of IT security, assumptions are not an option. We must
    identity, validate, test, and confirm again that our security functions are working
    as expected.
  prefs: []
  type: TYPE_NORMAL
- en: The first, most common assumption is at a basic level that we are trusting the
    inherently built-in security of a blockchain, such as digital signatures, affiliated
    hashing functions, or even membership controls.
  prefs: []
  type: TYPE_NORMAL
- en: The second assumption is that digital signatures should verify transactions
    and blocks. This would likely validate what is in most blockchains such as the
    integrity of the blockchain, for example. Other benefits such as nonrepudiation
    should be accomplished as well. Technically, we are assuming that it should be
    impossible to forge a digital signature—that is, for example, it would be mathematically
    impossible to take over a blockchain because of the amount of technical and financial
    investment required to reverse engineer the program.
  prefs: []
  type: TYPE_NORMAL
- en: A third assumption is that hash functions are used to chain blocks together
    in most of the enterprise blockchains as well as cryptocurrencies. Hash functions
    should be a one-way process and also have a state space significant enough to
    remove threats such as a brute-force guessing attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, there could several other assumptions on blockchain deployments.
    For this chapter, I want to focus on the subject of addressing threats and maintaining
    security.  ### Blockchain Cryptography'
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain platforms rely on cryptography to perform mathematical functions
    that are part of cryptographic algorithms. The algorithms perform critical functions
    for the blockchain, as they provide for or at least enable security, privacy,
    and trust.
  prefs: []
  type: TYPE_NORMAL
- en: Several important forms of cryptography are commonly employed for blockchain
    security.
  prefs: []
  type: TYPE_NORMAL
- en: Hashing functions are the most basic function where an input is expected to
    produce a specific output all the time. Nonces, which are random numbers, can
    also add complementary benefits to the hashing on blockchain to enhance security.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cryptography is the study and practice of securing private messages to ensure
    that only the intended parties or members on the blockchain can read them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elliptic Curve Cryptography (ECC) is a form of public key encryption (PKE) that
    is used to generate a public and private key that will allow two participating
    parties to communicate securely together.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Figure 11.2](#c11-fig-0002) shows the workflow of a typical cryptographic
    function. Plaintext is encrypted into cyphertext, which is then decrypted and
    converted back to plaintext so that the message can be read.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image described by caption and surrounding text.](images/c11f002.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 11.2**](#R_c11-fig-0002) Cryptographic function workflow'
  prefs: []
  type: TYPE_NORMAL
- en: Encrypting and decrypting message contents use various methods and encryption
    keys in different blockchains. The use of encryption keys on a blockchain provides
    for what is called *nonrepudiation*. Nonrepudiation ensures that the creator/sender
    of the information cannot deny at a later stage their intentions in the creation
    or transmission of the information. Furthermore, blockchains provide immutability,
    wherein transactions to the blockchain will not be deleted or modified.
  prefs: []
  type: TYPE_NORMAL
- en: '#### HASHING'
  prefs: []
  type: TYPE_NORMAL
- en: Hash functions are mathematical functions that can take any input and produce
    an output of a fixed size. In cryptography, hash functions are typically used
    as a one-way function where it's easy to go forward (input to output) but computationally
    infeasible to go backward (output to input).
  prefs: []
  type: TYPE_NORMAL
- en: To really understand what a hash is and how it works, check out the demo at
    `[https://anders.com/blockchain/hash.html](https://anders.com/blockchain/hash.html)`.
    Anders has put together a tool that allows you as a learner to interact with the
    demos.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 11.3](#c11-fig-0003) shows data entered as “Hello readers.” The data
    in a hash will always return the same output. Remember, the same input equals
    the same output.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Screen capture depicting Hash output.](images/c11f003.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 11.3**](#R_c11-fig-0003) Hash output'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 11.4](#c11-fig-0004) shows how a change to data will change the hash.
    Changing “readers” to “world” changes the output (hash).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Screen capture depicting Hash output change after input change.](images/c11f004.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 11.4**](#R_c11-fig-0004) Hash output change after input change'
  prefs: []
  type: TYPE_NORMAL
- en: In blockchains, a node arranges the entire ledger in the form of chronologically
    connected blocks. To ensure that the ledger remains tamper-proof, each block is
    actually dependent on the previous block. That's where we get a chain of blocks,
    which we know as a blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Essentially, a new block will not be produced without having the hash of a
    previous block. In a permissionless blockchain, for example, the addition of a
    new block to the ledger has to be approved and verified by every node in the blockchain
    network.  #### CERTIFICATES'
  prefs: []
  type: TYPE_NORMAL
- en: An X.509 certificate is a key certificate that is under the X.509 specification
    standard for public key infrastructure (PKI). X.509 is a standard framework that
    defines the format of PKI to specifically identify users and entities over the
    Internet. It helps to confirm that a connection is safe.
  prefs: []
  type: TYPE_NORMAL
- en: 'The X.509 provides standardized formats for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Attribute certificates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Public key certificates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Certificate revocation lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Certification validation algorithms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These X.509 certificates are used to validate identities in a blockchain as
    well as to transmit data. Only the owners of the certificates are actually able
    to read them. The certificates are tied to a public key value.
  prefs: []
  type: TYPE_NORMAL
- en: 'DNSChain (`[https://github.com/okTurtles/dnschain](https://github.com/okTurtles/dnschain)`)
    provides a scalable and decentralized replacement that does not depend on third
    parties—for example, on DNS services.  #### CERTIFICATE STANDARDS AND MANAGEMENT'
  prefs: []
  type: TYPE_NORMAL
- en: X.509 certificates also act as secure identifiers and are commonly used as digital
    passports. Certificates commonly perform the same responsibilities between vendors,
    although versions can vary between vendors. The main differences in configuration
    and security adherence are the X.509 versions and the extensions used with that
    version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Extensions reference the key identifiers. The value of extension fields is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Subject key identifier**—Holds the certificate''s owner identity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blockchain name**—Holds the name of the blockchain platform the certificate
    is used on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CA key identifie**r is what actually holds the smart contract address of
    the current certificate authority (CA). For non-CA certificates, this field would
    be empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Issuer CA identifier**—The issuer holds the address of the smart contract
    of the CA that issued this specific certificate. This is important since it enables
    the validator to find a parent CA smart contract in the blockchain network. Finding
    the parent means it could check whether the certificate with the corresponding
    hash was issued and was not revoked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hashing algorithm**—Identifies specific information regarding the hashing
    algorithm that is used in the calculation of the certificate''s hash.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Extensions can be a complex area to understand and generally an area for developers
    to master. Note that extensions can vary between certificate types as well. When
    reviewing your certificate management, it is important to understand the different
    key identifiers. It is possible to import the wrong certificates or at a minimum
    use a different identifier.  #### CERTIFICATE AUTHORITY'
  prefs: []
  type: TYPE_NORMAL
- en: In Hyperledger, the CA issues a root certificate (rootCert) to each member (organization
    or individual) that is authorized to join the network.
  prefs: []
  type: TYPE_NORMAL
- en: The CA also issues an enrollment certificate (eCert) to each member component,
    server-side applications, and end users, as needed. Each enrolled user is granted
    an allocation of transaction certificates (tCerts). Each tCert authorizes one
    network transaction.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 11.1](#c11-tbl-0001) summarizes the certificates.'
  prefs: []
  type: TYPE_NORMAL
- en: '[**TABLE 11.1**](#R_c11-tbl-0001): Certificate types'
  prefs: []
  type: TYPE_NORMAL
- en: '| CERTIFICATE | USE CASE |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Root certificate (rootCert) | One issued for the organization. |'
  prefs: []
  type: TYPE_TB
- en: '| Enrollment certificate (eCert) | One issued per member. |'
  prefs: []
  type: TYPE_TB
- en: '| Transaction certificate (tCert) | Many issued per enrollment certificate.
    One certificate is needed for every transaction. |'
  prefs: []
  type: TYPE_TB
- en: 'Each type of certificate is specific to the use case. For example, just because
    a node (member) has an enrollment certificate (eCert) does not mean it can make
    transactions. The member must have another certificate, a tCert, to make a transaction.
    If the member needs to make 100 transactions, then the member must have 100 tCerts.  ####
    MEMBERSHIP/PERMISSIONING'
  prefs: []
  type: TYPE_NORMAL
- en: It should be clear that an enterprise blockchain should be a membership/permissioning-based
    blockchain in most cases. This becomes true when security and privacy are at the
    forefront of the enterprise's blockchain use case. Some enterprises may require
    an extension for off chains as well—for example, to access a stock ticker or a
    currency exchange.
  prefs: []
  type: TYPE_NORMAL
- en: In Hyperledger Fabric, permissioning is the concept of member enrollment certificates
    and transaction certificates for each member in blockchains. These two types of
    certificates enable an entity to be permissioned and identified while transactions
    are completed.
  prefs: []
  type: TYPE_NORMAL
- en: Permissioning and access management generally encompass what is known as *identity
    and access management* (IAM) for IT security personnel. Your enterprise needs
    to manage and monitor your blockchain services and the users, just like you are
    managing your email or Salesforce activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'As part of most compliance requirements, you will need to validate user identities,
    ensure policies to process authorization, and address audit logs. Challenges can
    certainly abound with compliance, so having a strong IAM/membership policy is
    critical. Identity management is a challenging area and can encompass areas such
    as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Know your customer (KYC)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anti-money laundering (AML)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compliance requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting and auditing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, in Hyperledger Fabric, the Fabric CA server as well as the client
    store their private keys in a PEM-encoded file. A PEM-encoded file is a Privacy
    Enhanced Mail Certificate file. This PEM file can also be configured to store
    private keys in a Hardware Security Module (HSM).  #### TWO-FACTOR AUTHENTICATION'
  prefs: []
  type: TYPE_NORMAL
- en: 'Two-factor authentication (2FA) is an extra layer of security that''s used
    to ensure that only the legitimate owner can access their accounts. Using 2FA,
    the user will first enter a combination of a username and password and then be
    required to provide other information. This other piece of information should
    come in the form of one of the following approaches:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Something that the user knows**—This could be information such as a password,
    an answer to a secret question, or maybe a personal identification number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Something that the user has**—This method includes the second level of authentication
    based on card details, through smartphones, other hardware, or a software token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Something that the user is**—This is one the most effective ways to verify
    the user on the second step, and this is accomplished with biometric data, for
    example.  ## Blockchain Risks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As with other technologies, blockchains will encounter potential risks. Reviewing
    your enterprise risks and correlating those risks to your blockchain deployment
    are recommended. In reality, blockchains have no different risks from other technologies.
    If there is a risk, it's how compliance is handled or a lack of training that
    could expose vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '### Risk Assessment'
  prefs: []
  type: TYPE_NORMAL
- en: Risk assessments are critical both before and after your blockchain implementation.
    Generally, IT risk assessments are the next step after performing a process called
    a business impact analysis (BIA). A BIA analyzes the enterprise's critical business
    functions and identifies the impact of a potential loss of those functions. You
    can then begin your IT risk assessment.
  prefs: []
  type: TYPE_NORMAL
- en: One risk is around performance. Blockchain technology will not scale to a level
    such as a traditional database since transactions per second (TPS) results are
    vastly different. For example, Ethereum is running around an average 12 TPS and
    Visa is running over 1600 TPS, so performance is not competitive and should not
    be expected. This performance risk could be eliminated with proper use case scoping.
  prefs: []
  type: TYPE_NORMAL
- en: Another concern is to ensure that enterprises specify the right solution for
    the right use case. Blockchain node distribution is a big concern around compliance
    and regulatory mandates. Noncompliance could be costly to the enterprise. Comply
    with GDPR in the European Union or SOX in the United States, and then pay attention
    to what data center or cloud service you select. Understanding your compliance
    requirements will certainly help to reduce the risk of noncompliance.
  prefs: []
  type: TYPE_NORMAL
- en: 'A risk assessment should focus on the following areas:'
  prefs: []
  type: TYPE_NORMAL
- en: Assessing your risk assessment scope by determining the classes of risks to
    manage and identify.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying data privacy/permissions that will be adhered to for both the enterprise
    and the enterprise's customers—for example, the right to be forgotten with GDPR.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining the liability and legal prose requirements that should be formulated
    from the risk assessments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meeting compliance requirements, such as reporting, auditing, and monitoring
    of the blockchain applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifying data management and monitoring.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing performance of the enterprise blockchain's network statistics, which
    simply could be latency or transactions per second.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating enterprise applications to run on a blockchain network or extending
    an off-chain application to the blockchain network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring the recoverability (DR/BC) of your blockchain services if an outage
    or other concern occurs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The risk assessment workflow comprises the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Perform a business impact analysis (BIA) to understand what could go wrong if
    a risk is not mitigated. A BIA should be sanctioned by the enterprise's leadership
    and funded appropriately.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform an IT risk assessment to identify risks, vulnerabilities, and challenges
    identified in the BIA. Use appropriate tools and document accordingly to gain
    insight into the environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Classify the identified risks and vulnerabilities in the assessment that need
    to be addressed first or in the appropriate order. For example, a weighting approach
    is commonly used to resolve these concerns in an ordered fashion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remediate the identified risks and vulnerabilities in the specified order.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before trying to mitigate any vulnerabilities, it is important to understand
    what the actual risks are. Then you can assess the risk properly to perform appropriate
    risk mitigation techniques.  ### Risk Mitigation'
  prefs: []
  type: TYPE_NORMAL
- en: 'Risk mitigation is defined as taking steps to reduce the adverse effects of
    a potential risk. There are four specific types of risk mitigation strategies
    that hold uniquely to business continuity and disaster recovery. These risk mitigation
    techniques can be applied successfully to blockchain:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Risk avoidance* is not entering into a situation where the risk is present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Risk reduction* is where you''re performing responsibilities such as upgrading
    to the latest version of Hyperledger Fabric to avoid or reduce the likelihood
    of issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Transfer of risk* is relying on another organization to handle the concerns
    through typically insurance or a bond being purchased.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Risk acceptance* is where you are aware of the potential risks, impacts, and
    concerns and still proceed. An example would be running an operating system that
    cannot be upgraded or patched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Company data should be considered an asset that is extremely valuable to the
    enterprise. As with any asset, it should be protected and insured and have a concise
    policy to restrict access. This could be an acceptable use policy (AUP), for example.
    The goal should be to protect the data whether it's on a blockchain or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you are considering blockchain data, you need to consider the following
    points to address the concerns around privacy and security:'
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain management and traditional IT management have some similarities,
    such as meeting privacy requirements, but also some differences, such as lowering
    performance expectations (TPS) with blockchains. The need to meet any additional
    requirements, such as privacy or security, will have an effect on performance
    because of the overhead of protocols or procedures used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain and distributed ledgers are immutable—the ledger cannot be deleted,
    modified, or destroyed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain data may or may not be distributed. Blockchains may not even be replicated
    outside a data center. No DR or BC has been planned or funded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchains that are permissioned will have restricted access, but that does
    not mean everyone that is permissioned should have access to the ledger. (Channels
    may solve the concern around privacy.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Blockchains may also have additional risks as compared to a traditional database.
    Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Blockchains may not meet compliance requirements, especially if there is no
    redundancy or availability with DR/BC plans implemented. This lack of redundancy
    is common in enterprise blockchains and could be a risk to the enterprise. Generally,
    in a traditional database architecture, redundancy is built in or specifically
    addressed by replication.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data confidentiality may be a concern that is not addressed appropriately. Data
    written to blockchain is “public” data, for example, on Ethereum. Note that “private”
    blockchains such as Hyperledger are centrally administered and are transparent
    to the consortium members.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchains are combinations of newer technology (in reality, older technology
    melded together), so there could be a significant knowledge gap in numerous enterprises'
    development and production organizations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mitigating the identified risks to your company''s blockchain data requires
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Protecting your enterprise data in an efficient manner (replication)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enforcing a data governance policy (security, user, or acceptable use policy)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating data (before and after entry) to minimize data corruption and data
    flaws (mistakes)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting access to permissioned membership (ensuring only authorized users)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meeting compliance requirements identified by your counsel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Following IT best practices such as the principle of least privilege, which
    limits the permissions to the exact scope needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Risk mitigation is a complex area and one that the enterprises need to fund.
    It has been well documented that most of the enterprise-based security attacks
    have been a result of a lack of proper risk mitigation and management. Investment
    in this area is critical to your enterprises blockchain application success.  ##
    Blockchain Threat Landscape'
  prefs: []
  type: TYPE_NORMAL
- en: Generally, in regard to blockchain there are some common vulnerabilities you
    would expect like network vulnerabilities but the other blockchain has some unique
    vulnerabilities where the “threat” could be a concern and must be addressed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the most common blockchain vulnerabilities that you will
    run into:'
  prefs: []
  type: TYPE_NORMAL
- en: Endpoint vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Public and private key security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smart contract coding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of standards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mining issues (permissionless blockchains)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 51 percent attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phishing attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social media
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that endpoints are generally focused on the blockchain network access points
    such as a gateway and its API.
  prefs: []
  type: TYPE_NORMAL
- en: '### 51 Percent Attacks'
  prefs: []
  type: TYPE_NORMAL
- en: This type of attack is almost always overhyped in the blockchain media and by
    security companies. It's a threat but only in specific consensus methods. The
    reality is that if you're an enterprise, you are likely not using proof-of-work
    (POW) consensus. This consensus is used in Bitcoin, Litecoin, and Ethereum.
  prefs: []
  type: TYPE_NORMAL
- en: A 51 percent attack is considered to be “selfish” mining, not rogue, in the
    sense that this attack happens when one single malicious miner controls more than
    51 percent of the compute power on a blockchain network and can then inject false
    transactions into the system.
  prefs: []
  type: TYPE_NORMAL
- en: A 51 percent attack requires a miner to produce blocks in secret before posting
    them to the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, this attack type has been effectively rendered avoidable by a delay
    in transaction posting in the blockchain software.  ### Phishing Attacks'
  prefs: []
  type: TYPE_NORMAL
- en: Phishing attacks happen because people do not pay close attention to detail.
    For example, with the Bitcoin wallet Electrum, there has been an ongoing hack
    against its user base because users may not realize they actually used a fake
    wallet. As a result of this phishing attack, a malicious party was able to steal
    almost 250 Bitcoin (BTC), which, at the time of the attack in 2018, was $880,000.
  prefs: []
  type: TYPE_NORMAL
- en: Subsequently confirmed by Electrum itself, the attack consisted of creating
    a fake version of the wallet that fools users into providing password information.
    For more on this attack, visit `[https://www.coindesk.com/electrum-wallet-attack-may-have-stolen-as-much-as-245-bitcoin](https://www.coindesk.com/electrum-wallet-attack-may-have-stolen-as-much-as-245-bitcoin)`.
  prefs: []
  type: TYPE_NORMAL
- en: The lesson here is that you should pay careful attention to the domains you
    download your wallets or other blockchain software from. For example, if you are
    developing smart contracts on Ethereum and to utilize Metamask, then you need
    to go directly to Metamask.io. Do not go to another domain, software repository,
    or even `[Metamask.com](http://metamask.com)` or .net. These phishing attacks
    are generally preventable if the users pay attention to detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the anatomy of a phishing attack:'
  prefs: []
  type: TYPE_NORMAL
- en: The attacker registers a domain name similar to the genuine website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The attacker then replicates the genuine site's content and replaces the wallet
    address with a rogue address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The attacker uses deceptive ads to promote the copycat site, which unwitting
    users click.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The attacker intercepts the communication and then reroutes all users of the
    authentic site to their own site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For more info, visit `[https://resources.infosecinstitute.com/blockchain-vulnerabilities-imperfections-of-the-perfect-system/#gref](https://resources.infosecinstitute.com/blockchain-vulnerabilities-imperfections-of-the-perfect-system/#gref)`.  ###
    DDOS Attacks'
  prefs: []
  type: TYPE_NORMAL
- en: A distributed denial-of-service (DDOS) attack is an extremely common type of
    a network attack against a website, a network node, or even a membership service
    provider.
  prefs: []
  type: TYPE_NORMAL
- en: This DDOS attack is essentially initiated by many multiples (possibly thousands)
    of remote nodes, and then coordination is used to start their attacks. Essentially,
    a DDOS attack occurs when multiple systems flood a network resource with what
    are known as *connection requests*, messages, or other types of communication
    packets. The goal of this type of attack is to slow down or crash the system.
    The concentrated attack and subsequent shut down of the system results in a “denial
    of service” for legitimate users.
  prefs: []
  type: TYPE_NORMAL
- en: It's true that blockchains are “distributed ledgers,” and thus being distributed
    can alleviate attacks. However, blockchain endpoints are certainly exposed to
    your corporate network and even the Internet. When connected to a network, a blockchain
    endpoint can be vulnerable and effectively block valid users.
  prefs: []
  type: TYPE_NORMAL
- en: 'To prevent DDOS attacks, you should ensure that your networking team has the
    resources in place to mitigate, manage, and monitor these concerns. Load balancing
    is commonly used to prevent significant loss of business as a result of these
    attacks.  ### DNS Hijacking Attacks'
  prefs: []
  type: TYPE_NORMAL
- en: DNS is a domain name service that is critical to our network infrastructure.
    Without DNS we would not be able to access other nodes or sites. DNS hijacking
    is essentially a form of DDOS attack where your DNS is shut down, which can literally
    shut down your blockchain activity. If your members cannot access the membership
    service provider (MSP), for example, then your users and client applications won't
    be able to validate against the MSP for their authorization and certificates.
  prefs: []
  type: TYPE_NORMAL
- en: To prevent DNS hijacking attacks, you should ensure that your networking team
    has the resources in place to mitigate, manage, and monitor these concerns, just
    like in a DDOS attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement best practices such as limiting the view of DNS/bind versions and
    disabling DNS zone recursions and even DNS zone transfers. Some best practices
    around DNS take little effort and cost nothing. Lastly, consider using a provider
    such as Cloudflare that can help prevent DDoS and DNS attacks.  ### Eclipse Attacks'
  prefs: []
  type: TYPE_NORMAL
- en: Most permissionless blockchains use a peer-to-peer protocol (P2P) and are connected
    to each other with no centralization. However, because the blockchain network
    is deliberately not fully connected, this could introduce the eclipse attack.
  prefs: []
  type: TYPE_NORMAL
- en: In an eclipse attack, an attacker gains control of all of a node's connections
    to the network. By gaining control of the node's connections, it allows the attacker
    to completely control the node's view of the distributed ledger and network operations.
    A successful eclipse attack allows the attacker to perform a double-spending attack
    against the isolated node, helps the attacker perform a DoS attack, or lets the
    attacker use the node's computational resources for the attacker's benefit in
    the blockchain consensus algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: These types of attacks are only successful on a permissionless chain such as
    Bitcoin or Ethereum. The amount of resources that are required would be substantial
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: The ease with which an eclipse attack can occur depends on a number of factors.
  prefs: []
  type: TYPE_NORMAL
- en: A network's data structure (P2P ledger versus a centralized ledger)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connection requests from client applications or other nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Host (node) management and its IP addressing schema
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To mitigate these security concerns, enterprises should be on an enterprise
    permissioned blockchain. If your company is using Ethereum, you may need to consider
    using whitelists or adjusting your connections through a concentrator such as
    a bastion host.  ### Insider Attacks'
  prefs: []
  type: TYPE_NORMAL
- en: Permissioned blockchains, even though not generally subjected to permissionless
    blockchain attacks, such as a replay attack or a 51 percent attack, are, by their
    nature, generally perceived as being more secure than permissionless blockchains
    such as Ethereum.
  prefs: []
  type: TYPE_NORMAL
- en: Permissioning certainly mitigates who can access your blockchain services and
    also helps you identify who is doing what. However, when you allow centralization
    of resources, history has proven that the people who believe they are not being
    watched or questioned will do stupid things.
  prefs: []
  type: TYPE_NORMAL
- en: 'An insider attack is exactly what it sounds like: an insider working in the
    organization has been permissioned to access your blockchain network resources
    and is executing an attack from the inside. That is, the attack is coming from
    the corporate blockchain network, not from outside the company. The inside attacker
    could exhibit malicious behavior by gaining control of the administrator certificate.
    As an administrator or admin certificate holder, the insider will have full control
    over the blockchain services and therefore could cause disruption, such as blocking
    valid transactions.'
  prefs: []
  type: TYPE_NORMAL
- en: With administrative control, the attacker can add or revoke access, blacklist
    specific identities, and also manipulate the access a given identity has to the
    blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Insider attacks come in the form of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Account-related issues such as hidden accounts or over-privileged accounts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MSP or certificate authority hijacking where the certificate control is abused.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data manipulation of transaction logs or compliance logs occurs as a result
    of permissioning or exposed vulnerabilities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To mitigate these types of issues, it is important that your enterprise considers
    IT security best practices such as role-based security or minimum permissions.
    Audits must be accomplished and routine audit log monitoring should be maintained
    and monitored by an IT security group member.
  prefs: []
  type: TYPE_NORMAL
- en: 'The one benefit of a permissioned blockchain is that your enterprises can control
    as much or as little as possible when it comes to permissioning, auditing, and
    configuration. It is recommended to be as aggressive as possible in protecting
    your enterprise data without interfering with your blockchain users and applications
    to the point where they can''t work.  ### Replay Attacks'
  prefs: []
  type: TYPE_NORMAL
- en: A replay attack is usually a scheme that is utilized during a fork of a blockchain.
    For example, an attacker might copy an existing transaction and then attempt to
    resubmit it to the blockchain as if it were a new transaction.
  prefs: []
  type: TYPE_NORMAL
- en: A hacker may also attempt to resubmit the transaction if a hacker has your digital
    signature and because your original transaction was valid. If the attacker succeeds
    in resubmitting this rogue transaction, they would receive the wallet transactions
    twice.
  prefs: []
  type: TYPE_NORMAL
- en: You can easily prevent replay attacks by removing any intermingling of blockchains.
    For example, some blockchains such as Bitcoin Cash (BCH) have replay attack protection.
    This protection is accomplished by adding a special mark on the validity check
    that identified the transaction was for the BCH ledger and not the previous ledger
    from Bitcoin.
  prefs: []
  type: TYPE_NORMAL
- en: 'From a user perspective, to help prevent even risking this issue, you can separate
    your accounts by not mixing coins in the same wallets.  ### Routing Attacks'
  prefs: []
  type: TYPE_NORMAL
- en: 'A routing attack is essentially what it sounds like: traffic is hijacked and
    then routed somewhere it should not be routed. Basically, a routing attack relies
    on intercepting messages propagating through the network. While these messages
    are propagating through the network, the messages could be captured and tampered
    with.'
  prefs: []
  type: TYPE_NORMAL
- en: This type of attack is generally part of a man-in-the-middle attack. This type
    of attack would not be successful if the hacker does not obtain full control over
    the blockchain network resources. The only way for the network nodes to detect
    tampering is when they receive a different copy of data from another node. Comparing
    the messages sent and received between nodes is an effective way to mitigate this
    vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perhaps the most proactive way to prevent these types of attacks requires significant
    monitoring of your network services and messaging traffic. Metrics should include
    packet round-trip times (RTT), anomaly monitoring, and even pattern matching.  ###
    Sybil Attacks'
  prefs: []
  type: TYPE_NORMAL
- en: A sybil attack is when an attacker creates multiple accounts on a blockchain
    in order to deceive the other blockchain participants. This behavior is similar
    to folks who troll on social media by creating multiple accounts to accomplish
    their silly behavior. A sybil attack could be quite similar to a phishing attack
    where an imposter pretends to be someone such as your boss asking you for your
    network password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Preventing sybil attacks is considered straightforward in the sense that you
    need to pay attention to who your wallet funds are being sent to. These types
    of attacks should not be an issue on a permissioned blockchain since the members
    are clearly identified and wallets are not normally used.  ## Smart Contract Security'
  prefs: []
  type: TYPE_NORMAL
- en: In Ethereum blockchains, all modifications to a smart contract's data must be
    performed by its blockchain code. This means that a user cannot edit the contract
    directly or even delete the contract. To modify a contract's data, a blockchain
    user must send the request to its code, which is at a lower level. This request
    process kickoff will determine whether to fulfill and how to fulfill those smart
    contract modification requests.
  prefs: []
  type: TYPE_NORMAL
- en: For comparison purposes to Linux, we can think of a smart contract as an application
    that is installed on top of an operating system. We can also compare a blockchain
    smart contract to how a traditional database handles database modification. A
    traditional database uses “enforced stored procedures,” or “predefined rules.”
    In a blockchain, we append to the next block on the blockchain when a transaction
    is processed, as opposed to enforcing entries on a procedural basis. Security
    is built into the blockchain code and the smart contract platform. The enforcement
    of smart contracts varies widely between platforms from a technical approach.
  prefs: []
  type: TYPE_NORMAL
- en: '### Smart Contract Legal Prose'
  prefs: []
  type: TYPE_NORMAL
- en: Legal prose is effectively a direct method of attaching a document to a smart
    contract. This is done to address what the contract code may not address, such
    as handling disputes to help manage or mitigate issues when the contract code
    is not enough.
  prefs: []
  type: TYPE_NORMAL
- en: Corda supports legal prose, as mentioned earlier in the book. In Corda, addressing
    this as a contract class would be annotated with the @LegalProseReference annotation.
  prefs: []
  type: TYPE_NORMAL
- en: The @LegalProseReference annotation associates the smart contract with an attached
    document that will detail the contract's constraints imposed by the legal prose
    terms. Note that it is not required to attach legal prose to a Corda contract
    when developing one.
  prefs: []
  type: TYPE_NORMAL
- en: The main difference in Corda and other blockchains is focused on how a smart
    contract in Corda would attach legal prose in the smart contracts. From a privacy
    and compliance perspective as well as a financial perspective, the legal prose
    schema is quite important as well for cost savings. This is accomplished by Corda
    smart contracts linking the business logic and the business data to an associated
    legal prose structure.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to Hyperledger, Ethereum, and Quorum, there are no documented
    features for addressing legal prose at the time of writing.
  prefs: []
  type: TYPE_NORMAL
- en: However, if legal prose were a priority, a developer could certainly address
    this in a rudimentary fashion with attachments or by providing for additional
    steps in the smart contracts. This would enable better smart contract enforcement
    but won't likely address legal issues in most cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your enterprise should follow up with corporate counsel to determine whether
    these contracts and their document attachments are legally enforceable or even
    valid in the jurisdictions required.  ### Smart Contract Vulnerabilities'
  prefs: []
  type: TYPE_NORMAL
- en: Smart contracts are essentially nothing more than logic written in computer
    code. The computer code is developed in specific languages, such as JavaScript,
    Golang, and C++, and should be vetted via software development best practices
    before deploying.
  prefs: []
  type: TYPE_NORMAL
- en: The software development best practices could be anything from clean code, vulnerability
    assessments, DevOps, and agile processes, or whatever your organization deems
    acceptable.
  prefs: []
  type: TYPE_NORMAL
- en: Smart contracts may introduce new vulnerability points in an enterprise permissioned
    blockchain such as Hyperledger or Corda. Most enterprise blockchains rely on asynchronous
    Byzantine fault tolerance replication protocols to establish consensus and then
    effectively provide their low-level trust assumptions to the smart contract applications.
  prefs: []
  type: TYPE_NORMAL
- en: The inability for smart contracts to execute on all nodes within a permissioned
    blockchain is a serious concern. When you consider smart contracts that do not
    execute properly and you have 100 nodes performing the same processes that result
    in blockchain failure, this could be considered a denial of service on the blockchain
    network.
  prefs: []
  type: TYPE_NORMAL
- en: Risks that are common around smart contracts will arise around programming oversights
    such as access control, return values, overflows, timestamps, and numerous other
    “dirty code” issues.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](c10.xhtml) covers smart contract coding issues in more detail.  ##
    Blockchain-Specific Features'
  prefs: []
  type: TYPE_NORMAL
- en: This section reviews the most common blockchain-specific features for Ethereum,
    Hyperledger, Quorum, and Corda. Each blockchain has some unique security-related
    functions, features, and utilities. The features discussed in this chapter are
    solely based on the time of the writing, so I mainly discuss features that are
    past the “alpha” phase of development. A slew of additional features are in incubation
    but won't be covered.
  prefs: []
  type: TYPE_NORMAL
- en: '### Ethereum'
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum was the first smart contract platform that was designed to allow developers
    to access a Turing-complete platform on the blockchain and develop applications
    as smart contracts.
  prefs: []
  type: TYPE_NORMAL
- en: Because this was a first of a kind platform that was meant to be permissionless
    (open to the public), developers had a lack of security features to work with.
    Security from an enterprise development perspective in Ethereum was more of an
    optional feature that would be considered later in the lifecycle. The lack of
    security-related features was due to the use case that the Ethereum application
    presented to the world at the time it was deployed.
  prefs: []
  type: TYPE_NORMAL
- en: If security is truly important, then an enterprise should not deploy an application
    that requires privacy, security, or enterprise features on Etheruem. There are
    options to deploy Enterprise Etheruem, but I do not feel that Ethereum, even Enterprise
    Ethereum, is meant for enterprises that are concerned about security features.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you deploy your own private Ethereum network or use the public network
    (mainnet), when assessing your security risks, you need to consider that Ethereum
    has four main components.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum nodes, which are distributed worldwide and may expose corporate information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum virtual machines, which have a copy of the ledger state, which is distributed
    to every Ethereum node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smart contracts, which are immutable and therefore once deployed are on the
    blockchain forever
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dapps, which are decentralized applications and for which expecting consistent
    performance is not reasonable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main security concern with Ethereum is really focused on the nodes that
    are deployed. A node is a device, program, or virtual machine that communicates
    with the Ethereum network. When an Ethereum node is deployed, that node could
    have numerous vulnerabilities, such as user authentication issues or lack of patching,
    or more common than not, the node is multitasking. That is, the node is not dedicated
    to running the blockchain node but is also used for other tasks, such as developing,
    running batch jobs, or even multimedia. Securing your Ethereum nodes is paramount
    for the network.
  prefs: []
  type: TYPE_NORMAL
- en: '#### ETHEREUM TESTNETS AND MAINNET SECURITY TESTING'
  prefs: []
  type: TYPE_NORMAL
- en: Mainnet is the real data on the blockchain, including account balances and transactions,
    which are public. It is important to note that anyone can create a node and begin
    verifying transactions. Ether on mainnet has a market value and can be exchanged
    for other cryptocurrency or fiat currencies. Because Ether has value, we must
    secure our wallets and ensure we don't lose our keys.
  prefs: []
  type: TYPE_NORMAL
- en: Security testing can be done in Ethereum on any testing network. The mainnet
    is for production, so it's highly unadvisable to attach unsecure nodes to the
    mainnet for obvious reasons.
  prefs: []
  type: TYPE_NORMAL
- en: There are three main types of extended Ethereum networks that could be used
    for security testing.
  prefs: []
  type: TYPE_NORMAL
- en: '**Public test networks**— Developers use public test networks to perform tests
    on their Ethereum applications before final deployment to the main network. Ether
    is used for testing purposes only and actually has no value from a trading purpose.
    Test networks include Ropsten, Kovan, and Rinkeby.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enterprise/private networks**—Private Ethereum networks allow parties to
    share data without making it publicly accessible. A private blockchain is a good
    choice for sharing sensitive data and scaling to handle higher read/write throughput.
    Quorum, for example, is a hybrid of Ethereum and a private network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Local test networks**—Local test networks are deployed on your corporate
    infrastructure for your testing. Local testing can certainly provide benefits
    around privacy and mitigating performance issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The main lesson here is to identify what test network is appropriate for your
    situation. Perform the tests and then deploy to the mainnet only after testing
    is complete and the identified risks are removed.  #### ETHEREUM DEVELOPMENT'
  prefs: []
  type: TYPE_NORMAL
- en: From a security perspective of blockchain development, it is important to understand
    that there are myriad Ethereum toolsets, utilities, IDEs, and other solutions.
    Each of these could pose a security vulnerability to your development group but
    also your enterprise depending on how things are rolled out, managed, and monitored.
  prefs: []
  type: TYPE_NORMAL
- en: 'When designing or architecting your blockchain, there are some key areas around
    security to focus on, listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: Private or public dapps that are deployed on the blockchain nodes should be
    processed through a proper software development framework, such as a properly
    implemented DevOps foundation, or at a minimum a proper change control system.
    Using pipelines is a best practice in the software world, so it is natural to
    want to extend this blockchain development to a DevOps environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application platform interfaces (APIs) need to be updated, validated, or deprecated
    based on your requirements and should be clearly documented and even maintained
    through an API management platform that maintains version controls.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smart contracts need to be developed, tested, audited, and secured before being
    deployed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validate that the user interface to the blockchain application is secure by
    testing. For example, removing unneeded hot keys or function keys is a good start.
    However, UX testing is not all visual; the code should be inspected and tested
    for exploits. If cryptocurrency wallets are involved, then we must realize that
    integration needs to be considered as part of the user application to address
    wallet-specific vulnerabilities such as crypto jacking.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each of these could certainly pose a challenge to how to mitigate potential
    issues such as vulnerabilities. The best place to start to remove these challenges
    is in the architecting phase where security concerns are identified and mitigated
    before the development process.  #### ETHEREUM SECURITY ENHANCEMENTS'
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum has a limited level of integrated support for meeting enterprise privacy
    or security requirements. A good amount of the reasoning is that it is a permissionless
    blockchain with limited control over its user base. Its main security feature
    is the use of public keys for identity management, which give users a level of
    pseudo-anonymity.
  prefs: []
  type: TYPE_NORMAL
- en: Security features in Ethereum can and should be implemented appropriately in
    Ethereum as smart contracts or dapps.
  prefs: []
  type: TYPE_NORMAL
- en: Future development in Ethereum is planned to include support for the mathematical
    operations used in zero-knowledge proofs like zkSNARKS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Organizations wanting to use Ethereum but with advanced security and privacy
    controls should consider looking at Quorum. Quorum is an actual fork of Ethereum
    and has wide support from the financial sector to deploy a private Etheruem network.  ###
    Hyperledger Fabric'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Fabric is a smart contract platform originally built by IBM. The
    Hyperledger Fabric platform is currently maintained by the Linux Foundation and
    is considered open source. Hyperledger Fabric was specifically designed to be
    an enterprise blockchain that does have some unique features around security,
    privacy, and other enterprise-focused requirements.
  prefs: []
  type: TYPE_NORMAL
- en: The main security feature to review is that Fabric is designed with the concept
    of channels. Channels are similar in some respects to tunnels in the IP networking
    world, which are a point-to-point network connection.
  prefs: []
  type: TYPE_NORMAL
- en: In Hyperledger Fabric, a channel is a completely distinct blockchain network
    with its own distributed ledger. This channel is visible only to members of the
    channel and provides an additional layer of privacy. This specific architecture
    allows multiple blockchain networks to run on the same network of nodes and provides
    for enhanced privacy as well as another layer of security.
  prefs: []
  type: TYPE_NORMAL
- en: As with any blockchain, vulnerabilities can exist in the blockchain smart contracts.
    Hyperledger Fabric refers to smart contracts as chaincode.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Fabric chaincode can be programmed in either Node.js or Go and will
    run in secure Docker containers. These chaincode programs are run by an external
    application interacting with the distributed ledger.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger takes a slightly different approach to transaction validation and
    execution than smart contract platforms like Ethereum. Hyperledger Fabric follows
    an execute, order, validate control flow. It is possible in Hyperledger Fabric
    to have a transaction committed with a flawed smart contract due to this execution
    process occurring before the validation.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to mitigate security vulnerabilities and ensure transactions are
    not committed fraudulently is to perform audits on your chaincode.
  prefs: []
  type: TYPE_NORMAL
- en: '#### HYPERLEDGER CHAINCODE SCANNER'
  prefs: []
  type: TYPE_NORMAL
- en: There is a unique tool that is available for chaincode scanning called Chaincode
    Scanner by Chainsecurity. Chaincode Scanner is a static analyzer for Hyperledger
    Fabric–based smart contracts. It works by accepting chaincode written in Go as
    an input and then checks it against the input for nine specific vulnerability
    patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Chaincode Scanner will be a simple exercise for developers. The developer
    first uploads code to the public repository (GitHub) and then adds its path into
    the input field on the Chaincode Scanner website.
  prefs: []
  type: TYPE_NORMAL
- en: Developers should be proficient in performing tasks such as pathing and adapting
    Go packages with a `go get` command to use this solution. The results will be
    displayed as a table with detailed code review notes.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 11.5](#c11-fig-0005) shows a snapshot of the Chaincode Scanner tool.
    Simply enter the URL of your application to start a scan.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Screen capture depicting Chaincode Scanner.](images/c11f005.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 11.5**](#R_c11-fig-0005) Chaincode Scanner'
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on Chainsecurity''s tools, visit `[https://chaincode.chainsecurity.com/](https://chaincode.chainsecurity.com/)`.
    [Chapter 10](c10.xhtml) discusses chaincode in more detail.  #### HYPERLEDGER
    FABRIC SECURITY ENHANCEMENTS'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger has a few features designed to improve its security for business
    use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Contains a pluggable identity management option that supports traditional IAM
    schemes such as LDAP/AD commonly used in most enterprise environments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides channels that are logically distinct and separate virtualized blockchains.
    Nodes can belong to multiple channels as designated by the admins.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Allows for privacy through the exchange of data via the blockchains gossip
    protocol, which differs from Ethereum, for which data only goes to nodes with
    a need-to-know basis.  ### R3 Corda Blockchain'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corda is an open source blockchain that was designed for the enterprise, including
    financial enterprises. Corda has some unique features and capacity around blockchain
    security and privacy. Note that Corda was developed with the Java environment
    as the virtual machine, which provides for rapid adoption by businesses.
  prefs: []
  type: TYPE_NORMAL
- en: '#### CORDA NOTARY SECURITY'
  prefs: []
  type: TYPE_NORMAL
- en: A notary is a trusted party that guarantees that a particular state is consumed
    only once. In Corda, a notary is perhaps the most important node to maintain and
    secure. You should consider a notary more of a custodian or intermediary that
    acts almost like a traffic officer directing traffic (states). In Corda, each
    state has a specific notary, which must sign any transaction in which that state
    is consumed. Once a notary has done this, it must not sign another transaction
    for the same state. Notaries are the network's guardians of transaction uniqueness,
    and we cannot risk having a notary compromised.
  prefs: []
  type: TYPE_NORMAL
- en: The concept of a notary differs from most other blockchains in the sense that
    conventional blockchains solve this challenge by allowing every node to see every
    transaction, which in turn would make conflicts easy to identify and ideally reject.
  prefs: []
  type: TYPE_NORMAL
- en: There is no centralized authority in a Corda network, which differs from Hyperledger.
    The notary has no authority really and maintains a list of account items that
    have been spent. The notary is about preventing double spending—no more and no
    less. This is where a vulnerability could be injected into a Corda network, so
    we must maintain and audit our notaries.
  prefs: []
  type: TYPE_NORMAL
- en: From a security standpoint, as well as my own point of view, the fact that anyone
    can stand up and run a notary in a Corda network is perplexing. Basically, it's
    up to the parties transacting to decide who they want to act as the notary, so
    it's possible a rogue notary from an insider could steal information, or worse.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a nutshell, Corda nodes see only some of a network''s transactions, which
    means better privacy than conventional blockchains. However, the risk of a rogue
    notary could be introduced, and we must identify and mitigate these issues.  ####
    CORDA SMART CONTRACTS'
  prefs: []
  type: TYPE_NORMAL
- en: Contract execution and validation are performed on the Corda JVM, which is partially
    deterministic. *Deterministic* means the same code will produce the same output
    with no changes in end results. Developers can certainly make changes to ensure
    the JVM is fully deterministic.
  prefs: []
  type: TYPE_NORMAL
- en: 'The smart contract execution and validation are processed on the Corda Java
    virtual machine (JVM), which is locked down and quite secure. The JVM acts as
    a sandbox. However, the JVM is running Java, which is inherently unsecure, so
    you need to review Java-related vulnerabilities. These Java-based vulnerabilities
    could become evidently true if you are on a consortium-based blockchain with nodes
    that are not controlled centrally or in a secure network such as a DMZ. A DMZ
    is a secure partition of a corporate network and is commonplace in IT networking.
    If your virtual machines are in Apache MyFaces Core 2.0 with specified versions,
    Java can provide remote attackers the ability to read arbitrary files on your
    JVM.  #### CORDA SECURITY ENHANCEMENTS'
  prefs: []
  type: TYPE_NORMAL
- en: Corda's security is based primarily on its solid need-to-know philosophy and
    its unique approach to network of notaries. Since users can only see and interact
    with transactions in which they have a stake, the potential impact of a data leakage
    is reduced.
  prefs: []
  type: TYPE_NORMAL
- en: Corda also uses a point-to-point TLS-encrypted protocol. This differs from peer-to-peer
    broadcasts such as other blockchains.
  prefs: []
  type: TYPE_NORMAL
- en: X.509 certificates are also used in the blockchain network, and flexibility
    is available in this area. Security in Corda is heavily dependent on what are
    known as notaries, which can be considered custodians of the network. Assets and
    transactions in Corda can be held hostage if the assigned notary refuses to transfer
    or sign them. A malicious notary can allow what is considered a double-spend attack,
    which would ensure proper accounting of the blockchain is not achievable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implementing a Corda blockchain, notary trust, and security is a paramount
    task for the consortium members to ensure that the blockchain is secured. Corda
    does a good job of disclosing vulnerabilities and best practices on its website.
    For a concise document that describes secure coding, visit `[https://docs.corda.net/secure-coding-guidelines.html](https://docs.corda.net/secure-coding-guidelines.html)`.  ###
    Quorum'
  prefs: []
  type: TYPE_NORMAL
- en: Quorum is designed to be permissioned, meaning that networks using Quorum won't
    be open to the Ethereum network as they are in most cases with Ethereum.
  prefs: []
  type: TYPE_NORMAL
- en: Quorum is deployed as a private permissioned blockchain (private implementation
    of the Ethereum protocol) that operates with extremely different expectations
    of trust between approved nodes than other permissionless blockchains. For some
    reason, there was some confusion originally on Quorum being deployed on the Etheruem
    public network, and this is not true. Quorum blockchain was designed for financial
    institutions that require a high-performing private and secure transaction platform
    within a permissioned group of participants that need guaranteed privacy.
  prefs: []
  type: TYPE_NORMAL
- en: Quorum directly addresses specific challenges to blockchain technology adoption
    within the financial industry and beyond. Most of these challenges are focused
    on privacy and security for financial sectors. Financial institutions are well
    versed in working with other institutions in a consortium manner. One example
    was the SWIFT network where financial transfers and related financial information
    were both shared but also were guaranteed levels of privacy as required between
    parties in the SWIFT consortium.
  prefs: []
  type: TYPE_NORMAL
- en: Quorum provides some substantial benefits around consensus and its security-related
    enhancements.
  prefs: []
  type: TYPE_NORMAL
- en: '#### QUORUM CONSENSUS'
  prefs: []
  type: TYPE_NORMAL
- en: Quorum's consensus protocol, called QuorumChain, is initiated within the genesis
    block of the blockchain. QuorumChain is a relatively straightforward, simple majority
    voting consensus protocol. A certain set of nodes is relegated with voting rights,
    and it's possible to confer voting rights to others.
  prefs: []
  type: TYPE_NORMAL
- en: In Quorum a smart contract is used within the genesis block to specifically
    assign voting rights and also to track the status of all voting nodes within the
    network as it updates. This is actually somewhat different from other blockchains
    and one area where Quorum differs significantly from Ethereum.
  prefs: []
  type: TYPE_NORMAL
- en: 'Voting is triggered by the smart contract that pings the voting nodes. This
    ping is actually requesting these nodes to commit to a transaction as the correct
    block at a specific height in the blockchain chain. A possible vulnerability that
    could occur is if a mutation happens in a private transaction in Quorum. This
    vulnerability could easily be identified during a proper code review in most cases.  ####
    QUORUM SECURITY AND PRIVACY ENHANCEMENTS'
  prefs: []
  type: TYPE_NORMAL
- en: Quorum manages its secure message transfers through a system called Constellation.
    Constellation is a general-purpose mechanism that is not necessarily blockchain-specific.
    Think of Constellation as a message service and encryption manager all in one.
    It serves a similar purpose as Zookeeper and Kafka in Hyperledger Fabric. The
    one area that might catch developers is that Constellation is written in Haskell—not
    your everyday programming language. I will cover Constellation from a developer
    perspective in [Chapter 10](c10.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: 'Quorum offers the following security enhancements over Ethereum:'
  prefs: []
  type: TYPE_NORMAL
- en: Quorum supports the implementation of both private transactions and private
    contracts through public/private state separation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quorum utilizes the newer Constellation peer-to-peer encrypted message exchange
    for directed transfer of private data to network participants, which is fully
    integrated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternative consensus mechanisms are supported with a permissioned network with
    varied security features that could be enabled by your development teams.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Developers with Ethereum experience will be able to develop with no real ramp-up
    time and with little effort to implement security features.  ## Summary'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter covered various aspects around blockchain security that were mainly
    focused on best practices such as security audits and security scanning. Blockchain
    uses forms of cryptography to provide a secure transaction process. Many forms
    of vulnerabilities that blockchains can be exposed to such as an insider attack
    or a routing attack need to be addressed. Performing and acting on a proper risk
    assessment would certainly reduce or eliminate vulnerabilities. Ethereum, Hyperledger,
    Corda, and Quorum all offer unique security and privacy features and capacity
    that should be considered in your blockchain design and deployments.
  prefs: []
  type: TYPE_NORMAL
