- en: Chapter 11
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章
- en: The Detection of SQL Injection on Blockchain-Based Database
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于区块链数据库的 SQL 注入检测
- en: Keshav Sinha
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Keshav Sinha
- en: '[![Orcid Image](i/orcid.svg) https://orcid.org/0000-0003-1053-3911](https://orcid.org/0000-0003-1053-3911)'
  id: totrans-3
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[![Orcid Image](i/orcid.svg) https://orcid.org/0000-0003-1053-3911](https://orcid.org/0000-0003-1053-3911)'
- en: Birla Institute of Technology, India
  id: totrans-4
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 印度比尔拉理工学院
- en: Madhav Verma
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Madhav Verma
- en: B.I.T Sindri, Dhanbad, India
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: B.I.T Sindri，印度达恩巴德
- en: ABSTRACT
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要
- en: In today's world, the storage of data needs a huge amount of space. Meanwhile,
    cloud and distributed environments provide sufficient storage space for the data.
    One of the challenging tasks is the privacy prevention of storage data. To overcome
    the problem of privacy, the blockchain-based database is used to store the data.
    There are various attacks like denial of service attacks (DoS) and insider attacks
    that are performed by the adversary to compromise the security of the system.
    In this chapter, the authors discussed a blockchain-based database, where data
    are encrypted and stored. The Web API is used as an interface for the storage
    and sharing of data. Here, they are mainly focused on the SQL injection attack,
    which is performed by the adversary on Web API. To cope with this problem, they
    present the case study based on the Snort and Moloch for automated detection of
    SQL attack, network analysis, and testing of the system.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今世界，数据的存储需要大量的空间。与此同时，云和分布式环境为数据提供了充足的存储空间。其中一个具有挑战性的任务是保护存储数据的隐私。为了解决隐私问题，使用基于区块链的数据库来存储数据。对于系统安全的威胁，对手常常会执行拒绝服务攻击（DoS）和内部攻击。在这一章中，作者讨论了一个基于区块链的数据库，数据经过加密后存储。Web
    API 作为数据存储和分享的接口。在这里，他们主要关注的是 SQL 注入攻击，这是对 Web API 的一种常见攻击。为了应对这一问题，他们提出了基于 Snort
    和 Moloch 的案例研究，用于自动检测 SQL 攻击、网络分析和系统测试。
- en: INTRODUCTION
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 引言
- en: Blockchain has become one of the significant technologies in the field of the
    IT industry. From the last few decades, blockchain came to the headlines, for
    the success of crypto-currency and smart contracts technology. After that many
    companies adopt blockchain technology for their products. Blockchain technology
    is started in the year 1991, where the trusted time-stamping protocol is used
    for data privacy (Haber, 1991). Later on in the year 1992, the Merkle tree is
    proposed for storing the multiple data in a single block (Bayer, 1992). After
    that researchers are not given much focused to evolve the technology because of
    the emergence of a centralized system. There is various research that has been
    done in the field of blockchain in the different time frames which are shown in
    Figure 1.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链已成为信息技术行业中重要的技术之一。在过去的几十年中，区块链成为头条新闻，因为加密货币和智能合约技术的成功。之后，许多公司采用了区块链技术用于其产品。区块链技术始于1991年，当时使用了可信的时间戳协议来保护数据隐私（Haber,
    1991）。随后，在1992年，Merkle树被提出用于在单个块中存储多个数据（Bayer, 1992）。之后，由于集中式系统的出现，研究人员没有太多关注来发展这项技术。在不同时间段内，在区块链领域进行了各种研究，如图1所示。
- en: '| Figure 1\. The Various Development in the Field of Blockchain at Different
    Time Frame |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 图1\. 区块链领域在不同时间段的各种发展 |'
- en: '| ![Figure978-1-7998-7589-5.ch011.f01](i/ch011.f01.png) |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-7589-5.ch011.f01](i/ch011.f01.png) |'
- en: Blockchain Safety and Security
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链的安全性和保密性
- en: The blockchain technology is based on the public ledger, where the data are
    stored at several nodes for transmission. There are various security principles
    and features of the blockchain system such as.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链技术基于公共账本，数据存储在多个节点以进行传输。区块链系统具有各种安全原则和特性，例如：
- en: '1\. Decentralization: There is no single point failure present in the blockchain
    system because the nodes are distributed across the internet and all transactions
    over the network can be seen by all the nodes.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1\. 去中心化：区块链系统中不存在单点故障，因为节点分布在互联网上，网络上的所有交易都可以被所有节点看到。
- en: '2\. Confidentiality: Public-key cryptography is used to identify authentic
    users, and provide the secure transmission of the data over the internet.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2\. 机密性：使用公钥加密技术识别真实用户，并提供互联网上数据的安全传输。
- en: '3\. Integrity: Blockchain technology is based on the concept of time-stamped,
    where every data is signed with a unique time, and any nodes can easily trace
    and validate the transaction.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3\. 完整性：区块链技术基于时间戳的概念，其中每个数据都用唯一的时间签名，并且任何节点都可以轻松追踪和验证交易。
- en: '4\. Transparency: In the blockchain system the unique agreement is signed by
    the nodes and the network before the transmission of data.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4\. 透明度：在区块链系统中，在数据传输之前，节点和网络签署了独特的协议。
- en: '5\. Immutability: The blockchain is the concept of the block, where the data
    added to the network will not be destroyed or modified.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5\. 不可变性：区块链是区块的概念，添加到网络的数据不会被销毁或修改。
- en: The blockchain systems are operated by a public ledger, where every node has
    access to the network data. Any transaction that has occurred on the network is
    reviewed and validated by the different node members. This creates data transparency
    and it is not possible to alter the ledger without seeing by any actor within
    the system network. This concluded that the blockchain systems are resisted against
    any type of attack. Based on the theory there are no virtual attacks that are
    possible to the blockchain system. But in the year 2017, there is 10 percent of
    attacks are executed on the blockchain system (Passeri, 2017). This incident caused
    a huge loss for the IT industry. Many researchers point that blockchain technology
    is mainly focused on Cryptocurrency, where the adversaries get huge rewards once
    the attack is succeeded.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链系统由公共账本操作，每个节点都可以访问网络数据。网络上发生的任何交易都会被不同节点成员审查和验证。这样就实现了数据透明性，并且在系统网络中没有任何参与者看不到账本的情况下无法篡改。这一结论表明，区块链系统对任何类型的攻击都具有抵抗能力。根据理论，区块链系统不可能受到虚拟攻击。但是在2017年，有10%的攻击针对区块链系统进行了执行（Passeri,
    2017）。这一事件给IT行业造成了巨大损失。许多研究人员认为，区块链技术主要集中在加密货币上，攻击者一旦攻击成功就可以获得巨大的回报。
- en: Cryptographic Techniques
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 密码学技术
- en: 'The traditional blockchain system is based on the public key cryptography and
    hash function for the secure transmission of data. The security of data is achieved
    using the cryptography technique (Darshani, 2018). The most important part of
    cryptography is to make the data unreadable, in this encryption and decryption
    plays an important role. The encryption uses the three different type’s key selection
    technique to encrypt the message:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的区块链系统基于公钥密码学和哈希函数进行数据的安全传输。使用密码学技术实现了数据的安全性（Darshani, 2018）。密码学的最重要部分是使数据变得不可读，加密和解密在其中起着重要作用。加密使用三种不同类型的密钥选择技术来加密消息：
- en: '1\. Symmetric-Key Cryptography: In this, both the sender and receiver use the
    single key for encryption and decryption (Darshani, 2016).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1\. 对称密钥密码学：在这种情况下，发送方和接收方都使用单一密钥进行加密和解密（Darshani, 2016）。
- en: '2\. Public-Key Cryptography: In this, the pair of keys is used by the client
    and server for encryption and decryption. The client shares the public key for
    encryption, where the private key is used by the client for the decryption of
    the data (Paul, 2019).'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2\. 公钥密码学：在这种情况下，客户端和服务器使用一对密钥进行加密和解密。客户端共享公钥进行加密，而私钥由客户端用于解密数据（Paul, 2019）。
- en: '3\. Hash Functions: In this, the arbitrary size data is mapped with fixed-size
    values (Almuttalibi, 2019). The hash table is used for the storage and retrieval
    of data in a very small amount of time.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3\. 哈希函数：在这种情况下，任意大小的数据被映射为固定大小的值（Almuttalibi, 2019）。哈希表用于以非常小的时间量存储和检索数据。
- en: Traditional cryptography uses the permutation technique to scramble the English
    alphabet in the original text file. Let us see an example, where the ASCII value
    of alphabet (n) is used for the encryption (Paul, 2019), the original Message
    (M) is consists of several sets of sub-messages {![Mathtype978-1-7998-7589-5.ch011.m01](i/ch011.m01.svg),
    ![Mathtype978-1-7998-7589-5.ch011.m02](i/ch011.m02.svg), …, ![Mathtype978-1-7998-7589-5.ch011.m03](i/ch011.m03.svg)},
    where ‘m’ is the finite set of letters, ‘n’ is the fixed-length sequences (![Mathtype978-1-7998-7589-5.ch011.m04](i/ch011.m04.svg)).
    Here, ![Mathtype978-1-7998-7589-5.ch011.m05](i/ch011.m05.svg) for the ASCII alphabet.
    This is how cryptography works for plaintext encryption in a distributed and centralized
    environment.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 传统密码学使用排列技术来对原始文本文件中的英文字母进行混淆。让我们看一个例子，其中字母（n）的ASCII值用于加密（Paul，2019），原始消息（M）由多组子消息{![Mathtype978-1-7998-7589-5.ch011.m01](i/ch011.m01.svg),
    ![Mathtype978-1-7998-7589-5.ch011.m02](i/ch011.m02.svg), …, ![Mathtype978-1-7998-7589-5.ch011.m03](i/ch011.m03.svg)}
    组成，其中‘m’是有限的字母集合，‘n’是固定长度的序列 (![Mathtype978-1-7998-7589-5.ch011.m04](i/ch011.m04.svg)).
    在这里，![Mathtype978-1-7998-7589-5.ch011.m05](i/ch011.m05.svg) 代表ASCII字母表。这就是密码学在分布式和集中式环境中如何为明文加密的工作原理。
- en: The General Structure of Blockchain
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链的一般结构
- en: 'The structure of the blockchain is divided into four different sub-section:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链的结构被分成四个不同的子部分：
- en: '1\. Main Data: It records all the current services for example transactions,
    bank, and contract records, or IoT data records.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '1\. 主要数据: 它记录了所有当前服务，例如交易，银行和合同记录，或者物联网数据记录。'
- en: '2\. Hash: The hash is used to secularly broadcast the transaction record to
    other nodes. The Merkle tree function is used to generate the hash value and it
    is recorded in the block header. The computational time is reduced by using the
    Merkle tree function.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '2\. 哈希: 哈希用于安全地广播交易记录到其他节点。 Merkle树函数用于生成哈希值，并且记录在区块头中。 通过使用Merkle树函数来减少计算时间。'
- en: '3\. Timestamp: Once the block is created the time is generated for each block
    and the metadata is stored in the database.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '3\. 时间戳: 一旦区块被创建，每个区块会生成时间，并且元数据存储在数据库中。'
- en: '4\. Other Information: The cryptographic signature and Nonce value are defined
    by the user for the secure transmission of the data.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '4\. 其他信息: 用户为了数据的安全传输而定义了密码签名和Nonce值。'
- en: The Framework for Blockchain Technology
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链技术框架
- en: The blockchain is consist of a public ledger, where every record is added to
    the lists of transaction. And the collection of various records is known as blocks.
    Here, every node is responsible for the validation of blocks. Figure 2 presents
    the framework for the blockchain system. The process is divided into six sub-sections
    (1) transaction of data, (ii) creation of block, (iii) mining of data, (iv) mining
    process completion, (v) validation of block, and (vi) creating the chain between
    the new blocks.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链由一个公共账本组成，每条记录都添加到交易列表中。各种记录的集合称为区块。在这里，每个节点负责验证区块。图2展示了区块链系统的框架。该过程分为六个子部分：(1)
    数据交易，(ii) 区块创建，(iii) 数据挖掘，(iv) 挖掘过程完成，(v) 区块验证和 (vi) 在新区块之间创建链。
- en: '| Figure 2\. The Framework for Blockchain Technology |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 图2\. 区块链技术框架 |'
- en: '| ![Figure978-1-7998-7589-5.ch011.f02](i/ch011.f02.png) |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-7589-5.ch011.f02](i/ch011.f02.png) |'
- en: '1\. Data Transaction: The transaction of data between the two nodes is recorded
    and broadcasted among other connected nodes. In the case of Cryptocurrency, when
    the transaction is initiated in the blockchain system, then another node is recorded
    their transaction history. This causes a huge amount of broadcasting between the
    nodes.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1\. 数据交易：两个节点之间的数据交易被记录并广播给其他连接的节点。在加密货币的情况下，当在区块链系统中启动交易时，另一个节点会记录它们的交易历史。这导致节点之间的大量广播。
- en: '2\. Creation of block: In the blockchain system the miners validate the global
    ledger. All the incoming transaction of data is verified based on the blockchain
    protocol. Once the validity of the block is confirmed then the miner will start
    organizing the transition. Here, each block has a limited size and the mining
    process is not stopped until the limit is reached. All the valid transactions
    are set into the candidate blocks, and the miner will record the timestamp of
    previous information.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2\. 区块的创建：在区块链系统中，矿工验证全局账本。所有传入的数据交易都根据区块链协议进行验证。一旦确认了区块的有效性，矿工将开始组织过渡。在这里，每个区块的大小有限，挖掘过程不会停止，直到达到限制。所有有效的交易都被设置到候选区块中，并且矿工将记录先前信息的时间戳。
- en: '3\. Mining and complete mining of block: Once the candidate block is completed
    the mining process is started, this process is called puzzle solving. Here the
    cryptographic hash is used to obtain the Block ID. The generation of the hash
    value is very trivial and the miners continue to adjust the nonce value in the
    candidate block header which creates a security layer and is not be altered by
    an adversary. Once the puzzle is resolved the mining process is completed.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3\. 区块的挖掘和挖掘完成：一旦候选区块完成挖掘过程，就开始了这个过程，称为解谜。在这里，使用加密哈希来获得区块ID。哈希值的生成非常琐碎，矿工继续调整候选区块头中的随机数值，这创建了一个安全层，不会被对手更改。一旦谜题解决，挖掘过程就完成了。
- en: '4\. Validation: Once the block is mined, the miner sends the block to another
    node (broadcast) and waits for the confirmation. The other nodes start validating
    the block and if they find any inconsistency in the block then they reject the
    block. If the block passes all the nodes without any discrepancy then that block
    is added to the data chain of the existing network.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4\. 验证：一旦区块被挖掘出来，矿工将该区块发送到另一个节点（广播），然后等待确认。其他节点开始验证该区块，如果发现任何不一致之处，则拒绝该区块。如果该区块在所有节点中通过而没有任何差异，则将该区块添加到现有网络的数据链中。
- en: '5\. New Blockchain: Once the validation is over the timestamped is added to
    the block and the final block is added in a linear or chronological order to the
    chain. The existing chain is broadcast to the entire network and is stored in
    the public ledgers.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5\. 新区块链：一旦验证结束，时间戳被添加到区块中，最终区块按线性或时间顺序添加到链中。现有链被广播到整个网络，并存储在公共账本中。
- en: Blockchain System and Automated Detection of SQL Injection Attack
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链系统和自动检测 SQL 注入攻击
- en: The emergence of blockchain technology provides high secrecy to the data. Besides
    the concept of temper resistance, the blockchain maintains its logs in the native
    Database Management System (DBMS). However, in the insider attack, the adversary
    can alter the transaction logs and login details present in the DBMS. To cope
    with this problem, we have to push all the database towards the blockchain framework.
    The storage data are distributed throughout the geographical region and a huge
    amount of users are present to access those data. Network analysis is a huge challenge
    for an administrator. According to Frost, 1994; Nikolaidis, 1992, the network
    traffic is characterized in two ways (i) Stochastic and (ii) Deterministic. The
    stochastic models are used to track the statistics of the network source in better
    form, whereas the deterministic model has the worst behavior in the determination
    of the traffic. There are various stationary stochastic models such as variable
    bit rate, Markov modulated processes, self-similar, Transform-Expand-Sample (TES),
    autoregressive models, (etc.) the deterministic models that bound source characteristics
    include the peak rate model, maximum packet length, and minimum packet inter-arrival
    time is used to determine the peak rate of each connection. The best example for
    a large network is an automated teller machine (ATM), which send 53-byte packets
    or cell through virtual circuits. There are several protocol layers in-between
    the application protocol and the ATM layer which add complexity, but it doesn’t
    address the issue of Session hijacking. Here, it’s come the role of automated
    detection where it detects the response and event earlier using various stochastic
    models. The attacks like SQL injection are executed by an adversary on a client-server
    architecture. The adversary uses the SQL query to inject network traffic which
    will collect the information. The security of the database is going on in this
    direction, where BigchainDB integrates Tendermint with MongoDB (NoSQL) to increase
    the transaction rate of data (Bigchaindb, 2018; MongoDB, 2018; Tendermint, 2018,
    Kwon, 2014). LedgerDB is another database based on blockchain technology (LedgerDB,
    2018). It supports high transaction throughput, single table and it doesn’t support
    the SQL features. The Bitcoin transaction is supported by ChainDB for all general
    purposes solution (Chaindb, 2018). The blockchain-based DBMS doesn’t have much
    SQL querying interface that increases the concern of data privacy in the public
    ledger-based blockchain system. The traditional DBMS has more than one administrator,
    where the inside attack can get full access to the data server. Due to a lack
    of cryptographic protocol, the traditional DBMS cannot resist the attack. So,
    our goal is to validate the system before it is used with the blockchain system.
    The blockchain system only stores the metadata in the DBMS. The hash function
    is used to map the arbitrary data into fixed-length bit string data (Handschuh,
    2005). The hash function is defined as h:![Mathtype978-1-7998-7589-5.ch011.m06](i/ch011.m06.svg),
    where ‘n’ is the 128, 256, and 512\.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链技术的出现为数据提供了高度的保密性。除了抗篡改的概念之外，区块链将其日志保留在原生的数据库管理系统（DBMS）中。然而，在内部攻击中，对手可以更改DBMS中存在的交易日志和登录详细信息。为了应对这个问题，我们必须将所有数据库推向区块链框架。存储数据分布在地理区域的各个地方，并且有大量的用户可以访问这些数据。网络分析对管理员来说是一个巨大的挑战。根据
    Frost, 1994；Nikolaidis, 1992 的说法，网络流量有两种特征（i）随机和（ii）确定性。随机模型用于更好地跟踪网络源的统计信息，而确定性模型在确定流量方面具有最差的行为。有各种各样的稳态随机模型，如可变比特率、马尔可夫调制过程、自相似、变换-扩展-采样（TES）、自回归模型等等。限制源特性的确定性模型包括峰值速率模型、最大包长度和最小包间到达时间，用于确定每个连接的峰值速率。一个大型网络的最佳示例是自动取款机（ATM），它通过虚拟电路发送
    53 字节的数据包或单元。应用协议和 ATM 层之间有几个协议层，增加了复杂性，但它并没有解决会话劫持的问题。在这里，自动检测起到了作用，它使用各种随机模型提前检测响应和事件。诸如
    SQL 注入之类的攻击是由对手在客户端-服务器架构上执行的。对手使用 SQL 查询来注入网络流量，以收集信息。数据库的安全正在朝着这个方向发展，其中 BigchainDB
    将 Tendermint 与 MongoDB（NoSQL）集成，以提高数据的交易速率。LedgerDB 是另一个基于区块链技术的数据库。它支持高交易吞吐量、单表，并且不支持
    SQL 功能。比特币交易得到 ChainDB 的支持，用于所有一般目的的解决方案。基于区块链的数据库管理系统没有太多的 SQL 查询接口，这增加了公共账本型区块链系统中数据隐私的关注。传统的数据库管理系统有一个以上的管理员，内部攻击者可以完全访问数据服务器。由于缺乏加密协议，传统的数据库管理系统无法抵御攻击。因此，我们的目标是在将系统用于区块链系统之前对其进行验证。区块链系统只在
    DBMS 中存储元数据。哈希函数用于将任意数据映射到固定长度的比特串数据。哈希函数定义为 h:![Mathtype978-1-7998-7589-5.ch011.m06](i/ch011.m06.svg)，其中'n'为128、256和512\.
- en: '| Figure 3\. The Cryptographic Hash of Message Block |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 图 3\. 消息块的密码哈希 |'
- en: '| ![Figure978-1-7998-7589-5.ch011.f03](i/ch011.f03.png) |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-7589-5.ch011.f03](i/ch011.f03.png) |'
- en: Figure 3 represents the hashing of the original message block and store it in
    the DBMS. The property of hashing is that the difference between the two values
    is not relative, which means that the small change in the input provides a huge
    change in the output value. This creates an advantage for the generation of a
    unique hash value for all the tuples in the database. The use of existing DBMS
    with blockchain network is based on metadata. The DBMS tuples are cryptographic
    hash and then generate the metadata. The DBMS table ‘T’ is based on the primary
    key (![Mathtype978-1-7998-7589-5.ch011.m07](i/ch011.m07.svg)) and tuple with ‘r’,
    we have to generate the Row_ID.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3 表示原始消息块的哈希值并将其存储在数据库管理系统中。哈希的属性是两个值之间的差异不是相对的，这意味着输入的微小变化会导致输出值的巨大变化。这为数据库中所有元组的唯一哈希值的生成提供了优势。现有数据库管理系统与区块链网络的使用是基于元数据的。数据库管理系统中的元组经过密码哈希，然后生成元数据。数据库管理系统表
    'T' 是基于主键 (![Mathtype978-1-7998-7589-5.ch011.m07](i/ch011.m07.svg)) 和元组 'r'，我们必须生成
    Row_ID。
- en: '![Mathtype978-1-7998-7589-5.ch011.m08](i/ch011.m08.svg) (1)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![Mathtype978-1-7998-7589-5.ch011.m08](i/ch011.m08.svg) (1)'
- en: Eq. 1 used to concatenate the primary key and tuple with the table name to generate
    the hash form. The fingerprint of each tuple is stored in the blockchain using
    the digital signature (private key) on the blockchain node. Every time the changes
    in the tuple are logged with user information.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Eq. 1 用于将主键和元组与表名连接起来生成哈希形式。每个元组的指纹都使用数字签名（私钥）存储在区块链节点上。每次元组中的更改都记录在用户信息中。
- en: Motivation and Proposes of the Work
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 工作的动机和目标
- en: 'The motivation of work is to provide secure data storage in blockchain-based
    DBMS. The tuple of DBMS is updated by any user node in the blockchain and those
    modifications are stored in the database. Those data come from various fields
    such as education, military, business, and entertainment. Now the attacks are
    executed to get the information for the Database. The basic processing of information
    is called by using the select, update, and delete command in DBMS. Now a day’s
    traditional database is used in the field of blockchain this increased the chance
    of an attack like SQL injection which exploits the security of the database and
    retrieves the personal information. To overcome the high percentage of threats
    it needed to be automated to stop the intrusion or attack on the blockchain network.
    The administrator has to face lots of security challenges such as:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 工作的动机是在基于区块链的数据库管理系统中提供安全的数据存储。区块链中的任何用户节点都可以更新 DBMS 的元组，并将这些修改存储在数据库中。这些数据来自于教育、军事、商业和娱乐等各个领域。现在，攻击正在执行以获取数据库的信息。信息的基本处理是通过使用
    DBMS 中的 select、update 和 delete 命令来调用的。如今，传统数据库被用于区块链领域，这增加了 SQL 注入等攻击的机会，从而利用了数据库的安全性并检索个人信息。为了克服高百分比的威胁，需要自动化来阻止对区块链网络的入侵或攻击。管理员必须面对许多安全挑战，例如：
- en: '• Attack on Personal Information: At the present date the adversary is waiting
    on the internet to retrieve the personal information. An attack like SQL injection
    can retrieve the database table information and login credentials (username, password)
    to exploit the blockchain network.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 个人信息攻击：目前，对手正等待在互联网上检索个人信息。像 SQL 注入这样的攻击可以检索数据库表信息和登录凭据（用户名、密码），以利用区块链网络。
- en: '• Replication of Metadata: In the blockchain network, the database stores the
    metadata of row and column. The adversary always tries to replicate the details
    of DBMS.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 元数据复制：在区块链网络中，数据库存储行和列的元数据。对手总是试图复制 DBMS 的详细信息。
- en: '• Data Privacy: The huge amount of data is distributed on the internet. The
    entertainment company which is based on the blockchain system has always been
    concerned about data piracy.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 数据隐私：大量数据分布在互联网上。基于区块链系统的娱乐公司一直关注数据盗版问题。
- en: These are some of the challenges faced by the blockchain system. But there is
    a chain of problems present in data security, and we are not able to cover all
    the problems. There are various ways to provide security on data. But automating
    the detection of attack is one of the effective ways to stop the tempering of
    the blockchain database. It provides robustness and effectiveness to securely
    store the data in the blockchain network.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是区块链系统面临的一些挑战。但在数据安全方面存在一系列问题，我们无法涵盖所有问题。有各种方式来提供数据安全。但自动检测攻击是阻止区块链数据库篡改的有效方法之一。它为在区块链网络中安全存储数据提供了鲁棒性和有效性。
- en: BACKGROUND
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 背景
- en: There are various researches has done in the field of blockchain and DBMS security
    and we found that most of the time the attacker has performed two different types
    of attack (i) Active and (ii) Passive attack. In an active attack, the adversary
    modifies the data and sends it to the users, this event causes a serious effect
    on personnel. In a passive attack, the adversary doesn’t harm the system they
    just watch the traffic of the information. According to w. Jung and S. Park (2017),
    the blockchain is a P2P system where the adversary applies the DDoS attack to
    shut down the transaction node. In the blockchain system, all the nodes check
    the memory pool and the time of the overflood attack. Here, the author proposed
    the least Mean square method to minimize the creation of a new transaction in
    the blockchain system. W. J. Lai et al. (2019), proposed the time-sensitive message
    encryption scheme. Here, the message is encrypted in a decentralized environment,
    which encourages the participants to share the resource with the network. Bansal
    and Sethumadhavan (2020), present the prevention technique against name-based
    attacks. It is a DNS cache poisoning attack in the blockchain system, where the
    author uses a user-defined port instead of a predefined port for the transmission.
    In the second step, the author encrypts the port number and the communication
    is initiated using the decrypted user-defined port number. Tanriverdi and Tekerek
    (2019), proposed a blockchain-based web attack detection model using signature-based
    detection. The work is to detect the specific pattern such as Structured Query
    Language (SQL) Injection, Cross-Site Scripting (CSS), and Command Injection. The
    author uses the MultiChain application, and the signature list is updated on the
    blockchain. Anita and Vijayalakshmi (2019), present a brief survey of different
    types of attacks, challenges, and security feature of blockchain technology. Wang
    and Li (2019), present a trace analysis technique to detect the various attack
    in the blockchain. Here, the author captures the sequence of actions based on
    the running protocol. This will help to detect the attacks like DDoS and triangle.
    Brown et al. (2020), present a double-spend attack on the established transaction
    of blockchain. The success of this attack depends on the transaction and computational
    power. Gochhayat et al. (2019), present a lightweight decentralized encrypted
    cloud storage model using the blockchain technique. This model provides confidentiality
    and integrity for storage data. Here, the author has used the hashing and symmetric
    encryption technique for the security of the data. Saad et al. (2020), explore
    the attack surface on the public blockchain system. In this, the attribute attack
    is used to check the cryptographic construct, distributed architecture, and application
    context. The author also explores how various vectors are connected to the Blockchain
    system. Holbrook (2020), studied the various security aspects in the blockchain.
    Here, the author explains that the public ledger is distributed and cannot be
    modified or deleted. The threats like distributed denial‐of‐service (DDoS) can
    expose the security of the blockchain network. The specific feature like Hyperledger,
    Quorum, (etc.) offers the security to blockchain administrator. Rikken et al.
    (2019), analyze the various challenges regarding blockchain governance. Here author
    proposed the framework based on the infrastructure, application, company, and
    institution/country. Singh et al. (2019), present the blockchain-based DDoS solution
    to avoid a serious attack on the network. Here the author provides the concern
    regarding the rapid change of blockchain technology in the field of financial,
    gaming, and decentralized servers to provide a secure environment for the transaction
    of the block.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在区块链和数据库管理系统安全领域进行了各种研究，我们发现大多数情况下攻击者进行了两种不同类型的攻击（i）主动攻击和（ii）被动攻击。在主动攻击中，对手修改数据并发送给用户，这一事件对人员造成严重影响。在被动攻击中，对手不会损害系统，只是观察信息的流量。根据w.
    Jung和S. Park（2017）的说法，区块链是一个P2P系统，在这里对手应用DDoS攻击关闭交易节点。在区块链系统中，所有节点检查内存池和洪水攻击的时间。在这里，作者提出了最小均方方法来最小化在区块链系统中创建新交易的数量。W.
    J. Lai等人（2019年）提出了时间敏感的消息加密方案。在这里，消息在分散式环境中加密，鼓励参与者与网络共享资源。Bansal和Sethumadhavan（2020年）提出了针对基于名称的攻击的预防技术。这是一种在区块链系统中的DNS缓存中毒攻击，作者使用用户定义的端口而不是预定义的端口进行传输。在第二步中，作者加密端口号，通信使用解密的用户定义的端口号启动。Tanriverdi和Tekerek（2019年）提出了一种基于区块链的网络攻击检测模型，使用基于签名的检测。该工作是检测特定模式，如结构化查询语言（SQL）注入，跨站脚本（CSS）和命令注入。作者使用MultiChain应用程序，并在区块链上更新签名列表。Anita和Vijayalakshmi（2019年）提出了对区块链技术不同类型攻击、挑战和安全特性的简要调查。Wang和Li（2019年）提出了一种追踪分析技术，用于检测区块链中的各种攻击。在这里，作者根据运行协议捕获操作序列。这将有助于检测DDoS和三角形等攻击。Brown等人（2020年）提出了一种对区块链已建立的交易进行双重支付攻击的方法。该攻击的成功取决于交易和计算能力。Gochhayat等人（2019年）提出了一种使用区块链技术的轻量级分散式加密云存储模型。这个模型为存储数据提供了机密性和完整性。在这里，作者使用了哈希和对称加密技术保护数据的安全性。Saad等人（2020年）探索了公共区块链系统的攻击面。在这里，属性攻击用于检查加密构造、分布式架构和应用上下文。作者还探讨了各种向量如何与区块链系统相连。Holbrook（2020年）研究了区块链中的各种安全方面。在这里，作者解释了公共账本是分布式的，无法修改或删除。像Hyperledger、Quorum（等）这样的特定功能为区块链管理员提供了安全性。Rikken等人（2019年）分析了关于区块链治理的各种挑战。在这里，作者提出了基于基础设施、应用程序、公司和机构/国家的框架。Singh等人（2019年）提出了基于区块链的DDoS解决方案，以避免网络遭受严重攻击。在这里，作者提供了关于区块链技术在金融、游戏和分散式服务器领域的快速变化，以提供块的交易的安全环境的关注。
- en: The blockchain system uses the database for storing metadata, where our work
    is to provide a secure environment for the storage of the data. Based on this
    fact here we present some of the secure database storage technique which helps
    in the blockchain environment. According to Sinha et al., (2020), secure storage
    of data is one of the challenging tasks. Here, the authors present the asymmetric
    technique for the storage of the data in the cloud data server. Bertino et al.
    (2007), present the anomaly detection technique, where the author identifies the
    malicious actions of database application based on the SQL queries. They demonstrate
    that the proposed model can detect the SQL injection attack on the database. Tajpouret
    al. (2010), present the various approaches to detect SQL injection. Wei et al.,
    (2006), propose a novel technique to resist various attacks that target the store
    procedures. They use code analysis and runtime validation to detect the attacks
    on SQL Server 2005 database. Ntagwabira (2010), proposed the Query tokenization
    to detect the SQL injection, where the author uses the QueryParser to detect the
    space, single quote, or double dashes in the strings. The two array string is
    compared based on the length for the detection of the injection. Sadeghian et
    al. (2013), presents various detection and prevention techniques for SQL injection
    which provide confidentiality, integrity, and availability of information in the
    database. Kumar (2012), presents the survey on SQL injection attacks, detection,
    and prevention techniques. They found that the poorly coded application affect
    the organization network. The attackers violate all types of security layers and
    protocol’s to access that information. Singh et al. (2016), discussed attacks
    and prevention against SQL injection. They proposed the firewall technique for
    the SQL server which will restrict the privilege of the unregistered users. But
    for using this service it needed to be the node to node signature authentication.
    Gudipati et al. (2016), uses the Sp_executesql to execute the syntax in a specific
    order which replaces the QUOTENAME. It also manages the permission at the time
    of attacks. Kamtuo (2016), uses the machine learning technique for the analysis
    of attacks. It also extracts information for training and testing. Zhou (2016),
    introduced a User Defined Approach (UDA) for mapping the attribute to a specific
    requirement. It also checks the threshold value for any attacks. Dubey (2016),
    introduce the filtering mechanism for sending and receiving the request. Aldlaeen
    (2013), introduced a firewall technique to obstruct the SQL injection attack and
    provide access control to the authentic users only. Chatur (2015), uses a security-based
    model for checking the signature of the authentic users. Ghorbanzadeh et al. (2010),
    introduced the firewall and virtual private network for the prevention of unwanted
    intrusion on the mobile database. Sallam et al. (2016), introduced a Role-based
    anomaly detection approach for an insider attack. Fatih (2017) and Mouton et al.
    (2014), introduced the web-based security approach to protect against SQL injection.
    Orman (2018), proposed a Blockchain concept to verify the genuine nodes of the
    webserver.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链系统使用数据库存储元数据，我们的工作是为数据存储提供安全环境。基于这一事实，我们在此提出了一些在区块链环境中有助于安全数据库存储的技术。根据Sinha等人（2020）的说法，数据的安全存储是一个具有挑战性的任务之一。在这里，作者提出了云数据服务器中数据存储的非对称技术。Bertino等人（2007）提出了异常检测技术，作者根据SQL查询识别数据库应用程序的恶意行为。他们证明了所提出的模型可以检测数据库的SQL注入攻击。Tajpour等人（2010）介绍了各种方法来检测SQL注入。Wei等人（2006）提出了一种新颖的技术，用于抵抗针对存储过程的各种攻击。他们利用代码分析和运行时验证来检测针对SQL
    Server 2005数据库的攻击。Ntagwabira（2010）提出了查询标记化来检测SQL注入，作者使用查询解析器来检测字符串中的空格、单引号或双破折号。基于长度比较两个数组字符串来检测注入。Sadeghian等人（2013）介绍了针对SQL注入的各种检测和预防技术，以提供数据库中信息的机密性、完整性和可用性。Kumar（2012）介绍了关于SQL注入攻击、检测和预防技术的调查。他们发现编写不良的应用程序会影响组织网络。攻击者违反所有类型的安全层和协议来访问信息。Singh等人（2016）讨论了针对SQL注入的攻击和预防。他们提出了用于SQL服务器的防火墙技术，以限制非注册用户的特权。但是，使用此服务需要进行节点对节点的签名认证。Gudipati等人（2016）使用Sp_executesql以特定顺序执行语法，取代QUOTENAME。它还在攻击时管理权限。Kamtuo（2016）使用机器学习技术进行攻击分析。它还提取信息进行训练和测试。Zhou（2016）引入了用户定义方法（UDA）来将属性映射到特定要求。它还检查任何攻击的阈值值。Dubey（2016）引入了用于发送和接收请求的过滤机制。Aldlaeen（2013）引入了用于阻挡SQL注入攻击并只允许真实用户访问控制的防火墙技术。Chatur（2015）采用了基于安全的模型来检查真实用户的签名。Ghorbanzadeh等人（2010）引入了用于防止移动数据库不必要入侵的防火墙和虚拟专用网络。Sallam等人（2016）提出了一种基于角色的异常检测方法，用于内部人员的攻击。Fatih（2017）和Mouton等人（2014）介绍了基于网络的安全方法，以防范SQL注入攻击。Orman（2018）提出了一种区块链概念，用于验证Web服务器的真实节点。
- en: The blockchain-based database consists of a huge amount of metadata and it needs
    to organize and optimized before sharing with the network node. Here we present
    some of the optimization and scheduling technique which reduce the time complexity
    of the data. According to Priya (2020), the time complexity is reduced by minimizing
    the makespan of the waited queue. Here the author presents the PA-ACO technique
    to minimize the makespan of flow shop scheduling problem. Sahana et al. (2018),
    proposed an optimization and allocation technique for the budgeting problem. The
    author presents the Genetic Algorithm (GA) and Optimal Computing Budget Allocation
    (OCBA) technique for the optimization of large scale budgeting problems. Khowas
    et al. (2016), present the Particle Swarm Optimization (PSO) technique for large-scale
    budgeting problems. Paul (2019), present the article on voice-based authentication
    scheme to detect the real world culprits. Verma et al. (2020), present the asymmetric
    encryption technique for sharing and storage of data in the distributed database.
    Chaddha et al. (2020), present the real-time image encryption technique based
    on asymmetric key cryptography. The technique is used for the large scale image
    encryption and storage of data in the database. Choudhary et al. (2018), proposed
    multimedia encryption using the asymmetric key for storage. The technique is based
    on the key management server to store the data in the cloud.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 基于区块链的数据库包含大量的元数据，在与网络节点共享之前需要进行组织和优化。在这里，我们介绍了一些优化和调度技术，可以降低数据的时间复杂度。根据 Priya（2020）的说法，通过减少等待队列的最大处理时间来降低时间复杂度。在这里，作者提出了用于最小化流水车间调度问题的
    PA-ACO 技术。Sahana 等人（2018）提出了一种用于预算问题的优化和分配技术。作者提出了用于大规模预算问题优化的遗传算法（GA）和最优计算预算分配（OCBA）技术。Khowas
    等人（2016）介绍了用于大规模预算问题的粒子群优化（PSO）技术。Paul（2019）提出了一篇关于基于语音的身份验证方案的文章，以便检测现实世界的罪犯。Verma
    等人（2020）提出了一种用于在分布式数据库中共享和存储数据的非对称加密技术。Chaddha 等人（2020）提出了基于非对称密钥密码学的实时图像加密技术。该技术用于大规模图像加密和数据存储在数据库中。Choudhary
    等人（2018）提出了使用非对称密钥进行多媒体加密以进行存储的技术。该技术基于密钥管理服务器将数据存储在云中。
- en: 'CASE STUDY: AUTOMATED SQL INJECTION DETECTION'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 案例研究：自动 SQL 注入检测
- en: After an exhaustive study of different techniques, we would like to propose
    an automated SQL injection detection using Snort and Moloch. This will help to
    detect the SQL injection in the blockchain network. The cyber-attacks are one
    of the buzz problems for any individual. Here the adversary always tries to take
    personal information like credit/debit card information, passwords from the storage
    database, and this information are sold on the dark web very easily. On the other
    hand, the blockchain-based DBMS is used for storing the metadata. Many companies
    use the blockchain system for multimedia storage and for that they use web APIs.
    The web interfaces are more vulnerable against (i) weak cryptographic authentication,
    and (ii) flaws in endpoint connection. The protocols like SOAP provide the security
    architecture and REST which provide a secure environment for the API implementation.
    During transmission of data, the adversary secretly intercepts the communications
    between the two parties, and even though they altered the message. API Injections
    like XSS and SQLite will inject the malicious code into the software program and
    create a backdoor in the system. The Distributed Denial of Service (DDoS), is
    one of his kind of attacks where the attacker will flood the blockchain network
    with unwanted packets. The API injection or SQL injection is the most common attack
    which is executed by the attacker. The SQL injection will not need any permission
    for authentication, instead, it will redirect the information of the database
    (H. Meyer 1996). In year I988, Computer Emergency Response Team (CERT) is developed
    a coordination center at Carnegie Mellon University (CMU) that handles the security
    against network attacks like a worm, virus, malware, etc. (J. Clarke 2009).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在对不同技术进行详尽研究后，我们希望提出使用 Snort 和 Moloch 实现自动化 SQL 注入检测。这将有助于在区块链网络中检测 SQL 注入。网络攻击是任何个人都面临的重大问题之一。在这里，对手总是试图获取个人信息，如信用卡/借记卡信息，从存储数据库中获取密码，并且这些信息在暗网上非常容易出售。另一方面，基于区块链的数据库管理系统用于存储元数据。许多公司使用区块链系统进行多媒体存储，为此它们使用网络
    API。网络接口更容易受到以下方面的攻击：(i) 密码验证薄弱，和 (ii) 端点连接中的缺陷。像 SOAP 这样的协议提供了安全架构，而 REST 则提供了
    API 实现的安全环境。在数据传输期间，对手秘密地拦截两方之间的通信，甚至他们改变了消息。API 注入，如 XSS 和 SQLite，将恶意代码注入软件程序，并在系统中创建后门。分布式拒绝服务（DDoS）是一种攻击，攻击者会向区块链网络发送不需要的数据包。API
    注入或 SQL 注入是攻击者执行的最常见攻击。SQL 注入不需要权限验证，而是重定向数据库的信息（H. Meyer 1996）。1988 年，计算机应急响应小组（CERT）在卡内基梅隆大学（CMU）设立了一个协调中心，负责应对网络攻击，如蠕虫、病毒、恶意软件等（J.
    Clarke 2009）。
- en: SQL Injection Overview
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 注入概述
- en: 'Mainly the SQL injection attacks are executed on a client-server architecture.
    The web API acts as a thin-client, where the user sends the query to extract the
    data from the database. Figure 4 presents the SQL attack executed on the blockchain
    system having Web API. The web API uses the SQL commands for the extraction of
    data from the database. SQL is a Structured Query Language that is used for managing
    and communicating with a relational database. The most common SQL queries are:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的 SQL 注入攻击是在客户端-服务器架构上执行的。Web API 充当轻客户端，用户通过发送查询来从数据库中提取数据。图 4 展示了在具有 Web
    API 的区块链系统上执行的 SQL 攻击。Web API 使用 SQL 命令从数据库中提取数据。SQL 是一种结构化查询语言，用于管理和与关系数据库通信。最常见的
    SQL 查询包括：
- en: '• SELECT: It retrieves the store entries from the table.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • SELECT：从表中检索存储的条目。
- en: '• INSERT: It uses for creating entries in a table.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • INSERT：用于在表中创建条目。
- en: '• DELETE: It deletes the record from the table.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • DELETE：它从表中删除记录。
- en: '| Figure 4\. SQL Attack on Web API |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 图 4\. Web API 上的 SQL 攻击 |'
- en: '| ![Figure978-1-7998-7589-5.ch011.f04](i/ch011.f04.png) |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-7589-5.ch011.f04](i/ch011.f04.png) |'
- en: Here, the authentic user sends the query for retrieval of information from the
    database. But in the case of SQL injection, the adversary uses the special character
    and symbols for the authentication. Most of the time adversary uses the ‘AND’
    and ‘OR’ DBMS condition for the attack.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，认证用户发送查询以从数据库检索信息。但在 SQL 注入的情况下，对手使用特殊字符和符号进行身份验证。大多数情况下，对手使用 'AND' 和 'OR'
    数据库管理系统条件进行攻击。
- en: SQL Injection
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 注入
- en: SQL injection is a query-based attack on web API and it was first introduced
    by Jeff Forristal in the year 1998 (Joseph Cox, 2015). The attack mainly consists
    of an SQL query that exploits and manipulates the database records. SQL injection
    maintains the position of the top 10 web API attacks on the Open Web Application
    Security Project (OWASP). The application programmers handle all the types of
    user input using a scripting language. There is also a programmer’s code of conduct,
    which doesn’t believe in user input. Several SQL injection risks are presented
    such as accessing sensitive data remotely, retrieving the stored information,
    knowing the database records and table information, (etc.). The SQL injection
    provides free space to hackers, where it develops and executes the script on the
    network. The hackers developed a bot to check the vulnerability of the websites.
    The bots (bots.txt) are run on the blockchain network and compromised the server
    machine.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 注入是对 Web API 的一种基于查询的攻击，它最早由 Jeff Forristal 在 1998 年提出（Joseph Cox，2015）。该攻击主要由利用和操纵数据库记录的
    SQL 查询组成。SQL 注入在开放网络应用安全项目（OWASP）的十大 Web API 攻击中保持着最高位置。应用程序员使用脚本语言处理所有类型的用户输入。还有一种程序员的行为准则，不相信用户输入。存在一些
    SQL 注入风险，比如远程访问敏感数据、检索存储的信息、了解数据库记录和表信息等等。SQL 注入为黑客提供了自由空间，在其中开发并执行网络上的脚本。黑客开发了一个用于检查网站漏洞的机器人。这些机器人（bots.txt）在区块链网络上运行并攻击服务器机器。
- en: How SQL Injection Work?
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 注入是如何工作的？
- en: It is a query-based attack, where the adversary injects the piece of code into
    web API. The malicious query will provide the database table information in the
    URL parameter. Figure 5, represents the SQL injection on a simple website.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种基于查询的攻击，攻击者将代码片段注入到 Web API 中。恶意查询将在 URL 参数中提供数据库表信息。图 5 描述了一个简单网站上的 SQL
    注入。
- en: '| Figure 5\. SQL query-based injection |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 图 5. SQL 查询注入 |'
- en: '| ![Figure978-1-7998-7589-5.ch011.f05](i/ch011.f05.png) |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-7589-5.ch011.f05](i/ch011.f05.png) |'
- en: We present several types of SQL injection performed by the adversary to extract
    the table information from the database (Pollack, 2018).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了对数据库执行的几种类型的 SQL 注入，以提取表信息（Pollack，2018）。
- en: '1\. Boolean-Based Blind Injection: In this, the logical query is attached with
    the parameter and the adversary waits for some meaningful search. The malicious
    query will redirect some result that is related to Boolean operation (True or
    False). The “WHERE” operator is used to evaluate the tautology of the parameter.
    Let us consider a Boolean based malicious string (https://abc.com/index1.php?id=1
    AND substring (@@version,1,1)=4). Now, the query is used for checking database
    table information. The “substring (@@version, 1, 1)=4” is used to check the database
    version. If it is true then it will return one row otherwise it will give the
    failed “0” result. It means there is no database of version 4\. The attacker will
    do this process again and again to map the logical structure of the database.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1\. 基于布尔的盲注：在这种情况下，逻辑查询附加到参数，并且对手等待一些有意义的搜索。 恶意查询将重定向到与布尔操作（True 或 False）相关的一些结果。
    使用“WHERE”运算符来评估参数的蕴含。 让我们考虑一个基于布尔的恶意字符串（https://abc.com/index1.php?id=1 AND substring
    (@@version,1,1)=4）。 现在，查询用于检查数据库表信息。 使用“substring (@@version, 1, 1)=4”来检查数据库版本。
    如果为真，则返回一行，否则将给出失败的“0”结果。 这意味着没有 4 版本的数据库。 攻击者将一遍又一遍地执行此过程，以映射数据库的逻辑结构。
- en: '2\. Time-Based Blind Injection (TBBI): It uses the time of the server to access
    the information of the database. The format for TBBI is applied on any website
    example (http://example1.com/index.php?id=1; IF User = ‘admin’ WAIT FOR DELAY
    ‘00:00:15’). It evaluates the response by delaying 15 seconds then it sends the
    information to the attacker.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2\. 基于时间的盲注（TBBI）：它利用服务器的时间来访问数据库的信息。 TBBI 的格式应用于任何网站示例（http://example1.com/index.php?id=1;
    IF User = ‘admin’ WAIT FOR DELAY ‘00:00:15’）。 它通过延迟 15 秒来评估响应，然后将信息发送给攻击者。
- en: '3\. UNION Based Injection (UBI): It uses for merging the two different table
    rows. The only disadvantage of UBI are (i) the structure of the table are same,
    (ii) the same number of row and column is present. UBI is used the “ORDER BY”
    operator for finding the column. Example (http://example1.com/index.php?id=1 ORDER
    BY 1 -> OK & http://example1.com/index.php?id=1 ORDER BY 2 -> Error). The union-based
    injection is used for testing the 2 columns and only 1 of them is passed.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3\. UNION Based Injection（UBI）：它用于合并两个不同的表行。 UBI 的唯一缺点是（i）表的结构相同，（ii）行和列的数量相同。
    UBI 使用“ORDER BY”运算符来查找列。 示例（http://example1.com/index.php?id=1 ORDER BY 1 -> OK＆http://example1.com/index.php?id=1
    ORDER BY 2 -> Error）。 基于联合的注入用于测试 2 列，只传递其中的 1 列。
- en: There are various ways to perform SQL injection attacks on the web API of the
    blockchain database server. The system firewall is not able to provide that much
    security against SQL injection attacks. So, our work is to restrict those attacks
    and provide a secure environment for every user which is connected with the blockchain
    system. Here, we present the framework for automated detection of SQL injection
    attacks using Snort (Zhou et al., 2010) and Moloch (Uramova et al., 2017). The
    outline for the detection system is presented in Figure 6.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方式可以对区块链数据库服务器的 Web API 执行 SQL 注入攻击。系统防火墙无法提供足够的安全性来抵御 SQL 注入攻击。因此，我们的工作是限制这些攻击，并为连接到区块链系统的每个用户提供安全的环境。在这里，我们提出了使用
    Snort（Zhou 等人，2010）和 Moloch（Uramova 等人，2017）自动检测 SQL 注入攻击的框架。检测系统的概要如图 6 所示。
- en: '| Figure 6\. The Framework for Automated SQL Attack Detection using Snort and
    Moloch in the Blockchain System |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 图 6\. 使用 Snort 和 Moloch 在区块链系统中进行自动化 SQL 攻击检测的框架 |'
- en: '| ![Figure978-1-7998-7589-5.ch011.f06](i/ch011.f06.png) |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-7589-5.ch011.f06](i/ch011.f06.png) |'
- en: 'Figure 6 presents the framework of automated SQL attack detection. The framework
    is divided into several components and each component has specific work such as:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6 展示了自动化 SQL 攻击检测框架。该框架分为多个组件，每个组件都有特定的工作，如：
- en: 'A Detection System (Snort): It uses the Snort technique for the detection of
    SQL injection. It also analyzes the huge HTTP network traffic. The Snort was first
    created by Martin Roesch in the year 1988 for network intrusion detection (Roesch,
    1999). Here, the packet capture module is used to collect the request and response
    of the system. The pseudo-code for packet capturing is given below. Here, the
    genuine user only passes through the authentication process. If there is a SQL
    attack then it uses the specific keywords to identify the attacks.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 检测系统（Snort）：它使用 Snort 技术来检测 SQL 注入。它还分析庞大的 HTTP 网络流量。Snort 是由 Martin Roesch
    在 1988 年首次创建用于网络入侵检测（Roesch, 1999）。在这里，数据包捕获模块用于收集系统的请求和响应。数据包捕获的伪代码如下所示。在这里，真正的用户只通过身份验证过程。如果存在
    SQL 攻击，则使用特定关键字来识别攻击。
- en: Pseudo Code
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 伪代码
- en: Class Public Signin(request, response)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Class Public Signin(request, response)
- en: '{'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: String signin = request. getParameter(“signin”);
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: String signin = request. getParameter(“signin”);
- en: String p_word = request. getParameter(“p_word”);
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: String p_word = request. getParameter(“p_word”);
- en: String query1 = “SELECT info FROM userTable WHERE”;
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: String query1 = “SELECT info FROM userTable WHERE”;
- en: if ((!signin. equals(“”)) && (!p_word.equals(“”))) query += signin = “‘+ signin+’”
    AND pass= “‘+p_word +’” elsequery+ = “‘signin= ‘Guest’’”;
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: if ((!signin. equals(“”)) && (!p_word.equals(“”))) query += signin = “‘+ signin+’”
    AND pass= “‘+p_word +’” elsequery+ = “‘signin= ‘Guest’’”;
- en: ResultSet result1 = stmt. executeQuery(query1) ;
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: ResultSet result1 = stmt. executeQuery(query1) ;
- en: if (result1 != null)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: if (result1 != null)
- en: showAccount(result1) ;
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: showAccount(result1) ;
- en: else
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: else
- en: sendAuthentacationFailed();
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: sendAuthentacationFailed();
- en: '}'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: Here is an example to detect the ICMP packet in ECHO REQUEST.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例来检测 ECHO REQUEST 中的 ICMP 数据包。
- en: alert ICMP $ExternalNET
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 警告 ICMP $ExternalNET
- en: 'any -> $HOME any (msg:”ICMP PING”; icode:0; itype:8; classtype: misc-activity;
    sid:384; rev:5;)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '任意 -> $HOME 任意 (msg:”ICMP PING”; icode:0; itype:8; classtype: misc-activity;
    sid:384; rev:5;)'
- en: 'The Snort package is divided into two parts Header and Body. The Header is
    divided into seven different fragments (i) Action, (ii) Protocol, (iii) Source_IP,
    (iv) Source_Port, (v) Direction, (vi) Dst_IP, and (vii) Dst_Port. These fields
    are consist of variables or strings to match with the database. The body uses
    the payload or HTTP headers of the message. The alert is generated by using the
    fast_output modules. An example is given as:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Snort 软件包分为两部分：头部和主体。头部分为七个不同的片段：(i) 行动，(ii) 协议，(iii) 源 IP，(iv) 源端口，(v) 方向，(vi)
    目的地 IP，和 (vii) 目的地端口。这些字段由变量或字符串组成，用于与数据库匹配。主体使用消息的负载或 HTTP 头。警报是通过使用 fast_output
    模块生成的。例如：
- en: '[**] [1:374:5] ICMP PING [**]'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[**] [1:374:5] ICMP PING [**]'
- en: '[Classification: Misc activity] [Priority: 4]'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[分类：杂项活动] [优先级：4]'
- en: 03/12-02:11:09.359780 10.1.1.10 -> 10.0.1.253
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 03/12-02:11:09.359780 10.1.1.10 -> 10.0.1.253
- en: 'ICMP TTL: 30 TOS: 0x0 ID: 38175 IpLen: 15 DgmLen: 92'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: ICMP TTL：30 TOS：0x0 ID：38175 IpLen：15 DgmLen：92
- en: 'Type: 8 Code: 0 ID: 32335 Seq: 1 ECHO'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 类型：8 代码：0 ID：32335 Seq：1 ECHO
- en: The Starting line is used for packet matching. The [**] symbol is used for the
    starting and end of the sequence. Three values are present inside the brackets
    which are separated by a colon. (i) Generator_ID (GID) is used in the alert module,
    (ii) Snort_ID (SID) is used to identify the unique alert, and Revision_No (REV)
    is used to trigger the alert.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 起始行用于数据包匹配。[**] 符号用于序列的开始和结束。方括号内有三个值，由冒号分隔。(i) 生成器 ID (GID) 用于警报模块，(ii) Snort_ID
    (SID) 用于识别唯一警报，和 Revision_No (REV) 用于触发警报。
- en: Traffic Acquisition System
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 交通获取系统
- en: 'It uses the Moloch as a default system to gain the visibility of SQL injection.
    During the attack, several packets are not logged due to performance reasons.
    It uses the IPv4 packets for the detection of the intrusion. Moloch session uses
    the seven tuples: Moloch_Session = (St_Time, Sp_Time, Source_IP, Dstination_IP,
    Source_Port, Dstination_Port, Protocol).'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用 Moloch 作为默认系统来获得 SQL 注入的可见性。在攻击期间，由于性能原因，有些数据包未被记录。它使用 IPv4 数据包来检测入侵。Moloch
    会话使用七元组：Moloch_Session = (St_Time、Sp_Time、Source_IP、Dstination_IP、Source_Port、Dstination_Port、Protocol)。
- en: '| Figure 7\. Moloch Web Interface |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| 图 7\. Moloch 网页界面 |'
- en: '| ![Figure978-1-7998-7589-5.ch011.f07](i/ch011.f07.png) |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-7589-5.ch011.f07](i/ch011.f07.png) |'
- en: 'Figure 7 presents the Moloch web interface is used to intercept the network
    packets. The Moloch is consists of three main parts:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7 展示了 Moloch 网页界面用于拦截网络数据包。Moloch 由三个主要部分组成：
- en: '• Elastic search database: It is used in indexing stored sessions. It also
    managed the captured sessions. In real-time, the large volume data is managed
    by using the network traffic analysis.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 弹性搜索数据库：用于索引存储的会话。它还管理已捕获的会话。实时情况下，使用网络流量分析来管理大容量数据。
- en: '• Capture: It separates the network between captured and network traffic.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 捕获：它将网络分为已捕获和网络流量两部分。
- en: '• Viewer: It is used for filtering the stored session and it also exports the
    stored session.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 观察者：用于过滤存储的会话，也可以导出存储的会话。
- en: Moloch is used for HTTP session for filtering. The Moloch filtering expression
    is given as (ip.src == 10.0.0.41 && start_time >= “2019/03/05 22:11:23” && port.dst
    == 8080).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Moloch 用于 HTTP 会话过滤。Moloch 过滤表达式为（ip.src == 10.0.0.41 && start_time >= “2019/03/05
    22:11:23” && port.dst == 8080）。
- en: '• HTTP Tag Filtering: This is the procedure for Moloch for packet filtering
    (Protocol = = http && method = = GET && status = = 200 && stop_tm <= “2019/02/05
    12:21:03”).'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • HTTP 标签过滤：这是 Moloch 用于数据包过滤的过程（协议 == http && 方法 == GET && 状态 == 200 && 停止时间
    <= “2019/02/05 12:21:03”）。
- en: '• Analysis Engine: The work of the analysis engine is to analyze the malicious
    packets. The PCAP analysis is done by modules. Whereas each module will perform
    a certain amount of actions on PCAP to return the output from the engine. The
    database is used to store the information (such as attack investigation) for analysis.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 分析引擎：分析引擎的工作是分析恶意数据包。PCAP 分析由模块完成。每个模块将在 PCAP 上执行一定数量的操作，以从引擎返回输出。数据库用于存储分析信息（如攻击调查）。
- en: '• Attacker IP Details: The attacker IP is very trivial to find by any IDS.
    Attackers often hide their IPs and location server o secure their personal information.
    According to Cloudflare, there are 90% of the request is came from the Tor browser
    which is very unpredictable to find genuine requests. The IP address is consist
    of:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 攻击者 IP 详细信息：攻击者 IP 对于任何 IDS 来说都很容易找到。攻击者经常隐藏他们的 IP 和位置服务器以保护个人信息安全。根据 Cloudflare，有
    90% 的请求来自 Tor 浏览器，这对于找到真正的请求是非常不可预测的。IP 地址由以下组成：
- en: o The owner IP address,
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: o 拥有者 IP 地址，
- en: o Origin of Internet Service Provider (ISP),
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: o 互联网服务提供商（ISP）的起源，
- en: o CIDR notation,
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: o CIDR 表示法，
- en: o E-mail contact,
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: o 电子邮件联系方式，
- en: o Tor node check
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: o Tor 节点检查
- en: All the information is retrieved from Regional Internet Registries (RIRs). All
    Tor node is present publically and it uses as encrypted traffic to access the
    HTTPS.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 所有信息均从地区互联网注册机构（RIRs）检索。所有 Tor 节点都公开存在，并且它们使用加密流量来访问 HTTPS。
- en: '• Web Server Detail: It uses to find out the details of the target server.
    The analysis engine doesn’t have access to analyze the web server, so it uses
    the pattern matching technique for finding the details. The Wappalzer is an open-source
    tool to detect the web server, content management system (CMS), and JavaScript
    libraries.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • Web 服务器详细信息：它用于查找目标服务器的详细信息。分析引擎无法访问分析 Web 服务器，因此它使用模式匹配技术来查找详细信息。Wappalzer
    是一个用于检测 Web 服务器、内容管理系统（CMS）和 JavaScript 库的开源工具。
- en: '• Statistical Analysis: If there is a crime there also evidence, the attacker
    leaves the fingerprint in the form of the entry point. In statistical analysis,
    the PCAP pattern is observed to find evidence of the SQL injection. The analysis
    engine is used to identify the outline in traffic, network endpoints.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 统计分析：如果有犯罪，也有证据，攻击者以入口点的形式留下指纹。在统计分析中，观察 PCAP 模式以找到 SQL 注入的证据。分析引擎用于识别流量、网络端点中的大纲。
- en: '• Database Canary: The attacker will usually try to retrieve information such
    as table names and columns. The work of Canary is to add an appropriately long
    string that replaces the information of the database. It also sends the SQL injection
    successful message to the server, but instead of the actual table, it sends the
    empty table to the attacker. Canary is generated by 256 bits string which is placed
    in the database. This will not provide security against time-based blind injection.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 数据库蜘蛛：攻击者通常会尝试检索表名和列等信息。蜘蛛的工作是添加一个适当长的字符串，替换数据库的信息。它还向服务器发送 SQL 注入成功消息，但是发送给攻击者的不是实际的表，而是空表。蜘蛛由256位字符串生成，放置在数据库中。这不会提供对基于时间的盲注入的安全性。
- en: '• Connections: It captures the network subnet and provides the list of the
    host. Using Moloch will provide this information in the API panel.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 连接：它捕获网络子网并提供主机列表。使用 Moloch 将在 API 面板中提供此信息。
- en: '• Storage and Web Interface: It uses the RethinkDB document based NoSQL database
    and API for real-time application. Traditional database will not provide the analysis
    functionality. RethinkDB will execute on separate machine using remote server
    or wire. The command for NoSQL database is given as:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 存储和 Web 接口：它使用基于文档的 NoSQL 数据库 RethinkDB 和 API 用于实时应用。传统数据库不会提供分析功能。RethinkDB
    将在独立机器上使用远程服务器或连线执行。NoSQL 数据库的命令如下：
- en: cursor = r.table(‘analyses’).filter(r.row[‘dst_ip’] == ‘10.0.0.1’).run()
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: cursor = r.table(‘analyses’).filter(r.row[‘dst_ip’] == ‘10.0.0.1’).run()
- en: 'for document in cursor:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 'for document in cursor:'
- en: print(document)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: print(document)
- en: 'Web Interface: The web interface is used to analyze the results. The visualization
    of analysis is shown in the web API. The Individual results are offered in the
    form of a map and table. The implementation is done on the anaconda 3.1, on windows
    8.1 x64 platform, having a core i5 processor. The prerequisites for deployments
    are Snort, Proofpoint, PulledPork instances to generate the signature map. The
    working of Snort is to generate the intrusion logs in a binary form called unified2\.
    The log is consist of several alerts such as (i) Alert_syslog, (ii) Alert_fast,
    (iii) Alert_full, (iv) Alert_unixsock, and (v) Log_tcpdump. There are few things
    needed to set up the Snort log session in Moloch. The Moloch needs the subnet
    address as a development point, the timestamp in the UTC standard, REST API with
    self-signed SSL certificate, and PCAP (Packet Capture) which deletes the old unwanted
    session.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Web 接口：Web 接口用于分析结果。分析的可视化呈现在 Web API 中。个体结果以地图和表格的形式提供。实现是在 anaconda 3.1 上完成的，在
    Windows 8.1 x64 平台上进行，使用了核心 i5 处理器。部署的先决条件是 Snort、Proofpoint、PulledPork 实例用于生成签名地图。Snort
    的工作是以二进制形式生成入侵日志，称为 unified2。日志由几个警报组成，例如 (i) Alert_syslog、(ii) Alert_fast、(iii)
    Alert_full、(iv) Alert_unixsock 和 (v) Log_tcpdump。在 Moloch 中设置 Snort 日志会话需要几件事。Moloch
    需要子网地址作为开发点，时间戳使用 UTC 标准，具有自签名 SSL 证书的 REST API，以及删除旧的不需要的会话的 PCAP（数据包捕获）。
- en: '• Alert forwarding: Snort is used as the analysis engine to send the alert
    to the log processing system. The log system is constantly examined the new records.
    The manual implementation uses the “idstools” package in python to monitor the
    log record.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 警报转发：Snort 用作将警报发送到日志处理系统的分析引擎。日志系统不断地检查新的记录。手动实现使用 Python 中的 "idstools" 包来监视日志记录。
- en: Pseudo Code
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 伪代码
- en: from idstools import unified2
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 从 idstools 导入 unified2
- en: reader1 = unified2.SpoolEventReader(directory, prefix, follow=True)
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: reader1 = unified2.SpoolEventReader(directory, prefix, follow=True)
- en: 'for event in reader:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 reader 中的每个事件：
- en: process event
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理事件
- en: '...'
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '...'
- en: '• Signature Mapping: It is a process of setting a numeric signature ID to the
    textual representation. The pseudo-code for the signature mapping is done by using
    the “idstools” package.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 签名映射：这是将数值签名 ID 设置为文本表示的过程。使用 "idstools" 包完成了签名映射的伪代码。
- en: Pseudo Code
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 伪代码
- en: from idstools import maps
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 从 idstools 导入 maps
- en: sigmap1 = maps1.SignatureMap()
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: sigmap1 = maps1.SignatureMap()
- en: sigmap1.load_signature_map(open(’/path/to/sid-msg.map’))
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: sigmap1.load_signature_map(open(’/path/to/sid-msg.map’))
- en: sigmap1.load_generator_map(open(’/path/to/gid-msg.map’))
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: sigmap1.load_generator_map(open(’/path/to/gid-msg.map’))
- en: sigmap.get(gid, sid)
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: sigmap.get(gid, sid)
- en: An additional task of Snort alert forwarding is (i) Signature filtering and
    (ii) Bookmarking. In signature, filtering is used to provide the alert of SQL
    injection Id only. Bookmarking will help to keep track of all the events of the
    analysis engine.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Snort 警报转发的附加任务是 (i) 签名过滤和 (ii) 书签。在签名过滤中，仅提供 SQL 注入 ID 的警报。书签将有助于跟踪分析引擎的所有事件。
- en: •
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'Creating Analysis: IDS will generate multiple alerts at the time of the SQL
    injection attack. The analysis engine is used to retrieve the load traffic using
    the API. The alerts are generated in the form of a time frame and it is a cluster
    in one analysis. A similar alert is checked with the prescribed cluster. There
    are three tuples are present in the alert.'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建分析：IDS 在 SQL 注入攻击时会生成多个警报。分析引擎用于使用 API 检索负载流量。警报以时间框架的形式生成，并在一个分析中聚类。与指定的聚类检查类似的警报。警报中存在三个元组。
- en: '![Mathtype978-1-7998-7589-5.ch011.m09](i/ch011.m09.svg)'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Mathtype978-1-7998-7589-5.ch011.m09](i/ch011.m09.svg)'
- en: '• Task Queue: It uses the task in the distributed form means each task is executed
    in different processors. The Celery is an open-source Python software for parallel
    processing. Celery is working on the master and slave model, where the master
    distributes the task for different processors and slaves will run those tasks
    in parallel. The API will handle the entry of the database. The entry is consists
    of the timestamp and task status of pending data.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 任务队列：它以分布式形式使用任务，意味着每个任务在不同的处理器上执行。Celery 是一个开源的 Python 软件，用于并行处理。Celery 使用主从模型，其中主节点将任务分发给不同的处理器，而从节点将并行运行这些任务。API
    将处理数据库的条目。该条目由时间戳和待处理数据的任务状态组成。
- en: 'Analysis Engine: It is used for task scheduling. Several steps are present
    in the analysis engine:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 分析引擎：它用于任务调度。分析引擎中存在几个步骤：
- en: '• Status: It monitors the task status such as “PENDING” or “PROGRESS”.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 状态：它监控任务的状态，如“待定”或“进行中”。
- en: '• PCAP from Moloch: It analyze the HTTP traffic between source and destination.
    The alert is generated by using (/sessions.pcap endpoint). Moloch traffic filter
    is done as (port.dst == {dst_port} && protocols == http && ip.src == {src_ip}
    && ip.dst == {dst_ip}). In simple the Moloch has observed the initial alert such
    as Start_Time, Stop_Time, and expression.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 来自 Moloch 的 PCAP：它分析源和目的地之间的 HTTP 流量。使用 (/sessions.pcap endpoint) 生成警报。Moloch
    流量过滤器如下进行(port.dst == {dst_port} && protocols == http && ip.src == {src_ip} &&
    ip.dst == {dst_ip})。简单来说，Moloch 观察到了初始警报，例如开始时间、结束时间和表达式。
- en: '• Database entry update: It changes the entry to success or error for the task
    analysis engine.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 数据库条目更新：它将条目更改为任务分析引擎的成功或错误。
- en: 'Modules: It uses the command for analyze the analysis_modules: (module_results
    = module(opts, pcap_path, config).bootstrap())'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 模块：它使用命令来分析分析模块：(module_results = module(opts, pcap_path, config).bootstrap())
- en: • opts = source IP, destination IP alert.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • opts = 源 IP，目的地 IP 警报。
- en: '• pcap_path: It retrieves the PCAP store file.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • pcap_path：它检索 PCAP 存储文件。
- en: '• config: It manages the RethinkDB host and port, Celery broker.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • config：它管理 RethinkDB 主机和端口，Celery 代理。
- en: • bootstrap() return the stored from the database.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • bootstrap() 返回从数据库中存储的内容。
- en: The analysis is done by the web interface to analyze the source IP, destination
    IP. PCAP retrieve the Moloch information. The Snort and Moloch are both monitor
    host information. It supervised the running task by using the uWSGI, Celery, and
    Alert forwarder.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Web 界面分析源 IP、目标 IP。PCAP 检索 Moloch 信息。Snort 和 Moloch 都监视主机信息。它使用 uWSGI、Celery
    和警报转发器监督运行任务。
- en: 'Evaluation: For evaluation, the testing is conducted using Ubuntu 18.1, MySQL
    database, and Damn Vulnerable Web App (DVWA). The Sqlmap is used for the detection
    of SQL injection (Axinte, 2014). The workflow of Sqlmap’s is divided into five
    steps:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 评估：对于评估，使用 Ubuntu 18.1、MySQL 数据库和 Damn Vulnerable Web App（DVWA）进行测试。Sqlmap 用于检测
    SQL 注入（Axinte，2014）。Sqlmap 的工作流程分为五个步骤：
- en: '• Setup: Sqlmap use as an independent tool for the detection of SQL Injection.
    It needed some basic configuration such as: Specify the entry pointy of Target
    URL, HTTP header, Proxy, Tamper Scripts.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 设置：Sqlmap 作为独立工具用于检测 SQL 注入。它需要一些基本配置，如：指定目标 URL 的入口点，HTTP 标头，代理，篡改脚本。
- en: '• Detection: it checks the entry point of the links.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 检测：它检查链接的入口点。
- en: '• Fingerprinting: It uses the fingerprint of the database server and web server
    for crucial data. It also detects the Web Application Firewall (WAF) and Protected
    Web Server (IWS) before the webserver.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 指纹识别：它使用数据库服务器和 Web 服务器的指纹来获取关键数据。它还在 Web 服务器之前检测 Web 应用防火墙（WAF）和受保护的 Web
    服务器（IWS）。
- en: '• Enumeration: It also retrieves the tables and columns of the database using
    a brute-force attack. It uses the dictionary attack for hash protected data.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 列举：它还使用暴力攻击来检索数据库的表和列。它使用字典攻击来攻击哈希保护的数据。
- en: '• Takeover: It tries to access information about the operating system.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 接管：它尝试访问操作系统的信息。
- en: For testing, we use the 20 sqlmap (version 1.0.5.27) attacks on DVWA and using
    the Snort package we able to detect the SQL injection. The alerts are analyzed
    by using the proper PCAP (packet capture). Sqlmap also identifies the canary string
    at the response. Snort will generate the 40 different alerts for every sqlmap
    attack. The sqlmap arguments are used for testing purposes.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试，我们在 DVWA 上使用 20 个 sqlmap（版本 1.0.5.27）攻击，并使用 Snort 包能够检测到 SQL 注入。警报通过适当的
    PCAP（数据包捕获）进行分析。Sqlmap 还能识别响应中的 canary 字符串。对于每个 sqlmap 攻击，Snort 将生成 40 个不同的警报。Sqlmap
    参数用于测试目的。
- en: python sqlmap.py -u
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: python sqlmap.py -u
- en: “http://abc.com?id=1&submit=login#”
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: “http://abc.com?id=1&submit=login#”
- en: --cookie “PHPSESSID=[session_id]; security=low”
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: --cookie “PHPSESSID=[session_id]; security=low”
- en: --dbs --flush-session --tamper=randomcomments --level=5 -v 3
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: --dbs --flush-session --tamper=randomcomments --level=5 -v 3
- en: '| Figure 8\. Screenshot Of Sqlmap API |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 图 8\. Sqlmap API 截图 |'
- en: '| ![Figure978-1-7998-7589-5.ch011.f08](i/ch011.f08.png) |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-7589-5.ch011.f08](i/ch011.f08.png) |'
- en: The temper script like base64 conversion is not to be detected by using Snort.
    The Sqlmap also contains functionality to escape IPS/WAF detection using tamper
    scripts. It only works when the syntax of the input is changed. In most cases
    (99/100) Snort was able to notice such evasion. This concluded that automation
    in network-based attack detection use large networks payloads and thousands of
    system is communicated in very few seconds. The implemented system is used to
    detect all types of SQL injection attacks.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如 base64 转换之类的 temper 脚本不会被 Snort 检测到。Sqlmap 还包含使用 temper 脚本来规避 IPS/WAF 检测的功能。只有在输入的语法发生变化时才起作用。在大多数情况下（99/100），Snort
    能够注意到这种规避行为。这表明，基于网络的攻击检测自动化使用大型网络负载，并在很短的时间内通信数千个系统。实施的系统用于检测所有类型的 SQL 注入攻击。
- en: CONCLUSION
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 结论
- en: The SQL injection is one of its kind of attacks where the adversary retrieves
    the personal information from the database. In the current scenario many blockchain-based
    companies facing the problem of cyber-attack based on SQL injection. To cope with
    this problem, here we present a chapter that provides a brief idea about the blockchain
    system and SQL injection. The whole chapter is divided into two parts (i) we started
    with a brief introduction about the blockchain system and how the data are stored
    in the public database, (ii) the second part describes the SQL attack performed
    by the adversary on the database. Here, we present the case study based on the
    automated detection of SQL injection attacks. For detection, we use the Snort
    and Moloch package. The system is implemented for large network traffic such as
    a blockchain system. The Sqlmap is used for the evaluation process and to find
    out the successful SQL injection. This system doesn’t use any new technology for
    analysis instead, it collects the information based on the timestamp and fingerprinting.
    It is a Signature-based system that has some limitations at the time of detection.
    The future scope of this work provides the solution using Splunk technology which
    provides a huge solution in the field of database threat.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 注入是一种攻击类型，攻击者从数据库中检索个人信息。在当前情况下，许多基于区块链的公司面临着基于 SQL 注入的网络攻击问题。为了解决这个问题，我们在这里提供了一个章节，简要介绍了区块链系统和
    SQL 注入的基本概念。整个章节分为两部分：(i) 我们首先简要介绍了区块链系统以及数据如何存储在公共数据库中，(ii) 第二部分描述了攻击者对数据库执行的
    SQL 攻击。在这里，我们提供了基于自动检测 SQL 注入攻击的案例研究。为了检测，我们使用了 Snort 和 Moloch 包。该系统适用于大型网络流量，如区块链系统。Sqlmap
    用于评估过程和寻找成功的 SQL 注入。该系统不使用任何新技术进行分析，而是基于时间戳和指纹信息收集信息。它是一个基于签名的系统，在检测时有一些限制。这项工作的未来展望是使用
    Splunk 技术提供在数据库威胁领域的巨大解决方案。
- en: REFERENCES
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Chaddha, R., Kumar, A., Sinha, K., Paul, P., & Amritanjali. (2020). Selection
    on Various Traditional Image Encryption Techniques: A Study. Lecture Notes in
    Electrical Engineering, 219–228\. 10.1007/978-981-15-2854-5_20'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Chaddha, R., Kumar, A., Sinha, K., Paul, P., & Amritanjali. (2020). 选择各种传统图像加密技术：一项研究。《电气工程讲义》，219–228。10.1007/978-981-15-2854-5_20
- en: 'Verma, N., Sharma, S., Sinha, K., Paul, P., & Amritanjali. (2020). Selection
    on Traditional Cryptographic Algorithm for Real-Time Video Transmission and Storage:
    A Study. Lecture Notes in Electrical Engineering, 229–238\. 10.1007/978-981-15-2854-5_21'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Verma, N., Sharma, S., Sinha, K., Paul, P., & Amritanjali. (2020). 选择传统密码算法用于实时视频传输和存储：一项研究。《电气工程讲义》，229–238。10.1007/978-981-15-2854-5_21
- en: 'Al-Sayid, N. A., & Aldlaeen, D. (2013). Database security threats: A survey
    study. Proceeding of the 5^(th) International Conference on Computer Science and
    Information Technology. 10.1109/csit.2013.6588759'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Al-Sayid, N. A., & Aldlaeen, D. (2013). 数据库安全威胁：一项调查研究。第 5 届计算机科学与信息技术国际会议论文集。10.1109/csit.2013.6588759
- en: 'Anita, N., & Vijayalakshmi, M. (2019). Blockchain Security Attack: A Brief
    Survey. Proceeding of the 10th International Conference on Computing, Communication
    and Networking Technologies (ICCCNT). 10.1109/icccnt45670.2019.8944615'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Anita, N., & Vijayalakshmi, M. (2019). 区块链安全攻击：简要调查。第 10 届计算、通信和网络技术国际会议论文集。10.1109/icccnt45670.2019.8944615
- en: Axinte, S.-D. (2014). SQL Injection Testing in Web Applications Using SQLmap.
    International Journal of Information Security and Cybercrime , 3(2), 61–68.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Axinte, S.-D. (2014). 使用 SQLmap 在 Web 应用程序中进行 SQL 注入测试。《信息安全与网络犯罪国际期刊》，3(2)，61–68。
- en: Aziz Yousif Almuttalibi, R. (2019). Blockchain Hash Function for Secure Biometric
    System. Journal of Engineering and Applied Sciences (Asian Research Publishing
    Network) , 14(11), 3797–3805\. https://doi.org/10.36478/jeasci.2019.3797.3805
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Aziz Yousif Almuttalibi, R. (2019). 区块链哈希函数用于安全生物特征系统。《工程与应用科学期刊》（亚洲研究出版网络），14(11)，3797–3805。https://doi.org/10.36478/jeasci.2019.3797.3805
- en: Bansal, M. K., & Sethumadhavan, M. (2020). DNS Security - Prevent DNS Cache
    Poisoning Attack using Blockchain. International Journal of Innovative Technology
    and Exploring Engineering, 9(4), 2151–2162\. 10.35940/ijitee.d1549.029420
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Bansal, M. K., & Sethumadhavan, M. (2020). DNS 安全 - 使用区块链防止 DNS 缓存中毒攻击。《创新技术与探索工程国际期刊》，9(4)，2151–2162。10.35940/ijitee.d1549.029420
- en: Bayer, D., Haber, S., & Stornetta, W. S. (1993). Improving the Efficiency and
    Reliability of Digital Time-Stamping. Sequences , II, 329–334\. doi:10.1007/978-1-4613-9323-8_24
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Bayer, D., Haber, S., & Stornetta, W. S. (1993). 提高数字时间戳的效率和可靠性。《序列》，II，329–334。doi:10.1007/978-1-4613-9323-8_24
- en: Bertino, E., Kamra, A., & Early, J. P. (2007). Profiling Database Application
    to Detect SQL Injection Attacks. Proceeding of the IEEE International Performance,
    Computing, and Communications Conference. 10.1109/pccc.2007.358926
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Bertino, E., Kamra, A., & Early, J. P. (2007). 利用数据库应用程序进行分析以检测 SQL 注入攻击。IEEE
    国际性能、计算和通信会议论文集。10.1109/pccc.2007.358926
- en: 'Bigchain, D. B., & Gmb, H. (2018). Bigchaindb 2.0: The blockchain database.
    White paper. https://www.bigchaindb.com/whitepaper/bigchaindb-whitepaper.pdf'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 'Bigchain, D. B., & Gmb, H. (2018). Bigchaindb 2.0: 区块链数据库。白皮书。可参考：[https://www.bigchaindb.com/whitepaper/bigchaindb-whitepaper.pdf](https://www.bigchaindb.com/whitepaper/bigchaindb-whitepaper.pdf)'
- en: Brown, M., Peköz, E., & Ross, S. (2020). Blockchain Double-Spend Attack Duration.
    Probability in the Engineering and Informational Sciences, 1–9\. 10.1017/s0269964820000212
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Brown, M., Peköz, E., & Ross, S. (2020). 区块链双花攻击持续时间。概率工程与信息科学, 1–9\. 10.1017/s0269964820000212
- en: Chaindb. (2018). A peer-to-peer database system. https://bitpay.com/chaindb.pdf
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Chaindb. (2018). 一个点对点数据库系统。可参考：[https://bitpay.com/chaindb.pdf](https://bitpay.com/chaindb.pdf)
- en: Clarke, J. (2009). Exploiting SQL Injection . SQL Injection Attacks and Defense.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Clarke, J. (2009). 利用 SQL 注入 . SQL 注入攻击与防御.
- en: 'Cox, J. (2015). The History of SQL Injection, the Hack That Will Never Go Away.
    Available: https://www.vice.com/en_us/article/aekzez/the-history-of-sql-injection-the-hack-that-will-never-go-away'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Cox, J. (2015). SQL 注入的历史，这种永远不会消失的黑客攻击。可参考：[https://www.vice.com/en_us/article/aekzez/the-history-of-sql-injection-the-hack-that-will-never-go-away](https://www.vice.com/en_us/article/aekzez/the-history-of-sql-injection-the-hack-that-will-never-go-away)
- en: 'Dubey, R., & Gupta, H. (2016). SQL filtering: An effective technique to prevent
    SQL injection attack. Proceeding of the 5^(th) International Conference on Reliability,
    Infocom Technologies and Optimization (Trends and Future Directions) (ICRITO).
    10.1109/icrito.2016.7784972'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 'Dubey, R., & Gupta, H. (2016). SQL 过滤: 预防 SQL 注入攻击的有效技术。可参考：[第 5 届可靠性、信息通信技术和优化国际会议论文集](https://doi.org/10.1109/icrito.2016.7784972)'
- en: Frost, V. S., & Melamed, B. (1994). Simulating Telecommunications Networks with
    Traffic Modeling. IEEE Communications Magazine , 32(3), 70–70.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Frost, V. S., & Melamed, B. (1994). 模拟电信网络的流量建模。IEEE 通信杂志 , 32(3), 70–70.
- en: Ghorbanzadeh, P., Shaddeli, A., Malekzadeh, R., & Jahanbakhsh, Z. (2010). A
    survey of mobile database security threats and solutions for it. Proceeding of
    the 3^(rd) International Conference on Information Sciences and Interaction Sciences.
    10.1109/icicis.2010.5534685
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Ghorbanzadeh, P., Shaddeli, A., Malekzadeh, R., & Jahanbakhsh, Z. (2010). 移动数据库安全威胁及其解决方案的调查。信息科学与交互科学第
    3 届国际会议论文集. 10.1109/icicis.2010.5534685
- en: 'Gochhayat, S. P., Bandara, E., Shetty, S., & Foytik, P. (2019). Yugala: Blockchain
    Based Encrypted Cloud Storage for IoT Data. Proceeding of the IEEE International
    Conference on Blockchain (Blockchain). 10.1109/blockchain.2019.00073'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 'Gochhayat, S. P., Bandara, E., Shetty, S., & Foytik, P. (2019). Yugala: 基于区块链的物联网数据加密云存储。IEEE
    区块链国际会议论文集. 10.1109/blockchain.2019.00073'
- en: Gudipati, V. K., Venna, T., Subburaj, S., & Abuzaghleh, O. (2016). Advanced
    automated SQL injection attacks and defensive mechanisms. Proceeding of the Annual
    Connecticut Conference on Industrial Electronics, Technology & Automation (CT-IETA).
    10.1109/ct-ieta.2016.7868248
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Gudipati, V. K., Venna, T., Subburaj, S., & Abuzaghleh, O. (2016). 高级自动化 SQL
    注入攻击与防御机制。康涅狄格州工业电子技术与自动化年会论文集. 10.1109/ct-ieta.2016.7868248
- en: Haber, S., & Stornetta, W. S. (1991). How to time-stamp a digital document.
    Journal of Cryptology , 3(2), 99–111\. doi:10.1007/BF00196791
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '[Haber, S., & Stornetta, W. S. (1991). 如何为数字文档加时间戳. 密码学杂志, 3(2), 99–111.](doi:10.1007/BF00196791)'
- en: Handschuh, H. (2005). SHA Family (Secure Hash Algorithm). SpringerReference,
    565–567\. https://doi.org/10.1007/springerreference_491
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '[Handschuh, H. (2005). SHA 家族（安全哈希算法）. SpringerReference, 565–567.](https://doi.org/10.1007/springerreference_491)'
- en: Holbrook, J. (2020). Blockchain Security and Threat Landscape. Architecting
    Enterprise Blockchain Solutions, 323–347\. 10.1002/9781119557722.ch11
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '[Holbrook, J. (2020). 区块链安全和威胁景观. 架构企业区块链解决方案, 323–347.](10.1002/9781119557722.ch11)'
- en: Jung, W., & Park, S. (2017). Preventing DDoS Attack in Blockchain System Using
    Dynamic Transaction Limit Volume. International Journal of Control and Automation
    , 10(12), 131–138\. https://doi.org/10.14257/ijca.2017.10.12.12
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '[Jung, W., & Park, S. (2017). 利用动态交易限额预防区块链系统的 DDoS 攻击. 国际控制与自动化杂志, 10(12),
    131–138.](https://doi.org/10.14257/ijca.2017.10.12.12)'
- en: Kamtuo, K., & Soomlek, C. (2016). Machine Learning for SQL injection prevention
    on server-side scripting. Proceeding of the International Computer Science and
    Engineering Conference (ICSEC). 10.1109/icsec.2016.7859950
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[Kamtuo, K., & Soomlek, C. (2016). 用于服务器端脚本的 SQL 注入预防的机器学习方法. 国际计算机科学与工程会议论文集
    (ICSEC).](10.1109/icsec.2016.7859950)'
- en: Karuparthi, R. P., & Zhou, B. (2016). Enhanced Approach to Detection of SQL
    Injection Attack. Proceeding of the 15^(th) IEEE International Conference on Machine
    Learning and Applications (ICMLA). 10.1109/icmla.2016.0082
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '[Karuparthi, R. P., & Zhou, B. (2016). 增强型 SQL 注入攻击检测方法. 第 15 届 IEEE 国际机器学习和应用会议论文集
    (ICMLA).](10.1109/icmla.2016.0082)'
- en: Koçak, S. (2017). A second pre-image attack and a collision attack to cryptographic
    hash function lux. Communications Faculty of Science University of Ankara Series
    A1Mathematics and Statistics, 66(1), 254–266\. 10.1501/commua1_0000000794
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '[Koçak, S. (2017). 对密码哈希函数 lux 的第二前像攻击和碰撞攻击. 安卡拉大学理学院通讯A1数学与统计学系, 66(1), 254–266.](10.1501/commua1_0000000794)'
- en: Kumar, P., & Pateriya, R. K. (2012). A survey on SQL injection attacks, detection
    and prevention techniques. Proceeding of the Third International Conference on
    Computing, Communication and Networking Technologies. 10.1109/icccnt.2012.6396096
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '[Kumar, P., & Pateriya, R. K. (2012). SQL 注入攻击、检测和预防技术综述. 第三届国际计算、通信和网络技术会议论文集.](10.1109/icccnt.2012.6396096)'
- en: 'Kwon. (2014). Tendermint: Consensus without mining. Draft v. 0.6, fall.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[Kwon. (2014). Tendermint: 无需挖矿的共识. 草案 v. 0.6, 秋季.]'
- en: Lai, W.-J., Hsueh, C.-W., & Wu, J.-L. (2019). A Fully Decentralized Time-Lock
    Encryption System on Blockchain. Proceeding of the IEEE International Conference
    on Blockchain (Blockchain). 10.1109/blockchain.2019.00047
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '[Lai, W.-J., Hsueh, C.-W., & Wu, J.-L. (2019). 区块链上的全面去中心化时间锁加密系统. IEEE 国际区块链会议论文集
    (Blockchain).](10.1109/blockchain.2019.00047)'
- en: Ledger, D. B. (2018). Github repo. https://github.com/ledgerdb/ledgerdb
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '[Ledger, D. B. (2018). Github 仓库](https://github.com/ledgerdb/ledgerdb)'
- en: Meyer, H. (1996). A computer emergency response team policy. Computers & Security
    , 15(4), 320.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Meyer, H. (1996). 计算机应急响应团队政策。 计算机与安全 , 15(4), 320.
- en: Mongo, D. B. (2018). Opensource Document Database. https://www.mongodb.com/
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Mongo, D. B. (2018). 开源文档数据库。 https://www.mongodb.com/
- en: Mouton, F., Malan, M. M., Leenen, L., & Venter, H. S. (2014). Social engineering
    attack framework. Information Security for South Africa. 10.1109/issa.2014.6950510
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Mouton, F., Malan, M. M., Leenen, L., & Venter, H. S. (2014). 社会工程攻击框架。 南非信息安全。
    10.1109/issa.2014.6950510
- en: Nikolaidis, I., & Akyildiz, I. F. (1992). Source characterization and statistical
    multiplexing in ATM networks . College of Computing, Georgia Institute of Technology.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Nikolaidis, I., & Akyildiz, I. F. (1992). ATM网络中的源特征化和统计复用。 佐治亚理工学院计算学院.
- en: Ntagwabira, L., & Kang, S. L. (2010). Use of Query tokenization to detect and
    prevent SQL injection attacks. Proceeding of the 3^(rd) International Conference
    on Computer Science and Information Technology. 10.1109/iccsit.2010.5565202
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Ntagwabira, L., & Kang, S. L. (2010). 使用查询标记化检测和防止SQL注入攻击。 计算机科学与信息技术第三届国际会议论文集。
    10.1109/iccsit.2010.5565202
- en: 'Orman, H. (2018). Blockchain: The Emperors New PKI? IEEE Internet Computing
    , 22(2), 23–28\. https://doi.org/10.1109/mic.2018.022021659'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: Orman, H. (2018). 区块链：新PKI的帝国？ IEEE互联网计算, 22(2), 23–28\. https://doi.org/10.1109/mic.2018.022021659
- en: 'Passeri, P. (2017). 2017 Cyber Attacks Statistics. Available: https://www.hackmageddon.com/2018/01/17/2017-cyber-attacks-statistics/'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Passeri, P. (2017). 2017年网络攻击统计数据。 可用：https://www.hackmageddon.com/2018/01/17/2017-cyber-attacks-statistics/
- en: Pollack, E. (2018). Protecting Against SQL Injection . Dynamic SQL.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Pollack, E. (2018). 防止SQL注入。 动态SQL。
- en: Priya, A., & Sahana, S. K. (2020). A Deterministic Flowshop Scheduling Problem
    to minimizing the Makespan using PA-ACO. International Journal of Engineering
    and Advanced Technology, 9(3), 1555–1560\. 10.35940/ijeat.b4573.029320
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Priya, A., & Sahana, S. K. (2020). 使用PA-ACO最小化完成时间的确定性流水车间调度问题。 国际工程与先进技术杂志,
    9(3), 1555–1560\. 10.35940/ijeat.b4573.029320
- en: 'PriyaA.SinhaK.DarshaniM. P.SahanaS. K. (2018). A Novel Multimedia Encryption
    and Decryption Technique Using Binary Tree Traversal. Proceeding of the Second
    International Conference on Microelectronics, Computing & Communication Systems
    (MCCS 2017), 163–178\. DOI: 10.1007/978-981-10-8234-4_15'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 'PriyaA.SinhaK.DarshaniM. P.SahanaS. K. (2018). 一种新型的多媒体加密和解密技术，使用二叉树遍历。 第二届微电子、计算与通信系统国际会议论文集
    (MCCS 2017), 163–178\. DOI: 10.1007/978-981-10-8234-4_15'
- en: Rikken, O., Janssen, M., & Kwee, Z. (2019). Governance challenges of blockchain
    and decentralized autonomous organizations. Information Polity, 24(4), 397–417\.
    10.3233/ip-190154
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: Rikken, O., Janssen, M., & Kwee, Z. (2019). 区块链和去中心化自治组织的治理挑战。 信息政策, 24(4),
    397–417\. 10.3233/ip-190154
- en: 'Roesch, M. (1999). Snort: Lightweight Intrusion Detection for Networks. LISA.
    In Proceedings of the 13^(th) USENIX conference on System administration (LISA
    ’99). USENIX Association.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 'Roesch, M. (1999). Snort: 轻量级网络入侵检测。 LISA. 在第13届USENIX系统管理会议(LISA ’99)的论文集中。
    USENIX协会。'
- en: 'Saad, M., Spaulding, J., Njilla, L., Kamhoua, C., Shetty, S., Nyang, D. H.,
    & Mohaisen, D. (2020). Exploring the Attack Surface of Blockchain: A Comprehensive
    Survey. IEEE Communications Surveys & Tutorials, 1–1\. 10.1109/comst.2020.2975999'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Saad, M., Spaulding, J., Njilla, L., Kamhoua, C., Shetty, S., Nyang, D. H.,
    & Mohaisen, D. (2020). 探索区块链的攻击面：一项全面调查。IEEE通信调查与教程, 1–1. [10.1109/comst.2020.2975999](https://doi.org/10.1109/comst.2020.2975999)
- en: Sadeghian, A., Zamani, M., & Manaf, A. A. (2013). A Taxonomy of SQL Injection
    Detection and Prevention Techniques. Proceeding of the International Conference
    on Informatics and Creative Multimedia. 10.1109/icicm.2013.18
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: Sadeghian, A., Zamani, M., & Manaf, A. A. (2013). SQL注入检测和预防技术的分类。在国际信息学和创意多媒体会议（ICICM）的论文集中。
    [10.1109/icicm.2013.18](https://doi.org/10.1109/icicm.2013.18)
- en: 'Sahana, S. K., Khowas, M., & Sinha, K. (2018). Budget Optimization and Allocation:
    An Evolutionary Computing Based Model. Bentham Science. 10.2174/97816810870781180101'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Sahana, S. K., Khowas, M., & Sinha, K. (2018). 预算优化和分配：基于进化计算的模型。Bentham Science.
    [10.2174/97816810870781180101](https://doi.org/10.2174/97816810870781180101)
- en: Sallam, A., Xiao, Q., Bertino, E., & Fadolalkarim, D. (2016). Anomaly Detection
    Techniques for Database Protection Against Insider Threats (Invited Paper). Proceeding
    of the 17^(th) International Conference on Information Reuse and Integration (IRI).
    10.1109/iri.2016.12
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: Sallam, A., Xiao, Q., Bertino, E., & Fadolalkarim, D. (2016). 数据库保护中的异常检测技术，针对内部威胁（邀请稿）。在信息重用和集成国际会议（IRI）第17届的论文集中。
    [10.1109/iri.2016.12](https://doi.org/10.1109/iri.2016.12)
- en: Shastri, A. A., & Chatur, P. N. (2015). Efficient and effective security model
    for database specially designed to avoid internal threats. Proceeding of the International
    Conference on Smart Technologies and Management for Computing, Communication,
    Controls, Energy and Materials (ICSTM). 10.1109/icstm.2015.7225407
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: Shastri, A. A., & Chatur, P. N. (2015). 针对数据库的高效安全模型，专门设计以避免内部威胁。在国际智能技术和管理计算、通信、控制、能源和材料会议（ICSTM）的论文集中。
    [10.1109/icstm.2015.7225407](https://doi.org/10.1109/icstm.2015.7225407)
- en: 'SinghN.DayalM.RawR. S.KumarS. (2016). SQL injection: Types, methodology, attack
    queries and prevention. In Proceeding of the 3^(rd) International Conference on
    Computing for Sustainable Global Development (INDIACom), (pp. 2872-2876). IEEE.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: SinghN.DayalM.RawR. S.KumarS. (2016). SQL注入：类型、方法论、攻击查询和预防措施。在第3届国际计算可持续全球发展会议（INDIACom）的论文集中，(pp.
    2872-2876). IEEE.
- en: Singh, R., Tanwar, S., & Sharma, T. P. (2019). Utilization of blockchain for
    mitigating the distributed denial of service attacks. Security and Privacy, 3(3).
    10.1002/spy2.96
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: Singh, R., Tanwar, S., & Sharma, T. P. (2019). 利用区块链减轻分布式拒绝服务攻击。安全与隐私, 3(3).
    [10.1002/spy2.96](https://doi.org/10.1002/spy2.96)
- en: Sinha, K., Choudhary, S., Paul, S., & Paul, P. (2018). Security of Multimedia
    in Cloud using Secret Shared Key. Proceeding of the International Conference on
    Computing, Power and Communication Technologies (GUCON). 10.1109/gucon.2018.8675031
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Sinha, K., Choudhary, S., Paul, S., & Paul, P. (2018). 在云中使用秘密共享密钥保护多媒体的安全性。在计算、电力和通信技术国际会议（GUCON）的论文集中。
    [10.1109/gucon.2018.8675031](https://doi.org/10.1109/gucon.2018.8675031)
- en: Sinha, K., Darshani, M. P., Kumari, S., & Paul, P. (2016). Voice Print based
    Speaker Identification and Verification for Forensic Application. Imperial Journal
    of Interdisciplinary Research, 3.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: Sinha, K., Darshani, M. P., Kumari, S., & Paul, P. (2016). 基于语音特征的法庭应用的说话人识别和验证。Imperial
    Journal of Interdisciplinary Research, 3.
- en: Sinha, K., & Paul, P. (2019). Voice Based authentication used in Forensic Lab.
    CSI Communications, 42(11), 26.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: Sinha, K., & Paul, P. (2019). 在法庭实验室中使用的基于语音的身份验证。CSI Communications, 42(11),
    26.
- en: Sinha, K., & Paul, P. (2021a). Network Security Approaches in Distributed Environment.
    Research Anthology on Artificial Intelligence Applications in Security. doi:10.4018/978-1-7998-7705-9.ch061
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: Sinha, K., & Paul, P. (2021a). 分布环境中的网络安全方法。Research Anthology on Artificial
    Intelligence Applications in Security. doi:10.4018/978-1-7998-7705-9.ch061
- en: Sinha, K., & Paul, P. (2021b). Network Security Approaches in Distributed Environment.
    Research Anthology on Blockchain Technology in Business, Healthcare, Education,
    and Government. doi:10.4018/978-1-7998-5351-0.ch078
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: Sinha, K., & Paul, P. (2021b). 分布环境中的网络安全方法。Research Anthology on Blockchain
    Technology in Business, Healthcare, Education, and Government. doi:10.4018/978-1-7998-5351-0.ch078
- en: Sinha, K., Priya, A., & Khowas, M. (2016). A Framework for Budget Allocation
    and Optimization Using Particle Swarm Optimization. Advances in Computational
    Intelligence, 149–158\. 10.1007/978-981-10-2525-9_15
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: Sinha, K., Priya, A., & Khowas, M. (2016). 使用粒子群优化的预算分配和优化框架。Advances in Computational
    Intelligence, 149–158. 10.1007/978-981-10-2525-9_15
- en: 'Sinha, K., Priya, A., & Paul, P. (2020). K-RSA: Secure data storage technique
    for multimedia in cloud data server. Journal of Intelligent & Fuzzy Systems, 1–18\.
    10.3233/jifs-191687'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 'Sinha, K., Priya, A., & Paul, P. (2020). K-RSA: 多媒体云数据服务器中的安全数据存储技术。Journal
    of Intelligent & Fuzzy Systems, 1–18. 10.3233/jifs-191687'
- en: Sinha, K., Paul, P., & Amritanjali. (2019). Network Security Approaches in Distributed
    Environment. Advances in Computational Intelligence and Robotics, 174–209\. 10.4018/978-1-5225-7955-7.ch008
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: Sinha, K., Paul, P., & Amritanjali. (2019). 分布环境中的网络安全方法。Advances in Computational
    Intelligence and Robotics, 174–209. 10.4018/978-1-5225-7955-7.ch008
- en: Tajpour, A., & Shooshtari, M. J. (2010). Evaluation of SQL Injection Detection
    and Prevention Techniques. Proceeding of the 2^(nd) International Conference on
    Computational Intelligence, Communication Systems and Networks. 10.1109/cicsyn.2010.55
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: Tajpour, A., & Shooshtari, M. J. (2010). SQL 注入检测和预防技术的评估。Proceeding of the
    2^(nd) International Conference on Computational Intelligence, Communication Systems
    and Networks. 10.1109/cicsyn.2010.55
- en: Tanriverdi, M., & Tekerek, A. (2019). Implementation of Blockchain Based Distributed
    Web Attack Detection Application. Proceeding of the 1^(st) International Informatics
    and Software Engineering Conference (UBMYK). 10.1109/ubmyk48245.2019.8965446
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: Tanriverdi, M., & Tekerek, A. (2019). 基于区块链的分布式 Web 攻击检测应用的实现。Proceeding of
    the 1^(st) International Informatics and Software Engineering Conference (UBMYK).
    10.1109/ubmyk48245.2019.8965446
- en: Tendermint. (2018). https://tendermint.com/
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: Tendermint. (2018). https://tendermint.com/
- en: Uramova, J., Segec, P., Moravcik, M., Papan, J., Mokos, T., & Brodec, M. (2017).
    Packet capture infrastructure based on Moloch. Proceeding of the 15th International
    Conference on Emerging eLearning Technologies and Applications (ICETA). 10.1109/iceta.2017.8102538
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Uramova, J., Segec, P., Moravcik, M., Papan, J., Mokos, T., & Brodec, M. (2017).
    基于 Moloch 的数据包捕获基础设施。《第 15 届新兴电子学习技术和应用国际会议 (ICETA)》论文集。10.1109/iceta.2017.8102538
- en: Wang, Y., & Li, G. (2019). Detect Triangle Attack on Blockchain by Trace Analysis.
    Proceeding of the 19^(th) International Conference on Software Quality, Reliability
    and Security Companion (QRS-C). 10.1109/qrs-c.2019.00066
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Wang, Y., & Li, G. (2019). 通过跟踪分析检测区块链上的三角攻击。《第 19 届软件质量、可靠性和安全性国际会议伴随论文集 (QRS-C)》。10.1109/qrs-c.2019.00066
- en: Wei, K., Muthuprasanna, M., & Kothari, S. (2006). Preventing SQL injection attacks
    in stored procedures. Proceeding of the Australian Software Engineering Conference
    (ASWEC’06). 10.1109/aswec.2006.40
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: Wei, K., Muthuprasanna, M., & Kothari, S. (2006). 在存储过程中防止 SQL 注入攻击。《澳大利亚软件工程会议
    (ASWEC’06)》论文集。10.1109/aswec.2006.40
- en: Zhou, Z., Chen, Z., Zhou, T., & Guan, X. (2010). The study on network intrusion
    detection system of Snort. Proceeding of the International Conference on Networking
    and Digital Society. 10.1109/icnds.2010.5479341
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Zhou, Z., Chen, Z., Zhou, T., & Guan, X. (2010). 关于 Snort 网络入侵检测系统的研究。《网络与数字社会国际会议》论文集。10.1109/icnds.2010.5479341
- en: KEY TERMS AND DEFINITIONS
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 关键术语和定义
- en: 'Blockchain: It is created by a data block that is connected like a chain, where
    the data in the chain is consists of a list of records that are inter-linked by
    using a cryptography algorithm.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链：由连接的数据块创建，类似链条，链条中的数据由使用密码学算法相互连接的记录列表组成。
- en: 'Data Security: Protection of digital content in online/offline mode by any
    kind of attack which is performed by the adversary.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 数据安全：通过任何形式的攻击，由对手执行，以保护在线/离线模式中的数字内容。
- en: 'Domain Name System (DNS): It is a collection of computers in the form of hierarchical
    or decentralized, where the resources are connected with the Internet or a private
    network.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 域名系统 (DNS)：这是一个以分层或分散式形式的计算机集合，在其中资源与互联网或私有网络连接。
- en: 'Hash Functions: In this, the arbitrary size of data is mapped with fixed-size
    values, where the hash table is used for storage and retrieval.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希函数：在这种情况下，将任意大小的数据映射到固定大小的值，哈希表用于存储和检索。
- en: 'Intrusion Detection System (IDS): It is a software application to monitor unwanted
    and malicious activity on the network.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 入侵检测系统（IDS）：这是一个软件应用程序，用于监控网络上的不良和恶意活动。
- en: 'Public-Key Cryptography: In this, the sender and receiver use a different key
    for encryption and decryption.'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 公钥加密：在这种情况下，发送方和接收方使用不同的密钥进行加密和解密。
- en: 'SQL Injection: It is a kind of attack which is performed by the adversary by
    inserting the SQL query in the input data section of the client application.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 注入：这是一种由对手通过在客户端应用程序的输入数据部分插入 SQL 查询而执行的攻击。
- en: 'Structure Query Language (SQL): It is a domain-specific language that is used
    for managing the data relational database management system.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化查询语言（**SQL**）：它是一种专用语言，用于管理数据关系型数据库管理系统。
- en: 'Symmetric Key Cryptography: In this, the sender and receiver use a single key
    for encryption and decryption.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 对称密钥加密（**Symmetric Key Cryptography**）：在这种加密方式中，发送者和接收者使用单一密钥进行加密和解密。
- en: 'Timestamp: It is used to create the time for each data that is stored in the
    database.'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳（**Timestamp**）：它用于为存储在数据库中的每个数据创建时间。
- en: 'User Interface: It is web-based user interfaces, where applications accept
    the data at runtime environment.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面（**User Interface**）：这是基于 Web 的用户界面，应用程序在运行时环境接受数据。
