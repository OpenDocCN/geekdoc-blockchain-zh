- en: Chapter 11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Detection of SQL Injection on Blockchain-Based Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keshav Sinha
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![Orcid Image](i/orcid.svg) https://orcid.org/0000-0003-1053-3911](https://orcid.org/0000-0003-1053-3911)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Birla Institute of Technology, India
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Madhav Verma
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: B.I.T Sindri, Dhanbad, India
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ABSTRACT
  prefs: []
  type: TYPE_NORMAL
- en: In today's world, the storage of data needs a huge amount of space. Meanwhile,
    cloud and distributed environments provide sufficient storage space for the data.
    One of the challenging tasks is the privacy prevention of storage data. To overcome
    the problem of privacy, the blockchain-based database is used to store the data.
    There are various attacks like denial of service attacks (DoS) and insider attacks
    that are performed by the adversary to compromise the security of the system.
    In this chapter, the authors discussed a blockchain-based database, where data
    are encrypted and stored. The Web API is used as an interface for the storage
    and sharing of data. Here, they are mainly focused on the SQL injection attack,
    which is performed by the adversary on Web API. To cope with this problem, they
    present the case study based on the Snort and Moloch for automated detection of
    SQL attack, network analysis, and testing of the system.
  prefs: []
  type: TYPE_NORMAL
- en: INTRODUCTION
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain has become one of the significant technologies in the field of the
    IT industry. From the last few decades, blockchain came to the headlines, for
    the success of crypto-currency and smart contracts technology. After that many
    companies adopt blockchain technology for their products. Blockchain technology
    is started in the year 1991, where the trusted time-stamping protocol is used
    for data privacy (Haber, 1991). Later on in the year 1992, the Merkle tree is
    proposed for storing the multiple data in a single block (Bayer, 1992). After
    that researchers are not given much focused to evolve the technology because of
    the emergence of a centralized system. There is various research that has been
    done in the field of blockchain in the different time frames which are shown in
    Figure 1.
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 1\. The Various Development in the Field of Blockchain at Different
    Time Frame |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch011.f01](i/ch011.f01.png) |'
  prefs: []
  type: TYPE_TB
- en: Blockchain Safety and Security
  prefs: []
  type: TYPE_NORMAL
- en: The blockchain technology is based on the public ledger, where the data are
    stored at several nodes for transmission. There are various security principles
    and features of the blockchain system such as.
  prefs: []
  type: TYPE_NORMAL
- en: '1\. Decentralization: There is no single point failure present in the blockchain
    system because the nodes are distributed across the internet and all transactions
    over the network can be seen by all the nodes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '2\. Confidentiality: Public-key cryptography is used to identify authentic
    users, and provide the secure transmission of the data over the internet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '3\. Integrity: Blockchain technology is based on the concept of time-stamped,
    where every data is signed with a unique time, and any nodes can easily trace
    and validate the transaction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '4\. Transparency: In the blockchain system the unique agreement is signed by
    the nodes and the network before the transmission of data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '5\. Immutability: The blockchain is the concept of the block, where the data
    added to the network will not be destroyed or modified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The blockchain systems are operated by a public ledger, where every node has
    access to the network data. Any transaction that has occurred on the network is
    reviewed and validated by the different node members. This creates data transparency
    and it is not possible to alter the ledger without seeing by any actor within
    the system network. This concluded that the blockchain systems are resisted against
    any type of attack. Based on the theory there are no virtual attacks that are
    possible to the blockchain system. But in the year 2017, there is 10 percent of
    attacks are executed on the blockchain system (Passeri, 2017). This incident caused
    a huge loss for the IT industry. Many researchers point that blockchain technology
    is mainly focused on Cryptocurrency, where the adversaries get huge rewards once
    the attack is succeeded.
  prefs: []
  type: TYPE_NORMAL
- en: Cryptographic Techniques
  prefs: []
  type: TYPE_NORMAL
- en: 'The traditional blockchain system is based on the public key cryptography and
    hash function for the secure transmission of data. The security of data is achieved
    using the cryptography technique (Darshani, 2018). The most important part of
    cryptography is to make the data unreadable, in this encryption and decryption
    plays an important role. The encryption uses the three different type’s key selection
    technique to encrypt the message:'
  prefs: []
  type: TYPE_NORMAL
- en: '1\. Symmetric-Key Cryptography: In this, both the sender and receiver use the
    single key for encryption and decryption (Darshani, 2016).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '2\. Public-Key Cryptography: In this, the pair of keys is used by the client
    and server for encryption and decryption. The client shares the public key for
    encryption, where the private key is used by the client for the decryption of
    the data (Paul, 2019).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '3\. Hash Functions: In this, the arbitrary size data is mapped with fixed-size
    values (Almuttalibi, 2019). The hash table is used for the storage and retrieval
    of data in a very small amount of time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traditional cryptography uses the permutation technique to scramble the English
    alphabet in the original text file. Let us see an example, where the ASCII value
    of alphabet (n) is used for the encryption (Paul, 2019), the original Message
    (M) is consists of several sets of sub-messages {![Mathtype978-1-7998-7589-5.ch011.m01](i/ch011.m01.svg),
    ![Mathtype978-1-7998-7589-5.ch011.m02](i/ch011.m02.svg), …, ![Mathtype978-1-7998-7589-5.ch011.m03](i/ch011.m03.svg)},
    where ‘m’ is the finite set of letters, ‘n’ is the fixed-length sequences (![Mathtype978-1-7998-7589-5.ch011.m04](i/ch011.m04.svg)).
    Here, ![Mathtype978-1-7998-7589-5.ch011.m05](i/ch011.m05.svg) for the ASCII alphabet.
    This is how cryptography works for plaintext encryption in a distributed and centralized
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: The General Structure of Blockchain
  prefs: []
  type: TYPE_NORMAL
- en: 'The structure of the blockchain is divided into four different sub-section:'
  prefs: []
  type: TYPE_NORMAL
- en: '1\. Main Data: It records all the current services for example transactions,
    bank, and contract records, or IoT data records.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '2\. Hash: The hash is used to secularly broadcast the transaction record to
    other nodes. The Merkle tree function is used to generate the hash value and it
    is recorded in the block header. The computational time is reduced by using the
    Merkle tree function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '3\. Timestamp: Once the block is created the time is generated for each block
    and the metadata is stored in the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '4\. Other Information: The cryptographic signature and Nonce value are defined
    by the user for the secure transmission of the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Framework for Blockchain Technology
  prefs: []
  type: TYPE_NORMAL
- en: The blockchain is consist of a public ledger, where every record is added to
    the lists of transaction. And the collection of various records is known as blocks.
    Here, every node is responsible for the validation of blocks. Figure 2 presents
    the framework for the blockchain system. The process is divided into six sub-sections
    (1) transaction of data, (ii) creation of block, (iii) mining of data, (iv) mining
    process completion, (v) validation of block, and (vi) creating the chain between
    the new blocks.
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 2\. The Framework for Blockchain Technology |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch011.f02](i/ch011.f02.png) |'
  prefs: []
  type: TYPE_TB
- en: '1\. Data Transaction: The transaction of data between the two nodes is recorded
    and broadcasted among other connected nodes. In the case of Cryptocurrency, when
    the transaction is initiated in the blockchain system, then another node is recorded
    their transaction history. This causes a huge amount of broadcasting between the
    nodes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '2\. Creation of block: In the blockchain system the miners validate the global
    ledger. All the incoming transaction of data is verified based on the blockchain
    protocol. Once the validity of the block is confirmed then the miner will start
    organizing the transition. Here, each block has a limited size and the mining
    process is not stopped until the limit is reached. All the valid transactions
    are set into the candidate blocks, and the miner will record the timestamp of
    previous information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '3\. Mining and complete mining of block: Once the candidate block is completed
    the mining process is started, this process is called puzzle solving. Here the
    cryptographic hash is used to obtain the Block ID. The generation of the hash
    value is very trivial and the miners continue to adjust the nonce value in the
    candidate block header which creates a security layer and is not be altered by
    an adversary. Once the puzzle is resolved the mining process is completed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '4\. Validation: Once the block is mined, the miner sends the block to another
    node (broadcast) and waits for the confirmation. The other nodes start validating
    the block and if they find any inconsistency in the block then they reject the
    block. If the block passes all the nodes without any discrepancy then that block
    is added to the data chain of the existing network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '5\. New Blockchain: Once the validation is over the timestamped is added to
    the block and the final block is added in a linear or chronological order to the
    chain. The existing chain is broadcast to the entire network and is stored in
    the public ledgers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain System and Automated Detection of SQL Injection Attack
  prefs: []
  type: TYPE_NORMAL
- en: The emergence of blockchain technology provides high secrecy to the data. Besides
    the concept of temper resistance, the blockchain maintains its logs in the native
    Database Management System (DBMS). However, in the insider attack, the adversary
    can alter the transaction logs and login details present in the DBMS. To cope
    with this problem, we have to push all the database towards the blockchain framework.
    The storage data are distributed throughout the geographical region and a huge
    amount of users are present to access those data. Network analysis is a huge challenge
    for an administrator. According to Frost, 1994; Nikolaidis, 1992, the network
    traffic is characterized in two ways (i) Stochastic and (ii) Deterministic. The
    stochastic models are used to track the statistics of the network source in better
    form, whereas the deterministic model has the worst behavior in the determination
    of the traffic. There are various stationary stochastic models such as variable
    bit rate, Markov modulated processes, self-similar, Transform-Expand-Sample (TES),
    autoregressive models, (etc.) the deterministic models that bound source characteristics
    include the peak rate model, maximum packet length, and minimum packet inter-arrival
    time is used to determine the peak rate of each connection. The best example for
    a large network is an automated teller machine (ATM), which send 53-byte packets
    or cell through virtual circuits. There are several protocol layers in-between
    the application protocol and the ATM layer which add complexity, but it doesn’t
    address the issue of Session hijacking. Here, it’s come the role of automated
    detection where it detects the response and event earlier using various stochastic
    models. The attacks like SQL injection are executed by an adversary on a client-server
    architecture. The adversary uses the SQL query to inject network traffic which
    will collect the information. The security of the database is going on in this
    direction, where BigchainDB integrates Tendermint with MongoDB (NoSQL) to increase
    the transaction rate of data (Bigchaindb, 2018; MongoDB, 2018; Tendermint, 2018,
    Kwon, 2014). LedgerDB is another database based on blockchain technology (LedgerDB,
    2018). It supports high transaction throughput, single table and it doesn’t support
    the SQL features. The Bitcoin transaction is supported by ChainDB for all general
    purposes solution (Chaindb, 2018). The blockchain-based DBMS doesn’t have much
    SQL querying interface that increases the concern of data privacy in the public
    ledger-based blockchain system. The traditional DBMS has more than one administrator,
    where the inside attack can get full access to the data server. Due to a lack
    of cryptographic protocol, the traditional DBMS cannot resist the attack. So,
    our goal is to validate the system before it is used with the blockchain system.
    The blockchain system only stores the metadata in the DBMS. The hash function
    is used to map the arbitrary data into fixed-length bit string data (Handschuh,
    2005). The hash function is defined as h:![Mathtype978-1-7998-7589-5.ch011.m06](i/ch011.m06.svg),
    where ‘n’ is the 128, 256, and 512\.
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 3\. The Cryptographic Hash of Message Block |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch011.f03](i/ch011.f03.png) |'
  prefs: []
  type: TYPE_TB
- en: Figure 3 represents the hashing of the original message block and store it in
    the DBMS. The property of hashing is that the difference between the two values
    is not relative, which means that the small change in the input provides a huge
    change in the output value. This creates an advantage for the generation of a
    unique hash value for all the tuples in the database. The use of existing DBMS
    with blockchain network is based on metadata. The DBMS tuples are cryptographic
    hash and then generate the metadata. The DBMS table ‘T’ is based on the primary
    key (![Mathtype978-1-7998-7589-5.ch011.m07](i/ch011.m07.svg)) and tuple with ‘r’,
    we have to generate the Row_ID.
  prefs: []
  type: TYPE_NORMAL
- en: '![Mathtype978-1-7998-7589-5.ch011.m08](i/ch011.m08.svg) (1)'
  prefs: []
  type: TYPE_IMG
- en: Eq. 1 used to concatenate the primary key and tuple with the table name to generate
    the hash form. The fingerprint of each tuple is stored in the blockchain using
    the digital signature (private key) on the blockchain node. Every time the changes
    in the tuple are logged with user information.
  prefs: []
  type: TYPE_NORMAL
- en: Motivation and Proposes of the Work
  prefs: []
  type: TYPE_NORMAL
- en: 'The motivation of work is to provide secure data storage in blockchain-based
    DBMS. The tuple of DBMS is updated by any user node in the blockchain and those
    modifications are stored in the database. Those data come from various fields
    such as education, military, business, and entertainment. Now the attacks are
    executed to get the information for the Database. The basic processing of information
    is called by using the select, update, and delete command in DBMS. Now a day’s
    traditional database is used in the field of blockchain this increased the chance
    of an attack like SQL injection which exploits the security of the database and
    retrieves the personal information. To overcome the high percentage of threats
    it needed to be automated to stop the intrusion or attack on the blockchain network.
    The administrator has to face lots of security challenges such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '• Attack on Personal Information: At the present date the adversary is waiting
    on the internet to retrieve the personal information. An attack like SQL injection
    can retrieve the database table information and login credentials (username, password)
    to exploit the blockchain network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• Replication of Metadata: In the blockchain network, the database stores the
    metadata of row and column. The adversary always tries to replicate the details
    of DBMS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• Data Privacy: The huge amount of data is distributed on the internet. The
    entertainment company which is based on the blockchain system has always been
    concerned about data piracy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are some of the challenges faced by the blockchain system. But there is
    a chain of problems present in data security, and we are not able to cover all
    the problems. There are various ways to provide security on data. But automating
    the detection of attack is one of the effective ways to stop the tempering of
    the blockchain database. It provides robustness and effectiveness to securely
    store the data in the blockchain network.
  prefs: []
  type: TYPE_NORMAL
- en: BACKGROUND
  prefs: []
  type: TYPE_NORMAL
- en: There are various researches has done in the field of blockchain and DBMS security
    and we found that most of the time the attacker has performed two different types
    of attack (i) Active and (ii) Passive attack. In an active attack, the adversary
    modifies the data and sends it to the users, this event causes a serious effect
    on personnel. In a passive attack, the adversary doesn’t harm the system they
    just watch the traffic of the information. According to w. Jung and S. Park (2017),
    the blockchain is a P2P system where the adversary applies the DDoS attack to
    shut down the transaction node. In the blockchain system, all the nodes check
    the memory pool and the time of the overflood attack. Here, the author proposed
    the least Mean square method to minimize the creation of a new transaction in
    the blockchain system. W. J. Lai et al. (2019), proposed the time-sensitive message
    encryption scheme. Here, the message is encrypted in a decentralized environment,
    which encourages the participants to share the resource with the network. Bansal
    and Sethumadhavan (2020), present the prevention technique against name-based
    attacks. It is a DNS cache poisoning attack in the blockchain system, where the
    author uses a user-defined port instead of a predefined port for the transmission.
    In the second step, the author encrypts the port number and the communication
    is initiated using the decrypted user-defined port number. Tanriverdi and Tekerek
    (2019), proposed a blockchain-based web attack detection model using signature-based
    detection. The work is to detect the specific pattern such as Structured Query
    Language (SQL) Injection, Cross-Site Scripting (CSS), and Command Injection. The
    author uses the MultiChain application, and the signature list is updated on the
    blockchain. Anita and Vijayalakshmi (2019), present a brief survey of different
    types of attacks, challenges, and security feature of blockchain technology. Wang
    and Li (2019), present a trace analysis technique to detect the various attack
    in the blockchain. Here, the author captures the sequence of actions based on
    the running protocol. This will help to detect the attacks like DDoS and triangle.
    Brown et al. (2020), present a double-spend attack on the established transaction
    of blockchain. The success of this attack depends on the transaction and computational
    power. Gochhayat et al. (2019), present a lightweight decentralized encrypted
    cloud storage model using the blockchain technique. This model provides confidentiality
    and integrity for storage data. Here, the author has used the hashing and symmetric
    encryption technique for the security of the data. Saad et al. (2020), explore
    the attack surface on the public blockchain system. In this, the attribute attack
    is used to check the cryptographic construct, distributed architecture, and application
    context. The author also explores how various vectors are connected to the Blockchain
    system. Holbrook (2020), studied the various security aspects in the blockchain.
    Here, the author explains that the public ledger is distributed and cannot be
    modified or deleted. The threats like distributed denial‐of‐service (DDoS) can
    expose the security of the blockchain network. The specific feature like Hyperledger,
    Quorum, (etc.) offers the security to blockchain administrator. Rikken et al.
    (2019), analyze the various challenges regarding blockchain governance. Here author
    proposed the framework based on the infrastructure, application, company, and
    institution/country. Singh et al. (2019), present the blockchain-based DDoS solution
    to avoid a serious attack on the network. Here the author provides the concern
    regarding the rapid change of blockchain technology in the field of financial,
    gaming, and decentralized servers to provide a secure environment for the transaction
    of the block.
  prefs: []
  type: TYPE_NORMAL
- en: The blockchain system uses the database for storing metadata, where our work
    is to provide a secure environment for the storage of the data. Based on this
    fact here we present some of the secure database storage technique which helps
    in the blockchain environment. According to Sinha et al., (2020), secure storage
    of data is one of the challenging tasks. Here, the authors present the asymmetric
    technique for the storage of the data in the cloud data server. Bertino et al.
    (2007), present the anomaly detection technique, where the author identifies the
    malicious actions of database application based on the SQL queries. They demonstrate
    that the proposed model can detect the SQL injection attack on the database. Tajpouret
    al. (2010), present the various approaches to detect SQL injection. Wei et al.,
    (2006), propose a novel technique to resist various attacks that target the store
    procedures. They use code analysis and runtime validation to detect the attacks
    on SQL Server 2005 database. Ntagwabira (2010), proposed the Query tokenization
    to detect the SQL injection, where the author uses the QueryParser to detect the
    space, single quote, or double dashes in the strings. The two array string is
    compared based on the length for the detection of the injection. Sadeghian et
    al. (2013), presents various detection and prevention techniques for SQL injection
    which provide confidentiality, integrity, and availability of information in the
    database. Kumar (2012), presents the survey on SQL injection attacks, detection,
    and prevention techniques. They found that the poorly coded application affect
    the organization network. The attackers violate all types of security layers and
    protocol’s to access that information. Singh et al. (2016), discussed attacks
    and prevention against SQL injection. They proposed the firewall technique for
    the SQL server which will restrict the privilege of the unregistered users. But
    for using this service it needed to be the node to node signature authentication.
    Gudipati et al. (2016), uses the Sp_executesql to execute the syntax in a specific
    order which replaces the QUOTENAME. It also manages the permission at the time
    of attacks. Kamtuo (2016), uses the machine learning technique for the analysis
    of attacks. It also extracts information for training and testing. Zhou (2016),
    introduced a User Defined Approach (UDA) for mapping the attribute to a specific
    requirement. It also checks the threshold value for any attacks. Dubey (2016),
    introduce the filtering mechanism for sending and receiving the request. Aldlaeen
    (2013), introduced a firewall technique to obstruct the SQL injection attack and
    provide access control to the authentic users only. Chatur (2015), uses a security-based
    model for checking the signature of the authentic users. Ghorbanzadeh et al. (2010),
    introduced the firewall and virtual private network for the prevention of unwanted
    intrusion on the mobile database. Sallam et al. (2016), introduced a Role-based
    anomaly detection approach for an insider attack. Fatih (2017) and Mouton et al.
    (2014), introduced the web-based security approach to protect against SQL injection.
    Orman (2018), proposed a Blockchain concept to verify the genuine nodes of the
    webserver.
  prefs: []
  type: TYPE_NORMAL
- en: The blockchain-based database consists of a huge amount of metadata and it needs
    to organize and optimized before sharing with the network node. Here we present
    some of the optimization and scheduling technique which reduce the time complexity
    of the data. According to Priya (2020), the time complexity is reduced by minimizing
    the makespan of the waited queue. Here the author presents the PA-ACO technique
    to minimize the makespan of flow shop scheduling problem. Sahana et al. (2018),
    proposed an optimization and allocation technique for the budgeting problem. The
    author presents the Genetic Algorithm (GA) and Optimal Computing Budget Allocation
    (OCBA) technique for the optimization of large scale budgeting problems. Khowas
    et al. (2016), present the Particle Swarm Optimization (PSO) technique for large-scale
    budgeting problems. Paul (2019), present the article on voice-based authentication
    scheme to detect the real world culprits. Verma et al. (2020), present the asymmetric
    encryption technique for sharing and storage of data in the distributed database.
    Chaddha et al. (2020), present the real-time image encryption technique based
    on asymmetric key cryptography. The technique is used for the large scale image
    encryption and storage of data in the database. Choudhary et al. (2018), proposed
    multimedia encryption using the asymmetric key for storage. The technique is based
    on the key management server to store the data in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'CASE STUDY: AUTOMATED SQL INJECTION DETECTION'
  prefs: []
  type: TYPE_NORMAL
- en: After an exhaustive study of different techniques, we would like to propose
    an automated SQL injection detection using Snort and Moloch. This will help to
    detect the SQL injection in the blockchain network. The cyber-attacks are one
    of the buzz problems for any individual. Here the adversary always tries to take
    personal information like credit/debit card information, passwords from the storage
    database, and this information are sold on the dark web very easily. On the other
    hand, the blockchain-based DBMS is used for storing the metadata. Many companies
    use the blockchain system for multimedia storage and for that they use web APIs.
    The web interfaces are more vulnerable against (i) weak cryptographic authentication,
    and (ii) flaws in endpoint connection. The protocols like SOAP provide the security
    architecture and REST which provide a secure environment for the API implementation.
    During transmission of data, the adversary secretly intercepts the communications
    between the two parties, and even though they altered the message. API Injections
    like XSS and SQLite will inject the malicious code into the software program and
    create a backdoor in the system. The Distributed Denial of Service (DDoS), is
    one of his kind of attacks where the attacker will flood the blockchain network
    with unwanted packets. The API injection or SQL injection is the most common attack
    which is executed by the attacker. The SQL injection will not need any permission
    for authentication, instead, it will redirect the information of the database
    (H. Meyer 1996). In year I988, Computer Emergency Response Team (CERT) is developed
    a coordination center at Carnegie Mellon University (CMU) that handles the security
    against network attacks like a worm, virus, malware, etc. (J. Clarke 2009).
  prefs: []
  type: TYPE_NORMAL
- en: SQL Injection Overview
  prefs: []
  type: TYPE_NORMAL
- en: 'Mainly the SQL injection attacks are executed on a client-server architecture.
    The web API acts as a thin-client, where the user sends the query to extract the
    data from the database. Figure 4 presents the SQL attack executed on the blockchain
    system having Web API. The web API uses the SQL commands for the extraction of
    data from the database. SQL is a Structured Query Language that is used for managing
    and communicating with a relational database. The most common SQL queries are:'
  prefs: []
  type: TYPE_NORMAL
- en: '• SELECT: It retrieves the store entries from the table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• INSERT: It uses for creating entries in a table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• DELETE: It deletes the record from the table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Figure 4\. SQL Attack on Web API |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch011.f04](i/ch011.f04.png) |'
  prefs: []
  type: TYPE_TB
- en: Here, the authentic user sends the query for retrieval of information from the
    database. But in the case of SQL injection, the adversary uses the special character
    and symbols for the authentication. Most of the time adversary uses the ‘AND’
    and ‘OR’ DBMS condition for the attack.
  prefs: []
  type: TYPE_NORMAL
- en: SQL Injection
  prefs: []
  type: TYPE_NORMAL
- en: SQL injection is a query-based attack on web API and it was first introduced
    by Jeff Forristal in the year 1998 (Joseph Cox, 2015). The attack mainly consists
    of an SQL query that exploits and manipulates the database records. SQL injection
    maintains the position of the top 10 web API attacks on the Open Web Application
    Security Project (OWASP). The application programmers handle all the types of
    user input using a scripting language. There is also a programmer’s code of conduct,
    which doesn’t believe in user input. Several SQL injection risks are presented
    such as accessing sensitive data remotely, retrieving the stored information,
    knowing the database records and table information, (etc.). The SQL injection
    provides free space to hackers, where it develops and executes the script on the
    network. The hackers developed a bot to check the vulnerability of the websites.
    The bots (bots.txt) are run on the blockchain network and compromised the server
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: How SQL Injection Work?
  prefs: []
  type: TYPE_NORMAL
- en: It is a query-based attack, where the adversary injects the piece of code into
    web API. The malicious query will provide the database table information in the
    URL parameter. Figure 5, represents the SQL injection on a simple website.
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 5\. SQL query-based injection |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch011.f05](i/ch011.f05.png) |'
  prefs: []
  type: TYPE_TB
- en: We present several types of SQL injection performed by the adversary to extract
    the table information from the database (Pollack, 2018).
  prefs: []
  type: TYPE_NORMAL
- en: '1\. Boolean-Based Blind Injection: In this, the logical query is attached with
    the parameter and the adversary waits for some meaningful search. The malicious
    query will redirect some result that is related to Boolean operation (True or
    False). The “WHERE” operator is used to evaluate the tautology of the parameter.
    Let us consider a Boolean based malicious string (https://abc.com/index1.php?id=1
    AND substring (@@version,1,1)=4). Now, the query is used for checking database
    table information. The “substring (@@version, 1, 1)=4” is used to check the database
    version. If it is true then it will return one row otherwise it will give the
    failed “0” result. It means there is no database of version 4\. The attacker will
    do this process again and again to map the logical structure of the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '2\. Time-Based Blind Injection (TBBI): It uses the time of the server to access
    the information of the database. The format for TBBI is applied on any website
    example (http://example1.com/index.php?id=1; IF User = ‘admin’ WAIT FOR DELAY
    ‘00:00:15’). It evaluates the response by delaying 15 seconds then it sends the
    information to the attacker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '3\. UNION Based Injection (UBI): It uses for merging the two different table
    rows. The only disadvantage of UBI are (i) the structure of the table are same,
    (ii) the same number of row and column is present. UBI is used the “ORDER BY”
    operator for finding the column. Example (http://example1.com/index.php?id=1 ORDER
    BY 1 -> OK & http://example1.com/index.php?id=1 ORDER BY 2 -> Error). The union-based
    injection is used for testing the 2 columns and only 1 of them is passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are various ways to perform SQL injection attacks on the web API of the
    blockchain database server. The system firewall is not able to provide that much
    security against SQL injection attacks. So, our work is to restrict those attacks
    and provide a secure environment for every user which is connected with the blockchain
    system. Here, we present the framework for automated detection of SQL injection
    attacks using Snort (Zhou et al., 2010) and Moloch (Uramova et al., 2017). The
    outline for the detection system is presented in Figure 6.
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 6\. The Framework for Automated SQL Attack Detection using Snort and
    Moloch in the Blockchain System |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch011.f06](i/ch011.f06.png) |'
  prefs: []
  type: TYPE_TB
- en: 'Figure 6 presents the framework of automated SQL attack detection. The framework
    is divided into several components and each component has specific work such as:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A Detection System (Snort): It uses the Snort technique for the detection of
    SQL injection. It also analyzes the huge HTTP network traffic. The Snort was first
    created by Martin Roesch in the year 1988 for network intrusion detection (Roesch,
    1999). Here, the packet capture module is used to collect the request and response
    of the system. The pseudo-code for packet capturing is given below. Here, the
    genuine user only passes through the authentication process. If there is a SQL
    attack then it uses the specific keywords to identify the attacks.'
  prefs: []
  type: TYPE_NORMAL
- en: Pseudo Code
  prefs: []
  type: TYPE_NORMAL
- en: Class Public Signin(request, response)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: String signin = request. getParameter(“signin”);
  prefs: []
  type: TYPE_NORMAL
- en: String p_word = request. getParameter(“p_word”);
  prefs: []
  type: TYPE_NORMAL
- en: String query1 = “SELECT info FROM userTable WHERE”;
  prefs: []
  type: TYPE_NORMAL
- en: if ((!signin. equals(“”)) && (!p_word.equals(“”))) query += signin = “‘+ signin+’”
    AND pass= “‘+p_word +’” elsequery+ = “‘signin= ‘Guest’’”;
  prefs: []
  type: TYPE_NORMAL
- en: ResultSet result1 = stmt. executeQuery(query1) ;
  prefs: []
  type: TYPE_NORMAL
- en: if (result1 != null)
  prefs: []
  type: TYPE_NORMAL
- en: showAccount(result1) ;
  prefs: []
  type: TYPE_NORMAL
- en: else
  prefs: []
  type: TYPE_NORMAL
- en: sendAuthentacationFailed();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example to detect the ICMP packet in ECHO REQUEST.
  prefs: []
  type: TYPE_NORMAL
- en: alert ICMP $ExternalNET
  prefs: []
  type: TYPE_NORMAL
- en: 'any -> $HOME any (msg:”ICMP PING”; icode:0; itype:8; classtype: misc-activity;
    sid:384; rev:5;)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Snort package is divided into two parts Header and Body. The Header is
    divided into seven different fragments (i) Action, (ii) Protocol, (iii) Source_IP,
    (iv) Source_Port, (v) Direction, (vi) Dst_IP, and (vii) Dst_Port. These fields
    are consist of variables or strings to match with the database. The body uses
    the payload or HTTP headers of the message. The alert is generated by using the
    fast_output modules. An example is given as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**] [1:374:5] ICMP PING [**]'
  prefs: []
  type: TYPE_NORMAL
- en: '[Classification: Misc activity] [Priority: 4]'
  prefs: []
  type: TYPE_NORMAL
- en: 03/12-02:11:09.359780 10.1.1.10 -> 10.0.1.253
  prefs: []
  type: TYPE_NORMAL
- en: 'ICMP TTL: 30 TOS: 0x0 ID: 38175 IpLen: 15 DgmLen: 92'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type: 8 Code: 0 ID: 32335 Seq: 1 ECHO'
  prefs: []
  type: TYPE_NORMAL
- en: The Starting line is used for packet matching. The [**] symbol is used for the
    starting and end of the sequence. Three values are present inside the brackets
    which are separated by a colon. (i) Generator_ID (GID) is used in the alert module,
    (ii) Snort_ID (SID) is used to identify the unique alert, and Revision_No (REV)
    is used to trigger the alert.
  prefs: []
  type: TYPE_NORMAL
- en: Traffic Acquisition System
  prefs: []
  type: TYPE_NORMAL
- en: 'It uses the Moloch as a default system to gain the visibility of SQL injection.
    During the attack, several packets are not logged due to performance reasons.
    It uses the IPv4 packets for the detection of the intrusion. Moloch session uses
    the seven tuples: Moloch_Session = (St_Time, Sp_Time, Source_IP, Dstination_IP,
    Source_Port, Dstination_Port, Protocol).'
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 7\. Moloch Web Interface |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch011.f07](i/ch011.f07.png) |'
  prefs: []
  type: TYPE_TB
- en: 'Figure 7 presents the Moloch web interface is used to intercept the network
    packets. The Moloch is consists of three main parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '• Elastic search database: It is used in indexing stored sessions. It also
    managed the captured sessions. In real-time, the large volume data is managed
    by using the network traffic analysis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• Capture: It separates the network between captured and network traffic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• Viewer: It is used for filtering the stored session and it also exports the
    stored session.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moloch is used for HTTP session for filtering. The Moloch filtering expression
    is given as (ip.src == 10.0.0.41 && start_time >= “2019/03/05 22:11:23” && port.dst
    == 8080).
  prefs: []
  type: TYPE_NORMAL
- en: '• HTTP Tag Filtering: This is the procedure for Moloch for packet filtering
    (Protocol = = http && method = = GET && status = = 200 && stop_tm <= “2019/02/05
    12:21:03”).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• Analysis Engine: The work of the analysis engine is to analyze the malicious
    packets. The PCAP analysis is done by modules. Whereas each module will perform
    a certain amount of actions on PCAP to return the output from the engine. The
    database is used to store the information (such as attack investigation) for analysis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• Attacker IP Details: The attacker IP is very trivial to find by any IDS.
    Attackers often hide their IPs and location server o secure their personal information.
    According to Cloudflare, there are 90% of the request is came from the Tor browser
    which is very unpredictable to find genuine requests. The IP address is consist
    of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: o The owner IP address,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: o Origin of Internet Service Provider (ISP),
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: o CIDR notation,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: o E-mail contact,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: o Tor node check
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: All the information is retrieved from Regional Internet Registries (RIRs). All
    Tor node is present publically and it uses as encrypted traffic to access the
    HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: '• Web Server Detail: It uses to find out the details of the target server.
    The analysis engine doesn’t have access to analyze the web server, so it uses
    the pattern matching technique for finding the details. The Wappalzer is an open-source
    tool to detect the web server, content management system (CMS), and JavaScript
    libraries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• Statistical Analysis: If there is a crime there also evidence, the attacker
    leaves the fingerprint in the form of the entry point. In statistical analysis,
    the PCAP pattern is observed to find evidence of the SQL injection. The analysis
    engine is used to identify the outline in traffic, network endpoints.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• Database Canary: The attacker will usually try to retrieve information such
    as table names and columns. The work of Canary is to add an appropriately long
    string that replaces the information of the database. It also sends the SQL injection
    successful message to the server, but instead of the actual table, it sends the
    empty table to the attacker. Canary is generated by 256 bits string which is placed
    in the database. This will not provide security against time-based blind injection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• Connections: It captures the network subnet and provides the list of the
    host. Using Moloch will provide this information in the API panel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• Storage and Web Interface: It uses the RethinkDB document based NoSQL database
    and API for real-time application. Traditional database will not provide the analysis
    functionality. RethinkDB will execute on separate machine using remote server
    or wire. The command for NoSQL database is given as:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cursor = r.table(‘analyses’).filter(r.row[‘dst_ip’] == ‘10.0.0.1’).run()
  prefs: []
  type: TYPE_NORMAL
- en: 'for document in cursor:'
  prefs: []
  type: TYPE_NORMAL
- en: print(document)
  prefs: []
  type: TYPE_NORMAL
- en: 'Web Interface: The web interface is used to analyze the results. The visualization
    of analysis is shown in the web API. The Individual results are offered in the
    form of a map and table. The implementation is done on the anaconda 3.1, on windows
    8.1 x64 platform, having a core i5 processor. The prerequisites for deployments
    are Snort, Proofpoint, PulledPork instances to generate the signature map. The
    working of Snort is to generate the intrusion logs in a binary form called unified2\.
    The log is consist of several alerts such as (i) Alert_syslog, (ii) Alert_fast,
    (iii) Alert_full, (iv) Alert_unixsock, and (v) Log_tcpdump. There are few things
    needed to set up the Snort log session in Moloch. The Moloch needs the subnet
    address as a development point, the timestamp in the UTC standard, REST API with
    self-signed SSL certificate, and PCAP (Packet Capture) which deletes the old unwanted
    session.'
  prefs: []
  type: TYPE_NORMAL
- en: '• Alert forwarding: Snort is used as the analysis engine to send the alert
    to the log processing system. The log system is constantly examined the new records.
    The manual implementation uses the “idstools” package in python to monitor the
    log record.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pseudo Code
  prefs: []
  type: TYPE_NORMAL
- en: from idstools import unified2
  prefs: []
  type: TYPE_NORMAL
- en: reader1 = unified2.SpoolEventReader(directory, prefix, follow=True)
  prefs: []
  type: TYPE_NORMAL
- en: 'for event in reader:'
  prefs: []
  type: TYPE_NORMAL
- en: process event
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '• Signature Mapping: It is a process of setting a numeric signature ID to the
    textual representation. The pseudo-code for the signature mapping is done by using
    the “idstools” package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pseudo Code
  prefs: []
  type: TYPE_NORMAL
- en: from idstools import maps
  prefs: []
  type: TYPE_NORMAL
- en: sigmap1 = maps1.SignatureMap()
  prefs: []
  type: TYPE_NORMAL
- en: sigmap1.load_signature_map(open(’/path/to/sid-msg.map’))
  prefs: []
  type: TYPE_NORMAL
- en: sigmap1.load_generator_map(open(’/path/to/gid-msg.map’))
  prefs: []
  type: TYPE_NORMAL
- en: sigmap.get(gid, sid)
  prefs: []
  type: TYPE_NORMAL
- en: An additional task of Snort alert forwarding is (i) Signature filtering and
    (ii) Bookmarking. In signature, filtering is used to provide the alert of SQL
    injection Id only. Bookmarking will help to keep track of all the events of the
    analysis engine.
  prefs: []
  type: TYPE_NORMAL
- en: •
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Creating Analysis: IDS will generate multiple alerts at the time of the SQL
    injection attack. The analysis engine is used to retrieve the load traffic using
    the API. The alerts are generated in the form of a time frame and it is a cluster
    in one analysis. A similar alert is checked with the prescribed cluster. There
    are three tuples are present in the alert.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Mathtype978-1-7998-7589-5.ch011.m09](i/ch011.m09.svg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '• Task Queue: It uses the task in the distributed form means each task is executed
    in different processors. The Celery is an open-source Python software for parallel
    processing. Celery is working on the master and slave model, where the master
    distributes the task for different processors and slaves will run those tasks
    in parallel. The API will handle the entry of the database. The entry is consists
    of the timestamp and task status of pending data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Analysis Engine: It is used for task scheduling. Several steps are present
    in the analysis engine:'
  prefs: []
  type: TYPE_NORMAL
- en: '• Status: It monitors the task status such as “PENDING” or “PROGRESS”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• PCAP from Moloch: It analyze the HTTP traffic between source and destination.
    The alert is generated by using (/sessions.pcap endpoint). Moloch traffic filter
    is done as (port.dst == {dst_port} && protocols == http && ip.src == {src_ip}
    && ip.dst == {dst_ip}). In simple the Moloch has observed the initial alert such
    as Start_Time, Stop_Time, and expression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• Database entry update: It changes the entry to success or error for the task
    analysis engine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Modules: It uses the command for analyze the analysis_modules: (module_results
    = module(opts, pcap_path, config).bootstrap())'
  prefs: []
  type: TYPE_NORMAL
- en: • opts = source IP, destination IP alert.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• pcap_path: It retrieves the PCAP store file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• config: It manages the RethinkDB host and port, Celery broker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • bootstrap() return the stored from the database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The analysis is done by the web interface to analyze the source IP, destination
    IP. PCAP retrieve the Moloch information. The Snort and Moloch are both monitor
    host information. It supervised the running task by using the uWSGI, Celery, and
    Alert forwarder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Evaluation: For evaluation, the testing is conducted using Ubuntu 18.1, MySQL
    database, and Damn Vulnerable Web App (DVWA). The Sqlmap is used for the detection
    of SQL injection (Axinte, 2014). The workflow of Sqlmap’s is divided into five
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '• Setup: Sqlmap use as an independent tool for the detection of SQL Injection.
    It needed some basic configuration such as: Specify the entry pointy of Target
    URL, HTTP header, Proxy, Tamper Scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• Detection: it checks the entry point of the links.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• Fingerprinting: It uses the fingerprint of the database server and web server
    for crucial data. It also detects the Web Application Firewall (WAF) and Protected
    Web Server (IWS) before the webserver.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• Enumeration: It also retrieves the tables and columns of the database using
    a brute-force attack. It uses the dictionary attack for hash protected data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• Takeover: It tries to access information about the operating system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For testing, we use the 20 sqlmap (version 1.0.5.27) attacks on DVWA and using
    the Snort package we able to detect the SQL injection. The alerts are analyzed
    by using the proper PCAP (packet capture). Sqlmap also identifies the canary string
    at the response. Snort will generate the 40 different alerts for every sqlmap
    attack. The sqlmap arguments are used for testing purposes.
  prefs: []
  type: TYPE_NORMAL
- en: python sqlmap.py -u
  prefs: []
  type: TYPE_NORMAL
- en: “http://abc.com?id=1&submit=login#”
  prefs: []
  type: TYPE_NORMAL
- en: --cookie “PHPSESSID=[session_id]; security=low”
  prefs: []
  type: TYPE_NORMAL
- en: --dbs --flush-session --tamper=randomcomments --level=5 -v 3
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 8\. Screenshot Of Sqlmap API |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch011.f08](i/ch011.f08.png) |'
  prefs: []
  type: TYPE_TB
- en: The temper script like base64 conversion is not to be detected by using Snort.
    The Sqlmap also contains functionality to escape IPS/WAF detection using tamper
    scripts. It only works when the syntax of the input is changed. In most cases
    (99/100) Snort was able to notice such evasion. This concluded that automation
    in network-based attack detection use large networks payloads and thousands of
    system is communicated in very few seconds. The implemented system is used to
    detect all types of SQL injection attacks.
  prefs: []
  type: TYPE_NORMAL
- en: CONCLUSION
  prefs: []
  type: TYPE_NORMAL
- en: The SQL injection is one of its kind of attacks where the adversary retrieves
    the personal information from the database. In the current scenario many blockchain-based
    companies facing the problem of cyber-attack based on SQL injection. To cope with
    this problem, here we present a chapter that provides a brief idea about the blockchain
    system and SQL injection. The whole chapter is divided into two parts (i) we started
    with a brief introduction about the blockchain system and how the data are stored
    in the public database, (ii) the second part describes the SQL attack performed
    by the adversary on the database. Here, we present the case study based on the
    automated detection of SQL injection attacks. For detection, we use the Snort
    and Moloch package. The system is implemented for large network traffic such as
    a blockchain system. The Sqlmap is used for the evaluation process and to find
    out the successful SQL injection. This system doesn’t use any new technology for
    analysis instead, it collects the information based on the timestamp and fingerprinting.
    It is a Signature-based system that has some limitations at the time of detection.
    The future scope of this work provides the solution using Splunk technology which
    provides a huge solution in the field of database threat.
  prefs: []
  type: TYPE_NORMAL
- en: REFERENCES
  prefs: []
  type: TYPE_NORMAL
- en: 'Chaddha, R., Kumar, A., Sinha, K., Paul, P., & Amritanjali. (2020). Selection
    on Various Traditional Image Encryption Techniques: A Study. Lecture Notes in
    Electrical Engineering, 219–228\. 10.1007/978-981-15-2854-5_20'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verma, N., Sharma, S., Sinha, K., Paul, P., & Amritanjali. (2020). Selection
    on Traditional Cryptographic Algorithm for Real-Time Video Transmission and Storage:
    A Study. Lecture Notes in Electrical Engineering, 229–238\. 10.1007/978-981-15-2854-5_21'
  prefs: []
  type: TYPE_NORMAL
- en: 'Al-Sayid, N. A., & Aldlaeen, D. (2013). Database security threats: A survey
    study. Proceeding of the 5^(th) International Conference on Computer Science and
    Information Technology. 10.1109/csit.2013.6588759'
  prefs: []
  type: TYPE_NORMAL
- en: 'Anita, N., & Vijayalakshmi, M. (2019). Blockchain Security Attack: A Brief
    Survey. Proceeding of the 10th International Conference on Computing, Communication
    and Networking Technologies (ICCCNT). 10.1109/icccnt45670.2019.8944615'
  prefs: []
  type: TYPE_NORMAL
- en: Axinte, S.-D. (2014). SQL Injection Testing in Web Applications Using SQLmap.
    International Journal of Information Security and Cybercrime , 3(2), 61–68.
  prefs: []
  type: TYPE_NORMAL
- en: Aziz Yousif Almuttalibi, R. (2019). Blockchain Hash Function for Secure Biometric
    System. Journal of Engineering and Applied Sciences (Asian Research Publishing
    Network) , 14(11), 3797–3805\. https://doi.org/10.36478/jeasci.2019.3797.3805
  prefs: []
  type: TYPE_NORMAL
- en: Bansal, M. K., & Sethumadhavan, M. (2020). DNS Security - Prevent DNS Cache
    Poisoning Attack using Blockchain. International Journal of Innovative Technology
    and Exploring Engineering, 9(4), 2151–2162\. 10.35940/ijitee.d1549.029420
  prefs: []
  type: TYPE_NORMAL
- en: Bayer, D., Haber, S., & Stornetta, W. S. (1993). Improving the Efficiency and
    Reliability of Digital Time-Stamping. Sequences , II, 329–334\. doi:10.1007/978-1-4613-9323-8_24
  prefs: []
  type: TYPE_NORMAL
- en: Bertino, E., Kamra, A., & Early, J. P. (2007). Profiling Database Application
    to Detect SQL Injection Attacks. Proceeding of the IEEE International Performance,
    Computing, and Communications Conference. 10.1109/pccc.2007.358926
  prefs: []
  type: TYPE_NORMAL
- en: 'Bigchain, D. B., & Gmb, H. (2018). Bigchaindb 2.0: The blockchain database.
    White paper. https://www.bigchaindb.com/whitepaper/bigchaindb-whitepaper.pdf'
  prefs: []
  type: TYPE_NORMAL
- en: Brown, M., Peköz, E., & Ross, S. (2020). Blockchain Double-Spend Attack Duration.
    Probability in the Engineering and Informational Sciences, 1–9\. 10.1017/s0269964820000212
  prefs: []
  type: TYPE_NORMAL
- en: Chaindb. (2018). A peer-to-peer database system. https://bitpay.com/chaindb.pdf
  prefs: []
  type: TYPE_NORMAL
- en: Clarke, J. (2009). Exploiting SQL Injection . SQL Injection Attacks and Defense.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cox, J. (2015). The History of SQL Injection, the Hack That Will Never Go Away.
    Available: https://www.vice.com/en_us/article/aekzez/the-history-of-sql-injection-the-hack-that-will-never-go-away'
  prefs: []
  type: TYPE_NORMAL
- en: 'Dubey, R., & Gupta, H. (2016). SQL filtering: An effective technique to prevent
    SQL injection attack. Proceeding of the 5^(th) International Conference on Reliability,
    Infocom Technologies and Optimization (Trends and Future Directions) (ICRITO).
    10.1109/icrito.2016.7784972'
  prefs: []
  type: TYPE_NORMAL
- en: Frost, V. S., & Melamed, B. (1994). Simulating Telecommunications Networks with
    Traffic Modeling. IEEE Communications Magazine , 32(3), 70–70.
  prefs: []
  type: TYPE_NORMAL
- en: Ghorbanzadeh, P., Shaddeli, A., Malekzadeh, R., & Jahanbakhsh, Z. (2010). A
    survey of mobile database security threats and solutions for it. Proceeding of
    the 3^(rd) International Conference on Information Sciences and Interaction Sciences.
    10.1109/icicis.2010.5534685
  prefs: []
  type: TYPE_NORMAL
- en: 'Gochhayat, S. P., Bandara, E., Shetty, S., & Foytik, P. (2019). Yugala: Blockchain
    Based Encrypted Cloud Storage for IoT Data. Proceeding of the IEEE International
    Conference on Blockchain (Blockchain). 10.1109/blockchain.2019.00073'
  prefs: []
  type: TYPE_NORMAL
- en: Gudipati, V. K., Venna, T., Subburaj, S., & Abuzaghleh, O. (2016). Advanced
    automated SQL injection attacks and defensive mechanisms. Proceeding of the Annual
    Connecticut Conference on Industrial Electronics, Technology & Automation (CT-IETA).
    10.1109/ct-ieta.2016.7868248
  prefs: []
  type: TYPE_NORMAL
- en: Haber, S., & Stornetta, W. S. (1991). How to time-stamp a digital document.
    Journal of Cryptology , 3(2), 99–111\. doi:10.1007/BF00196791
  prefs: []
  type: TYPE_NORMAL
- en: Handschuh, H. (2005). SHA Family (Secure Hash Algorithm). SpringerReference,
    565–567\. https://doi.org/10.1007/springerreference_491
  prefs: []
  type: TYPE_NORMAL
- en: Holbrook, J. (2020). Blockchain Security and Threat Landscape. Architecting
    Enterprise Blockchain Solutions, 323–347\. 10.1002/9781119557722.ch11
  prefs: []
  type: TYPE_NORMAL
- en: Jung, W., & Park, S. (2017). Preventing DDoS Attack in Blockchain System Using
    Dynamic Transaction Limit Volume. International Journal of Control and Automation
    , 10(12), 131–138\. https://doi.org/10.14257/ijca.2017.10.12.12
  prefs: []
  type: TYPE_NORMAL
- en: Kamtuo, K., & Soomlek, C. (2016). Machine Learning for SQL injection prevention
    on server-side scripting. Proceeding of the International Computer Science and
    Engineering Conference (ICSEC). 10.1109/icsec.2016.7859950
  prefs: []
  type: TYPE_NORMAL
- en: Karuparthi, R. P., & Zhou, B. (2016). Enhanced Approach to Detection of SQL
    Injection Attack. Proceeding of the 15^(th) IEEE International Conference on Machine
    Learning and Applications (ICMLA). 10.1109/icmla.2016.0082
  prefs: []
  type: TYPE_NORMAL
- en: Koçak, S. (2017). A second pre-image attack and a collision attack to cryptographic
    hash function lux. Communications Faculty of Science University of Ankara Series
    A1Mathematics and Statistics, 66(1), 254–266\. 10.1501/commua1_0000000794
  prefs: []
  type: TYPE_NORMAL
- en: Kumar, P., & Pateriya, R. K. (2012). A survey on SQL injection attacks, detection
    and prevention techniques. Proceeding of the Third International Conference on
    Computing, Communication and Networking Technologies. 10.1109/icccnt.2012.6396096
  prefs: []
  type: TYPE_NORMAL
- en: 'Kwon. (2014). Tendermint: Consensus without mining. Draft v. 0.6, fall.'
  prefs: []
  type: TYPE_NORMAL
- en: Lai, W.-J., Hsueh, C.-W., & Wu, J.-L. (2019). A Fully Decentralized Time-Lock
    Encryption System on Blockchain. Proceeding of the IEEE International Conference
    on Blockchain (Blockchain). 10.1109/blockchain.2019.00047
  prefs: []
  type: TYPE_NORMAL
- en: Ledger, D. B. (2018). Github repo. https://github.com/ledgerdb/ledgerdb
  prefs: []
  type: TYPE_NORMAL
- en: Meyer, H. (1996). A computer emergency response team policy. Computers & Security
    , 15(4), 320.
  prefs: []
  type: TYPE_NORMAL
- en: Mongo, D. B. (2018). Opensource Document Database. https://www.mongodb.com/
  prefs: []
  type: TYPE_NORMAL
- en: Mouton, F., Malan, M. M., Leenen, L., & Venter, H. S. (2014). Social engineering
    attack framework. Information Security for South Africa. 10.1109/issa.2014.6950510
  prefs: []
  type: TYPE_NORMAL
- en: Nikolaidis, I., & Akyildiz, I. F. (1992). Source characterization and statistical
    multiplexing in ATM networks . College of Computing, Georgia Institute of Technology.
  prefs: []
  type: TYPE_NORMAL
- en: Ntagwabira, L., & Kang, S. L. (2010). Use of Query tokenization to detect and
    prevent SQL injection attacks. Proceeding of the 3^(rd) International Conference
    on Computer Science and Information Technology. 10.1109/iccsit.2010.5565202
  prefs: []
  type: TYPE_NORMAL
- en: 'Orman, H. (2018). Blockchain: The Emperors New PKI? IEEE Internet Computing
    , 22(2), 23–28\. https://doi.org/10.1109/mic.2018.022021659'
  prefs: []
  type: TYPE_NORMAL
- en: 'Passeri, P. (2017). 2017 Cyber Attacks Statistics. Available: https://www.hackmageddon.com/2018/01/17/2017-cyber-attacks-statistics/'
  prefs: []
  type: TYPE_NORMAL
- en: Pollack, E. (2018). Protecting Against SQL Injection . Dynamic SQL.
  prefs: []
  type: TYPE_NORMAL
- en: Priya, A., & Sahana, S. K. (2020). A Deterministic Flowshop Scheduling Problem
    to minimizing the Makespan using PA-ACO. International Journal of Engineering
    and Advanced Technology, 9(3), 1555–1560\. 10.35940/ijeat.b4573.029320
  prefs: []
  type: TYPE_NORMAL
- en: 'PriyaA.SinhaK.DarshaniM. P.SahanaS. K. (2018). A Novel Multimedia Encryption
    and Decryption Technique Using Binary Tree Traversal. Proceeding of the Second
    International Conference on Microelectronics, Computing & Communication Systems
    (MCCS 2017), 163–178\. DOI: 10.1007/978-981-10-8234-4_15'
  prefs: []
  type: TYPE_NORMAL
- en: Rikken, O., Janssen, M., & Kwee, Z. (2019). Governance challenges of blockchain
    and decentralized autonomous organizations. Information Polity, 24(4), 397–417\.
    10.3233/ip-190154
  prefs: []
  type: TYPE_NORMAL
- en: 'Roesch, M. (1999). Snort: Lightweight Intrusion Detection for Networks. LISA.
    In Proceedings of the 13^(th) USENIX conference on System administration (LISA
    ’99). USENIX Association.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Saad, M., Spaulding, J., Njilla, L., Kamhoua, C., Shetty, S., Nyang, D. H.,
    & Mohaisen, D. (2020). Exploring the Attack Surface of Blockchain: A Comprehensive
    Survey. IEEE Communications Surveys & Tutorials, 1–1\. 10.1109/comst.2020.2975999'
  prefs: []
  type: TYPE_NORMAL
- en: Sadeghian, A., Zamani, M., & Manaf, A. A. (2013). A Taxonomy of SQL Injection
    Detection and Prevention Techniques. Proceeding of the International Conference
    on Informatics and Creative Multimedia. 10.1109/icicm.2013.18
  prefs: []
  type: TYPE_NORMAL
- en: 'Sahana, S. K., Khowas, M., & Sinha, K. (2018). Budget Optimization and Allocation:
    An Evolutionary Computing Based Model. Bentham Science. 10.2174/97816810870781180101'
  prefs: []
  type: TYPE_NORMAL
- en: Sallam, A., Xiao, Q., Bertino, E., & Fadolalkarim, D. (2016). Anomaly Detection
    Techniques for Database Protection Against Insider Threats (Invited Paper). Proceeding
    of the 17^(th) International Conference on Information Reuse and Integration (IRI).
    10.1109/iri.2016.12
  prefs: []
  type: TYPE_NORMAL
- en: Shastri, A. A., & Chatur, P. N. (2015). Efficient and effective security model
    for database specially designed to avoid internal threats. Proceeding of the International
    Conference on Smart Technologies and Management for Computing, Communication,
    Controls, Energy and Materials (ICSTM). 10.1109/icstm.2015.7225407
  prefs: []
  type: TYPE_NORMAL
- en: 'SinghN.DayalM.RawR. S.KumarS. (2016). SQL injection: Types, methodology, attack
    queries and prevention. In Proceeding of the 3^(rd) International Conference on
    Computing for Sustainable Global Development (INDIACom), (pp. 2872-2876). IEEE.'
  prefs: []
  type: TYPE_NORMAL
- en: Singh, R., Tanwar, S., & Sharma, T. P. (2019). Utilization of blockchain for
    mitigating the distributed denial of service attacks. Security and Privacy, 3(3).
    10.1002/spy2.96
  prefs: []
  type: TYPE_NORMAL
- en: Sinha, K., Choudhary, S., Paul, S., & Paul, P. (2018). Security of Multimedia
    in Cloud using Secret Shared Key. Proceeding of the International Conference on
    Computing, Power and Communication Technologies (GUCON). 10.1109/gucon.2018.8675031
  prefs: []
  type: TYPE_NORMAL
- en: Sinha, K., Darshani, M. P., Kumari, S., & Paul, P. (2016). Voice Print based
    Speaker Identification and Verification for Forensic Application. Imperial Journal
    of Interdisciplinary Research, 3.
  prefs: []
  type: TYPE_NORMAL
- en: Sinha, K., & Paul, P. (2019). Voice Based authentication used in Forensic Lab.
    CSI Communications, 42(11), 26.
  prefs: []
  type: TYPE_NORMAL
- en: Sinha, K., & Paul, P. (2021a). Network Security Approaches in Distributed Environment.
    Research Anthology on Artificial Intelligence Applications in Security. doi:10.4018/978-1-7998-7705-9.ch061
  prefs: []
  type: TYPE_NORMAL
- en: Sinha, K., & Paul, P. (2021b). Network Security Approaches in Distributed Environment.
    Research Anthology on Blockchain Technology in Business, Healthcare, Education,
    and Government. doi:10.4018/978-1-7998-5351-0.ch078
  prefs: []
  type: TYPE_NORMAL
- en: Sinha, K., Priya, A., & Khowas, M. (2016). A Framework for Budget Allocation
    and Optimization Using Particle Swarm Optimization. Advances in Computational
    Intelligence, 149–158\. 10.1007/978-981-10-2525-9_15
  prefs: []
  type: TYPE_NORMAL
- en: 'Sinha, K., Priya, A., & Paul, P. (2020). K-RSA: Secure data storage technique
    for multimedia in cloud data server. Journal of Intelligent & Fuzzy Systems, 1–18\.
    10.3233/jifs-191687'
  prefs: []
  type: TYPE_NORMAL
- en: Sinha, K., Paul, P., & Amritanjali. (2019). Network Security Approaches in Distributed
    Environment. Advances in Computational Intelligence and Robotics, 174–209\. 10.4018/978-1-5225-7955-7.ch008
  prefs: []
  type: TYPE_NORMAL
- en: Tajpour, A., & Shooshtari, M. J. (2010). Evaluation of SQL Injection Detection
    and Prevention Techniques. Proceeding of the 2^(nd) International Conference on
    Computational Intelligence, Communication Systems and Networks. 10.1109/cicsyn.2010.55
  prefs: []
  type: TYPE_NORMAL
- en: Tanriverdi, M., & Tekerek, A. (2019). Implementation of Blockchain Based Distributed
    Web Attack Detection Application. Proceeding of the 1^(st) International Informatics
    and Software Engineering Conference (UBMYK). 10.1109/ubmyk48245.2019.8965446
  prefs: []
  type: TYPE_NORMAL
- en: Tendermint. (2018). https://tendermint.com/
  prefs: []
  type: TYPE_NORMAL
- en: Uramova, J., Segec, P., Moravcik, M., Papan, J., Mokos, T., & Brodec, M. (2017).
    Packet capture infrastructure based on Moloch. Proceeding of the 15th International
    Conference on Emerging eLearning Technologies and Applications (ICETA). 10.1109/iceta.2017.8102538
  prefs: []
  type: TYPE_NORMAL
- en: Wang, Y., & Li, G. (2019). Detect Triangle Attack on Blockchain by Trace Analysis.
    Proceeding of the 19^(th) International Conference on Software Quality, Reliability
    and Security Companion (QRS-C). 10.1109/qrs-c.2019.00066
  prefs: []
  type: TYPE_NORMAL
- en: Wei, K., Muthuprasanna, M., & Kothari, S. (2006). Preventing SQL injection attacks
    in stored procedures. Proceeding of the Australian Software Engineering Conference
    (ASWEC’06). 10.1109/aswec.2006.40
  prefs: []
  type: TYPE_NORMAL
- en: Zhou, Z., Chen, Z., Zhou, T., & Guan, X. (2010). The study on network intrusion
    detection system of Snort. Proceeding of the International Conference on Networking
    and Digital Society. 10.1109/icnds.2010.5479341
  prefs: []
  type: TYPE_NORMAL
- en: KEY TERMS AND DEFINITIONS
  prefs: []
  type: TYPE_NORMAL
- en: 'Blockchain: It is created by a data block that is connected like a chain, where
    the data in the chain is consists of a list of records that are inter-linked by
    using a cryptography algorithm.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Data Security: Protection of digital content in online/offline mode by any
    kind of attack which is performed by the adversary.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Domain Name System (DNS): It is a collection of computers in the form of hierarchical
    or decentralized, where the resources are connected with the Internet or a private
    network.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hash Functions: In this, the arbitrary size of data is mapped with fixed-size
    values, where the hash table is used for storage and retrieval.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Intrusion Detection System (IDS): It is a software application to monitor unwanted
    and malicious activity on the network.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Public-Key Cryptography: In this, the sender and receiver use a different key
    for encryption and decryption.'
  prefs: []
  type: TYPE_NORMAL
- en: 'SQL Injection: It is a kind of attack which is performed by the adversary by
    inserting the SQL query in the input data section of the client application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Structure Query Language (SQL): It is a domain-specific language that is used
    for managing the data relational database management system.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Symmetric Key Cryptography: In this, the sender and receiver use a single key
    for encryption and decryption.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Timestamp: It is used to create the time for each data that is stored in the
    database.'
  prefs: []
  type: TYPE_NORMAL
- en: 'User Interface: It is web-based user interfaces, where applications accept
    the data at runtime environment.'
  prefs: []
  type: TYPE_NORMAL
