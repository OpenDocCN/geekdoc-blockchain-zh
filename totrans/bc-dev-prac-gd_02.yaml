- en: © Elad Elrom 2019Elad ElromThe Blockchain Developer[https://doi.org/10.1007/978-1-4842-4847-8_2](https://doi.org/10.1007/978-1-4842-4847-8_2)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © Elad Elrom 2019 Elad Elrom 区块链开发者[https://doi.org/10.1007/978-1-4842-4847-8_2](https://doi.org/10.1007/978-1-4842-4847-8_2)
- en: 2. Blockchain Nodes
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2. 区块链节点
- en: Elad Elrom^([1](#Aff2) )(1)New York, NY, USA
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Elad Elrom^([1](#Aff2) )（1）纽约，纽约，美国
- en: In the previous chapter, I covered basic concepts related to blockchain and
    the pieces that make up an individual blockchain. I covered how blockchain technology
    solved the double spending problem by utilizing a P2P network, which led to the
    creation of a global distributed shared ledger and digital cash. The blockchain
    P2P network is stitched together by connecting multiple nodes, and in this chapter,
    you will be taking a closer look at the nodes that make up the network.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我介绍了与区块链相关的基本概念和构成单个区块链的各个部分。我介绍了区块链技术如何通过利用P2P网络来解决双重支付问题，从而创建了一个全球分布式共享账本和数字货币。区块链P2P网络通过连接多个节点而成，在本章中，你将深入了解构成网络的节点。
- en: The nodes or peers are machines that maintain the transactions and records on
    the blockchain network. Each cryptocurrency has its own blockchain and nodes;
    however, I will cover how to install three different blockchains that utilize
    different consensus mechanisms.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 节点或对等体是维护区块链网络上交易和记录的机器。每种加密货币都有自己的区块链和节点；然而，我将介绍如何安装三种使用不同共识机制的区块链。
- en: In addition, I will cover how to interact with a node. I will be using the bitcoin
    core API as an example so you will have a better understanding of the ledger,
    blocks, transactions, and wallets. These concepts will continue to lay out the
    foundations and basic concepts that are needed in the next chapters.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我还将介绍如何与节点进行交互。我将使用比特币核心API作为例子，以便你更好地理解账本、区块、交易和钱包。这些概念将继续为接下来的章节打下基础和基本概念。
- en: Running a Blockchain Node
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行区块链节点
- en: 'As we mentioned, the blockchain P2P network consists of peers that store a
    full copy of all the blocks in the network, which is the shared ledger. Each blockchain
    validates blocks via a specific consensus mechanism and is able to reject blocks
    that do not conform with the set of rules agreed on by the network. To be able
    to connect to blocks and execute commands, you need to have a peer connected to
    the blockchain. In this chapter, you will be setting up a full node and will learn
    how to get rewarded for helping the network; therefore, you will fully understand
    how the nodes on different networks operate. You will be creating nodes for the
    following: bitcoin, NEO, and EOS. Because blockchain technologies operate on different
    consensus mechanisms, they also have different names for the node capable of managing
    the blockchain.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们提到的，区块链P2P网络由存储网络中所有块的完整副本的节点组成，这就是共享账本。每个区块链通过特定的共识机制验证块，并能够拒绝不符合网络达成一致的规则的块。为了能够连接到块并执行命令，你需要有一个与区块链连接的节点。在本章中，你将设置一个完整节点，并学习如何为帮助网络获得奖励；因此，你将完全理解不同网络上节点的运作方式。你将为以下区块链创建节点：比特币、NEO和EOS。由于区块链技术在不同的共识机制上运行，它们对于能够管理区块链的节点也有不同的名称。
- en: For bitcoin, a node that can create blocks is called a *miner* .
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于比特币来说，能够创建块的节点被称为*矿工*。
- en: For NEO, a node that has management rights is called a *bookkeeping*  *node*.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于NEO来说，拥有管理权的节点被称为*记账节点*。
- en: For EOS, a node running the underlying network layer and able to process all
    transactions is called a *block producer* .
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于EOS来说，运行底层网络层并能够处理所有交易的节点被称为*区块生产者*。
- en: The reason I selected these blockchains is so you can examine how different
    peers working on different networks with different consensus mechanism operate.
    Once you are able to work with different blockchains, you will start noticing
    a pattern and be well rounded in blockchain technology.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择这些区块链的原因是，你可以研究不同节点在不同网络上使用不同共识机制是如何运作的。一旦你能够处理不同的区块链，你将开始注意到一个模式，并在区块链技术方面变得全面。
- en: Create a Bitcoin Miner
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建比特币矿工
- en: In this section, you will turn your own computer into a bitcoin cryptominer  and
    start cryptomining. Before doing that, you need to understand that the hashing
    power of your computer is not going to generate enough hash power for the mining
    of bitcoin to be profitable. Nevertheless, it will allow you to fully understand
    the full cycle, and you may be able to find other coins where mining using your
    CPU/GPU is profitable such as ETN, BCN, XMR, and ETH. The process is similar in
    all PoW-based networks.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将把自己的电脑变成一个比特币矿工并开始挖矿。在这样做之前，您需要明白，您的电脑的哈希能力所产生的哈希功率不足以使比特币挖矿产生利润。尽管如此，它将使您全面了解整个流程，您可能还能找到其他使用CPU/GPU挖矿可以产生利润的硬币，如ETN、BCN、XMR和ETH。所有基于PoW的网络过程都相似。
- en: Today, for a miner to be profitable, it’s a matter of hash rate and power consumption,
    price of electricity, bitcoin puzzle difficulty rate, and maintenance costs as
    well as other factors.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，要使矿工产生利润，关键在于哈希率、功耗、电力价格、比特币谜题难度率以及维护成本等因素。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*Hash rate* is the number of calculations in a second that your computer can
    perform trying to solve the mathematical puzzle.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*哈希率*是您的计算机每秒可以执行的计算次数，试图解决数学难题。'
- en: In the early days of bitcoin, your desktop could use your central processing
    unit (CPU) or graphics processing unit (GPU) for processing bitcoin, and it would
    have been enough for bitcoin mining to be profitable. Your computer would have
    been able to support the bitcoin network; however, the competition has increased,
    and you now need a field programmable gate array (FPGA) or application-specific
    integrated circuit (ASIC)  miner to be profitable.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在比特币的早期阶段，您的桌面电脑可以使用中央处理单元（CPU）或图形处理单元（GPU）来处理比特币，这足以使比特币挖矿产生利润。您的电脑能够支持比特币网络；然而，竞争加剧，您现在需要一个现场可编程门阵列（FPGA）或应用特定集成电路（ASIC）矿工才能产生利润。
- en: What are ASIC and FPGA miners? An FPGA is an integrated circuit that is able
    to be configured after being built. The miners have better performance than CPUs
    and GPUs mining; they can hash 750 megahashes per second.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: ASIC和FPGA矿工是什么？ FPGA 是一种在构建后可以配置的集成电路。与CPU和GPU挖矿相比，矿工的性能更好；它们每秒可以哈希运算750兆次。
- en: ASICs  are computers that have an integrated circuit dedicated to performing
    the single task of mining instead of operating as a regular computer. There is
    nothing more on that computer; everything else was stripped out.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: ASIC 是一种计算机，其集成电路专门用于执行挖矿任务，而不是像普通计算机那样运行。该计算机上没有其他东西；其他所有东西都被去除了。
- en: This makes the computer much faster and more efficient in processing transactions,
    and it is able to hash more. At the time of writing, there are ASICs that can
    hash over 56 TH/sec, and they use less power than older generation ASCIs.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得计算机在处理交易时变得更快更有效率，并且能够进行更多的哈希运算。在撰写本文时，有ASIC芯片的哈希速度超过了56 TH/s，而且它们的功耗比上一代ASIC芯片要低。
- en: This type of mining equipment is not only unique to bitcoin; at the time of
    writing, there are ASIC miners for other cryptocurrency such as litecoin, zCash,
    ethereum, and others.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这种挖矿设备不仅限于比特币；在撰写本文时，还有针对其他加密货币（如莱特币、Zcash、以太坊等）的ASIC矿工。
- en: 'To get started, you first need mining software. There is a lot of mining software
    to choose from. For instance macOS users can, this one is free, open source, and
    easy to use: [http://downloads.fabulouspanda.co.uk/macminer/](http://downloads.fabulouspanda.co.uk/macminer/)
    .'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 开始之前，您首先需要挖矿软件。有很多挖矿软件供您选择。例如，macOS 用户可以选择这个免费、开源且易于使用的软件：[http://downloads.fabulouspanda.co.uk/macminer/](http://downloads.fabulouspanda.co.uk/macminer/)。
- en: 'Once you have downloaded the software, install it. Next, you need to join a
    mining pool. Here I’ll show how to connect to Antpool, the largest bitcoin pool;
    however, any pool would work. Sign up on Antpool here: [https://www.antpool.com](https://www.antpool.com)
    .'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦下载了软件，就要安装它。接下来，您需要加入一个挖矿池。在这里，我将介绍如何连接到Antpool，最大的比特币池；然而，任何池都可以使用。在Antpool上注册：
    [https://www.antpool.com](https://www.antpool.com)。
- en: Antpool calls a miner a *worker*. You can create a worker by clicking the Dashboard
    tab, then clicking the Worker link, and finally clicking Create Worker, as shown
    in Figure [2-1](#Fig1).![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig1_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig1_HTML.jpg)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Antpool 将矿工称为 *工人*。 您可以通过点击仪表板选项卡，然后点击矿工链接，最后点击创建工人，如图 [2-1](#Fig1) 所示！[../images/475651_1_En_2_Chapter/475651_1_En_2_Fig1_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig1_HTML.jpg)
- en: Figure 2-1
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-1
- en: Antpool dashboard page for creating a mining worker
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Antpool 创建矿工工人页面
- en: Now that you have your worker ready, you will set up your miner as a CPU miner
    utilizing your CPU, and for your GPU, you could set your miner to utilize your
    graphics card.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的工人已经准备好了，你将把你的矿工设置为利用 CPU 的 CPU 矿工，对于你的 GPU，你可以将你的矿工设置为利用你的显卡。
- en: Open the MacMiner software you downloaded and click File and then Preference
    option from the File drop menu. In the Preferences section, set the miner as a
    CPU and/or GPU miner, as shown in Figure [2-2](#Fig2).![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig2_HTML.png](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig2_HTML.png)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你下载的 MacMiner 软件，然后点击文件然后从文件下拉菜单中选择偏好选项。在偏好设置部分，将矿工设置为 CPU 和/或 GPU 矿工，如图 [2-2](#Fig2)
    所示。![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig2_HTML.png](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig2_HTML.png)
- en: Figure 2-2
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-2
- en: MacMiner preferences
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: MacMiner 偏好设置
- en: In the next step of the preferences, you set the pool URL and your username.
    Antpool is set up without a password, so it’s not needed, and the pool URL is
    listed on the Antpool site:startum+tcp://startum.antpool.com:3333See Figure [2-3](#Fig3).![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig3_HTML.png](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig3_HTML.png)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在偏好设置的下一步，你设置了池 URL 和你的用户名。Antpool 设置时没有密码，所以不需要，池 URL 列在 Antpool 网站上：startum+tcp://startum.antpool.com:3333。见图
    [2-3](#Fig3) 。![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig3_HTML.png](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig3_HTML.png)
- en: Figure 2-3
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-3
- en: MacMiner Preferences window for setting up a miner pool
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: MacMiner 设置矿工池窗口
- en: That’s it. Click the Start button to start mining and click Stop to stop mining,
    as shown in Figure [2-4](#Fig4).![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig4_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig4_HTML.jpg)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。点击开始按钮开始挖掘，点击停止按钮停止挖掘，如图 [2-4](#Fig4) 所示。![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig4_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig4_HTML.jpg)
- en: Figure 2-4
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-4
- en: MacMiner  starting a miner
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: MacMiner 启动矿工
- en: Six years ago, you would have been able to mine more than 100 BTC on your GPU.
    As you can see, my mining power on my 2018 MacBook resulted in 13.74 Mh (Mega
    hashes) of hashing power.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 六年前，你完全可以用你的 GPU 挖掘超过 100 个 BTC。正如你所见，我的 2018 年 MacBook 矿工算力只有 13.74 Mh（兆哈希）。
- en: There are many resources online to help you calculate mining profitability;
    try [http://www.bitcoinx.com/profit/](http://www.bitcoinx.com/profit/) . As expected
    and according to their calculation, it would not be profitable at the current
    conditions.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 网上有很多资源可以帮助你计算挖矿盈利能力；试试 [http://www.bitcoinx.com/profit/](http://www.bitcoinx.com/profit/)
    。如预期的那样，根据他们的计算，在当前条件下是没有盈利的。
- en: Create a NEO Bookkeeping Node
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 NEO 记账节点
- en: Previously I introduced NEO  as an example of a popular PoS blockchain.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 之前我介绍过 NEO 作为一种流行的 PoS 区块链的例子。
- en: In this section, you will be setting up a node (NEO calls these *bookkeeping
    nodes*) and getting the machine ready so it can be selected to help manage the
    network and receive a transaction reward.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将设置一个节点（NEO 称之为*记账节点*）并让机器准备好，以便被选中协助管理网络并获得交易奖励。
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: NEO does not call its managing node a miner. A miner can be an analogy for the
    hard work that nodes do to maintain a PoW-based blockchain. As NEO uses the PoS
    census algorithm and uses a technological democracy to selecting the managing
    nodes, there is no hashing power and no hard labor when using the PoW census algorithm.
    To better understand how Neo node works, it is recommended to read the NEO white
    paper at [https://github.com/neo-project/docs/blob/master/en-us/whitepaper.md](https://github.com/neo-project/docs/blob/master/en-us/whitepaper.md)
    .
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: NEO 不将其管理节点称为矿工。矿工可以是对节点为维护基于 PoW 的区块链所做的艰苦工作的一种比喻。由于 NEO 使用 PoS 普查算法并使用技术民主来选择管理节点，使用
    PoW 普查算法时没有算力，也没有艰苦的劳动。为了更好地了解 Neo 节点的工作原理，建议阅读 NEO 白皮书，地址为 [https://github.com/neo-project/docs/blob/master/en-us/whitepaper.md](https://github.com/neo-project/docs/blob/master/en-us/whitepaper.md)
    。
- en: The node validates the blockchain blocks and pays in a cryptocurrency coin called
    *gas*. To be selected, you need to set a full node on a capable machine. The minimum
    required machine is listed on the NEO project wiki at [https://github.com/neo-project/neo/wiki/Bookkeeping-Node-Deployment](https://github.com/neo-project/neo/wiki/Bookkeeping-Node-Deployment)
    .
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 节点验证区块链区块并支付一种名为 *gas* 的加密货币币。为了被选中，你需要在一台有能力的机器上设置一个完整节点。要求的最低机器配置列在 NEO 项目维基上，地址为
    [https://github.com/neo-project/neo/wiki/Bookkeeping-Node-Deployment](https://github.com/neo-project/neo/wiki/Bookkeeping-Node-Deployment)
    。
- en: Next, you need to obtain a consensus authority certificate and get staking gas
    to be nominated as a bookkeeping node.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要获得一个共识权威证书并获得质押气体以被提名为记账节点。
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You may need to be a Chinese citizen and set up a Chinese business to receive
    an identification certificate; see the NEO docs at [http://docs.neo.org/en-us/index.html](http://docs.neo.org/en-us/index.html)
    . You also need 1,000 staking gas to be nominated as a bookkeeping node.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要是中国公民并设立一家中国公司以获得身份证书；请参阅NEO文档：[http://docs.neo.org/en-us/index.html](http://docs.neo.org/en-us/index.html)
    。您还需要1000个质押气体以被提名为记账节点。
- en: 'To receive a fee from supporting the NEO network, you will need to create a
    full node by following these steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要从支持NEO网络中收到费用，您需要按照这些步骤创建一个完整节点：
- en: '1.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: Set up a full NEO node.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 设置一个完整的NEO节点。
- en: '2.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: Request a consensus authority certificate.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请求一个共识权威证书。
- en: '3.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: Stake 1,000 gas.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 锁定1000个气体。
- en: '4.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: Be elected by NEO holders.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 被NEO持有者选举。
- en: 'To set up a full NEO node, you also need to meet the system minimum requirement
    listed here: [https://github.com/neo-project/neo/wiki/Bookkeeping-Node-Deployment](https://github.com/neo-project/neo/wiki/Bookkeeping-Node-Deployment)
    .'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置一个完整的NEO节点，您还需要满足此处列出的系统最低要求：[https://github.com/neo-project/neo/wiki/Bookkeeping-Node-Deployment](https://github.com/neo-project/neo/wiki/Bookkeeping-Node-Deployment)
    。
- en: Setting Up a NEO Node on AWS Ubuntu
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在AWS上设置NEO Ubuntu节点
- en: As my computer does not meet the minimum requirement list, I will be utilizing
    AWS to set up a full node. However, if you have a machine that meets these requirements,
    feel free to skip using Amazon AWS or select another service provider to set your
    Node.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我的计算机不满足最低要求列表，我将使用AWS设置一个完整节点。但是，如果您有满足这些要求的计算机，可以自由选择使用亚马逊AWS或选择其他服务提供商来设置您的节点。
- en: 'For AWS, go to the following URL: [https://aws.amazon.com/free/](https://aws.amazon.com/free/)
    . Select “Create free account” and sign up.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于AWS，请访问以下网址：[https://aws.amazon.com/free/](https://aws.amazon.com/free/) 。选择“创建免费账户”并注册。
- en: Once you complete the sign-up process, select the free Basic Plan. Then sign
    into the console at [https://us-east-2.console.aws.amazon.com/console/home](https://us-east-2.console.aws.amazon.com/console/home)
    and select “Launch a virtual machine.”
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 完成注册过程后，选择免费的基础计划。然后登录到[https://us-east-2.console.aws.amazon.com/console/home](https://us-east-2.console.aws.amazon.com/console/home)控制台并选择“启动虚拟机。”
- en: 'In the first step, you can select the machine type. Select Ubuntu. “On the
    Step 1, wizard page: Choose an Amazon Machine Image (AMI)” ➤ Next, select: Ubuntu
    Server 16.04 LTS (HVM), SSD Volume Type ➤ Click the “select” button. See Figure
    [2-5](#Fig5).![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig5_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig5_HTML.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，您可以选择机器类型。选择Ubuntu。“在第一步向导页面：选择一个亚马逊机器镜像（AMI）” ➤ 下一步，选择：Ubuntu Server
    16.04 LTS（HVM），SSD卷类型 ➤ 点击“选择”按钮。见图[2-5](#Fig5)。![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig5_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig5_HTML.jpg)
- en: Figure 2-5
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-5
- en: AWS, selecting Ubuntu Server 16.04 LTS
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: AWS，选择Ubuntu Server 16.04 LTS
- en: On the next screen, select General purpose - t2.micro - free tier eligible check-box.
    See Figure [2-6](#Fig6).![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig6_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig6_HTML.jpg)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一页，选择通用目的 - t2.micro - 免费层可用的复选框。见图[2-6](#Fig6)。![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig6_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig6_HTML.jpg)
- en: Figure 2-6
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-6
- en: AWS, selecting t2.micro machine
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: AWS，选择t2.micro机器
- en: 'On the next screen, you will be prompted to create key pairs: Select “create
    a new key pair” ➤ next, select “key pair name” ➤ call the key “neo” ➤ then download
    the key: “download key pair” ➤ Lastly, select “Launch Instances.” See Figure [2-7](#Fig7).
    Make sure you download the key, as you won’t be able to connect via SSH to the
    box without the key.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一页，您将提示创建密钥对：选择“创建新的密钥对” ➤ 下一步，选择“密钥对名称” ➤ 给密钥命名为“neo” ➤ 然后下载密钥：“下载密钥对” ➤
    最后选择“启动实例。”见图[2-7](#Fig7)。确保您下载了密钥，因为没有密钥，您将无法连接到没有密钥的SSH盒子。
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Secure Shell (SSH) uses port 22 to connect your computer to another computer
    on the Internet.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 安全外壳（SSH）使用端口22将您的计算机连接到互联网上的另一台计算机。
- en: '![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig7_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig7_HTML.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig7_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig7_HTML.jpg)'
- en: Figure 2-7
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-7
- en: AWS key pairs
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: AWS密钥对
- en: 'Next, you will get a message, with a link: your instances are now launching.
    The following instance launches have been initiated: [instance id].'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将收到一条消息，带有一个链接：您的实例现在正在启动。已启动以下实例：[实例id]。
- en: Click the link and you will be able to view the instance, as shown in Figure
    [2-8](#Fig8).![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig8_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig8_HTML.jpg)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 点击链接后，您将能够查看实例，如图[2-8](#Fig8)所示。![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig8_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig8_HTML.jpg)
- en: Figure 2-8
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-8
- en: AWS, launching an instance
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: AWS，启动实例
- en: In the instance, you will find a link to the security settings. Scroll to the
    right of the screen, or go to the top-left navigation bar, and select Network
    & Security ➤ Security Groups. You will be able to change the security settings.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例中，您会找到一个安全设置的链接。将屏幕向右滚动，或者前往顶部左侧导航栏，选择网络与安全➤安全组。您将能够更改安全设置。
- en: For HTTP and SSH, you want to open the port to the world (0.0.0.0/0), but SSH
    limits you to your own computer, called My IP. See Figure [2-9](#Fig9).![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig9_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig9_HTML.jpg)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于HTTP和SSH，您需要向世界开放端口（0.0.0.0/0），但SSH将限制您只能连接到自己的计算机，称为我的IP。参见图[2-9](#Fig9)。![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig9_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig9_HTML.jpg)
- en: Figure 2-9
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-9
- en: AWS inbound security rules
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: AWS入站安全规则
- en: Next, you can create an SSH shortcut to access the server via one command, as
    shown here:> mkdir ~/.ssh> vim ~/.ssh/configPaste the following into the config
    file:Host NEOHostName [ip address]User ubuntuIdentityFile /[location of key]/neo.pemConfigure
    these settings with the IP address of the machine and with the location of your
    key. Next set the permissions for the key.> chmod 400 /[location of key]/neo.pemNow,
    you can access your machine with one command, as shown in Figure [2-10](#Fig10).>
    ssh NEO![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig10_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig10_HTML.jpg)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您可以创建一个SSH快捷方式，通过一个命令访问服务器，如下所示：> mkdir ~/.ssh> vim ~/.ssh/config将以下内容粘贴到配置文件中：Host
    NEOHostName [ip address]User ubuntuIdentityFile /[location of key]/neo.pem将这些设置与机器的IP地址和您的密钥位置配置好。接下来设置密钥的权限。>
    chmod 400 /[location of key]/neo.pem现在，您可以使用一个命令访问您的机器，如图[2-10](#Fig10)所示。> ssh
    NEO![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig10_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig10_HTML.jpg)
- en: Figure 2-10
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-10
- en: Connecting to an AWS machine via SSH
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过SSH连接到AWS机器
- en: If you run into any problems connecting to the machine, use the AWS Troubleshooting
    page, which you can find at [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html#TroubleshootingInstancesConnectingMindTerm](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html%2523TroubleshootingInstancesConnectingMindTerm)
    .
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在连接机器时遇到任何问题，请使用AWS故障排除页面，您可以在[https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html#TroubleshootingInstancesConnectingMindTerm](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html%2523TroubleshootingInstancesConnectingMindTerm)找到。
- en: Installing Bookkeeping-Node-Deployment on Ubuntu 16.04
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在Ubuntu 16.04上安装Bookkeeping-Node-Deployment
- en: Now that you have a machine to fit the minimum needs of a full node, you can
    install the software needed. Start by installing dependencies, as shown here:>
    sudo sh -c 'echo "deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/
    trusty main" > /etc/apt/sources.list.d/dotnetdev.list'> sudo apt-key adv --keyserver
    apt-mo.trafficmanager.net --recv-keys 417A0893> sudo apt-get update> sudo apt-get
    install dotnet-dev-1.0.4It appears that the current installation instructions
    in the NEO docs produce errors during installation, as shown here:Depends:dotnet-sharedframework-microsoft.netcore.app-1.0.4,
    dotnet-sharedframework-microsoft.netcore.app-1.1.1The workaround is to install
    a different dotnet core environment sources list and update; then you will be
    able to install the dotnet-dev-1.0.4 core environment.> sudo sh -c 'echo "deb
    [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ xenial main"
    > /etc/apt/sources.list.d/dotnetdev.list'> sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80
    --recv-keys 417A0893> sudo apt-get updateRemember to change the sources list back
    to the following:> sudo sh -c 'echo "deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/
    trusty main" > /etc/apt/sources.list.d/dotnetdev.list'Now that the dotnet core
    environment is installed, check whether the dotnet core environment is successfully
    installed with the following command:> mkdir hwapp> cd hwapp> dotnet new xunit
    --framework netcoreapp1.1> dotnet restore hwapp.csproj> dotnet run> cd ..> rm
    -rf hwapp/
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经有一台满足完整节点最小需求的机器，你可以安装所需的软件。首先安装依赖项，如下所示：`sudo sh -c 'echo "deb [arch=amd64]
    https://apt-mo.trafficmanager.net/repos/dotnet-release/ trusty main" > /etc/apt/sources.list.d/dotnetdev.list'`
    `sudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893`
    `sudo apt-get update` `sudo apt-get install dotnet-dev-1.0.4`看起来NEO文档中的当前安装说明在安装过程中会产生错误，如下所示：Depends:dotnet-sharedframework-microsoft.netcore.app-1.0.4,
    dotnet-sharedframework-microsoft.netcore.app-1.1.1解决方法是安装一个不同的dotnet core环境源列表并更新，然后你将能够安装dotnet-dev-1.0.4核心环境。`sudo
    sh -c 'echo "deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/
    xenial main" > /etc/apt/sources.list.d/dotnetdev.list'` `sudo apt-key adv --keyserver
    hkp://keyserver.ubuntu.com:80 --recv-keys 417A0893` `sudo apt-get update`记得将源列表改回以下内容：`sudo
    sh -c 'echo "deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/
    trusty main" > /etc/apt/sources.list.d/dotnetdev.list'`现在dotnet core环境已经安装，使用以下命令检查dotnet
    core环境是否成功安装：`mkdir hwapp` `cd hwapp` `dotnet new xunit --framework netcoreapp1.1`
    `dotnet restore hwapp.csproj` `dotnet run` `cd ..` `rm -rf hwapp/`
- en: Bookkeeping Node Deployment
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 记账节点部署
- en: Now that you have the dotnet core environment installed, you can install additional
    dependencies and check out the NEO project.> sudo apt-get install libleveldb-dev
    sqlite3 libsqlite3-dev libunwind8-dev> git clone https://github.com/neo-project/neo-cli>
    git branch -a> git checkout v3.0> git checkout head
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经安装了dotnet core环境，你可以安装额外的依赖项并检出NEO项目。`sudo apt-get install libleveldb-dev
    sqlite3 libsqlite3-dev libunwind8-dev` `git clone https://github.com/neo-project/neo-cli`
    `git branch -a` `git checkout v3.0` `git checkout head`
- en: 'To run the NEO node, you will need version 1.1.2 of .NET Core. Download the
    SDK binary; for Ubuntu 16.4, the commands are listed here: [https://www.microsoft.com/net/download/linux-package-manager/ubuntu16-04/sdk-2.1.300](https://www.microsoft.com/net/download/linux-package-manager/ubuntu16-04/sdk-2.1.300)
    .'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行NEO节点，你需要.NET Core的1.1.2版本。下载SDK二进制文件；对于Ubuntu 16.4，命令如下：[https://www.microsoft.com/net/download/linux-package-manager/ubuntu16-04/sdk-2.1.300](https://www.microsoft.com/net/download/linux-package-manager/ubuntu16-04/sdk-2.1.300)。
- en: 'Next, run the dpkg package manager to install the package:> wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb>
    sudo dpkg -i packages-microsoft-prod.debNow you can restore the NEO build and
    compile, as shown here:> dotnet restore> dotnet publish -c ReleaseOnce you compile
    the code, you get the location of the DLLs.neo-cli -> /home/ubuntu/neo-cli/neo-cli/bin/Release/netcoreapp2.0/neo-cli.dll
    .neo-cli -> /home/ubuntu/neo-cli/neo-cli/bin/Release/netcoreapp2.0/publish/Run
    the full node:> dotnet /home/ubuntu/neo-cli/neo-cli/bin/Release/netcoreapp2.0/neo-cli.dll
    .This command opens a terminal command call “neo” with the version.NEO-CLI Version:
    3.0.0.0In the neo terminal, you can query the version to ensure it’s working correctly.neo>
    show stateYou can also create a wallet.neo> create wallet wallet.db3This command
    will request a password.password: [select a password]password: [select a passwrod]Then
    it generates a public key and address for your wallet.address: AXZmWZckF55xb1p566No2qh19uj8vt5d2R pubkey:
    03b80edc66c9324077c8c1c4bbad1e1ace7e1b7e8ac63945a3b5bb9f642f4520f1'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，运行dpkg包管理器来安装包：> wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb>
    sudo dpkg -i packages-microsoft-prod.deb现在您可以恢复NEO构建和编译，如下所示：> dotnet restore>
    dotnet publish -c Release一旦编译代码，您就会得到DLL的位置。.neo-cli -> /home/ubuntu/neo-cli/neo-cli/bin/Release/netcoreapp2.0/neo-cli.dll。.neo-cli
    -> /home/ubuntu/neo-cli/neo-cli/bin/Release/netcoreapp2.0/publish/运行完整节点：> dotnet
    /home/ubuntu/neo-cli/neo-cli/bin/Release/netcoreapp2.0/neo-cli.dll。此命令会打开一个名为“neo”的终端命令行。NEO-CLI
    Version: 3.0.0.0在neo终端中，您可以查询版本以确认它是否正常工作。neo> show state您还可以创建一个钱包。neo> create
    wallet wallet.db3此命令将要求您输入密码。password: [选择一个密码]password: [选择一个密码]然后它为您钱包生成了公钥和地址。address:
    AXZmWZckF55xb1p566No2qh19uj8vt5d2R pubkey: 03b80edc66c9324077c8c1c4bbad1e1ace7e1b7e8ac63945a3b5bb9f642f4520f1'
- en: 'You now have a NEO node on an AWS machine, and you are able to interact with
    the NEO command-line interface (CLI). In the next chapters, you will be interacting
    with the CLI. Feel free to get a head start and review the documentation for smart
    contracts and dapp development at the NEO site here: [http://docs.neo.org/en-us/node/cli.html](http://docs.neo.org/en-us/node/cli.html)
    .'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在在AWS机器上有一个NEO节点，并且能够与NEO命令行界面（CLI）交互。在接下来的章节中，您将与之交互。您可以在这里提前学习并复习智能合约和去中心化应用（DApp）开发的NEO文档：[http://docs.neo.org/en-us/node/cli.html](http://docs.neo.org/en-us/node/cli.html)。
- en: Request Consensus Authority Certificate
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 请求共识权威证书
- en: 'Now that you have a working node on a qualified Ubuntu server, you can obtain
    a consensus authority certificate. The NEO white paper discusses the need to have
    an actual real identity:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如今您在合格的Ubuntu服务器上已经有了一个运行中的节点，您可以获取共识权威证书。NEO白皮书讨论了需要一个真实的实际身份：
- en: '*“DBFT combines digital identity technology, meaning the bookkeepers can be
    a real name of the individual or institution. Thus, it is possible to freeze,
    revoke, inherit, retrieve, and affect judicial decisions on them. This facilitates
    the registration of compliant financial assets in the NEO network. The NEO network
    plans to support such operations when necessary.”*'
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “DBFT结合了数字身份技术，意味着记账员可以是个人或机构的真实姓名。因此，冻结、吊销、继承、检索以及影响司法决定都是可能的。这有助于在NEO网络上注册合规的金融资产。NEO网络计划在必要时支持此类操作。”
- en: 'You can obtain CA certificates from OnChain/Neo directly. Additionally, you
    can find more information on the NEO forums: [https://www.reddit.com/r/NEO/](https://www.reddit.com/r/NEO/)
    . This process is beyond the scope of this book, but it’s needed in order to be
    selected as a node.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接从OnChain/Neo获取CA证书。此外，您还可以在NEO论坛上找到更多信息：[https://www.reddit.com/r/NEO/](https://www.reddit.com/r/NEO/)。这个过程超出了本书的范围，但为了被选为节点，它是必需的。
- en: Getting Gas
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 加油
- en: To be selected as a node, you also need 1,000 gas to stake in order to become
    a bookkeeper. The easiest way to purchase gas is on exchanges. The other option
    is to hold NEO, and you will get 0.33 gas per 1,000\. See Figure [2-11](#Fig11)
    shows a button to claim gas coins once you hold NEO coins.![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig11_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig11_HTML.jpg)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了被选为节点，您还需要质押1000个燃料来成为记账员。购买燃料的最简单方法是交易所。另一种选择是持有NEO，您将获得0.33个燃料/1000。见图[2-11](#Fig11)展示了持有NEO硬币时领取燃料硬币的按钮。![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig11_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig11_HTML.jpg)
- en: Figure 2-11
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-11
- en: Neotracker.io provides a Claim Gas option
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Neotracker.io提供了一个领取燃料（Gas）的选项
- en: A simple calculation of prices of NEO and gas at the time of writing shows it’s
    a large investment.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 简单计算在撰写本文时NEO和燃料的价格，显示这是一个巨大的投资。
- en: Elected as a Bookkeeper
  id: totrans-102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 当选记账节点
- en: 'NEO is an electronic democracy, and NEO holders can vote on who should be a
    bookkeeper. At the time of writing, the NEO team has not implemented the voting
    features; however, they are likely to be implemented in the near future as the
    GitHub wiki shows a payment structure with fees, including 10 gas for voting a
    bookkeeper: [https://github.com/neo-project/neo/wiki/Network-Protocol](https://github.com/neo-project/neo/wiki/Network-Protocol)
    .'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: NEO是一个电子民主，NEO持有者可以投票决定谁应该担任记账员。在撰写本文时，NEO团队尚未实现投票功能；然而，根据GitHub wiki显示的支付结构，包括为投票记账员支付10个气体费，这些功能很可能会在未来实现：[https://github.com/neo-project/neo/wiki/Network-Protocol](https://github.com/neo-project/neo/wiki/Network-Protocol)
    。
- en: For now, stop the EC2 node so you won’t be charged.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，停止EC2节点，这样你就不会被收费。
- en: To stop the instance, select EC2 Dashboard ➤ Running instances ➤ Actions ➤ Instance
    State ➤ Stop. See Figure [2-12](#Fig12).![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig12_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig12_HTML.jpg)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止实例，选择EC2仪表板 ➤运行中的实例 ➤操作 ➤实例状态 ➤停止。见图[2-12](#Fig12)。![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig12_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig12_HTML.jpg)
- en: Figure 2-12
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-12
- en: AWS, stop instance action
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: AWS，停止实例操作
- en: Tip
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Amazon can charge storage fees for the EBS volumes attached to a stopped instance.
    The cost is five cents per gigabyte. Amazon provides one year for free. To completely
    avoid being charged, you need to “terminate” the instance instead of just stopping
    it.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊可以为附加到已停止实例的EBS卷收取存储费用。费用为每千兆字节五美分。亚马逊提供一年免费。为了避免被收费，你需要“终止”实例，而不仅仅是停止它。
- en: 'You can make sure you are not charged at this URL: [https://console.aws.amazon.com/billing/home](https://console.aws.amazon.com/billing/home)
    .'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过这个网址确保你不会被收费：[https://console.aws.amazon.com/billing/home](https://console.aws.amazon.com/billing/home)
    。
- en: Create an EOS Block Producer
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个EOS区块生产者
- en: 'You will now learn how to run a full EOS  node on a dedicated server; you just
    need to make sure you meet the minimum hardware requirement. The requirements
    are listed here: [https://developers.eos.io/eosio-nodeos/docs/install-nodeos](https://developers.eos.io/eosio-nodeos/docs/install-nodeos)
    .'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在将学习如何在专用服务器上运行一个完整的EOS节点；你只需要确保满足最低硬件要求。要求如下：[https://developers.eos.io/eosio-nodeos/docs/install-nodeos](https://developers.eos.io/eosio-nodeos/docs/install-nodeos)
    。
- en: 'At the time of writing, the system requirements on all platforms are as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，所有平台上的系统要求如下：
- en: 7 GB RAM free required
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要7 GB RAM免费
- en: 20 GB of available storage
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20 GB的可用存储空间
- en: You will learn how to set up an Ubuntu server. I will be using AWS. In AWS,
    select Ubuntu Server 16.04 LTS (HVM), SSD Volume Type ➤ Choose an Instance Type
    ➤ General purpose ➤ t2.large. This type of machine has 8 GB RAM free.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学习如何设置一个Ubuntu服务器。我将使用AWS。在AWS中，选择Ubuntu Server 16.04 LTS (HVM)，SSD Volume
    Type ➤选择实例类型 ➤通用 ➤ t2.large。这种机器有8 GB RAM免费。
- en: 'An EOS node needs at least 20 GB of a storage space, so you’ll set this machine
    to 25 GB to be safe. To do that, select Configure Instance Detail. Next select:
    add storage. In the next window select: Size (GiB) 25 GB. The next wizard window
    you will be able to: Review and Launch. Launch the instance.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一个EOS节点至少需要20 GB的存储空间，所以你会将这个机器设置为25 GB以确保安全。为此，选择配置实例详细信息。接下来选择：添加存储。在下一个窗口中选择：大小（GiB）25
    GB。在下一个向导窗口中，你可以：查看并启动。启动实例。
- en: 'For security, set the same settings as you did for the NEO full-node server:
    select an existing security group. Next, select: launch-wizard-1 that includes
    port 22 for SSH and public HTTP/HTTPS. Now we can: Review and Launch in the next
    window and lastly, Launch.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安全起见，设置与NEO完整节点服务器相同的设置：选择一个现有的安全组。接下来，选择：启动向导-1，包括SSH的端口22和公共HTTP/HTTPS。现在我们可以：在下一个窗口中查看并启动，最后，启动。
- en: 'In the key pairs, use the same key you created for NEO or create a new key.
    To select the same key, select Choose an existing key pair. We will call the key:
    EOS.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在密钥对中，使用为NEO创建的同一个密钥，或者创建一个新的密钥。要选择同一个密钥，选择选择现有密钥对。我们将这个密钥称为：EOS。
- en: That’s it. You can now update the SSH config file with the new server to be
    able to connect quickly.> vim ~/.ssh/configAnd paste the following:Host EOSHostName
    [ip address]User ubuntuIdentityFile /[location of key]/EOS.pemNow you can connect
    to the EOS server.> ssh EOS
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。现在，你可以更新SSH配置文件，以便能够快速连接新服务器。> vim ~/.ssh/config
- en: Installing an EOS Full Node
  id: totrans-121
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装EOS完整节点
- en: 'Now that you have the Ubuntu server configured with 8 GB of memory and a 25
    GB hard drive, you can clone the project and build.> git clone https://github.com/EOSIO/eos
    --recursive> cd eos> ./eosio_build.sh #takes about 30 mins to an hour.Once the
    build is completed, you will see the screen shown in Figure [2-13](#Fig13).![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig13_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig13_HTML.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '现在你已经将 Ubuntu 服务器配置好了 8 GB 的内存和 25 GB 的硬盘，你可以克隆项目并进行构建。> git clone https://github.com/EOSIO/eos
    --recursive> cd eos> ./eosio_build.sh #大约需要 30 分钟到 1 小时。构建完成后，你会看到图 2-13 所示的屏幕。![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig13_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig13_HTML.jpg)'
- en: Figure 2-13
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-13
- en: EOS full-node build, complete output
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: EOS 完整节点构建，完整输出
- en: 'Ensure that the daemon is working correctly by running the -h flag to get a
    list of commands.> cd build/programs/nodeos> ./nodeos -h #list of commandsNow
    you can run the EOS node daemon; Figure [2-14](#Fig14) shows the output.> ./nodeos
    -e -p eosio --plugin eosio::chain_api_plugin --plugin eosio::history_api_plugin![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig14_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig14_HTML.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '确保守护进程正确运行，通过运行 -h 标志获取命令列表。> cd build/programs/nodeos> ./nodeos -h #命令列表现在你可以运行
    EOS 节点守护进程；图 2-14 显示了输出。> ./nodeos -e -p eosio --plugin eosio::chain_api_plugin
    --plugin eosio::history_api_plugin![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig14_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig14_HTML.jpg)'
- en: Figure 2-14
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-14
- en: EOS full node running
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 EOS 完整节点
- en: EOS provides a portal at [https://developers.eos.io/](https://developers.eos.io/)
    to get started with nodes, dapps, smart contract, tokens, and much more. In the
    next chapters, you will be interacting more with the EOS platform.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: EOS 在 [https://developers.eos.io/](https://developers.eos.io/) 提供了一个门户，开始了解节点、dapps、智能合约、代币等。在接下来的章节中，你将更多地与
    EOS 平台互动。
- en: Marketing and Listing
  id: totrans-129
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 营销和上市
- en: 'Now that you have an EOS node running, you need to create a marketing campaign
    to be elected. You can set the submission profile to be similar to this URL: [https://github.com/consenlabs/eos-bp-profile](https://github.com/consenlabs/eos-bp-profile)
    .'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经运行了一个 EOS 节点，你需要创建一个营销活动以便被选举。你可以将提交配置设置为类似于这个网址： [https://github.com/consenlabs/eos-bp-profile](https://github.com/consenlabs/eos-bp-profile)
    。
- en: 'Next, you are ready to receive votes. You can get voting through the imToken
    2.0 app (iPhone or Android). It offers block producers voting; follow this guide
    for instructions: [https://medium.com/imtoken/guide-imtoken-2-0-block-producers-voting-141983f9a76e](https://medium.com/imtoken/guide-imtoken-2-0-block-producers-voting-141983f9a76e)
    .'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你准备接收投票。你可以通过 imToken 2.0 应用程序（iPhone 或 Android）接收投票。它提供区块生产者投票；按照这个指南进行操作：
    [https://medium.com/imtoken/guide-imtoken-2-0-block-producers-voting-141983f9a76e](https://medium.com/imtoken/guide-imtoken-2-0-block-producers-voting-141983f9a76e)
    。
- en: Terminating an EOS Node
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 终止 EOS 节点
- en: You want to ensure that you terminate the node so you won’t get charged, as
    this machine configuration is not part of the free tier server on Amazon. Just
    you did before, select EC2 Dashboard ➤ Running instances ➤ Actions ➤ Instance
    State ➤ Terminate.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要确保终止节点，这样你才不会被收费，因为这种机器配置不是亚马逊免费层服务器的一部分。就像之前一样，选择 EC2 仪表板 ➤ 运行实例 ➤ 操作 ➤
    实例状态 ➤ 终止。
- en: You’ll also want to terminate the 25 GB volume you created. Select Volume from
    the left navigation menu and then select Actions ➤ Detach Volume. Then select
    Delete Volume. See Figure [2-15](#Fig15).![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig15_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig15_HTML.jpg)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要终止你创建的 25 GB 卷。从左侧导航菜单中选择卷，然后选择 操作 ➤ 卸载卷。然后选择 删除卷。见图 2-15。![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig15_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig15_HTML.jpg)
- en: Figure 2-15
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-15
- en: Detaching a volume and deleting a volume
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 卸载卷和删除卷
- en: Bitcoin Core API
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比特币核心 API
- en: As a developer, you want to have deep understanding of how a technology works,
    so to better understand blockchain in general and the bitcoin blockchain specifically,
    you will be downloading and installing the bitcoin core code. The full node and
    the bitcoin miner you set up previously on bitcoin core can be compiled from source
    code, or you can use a precompiled executable.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名开发者，你希望深入了解一项技术是如何工作的，为了更好地理解区块链以及比特币区块链，你将下载并安装比特币核心代码。之前在比特币核心上设置的全节点和比特币矿工可以从源代码编译，或者你可以使用预编译的可执行文件。
- en: Previously you set up a bitcoin node capable of doing mining on your computer.
    To interact with the bitcoin core API, you need a full node. What is the difference
    between a full node and a miner then?
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 之前你在计算机上设置了一个能够进行挖矿的比特币节点。为了与比特币核心API进行交互，你需要一个完整节点。那么完整节点和矿工之间有什么区别呢？
- en: A full node is a complete copy of the blockchain that is able to verify all
    the transactions that ever occurred on the blockchain since the first block was
    created. This requires 180 GB at the time of writing. However, as you will see,
    you can set the full node not to download the entire ledger. A full node does
    not need to solve any mathematical problem, and hashing is not an issue.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 一个完整节点是区块链的完整副本，能够验证自第一个区块创建以来在区块链上发生的所有交易。这需要180 GB的存储空间。然而，正如你所看到的，你可以设置完整节点不下载整个账本。完整节点不需要解决任何数学问题，哈希也不是问题。
- en: A miner is a node in the network; however, as you have seen, its job is to generate
    blocks by working on transactions and coming up with the best block (or hash)
    to store the information. Miners compete and spend about 10 minutes coming up
    with a solution to the problem. Full nodes keep blocks forever in the database
    and are verified by other nodes. Miners, on the other hand, don’t need to know
    about previous blocks, just the block before, and they focus on hashing. However,
    a bitcoin miner does download the entire 180 GB blockchain ledger.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 矿工是网络中的一个节点；然而，正如你所看到的，它的任务是通过处理交易并找出最佳的区块（或哈希）来存储信息来生成区块。矿工们竞争并花费大约10分钟来解决问题。完整节点在数据库中永久保存区块，并与其他节点进行验证。另一方面，矿工不需要了解之前的区块，只需要了解之前的区块，并专注于哈希。然而，比特币矿工确实下载了整个180
    GB的区块链账本。
- en: In the following exercise, you will be installing and configuring a full node
    to be able to connect and interact with the bitcoin core API.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的练习中，你将安装和配置一个完整节点，以便能够连接并与比特币核心API进行交互。
- en: Installing and Configurating a Full Bitcoin Node
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装和配置比特币全节点
- en: '**Setting Up Your System**'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**设置您的系统**'
- en: 'In this exercise, you will set up your environment and then download, configure,
    and start a full working node of bitcoin. This will come in handy as you continue
    to examine how bitcoin and blockchain work. You will be using the bitcoin core
    source code. Bitcoin core code includes docs that give complete instructions for
    installing the code on different OSs. In this book, I am focusing on macOS, so
    I am providing instructions to expedite the installation process for your convenience;
    however, you can install bitcoin core on other platforms. Here is the link for
    the complete instructions for Mac and PC:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将设置你的环境，然后下载、配置并启动一个比特币的全功能节点。这将对你继续研究比特币和区块链的工作原理非常有帮助。你将使用比特币核心源代码。比特币核心代码包括文档，提供了在不同的操作系统上安装代码的完整说明。在这本书中，我重点介绍macOS，所以我会提供说明以加快安装过程；然而，你可以在其他平台上安装比特币核心。以下是针对Mac和PC的完整安装说明的链接：
- en: 'macOS install instructions: [https://github.com/bitcoin/bitcoin/blob/master/doc/build-osx.md](https://github.com/bitcoin/bitcoin/blob/master/doc/build-osx.md)'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS安装说明：[https://github.com/bitcoin/bitcoin/blob/master/doc/build-osx.md](https://github.com/bitcoin/bitcoin/blob/master/doc/build-osx.md)
- en: 'Windows: [https://github.com/bitcoin/bitcoin/blob/master/doc/build-windows.md](https://github.com/bitcoin/bitcoin/blob/master/doc/build-windows.md)'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows：[https://github.com/bitcoin/bitcoin/blob/master/doc/build-windows.md](https://github.com/bitcoin/bitcoin/blob/master/doc/build-windows.md)
- en: To get started, you need Xcode and the Xcode tools installed, so this would
    be a good time to install these tools if you don’t have them already. To check
    whether Xcode is installed on your computer, open a command-line terminal by clicking
    the Spotlight Search and type **Terminal**.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，你需要安装Xcode和Xcode工具，所以如果你还没有这些工具，现在是安装它们的好时机。要检查Xcode是否已安装在你的计算机上，请打开命令行终端，点击Spotlight搜索，并输入**Terminal**。
- en: At the command line, type the following command to check whether you have Xcode
    installed:> xcode-select –vIt should return xcode-select and the version number,
    as shown in Figure [2-16](#Fig16).![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig16_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig16_HTML.jpg)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行中，输入以下命令以检查你是否安装了Xcode：> xcode-select –v它应该返回xcode-select和版本号，如图[2-16](#Fig16)所示。![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig16_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig16_HTML.jpg)
- en: Figure 2-16
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-16
- en: Terminal xcode-select version
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Terminal xcode-select版本
- en: If you don’t have Xcode installed, you can download it from [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/)
    .
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有安装 Xcode，可以从 [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/)
    下载。
- en: '**Note** This installation can take hours, depending on your Internet connection.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**  安装过程可能需要数小时，具体取决于你的网络连接速度。'
- en: Now that you have Xcode downloaded, execute the command-line tools for Xcode.>
    xcode-select –installWith command-line tools installed, you can install Homebrew
    and the wget tools by using these commands:> /usr/bin/ruby -e "$(curl –fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)">
    brew install wgetAfter Homebrew and wget are installed, you are able to install
    the rest of the needed dependencies for bitcoin core, as shown here:> brew install
    automake berkeley-db4 libtool boost miniupnpc openssl pkg-config protobuf python
    qt libevent qrencode librsvg
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经下载了Xcode，就执行Xcode的命令行工具。> xcode-select –install命令行工具安装后，你可以使用这些命令安装Homebrew和wget：>
    /usr/bin/ruby -e "$(curl –fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)">
    brew install wget安装Homebrew和wget后，你可以安装比特币核心所需的其余依赖项，如下所示：> brew install automake
    berkeley-db4 libtool boost miniupnpc openssl pkg-config protobuf python qt libevent
    qrencode librsvg
- en: '**Installing Bitcoin Core**'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**安装比特币核心**'
- en: 'At this point you have the needed tools and dependencies installed, and you
    can clone the bitcoin code project, compile, and run it.> git clone https://github.com/bitcoin/bitcoin.git>
    cd bitcoin/Now, you can build the Berkeley DB version 4, used by the bitcoin core
    node:> ./contrib/install_db4.sh .Continue the installation;> ./autogen.sh> ./configure>
    make> make check && sudo make installBitcoin core code includes two tools: bitcoind
    and bitcoin-CLI.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你已经安装了所需的工具和依赖项，可以克隆比特币代码项目，编译并运行它。> git clone https://github.com/bitcoin/bitcoin.git>
    cd bitcoin/现在，你可以构建比特币核心节点所使用的Berkeley DB版本4：> ./contrib/install_db4.sh .继续安装；>
    ./autogen.sh> ./configure> make> make check && sudo make install比特币核心代码包括两个工具：bitcoind和bitcoin-CLI。
- en: '*bitcoind (the bitcoin daemon)*: This implements the bitcoin protocol for remote
    procedure call (RPC) use. Once it’s installed, you can make API calls. There is
    a list of all the API calls here: [https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_Calls_list](https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_Calls_list)
    .'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*bitcoind (比特币守护进程)*：这实现了用于远程过程调用（RPC）的比特币协议。一旦安装，你就可以进行API调用。这里有一个所有API调用的列表：[https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_Calls_list](https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_Calls_list)
    。'
- en: '*bitcoin-CLI (the bitcoin command-line interface)*: This enables you to interact
    with the bitcoin core daemon. To ensure the installation went well, you can check
    that the bitcoin daemon and bitcoin-CLI are configured and working as expected.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*bitcoin-CLI (比特币命令行界面)*：这使你能够与比特币核心守护进程进行交互。为了确保安装顺利进行，你可以检查比特币守护进程和bitcoin-CLI是否配置正确且按预期工作。'
- en: To ensure these tools were installed correctly, you can execute the which command
    on these tools to get the location of them.> which bitcoind> which bitcoin-cliThe
    output returns the location of the bitcoind and bitcoin-cli:/usr/local/bin/bitcoind/usr/local/bin/bitcoin-cli
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保这些工具被正确安装，你可以对这些工具执行which命令以获取它们的位置。> which bitcoind> which bitcoin-cli返回了bitcoind和bitcoin-cli的位置：/usr/local/bin/bitcoind/usr/local/bin/bitcoin-cli
- en: '**Configuring and Compiling Bitcoin Core**'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**配置和编译比特币核心**'
- en: Next, you want to configure a node. Each bitcoin core node does not do mining
    but contributes to the bitcoin network and consists of clients, miners, wallets,
    and so on. To configure the node, you can find the configuration files’ location
    by typing the following command in Terminal:> bitcoind -printtoconsoleAfter a
    few seconds, stop this service (Control+C). The command shows the bitcoin.conf
    configuration file location. See Figure [2-17](#Fig17) for the output."> Using
    config file /[path]/.bitcoin/bitcoin.conf"![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig17_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig17_HTML.jpg)
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要配置一个节点。每个比特币核心节点不进行挖矿，但为比特币网络做出贡献，包括客户端、矿工、钱包等。要配置节点，你可以在终端中输入以下命令来查找配置文件的位置：>
    bitcoind -printtoconsole几秒钟后，停止此服务（Control+C）。该命令显示了bitcoin.conf配置文件的位置。请参阅图 [2-17](#Fig17)
    以查看输出。" 使用配置文件 /[path]/.bitcoin/bitcoin.conf"![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig17_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig17_HTML.jpg)
- en: Figure 2-17
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 2-17
- en: bitcoin.conf file location
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: bitcoin.conf文件位置
- en: At the time of writing, a full-index bitcoin core node requires 2 GB RAM and
    at least 180 GB of disk space ( [https://blockchain.info/charts/blocks-size](https://blockchain.info/charts/blocks-size)
    ). Additionally, as the bitcoin nodes send and receive transactions and blocks
    constantly, you will need a fast internet connection.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，一个完整的比特币核心节点需要2GB的RAM和至少180GB的磁盘空间（ [https://blockchain.info/charts/blocks-size](https://blockchain.info/charts/blocks-size)
    ）。另外，由于比特币节点不断发送和接收交易和区块，你需要一个快速的互联网连接。
- en: The full node is advisable for a working project running a miner as you can
    run a dedicated server and interact with the bitcoind via Bitcoin-CLI; however,
    for the purpose of this book, most of the time you won’t need a full node. I recommend
    that you constrain bitcoin node resources usage on your computer so it won’t hog
    your computer’s resources and Internet bandwidth.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的节点对于运行矿工的实际项目是建议的，因为你可以运行专用服务器并通过Bitcoin-CLI与bitcoind交互；然而，为了本书的目的，大部分时间你不需要完整的节点。我建议你限制你的计算机上比特币节点资源的使用，以免占用你的计算机资源和互联网带宽。
- en: 'To limit your node from downloading the entire shared ledger, use vim or your
    favorite editor to edit the bitcoin.conf file.> vim /[path]/.bitcoin/bitcoin.confAfter
    vim opens up bitcoin.conf, paste the following configurations:alertnotify=myemailscript.sh
    "Alert: %s"prune=3000maxconnections=10dbcache=150maxmempool=100maxsendbuffer=500maxreceivebuffer=2000txindex=0Make
    sure you don’t erase the following lines already there:rpcuser=bitcoinrpcrpcpassword=[password]For
    your knowledge, the configuration file holds the following params:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '为了限制你的节点下载整个共享账本，使用vim或你喜欢的编辑器编辑bitcoin.conf文件。vim /[path]/.bitcoin/bitcoin.conf在vim打开bitcoin.conf后，粘贴以下配置：alertnotify=myemailscript.sh
    "Alert: %s"prune=3000maxconnections=10dbcache=150maxmempool=100maxsendbuffer=500maxreceivebuffer=2000txindex=0确保你不删除下面已经存在的行：rpcuser=bitcoinrpcrpcpassword=[password]为你所知，配置文件包含以下参数：'
- en: '***prune***: Utilizing prune, you can limit the disk usage. Set this to 3000.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***prune***: 使用prune，你可以限制磁盘使用。将此设置为3000。'
- en: '***Maxconnections***: By setting a limited maxconnections value, you are limiting
    the maximum nodes number to ten connections'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***Maxconnections***: 通过设置有限的maxconnections值，你限制了最大节点数为十个连接'
- en: '***dbcache***: In dbcache, you reduce the size of the UTXO cache from 300 MiB
    to 100 MiB.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***dbcache***: 在dbcache中，你将UTXO缓存大小从300 MiB减小到100 MiB。'
- en: '***Maxsendbuffer and maxreceivebuffer***: You can limit the memory buffer per
    connection to the number you set; for instance, set maxreceivebuffer to 2000 MB.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***Maxsendbuffer 和 maxreceivebuffer***: 你可以限制每个连接的内存缓冲区大小为你设置的数字；例如，将maxreceivebuffer设置为2000MB。'
- en: '***Txindex***: Set this to 1 to get transaction data for any transaction on
    the blockchain; however, this will use up more disk space.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***Txindex***: 将此设置为1以获取区块链上的任何交易的交易数据；然而，这将占用更多的磁盘空间。'
- en: '**Running Bitcoin Core Daemon**'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**运行比特币核心守护进程**'
- en: Now that you have configured your node, you can start the bitcoin core daemon.
    To run the bitcoind, execute the following command in Terminal:> bitcoind -printtoconsoleThe
    first time running the daemon, it will download the blockchain. This can take
    several hours (depending on your Internet connection). Because you set the parameter
    to print to the console (-printtoconsole), you will be able to watch the process
    as it downloads the entire blockchain. See Figure [2-18](#Fig18).![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig18_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig18_HTML.jpg)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好你的节点后，你可以启动比特币核心守护进程。要运行bitcoind，请在终端中执行以下命令：bitcoind -printtoconsole首次运行守护进程时，它会下载区块链。这可能需要几个小时（取决于你的互联网连接）。因为你设置了打印到控制台（-printtoconsole）的参数，所以你可以查看整个区块链下载过程。见图
    [2-18](#Fig18)。![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig18_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig18_HTML.jpg)
- en: Figure 2-18
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-18
- en: Bitcoin core daemon (bitcoind)
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币核心守护进程（bitcoind）
- en: 'While the process is running, open a second Terminal window to query the bitcoind
    interact with the APIs via the bitcoin-cli. Note: you can call the help feature
    and get help about the available APIs. For instance, to get a list of all available
    APIs, use this:> bitcoin-cli --help # outputs list of command-line options.> bitcoin-cli
    help # outputs list of RPC commands when the daemon is running.> bitcoin-cli help
    getblockhash # get help on specific API, for instance "getblockhash";To be able
    to retrieve the complete information, you would need to run a full node. To run
    a full node in the config file, change txindex=1 in the bitcoin.conf file and
    remove prune=3000. Open bitcoin.conf using your favorite editor.> vim /[path]/.bitcoin/bitcoin.confChange
    the params as follows:txindex=1 # prune=3000 - comment out this lineThis change
    will allow you to run a full node and provide the index information so you can
    review transaction data for any transaction on the blockchain. Now you can start
    the bitcoin core daemon again and tell the daemon to re-index all the data.> bitcoind
    -reindex –printtoconsole'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '在进程运行时，打开另一个终端窗口以查询bitcoind并通过bitcoin-cli与API交互。注意：你可以调用帮助功能并获得有关可用API的帮助。例如，要获取所有可用API的列表，使用这个命令：>
    bitcoin-cli --help # 输出命令行选项列表。> bitcoin-cli help # 当守护进程运行时，输出RPC命令列表。> bitcoin-cli
    help getblockhash # 获取特定API的帮助，例如"getblockhash"；为了能够检索完整信息，你需要运行一个完整节点。在配置文件中运行完整节点时，在bitcoin.conf文件中将txindex=1更改为prune=3000。使用你喜欢的编辑器打开bitcoin.conf。>
    vim /[path]/.bitcoin/bitcoin.conf将参数更改为如下：txindex=1 # prune=3000 - 注释掉这一行此更改将允许你运行一个完整节点并提供索引信息，以便你可以查看区块链上的任何交易的交易数据。现在你可以再次启动bitcoind核心守护进程，并告诉守护进程重新索引所有数据。>
    bitcoind -reindex –printtoconsole'
- en: Once again, this process can take hours; however, as it is downloading the blocks,
    you will be able to interact with the downloaded blocks.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程可能需要数小时；然而，在下载区块的过程中，你可以与已下载的区块进行交互。
- en: To get the blockchain information, you can query the daemon to show the progress
    of your node. See the expected output in Figure [2-19](#Fig19).> bitcoin-cli getblockchaininfo![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig19_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig19_HTML.jpg)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取区块链信息，你可以查询守护进程以显示你节点的进度。参见图[2-19](#Fig19)中的预期输出。> bitcoin-cli getblockchaininfo![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig19_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig19_HTML.jpg)
- en: Figure 2-19
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-19
- en: Getting blockchain information
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 获取区块链信息
- en: This did not complete the full download of the bitcoin node; however, you already
    have 209,513 blocks and 538,726 block headers. The node first downloads the block
    headers of the best chain blocks and then downloads the full blocks.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这没有完成比特币节点的完整下载；然而，你已经拥有了209,513个区块和538,726个区块头部。节点首先下载最佳链块的区块头部，然后下载完整区块。
- en: In this exercise, you set your environment and downloaded blocks, configured
    them, and started a bitcoin node.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你设置了你的环境并下载了区块，配置了它们，并启动了一个比特币节点。
- en: Serialized Blocks
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 序列化区块
- en: Each full node holds the same validated blocks and follows the same rules (consensus
    rules). Each bitcoin block in the chain contains a 1 MB serialized code according
    to the current bitcoin consensus rules.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 每个完整节点都持有相同的验证区块并遵循相同的规则（共识规则）。每个比特币链中的区块包含根据当前比特币共识规则的1 MB序列化代码。
- en: 'The block header holds encoded information that includes the following:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 区块头部包含以下编码信息：
- en: Version
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本
- en: Previous block header
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前一个区块头部
- en: Merkle root hash
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默克尔根哈希
- en: Time
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间
- en: nBits
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位数
- en: nounce
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机数
- en: txn_count (holds the total number of transactions)
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易计数（持有交易总数）
- en: txns (raw transaction)
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易（原始交易）
- en: This data is being hashed and is part of the proof-of-work algorithm and the
    consensus rules. The Satoshi Nakamoto white paper explains the consensus rules.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据正在被哈希，是工作量证明算法和共识规则的一部分。中本聪的白皮书解释了共识规则。
- en: '*“They vote with their CPU power, expressing their acceptance of valid blocks
    by working on extending them and rejecting invalid blocks by refusing to work
    on them. Any needed rules and incentives can be enforced with this consensus mechanism.”*'
  id: totrans-195
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “他们用CPU功率进行投票，通过扩展有效区块来表达接受，并通过拒绝为无效区块工作来拒绝它们。任何需要的规则和激励措施都可以通过这种共识机制来执行。”
- en: ''
  id: totrans-196
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '—*Bitcoin: A Peer-to-Peer Electronic Cash System.*'
  id: totrans-197
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ——《比特币：一种点对点的电子现金系统》
- en: 'The proof of work (PoW) in bitcoin is based on Adam Back’s Hashcash. Each miner
    is racing to solve the problem; once the problem is solved, the process restarts.
    The problem is a mathematical puzzle known as a *proof-of-work problem* , and
    the reward is given to the first miner who solves the problem. Then the verified
    transactions are stored in the public ledger. You’ll learn more about this in
    the next section. It takes 9.9 minutes to generate about 25 bitcoins. Per the
    Satoshi white paper:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币的工作量证明（PoW）基于亚当·巴克的Hashcash。每个矿工都在争夺解决问题；一旦问题解决，过程将重新开始。这个问题是一个被称为*工作量证明问题*的数学难题，奖励是第一个解决问题的矿工。然后，验证的交易被存储在公共账本中。你将在下一节了解更多关于这方面的内容。生成大约25个比特币需要9.9分钟。根据中本聪的白皮书：
- en: '*“A block header with no transactions would be about 80 bytes. If we suppose
    blocks are generated every 10 minutes, 80 bytes ∗ 6 ∗ 24 ∗ 365 = 4.2MB per year”*'
  id: totrans-199
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“一个没有交易的区块头部大约是80字节。如果我们假设每10分钟产生一个区块，80字节 * 6 * 24 * 365 = 4.2MB每年”*'
- en: ''
  id: totrans-200
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '—*Bitcoin: A Peer-to-Peer Electronic Cash System.*'
  id: totrans-201
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —*比特币：一种点对点电子现金系统*。
- en: At the time of writing, bitcoin processes three transactions per seconds, and
    if the bitcoin transactions increase to four transactions per second, then bitcoin
    will be operating at peak capacity. Ethereum, on the other hand, is running five
    transactions per seconds, and if it goes to eight, that would be peak capacity.
    This design creates a scalability flaw as large corporations need to process hundreds
    of thousands of transactions per seconds not just four to eight per second.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，比特币每秒处理三个交易，如果比特币交易增加到每秒四个，那么比特币将达到峰值容量。另一方面，以太坊目前每秒处理五个交易，如果增加到八个，也将达到峰值容量。这种设计存在可扩展性问题，因为大型企业需要每秒处理数百万笔交易，而不仅仅是四到八笔。
- en: Block Header
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 区块头部
- en: 'As mentioned, a block is shared between nodes on the bitcoin network. Each
    block header is a serialized 80-byte format. The following information is encoded
    in each block header:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 正如所说，比特币网络中的节点共享一个区块。每个区块头部是一个序列化的80字节格式。以下信息编码在每一个区块头部：
- en: '***Version***: At the time of writing, there are four block versions. Version
    1 is the genesis block (2009), and version 2 was a soft fork in bitcoin core 0.7.0
    (2012). Version 3 blocks were a soft fork in bitcoin core 0.10.0 (2015). Version
    4 blocks are BIP65 in bitcoin core 0.11.2 (2015).'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***版本***：在撰写本文时，有四个区块版本。版本1是创世区块（2009年），版本2是比特币核心0.7.0中的软分叉（2012年）。版本3区块是比特币核心0.10.0中的软分叉（2015年）。版本4区块是比特币核心0.11.2中的BIP65。'
- en: Note
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: What is BIP? BIP is a *bitcoin improvement proposal* (BIP). It is a document
    for introducing features or information to bitcoin. BIP is the standard for communicating
    ideas as bitcoin is open source and has no formal structure.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: BIP是什么？BIP是*比特币改进提案*（BIP）。这是一份介绍比特币新功能或信息的文档。BIP是沟通想法的标准，因为比特币是开源的，并且没有正式的结构。
- en: '***Previous block header hash***: This is an SHA256(SHA256()) hash of the previous
    block’s header. This ensures integrity because changing one previous block will
    require changing each previous block.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***前一个区块头部哈希***：这是前一个区块头部的SHA256(SHA256())哈希。这确保了完整性，因为改变一个前一个区块将需要改变每一个前一个区块。'
- en: '***Merkle root hash***: A Merkle tree is a binary tree that holds all the hashed
    pairs of the tree.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***Merkle根哈希***：Merkle树是一个二叉树，包含树中所有哈希对的哈希值。'
- en: '***Time***: This is a Unix epoch time when the miner started hashing the header.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***时间***：这是矿工开始哈希头部时的Unix纪元时间。'
- en: '***nBits***: nBits is the target section of the block header.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***nBits***：nBits是区块头部的目标部分。'
- en: '***nonce***: This is an arbitrary number that miners change to modify the header
    hash in order to produce a hash that is less than or equal to the target threshold.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***nonce***：这是一个矿工任意更改以修改头部哈希以产生小于或等于目标阈值的哈希的数。'
- en: You already downloaded a portion of the blockchain, and you are able to query
    the block height already downloaded.> bitcoin-cli getblockhash 375617The daemon
    returned a string with the block hash of the best block chain at index 375617\.
    You can then request to get the actual block.> bitcoin-cli getblock 00000000000000000f270563d7f2187beec75cdc04f98823572e5a31baf0a261Figure
    [2-20](#Fig20) shows the results. As you can see, the block information includes
    the previousblockhash key and the nextblockhas key. These keys are SHA256(SHA256())
    hash-encrypted keys. The rules ensure blocks cannot be changed. These rules are
    part of the consensus rules that are set to maintain the blockchain security by
    untrusted nodes.![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig20_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig20_HTML.jpg)
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经下载了区块链的一部分，并且你能够查询已经下载的区块高度。> bitcoin-cli getblockhash 375617守护进程返回了一个包含索引375617处最佳区块链的区块哈希的字符串。然后，你可以请求获取实际的区块。>
    bitcoin-cli getblock 00000000000000000f270563d7f2187beec75cdc04f98823572e5a31baf0a261图[2-20](#Fig20)显示了结果。正如你所看到的，区块信息包括前区块哈希键和下一个区块哈希键。这些键是SHA256(SHA256())哈希加密的键。规则确保区块无法被更改。这些规则是共识规则的一部分，旨在通过不可信节点维护区块链的安全。![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig20_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig20_HTML.jpg)
- en: Figure 2-20
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-20
- en: Getting block information
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 获取区块信息
- en: Block Version
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 区块版本
- en: The block version is part of the block header. You can see the block versions
    used in the block. In Figure [2-20](#Fig20) you can see that only version 1 is
    used for block 00000000000000000f270563d7f2187beec75cdc04f98823572e5a31baf0a261.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 区块版本是区块头的一部分。你可以看到在区块中使用的区块版本。在图[2-20](#Fig20)中，你可以看到只有版本1用于区块00000000000000000f270563d7f2187beec75cdc04f98823572e5a31baf0a261。
- en: The consensus mechanism can only be changed by the bitcoin open source development
    team, which published instructions on how to handle upgrades suggestions. The
    BIP that introduced the upgrade method to handle the path for versioned transactions
    and blocks was used in versions 2, 3, and 4.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 共识机制只能由比特币开源开发团队更改，该团队发布了处理升级建议的说明。在版本2、3和4中使用了引入了处理版本化交易和区块升级方法的BIP。
- en: 'The function added to bitcoin core manages the soft forking. You can learn
    more about this BIP feature here: [https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki)
    .'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到比特币核心的功能管理软分叉。你可以了解更多关于这个BIP特性的信息，点击这里：[https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki)。
- en: Merkle Trees
  id: totrans-220
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 梅克尔树
- en: 'You called to retrieve the block information and received a Merkle root hash
    key. A Merkle tree is a binary tree. The root node of the Merkle tree holds all
    the hashed pairs of the tree. To help visualize this process, look at the following
    simple ASCII example of a binary list of a hashed tree:*Transactions list: H(A)->H(B)->H(C)->H(D)*            *Hash(A|B|C|D)*         */               \*     *Hash(A|B)         Hash(C|D)*        */
    \          /         \* *Hash(A)  Hash(B)  Hash(C)   Hash(D)*The block headers
    included in this Merkle root are a representation of the descendants of all the
    transactions in that block. HASH(A|B|C|D) is the Merkle root. Each element A,
    B, C, and D would be a hash of all the transactions in that block. In our example
    we have only one transaction in each block.*Merkle Root: H(A)*         */*     *Hash(A)*'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '你调用获取区块信息并接收了一个Merkle根哈希键。Merkle树是一个二叉树。Merkle树的根节点持有树中所有哈希对的全部。为了帮助理解这个过程，请看以下简单的ASCII示例，这是一个已哈希的二叉列表的区块：*交易列表：H(A)->H(B)->H(C)->H(D)*            *Hash(A|B|C|D)*         */               \*     *Hash(A|B)         Hash(C|D)*        */
    \          /         \* *Hash(A)  Hash(B)  Hash(C)   Hash(D)*包含在这个Merkle根中的区块头是该区块中所有交易的后代的表示。HASH(A|B|C|D)是Merkle根。每个元素A、B、C和D将是该区块中所有交易的哈希。在我们这个例子中，每个区块中只有一个交易.*Merkle
    Root: H(A)*         */*     *Hash(A)*'
- en: Target nBits
  id: totrans-222
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 目标nBits
- en: The block header includes nBits*.* nBits is the target section of the block
    header. nBits is a 32-bit compact encoding of the 256-bit target threshold. It
    works like scientific notation but uses base-256 instead of base-10\. Every 2,016-block
    bitcoin core re-target point and adjusts nBits according to bitcoin difficulty
    rules. Bitcoin difficulty increases or decreases depending on whether it took
    less time or more time than two weeks to find 2,016 blocks. In other words, the
    difficulty will increase if the hash rate increases or decrease if the network
    hash rate decreases.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 区块头包括nBits.* nBits是区块头的目标部分。nBits是256位目标阈值的32位紧凑编码。它像科学记数法一样工作，但使用的是256进制而不是10进制。每2016个区块的比特币核心重定位一次，并根据比特币难度规则调整nBits。比特币难度会根据找到2016个区块所需的时间少于或超过两周而增加或减少。换句话说，如果哈希率增加，难度会增加；如果网络哈希率降低，难度会减少。
- en: For instance, to convert an nBits 0x181b8330 into the target threshold, you
    would calculate it using the same shorthand you use with regular scientific notation;
    see Figure [2-21](#Fig21).![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig21_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig21_HTML.jpg)
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要将nBits 0x181b8330转换为目标阈值，你可以使用与常规科学记数法相同的简写方式进行计算；参见图2-21。
- en: Figure 2-21
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-21
- en: Calculating nBits. Photo credit. stackexchange.com.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 计算nBits。图片来源于stackexchange.com。
- en: Convert 0x1bc3300000000000000000000000000000000000000000000 to nBits of 0x181b8330\.
    That will be our target threshold.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 将0x1bc3300000000000000000000000000000000000000000000转换为0x181b8330的nBits。这将是我们的目标阈值。
- en: txn_count
  id: totrans-228
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: txn_count
- en: The txn_count parameter  represents the total number of transactions in a given
    block including the coinbase transaction.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: txn_count参数代表给定区块中包括coinbase交易的总交易数。
- en: Coinbase is a special field used as an input for coinbase transactions. The
    coinbase allows you to claim the block reward and provides up to 100 bytes for
    arbitrary data.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: Coinbase是一个特殊字段，用作coinbase交易的输入。coinbase允许你领取区块奖励，并提供了最多100字节的自定义数据。
- en: Each block contains transactions, and the first transaction in a block is created
    by a miner; it includes a single coinbase.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 每个区块包含交易，区块中的第一个交易由矿工创建，它包括一个coinbase。
- en: Block Reward
  id: totrans-232
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 区块奖励
- en: Bitcoin miners claim the reward for creating a block. The reward is the sum
    of block subsidies plus the transaction fees paid by transactions included in
    the block.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币矿工为创建区块领取奖励。奖励是区块补贴加上包含在区块中的交易的交易费用。
- en: A block subsidy is the newly available satoshis reward. It started at 50 bitcoins
    and is being halved every 210,000 blocks, approximately once every four years.
    At the time of writing, it’s about 12.5 bitcoins. Eighty percent of the block
    subsidy has already been paid, and only 4.2 million bitcoins are left to mine
    until the 21 million supply cap is reached. At that point, the miners will receive
    a reward of only transaction fees.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 区块补贴是新可用的satoshis奖励。它始于50比特币，每210,000个区块减半，大约每四年一次。在撰写本文时，大约是12.5比特币。区块补贴的80%已经支付，只剩下420万比特币可供挖掘，直到达到21百万的总供应量。到那时，矿工会只收到交易费用作为奖励。
- en: As mentioned, each block contains transactions, and the first transaction in
    a block is created by a miner; it includes a single coinbase, the reward.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 正如提到的，每个区块包含交易，区块中的第一个交易由矿工创建，它包括一个coinbase，作为奖励。
- en: 'txns: Decode a Transaction'
  id: totrans-236
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: txns：解码交易
- en: txns is the raw transaction in the block. To better understand this process,
    let’s work with an actual transaction. Bitcoin transactions that are stored in
    the blockchain ledger are broadcast between different peers in serialized byte
    format (raw format or raw transaction). To decode the SHA256 raw transaction,
    you can call the bitcoin client and utilize the different APIs.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: txns是区块中的原始交易。为了更好地理解这个过程，让我们用一个实际的交易来工作。存储在区块链账本中的比特币交易以序列化字节格式（原始格式或原始交易）在不同对等体之间传播。为了解码SHA256原始交易，你可以调用比特币客户端并使用不同的API。
- en: To start, you can retrieve a block you would like to work with. The daemon you
    are running lists the blocks as the new best, as shown in Figure [2-22](#Fig22).![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig22_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig22_HTML.jpg)
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你可以获取一个你想要处理的区块。你正在运行的守护进程列出了区块作为新的最佳区块，如图2-22所示。
- en: Figure 2-22
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-22
- en: Bitcoin daemon printing to console result
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, you are able to find the new best block by looking at the output
    of the bitcoin daemon. In this case, you choose the hash 000000000000ea2ca199cafd1362ece59d7c6f3867b5e0d6f20c12af6752fb48.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: The best block chain is the block selected that is the hardest chain to re-create.
    Remember, in a chain of blocks, each block refers to the block that came before
    it; that’s how you have a blockchain that creates the security and prevents the
    double spending.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have the new best block, you can retrieve the hash data of that
    block.> bitcoin-cli getblock 000000000000ea2ca199cafd1362ece59d7c6f3867b5e0d6f20c12af6752fb48The
    getblock command  returns to a coded SHA256 hash data about the block you requested
    (Figure [2-23](#Fig23)).![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig23_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig23_HTML.jpg)
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2-23
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: getblock retrieving block information
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s examine the result of the getblock call. You got a Merkle root as a hash
    as well as hash tx of all the transactions in that block."tx": [  "a73226fc261f95db14eba45cd734aeb0b8784911aeb24f301f94858a09184036",  Transaction
    hash 02,  Transaction hash 03, and so on...]'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there are multiple tx (transactions) in the array of this block.
    You can now request to retrieve the raw transaction data of each transaction (tx).
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: The getrawtransaction command will return the raw data.> bitcoin-cli getrawtransaction
    a73226fc261f95db14eba45cd734aeb0b8784911aeb24f301f94858a09184036Here is the raw
    transaction SHA256 data:01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff070439f3001b0141ffffffff0100f2052a01000000434104b5a750a0ca4bb5a47b6f169b8a8f42b39e2dbb7967d046f1bf018d927d102c280f1123ebfd973f6e651f2e5ff4486e18a90cc67d6d17ccdb95cd6bf028d791cfac00000000You
    can now decode the SHA256 raw transaction data with the decoderawtransaction command.>
    bitcoin-cli decoderawtransaction 01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff070439f3001b0141ffffffff0100f2052a01000000434104b5a750a0ca4bb5a47b6f169b8a8f42b39e2dbb7967d046f1bf018d927d102c280f1123ebfd973f6e651f2e5ff4486e18a90cc67d6d17ccdb95cd6bf028d791cfac00000000The
    command returns the transaction result in a readable format, as shown in Figure
    [2-24](#Fig24).![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig24_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig24_HTML.jpg)
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2-24
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Decode transaction utilizing the decoderawtransaction command
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin Wallet
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you saw in Figure [2-24](#Fig24), the wallet address is 1Mr2G632PfQuq4uJXRBNWLoRKH71Qwor51,
    and the value is 50 coins.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: You can also confirm the transactions of this wallet online by visiting services
    that contain a full node and checking the wallet’s balance. Figure [2-25](#Fig25)
    shows a screenshot from [https://bitref.com/1Mr2G632PfQuq4uJXRBNWLoRKH71Qwor51](https://bitref.com/1Mr2G632PfQuq4uJXRBNWLoRKH71Qwor51)
    .![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig25_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig25_HTML.jpg)
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过访问包含完整节点的服务并检查钱包余额来在线确认该钱包的交易。图[2-25](#Fig25)显示了来自[https://bitref.com/1Mr2G632PfQuq4uJXRBNWLoRKH71Qwor51](https://bitref.com/1Mr2G632PfQuq4uJXRBNWLoRKH71Qwor51)的屏幕截图。![../images/475651_1_En_2_Chapter/475651_1_En_2_Fig25_HTML.jpg](../images/475651_1_En_2_Chapter/475651_1_En_2_Fig25_HTML.jpg)
- en: Figure 2-25
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-25
- en: 1Mr2G632PfQuq4uJXRBNWLoRKH71Qwor51 wallet balance
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 1Mr2G632PfQuq4uJXRBNWLoRKH71Qwor51 钱包余额
- en: Similarly, you can query your wallet’s available funds via the CLI:> bitcoin-cli
    getbalance 1Mr2G632PfQuq4uJXRBNWLoRKH71Qwor51
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以通过命令行界面（CLI）查询您的钱包可用资金：`bitcoin-cli getbalance 1Mr2G632PfQuq4uJXRBNWLoRKH71Qwor51`
- en: In the next chapters, I will be covering wallets, so I will explain in more
    detail the wallet’s operations, but for now, you can see that the user purchased
    50 coins in 2003 and sold them in 2012\. Notice that although you do not know
    the identity of the person who owns the wallet, you are able to view the wallet’s
    current balance as this is public information.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我将介绍钱包，所以我将更详细地解释钱包的操作，但现在，您可以看到用户在2003年购买了50枚硬币，并在2012年出售了它们。请注意，尽管您不知道拥有钱包的人的身份，但您可以看到钱包的当前余额，因为这是公开信息。
- en: Summary
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to run a blockchain node that can help manage
    a blockchain. For bitcoin, you created a node called a *miner*. For NEO, you created
    a node that has management rights called a b*ookkeeping node*, and for EOS you
    created a *block producer*. You also explored what you need to do to have your
    node elected or running so it is profitable.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何运行一个可以协助管理区块链的区块链节点。对于比特币，您创建了一个名为*矿工*的节点。对于NEO，您创建了一个具有管理权的节点，称为b*ookkeeping
    node*。对于EOS，您创建了一个*区块生产者*。您还探索了要使您的节点当选或运行以便盈利您需要做什么。
- en: Next, you installed a full bitcoin node that is capable of running the bitcoin
    core API. You installed and configured your node and learned how to run the bitcoin
    core demon. You then interacted with the bitcoin core API and were able to learn
    how to serialize blocks and understand better the data inside each block.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您安装了一个能够运行比特币核心API的全功能比特币节点。您安装并配置了您的节点，并学习了如何运行比特币核心守护进程。然后您与比特币核心API进行了交互，并能够学习如何序列化区块，更好地理解每个区块内的数据。
- en: I covered block rewards, transactions, and the bitcoin wallet. In the next chapter,
    you will be building your very own blockchain P2P network to get a much deeper
    understanding of how a blockchain works.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我介绍了区块奖励、交易和比特币钱包。在下一章，您将构建自己的区块链P2P网络，以更深入地了解区块链是如何工作的。
