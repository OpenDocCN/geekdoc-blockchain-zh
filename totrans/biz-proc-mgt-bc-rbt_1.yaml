- en: Robotic Process Automation Forum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '© Springer Nature Switzerland AG 2021J. González Enríquez et al. (eds.)Business
    Process Management: Blockchain and Robotic Process Automation ForumLecture Notes
    in Business Information Processing428[https://doi.org/10.1007/978-3-030-85867-4_1](https://doi.org/10.1007/978-3-030-85867-4_1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Humans, Processes and Robots: A Journey to Hyperautomation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Andrés Jiménez-Ramírez^([1](#Aff12) [ ](#ContactOfAuthor1))(1)Departamento
    de Lenguajes y Sistemas Informáticos, Escuela Técnica Superior de Ingeniería Informática,
    Avenida Reina Mercedes, s/n., 410121 Sevilla, SpainAndrés Jiménez-RamírezEmail:
    [ajramirez@us.es](mailto:ajramirez@us.es)'
  prefs: []
  type: TYPE_NORMAL
- en: 1 Abstract
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Automating business processes is one of the most recurrent topics in industries,
    independent of its digital orientation. Competitiveness pushes companies to deliver
    their products or services efficiently and effectively. Besides providing the
    appropriate value, they are required to do it faster and with higher quality.
    This agile context leads to automate *everything* that can be automated to keep
    the focus on the value while optimizing the processing times, errors, and process
    performance, in general [[9](#CR9)].
  prefs: []
  type: TYPE_NORMAL
- en: Human beings have historically suffered various industrial revolutions that
    transformed the way of working, producing, and thinking. Although resistance to
    change has always appeared, they ended up being adopted by companies and people
    to avoid inevitable obsolescence [[11](#CR11)]. The irruption of Robotic Process
    Automation (RPA) in the area of business process automation seems to have laid
    the seeds for a new revolution of administrative digital work [[3](#CR3)].
  prefs: []
  type: TYPE_NORMAL
- en: RPA is a software paradigm that enables software machines (also referred as
    robots) to interact with information systems through their user interfaces (UIs)
    in a process-oriented way. Freeing humans from repetitive and mundane work is
    its main mantra. It started receiving increasing interest in the last decade and
    has become the fastest-growing enterprise software market in the last years [[2](#CR2)].
    After an initial hype of unfulfilled promises, RPA keeps a significant traction
    [[12](#CR12)]. Nonetheless, some companies still fail when trying to incorporate
    RPA in their projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'This paper serves as a discussion on, first, how to frame RPA in the existing
    Business Process Management (BPM) paradigm (cf. Sect. [1.1](#Sec2)). And second,
    it deals with its natural evolution to a wider automation technology across the
    entire organization: *Hyperautomation* (cf. Sect. [1.2](#Sec3)).'
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 Framing RPA in BPM
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Nowadays, a plethora of tools is available in the application landscape under
    the umbrella of RPA. However, their application scopes are wide, ranging from
    simple UI scripting tools (e.g., UI.Vision^([1](#Fn1)) or RobotFramework^([2](#Fn2)))
    to comprehensive systems that enable the development, deployment, and control
    of farms of robots (e.g., UiPath^([3](#Fn3)) or Robocorp^([4](#Fn4))).
  prefs: []
  type: TYPE_NORMAL
- en: This situation creates uncertainty in companies when deciding what to use for
    their use cases that typically leads to failed projects [[4](#CR4)]. On the one
    hand, when neither scaling nor a central government of robots is required, UI
    scripting tools could do the job at a fraction of the cost when compared to mature
    RPA solutions, which use to be disproportionate in simple contexts. On the other
    hand, the hype created around RPA pushes some companies to use the technology
    to the detriment of other more suitable solutions which would deliver more outstanding
    performance. For example, *utilizing* RPA to automate UIs even though the API
    is exploitable leads to unnecessary inefficiencies and high resource consumption.
  prefs: []
  type: TYPE_NORMAL
- en: Even when the project (i.e., undesired contexts where no other automation alternative
    would work) fulfills the suitability criteria for RPA, companies may miss a threat
    analysis of the solution. In case that RPA is applied as a long-term solution
    (e.g., in legacy systems that cannot be changed), it becomes highly dependant
    on the UI of the base system. Therefore, monitoring or continuous testing is required
    to anticipate errors [[6](#CR6)]. In turn, if RPA is applied as a short-term solution
    (e.g., rapid solution without investing in a deep integration), its end-of-life
    should be defined and control. Otherwise, it will become a technical debt in the
    team that has to do the maintenance [[8](#CR8)].
  prefs: []
  type: TYPE_NORMAL
- en: The future shape of the RPA technology is uncertain since mature RPA vendors
    provide some features that overlap with those traditionally existing in the BPM
    tools, e.g., process modeling, orchestration, and monitoring. Nonetheless, while
    the *RPA-centric* solutions focus on fine-grained tasks, *BPM-centric* solutions
    support rather more complex and sophisticated integrations. What is more, this
    uncertainty is increased by the different market movements in both (1) delivering
    more BPM features by RPA vendors or (2) acquiring RPA solutions by BPM vendors^([5](#Fn5)).
  prefs: []
  type: TYPE_NORMAL
- en: What is clear is that both paradigms are part of a new *big thing* that enables
    the automation of a broader range of processes end-to-end. Independently on how
    they integrate, industry-grade solutions for RPA may support robot developers
    and robot operators/maintainers in a DevOps continuous cycle. In the development
    field, besides just creating and executing robots, additional features are necessary,
    like supporting identifying candidate processes to robotize, controlling the version
    of the robots, evolving them, or managing test suits in controlled environments.
    Regarding the operation field, besides the deployment of the robots in the execution
    environments, this role must be supported with, for example, scaling and descaling
    mechanisms, balancing the workload of the robot queues, or alerting rules to control
    the correct performance. These requirements become even more challenging when
    we consider the participation of the human in the process. This is highly relevant
    in the automation with RPA since the automated processes here are typically those
    which were previously on the human side. As the automation does not happen like
    a big bang but through iterations [[7](#CR7)], methods are required which consider
    the human in the process and that the work gradually shifts from the human side
    to the automatic/robotic side. Although robots have an initial relevant role in
    this shifting, the eventual automation solutions may use other more sound and
    resilient automation technology.
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 The Era of Hyperautomation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hyperautomation is more than just a fancy word. It has been coined to combine
    BPM, AI, RPA, and any other technology that may help conduct human duties in an
    automatic way within organizations. Not surprisingly, Gartner identifies this
    technology as the number one trend in 2020^([6](#Fn6)).
  prefs: []
  type: TYPE_NORMAL
- en: While RPA scope still requires standardization, hyperautomation gives a name
    to this continuous effort to try to automate *everything* that can be automated.
    Similar to BPM and RPA paradigms, hyperautomation requires methods to ease its
    adoption. Here, the separation of duties and decoupling of each combined technology
    needs to be guarantee to allow their individual evolution. In the same way, streamlining
    the incorporation and coordination of different technologies within the available
    automation toolset is a must. Beyond processes and tasks, this technology aims
    at the organization’s scope and, thus, new or adapted measures or KPIs are required
    to assess the automation level of the organization after each hyperautomation
    iteration. As already demonstrated in many similar contexts, process mining stands
    as a suitable technology to automated this assessment as well as to accelerate
    the discovery of potential automation alternatives, existing inefficiencies, etc.
    [[5](#CR5)].
  prefs: []
  type: TYPE_NORMAL
- en: This shake to the whole organization will need to be addressed from different
    perspectives besides the DevOps one. From a strategic point of view, organizations
    need to reorder their priorities, rethink the management of their risks and resources,
    and, in summary, envision a future company that will require more technology,
    innovation, and smart minds with far less mundane and repetitive work. From a
    technological point of view, organizations need to agile the technology acquisition
    and mastering, enabling fast knowledge sharing and collaboration from different
    units or departments from both business and IT levels. In the center of this organization
    transformation is the human who, on the one hand, will suffer automation initiatives
    at higher rates than before, which may generate adverse reactions if they neglect
    to estimate the human impact of the automation before its deployment [[10](#CR10)].
    On the other hand, human work habits will focus on more unique, cognitive, and
    valuable activities instead of batch-processing and simple ones.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most determinant factors to successfully address all these dimensions
    of this journey to hyperautomation is to work on the skill developments at every
    tier of the company [[1](#CR1)]. Continuous formations plans, knowledge transfer
    sessions, etc., are recommended in the area of automation. Current workers may
    benefit from existing literature and handbooks written for researchers and practitioners.
    In turn, a significant deficiency that needs to be faced is that the new generations—which
    typically came from universities and institutes—have access mainly to technical
    formation courses from vendors. However, both lectures and students lack comprehensive
    textbooks to get prepared for this new revolution called hyperautomation.
  prefs: []
  type: TYPE_NORMAL
- en: '© Springer Nature Switzerland AG 2021J. González Enríquez et al. (eds.)Business
    Process Management: Blockchain and Robotic Process Automation ForumLecture Notes
    in Business Information Processing428[https://doi.org/10.1007/978-3-030-85867-4_2](https://doi.org/10.1007/978-3-030-85867-4_2)'
  prefs: []
  type: TYPE_NORMAL
- en: A Framework of Cost Drivers for Robotic Process Automation Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bernhard Axmann^([1](#Aff12) [ ](#ContactOfAuthor1)), Harmoko Harmoko^([1](#Aff12) [ ](#ContactOfAuthor2)),
    Lukas-Valentin Herm^([2](#Aff13) [ ](#ContactOfAuthor3)) and Christian Janiesch^([2](#Aff13),
    [3](#Aff14) [ ](#ContactOfAuthor4))(1)Technische Hochschule Ingolstadt, Ingolstadt,
    Germany(2)Julius-Maximilians-Universität, Würzburg, Germany(3)HAW Landshut, Landshut,
    GermanyBernhard AxmannEmail: [bernhard.axmann@thi.de](mailto:bernhard.axmann@thi.de)Harmoko HarmokoEmail:
    [harmoko.harmoko@thi.de](mailto:harmoko.harmoko@thi.de)Lukas-Valentin Herm (Corresponding
    author)Email: [lukas-valentin.herm@uni-wuerzburg.de](mailto:lukas-valentin.herm@uni-wuerzburg.de)Christian JanieschEmail:
    [christian.janiesch@uni-wuerzburg.de](mailto:christian.janiesch@uni-wuerzburg.de)'
  prefs: []
  type: TYPE_NORMAL
- en: Abstract
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Robotic process automation is a technology to imitate human behavior when interacting
    with computers to perform digitized tasks manually, such as opening and closing
    applications, reading documents, entering data, and sending e-mails. As with any
    new technology, estimating the costs and break-even of robotic process automation
    projects is challenging. Currently, in practice, there are no dedicated guidelines
    for defining cost components in those projects that go beyond simple comparison
    with person-hours and salary cost. To address this gap, we review literature on
    the cost of robotic process automation projects to collect and structure those
    cost drivers that can be generalized. We categorize and prioritize them and derive
    a novel cost framework specifically for the cost estimation of robotic process
    automation projects. The framework comprises three cost calculation perspectives
    for three distinct project scopes hosting eleven cost drivers in the three categories
    development, investment, and operation. We illustrate the framework in a robotic
    process automation use case to demonstrate its usefulness.
  prefs: []
  type: TYPE_NORMAL
- en: KeywordsRobotic process automationLiterature reviewCost driversFramework
  prefs: []
  type: TYPE_NORMAL
- en: 1 Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Robotic process automation (RPA) has recently moved from the peak of exaggerated
    expectations into the trough of disillusionment in Gartner’s hype cycle for legal
    and compliance technologies [[1](#CR1)]. It indicates that business is better
    understanding “what RPA can do” and “what RPA cannot do” in its current form nearing
    the plateau of productivity.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, according to Syed et al. [[2](#CR2)] measuring RPA cost and benefit
    realization still poses a challenge as there is no readily available metric system
    or even a common understanding of the benefits and cost of RPA. This is chiefly
    because RPA is a novel approach to IT automation and not directly comparable to
    traditional IT-related projects, developing a novel IT system, or implementing
    workflows using standalone business process management (BPM) software to automate
    a task rather than automate the human worker [[3](#CR3)].
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, due to their simple structure, it is tempting to break down RPA
    projects into “wins” or “fails” at first glance. However, in reality, it is not
    nearly as trivial to understand the cost-benefit relation at work as not all cost
    drivers are apparent at all times. Hence, a reasonable first step to approach
    RPA project measurement is to focus on the cost incurred by the development, investment,
    and operation of RPA as – in contrast to benefits – costs can be better quantified
    and assessed early in projects [[4](#CR4)].
  prefs: []
  type: TYPE_NORMAL
- en: While it may sound promising now to compile a comprehensive framework of RPA
    cost drivers, any approach for RPA has to align with the lightweight character
    of RPA projects, which does not always allow for complex organizational and budgetary
    considerations. Otherwise, hyperautomation, the rapid, business-driven realization
    of RPA software robots [[5](#CR5)], would not scale.
  prefs: []
  type: TYPE_NORMAL
- en: 'In response, we propose an investigation into the cost drivers that may affect
    RPA while maintaining the stance that cost estimation for RPA projects needs to
    be reasonably straightforward to be effective given the circumstances of application.
    We formulate our research question accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '**RQ:** *Which cost drivers are relevant for the cost estimation of RPA projects
    and how can we incorporate them in a framework applicable for different project
    scopes?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our contribution is threefold. First, we contribute a comprehensive review of
    the state-of-the-art of RPA project costing that reveals cost drivers that have
    been applied to the measurement RPA cases. Second, we offer a conceptualization
    of RPA projects in size and complexity as well as a differentiation of distinct
    ways of measuring cost, which together form a 3 × 3 costing matrix of RPA projects.
    Third, we suggest a comprehensive collection of cost drivers for RPA project cost
    estimation that can be situated in the costing matrix to provide guidance for
    RPA project of different scope, sizes, and extent.
  prefs: []
  type: TYPE_NORMAL
- en: 'The paper is structured as follows: In Sect. [2](#Sec2), we present the theoretical
    foundation for cost estimation metrics. Section [3](#Sec5) comprises the research
    design, including details on the conducted literature review. Section [4](#Sec6)
    introduces our novel framework for cost estimation, which we illustrate in Sect. [5](#Sec10)
    and discuss in Sect. [6](#Sec11). Lastly, in Sect. [7](#Sec12) we conclude with
    a summary and discussion.'
  prefs: []
  type: TYPE_NORMAL
- en: 2 Foundations for Cost Estimation in IT Automation Projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 2.1 Comparison of Cost in IT Automation Projects and RPA Projects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Traditional IT automation projects implementing enterprise software or BPM software
    are considered to be heavyweight implementation projects, as they require long-term
    and intensive design and testing within the already existing IT infrastructure
    [[2](#CR2), [6](#CR6)]. Similarly, these automation projects require application
    programming interfaces (API) to existing software to automate tasks across different
    applications. These APIs are not always available or sufficient and sometimes
    must be implemented first, before any automation can be approached [[7](#CR7)].
    In contrast, RPA represents a lightweight automation approach as it only focuses
    on the pre-existing presentation layers of (enterprise) software enabling rapid
    development and rollout [[3](#CR3)]. Compared to traditional automation projects,
    RPA aims to imitate human behavior rather than automate tasks within the IT backend.
    This anthropomorphic characteristic allows business users, without extensive programming
    knowledge, to develop RPA robots on their own that mimic themselves [[8](#CR8)].
  prefs: []
  type: TYPE_NORMAL
- en: Hence, it is evident that these characteristics also impact the resulting costs
    of implementations [[2](#CR2)]. While automation projects for enterprise software
    mainly produce high costs due to their lengthy and labor-intensive customization
    [[9](#CR9)], RPA is often considered as a bridging technology that enables rapid
    automation until backend integration is financially and organizationally feasible
    [[3](#CR3)]. Thus, in traditional automation projects, costs usually arise before
    and during project implementation [[2](#CR2), [6](#CR6)]. In contrast, in RPA
    software robots that only access the presentation layer of legacy software are
    prone to errors as adjustments to the user interface (UI) can cause the software
    robot to become inoperable [[7](#CR7)]. This results in long-term costs for operating
    and maintaining RPA robots [[10](#CR10)]. Consequently, the nature and timing
    of how cost drivers occur may vary compared to traditional automation projects.
  prefs: []
  type: TYPE_NORMAL
- en: However, while various cost drivers that occur during and after a traditional
    automation project are well researched [[6](#CR6)], the lack of holistic and scientific
    studies focusing on cost drivers within RPA projects becomes apparent [[2](#CR2)].
    To measure RPA costs more accurately and appropriately, they need to be systematized
    in a structured fashion.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Dimensions of Measurement Metrics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To measure the success of an IT automation project, companies must compare benefits
    and costs of such implementations in the long and short term. While calculating
    benefits can be challenging as they can arise as both quantitative and qualitative
    factors, calculating costs usually relies on quantitative drivers [[11](#CR11)].
    In practice, the success evaluation is done by applying several key performance
    indicators focusing on different aspects and time periods [[11](#CR11)–[13](#CR13)].
  prefs: []
  type: TYPE_NORMAL
- en: Theory and practice distinguish these key performance indicators in *absolute*
    and *relative metrics* to differentiate between the overall success and the effectiveness
    of a project [[11](#CR11), [14](#CR14)–[19](#CR19)]. The effectiveness is measured
    with the return on investment (ROI) [[16](#CR16)–[18](#CR18), [20](#CR20), [21](#CR21)].
    These two metrics are supplemented with the metric *time to ROI* to enable alignment
    with a company’s strategic plans. Time to ROI is the time required for benefits
    to equal costs [[18](#CR18), [21](#CR21)]. Consequently, measuring success in
    various RPA implementation projects requires taking these key performance indicators
    into account.
  prefs: []
  type: TYPE_NORMAL
- en: 3 Research Methodology
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our research is based on a structured literature review, which we used to synthesize
    existing scientific considerations on the costing of RPA projects. Further, we
    extended our structured literature review through the integration of practical
    contributions to provide a comprehensive overview of research and practice. In
    the following we describe a comprehensive overview of our procedure and a meta-synthesis
    of the findings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Procedure of Structured Literature Review.To ensure scientific rigor, we conducted
    a structured literature review according to vom Brocke et al. [[22](#CR22)]. Since
    RPA is intersecting many research fields, we queried multiple databases. We focused
    on the computer science related databases ACM Digital Library and IEEE Xplore.
    Further, we queried the information systems related databases Science Direct and
    AIS eLibrary. Lastly, we included the database SpringerLink, for contributions
    from multidisciplinary research fields. Thereby, we use following search query:
    *“RPA OR ‘robotic process automation’”*. In doing so, we intentionally kept the
    search query generic to avoid excluding articles that indirectly discuss various
    cost drivers of RPA. Further, due to the novelty of the subject, we did not restrict
    our research results to any form of outlet rankings. Following this strategy,
    we found 1,522 academic contributions dealing with the topic of RPA. Through abstract,
    title, and keyword analysis, followed by full-text analysis, as well as forward
    and backward search of the remaining contributions, we found only *n* = 8 academic
    contributions that were relevant to our cause. We have classified contributions
    as relevant that describe and discuss the cost drivers in detail, rather than
    just naming them. Figure [1](#Fig1) provides an overview of the process.![../images/509088_1_En_2_Chapter/509088_1_En_2_Fig1_HTML.png](../images/509088_1_En_2_Chapter/509088_1_En_2_Fig1_HTML.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 1.
  prefs: []
  type: TYPE_NORMAL
- en: Results of the literature review according to vom Brocke et al. [[22](#CR22)]
  prefs: []
  type: TYPE_NORMAL
- en: Extension of Structured Literature Review.
  prefs: []
  type: TYPE_NORMAL
- en: Since we found only *n* = 8 contributions dealing with cost drivers, we extended
    our results by integrating practice-oriented and, thus, non-peer-reviewed contributions.
    To do so, we used the search query from our structured literature review and applied
    it to Google search. Here we have focused on reports and white papers from consulting
    firms and software development companies, describing real-world RPA implementations.
    The prioritization of the result presentation was done by the Google search based
    on the search query. We followed Aldiabat et al. [[23](#CR23)] and terminated
    our search when we noticed content saturation. To ensure an adequate relation
    with academic papers, settled for a total of *n* = 8 effectually distinct practice
    contributions dealing with cost drivers. As a result, we used *n* = 16 contributions
    from academia and practice to derive our framework.
  prefs: []
  type: TYPE_NORMAL
- en: Analysis Procedure.
  prefs: []
  type: TYPE_NORMAL
- en: 'We followed vom Brocke et al. [[22](#CR22)]’s recommendation and subdivided
    the findings into units of similar content to synthesize previous research. Thus,
    we investigated all contributions to derive different costs drivers. Then, we
    compared these cost drivers, grouped similar drivers, and revisited all contributions
    based on these findings. As a result, we derived *n* = 11 different cost drivers
    from both types of literature. Since, the classification was performed by a single
    coder, we followed the recommendations of Fleiss’ Kappa statistics [[24](#CR24)]
    and performed a blind-folded classification with a second coder, to ensure the
    quality of our results. The comparison of the classifications yielded a so-called
    “Excellent” result *(k: 0.87)*.'
  prefs: []
  type: TYPE_NORMAL
- en: Meta-Analysis.In Fig. [2](#Fig2), we present a meta-analysis of the derived
    cost drivers. On the left side, we show the distribution of cost drivers for each
    year, as well as the overall proportional distribution on the right side.![../images/509088_1_En_2_Chapter/509088_1_En_2_Fig2_HTML.png](../images/509088_1_En_2_Chapter/509088_1_En_2_Fig2_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.
  prefs: []
  type: TYPE_NORMAL
- en: Meta-synthesis of literature review
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the results, it is noticeable that in the early stages of RPA research
    (2018), the number of reported cost drivers (*n* = 8) is relatively low. In contrast,
    since 2019, there has been an increase in contributions presenting different cost
    drivers. While cost drivers such as software licenses (*n* = 12, ≈20%), infrastructure
    and hardware (*n* = 9, ≈15%), training (*n* = 7, ≈12%), and RPA implementation
    (*n* = 7, ≈12%) were mentioned most frequently, cost drivers such as overhead
    (*n* = 3, ≈5%) or governance (*n* = 2, ≈3%) were mentioned only a few times.
  prefs: []
  type: TYPE_NORMAL
- en: 4 Cost Estimation in Robotic Process Automation Projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 4.1 Cost Drivers in RPA Projects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'RPA projects consist of three general phases: initialization, implementation,
    and scaling [[3](#CR3), [25](#CR25)]. Each stage has consequences to the costs
    of a project. The benefits of RPA, such as the efficiency and accuracy of the
    process [[26](#CR26)], are offset by the costs, making RPA investments profitable
    [[27](#CR27), [28](#CR28)]. The cost components of RPA depend on the number and
    types of software robots as well as the scale and complexity of the process [[29](#CR29),
    [30](#CR30)]. Based on our literature review, we identified eleven cost drivers,
    which we grouped into: development (D), investment (I), and operation (O), as
    shown in Table [1](#Tab1).Table 1.'
  prefs: []
  type: TYPE_NORMAL
- en: Cost drivers in RPA projects
  prefs: []
  type: TYPE_NORMAL
- en: '| Costs | Description | Group |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Consultancy [[17](#CR17), [25](#CR25), [31](#CR31), [32](#CR32)] | External
    experts supporting the limited resources and skills of a company implementing
    RPA | D |'
  prefs: []
  type: TYPE_TB
- en: '| Planning & design [[15](#CR15), [17](#CR17), [25](#CR25), [33](#CR33)] |
    Initial project-management-related activities including assessing potential processes,
    (re-) designing process flows, selecting resources, and scheduling implementation
    steps | D |'
  prefs: []
  type: TYPE_TB
- en: '| Robot implementation [[17](#CR17), [18](#CR18), [27](#CR27), [32](#CR32)–[34](#CR34)]
    | The costs incurred for internal employees being assigned to the implementation
    of the software robot | D |'
  prefs: []
  type: TYPE_TB
- en: '| Enhanced robot implementation [[17](#CR17), [28](#CR28), [32](#CR32)] | Enhanced
    robot implementation is necessary when the standard functionality of typical RPA
    low-code environments does not suffice to realize the software robot, typically
    to realize intelligent capabilities such as OCR, NLP, or image recognition | D
    |'
  prefs: []
  type: TYPE_TB
- en: '| Testing [[15](#CR15), [17](#CR17), [28](#CR28), [32](#CR32)] | All activities
    to observe, record, and evaluate the system or component under specific operating
    conditions | D |'
  prefs: []
  type: TYPE_TB
- en: '| Training [[17](#CR17), [21](#CR21), [25](#CR25), [32](#CR32), [33](#CR33),
    [35](#CR35)] | All expenses to train technical and business staff in understanding
    potential processes, learning the use of automation technology such as RPA, and
    interpreting its performance | D |'
  prefs: []
  type: TYPE_TB
- en: '| Infrastructure & hardware [[17](#CR17), [18](#CR18), [27](#CR27), [28](#CR28),
    [31](#CR31)–[33](#CR33), [35](#CR35)] | The costs to purchase and integrate hardware
    for hosting, implementing, and running software robots. That is primarily (virtual)
    servers and desktops. These can be bought or rented | I, O |'
  prefs: []
  type: TYPE_TB
- en: '| Software licenses [[17](#CR17), [18](#CR18), [21](#CR21), [27](#CR27), [28](#CR28),
    [32](#CR32)–[39](#CR39)] | Software is necessary to run servers, desktops, develop
    and software robots. Additional licenses may also be necessary to access legacy
    software. Licenses can be bought or subscribed | I, O |'
  prefs: []
  type: TYPE_TB
- en: '| Governance [[35](#CR35)] | Costs associated with managing the new organizational
    structure after introduction software robots. For example, data governance, infrastructure
    or governance & IT governance | O |'
  prefs: []
  type: TYPE_TB
- en: '| Maintenance [[15](#CR15), [21](#CR21), [25](#CR25), [28](#CR28), [32](#CR32),
    [33](#CR33), [35](#CR35)] | All expenses related to continuous maintenance of
    software robots. E.g., software, hardware, updates, and human resources for exception
    handling, maintenance and improvement | O |'
  prefs: []
  type: TYPE_TB
- en: '| Overhead [[27](#CR27), [32](#CR32), [39](#CR39)] | Costs incurred to support
    automation process which do not directly involve RPA investment. For example,
    HR, Finance, IT administration, rent, utilities, insurance, office supplies, as
    well as accounting and legal expense | O |'
  prefs: []
  type: TYPE_TB
- en: '*Legend of Cost Group**: D: Development, I: Investment, O: Operation.*'
  prefs: []
  type: TYPE_NORMAL
- en: Development Cost.
  prefs: []
  type: TYPE_NORMAL
- en: Development cost are one-time costs, which summarize internal and external personnel
    costs. In IT projects, these costs can exceed other costs groups many times over
    and have to be considered over multiple periods. Implementation costs involve
    expenditures related to preparing, installing, configuring, and deploying RPA
    solutions in an organization [[35](#CR35)]. It is generally agreed that the cost
    of RPA implementations is significantly lower than traditional IT development
    projects ranging from small-scale custom development to enterprise software introduction
    although all require special knowledge for their development [[38](#CR38)]. Typical
    development costs are planning & design, consultancy, training, RPA development,
    testing, and enhanced development cost.
  prefs: []
  type: TYPE_NORMAL
- en: Investment Cost.
  prefs: []
  type: TYPE_NORMAL
- en: Investment cost are one-time activities as well that typically generate costs
    early in a project. However, investments are not limited to the initialization
    phase of the project, but they can occur in any phase. When a project scales,
    such as adding unattended software robots or adding cognitive capabilities (e.g.,
    object character recognition (OCR), natural language processing (NLP), or image
    recognition), the company must invest in new software or hardware. Typical investment
    costs are software licenses and infrastructure & hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Operation Cost.
  prefs: []
  type: TYPE_NORMAL
- en: Operation cost are all the expenses to run the respective software within an
    organization. This entails that the costs will continue to exist as long as the
    software robots operate [[27](#CR27)]. Synonyms are running costs or ongoing costs.
    The operating costs consist of rented software licenses and infrastructure, maintenance,
    overhead, and governance costs.
  prefs: []
  type: TYPE_NORMAL
- en: 4.2 Systematization of Cost Estimation in RPA Projects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When creating a measurement framework, there are two inherent conflicts. One
    conflict is inherent to the information content: Should the information be presented
    and considered as accurate as possible or as easily accessible as possible? The
    second conflict is about choosing the right RPA project and thus the proper prioritization:
    Should it be implemented as quickly as possible with high efficiency, or should
    it have a significant impact?'
  prefs: []
  type: TYPE_NORMAL
- en: The solution to these conflicts is to offer not one metric but a set of metrics.
    The 3 × 3 matrix shown in Fig. [3](#Fig3) solves these two conflicts with a systematic
    effort- and situation-oriented approach suitable for RPA.
  prefs: []
  type: TYPE_NORMAL
- en: The metrics for information content are divided into the *project scopes* of
    a *single RPA robot*, *multiple RPA robots*, and *institutionalized use of RPA*.
    When using RPA for a single robot, there is no need for a detailed cost-benefit
    analysis. There is only the need to provide a quick assessment whether the automation
    project can make a difference. However, the effort and the dedication to implement
    the very first robot must be adequate to set a good example. However, when setting
    up multiple software robots further factors (maintenance, enhanced robot implementation,
    testing, training, infrastructure & hardware) have to be considered. Moreover,
    institutionalizing RPA in an organization as an automation paradigm requires further
    oversight that must be incorporated in cost measurements (overhead, governance,
    planning & design). A more detailed description follows and is also made transparent
    in Fig. [4](#Fig4).
  prefs: []
  type: TYPE_NORMAL
- en: According to Herm et al. [[3](#CR3)], generally recommended steps for implementing
    RPA projects are identification, alignment, screening, evaluation of business
    case, process selection, RPA software selection, proof of concept, and RPA rollout.
    The coordination effort and interdependencies increase naturally when several
    RPA projects are conducted at the same time. Accordingly, the need to present
    the costs in more detail increases. Nevertheless, the effort for evaluation should
    still be reasonable and the framework not overly complex for implementation projects
    of single software robots resulting in needs for the scope of a *single software
    robot*.![../images/509088_1_En_2_Chapter/509088_1_En_2_Fig3_HTML.png](../images/509088_1_En_2_Chapter/509088_1_En_2_Fig3_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 3.
  prefs: []
  type: TYPE_NORMAL
- en: 3 × 3 matrix for cost estimation in RPA projects
  prefs: []
  type: TYPE_NORMAL
- en: The steps involved in implementing *multiple software robots* are basically
    the same as for one RPA project. Only the selection of the RPA software can be
    omitted, since it is recommended to work only with one RPA software. However,
    the complexity to manage multiple projects at the time rises.
  prefs: []
  type: TYPE_NORMAL
- en: When RPA is introduced for *institutionalized use* into a company, the complexity
    and effort increases even further with the additional benefits of increased efficiency
    and oversight. In addition to the project-specific efforts already described,
    efforts sustainable integration into the organization and scaling must be considered
    [[3](#CR3)]. Respective RPA support processes are management support, change management,
    IT integration, and governance to integrate RPA sustainably. Scaling activities
    include the efforts to run, grow, or eventually retire RPA projects [[3](#CR3)].
    These activities require a detailed analysis of the costs as they have to be contrasted
    to heavyweight integration alternatives. High accuracy of the analysis is more
    important than a fast analysis with low effort.
  prefs: []
  type: TYPE_NORMAL
- en: 'Regardless of the *project scope*, the *measurement dimension* is essential
    when measuring RPA projects. That is, it is essential to decide whether the goal
    is to achieve success quickly or to achieve great success. Statements about the
    magnitude and size of the success are given by *absolute metrics*. Statements
    about the speed and effectiveness of success are given by *relative metrics*.
    Both are important for measurement and must be weighed against each other when
    managing projects. For first RPA projects and the pilots, it makes more sense
    to select projects with faster success to prove the technology’s benefits and
    identify strengths and weaknesses of the technology early on [[3](#CR3)]. It is
    to be expected that these early projects tend to be significantly smaller in the
    absolute dimension. These measurements can be supplemented by the *time to ROI*,
    as this metric illustrates the effectiveness over time and indicates when the
    invested costs break-even. To differentiate the three dimensions, the following
    description provides more details:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Absolute metrics** quantify the significance and size of the success for
    the company.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Relative metrics** quantify the project success in comparison to existing
    projects in the company in terms of speed and effectiveness.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time to ROI** helps to synchronize the projects with the strategic plan of
    the company and is also a relative metric.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To evaluate the success once benefits are known, a classic cost-benefit analysis
    can be used.
  prefs: []
  type: TYPE_NORMAL
- en: 4.3 A Framework of Cost Estimation with Varying Project Scopes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the following, we illustrate a framework based on the extended literature
    review and the theoretical considerations above. Additionally, we differentiate
    all cost drivers according to the project scope of occurrence (single, multiple,
    institutionalization), cost group (D, I, O), and the type of occurrence (optional,
    mandatory). See Fig. [4](#Fig4) for an overview.![../images/509088_1_En_2_Chapter/509088_1_En_2_Fig4_HTML.png](../images/509088_1_En_2_Chapter/509088_1_En_2_Fig4_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 4.
  prefs: []
  type: TYPE_NORMAL
- en: A framework for cost estimation of RPA projects
  prefs: []
  type: TYPE_NORMAL
- en: Single RPA Robot.
  prefs: []
  type: TYPE_NORMAL
- en: Within a single software robot implementation, cost estimation should be quickly
    calculable. Hence, only the direct cost drivers related to software licensing
    costs [[21](#CR21)], robot implementation [[17](#CR17)], and consultancy costs
    [[25](#CR25)] shall be considered, whereby consulting and licensing costs may
    even be optional during this stage of development [[30](#CR30)]. Looking at software
    licensing costs, RPA vendors often provide trial licenses or community editions
    with a limited feature set [[30](#CR30)]. Similarly, due to the low-code nature
    of RPA, there may not be a need for dedicated programmers or external consultants.
    As a result, business users can develop initial RPA robots themselves and thus
    only generate implementation costs without the need for external cost or additional
    RPA developers [[29](#CR29), [30](#CR30)]. Finally, infrastructure costs are negligible
    at this stage, as a software robot can run attend on any user’s desktop [[30](#CR30),
    [38](#CR38)].
  prefs: []
  type: TYPE_NORMAL
- en: Multiple RPA Robots.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, conducting projects to realize multiple software robots at the
    same time also entails further costs. Costs such as training [[25](#CR25)], testing
    [[15](#CR15)], and maintenance [[35](#CR35)] are mandatory to consider, while
    infrastructure costs [[21](#CR21)] and additional implementation costs [[35](#CR34)]
    may incur. Based on our research, we noticed that the need for training and teaching
    additional employees is necessary to ensure a general acceptance regarding the
    integration of a software robot due to its anthropomorphic nature [[29](#CR29),
    [30](#CR30)]. Similarly, when applying multiple software robots for a business
    process, testing and maintaining these robots have to receive more awareness and
    diligence to avoid side effects [[15](#CR15), [30](#CR30)]. In contrast, the integration
    of additional software robots for already automated process, for example, when
    scaling up execution volume [[21](#CR21), [29](#CR29)] or integrating intelligent
    features such as NLP for the automation of further process variations [[35](#CR35)],
    will – when applied – result in additional development time and costs. These drivers
    are closely connected to different cost drivers such as RPA implementation costs,
    licensing costs, or consultancy costs [[35](#CR35)]. As an example, due to the
    progressive nature of developing AI-based systems and a lack of knowledge within
    the companies, consultants may have to be involved [[40](#CR40)].
  prefs: []
  type: TYPE_NORMAL
- en: Institutionalized Use of RPA.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, when introducing RPA as a holistic automation approach, enterprises
    must also consider additional cost drivers such as planning and design [[15](#CR15)],
    governance [[35](#CR35)], and overhead costs [[39](#CR39)]. Regarding the former,
    when holistically integrating RPA, various steps, such as selecting potential
    processes in a structured manner, resource handling, or scheduling need to be
    performed more accurately, as poor decision-making may negatively impact the operation
    of multiple software robots [[30](#CR30)]. Further, similar to the cost of deploying
    and running a center of excellence (CoE) within companies to manage business process
    execution, the holistic integration of RPA also requires governance, resulting
    in additional costs [[29](#CR29), [30](#CR30), [35](#CR35)]. While RPA vendors
    provide orchestrators for handling software robots [[30](#CR30)], Herm et al.
    [[3](#CR3)] call for integrating RPA services into existing CoEs or creating dedicated
    RPA CoEs to manage process automation at a larger scale. Ultimately, within the
    scope of a holistic automation initialization specific overhead costs such as
    electricity or computing power, for example for AI development and maintenance,
    may have to be considered. While these cost drivers may be negligible for a small
    number of software robots and automated processes, they are getting significant
    when scaling up and institutionalizing IT automation with RPA [[29](#CR29), [30](#CR30)].
  prefs: []
  type: TYPE_NORMAL
- en: 5 Illustrative Use Case^([1](#Fn1))
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine a large multinational conglomerate company or a medium-sized or large
    enterprise that requires data aggregation across multiple sources into a management
    dashboard. This data is often not convenient or accessible via a structured extract,
    transform and load process. The case aggravates for data from cloud applications
    that only provide front-end access.
  prefs: []
  type: TYPE_NORMAL
- en: Now to populate said management dashboard with the required information, an
    employee, a temporary worker, or an intern collects this data via copy and paste
    from the various application screens and formats, aggregates, and integrates the
    data into the target application. Each week or month this tedious task takes a
    lot of time and is prone to human errors of pasting data in the wrong field or
    mistyping a value.
  prefs: []
  type: TYPE_NORMAL
- en: Trialing a *single RPA robot* in any company size and setup should be a straightforward
    exercise with minimal costing requirements. Here, the company uses its own resources
    to implement the software robot for the most tedious data aggregation activities
    using a free trial license running on the employee’s desktop overnight. Hence,
    cost estimation should solely be based on the cost of implementing the software
    robot and held against the benefits the company experiences in relative metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Once the software robot is in operation, more data aggregation tasks are sought
    to be automated and data entry tasks could also be included. This requires further
    software robots that will work in parallel. Hence, cost estimation needs to consider
    costs for *RPA software robots*. That is, testing, training, maintenance becomes
    more of a structured activity and cannot be subsumed under implementation cost.
    Further, appropriate license agreements need to be made in a structured fashion
    as they may lead to a vendor lock-in. Moreover, the software robots require more
    resources to run 24/7 and therefore infrastructure must be (internally) rented,
    which incurs cost. Lastly, there is data that standard robots cannot copy as they
    originate from scanned letters. So far, a human worker had to perform these tasks.
    Now, advanced OCR functionality shall be implemented by external consultants working
    with internal developers. Altogether, this requires a more detailed calculation
    of the cost due to the scope not only in relative but also in absolute terms.
  prefs: []
  type: TYPE_NORMAL
- en: After several months of operation, the company is very happy with the automation
    approach of RPA and intends to *institutionalize the use of RPA*. That is, they
    establish RPA as a bridging technology before heavyweight projects can create
    value and a cost-effective alternative for data aggregation and migration, especially
    from cloud services. This is more than the sum of its parts (i.e., its robots).
    Hence, to establish a structured prioritization pipeline of multiple projects,
    provide costing templates for new projects, and manage multiple projects at the
    same time, an RPA CoE must be established and staffed for planning and design
    activities as well as to monitor and govern RPA proliferation in the company.
    As soon as this army of software robots requires a noticeable amount of utilities
    as well as occupies full-time personnel, overheads for electricity, compute power,
    etc. as well as office space may need to be included in the estimation of RPA
    cost. This cost will be measured in relative, absolute, and especially for bridging
    use cases in terms of time to ROI.
  prefs: []
  type: TYPE_NORMAL
- en: 6 Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our cost estimation framework in RPA projects can be applied based on three
    project scopes with up to eleven distinct mandatory or optional cost drivers using
    a 3 × 3 costing matrix. It is a holistic approach that is suitable for single
    RPA robots to test out the technology initially, but it is also applicable for
    the institutionalized use of RPA as an automation paradigm in any organization.
    Our results come with several theoretical and practical implications that we discuss
    in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Theoretical Implications.
  prefs: []
  type: TYPE_NORMAL
- en: Following Kohli and Grover [[41](#CR41)] our research contributes towards manifesting,
    when an RPA automation project can add value to companies. While IT creates value
    through many different aspects such as competitive advantage or increasing operational
    effectiveness [[41](#CR41)] our research focuses on the investigation of monetary
    aspects namely cost drivers. Even though the results of the academic literature
    review were limited, our survey of cost drivers is the first comprehensive analysis
    of this emerging topic. Our consideration of practice reports does not only enrich
    and justify our findings, but it extends it with current observations from the
    field that we scrutinized theoretically. While our dimensions to structure cost
    drivers for RPA projects are not unique to RPA, and none of the concepts is necessarily
    unheard of, their combination provides a novel systematization of costs in RPA
    projects that can be readily applied in multiple projects scopes with multiple
    perspectives on cost estimation. Therefore, it provides a novel lens through which
    one can consider cost estimation in RPA projects. It enables straightforward measurements
    with minimal overhead that are of immediate practical value as well as comprehensive
    considerations of the extended costs of widespread and institutionalized automation
    with RPA. Our framework is extensible. That is, the emergence of novel cost drivers
    due to the evolution from symbolic RPA to intelligent RPA [[40](#CR40)] can be
    incorporated naturally. It is grounded in theory but designed for practical application.
  prefs: []
  type: TYPE_NORMAL
- en: Practical Implications.
  prefs: []
  type: TYPE_NORMAL
- en: First and foremost, the framework offers a practical guideline that aims to
    be useful for practice and extends beyond the simplistic calculation of *“salary
    times working hours”* prevalent in contemporary RPA projects. With the 3 × 3 costing
    matrix, cost estimation can be contextualized to fit a range of project scopes.
    It is simple enough to be of immediate pragmatic use to structure costing in early
    RPA projects, but it is also a comprehensive guideline to consult when embarking
    or continuing one’s automation journey with RPA. That is, a company’s cost estimation
    using the framework can grow as the projects grow from the first software robot
    to the institutionalized use of this technology. However, these cost drivers will
    change as companies begin to incorporate other automation technologies such as
    self-learning robots [[40](#CR40)] that can maintain themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Peculiarities of RPA Implementation Costs.
  prefs: []
  type: TYPE_NORMAL
- en: While the cost drivers presented in Table [1](#Tab1) are derived from RPA-based
    literature, we found similarities to cost drivers from traditional automation
    projects. In this context, cost drivers such as consulting, planning & design
    or testing are also relevant in these types of projects [[2](#CR2), [6](#CR6)].
    However, the occurrence time differs, since many stages in traditional projects
    are performed before the rollout, compared to the rapid development and continuous
    maintaining behavior of RPA projects [[3](#CR3)]. Also, when comparing RPA implementations
    with automation techniques that use artificial intelligence (AI), e.g., cognitive
    automation, many similarities and differences become apparent. For example, while
    AI-based systems must deal with drifts in the data, resulting in continuous adjustments
    [[40](#CR40)], RPA robots have to be maintained when the presentation layer of
    software is changed. Further, cost driver such as consultancy, planning & design,
    testing, training, or hardware & infrastructure, also apply to these automation
    projects [[42](#CR42)] However similar to traditional implementation projects,
    most of these cost drivers are primarily incurred before the actual rollout, as
    AI-based systems require a lot of data collection and heavyweight training, especially
    when it comes to neural networks [[43](#CR43)].
  prefs: []
  type: TYPE_NORMAL
- en: Limitations.
  prefs: []
  type: TYPE_NORMAL
- en: Our work is not without limitations as the focus of our work was solely on the
    cost perspective. We did not yet systematize benefits of RPA, which would be necessary
    for a comprehensive cost-benefit calculation. Further, we did not survey costing
    for just any type of automation project and, thus, we may have missed a suitable
    metric. Thus, we were not able to quantify the change in costs for the various
    drivers when scaling up the project scopes. In addition, we stayed on the level
    of cost drivers and did not analyze individual cost factors and aggregated them
    to concrete formulae. Lastly, we used the scenario technique and theoretical arguments
    to assess our cost framework and did not perform naturalistic evaluation workshops
    or interviews with practice. These are subject to future research.
  prefs: []
  type: TYPE_NORMAL
- en: 7 Conclusion and Outlook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To the best of our knowledge, a comprehensive collection and structuring of
    cost drivers for RPA has not been undertaken and constitutes a research gap and
    practical problem for many companies. In response, we categorized and prioritized
    cost drivers for RPA projects and derived a novel cost framework specifically
    for the cost estimation in such projects. We illustrated the framework’s usefulness
    and discussed the framework’s implication for theory and practice. Our implication
    entails that the framework provides a novel lens to analyze costs in RPA projects
    and assists practice in objectively budgeting and reviewing costs in RPA projects.
    To counter our limitations, future research will need to review and adapt cost
    formulae to suit RPA, apply the framework to real-life cases, and revisit costing
    in other automation domains to assess the transferability of results.
  prefs: []
  type: TYPE_NORMAL
- en: '© Springer Nature Switzerland AG 2021J. González Enríquez et al. (eds.)Business
    Process Management: Blockchain and Robotic Process Automation ForumLecture Notes
    in Business Information Processing428[https://doi.org/10.1007/978-3-030-85867-4_3](https://doi.org/10.1007/978-3-030-85867-4_3)'
  prefs: []
  type: TYPE_NORMAL
- en: Adding Decision Management to Robotic Process Automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Maximilian Völker^([1](#Aff12) [ ](#ContactOfAuthor1)), Simon Siegert^([1](#Aff12) [ ](#ContactOfAuthor2))
    and Mathias Weske^([1](#Aff12) [ ](#ContactOfAuthor3))(1)Hasso Plattner Institute,
    University of Potsdam, Potsdam, GermanyMaximilian Völker (Corresponding author)Email:
    [maximilian.voelker@hpi.de](mailto:maximilian.voelker@hpi.de)Simon SiegertEmail:
    [simon.siegert@student.hpi.de](mailto:simon.siegert@student.hpi.de)Mathias WeskeEmail:
    [mathias.weske@hpi.de](mailto:mathias.weske@hpi.de)'
  prefs: []
  type: TYPE_NORMAL
- en: Abstract
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Robotic Process Automation promises to release employees from repetitive and
    monotonous work, providing space for creative and innovative tasks. RPA tools
    provide a wide range of techniques to automate user interactions, including filling
    forms and copying values between applications. While it is accepted that decisions
    play an important role in business processes, they are not a first-class citizen
    in RPA. This paper proposes a framework and a software architecture that integrates
    decision management into RPA. The work is evaluated by a prototype that introduces
    Decision Model and Notation (DMN) capabilities to the RPA software tool UiPath
    by utilizing Camunda’s decision engine.
  prefs: []
  type: TYPE_NORMAL
- en: KeywordsRobotic Process AutomationDecision managementRPA design
  prefs: []
  type: TYPE_NORMAL
- en: 1 Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Over the last few years, Robotic Process Automation (RPA) gained momentum in
    research, fueled by its adoption in industry [[1](#CR1)]. With the promise of
    taking digital, repetitive work off the hands of employees, companies are increasingly
    using RPA to improve the efficiency of their processes while freeing up human
    labor for more creative and innovative tasks [[3](#CR3), [23](#CR23)]. Using software
    robots, RPA tools imitate the behavior of human users, such as mouse and keyboard
    inputs, but are also able to, for example, query web services and control applications [[14](#CR14),
    [23](#CR23)]. As artificial intelligence techniques have improved, the scope of
    RPA applications has continued to expand. Nowadays, RPA can not only imitate interactions
    but also gains more and more human capabilities, such as text recognition and
    learning from past executions [[7](#CR7), [14](#CR14), [19](#CR19)].
  prefs: []
  type: TYPE_NORMAL
- en: Despite the progress in terms of functionality, the bot development process
    did not change much. Mostly targeting low-code or no-code developers, many RPA
    tools offer graphical user interfaces to create new bot workflows using predefined
    building blocks [[14](#CR14)].
  prefs: []
  type: TYPE_NORMAL
- en: In [[22](#CR22)] we have observed that RPA vendors often only support *if/else*
    or *switch* constructs to steer the process. Thus, processes with complex decision
    logic are either very cumbersome to implement or the potential RPA process may
    even be discarded for automation, which motivates the need for better decision
    management in RPA.
  prefs: []
  type: TYPE_NORMAL
- en: Similar issues were encountered for the business process modeling standard BPMN,
    such that decision-intensive processes led to complex process models with many
    nested branches [[4](#CR4), [24](#CR24)]. In traditional business process management,
    the Decision Model and Notation (DMN) standard [[21](#CR21)] was introduced to
    resolve the problem by separating the decision logic from the process flow [[4](#CR4)].
    In this work, we examine whether and how elements of DMN, as a proven modeling
    standard for decisions, could be integrated into RPA. For this purpose, we analyze
    the RPA lifecycle and transfer elements from DMN to RPA to benefit from its powerful
    but still visual representation of decision logic.
  prefs: []
  type: TYPE_NORMAL
- en: After an introduction to DMN and RPA presented in Sect. [2](#Sec2), a motivating
    example is introduced in Sect. [3](#Sec6). For the integration, the RPA lifecycle
    is analyzed and related to DMN in Sect. [4](#Sec7), outlining potential synergies,
    and a generic software architecture is described. In Sect. [5](#Sec12), a prototype
    is presented that demonstrates the integration of DMN in the RPA vendor UiPath,
    enabling new use cases that were previously difficult to realize. Additionally,
    limitations of the approach are discussed. Section [6](#Sec15) summarizes the
    contribution and provides hints for future research.
  prefs: []
  type: TYPE_NORMAL
- en: 2 Preliminaries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, preliminary knowledge about the decision model and notation
    standard as well as robotic process automation is provided.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Decision Model and Notation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Modeling complex decisions using control flow often results in large, spaghetti-like
    models as it, for example, has been reported for the Business Process Model and
    Notation (BPMN) standard [[24](#CR24)]. While such models are capable of correctly
    representing the decision logic, they are not only difficult to maintain, e.g.,
    when a particular aspect in the decision logic changes, but their complexity also
    impedes communication using the model [[4](#CR4)].
  prefs: []
  type: TYPE_NORMAL
- en: To solve this issue, the Decision Model and Notation (DMN) standard [[21](#CR21)]
    was introduced. It allows to separate the decision logic from the control flow
    logic in process models represented in BPMN [[20](#CR20), [21](#CR21)]. DMN enables
    the automated evaluation of decisions and can therefore be used in automated business
    processes. Nevertheless, the standard also focuses on comprehensibility for non-technical
    users [[10](#CR10)].
  prefs: []
  type: TYPE_NORMAL
- en: DMN provides various notation elements for representing highly complex decisions [[21](#CR21)].
    The central element is the *Decision Table*, which specifies the rules on how
    to derive the correct decision result from given input values. More specifically,
    a decision table consists of (i) a set of input parameters required for making
    the decision, (ii) a set of output variables whose values have to be determined
    based on the input parameters, as well as (iii) a list of rules that match values
    or value-ranges of the input parameters and assign the appropriate values to the
    output variables. So-called hit policies are used to specify how these rules are
    evaluated, e.g., whether only the first matching rule should be applied or the
    outputs of all matching rules should be returned.
  prefs: []
  type: TYPE_NORMAL
- en: An example for a decision table is given in the subsequent section in Fig. [3](#Fig3).
  prefs: []
  type: TYPE_NORMAL
- en: The DMN standard comprises additional elements, such as Decision Requirements
    Graphs, which are not further considered here.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Robotic Process Automation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While BPMN focuses on larger, often interdepartmental or even cross-organizational
    processes, the comparably new technology of Robotic Process Automation (RPA) concentrates
    on local workflows mainly on a single workstation [[11](#CR11)]. The main goal
    of RPA is to automate frequent and rule-based workflows performed by a user on
    a computer [[3](#CR3), [15](#CR15), [23](#CR23)], such as transferring data between
    different systems, like from an e-mail to a customer-relationship-management program.
    On the one hand, this is intended to relieve the user of such repetitive, monotonous
    tasks; on the other hand, it is expected to reduce the error rate and thus increase
    the overall quality [[23](#CR23)]. To perform such automation, so-called RPA bots
    are utilized, small software clients that imitate the behavior of the user, e.g.,
    by simulating mouse and keyboard interactions or more advanced operations [[3](#CR3),
    [23](#CR23)].
  prefs: []
  type: TYPE_NORMAL
- en: In this context, many RPA software vendors target business users, i.e., automation
    with RPA should ideally be possible quickly and preferably without any programming
    knowledge [[9](#CR9), [17](#CR17)]. Thus, many providers offer a graphical user
    interface to create RPA bots by combining predefined “building blocks” and thereby
    specifying a flow of individual automation operations [[14](#CR14)].
  prefs: []
  type: TYPE_NORMAL
- en: The steps to introduce robotic process automation are reflected in the RPA lifecycle
    introduced by Jimenez-Ramirez et al. [[16](#CR16)], which is given in Fig. [1](#Fig1).
  prefs: []
  type: TYPE_NORMAL
- en: The lifecycle enables the governance of entire RPA projects and ensures that
    the RPA software’s performance is increased iteratively.![../images/509088_1_En_3_Chapter/509088_1_En_3_Fig1_HTML.png](../images/509088_1_En_3_Chapter/509088_1_En_3_Fig1_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 1.
  prefs: []
  type: TYPE_NORMAL
- en: RPA lifecycle (cf. [[16](#CR16)])
  prefs: []
  type: TYPE_NORMAL
- en: The lifecycle starts with a context *analysis* phase to identify suitable processes
    for automation. Subsequently, the previously selected processes are further specified
    and modeled for automation in the *design* phase. In the *development* phase,
    these models are converted into executable programs, which are eventually run
    in the *deployment* phase. After the deployment, the bots are checked for errors
    in the *testing* phase, whereas in the subsequent *monitoring* phase, the robots
    are further operated and maintained. Gained performance metrics and insights into
    errors are then included in the next iteration of the lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: 2.3 Decisions in RPA
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For designing and developing RPA bots there is, unlike for business processes,
    no standard notation. Consequently, various vendor-specific syntaxes have emerged
    and therefore the support for different types of decision points in RPA bots differs
    from vendor to vendor. Table [1](#Tab1) shows the different possibilities for
    modeling decisions in selected, leading RPA tools, that are supported natively,
    i.e., are offered as building blocks for bots by default. All investigated providers
    offer basic *if/else* nodes with two outgoing control flow branches. Also, most
    of them provide the possibility to prompt the user a dialog with an input field
    or selection, which could be used to defer decisions to a human worker. More advanced
    constructs, such as *if/elseif* or *case* statements, i.e., elements with more
    than two outputs, are already less common and implemented with varying complexity.Table
    1.
  prefs: []
  type: TYPE_NORMAL
- en: Native decision capabilities of some RPA providers
  prefs: []
  type: TYPE_NORMAL
- en: '| Decision Type | UiPath | Blue Prism | Automation Anywhere | Robot Framework
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Human dialog | Yes | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| If/Else (2 outputs) | Yes | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| If/ElseIf/Else | No | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Switch/Case | Yes | Yes | No | No |'
  prefs: []
  type: TYPE_TB
- en: As a result, RPA encounters the same problem as BPMN. Workflows with more complex
    decisions lead to bloated models that are hard to understand and maintain [[22](#CR22)],
    which is a problem because RPA is supposed to take over rule-based processes and
    be easy to use. Of course, similarly to script activities in BPMN, many RPA vendors
    offer blocks for executing custom code in which decision logic could be realized.
    While this might be feasible for certain use cases, in general, it contradicts
    the philosophy of RPA to be accessible even without programming knowledge. In
    addition, the decision logic itself is hidden from business users, who thus cannot
    gain a holistic view of the robot’s function.
  prefs: []
  type: TYPE_NORMAL
- en: 3 Motivating Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following, a motivating example is presented to illustrate the challenges
    of decision-making in RPA models. Suppose a company frequently sends out advertising
    material in various forms, such as simple postcards, letters, and parcels. Depending
    on the form and scope of the campaign, different shipping costs accrue, and different
    departments of the company must be involved. For example, postcards for a national
    campaign can be directly issued by the applicant for 50 ct per piece, international
    postcards and domestic letters have to be commissioned via the sales department,
    and international letters, as well as any parcels, must be arranged with the logistics.
  prefs: []
  type: TYPE_NORMAL
- en: So far, the company has used a paper-based approach, i.e., the secretary received
    requests for a certain campaign, calculated the costs, and arranged the handover
    to the appropriate department. To simplify and streamline the communication process
    as well as to track requests, the company recently switched to digital documents,
    such that applications are now sent as PDF files. Still, the processing of the
    application remained a manual and humdrum task.
  prefs: []
  type: TYPE_NORMAL
- en: With RPA, automating the secretary’s workflow described above becomes feasible,
    as RPA is able to read and send e-mails with attachments and analyze PDF files,
    especially if they are uniformly formatted, like forms.![../images/509088_1_En_3_Chapter/509088_1_En_3_Fig2_HTML.png](../images/509088_1_En_3_Chapter/509088_1_En_3_Fig2_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.
  prefs: []
  type: TYPE_NORMAL
- en: RPA bot modeled with conventional decision elements (intentionally not readable)
    (Color figure online)
  prefs: []
  type: TYPE_NORMAL
- en: However, the resulting RPA process is complex and lengthy as the decision logic
    to determine the price and the department has to be modeled using the above-described
    elements, like *if/else*, and the decision part, therefore, takes up a majority
    of the model as shown in Fig. [2](#Fig2) (blue-framed box). Once created, the
    bot is of course functional, however, its maintenance is difficult. For example,
    as soon as the production and shipment costs for the material change, the RPA
    bot needs to be updated, but the nested structure hampers quick adjustments, not
    to mention more fundamental changes in the decision logic. Consequently, it is
    very time-consuming to create and maintain the RPA bot, and it is very likely
    that the use case is soon discarded for automation with established RPA solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Using DMN, however, the previously described decision can be modeled in a comprehensible
    and compact way, as shown in Fig. [3](#Fig3). Here, the individual rules for determining
    the correct costs and the department are defined, for example, that internationally
    sent postcards of any weight cost 80 ct per piece and must be ordered by the sales
    department. If now the RPA bot could make the decision using the decision table
    instead of using the control flow, the model, as well as the maintenance, could
    be facilitated.![../images/509088_1_En_3_Chapter/509088_1_En_3_Fig3_HTML.png](../images/509088_1_En_3_Chapter/509088_1_En_3_Fig3_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 3.
  prefs: []
  type: TYPE_NORMAL
- en: Illustrative decision table for determining shipment costs and the responsible
    department in the example
  prefs: []
  type: TYPE_NORMAL
- en: 4 Integration Concepts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, the feasibility of integrating DMN, with focus on decision
    tables, within RPA is explored. For this, each phase of the RPA lifecycle, as
    introduced in Sect. [2.2](#Sec4), is examined for potential barriers and problems,
    and solution concepts are presented, with particular focus on the prominent phases
    of design and development as well as the execution time.
  prefs: []
  type: TYPE_NORMAL
- en: For the *analysis* phase, i.e., the selection of processes that are suitable
    for automation with RPA, different frameworks were proposed. In general, RPA is
    found especially useful for less complex processes to allow for short implementation
    times [[23](#CR23)]. In terms of decision complexity, the integration of DMN can
    increase the number of suitable processes, since decisions that previously had
    to be laboriously modeled using control flow elements can then be created independently
    using DMN. Of course, not all decisions are suitable for automation with RPA and
    DMN. DMN is mainly suitable for modeling and making operational decisions that
    are well-defined, frequently executed, and rather have a local and short impact [[6](#CR6)].
    However, these requirements fit well with the characteristics of RPA processes,
    such as a high volume and degree of standardization, and the “digitized structured
    data input” [[23](#CR23)], important for an automated evaluation of decisions.
  prefs: []
  type: TYPE_NORMAL
- en: 4.1 Design
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After the selection of a suitable process, the *design* phase involves creating
    a visual RPA process model that defines the RPA agent’s relevant activities, structure,
    and data flow [[16](#CR16)]. These models also enable communication and exchange
    about the behavior that the RPA bot should exhibit.
  prefs: []
  type: TYPE_NORMAL
- en: The overall goal of integrating DMN into RPA is to separate the decision logic
    from the control flow. This separation is therefore particularly apparent and
    significant in the design phase. The logic for decision-making, previously defined
    using the available bot building blocks such as if/else, should now be extracted
    into a single RPA activity dedicated to decision-making by evaluating a corresponding
    decision table.
  prefs: []
  type: TYPE_NORMAL
- en: In general, RPA bots are created in an RPA vendor-specific model notation that
    provides the activities available for automation and allows selecting and arranging
    them in a process-like sequence. But, as mentioned before, there is no standardized
    modeling language for RPA. Instead, each provider of RPA tools maintains its specific
    solution of a graphical or textual notation to represent the model. However, it
    is recommended to prefer intuitive visual modeling tools, as they do not require
    specific IT development skills and thus make the creation of RPA process models
    accessible to domain experts [[12](#CR12)]. For the integration of DMN in RPA,
    graphical models are primarily suitable since DMN allows decisions to be represented
    by graphical elements and aims at being accessible to non-IT users as well [[21](#CR21)].
  prefs: []
  type: TYPE_NORMAL
- en: For creating RPA models in the respective model notation, several ways are conceivable.
    Recent approaches suggest mining or learning RPA bots from past executions (i.e., [[2](#CR2),
    [13](#CR13)]). However, these approaches are currently at the beginning of their
    development and are rarely adopted in industry tools. Hence, they will not be
    considered further here.
  prefs: []
  type: TYPE_NORMAL
- en: Consequently, the traditional manual modeling of RPA bots is still the predominant
    way. It involves human workers, domain experts, as well as technical experts [[23](#CR23)].
    The integration of DMN benefits from this setting, as all stakeholders can participate
    in the modeling process, and thus all decision-relevant factors can be considered
    due to the broad circle of participants. Decision activities can easily be added
    to the RPA process by hand just as any other type of activity is added to the
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Besides the manual modeling, most RPA tools offer a recording mode that tracks
    all interactions that a user performs on a computer system [[18](#CR18)], which
    is a quick way to capture an RPA process [[12](#CR12)]. This method, called screen
    recording, uses the observed user interactions to create a model that the RPA
    bot can then repeat exactly. However, screen recordings can only capture one execution
    path, i.e., a case-specific, linear workflow performed by a human user that does
    not include any choices regarding control flow or data. Therefore, this model
    creation method is suitable for repetitive processes without variation but not
    for processes with extensive decisions.
  prefs: []
  type: TYPE_NORMAL
- en: At the current state, the conventional modeling tends to be the most robust
    way to obtain an RPA process model with decision points. To enable better decision
    management for the screen recording approach as well, the recording functionalities
    would need to be adapted to support alternative execution branches.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the RPA model, the decision logic must now also be modeled, since,
    as already mentioned, the integration of DMN into RPA aims at separating the decision
    logic from the control flow. Here, the separation facilitates the communication
    regarding the decision logic, since it is not covered in the RPA bot model but
    explicitly represented using the DMN standard, enabling the collaboration of both
    business users and IT experts.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the RPA process, the modeling of the decision logic is mostly done
    manually. However, there are also approaches for mining decision logic from event
    logs [[4](#CR4), [8](#CR8)]. While this could result in beneficial synergies with
    the previously mentioned mining methods of RPA models, it is still a complex challenge
    to extract both the process and decisions together from an event log [[10](#CR10)]
    and requires more research.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rather than testing robots only in their execution environment [[16](#CR16)],
    the proposed integration enables initial verifications of RPA applications already
    at design-time using an existing formal property for decisions in business processes,
    decision soundness [[5](#CR5)]. Based on decisions defined in DMN decision tables,
    asserting decision soundness increases the quality of RPA bots. As a result, run-time
    problems such as deadlocks will not occur. Decision soundness is based on the
    following criteria [[5](#CR5)]:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Table Completeness:* any combination of inputs can be assigned to an output.
    E.g., the table in Fig. [3](#Fig3) is not complete as not every weight can be
    sent and the combination of *parcel* and *international* is not covered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Output Coverage:* the process can handle all outputs of the decision. E.g.,
    the bot can handle all possible values for the responsible department.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Dead Branch Absence:* any branch of the process flow after the decision point
    is reachable. E.g., check that there is no control flow branch in the bot for
    handling a value for the responsibility (like *promotion*), which was not defined
    in the table and could therefore never be reached.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While it is conceivable that these criteria could be checked in the context
    of RPA, it is, due to a lacking standard, heavily dependent on the chosen RPA
    vendor and requires further research. Nevertheless, such a formal verification
    at design-time could prevent avoidable errors during execution.
  prefs: []
  type: TYPE_NORMAL
- en: 4.2 Development
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The models created in the design phase are converted into executable code during
    the *development* phase. For the integration of DMN in RPA, additional requirements
    for the RPA tool’s infrastructure must be met here, such as creating, storing,
    and evaluating decision tables.
  prefs: []
  type: TYPE_NORMAL
- en: DMN models are typically created within a separate modeling software [[10](#CR10)].
    To enable the handling of DMN decisions within RPA, either a DMN modeling tool
    needs to be developed, or an existing one needs to be accessed from the RPA software
    architecture.
  prefs: []
  type: TYPE_NORMAL
- en: As now separate models for the decisions are created, these models must be managed
    and stored next to the RPA bot models so that they are accessible from the RPA
    system architecture. A decision model repository provides this functionality.
    Within this, previously created decision models can be accessed, and ideally also
    versioned, allowing for updates and rollbacks. Also, a repository might be created
    as a central component for models which facilitates the reuse of decision tables
    within different RPA agents.
  prefs: []
  type: TYPE_NORMAL
- en: 4.3 Deployment, Testing, and Operation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At run-time, not only the RPA bots must be enacted, but also decisions must
    be evaluated as soon as a bot reaches a decision point. Therefore, a so-called
    decision engine is required that can evaluate decision tables.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluation means that for given input variables the corresponding output is
    calculated according to the rules in the table. For this purpose, the decision
    table must be parsed and processed at the software robot’s run-time.
  prefs: []
  type: TYPE_NORMAL
- en: In general, for the evaluation of decision tables in RPA, two alternatives are
    conceivable, either a local embedding of a decision engine within the RPA tool
    or the connection to an external decision service. When the decision engine is
    directly embedded in the RPA software, no further, external dependencies are needed
    and decisions are created and evaluated locally. However, it requires the vendor
    to implement DMN functionalities that might already be present in potentially
    used BPMS systems.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, another approach is to outsource the modeling and evaluation of decisions
    to an external decision service. Such decision services usually already provide
    a modeling tool for defining decisions and a network interface through which third-party
    software can request their evaluation. To enable the processing of decision tables
    in RPA, the bot must only be able to connect to this interface to provide the
    required input values and obtain the decision’s outputs. As the decisions are
    not defined within the RPA tool anymore, unlike the local embedding, this external
    approach facilitates sharing the same decision logic between RPA bots or even
    business processes of the company.
  prefs: []
  type: TYPE_NORMAL
- en: If the second approach is chosen, the external decision engine needs to be available
    beginning with the *deployment* phase of the RPA bot to ensure a connection can
    be established when required.
  prefs: []
  type: TYPE_NORMAL
- en: For the *testing* and *operation* phases, when the RPA bots are actually executed,
    the procedure for evaluating a decision, independent of an external or internal
    decision engine, is described in more detail in Sect. [4.4](#Sec11) (cf. Fig. [5](#Fig5)).
  prefs: []
  type: TYPE_NORMAL
- en: In the *testing* phase, special attention should be paid to the decision points
    to ensure that required input data is available and also in the correct format
    so that the decisions can be evaluated as planned. During *operation*, where the
    performance metrics of the RPA bot are measured [[16](#CR16)], additional performance
    indicators can now be derived, such as the distributions of decision outcomes,
    e.g., what share international letters account for in the example, which can be
    used to further improve the process in the subsequent passes of the lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: 4.4 Generic Architecture
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So far, two different approaches for integrating a DMN-based decision service
    into RPA were discussed, either directly embedded in the RPA bot or by using an
    external service.![../images/509088_1_En_3_Chapter/509088_1_En_3_Fig4_HTML.png](../images/509088_1_En_3_Chapter/509088_1_En_3_Fig4_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 4.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture with an external decision service
  prefs: []
  type: TYPE_NORMAL
- en: In Fig. [4](#Fig4), a conceivable, generic architecture for the external approach
    is given. First, at design-time, the decision logic is defined using the *decision
    modeler* of the external decision service and subsequently saved in its *decision
    model repository*. Now, whenever a new *RPA bot* is created in the RPA software,
    a DMN decision point can be added to the bot’s workflow, provided that such a
    DMN activity is available in the RPA tool. This DMN activity is then linked to
    a decision model stored in the decision model repository. Additionally, it requires
    configuration of variables that should be passed from the bot to the decision
    service for evaluation, i.e., values available in the bot need to be mapped to
    input values required by the decision.
  prefs: []
  type: TYPE_NORMAL
- en: At run-time, the two components communicate as shown in Fig. [5](#Fig5). As
    soon as a bot, started and operated by the *RPA controller*, reaches a decision
    point, it requests the *decision engine* of the external decision service using
    the linked decision identifier and provides the required decision variables as
    input as configured at design-time. The decision engine then requests the decision
    table from the decision model repository using the identifier and subsequently
    calculates the decision result based on the input data and the decision table.
    The output of the decision (*decisionResult*) is then returned to the bot so that
    the RPA process can continue accordingly and use the decision result.![../images/509088_1_En_3_Chapter/509088_1_En_3_Fig5_HTML.png](../images/509088_1_En_3_Chapter/509088_1_En_3_Fig5_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 5.
  prefs: []
  type: TYPE_NORMAL
- en: Communication between RPA bot, decision engine, and decision model repository
  prefs: []
  type: TYPE_NORMAL
- en: When using a locally embedded decision engine, a similar flow of communication
    would be applicable. With regard to the architecture, however, the RPA software
    would need to be extended by the components required for providing DMN capabilities,
    i.e., a modeler (if not integrated in the bot modeler), an engine for evaluating
    decisions, and a repository for storing the decision models, to substitute the
    decision service.
  prefs: []
  type: TYPE_NORMAL
- en: 5 Evaluation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The analysis of the lifecycle has shown that DMN and its decision tables, can,
    with some adjustments, be integrated into RPA. In this section, a potential realization
    of the integration, based on the generic architecture introduced in Sect. [4.4](#Sec11),
    is presented.
  prefs: []
  type: TYPE_NORMAL
- en: 5.1 Proof of Concept Prototype
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To demonstrate the feasibility of the proposed approach, we implemented^([1](#Fn1))
    a DMN activity for the RPA tool UiPath^([2](#Fn2)) using the external decision
    service approach. For the decision service, Camunda^([3](#Fn3)) with its open-source
    modeler and decision engine is used.
  prefs: []
  type: TYPE_NORMAL
- en: The new DMN activity is available to the RPA bot creator as a normal building
    block and can be added to the workflow as usual, similar to the business rule
    task available in BPMN. When using the activity, the creator has to specify the
    internet address of the decision service and the identifier of the decision that
    should be evaluated (provided by the decision model repository). Furthermore,
    the variables of the RPA bot that should be passed to the decision engine at run-time
    must be provided, as well as the variables in which the output of the decision
    should be saved.
  prefs: []
  type: TYPE_NORMAL
- en: At execution-time, the activity requests the evaluation of the configured decision
    and supplies the current data stored in the variables to the Camunda engine. After
    evaluation, the result is interpreted and provided to the RPA bot in the specified
    variables, which can then be used in the subsequent flow.![../images/509088_1_En_3_Chapter/509088_1_En_3_Fig6_HTML.png](../images/509088_1_En_3_Chapter/509088_1_En_3_Fig6_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 6.
  prefs: []
  type: TYPE_NORMAL
- en: Same RPA bot as shown in Fig. [2](#Fig2), but now modeled using the new DMN
    activity
  prefs: []
  type: TYPE_NORMAL
- en: In Fig. [6](#Fig6), the same process as described in Sect. [3](#Sec6) is modeled
    again, but now using the prototype. The new activity, highlighted by the blue
    frame, replaces the formerly required extensive decision logic. Comparing Fig. [2](#Fig2)
    and Fig. [6](#Fig6), it becomes apparent that the new model comprises significantly
    fewer elements than before and exhibits a considerably reduced nesting level.
  prefs: []
  type: TYPE_NORMAL
- en: In the example, the activity calls the decision engine to evaluate the decision
    table given in Fig. [3](#Fig3). The output values of the decision, *pricePerPiece*
    and *responsibleDepartment*, are used subsequently to calculate the total costs
    and notify the appropriate departments. But the values could, for example, also
    be used to trigger different control flows depending on the *responsibleDepartment*,
    e.g., by using the *switch* statement.
  prefs: []
  type: TYPE_NORMAL
- en: By using the external decision service, i.e., a centralized solution, decisions
    can be reused in other bots as well, or existing decisions already used in business
    processes become available for use in RPA bots. Furthermore, this eases the maintenance
    of decisions, as the decision logic only has to be updated in one central place,
    instead of in all bots separately.
  prefs: []
  type: TYPE_NORMAL
- en: 5.2 Limitations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The presented prototype already enables RPA developers to separate decision
    logic and control flow. However, in the chosen approach, an external dependency
    is introduced. In this case, the decision logic is neither modeled nor evaluated
    within the RPA software, but relies on third-party software. This could be mitigated
    by directly integrating DMN capabilities into the RPA tool. This way, decisions
    could be modeled in the same tool as the RPA bot.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, the integration of DMN into RPA not only increases the number of potential
    use cases, but also the complexity. Robotic process automation thrives on being
    easily accessible and quickly employed, without the need for extensive training.
    With DMN and its decision tables, another modeling standard must be mastered if
    this extension is to be used. However, especially for companies already employing
    BPMN, the DMN standard might already be familiar.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, this approach is limited to data-based and rule-based decisions,
    as it inherits the limitations of DMN. Therefore, decisions that, for example,
    are of strategic nature or require human intuition, cannot be covered. Additionally,
    like in BPMN, the decision task itself does not branch the control flow, but,
    based on the decision result, the branching must still be modeled in the RPA bot
    using the available concepts. Nevertheless, encapsulating the decision-making
    process already reduces the complexity of the model to some extent.
  prefs: []
  type: TYPE_NORMAL
- en: 6 Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even though RPA promises to take over rule-based and routine tasks, the rudimentary
    support for making decisions in workflows may be an exclusion criterion for many
    decision-intensive processes. Future combinations with artificial intelligence
    are also expected to provide opportunities for improved and intelligent decision-making [[7](#CR7),
    [23](#CR23), [25](#CR25)], such as learning decisions from past executions. However,
    it is unlikely that they will completely replace manual modeling and no longer
    require human intervention.
  prefs: []
  type: TYPE_NORMAL
- en: In this paper, we examined the integration of DMN, a standard for modeling and
    evaluating decisions, into RPA to address this limitation of current tools and
    analyzed the RPA lifecycle accordingly. Furthermore, an implementation for an
    RPA software was presented that allows bot creators to embed DMN decision points
    in bot workflows and subsequently use the decision result for further actions.
  prefs: []
  type: TYPE_NORMAL
- en: The integration of DMN in RPA offers several benefits. The size of bot models
    decreases as the decision logic does not have to be realized using control flow
    elements but is encapsulated in a decision task. This not only facilitates the
    modeling process itself, but also ensures better maintainability later, as the
    control flow logic and decision logic can be updated independently. In addition,
    especially if BPMN and DMN are already in use, it allows reusing decision logic
    in other bots or business processes, thus having a central place for decision
    logic. Overall, it may further increase the adoption of RPA, as the barriers for
    automating workflows with complex, data-based decision logic are lowered.
  prefs: []
  type: TYPE_NORMAL
- en: So far, the approach requires the decision tables to be crafted manually. However,
    the use of already existing approaches for mining decision logic from data could
    be evaluated further in the future. This would coincide with the recent endeavors
    to mine RPA bots from logs. Furthermore, we concentrated on decision tables in
    this work, but DMN provides more advanced concepts for decision management, such
    as decision requirements graphs, that could be considered in the future. Other
    interesting points for future research are checks for correctness or soundness
    of RPA bots in conjunction with DMN activities, as it has been done for BPMN and
    DMN. This is especially important since RPA bots are usually not tested in a separate
    environment, but are directly deployed to the live systems.
  prefs: []
  type: TYPE_NORMAL
- en: '© Springer Nature Switzerland AG 2021J. González Enríquez et al. (eds.)Business
    Process Management: Blockchain and Robotic Process Automation ForumLecture Notes
    in Business Information Processing428[https://doi.org/10.1007/978-3-030-85867-4_4](https://doi.org/10.1007/978-3-030-85867-4_4)'
  prefs: []
  type: TYPE_NORMAL
- en: 'AIRPA: An Architecture to Support the Execution and Maintenance of AI-Powered
    RPA Robots'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A. Martínez-Rojas^([1](#Aff12) [ ](#ContactOfAuthor1)), J. Sánchez-Oliva^([2](#Aff13) [ ](#ContactOfAuthor2)),
    J. M. López-Carnicer^([1](#Aff12) [ ](#ContactOfAuthor3)) and A. Jiménez-Ramírez^([1](#Aff12) [ ](#ContactOfAuthor4))(1)Departamento
    de Lenguajes y Sistemas Informáticos, Escuela Técnica Superior de Ingeniería Informática,
    Avenida Reina Mercedes, s/n, 41012 Sevilla, Spain(2)Servinform, S.A. Parque Industrial
    PISA, Calle Manufactura, 5, Mairena del Aljarafe, 41927 Sevilla, SpainA. Martínez-Rojas (Corresponding
    author)Email: [amrojas@us.es](mailto:amrojas@us.es)J. Sánchez-OlivaEmail: [ajramirez@us.es](mailto:ajramirez@us.es)J. M. López-CarnicerEmail:
    [jose.lopez@iwt2.org](mailto:jose.lopez@iwt2.org)A. Jiménez-RamírezEmail: [jmsanchezo@servinform.es](mailto:jmsanchezo@servinform.es)'
  prefs: []
  type: TYPE_NORMAL
- en: Abstract
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Robotic Process Automation (RPA) has quickly evolved from automating simple
    rule-based tasks. Nowadays, RPA is required to mimic more sophisticated human
    tasks, thus implying its combination with Artificial Intelligence (AI) technology,
    i.e., the so-called intelligent RPA. Putting together RPA with AI leads to a challenging
    scenario since (1) it involves professionals from both fields who typically have
    different skills and backgrounds, and (2) AI models tend to degrade over time
    which affects the performance of the overall solution. This paper describes the
    AIRPA project, which addresses these challenges by proposing a software architecture
    that enables (1) the abstraction of the robot development from the AI development
    and (2) the monitor, control, and maintain intelligent RPA developments to ensure
    its quality and performance over time. The project has been conducted in the Servinform
    context, a Spanish consultancy firm, and the proposed prototype has been validated
    with reality settings. The initial experiences yield promising results in reducing
    AHT (Average Handle Time) in processes where AIRPA deployed cognitive robots,
    which encourages exploring the support of intelligent RPA development.
  prefs: []
  type: TYPE_NORMAL
- en: KeywordsRobotic Process AutomationArtificial IntelligenceIndustrial project
  prefs: []
  type: TYPE_NORMAL
- en: 1 Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The term Robotic Process Automation (RPA) refers to a software paradigm in which
    robots are programs that mimic the behavior of human workers interacting with
    information systems (IS) [[3](#CR3), [13](#CR13)]. This paradigm has become increasingly
    popular because RPA is of great interest to organizations [[5](#CR5)].
  prefs: []
  type: TYPE_NORMAL
- en: In this context, RPA solutions based on Artificial Intelligence (AI) – called
    intelligent RPA solutions – are receiving increasing attention, as the combination
    of both disciplines offers and several advantages [[2](#CR2)]. On the one hand,
    AI methods enhance RPA solutions by providing new capabilities that enable a more
    significant number of end-to-end processes to be automated. On the other hand,
    RPA solutions produce data on the execution of the process themselves, allowing
    periodic training of the AI models, leading to continuous improvement of the model
    metrics [[9](#CR9)].
  prefs: []
  type: TYPE_NORMAL
- en: The use of this kind of component involves different challenges when a methodology,
    architecture o role specification proposal does not exist.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, a data scientist (i.e., a professional in charge of processing structured
    data to extract relevant information from it) is required to develop the cognitive
    components and, without an abstraction role, needs to know the business process
    to configure a model for each business case. This fact leads to a strong dependency
    between the data scientist and the RPA developer role (i.e., professional in charge
    of designing and developing software robots) who must know the business process
    to automate it^([1](#Fn1)). Secondly, the performance of these components in a
    production environment depends on the data model performance, which tends to degrade
    over time [[6](#CR6)]. Degradation refers to multiple reasons, such as: (1) the
    evolution of the business over time and the AI obsolescence in the new business
    context, (2) the AI technology advance caused by the new scientist research in
    the AI, that can improve the AI performance and accuracy, led previous AI models
    obsolete, and (3) the need to re-training models to increase their accuracy and
    performance for a specific task. This problem arises the need to conduct the AIRPA
    project, a platform with an architecture that allows solving the challenges encountered,
    (1) separate the work of RPA developer and data scientist to abstract robot construction
    from model development, and (2) control, monitor, and support the robots to ensure
    quality maintenance of the intelligent RPA components.'
  prefs: []
  type: TYPE_NORMAL
- en: As shown in Fig. [1](#Fig1), RPA developers are in charge of building the robot
    that automates the process. However, such developers may lack skills related to
    AI. For this, AI services (e.g., text-to-image, speech-to-text recognition, sentiment
    analysis, image anomaly detection, and others) have to be black boxes that always
    maintain an acceptable level of accuracy in their responses. The data scientist’s
    implementation of these cognitive solutions makes their use transparent to the
    RPA developer. To these needs, the AIRPA project provides an architecture that
    supports the abstraction between both roles, and continuous monitoring mechanisms
    to ensure the quality of AI models, for both new release deployments and retraining.![../images/509088_1_En_4_Chapter/509088_1_En_4_Fig1_HTML.png](../images/509088_1_En_4_Chapter/509088_1_En_4_Fig1_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 1.
  prefs: []
  type: TYPE_NORMAL
- en: Main challenges to be solved when making use of cognitive components.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the paper is organized as follows. Section [2](#Sec2) describes
    the project context and a set of example cases. Sect. [3](#Sec3) presents the
    AIRPA project. Section [4](#Sec8) briefly summarizes related work. Section [5](#Sec9)
    opens a discussion related to the project. Finally, Sect. [6](#Sec10) concludes
    the paper and describes future work.
  prefs: []
  type: TYPE_NORMAL
- en: 2 Context
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The RPA challenges described in Fig. [1](#Fig1) have also been pointed out by
    the industry, expressly, by Servinform S.A.^([2](#Fn2)) Servinform is a Spanish
    company dedicated to providing outsourcing services to other companies, mainly
    back-office processes automated with RPA. In the past years, they have identified
    the need to implement intelligent RPA solutions to empower business processes.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating cognitive components in their processes allows automating tasks
    that previously required human intervention, i.e., aiming towards end-to-end process
    automation. For instance, the prediction of electricity consumption, considering
    that electricity use changes over time and consumption forecasts are of great
    value to utilities. For this purpose, a component is needed that determines what
    the consumption will be on the next bill, based on a customer’s data history.
    Another example is related to document classification since companies typically
    use different formats when they issue documents. In this way, a component is required
    for classifying invoices or sales orders from different organizations with similar
    information but a different structure or style.
  prefs: []
  type: TYPE_NORMAL
- en: The use of these components within an RPA process presents a series of challenges
    (cf. Fig. [1](#Fig1)). As shown in the second challenge, a problem related to
    the AI components degradation and the reduction of ML model performance has been
    found. That is, this paper will focus its proposed architecture on the fact that
    the “*maintenance of a machine learning model involves regular updating to ensure
    that predictive effectiveness is not lost over time”* [[6](#CR6)]. Therefore,
    Servinform, together with the IWT2 research group^([3](#Fn3)), tries to solve
    these challenges with the AIRPA research project, which will be described below.
  prefs: []
  type: TYPE_NORMAL
- en: 3 Research Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section explains the AIRPA project. First, the initial objectives are presented.
    Second, the approach proposed in the project is detailed. Finally, the architecture
    to be developed and put into production is described.
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 Initial Goals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Based on Servinform industrial experience and the background within the RPA
    research line of the IWT2 group, the following goals are identified as the main
    ones of the AIRPA project:^([4](#Fn4))
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a collection of AI components to empower RPA solutions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a nexus of union between both domains by understandably presenting the
    results in a platform for technical staff and business experts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Automatize processes end-to-end that facilitate the integration between existing
    RPA solutions with AI components, reducing the need for human participation and
    decision-making.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Simplify and reduce the cost of access to RPA solutions powered with AI caused
    by licensing restrictions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable RPA professionals who lack AI and ML skills to use AI components.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '6.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a lifecycle, development methodology, production, and integration roadmap
    of RPA solutions with AI components.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '7.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the developed AIRPA framework in multiples realistic scenarios.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '8.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integrate an AI components library in RPA solutions. Such integration seeks
    sustainability based on a cross-platform architecture orchestration independent
    of specific technologies and considers the degradation of AI over time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 3.2 Approach
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The AIRPA project proposes a complete solution for the implementation of RPA
    processes using cognitive components, known in the industry as intelligent RPA
    processes.^([5](#Fn5)) To this end, it defines an architecture that supports its
    development and maintenance, divided into four modules (cf. Fig. [2](#Fig2)):
    (1) *Document repository*, where components and robots are stored with their documentation
    and all their associated versions, (2) *Deployment manager*, which is used to
    control the deployment and version management of each component and the RPA robots,
    (3) *Tracking and exploitation panel*, which allows the visualization of the metrics
    and data associated with the execution of the processes, especially for the monitoring
    of the models that are associated with the cognitive components, and (4) *Control
    Room*, which allows for complete management of RPA processes, and handling cases
    in an execution state, KOs (i.e., failed situations), robots, equipment where
    they are executed, customized alerts, evidence capture, launches, or user roles,
    among others.![../images/509088_1_En_4_Chapter/509088_1_En_4_Fig2_HTML.png](../images/509088_1_En_4_Chapter/509088_1_En_4_Fig2_HTML.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.
  prefs: []
  type: TYPE_NORMAL
- en: Modules that compose the AIRPA platform.
  prefs: []
  type: TYPE_NORMAL
- en: The *control room* aims to provide comprehensive and centralized support to
    the intelligent RPA process management. This module resembles a customized state
    machine for each process, indicating which state a robot is in at any given moment
    and recording evidence of its transitions. The essential tasks of this module
    are (1) the collection of data needed for evidence capture and (2) the management
    and automated reporting of robots and tasks in which human intervention is required.
    The latter provides a differential value in intelligent RPA processes, thanks
    to labeling the data collected in daily work. In other words, the management of
    hybrid human-robot tasks allows the capture of data from the decisions which are
    made by humans, an essential task for the training of cognitive component models
    that will fully automate these tasks in the future. The collection of this data,
    together with the information reported by the cognitive components, feeds the
    *tracking and exploitation panel* for process reporting and obtaining valuable
    information of each process during its execution. It monitors, among other things,
    the performance of the models, facilitating their maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: The first challenge focuses on the abstraction of the complexity of the development
    of an AI component by the RPA developer. For this purpose, *AIRPA components*
    are built, i.e., AI services with a microservices-based architecture that standardizes
    their service contract through a REST API. These components are designed as *wrappers*
    that allow the incorporation of ML models using the files previously exported
    in the data scientist’s work environment. In this way, the RPA developer should
    only focus on consuming the methods offered by this API. Thus, any changes to
    the model will not affect its integration with the RPA solution.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, AI components designed as *wrappers* solve further problems. Generally,
    AI components in the context of intelligent RPA are implemented by commercial
    solutions (e.g., Amazon Web Services, Google, or Microsoft). These solutions pose
    several problems since a series of compatibility restrictions limit their use.
    They are not versatile enough to re-train the models from business data, and their
    customization becomes a rather complicated task. The *wrappers* component design
    allows the incorporation of proprietary Machine Learning (ML) models, solving
    these issues. This fact provides an added value since, although their use is not
    widespread in the context of RPA, open-source solutions are leading the main developments
    in the field of AI [[12](#CR12)]. This design increases the specialization capacity
    of each model and reduces the cost of access caused by licensing limitations to
    AI components. Therefore, the *AIRPA components* of the AIRPA project, a library
    representing the first initial objective of the project, enable ML solutions such
    as classifications, anomaly detection, intelligent document processing, audio
    transcription, or sentiment analysis, among others.
  prefs: []
  type: TYPE_NORMAL
- en: 3.3 Architecture
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The AIRPA project proposes an architecture (cf. Fig. [3](#Fig3)) for the execution
    of RPA processes that use cognitive components and that allows uploading, deploying,
    managing, and monitoring both robots and AI components. This architecture has
    different types of developments.![../images/509088_1_En_4_Chapter/509088_1_En_4_Fig3_HTML.png](../images/509088_1_En_4_Chapter/509088_1_En_4_Fig3_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 3.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture diagram.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, the modules are based on several free software solutions as *Gitea*
    for the Document repository, *Portainer* for the Deployment manager, and *Grafana*
    for the Tracking and exploitation panel. Secondly, some solutions are based on
    customized development, as the *Control Room* implemented in *C#* with the *.NET*
    framework and the *MySQL* database. This module has two databases, the *CR Online*
    for the management of all information necessary to use *Control Room* (e.g., users,
    alerts, scheduled events, etc.) and the *CR Exploitation* with the data collection
    of all activity of the deployed robots and AI components to analyze them. Another
    customized solution is the web client developed with *ASP.NET Web Pages (Razor)*
    and offers access to all the modules that comprise the AIRPA architecture from
    a unique site that permits login to the whole system. Finally, the creation of
    *wrappers* for the *AIRPA Components* is a custom design implemented in *Python*
    language with *Django REST Framework*. In its construction, several specific libraries
    from the field of data processing and ML are used to facilitate feature engineering
    and the incorporation of ML models from *Scikit Learn*, *TensorFlow*, and *PyTorch*
    based on a service contract.
  prefs: []
  type: TYPE_NORMAL
- en: 3.4 Achievements of Goals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The current status of the AIRPA platform shows the degree of accomplishment
    of the initial objectives of the project.Table 1.
  prefs: []
  type: TYPE_NORMAL
- en: Table of the completed initials goals.
  prefs: []
  type: TYPE_NORMAL
- en: '| Goal | State | Comments |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Completed | An AI components library described in Sect. [3.2](#Sec5)
    is developed |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Completed | Thanks to the *tracking and exploitation panel*, graphs and
    statistics can be presented that are easy to understand for business experts |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | Completed | The use of the *control room* gives full support to process
    automation and, therefore, to end-to-end automation, which reduces the number
    of people needed to solve process cases and reduces costs |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | Completed | The proposed design enables to use open-source solutions,
    which actually lead the field of AI, increasing the specialization capacity of
    each model and reducing the cost of access caused by licensing limitation |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Completed | The proposed architecture abstracts RPA developer from AI
    models development and maintenance, through the use of *wrappers* |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | In validation | A robotization guide is being defined to be applied for
    the design, development and maintenance of each component, still pending to be
    validated |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | In progress | The AIRPA project is still in the validation phase, but
    has been tested with some real scenarios as shown in Sect. [5](#Sec9) |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | Completed | AIRPA architecture allows the integration of AI components
    in RPA processes from controlling the status of the robots to monitoring their
    performance. |'
  prefs: []
  type: TYPE_TB
- en: 4 Related Work
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the current industry, some platforms aim to solve problems related to the
    one addressed in this paper. However, they are oriented to different perspectives.
  prefs: []
  type: TYPE_NORMAL
- en: Google Cloud^([6](#Fn6)), Amazon^([7](#Fn7)) and Azure^([8](#Fn8)) allow deploying
    and monitoring pre-created or custom cognitive components. These platforms can
    monitor and detect cognitive degradation. However, they are not unified to be
    used in RPA. It should be noted that they offer RPA integration but deploying
    and monitoring AI components is in an isolation system separated from the monitoring
    of RPA.
  prefs: []
  type: TYPE_NORMAL
- en: That makes the monitoring more complex due to the use of AI models, e.g., Blue
    Prism^([9](#Fn9)) allows the use of cognitive components deployed in Google Cloud,
    where they are monitored. Nonetheless, it forces the use of both (1) the Google
    platform to monitor cognitive components and (2) the Blue Prism platform to monitoring
    the non-cognitive ones. Similarly, UIPath^([10](#Fn10)) platform offers a service
    called *AI Center*. The service allows deploying cognitive components and monitoring
    them but, unlike the AIRPA platform, it does not detect the degradation of components.
    Moreover, *AI Center* is a proprietary solution and only accessible for use in
    the UIPath technology stack (i.e., UIPath Studio, AI Center, and Orchestrator).
    In other words, the existing RPA platforms do not support the detection of model
    degradation in AI components. So it is necessary to navigate to AI service platforms
    providers to consult this information. Moreover, since AI services are not integrated
    with RPA platforms, it is necessary to manage logins, tokens, etc. between the
    two platforms. Furthermore, AIRPA differentiates itself from other platforms by
    the use of AI components as *wrappers*. With these, APIs through AI components
    are offered, they follow the same specification and, therefore, RPA developers
    only need to know this specification to implement the AI-RPA integration (Table [1](#Tab1)).
  prefs: []
  type: TYPE_NORMAL
- en: Besides these commercial solutions, there are scientific research proposals
    that study the RPA and the AI field [[4](#CR4), [13](#CR13)]. Some of them use
    AI not to build components, but for early stages in the RPA lifecycle, in the
    process discovery phases [[3](#CR3), [7](#CR7), [10](#CR10), [11](#CR11)]. Nevertheless,
    others deal with the application of AI on RPA processes, such as [[1](#CR1)],
    which studies key open research challenges that exist in the combination of RPA
    with AI, or [[9](#CR9)], which proposes a dynamic taxonomy for intelligent RPA
    components. There are other proposals to improve the RPA architecture. For example,
    [[8](#CR8)] elaborates on optimizing the deployment architecture of the RPA components.
    Nevertheless, to the best of our knowledge, there are no proposals that focus
    on the operation and maintenance phase of the robots, such as AIRPA. At a glance,
    unlike existing proposals, AIRPA proposes a system to manage and intensively monitor
    cognitive components, separating the AI development from the RPA developer. All
    these are carried out easily and integrally in one platform.
  prefs: []
  type: TYPE_NORMAL
- en: 5 Results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The AIRPA project is still in the validation phase, and therefore the final
    results may vary after it. The platform has been validated in several real scenarios
    that require the incorporation of cognitive actions. In this way, the aim is to
    evaluate the AIRPA operation applied to different business areas, such as energy
    or telecommunications. One of these validation has been carried out specifically
    on the consumption prediction use case shown in Sect. [2](#Sec2). In this case,
    the generation of automatic predictions from historical data, without the need
    for human interaction, represents a considerable improvement. It is performed
    within Servinform’s operation area by taking measurements during one month of
    the Average Handle Time (AHT) before and after implementing the AIRPA platform.
    Initially, an AHT of 9 min was obtained, which was improved after implementing
    AIRPA by 75%, resulting in a final AHT of 2 min and 15 s. Even though the results
    are preliminary, the platform significantly increased control over the process,
    which suggests promising results. AIRPA is planned to be a platform and a methodological
    strategy followed by Servinform S.A. and its entire Consulting and Innovation
    area.
  prefs: []
  type: TYPE_NORMAL
- en: The conduction of the AIRPA project has lead to some lessons learned. After
    defining and implementing AIRPA architecture, we have realized that it is very
    focused on high-demand situations in terms of deployments. In some real scenarios,
    the level of demand for deployments is lower because they are less frequent. Therefore,
    in that cases, such a complex architecture is not necessary, and a deployment
    pipeline would be sufficient. In addition, the experience with different real
    cases showed limited use of the shared collection of RPA components. This situation
    was mainly since each case required a level of customization that neglects its
    transversality. Nonetheless, the *wrapper* design of the components enables easy
    customization from one business case to another.
  prefs: []
  type: TYPE_NORMAL
- en: 6 Conclusions and Future Work
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This paper presented the AIRPA project that aims to improve RPA thanks to the
    integration of AI, expanding the automation of the end-to-end processes. The project
    allows (1) the abstraction of the data scientist from the RPA developer and (2)
    extensive monitoring of robots and AI components to detect the degradation of
    the cognitive components. To solve these challenges, AIRPA has been built with
    a microservice architecture and the standardization of a service contract thanks
    to an API REST. These components are designed as *wrappers* to facilitate their
    integration. This architecture is composed of 4 modules: the document repository,
    the deployment manager, the AIRPA Control Room, and the tracking and exploitation
    panel. All these modules allow the RPA developers and the data expert to work
    independently. In addition, thanks to the Control Room and the tracking panel,
    the detection of AI degradation is possible.'
  prefs: []
  type: TYPE_NORMAL
- en: Although the project is still in progress, it offers promising preliminary results
    and possible lines of future research work. (1) The project, being research-based,
    could have performance improvements and better functionalities. (2) The component
    library can be extended by adding new functionalities. (3) Currently, the data
    scientist requires an existing *wrapper* component before loading a model. The
    need to avoid the dependency of the data scientist from the RPA developer role
    and ease the modification of components is identified, so the use of preloaded
    *wrappers* is proposed as future work. (4) The current *Control Room* is a custom
    state machine (cf. Sect. [3.2](#Sec5)) and the robot is the one in charge of modifying
    the state. As future work, we plan to extend the component behavior to automatically
    generate multiple state changes and evidence transitions records.
  prefs: []
  type: TYPE_NORMAL
