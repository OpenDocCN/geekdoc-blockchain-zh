["```\nweb3.eth.getBlock(0).stateRoot\nweb3.eth.getBlock(0).transactionsRoot\nweb3.eth.getBlock(0).receiptsRoot\n```", "```\nweb3.eth.getBlock(web3.eth.blockNumber).stateRoot\n```", "```\ncd ~\nsudo apt-get update\nsudo apt-get upgrade\ncurl -sL https://deb.nodesource.com/setup_9.x |\nsudo -E bash - sudo apt-get install -y nodejs\nsudo apt-get install nodejs\nnpm -v\nnodejs -v\nnpm install levelup leveldown rlp merkle-patricia-tree --save\ngit clone https://github.com/ethereumjs/ethereumjs-vm.git\ncd ethereumjs-vm\nnpm install ethereumjs-account ethereumjs-util --save\n```", "```\n//Just importing the requirements\n\nvar Trie = require('merkle-patricia-tree/secure');\nvar levelup = require('levelup');\nvar leveldown = require('leveldown');\nvar RLP = require('rlp');\nvar assert = require('assert');\n\n//Connecting to the leveldb database\nvar db = levelup(leveldown(\n    '/home/user/geth/chaindata'));\n\n//Adding the \"stateRoot\" value from the block so that\n//we can inspect the state root at that block height.\nvar root = '0x8c777…2976';\n\n//Creating a trie object of the merkle-patricia-tree library\nvar trie = new Trie(db, root);\n\n//Creating a nodejs stream object so that we can access the data\nvar stream = trie.createReadStream()\n\n//Turning on the stream\nstream.on('data', function (data){\n  //printing out the keys of the \"state trie\"\n  console.log(data.key);\n});\n```", "```\n//Mozilla Public License 2.0\n//Getting the requirements\nvar Trie = require('merkle-patricia-tree/secure');\nvar levelup = require('levelup');\nvar leveldown = require('leveldown');\nvar utils = require('ethereumjs-util');\nvar BN = utils.BN;\nvar Account = require('ethereumjs-account');\n\n//Connecting to the leveldb database\nvar db = levelup(leveldown('/home/user/geth/chaindata'));\n\n//Adding the \"stateRoot\" value from the block\n//so that we can inspect the state root at that block height.\nvar root = '0x9369577...73028';\n\n//Creating a trie object of the merkle-patricia-tree library\nvar trie = new Trie(db, root);\n\nvar address = '0xccc6b46fa5606826ce8c18fece6f519064e6130b';\ntrie.get(address, function (err, raw) {\n    if (err) return cb(err)\n    //Create an instance of an account\n    var account = new Account(raw)\n    console.log('Account Address: ' + address);\n    //Decode and present the account balance\n    console.log('Balance: ' + (new BN(account.balance)).toString());\n})\n```", "```\nhttps://github.com/ethereum/go-ethereum/blob/master/core/state/statedb.go\n```", "```\nevent pointBalanceUpdated(address indexed endUser, uint256 amount);\n```", "```\nemit pointBalanceUpdated(msg.sender, pointValue);\n```", "```\npragma solidity ^0.4.0;\n\ncontract EventLogCreator{\n\n    // Contract variables\n    mapping(address => uint256) private pointBalances;\n\n    // Event\n    event pointBalanceUpdated(address indexed endUser, uint256 amount);\n\n    // Function which adds points and emits\n    function addPoints(uint256 pointValue) public {\n        pointBalances[msg.sender] += pointValue;\n        emit pointBalanceUpdated(msg.sender, pointValue);\n    }\n\n    // Function that returns points which are mapped to a certain address\n    function getPoints(address userAddress) public constant returns(uint256){\n        return pointBalances[userAddress];\n    }\n}\n```", "```\nvar events = await web3ContractInstance.getPastEvents(eventName, {\n    filter: {},\n    fromBlock: lastIndexedBlock,\n    toBlock: target\n});\n```", "```\n{\n    \"address\" : \"0x09cabEC1eAd1c0Ba254B09efb3EE13841712bE14\",\n    \"blockHash\" : \"0x249ac ... b2\",\n    \"blockNumber\" : 6848001,\n    \"logIndex\" : 10,\n    \"removed\" : false,\n    \"transactionHash\" : \"0x453a2 ... 60\",\n    \"transactionIndex\" : 14,\n    \"id\" : \"log_327a5bb5\",\n    \"returnValues\" : {\n      \"0\" : \"0x00dEe1F836998bcc736022f314dF906588d44808\",\n \"1\" : \"109494525547445255474\",\n      \"2\" : \"1216943725441155089\",\n      \"buyer\" : \"0x00dEe1F836998bcc736022f314dF906588d44808\",\n      \"tokens_sold\" : \"109494525547445255474\",\n      \"eth_bought\" : \"1216943725441155089\"\n    },\n    \"event\" : \"EthPurchase\",\n    \"signature\" : \"0x7f409 ... 05\",\n    \"raw\" : {\n      \"data\" : \"0x\",\n      \"topics\" : [\n        \"0x7f409 ... 05\",\n        \"0x00000 ... 08\",\n        \"0x00000 ... 32\",\n        \"0x00000 ... 11\"\n      ]\n    }\n  }\n}\n```", "```\n{\n\"query\": {\n  \"bool\": {\n      \"must\": [{\n        \"match\": {\n          \"name\": \"TokenPurchase\"\n        }\n      },\n      {\n        \"match\": {\n          \"jsonEventObject.address\": \"0x09ca ... 14\"\n        }\n      }]\n    }\n  },\n  \"_source\": [\"name\", \"jsonEventObject.returnValues.buyer\",\n    \"jsonEventObject.blockNumber\"],\n  \"highlight\": {\n    \"fields\": {\n      \"title\": {}\n    }\n  }\n}\n```", "```\n{\n  \"total\": 1885,\n  \"max_score\": 1.648463,\n  \"hits\": [{\n    \"_index\": \"uniswap_exchange_events\",\n    \"_type\": \"event\",\n    \"_id\": \"0xe26e ... fe\",\n    \"_score\": 1.648463,\n    \"_source\": {\n      \"name\": \"TokenPurchase\",\n      \"jsonEventObject\": {\n        \"returnValues\": {\n          \"buyer\": \"0xbc8dAfeacA658Ae0857C80D8Aa6dE4D487577c63\"\n        },\n        \"blockNumber\": 6630726\n      }\n    }\n  }, {...},{...}]\n}\n```", "```\n{\n    transactions(first: 1) {\n        event\n    }\n}\n```", "```\n{\n    \"data\": {\n        \"transactions\": [{\n            \"event\": \"AddLiquidity\"\n        }]\n    }\n}\n```", "```\n{\n    transactions(first: 1) {\n        block\n        event\n    }\n}\n```", "```\n{\n    \"data\": {\n        \"transactions\": [{\n            \"block\": \"6629139\",\n            \"event\": \"AddLiquidity\"\n        }]\n    }\n}\n```", "```\n{\n    transactions(orderBy: block, orderDirection: asc) {\n        block\n        event\n    }\n}\n```", "```\n{\n    \"data\": {\n        \"transactions\": [{\n                \"block\": \"6629139\",\n                \"event\": \"AddLiquidity\"\n            },\n            // ... data extracted for display purposes\n        }\n    ]\n}\n```", "```\nWITH double_entry_book AS (\n   -- debits\n   SELECT\n    array_to_string(inputs.addresses, \",\") as address\n   , inputs.type\n   , -inputs.value as value\n   FROM `bigquery-public-data.crypto_bitcoin.inputs` as inputs\n   UNION ALL\n   -- credits\n SELECT\n    array_to_string(outputs.addresses, \",\") as address\n   , outputs.type\n   , outputs.value as value\n   FROM `bigquery-public-data.crypto_bitcoin.outputs` as outputs\n)\nSELECT\n   address\n,   type\n,   sum(value) as balance\nFROM double_entry_book\nGROUP BY 1,2\nORDER BY balance DESC\nLIMIT 1000\n```", "```\nSELECT\n  ROUND((input_value - output_value)/ size, 0) AS fees_per_byte,\n  COUNT(*) AS txn_cnt\nFROM\n  `bigquery-public-data.crypto_bitcoin.transactions`\nWHERE TRUE\n  AND block_timestamp >= '2018-01-01'\n  AND is_coinbase IS FALSE\nGROUP BY 1\n```", "```\npragma solidity >=0.4.0 <0.6.0;\n\ncontract AccountBalanceDemo {\n\n  string accountName;\n  uint accountBalance;\n\n  constructor(string _accountName) public {\n    accountName = _accountName;\n  }\n\n  function setAccountBalance(uint _accountBalance) public {\n    accountBalance = _accountBalance;\n  }\n\n  function getAccountName() public view returns(string) {\n    return accountName;\n  }\n\n  function getAccountBalance() public view returns(uint) {\n    return accountBalance;\n  }\n}\n```", "```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    ... ...\n    <title>Data Stores</title>\n  </head>\n  <body>\n    <div class=\"container\">\n      <p>This page shows a list of individual accounts …</p>\n      <p>Each account entity ...</p>\n      <p>This page demonstrates ...</p>\n      <b>Sum total of all accounts</b>\n      <table class=\"table\">\n        <thead>\n          <tr><th scope=\"col\">Total</th></tr>\n        </thead>\n        <tbody id=\"totalBody\"></tbody>\n      </table>\n      <p><b>Name and balance of individual accounts</b></p>\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Account Name</th>\n            <th scope=\"col\">Account Balance</th>\n            <th scope=\"col\"></th>\n </tr>\n        </thead>\n        <tbody id=\"individualBody\"></tbody>\n      </table>\n    </div>\n  </body>\n</html>\n```", "```\nvar abi_str = JSON.stringify(abi);\nvar sha = esss.shaAbi(abi_str).abiSha3;\nreload();\n\nfunction reload() {\n  document.querySelector(\"#totalBody\").innerHTML = \"\";\n  document.querySelector(\"#individualBody\").innerHTML = \"\";\n  var tInner = \"\";\n  var total = 0;\n  esss.searchUsingAbi(sha).then((searchResult) => {\n    var items = JSON.parse(searchResult);\n    items.sort(compareItem);\n    items.forEach(function(item) {\n      tInner = tInner +\n        \"<tr id='\" + item.contractAddress + \"'><td>\" +\n        item.functionData.getAccountName +\n        \"</td><td>\" + item.functionData.getAccountBalance +\n        \"</td><td><button class='btn btn-info' \" +\n        \"onclick='setNumber(this)'>Update balance</button></td></tr>\";\n      total = total + parseInt(item.functionData.getAccountBalance);\n}); // end of JSON iterator\n    document.querySelector(\"#totalBody\").innerHTML =\n      \"<tr id='total'><td>\" + total + \"</tr>\";\n    document.querySelector(\"#individualBody\").innerHTML = tInner;\n  }); // end of esss\n}\n\nfunction setNumber(element) {\n    var tr = element.closest(\"tr\");\n    instance = contract.at(tr.id);\n    var n = window.prompt(\"Input a number:\");\n    n && instance.setAccountBalance(n);\n setTimeout(function() {\n      element.innerHTML = \"Sending …\";\n      esss.updateStateOfContractAddress(\n        abi_str, instance.address).then((c2i) => {\n          reload();\n      });\n    }, 2 * 1000);\n}\n\nfunction compareItem(a, b) {\n    let comparison = 0;\n    if (a.blockNumber < b.blockNumber) {\n        comparison = 1;\n    } else if (a.blockNumber > b.blockNumber) {\n        comparison = -1;\n    }\n    return comparison;\n}\n```", "```\nesss.searchUsingAbi(sha).then((searchResult) => {\n  var items = JSON.parse(searchResult);\n  items.forEach(function(item) {\n    // Puts the items into the table\n    total = total + parseInt(item.functionData.getAccountBalance);\n  });\n  // Displays the total\n});\n```", "```\nfunction setNumber(element) {\n  ... ...\n  instance.setAccountBalance(n);\n  ... ...\n  esss.updateStateOfContractAddress(\n    abi_str, instance.address).then((c2i) => {\n      reload();\n  });\n}\n```", "```\nfunction withdraw(uint _amount) {\n    require(balances[msg.sender] >= _amount);\n    msg.sender.call.value(_amount)();  // Reentrancy bug here.\n    balances[msg.sender] -= _amount;\n}\n```", "```\nfunction batchTransfer(address[] _receivers, uint256 _value)\n                         public whenNotPaused returns (bool) {\n  uint cnt = _receivers.length;\n  uint256 amount = uint256(cnt) * _value; // Overflow\n  require(cnt > 0 && cnt <= 20);\n  require(_value > 0 && balances[msg.sender] >= amount);\n balances[msg.sender] = balances[msg.sender].sub(amount);\n  for (uint i = 0; i < cnt; i++) {\n    balances[_receivers[i]] = balances[_receivers[i]].add(_value);\n    Transfer(msg.sender, _receivers[i], _value);\n  }\n  return true;\n}\n```", "```\nfunction airdrop() private view returns(bool) {\n  uint256 seed = uint256(keccak256(abi.encodePacked(\n  (block.timestamp).add\n  (block.difficulty).add\n  ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add\n  (block.gaslimit).add\n  ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)).add\n  (block.number)\n  ))); // Random number generation\n\n  if((seed – ((seed / 1000) * 1000)) < airDropTracker_)\n    return(true);\n  else\n    return(false);\n}\n```"]