- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blockchain Ecosystem
  prefs: []
  type: TYPE_NORMAL
- en: Distributed ledger technology (DLT), commonly known as “blockchain,” refers
    to the technology of working on decentralized databases that provides control
    over the evolution of data between entities, through a Peer-to-Peer (P2P) network,
    where consensus algorithms ensure replication across the nodes of the network.
  prefs: []
  type: TYPE_NORMAL
- en: '***Nodes***'
  prefs: []
  type: TYPE_NORMAL
- en: A blockchain system is made up of multiple nodes, each of which has its own
    copy of the ledger. Nodes communicate with each other to reach consensus on the
    records of the ledger, eliminating the need of a central authority for coordination
    or verification.
  prefs: []
  type: TYPE_NORMAL
- en: Nodes also help with the entry of new data as well as the verification and transmission
    of submitted data on the blockchain (Lewis and Larsen, 2016). Any node can request
    to add any transaction. However, the transaction is accepted only if majority
    of the nodes agree on its validity (Boucher, 2017). When all nodes reach a consensus
    (Lewis, McPartland, and Ranjan, 2017), transactions are recorded on a new block
    and added to the existing chain (Singh and Singh, 2016). This work is known as
    “mining.”
  prefs: []
  type: TYPE_NORMAL
- en: '***Miners***'
  prefs: []
  type: TYPE_NORMAL
- en: Miners create new blocks on the blockchain chain by a process called mining.
    Each block in a blockchain has its own unique nonce and hash, which refers to
    the hash of the previous block in the chain.
  prefs: []
  type: TYPE_NORMAL
- en: Mining a block is a cumbersome task, especially on large chains. Miners use
    specialized software to solve the incredibly complex mathematical problem of finding
    the nonce that generates an acceptable hash. Since the nonce is only 32 bits and
    the hash is 256, the probability of perfect mining is formed after mining about
    four billion possible nonhash combinations.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, after solving a complex cryptographic algorithm, a miner adds each new
    block to the chain, which is accepted as legitimate data by a majority of nodes
    in the network. The network rewards miners with digital credits for adding a valid
    block to the chain. This is an incentive provided for miners to maintain and continuously
    verify the consistency of data across the network.
  prefs: []
  type: TYPE_NORMAL
- en: '***Wallets***'
  prefs: []
  type: TYPE_NORMAL
- en: Wallet is an application that allows end-users to create and maintain private
    keys and derive public keys or addresses from them. Unlike real-world wallets
    that store money (cash or credit cards), it’s only the private key that acts as
    an indicator to your tokens in the blockchain. If the private key is lost or compromised;
    the same will happen with the token too, and the holder will not be able to make
    any claim on it.
  prefs: []
  type: TYPE_NORMAL
- en: Wallets can be of two types, deterministic and nondeterministic. The main difference
    between the two is that deterministic wallets allow you to recover a private key
    from a seed. The seed is a pass-phrase or a set of words, written on a piece of
    paper and stored in an offline medium. If the private key is lost, it can be recovered
    through the seed. However, with nondeterministic wallets, if the private key is
    lost, there is no way to recover the same.
  prefs: []
  type: TYPE_NORMAL
- en: Two more factors to be considered when choosing a wallet are the platform where
    it operates and how it preserves the private keys. Wallet can be a web wallet,
    a mobile wallet, or a hardware wallet. Wallets that do not give you direct access
    to your keys are known as custodial wallets.
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 Working of Blockchain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Blockchain realizes trust by validation, verification, and consensus algorithms.
    Garg (2021a, 2021b) has illustrated its working in the following manner (see [Figure
    3.1](#c03-fig-0001)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/c03f001.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**Figure 3.1**](#rc03-fig-0001) Working of blockchain.'
  prefs: []
  type: TYPE_NORMAL
- en: The user, who wants to join the blockchain network, first creates an account
    (see [Figure 3.2](#c03-fig-0002)).![](images/c03f002.png)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Figure 3.2**](#rc03-fig-0002) Creating blockchain account.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then a genesis file is created and a genesis block is initialized (see [Code
    Cell 3.1](#c03-feafxd-0001)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[**Code Cell 3.1**](#rc03-feafxd-0001) Content of genesis file.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After starting nodes, peers are added using the blockchain APIs (see [Figure
    3.3](#c03-fig-0003)).![](images/c03f003.png)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Figure 3.3**](#rc03-fig-0003) Adding peers on the blockchain.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Peer accounts addition may be confirmed (see [Figure 3.4](#c03-fig-0004); [Code
    Cell 3.2](#c03-feafxd-0002)) and the account balances may be checked (see [Figures
    3.5](#c03-fig-0005)) by clicking the given options.![](images/c03f004.png)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Figure 3.4**](#rc03-fig-0004) Checking peer account.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](images/c03f005.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[**Figure 3.5**](#rc03-fig-0005) Checking account balances.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[**Code Cell 3.2**](#rc03-feafxd-0002)Connected peer node – 1.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using these unlocked accounts, transactions can be initiated on the blockchain
    (see [Figure 3.6](#c03-fig-0006)).![](images/c03f006.png)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Figure 3.6**](#rc03-fig-0006) Transacting on the blockchain.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Transactions, the fundamental elements of the blockchain, are validated and
    broadcast.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple transactions form a block.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several blocks form a chain through a digital data link.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blocks go through a consensus process to select the next block to be added to
    the chain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The chosen block is verified and added to the current chain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The validation and consensus processes are carried out by special peer nodes
    called miners.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miners are powerful computers executing software defined by the blockchain protocol.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blocks are joined together with links created by referenced hashes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.2 Key Characteristics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Blockchain has the following key characteristics (Garg, 2021c) (see [Figure
    3.7](#c03-fig-0007)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/c03f007.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**Figure 3.7**](#rc03-fig-0007) Key characteristics of blockchain.'
  prefs: []
  type: TYPE_NORMAL
- en: 3.2.1 Decentralization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a blockchain, no centralized authority is required to validate the transactions.
    Consensus algorithms sustain data consistency in distributed networks.
  prefs: []
  type: TYPE_NORMAL
- en: 3.2.2 Persistence
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is virtually impossible to delete or rollback a transaction once it is added
    to the blockchain. Transactions are validated quickly, and invalid transactions
    are not admitted by honest miners. Therefore, blocks that contain invalid transactions
    can be detected immediately.
  prefs: []
  type: TYPE_NORMAL
- en: 3.2.3 Anonymity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each user can transact in the blockchain using a generated address, which does
    not disclose the real identity of the user.
  prefs: []
  type: TYPE_NORMAL
- en: 3.2.4 Auditability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Blockchain stores data about user balances based on the Unspent Transaction
    Output (UTXO) model (Nakamoto, 2008). Any transaction has to refer to some previous
    unspent transactions.
  prefs: []
  type: TYPE_NORMAL
- en: 3.3 Unspent Transaction Output
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Used to maintain the state of blockchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Referenced as inputs and outputs in a transaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stored by all participant nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transaction is transmitted from one/more input Unspent Transaction Outputs (UTXOs)
    to output UTXOs (see [Figure 3.8](#c03-fig-0008)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](images/c03f008.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**Figure 3.8**](#rc03-fig-0008) Input and output UTXOs references.'
  prefs: []
  type: TYPE_NORMAL
- en: 3.4 Classification of Blockchain on Access Management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Current blockchain systems are generally classified into three broad categories:
    public blockchain, private blockchain, and consortium blockchain (Buterin, 2015).'
  prefs: []
  type: TYPE_NORMAL
- en: 3.4.1 Public Blockchain
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a public blockchain, all records are visible to the public and each node
    can participate in the consensus process. Public blockchains are also known as
    permissionless blockchains. In a public blockchain, any user, whoever wishes to
    transact with the network, can participate and write on the blockchain. This is
    quite useful for those who do not rely on any single central authority. Blockchain
    technology adopts a decentralized consensus mechanism to ensure the reliability
    and consistency of data and transactions. In an unlicensed blockchain, miners
    use different algorithms to validate transactions. Transactions are recorded and
    added to the blockchain when a majority of nodes reach consensus and approve it.
  prefs: []
  type: TYPE_NORMAL
- en: A public blockchain uses proof-of-work because it ensures that transactions
    cannot be tampered with as long as no single miner controls more than 50% of the
    network’s hash power. An automated consensus mechanism allows each copy of the
    ledger to be updated almost instantly. Once a transaction is added to the blockchain,
    as all nodes share a copy of the ledger, all ledgers reflect the change.
  prefs: []
  type: TYPE_NORMAL
- en: 3.4.2 Private Blockchain
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In contrast, private blockchains only allow nodes coming from a specific organization
    to participate in the consensus process. These are also called “permissioned blockchains.”
    Being fully controlled by one organization, it is often thought of as a centralized
    network. In a permissioned blockchain, the power to access, verify, and add transactions
    in the ledger is delegated to a limited group. There is also a possibility that
    in a permissioned blockchain, some users may be allowed to view all transactions
    in the ledger but may not have rights to write any transaction. Users can view
    information and transactions in the ledger, depending on their level of access.
  prefs: []
  type: TYPE_NORMAL
- en: In a permissioned blockchain, the access levels and roles of users are predetermined.
    Once submitted by the parties involved in a transaction, it is validated by other
    permitted members of the blockchain. Since private blockchain mechanisms are limited
    to just an organization or a group of people involved, it is easy to build consensus.
  prefs: []
  type: TYPE_NORMAL
- en: In order to make the best use of both public and private blockchain solutions,
    a hybrid blockchain model can also be adopted.
  prefs: []
  type: TYPE_NORMAL
- en: 3.4.3 Consortium Blockchain
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The consortium blockchain enables a group of pre-selected nodes to participate
    in the consensus process. Since only a small fraction of nodes are selected to
    determine consensus, the consortium blockchain built by multiple organizations
    is somewhat decentralized. A comparison between the three types of blockchains
    is listed in [Table 3.1](#c03-tbl-0001).
  prefs: []
  type: TYPE_NORMAL
- en: '[**Table 3.1**](#rc03-tbl-0001) Comparisons among public blockchain, consortium
    blockchain, and private blockchain.'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Public blockchain** | **Consortium blockchain** | **Private
    blockchain** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Centralized | Decentralized | Partially centralized | Fully centralized |'
  prefs: []
  type: TYPE_TB
- en: '| Consensus process | Permissionless (anyone can join the consensus process)
    | Permissioned | Permissioned |'
  prefs: []
  type: TYPE_TB
- en: '| Consensus determination | All miners (each node could take part in the consensus
    process) | Only a selected set of nodes are responsible for validating the block
    | Fully controlled by one organization that could determine the final consensus
    |'
  prefs: []
  type: TYPE_TB
- en: '| Read permission | Public | Depends, could be public or restricted | Depends,
    could be public or restricted |'
  prefs: []
  type: TYPE_TB
- en: '| Immutability | Nearly impossible to tamper since records are stored with
    a large number of participants | Could be tampered easily as there is only limited
    number of participants | Could be tampered easily as there is only limited number
    of participants |'
  prefs: []
  type: TYPE_TB
- en: '| Efficiency | Low (transaction throughput is limited and the latency is high
    because of the large number of nodes on the public blockchain network). | High
    (with fewer validators, the system is more efficient). | High (with fewer validators,
    the system is more efficient). |'
  prefs: []
  type: TYPE_TB
- en: '| Examples | Bitcoin, Dash, Ethereum, IOTA, Litecoin, Monera, Steemit, Stellar,
    Zcash, etc. | Quorum, Hyperledger, and Corda | R3 (banks), EWF (Energy), B3i (Insurance
    Corda) |'
  prefs: []
  type: TYPE_TB
- en: '| Miners | Don’t know each other | May or may not know each other | Know each
    other |'
  prefs: []
  type: TYPE_TB
- en: 3.5 Consensus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A consensus mechanism is a fault tolerant mechanism, used to achieve agreement
    on the state of the blockchain to ensure the validity and authenticity of transactions.
  prefs: []
  type: TYPE_NORMAL
- en: In order to understand the ideology behind the creation of blockchain, one must
    begin with the classical problem, in the distributed system, popularly known as
    the Byzantine Generals Problem (BGP). According to the BGP scheme, several armies
    congregate to attack a castle. The castle may only be conquered if all armies
    attack at the same point of time. Suppose the principal army orders all the other
    armies to attack at a pre-determined time through a messenger. The messenger can
    be captured during transit and thus the message to attack the castle would never
    be distributed. To make sure that the message has been delivered, the sender may
    call for an acknowledgment, but here again, there is a possibility that the deliverer
    of the acknowledgment may also be detained.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, a consensus has to be reached, certifying that (i) the sender of
    the attack message knows that all other armies have received this message; and
    (ii) each army that receives this message confirms that all other armies have
    received this message. Now presume that instead of sending a messenger, the general
    sends this attack message through a blockchain. The attack is scheduled for six
    hours from now. The Proof-of-Work, used on this blockchain, is that if all armies
    work toward solving the problem at the same point of time, it will take about
    ten minutes for the first solution to appear. Once the general, who has sent the
    attack message, finds valid Proof-of-Work solutions, appearing nearly every ten
    minutes, he could be assured that all other armies have received the message.
    It is unlikely for a few armies to be producing valid Proof-of-Work solutions
    at this rate. At the same time, all other armies would be fully assured that every
    other army has seen the attack message, given the rate at which Proof-of-Work
    solutions are being produced.
  prefs: []
  type: TYPE_NORMAL
- en: The same logic applies to the idea of a distributed ledger. Just as the blockchain
    solution to the BGP ensures all parties to know that all other parties have seen
    a message, this rationale can be used to verify that all parties agree on the
    current state of a ledger (Mahmoud, Lescisin, and Taei, 2019).
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to achieve consensus, following approaches are used:'
  prefs: []
  type: TYPE_NORMAL
- en: 3.5.1 Proof-of-Work
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Proof-of-Work (PoW) is a consensus strategy used in the Bitcoin network (Nakamoto,
    2008). In a decentralized network, some strategy has to be selected to record
    the transactions, for which random selection is the easiest way. However, random
    selection is susceptible to attacks. So, if a node wants to publish a block of
    transactions, a lot of work (computation) has to be done to prove that the node
    is not expected to attack the network.
  prefs: []
  type: TYPE_NORMAL
- en: In PoW, each node of the network calculates a hash value of the block header.
    The block header contains a nonce, and the miners would change the nonce recurrently
    to get different hash values. The consensus requires that the calculated value
    must be equal to or lesser than a certain given value. When one node reaches the
    target value, it would broadcast the block to other nodes, and all other nodes
    must mutually confirm the accuracy of the hash value. If the block is validated,
    other miners would attach this new block to their own blockchain. Nodes that calculate
    the hash values are called “miners,” and the PoW procedure is called “mining.”
  prefs: []
  type: TYPE_NORMAL
- en: In a decentralized network, valid blocks can be generated concurrently when
    multiple nodes find the appropriate nonce nearly at the same time. As a result,
    branches may be generated (see [Figure 3.9](#c03-fig-0009)). Even so, it is unlikely
    that two competing forks will form the next block concomitantly. In PoW protocol,
    a chain that becomes longer is judged as the authentic one. Consider two forks
    created by simultaneously validated blocks U4 and B4\. Miners keep mining their
    blocks until a longer branch is generated. As B4–B5 forms a longer chain, so the
    miners on U4 would switch over to the longer branch. As miners need to do a lot
    of computer calculations in PoW, these works waste plenty of resources.
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/c03f009.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**Figure 3.9**](#rc03-fig-0009) Proof-of-work – Fault tolerance mechanism.'
  prefs: []
  type: TYPE_NORMAL
- en: 3.5.2 Proof-of-Stake
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Proof-of-Stake (PoS) is an energy-saving alternative to PoW. Miners in PoS have
    to prove the ownership of the currency. It is assumed that people with more currencies
    are less likely to attack the network. However, this assumption does not seem
    reasonable because the single richest person can dominate the network. Consequently,
    several solutions were proposed with the combination of stake size to decide which
    one to forge the next block. Blackcoin, for instance, uses randomization to predict
    the next generator (Vasin, 2014). It employs a formula that looks for the lowest
    hash value in conjunction with the stake size. Many blockchains adopt PoW in the
    beginning and gradually switch to PoS (Wood, 2014; Zamphir, 2015).
  prefs: []
  type: TYPE_NORMAL
- en: 3.5.3 Peercoin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Peercoin promotes coin-based selection (King and Nadal, 2012). Here, the older
    and larger set of coins have the greater probability of mining the next block.
    But, since the mining cost is almost zero, possibilities of attacks cannot be
    ruled out.
  prefs: []
  type: TYPE_NORMAL
- en: 3.5.4 Practical Byzantine Fault Tolerance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Practical Byzantine Fault Tolerance (PBFT) is a replication algorithm to tolerate
    Byzantine faults (Miguel and Barbara, 1999). A new block is determined in a round.
    In each round, a primary would be selected according to certain rules, which is
    responsible for ordering transactions. The entire process can be divided into
    three phases: pre-prepared, prepared, and committed. In each phase, a node will
    enter the next phase if it has got more than two-thirds of the votes of all nodes.
    It’s a precondition that each node is known to the network. Similar to PBFT, Stellar
    Consensus Protocol (SCP) is also a Byzantine agreement protocol (Mazieres, 2015).
    PBFT mandates each node to query other nodes while SCP provides participants the
    right to choose which group of other participants to trust.'
  prefs: []
  type: TYPE_NORMAL
- en: 3.5.5 Delegated Proof-of-Stake
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Delegated Proof-of-Stake (DPoS) is representative democratic and is different
    from PoS, which is direct democratic. Stakeholders elect their representatives
    to create and validate the block. Since there are fewer nodes to validate the
    block, the block can be confirmed more quickly, leading to faster confirmation
    of transactions. Meanwhile, parameters of the network, such as block size and
    block interval, can be tuned by delegates. In addition, users do not have to worry
    about unscrupulous representatives as they can be voted off easily.
  prefs: []
  type: TYPE_NORMAL
- en: 3.5.6 Ripple
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is a consensus algorithm that uses trusted sub-networks collectively within
    a larger network (Schwartz, Youngs, and Britto, 2014). In the network, nodes are
    divided into two types: servers for participating in the consensus process and
    clients only for transferring funds. Each server has a unique node list (UNL),
    which is important to the server. When deciding whether to put the transaction
    in the ledger, the server will query the nodes in the UNL, and if the received
    agreement has reached 80%, the transaction will be packed into the ledger. For
    a single node, the ledger will be correct, given that the percentage of faulty
    nodes in the UNL is less than 20%.'
  prefs: []
  type: TYPE_NORMAL
- en: 3.5.7 Tendermint
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is a Byzantine consensus algorithm (Kwon, 2014). In round one, a new block
    is determined, and a proposer will be selected to broadcast an unconfirmed block.
    It can be divided into three phases: pre-vote, pre-commit, and commit. During
    the pre-vote phase, validators choose whether to broadcast pre-votes for the proposed
    block. In the pre-commit phase, it is determined that if a node has received more
    than two-thirds of the pre-votes on a proposed block, it broadcasts a pre-commit
    for that block. If the node receives more than two-thirds of the pre-commit, it
    enters the commit phase. To finish, the node validates the block and broadcasts
    a commit for that block (commit phase). If the node receives two-thirds of the
    commit, it accepts the block. Unlike PBFT, nodes have to lock their coins in order
    to become validators. Once the verifier is found to be dishonest, they will be
    penalized.'
  prefs: []
  type: TYPE_NORMAL
- en: '3.5.8 Consensus Algorithms: A Comparison'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Different consensus algorithms have different advantages and disadvantages (Vukolic,
    2015) (see [Table 3.2](#c03-tbl-0002)).
  prefs: []
  type: TYPE_NORMAL
- en: '[**Table 3.2**](#rc03-tbl-0002) Comparisons among Typical Consensus Algorithms.'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **PoW** | **PoS** | **PBFT** | **DPOS** | **Ripple** | **Tendermint**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Node identity management | Open | Open | Permis-sioned | Open | Open | Permis-sioned
    |'
  prefs: []
  type: TYPE_TB
- en: '| Energy saving | No | Partial | Yes | Partial | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Tolerated power of adversary | <25%computingpower | <51%stake | <33.3%faulty
    replicas | <51%validators | <20%Faulty nodes in UNL | <33.3%Byzantine voting power
    |'
  prefs: []
  type: TYPE_TB
- en: '| Example | Bitcoin (Nakamoto, 2008) | Peercoin (King and Nadal, 2012) | Hyperledger
    Fabric (HPL, 2015) | Bitshares | Ripple (Schwartz, Youngs, Britto, 2014) | Tendermint
    (Kwon, 2014) |'
  prefs: []
  type: TYPE_TB
- en: 3.5.8.1 Node Identity Management
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: PBFT needs to know the identity of each miner in order to select a primary in
    each round, while Tendermint needs to know the validators in order to select a
    proposer in each round. For PoW, PoS, DPOS, and Ripple, nodes can connect to the
    network independently.
  prefs: []
  type: TYPE_NORMAL
- en: 3.5.8.2 Energy Saving
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In PoW, miners hash the block header nonstop to reach the target value. As an
    effect, the electricity requirement touches maxima on scale. In PoS and DPOS,
    miners have to hash the block header to find the target value, but the work is
    largely reduced due to limited search space. For PBFT, Ripple, and Tendermint,
    since there is no mining in the consensus process, an enormous amount of energy
    is saved.
  prefs: []
  type: TYPE_NORMAL
- en: 3.5.8.3 Tolerated Power of Adversary
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In general, 51% hash power is considered as the threshold for gaining control
    over the network. But selfish mining strategy in PoW systems could help miners
    to gain more revenue with hardly 25% of the hashing power (Eyal and Sirer, 2014).
    PBFT and Tendermint can handle up to one-third faulty nodes. Ripple is capable
    of maintaining correctness, if the faulty nodes in a UNL are less than 20%.
  prefs: []
  type: TYPE_NORMAL
- en: 3.5.9 Advances in Consensus Algorithms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A good consensus algorithm means efficiency, security, and convenience. In recent
    times, there has been a tremendous surge in efforts to improve consensus algorithms
    in blockchain. More and more consensus algorithms are being devised to solve some
    of the specific problems of blockchain (Zheng et al., 2017).
  prefs: []
  type: TYPE_NORMAL
- en: One of these new ideas is peer census (Decker, Seidel, and Wattenhofer, 2016).
    It aims to decouple block creation and transaction confirmations in order to increase
    the speed of consensus. Besides, Kraft (2016) has suggested a new consensus scheme
    to ensure that a block is generated at a fairly stable speed, assuming that a
    high rate of block generation may compromise Bitcoin’s security.
  prefs: []
  type: TYPE_NORMAL
- en: In a further advancement, Sompolinsky and Zohar (2013) have recommended a Greedy
    Heaviest-Observed Subtree (GHOST) chain selection rule to solve this problem.
    In this method, instead of the longest branch scheme, GHOST weighs the branches,
    and the miners can choose the better one to follow. Chepurnoy, Larangeira, and
    Ojiganov (2016) also introduced a new consensus algorithm for peer-to-peer blockchain
    systems, where anyone who provides non-interactive proofs of retrievability for
    the past state snapshots, is allowed to generate a block. In such a protocol,
    the miners have to store the old block headers only, and not the entire blocks.
  prefs: []
  type: TYPE_NORMAL
- en: 3.6 Payment Verification in Blockchain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 3.6.1 Simple Payment Verification
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Simple payment verification (SPV) is a process that enables a lightweight client
    to verify whether a transaction is on the Bitcoin blockchain without having to
    download the entire blockchain. An SPV client only needs to download the block
    headers, which are much smaller than the entire block. The SPV client requests
    the Merkle branch to test whether the transaction has been included in the block.
    SPV clients provide better security than web wallets.
  prefs: []
  type: TYPE_NORMAL
- en: 3.6.1.1 Key Features
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It is easy and more practical to know the longest chain without becoming a miner.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A user has to preserve just a copy of the longest proof-of-work chain’s block
    headers and retrieve the Merkle branch that connects the transaction to the block.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although a user cannot test a transaction for himself, he can still see if it
    has been approved by a network node. He can tie the transaction to a point in
    the chain and stop it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thus, as long as the network is controlled by honest nodes, verification is
    reliable, although it becomes vulnerable as soon as an attacker takes control
    of the network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The simplified approach can be adulterated or destroyed as long as the attacker
    is successful in maintaining dominance over the network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The singular way to defend the process is to accept warnings from network nodes
    when they identify an incorrect block, force the user’s program to download the
    whole block, or notify transactions to validate the discrepancy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.6.2 Full Payment Verification
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Payment verification, in its totality, requires a complete copy of the blockchain,
    often referred to as a coarse or heavyweight wallet. It helps to verify whether
    the Bitcoins used in the transaction came from a mined block. Here, the blockchain
    is scanned transaction by transaction in retrospect, until they find the source.
  prefs: []
  type: TYPE_NORMAL
- en: 3.6.2.1 Key Features
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: These wallet applications act as active players in the Bitcoin network. They
    not only manage the user’s transactions but also verify and relay the trades of
    other individuals. In such situations, computers executing these applications
    are called full nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Full nodes are all Bitcoin miners, which means they need a complete copy of
    the blockchain to mine.
  prefs: []
  type: TYPE_NORMAL
- en: So far, the blockchain has grown to ≥15 GB in size and included 35 million transactions
    within five years. The technology is likely to grow over hundred times in the
    next five years.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on its bandwidth, it can take several days for the blockchain network
    to be downloaded through the Bitcoin wallet application.
  prefs: []
  type: TYPE_NORMAL
- en: This requires all parties (all nodes) on the network to be connected to present
    their individual findings and to determine which blockchain has the highest proof-of-work
    to reach consensus.
  prefs: []
  type: TYPE_NORMAL
- en: 3.7 Hashgraph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It addresses the problem of efficient consensus algorithms from the point of
    view of security and power consumption. It uses an Asynchronous Byzantine Fault
    Tolerance algorithm that can confirm transactions within five seconds (no transaction
    records required) as opposed to about 70 minutes for Proof-of-Work in Bitcoins.
  prefs: []
  type: TYPE_NORMAL
- en: 3.7.1 Elements of Hashgraph
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Event
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Transaction
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Directed acyclic graph
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Round
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Participant node
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Witness: both famous and nonfamous witnesses'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Consensus (derived or computed) by voting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 3.7.2 Diagrammatic Representation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hashgraph also uses timestamps to order transactions after the round. The vertical
    bars indicate the time dimension in the hashgraph. The direction of the time axis
    is from bottom to top. Rounds of events assist in the virtual voting process.
    The round number is accessed as the roundCreated value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The event is depicted as a filled circle (see [Figure 3.10](#c03-fig-0010))
    and has the following characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: Event ID
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hashes of sender and receiver parents
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](images/c03f010.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**Figure 3.10**](#rc03-fig-0010) Limenberg’s representation of hashgraph.'
  prefs: []
  type: TYPE_NORMAL
- en: The lines joining the events are known as transactions.
  prefs: []
  type: TYPE_NORMAL
- en: 3.7.3 How Does Hashgraph Work?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first event in a round created by each participant is called a witness.
    It may later qualify to become a famous or nonfamous witness, depending on what
    is witnessed by subsequent events.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: “Seeing” means that there is a path down to all witnesses from an event. By
    “strongly seeing,” it is indicated that one event outperforms the other event
    by the supermajority of participants.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the event can see all or a supermajority of witnesses of a round R, then
    roundCreated is incremented by one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After creation of a new round, the fame of the previous witnesses is categorized
    as famous or not-famous.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Votes are counted on the basis of fame status, graph structure, and results
    of perseverance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Events are arranged i.e., roundReceived and Median timestamps are assigned,
    which in turn arrange transactions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 3.8 Scalability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the ever-increasing volume of transactions, the blockchain becomes heavy.
    Due to the inherent restrictions of block size and the time lag for generating
    a new block, the Bitcoin blockchain can process around seven transactions per
    second, failing to meet the need to process millions of transactions on a real-time
    basis. Therefore, there can be only two alternatives: one is storage optimization
    and the other is redesigning.'
  prefs: []
  type: TYPE_NORMAL
- en: Bruce (2014) proposed a new cryptocurrency scheme, in which old transaction
    records are deleted (or forgotten) by the network. This is important because it
    is not so easy for a node to operate a full copy of the ledger.
  prefs: []
  type: TYPE_NORMAL
- en: 'Eyal et al. (2016) proposed Bitcoin-Next Generation to decouple the conventional
    block into two parts: the major block to elect the leader; and the microblocks
    for transaction storage. Time is divided into epochs, and in each epoch, miners
    have to hash, in order to create a major block. Once a key block is generated,
    the node becomes the leader, responsible for generating the microblock. Bitcoin-NG
    also expanded the longest chain strategy with microblocks carrying no weight.
    Thus, by redesigning the blockchain, the trade-off between block size and network
    security is being addressed.'
  prefs: []
  type: TYPE_NORMAL
- en: Coming up
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The preceding chapter has provided an outline of the blockchain architecture,
    design, and representation. The next chapter deals with the in-depth analysis
    of blockchain at the transaction level from financial and programmable perspectives.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Boucher P, 2017\. How blockchain technology could change our lives. European
    Parliamentary Research Service, 1–24\. [https://epthinktank.eu/2017/03/01/how-blockchain-technology-could-change-our-lives](https://epthinktank.eu/2017/03/01/how-blockchain-technology-could-change-our-lives)/Accessed
    on 01 March 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bruce JD, 2014\. The Mini Blockchain Scheme (Revised 2017). [https://cryptonite.info/files/mbc-scheme-rev3.pdf](https://cryptonite.info/files/mbc-scheme-rev3.pdf)/.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Buterin V, 2015\. A Next-Generation Smart Contract and Decentralized Application
    Platform. White paper, 1-36\. [https://blockchainlab.com/pdf/Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf](https://blockchainlab.com/pdf/Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf)/Accessed
    on 03 June 2020.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chepurnoy A, Larangeira M, and Ojiganov A, 2016\. A Prunable Blockchain Consensus
    Protocol Based on Non-Interactive Proofs of past States Retrievability. [https://www.researchgate.net/publication/301878891_A_Prunable_Blockchain_Consensus_Protocol_Based_on_Non-Interactive_Proofs_of_Past_States_Retrievability](https://www.researchgate.net/publication/301878891_A_Prunable_Blockchain_Consensus_Protocol_Based_on_Non-Interactive_Proofs_of_Past_States_Retrievability)/.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Decker C, Seidel J, and Wattenhofer R, 2016\. Bitcoin Meets Strong Consistency.
    Proceedings of the 17th International Conference on Distributed Computing & Networking
    Singapore, 13.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Eyal I, Gencer AE, Sirer EG, and Van Renesse R, 2016\. Bitcoining: A Scalable
    Blockchain Protocol. Proceedings of the 13th USENIX Symposium on Networked Systems
    Design and Implementation, Santa Clara CA, 45–59.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Eyal I and Sirer EG, 2014\. Majority Is Not Enough: Bitcoin Mining Is Vulnerable.
    Proceedings of International Conference on Financial Cryptography and Data Security,
    Berlin, 436–454.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Garg R, 2021a. Distributed Framework for Real World Applications. Barnes & Noble,
    Basking Ridge, New Jersey US, 1–126.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Garg R, 2021b. Ethereum Based Smart Contracts for Trade and Finance. International
    Conference on Blockchain and Smart Contracts, Bangkok Thailand. doi: 10.5281/zenodo.5854730
    [https://www.researchgate.net/publication/357510533_Ethereum_based_Smart_Contracts_for_Trade_Finance](https://www.researchgate.net/publication/357510533_Ethereum_based_Smart_Contracts_for_Trade_Finance)/Accessed
    on 02 February 2022.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Garg R, 2021c. *Identités Auto-souveraines*. Editions Notre Savoir, France,
    1–104.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Hyperledger, 2015\. Hyperledger: Open Source Blockchain Technologies. [https://www.hyperledger.org](https://www.hyperledger.org)/
    Accessed on 01 December 2020.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'King S and Nadal S, 2012\. PPCoin: Peer-to-Peer Cryptocurrency with Proof-of-Stake,
    19\. [https://decred.org/research/king2012.pdf](https://decred.org/research/king2012.pdf).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Kraft D, 2016\. Difficulty control for blockchain based consensus systems.
    Peer-to-Peer Networking and Applications, 9 (2): 397–413.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Kwon J, 2014\. Tendermint: Consensus without Mining. [https://tendermint.com/static/docs/tendermint.pdf](https://tendermint.com/static/docs/tendermint.pdf).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lewis A and Larson M, 2016\. Understanding blockchain technology and what it
    means for your business. DBS Asian Insights. [https://www.dbs.com](https://www.dbs.com)/.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Lewis R, McPartland J, and Ranjan R, 2017\. Blockchain and Financial Market
    Innovation. In Economic Perspectives, 41: 7\. [https://www.chicagofed.org/publications/economic-perspectives/2017/7](https://www.chicagofed.org/publications/economic-perspectives/2017/7).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Mahmoud QH, Lescisin M, and Taei MA, 2019\. Research Challenges and Opportunities
    in Blockchain and Cryptocurrencies. *Internet Technology Letters*. Wiley US, 2
    (93): 01–06.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Mazieres D, 2015\. The Stellar Consensus Protocol: A Federated Model for Internet-Level
    Consensus. Stellar Development Foundation. [http://www.scs.stanford.edu/17au-cs244b/notes/scp.pdf](http://www.scs.stanford.edu/17au-cs244b/notes/scp.pdf).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Miguel C and Barbara L, 1999\. Practical Byzantine Fault Tolerance. Proceedings
    of the 3rd Symposium on Operating Systems Design and Implementation, New Orleans,
    (99) 173–186.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Nakamoto S, 2008\. Bitcoin: A Peer-to-Peer Electronic Cash System. [https://bitcoin.org/bitcoin.pdf](https://bitcoin.org/bitcoin.pdf).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Schwartz D, Youngs N, and Britto A, 2014\. The Ripple Protocol Consensus Algorithm.
    Ripple Labs Inc. White Paper, 5\. [https://ripple.com/files/ripple_consensus_whitepaper.pdf](https://ripple.com/files/ripple_consensus_whitepaper.pdf).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Singh S and Singh N, 2016\. Blockchain: Future of Financial and Cyber Security.
    2nd International Conference on Contemporary Computing and Informatics, India,
    463–467.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sompolinsky Y and Zohar A, 2013\. Accelerating bitcoins transaction processing.
    Fast money grows on trees, not chains. IACR Cryptology e-Print Archive . [https://eprint.iacr.org/2013/881](https://eprint.iacr.org/2013/881).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Vasin P, 2014\. Blackcoins Proof-of-Stake Protocol. [https://blackcoin.org/blackcoin-pos-protocol-v2-whitepaper.pdf](https://blackcoin.org/blackcoin-pos-protocol-v2-whitepaper.pdf).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Vukolic M, 2015\. The Quest for Scalable Blockchain Fabric: Proof-of-Work vs
    BFT Replication. International Workshop on Open Problems in Network Security,
    Zurich, 112–125.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Wood G, 2014\. Ethereum: A Secure Decentralized Generalized Transaction Ledger.
    Ethereum Project Yellow Paper. [https://ethereum.github.io/yellowpaper/paper.pdf](https://ethereum.github.io/yellowpaper/paper.pdf).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Zamfir V, 2015\. Introducing Casper the Friendly Ghost. Ethereum Blog. [https://blog.ethereum.org/2015/08/01/introducing-casper-friendly-ghost](https://blog.ethereum.org/2015/08/01/introducing-casper-friendly-ghost)/.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Zheng Z, Xie S, Dai H, Chen X, and Wang H, 2017\. An Overview of Blockchain
    Technology: Architecture, Consensus, and Future Trends. IEEE 6th International
    Congress on Big Data, 01–08.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
