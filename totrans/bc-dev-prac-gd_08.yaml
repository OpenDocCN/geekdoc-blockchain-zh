- en: © Elad Elrom 2019Elad ElromThe Blockchain Developer[https://doi.org/10.1007/978-1-4842-4847-8_8](https://doi.org/10.1007/978-1-4842-4847-8_8)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © Elad Elrom 2019 Elad Elrom The Blockchain Developer [https://doi.org/10.1007/978-1-4842-4847-8_8](https://doi.org/10.1007/978-1-4842-4847-8_8)
- en: 8. Hyperledger
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8. 超账本
- en: Elad Elrom^([1](#Aff2) )(1)New York, NY, USA
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Elad Elrom^([1](#Aff2) )（1）纽约，纽约，美国
- en: In previous chapters, I covered blockchain technologies that are focused on
    cryptocurrency, and in fact, each project I have covered so far has included its
    own currency. Hyperledger is different; it does not have a currency attached,
    although you can create a coin if needed. Instead, Hyperledger was created with
    the aim of being an open source platform targeted at utilizing blockchain to fit
    business needs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我介绍了专注于加密货币的区块链技术，实际上，到目前为止我所涵盖的每个项目都包含了自己的货币。超账本不同；它没有附加的货币，尽管您需要时可以创建一个硬币。相反，超账本旨在成为一个开源平台，旨在利用区块链满足业务需求。
- en: Hyperledger started in 2015 as an open source blockchain contributed by Digital
    Asset and IBM as a result of a hackathon (now the blockchain is called Hyperledger
    Fabric), and it extended to consists of multiple pluggable modules and the entire
    project is called Hyperledger aimed at improving a blockchain’s performance and
    reliability so you can assemble modules to create your own unique platform to
    fit your business needs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 超账本始于2015年，由数字资产公司和IBM发起的一个黑客马拉松（现在称为超账本Fabric）开源区块链项目，并扩展为多个可插拔模块的集合，整个项目被称为超账本，旨在提高区块链的性能和可靠性，以便您可以组装模块创建您独特的平台以满足您的业务需求。
- en: Note
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Hyperledger project is an umbrella strategy modular architecture consisting
    of a collection of pluggable components that are used to create custom blockchain
    solutions for businesses. The Hyperledger architecture aims to provide scalability,
    performance, confidentiality, resiliency, and flexibility. Note that if you visit
    Hyperledger’s documentation, you’ll often see the term *distributed ledger technology*
    (DLT); this term is synonymous with *blockchain*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 超账本项目是一个伞形战略模块化架构，由一系列用于为企业创建自定义区块链解决方案的可插拔组件集合构成。超账本架构旨在提供可扩展性、性能、机密性、弹性和灵活性。请注意，如果您访问超账本的文档，您经常会看到“分布式账本技术”（DLT）这个术语；这个术语与“区块链”是同义的。
- en: Hyperledger Overview
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 超账本概览
- en: The modular architecture allows you to adjust things like the blockchain’s consensus
    mechanism, as well as manage storage, set services for identities, set permissions
    for the identities you set, and create smart contracts (in Hyperledger Fabric,
    smart contracts are called *chaincode* ). In terms of programming languages, Hyperledger’s
    chaincode is written in Go (Golang); however, you can utilize JavaScript with
    the Hyperledger Composer tool. Chaincode can then be used to implement and automate
    the business logic.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化架构允许您调整诸如区块链的共识机制之类的设置，以及管理存储、为身份设置服务、为设置的身份设置权限以及创建智能合约（在超账本Fabric中，智能合约被称为*链码*）。就编程语言而言，超账本的链码是用Go（Golang）编写的；然而，您可以使用Hyperledger
    Composer工具使用JavaScript。链码随后可用于实现和自动化业务逻辑。
- en: The Hyperledger project’s managing team consists of ten members, and the executive
    director at the time of writing is Brian Behlendorf. In addition, 159 engineers
    from 27 organizations contributed to Hyperledger Fabric v1.0, according to developer.ibm.com.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 超账本项目的管理团队由十名成员组成，写作时项目的执行总监是Brian Behlendorf。此外，根据developer.ibm.com的数据，有来自27个组织的159名工程师为超账本Fabric
    v1.0做出了贡献。
- en: '*“* *Hyperledger* *is an open source development project to benefit an ecosystem
    of Hyperledger based solution providers and users. It is focused on blockchain
    related use cases that will work under a variety of industrial sectors.”*'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“* *超账本* *是一个开源开发项目，旨在造福基于超账本的解决方案提供商和用户生态系统。它专注于将在各种工业部门工作的区块链相关用例。”*'
- en: ''
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Brian Behlendorf (executive director, Hyperledger)
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —Brian Behlendorf（超账本执行总监）
- en: Hyperledger is hosted by the Linux Foundation, and in terms of adoption, it’s
    supported by large enterprise companies such as IBM, Intel, and SAP, as well as
    implemented by Oracle, Accenture, The National Association of Realtors, Deutsche
    Borse Group, Sony Global Education, and many others.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 超账本由Linux基金会托管，在采用方面，它得到了IBM、英特尔和SAP等大型企业公司的支持，同时也被甲骨文、埃森哲、美国房地产经纪人协会、德意志交易所集团、索尼全球教育等实施。
- en: The Hyperledger consensus mechanism allows the network of nodes to choose between
    a no-op (no consensus) mechanism and an agreement protocol called Practical Byzantine
    Fault Tolerance (PBFT). The PBFT consensus enables two or more nodes to agree
    by giving the nodes full control. This precludes other nodes on the network from
    forcing a block, which can prevent potential double spending attacks, as you saw
    with PoW’s 51 percent potential for mining attacks. Hyperledger gives control
    over the consensus mechanism, and you can restrict access to transactions. This
    results in improved performance and scalability as there are fewer nodes that
    need to agree on a block. Additionally, PBFT provides privacy for the network,
    which fits businesses better instead of providing full transparency as you have
    seen in other blockchains.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger共识机制允许网络节点在无操作（无共识）机制和名为实用拜占庭容错（PBFT）的协议之间进行选择。PBFT共识通过赋予节点完全控制权，使两个或更多节点达成一致。这排除了网络上其他节点强制一个区块，这可以防止潜在的双重花费攻击，正如你从PoW的51%潜在挖矿攻击中看到的那样。Hyperledger控制着共识机制，你可以限制对交易的访问。这导致了性能和可伸缩性的提高，因为需要达成共识的节点更少。此外，PBFT为网络提供了隐私性，这对于企业来说比其他区块链提供的完全透明性更适合。
- en: To give you an idea about Hyperledger’s flexibility, you can use a dynamic consensus
    and enable what is called *hot swapping*, where you replace the consensus algorithms
    while the network is running (done with Hyperledger Sawtooth).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你了解Hyperledger的灵活性，你可以使用动态共识，并启用所谓的*热交换*，即在网络运行时更换共识算法（由Hyperledger Sawtooth完成）。
- en: Blockchains focused on cryptocurrency usually provide transparency of transactions
    and network data, because they are dealing with funds and mostly untrusted members.
    However, this also limits the flexibility and how much you can modify the network
    and how much you can control as you are limited by the set of rules. Hyperledger
    is not backed by its own currency and provides more granular control.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 专注于加密货币的区块链通常提供交易和网络数据的透明度，因为它们处理资金，并且大多数情况下成员是不可信的。然而，这也限制了灵活性，以及你可以修改网络和控制的程度，因为你受到一组规则的限制。Hyperledger没有自己的货币支持，提供更加细粒度的控制。
- en: Hyperledger project was built with basic functionality, vanilla flavor, with
    the intention of enabling developers to customize as much as possible, from the
    blockchain’s consensus mechanism to the web interface identity’s permissions,
    which provides limited data to members.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger项目建立在基本功能之上，采用原生风味，旨在使开发者尽可能地进行定制，从区块链的共识机制到Web界面身份的权限，向成员提供有限的数据。
- en: This modular architecture approach allows developers to create specific customized
    personalized blockchains to fit exact business needs. Hyperledger contains the
    following main open source frameworks and tools.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模块化架构方法允许开发者创建特定且定制的个性化区块链，以满足确切的企业需求。Hyperledger包含以下主要的开源框架和工具。
- en: 'Hyperledger frameworks:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hyperledger框架：
- en: '*Hyperledger Fabric (contributed by IBM)*: This is a permission blockchain
    infrastructure with SDKs for Node.js, Java, and GoLang. Hyperledger Fabric is
    the heart of Hyperledger and supports chaincode in GoLang and JavaScript (utilizing
    Hyperledger Composer or natively). Blockchain is based on the endorser/orderer
    architecture. You’ll learn more about this later this chapter.'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Hyperledger Fabric（由IBM贡献）**：这是一个具有Node.js、Java和GoLang SDK的权限型区块链基础设施。Hyperledger
    Fabric是Hyperledger的心脏，支持GoLang和JavaScript（利用Hyperledger Composer或原生支持）的链码。区块链基于背书者/排序者架构。关于这一点，你将在本章后面了解更多。'
- en: '*Hyperledger Burrow*: This is an Ethereum VM built to specification.'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Hyperledger Burrow**：这是一个按照规格构建的以太坊虚拟机。'
- en: '*Hyperledger Indy*: Think independent. This is a tool and library for running
    independent identities on distributed ledgers.'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Hyperledger Indy**：想想独立。这是一个在分布式账本上运行独立身份的工具和库。'
- en: '*Hyperledger Iroha*: This is focused on mobile applications; the code is based
    on Hyperledger Fabric.'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Hyperledger Iroha**：重点是移动应用；代码基于Hyperledger Fabric。'
- en: '*Hyperledger Grid*: This is a solution for a supply chain on a distributed
    ledger. The framework encapsulates Hyperledger implementations of data types,
    models, and smart contracts as well as showcases practical ways to create a supply
    chain business solution.'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Hyperledger Grid**：这是一个基于分布式账本的供应链解决方案。该框架封装了数据类型、模型和智能合约的Hyperledger实现，以及展示创建供应链业务解决方案的实际方法。'
- en: '*Hyperledger Sawtooth (contributed by Intel)*: This framework includes dynamic
    consensus and enables hot swapping of consensus algorithms on a running network.
    This is a more traditional blockchain architecture.'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Hyperledger Sawtooth（由英特尔贡献）*：这个框架包括动态共识，并允许在运行网络中热插拔共识算法。这是一个更传统的区块链架构。'
- en: 'Hyperledger tools:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hyperledger工具：
- en: '*Hyperledger Caliper*: This is a blockchain benchmark tool.'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Hyperledger Caliper*：这是一个区块链基准测试工具。'
- en: '*Hyperledger Cello*: This is an on-demand blockchain module toolkit for creating,
    managing, and terminating blockchains.'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Hyperledger Cello*：这是一个用于创建、管理和终止区块链的按需区块链模块工具包。'
- en: '*Hyperledger Composer*: This tool has collaboration features used with Hyperledger
    Fabric for building blockchains aimed at businesses for chaincode and blockchain
    applications.'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Hyperledger Composer*：这个工具有用于与Hyperledger Fabric合作构建针对企业区块链应用的链码和区块链功能的协作特性。'
- en: '*Hyperledger Explorer*: This is a module to view, invoke, deploy, and query
    blocks, transactions, and network data.'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Hyperledger Explorer*：这是一个用于查看、调用、部署和查询区块、交易和网络数据的模块。'
- en: '*Hyperledger URSA*: This is a shared cryptographic library; it includes shared
    projects such as the implementation of several different signature schemes (base
    crypto libraries) and Z-mix, zero-knowledge proofs ( [https://github.com/hyperledger-labs/z-mix](https://github.com/hyperledger-labs/z-mix)
    ).'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Hyperledger URSA*：这是一个共享密码学库；它包括诸如不同签名方案（基本密码学库）实现和Z-mix，零知识证明（ [https://github.com/hyperledger-labs/z-mix](https://github.com/hyperledger-labs/z-mix)
    ）等共享项目。'
- en: '*Hyperledger Quilt/Interledger.js*: This is an Interledger Protocol (ILP),
    meaning an atomic swapping between ledgers. The payments protocol enables transferring
    an asset (value) across distributed and nondistributed ledgers. There are two
    implementations: the Java one is called Quilt, and the JavaScript one is called
    Interledger.js.'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Hyperledger Quilt/Interledger.js*：这是一个Interledger协议（ILP），意味着账本之间的原子交换。该支付协议允许在分布式和非分布式账本之间转移资产（价值）。有两个实现：Java的一个叫Quilt，JavaScript的一个叫Interledger.js。'
- en: 'A Hyperledger project can be built to allows transactions to be transparent
    as well as confidential when needed. For instance, think of the following business
    need: an airline wants to sell seats to another business, let’s say Expedia. The
    airline business need is to create its own blockchain to keep track of its inventory,
    create transactions, set the price, and keep data confidential. The airline can
    benefit from blockchain, but it has no need for cryptocurrency nor does it want
    to share all the data publicly. The airline can utilize Hyperledger and set a
    private permission network, without exposing the data to the whole world, as you
    would on a public ledger.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 可以构建一个Hyperledger项目，使交易在需要时既透明又保密。例如，考虑以下业务需求：一家航空公司想要将座位卖给另一家商业公司，比如说Expedia。航空公司业务需求是创建自己的区块链以跟踪库存、创建交易、设定价格并保持数据保密。航空公司可以利用区块链，但它不需要加密货币，也不想公开所有数据。航空公司可以利用Hyperledger，建立一个私有的权限网络，不将数据暴露给全世界，正如你会在公共账本上做的那样。
- en: The airline can then set special permissions to identities by issuing encryption
    keys with limited access and then give these encryption keys to specific parties
    only. For instance, only one organization, let’s say Expedia, is able to view
    Expedia-related transactions, seat pricing, and flight information, while other
    identities such as the actual customer can view only the reservation’s information
    related to their account and flight information.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 航空公司可以设置特殊的权限，通过发布具有有限访问权限的加密密钥，然后只将这些加密密钥交给特定的各方。例如，只有一个组织，比如说Expedia，能够查看与Expedia相关的交易、座位定价和航班信息，而其他身份，如实际客户，只能查看与他们的账户和航班信息相关的预订信息。
- en: The finance team can hold the encryption key that can provide more data such
    as profits and loss, cost of fuel, and other data needed for internal usage. This
    can be beneficial to businesses because they can run their data on a ledger instead
    of a centralized database, which is more prone to hacker attacks.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 财务团队可以持有加密密钥，提供更多数据，如利润和损失、燃油成本和其他内部使用所需的数据。这对企业有益，因为它们可以在账本上运行数据，而不是中央数据库，这更容易受到黑客攻击。
- en: As you see, Hyperledger is a large project that covers six frameworks as well
    as five tools. It is impractical to cover all these in one chapter; in fact, it
    could easily take a whole book. In this chapter, I will give you a good foundation
    that can help you understand Hyperledger basics, and you can continue to experiment
    on your own with the other platforms and tools. In this chapter, you will be focusing
    on Hyperledger Fabric, as it’s the most popular Hyperledger platform.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，Hyperledger是一个涵盖六个框架以及五个工具的大型项目。在一个章节中涵盖所有内容是不切实际的；实际上，这很容易占据一整本书。在本章中，我将为你提供一个良好的基础，帮助你理解Hyperledger的基本知识，然后你可以继续使用其他平台和工具自行实验。在本章中，你将重点关注Hyperledger
    Fabric，因为它是最受欢迎的Hyperledger平台。
- en: Understanding Hyperledger Fabric
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Hyperledger Fabric
- en: As I pointed out, Hyperledger Fabric is an open source framework implementation,
    and it’s intended for a private and permission-based business network.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如我所说，Hyperledger Fabric是一个开源框架实现，旨在为私有和基于权限的商业网络服务。
- en: In this chapter, you will create private network permission identities, and
    then you will create a chaincode to implement specific business logic.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将创建私有网络权限身份，然后创建链码来实现特定的业务逻辑。
- en: 'Hyperledger Fabric is designed as the foundation for Hyperledger, and you can
    then use the Hyperledger’s modular architecture to add specific modules depending
    on your business needs. A Hyperledger Fabric network consists of the following
    components:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric被设计为Hyperledger的基础框架，你可以根据业务需求使用Hyperledger的模块化架构添加特定模块。Hyperledger
    Fabric网络由以下组件组成：
- en: '*Assets*: Assets are key-value pairs that represent a value. A value can be
    anything such as a document, stock, or cryptocurrency token. Each asset holds
    a state and ownership.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '资产: 资产是代表价值的键值对。价值可以是任何东西，比如文件、股票或加密货币代币。每个资产都持有状态和所有权。'
- en: '*Shared ledger*: A shared ledger holds its own copy of the ledger with the
    state of the asset. This ledger is called the *world state*. The shared ledger
    also holds a copy of the blockchain, which stores the ownership of the asset by
    recording the transaction’s history.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '共享账本: 共享账本持有账本的状态以及资产的状态。这个账本被称为*世界状态*。共享账本还持有区块链的副本，通过记录交易历史来存储资产的所有权。'
- en: '*Smart contracts (chaincode):* Hyperledger Fabric calls smart contracts *chaincodes*
    that can be programmed in Go (GoLang) or JavaScript (Node.js). Chaincode can interact
    with the shared ledger, assets, and transactions. There’s nothing new here; you
    saw this in other blockchains. Chaincode contains the business logic and can set
    an endorsement policy.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '智能合约（链码）: Hyperledger Fabric将智能合约称为*链码*，可以用Go（GoLang）或JavaScript（Node.js）编程。链码可以与共享账本、资产和交易进行交互。这里没有新内容；你在其他区块链中已经看到了这个。链码包含业务逻辑，并可以设置背书策略。'
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In Hyperledger Fabric, users can define an asset endorsement policy for the
    execution of a chaincode. The endorsement policies set the node peers that are
    needed in order to agree on an accepted transaction to be valid and added to the
    shared ledger.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在Hyperledger Fabric中，用户可以为链码的执行定义一个资产背书策略。背书策略设置了需要达成一致并认为有效的交易以及添加到共享账本所需的对等节点。
- en: '*Membership services provider (MSP)* *:* The MSP is the certificate authority
    that manages the digital certificate; it manages user IDs and authenticates all
    participants on the network. All members must be known identities in order to
    transact on Fabric. That’s because the network is private and based on permissions.
    The MSP is used to authenticate and validate these members’ identities and permissions.
    The MSP uses a certificate generation tool called *cryptogen* . To understand
    MSP better, visit the documentation here: [https://hyperledger-fabric.readthedocs.io/en/latest/msp.html](https://hyperledger-fabric.readthedocs.io/en/latest/msp.html)
    .'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '成员服务提供者（MSP）: MSP是数字证书的管理机构，它管理用户ID并验证网络上的所有参与者。所有成员必须是已知的身份才能在Fabric上进行交易。这是因为网络是私有的，基于权限。MSP用于验证和验证这些成员的身份和权限。MSP使用一个名为*cryptogen*的证书生成工具。为了更好地了解MSP，请访问这里的文档：[https://hyperledger-fabric.readthedocs.io/en/latest/msp.html](https://hyperledger-fabric.readthedocs.io/en/latest/msp.html)
    。'
- en: '*Peer nodes*: The Hyperledger Fabric network is built on peer nodes that are
    owned and contributed by members of the network. A node can be an organization
    or an individual. Nodes hold shared ledgers and can execute chaincode. Nodes can
    access ledger data; they can endorse transactions and interface with applications.
    Nodes can have permission to endorse peers or role for endorsers. Peer nodes receive
    ordered ledger state updates as part of the blocks they receive in order to maintain
    the ledger, or what Hyperledger calls *world state*.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*对等节点*：Hyperledger Fabric 网络建立在由网络成员拥有和贡献的对等节点上。节点可以是组织或个人。节点持有共享账本，并可以执行链码。节点可以访问账本数据；它们可以背书交易并与应用程序接口。节点可以具有背书对等节点或背书者的权限。对等节点接收按顺序的账本状态更新，作为它们接收的块的一部分，以维护账本，或
    Hyperledger 称之为 *世界状态*。'
- en: '*Channel*: Channels can be created by a collection of peer nodes. A group of
    nodes can create a separate ledger of transactions. A channel is similar to the
    P2P channel you created when you formed your own blockchain in Chapter [3](475651_1_En_3_Chapter.xhtml).'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通道*：通道可以由一组对等节点创建。一组节点可以创建一个单独的交易账本。通道类似于您在第 [3](475651_1_En_3_Chapter.xhtml)
    章中创建自己的区块链时创建的 P2P 通道。'
- en: '*Organizations*: Each peer node contributes resources, and together they form
    the collective network. The owning organization can assign peer nodes using a
    digital certificate through the MSP. Additionally, peer nodes from different organizations
    can join a channel. Organizations with separate peer nodes are able to share the
    same MSPs. Best practice is to have one MSP for each organization.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*组织*：每个对等节点贡献资源，它们共同形成集体网络。拥有组织可以使用数字证书通过 MSP 分配对等节点。此外，来自不同组织的对等节点可以加入一个通道。具有不同对等节点的组织可以共享相同的
    MSP。最佳实践是为每个组织提供一个 MSP。'
- en: '*Ordering service:* This service packages transactions into blocks. Blocks
    can then be broadcast to peer nodes and clients on the shared P2P channel. The
    channel outputs the same messages with the same logical order to all peer nodes.
    A consistent logical order is called *atomic delivery*.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*排序服务：* 此服务将交易打包成区块。然后可以将区块广播到共享 P2P 通道上的对等节点和客户端。通道将具有相同逻辑顺序的相同消息输出到所有对等节点。一致的逻辑顺序称为
    *原子交付*。'
- en: Take a look at Figure [8-1](#Fig1), which is a graphical representation of the
    components that make up Hyperledger Fabric.![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig1_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig1_HTML.jpg)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看图 [8-1](#Fig1)，这是组成 Hyperledger Fabric 的组件的图形表示。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig1_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig1_HTML.jpg)
- en: Figure 8-1
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-1
- en: 'Hyperledger Fabric graphical explanation. Photo credit: developer.ibm.com.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric 图形解释。图片来源：developer.ibm.com。
- en: Let’s walk through the Fabric network using the 10,000-foot graphical overview
    in Figure [8-1](#Fig1). The Hyperledger Fabric network acts as the back-end layer
    for client applications.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过图 [8-1](#Fig1) 中的 10,000 英尺图形概览来了解 Fabric 网络。Hyperledger Fabric 网络作为客户端应用程序的后端层。
- en: A client application can be anything such as a dapp, portal, business activity,
    or web site; these types of applications are the front-end layer, and they can
    access chaincodes, transactions, and events through coding the Hyperledger Fabric
    SDK or a REST web service. The client calls a chaincode node, which uses the SDK
    to interact with the network. Unlike the traditional blockchains covered so far,
    Fabric is different because not all peer nodes have the same permissions.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端应用程序可以是任何东西，如 dapp、门户、业务活动或网站；这些类型的应用程序是前端层，它们可以通过编码 Hyperledger Fabric SDK
    或 REST web 服务来访问链码、交易和事件。客户端调用链码节点，该节点使用 SDK 与网络交互。与迄今为止涵盖的传统区块链不同，Fabric 之所以不同，是因为并非所有对等节点都有相同的权限。
- en: Also unlike traditional blockchains, Hyperledger Fabric does not allow unknown
    identities to transact on the network. Organizations, which are called *members*,
    build the Hyperledger Fabric network, and each member can set up their node peers
    through the MSP. You can see in Figure [8-1](#Fig1) that the example has ORG1
    MSP and ORG 2 MSP.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 与传统区块链不同，Hyperledger Fabric 不允许未知身份在网络上进行交易。组织被称为*成员*，它们建立 Hyperledger Fabric
    网络，每个成员可以通过 MSP 设置他们的节点对。您可以在图 [8-1](#Fig1) 中看到示例有 ORG1 MSP 和 ORG2 MSP。
- en: 'Peer nodes can be set up with different rules in the network: endorser peer,
    anchor peer, and orderer peer.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对等节点可以在网络上设置不同的规则：背书节点、锚节点和排序节点。
- en: '*Endorser peer* *:* This receives a request to validate the transaction and
    execute chaincode. The endorser can approve or disapprove the transaction. Only
    the endorsing peer executes chaincode, so there’s no need to install chaincode
    on all peer nodes.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*背书节点* *:* 该节点接收执行交易和链码的请求。背书节点可以批准或拒绝交易。只有背书节点执行链码，因此无需在所有节点上安装链码。'
- en: '*Anchor peer* *:* These peers receive messages and send messages to other peers
    in the organization. The P2P network is made up of the different channels that
    can be set up with permissions so they are not visible to everyone on the network.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*锚定节点* *:* 这些节点接收消息并与其他组织内的节点发送消息。P2P 网络由不同的通道组成，可以设置权限，使其不对网络上的所有人可见。'
- en: '*Orderer peer* *:* This peer handles the shared ledger and is responsible for
    keeping state across the network. The orderer peer generates blocks and broadcasts
    to all peers. The orderer peer can be set as Solo or Kafka.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*排序节点* *:* 此节点处理共享账本，并负责在网络中保持状态。排序节点生成区块并向所有节点广播。排序节点可以设置为 Solo 或 Kafka。'
- en: '*Solo:* This is used for development with a single point of failure. That’s
    what you’ll set for your development environment in this chapter.'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*Solo:* 此选项用于具有单一故障点的开发。在本章中，你将在开发环境中设置此选项。'
- en: '*Kafka:* This is used for production. Kafka is built with fault-tolerant features.'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*Kafka:* 此选项用于生产环境。Kafka 具有容错特性。'
- en: You’ll create chaincode and deploy it to the Fabric network on a Solo peer,
    and then you will be able to access and run functions. To send a transaction,
    your client application can connect to the SDK and create a transaction. The transaction
    is then sent to the endorsing Solo peer, which verifies the signature and sends
    an endorsement signature. The endorsement signature is sent out to the ordering
    service. In production, the ordering service will then send the transactions to
    all network-connected peers, which update their world state on their ledger.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在 Solo 节点上创建链码并部署到 Fabric 网络，然后你将能够访问和运行功能。要发送交易，你的客户端应用程序可以连接到 SDK 并创建交易。然后交易会被发送到背书的
    Solo 节点，该节点验证签名并发送背书签名。背书签名被发送到排序服务。在生产环境中，排序服务会将交易发送到所有网络连接的节点，这些节点在其账本上更新其世界状态。
- en: 'I encourage you to visit the Hyperledger page to learn more and read the white
    papers: [https://www.hyperledger.org/projects/fabric](https://www.hyperledger.org/projects/fabric)
    .'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我鼓励你访问 Hyperledger 页面以了解更多信息并阅读白皮书：[https://www.hyperledger.org/projects/fabric](https://www.hyperledger.org/projects/fabric)
    。
- en: Installing Hyperledger Fabric and Composer
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Hyperledger Fabric 和 Composer
- en: A good place to start with a Hyperledger network is to install Hyperledger Fabric
    and Composer. You will be setting up the environment by installing all the tools
    and libraries as well as Hyperledger Fabric and Composer; then you will verify
    installation went well by starting and stopping Hyperledger Fabric and checking
    that Composer’s libraries installed correctly.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用 Hyperledger 网络的一个好方法是安装 Hyperledger Fabric 和 Composer。你将通过安装所有工具和库以及 Hyperledger
    Fabric 和 Composer 来设置环境；然后，通过启动和停止 Hyperledger Fabric 并检查 Composer 库是否正确安装来验证安装是否成功。
- en: Prerequisites
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'Hyperledger Fabric and Hyperledger Composer rely on many tools and libraries,
    and because each user uses a different machine, it is possible that this process
    won’t be quick and easy and will probably limit the adaptation of the Hyperledger.
    I have broken the process down to these steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric 和 Hyperledger Composer 依赖于许多工具和库，由于每个用户使用不同的机器，这个过程可能不会很快很简单，可能会限制
    Hyperledger 的适应性。我将这个过程分解为这些步骤：
- en: 1)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1)
- en: Verify the already installed prerequisites.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 验证已安装的先决条件。
- en: 2)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2)
- en: Update Git.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新 Git。
- en: 3)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3)
- en: Install Node Version Manager.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装 Node 版本管理器。
- en: 4)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4)
- en: Update Node.js.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新 Node.js。
- en: 5)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 5)
- en: Install VSCode.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装 VSCode。
- en: 6)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 6)
- en: Install Hyperledger Composer Extension.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装 Hyperledger Composer 扩展。
- en: 7)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 7)
- en: Install the Hyperledger Composer Essential CLI tools.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装 Hyperledger Composer 基础 CLI 工具。
- en: 8)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 8)
- en: Install Hyperledger Fabric.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装 Hyperledger Fabric。
- en: 'It’s recommended that you visit the Hyperledger Fabric prerequisites page as
    the versions and requirements may have changed: [https://hyperledger.github.io/composer/v0.19/installing/installing-prereqs.html](https://hyperledger.github.io/composer/v0.19/installing/installing-prereqs.html)
    .'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 建议你访问 Hyperledger Fabric 的先决条件页面，因为版本和需求可能已经更改：[https://hyperledger.github.io/composer/v0.19/installing/installing-prereqs.html](https://hyperledger.github.io/composer/v0.19/installing/installing-prereqs.html)
    。
- en: Before getting started, it’s recommended that you update and upgrade Brew if
    you haven’t done so for a while.> brew update && brew upgrade
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，建议如果你有一段时间没更新过 Brew，那么现在更新和升级一下 Brew。> brew update && brew upgrade
- en: Verifying the Already Installed Prerequisites
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 验证已安装的先决条件
- en: There is a long list of prerequisites for installing Hyperledger Fabric; however,
    if you have been following along with this book’s chapters, most of the prerequisites
    should already be installed on your computer.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Hyperledger Fabric 需要一个长长的先决条件列表；然而，如果您一直跟随本书的章节，您电脑上应该已经安装了大部分的先决条件。
- en: For the operating system (OS), Fabric needs at least macOS 10.12\. You can check
    your version via the top-left menu on your computer. Click the Apple icon, and
    click About This Mac. The Overview tab opens and shows the macOS version. If you
    are running an older version, then get the 10.12 update by clicking the software
    Update button. At the time of writing, macOS is called Mojave at version 10.14.4.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于操作系统（OS），Fabric 至少需要 macOS 10.12。您可以通过计算机左上角的菜单来检查您的版本。点击苹果图标，然后点击“关于本机”。打开概述标签页，并显示
    macOS 版本。如果您正在运行一个较旧的版本，那么通过点击软件更新按钮来获取 10.12 更新。截至编写本文时，macOS 被称为 Mojave，版本为
    10.14.4。
- en: You also need Xcode and Docker. These were already installed in previous chapters,
    but you need to confirm they are installed and are the correct versions. Just
    run the xcode-select --version command to ensure Xcode is running. You can compare
    your results with mine, shown here:> xcode-select -vxcode-select version 2354.>
    docker --versionDocker version 19.03.0-beta3, build c55e026You need Docker-Compose
    version 1.8 or higher.> docker-compose --versiondocker-compose version 1.24.0,
    build 0aa59064You need npm version v5.x or higher.> npm --version6.8.0You need
    Python 2.7.x or higher.> python --versionPython 2.7.10
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要 Xcode 和 Docker。这些在前面的章节中已经安装，但您需要确认它们已经安装并且版本正确。只需运行 xcode-select --version
    命令确保 Xcode 正在运行。您可以将自己的结果与我显示的结果进行比较：> xcode-select -vxcode-select 版本 2354。> docker
    --versionDocker 版本 19.03.0-beta3，构建 c55e026您需要 Docker-Compose 版本 1.8 或更高。> docker-compose
    --versiondocker-compose 版本 1.24.0，构建 0aa59064您需要 npm 版本 v5.x 或更高。> npm --version6.8.0您需要
    Python 2.7.x 或更高。> python --versionPython 2.7.10
- en: Updating Git
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新 Git
- en: The installation is requesting Git 2.2.x or higher. However, Mac comes with
    an older version of Git; you can check your version with this:> git --versiongit
    version 2.20.1 (Apple Git-117)To upgrade Git, you will be installing Git via Brew
    and set your machine to use the Git version in Brew instead of the one that comes
    with Mac. First, install Git via Brew.> brew install gitNext, you will set your
    path to point to the new Git location; use vim or your favorite text editor.>
    vim ~/.bash_profileAdd the following to the PATH:#git point to brewPATH=/usr/local/bin:$PATHDon’t
    forget to run bash_profile after you save and quit the bash profile file to ensure
    the changes take effect.> . ~/.bash_profileLastly, you can verify the version
    of Git.> git --versionYou are now pointing to the location of Git you installed
    with Brew, and for a future upgrade of Git, you can just run the following:> brew
    upgrade gitgit version 2.21.0
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 安装正在请求 Git 2.2.x 或更高版本。然而，Mac 附带的是一个较老的 Git 版本；您可以使用这个命令来检查您的版本：> git --versiongit
    版本 2.20.1（Apple Git-117）要升级 Git，您将通过 Brew 安装 Git，并设置您的机器使用 Brew 中的 Git 版本而不是随
    Mac 附带的版本。首先，通过 Brew 安装 Git。> brew install git接下来，您将设置您的路径指向新的 Git 位置；使用 vim 或您喜欢的文本编辑器。>
    vim ~/.bash_profile在 PATH 中添加以下内容：#git 指向 brewPATH=/usr/local/bin:$PATH别忘了在保存并退出
    bash 配置文件后运行 bash_profile，以确保更改生效。> . ~/.bash_profile最后，您可以验证 Git 的版本。> git --version你现在指向的是用
    Brew 安装的 Git 的位置，对于未来的 Git 升级，您可以简单地运行以下操作：> brew upgrade gitgit 版本 2.21.0
- en: Installing Node Version Manager (nvm)
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装 Node Version Manager (nvm)
- en: Node Version Manager (nvm)  is needed. To download or update nvm, check the
    GitHub page at [https://github.com/creationix/nvm/blob/master/README.md](https://github.com/creationix/nvm/blob/master/README.md)
    and run this command:> curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh
    | bashOnce the installation is completed, you can confirm it’s installed correctly.
    Open a new terminal, and type the following. I have version 0.34.0 installed.>
    nvm --version0.34.0
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Node Version Manager (nvm) 需要安装。要下载或更新 nvm，请查看 GitHub 页面上的[https://github.com/creationix/nvm/blob/master/README.md](https://github.com/creationix/nvm/blob/master/README.md)，并运行以下命令：>
    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh |
    bash安装完成后，您可以确认它是否正确安装。打开一个新的终端，并输入以下内容。我已经安装了版本 0.34.0。> nvm --version0.34.0
- en: Updating Node.js
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新 Node.js
- en: Node needs to be version 8\. To check what you are running, run this command:>
    node --version
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 节点需要版本8。要检查你正在运行的版本，运行这个命令：`node --version
- en: At the time of writing, the prerequisites hyperledger.github.io page stated
    that you should install the latest (long-term support) version of Node; however,
    it has been generating fatal errors and has a recorded bug on GitHub. Node.js
    version 9 is not supported either at the time of writing.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，hyperledger.github.io页面指出你应该安装最新（长期支持）版本的Node；然而，它一直在产生致命错误，并在GitHub上记录了一个错误。在撰写本文时，Node.js版本9也不受支持。
- en: To get Hyperledger Composer to work, you will be installing node 8 and pointing
    nvm to use node 8.> nvm install 8> npm config delete prefix> nvm use 8You can
    confirm node 8 is installed and set correctly.> node --versionv8.15.0
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要让Hyperledger Composer工作，你需要安装node 8并将nvm指向使用node 8。`nvm install 8``npm config
    delete prefix``nvm use 8`你可以确认node 8已正确安装。`node --version`v8.15.0
- en: Installing VSCode with Hyperledger Composer Extension
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Hyperledger Composer扩展安装VSCode
- en: 'It’s recommended that you install Visual Studio Code (VSCode) with the Hyperledger
    Composer extension and use it as your code editor. The extension will provide
    code highlighting and is a professional free IDE. To get started, download VSCode
    from here: [https://code.visualstudio.com](https://code.visualstudio.com) . Click
    Download for Mac, as shown in Figure [8-2](#Fig2).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig2_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig2_HTML.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 建议你安装带有Hyperledger Composer扩展的Visual Studio Code（VSCode）并将其作为代码编辑器。扩展将提供代码高亮显示，并且是一个专业的免费IDE。要开始使用，请从以下链接下载VSCode：[https://code.visualstudio.com](https://code.visualstudio.com)
    。点击为Mac下载，如图[8-2](#Fig2)所示。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig2_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig2_HTML.jpg)
- en: Figure 8-2
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-2
- en: Visual Studio Code installation page
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code安装页面
- en: Once installation is complete, launch VSCode.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，启动VSCode。
- en: 'To install the Hyperledger Composer extension, click VSCode’s left menu, select
    Extensions (two square icons) from the left menu bar, and type **Hyperledger Composer**
    in the search box. Select: Hyperledger Composer. Then click Install. Lastly, Reload
    to activate it. See Figure [8-3](#Fig3).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig3_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig3_HTML.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Hyperledger Composer扩展，请点击VSCode的左侧菜单，从左侧菜单栏选择扩展（两个正方形图标），然后在搜索框中输入**Hyperledger
    Composer**。选择：Hyperledger Composer。然后点击安装。最后，重新加载以激活它。见图[8-3](#Fig3)。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig3_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig3_HTML.jpg)
- en: Figure 8-3
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-3
- en: VSCode  Hyperledger Composer extension
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: VSCode Hyperledger Composer扩展
- en: Hyperledger Composer Essential CLI Tools
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Hyperledger Composer基本CLI工具
- en: You will be installing the Hyperledger Composer Essential CLI tools including
    composer-rest-server, Composer Playground, and the Yeoman generator.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您将安装包括composer-rest-server、Composer Playground和Yeoman生成器的Hyperledger Composer
    Essential CLI工具。
- en: To install the Composer CLI, run the following command.> npm install -g composer-cli
    @0.19
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Composer CLI，运行以下命令。`npm install -g composer-cli @0.19
- en: Note
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: I am using version 0.19\. There are some open bugs with Hyperledger’s latest
    version, 0.20.6, in connection with all the tools and libraries, so I am using
    a previous version of Hyperledger Composer and Hyperledger Fabric. This may change,
    so you may want to check the documentation and install another version. Also,
    I assembled many potential bugs you may run into during installing and running
    Hyperledger Composer and Fabric; see the “Error Troubleshooting” section later
    in this chapter.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用的是版本0.19。Hyperledger的最新版本0.20.6与所有工具和库有关的一些开放错误，所以我使用的是Hyperledger Composer和Hyperledger
    Fabric的先前版本。这可能会改变，所以你可能想检查文档并安装另一个版本。此外，我还收集了许多在安装和运行Hyperledger Composer和Fabric时可能会遇到的潜在错误；请参阅本章后面的“错误故障排除”部分。
- en: Next, install the Yeoman tool for generating Hyperledger Composer applications,
    which utilizes generator-hyperledger-composer. Execute the following command:>
    npm install -g generator-hyperledger-composer@0.19You can now install Composer
    Playground globally with npm.> npm install -g composer-playground@0.19Part of
    Composer is a tool called composer-rest-server that generates a loopback-based
    REST interface to be able to access the network you will create. To install the
    tool, execute this command:> npm install -g composer-rest-server@0.19> npm install
    -g YeomanYou can verify that the installation went well by running the --version
    flag.> composer --versionv0.19.20> composer-rest-server --versionv0.15.2> composer-playground
    --version0.20.6To ensure the generator tool was installed, if you run the Yeoman
    command, it should list Hyperledger Composer generator.> YeomanIt will output
    the following:? 'Allo! What would you like to do? (Use arrow keys)  Run a generator◻
    Hyperledger Composer
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，安装用于生成Hyperledger Composer应用程序的Yeoman工具，该工具使用generator-hyperledger-composer。执行以下命令：>
    npm install -g generator-hyperledger-composer@0.19你现在可以使用npm全局安装Composer Playground。>
    npm install -g composer-playground@0.19Composer的一部分是一个名为composer-rest-server的工具，该工具生成一个基于loopback的REST接口，以便能够访问你将创建的网络。要安装该工具，请执行此命令：>
    npm install -g composer-rest-server@0.19> npm install -g Yeoman你可以通过运行--version标志来验证安装是否成功。>
    composer --versionv0.19.20> composer-rest-server --versionv0.15.2> composer-playground
    --version0.20.6为确保生成器工具已安装，如果你运行Yeoman命令，它应该列出Hyperledger Composer生成器。> Yeoman它将输出以下内容？'Allo!
    What would you like to do? (Use arrow keys) 运行一个生成器◻ Hyperledger Composer
- en: Press Control+C to get out of the Yeoman command.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 按下Control+C退出Yeoman命令。
- en: Installing Composer Playground with Docker
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用Docker安装Composer Playground
- en: In addition to installing Composer tools globally with npm, you can run Hyperledger
    Composer Playground with Docker; just run the container and assign composer-playground
    as the name. You will be running it on port 8080.> docker run --name composer-playground
    --publish 8080:8080 hyperledger/composer-playgroundThe Docker command downloads
    the image, and you can see the output in Figure [8-4](#Fig4).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig4_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig4_HTML.jpg)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用npm全局安装Composer工具外，你还可以使用Docker运行Hyperledger Composer Playground；只需运行容器并将composer-playground作为名称。你将在端口8080上运行它。>
    docker run --name composer-playground --publish 8080:8080 hyperledger/composer-playground
    Docker命令下载图像，你可以看到输出在图[8-4](#Fig4)中。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig4_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig4_HTML.jpg)
- en: Figure 8-4
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-4
- en: Composer-playground docker container output
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 容器输出Composer-playground docker
- en: To cancel the container, press Control+C.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要取消容器，请按Control+C。
- en: Now to run Playground in the browser on port 8080, open a new Terminal window
    by pressing Command+T and run the open command.> open http://localhost:8080You
    can see the Hyperledger Composer playground welcome page, as shown in Figure [8-5](#Fig5).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig5_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig5_HTML.jpg)
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在要在外部浏览器上端口8080上运行Playground，请按Command+T打开新终端窗口并运行打开命令。> open http://localhost:8080你可以看到Hyperledger
    Composer Playground欢迎页面，如图[8-5](#Fig5)所示。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig5_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig5_HTML.jpg)
- en: Figure 8-5
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-5
- en: Playground welcome screen
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 播放场欢迎屏幕
- en: Keep in mind that to stop Docker, you can run the stop command.> docker stop
    composer-playgroundTo remove the composer-playground name so you can use it again,
    you will need to run the following command:> docker rm --force composer-playground
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，要停止Docker，你可以运行停止命令。> docker stop composer-playground 要删除composer-playground名称，以便你可以再次使用它，你需要运行以下命令：>
    docker rm --force composer-playground
- en: Installing Hyperledger Fabric Dev Servers
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装Hyperledger Fabric Dev Servers
- en: At the time of writing, Hyperledger Fabric’s latest version is v1.4.1; you should
    visit the GitHub page to find out the latest version and documentation as this
    may change; see [https://github.com/hyperledger/fabric](https://github.com/hyperledger/fabric)
    .
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Hyperledger Fabric的最新版本是v1.4.1；你应该访问GitHub页面以获取最新版本和文档，因为这些可能会更改；参见[https://github.com/hyperledger/fabric](https://github.com/hyperledger/fabric)。
- en: The Hyperledger Fabric dev servers have different versions to choose from. You
    will be setting up a Hyperledger Fabric v1.2 network for your development.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric dev servers有不同版本可供选择。你将为你开发设置一个Hyperledger Fabric v1.2网络。
- en: You then can deploy your blockchain business networks built with Hyperledger
    Composer and test your applications.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以部署使用Hyperledger Composer构建的区块链业务网络并测试您的应用程序。
- en: Create a directory to download Fabric; I picked ~/fabric-dev-servers, but you
    can choose any directory.> mkdir ~/fabric-dev-servers && cd ~/fabric-dev-serversYou’ll
    use curl to get the .tar.gz file you need to install Hyperledger Fabric, as shown
    here:> curl -O https://raw.githubusercontent.com/hyperledger/composer-tools/master/packages/fabric-dev-servers/fabric-dev-servers.tar.gzUse
    tar to extract the files you downloaded.> tar xzf fabric-dev-servers.tar.gz
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个目录来下载Fabric；我选择~/fabric-dev-servers，但您可以选择任何目录。> mkdir ~/fabric-dev-servers
    && cd ~/fabric-dev-servers 您将使用curl获取安装Hyperledger Fabric所需的.tar.gz文件，如下所示：> curl
    -O https://raw.githubusercontent.com/hyperledger/composer-tools/master/packages/fabric-dev-servers/fabric-dev-servers.tar.gz
    使用tar提取您下载的文件。> tar xzf fabric-dev-servers.tar.gz
- en: Once these are extracted, you have script files to help you quickly spin up
    a Hyperledger Fabric instance.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些文件被提取，您就有脚本文件帮助您快速启动Hyperledger Fabric实例。
- en: Run the ls command, and you can see the .sh files among other useful files.>
    lsstartFabric.shteardownAllDocker.shstopFabric.shteardownFabric.shWhen you run
    the Composer –v command  , you can check the version you are running. You saw
    that you indeed installed Hyperledger Composer v0.19, so you will need to use
    Hyperledger Fabric v1.1 according to the documentation, and you can also set the
    starting Fabric timeout to 30 seconds; that’s the wait time once you run the script
    to ensure the network is running.> export FABRIC_VERSION=hlfv11> export FABRIC_START_TIMEOUT=30
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 运行ls命令，您可以看到其他有用文件中的.sh文件。> ls startFabric.sh teardownAllDocker.sh stopFabric.sh
    teardownFabric.sh 当你运行Composer –v命令时，你可以检查你正在运行的版本。你看到你确实安装了Hyperledger Composer
    v0.19，所以根据文档，你需要使用Hyperledger Fabric v1.1，你还可以将Fabric启动超时设置为30秒；这是运行脚本后确保网络运行的等待时间。>
    export FABRIC_VERSION=hlfv11> export FABRIC_START_TIMEOUT=30
- en: Tip
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'If you are running a different version of Hyperledger Composer, check the GitHub
    page to see which version of Fabric you need to set: [https://github.com/hyperledger/composer-tools/tree/master/packages/fabric-dev-servers](https://github.com/hyperledger/composer-tools/tree/master/packages/fabric-dev-servers)
    .'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在运行不同版本的Hyperledger Composer，请查看GitHub页面以确定需要设置哪个版本的Fabric：[https://github.com/hyperledger/composer-tools/tree/master/packages/fabric-dev-servers](https://github.com/hyperledger/composer-tools/tree/master/packages/fabric-dev-servers)
    。
- en: To spin up your Hyperledger Fabric network, you need to first execute the download
    Fabric script; this can take some time, depending on your Internet connection.>./downloadFabric.shThat’s
    it; you should see the output shown in Figure [8-6](#Fig6).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig6_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig6_HTML.jpg)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动您的Hyperledger Fabric网络，您需要首先执行下载Fabric脚本；这取决于您的互联网连接速度可能需要一些时间。> ./downloadFabric.sh
    这就对了；您应该看到图[8-6](#Fig6)中显示的输出。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig6_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig6_HTML.jpg)
- en: Figure 8-6
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-6
- en: Downloading the Hyperledger Fabric output
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 下载Hyperledger Fabric输出
- en: Once the download is complete, you can confirm you have Docker containers.>
    docker image ls hyperledger/*hyperledger/fabric-cahyperledger/fabric-ordererhyperledger/fabric-peerhyperledger/fabric-ccenvhyperledger/fabric-couchdb
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，您可以确认您有Docker容器。> docker image ls hyperledger/*hyperledger/fabric-cahyperledger/fabric-ordererhyperledger/fabric-peerhyperledger/fabric-ccenvhyperledger/fabric-couchdb
- en: Network Connection Profile
  id: totrans-136
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络连接配置
- en: There is a network connection profile JSON file called DevServer_connection.json.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为DevServer_connection.json的网络连接配置文件。
- en: In this section, you will modify the file to fit with the Docker localhost container
    you will create. Before you modify the file, it’s a good idea to make a copy first.>
    cd ~/fabric-tools/> cp DevServer_connection.json DevServer_connection-backup.json
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将修改该文件以适应您将创建的Docker localhost容器。在修改文件之前，先做一份副本是个好主意。> cd ~/fabric-tools/>
    cp DevServer_connection.json DevServer_connection-backup.json
- en: Change the original file’s orderers, peers, and certificate authorities to point
    to localhost as you will be running Composer Rest Server as the Docker container
    in the network and will access these hostnames on the network.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 将原始文件的或derers、peers和证书权威更改为指向localhost，因为您将在网络中以Docker容器的形式运行Composer Rest Server，并访问网络上的这些主机名。
- en: Edit the DevServer_connection file with vm or your favorite editor.> vim DevServer_connection.jsonSee
    Figure [8-7](#Fig7).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig7_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig7_HTML.jpg)
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用vm或您喜欢的编辑器编辑DevServer_connection文件。> vim DevServer_connection.json 查看图[8-7](#Fig7)
    ![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig7_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig7_HTML.jpg)
- en: Figure 8-7
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-7
- en: Changing devServer.json to point to localhost
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 将devServer.json更改为指向localhost
- en: You also need to edit the hosts to point to 127.0.0.1 on the local server.>
    sudo vim /etc/hosts# fabric127.0.0.1 orderer.example.com peer0.org1.example.com
    ca.org1.example.com
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要编辑hosts文件，使其指向本地服务器上的127.0.0.1。`sudo vim /etc/hosts`# fabric127.0.0.1 orderer.example.com
    peer0.org1.example.com ca.org1.example.com
- en: Spinning Off a Local Hyperledger Fabric Business Network
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动本地Hyperledger Fabric商业网络
- en: The first time you run Hyperledger Fabric, you need to execute commands to start
    a local Hyperledger Fabric instance and issue an ID card for the admin. The default
    admin is called PeerAdmin. To get started, run the start fabric command.> ./startFabric.shThe
    expected output is confirming your variables.Development only script for Hyperledger
    Fabric controlRunning 'startFabric.sh'FABRIC_VERSION is set to [version number]...Creating
    network "composer_default" with the default driverCreating ca.org1.example.comCreating
    orderer.example.com
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次运行Hyperledger Fabric时，您需要执行命令来启动本地Hyperledger Fabric实例并为管理员发行ID卡。默认的管理员称为PeerAdmin。要开始，请运行启动Fabric命令。`.`/startFabric.sh`。预期的输出是确认您的变量。Hyperledger
    Fabric控制的发展专用脚本正在运行`startFabric.sh`FABRIC_VERSION被设置为[版本号]...创建名为"composer_default"的网络Creating
    ca.org1.example.comCreating orderer.example.com
- en: 'As part of the start script, you can see the output lines that confirm that
    the composer_default Docker network was created and running the containers in
    the created network. The containers are able to communicate using the custom hostnames:
    ca.org1.example.com and orderer.example.com.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 作为启动脚本的一部分，您可以看到确认创建了composer_default Docker网络并运行在创建的网络中的容器的输出行。容器能够使用自定义的主机名进行通信：ca.org1.example.com
    和 orderer.example.com。
- en: Creating an Admin ID Card
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建管理员ID卡
- en: Now that you have a network running, the last setup step is to create credentials.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经有了一个运行的网络，最后一步设置是创建凭据。
- en: You can use Hyperledger Composer to create what Hyperledger Fabric calls a .card
    file.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Hyperledger Composer来创建Hyperledger Fabric所说的`.card`文件。
- en: You can generate the admin ID card by executing the following command:> ./createPeerAdminCard.shYou
    can compare your output with mine, which is shown in Figure [8-8](#Fig8).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig8_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig8_HTML.jpg)
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过执行以下命令来生成管理员ID卡：`.`/createPeerAdminCard.sh`。您可以将您的输出与我的进行比较，如图[8-8](#Fig8)所示。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig8_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig8_HTML.jpg)
- en: Figure 8-8
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-8
- en: Hyperledger Composer generate card
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Composer生成卡片
- en: To confirm the card was created correctly, execute the following command with
    <card name>:> composer card list --card PeerAdmin@hlfv1This command outputs information
    about the ID card. See Figure [8-9](#Fig9).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig9_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig9_HTML.jpg)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认卡片是否正确创建，请使用`<card name>`执行以下命令：`composer card list --card PeerAdmin@hlfv1`。此命令输出有关ID卡的信息。请参考图[8-9](#Fig9)。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig9_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig9_HTML.jpg)
- en: Figure 8-9
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-9
- en: Hyperledger Composer card list
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 查看Hyperledger Composer卡片列表
- en: Stopping Hyperledger Fabric
  id: totrans-156
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 停止Hyperledger Fabric
- en: Leave Fabric running for now, but once you complete your exercises, you can
    shut down the Hyperledger Fabric runtime by executing the stop command.> ./stopFabric.shAlso,
    you should execute the teardown script  at the completion of your development
    cycle to ensure the memory is freed.> ./teardownFabric.sh
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时让Fabric运行，但完成练习后，您可以通过执行停止命令来关闭Hyperledger Fabric运行时。`.`/stopFabric.sh`。此外，您应该在开发周期结束时执行拆卸脚本，以确保释放内存。`.`/teardownFabric.sh`。
- en: Note
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you run the teardown script, the next time you start the runtime, you’ll
    need to create a new PeerAdmin card just like you did with the first-time startup
    steps. See the following steps.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行了拆卸脚本，下次启动运行时，您需要像首次启动时那样创建一个新的PeerAdmin卡。请参考以下步骤。
- en: Re-creating the PeerAdmin ID Card
  id: totrans-160
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重新创建PeerAdmin ID卡
- en: After you stop and tear down with these commands:> ./stopFabric.sh> ./teardownFabric.shyou
    need to re-create the admin ID card, so just follow the same commands.> ./startFabric.sh>
    ./createPeerAdminCard.sh> composer card list --card PeerAdmin@hlfv1It’s a good
    idea to follow the process in Figure [8-10](#Fig10), which shows what you need
    to do in order to start a card, stop a card, create a card, and tear down.![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig10_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig10_HTML.jpg)
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在你停止并拆除这些命令后：> ./stopFabric.sh> ./teardownFabric.sh你需要重新创建管理员 ID 卡，所以只需按照相同的命令进行操作。>
    ./startFabric.sh> ./createPeerAdminCard.sh> composer card list --card PeerAdmin@hlfv1遵循图
    [8-10](#Fig10) 的过程是个好主意，它展示了你需要做的一切来启动、停止、创建和拆除卡片。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig10_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig10_HTML.jpg)
- en: Figure 8-10
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-10
- en: 'Fabric-dev-servers start-stop flow. Photo credit: github.com/hyperledger/composer-tools.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 布料开发服务器启动停止流程。图片来源：github.com/hyperledger/composer-tools。
- en: Hyperledger Composer
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 超级账本 Composer
- en: Now that you have the Hyperledger Fabric network installed and running, the
    next step is to write chaincode. You can write chaincode in Hyperledger Fabric
    natively with Go; however, you can also utilize Hyperledger Composer to help create
    chaincode and blockchain applications via coding in JavaScript instead of Go.
    Hyperledger Composer takes definition files and generates Business Network Archive
    (.bna) files that you can then deploy to the Hyperledger network to run. Composer
    is easy to use and aimed not just at developers but at business owners.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经安装并运行了超级账本 Fabric 网络，下一步就是编写链码。你可以用 Go 本地方法超级账本 Fabric 编写链码；然而，你也可以利用超级账本
    Composer 来帮助通过编写 JavaScript 而不是 Go 来创建链码和区块链应用程序。超级账本 Composer 生成业务网络归档 (.bna)
    文件，然后你可以将其部署到超级账本网络上来运行。Composer 易于使用，并不仅仅针对开发者，也面向商务人士。
- en: There are three components that make up Hyperledger Composer (see Figure [8-11](#Fig11)).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 超级账本 Composer 由三个组件组成（见图 [8-11](#Fig11)）。
- en: '*Business network archive (.bna)* : This consists of four files packaged together.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务网络归档 (.bna)**：这由四个文件组成。'
- en: '*Hyperledger Composer Playground*: This is used to configure and deploy network
    as well as test code without rolling out a blockchain.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超级账本 Composer 游乐场**：这个用途是为了配置和部署网络以及测试代码，而不必推出区块链。'
- en: '*REST API support*: This exposes functions to be used by front-end clients
    such as dapps.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**REST API 支持**：这暴露了供前端客户端（如 dapps）使用的方法。'
- en: '![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig11_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig11_HTML.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig11_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig11_HTML.jpg)'
- en: Figure 8-11
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-11
- en: 'Hyperledger Composer graphical explanation. Photo credit: developer.ibm.com.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 超级账本 Composer 图形解释。图片来源：developer.ibm.com。
- en: “Hello, World” with Playground
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “你好，世界”与游乐场
- en: You will be creating a “Hello, World” application and deploying it on the network
    using Playground. To get started, open Playground via the command line and execute
    this command:> composer-playground
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你将创建一个“你好，世界”应用程序，并使用游乐场将其部署在网络上。开始的话，通过命令行打开游乐场并执行这个命令：> composer-playground
- en: Alternatively, you can use Docker. Once it’s open, dismiss the welcome screen
    by clicking “Let’s Blockchain!”
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你可以使用 Docker。打开后，点击“让我们区块链！”来关闭欢迎屏幕。
- en: Deploying a Business Network
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署业务网络
- en: Next, select “Deploy a new business network.” In the deploy wizard, insert the
    basic information, such as typing **hello-network** in the “Give your new Business
    Network a name” input box.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，选择“部署一个新的业务网络”。在部署向导中，输入基本信息，例如在“给你的新业务网络取名”输入框中输入**hello-network**。
- en: Select the middle “empty-business-network” network definition and click Deploy,
    as shown in Figure [8-12](#Fig12).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig12_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig12_HTML.jpg)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 选择中间的“空业务网络”网络定义，并点击部署，如图 [8-12](#Fig12) 所示。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig12_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig12_HTML.jpg)
- en: Figure 8-12
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-12
- en: Hyperledger Composer Playground, deploying new business network wizard
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 超级账本 Composer 游乐场，部署新业务网络向导
- en: The ID card for an admin is created for your network. To connect to the network,
    click the “Connect now” link, as shown in Figure [8-13](#Fig13).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig13_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig13_HTML.jpg)
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的网络创建了管理员 ID 卡。要连接到网络，点击图 [8-13](#Fig13) 中显示的“现在连接”链接。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig13_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig13_HTML.jpg)
- en: Figure 8-13
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-13
- en: Connecting to the hello-network business network definition
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到hello-network业务网络定义
- en: You are now connected to the business network definition network, and you can
    define and work with the model.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已连接到业务网络定义网络，可以定义和工作在模型上。
- en: Business Network Archive (.bna)
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 业务网络存档（.bna）
- en: 'The business network model includes assets and the transactions related to
    these assets. Hyperledger Composer needs the following to be packaged together:
    a network model file, a JavaScript file (.js), an access control file (.acl),
    and a query file (.qry). These files are definition files that generate your network.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 业务网络模型包括资产及其相关的交易。Hyperledger Composer需要以下内容一起打包：一个网络模型文件、一个JavaScript文件（.js）、一个访问控制文件（.acl）和一个查询文件（.qry）。这些文件是定义文件，生成你的网络。
- en: '*Network model (.cto)*: This is the file that defines the assets, transactions,
    and participants who can interact with these assets. The file is created with
    a modeling language called CTO (named after the original project name, Concerto).'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*网络模型（.cto）*：这个文件定义了资产、交易以及可以与这些资产交互的参与者。该文件是用名为CTO（源自原始项目名称Concerto）的建模语言创建的。'
- en: '*JavaScript file (.js)*: This is the file that defines the transaction processor
    functions. It is the chaincode.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*JavaScript文件（.js）*：这个文件定义了交易处理函数。它是链码。'
- en: '*Access control (ACL) (.acl)*: This is the file that contains the access control
    rules that define the rights of the different participants.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*访问控制（ACL）文件（.acl）*：这个文件包含了定义不同参与者权利的访问控制规则。'
- en: '*Query (.qry)*: This is the file that defines the queries that can run in a
    network.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*查询文件（.qry）*：这个文件定义了可以在网络上运行的查询。'
- en: Hyperledger Composer takes these four files and creates a business network definition
    that is packaged as an archive (.bna) file. The .bna files can be deployed on
    the Hyperledger Fabric network.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Composer取这四个文件并创建一个业务网络定义，打包成.bna文件。.bna文件可以部署在Hyperledger Fabric网络上。
- en: You can than write a client application such as a dapp that can use Hyperledger
    Composer APIs to access the smart contract (.bna functions) that you write through
    the Hyperledger Fabric network.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以编写一个客户端应用程序，如dapp，使用Hyperledger Composer API来访问通过Hyperledger Fabric网络编写的智能合约（.bna函数）。
- en: Adding the Model File
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加模型文件
- en: To create the model file  , you can add the files that make up the .bna archive.
    For instance, to add a model file. Click “Add a file,” select Model File (.cto),
    and click Add, as shown in Figure [8-14](#Fig14).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig14_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig14_HTML.jpg)
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 创建模型文件时，你可以添加构成.bna归档的文件。例如，要添加一个模型文件，点击“添加文件”，选择“模型文件（.cto）”，然后点击添加，如图[8-14](#Fig14)所示！[../images/475651_1_En_8_Chapter/475651_1_En_8_Fig14_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig14_HTML.jpg)
- en: Figure 8-14
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-14
- en: Adding a file to the business network model
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 向业务网络模型添加文件
- en: For the .cto file, you will define the processing function and transaction.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 对于.cto文件，你将定义处理函数和交易。
- en: For the namespace, you will use a fictional company called Skynet, with an identified
    ID of type String. You will also create a msg string and a transaction Hello and
    pass the Myfunction asset that will include the message.namespace org.skynet.mymodelasset
    Myfunction identified by id {  o String id  o String msg}transaction Hello {  -->
    Myfunction check}
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 对于命名空间，你将使用一个名为Skynet的虚构公司，其标识ID为字符串类型。你还将创建一个msg字符串和一个交易Hello，并传递包含消息的Myfunction资产。
- en: Adding Chaincode
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加链码
- en: Next, you will add a JS file by clicking “Add a file.” Write chaincode as the
    logic of the transaction to print the message to the console, as shown here:/**@param
    {org.skynet.mymodel.Hello} hello@transaction*/function hello(hello) {  console.log("Hello
    " + hello.check.msg);}
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击“添加文件”来添加一个JS文件。将链码作为交易的逻辑来将消息打印到控制台，如下所示：
- en: Transactions represent the chaincode, which is the business logic of your application.
    Notice that the comments state that the code is a function for a transaction and
    the namespace. Click “Deploy changes” to update your definition model.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 交易代表了链码，即你应用的业务逻辑。注意注释指出代码是一个交易函数和命名空间。点击“部署更改”以更新你的定义模型。
- en: Creating an Asset
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建资产
- en: Next, to test the model, you will create a new asset, extend it, and store it.
    To do that, click + Create New Asset at the top-right corner. The create new asset
    wizard opens, as shown in Figure [8-15](#Fig15). The model already has an ID;
    however, for this example, you will change it to 001 (but the string can be any
    string). For the message, you will pass world.![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig15_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig15_HTML.jpg)
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了测试模型，您将创建一个新资产，扩展它并存储它。为此，点击顶部右上角的+创建新资产。创建新资产向导打开，如图[8-15](#Fig15)所示。模型已经有一个ID；然而，为了这个例子，您将它更改为001（但字符串可以是任何字符串）。对于消息，您将传递
    world。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig15_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig15_HTML.jpg)
- en: Figure 8-15
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-15
- en: Create New Asset Wizard
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新资产向导
- en: Access Control
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问控制
- en: Notice that there is an Access Control option with the permissions.acl file
    as part of the Define tab at the bottom left of the screen, as shown in Figure
    [8-16](#Fig16).
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，有一个权限选项与权限.acl文件作为定义标签页在屏幕左下角，如图[8-16](#Fig16)所示。
- en: As you can see, the rules grant wide-open “allow all” access, which can be changed.![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig16_HTML.png](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig16_HTML.png)
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，规则授予了广泛的“允许所有”访问权限，这可以进行更改。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig16_HTML.png](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig16_HTML.png)
- en: Figure 8-16
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-16
- en: ACL permission file on your hello-network
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 您hello-network上的ACL权限文件
- en: Testing the Model
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试模型
- en: Now that the model instance is saved, you can submit the transaction to invoke
    the transaction. On the left side, click the “Submit transaction” button. The
    Submit Transaction Wizard opens. Set the ID to 001, as shown in Figure [8-17](#Fig17).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig17_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig17_HTML.jpg)
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 模型实例保存后，您可以提交事务以调用事务。在左侧，点击“提交事务”按钮。提交事务向导打开。将ID设置为001，如图[8-17](#Fig17)所示。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig17_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig17_HTML.jpg)
- en: Figure 8-17
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-17
- en: Hyperledger Playground, Submit Transaction Wizard
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 超级账本 Playground，提交事务向导
- en: Before you test, open the developer console so you can see the JavaScript messages.
    For Safari, follow these instructions.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 测试之前，请打开开发者控制台，这样您就可以看到JavaScript消息。对于Safari，请按照这些说明操作。
- en: In the top menu, select Safari ➤ Preferences. Click the Advanced tab and then
    select the “Show Develop menu in menu bar” box.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶部菜单中，选择Safari ➤ 偏好设置。点击高级标签页，然后选择“在菜单栏中显示 Develop 菜单”复选框。
- en: After following these steps, you will see in the top menu Developer as an item.
    Select “Show JavaScript console” (or press Command+Option+C).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这些步骤操作后，您将在顶部菜单中看到 Develop 作为一个选项。选择“显示JavaScript控制台”（或者按Command+Option+C）。
- en: Next, click Submit; you will see the message “Hello world” in the JavaScript
    console, as shown in Figure [8-18](#Fig18).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig18_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig18_HTML.jpg)
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击提交；您将在JavaScript控制台中看到“Hello world”消息，如图[8-18](#Fig18)所示。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig18_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig18_HTML.jpg)
- en: Figure 8-18
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-18
- en: “Hello world” message showing in the JavaScript console
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: “Hello world”消息显示在JavaScript控制台中
- en: Importing/Exporting the Model
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入/导出模型
- en: To export the model, you can generate the business network archive (.bna) file.
    The .bna file can then be deployed in production. All you have to do is click
    the Export link, as shown in Figure [8-19](#Fig19).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig19_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig19_HTML.jpg)
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 导出模型，您可以生成业务网络归档（.bna）文件。该.bna文件可以随后在生产环境中部署。您要做的就是点击如图[8-19](#Fig19)所示的导出链接。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig19_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig19_HTML.jpg)
- en: Figure 8-19
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-19
- en: Exporting the .bna file
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 导出.bna文件
- en: Playground generates the hello-network.bna file, which will be downloaded to
    your computer.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: Playground生成hello-network.bna文件，该文件将下载到您的计算机上。
- en: Similarly, you can import a .bna file, click the “Add a file” link, and under
    “Upload a file from your computer...,” you can browse or drag and drop the .bna
    file.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以导入一个.bna文件，点击“添加文件”链接，然后在“从您的计算机上传文件...”下，您可以浏览或拖放.bna文件。
- en: The import/export is not just for publishing; it can be used to share models
    with others for testing, development, or other reasons. I included the hello-network.bna
    file with this book’s code, so feel free to import it; see [https://github.com/Apress/the-blockchain-developer/chapter8/hello-network](https://github.com/Apress/the-blockchain-developer/chapter8/hello-network)
    .
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 导入/导出不仅仅是为了发布，还可以用来与他人分享模型以进行测试、开发或其他原因。我附上了本书代码中的hello-network.bna文件，所以你可以随意导入；请参阅[https://github.com/Apress/the-blockchain-developer/chapter8/hello-network](https://github.com/Apress/the-blockchain-developer/chapter8/hello-network)。
- en: The .bna file is nothing more than a zip folder named bna. In fact, you can
    copy the .bna file as .zip and unzip the files.>  cp hello-network.bna hello-network.zip>
    unzip hello-network.zipVSCode can be used as your IDE for your entire Hyperledger
    project. For instance, now that you have unzipped your files, you can open VSCode
    and drag and drop the model file models/org.example.model.cto into VSCode. You
    can see that the code is highlighted, as shown in Figure [8-20](#Fig20).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig20_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig20_HTML.jpg)
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`.bna`文件只不过是一个名为bna的压缩文件夹。实际上，你可以将`.bna`文件复制为`.zip`并解压文件。> cp hello-network.bna
    hello-network.zip> unzip hello-network.zipVSCode可以作为你整个Hyperledger项目的IDE。例如，现在你已经解压了你的文件，你可以在VSCode中打开并拖放模型文件models/org.example.model.cto到VSCode中。你可以看到代码被突出显示，如图
    [8-20](#Fig20) 所示。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig20_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig20_HTML.jpg)'
- en: Figure 8-20
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-20
- en: Model CTO file in VSCode
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在VSCode中模型CTO文件
- en: You wrote your files in Composer Playground using the web interface. This suite
    is a less developer savvy approach; however, a larger project can include complex
    business logic, events, many transactions, and testing, so it is advisable to
    create your project and manage files with VSCode and then upload those files into
    Playground for deployment.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用Composer Playground的网页界面编写了你的文件。这个套装是对开发者不太友好的方法；然而，一个更大的项目可以包含复杂的业务逻辑、事件、许多交易和测试，因此建议使用VSCode创建你的项目并管理文件，然后将那些文件上传到Playground进行部署。
- en: Playground Online
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在线Playground
- en: Hyperledger Composer Playground has an online version available at [https://composer-playground.mybluemix.net/](https://composer-playground.mybluemix.net/)
    . You can use the same steps you used before to create your network and files.
    See Figure [8-21](#Fig21).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig21_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig21_HTML.jpg)
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Composer Playground在线版本可在[https://composer-playground.mybluemix.net/](https://composer-playground.mybluemix.net/)找到。你可以使用与之前相同的步骤来创建你的网络和文件。见图
    [8-21](#Fig21)。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig21_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig21_HTML.jpg)
- en: Figure 8-21
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-21
- en: Composer Playground
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: Composer Playground
- en: To test Playground Online, you can import the hello-network.bna file you created
    previously. To do so, first click “Let’s Blockchain!” and under “2\. MODEL NETWORK
    STARTER TEMPLATE” select “Drop here to upload or browse” and upload the hello-network.bna
    file. Click the Deploy button at the bottom-right corner. You can see the network
    created. Click the “Connect now” link to connect to the new network. See Figure
    [8-22](#Fig22).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig22_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig22_HTML.jpg)
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试在线Playground，你可以导入你之前创建的hello-network.bna文件。为此，首先点击“让我们区块链！”在“2. 模型网络起点模板”下选择“拖放这里上传或浏览”并上传hello-network.bna文件。点击右下角的“部署”按钮。你可以看到创建的网络。点击“现在连接”链接以连接到新网络。见图
    [8-22](#Fig22)。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig22_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig22_HTML.jpg)
- en: Figure 8-22
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-22
- en: hello-network connect link
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: hello-network 连接链接
- en: You can repeat the same steps to create an asset and test, just as you have
    done on the local playground.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以重复在本地Playground上创建资产和测试的相同步骤。
- en: Creating a Business Network with Yeoman
  id: totrans-240
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用Yeoman创建商业网络
- en: You used Hyperledger Playground to generate your business network. Hyperledger
    Playground is aimed not just for developers but also at business owners because
    of its simplicity; however, you can also create a network in Terminal.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用Hyperledger Playground生成你的商业网络。Hyperledger Playground不仅面向开发者，还面向企业主，因为它的简单性；然而，你也可以在终端中创建一个网络。
- en: Yeoman provides a wizard you can use. If you are unfamiliar with Yeoman, it
    provides a wizard generator through the command line. You can either run Yeoman
    and select Hyperledger Composer and the Business Network generator or run the
    following:> Yeoman hyperledger-composer:businessnetworkKeep in mind that Hyperledger
    Composer can be used for more than just generating the business network; it can
    be used for Angular, LoopBack, and Model as well. See Figure [8-23](#Fig23).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig23_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig23_HTML.jpg)
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: Yeoman提供了一个向导，你可以使用它。如果你不熟悉Yeoman，它通过命令行提供了一个向导生成器。你可以要么运行Yeoman并选择Hyperledger
    Composer和业务网络生成器，要么运行以下命令：> Yeoman hyperledger-composer:businessnetwork记住，Hyperledger
    Composer不仅仅用于生成业务网络；它还可以用于Angular、LoopBack和Model。见图[8-23](#Fig23)。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig23_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig23_HTML.jpg)
- en: Figure 8-23
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-23
- en: Generating hello-network with the Yeoman wizard
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Yeoman向导生成hello-network
- en: The hello-network folder  is generated and includes permissions.acl, models,
    features, test, and lib. Next, to create the .bna file, you can use Hyperledger
    Composer. See Figure [8-24](#Fig24).> cd hello-network> composer archive create
    -t dir -n .![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig24_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig24_HTML.jpg)
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 生成了hello-network文件夹，包括permissions.acl、models、features、test和lib。接下来，要创建.bna文件，你可以使用Hyperledger
    Composer。见图[8-24](#Fig24)。> cd hello-network> composer archive create -t dir -n
    .![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig24_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig24_HTML.jpg)
- en: Figure 8-24
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-24
- en: Generating the hello-network BNA file with Hyperledger Composer
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Hyperledger Composer生成hello-network BNA文件
- en: Run the ls command and confirm that the hello-network@0.0.1.bna file is generated.>
    ls *.bnahello-network@0.0.1.bna
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 运行ls命令并确认生成了hello-network@0.0.1.bna文件。> ls *.bnahello-network@0.0.1.bna
- en: Deploying on a Local Hyperledger Fabric Network
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在本地Hyperledger Fabric网络中部署
- en: To deploy the .bna file to a local Hyperledger Fabric network, run the composer
    network install command and point to the .bna file while specifying the identity
    card.> cd ~/fabric-dev-servers/> composer network install --archiveFile ~/Desktop/hello-network.bna
    --card PeerAdmin@hlfv1This will result in the successful output shown in Figure
    [8-25](#Fig25).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig25_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig25_HTML.jpg)
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 要将在本地Hyperledger Fabric网络中部署.bna文件，请运行composer network install命令，同时指向.bna文件并指定身份卡。>
    cd ~/fabric-dev-servers/> composer network install --archiveFile ~/Desktop/hello-network.bna
    --card PeerAdmin@hlfv1这将导致如图[8-25](#Fig25)所示的成功输出。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig25_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig25_HTML.jpg)
- en: Figure 8-25
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-25
- en: Installing local Hyperledger Fabric command output
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 安装本地Hyperledger Fabric命令输出
- en: Running the “hello-network” Network
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行“hello-network”网络
- en: Hyperledger Composer is the application development framework for building blockchain
    applications based on Hyperledger Fabric.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Composer是基于Hyperledger Fabric的区块链应用开发框架。
- en: Hyperledger Composer generates REST APIs based on the business network definition
    you created. This is done using what is called a LoopBack connector. You can take
    these REST APIs to be used by a) a client such as a dapp b) integrate with non-blockchain
    clients such as a web site. That allows you to use the blockchain ledger just
    as you would use any other database with a middleware. That is powerful.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Composer基于你创建的业务网络定义生成REST API。这是通过所谓的LoopBack连接器来实现的。你可以将这些REST
    API提供给a)如dapp这样的客户端 b)与非区块链客户端（如网站）集成。这使得你可以像使用任何其他数据库一样使用区块链账本，配合中间件。这是非常强大的。
- en: Hyperledger Composer can generate a REST interface. You can run Hyperledger
    Fabric on your computer and generate a GUI that you can then use to interact with
    the network running on your computer just like it would be on a real production
    server.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Composer可以生成一个REST接口。你可以在电脑上运行Hyperledger Fabric，并生成一个GUI，然后你可以使用它来像在真实生产服务器上一样与运行在电脑上的网络进行交互。
- en: Starting the “hello-network” Business Network and Admin Card
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动“hello-network”业务网络和管理卡
- en: To run your “hello-network” network, run the following command, and see the
    output in Figure [8-26](#Fig26):> composer network start --networkName hello-network
    --networkVersion 0.0.2-deploy.3 -A admin -S adminpw -c PeerAdmin@hlfv1 --file
    networkadmin.card![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig26_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig26_HTML.jpg)
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行你的“hello-network”网络，请运行以下命令，并在图[8-26](#Fig26)中查看输出：> composer network start
    --networkName hello-network --networkVersion 0.0.2-deploy.3 -A admin -S adminpw
    -c PeerAdmin@hlfv1 --file networkadmin.card![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig26_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig26_HTML.jpg)
- en: Figure 8-26
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-26
- en: Starting the business network
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 启动商业网络
- en: To confirm this worked, you can run the docker ps command. You should see the
    dev-peer0.org1.example.com-hello-network-0.0.2-deploy.3-0 image created, as shown
    in Figure [8-27](#Fig27).> docker ps![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig27_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig27_HTML.jpg)
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认这是否成功，你可以运行docker ps命令。你应该会看到创建的dev-peer0.org1.example.com-hello-network-0.0.2-deploy.3-0镜像，如图[8-27](#Fig27)所示。>
    docker ps![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig27_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig27_HTML.jpg)
- en: Figure 8-27
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-27
- en: Docker container hello-network
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: Docker容器hello-network
- en: Importing a Business Card
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入商业名片
- en: Next, import a new network admin card so you can use admin@hello-network in
    the business network you started.> composer card import --file networkadmin.cardThis
    command imports the network admin card, which will include admin@hello-network.>
    composer network ping --card admin@hello-networkYou can compare your output with
    mine, which is shown in Figure [8-28](#Fig28).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig28_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig28_HTML.jpg)
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，导入一个新的网络管理员名片，这样你就可以在启动的商业网络中使用admin@hello-network。> composer card import
    --file networkadmin.card此命令导入网络管理员名片，其中将包括admin@hello-network。> composer network
    ping --card admin@hello-network你可以将你的输出与我显示在图[8-28](#Fig28)中的输出进行比较。![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig28_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig28_HTML.jpg)
- en: Figure 8-28
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-28
- en: Importing the business network card
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 导入商业网络名片
- en: Where to Go from Here
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从这里出发，接下来去哪里
- en: From here you can choose from many passport strategies for your users. For example,
    you can use Google OAUTH2.0, SAML, Passport-JWT, or LDAP, depending on what your
    organization is using.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，你可以为你的用户选择多种护照策略。例如，你可以使用谷歌OAUTH2.0、SAML、Passport-JWT或者LDAP，这取决于你的组织正在使用什么。
- en: Then you will be able to run a REST server in multiuser mode and test the interaction
    with a client application such as the one you created.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你将能够以多用户模式运行REST服务器，并测试与客户端应用程序（例如你创建的应用程序）的交互。
- en: 'Here are couple of articles that can help you with the process of setting up
    your app for authenticating multiple users:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些可以帮助你设置应用程序以验证多个用户的文章：
- en: '*Passport-JWT*: [https://hyperledger.github.io/composer/latest/tutorials/google_oauth2_rest](https://hyperledger.github.io/composer/latest/tutorials/google_oauth2_rest)'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Passport-JWT*：[https://hyperledger.github.io/composer/latest/tutorials/google_oauth2_rest](https://hyperledger.github.io/composer/latest/tutorials/google_oauth2_rest)'
- en: '*Google OAUTH2.0*: hyperledger/fabric-ca docker hyperledger/fabric-orderer
    hyperledger/fabric-peer hyperledger/fabric-ccenv hyperledger/fabric-couchdb'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*谷歌OAUTH2.0*：hyperledger/fabric-ca docker hyperledger/fabric-orderer hyperledger/fabric-peer
    hyperledger/fabric-ccenv hyperledger/fabric-couchdb'
- en: Hyperledger is a large project, and it consists of five major platforms as well
    as five major tools. This chapter focused only on Hyperledger Fabric. However,
    you are encouraged to continue experimenting with other Hyperledger platforms
    and tools such as Hyperledger Sawtooth, including setting up an environment, creating
    an account, writing a more complex chaincode, and deploying as well as connecting
    your chaincode to a dapp.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger是一个大型项目，它包括五个主要平台以及五个主要工具。本章只讨论Hyperledger Fabric。然而，我们鼓励你继续尝试其他Hyperledger平台和工具，如Hyperledger
    Sawtooth，包括设置环境、创建账户、编写更复杂的链码，以及部署和连接你的链码到dapp。
- en: 'To get more information on getting started, visit the official web site here:
    [https://sawtooth.hyperledger.org/docs/seth/releases/latest/getting_started.html](https://sawtooth.hyperledger.org/docs/seth/releases/latest/getting_started.html)
    .'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取更多关于入门的信息，请访问官方网站：[https://sawtooth.hyperledger.org/docs/seth/releases/latest/getting_started.html](https://sawtooth.hyperledger.org/docs/seth/releases/latest/getting_started.html)
    。
- en: 'In fact, you can find more information about all the platforms and tools here:
    [https://www.hyperledger.org/](https://www.hyperledger.org/) .'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你可以在这里找到关于所有平台和工具的更多信息：[https://www.hyperledger.org/](https://www.hyperledger.org/)
    。
- en: 'Lastly, bookmark the Hyperledger dev center here: [https://developer.ibm.com/technologies/blockchain/](https://developer.ibm.com/technologies/blockchain/)
    .'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，收藏Hyperledger开发者中心：[https://developer.ibm.com/technologies/blockchain/](https://developer.ibm.com/technologies/blockchain/)
- en: Error Troubleshooting
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误故障排除
- en: Hyperledger was built to be plain and allows you to stitch together modules
    on many different machines, but not without problems. Hyperledger is set up for
    more advanced users and may request system admin privileges to set up servers.
    You may have encountered a few errors, so here I have compiled them into this
    section.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger旨在简洁，允许您将模块缝合在一起，但并非没有问题。Hyperledger为更高级的用户设置，可能需要系统管理员权限来设置服务器。您可能遇到一些错误，所以我将它们编译到这个部分中。
- en: Composer Runtime Install Error or Card Not Found
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Composer运行时安装错误或找不到卡
- en: 'If you get errors such as these:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到这些错误：
- en: “composer runtime install error card not found peerAdmin”
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “composer 运行时安装错误找不到peerAdmin卡”
- en: '“Error: Card not found: PeerAdmin@hlfv1”'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “错误：找不到卡片：PeerAdmin@hlfv1”
- en: it’s because the admin ID card was not created successfully or the correct process
    wasn’t followed; all you need to do is remove the ID card and re-create it. You
    need to remove the composer folder, create a new folder, and run the command again.>
    rm -rf ~/.composer> mkdir ~/.composer> ./createPeerAdminCard.sh
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为管理员ID卡未能成功创建或未遵循正确的过程；您需要做的就是删除ID卡并重新创建。您需要删除composer文件夹，创建一个新的文件夹，然后再次运行命令。>
    rm -rf ~/.composer> mkdir ~/.composer> ./createPeerAdminCard.sh
- en: Docker Unauthorized Authentication Required Error
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker未授权身份验证 required 错误
- en: 'You may get the following error while downloading Hyperledger Fabric:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载Hyperledger Fabric时，您可能会遇到以下错误：
- en: '“unauthorized: authentication required”'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “未授权：需要身份验证”
- en: There are issues with authenticating or proxying to Docker Hub and not Hyperledger
    Fabric.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 认证或代理到Docker Hub时存在问题，而不是Hyperledger Fabric。
- en: 'To try to fix this, set your computer time to match UTC time zone: [https://www.timeanddate.com/worldclock/timezone/utc](https://www.timeanddate.com/worldclock/timezone/utc)
    .'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，请将您的计算机时间设置为与UTC时区一致：[https://www.timeanddate.com/worldclock/timezone/utc](https://www.timeanddate.com/worldclock/timezone/utc)
    。
- en: Create an account with Docker at [https://hub.docker.com](https://hub.docker.com)
    , and then log in.> docker loginAlternatively, try again after you logged out.>
    docker logout
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://hub.docker.com](https://hub.docker.com)上创建一个Docker账户，然后登录。> docker
    login 或者，退出后再试一次。> docker logout
- en: Docker Container Conflicting Errors
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker容器冲突错误
- en: When you are using the Docker container for a project, you might need to re-create
    a container or stop a container; otherwise, you may get conflicting errors.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用Docker容器进行项目时，您可能需要重新创建容器或停止容器；否则，您可能会遇到冲突错误。
- en: All you need to do is stop and remove the container.> docker stop [container
    id]> docker rm [container id]
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要做的所有事情就是停止并删除容器。> docker stop [容器ID]> docker rm [容器ID]
- en: Tip
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'If you already created a Mongo-Docker container or any other Docker container
    that creates a conflict, you will get the following conflict error when you try
    to create a new one: “The container name is already in use by container [container
    id].” All you need to do is stop the container and remove it.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经创建了一个Mongo-Docker容器或其他任何创建冲突的Docker容器，当您尝试创建一个新的容器时，您会得到以下冲突错误：“容器名称[容器ID]已由容器使用。”
    您需要做的就是停止容器并删除它。
- en: docker stop [container id]
  id: totrans-296
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: docker stop [容器ID]
- en: docker rm [container id]
  id: totrans-297
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: docker rm [容器ID]
- en: Mismatch and Cleanup
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不匹配和清理
- en: 'If you have a mismatch between Hyperledger Composer and Hyperledger Fabric
    versions, you may get the following error:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在Hyperledger Composer和Hyperledger Fabric版本之间存在不匹配，您可能会遇到以下错误：
- en: '“Starting business network definition. This may take a minute... Error: Error
    trying to start business network. Error: Failed to connect to any peer event hubs.
    It is required that at least 1 event hub has been connected to receive the commit
    event Command failed.”'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “开始业务网络定义。这可能需要一分钟...错误：尝试启动业务网络时出错。错误：未能连接到任何对等事件中心。至少连接到一个事件中心是接收提交事件命令的必要条件。命令失败。”
- en: This error is also generated on Hyperledger Fabric 1.2 with Hyperledger Composer
    0.20.6 because there is an open bug. To fix this, you need to check your Hyperledger
    Composer and uninstall through npm, as well as re-install Hyperledger Fabric.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 此错误在Hyperledger Fabric 1.2和Hyperledger Composer 0.20.6上也由开放的错误生成。为了解决这个问题，您需要检查您的Hyperledger
    Composer并卸载通过npm，以及重新安装Hyperledger Fabric。
- en: Additionally, if you need to completely clean up, you need to stop and tear
    down Fabric. To remove the Docker images, remove fabric-dev-servers, and lastly
    remove Composer, follow this process:> cd ~/fabric-tools> ./stopFabric.sh> ./teardownFabric.shNext,
    stop the Docker containers, remove them, and also remove all the Docker images
    by running these commands:> docker kill $(docker ps -q)> docker rm $(docker ps
    -a -q) –f> docker rmi $(docker images -q) -fYou can now completely remove fabric-dev-servers.>
    rm -rf ~/fabric-dev-serversTo remove Composer and admin ID card, run these commands:>
    sudo rm -rf ~/.composer> npm uninstall -g composer-cli
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你需要彻底清理，你需要停止并拆除Fabric。要删除Docker镜像，先删除`fabric-dev-servers`，最后删除Composer，按照以下步骤操作：>  cd
    ~/fabric-tools> ./stopFabric.sh> ./teardownFabric.sh接下来，停止Docker容器，删除它们，以及通过运行以下命令删除所有Docker镜像：>
    docker kill $(docker ps -q)> docker rm $(docker ps -a -q) –f> docker rmi $(docker
    images -q) -f你现在可以彻底删除`fabric-dev-servers`。> rm -rf ~/fabric-dev-servers要删除Composer和admin
    ID卡，运行以下命令：> sudo rm -rf ~/.composer> npm uninstall -g composer-cli
- en: The npm uninstall command will output a confirmation that the library was uninstalled.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm uninstall`命令将输出一个确认库已卸载的确认信息。'
- en: Summary
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, I introduced Hyperledger to help you get started and understand
    the power of it. I covered the Hyperledger ecosystem and terminology and gave
    you a good understanding of the pieces that make up the network as well as the
    major Hyperledger platforms and tools available. You installed Hyperledger Fabric
    and Hyperledger Composer, ensuring the prerequisite libraries are installed. You
    created “Hello, World” application with Playground as well as create a .bna file
    you deployed on a local network. I mentioned Hyperledger Playground Online as
    well as explained how to generate a network with Yeoman generator. I covered the
    different pieces that make up the .bna archive file including handling ID cards.
    I also covered potential errors and troubleshooting to ensure your installation
    went well. Lastly, I covered a few recommendations on where to go from here to
    continue with Hyperledger.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我介绍了Hyperledger，帮助你入门并理解其强大功能。我涵盖了Hyperledger生态系统和术语，并让你对组成网络的各个部分以及可用的主要Hyperledger平台和工具有了很好的了解。你安装了Hyperledger
    Fabric和Hyperledger Composer，确保预先安装了必需的库。你在Playground中创建了“Hello, World”应用程序，以及创建了一个在本地网络上部署的`.bna`文件。我还提到了Hyperledger
    Playground Online，并解释了如何使用Yeoman生成器生成一个网络。我涵盖了组成`.bna`归档文件的不同部分，包括处理ID卡。我还涵盖了可能的错误和故障排除，以确保你的安装顺利进行。最后，我介绍了一些关于从这里继续学习Hyperledger的建议。
- en: In the next chapter, you will learn how to build a dapp with Angular. Dapps
    can interact with the smart contracts you have developed in the past three chapters
    and are an important ingredient in the blockchain ecosystem.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将学习如何使用Angular构建一个dapp。dapp可以与你在前三章开发的智能合约进行交互，是区块链生态系统中的重要组成部分。
