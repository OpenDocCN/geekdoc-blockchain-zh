- en: © Elad Elrom 2019Elad ElromThe Blockchain Developer[https://doi.org/10.1007/978-1-4842-4847-8_8](https://doi.org/10.1007/978-1-4842-4847-8_8)
  prefs: []
  type: TYPE_NORMAL
- en: 8. Hyperledger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Elad Elrom^([1](#Aff2) )(1)New York, NY, USA
  prefs: []
  type: TYPE_NORMAL
- en: In previous chapters, I covered blockchain technologies that are focused on
    cryptocurrency, and in fact, each project I have covered so far has included its
    own currency. Hyperledger is different; it does not have a currency attached,
    although you can create a coin if needed. Instead, Hyperledger was created with
    the aim of being an open source platform targeted at utilizing blockchain to fit
    business needs.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger started in 2015 as an open source blockchain contributed by Digital
    Asset and IBM as a result of a hackathon (now the blockchain is called Hyperledger
    Fabric), and it extended to consists of multiple pluggable modules and the entire
    project is called Hyperledger aimed at improving a blockchain’s performance and
    reliability so you can assemble modules to create your own unique platform to
    fit your business needs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Hyperledger project is an umbrella strategy modular architecture consisting
    of a collection of pluggable components that are used to create custom blockchain
    solutions for businesses. The Hyperledger architecture aims to provide scalability,
    performance, confidentiality, resiliency, and flexibility. Note that if you visit
    Hyperledger’s documentation, you’ll often see the term *distributed ledger technology*
    (DLT); this term is synonymous with *blockchain*.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The modular architecture allows you to adjust things like the blockchain’s consensus
    mechanism, as well as manage storage, set services for identities, set permissions
    for the identities you set, and create smart contracts (in Hyperledger Fabric,
    smart contracts are called *chaincode* ). In terms of programming languages, Hyperledger’s
    chaincode is written in Go (Golang); however, you can utilize JavaScript with
    the Hyperledger Composer tool. Chaincode can then be used to implement and automate
    the business logic.
  prefs: []
  type: TYPE_NORMAL
- en: The Hyperledger project’s managing team consists of ten members, and the executive
    director at the time of writing is Brian Behlendorf. In addition, 159 engineers
    from 27 organizations contributed to Hyperledger Fabric v1.0, according to developer.ibm.com.
  prefs: []
  type: TYPE_NORMAL
- en: '*“* *Hyperledger* *is an open source development project to benefit an ecosystem
    of Hyperledger based solution providers and users. It is focused on blockchain
    related use cases that will work under a variety of industrial sectors.”*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Brian Behlendorf (executive director, Hyperledger)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Hyperledger is hosted by the Linux Foundation, and in terms of adoption, it’s
    supported by large enterprise companies such as IBM, Intel, and SAP, as well as
    implemented by Oracle, Accenture, The National Association of Realtors, Deutsche
    Borse Group, Sony Global Education, and many others.
  prefs: []
  type: TYPE_NORMAL
- en: The Hyperledger consensus mechanism allows the network of nodes to choose between
    a no-op (no consensus) mechanism and an agreement protocol called Practical Byzantine
    Fault Tolerance (PBFT). The PBFT consensus enables two or more nodes to agree
    by giving the nodes full control. This precludes other nodes on the network from
    forcing a block, which can prevent potential double spending attacks, as you saw
    with PoW’s 51 percent potential for mining attacks. Hyperledger gives control
    over the consensus mechanism, and you can restrict access to transactions. This
    results in improved performance and scalability as there are fewer nodes that
    need to agree on a block. Additionally, PBFT provides privacy for the network,
    which fits businesses better instead of providing full transparency as you have
    seen in other blockchains.
  prefs: []
  type: TYPE_NORMAL
- en: To give you an idea about Hyperledger’s flexibility, you can use a dynamic consensus
    and enable what is called *hot swapping*, where you replace the consensus algorithms
    while the network is running (done with Hyperledger Sawtooth).
  prefs: []
  type: TYPE_NORMAL
- en: Blockchains focused on cryptocurrency usually provide transparency of transactions
    and network data, because they are dealing with funds and mostly untrusted members.
    However, this also limits the flexibility and how much you can modify the network
    and how much you can control as you are limited by the set of rules. Hyperledger
    is not backed by its own currency and provides more granular control.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger project was built with basic functionality, vanilla flavor, with
    the intention of enabling developers to customize as much as possible, from the
    blockchain’s consensus mechanism to the web interface identity’s permissions,
    which provides limited data to members.
  prefs: []
  type: TYPE_NORMAL
- en: This modular architecture approach allows developers to create specific customized
    personalized blockchains to fit exact business needs. Hyperledger contains the
    following main open source frameworks and tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hyperledger frameworks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hyperledger Fabric (contributed by IBM)*: This is a permission blockchain
    infrastructure with SDKs for Node.js, Java, and GoLang. Hyperledger Fabric is
    the heart of Hyperledger and supports chaincode in GoLang and JavaScript (utilizing
    Hyperledger Composer or natively). Blockchain is based on the endorser/orderer
    architecture. You’ll learn more about this later this chapter.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hyperledger Burrow*: This is an Ethereum VM built to specification.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hyperledger Indy*: Think independent. This is a tool and library for running
    independent identities on distributed ledgers.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hyperledger Iroha*: This is focused on mobile applications; the code is based
    on Hyperledger Fabric.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hyperledger Grid*: This is a solution for a supply chain on a distributed
    ledger. The framework encapsulates Hyperledger implementations of data types,
    models, and smart contracts as well as showcases practical ways to create a supply
    chain business solution.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hyperledger Sawtooth (contributed by Intel)*: This framework includes dynamic
    consensus and enables hot swapping of consensus algorithms on a running network.
    This is a more traditional blockchain architecture.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hyperledger tools:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hyperledger Caliper*: This is a blockchain benchmark tool.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hyperledger Cello*: This is an on-demand blockchain module toolkit for creating,
    managing, and terminating blockchains.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hyperledger Composer*: This tool has collaboration features used with Hyperledger
    Fabric for building blockchains aimed at businesses for chaincode and blockchain
    applications.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hyperledger Explorer*: This is a module to view, invoke, deploy, and query
    blocks, transactions, and network data.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hyperledger URSA*: This is a shared cryptographic library; it includes shared
    projects such as the implementation of several different signature schemes (base
    crypto libraries) and Z-mix, zero-knowledge proofs ( [https://github.com/hyperledger-labs/z-mix](https://github.com/hyperledger-labs/z-mix)
    ).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hyperledger Quilt/Interledger.js*: This is an Interledger Protocol (ILP),
    meaning an atomic swapping between ledgers. The payments protocol enables transferring
    an asset (value) across distributed and nondistributed ledgers. There are two
    implementations: the Java one is called Quilt, and the JavaScript one is called
    Interledger.js.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A Hyperledger project can be built to allows transactions to be transparent
    as well as confidential when needed. For instance, think of the following business
    need: an airline wants to sell seats to another business, let’s say Expedia. The
    airline business need is to create its own blockchain to keep track of its inventory,
    create transactions, set the price, and keep data confidential. The airline can
    benefit from blockchain, but it has no need for cryptocurrency nor does it want
    to share all the data publicly. The airline can utilize Hyperledger and set a
    private permission network, without exposing the data to the whole world, as you
    would on a public ledger.'
  prefs: []
  type: TYPE_NORMAL
- en: The airline can then set special permissions to identities by issuing encryption
    keys with limited access and then give these encryption keys to specific parties
    only. For instance, only one organization, let’s say Expedia, is able to view
    Expedia-related transactions, seat pricing, and flight information, while other
    identities such as the actual customer can view only the reservation’s information
    related to their account and flight information.
  prefs: []
  type: TYPE_NORMAL
- en: The finance team can hold the encryption key that can provide more data such
    as profits and loss, cost of fuel, and other data needed for internal usage. This
    can be beneficial to businesses because they can run their data on a ledger instead
    of a centralized database, which is more prone to hacker attacks.
  prefs: []
  type: TYPE_NORMAL
- en: As you see, Hyperledger is a large project that covers six frameworks as well
    as five tools. It is impractical to cover all these in one chapter; in fact, it
    could easily take a whole book. In this chapter, I will give you a good foundation
    that can help you understand Hyperledger basics, and you can continue to experiment
    on your own with the other platforms and tools. In this chapter, you will be focusing
    on Hyperledger Fabric, as it’s the most popular Hyperledger platform.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Hyperledger Fabric
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As I pointed out, Hyperledger Fabric is an open source framework implementation,
    and it’s intended for a private and permission-based business network.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will create private network permission identities, and
    then you will create a chaincode to implement specific business logic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hyperledger Fabric is designed as the foundation for Hyperledger, and you can
    then use the Hyperledger’s modular architecture to add specific modules depending
    on your business needs. A Hyperledger Fabric network consists of the following
    components:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Assets*: Assets are key-value pairs that represent a value. A value can be
    anything such as a document, stock, or cryptocurrency token. Each asset holds
    a state and ownership.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Shared ledger*: A shared ledger holds its own copy of the ledger with the
    state of the asset. This ledger is called the *world state*. The shared ledger
    also holds a copy of the blockchain, which stores the ownership of the asset by
    recording the transaction’s history.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Smart contracts (chaincode):* Hyperledger Fabric calls smart contracts *chaincodes*
    that can be programmed in Go (GoLang) or JavaScript (Node.js). Chaincode can interact
    with the shared ledger, assets, and transactions. There’s nothing new here; you
    saw this in other blockchains. Chaincode contains the business logic and can set
    an endorsement policy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Hyperledger Fabric, users can define an asset endorsement policy for the
    execution of a chaincode. The endorsement policies set the node peers that are
    needed in order to agree on an accepted transaction to be valid and added to the
    shared ledger.
  prefs: []
  type: TYPE_NORMAL
- en: '*Membership services provider (MSP)* *:* The MSP is the certificate authority
    that manages the digital certificate; it manages user IDs and authenticates all
    participants on the network. All members must be known identities in order to
    transact on Fabric. That’s because the network is private and based on permissions.
    The MSP is used to authenticate and validate these members’ identities and permissions.
    The MSP uses a certificate generation tool called *cryptogen* . To understand
    MSP better, visit the documentation here: [https://hyperledger-fabric.readthedocs.io/en/latest/msp.html](https://hyperledger-fabric.readthedocs.io/en/latest/msp.html)
    .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Peer nodes*: The Hyperledger Fabric network is built on peer nodes that are
    owned and contributed by members of the network. A node can be an organization
    or an individual. Nodes hold shared ledgers and can execute chaincode. Nodes can
    access ledger data; they can endorse transactions and interface with applications.
    Nodes can have permission to endorse peers or role for endorsers. Peer nodes receive
    ordered ledger state updates as part of the blocks they receive in order to maintain
    the ledger, or what Hyperledger calls *world state*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Channel*: Channels can be created by a collection of peer nodes. A group of
    nodes can create a separate ledger of transactions. A channel is similar to the
    P2P channel you created when you formed your own blockchain in Chapter [3](475651_1_En_3_Chapter.xhtml).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Organizations*: Each peer node contributes resources, and together they form
    the collective network. The owning organization can assign peer nodes using a
    digital certificate through the MSP. Additionally, peer nodes from different organizations
    can join a channel. Organizations with separate peer nodes are able to share the
    same MSPs. Best practice is to have one MSP for each organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ordering service:* This service packages transactions into blocks. Blocks
    can then be broadcast to peer nodes and clients on the shared P2P channel. The
    channel outputs the same messages with the same logical order to all peer nodes.
    A consistent logical order is called *atomic delivery*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take a look at Figure [8-1](#Fig1), which is a graphical representation of the
    components that make up Hyperledger Fabric.![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig1_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig1_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-1
  prefs: []
  type: TYPE_NORMAL
- en: 'Hyperledger Fabric graphical explanation. Photo credit: developer.ibm.com.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s walk through the Fabric network using the 10,000-foot graphical overview
    in Figure [8-1](#Fig1). The Hyperledger Fabric network acts as the back-end layer
    for client applications.
  prefs: []
  type: TYPE_NORMAL
- en: A client application can be anything such as a dapp, portal, business activity,
    or web site; these types of applications are the front-end layer, and they can
    access chaincodes, transactions, and events through coding the Hyperledger Fabric
    SDK or a REST web service. The client calls a chaincode node, which uses the SDK
    to interact with the network. Unlike the traditional blockchains covered so far,
    Fabric is different because not all peer nodes have the same permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Also unlike traditional blockchains, Hyperledger Fabric does not allow unknown
    identities to transact on the network. Organizations, which are called *members*,
    build the Hyperledger Fabric network, and each member can set up their node peers
    through the MSP. You can see in Figure [8-1](#Fig1) that the example has ORG1
    MSP and ORG 2 MSP.
  prefs: []
  type: TYPE_NORMAL
- en: 'Peer nodes can be set up with different rules in the network: endorser peer,
    anchor peer, and orderer peer.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Endorser peer* *:* This receives a request to validate the transaction and
    execute chaincode. The endorser can approve or disapprove the transaction. Only
    the endorsing peer executes chaincode, so there’s no need to install chaincode
    on all peer nodes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Anchor peer* *:* These peers receive messages and send messages to other peers
    in the organization. The P2P network is made up of the different channels that
    can be set up with permissions so they are not visible to everyone on the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Orderer peer* *:* This peer handles the shared ledger and is responsible for
    keeping state across the network. The orderer peer generates blocks and broadcasts
    to all peers. The orderer peer can be set as Solo or Kafka.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Solo:* This is used for development with a single point of failure. That’s
    what you’ll set for your development environment in this chapter.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Kafka:* This is used for production. Kafka is built with fault-tolerant features.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You’ll create chaincode and deploy it to the Fabric network on a Solo peer,
    and then you will be able to access and run functions. To send a transaction,
    your client application can connect to the SDK and create a transaction. The transaction
    is then sent to the endorsing Solo peer, which verifies the signature and sends
    an endorsement signature. The endorsement signature is sent out to the ordering
    service. In production, the ordering service will then send the transactions to
    all network-connected peers, which update their world state on their ledger.
  prefs: []
  type: TYPE_NORMAL
- en: 'I encourage you to visit the Hyperledger page to learn more and read the white
    papers: [https://www.hyperledger.org/projects/fabric](https://www.hyperledger.org/projects/fabric)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Hyperledger Fabric and Composer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A good place to start with a Hyperledger network is to install Hyperledger Fabric
    and Composer. You will be setting up the environment by installing all the tools
    and libraries as well as Hyperledger Fabric and Composer; then you will verify
    installation went well by starting and stopping Hyperledger Fabric and checking
    that Composer’s libraries installed correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Hyperledger Fabric and Hyperledger Composer rely on many tools and libraries,
    and because each user uses a different machine, it is possible that this process
    won’t be quick and easy and will probably limit the adaptation of the Hyperledger.
    I have broken the process down to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 1)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the already installed prerequisites.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update Git.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 3)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Node Version Manager.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 4)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update Node.js.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 5)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install VSCode.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 6)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Hyperledger Composer Extension.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 7)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the Hyperledger Composer Essential CLI tools.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 8)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Hyperledger Fabric.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'It’s recommended that you visit the Hyperledger Fabric prerequisites page as
    the versions and requirements may have changed: [https://hyperledger.github.io/composer/v0.19/installing/installing-prereqs.html](https://hyperledger.github.io/composer/v0.19/installing/installing-prereqs.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Before getting started, it’s recommended that you update and upgrade Brew if
    you haven’t done so for a while.> brew update && brew upgrade
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the Already Installed Prerequisites
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is a long list of prerequisites for installing Hyperledger Fabric; however,
    if you have been following along with this book’s chapters, most of the prerequisites
    should already be installed on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: For the operating system (OS), Fabric needs at least macOS 10.12\. You can check
    your version via the top-left menu on your computer. Click the Apple icon, and
    click About This Mac. The Overview tab opens and shows the macOS version. If you
    are running an older version, then get the 10.12 update by clicking the software
    Update button. At the time of writing, macOS is called Mojave at version 10.14.4.
  prefs: []
  type: TYPE_NORMAL
- en: You also need Xcode and Docker. These were already installed in previous chapters,
    but you need to confirm they are installed and are the correct versions. Just
    run the xcode-select --version command to ensure Xcode is running. You can compare
    your results with mine, shown here:> xcode-select -vxcode-select version 2354.>
    docker --versionDocker version 19.03.0-beta3, build c55e026You need Docker-Compose
    version 1.8 or higher.> docker-compose --versiondocker-compose version 1.24.0,
    build 0aa59064You need npm version v5.x or higher.> npm --version6.8.0You need
    Python 2.7.x or higher.> python --versionPython 2.7.10
  prefs: []
  type: TYPE_NORMAL
- en: Updating Git
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The installation is requesting Git 2.2.x or higher. However, Mac comes with
    an older version of Git; you can check your version with this:> git --versiongit
    version 2.20.1 (Apple Git-117)To upgrade Git, you will be installing Git via Brew
    and set your machine to use the Git version in Brew instead of the one that comes
    with Mac. First, install Git via Brew.> brew install gitNext, you will set your
    path to point to the new Git location; use vim or your favorite text editor.>
    vim ~/.bash_profileAdd the following to the PATH:#git point to brewPATH=/usr/local/bin:$PATHDon’t
    forget to run bash_profile after you save and quit the bash profile file to ensure
    the changes take effect.> . ~/.bash_profileLastly, you can verify the version
    of Git.> git --versionYou are now pointing to the location of Git you installed
    with Brew, and for a future upgrade of Git, you can just run the following:> brew
    upgrade gitgit version 2.21.0
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node Version Manager (nvm)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Node Version Manager (nvm)  is needed. To download or update nvm, check the
    GitHub page at [https://github.com/creationix/nvm/blob/master/README.md](https://github.com/creationix/nvm/blob/master/README.md)
    and run this command:> curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh
    | bashOnce the installation is completed, you can confirm it’s installed correctly.
    Open a new terminal, and type the following. I have version 0.34.0 installed.>
    nvm --version0.34.0
  prefs: []
  type: TYPE_NORMAL
- en: Updating Node.js
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Node needs to be version 8\. To check what you are running, run this command:>
    node --version
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, the prerequisites hyperledger.github.io page stated
    that you should install the latest (long-term support) version of Node; however,
    it has been generating fatal errors and has a recorded bug on GitHub. Node.js
    version 9 is not supported either at the time of writing.
  prefs: []
  type: TYPE_NORMAL
- en: To get Hyperledger Composer to work, you will be installing node 8 and pointing
    nvm to use node 8.> nvm install 8> npm config delete prefix> nvm use 8You can
    confirm node 8 is installed and set correctly.> node --versionv8.15.0
  prefs: []
  type: TYPE_NORMAL
- en: Installing VSCode with Hyperledger Composer Extension
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It’s recommended that you install Visual Studio Code (VSCode) with the Hyperledger
    Composer extension and use it as your code editor. The extension will provide
    code highlighting and is a professional free IDE. To get started, download VSCode
    from here: [https://code.visualstudio.com](https://code.visualstudio.com) . Click
    Download for Mac, as shown in Figure [8-2](#Fig2).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig2_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig2_HTML.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-2
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Code installation page
  prefs: []
  type: TYPE_NORMAL
- en: Once installation is complete, launch VSCode.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the Hyperledger Composer extension, click VSCode’s left menu, select
    Extensions (two square icons) from the left menu bar, and type **Hyperledger Composer**
    in the search box. Select: Hyperledger Composer. Then click Install. Lastly, Reload
    to activate it. See Figure [8-3](#Fig3).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig3_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig3_HTML.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-3
  prefs: []
  type: TYPE_NORMAL
- en: VSCode  Hyperledger Composer extension
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Composer Essential CLI Tools
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You will be installing the Hyperledger Composer Essential CLI tools including
    composer-rest-server, Composer Playground, and the Yeoman generator.
  prefs: []
  type: TYPE_NORMAL
- en: To install the Composer CLI, run the following command.> npm install -g composer-cli
    @0.19
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I am using version 0.19\. There are some open bugs with Hyperledger’s latest
    version, 0.20.6, in connection with all the tools and libraries, so I am using
    a previous version of Hyperledger Composer and Hyperledger Fabric. This may change,
    so you may want to check the documentation and install another version. Also,
    I assembled many potential bugs you may run into during installing and running
    Hyperledger Composer and Fabric; see the “Error Troubleshooting” section later
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Next, install the Yeoman tool for generating Hyperledger Composer applications,
    which utilizes generator-hyperledger-composer. Execute the following command:>
    npm install -g generator-hyperledger-composer@0.19You can now install Composer
    Playground globally with npm.> npm install -g composer-playground@0.19Part of
    Composer is a tool called composer-rest-server that generates a loopback-based
    REST interface to be able to access the network you will create. To install the
    tool, execute this command:> npm install -g composer-rest-server@0.19> npm install
    -g YeomanYou can verify that the installation went well by running the --version
    flag.> composer --versionv0.19.20> composer-rest-server --versionv0.15.2> composer-playground
    --version0.20.6To ensure the generator tool was installed, if you run the Yeoman
    command, it should list Hyperledger Composer generator.> YeomanIt will output
    the following:? 'Allo! What would you like to do? (Use arrow keys)  Run a generator◻
    Hyperledger Composer
  prefs: []
  type: TYPE_NORMAL
- en: Press Control+C to get out of the Yeoman command.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Composer Playground with Docker
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In addition to installing Composer tools globally with npm, you can run Hyperledger
    Composer Playground with Docker; just run the container and assign composer-playground
    as the name. You will be running it on port 8080.> docker run --name composer-playground
    --publish 8080:8080 hyperledger/composer-playgroundThe Docker command downloads
    the image, and you can see the output in Figure [8-4](#Fig4).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig4_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig4_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-4
  prefs: []
  type: TYPE_NORMAL
- en: Composer-playground docker container output
  prefs: []
  type: TYPE_NORMAL
- en: To cancel the container, press Control+C.
  prefs: []
  type: TYPE_NORMAL
- en: Now to run Playground in the browser on port 8080, open a new Terminal window
    by pressing Command+T and run the open command.> open http://localhost:8080You
    can see the Hyperledger Composer playground welcome page, as shown in Figure [8-5](#Fig5).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig5_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig5_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-5
  prefs: []
  type: TYPE_NORMAL
- en: Playground welcome screen
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that to stop Docker, you can run the stop command.> docker stop
    composer-playgroundTo remove the composer-playground name so you can use it again,
    you will need to run the following command:> docker rm --force composer-playground
  prefs: []
  type: TYPE_NORMAL
- en: Installing Hyperledger Fabric Dev Servers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: At the time of writing, Hyperledger Fabric’s latest version is v1.4.1; you should
    visit the GitHub page to find out the latest version and documentation as this
    may change; see [https://github.com/hyperledger/fabric](https://github.com/hyperledger/fabric)
    .
  prefs: []
  type: TYPE_NORMAL
- en: The Hyperledger Fabric dev servers have different versions to choose from. You
    will be setting up a Hyperledger Fabric v1.2 network for your development.
  prefs: []
  type: TYPE_NORMAL
- en: You then can deploy your blockchain business networks built with Hyperledger
    Composer and test your applications.
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory to download Fabric; I picked ~/fabric-dev-servers, but you
    can choose any directory.> mkdir ~/fabric-dev-servers && cd ~/fabric-dev-serversYou’ll
    use curl to get the .tar.gz file you need to install Hyperledger Fabric, as shown
    here:> curl -O https://raw.githubusercontent.com/hyperledger/composer-tools/master/packages/fabric-dev-servers/fabric-dev-servers.tar.gzUse
    tar to extract the files you downloaded.> tar xzf fabric-dev-servers.tar.gz
  prefs: []
  type: TYPE_NORMAL
- en: Once these are extracted, you have script files to help you quickly spin up
    a Hyperledger Fabric instance.
  prefs: []
  type: TYPE_NORMAL
- en: Run the ls command, and you can see the .sh files among other useful files.>
    lsstartFabric.shteardownAllDocker.shstopFabric.shteardownFabric.shWhen you run
    the Composer –v command  , you can check the version you are running. You saw
    that you indeed installed Hyperledger Composer v0.19, so you will need to use
    Hyperledger Fabric v1.1 according to the documentation, and you can also set the
    starting Fabric timeout to 30 seconds; that’s the wait time once you run the script
    to ensure the network is running.> export FABRIC_VERSION=hlfv11> export FABRIC_START_TIMEOUT=30
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are running a different version of Hyperledger Composer, check the GitHub
    page to see which version of Fabric you need to set: [https://github.com/hyperledger/composer-tools/tree/master/packages/fabric-dev-servers](https://github.com/hyperledger/composer-tools/tree/master/packages/fabric-dev-servers)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: To spin up your Hyperledger Fabric network, you need to first execute the download
    Fabric script; this can take some time, depending on your Internet connection.>./downloadFabric.shThat’s
    it; you should see the output shown in Figure [8-6](#Fig6).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig6_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig6_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-6
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the Hyperledger Fabric output
  prefs: []
  type: TYPE_NORMAL
- en: Once the download is complete, you can confirm you have Docker containers.>
    docker image ls hyperledger/*hyperledger/fabric-cahyperledger/fabric-ordererhyperledger/fabric-peerhyperledger/fabric-ccenvhyperledger/fabric-couchdb
  prefs: []
  type: TYPE_NORMAL
- en: Network Connection Profile
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is a network connection profile JSON file called DevServer_connection.json.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you will modify the file to fit with the Docker localhost container
    you will create. Before you modify the file, it’s a good idea to make a copy first.>
    cd ~/fabric-tools/> cp DevServer_connection.json DevServer_connection-backup.json
  prefs: []
  type: TYPE_NORMAL
- en: Change the original file’s orderers, peers, and certificate authorities to point
    to localhost as you will be running Composer Rest Server as the Docker container
    in the network and will access these hostnames on the network.
  prefs: []
  type: TYPE_NORMAL
- en: Edit the DevServer_connection file with vm or your favorite editor.> vim DevServer_connection.jsonSee
    Figure [8-7](#Fig7).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig7_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig7_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-7
  prefs: []
  type: TYPE_NORMAL
- en: Changing devServer.json to point to localhost
  prefs: []
  type: TYPE_NORMAL
- en: You also need to edit the hosts to point to 127.0.0.1 on the local server.>
    sudo vim /etc/hosts# fabric127.0.0.1 orderer.example.com peer0.org1.example.com
    ca.org1.example.com
  prefs: []
  type: TYPE_NORMAL
- en: Spinning Off a Local Hyperledger Fabric Business Network
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first time you run Hyperledger Fabric, you need to execute commands to start
    a local Hyperledger Fabric instance and issue an ID card for the admin. The default
    admin is called PeerAdmin. To get started, run the start fabric command.> ./startFabric.shThe
    expected output is confirming your variables.Development only script for Hyperledger
    Fabric controlRunning 'startFabric.sh'FABRIC_VERSION is set to [version number]...Creating
    network "composer_default" with the default driverCreating ca.org1.example.comCreating
    orderer.example.com
  prefs: []
  type: TYPE_NORMAL
- en: 'As part of the start script, you can see the output lines that confirm that
    the composer_default Docker network was created and running the containers in
    the created network. The containers are able to communicate using the custom hostnames:
    ca.org1.example.com and orderer.example.com.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Admin ID Card
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you have a network running, the last setup step is to create credentials.
  prefs: []
  type: TYPE_NORMAL
- en: You can use Hyperledger Composer to create what Hyperledger Fabric calls a .card
    file.
  prefs: []
  type: TYPE_NORMAL
- en: You can generate the admin ID card by executing the following command:> ./createPeerAdminCard.shYou
    can compare your output with mine, which is shown in Figure [8-8](#Fig8).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig8_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig8_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-8
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Composer generate card
  prefs: []
  type: TYPE_NORMAL
- en: To confirm the card was created correctly, execute the following command with
    <card name>:> composer card list --card PeerAdmin@hlfv1This command outputs information
    about the ID card. See Figure [8-9](#Fig9).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig9_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig9_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-9
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Composer card list
  prefs: []
  type: TYPE_NORMAL
- en: Stopping Hyperledger Fabric
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Leave Fabric running for now, but once you complete your exercises, you can
    shut down the Hyperledger Fabric runtime by executing the stop command.> ./stopFabric.shAlso,
    you should execute the teardown script  at the completion of your development
    cycle to ensure the memory is freed.> ./teardownFabric.sh
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you run the teardown script, the next time you start the runtime, you’ll
    need to create a new PeerAdmin card just like you did with the first-time startup
    steps. See the following steps.
  prefs: []
  type: TYPE_NORMAL
- en: Re-creating the PeerAdmin ID Card
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After you stop and tear down with these commands:> ./stopFabric.sh> ./teardownFabric.shyou
    need to re-create the admin ID card, so just follow the same commands.> ./startFabric.sh>
    ./createPeerAdminCard.sh> composer card list --card PeerAdmin@hlfv1It’s a good
    idea to follow the process in Figure [8-10](#Fig10), which shows what you need
    to do in order to start a card, stop a card, create a card, and tear down.![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig10_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig10_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-10
  prefs: []
  type: TYPE_NORMAL
- en: 'Fabric-dev-servers start-stop flow. Photo credit: github.com/hyperledger/composer-tools.'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Composer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have the Hyperledger Fabric network installed and running, the
    next step is to write chaincode. You can write chaincode in Hyperledger Fabric
    natively with Go; however, you can also utilize Hyperledger Composer to help create
    chaincode and blockchain applications via coding in JavaScript instead of Go.
    Hyperledger Composer takes definition files and generates Business Network Archive
    (.bna) files that you can then deploy to the Hyperledger network to run. Composer
    is easy to use and aimed not just at developers but at business owners.
  prefs: []
  type: TYPE_NORMAL
- en: There are three components that make up Hyperledger Composer (see Figure [8-11](#Fig11)).
  prefs: []
  type: TYPE_NORMAL
- en: '*Business network archive (.bna)* : This consists of four files packaged together.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hyperledger Composer Playground*: This is used to configure and deploy network
    as well as test code without rolling out a blockchain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*REST API support*: This exposes functions to be used by front-end clients
    such as dapps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig11_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig11_HTML.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-11
  prefs: []
  type: TYPE_NORMAL
- en: 'Hyperledger Composer graphical explanation. Photo credit: developer.ibm.com.'
  prefs: []
  type: TYPE_NORMAL
- en: “Hello, World” with Playground
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will be creating a “Hello, World” application and deploying it on the network
    using Playground. To get started, open Playground via the command line and execute
    this command:> composer-playground
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can use Docker. Once it’s open, dismiss the welcome screen
    by clicking “Let’s Blockchain!”
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a Business Network
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, select “Deploy a new business network.” In the deploy wizard, insert the
    basic information, such as typing **hello-network** in the “Give your new Business
    Network a name” input box.
  prefs: []
  type: TYPE_NORMAL
- en: Select the middle “empty-business-network” network definition and click Deploy,
    as shown in Figure [8-12](#Fig12).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig12_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig12_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-12
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Composer Playground, deploying new business network wizard
  prefs: []
  type: TYPE_NORMAL
- en: The ID card for an admin is created for your network. To connect to the network,
    click the “Connect now” link, as shown in Figure [8-13](#Fig13).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig13_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig13_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-13
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to the hello-network business network definition
  prefs: []
  type: TYPE_NORMAL
- en: You are now connected to the business network definition network, and you can
    define and work with the model.
  prefs: []
  type: TYPE_NORMAL
- en: Business Network Archive (.bna)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The business network model includes assets and the transactions related to
    these assets. Hyperledger Composer needs the following to be packaged together:
    a network model file, a JavaScript file (.js), an access control file (.acl),
    and a query file (.qry). These files are definition files that generate your network.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Network model (.cto)*: This is the file that defines the assets, transactions,
    and participants who can interact with these assets. The file is created with
    a modeling language called CTO (named after the original project name, Concerto).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*JavaScript file (.js)*: This is the file that defines the transaction processor
    functions. It is the chaincode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Access control (ACL) (.acl)*: This is the file that contains the access control
    rules that define the rights of the different participants.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Query (.qry)*: This is the file that defines the queries that can run in a
    network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger Composer takes these four files and creates a business network definition
    that is packaged as an archive (.bna) file. The .bna files can be deployed on
    the Hyperledger Fabric network.
  prefs: []
  type: TYPE_NORMAL
- en: You can than write a client application such as a dapp that can use Hyperledger
    Composer APIs to access the smart contract (.bna functions) that you write through
    the Hyperledger Fabric network.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Model File
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To create the model file  , you can add the files that make up the .bna archive.
    For instance, to add a model file. Click “Add a file,” select Model File (.cto),
    and click Add, as shown in Figure [8-14](#Fig14).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig14_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig14_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-14
  prefs: []
  type: TYPE_NORMAL
- en: Adding a file to the business network model
  prefs: []
  type: TYPE_NORMAL
- en: For the .cto file, you will define the processing function and transaction.
  prefs: []
  type: TYPE_NORMAL
- en: For the namespace, you will use a fictional company called Skynet, with an identified
    ID of type String. You will also create a msg string and a transaction Hello and
    pass the Myfunction asset that will include the message.namespace org.skynet.mymodelasset
    Myfunction identified by id {  o String id  o String msg}transaction Hello {  -->
    Myfunction check}
  prefs: []
  type: TYPE_NORMAL
- en: Adding Chaincode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you will add a JS file by clicking “Add a file.” Write chaincode as the
    logic of the transaction to print the message to the console, as shown here:/**@param
    {org.skynet.mymodel.Hello} hello@transaction*/function hello(hello) {  console.log("Hello
    " + hello.check.msg);}
  prefs: []
  type: TYPE_NORMAL
- en: Transactions represent the chaincode, which is the business logic of your application.
    Notice that the comments state that the code is a function for a transaction and
    the namespace. Click “Deploy changes” to update your definition model.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Asset
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, to test the model, you will create a new asset, extend it, and store it.
    To do that, click + Create New Asset at the top-right corner. The create new asset
    wizard opens, as shown in Figure [8-15](#Fig15). The model already has an ID;
    however, for this example, you will change it to 001 (but the string can be any
    string). For the message, you will pass world.![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig15_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig15_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-15
  prefs: []
  type: TYPE_NORMAL
- en: Create New Asset Wizard
  prefs: []
  type: TYPE_NORMAL
- en: Access Control
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that there is an Access Control option with the permissions.acl file
    as part of the Define tab at the bottom left of the screen, as shown in Figure
    [8-16](#Fig16).
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the rules grant wide-open “allow all” access, which can be changed.![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig16_HTML.png](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig16_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-16
  prefs: []
  type: TYPE_NORMAL
- en: ACL permission file on your hello-network
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that the model instance is saved, you can submit the transaction to invoke
    the transaction. On the left side, click the “Submit transaction” button. The
    Submit Transaction Wizard opens. Set the ID to 001, as shown in Figure [8-17](#Fig17).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig17_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig17_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-17
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Playground, Submit Transaction Wizard
  prefs: []
  type: TYPE_NORMAL
- en: Before you test, open the developer console so you can see the JavaScript messages.
    For Safari, follow these instructions.
  prefs: []
  type: TYPE_NORMAL
- en: In the top menu, select Safari ➤ Preferences. Click the Advanced tab and then
    select the “Show Develop menu in menu bar” box.
  prefs: []
  type: TYPE_NORMAL
- en: After following these steps, you will see in the top menu Developer as an item.
    Select “Show JavaScript console” (or press Command+Option+C).
  prefs: []
  type: TYPE_NORMAL
- en: Next, click Submit; you will see the message “Hello world” in the JavaScript
    console, as shown in Figure [8-18](#Fig18).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig18_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig18_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-18
  prefs: []
  type: TYPE_NORMAL
- en: “Hello world” message showing in the JavaScript console
  prefs: []
  type: TYPE_NORMAL
- en: Importing/Exporting the Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To export the model, you can generate the business network archive (.bna) file.
    The .bna file can then be deployed in production. All you have to do is click
    the Export link, as shown in Figure [8-19](#Fig19).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig19_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig19_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-19
  prefs: []
  type: TYPE_NORMAL
- en: Exporting the .bna file
  prefs: []
  type: TYPE_NORMAL
- en: Playground generates the hello-network.bna file, which will be downloaded to
    your computer.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, you can import a .bna file, click the “Add a file” link, and under
    “Upload a file from your computer...,” you can browse or drag and drop the .bna
    file.
  prefs: []
  type: TYPE_NORMAL
- en: The import/export is not just for publishing; it can be used to share models
    with others for testing, development, or other reasons. I included the hello-network.bna
    file with this book’s code, so feel free to import it; see [https://github.com/Apress/the-blockchain-developer/chapter8/hello-network](https://github.com/Apress/the-blockchain-developer/chapter8/hello-network)
    .
  prefs: []
  type: TYPE_NORMAL
- en: The .bna file is nothing more than a zip folder named bna. In fact, you can
    copy the .bna file as .zip and unzip the files.>  cp hello-network.bna hello-network.zip>
    unzip hello-network.zipVSCode can be used as your IDE for your entire Hyperledger
    project. For instance, now that you have unzipped your files, you can open VSCode
    and drag and drop the model file models/org.example.model.cto into VSCode. You
    can see that the code is highlighted, as shown in Figure [8-20](#Fig20).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig20_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig20_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-20
  prefs: []
  type: TYPE_NORMAL
- en: Model CTO file in VSCode
  prefs: []
  type: TYPE_NORMAL
- en: You wrote your files in Composer Playground using the web interface. This suite
    is a less developer savvy approach; however, a larger project can include complex
    business logic, events, many transactions, and testing, so it is advisable to
    create your project and manage files with VSCode and then upload those files into
    Playground for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Playground Online
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hyperledger Composer Playground has an online version available at [https://composer-playground.mybluemix.net/](https://composer-playground.mybluemix.net/)
    . You can use the same steps you used before to create your network and files.
    See Figure [8-21](#Fig21).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig21_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig21_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-21
  prefs: []
  type: TYPE_NORMAL
- en: Composer Playground
  prefs: []
  type: TYPE_NORMAL
- en: To test Playground Online, you can import the hello-network.bna file you created
    previously. To do so, first click “Let’s Blockchain!” and under “2\. MODEL NETWORK
    STARTER TEMPLATE” select “Drop here to upload or browse” and upload the hello-network.bna
    file. Click the Deploy button at the bottom-right corner. You can see the network
    created. Click the “Connect now” link to connect to the new network. See Figure
    [8-22](#Fig22).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig22_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig22_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-22
  prefs: []
  type: TYPE_NORMAL
- en: hello-network connect link
  prefs: []
  type: TYPE_NORMAL
- en: You can repeat the same steps to create an asset and test, just as you have
    done on the local playground.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Business Network with Yeoman
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You used Hyperledger Playground to generate your business network. Hyperledger
    Playground is aimed not just for developers but also at business owners because
    of its simplicity; however, you can also create a network in Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Yeoman provides a wizard you can use. If you are unfamiliar with Yeoman, it
    provides a wizard generator through the command line. You can either run Yeoman
    and select Hyperledger Composer and the Business Network generator or run the
    following:> Yeoman hyperledger-composer:businessnetworkKeep in mind that Hyperledger
    Composer can be used for more than just generating the business network; it can
    be used for Angular, LoopBack, and Model as well. See Figure [8-23](#Fig23).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig23_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig23_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-23
  prefs: []
  type: TYPE_NORMAL
- en: Generating hello-network with the Yeoman wizard
  prefs: []
  type: TYPE_NORMAL
- en: The hello-network folder  is generated and includes permissions.acl, models,
    features, test, and lib. Next, to create the .bna file, you can use Hyperledger
    Composer. See Figure [8-24](#Fig24).> cd hello-network> composer archive create
    -t dir -n .![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig24_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig24_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-24
  prefs: []
  type: TYPE_NORMAL
- en: Generating the hello-network BNA file with Hyperledger Composer
  prefs: []
  type: TYPE_NORMAL
- en: Run the ls command and confirm that the hello-network@0.0.1.bna file is generated.>
    ls *.bnahello-network@0.0.1.bna
  prefs: []
  type: TYPE_NORMAL
- en: Deploying on a Local Hyperledger Fabric Network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To deploy the .bna file to a local Hyperledger Fabric network, run the composer
    network install command and point to the .bna file while specifying the identity
    card.> cd ~/fabric-dev-servers/> composer network install --archiveFile ~/Desktop/hello-network.bna
    --card PeerAdmin@hlfv1This will result in the successful output shown in Figure
    [8-25](#Fig25).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig25_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig25_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-25
  prefs: []
  type: TYPE_NORMAL
- en: Installing local Hyperledger Fabric command output
  prefs: []
  type: TYPE_NORMAL
- en: Running the “hello-network” Network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hyperledger Composer is the application development framework for building blockchain
    applications based on Hyperledger Fabric.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Composer generates REST APIs based on the business network definition
    you created. This is done using what is called a LoopBack connector. You can take
    these REST APIs to be used by a) a client such as a dapp b) integrate with non-blockchain
    clients such as a web site. That allows you to use the blockchain ledger just
    as you would use any other database with a middleware. That is powerful.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Composer can generate a REST interface. You can run Hyperledger
    Fabric on your computer and generate a GUI that you can then use to interact with
    the network running on your computer just like it would be on a real production
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the “hello-network” Business Network and Admin Card
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To run your “hello-network” network, run the following command, and see the
    output in Figure [8-26](#Fig26):> composer network start --networkName hello-network
    --networkVersion 0.0.2-deploy.3 -A admin -S adminpw -c PeerAdmin@hlfv1 --file
    networkadmin.card![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig26_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig26_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-26
  prefs: []
  type: TYPE_NORMAL
- en: Starting the business network
  prefs: []
  type: TYPE_NORMAL
- en: To confirm this worked, you can run the docker ps command. You should see the
    dev-peer0.org1.example.com-hello-network-0.0.2-deploy.3-0 image created, as shown
    in Figure [8-27](#Fig27).> docker ps![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig27_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig27_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-27
  prefs: []
  type: TYPE_NORMAL
- en: Docker container hello-network
  prefs: []
  type: TYPE_NORMAL
- en: Importing a Business Card
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, import a new network admin card so you can use admin@hello-network in
    the business network you started.> composer card import --file networkadmin.cardThis
    command imports the network admin card, which will include admin@hello-network.>
    composer network ping --card admin@hello-networkYou can compare your output with
    mine, which is shown in Figure [8-28](#Fig28).![../images/475651_1_En_8_Chapter/475651_1_En_8_Fig28_HTML.jpg](../images/475651_1_En_8_Chapter/475651_1_En_8_Fig28_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-28
  prefs: []
  type: TYPE_NORMAL
- en: Importing the business network card
  prefs: []
  type: TYPE_NORMAL
- en: Where to Go from Here
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From here you can choose from many passport strategies for your users. For example,
    you can use Google OAUTH2.0, SAML, Passport-JWT, or LDAP, depending on what your
    organization is using.
  prefs: []
  type: TYPE_NORMAL
- en: Then you will be able to run a REST server in multiuser mode and test the interaction
    with a client application such as the one you created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are couple of articles that can help you with the process of setting up
    your app for authenticating multiple users:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Passport-JWT*: [https://hyperledger.github.io/composer/latest/tutorials/google_oauth2_rest](https://hyperledger.github.io/composer/latest/tutorials/google_oauth2_rest)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Google OAUTH2.0*: hyperledger/fabric-ca docker hyperledger/fabric-orderer
    hyperledger/fabric-peer hyperledger/fabric-ccenv hyperledger/fabric-couchdb'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger is a large project, and it consists of five major platforms as well
    as five major tools. This chapter focused only on Hyperledger Fabric. However,
    you are encouraged to continue experimenting with other Hyperledger platforms
    and tools such as Hyperledger Sawtooth, including setting up an environment, creating
    an account, writing a more complex chaincode, and deploying as well as connecting
    your chaincode to a dapp.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get more information on getting started, visit the official web site here:
    [https://sawtooth.hyperledger.org/docs/seth/releases/latest/getting_started.html](https://sawtooth.hyperledger.org/docs/seth/releases/latest/getting_started.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, you can find more information about all the platforms and tools here:
    [https://www.hyperledger.org/](https://www.hyperledger.org/) .'
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, bookmark the Hyperledger dev center here: [https://developer.ibm.com/technologies/blockchain/](https://developer.ibm.com/technologies/blockchain/)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Error Troubleshooting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hyperledger was built to be plain and allows you to stitch together modules
    on many different machines, but not without problems. Hyperledger is set up for
    more advanced users and may request system admin privileges to set up servers.
    You may have encountered a few errors, so here I have compiled them into this
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Composer Runtime Install Error or Card Not Found
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you get errors such as these:'
  prefs: []
  type: TYPE_NORMAL
- en: “composer runtime install error card not found peerAdmin”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“Error: Card not found: PeerAdmin@hlfv1”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: it’s because the admin ID card was not created successfully or the correct process
    wasn’t followed; all you need to do is remove the ID card and re-create it. You
    need to remove the composer folder, create a new folder, and run the command again.>
    rm -rf ~/.composer> mkdir ~/.composer> ./createPeerAdminCard.sh
  prefs: []
  type: TYPE_NORMAL
- en: Docker Unauthorized Authentication Required Error
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You may get the following error while downloading Hyperledger Fabric:'
  prefs: []
  type: TYPE_NORMAL
- en: '“unauthorized: authentication required”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are issues with authenticating or proxying to Docker Hub and not Hyperledger
    Fabric.
  prefs: []
  type: TYPE_NORMAL
- en: 'To try to fix this, set your computer time to match UTC time zone: [https://www.timeanddate.com/worldclock/timezone/utc](https://www.timeanddate.com/worldclock/timezone/utc)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Create an account with Docker at [https://hub.docker.com](https://hub.docker.com)
    , and then log in.> docker loginAlternatively, try again after you logged out.>
    docker logout
  prefs: []
  type: TYPE_NORMAL
- en: Docker Container Conflicting Errors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you are using the Docker container for a project, you might need to re-create
    a container or stop a container; otherwise, you may get conflicting errors.
  prefs: []
  type: TYPE_NORMAL
- en: All you need to do is stop and remove the container.> docker stop [container
    id]> docker rm [container id]
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you already created a Mongo-Docker container or any other Docker container
    that creates a conflict, you will get the following conflict error when you try
    to create a new one: “The container name is already in use by container [container
    id].” All you need to do is stop the container and remove it.'
  prefs: []
  type: TYPE_NORMAL
- en: docker stop [container id]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: docker rm [container id]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Mismatch and Cleanup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you have a mismatch between Hyperledger Composer and Hyperledger Fabric
    versions, you may get the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '“Starting business network definition. This may take a minute... Error: Error
    trying to start business network. Error: Failed to connect to any peer event hubs.
    It is required that at least 1 event hub has been connected to receive the commit
    event Command failed.”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This error is also generated on Hyperledger Fabric 1.2 with Hyperledger Composer
    0.20.6 because there is an open bug. To fix this, you need to check your Hyperledger
    Composer and uninstall through npm, as well as re-install Hyperledger Fabric.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, if you need to completely clean up, you need to stop and tear
    down Fabric. To remove the Docker images, remove fabric-dev-servers, and lastly
    remove Composer, follow this process:> cd ~/fabric-tools> ./stopFabric.sh> ./teardownFabric.shNext,
    stop the Docker containers, remove them, and also remove all the Docker images
    by running these commands:> docker kill $(docker ps -q)> docker rm $(docker ps
    -a -q) –f> docker rmi $(docker images -q) -fYou can now completely remove fabric-dev-servers.>
    rm -rf ~/fabric-dev-serversTo remove Composer and admin ID card, run these commands:>
    sudo rm -rf ~/.composer> npm uninstall -g composer-cli
  prefs: []
  type: TYPE_NORMAL
- en: The npm uninstall command will output a confirmation that the library was uninstalled.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, I introduced Hyperledger to help you get started and understand
    the power of it. I covered the Hyperledger ecosystem and terminology and gave
    you a good understanding of the pieces that make up the network as well as the
    major Hyperledger platforms and tools available. You installed Hyperledger Fabric
    and Hyperledger Composer, ensuring the prerequisite libraries are installed. You
    created “Hello, World” application with Playground as well as create a .bna file
    you deployed on a local network. I mentioned Hyperledger Playground Online as
    well as explained how to generate a network with Yeoman generator. I covered the
    different pieces that make up the .bna archive file including handling ID cards.
    I also covered potential errors and troubleshooting to ensure your installation
    went well. Lastly, I covered a few recommendations on where to go from here to
    continue with Hyperledger.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to build a dapp with Angular. Dapps
    can interact with the smart contracts you have developed in the past three chapters
    and are an important ingredient in the blockchain ecosystem.
  prefs: []
  type: TYPE_NORMAL
