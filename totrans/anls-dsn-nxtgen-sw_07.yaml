- en: © Springer Nature Switzerland AG 2020A. M. LangerAnalysis and Design of Next-Generation
    Software Architectures[https://doi.org/10.1007/978-3-030-36899-9_7](https://doi.org/10.1007/978-3-030-36899-9_7)
  prefs: []
  type: TYPE_NORMAL
- en: 7. Blockchain Analysis and Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Arthur M. Langer^([1](#Aff2) [ ](#ContactOfAuthor2))(1)Center for Technology
    Management, Columbia University, New York, NY, USAArthur M. LangerEmail: [al261@columbia.edu](mailto:al261@columbia.edu)'
  prefs: []
  type: TYPE_NORMAL
- en: 7.1 Understanding Blockchain Architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Blockchain technology represents an interesting architectural invention that
    will primarily addresses the challenges of cyber security in the internet. As
    I previous discussed, the existing central database architectures cannot provide
    the security necessary to launch IoT systems. Blockchain is defined as a “ledger-based”
    system, in that it is designed to track all transactions and update all members
    of the chain. In actuality, the block chain design evolved from what started as
    a linked list data structure. Essentially, a linked-list originally was designed
    as a data structure that linked to another data element by storing information
    about where a value was stored was stored in memory. It is a pointer system, that
    shows prior (previous) links and forward links as shown in Fig. [7.1](#Fig1).![../images/480347_1_En_7_Chapter/480347_1_En_7_Fig1_HTML.png](../images/480347_1_En_7_Chapter/480347_1_En_7_Fig1_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 7.1
  prefs: []
  type: TYPE_NORMAL
- en: Linked list data structure
  prefs: []
  type: TYPE_NORMAL
- en: The problem addressed by linked list data structures was its ability to store
    related data or values without requiring the physical storage to be sequential.
    In other words, by having these “links” related file elements could actually be
    stored in different parts of storage and on different physical devices as shown
    in Fig. [7.2](#Fig2).![../images/480347_1_En_7_Chapter/480347_1_En_7_Fig2_HTML.png](../images/480347_1_En_7_Chapter/480347_1_En_7_Fig2_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 7.2
  prefs: []
  type: TYPE_NORMAL
- en: Linked list storage across physical storage devices
  prefs: []
  type: TYPE_NORMAL
- en: The importance of the linked list data structure is that it allowed a logical
    file of information to be stored physically in different locations. But to the
    user it was invisible and allowed the system to maximize the data storage. However,
    common with any data structure strategy, there is always a downside. The allocation
    of a logical file across multiple physical devices diminishes performance. With
    large logical files that are distributed across many devices or even fragmented
    on the same disk will have significant reductions in performance.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain evolved the linked list model for similar yet different objectives.
    The linked data structures shown in Fig. [7.1](#Fig1) are now more complex and
    defined as “blocks” of information. The architecture allows for new blocks to
    be added dynamically and simultaneously updates each block when changes are made.
    A block, rather than representing a data element actually represents an account
    or user. So, each individual has their own block in the chain. Depending on the
    design of the blockchain (or the blockchain product) users may have equal or unequal
    rights on how they access and update the other blocks in the chain. All blocks
    contain information like the date, time, and amount of a transaction. In effect,
    the blockchain architecture acts as a modified linked list designed to keep track
    of transactions as opposed to link data elements. For this reason, this blockchain
    is a perfect solution for house-keeping and is often referred to as a ledger-based
    technology.
  prefs: []
  type: TYPE_NORMAL
- en: The word ledger really emanated from the accounting profession, where ledgers
    were created to keep track of detailed transactions often known as debits and
    credits. At any given time, the accountant need only add and subtract all the
    transaction amount entries to calculate the balance of any ledger account. The
    important feature of a ledger; however, is its audit-trail feature that ensures
    knowledge of every transaction that makes up the balance. It acts like a running
    total at all times. What is also essential to a ledger is its ability to recalculate
    the balance each time so that a given balance can be tested for accuracy. Furthermore,
    the source date of every transaction in a ledger is documented. In blockchain,
    the ledger is the account; every account has a unique ledger in the chain. Another
    important factor in any ledger is the modification of any transaction is not allowed.
    For example, when you need to adjust an accounting entry, you don’t directly modify
    the original transaction or entry, rather one enters an “adjusting” entry that
    modifies the balance. Thus, in a ledger you can only create a transaction or read
    it, but you cannot modify or delete! Blockchain follows this rule and this is
    why it provides two significant benefits, (1) complete audit trail of all behavior
    in the block, and (2) you cannot reverse or modify a transaction which really
    restricts hackers. So, every blockchain entry is documented and a block stores
    the associated authorization and date/time of each transaction.
  prefs: []
  type: TYPE_NORMAL
- en: In the blockchain, a user ledger is identified through a “hash” code key. The
    hash code is a random-based calculated number that is extremely difficult to decipher,
    so it adds a strong security to the chain. Each member of the blockchain has access
    to all the blocks and keeps a separate copy of the blockchain on their resident
    network system. This means that when a block is updated or a new block is added,
    each copy must be updated, which of course brings back the challenge of latency
    in performance. However, because there is no central controlling copy of the blockchain,
    it makes it challenging for a hacker to manipulate every copy. This is where blockchain
    adds hope to establish an internet architecture that can protect users.
  prefs: []
  type: TYPE_NORMAL
- en: 'The blockchain protocol is built on the concept of “consensus.” Due to latency
    issues, the consensus protocol will always assume that the longest chain in a
    blockchain version represents the one that users trust most. So, in complex and
    large blockchain’s where updating is constantly occurring, the longest typically
    is the one that is most current at any instance. Of course, the importance of
    consensus is directly related to the size and the amounts of new blocks coming
    into the chain. Blockchains are also both private and public. From a public perspective
    anyone can view the contents of the blockchain but cannot access accounts without
    a private key which allows a user to transfer an item to the block. Another important
    factor to note is that the blockchain infrastructure provides trust (better known
    as access to the block) but not trust between blocks or users directly as this
    maximizes the security benefit of blockchain. There are various types of trust
    which means, how do I know you are the real authorized person accessing the block.
    There are six common proofs that are implemented in any blockchain product:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Proof of Work*: avoids a hacker because the network machines are required
    to prove which involves complex algorithms not available to hackers. Further,
    the network machines must have specific configurations and space to be able to
    complete the algorithm. Proof of Work tends to be the most attractive to developers.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Proof of Stake*: requires the user to prove ownership of a specific amount
    of money. This approach is more common in Bitcoin blockchain given the trading
    of cryptocurrency. Simply put the owner must prove they have the money they are
    attempting to trade.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Proof of Hold*: the user has more rights based on the amount of time of possession
    of the coin.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Delegated Proof of Stake (DPOS)*: this allows users known as delegates who
    want to produce new blocks on the network. Delegates are allocated blocks based
    on the highest number of votes they receive from other delegates. DPOS is relevant
    when access to the blockchain is valued by having multiple blocks or accounts.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Proof of Capacity*: this is an algorithm that requires users to solve challenges
    in the form of a puzzle. The more storage the requestor has allows them to solve
    the puzzle quicker. The puzzle is created by the service provider.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '6.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Proof of Elapsed Time*: users are randomly assigned a wait time. Those that
    have shorter wait times get access first.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As one can see these proofs for access are very effective on keeping out hackers
    as opposed to whether who have rights as a user. This is why blockchain is so
    attractive as a solution particularly for IoT applications.
  prefs: []
  type: TYPE_NORMAL
- en: 7.2 Forecasted Growth of Blockchain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The growth of blockchain technology is predicted to grow enormously. Deloitte
    in 2019 recently surveyed 1,000 companies in seven countries and found that 34%
    already had blockchain in production with another 40% planning to invest 5 million
    in the year 2020! Much of this explosion of interest can be attributed to three
    factors:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The launch of Bitcoin in 2009 was the first successful blockchain implementation;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The coming of 5G that addresses the latency criticisms of blockchain architecture;
    and
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The need for a cyber security infrastructure that allows IoT to be protected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There are certainly particular industries that are earlier adopters of blockchain,
    specifically banks, healthcare, property record keeping, smart contracts, and
    voting to name just a few.
  prefs: []
  type: TYPE_NORMAL
- en: 7.2.1 Advantages and Disadvantages of Blockchain
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Although blockchain represents a decentralized solution that favors IoT devices,
    there are specific advantages and disadvantages to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Positives:'
  prefs: []
  type: TYPE_NORMAL
- en: Accuracy in verification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elimination of 3rd party verifiers lowering cost
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security via decentralization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transparency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IoT and 5G capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auditability and traceability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Better access to data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Negatives:'
  prefs: []
  type: TYPE_NORMAL
- en: Increased costs for technology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Latency and performance issues still exist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attraction to hackers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Short history of results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As one can see above will there are disadvantages, there appears to be more
    positives and hope that blockchain can evolve into the next generation of a new
    architectural design.
  prefs: []
  type: TYPE_NORMAL
- en: 7.3 Analysis and Design of Blockchain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many of the blockchain decisions have been focused in two areas; (1) the requirements
    analysis to determine the feasibility of a blockchain implementation, and (2)
    the architectural infrastructure decisions on the rules and governance of the
    blockchain itself. While I will provide various examples of these two issues,
    the important objective of this section is to define what responsibilities an
    analyst has in this process as it relates to the SDLC.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, when assessing blockchain use cases are the preferred method for setting
    up and selecting the right blockchain design. Use cases for blockchain must first
    focus on specific features and functions that are common to an industry. Along
    with that specific industry comes possible processing regulations as well as technical
    requirements including such things like smart contracts, cryptocurrencies and
    legal constraints. All of these must be part of the analysis function. Further,
    data requirements and speed of response times are critical technical issues that
    drive the feasibility of a blockchain solution and its selection. So, it’s not
    just feasibility, it’s the overall construct of the blockchain itself, although
    in the financial industry one can see why block chain, while attractive, is of
    concern when it comes to the latency issue of performance capacity and scalability.
    In addition, the analyst must address the size of transactions and the storage
    needs within a block in the chain. Table [7.1](#Tab1) provides a list of the generic
    types of things that analysts should be prepared to capture and document.Table 7.1
  prefs: []
  type: TYPE_NORMAL
- en: Generic blockchain business process requirement definitions
  prefs: []
  type: TYPE_NORMAL
- en: '| Generic requirement | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Data storage | In block/out of block |'
  prefs: []
  type: TYPE_TB
- en: '| Mode location | Where are spokes in the network mobile, IoT etc. |'
  prefs: []
  type: TYPE_TB
- en: '| Network bandwidth | G power (5G, 4G etc.) |'
  prefs: []
  type: TYPE_TB
- en: '| Type of blockchain | Public, private, hybrid, consortium |'
  prefs: []
  type: TYPE_TB
- en: '| Industry |   |'
  prefs: []
  type: TYPE_TB
- en: '| Customer experience factors | User friendliness, robustness, accessibility
    |'
  prefs: []
  type: TYPE_TB
- en: '| Overall goal of the system | Paragraph of objectives |'
  prefs: []
  type: TYPE_TB
- en: '| Actors | Human and machine to machine |'
  prefs: []
  type: TYPE_TB
- en: '| Authority level | Trusted, decentralized |'
  prefs: []
  type: TYPE_TB
- en: '| External system interlaces | Other networks |'
  prefs: []
  type: TYPE_TB
- en: '| Data structures | External interfaces |'
  prefs: []
  type: TYPE_TB
- en: '| Internal functions | Modifiers |'
  prefs: []
  type: TYPE_TB
- en: '| Tests | Security assessment |'
  prefs: []
  type: TYPE_TB
- en: '| External subsystem | User stories, inserting new blocks, acceptance tests
    of the system, user interface |'
  prefs: []
  type: TYPE_TB
- en: '| Precondition | Requirements to become an actor |'
  prefs: []
  type: TYPE_TB
- en: Essentially blockchain in analysis and design resembles the licensing of a transaction
    processor. It’s almost like selecting a type of engine for a car. Engines have
    varying capabilities and limitations depending on the type of car you wish to
    own and how you want to drive the car. Things like gas mileage, pickup, durability,
    dependability, and the way the engine shifts, etc. In order to install the blockchain
    engine you must also understand the best way to install the product. Installation
    again would need to reflect industry requirements, performance preferences and
    regulatory limitations. The settings needed are part of the selection considerations
    for the ultimate blockchain vendor and product you choose to license. Each vendor,
    as with all third-party vendors have advantages and disadvantages in the product
    they license. Of course, each vendor believes they offer the best product, but
    there are also blockchains that might be better for a particular industry like
    Bitcoin in the financial markets.
  prefs: []
  type: TYPE_NORMAL
- en: There exist hundreds of industry and technology use cases prototypes for that
    can assist analysts to install and set up the blockchain once the product has
    been selected. It might even be part of driving the decision; let’s say the vendor
    did not support a feature that is required buy your industry. An example of a
    roadmap for design is Yrjola’s ([2019](#CR3)) use case for a citizens Broadband
    Radio Service Spectrum. His model also provides a flow diagram of interfaces,
    a life cycle flow of a transaction, and a decision diagram for setting up the
    blockchain as shown in Fig. [7.3](#Fig3).![../images/480347_1_En_7_Chapter/480347_1_En_7_Fig3_HTML.png](../images/480347_1_En_7_Chapter/480347_1_En_7_Fig3_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 7.3
  prefs: []
  type: TYPE_NORMAL
- en: Yrjola Broadband Radio Service Spectrum blockchain
  prefs: []
  type: TYPE_NORMAL
- en: Another suggested approach to determining needs is to design process flows—sort
    of a data flow/flowchart of the sequence of events that occur when a user gets
    on the system and the decisions trees that define the flow. Xu et al. ([2017](#CR2))
    provides a sample design process that demonstrates how analysts can document requirements
    and the logic flow in Fig. [7.4](#Fig4). inevitably logic flows also uncover data
    element needs.![../images/480347_1_En_7_Chapter/480347_1_En_7_Fig4_HTML.png](../images/480347_1_En_7_Chapter/480347_1_En_7_Fig4_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 7.4
  prefs: []
  type: TYPE_NORMAL
- en: Xu et al. design process for blockchain-based systems
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain design can also make use of traditional analysis tools covered earlier
    in this book. Various agile analysis tools can be incorporated in creating a design
    document for a blockchain smart contract system created by Marchesi et al. ([2018](#CR1)).
    Their approach can be used as a guideline for a generic blockchain SDLC. In their
    particular solution the authors use the UML methodology, but analysts can use
    they choose any of the structured analysis approaches.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: State the goal of the system in the form of a few paragraphs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step 2: Identify the actors (both human and machine) that ultimately represent
    the boundaries of inputs and outputs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step 3: Create a development process diagram as shown in Fig. [7.5](#Fig5).![../images/480347_1_En_7_Chapter/480347_1_En_7_Fig5_HTML.png](../images/480347_1_En_7_Chapter/480347_1_En_7_Fig5_HTML.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fig. 7.5
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Sample development process for a smart contract system
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Step 4: Develop the system requirements using high-level user stories using
    both prose writing and a use case diagram as shown in Fig. [7.6](#Fig6).![../images/480347_1_En_7_Chapter/480347_1_En_7_Fig6_HTML.png](../images/480347_1_En_7_Chapter/480347_1_En_7_Fig6_HTML.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fig. 7.6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: User story flow diagram
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Step 5: Translate the user stories into object-class diagrams as shown in Fig. [7.7](#Fig7)
    which shows the entities, data structures, and operations.![../images/480347_1_En_7_Chapter/480347_1_En_7_Fig7_HTML.png](../images/480347_1_En_7_Chapter/480347_1_En_7_Fig7_HTML.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fig. 7.7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Object-class diagrams derived from user stories
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Step 6: Develop State Transition Diagram showing possible states and what flows
    can cause a change in state. The example in Fig. [7.8](#Fig8) reflects UML style
    state chart.![../images/480347_1_En_7_Chapter/480347_1_En_7_Fig8_HTML.png](../images/480347_1_En_7_Chapter/480347_1_En_7_Fig8_HTML.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fig. 7.8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: State diagram derived from object-class flow
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Step 7: Create process specifications of functions from User Stories as shown
    in Table [7.2](#Tab2).Table 7.2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Process specifications of functions from user stories
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| Function | Modifiers, parameters | Action—Notes |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| constructor | string nameFirmstring nameAdmin[(string nameSh, address addrSh,
    unit 16 noShares)] | Create the Voting Management contract, inputting the name
    of the firm, the Administrator’s name and, for each shareholder: name, address
    and number of shares. Add a new shareholder, giving his name, address and number
    of shares |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| addShareholder | onlyOwnerstring nameShaddress addrShunit16 noShares | Add
    a new shareholder, giving his name, address and number of shares |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Delete Sharehold | onlyOwneraddress addrSh | Delete the given shareholder,
    giving his address. Can be done only it the shareholder has no active participation
    in an assembly |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| editShareholder | onlyOwneraddress addrShstring nameShunit 16 noShares |
    Update the given shareholder, giving his address (that cannot be changed), name
    and number of shares. Can be done only if the shareholder has no active participation
    in an assembly |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Change Administrator | onlyOwneraddress newOwnerstring nameAdmin | Give the
    address and the name of the new administrator |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Convene Assembly | onlyOwner | Convene an assembly, giving start and end
    date and time of the assembly, a short description, the minimum percentage of
    shares needed for its validity, and the maximum number of delegations that can
    be given to a single Shareholder. No existing assembly can overlap with the new
    one |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| addVoting | onlyOwner | Add a call for voting to the given assembly, specifying
    the name of the voting, the two options that should be chosen, the minimum percentage
    of voting shares, and of votes needed to have a valid vote The assembly must not
    have already started |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| participate | onlyShareholder | Register the participation of the sender
    to the given Assembly, provided that the start date and time of the Assembly has
    not yet passed, and that the sender has not already delegated another Shareholder,
    or already registered |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| delegate | onlyShareholder | Delegate the participation to a given Assembly
    to another Shareholder, provided that the start date and time of the Assembly
    has not yet passed, that the sender has not already registered his participation
    of delegated another Shareholder, that the delegated Shareholder has registered
    to the Assembly, and has not yet reached the maximum number of delegations |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| castVote | onlyShareholder | Cast a vote for one of the choices of a given
    voting, provided that the sender is participating to the Assembly of the voting,
    that this Assembly has started and has not yet expired, and that the vote has
    not already cast |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| verifyValidity ***view*** | OnlyOwnerOrShareholder | Read the total number
    of shares that participated to a given Assembly, and check if the minimum number
    has been reached. The Assembly must have expired |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| readResults ***view*** | OnlyOwnerOrShareholder | Read the voting results
    (choice 1, choice 2 or no choice), given an Assembly, and the name of a voting.
    The Assembly must have expired |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| deleteContract | onlyOwner | Permanently delete the contract |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: The Marchesi et al. sample depicts how requirements documents might appear in
    the SDLC for a typical smart contract blockchain. While there can be many variances,
    it is important to recognize how traditional analysis tools can be embedded in
    the block chain engine that will be inserted into the various other processes
    and data interfaces of the larger applications needed in any complex system.
  prefs: []
  type: TYPE_NORMAL
- en: 7.4 Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Blockchain represents an essential architectural component to make IoT a feasible
    and secure engine that can be incorporated into complex systems. Essentially the
    blockchain will serve as the validation and recording of transaction using an
    accounting ledger-based system that guards against hackers. Without this engine
    system IoT cannot achieve widespread use across various industries and specific
    technologies. While we are still in the embryonic stages of blockchain development
    and it is predicted that there will be a plethora of third-party blockchain products
    that will provide the architecture for specific industry-related product processing.
  prefs: []
  type: TYPE_NORMAL
- en: However, it is important to recognize that the latency issue is still very much
    a challenge. The philosophy of the blockchain architecture in terms of its update
    process very much resembles the old IBM token-ring structure. As a recollection
    of that network design, IBMs computer nodes each had to be updated in a circular
    ring that got updated sequentially. The problem then was that the network design
    was too slow to achieve itself as a feasible solution to networked personal computers.
    Figure [7.9](#Fig9) depicts the IBM token ring structure. The blockchain architecture
    replaces the personal computers with blocks. While updating blocks is faster than
    token ring network structure, it still will be challenged in scaling, especially
    in a mobile network system. While 5G will make blockchain more feasible, scalability
    across large mobile networks may still hinder widespread use. The next chapter
    will address some of the potential solutions that can ultimately increase processing
    power to support more scalable blockchain development.![../images/480347_1_En_7_Chapter/480347_1_En_7_Fig9_HTML.png](../images/480347_1_En_7_Chapter/480347_1_En_7_Fig9_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 7.9
  prefs: []
  type: TYPE_NORMAL
- en: IBM Token Ring Architecture
  prefs: []
  type: TYPE_NORMAL
- en: 7.5 Problems and Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain the relationship between Blockchain and Linked Lists.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is meant by a hash code?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compare the positives and negatives of blockchain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the two main objectives of blockchain analysis and design?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does use cases relate to blockchain analysis?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '6.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the relationship between a use case diagram, prose writing, and a minispec?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '7.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the relationship between a minispec and pseudocode?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '8.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can user stories be used to complete the requirements of the blockchain
    modeling tools?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '9.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the relationship between a state transition diagram and blockchain?
    Why is it important?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '10.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is blockchain architecture so important in the design of mobile-based IoT
    systems?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
