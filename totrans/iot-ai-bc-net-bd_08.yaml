- en: © Nishith Pathak and Anurag Bhandari 2018Nishith Pathak and Anurag BhandariIoT,
    AI, and Blockchain for .NET[https://doi.org/10.1007/978-1-4842-3709-0_8](A458845_1_En_8_Chapter.html)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 2018年 Nishith Pathak 和 Anurag BhandariNishith Pathak 和 Anurag Bhandari为 .NET
    提供的物联网（IoT）、人工智能（AI）和区块链（Blockchain）[https://doi.org/10.1007/978-1-4842-3709-0_8](A458845_1_En_8_Chapter.html)
- en: 8. Implementing Blockchain as a Service
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8. 实现区块链即服务
- en: Nishith Pathak^(1 ) and Anurag Bhandari²(1)Kotdwara, Dist. Pauri Garhwal, India(2)Jalandhar,
    Punjab, IndiaIn the last chapter, you learned about the emergence of Blockchain
    and the very core reason for building Blockchain was cryptocurrency, especially
    Bitcoin. Over the years, various industry verticals started using Blockchain technology
    for non-payment systems. As we mentioned in the previous chapter, Blockchain changes
    the way we trust. While writing this book, various industries across verticals
    are transforming their individual business cases with the power of Blockchain.
    Every day new use cases are getting evolved on how Blockchain technology can transform
    a specific vertical. There is absolutely no denial of the fact that Blockchain
    is going to disrupt every vertical in the very massive way that one can imagine
    and would be the source of the next industrial revolution.One of the core roadblocks
    of utilizing technologies like Blockchain is to have the necessary infrastructure
    to support it. Setting up the initial Blockchain requires a huge investment in
    terms of infrastructure. Apart from setting your own closed virtual private network,
    it also involves some of the servers reserved for doing the transaction and others
    reserved for doing mining, making them available always and if required, adding
    more transaction and mining nodes. Setting this environment is not just time-consuming,
    complex, and costly. Most of the non-technology and mid-size technology companies
    might find it difficult to create their own infrastructure.This problem of infrastructure
    is quite similar to infrastructure problems that led to the emergence of the Cloud
    infrastructure. This resulted in the eruption of new technology infrastructure
    commonly known as Infrastructure as a Service (IaaS). Various Blockchain pioneer
    companies also felt the need to provide Blockchain infrastructure in the Cloud
    so they could just focus on development rather than worrying about infrastructure.
    The setup done by these companies was called Blockchain as a Service (BaaS). Companies
    providing BaaS are called BaaS providers and companies and people consuming them
    are called BaaS consumers. As a BaaS consumer, you pay for the BaaS infrastructure
    most preferably on a pay-as-you-use basis. BaaS emergence has paved the way for
    rapid adoption of Blockchain technologies.TipWhile writing this book, each industry
    leader created their own BaaS offering. This creates a thought of relying on just
    one centralized third party. In the future, we expect companies to collaborate
    on BaaS and to have a more decentralized BaaS offeringMicrosoft provides a suite
    of BaaS offerings, ranging from R3 corda, hyperledger fabric, Ethereum, and so
    on, all of which sit on Microsoft Azure. Depending on your business use case,
    you can pick one of the Azure Blockchain predefined templates to get started.
    Like all other Microsoft Azure offerings and services, BaaS offerings for each
    of the Blockchain implementations come with free and paid tiers. At the end of
    this chapter, you’ll understand
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尼希思·帕塔克^(1 )和阿努拉格·班德里²（1）印度帕里·加尔瓦尔县科特瓦拉（2）印度旁遮普邦贾兰达尔在上一章中，您了解了区块链的出现以及构建区块链的核心原因，特别是比特币。多年来，各个行业垂直领域开始使用区块链技术来建立非支付系统。正如我们在前一章中提到的，区块链改变了我们信任的方式。在撰写本书时，各个行业跨垂直领域都在利用区块链的力量改变其个别业务案例。每天都有新的用例涌现出来，说明了区块链技术如何改变特定行业。毫无疑问，区块链将以人们可以想象到的非常巨大的方式颠覆每个行业，并将成为下一次工业革命的源泉。利用诸如区块链之类的技术的核心障碍之一是具备支持其的必要基础设施。设置初始区块链需要在基础设施方面进行巨大的投资。除了设置自己的封闭虚拟私有网络外，还涉及一些服务器用于执行交易，另一些服务器用于进行挖矿，始终可用，并在需要时添加更多的交易和挖矿节点。设置此环境不仅耗时，复杂且昂贵。大多数非技术和中小型技术公司可能会发现很难创建自己的基础设施。这种基础设施问题与导致云基础设施出现的基础设施问题非常相似。这导致了新技术基础设施的爆发，通常称为基础设施即服务（IaaS）。各种区块链先驱公司也感到有必要在云中提供区块链基础设施，以便他们可以专注于开发而不必担心基础设施。这些公司设置的环境被称为区块链即服务（BaaS）。提供BaaS的公司称为BaaS提供商，使用它们的公司和人员称为BaaS消费者。作为BaaS消费者，您最好按照按使用量付费的方式支付BaaS基础设施费用。
    BaaS的出现为区块链技术的快速采用铺平了道路。提示在撰写本书时，每个行业领导者都创建了自己的BaaS产品。这引发了对仅依赖一个中心化第三方的思考。在未来，我们期望公司将就BaaS展开合作，并拥有更加分散的BaaS产品。微软提供一系列BaaS产品，包括R3
    corda、hyperledger fabric、以太坊等，所有这些产品都位于微软Azure上。根据您的业务用例，您可以选择Azure区块链预定义模板之一来开始使用。与所有其他微软Azure产品和服务一样，每个区块链实施的BaaS产品都有免费和付费层。在本章的结尾，您将理解
- en: The Enterprise Ethereum Alliance
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业以太坊联盟
- en: The Ethereum jargon
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊行话
- en: Understand how to set up a Blockchain leader Consortium in Azure
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学会如何在 Azure 中建立区块链领袖联盟
- en: How to transfer Ether within Blockchain
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在区块链内转移以太币
- en: How to build, test, and deploy smart contracts
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何构建、测试和部署智能合约
- en: Enterprise Ethereum Alliance
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 企业以太坊联盟
- en: Started in 2015, Ethereum has slowly been adopted across the globe. In 2017,
    industry leaders and academia titans understood the need for collaboration to
    support Ethereum and so formed the Enterprise Ethereum Alliance (EEA). EEA is
    a non-profit cooperation supporting fortune 500 companies and academia across
    the globe, as shown in Figure [8-1](#Fig1).![A458845_1_En_8_Fig1_HTML.jpg](A458845_1_En_8_Fig1_HTML.jpg)Figure
    8-1The home page of Enterprise Ethereum Alliance  . If you haven’t visited EEA,
    we suggest you visit the page and view the list of member companies supporting
    the Ethereum.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊于2015年启动，逐渐在全球范围内被采用。2017年，行业领袖和学术巨头意识到支持以太坊的合作的必要性，因此成立了企业以太坊联盟（EEA）。EEA
    是一个非营利合作组织，支持全球财富500强公司和学术界，如图 [8-1](#Fig1) 所示。![A458845_1_En_8_Fig1_HTML.jpg](A458845_1_En_8_Fig1_HTML.jpg)图
    8-1 企业以太坊联盟的主页。如果您还没有访问过 EEA，我们建议您访问该页面并查看支持以太坊的成员公司列表。
- en: Understanding Ethereum Jargon
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解以太坊行话
- en: Before we look at the Ethereum terms, it is important to know why Ethereum has
    been so popular and has created deep roots at the enterprise level. There are
    multiple reasons for it, but primarily it’s because Ethereum is open source and
    is more suited for creating a private Blockchain. Compared to Bitcoin, Ethereum
    can execute transactions faster. While writing this book, Ethereum community support
    has rapidly increased so developers get a lot of community support and help, which
    contributes to faster development. Let’s quickly look at the Ethereum terms that
    are widely used in the Ethereum community.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们了解以太坊术语之前，重要的是要知道为什么以太坊如此受欢迎并在企业层面深入扎根。其中有多个原因，但主要是因为以太坊是开源的，并且更适合创建私有区块链。与比特币相比，以太坊可以更快地执行交易。在撰写本书时，以太坊社区的支持迅速增加，因此开发人员得到了大量的社区支持和帮助，这有助于加快开发。让我们快速了解一下以太坊社区中广泛使用的术语。
- en: Ethereum Virtual Machine (EVM)
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 以太坊虚拟机（EVM）
- en: The Ethereum network is made up of various computers or large decentralized
    computers that are together called the Ethereum Virtual Machine (EVM).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊网络由各种计算机或大型分散计算机组成，统称为以太坊虚拟机（EVM）。
- en: Ethereum Nodes
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 以太坊节点
- en: All the nodes that implement the Ethereum protocol are called Ethereum nodes.
    These nodes have the complete installation of Blockchain. The nodes not just connect
    with other nodes but also give you access to the Blockchain. Some of the nodes
    can then be used for an additional tasks, such as mining, etc. As and when the
    new transaction gets added, it is replicated to these nodes instantly.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所有实施以太坊协议的节点都被称为以太坊节点。这些节点具有完整的区块链安装。节点不仅连接到其他节点，还可以访问区块链。一些节点还可以用于额外的任务，例如挖矿等。随着新交易的添加，它立即被复制到这些节点。
- en: Consortium
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 联合体
- en: Consortium refers to a group in Ethereum. This group includes all the consortium
    members of Blockchain that use the same infrastructure. When you are working within
    or across an organization utilizing Blockchain to set up their own private Blockchain,
    you are setting up a consortium that has a leader called a consortium leader.
    Other nodes being part of the consortium are called consortium nodes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 联合体指的是以太坊中的一个组。该组包括使用相同基础设施的区块链的所有联合体成员。当您在组织内或跨组织使用区块链来建立自己的私有区块链时，您正在建立一个具有称为联合体负责人的领导者的联合体。联合体的其他节点称为联合体节点。
- en: Consortium Leader
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 联合体负责人
- en: 'Like any group leader, the first and foremost thing to do when setting up an
    Ethereum consortium is to identify the consortium leader, as shown in Figure [8-2](#Fig2).
    The consortium leader is responsible for the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何团队领导一样，在建立以太坊联合体时，首要任务是确定联合体负责人，如[图8-2](#Fig2)所示。联合体负责人负责以下工作：
- en: Setting up and configuring a private Blockchain
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设立和配置私有区块链
- en: Deciding on the criteria for joining the privately owned network
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制定加入私有网络的标准
- en: Setting up criteria for allocation of Ether, etc.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制定以太分配标准等
- en: '![A458845_1_En_8_Fig2_HTML.png](A458845_1_En_8_Fig2_HTML.png)Figure 8-2The
    hierarchical structure of the consortium leader with the members in EthereumThe
    consortium leader heads the privately owned Blockchain and all other consortium
    members follow the rules and criteria set by the consortium leader. Once the consortium
    leader is set up, other members can join with their own infrastructure or use
    the existing one. Asclepius (our fictitious hospital) is using Blockchain to track
    a distributed ledger for a lot of work. It also collaborates with other hospitals
    and branches. The main branch of Asclepius is working as the consortium leader.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![A458845_1_En_8_Fig2_HTML.png](A458845_1_En_8_Fig2_HTML.png)图8-2 以太坊中负责人的层次结构及其成员。联合体负责人领导着私有区块链，所有其他联合体成员都遵循联合体负责人设定的规则和标准。一旦联合体负责人成立，其他成员可以使用自己的基础设施加入，或者使用现有的基础设施。Asclepius（我们虚构的医院）正在使用区块链来跟踪分布式分类账的许多工作。它还与其他医院和分支机构合作。Asclepius的主要分支机构正在担任联合体负责人的角色。'
- en: Ether
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 以太
- en: Ether is the currency used for transactions in Ethereum. There are many other
    cryptocurrencies along with Ether that can be used in Ethereum, as shown in Figure
    [8-3](#Fig3).![A458845_1_En_8_Fig3_HTML.jpg](A458845_1_En_8_Fig3_HTML.jpg)Figure
    8-3The Ether  conversion to other Ethereum used cryptocurrencies. Image source
    [https://forum.ethereum.org/discussion/1518/ether-unit-converter-wei-finney-szabo-btc](https://forum.ethereum.org/discussion/1518/ether-unit-converter-wei-finney-szabo-btc)Ether  can
    be used as a payment mechanism or even to authenticate the user.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以太币是以太坊交易中使用的货币。除了以太币之外，还有许多其他加密货币可以在以太坊中使用，如图 [8-3](#Fig3) 所示。![A458845_1_En_8_Fig3_HTML.jpg](A458845_1_En_8_Fig3_HTML.jpg)图
    8-3 以太币转换为其他以太坊使用的加密货币。图片来源 [https://forum.ethereum.org/discussion/1518/ether-unit-converter-wei-finney-szabo-btc](https://forum.ethereum.org/discussion/1518/ether-unit-converter-wei-finney-szabo-btc)以太币可以用作支付机制，甚至用于验证用户身份。
- en: Gas
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Gas
- en: Every EVM node requires a good amount of processing power to execute code. While
    working on Blockchain, it is important to understand the computational effort
    required to execute specific code, which is denoted as Gas in the Blockchain world.
    Once an EVM node has enough gas to run the code, it is later awarded goodies like
    additional Ether for the proof of work. Let’s now look at how to set up Ethereum
    using Azure.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 每个以太坊虚拟机节点都需要大量的处理能力来执行代码。在区块链上工作时，了解执行特定代码所需的计算工作量至关重要，这在区块链世界中被称为 Gas。一旦以太坊虚拟机节点具有足够的
    gas 来运行代码，它随后会获得额外的以太币等奖励以证明工作的有效性。现在让我们看看如何使用 Azure 设置以太坊。
- en: Setting Up Ethereum
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置以太坊
- en: There are many ways to set up the Ethereum network. One way is to set up the
    entire infrastructure of your own. An easier way is to use a BaaS offering from
    Azure to quickly set up Ethereum in a matter of minutes. Azure comes with various
    templates for creating a Blockchain offering. All of them have default templates
    with the option to customize each one of them. Default Azure templates do most
    of the abstraction and should be your preferred choice of template. Default templates
    ensure the transaction and mining nodes are part of the VPN and are isolated from
    each other, apart from creating a genesis block. A genesis block is like a blank
    distributed ledger or a distributed ledger with no data. Once the genesis block
    is created, the transaction can be written on top of the block. It is also an
    important prerequisite and for the safety aspects, that mining node should not
    accessible outside the private network. Fortunately, with the default Azure template,
    it is done automatically for you. Let’s quickly use one of the Blockchain Azure
    templates to create a consortium leader. The same steps can be used to create
    other Blockchain Azure offerings.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 设置以太坊网络的方法有很多种。一种方法是自己设置整个基础设施。一种更简单的方法是使用 Azure 提供的 BaaS（区块链即服务）来在几分钟内快速设置以太坊。Azure
    提供了各种模板来创建区块链服务。所有这些模板都有默认模板，并提供自定义每一个的选项。默认的 Azure 模板会进行大部分的抽象化，并且应该是你首选的模板。默认模板确保交易节点和挖矿节点是
    VPN 的一部分，并且彼此隔离，除了创建创世区块之外。创世区块就像是一个空的分布式账本或者一个没有数据的分布式账本。一旦创建了创世区块，就可以在其上编写交易。对于安全方面来说，挖矿节点不应该在私有网络之外可访问。幸运的是，使用默认的
    Azure 模板，这一切都会自动完成。让我们快速使用一个区块链 Azure 模板来创建一个联盟领导者。同样的步骤也可以用来创建其他区块链 Azure 服务。
- en: Creating a Blockchain Consortium Leader from the Azure Portal
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从 Azure 门户创建区块链联盟领导者
- en: Open and navigate to [https://portal.azure.com/](https://portal.azure.com/)
    . Once you’re logged in, click on Create a Resource and then enter Ethereum in
    the search box to get all the Ethereum related templates, as shown in Figure [8-4](#Fig4).![A458845_1_En_8_Fig4_HTML.jpg](A458845_1_En_8_Fig4_HTML.jpg)Figure
    8-4The Ethereum related templates in Azure Portal. Microsoft is developing new
    templates. As you read the book, there will much more Ethereum related templates
    than shown here.Select Ethereum Consortium Leader. Use the same deployment model
    and Click on Create to start the Ethereum Consortium leader wizard interface,
    as shown in Figure [8-5](#Fig5).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 打开并导航到 [https://portal.azure.com/](https://portal.azure.com/)。登录后，点击创建资源，然后在搜索框中输入
    Ethereum 以获取所有与以太坊相关的模板，如图 [8-4](#Fig4) 所示。![A458845_1_En_8_Fig4_HTML.jpg](A458845_1_En_8_Fig4_HTML.jpg)图
    8-4 Azure 门户中与以太坊相关的模板。Microsoft 正在开发新的模板。随着你阅读本书，会有更多与以太坊相关的模板。选择以太坊联盟领导者。使用相同的部署模型，点击创建以启动以太坊联盟领导者向导界面，如图
    [8-5](#Fig5) 所示。
- en: 1.Specify the resource prefix to differentiate it from another template. For
    our convenience, we will use eth. You can use a prefix of your own choice.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1.指定资源前缀以与另一个模板区分。为了方便起见，我们将使用 eth。您可以使用您自己选择的前缀。
- en: 2.In order to log in to the various nodes, a username is required. For convenience,
    we stick with the default username, gethadmin. For the password, you have an option
    to either use a SSH public key or a password. For the demo, we are using a password
    for now but you can opt for the SSH public key. The password should have at least
    one uppercase, one lowercase, one number, and one special character.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2.为了登录到各个节点，需要一个用户名。为方便起见，我们使用默认用户名 gethadmin。对于密码，您可以选择使用 SSH 公钥或密码。对于演示，我们暂时使用密码，但您可以选择
    SSH 公钥。密码应至少包含一个大写字母、一个小写字母、一个数字和一个特殊字符。
- en: 3.Choose the subscription as assigned. If you haven’t purchased a paid subscription,
    you get the Free Trial option. If you are going to use it in production, it’s
    better to use a paid subscription instead of a free trial.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3.选择分配的订阅。如果您还没有购买付费订阅，则可以选择免费试用选项。如果您打算在生产中使用它，最好使用付费订阅而不是免费试用。
- en: 4.Create a new resource group to have future permissions and policy consistent.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4.创建一个新的资源组，以确保未来权限和策略一致。
- en: 5.Use the location to your preference. Normally, people prefer the location
    that’s nearer to the actual implementation. After filling in the form, you end
    up seeing the screen shown in Figure [8-5](#Fig5).
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 5.将位置设置为您喜欢的位置。通常，人们更喜欢接近实际实施的位置。填写表单后，您将看到图 [8-5](#Fig5) 所示的屏幕。
- en: '![A458845_1_En_8_Fig5_HTML.jpg](A458845_1_En_8_Fig5_HTML.jpg)Figure 8-5The
    first screen of the Ethereum consortium leader wizard interfaceClick OK to navigate
    and specify the network size and performance for the transaction and mining nodes,
    as shown in Figure [8-6](#Fig6).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![A458845_1_En_8_Fig5_HTML.jpg](A458845_1_En_8_Fig5_HTML.jpg)图 8-5以太坊联盟领导者向导界面的第一个屏幕。点击“确定”以导航并指定交易和挖矿节点的网络大小和性能，如图
    [8-6](#Fig6) 所示。'
- en: 1.Each consortium member is identified with a separate ID. As we are creating
    the consortium leader, let’s keep it set to 0 for now. Additional nodes can be
    added later as well.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1.每个联盟成员都有一个单独的 ID。由于我们正在创建联盟领导者，所以暂时将其设置为 0。稍后还可以添加其他节点。
- en: 2.Specify the mining nodes per member. This value should be set depending on
    your availability requirements. A maximum of 15 can be set. For now, we are using
    the default value of 2\. It can be changed later.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2.指定每个成员的挖矿节点。此值应根据您的可用性要求设置。最多可设置 15 个。目前，我们使用默认值 2。稍后可以更改。
- en: 3.Choose the mining node storage from standard or premium. Azure provides various
    node storage options to create mining node storage. Standard uses a normal magnetic
    drive while Premium uses solid state drives. If you require higher IO, use Premium.
    By default, a virtual machine size of 2x Standard D1 v2 is set. If you need it
    higher, you can change it by clicking the > sign next to the mining virtual machine
    size.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3.选择标准或高级的挖矿节点存储。Azure 提供各种节点存储选项来创建挖矿节点存储。标准使用普通磁盘驱动器，而高级使用固态驱动器。如果需要更高的 IO，使用高级选项。默认情况下，设置了
    2x 标准 D1 v2 的虚拟机大小。如果需要更高的大小，可以点击挖矿虚拟机大小旁边的 > 符号进行更改。
- en: 4.While setting the storage node, you can set the redundancy locally or globally.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4.在设置存储节点时，您可以在本地或全局设置冗余。
- en: 5.Apply the default settings for the transaction node.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 5.应用交易节点的默认设置。
- en: '![A458845_1_En_8_Fig6_HTML.jpg](A458845_1_En_8_Fig6_HTML.jpg)Figure 8-6The
    network size and performance setting in the Ethereum consortium leader wizardClick
    OK and navigate to the Ethereum account setting, as shown in Figure [8-7](#Fig7).'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![A458845_1_En_8_Fig6_HTML.jpg](A458845_1_En_8_Fig6_HTML.jpg)图 8-6以太坊联盟领导向导中的网络大小和性能设置单击“确定”并导航至以太坊账户设置，如图
    [8-7](#Fig7) 所示。'
- en: 1.The Network ID is the unique ID through which the Ethereum account is identified.
    This ID eventually is used for pairing nodes. All nodes having the same ID can
    be paired with each other. You can go with the default Ethereum network ID or
    specify a custom one.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1.网络 ID 是标识以太坊账户的唯一 ID。此 ID 最终用于配对节点。所有具有相同 ID 的节点都可以彼此配对。您可以使用默认的以太坊网络 ID，也可以指定自定义的网络
    ID。
- en: 2.Specify whether you want the portal to automatically create a new genesis
    block or whether you want to customize it. For now, let Azure create a genesis
    block for you.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2.指定是否要让门户自动创建新的创世区块，还是要自定义它。目前，让 Azure 为您创建一个创世区块。
- en: 3.Specify the password for the default account created.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3.指定为默认账户创建的密码。
- en: 4.Specify the passphrase, as shown in Figure [8-7](#Fig7).
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4.指定密码短语，如图 [8-7](#Fig7) 所示。
- en: '![A458845_1_En_8_Fig7_HTML.jpg](A458845_1_En_8_Fig7_HTML.jpg)Figure 8-7Configuring
    the Ethereum related settingsClick OK and review the summary to double validate
    your options. If everything looks good, click OK, as shown in Figure [8-8](#Fig8).![A458845_1_En_8_Fig8_HTML.jpg](A458845_1_En_8_Fig8_HTML.jpg)Figure
    8-8The summary of all the settings you have done to configure the Ethereum consortium
    networkRead the permissions, check the terms of use, and click Create, as shown
    in Figure [8-9](#Fig9).![A458845_1_En_8_Fig9_HTML.jpg](A458845_1_En_8_Fig9_HTML.jpg)Figure
    8-9The terms of use for the Ethereum Blockchain consortium leaderIt will take
    some time to create the Azure Blockchain. Notification in Azure, as shown in Figure
    [8-10](#Fig10), will keep informing you about the progress.![A458845_1_En_8_Fig10_HTML.jpg](A458845_1_En_8_Fig10_HTML.jpg)Figure
    8-10The notification for initializing the deployment of the Asclepius groupAfter
    initializing, procuring, and deploying the Ethereum Blockchain account, you will
    see it as shown in Figure [8-11](#Fig11).![A458845_1_En_8_Fig11_HTML.jpg](A458845_1_En_8_Fig11_HTML.jpg)Figure
    8-11The list of a few resources created under the Asclepius resource groupNoteMicrosoft
    has been working extensively to make the lot more Azure Blockchain templates and
    make the existing ones easier. Don’t be surprised if the name of the template
    or the process get smoother when you grab the copy. In the next few months, we
    envisage having tens of predefined Azure Blockchain templates for your business
    case to promote Blockchain as a Service extensively.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![A458845_1_En_8_Fig7_HTML.jpg](A458845_1_En_8_Fig7_HTML.jpg)图 8-7配置与以太坊相关的设置点击“确定”并审查摘要以双重验证您的选项。如果一切看起来都很好，请点击“确定”，如[图
    8-8](#Fig8)所示。![A458845_1_En_8_Fig8_HTML.jpg](A458845_1_En_8_Fig8_HTML.jpg)图 8-8配置以太坊联盟网络所做的所有设置摘要阅读权限，检查使用条款，并点击“创建”，如[图
    8-9](#Fig9)所示。![A458845_1_En_8_Fig9_HTML.jpg](A458845_1_En_8_Fig9_HTML.jpg)图 8-9以太坊区块链联盟领导者使用条款创建
    Azure 区块链需要一些时间。Azure 的通知会不断告知您有关进展情况，如[图 8-10](#Fig10)所示。![A458845_1_En_8_Fig10_HTML.jpg](A458845_1_En_8_Fig10_HTML.jpg)图
    8-10初始化 Asclepius 组部署的通知完成初始化、采购和部署以太坊区块链账户后，您将会看到它，如[图 8-11](#Fig11)所示。![A458845_1_En_8_Fig11_HTML.jpg](A458845_1_En_8_Fig11_HTML.jpg)图
    8-11在 Asclepius 资源组下创建的一些资源列表微软一直在大力努力制作更多的 Azure 区块链模板，并使现有模板更加易用。当您获取副本时，如果模板的名称或流程更加顺畅，不要感到惊讶。在接下来的几个月里，我们预计将有数十个预定义的
    Azure 区块链模板，以促进区块链作为服务的广泛应用。  '
- en: Exploring the Newly Created Ethereum Account
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 探索新创建的以太坊账户
- en: Open your Azure Portal and then the resource group, as mentioned in the left
    rail. Select the Asclepius resource group link previously created while setting
    up the Ethereum account. Click on the Asclepius link. Your resource name might
    be different based on how you set it up, as shown in Figure [8-12](#Fig12). You
    are navigated to the Asclepius resource group that shows you all the nodes and
    VMs previously created while setting up the Asclepius account.![A458845_1_En_8_Fig12_HTML.jpg](A458845_1_En_8_Fig12_HTML.jpg)Figure
    8-12The list of all the resources createdAs shown in Figure [8-12](#Fig12), behind
    the scenes, a lot of activities were happening that included the creation of a
    load balancer, VMs, and security groups, to name a few. Imagine how much time
    it would take to create these at your infrastructure. This is a classic example
    of the power of using a Cloud infrastructure like Azure. Thanks to the Azure Ethereum
    Leader template, abstracting it and developing the necessary infrastructure takes
    just a few clicks. Click on Deployments on the left rail to see all the deployments,
    as shown in Figure [8-13](#Fig13).![A458845_1_En_8_Fig13_HTML.jpg](A458845_1_En_8_Fig13_HTML.jpg)Figure
    8-13The Deployments list. The first one starting with Microsoft Azure is the deployment
    of the private Ethereum network.Click on the first link, Microsoft-azure-Blockchain,
    to get overview details and then click on the output link to view all the information,
    as shown in Figure [8-14](#Fig14). It contains all information and endpoints details,
    such as the URL of the Admin site, the Ethereum RPC endpoint to connect, and the
    Gateway ID, to name a few.![A458845_1_En_8_Fig14_HTML.jpg](A458845_1_En_8_Fig14_HTML.jpg)Figure
    8-14All the Ethereum related links. The first two links—the Admin site and Ethereum-RPC-Endpoint—will
    be used extensively.It’s time to quickly open the Ethereum Admin site.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的 Azure 门户，然后在左侧导航栏中选择所提到的资源组。选择在设置以太坊账户时先前创建的 Asclepius 资源组链接。点击 Asclepius
    链接。根据你的设置方式，你的资源名称可能不同，如图 [8-12](#Fig12) 所示。你将被导航至 Asclepius 资源组，其中显示了在设置 Asclepius
    账户时先前创建的所有节点和虚拟机。![A458845_1_En_8_Fig12_HTML.jpg](A458845_1_En_8_Fig12_HTML.jpg)图
    8-12 所有创建的资源列表如图 [8-12](#Fig12) 所示，在幕后发生了许多活动，包括负载均衡器、虚拟机和安全组的创建，仅举几例。想象一下，在你的基础架构中创建这些需要多少时间。这是使用
    Azure 这样的云基础设施的力量的一个典型例子。多亏了 Azure 以太坊 Leader 模板，抽象化并开发必要的基础设施只需点击几下。点击左侧导航栏上的部署以查看所有部署，如图
    [8-13](#Fig13) 所示。![A458845_1_En_8_Fig13_HTML.jpg](A458845_1_En_8_Fig13_HTML.jpg)图
    8-13 部署列表。第一个从 Microsoft Azure 开始的是私有以太坊网络的部署。点击第一个链接 Microsoft-azure-Blockchain，以获取概述详情，然后点击输出链接以查看所有信息，如图
    [8-14](#Fig14) 所示。其中包含所有信息和端点详情，例如管理员站点的 URL、用于连接的以太坊 RPC 端点和网关 ID，仅举几例。![A458845_1_En_8_Fig14_HTML.jpg](A458845_1_En_8_Fig14_HTML.jpg)图
    8-14 所有与以太坊相关的链接。前两个链接——管理员站点和以太坊-RPC-端点——将被广泛使用。现在是快速打开以太坊管理员站点的时候了。
- en: Ethereum Default Admin Site
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以太坊默认管理员网站
- en: Open the Admin site by copying the address of Admin site previously created
    in Figure [8-14](#Fig14). You will see a lot of information about the Blockchain
    Ethereum account, as shown in Figure [8-15](#Fig15), that we just created.![A458845_1_En_8_Fig15_HTML.jpg](A458845_1_En_8_Fig15_HTML.jpg)Figure
    8-15The home page of the default Ethereum Admin siteYou will see the address of
    the default genesis account that Azure created. You will also see a good amount
    of private Ether being allocated to this account for testing purposes.TipIt is
    important to understand that these private Ethers can’t be transacted, transferred,
    or even used in public or any other Blockchain account.We now see how to transfer
    this Ether to other accounts. This requires having two nodes sharing the same
    network ID. This is one of the ways to test whether your Ethereum consortium leader
    network is working properly. The best and fastest way is to test via a browser
    plugin called MetaMask.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 复制之前在图 [8-14](#Fig14) 中创建的管理员站点的地址，打开管理员站点。您将看到关于区块链以太坊账户的大量信息，如图 [8-15](#Fig15)
    所示，我们刚刚创建的。![A458845_1_En_8_Fig15_HTML.jpg](A458845_1_En_8_Fig15_HTML.jpg)图 8-15
    默认以太坊管理员站点的首页您将看到 Azure 创建的默认创世账户的地址。您还将看到大量私有以太币被分配到该账户以供测试。提示重要的是要理解这些私有以太币不能被交易、转移，甚至不能在公共或其他任何区块链账户中使用。现在我们看到如何将这些以太币转移到其他账户。这需要两个节点共享相同的网络
    ID。这是测试您的以太坊联盟领导者网络是否正常工作的方法之一。最好和最快的方法是通过一个名为 MetaMask 的浏览器插件进行测试。
- en: Installation MetaMask
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装 MetaMask
- en: Navigate to [https://github.com/metamask](https://github.com/metamask) , as
    shown in Figure [8-16](#Fig16)  .![A458845_1_En_8_Fig16_HTML.jpg](A458845_1_En_8_Fig16_HTML.jpg)Figure
    8-16The MetaMask home page in GitHubClick on metamask-extension and then on Releases.
    Download the chrome extension version. Extract the ZIP file to some folder. Open
    Chrome, navigate to Extensions, and click on Developer Mode, as shown in Figure
    [8-17](#Fig17).![A458845_1_En_8_Fig17_HTML.jpg](A458845_1_En_8_Fig17_HTML.jpg)Figure
    8-17The Chrome extension page for enabling developer modeClick on Load Unpacked
    extension after checking Developer mode. Navigate to the folder where the metamask.zip
    file was extracted. Click OK. Once you’re done, you will see the fox icon on your
    chrome extension, as shown in Figure [8-18](#Fig18).![A458845_1_En_8_Fig18_HTML.jpg](A458845_1_En_8_Fig18_HTML.jpg)Figure
    8-18The MetaMask extension installed a Chrome extensionDisabled the developer
    mode. Click on the fox icon again and accept the terms. Create a new password
    that you can remember. It will then give the user a set of 12 words that can be
    used to restore all your accounts. You will now be logged in to Ropsten Test.net
    and have less Ether, as shown in Figure [8-19](#Fig19)  .![A458845_1_En_8_Fig19_HTML.jpg](A458845_1_En_8_Fig19_HTML.jpg)Figure
    8-19The default home page of MetaMask plugin when opened for the first timeIn
    order to transfer the Ether from the newly created Blockchain, copy the Ethereum
    RPC endpoint link that was previously created (see Figure [8-14](#Fig14)). Click
    Settings on the top right of MetaMask plugin. Paste the Ethereum endpoint link
    that you copied and click on Save. Once you’re done, your UI of MetaMask will
    show that you are now connected to a private network (instead of Ropsten Test
    Net), as shown in Figure [8-20](#Fig20).![A458845_1_En_8_Fig20_HTML.jpg](A458845_1_En_8_Fig20_HTML.jpg)Figure
    8-20The MetaMask plugin connected with private Blockchain network rather than
    the default networkCopy the address of newly created account and navigate back
    to the Admin Ethereum site. Scroll down and paste the address as shown here. Then
    specify the number of Ethers to transfer and click on Submit, as shown in Figure
    [8-21](#Fig21).![A458845_1_En_8_Fig21_HTML.jpg](A458845_1_En_8_Fig21_HTML.jpg)Figure
    8-21The Ethereum Admin site for transferring Ethereum to the MetaMask accountYou
    will get the message "Ether sent". Navigate back to the MetaMask plugin to see
    if it has received the Ether or not. As expected, we got the Ether in the MetaMask
    plugin, as shown in Figure [8-22](#Fig22).![A458845_1_En_8_Fig22_HTML.jpg](A458845_1_En_8_Fig22_HTML.jpg)Figure
    8-22The Ether received in the MetaMask plugin from the Ethereum Admin siteCongratulations!
    Your Blockchain network is working and you are good to add more consortium members,
    transfer Ethers, and use it for further development. Normally, Ethers are only
    rewarded to consortium members when they execute a specific computational task.
    Most of these tasks go hand in hand with the execution of smart contracts. Let’s
    now look at how to create Smart Contracts.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 打开[https://github.com/metamask](https://github.com/metamask)，如图[8-16](#Fig16)所示。![A458845_1_En_8_Fig16_HTML.jpg](A458845_1_En_8_Fig16_HTML.jpg)图
    8-16 MetaMask 的 GitHub 主页单击 metamask-extension 然后单击 Releases。下载 Chrome 扩展版本。解压缩
    ZIP 文件到某个文件夹。打开 Chrome，导航到扩展，然后单击 Developer Mode，如图[8-17](#Fig17)所示。![A458845_1_En_8_Fig17_HTML.jpg](A458845_1_En_8_Fig17_HTML.jpg)图
    8-17 启用开发者模式的 Chrome 扩展页面单击 Load Unpacked extension，然后勾选 Developer mode。导航到解压缩
    metamask.zip 文件的文件夹。单击确定。完成后，您将在 Chrome 扩展中看到狐狸图标，如图[8-18](#Fig18)所示。![A458845_1_En_8_Fig18_HTML.jpg](A458845_1_En_8_Fig18_HTML.jpg)图
    8-18 安装的 MetaMask 扩展 Chrome 扩展禁用开发者模式。再次单击狐狸图标并接受条款。创建一个您能记住的新密码。然后，它将给用户一组可以用来恢复所有帐户的
    12 个单词。您现在将登录到 Ropsten Test.net 并拥有更少的 Ether，如图[8-19](#Fig19)所示。![A458845_1_En_8_Fig19_HTML.jpg](A458845_1_En_8_Fig19_HTML.jpg)图
    8-19 首次打开 MetaMask 插件的默认主页为了从新创建的区块链中转移 Ether，请复制先前创建的以太坊 RPC 端点链接（参见图[8-14](#Fig14)）。单击
    MetaMask 插件右上角的 Settings。粘贴您复制的以太坊端点链接，然后单击保存。完成后，MetaMask 的 UI 将显示您现在已连接到私有网络（而不是
    Ropsten Test Net），如图[8-20](#Fig20)所示。![A458845_1_En_8_Fig20_HTML.jpg](A458845_1_En_8_Fig20_HTML.jpg)图
    8-20 MetaMask 插件连接到私有区块链网络而不是默认网络复制新创建帐户的地址并导航回 Admin 以太坊网站。向下滚动并粘贴地址如下所示。然后指定要转移的以太数量，然后单击提交，如图[8-21](#Fig21)所示。![A458845_1_En_8_Fig21_HTML.jpg](A458845_1_En_8_Fig21_HTML.jpg)图
    8-21 用于将以太转移到 MetaMask 帐户的以太坊管理员站点您将收到消息“以太已发送”。导航回 MetaMask 插件以查看是否已收到 Ether。如预期，我们在
    MetaMask 插件中收到了 Ether，如图[8-22](#Fig22)所示。![A458845_1_En_8_Fig22_HTML.jpg](A458845_1_En_8_Fig22_HTML.jpg)图
    8-22 从以太坊管理员站点收到的 Ether 祝贺！您的区块链网络正在运行，并且您可以添加更多的联合体成员，转移 Ethers，并将其用于进一步开发。通常，只有当联合体成员执行特定的计算任务时才会奖励
    Ethers。其中大多数任务与智能合约的执行相辅相成。现在让我们看看如何创建智能合约。
- en: Smart Contracts in Asclepius
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阿斯克勒庇俄斯中的智能合约
- en: 'In the previous chapter, we discussed the importance of Smart Contracts. In
    Asclepius, the Smart Contract is widely used in various scenarios to avoid paperwork
    for tasks such as maintaining health records, prescriptions, insurance claims,
    etc. Two of the other uses of the Smart Contract are briefly discussed:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们讨论了智能合约的重要性。在阿斯克勒庇俄斯中，智能合约被广泛应用于各种场景，以避免繁琐的文书工作，例如维护健康记录、处方、保险理赔等任务。智能合约的另外两个用途简要讨论如下：
- en: The Smart Contract is used in Asclepius during the claims adjustment process.
    Previously, when the Smart Contracts were not introduced, patients had a lot of
    paperwork, including negotiation with health payers or insurance providers, and
    most of the time, patients ended up in paying claims. This process has been greatly
    reduced through the introduction of Smart Contracts and using the power of Blockchain.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在阿斯克勒庇俄斯中，智能合约在理赔调整流程中使用。在智能合约未引入之前，患者需要处理大量文书工作，包括与健康支付方或保险提供者的协商，而大多数时候患者最终都要支付理赔。通过引入智能合约并利用区块链的力量，这一流程大大减少了。
- en: Patient information and medical records, including medical prescriptions and
    doctor details, are stored in Blockchain and only authorized users as per patient
    and healthcare provider Smart Contracts are eligible to access this data. This
    helps not only to maintain immutable medical historic records of the patients,
    but ensures data integrity. Every treatment of the patients is added to this smart
    contract. This also enables instant verification of medical records without the
    need of a third party.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 患者信息和医疗记录，包括医疗处方和医生详细信息，都存储在区块链中，只有根据患者和医疗服务提供者的智能合约授权的用户才有资格访问这些数据。这不仅有助于维护患者的不可变医疗历史记录，还确保数据的完整性。患者的每次治疗都会添加到这个智能合约中。这也使得可以立即验证医疗记录，无需第三方介入。
- en: These are just two of the many use cases in which Asclepius uses Smart Contracts.
    With Blockchain and Smart Contracts, Asclepius can become a trusted partner, by
    ensuring that they are storing all patients’ records digitally and securely, and
    making relevant data easily accessible with proper authorization.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是阿斯克勒庇俄斯使用智能合约的众多用例之一。借助区块链和智能合约，阿斯克勒庇俄斯可以成为可信赖的合作伙伴，通过确保他们数字化和安全地存储所有患者记录，并在获得适当授权的情况下轻松访问相关数据。
- en: Developing Smart Contracts
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发智能合约
- en: You can write Smart Contracts easily using Notepad and a Smart Contracts compiler.
    It would be very tedious to build, test, and deploy Smart Contracts on your own.
    In order to develop Smart Contracts, the following software is required for ensuring
    a proper development environment.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用记事本和智能合约编译器轻松编写智能合约。自行构建、测试和部署智能合约将非常繁琐。为了开发智能合约，需要以下软件来确保良好的开发环境。
- en: Package Managers
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 包管理器
- en: Install the Node Packet Manager (NPM). Navigate to [https://nodejs.org/en/](https://nodejs.org/en/)
    and download the latest version available.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Node Packet Manager（NPM）。导航至[https://nodejs.org/en/](https://nodejs.org/en/)并下载最新版本。
- en: Truffle
  id: totrans-64
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Truffle
- en: Truffle provides a built-in compiler for Smart Contracts that help in compiling
    and deploying the solution. Once the solution is built, Truffle also provides
    development, testing, and deployment of Smart Contracts very easily. In order
    to install the Truffle toolset, open PowerShell in administrative mode and run
    the command shown here:C:\> npm install -g truffleC:\Users\nishith\AppData\Roaming\npm\truffle
    -> C:\Users\nishith\AppData\Roaming\npm\node_modules\truffle\build\cli.bundled.js+
    truffle@4.1.3updated 1 package in 13.964sNoteTruffle is a great tool for compiling,
    deploying, and testing smart contract solutions. However, there are quite a number
    of other tools available in the market, like Remix ( [http://remix.ethereum.org](http://remix.ethereum.org)
    ), Mist browser, and others that provide GUI based interface. One real advantage
    of using tools like Remix is that you don’t need to install anything on your machine.
    However, we personally prefer Truffle, as while developing enterprise application,
    you do need to worry about enterprise policies that don’t support using web-based
    solutions to compile and deploy.Once Truffle  is installed, you can initialize
    it to get the basic project structure and get started quickly, as shown here:C:\samplecontract>
    truffle initDownloading...Unpacking...Settingup...Unbox successfully. Sweet !Commands
    :Compile:     truffle compileMigrate:     truffle migrateTest contracts:     truffle
    testsIt ends up creating a couple of folders, as shown in Figure [8-23](#Fig23).![A458845_1_En_8_Fig23_HTML.jpg](A458845_1_En_8_Fig23_HTML.jpg)Figure
    8-23Folders created after initializing the Truffle  template on a folderEach of
    the folders contains specific files.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Truffle为智能合约提供了一个内置的编译器，有助于编译和部署解决方案。一旦解决方案构建完成，Truffle还提供了非常简便的智能合约开发、测试和部署功能。为了安装Truffle工具集，请以管理员模式打开PowerShell，并运行此处命令：C:\>
    npm install -g truffleC:\Users\nishith\AppData\Roaming\npm\truffle -> C:\Users\nishith\AppData\Roaming\npm\node_modules\truffle\build\cli.bundled.js+
    truffle@4.1.3updated 1 package in 13.964s注意Truffle是一个很好的工具，用于编译、部署和测试智能合约解决方案。然而，市场上还有许多其他工具可用，如Remix（[http://remix.ethereum.org](http://remix.ethereum.org)）、Mist浏览器等，它们提供基于GUI的界面。使用类似Remix的工具的一个真正优势是您不需要在您的机器上安装任何东西。然而，我们个人更喜欢Truffle，因为在开发企业应用程序时，您确实需要考虑不支持使用基于Web的解决方案来编译和部署的企业政策。一旦安装了Truffle，您可以初始化它以获取基本项目结构并快速开始，如下所示：C:\samplecontract>
    truffle initDownloading...Unpacking...Settingup...Unbox successfully. Sweet !Commands
    :Compile:     truffle compileMigrate:     truffle migrateTest contracts:     truffle
    tests它最终创建了一些文件夹，如图[8-23](#Fig23)所示。![A458845_1_En_8_Fig23_HTML.jpg](A458845_1_En_8_Fig23_HTML.jpg)图8-23初始化Truffle模板后在文件夹上创建的文件夹每个文件夹都包含特定的文件。
- en: The Contracts folder contains all Solidity contracts. Place all your newly created
    contracts in the Contracts folder.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Contracts文件夹包含所有Solidity合约。将所有新创建的合约放入Contracts文件夹中。
- en: The Migrations folder contains scripts for deploying contracts. Once new contracts
    are created, the migration scripts need to be updated to include new contracts.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移文件夹包含用于部署合约的脚本。一旦创建了新的合约，迁移脚本需要更新以包含新的合约。
- en: The Test folder contains files for testing applications and contracts.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试文件夹包含用于测试应用程序和合约的文件。
- en: In order to work properly with Truffle  , ensure you create the right files
    in their appropriate folders.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与 Truffle 正常工作，请确保你在相应的文件夹中创建正确的文件。
- en: Code Editor
  id: totrans-70
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 代码编辑器
- en: The Truffle toolset provides the great tool for development. However, you still
    need a code editor for writing Smart Contracts. You are free to use any code editor,
    including Notepad. If you are from a .NET background, we suggest you use Visual
    Studio. While writing this book, Solidity (the language used to create a Smart
    Contracts for Ethereum) has extension support only up to Visual Studio 2015 (and
    not Visual Studio 2017). However, Solidity extensions are supported in Visual
    Studio code for 2017\. You can opt to install any version of Visual Studio 2015
    or you can use Visual Studio code. Our personal preference has been the latter,
    as it provides faster development. Install the latest version of your preferred
    editor.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Truffle 工具集提供了很好的开发工具。然而，你仍然需要一个代码编辑器来编写智能合约。你可以自由选择任何代码编辑器，包括记事本。如果你有 .NET
    背景，我们建议你使用 Visual Studio。在撰写本书时，Solidity（用于创建以太坊智能合约的语言）仅支持到 Visual Studio 2015
    的扩展（而不支持 Visual Studio 2017）。然而，Solidity 扩展在 Visual Studio code 中对 2017 年版本提供了支持。你可以选择安装任何版本的
    Visual Studio 2015，或者你可以使用 Visual Studio code。我们个人更偏好后者，因为它提供了更快的开发速度。安装你偏好编辑器的最新版本。
- en: Solidity
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Solidity
- en: There are a couple of languages that create Smart Contracts. Of those, the most
    popular and widely used is Solidity. It’s the most popular language for creating
    Smart Contracts in Ethereum. It is contract oriented. C++ and Python developer
    find identical syntax and synergies with the code. In terms of Solidity, the Smart
    Contract is a group of code and data together that resides in a specific address
    in Ethereum.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种语言可以创建智能合约。其中，最受欢迎和广泛使用的是 Solidity。它是创建以太坊智能合约的最流行语言。它是合约导向的。C++ 和 Python
    开发者发现它与代码具有相同的语法和协同作用。就 Solidity 而言，智能合约是一组代码和数据，它们一起驻留在以太坊的特定地址中。
- en: Structure of the Solidity Contract
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Solidity 合约的结构
- en: Here is how your normal Solidity contract would look:Pragma Solidity ^<versionname>;Contract
    <<contractname>>{Contract fieldsContract eventsContract functions}The first line
    of any Solidity contract is always pragma solidity ^<versionname>, where the version
    name is replaced by an actual version of Solidity. This line is an instruction
    to the Solidity compiler. What it means is the Solidity source code is written
    to the version name. The application will only compile in the same major version.
    Any change to a major version would not compile the program. This line ensures
    that the code written in earlier versions doesn’t suddenly break. Any contract
    has the contract name followed by all the fields, events, and function declarations,
    and definitions with those two braces { and }. Here is the solidity contract for
    storing patient details:pragma solidity ^0.4.2;contract PatientDetail {    enum
    Gender { Male, Female }        struct PatientName {        String PatientId;        String
    name;        String Description;        uint age;        Gender gender;        uint
    admissionDate;        uint releaseDate;    }     PatientDetail patient;    function
    getPatientDetail(string id) public view returns (struct patient) {        //code
    for returning patient detail    }}This code as the pragma instruction for the
    compiler, followed by a contract containing a structure to store patient details.
    It has the function of fetching patient details. Let’s look at a Smart Contract  used
    by Asclepius for storing the medicalasset. Open the Smartcontract folder previously
    created in the Visual Studio code. Navigate to the Contracts folder. Right-click
    to choose a new file, create a new file called medicalcontracts.sol., and copy
    the contract to it. Click Save.pragma solidity ^0.4.2;contract MedicalAssestStorage
    {struct AssetDetail {    string assetName; //store the asset name    string desc;
    //store the description of the asset    string prodOrigin; //store the actual
    origin of the asset    bool isAvailable; // determine where this asset is available
    or not}mapping(string  => AssetDetail)  assetinfo;string[] public assetList;mapping(address
    => mapping(string => bool))  myWallet;event evtCreateAsset(address account, string
    assetId, string prodOrigin);event evtRejectAsset(address account, string assetId,
    string message);event evtTransferAsset(address from, address to, string assetId);event
    evtTransferReject(address from, address to, string assetId, string message);function
    createAsset(string assetName, string assetId, string description, string prodOrigin)
    public {    if(assetinfo[assetId].isAvailable) {        evtRejectAsset(msg.sender,
    assetId, "This Asset ID already exists.");        return;      }      assetinfo[assetId].assetName
    = assetName;      assetinfo[assetId].desc = description;      assetinfo[assetId].prodOrigin
    = prodOrigin;      assetinfo[assetId].isAvailable = true;      myWallet[msg.sender][assetId]
    = true;      evtCreateAsset(msg.sender, assetId, prodOrigin);}function transferAsset(address
    to, string assetId) public {    if(!assetinfo[assetId].isAvailable) {        evtTransferReject(msg.sender,
    to, assetId, "No asset with this Asset Id exists");        return;    }    if(!myWallet[msg.sender][assetId])
    {        evtTransferReject(msg.sender, to, assetId, "Sender does not own this
    Asset.");        return;    }    myWallet[msg.sender][assetId]= false;    myWallet[to][assetId]
    = true;    evtTransferAsset(msg.sender, to, assetId);}function getAsset(string
    assetId) public view returns (string, string, string) {    return (assetinfo[assetId].assetName,
    assetinfo[assetId].desc, assetinfo[assetId].prodOrigin);}function isOwnerOf(address
    owner, string assetId) public view returns (bool) {    if(myWallet[owner][assetId])
    {        return true;    }}}
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是您的普通 Solidity 合约的外观：
- en: Understanding the Code
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解这段代码
- en: First and foremost, the contract with the name MedicalAssestStorage is created.
    To store the necessary asset, the structure name AssetDetail is being created.struct
    AssetDetail {    string assetName;    string desc;    string prodOrigin;    bool
    isAvailable;}AssetDetail as a structure is used to store and track the assets.
    These assets can be used to track instruments and hospital equipment while getting
    transferred across assets. Asclepius is a chain of hospitals, so it wants to ensure
    transparency in maintaining laboratory inventory and ensuring that if required,
    assets can be transferred from one hospital to another. For tracking, the asset
    is first mapped to a string.mapping(string  => AssetDetail)  assetinfo;Various
    events are created to track whenever an asset is created, transferred, or rejected.event
    evtCreateAsset(address account, string assetId, string prodOrigin);event evtRejectAsset(address
    account, string assetId, string message);event evtTransferAsset(address from,
    address to, string assetId);event evtTransferReject(address from, address to,
    string assetId, string message);Later, functions like createAsset and transferAsset
    are created to add a new asset to Asclepius or to transfer it to any other Asclepius
    chain.function createAsset(string assetName, string assetId, string description,
    string prodOrigin) public {    if(assetinfo[assetId].isAvailable) {        evtRejectAsset(msg.sender,
    assetId, "This Asset ID already exists.");        return;      }      assetinfo[assetId].assetName
    = assetName;      assetinfo[assetId].desc = description;      assetinfo[assetId].prodOrigin
    = prodOrigin;      assetinfo[assetId].isAvailable = true;      myWallet[msg.sender][assetId]
    = true;      evtCreateAsset(msg.sender, assetId, prodOrigin);}function transferAsset(address
    to, string assetId) public {    if(!assetinfo[assetId].isAvailable) {        evtTransferReject(msg.sender,
    to, assetId, "No asset with this Asset Id exists");        return;    }    if(!myWallet[msg.sender][assetId])
    {        evtTransferReject(msg.sender, to, assetId, "Sender does not own this
    Asset.");        return;    }    myWallet[msg.sender][assetId]= false;    myWallet[to][assetId]
    = true;    evtTransferAsset(msg.sender, to, assetId);}Lastly, to track who owns
    the asset and where the actual asset lies, the getAsset and isOwnerof functions
    are created.function getAsset(string assetId) public view returns (string, string,
    string) {    return (assetinfo[assetId].assetName, assetinfo[assetId].desc, assetinfo[assetId].prodOrigin);}function
    isOwnerOf(address owner, string assetId) public view returns (bool) {    if(myWallet[owner][assetId])
    {        return true;    }
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建了名为 MedicalAssestStorage 的合同。为了存储必要的资产，正在创建结构名称 AssetDetail。结构 AssetDetail
    {    string assetName;    string desc;    string prodOrigin;    bool isAvailable;}
    AssetDetail 作为一种结构被用来存储和跟踪资产。这些资产可以用于在资产之间转移时跟踪仪器和医院设备。Asclepius 是一系列医院，因此希望确保透明地维护实验室库存，并确保必要时可以将资产从一个医院转移到另一个医院。为了跟踪，首先将资产映射到一个字符串。映射（string  =>
    AssetDetail）assetinfo;创建了各种事件来跟踪每当创建、转移或拒绝资产时发生的情况。事件 evtCreateAsset(address account,
    string assetId, string prodOrigin);事件 evtRejectAsset(address account, string assetId,
    string message);事件 evtTransferAsset(address from, address to, string assetId);事件
    evtTransferReject(address from, address to, string assetId, string message);后来，创建了像
    createAsset 和 transferAsset 这样的函数，以将新资产添加到 Asclepius 或将其转移到任何其他 Asclepius 链。函数
    createAsset(string assetName, string assetId, string description, string prodOrigin)
    public {    if(assetinfo[assetId].isAvailable) {        evtRejectAsset(msg.sender,
    assetId, "This Asset ID already exists.");        return;      }      assetinfo[assetId].assetName
    = assetName;      assetinfo[assetId].desc = description;      assetinfo[assetId].prodOrigin
    = prodOrigin;      assetinfo[assetId].isAvailable = true;      myWallet[msg.sender][assetId]
    = true;      evtCreateAsset(msg.sender, assetId, prodOrigin);}函数 transferAsset(address
    to, string assetId) public {    if(!assetinfo[assetId].isAvailable) {        evtTransferReject(msg.sender,
    to, assetId, "No asset with this Asset Id exists");        return;    }    if(!myWallet[msg.sender][assetId])
    {        evtTransferReject(msg.sender, to, assetId, "Sender does not own this
    Asset.");        return;    }    myWallet[msg.sender][assetId]= false;    myWallet[to][assetId]
    = true;    evtTransferAsset(msg.sender, to, assetId);}最后，为了跟踪谁拥有资产以及实际资产位于何处，创建了
    getAsset 和 isOwnerof 函数。函数 getAsset(string assetId) public view returns (string,
    string, string) {    return (assetinfo[assetId].assetName, assetinfo[assetId].desc,
    assetinfo[assetId].prodOrigin);}函数 isOwnerOf(address owner, string assetId) public
    view returns (bool) {    if(myWallet[owner][assetId]) {        return true;    }
- en: Compiling a Contract
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编译合约
- en: 'Once the contract is created, the next step is to make the Truffle built-in
    compiler aware of the new contracts created. Modify the JavaScript file under
    the Migration folder to include the newly created medicalcontracts.sol, as shown
    here:var medicalcontract = artifacts.require("./medicalcontracts.sol");module.exports
    = function(deployer) { deployer.deploy(medicalcontract);  };In this code, we first
    created the variable that points to the newly created medicalcontracts . We then
    add the variable to the deployer. Modify the truffle.js file to point to the endpoint
    previously created in the Azure Portal. The new file should be something like
    what’s shown here:module.exports = {  // See <http://truffleframework.com/docs/advanced/configuration>  //
    to customize your Truffle configuration!  networks: {    development: {      host:
    "ethbwrevbiba.eastus.cloudapp.azure.com",      port: 8545,      network_id: "*"
    // Match any network id    }  }};NoteIn this example, we are deploying directly
    to Ethereum private Blockchain endpoint. It is always advisable to test the contracts
    before deploying to the private Blockchain. The best way to test your contract
    locally is to install testrpc from Ethereum.js using the command npm install -g
    ethereumjs-testrpc and then run the testrpc. Once you install testrpc, it runs
    under the localhost with port 8545 by default.Once the contracts are created,
    navigate to:C:\samplecontract> truffle compileCompiling .\contracts\medicalcontracts.sol...Writing
    artifacts to .\build\contractsOnce this is compiled, you are ready to deploy your
    contract to the Blockchain. Use the truffle deploy command to deploy the contract
    on Blockchain. Congratulations! Your contract is now being deployed on the Blockchain.
    Once your transaction is deployed, you can see transaction being sent in detail,
    as shown in Figure [8-24](#Fig24).![A458845_1_En_8_Fig24_HTML.jpg](A458845_1_En_8_Fig24_HTML.jpg)Figure
    8-24The execution of a transaction in the console'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦合同创建完成，下一步就是让 Truffle 内置编译器了解新创建的合同。 修改 Migration 文件夹下的 JavaScript 文件，包括新创建的
    medicalcontracts.sol，如下所示：
- en: Recap
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about Ethereum and learned how to set up Ethereum
    quickly using built-in Azure templates. Microsoft has invested in promoting Blockchain
    using built-in Azure templates. Solidity is a language for building Smart Contracts
    and is developing as we speak. Every week new changes are being proposed, accepted,
    and taken forward. As mentioned earlier, while you read these chapters, some of
    the options change with new options coming that make it easier to use the Blockchain
    infrastructure. Concepts for using Blockchain and using Solidity to create Smart
    Contracts remain the same. There is no doubt that we have an exciting time ahead
    in the Blockchain arena. All of the technology for AI 2.0, like Blockchain, IoT
    Hub, and consuming Cognitive Services have one thing in common—they generate a
    humungous amount of data. Data is of no use unless you can analyze it and get
    insights to make decisions quickly. In the next chapter, you learn how to use
    this data to capture, analyze, and visual real-time data quickly.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了以太坊，并学会了如何使用内置的 Azure 模板快速设置以太坊。微软已投资于推广使用内置 Azure 模板的区块链。 Solidity
    是用于构建智能合约的语言，并且正在发展中。每周都有新的变化被提出、接受并推动前进。 正如前面提到的，当您阅读这些章节时，一些选项会随着新选项的出现而发生变化，使得使用区块链基础设施变得更加容易。
    使用区块链和使用 Solidity 创建智能合约的概念保持不变。 毫无疑问，我们在区块链领域的未来是令人兴奋的。 AI 2.0 技术的所有技术，如区块链、物联网中心和使用认知服务，有一个共同点——它们产生了大量的数据。
    数据如果不能分析并获得洞察力以快速做出决策，就没有用处。 在下一章中，您将学习如何使用这些数据快速捕获、分析和可视化实时数据。
