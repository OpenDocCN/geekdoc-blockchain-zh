- en: © Nishith Pathak and Anurag Bhandari 2018Nishith Pathak and Anurag BhandariIoT,
    AI, and Blockchain for .NET[https://doi.org/10.1007/978-1-4842-3709-0_8](A458845_1_En_8_Chapter.html)
  prefs: []
  type: TYPE_NORMAL
- en: 8. Implementing Blockchain as a Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nishith Pathak^(1 ) and Anurag Bhandari²(1)Kotdwara, Dist. Pauri Garhwal, India(2)Jalandhar,
    Punjab, IndiaIn the last chapter, you learned about the emergence of Blockchain
    and the very core reason for building Blockchain was cryptocurrency, especially
    Bitcoin. Over the years, various industry verticals started using Blockchain technology
    for non-payment systems. As we mentioned in the previous chapter, Blockchain changes
    the way we trust. While writing this book, various industries across verticals
    are transforming their individual business cases with the power of Blockchain.
    Every day new use cases are getting evolved on how Blockchain technology can transform
    a specific vertical. There is absolutely no denial of the fact that Blockchain
    is going to disrupt every vertical in the very massive way that one can imagine
    and would be the source of the next industrial revolution.One of the core roadblocks
    of utilizing technologies like Blockchain is to have the necessary infrastructure
    to support it. Setting up the initial Blockchain requires a huge investment in
    terms of infrastructure. Apart from setting your own closed virtual private network,
    it also involves some of the servers reserved for doing the transaction and others
    reserved for doing mining, making them available always and if required, adding
    more transaction and mining nodes. Setting this environment is not just time-consuming,
    complex, and costly. Most of the non-technology and mid-size technology companies
    might find it difficult to create their own infrastructure.This problem of infrastructure
    is quite similar to infrastructure problems that led to the emergence of the Cloud
    infrastructure. This resulted in the eruption of new technology infrastructure
    commonly known as Infrastructure as a Service (IaaS). Various Blockchain pioneer
    companies also felt the need to provide Blockchain infrastructure in the Cloud
    so they could just focus on development rather than worrying about infrastructure.
    The setup done by these companies was called Blockchain as a Service (BaaS). Companies
    providing BaaS are called BaaS providers and companies and people consuming them
    are called BaaS consumers. As a BaaS consumer, you pay for the BaaS infrastructure
    most preferably on a pay-as-you-use basis. BaaS emergence has paved the way for
    rapid adoption of Blockchain technologies.TipWhile writing this book, each industry
    leader created their own BaaS offering. This creates a thought of relying on just
    one centralized third party. In the future, we expect companies to collaborate
    on BaaS and to have a more decentralized BaaS offeringMicrosoft provides a suite
    of BaaS offerings, ranging from R3 corda, hyperledger fabric, Ethereum, and so
    on, all of which sit on Microsoft Azure. Depending on your business use case,
    you can pick one of the Azure Blockchain predefined templates to get started.
    Like all other Microsoft Azure offerings and services, BaaS offerings for each
    of the Blockchain implementations come with free and paid tiers. At the end of
    this chapter, you’ll understand
  prefs: []
  type: TYPE_NORMAL
- en: The Enterprise Ethereum Alliance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Ethereum jargon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand how to set up a Blockchain leader Consortium in Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to transfer Ether within Blockchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to build, test, and deploy smart contracts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise Ethereum Alliance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Started in 2015, Ethereum has slowly been adopted across the globe. In 2017,
    industry leaders and academia titans understood the need for collaboration to
    support Ethereum and so formed the Enterprise Ethereum Alliance (EEA). EEA is
    a non-profit cooperation supporting fortune 500 companies and academia across
    the globe, as shown in Figure [8-1](#Fig1).![A458845_1_En_8_Fig1_HTML.jpg](A458845_1_En_8_Fig1_HTML.jpg)Figure
    8-1The home page of Enterprise Ethereum Alliance  . If you haven’t visited EEA,
    we suggest you visit the page and view the list of member companies supporting
    the Ethereum.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Ethereum Jargon
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we look at the Ethereum terms, it is important to know why Ethereum has
    been so popular and has created deep roots at the enterprise level. There are
    multiple reasons for it, but primarily it’s because Ethereum is open source and
    is more suited for creating a private Blockchain. Compared to Bitcoin, Ethereum
    can execute transactions faster. While writing this book, Ethereum community support
    has rapidly increased so developers get a lot of community support and help, which
    contributes to faster development. Let’s quickly look at the Ethereum terms that
    are widely used in the Ethereum community.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum Virtual Machine (EVM)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Ethereum network is made up of various computers or large decentralized
    computers that are together called the Ethereum Virtual Machine (EVM).
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum Nodes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: All the nodes that implement the Ethereum protocol are called Ethereum nodes.
    These nodes have the complete installation of Blockchain. The nodes not just connect
    with other nodes but also give you access to the Blockchain. Some of the nodes
    can then be used for an additional tasks, such as mining, etc. As and when the
    new transaction gets added, it is replicated to these nodes instantly.
  prefs: []
  type: TYPE_NORMAL
- en: Consortium
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Consortium refers to a group in Ethereum. This group includes all the consortium
    members of Blockchain that use the same infrastructure. When you are working within
    or across an organization utilizing Blockchain to set up their own private Blockchain,
    you are setting up a consortium that has a leader called a consortium leader.
    Other nodes being part of the consortium are called consortium nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Consortium Leader
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Like any group leader, the first and foremost thing to do when setting up an
    Ethereum consortium is to identify the consortium leader, as shown in Figure [8-2](#Fig2).
    The consortium leader is responsible for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up and configuring a private Blockchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deciding on the criteria for joining the privately owned network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up criteria for allocation of Ether, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![A458845_1_En_8_Fig2_HTML.png](A458845_1_En_8_Fig2_HTML.png)Figure 8-2The
    hierarchical structure of the consortium leader with the members in EthereumThe
    consortium leader heads the privately owned Blockchain and all other consortium
    members follow the rules and criteria set by the consortium leader. Once the consortium
    leader is set up, other members can join with their own infrastructure or use
    the existing one. Asclepius (our fictitious hospital) is using Blockchain to track
    a distributed ledger for a lot of work. It also collaborates with other hospitals
    and branches. The main branch of Asclepius is working as the consortium leader.'
  prefs: []
  type: TYPE_NORMAL
- en: Ether
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Ether is the currency used for transactions in Ethereum. There are many other
    cryptocurrencies along with Ether that can be used in Ethereum, as shown in Figure
    [8-3](#Fig3).![A458845_1_En_8_Fig3_HTML.jpg](A458845_1_En_8_Fig3_HTML.jpg)Figure
    8-3The Ether  conversion to other Ethereum used cryptocurrencies. Image source
    [https://forum.ethereum.org/discussion/1518/ether-unit-converter-wei-finney-szabo-btc](https://forum.ethereum.org/discussion/1518/ether-unit-converter-wei-finney-szabo-btc)Ether  can
    be used as a payment mechanism or even to authenticate the user.
  prefs: []
  type: TYPE_NORMAL
- en: Gas
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Every EVM node requires a good amount of processing power to execute code. While
    working on Blockchain, it is important to understand the computational effort
    required to execute specific code, which is denoted as Gas in the Blockchain world.
    Once an EVM node has enough gas to run the code, it is later awarded goodies like
    additional Ether for the proof of work. Let’s now look at how to set up Ethereum
    using Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Ethereum
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are many ways to set up the Ethereum network. One way is to set up the
    entire infrastructure of your own. An easier way is to use a BaaS offering from
    Azure to quickly set up Ethereum in a matter of minutes. Azure comes with various
    templates for creating a Blockchain offering. All of them have default templates
    with the option to customize each one of them. Default Azure templates do most
    of the abstraction and should be your preferred choice of template. Default templates
    ensure the transaction and mining nodes are part of the VPN and are isolated from
    each other, apart from creating a genesis block. A genesis block is like a blank
    distributed ledger or a distributed ledger with no data. Once the genesis block
    is created, the transaction can be written on top of the block. It is also an
    important prerequisite and for the safety aspects, that mining node should not
    accessible outside the private network. Fortunately, with the default Azure template,
    it is done automatically for you. Let’s quickly use one of the Blockchain Azure
    templates to create a consortium leader. The same steps can be used to create
    other Blockchain Azure offerings.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Blockchain Consortium Leader from the Azure Portal
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Open and navigate to [https://portal.azure.com/](https://portal.azure.com/)
    . Once you’re logged in, click on Create a Resource and then enter Ethereum in
    the search box to get all the Ethereum related templates, as shown in Figure [8-4](#Fig4).![A458845_1_En_8_Fig4_HTML.jpg](A458845_1_En_8_Fig4_HTML.jpg)Figure
    8-4The Ethereum related templates in Azure Portal. Microsoft is developing new
    templates. As you read the book, there will much more Ethereum related templates
    than shown here.Select Ethereum Consortium Leader. Use the same deployment model
    and Click on Create to start the Ethereum Consortium leader wizard interface,
    as shown in Figure [8-5](#Fig5).
  prefs: []
  type: TYPE_NORMAL
- en: 1.Specify the resource prefix to differentiate it from another template. For
    our convenience, we will use eth. You can use a prefix of your own choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2.In order to log in to the various nodes, a username is required. For convenience,
    we stick with the default username, gethadmin. For the password, you have an option
    to either use a SSH public key or a password. For the demo, we are using a password
    for now but you can opt for the SSH public key. The password should have at least
    one uppercase, one lowercase, one number, and one special character.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 3.Choose the subscription as assigned. If you haven’t purchased a paid subscription,
    you get the Free Trial option. If you are going to use it in production, it’s
    better to use a paid subscription instead of a free trial.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 4.Create a new resource group to have future permissions and policy consistent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 5.Use the location to your preference. Normally, people prefer the location
    that’s nearer to the actual implementation. After filling in the form, you end
    up seeing the screen shown in Figure [8-5](#Fig5).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A458845_1_En_8_Fig5_HTML.jpg](A458845_1_En_8_Fig5_HTML.jpg)Figure 8-5The
    first screen of the Ethereum consortium leader wizard interfaceClick OK to navigate
    and specify the network size and performance for the transaction and mining nodes,
    as shown in Figure [8-6](#Fig6).'
  prefs: []
  type: TYPE_NORMAL
- en: 1.Each consortium member is identified with a separate ID. As we are creating
    the consortium leader, let’s keep it set to 0 for now. Additional nodes can be
    added later as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2.Specify the mining nodes per member. This value should be set depending on
    your availability requirements. A maximum of 15 can be set. For now, we are using
    the default value of 2\. It can be changed later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 3.Choose the mining node storage from standard or premium. Azure provides various
    node storage options to create mining node storage. Standard uses a normal magnetic
    drive while Premium uses solid state drives. If you require higher IO, use Premium.
    By default, a virtual machine size of 2x Standard D1 v2 is set. If you need it
    higher, you can change it by clicking the > sign next to the mining virtual machine
    size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 4.While setting the storage node, you can set the redundancy locally or globally.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 5.Apply the default settings for the transaction node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A458845_1_En_8_Fig6_HTML.jpg](A458845_1_En_8_Fig6_HTML.jpg)Figure 8-6The
    network size and performance setting in the Ethereum consortium leader wizardClick
    OK and navigate to the Ethereum account setting, as shown in Figure [8-7](#Fig7).'
  prefs: []
  type: TYPE_NORMAL
- en: 1.The Network ID is the unique ID through which the Ethereum account is identified.
    This ID eventually is used for pairing nodes. All nodes having the same ID can
    be paired with each other. You can go with the default Ethereum network ID or
    specify a custom one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2.Specify whether you want the portal to automatically create a new genesis
    block or whether you want to customize it. For now, let Azure create a genesis
    block for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 3.Specify the password for the default account created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 4.Specify the passphrase, as shown in Figure [8-7](#Fig7).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A458845_1_En_8_Fig7_HTML.jpg](A458845_1_En_8_Fig7_HTML.jpg)Figure 8-7Configuring
    the Ethereum related settingsClick OK and review the summary to double validate
    your options. If everything looks good, click OK, as shown in Figure [8-8](#Fig8).![A458845_1_En_8_Fig8_HTML.jpg](A458845_1_En_8_Fig8_HTML.jpg)Figure
    8-8The summary of all the settings you have done to configure the Ethereum consortium
    networkRead the permissions, check the terms of use, and click Create, as shown
    in Figure [8-9](#Fig9).![A458845_1_En_8_Fig9_HTML.jpg](A458845_1_En_8_Fig9_HTML.jpg)Figure
    8-9The terms of use for the Ethereum Blockchain consortium leaderIt will take
    some time to create the Azure Blockchain. Notification in Azure, as shown in Figure
    [8-10](#Fig10), will keep informing you about the progress.![A458845_1_En_8_Fig10_HTML.jpg](A458845_1_En_8_Fig10_HTML.jpg)Figure
    8-10The notification for initializing the deployment of the Asclepius groupAfter
    initializing, procuring, and deploying the Ethereum Blockchain account, you will
    see it as shown in Figure [8-11](#Fig11).![A458845_1_En_8_Fig11_HTML.jpg](A458845_1_En_8_Fig11_HTML.jpg)Figure
    8-11The list of a few resources created under the Asclepius resource groupNoteMicrosoft
    has been working extensively to make the lot more Azure Blockchain templates and
    make the existing ones easier. Don’t be surprised if the name of the template
    or the process get smoother when you grab the copy. In the next few months, we
    envisage having tens of predefined Azure Blockchain templates for your business
    case to promote Blockchain as a Service extensively.'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Newly Created Ethereum Account
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Open your Azure Portal and then the resource group, as mentioned in the left
    rail. Select the Asclepius resource group link previously created while setting
    up the Ethereum account. Click on the Asclepius link. Your resource name might
    be different based on how you set it up, as shown in Figure [8-12](#Fig12). You
    are navigated to the Asclepius resource group that shows you all the nodes and
    VMs previously created while setting up the Asclepius account.![A458845_1_En_8_Fig12_HTML.jpg](A458845_1_En_8_Fig12_HTML.jpg)Figure
    8-12The list of all the resources createdAs shown in Figure [8-12](#Fig12), behind
    the scenes, a lot of activities were happening that included the creation of a
    load balancer, VMs, and security groups, to name a few. Imagine how much time
    it would take to create these at your infrastructure. This is a classic example
    of the power of using a Cloud infrastructure like Azure. Thanks to the Azure Ethereum
    Leader template, abstracting it and developing the necessary infrastructure takes
    just a few clicks. Click on Deployments on the left rail to see all the deployments,
    as shown in Figure [8-13](#Fig13).![A458845_1_En_8_Fig13_HTML.jpg](A458845_1_En_8_Fig13_HTML.jpg)Figure
    8-13The Deployments list. The first one starting with Microsoft Azure is the deployment
    of the private Ethereum network.Click on the first link, Microsoft-azure-Blockchain,
    to get overview details and then click on the output link to view all the information,
    as shown in Figure [8-14](#Fig14). It contains all information and endpoints details,
    such as the URL of the Admin site, the Ethereum RPC endpoint to connect, and the
    Gateway ID, to name a few.![A458845_1_En_8_Fig14_HTML.jpg](A458845_1_En_8_Fig14_HTML.jpg)Figure
    8-14All the Ethereum related links. The first two links—the Admin site and Ethereum-RPC-Endpoint—will
    be used extensively.It’s time to quickly open the Ethereum Admin site.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum Default Admin Site
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open the Admin site by copying the address of Admin site previously created
    in Figure [8-14](#Fig14). You will see a lot of information about the Blockchain
    Ethereum account, as shown in Figure [8-15](#Fig15), that we just created.![A458845_1_En_8_Fig15_HTML.jpg](A458845_1_En_8_Fig15_HTML.jpg)Figure
    8-15The home page of the default Ethereum Admin siteYou will see the address of
    the default genesis account that Azure created. You will also see a good amount
    of private Ether being allocated to this account for testing purposes.TipIt is
    important to understand that these private Ethers can’t be transacted, transferred,
    or even used in public or any other Blockchain account.We now see how to transfer
    this Ether to other accounts. This requires having two nodes sharing the same
    network ID. This is one of the ways to test whether your Ethereum consortium leader
    network is working properly. The best and fastest way is to test via a browser
    plugin called MetaMask.
  prefs: []
  type: TYPE_NORMAL
- en: Installation MetaMask
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Navigate to [https://github.com/metamask](https://github.com/metamask) , as
    shown in Figure [8-16](#Fig16)  .![A458845_1_En_8_Fig16_HTML.jpg](A458845_1_En_8_Fig16_HTML.jpg)Figure
    8-16The MetaMask home page in GitHubClick on metamask-extension and then on Releases.
    Download the chrome extension version. Extract the ZIP file to some folder. Open
    Chrome, navigate to Extensions, and click on Developer Mode, as shown in Figure
    [8-17](#Fig17).![A458845_1_En_8_Fig17_HTML.jpg](A458845_1_En_8_Fig17_HTML.jpg)Figure
    8-17The Chrome extension page for enabling developer modeClick on Load Unpacked
    extension after checking Developer mode. Navigate to the folder where the metamask.zip
    file was extracted. Click OK. Once you’re done, you will see the fox icon on your
    chrome extension, as shown in Figure [8-18](#Fig18).![A458845_1_En_8_Fig18_HTML.jpg](A458845_1_En_8_Fig18_HTML.jpg)Figure
    8-18The MetaMask extension installed a Chrome extensionDisabled the developer
    mode. Click on the fox icon again and accept the terms. Create a new password
    that you can remember. It will then give the user a set of 12 words that can be
    used to restore all your accounts. You will now be logged in to Ropsten Test.net
    and have less Ether, as shown in Figure [8-19](#Fig19)  .![A458845_1_En_8_Fig19_HTML.jpg](A458845_1_En_8_Fig19_HTML.jpg)Figure
    8-19The default home page of MetaMask plugin when opened for the first timeIn
    order to transfer the Ether from the newly created Blockchain, copy the Ethereum
    RPC endpoint link that was previously created (see Figure [8-14](#Fig14)). Click
    Settings on the top right of MetaMask plugin. Paste the Ethereum endpoint link
    that you copied and click on Save. Once you’re done, your UI of MetaMask will
    show that you are now connected to a private network (instead of Ropsten Test
    Net), as shown in Figure [8-20](#Fig20).![A458845_1_En_8_Fig20_HTML.jpg](A458845_1_En_8_Fig20_HTML.jpg)Figure
    8-20The MetaMask plugin connected with private Blockchain network rather than
    the default networkCopy the address of newly created account and navigate back
    to the Admin Ethereum site. Scroll down and paste the address as shown here. Then
    specify the number of Ethers to transfer and click on Submit, as shown in Figure
    [8-21](#Fig21).![A458845_1_En_8_Fig21_HTML.jpg](A458845_1_En_8_Fig21_HTML.jpg)Figure
    8-21The Ethereum Admin site for transferring Ethereum to the MetaMask accountYou
    will get the message "Ether sent". Navigate back to the MetaMask plugin to see
    if it has received the Ether or not. As expected, we got the Ether in the MetaMask
    plugin, as shown in Figure [8-22](#Fig22).![A458845_1_En_8_Fig22_HTML.jpg](A458845_1_En_8_Fig22_HTML.jpg)Figure
    8-22The Ether received in the MetaMask plugin from the Ethereum Admin siteCongratulations!
    Your Blockchain network is working and you are good to add more consortium members,
    transfer Ethers, and use it for further development. Normally, Ethers are only
    rewarded to consortium members when they execute a specific computational task.
    Most of these tasks go hand in hand with the execution of smart contracts. Let’s
    now look at how to create Smart Contracts.
  prefs: []
  type: TYPE_NORMAL
- en: Smart Contracts in Asclepius
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the previous chapter, we discussed the importance of Smart Contracts. In
    Asclepius, the Smart Contract is widely used in various scenarios to avoid paperwork
    for tasks such as maintaining health records, prescriptions, insurance claims,
    etc. Two of the other uses of the Smart Contract are briefly discussed:'
  prefs: []
  type: TYPE_NORMAL
- en: The Smart Contract is used in Asclepius during the claims adjustment process.
    Previously, when the Smart Contracts were not introduced, patients had a lot of
    paperwork, including negotiation with health payers or insurance providers, and
    most of the time, patients ended up in paying claims. This process has been greatly
    reduced through the introduction of Smart Contracts and using the power of Blockchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patient information and medical records, including medical prescriptions and
    doctor details, are stored in Blockchain and only authorized users as per patient
    and healthcare provider Smart Contracts are eligible to access this data. This
    helps not only to maintain immutable medical historic records of the patients,
    but ensures data integrity. Every treatment of the patients is added to this smart
    contract. This also enables instant verification of medical records without the
    need of a third party.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are just two of the many use cases in which Asclepius uses Smart Contracts.
    With Blockchain and Smart Contracts, Asclepius can become a trusted partner, by
    ensuring that they are storing all patients’ records digitally and securely, and
    making relevant data easily accessible with proper authorization.
  prefs: []
  type: TYPE_NORMAL
- en: Developing Smart Contracts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can write Smart Contracts easily using Notepad and a Smart Contracts compiler.
    It would be very tedious to build, test, and deploy Smart Contracts on your own.
    In order to develop Smart Contracts, the following software is required for ensuring
    a proper development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Package Managers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Install the Node Packet Manager (NPM). Navigate to [https://nodejs.org/en/](https://nodejs.org/en/)
    and download the latest version available.
  prefs: []
  type: TYPE_NORMAL
- en: Truffle
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Truffle provides a built-in compiler for Smart Contracts that help in compiling
    and deploying the solution. Once the solution is built, Truffle also provides
    development, testing, and deployment of Smart Contracts very easily. In order
    to install the Truffle toolset, open PowerShell in administrative mode and run
    the command shown here:C:\> npm install -g truffleC:\Users\nishith\AppData\Roaming\npm\truffle
    -> C:\Users\nishith\AppData\Roaming\npm\node_modules\truffle\build\cli.bundled.js+
    truffle@4.1.3updated 1 package in 13.964sNoteTruffle is a great tool for compiling,
    deploying, and testing smart contract solutions. However, there are quite a number
    of other tools available in the market, like Remix ( [http://remix.ethereum.org](http://remix.ethereum.org)
    ), Mist browser, and others that provide GUI based interface. One real advantage
    of using tools like Remix is that you don’t need to install anything on your machine.
    However, we personally prefer Truffle, as while developing enterprise application,
    you do need to worry about enterprise policies that don’t support using web-based
    solutions to compile and deploy.Once Truffle  is installed, you can initialize
    it to get the basic project structure and get started quickly, as shown here:C:\samplecontract>
    truffle initDownloading...Unpacking...Settingup...Unbox successfully. Sweet !Commands
    :Compile:     truffle compileMigrate:     truffle migrateTest contracts:     truffle
    testsIt ends up creating a couple of folders, as shown in Figure [8-23](#Fig23).![A458845_1_En_8_Fig23_HTML.jpg](A458845_1_En_8_Fig23_HTML.jpg)Figure
    8-23Folders created after initializing the Truffle  template on a folderEach of
    the folders contains specific files.
  prefs: []
  type: TYPE_NORMAL
- en: The Contracts folder contains all Solidity contracts. Place all your newly created
    contracts in the Contracts folder.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Migrations folder contains scripts for deploying contracts. Once new contracts
    are created, the migration scripts need to be updated to include new contracts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Test folder contains files for testing applications and contracts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to work properly with Truffle  , ensure you create the right files
    in their appropriate folders.
  prefs: []
  type: TYPE_NORMAL
- en: Code Editor
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The Truffle toolset provides the great tool for development. However, you still
    need a code editor for writing Smart Contracts. You are free to use any code editor,
    including Notepad. If you are from a .NET background, we suggest you use Visual
    Studio. While writing this book, Solidity (the language used to create a Smart
    Contracts for Ethereum) has extension support only up to Visual Studio 2015 (and
    not Visual Studio 2017). However, Solidity extensions are supported in Visual
    Studio code for 2017\. You can opt to install any version of Visual Studio 2015
    or you can use Visual Studio code. Our personal preference has been the latter,
    as it provides faster development. Install the latest version of your preferred
    editor.
  prefs: []
  type: TYPE_NORMAL
- en: Solidity
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are a couple of languages that create Smart Contracts. Of those, the most
    popular and widely used is Solidity. It’s the most popular language for creating
    Smart Contracts in Ethereum. It is contract oriented. C++ and Python developer
    find identical syntax and synergies with the code. In terms of Solidity, the Smart
    Contract is a group of code and data together that resides in a specific address
    in Ethereum.
  prefs: []
  type: TYPE_NORMAL
- en: Structure of the Solidity Contract
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Here is how your normal Solidity contract would look:Pragma Solidity ^<versionname>;Contract
    <<contractname>>{Contract fieldsContract eventsContract functions}The first line
    of any Solidity contract is always pragma solidity ^<versionname>, where the version
    name is replaced by an actual version of Solidity. This line is an instruction
    to the Solidity compiler. What it means is the Solidity source code is written
    to the version name. The application will only compile in the same major version.
    Any change to a major version would not compile the program. This line ensures
    that the code written in earlier versions doesn’t suddenly break. Any contract
    has the contract name followed by all the fields, events, and function declarations,
    and definitions with those two braces { and }. Here is the solidity contract for
    storing patient details:pragma solidity ^0.4.2;contract PatientDetail {    enum
    Gender { Male, Female }        struct PatientName {        String PatientId;        String
    name;        String Description;        uint age;        Gender gender;        uint
    admissionDate;        uint releaseDate;    }     PatientDetail patient;    function
    getPatientDetail(string id) public view returns (struct patient) {        //code
    for returning patient detail    }}This code as the pragma instruction for the
    compiler, followed by a contract containing a structure to store patient details.
    It has the function of fetching patient details. Let’s look at a Smart Contract  used
    by Asclepius for storing the medicalasset. Open the Smartcontract folder previously
    created in the Visual Studio code. Navigate to the Contracts folder. Right-click
    to choose a new file, create a new file called medicalcontracts.sol., and copy
    the contract to it. Click Save.pragma solidity ^0.4.2;contract MedicalAssestStorage
    {struct AssetDetail {    string assetName; //store the asset name    string desc;
    //store the description of the asset    string prodOrigin; //store the actual
    origin of the asset    bool isAvailable; // determine where this asset is available
    or not}mapping(string  => AssetDetail)  assetinfo;string[] public assetList;mapping(address
    => mapping(string => bool))  myWallet;event evtCreateAsset(address account, string
    assetId, string prodOrigin);event evtRejectAsset(address account, string assetId,
    string message);event evtTransferAsset(address from, address to, string assetId);event
    evtTransferReject(address from, address to, string assetId, string message);function
    createAsset(string assetName, string assetId, string description, string prodOrigin)
    public {    if(assetinfo[assetId].isAvailable) {        evtRejectAsset(msg.sender,
    assetId, "This Asset ID already exists.");        return;      }      assetinfo[assetId].assetName
    = assetName;      assetinfo[assetId].desc = description;      assetinfo[assetId].prodOrigin
    = prodOrigin;      assetinfo[assetId].isAvailable = true;      myWallet[msg.sender][assetId]
    = true;      evtCreateAsset(msg.sender, assetId, prodOrigin);}function transferAsset(address
    to, string assetId) public {    if(!assetinfo[assetId].isAvailable) {        evtTransferReject(msg.sender,
    to, assetId, "No asset with this Asset Id exists");        return;    }    if(!myWallet[msg.sender][assetId])
    {        evtTransferReject(msg.sender, to, assetId, "Sender does not own this
    Asset.");        return;    }    myWallet[msg.sender][assetId]= false;    myWallet[to][assetId]
    = true;    evtTransferAsset(msg.sender, to, assetId);}function getAsset(string
    assetId) public view returns (string, string, string) {    return (assetinfo[assetId].assetName,
    assetinfo[assetId].desc, assetinfo[assetId].prodOrigin);}function isOwnerOf(address
    owner, string assetId) public view returns (bool) {    if(myWallet[owner][assetId])
    {        return true;    }}}
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First and foremost, the contract with the name MedicalAssestStorage is created.
    To store the necessary asset, the structure name AssetDetail is being created.struct
    AssetDetail {    string assetName;    string desc;    string prodOrigin;    bool
    isAvailable;}AssetDetail as a structure is used to store and track the assets.
    These assets can be used to track instruments and hospital equipment while getting
    transferred across assets. Asclepius is a chain of hospitals, so it wants to ensure
    transparency in maintaining laboratory inventory and ensuring that if required,
    assets can be transferred from one hospital to another. For tracking, the asset
    is first mapped to a string.mapping(string  => AssetDetail)  assetinfo;Various
    events are created to track whenever an asset is created, transferred, or rejected.event
    evtCreateAsset(address account, string assetId, string prodOrigin);event evtRejectAsset(address
    account, string assetId, string message);event evtTransferAsset(address from,
    address to, string assetId);event evtTransferReject(address from, address to,
    string assetId, string message);Later, functions like createAsset and transferAsset
    are created to add a new asset to Asclepius or to transfer it to any other Asclepius
    chain.function createAsset(string assetName, string assetId, string description,
    string prodOrigin) public {    if(assetinfo[assetId].isAvailable) {        evtRejectAsset(msg.sender,
    assetId, "This Asset ID already exists.");        return;      }      assetinfo[assetId].assetName
    = assetName;      assetinfo[assetId].desc = description;      assetinfo[assetId].prodOrigin
    = prodOrigin;      assetinfo[assetId].isAvailable = true;      myWallet[msg.sender][assetId]
    = true;      evtCreateAsset(msg.sender, assetId, prodOrigin);}function transferAsset(address
    to, string assetId) public {    if(!assetinfo[assetId].isAvailable) {        evtTransferReject(msg.sender,
    to, assetId, "No asset with this Asset Id exists");        return;    }    if(!myWallet[msg.sender][assetId])
    {        evtTransferReject(msg.sender, to, assetId, "Sender does not own this
    Asset.");        return;    }    myWallet[msg.sender][assetId]= false;    myWallet[to][assetId]
    = true;    evtTransferAsset(msg.sender, to, assetId);}Lastly, to track who owns
    the asset and where the actual asset lies, the getAsset and isOwnerof functions
    are created.function getAsset(string assetId) public view returns (string, string,
    string) {    return (assetinfo[assetId].assetName, assetinfo[assetId].desc, assetinfo[assetId].prodOrigin);}function
    isOwnerOf(address owner, string assetId) public view returns (bool) {    if(myWallet[owner][assetId])
    {        return true;    }
  prefs: []
  type: TYPE_NORMAL
- en: Compiling a Contract
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Once the contract is created, the next step is to make the Truffle built-in
    compiler aware of the new contracts created. Modify the JavaScript file under
    the Migration folder to include the newly created medicalcontracts.sol, as shown
    here:var medicalcontract = artifacts.require("./medicalcontracts.sol");module.exports
    = function(deployer) { deployer.deploy(medicalcontract);  };In this code, we first
    created the variable that points to the newly created medicalcontracts . We then
    add the variable to the deployer. Modify the truffle.js file to point to the endpoint
    previously created in the Azure Portal. The new file should be something like
    what’s shown here:module.exports = {  // See <http://truffleframework.com/docs/advanced/configuration>  //
    to customize your Truffle configuration!  networks: {    development: {      host:
    "ethbwrevbiba.eastus.cloudapp.azure.com",      port: 8545,      network_id: "*"
    // Match any network id    }  }};NoteIn this example, we are deploying directly
    to Ethereum private Blockchain endpoint. It is always advisable to test the contracts
    before deploying to the private Blockchain. The best way to test your contract
    locally is to install testrpc from Ethereum.js using the command npm install -g
    ethereumjs-testrpc and then run the testrpc. Once you install testrpc, it runs
    under the localhost with port 8545 by default.Once the contracts are created,
    navigate to:C:\samplecontract> truffle compileCompiling .\contracts\medicalcontracts.sol...Writing
    artifacts to .\build\contractsOnce this is compiled, you are ready to deploy your
    contract to the Blockchain. Use the truffle deploy command to deploy the contract
    on Blockchain. Congratulations! Your contract is now being deployed on the Blockchain.
    Once your transaction is deployed, you can see transaction being sent in detail,
    as shown in Figure [8-24](#Fig24).![A458845_1_En_8_Fig24_HTML.jpg](A458845_1_En_8_Fig24_HTML.jpg)Figure
    8-24The execution of a transaction in the console'
  prefs: []
  type: TYPE_NORMAL
- en: Recap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned about Ethereum and learned how to set up Ethereum
    quickly using built-in Azure templates. Microsoft has invested in promoting Blockchain
    using built-in Azure templates. Solidity is a language for building Smart Contracts
    and is developing as we speak. Every week new changes are being proposed, accepted,
    and taken forward. As mentioned earlier, while you read these chapters, some of
    the options change with new options coming that make it easier to use the Blockchain
    infrastructure. Concepts for using Blockchain and using Solidity to create Smart
    Contracts remain the same. There is no doubt that we have an exciting time ahead
    in the Blockchain arena. All of the technology for AI 2.0, like Blockchain, IoT
    Hub, and consuming Cognitive Services have one thing in common—they generate a
    humungous amount of data. Data is of no use unless you can analyze it and get
    insights to make decisions quickly. In the next chapter, you learn how to use
    this data to capture, analyze, and visual real-time data quickly.
  prefs: []
  type: TYPE_NORMAL
