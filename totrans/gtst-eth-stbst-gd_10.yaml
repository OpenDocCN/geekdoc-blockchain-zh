- en: © The Author(s), under exclusive license to APress Media, LLC, part of Springer
    Nature 2022D. P. BauerGetting Started with Ethereum [https://doi.org/10.1007/978-1-4842-8045-4_10](https://doi.org/10.1007/978-1-4842-8045-4_10)
  prefs: []
  type: TYPE_NORMAL
- en: 10. Chainlink
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Davi Pedro Bauer^([1](#Aff2)  )(1)Campo Bom, Rio Grande do Sul, Brazil
  prefs: []
  type: TYPE_NORMAL
- en: Chainlink^([1](#Fn1)) is a decentralized network of nodes that uses oracles
    to transfer data and information from off-blockchain sources to on-blockchain
    smart contracts. In this chapter, you will learn how to use the ETH/USD price
    feed on the Kovan testnet to access the most recent cryptocurrency price inside
    smart contracts.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of this chapter, you will be able to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a simple smart contact for price consumption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up an Infura project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the private key to sign transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy the smart contract on the Kovan network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get price information from the smart contact on the Kovan network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get Crypto Prices Inside Smart Contracts Using Chainlink Oracles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start by creating a new project and then installing the Chainlink contracts
    package. You will use an existing contract address that tells you the price of
    the ETH/USD pair, and then you will be able to see that price being returned by
    your smart contact.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to the Terminal menu, click New Terminal, and initialize a new Truffle project.$
    truffle initNow, initialize the project folder.$ npm initFinally, install the
    Chainlink contracts package.^([2](#Fn2))$ npm install @chainlink/contracts@0.1.9
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Smart Contract
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new smart contract for price consumption.$ touch contracts/PriceConsumer.solOpen
    the file PriceConsumer.sol (Figure [10-1](#Fig1)).![](../images/521550_1_En_10_Chapter/521550_1_En_10_Fig1_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: 'A screenshot of the V S code contracts folder has the Price Consumer dot s
    o l tab open. The left pane ''Explorer'' has other sections: Contracts under which
    Migrations dot s o l and Price Consumer dot s o l (which is selected) is present,
    migrations, node underscore modules, test and two dot j s o n and one dot j s
    file.'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10-1
  prefs: []
  type: TYPE_NORMAL
- en: VS Code contracts folder
  prefs: []
  type: TYPE_NORMAL
- en: 'In the PriceConsumer.sol file, define the Solidity version and then import
    the Chainlink contract interface. After that, define the contract name and the
    contract constructor.// SPDX-License-Identifier: MITpragma solidity ^0.8.0;import
    "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol";contract
    PriceConsumer {    AggregatorV3Interface internal priceFeed;    constructor(){        priceFeed
    = AggregatorV3Interface()    }}Go to [https://docs.chain.link/docs/ethereum-addresses](https://docs.chain.link/docs/ethereum-addresses)
    and scroll down to the Kovan section. Copy the Proxy address on the line “ETH/USD”
    (Figure [10-2](#Fig2)).![](../images/521550_1_En_10_Chapter/521550_1_En_10_Fig2_HTML.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the chainlink price feeds has 'Using Price Feeds' listed on
    the left. There are multiple options under 'Using Price Feeds', one of them being
    'Contact Addresses' which is selected. Under it, 'Etherium Price Feeds' is selected.
    On the right, there is a table with 3 columns with details of the price feeds.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10-2
  prefs: []
  type: TYPE_NORMAL
- en: Chainlink price feeds
  prefs: []
  type: TYPE_NORMAL
- en: 'Paste the address into the AggregatorV3Interface constructor. After that, create
    the function to get the price.// SPDX-License-Identifier: MITpragma solidity ^0.8.0;import
    "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol";contract
    PriceConsumer {    AggregatorV3Interface internal priceFeed;    constructor(){        priceFeed
    = AggregatorV3Interface(0x9326BFA02ADD2366b30bacB125260Af641031331);    }    function
    getThePrice() public view returns (int){        (            uint80 roundID,            int
    price,            uint startedAt,            uint timeStamp,            uint80
    answeredInRound        ) = priceFeed.latestRoundData();        return price;    }}'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Migration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create the migration file in the migrations folder.$ touch migrations/2_deploy_contracts.solWrite
    code to deploy the PriceConsumer smart contract (Figure [10-3](#Fig3)).const PriceConsumer
    = artifacts.require("PriceConsumer");module.exports = function(deployer){    deployer.deploy(PriceConsumer);};![](../images/521550_1_En_10_Chapter/521550_1_En_10_Fig3_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the V S code migrations folder has the 2 underscore deploy underscore
    contracts dot j s tab open. The number 1 is displayed on the window.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10-3
  prefs: []
  type: TYPE_NORMAL
- en: VS Code migrations folder
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Your Infura Project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to [https://infura.io](https://infura.io) and access your dashboard. Click
    Ethereum and then click “Create a project”. Finally, define the project name and
    copy the project ID (Figure [10-4](#Fig4)). Notice that you can connect with different
    testnets and also to the mainnet.![](../images/521550_1_En_10_Chapter/521550_1_En_10_Fig4_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the Infura settings has a dashboard on the left. The bar on
    top has the title ethereum. The Settings tab is open. The Project Details have
    to be entered on the main screen. The first section has Name with 'ethereum' entered,
    which is a required field, and the second section has Keys with the Project I
    D displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10-4
  prefs: []
  type: TYPE_NORMAL
- en: Infura settings
  prefs: []
  type: TYPE_NORMAL
- en: Now, click Save Changes.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Wallet to Sign Transactions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Install the file system fs package. This package provides a lot of useful functionality
    to access and interact with the file system.$ npm install fsInstall the wallet
    provider hdwallet package. This also installs the HD wallet-enabled Web 3 provider,
    which is used to sign transactions for addresses derived from a 12- or 24-word
    mnemonic.$ npm install @truffle/hdwallet-provider@1.2.3Open the truffle-config.js
    file and uncomment the HDWalletProvider code section.const HDWalletProvider =
    require('@truffle/hdwallet-provider');const infuraKey = '<your_infura_key>';const
    fs = require('fs');const mnemonic = fs.readFileSync(".secret").toString().trim();
  prefs: []
  type: TYPE_NORMAL
- en: Paste your Infura project ID as a value for the variable infuraKey.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Network
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In truffle-config.js, uncomment the ropsten network section and change the
    following values:'
  prefs: []
  type: TYPE_NORMAL
- en: Change ropsten to kovan.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the Ropsten Infura URL to kovan.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change YOUR-PROJECT-ID to ${infuraKey}.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change network_id to 42.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'kovan: {    provider: () => new HDWalletProvider(mnemonic, `https://kovan.infura.io/v3/${infuraKey}`),    network_id:
    42,    gas: 5500000,    confirmations: 2,    timeoutBlocks: 200,    skipDryRun:
    true},'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Solidity Compiler
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Still in truffle.config.js, uncomment the compilers section and change the
    version to 0.8.0.compilers: {    solc: {        version: "0.8.0",        docker:
    true,        settings: {            optimizer: {                enabled: false,                runs:
    200            },            evmVersion: "byzantium"        }    }},'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Private Key
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create the secret file as follows:$ touch .secretGo to the browser and open
    your MetaMask wallet connected to the Infura network. Click “Your Account” and
    then click “Settings”. Finally, click “Security & Privacy” (Figure [10-5](#Fig5)).![](../images/521550_1_En_10_Chapter/521550_1_En_10_Fig5_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the Security and Privacy window for the Reveal Seed Phrase setting.
    There is text that reads 'Reveal Seed Phrase' and a button below with the same
    text, where the cursor is placed.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10-5
  prefs: []
  type: TYPE_NORMAL
- en: 'MetaMask: revealing the seed phrase'
  prefs: []
  type: TYPE_NORMAL
- en: You have the option to view your seed phrase, but be aware that this information
    is sensitive, and if someone has access to it, they will be able to restore your
    wallet and make use of your funds.
  prefs: []
  type: TYPE_NORMAL
- en: Click Reveal Seed Phrase and enter your wallet password to continue. Copy the
    private key. Go back to Visual Studio Code and paste the private secret recovery
    phrase in the file .secret.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling the Smart Contract
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Compile the contract using Truffle.$ truffle compile
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the Smart Contract
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Deploy the contract to the Kovan network using Truffle. The migrate command
    runs migrations to deploy contracts on the Kovan network.$ truffle migrate --network
    kovanWait for the contract to be deployed and the transactions to be confirmed
    on the blockchain. Now, check your contract address that was created (Figure [10-6](#Fig6)).![](../images/521550_1_En_10_Chapter/521550_1_En_10_Fig6_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the V S code deployed contract output window has Problems, Output,
    Terminal and Debug console tabs. The codes are displayed in the terminal tab,
    with details of transaction, blocks, contract address, block number and timestamp,
    account, balance, gas used, gas price, value sent, and total cost.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10-6
  prefs: []
  type: TYPE_NORMAL
- en: VS Code deployed contract output
  prefs: []
  type: TYPE_NORMAL
- en: Getting the Price Information from the Smart Contract
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Instantiate the contract using the Truffle console. This console command opens
    a basic interactive console that connects to an Ethereum client on the Kovan network:$
    truffle console --network kovanNow, use the deployed command to return the deployed
    contract instance on the Kovan network, as shown here:truffle(kovan) let instance
    = await PriceConsumer.deployed()Call the method getThePrice. The let command stores
    the method result in the variable price, and the await command will execute the
    method asynchronously.truffle(kovan) let price = await instance.getThePrice()Finally,
    output the result to number. The method toNumber() converts big number objects
    to regular numbers.truffle(kovan) price.toNumber()265499339990
  prefs: []
  type: TYPE_NORMAL
- en: That’s it, you just created a smart contract and consumed the Chainlink price
    feed oracle!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned how to create a simple smart contract using Chainlink
    to get price information from a Chainlink oracle.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about Nethereum, a .NET library for Ethereum.
  prefs: []
  type: TYPE_NORMAL
