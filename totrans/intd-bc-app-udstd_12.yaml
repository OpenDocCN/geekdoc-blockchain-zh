- en: © The Author(s), under exclusive license to APress Media, LLC, part of Springer
    Nature 2022J. T. GeorgeIntroducing Blockchain Applications[https://doi.org/10.1007/978-1-4842-7480-4_12](https://doi.org/10.1007/978-1-4842-7480-4_12)
  prefs: []
  type: TYPE_NORMAL
- en: 12. BLOCKLY 4SOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Joseph Thachil George^([1](#Aff2)  )(1)Rome, Italy
  prefs: []
  type: TYPE_NORMAL
- en: BLOCKLY is a library that allows you to make block programming apps. Even if
    users do not really know a programming language, block programming allows them
    to construct scripts and programs using graphic blocks. In a drag-and-drop editor,
    BLOCKLY includes all you need to define and render blocks. Each block represents
    a single line of code that may be stacked and converted into code with ease. It
    can be used to let users personalize elements of the app and add actions to them.
  prefs: []
  type: TYPE_NORMAL
- en: 12.1 SOS Modeling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While using this tool  , it generates a standard SoS-block called ex-abundant
    block, to illustrate. The left-side toolbox contains all of the blocks required
    to build an SoS design. This conceptual model will assist the SoS designer. Furthermore,
    every exported block in BLOCKLY is connected to a perspective block, so all blocks
    connected to the communication point of view may be found under the Toolkit’s
    Communication category.
  prefs: []
  type: TYPE_NORMAL
- en: Users must click and drag blocks from the flyout or toolbox to generate new
    blocks in BLOCKLY. An API for BLOCKLY was designed with the goal of improving
    usability and accuracy. The Field Dropdown() provides a list of appropriate blocks
    that may be linked to a certain block, making it easy for the users to build blocks.
  prefs: []
  type: TYPE_NORMAL
- en: 'After adding a Technique block, the tool displays how to add the other appropriate
    blocks: fault predicting, failure prevention, failure elimination, and failure
    tolerance. The Technique block is an abstraction block in profile, and the four
    blocks above inherit it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block can have three phases, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: A compressed view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A partially compressed view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An uncompressed view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By decreasing the amount of blocks on the screen, a compressed display enables
    the user to see the current editing block (see Figure [12-1](#Fig1)). The person
    can choose to just view the stated attributes since a partially-collapsed block
    only reveals the non-empty features of a block. Use Full View/Uncompressed View
    to examine all of a block’s attributes. The user may flip between the three viewpoints
    by clicking on the block twice. See Figure [12-2](#Fig2).![../images/520777_1_En_12_Chapter/520777_1_En_12_Fig1_HTML.jpg](../images/520777_1_En_12_Chapter/520777_1_En_12_Fig1_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12-1
  prefs: []
  type: TYPE_NORMAL
- en: SysML imported to BLOCKLY
  prefs: []
  type: TYPE_NORMAL
- en: '![../images/520777_1_En_12_Chapter/520777_1_En_12_Fig2_HTML.jpg](../images/520777_1_En_12_Chapter/520777_1_En_12_Fig2_HTML.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-2
  prefs: []
  type: TYPE_NORMAL
- en: Using a dropdown menu, the users can add blocks
  prefs: []
  type: TYPE_NORMAL
- en: In addition, as illustrated in Figures [12-3](#Fig3) and [12-4](#Fig4), characteristics
    linked to selected building blocks can be shown for each block. This is accomplished
    by placing a mutator button on the upper-left side of each block.
  prefs: []
  type: TYPE_NORMAL
- en: The supporting facility uses a freely accessible open source plug-in called
    Type-Indicator 5 to create an intuitive modeling environment. This plugin highlights
    all the blocks that are compatible (in yellow) with the current block as it is
    being moved (block cs4).
  prefs: []
  type: TYPE_NORMAL
- en: The traceability of requirements must be examined and managed in an SoS project,
    therefore requirements management is critical. The needs may be broken down into
    categories based on points of view and building components, such as architecture,
    communication, and reliability.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, full traceability is provided since each building block satisfies
    the collection of criteria that it fulfills, and each building block of requirements
    controls the collection of building blocks that maintains it. To make the design
    more obvious, BLOCKLY allows you to add comments to blocks.![../images/520777_1_En_12_Chapter/520777_1_En_12_Fig3_HTML.jpg](../images/520777_1_En_12_Chapter/520777_1_En_12_Fig3_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12-3
  prefs: []
  type: TYPE_NORMAL
- en: 'A block can be viewed in three different ways: collapsed, partially collapsed,
    and uncollapsed'
  prefs: []
  type: TYPE_NORMAL
- en: An example of constraint usage is shown in Figure [12-4](#Fig4). Constraints
    can be utilized to find unusual twists that could be prone to an emerging stage
    in SoS. You can get these situations by using proper query in the models. When
    working with big models, it might be difficult to see the whole SoS, necessitating
    the use of specialized views.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of using lines to display connection between blocks, BLOCKLY uses *collapse*
    methods  to disguise the complexity of an SoS model. The model query is used to
    look for blocks that meet a set of requirements.![../images/520777_1_En_12_Chapter/520777_1_En_12_Fig4_HTML.jpg](../images/520777_1_En_12_Chapter/520777_1_En_12_Fig4_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12-4
  prefs: []
  type: TYPE_NORMAL
- en: A block’s building-blocks could be activated or disabled
  prefs: []
  type: TYPE_NORMAL
- en: It may also be used to see a model in a conventional perspective (such as showing
    the relationship between blocks and other blocks via lines).
  prefs: []
  type: TYPE_NORMAL
- en: To query a certain model, a user can right-click the working space and select
    Show Query Diagram. In the query diagram, the user can create filters for querying
    the model.^([1](#Fn1))
  prefs: []
  type: TYPE_NORMAL
- en: Returning true, for example, indicates that no filtration is necessary (i.e.,
    shows all the blocks for the model depicted in Figure [12-5](#Fig5)). This query
    generates the graph in Figure [12-5](#Fig5), which highlights all blocks of type
    RUMI using the filter:¹
  prefs: []
  type: TYPE_NORMAL
- en: '*return b. of type == RUMI*'
  prefs: []
  type: TYPE_NORMAL
- en: Model querying assists in the visualization of custom SoS views and can help
    discover design problems.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new connection to a block is a simple process. Using connections to
    existing blocks is one approach to constructing an SoS. Creating connections/links
    can let you reuse an available block, but it’s not the same as copying and pasting
    a block into BLOCKLY. The connected blocks are referenced via links. For example,
    on a workspace, CSs can be formed and only connections can be joined to the SoS
    block, as illustrated in Figure [12-5](#Fig5).![../images/520777_1_En_12_Chapter/520777_1_En_12_Fig5_HTML.jpg](../images/520777_1_En_12_Chapter/520777_1_En_12_Fig5_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12-5
  prefs: []
  type: TYPE_NORMAL
- en: Filtered view of SoS
  prefs: []
  type: TYPE_NORMAL
- en: The modular SoS grouping enables the modularization of the design by allowing
    suitable blocks to be grouped together. For example, as illustrated in Figure
    [12-6](#Fig6), all CSs can be clustered together. The group block aids in the
    division of the model into useful groups.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever a group’s block is mentioned, the group name is also included to distinguish
    it from other blocks with similar titles.![../images/520777_1_En_12_Chapter/520777_1_En_12_Fig6_HTML.jpg](../images/520777_1_En_12_Chapter/520777_1_En_12_Fig6_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12-6
  prefs: []
  type: TYPE_NORMAL
- en: Type Indicator cs4 plug-ins are shown with in yellow
  prefs: []
  type: TYPE_NORMAL
- en: 12.2 Environment for SoS Behavior Simulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Behaviors  can be introduced to any block after a static model has been created.
    The user can add a behavior by right-clicking the affected block and selecting
    Add Behavior. The Python programming language may be used to write behaviors,
    which represents the code that will be performed throughout the simulation ( as
    seen in Figure [12-7](#Fig7)).
  prefs: []
  type: TYPE_NORMAL
- en: The titles of the init, start, and run functions can be specified, and they
    are performed during startup, block startup, and simulation execution, respectively.
    A service block’s run function has a specific understanding and is presented as
    a TCP-IP server.¹
  prefs: []
  type: TYPE_NORMAL
- en: All the behavior code created for all the blocks is merged into a single file
    during code generation. XML and Code generation The model may be produced to XML
    and code for simulating after it has been imported by clicking the necessary buttons
    on the tool’s top-right side.¹
  prefs: []
  type: TYPE_NORMAL
- en: The following format is used to generate unique object names for all blocks:<blocktype>
    <blockname> <blockid>
  prefs: []
  type: TYPE_NORMAL
- en: '**Components of a simulator**. The simulator is a collection of Python scripts
    that are used to run the designer’s intended scenarios. The simulator’s main components
    are the object initializer, directory, activity diagrams, GUI, program execution
    sequence diagram, log generation, and clock.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Initializer for objects**. The simulation uses the constructor of every block
    described in the model to initialize it. Individual inputs are treated as texts,
    numbers, or objects, whereas many inputs are treated as an array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![../images/520777_1_En_12_Chapter/520777_1_En_12_Fig7_HTML.jpg](../images/520777_1_En_12_Chapter/520777_1_En_12_Fig7_HTML.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-7
  prefs: []
  type: TYPE_NORMAL
- en: Blocks linked to requirements management are an example of such blocks
  prefs: []
  type: TYPE_NORMAL
- en: A member named “cardinality” may be found in some blocks such as CS or Wrapper
    or CPS. It specifies the number of items that will be simulated. This is accomplished
    by using Python’s deep_copy() method  on the original object. Every instance is
    given a unique ID ranging from 1 to *n,* where *n* is the model’s cardinality.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the following model generates an SoS called My_SoS with 200 CSs
    named cs_1. Every CS will have an instance ID property that ranges from 1 to 200.
  prefs: []
  type: TYPE_NORMAL
- en: One of the key components of the simulator is the log. It is a service that
    keeps track of the services provided by the various CSs in an SoS. CSs utilize
    it to do analysis for a certain service.
  prefs: []
  type: TYPE_NORMAL
- en: The registry is applied as a TCP-IP server in the simulator, allowing CSs to
    add, remove, and update their own relevant details.
  prefs: []
  type: TYPE_NORMAL
- en: The capacity to perform simulation on several linked computer systems sequence
    diagram sets is made possible by having a known common register. Related blocks
    for sequence diagrams assist in the creation of unambiguous sequence diagrams
    that may be immediately translated to code. The simulation replicates the sequence
    created by the user in the case of diagrams.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, when the simulator has been launched and initialized, the code
    created from the sequence diagram (see Figure [12-8](#Fig8)) is run instantly.
    To simulate a situation, a sequence diagram is joined to the model (see Figure
    [12-9](#Fig9)); the sequence diagram is constructed with the support structure
    tool.![../images/520777_1_En_12_Chapter/520777_1_En_12_Fig8_HTML.jpg](../images/520777_1_En_12_Chapter/520777_1_En_12_Fig8_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12-8
  prefs: []
  type: TYPE_NORMAL
- en: Each block can fulfill certain criteria
  prefs: []
  type: TYPE_NORMAL
- en: '![../images/520777_1_En_12_Chapter/520777_1_En_12_Fig9_HTML.jpg](../images/520777_1_En_12_Chapter/520777_1_En_12_Fig9_HTML.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-9
  prefs: []
  type: TYPE_NORMAL
- en: An illustration of a constraint in which the validity of the member variable
    m is checked
  prefs: []
  type: TYPE_NORMAL
- en: '![../images/520777_1_En_12_Chapter/520777_1_En_12_Fig10_HTML.jpg](../images/520777_1_En_12_Chapter/520777_1_En_12_Fig10_HTML.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-10
  prefs: []
  type: TYPE_NORMAL
- en: Using constraints to detect emergence in a model
  prefs: []
  type: TYPE_NORMAL
- en: '![../images/520777_1_En_12_Chapter/520777_1_En_12_Fig11_HTML.jpg](../images/520777_1_En_12_Chapter/520777_1_En_12_Fig11_HTML.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-11
  prefs: []
  type: TYPE_NORMAL
- en: Result of the “return true” query
  prefs: []
  type: TYPE_NORMAL
- en: 12.3 Review Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: “BLOCKLY is a library for creating applications with blocks. Users can utilize
    visual blocks to construct scripts and programs in block programming.” Is this
    statement correct or incorrect?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2.Which of the following describes BLOCKLY 4SoS ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Each block represents a portion of code that can be layered and converted into
    a metamodel with ease.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: b.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Each block represents a portion of code that could be stacked and converted
    into an algorithm with ease.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: c.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Each block represents a coding chunk that can be readily stacked and translated.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: d.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All the above.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 3.Which of the following statements is correct for *simulator* components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A simulator is a collection of Python programs that are used to run the designer’s
    intended scenarios.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: b.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A simulator is a collection of programs designed to carry out the designer’s
    planned scenarios.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: c.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A simulator is a collection of Java applications that are used to run the scenarios
    that the designer has prepared.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: d.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 4.Which of the following statements is correct for *event* ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: BLOCKLY comes with everything you need to create and render blocks in a drag-and-drop
    editor.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: b.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: BLOCKLY comes with everything you need to define and display blocks.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: c.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: BLOCKLY comes with everything you need to create and render blocks in an editor.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: d.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of these.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: “Requirements management is a crucial component of the SoS architecture, since
    it allows for the viewing and monitoring of requirement traceability. The perspective
    and building blocks can be used to split requirements.” Is this statement correct
    or incorrect?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 12.4 Review Answers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Answer: Correct, BLOCKLY is a library for developing block-based apps. In block
    programming, users can use visual blocks to create scripts and programs.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Answer: C, Every block represents a coding chunk that could be readily stacked
    and translated.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Answer: B, A simulator is a collection of programs designed to carry out the
    designer’s planned scenarios'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Answer: A, BLOCKLY comes with everything you need to create and render blocks
    in a drag-and-drop editor.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Answer: Correct, because it enables for the viewing and monitoring of requirement
    traceability, requirements management is a critical component of the SoS design.
    To divide needs, the viewpoint and building blocks can be employed.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 12.5 Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter explained the BLOCKLY 4SOS tool. It is a system-of-systems modeling,
    validation, querying, and simulation tool.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of the AMADEOS supporting facility is to make designing SoS with the
    AMADEOS ideas and the BLOCKLY tool simple and intuitive. This tool is very helpful
    when designing a distributed system (a cyber-physical system).
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter outlines the first project of cyber-physical systems with the
    help of Kilobots.
  prefs: []
  type: TYPE_NORMAL
