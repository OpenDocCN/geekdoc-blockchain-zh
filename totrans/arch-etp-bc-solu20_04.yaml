- en: Chapter 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Architecting Your Enterprise Blockchain
  prefs: []
  type: TYPE_NORMAL
- en: This chapter discusses architecting enterprise applications as well as architecting
    blockchain services with enterprise best practices. I also cover enterprise blockchain
    integration, scalability, and security. When architecting a blockchain service,
    note that your design will be mainly focused on an enterprise blockchain. As you
    know, blockchains are distributed ledgers and flat non-SQL databases that scale
    differently. When compared to traditional relational databases such as SQL, blockchains
    are slower from a performance perspective, which we must consider in our use cases.
  prefs: []
  type: TYPE_NORMAL
- en: '**THIS CHAPTER HAS BEEN BROKEN DOWN TO COVER EACH BLOCKCHAIN INDIVIDUALLY AND
    THUS KEEP CONTINUITY FOR THE READERS. THE FOLLOWING BLOCKCHAINS ARE COVERED:**'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Fabric
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quorum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For information about additional blockchains, including Multichain, NEO, and
    others, please refer to the book''s website (`[www.wiley.com/go/blockchainsolutions](http://www.wiley.com/go/blockchainsolutions)`)
    for updated content.  ## Blockchain Technology Focus Areas'
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain technology has the core characteristics of decentralization, accountability,
    and security. These characteristics are important to understand when designing
    a blockchain service.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchains are used in two main categories of IT solutions, either public permissionless
    or private enterprise permissioned blockchains. Another approach is to combine
    both private and public blockchain services into a hybrid solution. Whether you
    are working at a private enterprise, a federal government agency, or a nonprofit
    entity considering blockchain ledger technology, there may be several viable use
    cases to consider for a blockchain in your organization. One blockchain use case
    may be a good fit for a nonprofit entity, but that same use case may not be a
    viable use case for a private enterprise.
  prefs: []
  type: TYPE_NORMAL
- en: '### Blockchain Success Areas'
  prefs: []
  type: TYPE_NORMAL
- en: One of the main areas I believe blockchains will succeed in are specific industries
    that work closely together in a collaborative format, such as in a consortium.
    For example, the insurance industry is a big proponent of the blockchain mainly
    because blockchains allow not only the sharing of data but also the sharing of
    costs, actuary data, and responsibilities such as compliance, and the enablement
    of their stakeholders. The insurance industry sees blockchains as a new business
    opportunity and even a new business model especially with actuary-related services.
  prefs: []
  type: TYPE_NORMAL
- en: Another industry that clearly will be big winners in the blockchain arena are
    the “financials,” such as interbank transfers, currency exchanges, derivatives,
    or even risk mitigation practices. Why? Because there are numerous layers of intermediaries
    that essentially are considered overhead to these financial institutions. I have
    never been reluctant to state that the financial sector will go mainstream with
    blockchain technology. This is actually starting to happen with numerous announcements
    from JP Morgan, HSBC, Goldman Sachs, and more than 30 large international banks
    announcing blockchain projects. Blockchains will be used as a method for cost
    cutting as well as risk mitigation.
  prefs: []
  type: TYPE_NORMAL
- en: Employees are considered overhead by executives and company shareholders; thus,
    that “burdened” salary is clearly costing the company shareholders. Traditional
    roles such as corporate attorneys, accountants, or other intermediaries with routine
    tasks essentially will be targets in the coming years.
  prefs: []
  type: TYPE_NORMAL
- en: One of the main benefits that blockchains can certainly provide through the
    proper implementation of smart contracts is cost efficiencies. Smart contracts
    can reduce mistakes in manual processes, reduce fraud, and reduce costs per transaction,
    while actually providing improved customer experiences and meeting compliance
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3.1](#c03-fig-0001) shows an example consortium-based blockchain trading
    application where the seller (exporter) is being paid in Bitcoin and the buyer
    (importer) is converting USD for trade.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flow chart of blockchain trade consortium-based application from blockchain
    contract to exporter and then to smart contract at left and right with the descriptions
    of financing trade with consortium blockchain at top and blockchain can provide
    a highly efficient and compliant trade system at bottom.](images/c03f001.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.1**](#R_c03-fig-0001) Blockchain trade application'
  prefs: []
  type: TYPE_NORMAL
- en: In the scenario shown, the exporter is converting Bitcoin into USD. This cryptocurrency
    to fiat currency conversion could be done efficiently with a smart contract. Note
    that there would be a payment gateway interface as part of a smart contract to
    exchange Bitcoin for fiat currency such as USD. This scenario would also provide
    increased efficiency for trade due to the automation of the blockchain, removing
    the need for costly manual processes. The ledgers would be immutable and would
    also provide immediate compliance adherence due to the blockchain data structure.
    The blockchain architecture allows for the trade information to be sent as digital
    information, which is distributed, rather than copied. This distributed ledger
    data structure provides transparency, trust, and data security for the members
    of the consortium.
  prefs: []
  type: TYPE_NORMAL
- en: 'Blockchain technology is being used successfully in the financial services
    industry. Financial services companies are using this technology for record-keeping,
    digital notary services, payment services, interbank transfers through the use
    of solid distributed applications, and smart contracts.  ### Blockchain Compliance'
  prefs: []
  type: TYPE_NORMAL
- en: Blockchains are excellent for maintaining an immutable history for several reasons
    whether for ensuring compliance such as for Global Data Protection Regulation
    (GDPR) or for managing a chain of trust. The GDPR is a compliance requirement
    that mandates businesses to protect the personal data as well as privacy of European
    Union (EU) citizens for transactions that occur within the EU member states. This
    law also extends to other countries that have EU citizens as customers. Blockchains
    could be used, for example, for GDPR requirements that can be held on the blockchain.
    Then for facets such as the “right to be forgotten,” a blockchain would not be
    suitable but could be integrated with an off-chain database to adhere to the GDPR
    requirements. Certain data may or may not be appropriate to store even within
    a permissioned blockchain network.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on GDPR and other common compliance requirements, refer
    to [Chapter 9](c09.xhtml), “Blockchain Governance, Risk, and Compliance (GRC),
    Privacy, and Legal Concerns.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, every organization will likely have different business drivers for
    going to a blockchain ledger platform. Whether this business driver is focused
    on compliance, collaboration, cost efficiency, providing digital assets, or providing
    transparency, as blockchain architects we must be able to put these drivers together
    and match them to a proper blockchain ledger technology solution use case and
    ultimately a working design.  ## Architecting a Blockchain Solution'
  prefs: []
  type: TYPE_NORMAL
- en: One of the first exercises we need to perform is to consider whether we have
    a strong use case for a blockchain. This would seem to be a one-question step.
    However, there will likely be customers who have potential requirements that would
    be a good use case for a blockchain and then perhaps one change in a stakeholder
    requirement could actually remove that requirement.
  prefs: []
  type: TYPE_NORMAL
- en: My main point is that this exercise of determining whether a use case is valid
    is not always a direct yes or no answer. However, it would likely be easy to determine
    whether or not you do have a solid use case or not after a few initial scoping
    questions.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, we want to understand what the pillars are for determining a valid
    use case that would be sustainable. Then we want to understand the enterprise
    architecture it would be integrated into. Another step may be to walk through
    a checklist or a questionnaire to address detailed information and assign a score
    to establish validity.
  prefs: []
  type: TYPE_NORMAL
- en: The following section walks you through processes of designing a solution that
    meets your customer requirements.
  prefs: []
  type: TYPE_NORMAL
- en: '### Blockchain Design Workflow'
  prefs: []
  type: TYPE_NORMAL
- en: Having a workflow can certainly provide significant instructions to help facilitate
    the design of a blockchain solution. Blockchain design can be complex, especially
    when you have compliance requirements or detailed use case objectives to meet
    in your design.
  prefs: []
  type: TYPE_NORMAL
- en: Following is the eight-step blockchain design workflow. Note that it may not
    be necessary to address the blockchain decision score spreadsheet (step 5). If
    the stakeholders have already decided on a specific blockchain platform, then
    proceeding to design would make sense.
  prefs: []
  type: TYPE_NORMAL
- en: Address the stakeholders.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Address the use case.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Address the blockchain decision tree.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Address the enterprise architecture tenets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Address the blockchain decision score spreadsheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Address the blockchain design.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Address the blockchain implementation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Address the blockchain tasking.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Lastly, we want to determine a proper platform that would provide a solid use
    case that could be implemented into the enterprise architecture.  ### Use Case
    Potential'
  prefs: []
  type: TYPE_NORMAL
- en: When considering whether a blockchain is a strong use case or not, we should
    review the pillars of that potential use case. The more pillars we have checked
    off, the stronger the use case. For example, if a customer does not have a requirement
    for a distributed and decentralized ledger, then our potential use case has been
    removed.
  prefs: []
  type: TYPE_NORMAL
- en: Several of the more compelling areas of accepting blockchain technology are
    the financial, logistics, and government sectors. These sectors show no signs
    of slowing down in their acceptance of blockchains as well as their investments
    in the technology.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain is on the radar for many other organizations and industry verticals
    no matter what may be discussed in the media. The challenge that the enterprise
    blockchain community has is that the enterprise technology is sometimes wrapped
    up in the same discussion as cryptocurrencies and the failed initial coin offerings
    (ICOs).
  prefs: []
  type: TYPE_NORMAL
- en: '#### STAKEHOLDERS'
  prefs: []
  type: TYPE_NORMAL
- en: Stakeholders are, of course, a critical area of focus not only from a pre-sale
    and post-sale perspective. In a sales-driven environment, it is all about providing
    stakeholder assurance of trust in the technology and the resulting value of the
    blockchain solution. Discussions around pain points but also discussions around
    prospective solutions should be addressed. Note also that stakeholders are generally
    going to be in one of three categories.
  prefs: []
  type: TYPE_NORMAL
- en: 'When speaking to technical, business, and legal audiences, we would want to
    clearly understand and address their concerns and ensure our responses are appropriate.
    For a technical audience, we should focus on implementation, development, and
    security. For a business audience, the focus should be on the value proposition,
    TTM, TCO, and ROI. For a legal audience, focus on compliance, privacy, and corporate
    governance.  #### PILLARS OF A STRONG BLOCKCHAIN USE CASE'
  prefs: []
  type: TYPE_NORMAL
- en: A *pillar* is a foundational principle or a baseline that supports the use case
    for even considering a blockchain. For example, if the data requirements specified
    are used by only one organization, then the data requirements would not be a strong
    use case for blockchain technology since a single organization would be a great
    use case.
  prefs: []
  type: TYPE_NORMAL
- en: However, a strong use case would be when you had a consortium requirement, for
    example, that required an immutable shared ledger utilizing smart contracts for
    international trade.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3.2](#c03-fig-0002) shows the commonly accepted four pillars of blockchain.
    You can see that the need for a ledger is clear and that the ledger really needs
    to be permanent and distributed. Smart contracts need to provide business value,
    and the blockchain network needs to provide a distributed network with no single
    point of failure.'
  prefs: []
  type: TYPE_NORMAL
- en: '![“Schematic diagram depicting four pillars of blockchain labeling distributed
    ledger with the description of need to share data across multiple companies; smart
    contracts with the description of business rules and data used in transactions
    should be visible to multiple members; distributed with the description of no
    central point of control or ownership (no shared server); indelible ledger with
    the description of need a permanent, indelible record of transactions.”](images/c03f002.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.2**](#R_c03-fig-0002) Four pillars of strong blockchain use cases'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the four pillars we can derive that if our use case requires an immutable
    record store, then proceed with considering a blockchain platform. On the other
    hand, if our use case does not require an immutable record store, then we should
    likely drop the consideration for a blockchain.  #### USE CASE PERSPECTIVES'
  prefs: []
  type: TYPE_NORMAL
- en: When considering use cases for an enterprise blockchain, it is imperative to
    understand that there is no single blockchain platform for every use case available.
    Even though some blockchain vendors sometimes will tout they are “cross industry,”
    you must realize that there are significant technical considerations that merit
    distinction. The reality is that some use cases are viable on one or more blockchains.
    On the other hand, if your use case points toward Ripple, then it's really only
    a good use case for that distributed ledger because Ripple is a financial-sector
    platform that does not support smart contracts.
  prefs: []
  type: TYPE_NORMAL
- en: When thinking of the blockchain, there are business requirements, technical
    requirements, and even legal or governance requirements. It's more than possible
    that a stakeholder's perspective could change or a new government policy such
    as GDPR could derail a blockchain project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are two common ways a blockchain project and use case could be
    derailed:'
  prefs: []
  type: TYPE_NORMAL
- en: Business requirements could be more focused on TCO or ROI and even time to market.
    Not being able to properly show a favorable TCO or ROI could derail the blockchain
    project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical considerations are generally more detailed, and the wrong understanding
    of the technical merits could derail the enterprise blockchain project. Integration
    into current enterprise infrastructure could also place challenges on your potential
    use case.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Legal requirements focus on the compliance, governance, privacy, and legal enforcement
    concerns of blockchains. Compliance requirements such as GDPR have been documented
    to remove the possibility of a successful blockchain project. Privacy concerns
    such as the right to be forgotten may not be met with an immutable solution such
    as a blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain vendors are generally either specialized in one sector such as financials
    or “cross industry,” meaning that they can fit use cases that span industries.
    For example, Ripple is clearly a financial-sector blockchain, while Hyperledger
    Fabric is a cross-industry blockchain. Because of this industry focus, the components
    may be somewhat different in nomenclature as well as how they are implemented.
    For example, in Corda we have a notary, but in Hyperledger we do not have a notary
    as a component.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the blockchain components are customized for specific use cases, such
    as consensus algorithms, distributed ledgers, pluggable components, encryption
    methods, and licensing models.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchains are based on an open source approach, and it shows in the blockchain
    development industry. “Tribal” support is more noticeably due because developers
    are working on specific features and feature sets that are “requested” or “sponsored.”
    In some blockchain platforms, features can also be pluggable or modular. This
    is true especially in some enterprise blockchain frameworks such as Hyperledger.
  prefs: []
  type: TYPE_NORMAL
- en: 'Features that are pluggable or modular allow for some choices to be tested
    such as consensus algorithms. Blockchains that are more flexible in some areas
    may present themselves as a better solution. Use cases need to be established,
    and the use case can be challenged once there is a significant change whether
    its business, legal, or technically driven.  #### BLOCKCHAIN DECISION TREE'
  prefs: []
  type: TYPE_NORMAL
- en: There are significant numbers of blockchain decision trees that have been floated
    out by the academic, corporate, and even governmental agencies. The main focus
    is to really understand your use case and try to determine if the appropriate
    blockchain decision tree will work in your sales organization and your customer
    base. If your customer base consists of dedicated financial companies, you may
    want a separate decision tree and even checklist for nonfinancial customers.
  prefs: []
  type: TYPE_NORMAL
- en: I like to address decisions that have multiple choices or a decision tree approach
    to making a platform decision. Anything that can give a clear decision around
    choosing a blockchain platform is excellent.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3.3](#c03-fig-0003) shows a decision tree that represents my personal
    approach, which should enable you to decide between a private, hybrid, or public
    blockchain. There are two end decisions, and we will come to one depending on
    our requirements. Do we need privacy or not for our transactions? If so, then
    go with a permissioned blockchain if our transaction will not be public.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image described by caption and surrounding text.](images/c03f003.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.3**](#R_c03-fig-0003) Blockchain decision tree'
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to making decisions for a specific blockchain, I generally like
    to look at charts that show features and functions to get me on the path of determining
    whether the customer should use Hyperledger Fabric or R3 Corda. The decision between
    two blockchains could be based solely on having channels versus not having channels.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3.4](#c03-fig-0004) shows an alternate example of a blockchain decision
    tree.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image described by caption and surrounding text.](images/c03f004.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.4**](#R_c03-fig-0004) Alternate blockchain decision tree'
  prefs: []
  type: TYPE_NORMAL
- en: 'Decisions will need to be made based on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trust
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third parties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transaction interaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When following any decision tree, you will want to consider whether it makes
    sense in your use case. One size does not fit all.  #### BLOCKCHAIN DECISION CHECKLISTS'
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to making decisions, sometimes a good old Excel spreadsheet can
    help. When considering a spreadsheet, it is advisable to establish a few different
    versions to address your customer base. In reality, there is no one size fits
    all for blockchain questions, and you would want to be creative and address your
    audience in an appropriate manner.  ## Blockchain Structure and Components'
  prefs: []
  type: TYPE_NORMAL
- en: Blockchains are structured differently from the traditional architecture of
    the World Wide Web, which uses a more centralized client-server network. The structure
    and the components of the blockchain network will be different and will vary between
    blockchain solutions.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of the permissionless distributed network of blockchain architecture,
    each participant (node or a user) within the network maintains, approves, and
    updates new entries. The system is controlled not only by separate individuals
    but by everyone within the blockchain network. Each member ensures that all records
    and procedures are in order, which results in data validity and security.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3.5](#c03-fig-0005) compares a client-server topology to a P2P topology.
    This P2P network consists of several nodes (computers), and they are running a
    virtual machine that would have blockchain protocols.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flow diagrams comparing client-server topology to a P2P topology with smartphone,
    PC, server, and laptop in the former and only laptops in the latter.](images/c03f005.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.5**](#R_c03-fig-0005) Comparing client-server topology to P2P topology'
  prefs: []
  type: TYPE_NORMAL
- en: For more information on blockchains compared to traditional databases, please
    refer to [Chapter 1](c01.xhtml), “Introduction to Blockchain Technologies”.
  prefs: []
  type: TYPE_NORMAL
- en: '### Blockchain Structure'
  prefs: []
  type: TYPE_NORMAL
- en: The structure of blockchain technology is represented by a list of blocks that
    are ordered, with these blocks represented as transactions in a particular order.
    These ordered lists can be stored as a flat file or in the form of a document
    database using NoSQL such as Cloud Datastore in Google Cloud Platform or DocumentDB
    in AWS.
  prefs: []
  type: TYPE_NORMAL
- en: There are two important data structures that are used in blockchain, and they
    are referred to as the *pointers* and the *linked lists*. The main purpose of
    this section is to address how a permissionless blockchain might handle a block
    of data and write to a blockchain. In the individual blockchain sections for Hyperledger
    Fabric, Corda, Ethereum, and Quorum, I will highlight specifics as to how these
    blockchain ledgers address the data structure in more detail. So, take these examples
    as more of a generic structure than a one-size-fits-all kind of structure.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3.6](#c03-fig-0006) shows the relationship between data structures
    in blockchain ledgers. We can see the direct relationship between the pointers
    and the linked lists in the data structure. When considering a blockchain solution,
    we would want to understand how these data structures are handled from a latency
    perspective, for example. Your blockchain developer would, of course, want to
    be aware of this when developing the blockchain application and connecting to
    the blockchain network.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flow diagram comparing direct relationship between the pointers and the linked
    lists in the data structure with arrows to and from each other.](images/c03f006.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.6**](#R_c03-fig-0006) Blockchain data structures'
  prefs: []
  type: TYPE_NORMAL
- en: The blockchain data structure is a back-linked record of blocks of transactions
    that are ordered links. Each block may be recognized by a hash, created utilizing
    the SHA256 cryptographic hash algorithm on the header of the block. Each block
    will refer to the previous block, which is identified as the parent block, in
    the “previous block hash” field.
  prefs: []
  type: TYPE_NORMAL
- en: The following represents common terminology in distributed ledger technology
    around the blockchain ledger data structure.
  prefs: []
  type: TYPE_NORMAL
- en: The *index* represents the location of the block on the blockchain ledger and
    essentially an address for locating blocks.
  prefs: []
  type: TYPE_NORMAL
- en: The *hash* is the function that facilitates the rapid classification of data
    in the dataset that is provided in the blockchain ledger.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A *nonce* is a random number that is assigned as part of a hash on the blockchain.
    Nonces provide for increased security in the sense that it can be used only once
    in a blockchain and make it hard to replay the transaction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pointers are known as *hash pointers* and are used to build a linked list for
    the blockchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A *record* is the block transaction written to the blockchain and then committed
    to the ledger. These records are considered immutable in most enterprise blockchain
    ledgers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A *timestamp* will save the time aspects of when the block was built as well
    as when it was transacted in some enterprise blockchains.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A *Merkle tree* is a summary of the hashing list of the blockchain and provides
    for the efficient verification of the blockchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A hashing list is descriptive list of hashes of the data blocks in the blockchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Figure 3.7](#c03-fig-0007) shows the linking of the blocks that create the
    data structure. We can see that there are records. These records are written to
    the blockchain. The pointers are building the linked list. Hashing is involved;
    you should note that each hash points to the previous hash as part of this linking.
    The first block does not contain the pointer since this one is the first in a
    chain and known as the *genesis block*.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image described by caption and surrounding text.](images/c03f007.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.7**](#R_c03-fig-0007) Example of a blockchain data structure'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3.8](#c03-fig-0008) shows a detailed blockchain sequence diagram, which
    is a connected list of records. We can see hashing is involved where each hash
    points to the previous hash as part of this linking. The Merkle root is the top
    part of the Merkle tree. The leaves are data blocks, and the nodes further up
    in the tree are the hashes of their respective children.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image described by caption and surrounding text.](images/c03f008.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.8**](#R_c03-fig-0008) Blockchain sequence'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are certainly more concepts around blockchain transactions to understand,
    but for the purpose of this book, the main goal is to provide insight into how
    these blockchains manage transactions. The upcoming sections will provide insight
    into how Hyperledger Fabric differs, for example. From a design perspective, this
    could affect transactions per second (TPS) if one blockchain orders transactions
    before validating.  ### Blockchain Core Components'
  prefs: []
  type: TYPE_NORMAL
- en: This section covers the main core blockchain components. This list is not specific
    to any blockchain platform but more of a vendor-neutral component list. For example,
    Hyperledger and Ethereum have vastly different components in some respects.
  prefs: []
  type: TYPE_NORMAL
- en: '*Nodes* are generally virtualized users'' components, applications, or servers
    within the blockchain architecture.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Transactions* are the smallest building block of a blockchain network, and
    they keep track of anything of value that could be currency, goods, documents,
    and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Blocks* are part of a data structure that is known as a blockchain ledger.
    Blocks are similar to a page in the book where it is recorded. These blocks are
    ordered and are what form a blockchain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Chain* is a sequence of blocks in a blockchain. The sequence and features
    of the chain of blocks that are supported is determined and maintained by the
    blockchain protocol.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Miners* are specific nodes that perform the actual work on a blockchain. They
    provide block validation, ordering, and even record-keeping for the blockchain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Consensus* is the method or policy set for the blockchain. Essentially, consensus
    is how the decision is made to update the ledger with transactions that also determines
    the state of the blockchain. Consensus is also referred to as the consensus mechanism
    or consensus agreement in some blockchains.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Validity rules* (validation) state how the user and the transactions will
    be validated. This validation process sometimes may occur before a transaction
    is ordered and written to the blockchain depending on the blockchain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Smart contracts* are the fundamental value where pieces of code can automatically
    check that the terms of the contract have been fully met by the involved third
    parties. Once the terms are validated (consummated), the smart contract code would
    record it against the blockchain ledger and effectively close the contract.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Figure 3.9](#c03-fig-0009) shows the general layout of common blockchain components.
    All these components come together to provide a robust blockchain service for
    the proper use case. When it comes to specific components with specific blockchains,
    there could be other components such as a Membership Service Provider, Certificate
    Authority, Notaries, Oracles, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image described by caption and surrounding text.](images/c03f009.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.9**](#R_c03-fig-0009) Blockchain components  ## Enterprise Blockchain
    Architectures'
  prefs: []
  type: TYPE_NORMAL
- en: Enterprises have strict requirements and therefore tend to choose applications
    and services that support those requirements. Blockchains were not initially developed
    for enterprise applications and were more focused on cryptocurrency transactions.
    Of course, this has changed with the release and the evolution of consortium blockchains
    such as Hyperledger and R3 Corda that have an active corporate user base.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchains also were originally developed as permissionless platforms such
    as Bitcoin. Ethereum came along and expanded upon blockchains as not only a cryptocurrency
    platform but also as a use-case platform or a development platform. Ethereum was
    designed to be a permissionless blockchain, but now with the advent of channeling
    and off-chains. Off-chains mean that your application is extending out of the
    enterprise blockchain for a specific purpose such as a payment gateway. For example,
    Ethereum can now be extended to the enterprise for specific use cases quite simply
    and effectively.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to architecting solutions for blockchains for an enterprise, it
    is important to understand how enterprise architectures have been approached.
    Consider your current enterprise architecture best practices and reference any
    of the enterprise architecture frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: In some widely accepted enterprise architecture frameworks, there are four pillars
    or domains focused on architecture. The purpose of the enterprise architecture
    framework domains is to guide your organization's business, information, process,
    and technology decisions in order to enable the organization to execute its business
    strategy and meet your customer's requirements.
  prefs: []
  type: TYPE_NORMAL
- en: TOGAF is the most widely used out of the common enterprise frameworks. These
    frameworks include ISO, DoDAF, and UPDM. I will focus on TOGAF enterprise domains
    for this book since it's the most widely accepted and actually can correlate to
    blockchains as well.
  prefs: []
  type: TYPE_NORMAL
- en: '### TOGAF Domains'
  prefs: []
  type: TYPE_NORMAL
- en: Before diving into blockchain architectures, it makes sense to establish a baseline
    of what enterprise architecture is. The best starting point is to review the TOGAF
    standard. A baseline in enterprise architecture (EA) is a critical point for organizations.
    Without a baseline, essentially business outcomes would not meet the objectives
    or even work out for that matter.
  prefs: []
  type: TYPE_NORMAL
- en: TOGAF is a well-known acronym for the Open Group Architecture Framework, which
    was developed by the Open Group. The Open Group is a not-for-profit technology
    industry consortium that continues to update and reiterate the TOGAF enterprise
    architecture domains. The TOGAF standard is the de facto standard for enterprise
    architecture frameworks. TOGAF provides the specific methods, processes, and standards
    for enabling the acceptance, production, use, and maintenance of an enterprise
    architecture.
  prefs: []
  type: TYPE_NORMAL
- en: The first version of TOGAF, released in 1995, was based on the Technical Architecture
    Framework for Information Management (TAFIM) specification developed by the US
    Department of Defense (DoD).
  prefs: []
  type: TYPE_NORMAL
- en: DoD gave the Open Group explicit permission to create TOGAF by building on TAFIM,
    and TOGAF has been continuously evolving since then.
  prefs: []
  type: TYPE_NORMAL
- en: Essentially, without a framework, connecting corporate enterprise strategy to
    projects online would be challenging. Blockchain projects are more complex because
    of the lack of knowledge and expertise in the area.
  prefs: []
  type: TYPE_NORMAL
- en: 'The four domains of the TOGAF enterprise architecture are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The business architecture domain** states how the enterprise is organizationally
    structured. This domain also provides insight into what functional capabilities
    are necessary to deliver on the business vision.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The application architecture domain** provides insight into the enterprise
    applications and relationship to the core business processes of the enterprise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The data architecture domain** provides insight into the structure of an
    organization''s data assets as well as insight into the data management resources
    available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The technology architecture domain** states the requirements needed to actually
    implement the enterprise applications.  ### What, Who, and How of Enterprise Architecture'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When it comes to architecting solutions, it is important to establish the “what,
    who, and how” of enterprise architectures.
  prefs: []
  type: TYPE_NORMAL
- en: What is the organization's business vision, strategy, and objectives that guide
    this creation of a blockchain service?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who is responsible for executing the defined blockchain services?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How are any previously defined business services or capabilities implemented
    with blockchain services?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Simply put, knowing your customers'' history and interests can matter in your
    blockchain design.  ### Tenets'
  prefs: []
  type: TYPE_NORMAL
- en: Tenets are organizationally defined rules and guidelines that the organization
    uses for accomplishing its mission.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3.10](#c03-fig-0010) highlights common enterprise architecture tenants
    that can be used around blockchains. When it comes to discussing the enterprise
    architecture (EA) tenants with your customer, you may want to address them by
    whiteboarding them with the customer. These tenants could be valuable in your
    discussions with stakeholders and may be used in application design. The defined
    tenets should guide application governance and provide concise architectural review.
    Perhaps they can even enhance your enterprise blockchain adoption performance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a nutshell, you should consider approaching a blockchain application as
    an enterprise application. This means determining which enterprise architecture
    framework makes sense in your organization and applying the basic tenets that
    correlate to the enterprise architecture. The blockchain application may or may
    not be deployed enterprise-wide or even integrated enterprise-wide for the initial
    deployment. Addressing enterprise concerns ahead of time could certainly enhance
    stakeholder acceptance, adoption, and delivery of a blockchain solution. ![Diagram
    depicting nested circles from outside to inside: Assurance of Business Continuity;
    Enterprise Agility; Security First; Increase Efficiency; Globally Diverse and
    Locally Focused; Blockchain First Strategy.](images/c03f010.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '[**FIGURE 3.10**](#R_c03-fig-0010) Enterprise architecture tenets'
  prefs: []
  type: TYPE_NORMAL
- en: '### Blockchain Design'
  prefs: []
  type: TYPE_NORMAL
- en: When designing any enterprise blockchain application, it is critical to establish
    the requirements, baselines, features, functions, and scalability of the blockchain
    that is being evaluated or proposed.
  prefs: []
  type: TYPE_NORMAL
- en: From an architecture perspective, you want to consider some of the common permissionless
    blockchain features and determine which features are important to your enterprise
    when evaluating blockchain services.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchains are generally decentralized, and thus there are no centralized points
    of failure, at least theoretically. All information transiting through the blockchain
    is visible to every node, and information cannot be removed from the blockchain
    because of immutability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchains holistically are defined by peer-to-peer networks with peer-to-peer
    resources that are distributed as well as decentralized. Blockchains in their
    true form are not centralized databases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchains are inherently secure due to the security built in with encryption
    and also can enhance privacy and security. They can even enhance compliance requirements
    for an organization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain networks scale horizontally quite well by adding nodes to the network,
    but blockchains do not scale well vertically due to latency that can be imposed,
    for example, by the virtual machines.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transaction processing is dependent on consensus algorithms such as proof of
    work, proof of stake, or any of the other options you may choose. The choice of
    consensus and the blockchain platform used can have a significant effect on the
    outcome of the blockchain services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Traditionally, enterprises have been focused on the centralized control of
    resources, and in specific regard to blockchain using a permissioned blockchain
    makes sense where the enterprise could benefit from a blockchain.  ### Enterprise
    Blockchain Adoption Challenges'
  prefs: []
  type: TYPE_NORMAL
- en: As previously mentioned, there are three ways to approach defining a blockchain.
    Blockchains should be defined according to the audience you're speaking to, and
    this simple approach can help facilitate acceptance and adoption of the blockchain
    proposal.
  prefs: []
  type: TYPE_NORMAL
- en: During stakeholder meetings, calls, or emails, remember the audience and how
    to specifically address the audience at hand. If you're speaking to the technical
    engineering group, then speak technically such as “speeds and feeds” of the blockchain.
    If you are speaking with corporate counsel, then use legal jargon when discussing
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Some challenges for the enterprises around blockchain adoption are focused on
    the audience you're speaking with.
  prefs: []
  type: TYPE_NORMAL
- en: '*Business challenges* can include business costs, funding requirements, corporate
    governance, executive vision, stakeholder buy-in, and corporate culture. It''s
    also reasonable to expect a company to react to how competition utilizes the blockchain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Legal challenges* can abound, especially in sectors such as finance, insurance,
    and logistics that may not adjust well to the “disintermediation” of financial
    services. This means that trust or acceptance may not be fully realized because
    of compliance requirements, such as PCI, SOX, or GDPR. In the case of GDPR, using
    a true blockchain solution can be a challenge since blockchain nodes may be distributed
    out of the regulatory body jurisdiction or not centrally managed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Technology challenges* can be around performance such as transactions per
    second (TPS), integration with legacy applications, middleware, application stakeholder
    buy-in, and addressing technical issues around privacy and security.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note that this is not an inclusive list of challenges around enterprise blockchains.  ###
    Risk Management'
  prefs: []
  type: TYPE_NORMAL
- en: If you work for a government integrator, you may be familiar with the Risk Management
    Framework guidelines specified in NIST 800-37\. The Risk Management Framework
    provides an essential connector that integrates both the critical security and
    risk management activities into the system development lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation can also be used by nongovernmental organizations to help
    them establish a risk-based approach to security control selection and specification
    considerations.
  prefs: []
  type: TYPE_NORMAL
- en: There are some activities related to managing organizational risk that are critical
    to an effective information security program. What is really useful is that they
    may be applied to both new and legacy systems within the detailed context of the
    system development lifecycle and the Federal Enterprise Architecture. This applies
    to blockchains as well even though there are no current best practices for blockchain
    in the federal government documented by NIST.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the risk management activities a federal integrator may become
    familiar with:'
  prefs: []
  type: TYPE_NORMAL
- en: Categorize the system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select controls.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement controls.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assess controls.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Authorize the system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Monitor controls.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For more information on the NIST Framework, refer to [Chapter 9](c09.xhtml).  ###
    Blockchain as a Hammer'
  prefs: []
  type: TYPE_NORMAL
- en: Anyone reading posts on LinkedIn, Medium, or Quora may assume that blockchains
    can solve every problem known to man. Some vendors, bloggers, and consultants
    constantly are shouting out that their blockchain solutions are solving epic world
    problems all the time.
  prefs: []
  type: TYPE_NORMAL
- en: Honestly, blockchain technology is no panacea, and in reality, it seems that
    blockchain technology is a “hammer in search of nails in a sandbox.” Blockchains
    must be considered as a targeted solution and must be effectively focused as a
    laser.
  prefs: []
  type: TYPE_NORMAL
- en: Lasers are finite tools that directly apply pulses of light that target an expertly
    focused area. One of the challenges that I continually run into is discussing
    with customers and students why their use case may or may not be a good blockchain
    use case. As a blockchain specialist, you must be able to address scenarios where
    a proposal for a blockchain is not appropriate, whether it is because the customer
    really needs the features of a centralized database, or because there is no consortium
    interest in a blockchain platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'The lesson learned should be that blockchains are no panacea and we must use
    blockchain solutions effectively in a directly focused manner such as a laser
    and not as a handyman with a hammer in search of a nail.  ## Enterprise Blockchain
    Design Principles'
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to designing your enterprise blockchain services, there are some
    key design principles, approaches, and even feature requirements to address.
  prefs: []
  type: TYPE_NORMAL
- en: You can certainly use software design approaches that work in your organizations
    such as ISO or Agile to help facilitate known enterprise practices. The reality
    is that blockchain design, development, and deployment are in their infancy.
  prefs: []
  type: TYPE_NORMAL
- en: From that perspective of infancy, I approach blockchains as if I were deploying
    a cloud application. You can expect to accommodate the same level of resources,
    requirements, and specialized expertise in most cases. Deploying a cloud service
    such as a database on AWS is similar and different all at the same time than if
    we were deploying a SQL database on GCP. SQL code may import and take the same
    structure, for example; however, both AWS and GCP support different versions of
    SQL differently.
  prefs: []
  type: TYPE_NORMAL
- en: In a nutshell, design is about bringing the requirements together for a blockchain
    application and placing them on a platform that meets those requirements. This
    platform can be on your enterprise's local premises or in a cloud provider's remote
    data center.
  prefs: []
  type: TYPE_NORMAL
- en: 'When considering a blockchain architecture for your enterprise, you would want
    to understand some of the features, benefits, and even trade-offs, listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: Trust
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consistency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Availability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security and privacy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compliance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Enterprise Blockchain Design Requirements'
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 1](c01.xhtml) we briefly reviewed aspects of blockchain design.
    This section builds on the first chapter and provides additional insight into
    making the proper design requirements. Design requirements, although fairly baseline
    in some industries, could be very different in other industries. For example,
    some companies may rate integrity higher on the requirements list than consistency.
    Understanding your customer design as well as enterprise architecture tenets,
    use cases, and pain points should help come to a solid blockchain architecture.
  prefs: []
  type: TYPE_NORMAL
- en: '#### DESIGN FOR INTEGRITY (IMMUTABILITY)'
  prefs: []
  type: TYPE_NORMAL
- en: Integrity can mean several things to different organizations, so let's clarify
    that integrity can also infer “trust” due to the immutability properties of the
    blockchain ledger. Immutability in the world of the blockchain really means that
    once something has been written to the blockchain, it cannot be modified, deleted,
    or tampered with by anyone or anything. On the other hand, we know that databases
    are centralized, whereas the blockchain is a truth agent that is decentralized.
  prefs: []
  type: TYPE_NORMAL
- en: When considering blockchain technologies, it is important to realize that the
    main reason blockchains were developed was centered around the lack of trust in
    legacy institutions such as banks and government institutions.
  prefs: []
  type: TYPE_NORMAL
- en: 'When designing a blockchain, it''s critical to consider the user and enterprise
    requirements. Maintaining user trust is critical to the design and your customer''s
    business. Organizations in industries from the financial sector to the defense
    industry rely on trust.  #### DESIGN FOR CONSISTENCY'
  prefs: []
  type: TYPE_NORMAL
- en: When considering the enterprise user experience, it is important to appreciate
    how the end user is accessing the blockchain application. You can likely approach
    this by understanding how the rest of the enterprise approaches enterprise application
    development for their legacy application. Providing a solid workflow for the users
    of the blockchain application would certainly help the adoption of these blockchain
    services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consistency should be focused not only on the application development but also
    on the user experience (UE). Blockchain application users should understand how
    the solutions work at least at a high level, which is more of a process level
    than a transactional level. Provide an experience that the users will want to
    participate in. In [Chapter 10](c10.xhtml), “Blockchain Development and Programming,”
    we discuss areas of usability, consistency, and trust, all of which are critical
    part of the application experience for the users.  #### DESIGN FOR AVAILABILITY'
  prefs: []
  type: TYPE_NORMAL
- en: Enterprises require a level of resilience where the blockchain networks should
    assume that failures are bound to happen. The enterprise must be prepared to keep
    the blockchain networks running during these situations.
  prefs: []
  type: TYPE_NORMAL
- en: High availability (resilience) requirements may vary by an enterprise vertical
    or line of business, blockchain application requirements, project funding, and
    many other factors based on the enterprise needs.
  prefs: []
  type: TYPE_NORMAL
- en: Enterprises should approach blockchain availability the same way that traditional
    enterprise applications handle redundancy. They often utilize service replication
    and redundancy to make sure that they stay available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enterprise blockchains need to deploy redundant peer nodes and clustered ordering
    services and also replicate other working blockchain network components to work
    seamlessly without any hindrances to blockchain application availability.  ####
    DESIGN FOR SECURITY AND PRIVACY'
  prefs: []
  type: TYPE_NORMAL
- en: Privacy and security concerns in the enterprise are no real surprise to enterprise
    architects. When designing your blockchain applications, it is recommended you
    approach privacy and security concerns with caution when anything is connected
    to a public network or even a private network that you may not control.
  prefs: []
  type: TYPE_NORMAL
- en: The need for enterprise-level blockchains is even greater than perhaps early
    on since enterprises generally deployed their blockchains in a private instance
    away from public networks. However, there are now more options that have been
    presented such as channels, off-chains, oracles, and the expanding new possibilities
    presented by blockchain, so it is imperative that companies get security and privacy
    correct.
  prefs: []
  type: TYPE_NORMAL
- en: Why? Blockchains are connected to a network whether or not it's a private or
    public network. Chances are that the network is generally connected to the Internet
    like just about every network I am familiar with. The one exception where a network
    is not connected to the Internet is in the case of a government classified Secret
    or Top-Secret network.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting your network to the Internet will expose your network to possible
    exploits whether or not you have the most updated network security posture.
  prefs: []
  type: TYPE_NORMAL
- en: Most companies should not want an exposure such as the far-reaching Equifax
    breach occurring on their enterprise network or blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: The Equifax hack exposed vulnerabilities but also the lack of responsibility
    companies routinely have around company data, which in turn is actually personal
    data. This is important especially because the confidence, trust, and reputation
    a company has essentially can be devastated by a lack of responsibility.
  prefs: []
  type: TYPE_NORMAL
- en: It is fair to say that data exposure with blockchain services should be considered
    just as risky as any Internet-based applications. That is, blockchains run on
    servers—specifically, Linux servers that contain open source software and those
    are the same servers that power the Internet. Anyone remotely familiar with Linux
    or Docker containers has the base knowledge to look for vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Digital identity is a concept in blockchain that could aid in the critical area
    of data privacy. Using specific digital identities could aid in the evolution
    of enterprise-grade protection on the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: 'The blockchain can also provide privacy without secrecy in another important
    way: through smart contracts. Put simply, a smart contract is logic that is programmed
    to ensure that if certain conditions are met by the requests that something particular
    will happen, such as a blockchain transaction, a message event being triggered,
    or funds being sent as a result of a contract signed.'
  prefs: []
  type: TYPE_NORMAL
- en: Since these are permissioned blockchains used by most enterprises using blockchains,
    all members must be known entities that are carefully vetted before they enter
    the enterprises membership ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Permissioned blockchains will have specific restrictions regarding who can actually
    participate in the blockchain. Access for new participants is handled in specific
    scenarios by specific conditions being met such as being provisioned by a membership
    certificate or transaction certification or being enabled by a policy.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are common schemes used in enterprise blockchains to grant membership
    to a blockchain network:'
  prefs: []
  type: TYPE_NORMAL
- en: Company employees or partners enrolled through the use of directory services
    such as LDAP or AD (directory services).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A consortium of companies that agree to participate in a membership schema that
    is funded by the member companies directly (membership fees). For example, an
    insurance consortium that shares actuary data between insurance consortium members.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consumers granted access for reasons such as enrollment, employment, or being
    a consumer of the enterprise.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regulators that are part of a government entity, trade association, or other
    regulatory body that needs to provide oversight in compliance areas such as SOX,
    GDPR, AML, or KYC.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'During the course of this book, I will be diving deep into the area of privacy
    and security concerns specifically related to enterprise blockchains. Security
    focused examples as well as designs are presented in the [Chapter 11](c11.xhtml),
    “Blockchain Security and Threat Landscape.”  #### DESIGN FOR PERFORMANCE'
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain performance is clearly a highly focused area where there is much
    debate on whether blockchains can scale to the levels we can attain with a traditional
    centralized database. The reality is that blockchains were never built or even
    considered for high performance. Blockchains were built for security, privacy,
    and immutability on a network that is decentralized as well as distributed.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchains are inherently slow and should not be compared to platforms such
    as Visa, SWIFT, or PayPal. Blockchains are being developed that will scale somewhat
    closer to Visa, but in reality, they would not be a blockchain but more of a Hashgraph.
  prefs: []
  type: TYPE_NORMAL
- en: However, the use case for competing with Visa for a higher number of transactions
    is really not there at this time when properly scoped use cases are considered.
  prefs: []
  type: TYPE_NORMAL
- en: Permissioned blockchains can certainly scale greater than permissionless blockchains
    because the number of nodes is controlled (permissioned) and the network node
    distribution is controlled as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Comparing a centralized application to a decentralized application is not exactly
    comparing “apples to apples.” It would not be fair to expect blockchains to compete
    in TPS with a legacy application due to its significantly different architecture.  ####
    DESIGN FOR TRUST'
  prefs: []
  type: TYPE_NORMAL
- en: Just because you have a blockchain solution won't likely mean that people will
    immediately trust the systems, data, or processes. When designing a blockchain,
    you should consider your user base and appreciate that trust is more than a word;
    it's a feeling and an experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an architect and developer, I generally want to verify that the processes
    are actually working as planned as well as that the data is sanitary. Sanitary
    means that the data has not been compromised, data is secure, and transactions
    are kept private as specified if required.  #### DESIGN FOR COMPLIANCE'
  prefs: []
  type: TYPE_NORMAL
- en: From a privacy compliance perspective, it matters greatly whether the blockchain
    is generally accessible or accessible only to users who are members of a closed
    group.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, privacy concerns may influence the assessment of whether data
    is transferred to countries that do not ensure adequate protection. For example,
    in the European Union there is a fairly new standard to meet called the General
    Data Protection Regulation (GDPR).
  prefs: []
  type: TYPE_NORMAL
- en: This marvel of a compliance structure is a legal framework that clearly defines
    guidelines for the collection and processing of personal information from individuals
    who live in the European Union (EU).
  prefs: []
  type: TYPE_NORMAL
- en: These EU regulations apply to every business regardless of where websites are
    based. The regulation must be applied by all sites that attract European visitors,
    with no exception, even if they don't specifically market goods or services to
    EU residents.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the GDPR, see `[https://www.bloomberg.com/news/articles/2018-03-22/is-your-blockchain-business-doomed](https://www.bloomberg.com/news/articles/2018-03-22/is-your-blockchain-business-doomed)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, it is possible that each party to the blockchain network has specific
    access only to part of the information stored via the blockchain and not off-chain.
    Each party has its own copy of the entire blockchain that is effectively restricted
    by encryption. Depending on how a blockchain is deployed, it may or may not meet
    compliance requirements that the enterprise needs to consider. Design for node
    locations, networking infrastructure, and enterprise integration all need to be
    considered. In [Chapter 9](c09.xhtml), I cover GDPR extensively around blockchain-related
    concerns.  ### Other Concerns—Deployment Model'
  prefs: []
  type: TYPE_NORMAL
- en: Blockchains can be hosted on-site in the enterprise architecture, in a shared
    model such as cloud computing Blockchain-as-a-service (BaaS) models, or in a managed
    service hosted, for example, with a VAR.
  prefs: []
  type: TYPE_NORMAL
- en: BaaS is a newer solution that has started to provide enterprises with options
    for deploying their blockchains for developing and testing and can be used for
    a proof of concept.
  prefs: []
  type: TYPE_NORMAL
- en: If you are deploying a blockchain in your own data center, then you already
    have a good idea of the costs of that data center space, upkeep, and procedures
    to consider. Most blockchains are deployed on various versions of Linux-based
    servers and virtual machines. Linux is the best-known and most-used open source
    operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to deploying Linux in your enterprise, there is no shortage of
    expertise available. The challenge will be on deploying your blockchain and the
    client applications that connect your blockchain networks. One area of expertise
    shortages is commonly around middleware, which acts as a translator from a legacy
    application to a blockchain application. During the course of this book, I will
    be discussing this in detail around both planning and deploying blockchain applications
    both on-premises and in the cloud.  ## Hyperledger Fabric'
  prefs: []
  type: TYPE_NORMAL
- en: 'This section covers Hyperledger Fabric, a permissioned cross-industry blockchain
    that has a pluggable framework. The following topics are covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Fabric selling points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger Fabric design considerations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger Fabric design example architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other than Ethereum, Hperledger Fabric is by far the most widely covered, discussed,
    and accepted blockchain platform. Finding information on Hyperledger Fabric will
    likely be fairly easy for whatever your project is because of its wide acceptance.
  prefs: []
  type: TYPE_NORMAL
- en: The global collaboration, hosted by The Linux Foundation, includes global leaders
    in aeronautics, finance and banking, healthcare, Internet of Things (IoT), supply
    chain, manufacturing, and technology. It currently boasts more than 222 members,
    and many of these members are actually competitors of each other.
  prefs: []
  type: TYPE_NORMAL
- en: So, what does Hyperledger Fabric actually do so well, and why does it have such
    great acceptance? Hyperledger has been enterprise focused from its inception as
    a consortium. Consortium members play a critical role in the development, planning,
    and implementation of its blockchain frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: '### Hyperledger Fabric''s Main Selling Points'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Fabric has several selling points, and these usually follow your
    design, meaning that you can choose to implement it as required.
  prefs: []
  type: TYPE_NORMAL
- en: Modularity, which is perhaps Hyperledger Fabric's main selling point.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wide acceptance of Hyperledger Fabric from a cross-industry perspective
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privacy through implementation of channels that partition the blockchain network
    and create a separate ledger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Scalability and performance due to the ability to scale on demand  ### Hyperledger
    Fabric''s Blockchain Design Considerations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger Fabric was intended for developing solutions with a modular architecture.
    Hyperledger allows the components to be essentially plug-and-play.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Fabric is a private and permissioned blockchain system and therefore
    needs to be designed differently. We would need to account for additional nodes,
    policies, a certificate authority (CA), and a membership services provider (MSP).
  prefs: []
  type: TYPE_NORMAL
- en: 'Hyperledger Fabric also offers a distinct approach to enable privacy through
    the use of channels. Channels allow for a group of participants to create a separate
    ledger of transactions and also maintain privacy. Hyperledger Fabric currently
    supports two database options for different use cases. The two current database
    options are CouchDB and LevelDB for storing the world state of the blockchain.  ###
    Hyperledger Fabric''s Advantages'
  prefs: []
  type: TYPE_NORMAL
- en: Since Hyperledger Fabric is a permissioned blockchain, it has some major advantages
    over other blockchain systems.
  prefs: []
  type: TYPE_NORMAL
- en: '**Permissioned Membership** Permissioning a blockchain clearly provides advantages
    of security, privacy, and even performance of the blockchain. Permissioned blockchains
    such as Fabric can also provide benefits around compliance requirements when properly
    designed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance and Trust** Fabric is a modular platform and can enable greater
    flexibility for an enterprise around transaction processing Data on Demand. Ledger
    data is clearly maintained and can easily be queried for compliance reasons, data
    analytics, and even security analysis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Historical Queries** The ledger has been designed for transaction queries,
    and the choice of databases can enable deeper insight. With CouchDB you can run
    a complex query and gain deeper insights into your data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modularity** Hyperledger provides the options for your enterprise blockchain
    to be as close to a plug-and-play model as a blockchain can be. You have the ability
    to choose the CA, HSM, consensus method, and APIs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hardware Security Module (HSM)** Identity and Access Management flexibility
    is achieved with Hyperledger Fabric through the implementation of different key
    management options. Choosing your HSM can provide significant enhancements in
    your enterprise''s security stance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following are the key features of Hyperledger Fabric that fulfill its promise
    as a customizable enterprise blockchain. It is important to understand these terms
    since the design example architecture will reference them.
  prefs: []
  type: TYPE_NORMAL
- en: '**Assets** are whatever is actually traded on the blockchain that is valuable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chaincode** is another name coined by IBM for a smart contract.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ledger features** provide flexibility around ledger queries and distinct
    ledger privacy measures through channels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Channels** enable private transactions between two parties and through channels
    enable a separate channel specific ledger.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security and membership services** provide for access to the blockchain and
    full auditing capacity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consensus** choices are available for implementation, which allows for different
    performance, security, and privacy measures as part of reaching an agreement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### REFERENCE ARCHITECTURE'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hyperledger Fabric has a well-referenced architecture. It clearly defines the
    four specific areas of design: Identity, Ledger and Transactions, Smart Contracts
    and APIs, and Events and SDKs.'
  prefs: []
  type: TYPE_NORMAL
- en: The architecture is modular and allows the blockchain designer to determine
    specific modules in the design such as consensus, certificate management, and
    even the database option for the ledger.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3.11](#c03-fig-0011) references the Hyperledger Reference Architecture.'
  prefs: []
  type: TYPE_NORMAL
- en: In the Hyperledger Reference Architecture you can see there are distinct modules.
    The current architecture separates the trust assumptions for chaincodes. What
    this means is that your policy creation capacity is really based on how you decide
    the ordering service handles blockchain transactions. Ordering nodes are commonly
    referred to as an *ordering service node* (OSN). Hyperledger Fabric provides for
    different network roles based on the type of peer node deployed. Consensus modularity
    is also apparent and allows pluggable consensus implementations for your enterprise.
    It is important to note that you cannot change the consensus after you deploy
    your ordering service.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image described by caption and surrounding text.](images/c03f011.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.11**](#R_c03-fig-0011) Hyperledger Reference Architecture  ####
    ORGANIZATIONS'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Fabric from a design perspective requires planning for organizations.
    An *organization* is a membership-driven security domain and is considered a unit
    of identity and credentials.
  prefs: []
  type: TYPE_NORMAL
- en: An organization governs one or more network peers and depends on a membership
    service provider to issue identities and certificates for the peers as well as
    clients for smart contract access privileges. There is also a node that is referenced
    as an ordering service, which is the cornerstone of a Fabric network, and is typically
    assigned its own organization.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3.12](#c03-fig-0012) shows a high-level organization overview. Org1
    is the exporter, and Org2 is the importer. Both organizations agreed on the terms,
    and Org1 has sent the clothing to the United States. As part of the importing
    process, a customs declaration must be recorded. After the transaction has been
    declared and authorized, the transaction is recorded on the blockchain.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image described by caption and surrounding text.](images/c03f012.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.12**](#R_c03-fig-0012) Organizations in a Hyperledger Fabric blockchain'
  prefs: []
  type: TYPE_NORMAL
- en: In Hyperledger Fabric, the network nodes need a valid certificate to be able
    to communicate to other nodes on the network. The network participants use a client
    application that connects to the network by way of the network nodes. Hyperledger
    is a permissioned blockchain, and the participant's identity is not the same as
    the node's identity. When a participant executes or invokes a transaction, their
    certificate is used for signing that transaction.
  prefs: []
  type: TYPE_NORMAL
- en: In Hyperledger, there is the concept of nodes, and all nodes are *not* equal.
    There are three distinct types of nodes.
  prefs: []
  type: TYPE_NORMAL
- en: '*Client nodes* will initiate the blockchain transactions and will represent
    the end user through the transaction process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Peer nodes* are nodes that actually commit transactions and keep the data
    in sync across the ledger. Peer nodes are the nodes that maintain the state and
    copy of a shared ledger. Peers are authenticated by certificates issued by the
    MSP. In Hyperledger Fabric, there are three specific types of peer nodes that
    can be deployed. The type of peer node deployed depends upon the assigned roles
    such as a peer, an endorsing peer, or an ordering peer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ordered nodes* are the communications backbone and are responsible for the
    distribution of the transactions.  #### PRIVACY'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For privacy, a “channel” could be used between two members of the blockchain
    network. A channel is a private blockchain overlay that allows for data isolation
    and confidentiality. Note that a channel-specific ledger is shared only across
    the peers in the specific channel.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3.13](#c03-fig-0013) references a simple example of what a channel
    would accomplish. Three participants are in the blockchain network. Participants
    A and C create a channel to ensure privacy from the rest of the blockchain, leaving
    out participant B. This direct method removes the propagation of a transaction
    from the rest of the blockchain network, and this is how privacy is handled in
    Hyperledger Fabric.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image described by caption and surrounding text.](images/c03f013.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.13**](#R_c03-fig-0013) A channel in Hyperledger Fabric'
  prefs: []
  type: TYPE_NORMAL
- en: The Hyperledger Fabric framework is implemented in Go. The Hyperledger Framework
    was made specifically for enabling Hyperledger Consortium blockchains with different
    degrees of permissions, use cases, and integration capacity. Fabric uses smart
    contracts called *chaincode*. This chaincode is installed on any nodes that will
    be operating the chaincode. These peers of the blockchain networks run in a locked-down
    Docker containerized environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3.14](#c03-fig-0014) illustrates a typical Hyperledger Fabric peer
    network structure with clients, peers, MSPs, and logical organization groupings.
    The end user will be invoking a blockchain application, which in turn “invokes”
    an API call, which will invoke chaincode, which is a smart contract.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image described by caption and surrounding text.](images/c03f014.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.14**](#R_c03-fig-0014) Hyperledger architecture structure  ####
    LEDGER DATABASE OPTIONS'
  prefs: []
  type: TYPE_NORMAL
- en: Fabric Ledger has two parts to its structure, which is very different from other
    blockchains.
  prefs: []
  type: TYPE_NORMAL
- en: State data is a representation of the current state of the assets. Asset state
    data can be changed upon changes to the state of the data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transaction logs record all of the transactions (in the order they are received),
    which modifies the state data, and once the data is written, it is immutable and
    cannot be modified.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You have two choices in Hyperledger Fabric when it comes to the database for
    your ledger: LevelDB or CouchDB.'
  prefs: []
  type: TYPE_NORMAL
- en: The main reason to choose one database over another is if your requirements
    need complex queries for binary data. The ledger system in Hyperledger Fabric
    uses LevelDB. By definition, LevelDB allows concurrent writers to safely insert
    data into the database by providing internal synchronization. State database options
    include LevelDB and CouchDB.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 3.1](#c03-tbl-0001) displays the options for the Hyperledger Fabric
    ledger. There are two choices for the state database. However, LevelDB is available
    only for the transaction logs. Transaction logs are also immutable and allow only
    create and read operations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[**TABLE 3.1**](#R_c03-tbl-0001): Hyperledger Fabric Ledger Options'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | TRANSACTION LOGS | STATE DATA (WORLD) |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Type** | Immutable | Mutable |'
  prefs: []
  type: TYPE_TB
- en: '| **Operations** | Create, Read | Create, read update, delete |'
  prefs: []
  type: TYPE_TB
- en: '| **DC** | LevelDB | LevelDB/CouchDB |'
  prefs: []
  type: TYPE_TB
- en: '| **Attitude** | Embedded in peers | Key-value paired (JSON, binary) |'
  prefs: []
  type: TYPE_TB
- en: '| **Query** | Simple | Complex |  ### Hyperledger Fabric''s Design Example
    Architectures'
  prefs: []
  type: TYPE_NORMAL
- en: The following example architectures are meant to provide insight into a customer
    request scenario for Hyperledger Fabric that a presales consultant may run into.
    There are likely many different solutions that could be scoped and designed based
    on the requirements.
  prefs: []
  type: TYPE_NORMAL
- en: '#### HEALTH CARE PRIVACY–FOCUSED BLOCKCHAIN SCENARIO'
  prefs: []
  type: TYPE_NORMAL
- en: A customer has asked your IT integration company to design a blockchain network
    for their customer base, which are health care customers. Health care privacy
    is, of course, a significant requirement. The customer has also stated the customers
    are mainly in the United States and must abide by Health Insurance Portability
    and Accountability Act of 1996 (HIPPA) compliance requirements. HIPPA was enacted
    by the 104th United States Congress and signed by President Bill Clinton in 1996\.
    HIPPA has security provisions and requirements for data privacy to keep patients'
    medical information safe. The act contains five titles that cover different facets
    of the legislation.
  prefs: []
  type: TYPE_NORMAL
- en: Since the customer has specified compliance requirements that are focused on
    HIPPA and health data security, blockchain technology can have a great impact
    here since we could use certificates and encryption keys to protect the data.
    From a session perspective, we could use channels, which Hyperledger Fabric supports
    remarkably.
  prefs: []
  type: TYPE_NORMAL
- en: The architecture shown in [Figure 3.15](#c03-fig-0015) allows mobile users to
    access a blockchain service that is hosted on a cloud provider. The application
    that is being used is meant to provide mobile users with updates for their health
    care needs.
  prefs: []
  type: TYPE_NORMAL
- en: You can see that we are using cloud computing, and this blockchain cloud is
    serving the application for the mobile users. There are channels provided, and
    users are using their own channel. Fabric uses a public key infrastructure (PKI)
    to generate cryptographic certificates that are tied to an organization. Channel
    access is allowed only to the permissioned users, which is exactly required for
    privacy. ![Image described by caption and surrounding text.](images/c03f015.png)
  prefs: []
  type: TYPE_NORMAL
- en: '[**FIGURE 3.15**](#R_c03-fig-0015) Health care blockchain with Hyperledger
    Fabric'
  prefs: []
  type: TYPE_NORMAL
- en: '#### CONSORTIUM BLOCKCHAIN FOR INTERNATIONAL TRADE SCENARIO'
  prefs: []
  type: TYPE_NORMAL
- en: A customer has asked your IT integration company to design a blockchain network
    for their logistics application. The customer has stated this blockchain would
    be a consortium blockchain and would also entail some compliance requirements.
    There are no cryptocurrency requirements, and the customer stated that it was
    an international blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3.16](#c03-fig-0016) proposes a Hyperledger Fabric network that handles
    international trade. Various parties are involved in the blockchain network. The
    blockchain ledger has any nonfinancial activity written to the blockchain. There
    are several peers in the network as well as a dedicated MSP, OSN, and CA. This
    solution would be fine in most scenarios where the transactions per second would
    be low, such as 2,000 TPS or less.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flow diagram depicting Hyperledger Fabric Network For Trade with Client to
    Peer, OSN, CA, MSP, and Shipper query, receiver query and Blockchain Participants.](images/c03f016.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.16**](#R_c03-fig-0016) Hyperledger Fabric network for trade'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hyperledger Fabric is a flexible, secure, and well-utilized cross-industry
    blockchain. The developer community is robust when compared to other permissioned
    blockchains.  ## R3 Corda'
  prefs: []
  type: TYPE_NORMAL
- en: This section covers R3 Corda, a permissioned cross-industry blockchain that
    has a pluggable framework. R3 Corda is a permissioned targeted industry blockchain.
    Its real merits shine in the financial and insurance sectors. Corda is an enterprise-grade
    software company, and the consortium has more than 200 members.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are covered:'
  prefs: []
  type: TYPE_NORMAL
- en: R3 Corda's main selling points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: R3 Corda's design considerations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: R3 Corda's design example architectures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### R3 Corda''s Main Selling Points'
  prefs: []
  type: TYPE_NORMAL
- en: The main selling points of R3 Corda are somewhat focused compared to Hyperledger
    Fabric, for example. This focus is mainly because of a clearly defined distributed
    ledger focused around and created by financial services organizations. Corda does
    have a well-funded backing from the R3 consortium and is a solid play for enterprise
    services.
  prefs: []
  type: TYPE_NORMAL
- en: Corda is a distributed ledger designed specifically for use cases in the financial
    sector.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corda has expanding use case for insurance and other industries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corda has a unique feature where there is direct support for legal prose in
    smart contracts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is easy enterprise integration due to JVM flexibility.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise support is unmatched by other blockchains because of its corporate
    structure and funding mechanisms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'R3 Corda is an ever-evolving ledger platform that provides clear value to its
    user base. R3 Corda leverages industry-standard protocols that provide what is
    considered seamless integration for operating the JVM that also maintains a robust
    toolset. Corda also has customized experiences for financial customers for interest
    rate swaps, standard initial margin model calculations, interbank settlements,
    and even reinsurance.  ### R3 Corda''s Design Considerations'
  prefs: []
  type: TYPE_NORMAL
- en: Originally, R3 Corda was designed as a distributed ledger to solve the privacy
    issue of a blockchain solution for the financial sector. The target market for
    R3 is the financial industry, specifically the wholesale financial markets, and
    therefore this is what we will be discussing.
  prefs: []
  type: TYPE_NORMAL
- en: Corda is highly scalable and can support billions of transactions in a deployment.
    It is secure because of its security structure and is extremely stable because
    of its professionally developed codebase.
  prefs: []
  type: TYPE_NORMAL
- en: '#### CORDA ADVANTAGES'
  prefs: []
  type: TYPE_NORMAL
- en: Corda's main advantages are focused on the increased efficiency for reducing
    manual tasks, as well as its capacity for introducing legal prose. As one would
    expect, smart contracts in Corda are detailed agreements whose specific execution
    is automated through computer code. The code works based on the inputs received.
    One distinct feature that other enterprise blockchains do not have is the manner
    that the contract law is encoded (attached) into the smart contracts, which may
    be legally enforceable.
  prefs: []
  type: TYPE_NORMAL
- en: 'One main advantage of using smart contracts with Corda is that they link the
    business logic and business data to the associated legal prose. A second advantage
    is that these Corda contracts define a specific part of the business logic on
    the blockchain ledger and are considered mobile contracts.  #### PRIVACY'
  prefs: []
  type: TYPE_NORMAL
- en: Corda was designed for privacy, as we stated in the previous chapter. It does
    this by sharing only the transaction within that customer network (no broadcast
    data propagation). Essentially it was designed to be a distributed ledger that
    addresses privacy and interoperability, which are still fundamental design principles
    of Corda. Notaries were designed in Corda to be clusters of distrusting nodes
    operating a BFT algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'R3 Corda provides an impressive return on investment (ROI) for recording, managing,
    and automating financial agreements that are manual processes with low efficiency.  ####
    SMART CONTRACTS'
  prefs: []
  type: TYPE_NORMAL
- en: The Corda platform supports smart contracts with an interesting twist. That
    twist is through the implementation of legal prose designed into the platform.
  prefs: []
  type: TYPE_NORMAL
- en: The smart contracts on Corda are called CorDapps. A CorDapp is usually developed
    in Java or Kotlin, and the legal prose is an optional attachment.
  prefs: []
  type: TYPE_NORMAL
- en: R3 Corda has done some detailed work of addressing the “contract” part of “smart
    contracts.” What do I mean by this? One of the challenges of any agreement in
    computer code is to be able to address legal prose. Corda essentially supports
    the inclusion of legal prose when the contract code may not be sufficient to address
    legal concerns.
  prefs: []
  type: TYPE_NORMAL
- en: In CorDapps, each contract will refer to a legal prose document that states
    the rules governing the evolution of the state over time in a way that is compatible
    with traditional legal systems. The benefit to the business is clear with a transparent
    chain of provenance for a legal document's full life cycle from partial settlement
    to full maturity. This transparent chain of provenance is a game-changer. I am
    not aware of any other blockchain capability with this maturity in a legal prose
    sense that is integrated. If you can connect your smart contract text to business
    logic through a template, then your enterprise can commoditize your legal documents.
  prefs: []
  type: TYPE_NORMAL
- en: 'R3 Corda has an excellent video on legal prose that can be viewed on Vimeo
    at `[https://vimeo.com/213879293](https://vimeo.com/213879293)`.  #### LEDGER
    OPTIONS'
  prefs: []
  type: TYPE_NORMAL
- en: 'The ledger in R3 Corda Ledger was built for financial markets and was designed
    to focus on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Data privacy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consensus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regulatory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smart contract
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration with bank systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Corda ledger differs from other blockchains from each peer's viewpoint.
    Essentially, the Corda ledger has no single central store of data. What it does
    have is that each node maintains a separate database of known facts. Known facts
    are really a view of the world state that the node can view. Each peer sees only
    a subset of facts on the ledger, and no peer is aware of the ledger in its entirety.
  prefs: []
  type: TYPE_NORMAL
- en: In Corda the ledger is *not* a central ledger and is a shared fact store. Network
    peers maintain a vault of facts, and these facts are not shared with all.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3.17](#c03-fig-0017) shows the relationships of a state in Corda and
    the views of the participants. We can see three participants, Joe, Greg, and George.
    The shared facts'' view of the ledger in this example are A and B. Joe and Greg
    share fact B, and Greg and George share fact A. Facts D and C are not shared between
    participants.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image described by caption and surrounding text.](images/c03f017.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.17**](#R_c03-fig-0017) Corda ledger facts  #### KEY CONCEPTS'
  prefs: []
  type: TYPE_NORMAL
- en: Corda is a permissioned peer-to-peer network targeted toward the financial sector.
    Corda uses a pluggable notary model for managing consensus rather than using traditional
    Practical Byzantine Fault Tolerance (PBFT) mechanisms such as proof of work (PoW).
    Corda uses notary pools, which enable greater performance and scalability via
    parallelism. Multiple notary pools can implement alternate consensus algorithms
    on the same network as well.
  prefs: []
  type: TYPE_NORMAL
- en: Corda has an extensive and unique terminology base that must be understood before
    considering designing a Corda network. Refer to the master documentation as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Consensus is when parties reach an agreement on a shared fact.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flows are light-weight processes used to coordinate interactions needed for
    the peers to reach consensus about a shared fact.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The doorman acts as a front to a certificate authority. It accepts POSTs of
    PKCS#10 certificate requests and returns a string that can be used to poll the
    server until a zip file of certificates is ready.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracles are a means for Corda contracts to reference off-ledger data in the
    controlled and deterministic manner that's required for the smart contracts sandbox.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State objects are immutable objects that represent facts such as a financial
    agreement or contract at a specific point in time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transactions are input states, and these states create output states. The output
    state that was created replaces the input that is “historic.” This is similar
    to appending the blockchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notary is a Corda network service that provides a distinct service for the uniqueness
    consensus. The notary accomplishes this by attesting that the transaction is unique,
    which in Corda means that the proposed input states have not been consumed. The
    notary pool provides what is known as the point of finality in the system and
    is perhaps the most unique part of Corda.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Vaults are databases that track all the current and historic states that the
    vaults are aware of.  #### CONSENSUS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corda has “pluggable” uniqueness services to improve privacy, scalability, legal-system
    compatibility, and algorithmic agility.
  prefs: []
  type: TYPE_NORMAL
- en: The pluggable uniqueness service in Corda and the use of shared cryptographic
    hashes to ensure restrictive viewing of transactions both tackle the scalability
    and privacy issues.
  prefs: []
  type: TYPE_NORMAL
- en: Consensus, used for determining whether a proposed transaction is a valid ledger
    update, involves reaching two types of consensus.
  prefs: []
  type: TYPE_NORMAL
- en: Validity consensus, which is checked by each required signer before they sign
    the transaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uniqueness consensus, which is checked by a notary service only for the uniqueness
    of a transaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more information on Corda consensus, please refer to the Corda master documentation
    at `[https://docs.corda.net/key-concepts-consensus.html](https://docs.corda.net/key-concepts-consensus.html)`.  ####
    TRANSACTIONS'
  prefs: []
  type: TYPE_NORMAL
- en: A transaction is a proposal to update the ledger. A financial transaction is
    an agreement between buyer and seller parties to exchange one or more assets for
    the payment of monetary value. Examples are the purchase of products or services,
    loans and mortgages, bank deposits and withdrawals, credit and debit card purchases,
    chargebacks, interest accrual, tax payments, royalty payouts, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: A nonfinancial transaction is an agreement that involves no transfer of monetary
    value between parties. Examples are a change of postal address or appointing a
    CEO at a given annual salary.
  prefs: []
  type: TYPE_NORMAL
- en: Corda's view of the world is driven by the intent of the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Financial transaction: Agreement to exchange assets for payment of monetary
    value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nonfinancial transaction: Agreement that involves no transfer of monetary value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Corda, transactions are defined by the use of commands to indicate their
    intent in Corda. [Figure 3.18](#c03-fig-0018) shows a simple example of how to
    define a transaction.
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram depicting Corda transaction commands with Transfer cash pointing
    to Transferred cash and examples of intent: Transfer, Pay, Issue, and Trade.](images/c03f018.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.18**](#R_c03-fig-0018) Corda transaction commands'
  prefs: []
  type: TYPE_NORMAL
- en: 'Transactions represent assets that are fungible assets, which are homogenous
    assets that are divisible, mergeable, and interchangeable, and also nonfungible
    assets, which are unique assets that represent something that is not divisible,
    mergeable, or interchangeable.  ### R3 Corda''s Design Example Architectures'
  prefs: []
  type: TYPE_NORMAL
- en: The following example architectures are meant to provide insight into a customer
    request scenario for Corda that a presales consultant may run into. There are
    likely many different solutions that could be scoped and designed based on the
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: '#### CROSS-BORDER PAYMENTS SCENARIO'
  prefs: []
  type: TYPE_NORMAL
- en: A customer has asked your IT integration company to design a blockchain network
    for their customer base, which consists of financial organizations. This organization
    would like to have Corda reduce intermediaries and provide efficiencies around
    cost and process time. The application will send payments in USD but will use
    a foreign exchange service to convert to EUR.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3.19](#c03-fig-0019) presents an example architecture for transferring
    value between two banks. It shows two banks, Bank A and Bank B, which are in a
    CorDapp to transfer value by using a foreign exchange to convert USD into EURs.
    The contract has the cash payment, public key, and address.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flow diagram depicting USD to EUR CordApp for cross-border payments.](images/c03f019.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.19**](#R_c03-fig-0019) USD to EUR CordApp for cross-border payments  ####
    INSURANCE CONSORTIUM SCENARIO'
  prefs: []
  type: TYPE_NORMAL
- en: A customer has asked your IT integration company to design a blockchain network
    for their customer base, which is an insurance consortium. The customer's consortium
    has decided that it would need to ensure that it uses legal prose in the deployment
    of their smart contracts.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3.20](#c03-fig-0020) shows an insurance solution that uses a CorDapp
    to issue policies. An insurance broker is using a consortium-based Corda blockchain
    network. Before the policy is issued, the broker uses an actuary tool that assesses
    risks against the policy before a decision is made and issued. Once a positive
    result is issued, the broker can issue a policy via a CorDapp Issue Policy, which
    would issue the policy and validate payment.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flow diagram depicting Insurance solution.](images/c03f020.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.20**](#R_c03-fig-0020) Insurance solution'
  prefs: []
  type: TYPE_NORMAL
- en: 'Corda is a professionally developed blockchain ledger that has robust use cases
    for the financial sector. Corda has built-in legal prose that enables a clearly
    defined and even legally enforceable contract.  ## Ethereum'
  prefs: []
  type: TYPE_NORMAL
- en: This section covers the enterprise aspects of Ethereum, which is a permissionless
    cross-industry blockchain that is open source and is the de facto standard for
    token platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise Ethereum is really nothing more than the permissioned version of
    the public Ethereum codebase. If your customer is looking to develop a distributed
    application that is based on a platform with a wide development base, then Ethereum
    is your target.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will focus mainly on the enterprise benefits for Ethereum and the enterprise
    around these subject areas:'
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum's selling points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum's design considerations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum's design example Architectures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Ethereum''s Selling Points'
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum has several “selling points,” and they are focused on an enterprise
    use case for Enterprise Ethereum. Note that Enterprise Ethereum is a term that
    refers to how enterprises use Ethereum and that Enterprise Ethereum is not exactly
    a specific product and is more focused on hardening the codebase.
  prefs: []
  type: TYPE_NORMAL
- en: The following are the main selling points of Ethereum. They relate to why enterprises
    could use Ethereum in their enterprises even though it is a permissionless token-based
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: Enterprises can deploy the codebase of Ethereum and modify the code to meet
    an enterprise blockchain use case and can take advantage of the whole Ethereum
    ecosystem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum is the most widely used token platform, and this makes Ethereum a good
    choice for an enterprise to use for the digitization of assets. Ethereum is the
    most widely accepted because of the ERC-20 tokens utilized on public Ethereum
    blockchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Ethereum ecosystem is the largest of the blockchain ecosystems and has a
    developer community that is estimated to be more than 250,000 developers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise Ethereum is faster due to the privatized, permissioned, and hardened
    codebase. It is many times faster than the public Ethereum network, which averages
    no more than 20 TPS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private transactions are implemented with the use of channels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Enterprise Ethereum Alliance (EEA) is actually the world's largest business
    blockchain consortium and somewhat bigger than the competitive Hyperledger Consortium.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Enterprise Ethereum Alliance has more than 450 members including Microsoft,
    JP Morgan, Accenture, Intel, and so on. The consumer and enterprise focus areas
    of Ethereum are developing standards to promote interoperability and guiding regulations
    to ensure the future success of the Ethereum blockchain. Consensus is an organization
    that promotes blockchain success and they have a paper on Ethereum that one should
    read.  ### Ethereum''s Blockchain Design'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will cover the main aspects of Enterprise Ethereum, which
    is a hardening of the widely used permissionless blockchain platform that has
    its main use case focused on the digitization of assets, which is also known as
    *tokenization*.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum is a decentralized network of independent blockchain nodes, which means
    it is not controlled by any single governing entity. Ethereum is also referred
    to as a *global computer*, where you can write code that controls digital value,
    that runs exactly as programmed, and that is accessible from anywhere in the world.
  prefs: []
  type: TYPE_NORMAL
- en: From a historical perspective, the majority of business networks have been built
    on a centralized system of control and oversight. This approach has been used
    by governments and businesses for hundreds of years and has also been proven time
    and time again. This approach was needed since having an “intermediary” was required
    such as when sending funds from one bank to another bank.
  prefs: []
  type: TYPE_NORMAL
- en: A centralized system means that any single entity can control the blockchain
    network, but it also means there is a single point of failure, which makes apps
    and online servers utilizing this system extremely vulnerable to hostile takeovers,
    hacking, and instability.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum, being the exact opposite of a centralized system, is a decentralized
    system. This decentralized system is fully autonomous and is not controlled by
    any one person or organization. Ethereum has no central point of failure also
    since it is being run from thousands of nodes in more than 100 countries (at the
    time of writing).
  prefs: []
  type: TYPE_NORMAL
- en: From a design perspective, Ethereum is the simplest because of its permissionless
    structure and limited enterprise-ready capabilities. For more sample designs,
    please reference the book's website.
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise Ethereum increases the privacy level with the implementation of private
    P2P transactions that increase scalability and performance. It also introduces
    different consensus protocols other than proof of work. It allows customers to
    choose, for example, their network size, block size, and gas limits.
  prefs: []
  type: TYPE_NORMAL
- en: '#### ENTERPRISE ETHEREUM ARCHITECTURE STACK'
  prefs: []
  type: TYPE_NORMAL
- en: The Enterprise Ethereum Alliance (EEA) has a stack layer that you should be
    aware of. The EEA stack and specification are meant to accelerate the deployment
    of Enterprise Ethereum solutions and motivate businesses to deploy EEA standardized
    solutions by providing interoperability among multiple vendors of choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the main areas of the EEA stack:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Application Layer is the top layer, under which are three sublayers: Dapps,
    Contracts and Standards, and Smart Contracts and Tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Tooling Layer is the next layer, under which are three sublayers: Permissions
    and Credentials, Integration and Deployment Tools, and Client Interfaces/APIs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Privacy/Scaling Layer is the third layer, under which are two sublayers:
    Privacy and Scaling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Core Blockchain Layer is the next layer, under which are three sublayers:
    Storage and Ledger, Execution, and Consensus.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The last layer, the Network Layer, is the foundation layer and contains only
    one sublayer: Network Protocol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When designing your enterprise blockchain, it is important from an integration
    standpoint to understand how the stack could affect your design and integration
    planning.  #### PRIVATE TRANSACTIONS'
  prefs: []
  type: TYPE_NORMAL
- en: One the main points of using Enterprise Ethereum solutions is the implementation
    of private transactions, whether on the chain or off the chain. When the “chain”
    is referenced in Ethereum, it is referring to the main public blockchain network.
    Enterprise will want to have both on-chain and off-chain transactions to get the
    most benefits of the Ethereum blockchain ecosystem. Range proofs or ring signatures
    can be used. ZK-SNARKS is also on the road map for possible improvements to privacy
    for the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Private transactions are based on a mix of symmetrical and asymmetrical cryptography
    applied on event sourcing architectural scheme.
  prefs: []
  type: TYPE_NORMAL
- en: Symmetric encryption is used for information several parties want to share.
    A private key signature is used to identify the origin of the data, and public
    key encryption is used for sharing the symmetric encryption key and notifying
    one party. Each transaction actor must install and run the Ethereum Privacy node.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3.21](#c03-fig-0021) shows how a private transaction could occur with
    Ethereum. Two or more business partners would have private nodes installed and
    would connect to the public Ethereum network. For example, the private key signature
    is used to identify the origin of the data and then the public key is used for
    sharing the symmetric encryption key. The business partners would be notified
    of a transaction, and it would be written to the Ethereum blockchain.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flow diagram depicting Ethereum private transaction.](images/c03f021.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.21**](#R_c03-fig-0021) An Ethereum private transaction'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a private transaction means installing a simple stand-alone program
    that interacts with the public blockchain and encrypts and decrypts all data regarding
    a business contract between two business parties.  #### SCALING TRANSACTIONS'
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the traditional Ethereum platform codebase, the Ethereum Enterprise codebase
    has two types of transaction-scaling approaches instead of one. These are on-chain
    and off-chain transactions.
  prefs: []
  type: TYPE_NORMAL
- en: '*On-chain* scaling occurs at layer 1 of the Enterprise Ethereum architecture.
    It changes the Ethereum protocol to suit the transactional needs better. *Off-chain*
    scaling happens at layer 2 of the architecture stack of the Enterprise Ethereum.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The main purpose of using Enterprise Ethereum is to extend private transactions
    using the public network. This of course provides some benefits to companies that
    may not want to invest in a private blockchain infrastructure. The main proposal
    allows businesses to connect into the public Ethereum blockchain, pay for the
    use of the public infrastructure, and transact with each other via standard smart
    contracts, using their standard technology, which is public key infrastructure
    to identify their business partners.  ### Ethereum''s Design Example Architectures'
  prefs: []
  type: TYPE_NORMAL
- en: The following example architectures are meant to provide insight into a customer
    request scenario for Enterprise Ethereum that a presales consultant may run into.
    There are likely many different solutions that could be scoped and designed based
    on the requirements.
  prefs: []
  type: TYPE_NORMAL
- en: '#### CORPORATE FINANCE BLOCKCHAIN SCENARIO'
  prefs: []
  type: TYPE_NORMAL
- en: The customer has asked your IT integration company to design a blockchain network
    for their corporate finance application regarding letters of credit. Customer
    has stated they would not invest in a member-based blockchain and want a public
    blockchain that has reasonable privacy technology implemented. There are no cryptocurrency
    requirements, and the customer has stated that there is trading between numerous
    parties and they want this trading to be economical.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3.22](#c03-fig-0022) shows how private transaction would occur via
    the public Ethereum blockchain. We have two business partners that are using privacy
    nodes. From a deeper technical perspective, the privacy nodes compress and then
    sign the transaction data with its RSA private key, generate a one-time use symmetric
    AES 256 key, and lastly encrypt the signed transaction. The symmetric key is then
    encrypted with the public key for each of the target nodes. The keys are published
    into the *PrivateTransactions* smart contract on the public Ethereum blockchain.  ####
    DIPLOMA ISSUANCE BLOCKCHAIN SCENARIO'
  prefs: []
  type: TYPE_NORMAL
- en: Your customer, the School of Blockchain, has asked your IT integration company
    to design a blockchain application that will publish certification credentials
    and diplomas to a public blockchain. The customer has stated they will not invest
    in a member-based blockchain and just want the diplomas published to the public
    blockchain. They also want to extend this capability to other consortium schools
    in the future. These certification credentials and diplomas will be public viewable
    but will require a private contract to publish to the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: '![Flow diagram depicting Letter of credit issuance with private transactions.](images/c03f022.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.22**](#R_c03-fig-0022) Letter of credit issuance with private transactions'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3.23](#c03-fig-0023) shows a credential-issuing blockchain of a school
    and a student using private transactions with Ethereum. The school is publishing
    the credentials to the Ethereum public network and has sent the student a private
    link that is essentially a public/private key pair to authenticate an issuer as
    well as a recipient. The student also can generate a key pair and share the credentials
    with an employer, for example, if requested.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ethereum is a flexible and well-utilized cross-industry public blockchain with
    private extensions. The developer community is robust compared to other permissioned
    blockchains, and the use cases abound with potential.  ## Quorum'
  prefs: []
  type: TYPE_NORMAL
- en: 'This section covers Quorum, a hybrid cross-industry blockchain that has a pluggable
    framework. Quorum is an open source private permissioned fork of Ethereum designed
    for enterprise deployment. The following topics are covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Quorum's selling points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quorum's design principles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quorum's design example architectures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is really useful about Quorum is that if you already know Ethereum, you're
    learning curve for Quorum is no more than an hour. The only challenge with Quorum
    is not technical since it's a fork of the Ethereum blockchain but is more about
    its limited user base and acceptance challenge. JP Morgan has attracted more than
    220 banks to its Quorum-based Interbank Information Network.
  prefs: []
  type: TYPE_NORMAL
- en: Some differences between Ethereum and Quorum is that Quorum was meant to be
    deployed as a private Ethereum-based network or be extended to a public network.
    There is no mainnet as with Ethereum, and it was created through a joint effort
    by JP Morgan and engineers from the Ethereum Foundation, which brings it significant
    support. Consensus algorithms used in Quorum are based on voting and does not
    involve mining at all like in Ethereum.
  prefs: []
  type: TYPE_NORMAL
- en: The developer base overall is lower compared to Ethereum and Hyperledger, and
    the number of applications is just a fraction of what you may find on Ethereum.
    However, a well-versed Ethereum developer will easily take an Ethereum distributed
    application and convert it to work with Quorum.
  prefs: []
  type: TYPE_NORMAL
- en: '### Quorum''s Selling Points'
  prefs: []
  type: TYPE_NORMAL
- en: Quorum is an enterprise-focused, private permissioned blockchain infrastructure
    specifically designed for financial use cases. Quorum is built from a fork of
    Ethereum called Go Ethereum.
  prefs: []
  type: TYPE_NORMAL
- en: Quorum functions similarly to Ethereum. The similarities include network and
    peer permissions management, increased transaction and contract privacy, voting-based
    consensus mechanisms, and higher performance. When considering Enterprise Ethereum
    or Quorum for a particular use case, it is important to consider Quorum for financial
    sector customers.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image described by caption and surrounding text.](images/c03f023.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.23**](#R_c03-fig-0023) Credential issuance blockchain'
  prefs: []
  type: TYPE_NORMAL
- en: 'The main points to consider with Quorum are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Private transactions are supported, and private contracts through public/private
    state separation are available over a private network or a public network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quorum provides for solid security and a high throughput of transactions in
    a private blockchain deployment. A transaction speed increase is a result of the
    simplistic consensus mechanisms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternative consensus mechanisms  are available with multiple consensus mechanisms
    that are more appropriate for consortium chains instead of the proof-of-work consensus
    with Ethereum.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quorum takes advantage of the Ethereum ecosystems and maintains similarities
    in some respects. This provides for a rapid development experience for Ethereum
    developers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Quorum is a fully supported blockchain by a consortium network led by JP Morgan.  ###
    Quorum''s Blockchain Design Principles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quorum is a permissioned decentralized platform that allows you to deploy dapps
    on top of it. It's hybrid in the sense that it can support dapps created using
    one or more smart contracts. Quorum is a fork of the Ethereum codebase that provides
    for some similarities to Ethereum but also differences to Ethereum. From a design
    perspective, the differences are around the consensus protocols Quorum uses, the
    encrypted storage, and a new Geth client.
  prefs: []
  type: TYPE_NORMAL
- en: In Quorum, the smart contracts can be written in the usual Ethereum developer
    language solutions such as Solidity, LLL, or Serpent. Solidity is by far the most
    accepted with the widest reach, so it is preferred. In Quorum, there can be multiple
    instances of a smart contract. Each instance is identified by a unique locater
    address, and you can deploy multiple dapps on the same Quorum network. Remember,
    we are not deploying Quorum over the Ethereum mainnet but rather over a private
    corporate network or another publicly shared consortium network.
  prefs: []
  type: TYPE_NORMAL
- en: '#### QUORUM COMPONENTS'
  prefs: []
  type: TYPE_NORMAL
- en: 'Quorum has the following main components in its architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: Quorum Node, which is a modified Geth client. It has features that provide for
    some significant modifications. The main modifications made to the EVM node are
    a P2P layer that allows connection with permissioned nodes, validation changes
    to handle private transactions, removal of gas pricing, and newer consensus methods.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For current information on the Quorum Node, refer to the Quorum GitHub repository
    at `[https://github.com/jpmorganchase/quorum](https://github.com/jpmorganchase/quorum)`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Constellation, which is actually two separate components—Transaction Manager
    and Enclave.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transaction Manager is responsible for transaction privacy of the chain. This
    component is what actually stores and then provides access control to encrypted
    transaction data. Constellation also utilizes Enclave, which is the other component
    of Constellation for cryptographic functionality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constellation  Enclave provides a distinct separation of concerns. Enclave also
    has an impact on performance improvements through the parallelization of specific
    crypto operations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Figure 3.24](#c03-fig-0024) provides a high-level overview of Quorum.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image described by caption and surrounding text.](images/c03f024.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.24**](#R_c03-fig-0024) Quorum blockchain overview'
  prefs: []
  type: TYPE_NORMAL
- en: 'Quorum is fairly simple at a high level. The first thing to note is a fork
    of the Ethereum blockchain. It uses go-ethereum, and this provides some benefits
    around integration.  #### CONSENSUS'
  prefs: []
  type: TYPE_NORMAL
- en: 'Quorum supports three consensus protocols at the time of writing: QuorumChain,
    IBFT, and Raft. QuorumChain is a majority voting protocol. From my point of view,
    Raft and IBFT are the most widely used and useful for most enterprise implementation.'
  prefs: []
  type: TYPE_NORMAL
- en: Consensus is handled by a set of nodes that are relegated by voting rights,
    and all have voting rights and also confer voting rights to others. A smart contract
    in Quorum is used within the genesis block to assign voting rights. The smart
    contract tracks the current status of all the voting nodes within the blockchain
    network as it updates them. The voting process is triggered by a voting smart
    contract that pings or samples voting nodes. When a proper block height is reached,
    the transaction is committed.
  prefs: []
  type: TYPE_NORMAL
- en: Raft-based Consensus provides for faster transaction finality and also on-demand
    block creation.
  prefs: []
  type: TYPE_NORMAL
- en: Istanbul BFT consensus algorithm provides for perhaps the most important duty
    of a blockchain, which is transaction finality. Istanbul BFT provides for peer
    permissioning,  which is essentially node/peer permissioning using smart contracts
    and ensuring only known parties can join the network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Quorum offers significantly higher performance than the public Geth (Ethereum)
    of the main Ethereum network and provides the look and feel of Ethereum that Solidity
    developers know.  #### QUORUM LEDGER'
  prefs: []
  type: TYPE_NORMAL
- en: 'Quorum maintains two state databases for the world ledger. One is the public
    state database, and the other one is the private state databases. Note that both
    have their world state committed over the same single ledger.  #### PRIVACY'
  prefs: []
  type: TYPE_NORMAL
- en: Privacy is perhaps the main advantage over Ethereum, and that's the main use
    case for Quorum. Privacy was intentionally built in through the development process
    of the Quorum blockchain. The Quorum blockchain manages much of its secure message
    transfers through its implementation of Constellation.
  prefs: []
  type: TYPE_NORMAL
- en: Quorum supports two mechanisms to achieve security as well as privacy.
  prefs: []
  type: TYPE_NORMAL
- en: A zero-knowledge security layer protocol, which provides zero-knowledge proofs
    (ZKPs). A ZKP is a fancy way of defining transactions as a branch of mathematics.
    This allows one party in a transaction to prove knowledge of some secret value
    or information without conveying any detail about that secret.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private contracts, which enable the transaction to be disclosed between two
    parties.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Privacy models are changing, and the old way of banking privacy is also changing.
    With the implementation of Quorum''s permissioning layer, the financial institutions
    are ensured that only authorized parties can join their private Ethereum network.  ####
    TRANSACTIONS'
  prefs: []
  type: TYPE_NORMAL
- en: Constellation, Quorum's privacy module, uses parameters to allow participants
    to exchange private transactions and ensures that confidential transaction data
    remains confidential between parties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Transactions include a global transaction hash. This transaction hash consists
    of all transactions in a block, the public state root hash, and the block maker''s
    signature.  ### Quorum''s Design Example Architectures'
  prefs: []
  type: TYPE_NORMAL
- en: The following example architectures are meant to provide insight into a customer
    request scenario for Quorum that a pre-sales consultant may run into. There are
    likely many different solutions that could be scoped and designed based on the
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: '#### INTERBANK TRANSFER PRIVATE BLOCKCHAIN SCENARIO'
  prefs: []
  type: TYPE_NORMAL
- en: Your customer who is a banking consortium has asked your IT integration company
    to design a blockchain application that will provide for interbank transfers over
    a private permissioned network. The customer stated this is not going to extend
    to the mainnet, and no oracles are needed, for example, to validate foreign exchange
    information.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3.25](#c03-fig-0025) shows a simple private blockchain. This private
    blockchain has a consortium and is used for sending payments. The consortium manages
    a distributed ledger and has imposed trusted peering.  #### KNOW YOUR CUSTOMER
    BLOCKCHAIN SCENARIO'
  prefs: []
  type: TYPE_NORMAL
- en: Your customer, a large international bank, has asked your IT integration company
    to design a blockchain that will provide for privacy but also meet the requirements
    for validating customer identities.
  prefs: []
  type: TYPE_NORMAL
- en: '![Flow diagram depicting Private blockchain with Quorum.](images/c03f025.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.25**](#R_c03-fig-0025) Private blockchain with Quorum'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3.26](#c03-fig-0026) shows a Know Your Customer (KYC) blockchain. Quorum
    nodes process transactions and provide updates to both a private ledger and a
    public ledger. As part of this deployment, a KYC service is deployed to authenticate
    against known identities. A compliance node is maintained to ensure compliance
    around maintaining identities.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flow diagram depicting Know Your Customer blockchain.](images/c03f026.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**FIGURE 3.26**](#R_c03-fig-0026) Know Your Customer blockchain'
  prefs: []
  type: TYPE_NORMAL
- en: 'Quorum is a flexible private network-focused blockchain with private extensions
    based on the Ethereum blockchain. Privacy is perhaps the main advantage over Ethereum
    and is the main use case for Quorum.  ## Summary'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter discussed the four most widely used enterprise blockchains and
    distributed ledgers and several use cases for each.
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise blockchains have very different requirements from each other, both
    technically and from a business perspective. Corda is very different from Hyperledger
    and Ethereum.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enterprise blockchains generally fall into one of several categories: private
    permissioned, public or permissionless, or hybrid solution, such as Quorum.'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger is the umbrella project run by the Linux Foundation, and Hyperledger
    Fabric is the mostly widely used blockchain in the Hyperledger portfolio. Hyperledger
    Fabric is a flexible cross-industry blockchain that presents many options for
    enterprises to deploy.
  prefs: []
  type: TYPE_NORMAL
- en: Corda was first built mainly to target the financial industry, where recording,
    managing, and automating financial agreements are manual processes with high inefficiencies.
    The platform was designed and built considering requirements such as data privacy/confidentiality
    and transaction scalability of financial institutions.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum is an open source software platform based on blockchain technology
    that enables developers to build and deploy decentralized applications (smart
    contracts). Ethereum is the most widely used permissionless blockchain and has
    a wide developer following.
  prefs: []
  type: TYPE_NORMAL
- en: Quorum is an open source blockchain solution built by enhancing the existing
    Ethereum blockchain. It provides an additional layer on top of Ethereum, which
    enables it to perform private transactions but also makes it more flexible by
    using different consensus algorithms. The main reason enterprises may want to
    use Quorum is for its privacy enhancements and performance capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Example architecture designs were presented for each of the four blockchains
    presented. As part of the design module, we covered best practices, considerations,
    and technical concerns.
  prefs: []
  type: TYPE_NORMAL
