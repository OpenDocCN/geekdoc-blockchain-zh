["```\npeer lifecycle chaincode package ${CHAINCODE_NAME}.tar.gz\npeer lifecycle chaincode install ${CHAINCODE_NAME}.tar.gz\npeer lifecycle chaincode approveformyorg\npeer lifecycle chaincode commit\n```", "```\nApplication: & ApplicationDefaults\n\n    # Organizations is the list of orgs which are defined as participants on\n    # the application side of the network\n    Organizations:\n\n    # Policies defines the set of policies at this level of the config tree\n    # For Application policies, their canonical path is\n    #   /Channel/Application/<PolicyName>\n    Policies:\n        Readers:\n            Type: ImplicitMeta\n            Rule: \"ANY Readers\"\n        Writers:\n            Type: ImplicitMeta\n            Rule: \"ANY Writers\"\n        Admins:\n            Type: ImplicitMeta\n            Rule: \"MAJORITY Admins\"\n        LifecycleEndorsement:\n            Type: ImplicitMeta\n            Rule: \"MAJORITY Endorsement\"\n        Endorsement:\n            Type: ImplicitMeta\n            Rule: \"MAJORITY Endorsement\"\n\n    Capabilities:\n        <<: *ApplicationCapabilities\n```", "```\npeer lifecycle chaincode approveformyorg --signature-policy \"AND('Org1.member', 'Org2.member')\"  --tls\n$CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA --channelID $CHANNEL_NAME --name ${CHINCODE_NAME} --version\n${VERSION}  --package-id ${PACKAGE_ID} --sequence ${VERSION}\n```", "```\n [\n {\n    \"name\": \"ORG12-PD\",\n    \"policy\": \"OR('Org1MSP.member', 'Org2MSP.member')\",\n    \"requiredPeerCount\": 1,\n    \"maxPeerCount\": 3,\n    \"blockToLive\": 1000000,\n\"memberOnlyRead\": true,\n\"memberOnlyWrite\": true\n },\n {\n    \"name\": \" ORG23-PD \",\n    \"policy\": \"OR('Org2MSP.member', 'Org3MSP.member')\",\n    \"requiredPeerCount\": 1,\n    \"maxPeerCount\": 3,\n    \"blockToLive\": 0,\n\"memberOnlyRead\": true\n]\n```", "```\n peer lifecycle chaincode commit --collections-config path/collections_config.json\n```", "```\n    peer chaincode install -n mychannel -l golang\n    ```", "```\n#!/bin/bash\n\nif [ $# -ne 2 ]; then\n    echo \"Expected 2 input got $#\"\n    exit 1\nfi\n\nCHAINCODE_METADATA_DIR=\"$2\"\n\nif [ \"$(jq -r .type \"$CHAINCODE_METADATA_DIR/metadata.json\" | tr '[:upper:]' '[:lower:]')\" = \"golang\" ]; then\n    exit 0\nfi\n\nexit 1\n```", "```\nbin/build SOURCE_DIR METADATA_DIR BUILD_OUTPUT_DIR\n```", "```\n #!/bin/bash\n\nif [ $# -ne 3 ]; then\n    echo \"Expected 3 input got $#\"\n    exit 1\nfi\n\nSOURCE_DIR=\"$1\"\nMETADATA_DIR=\"$2\"\nOUTPUT_DIR=\"$3\"\n\n# extract package path from metadata.json\nGO_PACKAGE=\"$(jq -r .path \"$METADATA_DIR/metadata.json\")\"\nif [ -f \"$SOURCE_DIR/src/go.mod\" ]; then\n    cd \"$SOURCE_DIR/src\"\n    go build -v -mod=readonly -o \"$BUILD_OUTPUT_DIR/chaincode\" \"$GO_PACKAGE\"\nelse\n    GO111MODULE=off go build -v  -o \"$BUILD_OUTPUT_DIR/chaincode\" \"$GO_PACKAGE\"\nfi\n\n# save statedb index metadata to provide at release\nif [ -d \"$SOURCE_DIR/META-INF\" ]; then\ncp -a \"$SOURCE_DIR/META-INF\" \"$OUTPUT_DIR/\"\n```", "```\n     external-builder/bin\ndetect\nbuild\nrun\nrelease\n```", "```\n    externalBuilders:\n        - path: /path-to-external-builder/external-builder\n          name: externalBuilders-sample\n          environmentWhitelist:\n             - GOPROXY\n             - GONOPROXY\n             - GOSUMDB\n             - GONOSUMDB\n             - GOCACHE\n             - GOPATH\n             - GOROOT\n             - HOME\n             - XDG_CACHE_HOME\n```", "```\n RUN apk add --no-cache tzdata jq\n```", "```\ndocker build -t fabric-peer:2.1.0-external-builder \n```", "```\npeer0.org2.example.com:\n    container_name: peer0.org2.example.com\n    image: fabric-peer:2.1.0-external-builder\n    environment:\n    volumes:\n        - peer0.org2.example.com:/var/hyperledger/production\n        - /path../external-builder:/etc/hyperledger/external-builder\n```", "```\nledger:\n  state:\n    stateDatabase: CouchDB\n    totalQueryLimit: 100000\n    couchDBConfig:\n       couchDBAddress: 127.0.0.1:5984\n       username:\n       password:\n       maxRetries: 3\n       maxRetriesOnStartup: 10\n       requestTimeout: 35s\n       internalQueryLimit: 1000\n       maxBatchUpdateSize: 1000\n       warmIndexesAfterNBlocks: 1\n       createGlobalChangesDB: false\n       cacheSize: 128\n```", "```\nfunction createOrgs() {\n  # Create crypto material using cryptogen\n  if [ \"$CRYPTO\" == \"cryptogen\" ]; then\necho \"##### Generate certificates using cryptogen tool #########\"\n    ....\n    cryptogen generate --config=./organizations/cryptogen/crypto-config-org1.yaml --\noutput=\"organizations\"\n     ...\n    cryptogen generate --config=./organizations/cryptogen/crypto-config-org2.yaml --\noutput=\"organizations\"\n    ....\n    cryptogen generate --config=./organizations/cryptogen/crypto-config-orderer.yaml --\noutput=\"organizations\"\n  fi\n  # Create crypto material using Fabric CAs\n  if [ \"$CRYPTO\" == \"Certificate Authorities\" ]; then\n    echo \"##### Generate certificates using Fabric CA's ############\"\n    IMAGE_TAG=${CA_IMAGETAG} docker-compose -f $COMPOSE_FILE_CA up -d 2>&1\n    . organizations/fabric-ca/registerEnroll.sh\n    ....\n    createOrg1\n    createOrg2\n    createOrderer\n  fi\n\n}\n```", "```\nchannel fetch config config_block.pb -o $ORDERER_CONTAINER -c $CH_NAME --tls --cafile $TLS_ROOT_CA\n```", "```\n configtxlator proto_decode --input config_block.pb --type common.Block --output config_block.json\n```", "```\njq .data.data[0].payload.data.config config_block.json > config.json\n```", "```\ncp config.json modified_config.json\n```", "```\n{\n     \"channel\": {\n         \"mod_policy\": \"Admins\",\n             \"value\": {\n                 \"capabilities\": {\n                     \"V2_0\": {}\n                 }\n             },\n         \"version\": \"0\"\n     },\n     \"orderer\": {\n         \"mod_policy\": \"Admins\",\n             \"value\": {\n                 \"capabilities\": {\n                     \"V2_0\": {}\n                 }\n             },\n         \"version\": \"0\"\n     },\n     \"application\": {\n         \"mod_policy\": \"Admins\",\n             \"value\": {\n                 \"capabilities\": {\n                     \"V2_0\": {}\n                 }\n             },\n         \"version\": \"0\"\n     }\n   }\n```", "```\n jq -s '.[0] * {\"channel_group\":{\"groups\":{\"Orderer\": {\"values\": {\"Capabilities\": .[1].orderer}}}}}'\nconfig.json ./capabilities.json > modified_config.json\n```", "```\njq -s '.[0] * {\"channel_group\":{\"values\": {\"Capabilities\": .[1].channel}}}' config.json\n./capabilities.json > modified_config.json\n```", "```\njq -s '.[0] * {\"channel_group\":{\"groups\":{\"Application\": {\"values\": {\"Capabilities\": .[1].application}}}}}' config.json ./capabilities.json > modified_config.json\n```", "```\nconfigtxlator proto_encode --input config.json --type common.Config --output config.pb\n\nconfigtxlator proto_encode --input modified_config.json --type common.Config --output\nmodified_config.pb\n\nconfigtxlator compute_update --channel_id $CH_NAME --original config.pb --updated modified_config.pb --\noutput config_update.pb\n```", "```\nconfigtxlator proto_decode --input config_update.pb --type common.ConfigUpdate --output\nconfig_update.json\n\necho '{\"payload\":{\"header\":{\"channel_header\":{\"channel_id\":\"'$CH_NAME'\",\n\"type\":2}},\"data\":{\"config_update\":'$(cat config_update.json)'}}}' | jq . >\nconfig_update_in_envelope.json\n\nconfigtxlator proto_encode --input config_update_in_envelope.json --type common.Envelope --output\nconfig_update_in_envelope.pb\n```", "```\npeer channel update -f config_update_in_envelope.pb -c $CH_NAME -o $ORDERER_CONTAINER --tls --cafile\n$TLS_ROOT_CA\n```", "```\nCORE_PEER_TLS_ENABLED=true\nCORE_PEER_GOSSIP_USELEADERELECTION=true\nCORE_PEER_GOSSIP_ORGLEADER=false\nCORE_PEER_PROFILE_ENABLED=true\nCORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt\nCORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key\nCORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt\nCORE_PEER_ID=peer0.org1.example.com\nCORE_PEER_ADDRESS=peer0.org1.example.com:7051\nCORE_PEER_LISTENADDRESS=0.0.0.0:7051\nCORE_PEER_CHAINCODEADDRESS=peer0.org1.example.com:7052\nCORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052\nCORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051\nCORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051\nCORE_PEER_LOCALMSPID=Org1MSP\n```", "```\nORDERER_GENERAL_LISTENADDRESS=0.0.0.0\nORDERER_GENERAL_GENESISMETHOD=file\nORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block\nORDERER_GENERAL_LOCALMSPID=OrdererMSP\nORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp\nORDERER_GENERAL_TLS_ENABLED=true\nORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key\nORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt\nORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]\nORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt\nORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key\nORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]\n```", "```\n    docker stop $ORDERER_CONTAINER\n    ```", "```\n     docker cp $ORDERER_CONTAINER:/var/hyperledger/production/orderer/ ./$LEDGERS_BACKUP/$ORDERER_CONTAINER\n    ```", "```\n     docker rm -f $ORDERER_CONTAINER\n    ```", "```\n     docker run -d -v /opt/backup/$ORDERER_CONTAINER/:/var/hyperledger/production/orderer/ \\\n                -v /opt/msp/:/etc/hyperledger/fabric/msp/ \\\n                --env-file ./env<name of node>.list \\\n                --name $ORDERER_CONTAINER \\\n                hyperledger/fabric-orderer:$IMAGE_TAG orderer\n    ```", "```\n     docker stop $PEER_CONTAINER\n    ```", "```\n    docker cp $PEER_CONTAINER:/var/hyperledger/production ./$LEDGERS_BACKUP/$PEER_CONTAINER\n    ```", "```\n     //remove chaincode containers\n\n    CC_CONTAINERS=$(docker ps | grep dev-$PEER_CONTAINER | awk '{print $1}') if [ -n \"$CC_CONTAINERS\" ] ;\n    then docker rm -f $CC_CONTAINERS ; fi\n\n    //remove chaincode images\n    CC_IMAGES=$(docker images | grep dev-$PEER | awk '{print $1}') if [ -n \"$CC_IMAGES\" ] ; then docker rmi\n    -f $CC_IMAGES ; fi\n    ```", "```\n     docker rm -f $PEER_CONTAINER\n    ```", "```\n    docker run -d -v /opt/backup/$PEER_CONTAINER/:/var/hyperledger/production/ -v\n    /opt/msp/:/etc/hyperledger/fabric/msp/ --env-file ./env<name of node>.list --name $PEER_CONTAINER\n    hyperledger/fabric-peer:$IMAGE_TAG peer node start\n    ```", "```\n$ npm install fabric-client@latest \n\n$ npm install fabric-ca-client@latest\n```", "```\nclone and cd to the Fabric repository to your $GOPATH/src/github.com/hyperledger directory\ngovendor init\ngovendor add +external  // Add all external package, or\ngovendor add github.com/external/pkg // Add specific external package\n```", "```\n[<logger>[,<logger>...]=]<level>[:[<logger>[,<logger>...]=]<level>...]\n```", "```\nset the PEER_CONTAINER and LEDGERS_BACKUP environment variables\ndocker run --rm -v /opt/backup/$PEER_CONTAINER/:/var/hyperledger/production/ \\\n            -v /opt/msp/:/etc/hyperledger/fabric/msp/ \\\n            --env-file ./env<name of node>.list \\\n            --name $PEER_CONTAINER \\\n            hyperledger/fabric-peer:2.x peer node upgrade-dbs\n```", "```\n    {\n      \"OrdererEndpoint\": {\n          \"Endpoints\": {\n              \"mod_policy\": \"Admins\",\n              \"value\": {\n                  \"addresses\": [\n                     \"127.0.0.1:30000\"\n                  ]\n              }\n          }\n       }\n    }\n    ```", "```\n    jq -s \".[0] * {\\\"channel_group\\\":{\\\"groups\\\":{\\\"Orderer\\\": {\\\"groups\\\": {\\\"$ORGNAME\\\": {\\\"values\\\":\n    .[1].${ORGNAME}Endpoint}}}}}}\" config.json ./ newOrdererEndpoinConf.json > modified_config.json\n    ```"]