- en: © Elad Elrom 2019Elad ElromThe Blockchain Developer[https://doi.org/10.1007/978-1-4842-4847-8_11](https://doi.org/10.1007/978-1-4842-4847-8_11)
  prefs: []
  type: TYPE_NORMAL
- en: 11. Security and Compliance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Elad Elrom^([1](#Aff2) )(1)New York, NY, USA
  prefs: []
  type: TYPE_NORMAL
- en: As you have seen, most blockchains are decentralized, and the identity of each
    party is normally protected; however, most blockchain-related code involves storing
    some confidential data such as a user’s personal information, passwords, cryptocurrency,
    and wallets.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain-related code has characteristics that make it a magnet for hackers.
  prefs: []
  type: TYPE_NORMAL
- en: The code is usually open source for transparency and to promote contributors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Much of the code out there is not mature enough to be considered release grade.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In cryptocurrency-related blockchains, losing data can mean more than just a
    mere privacy breach. Once funds are transferred, it’s not easy to track them,
    and the transfer is likely to be irreversible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These concerns have been magnified as blockchain technology has become more
    popular and more people are invested in blockchain. In fact, there have been increasing
    reports regarding blockchain-related losses, and new attacks are being published
    on news outlet almost daily. For instance, during the writing of this book, $40
    million was stolen from the Binance exchange. Additionally, in the past 12 months,
    an estimated $23 million was stolen in double spending attacks. Similarly, a staggering
    $1.5 billion was stolen from crypto exchanges.
  prefs: []
  type: TYPE_NORMAL
- en: Postmortem reports sometimes show a sophisticated heist method that you would
    need to be a genius to prevent. However, most attacks can be prevented easily
    and are nothing more than a simple oversight or the result of not using tools
    capable of revealing vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '*“Intellectuals solve problems; geniuses prevent them.”*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Albert Einstein
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As professionals, it is your responsibility to your customers who place their
    trust in you, as well as your reputation and fiduciary responsibility, to mitigate
    these risks and ensure data is protected. Security measures should be considered
    during all stages of the development cycle; in fact, security should be the most
    important aspect of your development. However, it is unrealistic to presume that
    I will be able to cover all aspects of security in just one chapter, as there
    are thousands of specific known attacks.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to security, another aspect that needs to be addressed is regulation.
    Regulators have been shaping technology in general and the blockchain industry
    in particular, and there are multiple regulations to abide by in each geographic
    location.
  prefs: []
  type: TYPE_NORMAL
- en: Because new attacks are invented daily, regulatory laws are revised often. Understanding
    common attacks, security, privacy, compliance, and regulations can be a challenging
    task.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I will give you insights into the security mind-set and help
    you become more aware of security, privacy, and compliance. This chapter is split
    into three parts.
  prefs: []
  type: TYPE_NORMAL
- en: '*Security readiness*: I will cover areas you should be taking into account
    before and while developing your platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Common blockchain attacks*: I will cover some of the most famous and common
    blockchain attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Development cycle*: I will provide you with a recommended development cycle
    so you can take into account security and compliance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifically, I will cover security testing, privacy, and compliance requirements
    to ensure your code takes into account as many scenarios as possible to help secure
    your users’ data. I will cover common blockchain-related cyber attacks that caused
    large losses, as well as blockchain network–specific attacks. I will cover how
    these attacks could have been prevented as a user and as a developer. Lastly,
    I will introduce a recommended development cycle that you can employ to reduce
    the risks of losses and your platform shutting down.
  prefs: []
  type: TYPE_NORMAL
- en: Security and Compliance Readiness
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, I will cover what the general areas are that you need to consider
    in regard to security testing and what it means to achieve security readiness.
    Additionally, you will understand what it means to achieve compliance readiness
    by looking at the regulations in Europe and the United States as examples. Lastly,
    I will highlight recommendations you should be considering during the development
    cycle and prior to releasing your code.
  prefs: []
  type: TYPE_NORMAL
- en: Security Readiness
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a traditional coding environment, you need to consider security testing to
    find security defects in your code to ensure it functions correctly, as intended,
    and that the data is protected.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Security testing* is a process aimed at finding security defects in code to
    ensure that both the code and the data are functioning as intended.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Security testing includes the following measures:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Confidentiality*: Ensuring a user’s information is protected. An example is
    implementing a members-only area behind a Secure Sockets Layer (SSL) connection,
    which uses encryption for data sent via the Internet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The integrity of information*: Protecting information from being changed.
    An example is encrypting and decrypting data as it passes between different layers
    of your system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Authentication*: Confirming a user’s identity, as well as ensuring the system
    is trusted. An example is a login system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Availability*: Ensuring your system is up and running. An example is to install
    a firewall to prevent an attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Authorization*: Ensuring the requester is allowed to receive a service or
    perform an action. An example is creating a Hyperledger-permissioned blockchain
    that limits access to a specific entity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Nonrepudiation*: Ensuring that there is a confirmation system in place when
    sending and receiving messages so parties cannot deny receiving a message. An
    example is an e-mail notification sent to confirm a transfer of digital assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compliance Readiness
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to these traditional security testing considerations, you need to
    also consider blockchain-specific security and local compliance to ensure your
    platform is in compliance with regulatory requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Security compliance* is a legal concern for entities. It is a regulatory standard
    for providing recommendations for privacy as well as improving security.'
  prefs: []
  type: TYPE_NORMAL
- en: Being in compliance doesn’t directly focus on security; however, many of the
    local compliance requirements take into account security and ensuring both the
    user and the data are protected, so indirectly they are intertwined. Many large
    companies employ both security and compliance experts to ensure both are met.
  prefs: []
  type: TYPE_NORMAL
- en: You may be wondering, why do I even need to take regulations into account anyway?
    Wasn’t blockchain intended to be decentralized?
  prefs: []
  type: TYPE_NORMAL
- en: That is true; however, in recent years, regulations have been taken against
    blockchain’s operators because of constant frauds and attacks, which resulted
    in significant losses, and privacy policies and security measures have been put
    in place in many countries. As a result, you need to check compliance and security
    regulations to ensure you are not breaching any laws.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, many institutions and authorities have published research papers to
    analyze the relationship between blockchain and data protection regulations and
    how to prepare to achieve “compliance readiness.”
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Compliance readiness ensures that the implementation meets governance requirements.
    Blockchain is not excluded from any applicable laws and regulations in many locations
    around the world.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, in Europe and the United States, there are compliance legislation
    and policies tied to the Data Protection Impact Assessment (DPIA) and the General
    Data Protection Regulation (GDPR) that describe specifically what information
    is not allowed to be stored on a blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: It’s not just what data can and cannot be stored, though; many countries have
    implemented privacy laws that restrict the type of data that can be transferred
    across geographical boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike many in the blockchain community who believe that compliance laws are
    put in place only to restrict and control blockchain technologies from replacing
    traditional institutions, many of the rules are to protect investors from losses,
    as well as to protect a user’s privacy. Additionally, in some countries there
    are laws and regulations that require that you do record-keeping and store users’
    data to help prevent fraud, money laundering, and terrorism.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, in 2013 in the United States the Bank Secrecy Act of 1970 (BSA)
    and FinCEN issued guidance to exchanges and ICOs, categorizing them as money service
    businesses (MSBs) that require registration, reporting, and record-keeping regulations.
    What this means is that in the United States, exchanges and ICOs are required
    to register to FinCEN as MSBs.
  prefs: []
  type: TYPE_NORMAL
- en: Ignoring compliance can lead to subpoenas, financial penalties, shutdown, and
    even criminal charges. For instance, in Europe, the GDPR set a deadline to comply
    with specific compliance. Companies that are unable to comply risk getting a hefty
    fine. This applies to mobile devices, TV apps, web portals, web sites, APIs, and
    cloud storage. In fact, in 2019, CNIL fined Google 50 million euros. Another example
    is the stable coin tether that at the time of writing was ordered to freeze transfers
    of its coin on the Bitfinex exchange by the New York Supreme Court.
  prefs: []
  type: TYPE_NORMAL
- en: Each geographical location is subject to a specific requirement regarding dealing
    with blockchain technology, so it’s important to be aware of the law, security,
    and privacy rules put in place prior to developing your software.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, each geographical boundary regulators can set their own rules. If you
    take the United States and Europe as an example, each has different rules regarding
    blockchain, and in case you have even one visitor from these countries, you should
    be complying with these regulations. In this chapter, you will take a look at
    the United States and Europe as an example; however, you need to check each specific
    geographical boundary for the specific rules that apply locally.
  prefs: []
  type: TYPE_NORMAL
- en: United States Compliance
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The United States has security regulations and money transfer laws that require
    that you comply with specific state laws, and you may even need to apply for a
    state license if you transfer crypto. The bodies that deal with blockchain-related
    technologies in the United States are the Securities and Exchange Commission (SEC)
    and Alternative Trading Systems (ATS).
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, the SEC views both initial coin offerings (ICOs) and
    security token offerings (STOs) as securities. As such, they are under the regulations
    of the Securities Exchange Act of 1934, which outlines how to transfer securities
    between entities. For instance, the SEC requires exchanges to register with the
    national securities exchange and/or ATS.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: STO and ICO are both considered securities in the United States; however, STOs
    are more fashionable among investors than ICOs, as many ICOs were forced to refund
    investors in 2018 and 2019.
  prefs: []
  type: TYPE_NORMAL
- en: Exchanges also bind to specific regulations; for instance, exchanges that deal
    with the derivative need to register with the Commodity Futures Trading Commission
    (CFTC) as a CFTC Exchange or Designated Commodity Market (DCM) because of the
    Commodity Exchange Act of 1936 (CEA).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To better understand how to become compliant in the United States, read the
    following report by NIST: [https://nvlpubs.nist.gov/nistpubs/ir/2018/NIST.IR.8202.pdf](https://nvlpubs.nist.gov/nistpubs/ir/2018/NIST.IR.8202.pdf)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Europe Union Compliance
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The European Union is in the process of implementing specific requirements for
    blockchain and crypto markets; these requirements will take into account a protocol
    known as Know Your Client (KYC) and antimoney laundering (AML) laws.
  prefs: []
  type: TYPE_NORMAL
- en: In regard to digital assets, the European Union’s regulation currently doesn’t
    oppose crypto-fiat and fiat-crypto exchanges. Most of the concerns are to make
    sure that crypto is not used to finance illicit activities, such as money laundering
    and terrorism.
  prefs: []
  type: TYPE_NORMAL
- en: To take these concerns into account, crypto platforms need to do due diligence
    on customers and report any suspicious transactions according to KYC.
  prefs: []
  type: TYPE_NORMAL
- en: 'To better understand how to become compliant in Europe, read these EUBOF and
    CNIL report:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.eublockchainforum.eu/sites/default/files/reports/eu_observatory_blockchain_in_government_services_v1_2018-12-07.pdf](https://www.eublockchainforum.eu/sites/default/files/reports/eu_observatory_blockchain_in_government_services_v1_2018-12-07.pdf)
    .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.cnil.fr/sites/default/files/atoms/files/blockchain.pdf](https://www.cnil.fr/sites/default/files/atoms/files/blockchain.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Regulations change often; keep an eye out for news and information released
    by the SEC, EUBOF, and other organizations where your platform is published. If
    you are on social media, follow those organizations’ accounts or add news updates
    to your reading list.
  prefs: []
  type: TYPE_NORMAL
- en: Readiness Recommendations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By having awareness, you can achieve both compliance and security readiness
    to ensure your platform is ready for production and help prevent shutdown by attackers
    or governments.
  prefs: []
  type: TYPE_NORMAL
- en: There isn’t an exact set of rules you can use globally to ensure readiness because
    compliance is different between geographical boundaries; however, there are certain
    key elements that are good practice and can help you be security and compliance
    ready. In the next sections, I will cover specific attacks; these general recommendations
    are basic recommendations to take into account while you’re still developing your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: '*Geographical location*: If you intend to have even one user registered on
    your platform, you need to be compliant ready at that user’s location and be aware
    of the rules and regulations there.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Solve a problem*: Ensure you are actually solving a problem. Ask yourself,
    what is my unique selling proposition (USP)? Don’t just utilize the blockchain
    to get in on the hype. The 2017 ICOs party is over as many coins got de-listed
    and ICOs have been forced to refund investors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Permission-based blockchain*: If you are building a permission-based blockchain,
    you should define the roles of members such as admin, publishers, users, and so
    on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Privacy*: Regarding providing user information, the more the better. Inform
    your users as much as possible concerning privacy matters. When you gather data,
    the less is better; capture only what you need. The following are some specific
    recommendations in regard to privacy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tip** Based on reports from CNIL, NIST, and EUBOF, implement your code following
    the General Data Protection Regulation (GDPR).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Privacy policy*: Set a privacy policy and let the user know what information
    is stored and what information is shared with third parties. For example, inform
    users of logging data into an analytics tool in your privacy policy.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Unsubscribe*: Publish a form or an e-mail address for consent, withdrawal,
    and complaints related to the privacy policy on your platform.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Policy changes*: Inform the user of any privacy policy change.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Gathering users’ data*: Take a minimalistic approach when gathering all users’
    information; store only what’s needed.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Data collected*: Split data into the data you need in order to operate your
    platform and the other data collected.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Anonymization*: Consider implementing your platform with full anonymization.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Geographical location*: When storing data, ensure the data is collected according
    to the guidelines in that geographical location.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Permission*: Request permission from the user when storing any data, such
    as in cookies, in a local database, or in the cloud.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Clear everything*: Clear cookies, sessions, and other storage once the user
    has logged out. Allow the user to clear data from any third-party tools used on
    your platform.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Clean*: Allow the user to delete data and clean history.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Export*: Allow the user to export data.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Inform*: Inform users of any data breach.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are general security recommendations:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Secure Sockets Layer (SSL)* : HTTPS should be used throughout web applications
    and especially when requesting and exporting data.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Zero knowledge proof (ZKP)* : For blockchains, use zero knowledge proof (ZKP);
    see [https://github.com/topics/zero-knowledge-proofs](https://github.com/topics/zero-knowledge-proofs)
    .'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Note** ZKP is a method where one party proves to the verifier that they know
    the value of, let’s say, x. A real-life analogy would be knocking on a door and
    providing a secret word to get access to a private, members-only club.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Encryption*: Use homomorphic encryption or secure multiparty computation.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Secure authentication system*: Use a secure authentication system such as
    OAuth 2.0 standards. Example: [https://developer.github.com/apps/building-oauth-apps/](https://developer.github.com/apps/building-oauth-apps/)
    .'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Service timeout and restrictions*: Set up a timeout mechanism on services
    for delayed responses to ensure not to cause services to choke (slow down). Implement
    throttling login attempts. Set up secured handshake everywhere.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Common security vulnerabilities*: Protect against common security vulnerabilities
    such as distributed denial-of-service (DDoS) and cross-origin resource sharing
    (CORS).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Note** CORS uses additional HTTP headers to give an application running on
    one domain access to resources on a server at a different domain.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Sensitive information*: Save passwords and any other sensitive information
    as hashed data using an encrypted method.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*IP restriction*: Restrict IPs that can access your ports. For example, don’t
    have root and FTP access to any IP addresses, just to your IP address.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Security measurement*: Include security measures into the development cycle
    (see the “Development Cycle” section later in this chapter).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To summarize, I reviewed what it means to be security ready, what security testing
    is, and how to be compliance ready. You looked at the United States and Europe
    Union compliance regulations regarding blockchain technology, and lastly, I covered
    security readiness recommendations you should take into account in the early stages
    of your development cycle. In the next section of this chapter, you will be looking
    at specific crypto wallet attacks that can cause significant losses and how to
    prevent them.
  prefs: []
  type: TYPE_NORMAL
- en: Common Blockchain Attacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, I will be covering some of the most famous and common blockchain
    attacks. I have broken these attacks into three categories.
  prefs: []
  type: TYPE_NORMAL
- en: '*Wallet cyberattacks*: Directed at crypto wallets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Blockchain network attacks*: Aimed at the blockchain P2P network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Platform attacks*: Aimed at platforms that support blockchain, such as exchanges,
    web sites, and lending platforms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep in mind that although I have broken the process down into three categories,
    most of these attacks use different techniques and different targets but have
    the same goal of capturing crypto private keys.
  prefs: []
  type: TYPE_NORMAL
- en: Wallet Cyberattacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, I will review specific cyber attacks directed at crypto wallets.
    As I highlighted at the beginning of this chapter, once crypto funds are transferred,
    it’s not easy to track them down as they can be transferred from one wallet to
    another, and the transfer is irreversible, unless the majority of peers on the
    network agree to change the block.
  prefs: []
  type: TYPE_NORMAL
- en: '*“For every lock, there is someone out there trying pick it or break in.”*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —David Bernstein
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Common wallet attacks can come in many shapes and forms by producing the same
    result of the user losing their private keys. The attacker often starts as a “phishing
    attack” resulting in a user’s confidential information being compromised, and
    then the perpetrator is able to transfer funds out of the account.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *phishing attack* (think fishing for information) is an attempt to fraudulently
    capture a user’s confidential information such as usernames, passwords, account
    numbers, and so on. This is done by using electronic communication such as e-mail
    to disguise the attacker as a trustworthy entity.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, other than crypto scams such as Bitconnect and iFan, wallet-related
    theft has resulted in the second biggest losses in crypto assets, amounting to
    close to $5 billion (see Figure [11-1](#Fig1)).![../images/475651_1_En_11_Chapter/475651_1_En_11_Fig1_HTML.jpg](../images/475651_1_En_11_Chapter/475651_1_En_11_Fig1_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11-1
  prefs: []
  type: TYPE_NORMAL
- en: Biggest crypto theft incidents
  prefs: []
  type: TYPE_NORMAL
- en: The best solution against a wallet attack is removing cryptocurrency from exchanges
    altogether when not in use and placing these cryptos in your own “cold wallet”
    centralized storage. This can be achieved with hardware wallets such as Nano,
    Trezor, KeepKey, and so on. Moving crypto to a cold wallet gives you the highest
    level of protection and avoids exchange losses such as the Mt. Gox incidents where
    the admin’s password was cracked and many users lost their wallet keys.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Cold storage*  is a method of keeping crypto’s private keys on a USB drive,
    paper wallet, or other data storage medium in a safe location. Think of it as
    being your own bank.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will be looking at common wallet attacks. I will provide
    a postmortem analysis to help ensure you don’t repeat the same mistakes others
    did, both as a developer and as a user.
  prefs: []
  type: TYPE_NORMAL
- en: Online Wallet Phishing-Malware Attacks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Online wallets are more prone to attacks than offline wallets as they are connected
    to the Internet. For instance, a phishing-malware attack  was carried out recently
    against Electrum’s wallet and caused more than $1 million in losses.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Malware comes from a mashup of the words *malicious* and *software*. The software
    is built to disrupt, damage, or gain access to the victim computer.
  prefs: []
  type: TYPE_NORMAL
- en: This was done by the hacker setting up malicious servers; then when a user wallet
    got connected to one of those servers and tried to send a BTC transaction, the
    attacker’s code showed an official-looking message telling the user they needed
    to update their Electrum wallet, along with a false URL to download a fake version
    of Electrum’s wallet with malware.
  prefs: []
  type: TYPE_NORMAL
- en: Once the user used the attacker URL and downloaded the new fake version of Electrum,
    the wallet requested the user to re-enter their passwords, which was then sent
    to the hacker. Then the hacker was equipped with the login information of the
    user and was able to log into the real Electrum’s wallet and transfer the user’s
    private keys into their own wallet.
  prefs: []
  type: TYPE_NORMAL
- en: Postmortem
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'As a user, besides avoiding online wallets altogether and using cold storage,
    you can reduce the risk by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Download only official software*: Do not download online wallets or upgrade
    from any other source other than the wallet’s official web site. Check URLs by
    hovering over links but not clicking them. Especially check for small misspelling;
    see if you can notice the little misspellings here: paypaI.com, Electrom.com.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Protect your information*: Be careful with information shared via e-mail.
    E-mails requesting that you confirm your account credentials need to be sent from
    the business you recognize and by you initiating the request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ensure authentication*: Download the wallet’s software and check the GPG signature.
    Never give away your crypto assets’ private keys to any “official” representative.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Recognize false support phone number*: Often companies that are phishing for
    your information use a fake support number. Many do a Google search to find the
    phone number of companies and fall victim of this attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As a developer, you should do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Use GPG signature verification*: Implement GPG signature verification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: GPG/GNU  is a suite of cryptographic software used in encryption to ensure authenticity
    by checking signatures against the downloaded files. To ensure the prevention
    of wallet attacks, implement GPG or GNU Privacy Guard. As a user, don’t forget
    to also check that the actual GPG/GNU itself is authenticated and from the developer.
  prefs: []
  type: TYPE_NORMAL
- en: '*Educate your users*: Set pages, video tutorials, and blog posts to educate
    your users and prevent users from making common mistakes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keylogger Malware
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Most malware software intends to harm your computer. Popular malware software
    that can be used to extract your cryptos is a keylogger or screen scraper  . This
    software records everything you type as well as takes screenshots of your computer
    in an attempt to capture passwords and personal information. These types of attacks
    are less likely to happen at home, as the attacker needs to attach an actual Universal
    Serial Bus (USB) key to your computer to record the key log; however, this can
    happen when you use a public computer, for example, at a hotel lobby or a library.
  prefs: []
  type: TYPE_NORMAL
- en: Postmortem
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: As mentioned, at home you are less likely to be attacked by a keylogger; however,
    when logging into a public computer, be cautious, check if there is a USB key
    attached to that computer, and avoid accessing your important accounts. At your
    own computer, on a Mac, check Activity Monitor to ensure you recognize all the
    services that are running in the background. If needed, do a web search to find
    any services you don’t recognize, and if anything looks odd, stop and remove the
    service and app. Install antivirus software and re-install your OS if in doubt.
  prefs: []
  type: TYPE_NORMAL
- en: Dust Attack
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A dust attack  is done by the attacker sending a tiny (dust) transaction that
    the hackers use either to spam the blockchain network and take up a block space
    or to mark the targeted addresses in hopes that the user transacts these cryptos,
    which can help the attacker identify a user’s personal information by tracing
    the transaction history.
  prefs: []
  type: TYPE_NORMAL
- en: Postmortem
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: As a user, do not spend unrecognized transactions.
  prefs: []
  type: TYPE_NORMAL
- en: As a developer, implement a coin control feature so unrecognized transactions
    can be marked as “Do Not Spend” and not be included with your transactions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Read the privacy document regarding bitcoin, which provides valuable information
    regarding protecting privacy that can apply to many scenarios: [https://en.bitcoin.it/wiki/Privacy](https://en.bitcoin.it/wiki/Privacy)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Hot Wallet Attack
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In a hot wallet attack  , the attacker retrieves the wallet’s private keys from
    a “hot wallet” where the private keys are stored online by way of phishing, password
    cracking, or any other method. Once the private keys are pulled from an online
    network, attackers can transfer these keys to their own wallet.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Exchanges store the user’s crypto private keys online in what is called *hot
    wallets*, or operational wallets. The reason these private keys are stored online
    is to allow real-time withdrawals from wallets.
  prefs: []
  type: TYPE_NORMAL
- en: Postmortem
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: As a user, the best way to avoid these losses is to keep your crypto under your
    own control in a cold wallet and not on centralized exchanges.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a developer, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Keep a cold wallet*: Store a user’s keys in cold storage and avoid hot wallets
    as much as possible. For instance, Coinbase.com claims that it stores 98 percent
    of its users’ funds on paper backups distributed geographically to safe deposit
    boxes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Encrypt private keys*: If you need to store private keys on storage connected
    to an online network, at least encrypt the keys with a strong encryption key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Watch for unusual activity*: For instance, many exchanges approve large withdrawals
    manually.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain Network Attacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, I will cover common attacks that target the blockchain network.
  prefs: []
  type: TYPE_NORMAL
- en: Sybil Attacks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The name Sybil is synonymous with someone who has a multiple personality disorder.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A blockchain Sybil attack is an entity attempting to influence the P2P network
    by way of creating multiple identities and controlling multiple nodes.
  prefs: []
  type: TYPE_NORMAL
- en: A Sybil attack creates multiple fake accounts in order to control a network.
    The entity that controls these multiple accounts can then influence the network
    as they have additional voting power in a democratic network.
  prefs: []
  type: TYPE_NORMAL
- en: An easy way to understand this is the 2017 United States election where one
    entity, Russia, influenced an election process by creating multiple social media
    accounts and controlling the content of them.
  prefs: []
  type: TYPE_NORMAL
- en: A blockchain example would be attackers attempting to out-vote honest nodes
    on the P2P network by creating multiple Sybil identities. By having a majority
    vote, the attackers can refuse to receive blocks or transmit fake blocks.
  prefs: []
  type: TYPE_NORMAL
- en: If the Sybil attacks carry out a large enough attack, they are able to control
    the majority of the P2P network’s hash rate and change blocks, which is then a
    double spending attack.
  prefs: []
  type: TYPE_NORMAL
- en: Postmortem
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: As a developer, you can discourage Sybil attacks by making them impractical.
    If there is a cost associated with launching a Sybil attack such as costs to create
    an account, run servers, have electricity, etc., this can discourage or make attacks
    impractical. However, make sure you take into account legitimate users who need
    to create multiple accounts.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, popular blockchains have been taking Sybil attacks into consideration.
    For instance, the bitcoin PoW census algorithm needs a lot of processing power,
    so creating a block is proportional to the total processing power. This discourages
    attackers, because miners would rather do actual mining than risk losing on a
    failed Sybil attack. Similarly, the PoS census algorithm requires staking coins,
    so attackers will risk losing these coins.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, as you have seen in previous chapters, Ethereum, EOS, and NEO include
    a large cost associated with the deployment of dapps. Ethereum has a minimum fee
    of 32,000 gas and 200 gas per byte, EOS is around 120 coins, and NEO has a fixed
    cost of 100 to 1,000 gas. On top of that, many blockchains such as bitcoin, Ethereum,
    and NEO charge a transaction fee, which helps discourage attackers. Similarly,
    EOS does not charge transaction fees, but it is using a “chain of trust” to combat
    attackers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *chain of trust* is a way to combat Sybil attacks by requiring trust before
    allowing new identities to join a network. A version of the chain of trust can
    include allowing a user to create a new account but not giving it full privileges
    for a certain time.
  prefs: []
  type: TYPE_NORMAL
- en: EOS charges $1 to $4 per new account to developers; obviously, developers will
    be reluctant to create accounts and put in place mitigation to get an account
    approved.
  prefs: []
  type: TYPE_NORMAL
- en: Another way to combat a Sybil attack is by changing the hierarchy from a democracy
    to a meritocracy (governed by selected people). Users who were created a long
    time ago and have a good reputation would have more weight than new accounts.
    Think of the Stackoverflow.com or Wikipedia.com reputation system; see [https://stackoverflow.com/help/whats-reputation](https://stackoverflow.com/help/whats-reputation)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Double Spending or 51 Percent Attack
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Previously in this book, I talked about potential double spending attacks against
    cryptocurrencies, where a malicious node gains control of more than 50 percent
    of a blockchain network’s hash rate and is able to alter and manipulate blocks.
    Large blockchains like bitcoin and Ethereum are not easy to overtake by a 51 percent
    attack due to the miner competition, which demands a high level of resources.
    For instance, according to [https://www.crypto51.app](https://www.crypto51.app)
    , the theoretical cost of attacking bitcoin would be $257,472 at the time of writing;
    see Figure [11-2](#Fig2).![../images/475651_1_En_11_Chapter/475651_1_En_11_Fig2_HTML.jpg](../images/475651_1_En_11_Chapter/475651_1_En_11_Fig2_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11-2
  prefs: []
  type: TYPE_NORMAL
- en: Theoretical cost of a 51 percent attack on various blockchains
  prefs: []
  type: TYPE_NORMAL
- en: However, smaller blockchains have been the target of the 51 percent attack.
    This happened to the Verge blockchain, which lost almost $3 million in two attacks.
    Bitcoin gold suffered the biggest loss of $18 million, and Ethereum Classic lost
    $1.1 million. In fact, there was a total of $23 million in losses in less than
    a year during 2018 and 2019; see Figure [11-3](#Fig3).![../images/475651_1_En_11_Chapter/475651_1_En_11_Fig3_HTML.png](../images/475651_1_En_11_Chapter/475651_1_En_11_Fig3_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11-3
  prefs: []
  type: TYPE_NORMAL
- en: Double spending losses from 2018, to January 2019
  prefs: []
  type: TYPE_NORMAL
- en: Postmortem
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: As an investor, you should check the cost to attack the blockchain you are interested
    in investing in and whether there is a safety net mechanism in place for the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain developers should create some sort of a safety net mechanism, for
    instance, creating a hash that holds a snapshot of all transactions and balances
    of each of your blocks and then storing that hash into a larger blockchain. For
    instance, you could utilize bitcoin’s OP_RETURN, just as you did in Chapter [4](475651_1_En_4_Chapter.xhtml),
    and store the hash as a backup in case there is a 51 percent attack.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, [http://komodoplatform.com](http://komodoplatform.com) was able to
    solve the double spending problem by creating a delayed proof of work (dPoW) security
    mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: Miner Ransomware
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As I mentioned, bitcoin has been unaffected by these 51 percent attacks so far;
    however, hackers have found a new way to affect blockchains by attacking miners
    with ransomware.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ransomware is a type of malicious software aimed at blocking a computer until
    money is paid. The name is a mashup of the words *ransom* and *software*.
  prefs: []
  type: TYPE_NORMAL
- en: Hackers lock up mining rigs using similar techniques that ransomware is using
    on personal computers. On personal computers, malware, such as the NotPetya ransomware,
    gets downloaded and installed and then is able to lock the user’s computer until
    a ransom is paid to a wallet address.
  prefs: []
  type: TYPE_NORMAL
- en: Up until now, ransomware targeted only personal computers; however, new ransomware
    such as hAnt is taking aim at miners. How hAnt is installed is not known, but
    it is estimated that it is probably downloaded with a version of the mining rig
    firmware. Then the ransomware has access to the firmware of the miner and can
    control the miner.
  prefs: []
  type: TYPE_NORMAL
- en: The attacker displays a message once the admin login threatens to overheat and
    destroy the miner. This can be achieved by turning off the fans if the victims
    don’t infect other devices or pay a bitcoin ransom, as shown in Figure [11-4](#Fig4).
    So far, only bitcoin and litecoin miners manufactured by Antminer and Avalon have
    been affected, but this attack can be potentially done to any miner.![../images/475651_1_En_11_Chapter/475651_1_En_11_Fig4_HTML.jpg](../images/475651_1_En_11_Chapter/475651_1_En_11_Fig4_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11-4
  prefs: []
  type: TYPE_NORMAL
- en: 'hAnt ransomware message. Image credit: sensorstechforum.com.'
  prefs: []
  type: TYPE_NORMAL
- en: Postmortem
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Getting rid of the ransomware is not easy. The software may be built with a
    “tripwire” script that can damage the miner if the miner disconnects from the
    Internet. To solve this problem, you need to first remove the ransomware surgically
    from the miner’s Secure Digital (SD) cards. Additionally, a mining farm going
    offline for a period of time is costly.
  prefs: []
  type: TYPE_NORMAL
- en: The best approach is to avoid this attack altogether by not downloading a firmware
    upgrade from any source than the official vendor’s web site.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse Attack on the P2P Network
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: An informational eclipse attack  can be conducted on its own or as part of a
    different attack, such as a 51 percent attack. The attackers gain control over
    a peer’s access to information in the P2P network by manipulating the network
    so that nodes communicate only with malicious nodes. The attacker can then manipulate
    the mining and the consensus mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: Postmortem
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Run analysis, simulations, and experiments to find countermeasures to avoid
    an eclipse attack. Good research with potential countermeasures to increase bitcoin’s
    security countermeasures against an eclipse attack can be found here (and can
    be applied to many other blockchain networks): [https://hackernoon.com/eclipse-attacks-on-blockchains-peer-to-peer-network-26a62f85f11](https://hackernoon.com/eclipse-attacks-on-blockchains-peer-to-peer-network-26a62f85f11)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Routing Attacks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Internet routing attacks  include BGP hijacks, and malicious attacks against
    Internet service providers (ISPs) can be also executed against blockchains.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A BGP hijack is a maliciously rerouted Internet traffic attack. This is done
    by falsely announcing ownership of groups of IP addresses (IP prefixes).
  prefs: []
  type: TYPE_NORMAL
- en: 'Large mining farms are centralized in a few geographical locations, which makes
    them ideal for an ISP type of attack. Attackers can commit the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Partition attack***: An ISP can partition the P2P network by hijacking a
    few IP prefixes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Delay attack***: An ISP delays traffic to and from a blockchain node, which
    results in a delay in the block propagation, slowing transactions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These types of attacks could reduce a node’s revenue as well as turn into a
    50 percent attack as fewer nodes influence the network. Additionally, these attacks
    can also prevent the transaction from being sent by large entities such as exchanges.
  prefs: []
  type: TYPE_NORMAL
- en: Postmortem
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Create a custom script or install hardware to monitor the network. Many ISPs
    provide a paid solution to monitor the network and prevent an attack. Refer to
    the “DoS and DDoS Attacks” postmortem section for more solutions that can help
    mitigate this attack.
  prefs: []
  type: TYPE_NORMAL
- en: Platform Attack
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bitcoin’s blockchain network is by design a secure network and has proven reliable.
    Bitcoin was released in 2009, and there has not been a successful attack on bitcoin’s
    blockchain network at the time of writing.
  prefs: []
  type: TYPE_NORMAL
- en: The reason bitcoin’s blockchain has a high level of security is that the data
    is distributed between nodes. Additionally, mining bitcoin is energy expensive,
    so attacking bitcoin’s network could cost more than mining itself, and attackers
    risk losing money just attempting an attack. However, that’s not the only reason;
    a big contributing factor to bitcoin withstanding the test of time is that it’s
    open source and enables developers to quickly implement changes based on research
    and recommendations by security experts.
  prefs: []
  type: TYPE_NORMAL
- en: With that being said, that does not keep other platforms safe that provide services
    built on top of safe blockchains, such as exchanges, lending platforms, wallet-based
    services, and dapps that store private keys.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, exchanges hold billions in deposits and make a perfect target
    for hackers. As mentioned, exchanges store the user’s crypto in the form of private
    keys, and some of these keys are kept online in a hot wallet to allow real-time
    withdrawals and trading. Not handling these private keys with care can cause losses.
  prefs: []
  type: TYPE_NORMAL
- en: Mt. Gox’s 2011 security breach is a good example. This attack happened because
    a hacker was able to crack the password of a Mt. Gox auditor and was able to transfer
    800,000 bitcoins to himself. Besides Mt. Gox, there is a constant stream of news
    about exchanges shutting down due to loss of crypto.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from Figure [11-5](#Fig5), the biggest loss of close to $1 billion
    was by Mt. Gox in two attacks, and the largest theft in crypto history was caused
    by an attack on the Coincheck exchange network in 2018.![../images/475651_1_En_11_Chapter/475651_1_En_11_Fig5_HTML.jpg](../images/475651_1_En_11_Chapter/475651_1_En_11_Fig5_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11-5
  prefs: []
  type: TYPE_NORMAL
- en: Biggest exchanges losses of BTC
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, I will review some of the largest attacks and give you
    recommendations for how these attacks could be prevented.
  prefs: []
  type: TYPE_NORMAL
- en: Credential Attacks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Authentication-related attacks such as password cracking caused losses in the
    millions.
  prefs: []
  type: TYPE_NORMAL
- en: '*Direct attack on exchanges*: As mentioned, Mt. Gox’s 51 percent attack in
    2011 caused two separated losses: 2,609 BTC and over 750,000 BTC. Hackers were
    able to get an auditor’s credentials and transferred these bitcoins to the hacker’s
    address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Attack on users*: Millions in losses occurred because of taking over users’
    accounts. For instance, phone companies enabled the takeover of cell phone numbers
    by providing simple billing information. Hackers can port a number to a new provider
    and can then approve a reset password of accounts on exchanges using SMS verifications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Postmortem
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: As a user, the best way to avoid these losses is to keep your crypto assets
    in a cold wallet and not on centralized exchanges.
  prefs: []
  type: TYPE_NORMAL
- en: 'On your own computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '*SSL*: Don’t register on sites that don’t have an SSL certificate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Strong passwords*: Use unique and strong passwords long in length and include
    numbers, characters, and special characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Unique passwords*: Don’t reuse the same password on different platforms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Layers of security*: Set up all recommended layers of security such as SMS,
    2FA enabled, e-mail confirmation, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Antivirus*: Install paid or free virus-scanning software. On personal computers,
    Avast security has a free version used by 435 million people: [https://www.avast.com](https://www.avast.com)
    . It includes a plugin for Chrome that warns against phishing sites.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*VPN*: Use VPN connection as much as possible especially on a network that
    is public and isn’t secured.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Avoid malware and ransomware*: Be mindful of software you install and ensure
    it’s from a reputable vendor. Read all messages during the installation; don’t
    just agree to all messages. Install software that prevents ransomware.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep your crypto assets under your own control in a cold wallet and not on centralized
    exchanges. Set up more layers than just SMS verifications on important accounts.
    Security layers can be 2FA authentication, e-mail verifications, and IP restriction.
  prefs: []
  type: TYPE_NORMAL
- en: As a developer, password cracking is the most common way of gaining access to
    a web app. Implement a security tester that ensures the system demands a strong
    encrypted password.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good example of such a solution is the John the Ripper password cracker:
    [https://github.com/magnumripper/JohnTheRipper](https://github.com/magnumripper/JohnTheRipper)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, implement the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Protect credentials*: Protect your users’ credentials using multiple layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Strong password*: Enforce strong passwords on account creation and reset passwords.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*2FA enabled*: Set up a two-factor authentication (aka 2FA enabled); a popular
    example is Google Authenticator.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Confirmation*: Require both SMS confirmation and an e-mail verification on
    important operations such as transfers.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Storage*: Store users’ sensitive data (such as private keys) encrypted and
    on servers that are disconnected from the Internet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Encryption*: Use SSL on all pages. Use AES-256 encryption. Hash passwords
    with a cost factor of 12.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Lock account*: Limit login attempts and lock an account once multiple failed
    attempts occur.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On your development personal computer:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Remote connection*: Use strong login passwords especially if you connect remotely
    to your machine.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Encrypt data*: Encrypt your hard drive to turn encryption on. Go to System
    Preferences and select Privacy & Security. Click Turn On FileVault.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Lock on inactive*: On the General tab under Advanced, set it up to log out
    after five minutes of inactivity and enable screen locking by selecting “require
    an admin password to access system-wide preference.”'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Firewall*: Set up a firewall on your computer; on the Firewall tab, turn on
    the firewall.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*VPN*: Use a VPN when working on a none-secure network.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Software*: Be mindful of software you are installing and ensure it is from
    a reputable vendor.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Libraries*: Avoid installing code libraries with root access if possible.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Faulty Code
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Faulty code is one of the biggest reasons for losses. It has become so significant
    that many large companies set bounties for white-hat hackers to discover bugs,
    making it profitable for hackers to point out flaws instead of steal.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A white-hat hacker is a moral person who gains unauthorized access to data to
    point out flaws in a system.
  prefs: []
  type: TYPE_NORMAL
- en: For example, hackers exploited a faulty withdrawal code in Poloniex in 2014\.
    The exact number of bitcoin stolen was not shared by the company.
  prefs: []
  type: TYPE_NORMAL
- en: Postmortem
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'As developers:'
  prefs: []
  type: TYPE_NORMAL
- en: '*SQL injections*: Avoid SQL injections by testing and implementing SQL injection
    filters. You can find more information here: [http://sqlmap.org/](http://sqlmap.org/)
    .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Note** A SQL injection is an attack where a hacker passes illegal SQL statements
    through a text entry input box to gain access to content. The hackers can then
    use this vulnerability to add, change, or delete data from a SQL database.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*CSRF attack*: The hacker exploits service requests to modify and retrieve
    data and verify the authenticity of POST, PUT, and DELETE requests. To avoid this,
    follow these recommendations:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Restrict IPs*: Set services to respond to certain IPs only.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Set tools and libraries*: Find tools to avoid CSRF attacks here: [https://github.com/0xInfection/XSRFProbe](https://github.com/0xInfection/XSRFProbe)
    .'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Cross-site scripting (XSS)*: Avoid XSS by using tools and libraries such as
    these:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://pentest-tools.com/website-vulnerability-scanning/xss-scanner-online](https://pentest-tools.com/website-vulnerability-scanning/xss-scanner-online)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/topics/xss-scanner](https://github.com/topics/xss-scanner)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: XSS attacks are executed by an injection of malicious code into a trusted website.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency Backdoor Attack
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A dependency backdoor attack  starts as a social engineering attack and includes
    the injection of malicious code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A social engineering attack, the engineer is a conman. The attacker conceals
    his true identity and motives to gain access or data. For instance, you get an
    email that seem legit from your manager asking for a specific information.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, in late 2018, a hacker was able to successfully insert malicious
    code into event-stream, an npm JavaScript library ( [https://www.npmjs.com/package/event-stream](https://www.npmjs.com/package/event-stream)
    ). The library is used by millions and targets a company called Bitpay, which
    has a Git library called copay. copay is an open source wallet hosted on GitHub
    ( [https://github.com/bitpay/copay](https://github.com/bitpay/copay) ).
  prefs: []
  type: TYPE_NORMAL
- en: Like many open source libraries, the developer was not being paid for the work
    on event-stream and lost interest in the project before giving it away to a new
    maintainer. The new maintainer injected malicious code that targets copay. The
    code captures account details and private keys from accounts having a balance
    of more than 100 bitcoin or 1,000 bitcoin cash. copay then updated its dependency
    library on versions 5.0.2 and included the attacker code, which resulted in a
    loss of millions.
  prefs: []
  type: TYPE_NORMAL
- en: The code captured the victims’ account data and private keys and then, using
    a service call, sent the data to the attacker server undetected.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete detail and analysis of this attack can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://blog.npmjs.org/post/180565383195/details-about-the-event-stream-incident](https://blog.npmjs.org/post/180565383195/details-about-the-event-stream-incident)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://snyk.io/blog/a-post-mortem-of-the-malicious-event-stream-backdoor/](https://snyk.io/blog/a-post-mortem-of-the-malicious-event-stream-backdoor/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Postmortem
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: As a user, as recommended throughout this chapter, place crypto in a cold wallet.
    As a developer, be cautious when handling open source libraries. The open source
    model relies on many packages, but few developers support the libraries, which
    could enable a malicious takeover. To help avoid this, run npm audit to detect
    any vulnerable dependency.> npm audit
  prefs: []
  type: TYPE_NORMAL
- en: 'Check and test your code for any reported vulnerabilities on a vulnerability
    database, such as the snyk.io site: [https://snyk.io/vuln](https://snyk.io/vuln)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'Do not set your package.json file to include an automatic update of libraries."dependencies":
    { "some-library": "latest" }Instead, check pull requests on the libraries you
    want to update and check changes manually for the dependencies you use. Use a
    library-specific version."dependencies": { "some-library": "1.0.0" }It’s the same
    with npm install. Install specific libraries, especially on less known libraries.>
    npm install -g some-library@1.0.0'
  prefs: []
  type: TYPE_NORMAL
- en: DoS and DDoS Attacks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A *denial-of-service* (DoS) attack  is a common attack intended to prevent users
    from accessing a service. A *distributed denial-of-service* (DDoS)  attack is
    similar to DoS, but instead of the attacker utilizing a single machine to attack,
    the attacker uses multiple machines all attacking at the same time. Because of
    the usage of multiple machines, the chances of a successful attack increases,
    and it’s harder to pinpoint the attacker’s exact location.
  prefs: []
  type: TYPE_NORMAL
- en: Exchanges and web sites are popular targets for DoS and DDoS attacks. For instance,
    when bitcoin gold officially launched, it was targeted by a DDoS attack that ended
    up crashing the web site for hours.
  prefs: []
  type: TYPE_NORMAL
- en: Popular blockchain networks have a simple built-in DoS prevention mechanism;
    however, many networks are not protected against more sophisticated attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common types of attacks are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Buffer overflow*: This attack sends more traffic to the target service than
    the service is able to handle. This attack can give the attacker the ability to
    crash and even control the targeted service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*ICMP flood*: Also known as “the ping of death” or a “smurf attack,” this attack
    is intended to overload the network by forcing a node to distribute bogus packets
    to all nodes, which results in an overload on the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*SYN flood*: A request to connect is sent, but it never gets fully authenticated.
    The requester then attacks all the open ports on the server until the server crashes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*NTP/DNS amplification*: This is an attack on NTP servers, where the attacker
    sends a large number of UDP packets and spoofs the source IP address, making the
    NTP server believe that these packets are legit traffic from the intended target.
    The overload causes the NTP server to crash.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Postmortem
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'As a developer, you need to take Dos/DDoS attacks into account and implement
    countermeasures against them. See the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Filter bad traffic*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Script*: One way to prevent is to implement a script to check for DOS/DDOS
    attacks. Check out the GitHub DDOS protection libraries: [https://github.com/topics/ddos-protection](https://github.com/topics/ddos-protection)
    . [http://vddos.voduy.com/](http://vddos.voduy.com/) is a popular one.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Firewall*: Use a firewall to block bad traffic. See Figure [11-6](#Fig6).![../images/475651_1_En_11_Chapter/475651_1_En_11_Fig6_HTML.jpg](../images/475651_1_En_11_Chapter/475651_1_En_11_Fig6_HTML.jpg)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Figure 11-6
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'DDoS protection reverse proxy explained. Photo credit: vddos.voduy.com.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Dedicated hardware*: Purchase and deploy dedicated hardware to handle mitigations
    of DDoS attacks. The hardware sits in a data center in front of the servers and
    routers and can detect and filter malicious traffic. An example of such hardware
    is FortiDDoS from [www.fortinet.com](http://www.fortinet.com) .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*ISP*: ISPs provide DDoS mitigation solutions to customers. For instance, Amazon
    provides a shield where all AWS customers benefit from automatic protections and
    provides a higher-tier levels of protection against attacks; see [https://aws.amazon.com/shield](https://aws.amazon.com/shield)
    .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Cloud mitigation*: Some cloud services provide DoS/DDoS mitigation. These
    services scrub the traffic to eliminate any malicious traffic. A popular provider
    is [cloudflare.com](http://cloudflare.com) , which provides a free standard version
    and paid enterprise solution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In terms of a blockchain network DoS/DDoS attack, examine existing blockchain
    prevention implementations such as the bitcoin satoshi client protection, which
    was implemented in version 0.7.0; see [https://en.bitcoin.it/wiki/Weaknesses](https://en.bitcoin.it/wiki/Weaknesses)
    .
  prefs: []
  type: TYPE_NORMAL
- en: To summarize, I reviewed common attacks on platforms. You looked at credential
    attacks, faulty code, dependency backdoor attacks, and DoS/DDoS attacks. Additionally,
    I reviewed ways to help you reduce the risk and prevent these attacks. In the
    next section, I will give you a suggested development cycle you can employ to
    help reduce the risks and to use a methodological approach to prevent attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Development Cycle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you saw throughout this chapter, your platform needs to be secure and protected
    against potential attacks. You cannot rely on luck and need to ensure you use
    all the available measures to reduce the risk of an attack on your platform as
    well as ensure you implement all the latest regulations related to your locale.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process can be broken into the following phases:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Design and coding*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Discover, audit, and test*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Readiness assessment*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Release*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see from Figure [11-7](#Fig7), each phase can result in going back
    to the design and coding phase as the findings can result in a security risk or
    a showstopper.![../images/475651_1_En_11_Chapter/475651_1_En_11_Fig7_HTML.jpg](../images/475651_1_En_11_Chapter/475651_1_En_11_Fig7_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11-7
  prefs: []
  type: TYPE_NORMAL
- en: Suggested development cycle to reduce security and compliance risks
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This development is a basic approach for a development cycle. Feel free to employ
    your own approach or a different approach that fits your platform and needs better.
  prefs: []
  type: TYPE_NORMAL
- en: Design and Coding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Prior to and during the design and coding phase, you should incorporate all
    the security, privacy, and compliance elements discussed in the early part of
    this chapter. These should be taken into account for all the elements of your
    platform, including the pages, login system, privacy page, integrations with third-party
    plugins, the creation of services, setting up servers, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: It is a good idea for you to create your own checklist of everything that needs
    to be incorporated and taken into account that specifically applies to your unique
    platform. It’s not possible to get one list that fits everything. Every platform
    should have a unique checklist. Additionally, as you start a new development cycle,
    you may need to update the requirements. For instance, let’s say you want your
    platform to be supported in a new locale; this will require a new checklist.
  prefs: []
  type: TYPE_NORMAL
- en: Discovery, Audit, and Test
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This step can be broken into three steps. The steps are intertwined and rely
    on one another, so you should consider these steps as one phase. These steps are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Discovery*: Find out the versions used in your platforms such as versions
    of libraries, firmware, software, third-party SDKs, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Audit*: Audit your code and platform to find common problems, accessibility
    of your services, and performance issues that can degrade and make your platform
    inaccessible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Test*: This is when you run actual tests against your platform. The purpose
    is to identify the systems and services that your platform is using and potential
    security vulnerabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The discovery is all about discovering what versions are used in your platform.
    For instance, you need to run a discovery phase to find out the firmware you are
    using. Knowledge of the version provides valuable information in case a version
    of something was marked with security vulnerability or has been deprecated. The
    discovery phase can then be used to audit and test and provide an indication of
    potential vulnerabilities in your platform.
  prefs: []
  type: TYPE_NORMAL
- en: You may find out during the discovery check that you need to go back to the
    coding and design phase because of versioning issues. For instance, once you change
    the version of a library or firmware, your code may break, and you may need to
    refactor your code.
  prefs: []
  type: TYPE_NORMAL
- en: Audit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the auditing phase, you should conduct a systematic review of specific potential
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: Just as an accountant audit financial aspect of a company and even this book
    was audited by a team, your platform needs auditing and testing to ensure your
    code follows best practices to improve performance, accessibility, and compliance
    with security and regulatory requirements.
  prefs: []
  type: TYPE_NORMAL
- en: An audit inspection can be done by your own platform team but is often done
    by an independent entity. It’s important to recognize that audits can't be expected
    to detect all the issues that need to be addressed. A blockchain-based platform
    should take into account security and compliance audits as well.
  prefs: []
  type: TYPE_NORMAL
- en: Security Audit
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The security audit can utilize a complete manual approach or utilize automated
    tools to do vulnerability assessments, security assessments, and penetration tests
    to determine what needs to be addressed. There are more than 1,500 exploits, so
    it’s a good idea to rely at least to some degree on automated audit tools as an
    integral part of your development cycle and ensure your platform passes common
    problems. Even when hiring a third-party auditor, it’s better to first check for
    common problems before starting a more vigorous audit.
  prefs: []
  type: TYPE_NORMAL
- en: Compliance Audit
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In blockchain, you need to check beyond just the security aspects; you need
    to also conduct a compliance audit to ensure privacy and regulations are implemented
    according to the law.
  prefs: []
  type: TYPE_NORMAL
- en: Just like a security audit, a compliance audit can be done by a third-party
    auditor or in-house. As you saw previously in this chapter, many of the problems
    that concern lawmakers in different locales relate to security vulnerabilities.
    As I pointed out, the compliance regulations can change often and different between
    locales, so the compliance assessment is often better done in a manual manner
    than an automatic one.
  prefs: []
  type: TYPE_NORMAL
- en: Test
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The discovery and audit rely on testing to make recommendations on how to fix
    problems in your platform. In terms of testing, there are three types.
  prefs: []
  type: TYPE_NORMAL
- en: '*Dynamic testing*: Test vulnerabilities that an attacker may target. An attacker
    trying to exploit your platform would not have access to your code and platform,
    so the tests are run without access to your source code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Static testing*: This is an inside-out approach, testing for vulnerabilities
    in the source code of your platform. This testing offers a more in-depth real-time
    snapshot of your platform and the libraries that make up your platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Penetration test*: This simulates an actual malicious attack. The penetration
    test can rely on found vulnerabilities to gain further access to your platform.
    This can help you understand what access an attacker can gain over confidential
    information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tests can be conducted by automated tools, but it’s recommended you also include
    a manual test by an actual tester, who can rely on his experience and knowledge
    to find vulnerabilities not found by automated tools.
  prefs: []
  type: TYPE_NORMAL
- en: Automated Tools
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are many testing tools that can assist you in doing the three types of
    testing. For instance, for the static testing of libraries, I already mentioned
    the npm audit, which helps detect any vulnerable in a dependency’s version.> npm
    auditFor a web app, the Google Chrome developer tools provide built-in audit tools,
    as shown in Figure [11-8](#Fig8).![../images/475651_1_En_11_Chapter/475651_1_En_11_Fig8_HTML.jpg](../images/475651_1_En_11_Chapter/475651_1_En_11_Fig8_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11-8
  prefs: []
  type: TYPE_NORMAL
- en: Google Chrome developer tool audit report
  prefs: []
  type: TYPE_NORMAL
- en: A browser’s developer tools provide a simple web proxy network tool; however,
    these tools don’t have many of features you may need, such as exporting data,
    running simulations, and filtering data. You may find it useful to utilize a third-party
    web proxy tool during the audit phase. The web proxy tool is mainly a network
    protocol analyzer, which can provide details of your network protocols, packet
    information, decryption, and so on. The two popular tools are Charlesproxy and
    Wireshark.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.charlesproxy.com/](https://www.charlesproxy.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.wireshark.org/](https://www.wireshark.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In terms of automated penetration tools, there are many tools out there. Here
    are examples of a few popular ones:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.*Security automation tools*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '*The OWASP Zed Attack Proxy (ZAP)*: *This includes p*opular free security tools*.
    See* [www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project](http://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project)
    .'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: b.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Burp Suite*: *This a*utomation tool includes free community and paid version*.
    See* [www.portswigger.net/burp](http://www.portswigger.net/burp) *.*'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Metasploit*: This tool is based on exploit, which tries to overtake the security
    measures of your platform. You can run it from a GUI or command line. See [https://www.rapid7.com/products/metasploit/download/editions/](https://www.rapid7.com/products/metasploit/download/editions/)
    .'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*CORE Impact*: Core Impact Pro tests mobile device penetration, password identification,
    cracking, and so on. It also has a GUI and a command-line interface but has high
    price tag. See [https://www.coresecurity.com/core-impact/](https://www.coresecurity.com/core-impact/)
    .'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Netsparker*: This includes a web application scanner that can help identify
    vulnerabilities such as accessing sensitive data and suggesting solutions. It
    includes SQL injection and local file induction (LFI). The penetration test fabricates
    an internal or external unauthorized attack. See [https://www.netsparker.com/](https://www.netsparker.com/)
    .'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Free Security tool from Google (ratproxy): See* [https://code.google.com/archive/p/ratproxy/](https://code.google.com/archive/p/ratproxy/)
    *.*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '6.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Kali Linux operating system (OS)*: This tool is for hackers, with many hacking
    tools pre-installed already. The OS sits as a virtual machine on your Mac/PC.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '7.SQL injections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Sqlmap*: This is an open source penetration automated testing tool to detect
    and exploiting SQL injections. See [https://sqlmap.org](https://sqlmap.org) .'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: b.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '*SQLNinja*: This tool checks for SQL injection vulnerabilities aimed at Microsoft
    SQL Server. See [https://sqlninja.sourceforge.net](https://sqlninja.sourceforge.net)
    .'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: c.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Firefox add-on called Hackbar*: This test helps you test site security including
    SQL injections and XSS holes. See [https://www.addons.mozilla.org/en-US/firefox/addon/hackbartool/](https://www.addons.mozilla.org/en-US/firefox/addon/hackbartool/)
    .'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: File inclusion allows an attacker to insert a file by exploiting dynamic file
    inclusion (such as jQuery’s $.getScript), which is implemented in the application
    to include another file. The file is then uploaded by user input and where there
    isn’t proper validation to check the file. The solution is to implement validation
    for dynamic file inclusion to ensure the origin and content.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are security testing automated tools to list; however, you can check
    a few curated lists of security testing automated tools online that fit the exact
    test you want to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/topics/testing-tools](https://github.com/topics/testing-tools)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/atinfo/awesome-test-automation](https://github.com/atinfo/awesome-test-automation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://forum.bugcrowd.com/t/researcher-resources-tools/167](https://forum.bugcrowd.com/t/researcher-resources-tools/167)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Follow the OWASP IoT testing guide and OWASP IoT testing handout recommendations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Print and follow: [https://www.owasp.org/images/2/2d/Iot_testing_methodology.JPG](https://www.owasp.org/images/2/2d/Iot_testing_methodology.JPG)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Follow this checklist: [www.owasp.org/index.php/IoT_Testing_Guides](http://www.owasp.org/index.php/IoT_Testing_Guides)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During the discover, audit, and test phases, you most likely will find small
    to major vulnerabilities that may require you to go back to the coding phase and
    rinse and repeat this process until your platform passes all the tests.
  prefs: []
  type: TYPE_NORMAL
- en: Readiness Assessment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once your platform passes the discover, audit, and test phases, you are ready
    to take an in-depth look at the technical aspects of the blockchain application
    to ensure security and compliance have been implemented. That is done by running
    a security and compliance assessment manually.
  prefs: []
  type: TYPE_NORMAL
- en: Security and Compliance Assessment
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This assessment builds upon the vulnerability assessments you did in previous
    phases. Prior to release, it’s recommended that you add a manual verification
    step to confirm that industry and/or internal security standards have been applied
    to your platform and assess the risks and exposure. This phase should also include
    the security readiness concerns I discussed in the first part of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, verification could examine the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Checking authorized access to your platform and confirming system settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examining platform and server logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring compliance with current regulations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking and tracking error codes and messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examining the latest privacy and laws
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examining the design and architecture documents to ensure the code meets these
    requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing a code review
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep in mind that the security and compliance assessment is the bigger picture,
    and you shouldn’t be looking at specific exposure of just one vulnerability. Instead,
    look at the platform as a whole. The assessments may find additional risks and
    exposures that are not acceptable, which will require you to go back to the design
    and coding phase and start this process all over again.
  prefs: []
  type: TYPE_NORMAL
- en: Release
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once your platform has passed the readiness assessment phase, publish your platform.
    It’s advised to run the same tests and checks again on the actual production code
    to ensure the platform is still passing the tests and assessments. Once you have
    completed this cycle, you can rinse and repeat this process for your new development
    cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Where to Go from Here
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A good resource with links related to blockchain security is available online:
    [https://github.com/1522402210/BlockChain-Security-List](https://github.com/1522402210/BlockChain-Security-List)
    .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a compliance and security checklist, taking into account your specific
    platform and locale.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have a platform/site, run the audit and automated testing tool on your
    existing platform or site.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter, I broke down the security and compliance of the blockchain
    process into three parts: security readiness, common blockchain attacks, and a
    recommended development cycle.'
  prefs: []
  type: TYPE_NORMAL
- en: The first part served as an introduction so you could better understand the
    terms and mind-set of building a secure platform. I covered security testing and
    compliance readiness, looking specifically at the United States and the Europe
    Union compliance requirements as examples. I covered security readiness recommendations
    to take into account during the design and coding phase. Then I covered common
    blockchain attacks that resulted in billions of dollars in losses. These attacks
    were targeting mostly crypto wallets, but also blockchain networks and blockchain-based
    platforms. Lastly, I gave you a recommended development cycle to ensure you take
    into account all the needed security and compliance issues.
  prefs: []
  type: TYPE_NORMAL
- en: In the next and last chapter, you will explore blockchain beyond just crypto.
    I will cover the power of blockchain and how it can be harnessed, as well as the
    decentralization of specific industries, examining a few industries being disrupted
    by blockchain and specific case studies.
  prefs: []
  type: TYPE_NORMAL
