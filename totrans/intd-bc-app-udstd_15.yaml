- en: © The Author(s), under exclusive license to APress Media, LLC, part of Springer
    Nature 2022J. T. GeorgeIntroducing Blockchain Applications[https://doi.org/10.1007/978-1-4842-7480-4_15](https://doi.org/10.1007/978-1-4842-7480-4_15)
  prefs: []
  type: TYPE_NORMAL
- en: 15. The Platoon Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Joseph Thachil George^([1](#Aff2)  )(1)Rome, Italy
  prefs: []
  type: TYPE_NORMAL
- en: This chapter explains how to develop a cyber-physical system based on a game
    called *Platoon*.
  prefs: []
  type: TYPE_NORMAL
- en: Platoon was a video game released in 1987-1988 by Ocean Software, first for
    8-bit home computers and then for 16-bit ones and for the Nintendo Entertainment
    System. Inspired by the war movie *Platoon*, it is composed of levels with different
    gameplay mechanics, both in third and first person. In 1988, Sunsoft also developed
    an arcade conversion, known as *Vs. Platoon,* based on the NES and Nintendo Vs.
    Series system licensed from Nintendo. According to Wikipedia, the game features
    a few stages.^([1](#Fn1))
  prefs: []
  type: TYPE_NORMAL
- en: The game consists of four levels:¹
  prefs: []
  type: TYPE_NORMAL
- en: '*Jungle and village:* “Through a labyrinth of horizontal scrolling environments
    connected by perpendicular passages, with two-dimensional movement and third-person
    lateral view”. The path is haunted by traps and the Viet Cong. The player controls
    one soldier at a time, but can replace the soldier at any time with one of the
    others, for example to avoid putting those already wounded at risk. They can jump
    and crouch, shoot and throw grenades, both with limited ammo. In the last part,
    the huts of the village are explored, which become temporarily transparent, in
    search of objects necessary to continue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Guerrillas:* The game becomes a first person shooter with a minimap taking
    up half the screen. When you meet the guerrillas, who also emerge from the water
    that floods the tunnels, the movement stops and you go to check the viewfinder.
    When you enter a room, the viewfinder becomes a pointer to examine objects; in
    this way there are elements necessary to continue—supplies and traps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bunker:* This is a fixed screen viewfinder shooter; the image is dark and
    only the flashes of gunfire are noticeable by the enemies, unless the player temporarily
    lights the scene with a flare. Ammunition and flares are limited.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Barnes Jungle and Bunker:* A maze of fixed 2.5D third-person screens, to cross
    from the bottom to the top of the screen, avoiding obstacles and shooting enemies
    with the help of a compass. Ammo and total time are limited. The final boss is
    Barnes, to be hit with grenades.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of the five platoon members can take four hits before dying. There is also
    an overall morale gauge, which decreases when innocent civilians are injured or
    hit, and is recharged by gathering food and medicine. You are defeated if morale
    drops to zero, as well as if all team members die.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you learn how to implement this game with the help of Kilobots
    movements.
  prefs: []
  type: TYPE_NORMAL
- en: 15.1 The Game Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'AE-1: The Kilobots will operate on a whiteboard.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'AE-2: An obstacle will be located in the middle of the whiteboard.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 15.1.1 SoS Organization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'ASoS-1: The SoS is composed of N Kilobots.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'ASoS-2: The SoS is also composed of a controller that loads the program in
    the Kilobots memory.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'ASoS-3: The SoS platoons among the Kilobots composing the SoS.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'ASoS-4: When the SoS starts, the Kilobots are positioned in a straight line,
    at a distance of D cm.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'ASoS-5: When the SoS operates, the distance between Kilobots is maintained
    at approximately D cm.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '6.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'ASoS-6: The leader is decided before execution.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '7.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'ASoS-7: All the Kilobots know the leader’s ID.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 15.1.2 CS-Level
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'CCS-1: Each Kilobot has a RUMI to exchange messages.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each Kilobot has a RUMI to communicate with the controller.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The controller has a RUMI to communicate with the Kilobots.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each Kilobot has a RUMI to estimate distances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 15.1.3 SOS-Level
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'CSoS-1: Each Kilobot will use its RUMI to exchange information about direction,
    when it is joining the platoon, and when it is leaving the platoon.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'CSoS-2: When the SoS starts, each Kilobot notifies the adjacent follower it
    is the leader by transmitting a message.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'CSoS-3: Each Kilobot has a RUPI to estimate distance between the sender and
    the receiver using signal power.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 15.1.4 Viewpoint Emergence
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'E-1: The interaction of multiple Kilobots leads to a unique platoon.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 15.1.5 Viewpoint Dynamicity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'D-1: The platoon allows any Kilobot to become a member.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'D-2: The platoon is composed of at least two Kilobots.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'D-3: The introduction of a Kilobot into the platoon is allowed only at its
    tail.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'D-4: The platoon allows only the last Kilobot to leave.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 15.1.6 Viewpoint Time
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'T-1: The Kilobot will measure time according to a local clock T-2\. Timely-related
    events are triggered by message exchange.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'T-3: When a Kilobot starts, it will prepare motors for Mms.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 15.2 The Cyber-Physical Systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kilobots  will assist you in putting your concept into action. Kilobots were
    used to execute platoon mobility. The Kilobot swarm is a ten-thousand-robot (1024)
    swarm that may be used to develop and test collective behavior in high-growth
    swarms.
  prefs: []
  type: TYPE_NORMAL
- en: Every robot has the fundamental capabilities of an independent swarm robot (configurable
    controller, rudimentary movement, and local communication), but they are constructed
    with low-cost parts and built mainly by an automatic system.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the system's architecture enables a single operator to simply and
    flexibly control a large Kilobot collective, including "hands-off" coding, switching
    on, and charging all robots. This project utilizes the Kilobot swarm to examine
    collective “artificial” intelligence (e.g., sync, collectively transport, and
    identity) and to test novel ideas that relate minimum individual capabilities
    to swarm behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: This project hopes to gain new algorithmic insights into robustness, scalability,
    self-organization, and emerging collectives of restricted individuals utilizing
    a mixed theory-experiment approach.
  prefs: []
  type: TYPE_NORMAL
- en: 15.3 Kilobot Source Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '#include <kilombo.h>#include "platoon.h"#include <math.h>#ifdef SIMULATOR#include
    <stdio.h> // for printf#include <stdlib.h>#else#include <avr/io.h>  // for microcontroller
    register defs#endif#define RED RGB(3,0,0)#define GREEN RGB(0,3,0)#define BLUE
    RGB(0,0,3)#define WHITE RGB(3,3,3)#define STRAIGHT 1#define LEFT 2#define JOIN
    3#define QUIT 4#define OK 5#define LEAVE 6#define SPEED_DOWN 7#define TURN_LEFT_DELAY
    126#define GO_STRAIGHT_DELAY 700#define JOIN_DELAY 150#define FOLLOW_DELAY 220#define
    STANDARD_DISTANCE 80#define NORMAL_SPEED 70#define CAN_LEAVE 2#define CAN_JOIN
    3#define LEAVE_TIME 2500#define END_TIME 20000REGISTER_USERDATA(USERDATA)void
    message_rx(message_t *m, distance_measurement_t *d) {    mydata->new_message =
    1;    mydata->received_msg=*m;    mydata->dist = *d;}void setup_message(uint8_t
    data) {      mydata->transmit_msg.type = NORMAL;      mydata->transmit_msg.data[0]
    = kilo_uid & 0xff; //low byte of ID, currently not really used for anything      mydata->transmit_msg.data[1]
    = data;      mydata->transmit_msg.crc = message_crc(&mydata->transmit_msg);}message_t
    *message_tx() {  return &mydata->transmit_msg;}void setupUserData(){    mydata->cur_distance
    = 0;      mydata->new_message = 0;      mydata->turning = 0;    mydata->joining
    = 0;    mydata->following = 0;      mydata->follower_id = kilo_uid+1;}void setup()
    {      setupUserData();      if (kilo_uid == 0)            set_color(WHITE); //
    color of the leader bot      else if(kilo_uid == CAN_JOIN)      {            mydata->my_leader
    = 255;            set_color(BLUE); //color of the joining bot      }      else      {            set_color(RED);
    // color of the moving bots            mydata->my_leader = kilo_uid-1;      }}//
    LEADER CODE/*********************************************************************/int
    checkDistance() {      if (mydata->new_message && mydata->received_msg.data[0]
    == mydata->follower_id) {            if (estimate_distance(&mydata->dist) > STANDARD_DISTANCE+3)                  return
    SPEED_DOWN;      }      return -1;}void speedCorrection(int distance){    if (distance
    == SPEED_DOWN)      set_motors(0,0);    else      set_motors(kilo_turn_left, kilo_turn_right);}void
    leader() {      mydata->myClock = kilo_ticks%(GO_STRAIGHT_DELAY+TURN_LEFT_DELAY);      if
    (mydata->myClock < GO_STRAIGHT_DELAY) {            speedCorrection(checkDistance());            setup_message(STRAIGHT);      }
    else {            setup_message(LEFT);            set_motors(kilo_turn_left, 0);      }}/*********************************************************************///
    FOLLOWER CODE/*********************************************************************/int
    handleMessage() {      if (mydata->new_message && mydata->received_msg.data[0]
    == mydata->my_leader) {            return mydata->received_msg.data[1];      }      return
    0;}int handleOther() {    if(mydata->new_message && mydata->received_msg.data[0]
    != mydata->my_leader) {        return mydata->received_msg.data[1];    }    return
    0;}int goStraight() {    return (kilo_ticks - mydata->message_timestamp < 346);}int
    goLeft() {    int timestamp_isok = (kilo_ticks - mydata->message_timestamp >=
    346);    int passed_delay = kilo_ticks - mydata->message_timestamp < 346 +TURN_LEFT_DELAY;    return
    (timestamp_isok && passed_delay);}int handleTurnLeft() {      if (goStraight())
    {            setup_message(STRAIGHT);            set_motors(kilo_turn_left,kilo_turn_right);            return
    1;      } else if (goLeft()){            setup_message(LEFT);            set_motors(kilo_turn_left,
    0);            return 1;      } else {            setup_message(STRAIGHT);            set_motors(kilo_turn_left,
    kilo_turn_right);            return 0;      }}void leave() {    setup_message(LEAVE);    mydata->my_leader
    = 255;    set_color(GREEN);    set_motors(kilo_turn_left,kilo_turn_right);}void
    join() {    set_motors(kilo_turn_left,kilo_turn_right);    setup_message(JOIN);    if(mydata->new_message
    && mydata->received_msg.data[1] == OK)    {        mydata->my_leader = mydata->received_msg.data[0];        mydata->joining
    = 1;    }}void prepareToFollow() {    mydata->follow_timestamp = kilo_ticks;    mydata->joining
    = 0;    mydata->following = 1;}void followPlatoon() {   if(kilo_ticks< mydata->follow_timestamp
    + FOLLOW_DELAY) {       set_motors(kilo_turn_left,kilo_turn_right);           set_color(RED);   }   else
    mydata->following = 0;}int checkJoin(){    if(mydata->following){        followPlatoon();        return
    1;    }    if(mydata->joining){             prepareToFollow();        return 1;    }    if(kilo_ticks
    == LEAVE_TIME && kilo_uid == CAN_LEAVE) {        leave();        return 1;    }    if(kilo_ticks
    >= LEAVE_TIME + JOIN_DELAY && kilo_uid == CAN_JOIN && mydata->my_leader == 255)
    {       join();       return 1;    }    if(handleOther() == JOIN) {      setup_message(OK);      return
    1;    }    return 0;}void follower() {    if(checkJoin()) return;    int message
    = handleMessage();    if (mydata->turning == 0 && message == LEFT) {            mydata->message_timestamp
    = kilo_ticks;            mydata->turning = 1;    }    if (mydata->turning == 0
    && message == STRAIGHT) {          speedCorrection(checkDistance());          setup_message(STRAIGHT);    }
    else if (mydata->turning == 1) {           mydata->turning = handleTurnLeft();    }}/*********************************************************************///
    COMMON CODE/*********************************************************************/void
    loop() {      if(kilo_ticks >= END_TIME) {            set_color(RGB(0,0,0));            set_motors(0,0);      }      else      {        if(kilo_ticks<
    32) spinup_motors();            if (kilo_uid == 0) leader();            else follower();      }}void
    initMessageFunctions(){    kilo_message_rx = message_rx;    kilo_message_tx =
    message_tx;}int main() {    kilo_init();    initMessageFunctions();    kilo_start(setup,
    loop);    return 0;}Listing 15-1'
  prefs: []
  type: TYPE_NORMAL
- en: Platoon source code
  prefs: []
  type: TYPE_NORMAL
- en: '{  "bot_states": [    {      "ID": 0,      "direction": 9.3774271885570943,      "state":
    {},      "x_position": 263.28312031961627,      "y_position": -153.00242098913    },    {      "ID":
    1,      "direction": 9.2974330575267956,      "state": {},      "x_position":
    272.14245496760822,      "y_position": -78.255749422064071    },    {      "ID":
    2,      "direction": 4.7057699363876493,      "state": {},      "x_position":
    -324.34376414595039,      "y_position": -186.66926101606919    },    {      "ID":
    3,      "direction": 2.785910791660513,      "state": {},      "x_position": 266.71626481529483,      "y_position":
    -17.907987160522111    }  ],  "ticks": 4830}Listing 15-2'
  prefs: []
  type: TYPE_NORMAL
- en: endstate.json
  prefs: []
  type: TYPE_NORMAL
- en: '{    "botName" : "Join Tail",    "randSeed" : 1,    "nBots" : 4,    "formation":
    "rline",    "timeStep" : 0.0416666,    "__note" : "0.04166 is 24 FPS which matches
    the movie frame rate",    "__timeStep" : 0.03225,    "simulationTime" : 0,    "commsRadius"
    : 100,    "showComms" : 1,    "showCommsRadius" : 0,    "distributePercent" :
    0.8,    "displayWidth"  : 640,    "displayHeight" : 424,    "displayWidthPercent"
    : 80,    "displayHeightPercent" : 80,    "displayScale"  : 1,    "showHist" :
    1,    "histLength": 4000,    "storeHistory": 1,    "imageName" : "./movie4/f%04d.bmp",    "saveVideo"
    :  0,    "saveVideoN" : 1,    "stepsPerFrame" : 1,    "finalImage" : null,    "stateFileName"
    : "simstates.json",    "stateFileSteps" : 0,    "colorscheme" : "bright",    "speed":
    7,    "turnRate" : 22,    "GUI"  : 1 ,    "msgSuccessRate" : 0.8,    "distanceNoise"
    : 2}Listing 15-3'
  prefs: []
  type: TYPE_NORMAL
- en: kilombo json
  prefs: []
  type: TYPE_NORMAL
- en: '{  "bot_states": [      {      "ID": 0,      "direction": 1.57,      "state":
    {},      "x_position": 100.0,      "y_position": 0.0    },    {      "ID": 1,      "direction":
    1.57,      "state": {},      "x_position": 20.0,      "y_position": 0.0    },    {      "ID":
    2,      "direction": 1.57,      "state": {},      "x_position": -60.0,      "y_position":
    0.0    },    {      "ID": 3,      "direction": 1.57,      "state": {},      "x_position":
    -210.0,      "y_position": 0.0    }  ],  "ticks": 7292}Listing 15-4'
  prefs: []
  type: TYPE_NORMAL
- en: start-positions.json
  prefs: []
  type: TYPE_NORMAL
- en: '#ifndef M_PI#define M_PI 3.141592653589793238462643383279502884197169399375105820974944#endif//
    declare motion variable typetypedef enum {    STOP,    FORWARD,    LEFT,    RIGHT}
    motion_t;// declare state variable typetypedef enum {    ORBIT_TOOCLOSE,    ORBIT_NORMAL,}
    orbit_state_t;// declare variablestypedef struct {      uint8_t cur_distance;      uint8_t
    new_message;      distance_measurement_t dist;      message_t received_msg;      message_t
    transmit_msg;      uint8_t my_leader;    uint8_t joining;    uint8_t following;      int
    message_timestamp;      int turning;      int myClock;      int turn_timestamp;      int
    follower_id;    int follow_timestamp;} USERDATA;Listing 15-5'
  prefs: []
  type: TYPE_NORMAL
- en: platoon.h
  prefs: []
  type: TYPE_NORMAL
- en: '{    "botName" : "Join Tail",    "randSeed" : 1,    "nBots" : 4,    "formation":
    "rline",    "timeStep" : 0.0416666,    "__note" : "0.04166 is 24 FPS which matches
    the movie frame rate",    "__timeStep" : 0.03225,    "simulationTime" : 0,    "commsRadius"
    : 100,    "showComms" : 1,    "showCommsRadius" : 0,    "distributePercent" :
    0.8,    "displayWidth"  : 640,    "displayHeight" : 424,    "displayWidthPercent"
    : 80,    "displayHeightPercent" : 80,    "displayScale"  : 1,    "showHist" :
    1,    "histLength": 4000,    "storeHistory": 1,    "imageName" : "./movie4/f%04d.bmp",    "saveVideo"
    :  0,    "saveVideoN" : 1,    "stepsPerFrame" : 1,    "finalImage" : null,    "stateFileName"
    : "simstates.json",    "stateFileSteps" : 0,    "colorscheme" : "bright",    "speed":
    7,    "turnRate" : 22,    "GUI"  : 1 ,    "msgSuccessRate" : 0.8,    "distanceNoise"
    : 2}Listing 15-6'
  prefs: []
  type: TYPE_NORMAL
- en: kilombo.json
  prefs: []
  type: TYPE_NORMAL
- en: Kilobots can perform cooperative transport, which means they can move a huge
    object by working collectively. Kilobot collectives may also use S-DASH to shape
    diverse shapes and repair them if they get distorted. They may also vary their
    size depending on the type.
  prefs: []
  type: TYPE_NORMAL
- en: They imitate insects in one program by launching from a "home" site, which is
    a static Kilobot, and spreading across the region looking for "food," which is
    another static Kilobot. When a Kilobot discovered the "food," it returned to its
    "home" location to drop it off.
  prefs: []
  type: TYPE_NORMAL
- en: Another program led a group of robots to follow a lead robot in a single file.
    The robots were careful not to drive too far ahead of the others so that they
    did not fall behind. They also coordinated their activity, such as flashing their
    lights, with the help of their sensor. A user can conduct scalable tasks using
    an infrared controller and infrared receivers. This means they don't have to visit
    each robot individually to do simple chores like charging or programming.
  prefs: []
  type: TYPE_NORMAL
- en: 15.4 Kilobots Movement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is the general movement of the Kilobots  :'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Progress is made.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Robots rotate.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Robots keep in touch with adjacent units.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate the distance between the adjacent units.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that there is sufficient RAM to execute S-DASH.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following extra parts were added to the Kilobot to expand its applications:'
  prefs: []
  type: TYPE_NORMAL
- en: Ability to measure the amount of light in the environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to allow for scalable operations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.5 Cyber-Physical Modeling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find this model in the GitHub repository. Look for the final-model.xml
    file in [https://github.com/JosephThachilGeorge/Platoon-Project](https://github.com/JosephThachilGeorge/Platoon-Project).
  prefs: []
  type: TYPE_NORMAL
- en: Since the XML file is large, this section explains a few parts of the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a block modeling diagram, follow these instructions  :'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the block/workspace with the mouse.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Minimize/maximize/partially minimize a block by double-clicking it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag and drop new blocks from the Toolbox from the left side.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add related blocks to this block by clicking the (+) dropdown.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the block/workspace to see a menu.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '6.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close this comment by clicking the button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As you can see in the beginning of the project, the SOS organization has various
    requirements. These requirements are shown in the XML file. These are the requirements
    for the Cyber System of Systems (CSoS):-------------------------------------1\.
    CSoS-1.4                              </requirement>                              <data>CSoS-1.4</data>                              <statement
    name="cs:CS">                                <block type="__link" id="136">                                  <field
    name="link_to">CS / Kilobot</field>                                  <data>CS
    : 3 : 1</data>                                </block>                              </statement>                            </block>                          </statement>                          <next>                            <block
    type="execute$s" id="120">                              <field name="function">
    joinPlatoon</field>                              <field name="#CS">+</field>                              <requirement
    pinned="false" h="100" w="200">Satisfies requirement(s) :-------------------------------------1\.
    CSoS-1.42\. CSoS-1.6                              </requirement>                              <data>CSoS-1.4,CSoS-1.6</data>                              <statement
    name="cs:CS">                                <block type="__link" id="129">                                  <field
    name="link_to">CS / Kilobot</field>                                  <data>CS
    : 3 : 1</data>                                </block>                              </statement>                            </block>                          </next>                        </block>                      </statement>                      <statement
    name="on_failure:sequence">                        <block type="execute$s" id="127">                          <field
    name="function">doNothing</field>                          <field name="#CS">+</field>                          <statement
    name="cs:CS">                            <block type="__link" id="128">                              <field
    name="link_to">CS / Kilobot</field>                              <data>CS : 3
    : 1</data>                            </block>                          </statement>                        </block>                      </statement>                    </block>                  </statement>                </block>              </statement>              <next>                <block
    type="If$s" id="525">                  <field name="name">Send OK</field>                  <field
    name="on_condition"> == JOIN</field>                  <field name="#CS">+</field>                  <field
    name="#state_variable">+</field>                  <field name="#sequence">+</field>                  <field
    name="#sequence">+</field>                  <statement name="cs:CS">                    <block
    type="__link" id="526">                      <field name="link_to">CS / Kilobot</field>                      <data>CS
    : 3 : 1</data>                    </block>                  </statement>                  <statement
    name="check_on:state_variable">                    <block type="__link" id="527">                      <field
    name="link_to">State variable / received_msg</field>                      <data>state_variable
    : 112 : 1</data>                    </block>                  </statement>                  <statement
    name="on_success:sequence">                    <block type="While$s" id="326">                      <field
    name="name">turn_check</field>                      <field name="condition">==1</field>                      <field
    name="#CS">+</field>                      <field name="#state_variable">+</field>                      <field
    name="#sequence">+</field>                      <requirement pinned="false" h="100"
    w="200">Satisfies requirement(s) :-------------------------------------1\. CSoS-1.5                      </requirement>                      <data>CSoS-1.5</data>                      <statement
    name="cs:CS">                        <block type="__link" id="327">                          <field
    name="link_to">CS / Kilobot</field>                          <data>CS : 3 : 1</data>                        </block>                      </statement>                      <statement
    name="check_on:state_variable">                        <block type="__link" id="328">                          <field
    name="link_to">State variable / is_turning</field>                          <data>state_variable
    : 321 : 1</data>                        </block>                      </statement>                      <next>                        <block
    type="execute$s" id="528">                          <field name="function"> sendOk</field>                          <field
    name="#CS">+</field>                          <requirement pinned="false" h="100"
    w="200">Satisfies requirement(s) :-------------------------------------1\. CSoS-1.5                          </requirement>                          <statement
    name="cs:CS">                            <block type="__link" id="529">                              <field
    name="link_to">CS / Kilobot</field>                              <data>CS : 3
    : 1</data>                            </block>                          </statement>                        </block>                      </next>                    </block>                    </statement>                    <statement
    name="on_failure:sequence">                      <block type="execute$s" id="530">                        <field
    name="function"> doNothing</field>                        <field name="#CS">+</field>                        <statement
    name="cs:CS">                          <block type="__link" id="531">                            <field
    name="link_to">CS / Controller</field>                            <data>CS : 2
    : 1</data>                          </block>                        </statement>                      </block>                    </statement>                  </block>                </next>              </block>            </next>          </block>        /next>      </block>    </next>  </block></statement>                        <statement
    name="on_failure:sequence">                          <block type="execute$s" id="188">                            <field
    name="function">doNothing</field>                            <field name="#CS">+</field>                            <statement
    name="cs:CS">                              <block type="__link" id="189">                                <field
    name="link_to">CS / Kilobot</field>                                <data>CS :
    3 : 1</data>                              </block>                            </statement>                          </block>                        </statement>                      </block>                    </next>                  </block>                </statement>              </block>            </statement>          </block>        </next>      </block>    </statement>  </block>  <block
    type="requirements" id="8" x="2211" y="57">    <statement name="Architecture_requirements">      <block
    type="simple_requirement" id="12">        <field name="req_id">AE-1</field>        <field
    name="title">Whiteboard width x height</field>        <requirement pinned="false"
    h="100" w="200">Satisfied by block(s) :--------------------------------The message
    transfer is done with the help of RUPI (Relied Upon Physical Interface)  and RUMI
    (Relied Upon Message Interface)  . The message transfer from one Kilobot to another
    is designed in this session.--------------------------------1\. RUMI : Message
    Exchange        </requirement>        <data>63</data>        <next>          <block
    type="simple_requirement" id="34">            <field name="req_id">CCS-3</field>            <field
    name="title">Controller RUMI</field>            <requirement pinned="false" h="100"
    w="200">Satisfied by block(s) :--------------------------------1\. RUMI : Kilobot
    program load            </requirement>            <data>65</data>            <next>              <block
    type="simple_requirement" id="36">                <field name="req_id">CCS-4</field>                <field
    name="title">RUPI kilobot</field>                <requirement pinned="false" h="100"
    w="200">Satisfied by block(s) :--------------------------------1\. RUPI : Calculate
    Distance                </requirement>                <data>61</data>                <next>                  <block
    type="simple_requirement" id="38">                    <field name="req_id">CSoS-1</field>                    <field
    name="title">kbot-kbot RUMI utilization</field>                    <requirement
    pinned="false" h="100" w="200">Satisfied by block(s) :--------------------------------1\.
    RUMI : Message Exchange                    </requirement>                    <data>63</data>                    <next>                      <block
    type="simple_requirement" id="40">                        <field name="req_id">CSoS-2</field>                        <field
    name="title">Leader notification</field>                        <requirement pinned="false"
    h="100" w="200">Satisfied by block(s) :--------------------------------It also
    uses an Automated Surface Observing System (ASOS), which observes the nearby cyber-physical
    system components. It has a security and internal clock system, a controller,
    and dynamicity. An example is shown here:-------------------------------------1\.
    ASoS-3    </requirement>    <data>ASoS-3</data>    <statement name="is_composed_of:system">      <block
    type="CS$s" id="2">        <field name="cardinality">1</field>        <field name="name">Controller</field>        <field
    name="system_type">autonomous</field>        <field name="#boundary">+</field>        <field
    name="#state_space">+</field>        <field name="#HMI">+</field>        <field
    name="#CPS">+</field>        <field name="#service">+</field>        <field name="#role_player">+</field>        <field
    name="#physical_system">+</field>        <field name="#RUI">+</field>        <field
    name="#dependability_guarantee">+</field>        <field name="#fault_containment_region">+</field>        <field
    name="#MAPE_algorithm">+</field>        <field name="#security">+</field>        <field
    name="#clock">+</field>        <field name="#system_resource">+</field>        <field
    name="#architectural_style">+</field>        <field name="#subsystem">+</field>        <field
    name="#state_variable">+</field>        <field name="#interface">+</field>        <field
    name="#dynamicity">+</field>        <requirement pinned="false" h="100" w="200">Satisfies
    requirement(s) :-------------------------------------1\. ASoS-2        </requirement>        <data>ASoS-2</data>        <statement
    name="has:RUI">          <block type="RUMI$s" id="65" collapsed="true">            <field
    name="name">Kilobot program load</field>            <field name="has_connection">FALSE</field>            <field
    name="#connecting_strategy">+</field>            <field name="#interface_specification">+</field>            <field
    name="#interface_port">+</field>            <field name="#afferent_environment">+</field>            <field
    name="#efferent_environment">+</field>            <field name="#interface_model">+</field>            <field
    name="#service">+</field>            <field name="#message">+</field>            <field
    name="#RUMI">+</field>            <field name="#probe">+</field>            <field
    name="#security">+</field>            <requirement pinned="false" h="100" w="200">Satisfies
    requirement(s) :-------------------------------------Another part of the XML file
    is T1, T2, T3, and T4, which are transport messages. They help illustrate how
    messages transfer between CCS-1, CSoS-1, T-2 or TI or T3 or T4.'
  prefs: []
  type: TYPE_NORMAL
- en: 'T-1: The Kilobots measure time according to a local clock.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'T-2: Time-related events are triggered by message exchange.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'T-3: When a Kilobot starts, it will prepare motors for Mms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These requirements are designed with the help of the following code:3\. T-2                    </requirement>                    <data>CCS-1,CSoS-1,T-2</data>                    <statement
    name="exchanges:message">                      <block type="message$s" id="157"
    collapsed="true">                        <field name="name">JOIN</field>                        <field
    name="transport_type">PAR_message</field>                        <field name="header">  ?  </field>                        <field
    name="data_field">  ?  </field>                        <field name="#message_classification">+</field>                        <field
    name="#trailer">+</field>                        <next>                          <block
    type="message$s" id="158" collapsed="true">                            <field
    name="name">LEAVE</field>                            <field name="transport_type">PAR_message</field>                            <field
    name="header">  ?  </field>                            <field name="data_field">  ?  </field>                            <field
    name="#message_classification">+</field>                            <field name="#trailer">+</field>                            <next>                              <block
    type="message$s" id="159" collapsed="true">                                <field
    name="name">DIRECTION</field>                                <field name="transport_type">PAR_message</field>                                <field
    name="header">  ?  </field>                                <field name="data_field">  ?  </field>                                <field
    name="#message_classification">+</field>                                <field
    name="#trailer">+</field>                                <next>                                  <block
    type="message$s" id="160" collapsed="true">                                    <field
    name="name">Leader Notify</field>                                    <field name="transport_type">PAR_message</field>                                    <field
    name="header">  ?  </field>                                    <field name="data_field">  ?  </field>                                    <field
    name="#message_classification">+</field>                                    <field
    name="#trailer">+</field>                                    <requirement pinned="false"
    h="100" w="200">Satisfies requirement(s) :-------------------------------------1\.
    CSoS-2                                    </requirement>                                    <data>CSoS-2</data>                                    <next>                                      <block
    type="message$s" id="226" collapsed="true">                                        <field
    name="name">LOAD_PRGRM</field>                                        <field name="transport_type">PAR_message</field>                                        <field
    name="header">  ?  </field>                                        <field name="data_field">  ?  </field>                                        <field
    name="#message_classification">+</field>                                        <field
    name="#trailer">+</field>                                      </block>                                    </next>                                  </block>                                </next>                              </block>                            </next>                          </block>                        </next>                      </block>                    </statement>                    <statement
    name="connects:RUMI">                      <block type="__link" id="156">                        <field
    name="link_to">RUMI / Message Exchange</field>                        <data>RUMI
    : 63 : 0</data>                        <next>                          <block
    type="__link" id="235">                            <field name="link_to">RUMI
    / Kilobot program load</field>                            <data>RUMI : 65 : 0</data>                          </block>                        </next>                      </block>                    </statement>                  </block>                </next>              </block>            </statement>            <statement
    name="may_require:dependability_guarantee">              <block type="dependability_guarantee$s"
    id="77" collapsed="true">                <field name="name">Starting Position
    = Straight line</field>                <field name="#technique">+</field>                <field
    name="#measure">+</field>                <requirement pinned="false" h="100" w="200">Satisfies
    requirement(s) :-------------------------------------1\. T-3                    </requirement>                    <next>                      <block
    type="dependability_guarantee$s" id="147" collapsed="true">                        <field
    name="name">Starting Distance = 8 cm</field>                        <field name="#technique">+</field>                        <field
    name="#measure">+</field>                        <next>                          <block
    type="dependability_guarantee$s" id="148" collapsed="true">                            <field
    name="name">Running Distance between 7 cm and 9 cm</field>                            <field
    name="#technique">+</field>                            <field name="#measure">+</field>                          </block>                        </next>                      </block>                    </next>                  </block>                </next>              </block>            </statement>            <statement
    name="has:state_variable">              <block type="state_variable$s" id="66"
    collapsed="true">                <field name="name">kilo_uid</field>                <field
    name="value">  ?  </field>                <field name="#state">+</field>                <next>                  <block
    type="state_variable$s" id="67">                    <field name="name">leader_uid</field>                    <field
    name="value"></field>                    <field name="#state">+</field>                    <requirement
    pinned="false" h="100" w="200">Satisfies requirement(s) :-------------------------------------1\.
    T-1                        </requirement>                        <data>T-1</data>                        <next>                          <block
    type="state_variable$s" id="112">                            <field name="name">received_msg</field>                            <field
    name="value">  ?  </field>                            <field name="#state">+</field>                            <next>                              <block
    type="state_variable$s" id="321">                                <field name="name">is_turning</field>                                <field
    name="value">  ?  </field>                                <field name="#state">+</field>                                <statement
    name="describes_a:state">                                  <block type="state$s"
    id="323">                                    <field name="name">kilobot turning</field>                                  </block>                                </statement>                              </block>                            </next>                          </block>                        </next>                      </block>                    </next>                  </block>                </next>              </block>            </statement>            <statement
    name="has:dynamicity">              <block type="__link" id="249">                <field
    name="link_to">Dynamic service / JoinLeave</field>                <data>dynamic_service
    : 238 : 0</data>              </block>            </statement>          </block>        </next>      </block>    </statement>  </block>  <block
    type="sequence_diagram$s" id="227" x="87" y="96">    <field name="name">Platoon</field>    <field
    name="#sub_sequence">+</field>    <statement name="has:sub_sequence">      <block
    type="sub_sequence$s" id="230">        <field name="name">Start</field>        <field
    name="#sequence">+</field>        <statement name="has:sequence">          <block
    type="execute$s" id="247">            <field name="function">Send Program</field>            <field
    name="#CS">+</field>            <statement name="cs:CS">              <block type="__link"
    id="251">                <field name="link_to">CS / Controller</field>                <data>CS
    : 2 : 1</data>                <next>                  <block type="__link" id="319">                    <field
    name="link_to">CS / Kilobot</field>                    <data>CS : 3 : 1</data>                  </block>                </next>              </block>            </statement>            <next>              <block
    type="execute$s" id="252">                <field name="function">Init State Variables</field>                <field
    name="#CS">+</field>                <statement name="cs:CS">                  <block
    type="__link" id="254">                    <field name="link_to">CS / Kilobot</field>                    <data>CS
    : 3 : 1</data>                  </block>                </statement>                <next>                  <block
    type="execute$s" id="253">                    <field name="function">spinup_motors</field>                    <field
    name="#CS">+</field>                    <statement name="cs:CS">                      <block
    type="__link" id="256">                        <field name="link_to">CS / Kilobot</field>                        <data>CS
    : 3 : 1</data>                      </block>                    </statement>                  </block>                </next>              </block>            </next>          </block>        </statement>        <next>          <block
    type="sub_sequence$s" id="138">            <field name="name">Main</field>            <field
    name="#sequence">+</field>            <statement name="has:sequence">              <block
    type="While$s" id="139">                <field name="name">MainLoop</field>                <field
    name="condition"> < 20000</field>                <field name="#CS">+</field>                <field
    name="#state_variable">+</field>                <field name="#sequence">+</field>                <requirement
    pinned="false" h="100" w="200">Satisfies requirement(s) :-------------------------------------1\.
    T-4                </requirement>                <data>T-4</data>                <statement
    name="cs:CS">                  <block type="__link" id="140">                    <field
    name="link_to">CS / Kilobot</field>                    <data>CS : 3 : 1</data>                  </block>                </statement>                <statement
    name="check_on:state_variable">                  <block type="__link" id="141">                    <field
    name="link_to">State variable / kilo_ticks</field>                    <data>state_variable
    : 250 : 1</data>                  </block>                </statement>                <statement
    name="has:sequence">                  <block type="If$s" id="142">                    <field
    name="name">LeaderPrgrm</field>                    <field name="on_condition">  ==
    0</field>                    <field name="#CS">+</field>                    <field
    name="#state_variable">+</field>                    <field name="#sequence">+</field>                    <field
    name="#sequence">+</field>                    <statement name="cs:CS">                      <block
    type="__link" id="143">                        <field name="link_to">CS / Kilobot</field>                        <data>CS
    : 3 : 1</data>                      </block>                    </statement>                    <statement
    name="check_on:state_variable">                      <block type="__link" id="144">                        <field
    name="link_to">State variable / kilo_uid</field>                        <data>state_variable
    : 66 : 1</data>                      </block>                    </statement>                    <statement
    name="on_success:sequence">                      <block type="sub_sequence$s"
    id="231" collapsed="true">                        <field name="name">Go Straight
    Leader</field>                        <field name="#sequence">+</field>                        <statement
    name="has:sequence">                          <block type="While$s" id="237">                            <field
    name="name">StraightDelay</field>                            <field name="condition">kilo_ticks
    mod 826 < 700</field>                            <field name="#CS">+</field>                            <field
    name="#state_variable">+</field>                            <field name="#sequence">+</field>                            <statement
    name="cs:CS">                              <block type="__link" id="239">                                <field
    name="link_to">CS / Kilobot</field>                                <data>CS :
    3 : 1</data>                              </block>                            </statement>                            <statement
    name="check_on:state_variable">                              <block type="__link"
    id="246">                                <field name="link_to">State variable
    / kilo_ticks</field>                                <data>state_variable : 250
    : 1</data>                              </block>                            </statement>                            <statement
    name="has:sequence">                              <block type="execute$s" id="343">                                <field
    name="function">goStraight</field>                                <field name="#CS">+</field>                                <statement
    name="cs:CS">                                  <block type="__link" id="346">                                    <field
    name="link_to">CS / Kilobot</field>                                    <data>CS
    : 3 : 1</data>                                  </block>                                </statement>                                <next>                                  <block
    type="execute$s" id="348">                                    <field name="function">sendStraight</field>                                    <field
    name="#CS">+</field>                                    <statement name="cs:CS">                                      <block
    type="__link" id="349">                                        <field name="link_to">CS
    / Kilobot</field>                                        <data>CS : 3 : 1</data>                                      </block>                                    </statement>                                  </block>                                </next>                              </block>                            </statement>                          </block>                        </statement>                        <next>                          <block
    type="sub_sequence$s" id="232" collapsed="true">                            <field
    name="name">Turn Left Leader</field>                            <field name="#sequence">+</field>                            <statement
    name="has:sequence">                              <block type="While$s" id="240">                                <field
    name="name">TurnDelay</field>                                <field name="condition">kilo_ticks
    mod 826 >=700</field>                                <field name="#CS">+</field>                                <field
    name="#state_variable">+</field>                                <field name="#sequence">+</field>                                <statement
    name="cs:CS">                                  <block type="__link" id="241">                                    <field
    name="link_to">CS / Kilobot</field>                                    <data>CS
    : 3 : 1</data>                                  </block>                                </statement>                                <statement
    name="check_on:state_variable">                                  <block type="__link"
    id="245">                                    <field name="link_to">State variable
    / kilo_ticks</field>                                    <data>state_variable :
    250 : 1</data>                                  </block>                                </statement>                                <statement
    name="has:sequence">                                  <block type="execute$s"
    id="344">                                    <field name="function">turnLeft</field>                                    <field
    name="#CS">+</field>                                    <statement name="cs:CS">                                      <block
    type="__link" id="345">                                        <field name="link_to">CS
    / Kilobot</field>                                        <data>CS : 3 : 1</data>                                      </block>                                    </statement>                                    <next>                                      <block
    type="execute$s" id="350">                                        <field name="function">sendLeft</field>                                        <field
    name="#CS">+</field>                                        <statement name="cs:CS">                                          <block
    type="__link" id="351">                                            <field name="link_to">CS
    / Kilobot</field>                                            <data>CS : 3 : 1</data>                                          </block>                                        </statement>                                      </block>                                    </next>                                  </block>                                </statement>                              </block>                            </statement>                          </block>                        </next>                      </block>                    </statement>                    <statement
    name="on_failure:sequence">                      <block type="execute$s" id="183"
    collapsed="true">                        <field name="function">doNothing</field>                        <field
    name="#CS">+</field>                        <statement name="cs:CS">                          <block
    type="__link" id="184">                            <field name="link_to">CS /
    Kilobot</field>                            <data>CS : 3 : 1</data>                          </block>                        </statement>                      </block>                    </statement>                    <next>                      <block
    type="If$s" id="185">                        <field name="name">FollowerPrgrm</field>                        <field
    name="on_condition"> != 0</field>                        <field name="#CS">+</field>                        <field
    name="#state_variable">+</field>                        <field name="#sequence">+</field>                        <field
    name="#sequence">+</field>                        <statement name="cs:CS">                          <block
    type="__link" id="186">                            <field name="link_to">CS /
    Kilobot</field>                            <data>CS : 3 : 1</data>                          </block>                        </statement>                        <statement
    name="check_on:state_variable">                          <block type="__link"
    id="187">                            <field name="link_to">State variable / kilo_uid</field>                            <data>state_variable
    : 66 : 1</data>                          </block>                        </statement>                        <statement
    name="on_success:sequence">                          <block type="If$s" id="145"
    collapsed="true">                            <field name="name">Go Straight Follower</field>                            <field
    name="on_condition"> == STRAIGHT && sender == LEADER</field>                            <field
    name="#CS">+</field>                            <field name="#state_variable">+</field>                            <field
    name="#sequence">+</field>                            <field name="#sequence">+</field>                            <statement
    name="cs:CS">                              <block type="__link" id="146">                                <field
    name="link_to">CS / Kilobot</field>                                <data>CS :
    3 : 1</data>                              </block>                            </statement>                            <statement
    name="check_on:state_variable">                              <block type="__link"
    id="150">                                <field name="link_to">State variable
    / received_msg</field>                                <data>state_variable : 112
    : 1</data>                              </block>                            </statement>                            <statement
    name="on_success:sequence">                              <block type="execute$s"
    id="522">                                <field name="function"> goStraight</field>                                <field
    name="#CS">+</field>                                <requirement pinned="false"
    h="100" w="200">Satisfies requirement(s) :-------------------------------------The
    environment for this project is represented by AE-1 and AE-2\. In AE-1, the Kilobots
    operate on a whiteboard and in AE-2, an obstacle is located in the middle of the
    whiteboard. The AE-1 and AE-2 environments are shown here:-------------------------------------1\.
    AE-1    </requirement>    <data>AE-1</data>    <statement name="has:entity">      <block
    type="__link" id="192">        <field name="link_to">CS / Controller</field>        <data>CS
    : 2 : 0</data>        <next>          <block type="__link" id="193">            <field
    name="link_to">CS / Kilobot</field>            <data>CS : 3 : 0</data>            <next>              <block
    type="thing$s" id="194" collapsed="true">                <field name="name">Obstacle</field>                <field
    name="#dynamicity">+</field>                <requirement pinned="false" h="100"
    w="200">Satisfies requirement(s) :-------------------------------------1\. AE-2                </requirement>                <data>AE-2</data>              </block>            </next>          </block>        </next>      </block>    </statement>    <statement
    name="has:state_variable">      <block type="state_variable$s" id="195">        <field
    name="name">width</field>        <field name="value">1000</field>        <field
    name="#state">+</field>        <next>          <block type="state_variable$s"
    id="196">            <field name="name">height</field>            <field name="value">1000</field>            <field
    name="#state">+</field>            <next>              <block type="state_variable$s"
    id="197">                <field name="name">obstacle width</field>                <field
    name="value">700</field>                <field name="#state">+</field>                <next>                  <block
    type="state_variable$s" id="198">                    <field name="name">obstacle
    height</field>                    <field name="value">700</field>                    <field
    name="#state">+</field>                  </block>                </next>              </block>            </next>          </block>        </next>      </block>    </statement>  </block>  <block
    type="SoS$s" id="1" x="1059" y="-98">    <field name="name">Kilobot platooning</field>    <field
    name="sos_type">acknowledged</field>    <field name="#system">+</field>    <field
    name="#evolution">+</field>    <field name="#dependability_guarantee">+</field>    <field
    name="#behaviour">+</field>    <field name="#security">+</field>    <comment pinned="false"
    h="159" w="767">This is an example System-of-Systems (SoS) block named "example_block",
    on the work-space.---------------------------------------------------------------------------The
    next ones are about dynamicity and these are named DI, D2, D3, and D4.'
  prefs: []
  type: TYPE_NORMAL
- en: 'D-1: The platoon will allow any Kilobot to become a member.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'D-2: The platoon is composed of at least two Kilobots.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'D-3: The introduction of a Kilobot in the platoon is allowed only at its tail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'D-4: The platoon allows only the last Kilobot to leave.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These requirements are implemented with the following code:-------------------------------------1\.
    D-42\. D-5        </requirement>        <data>D-4,D-5</data>        <statement
    name="can_access:state_variable">          <block type="__link" id="243">            <field
    name="link_to">State variable / leader_uid</field>            <data>state_variable
    : 67 : 0</data>            <next>              <block type="__link" id="149">                <field
    name="link_to">State variable / kilo_uid</field>                <data>state_variable
    : 66 : 0</data>              </block>            </next>          </block>        </statement>        <next>          <block
    type="service$s" id="244" collapsed="true">            <field name="name">Join</field>            <field
    name="#state_variable">+</field>            <requirement pinned="false" h="100"
    w="200">Satisfies requirement(s) :-------------------------------------1\. D-12\.
    D-3            </requirement>            <data>D-1,D-3</data>            <statement
    name="can_access:state_variable">              <block type="__link" id="248">                <field
    name="link_to">State variable / kilo_uid</field>                <data>state_variable
    : 66 : 0</data>              </block>            </statement>          </block>        </next>      </block>    </statement>  </block>  <block
    type="emergent_phenomenon$s" id="228" collapsed="true" x="748" y="1454">    <field
    name="name">Platooning</field>    <field name="#behaviour">+</field>    <statement
    name="causes:behaviour">      <block type="expected_and_beneficial_behaviour$i"
    id="229">        <field name="name">Unique Platoon</field>        <requirement
    pinned="false" h="100" w="200">Satisfies requirement(s) :-------------------------------------2\.
    D-2            </requirement>            <data>ASoS-1,D-2</data>            <statement
    name="has:RUI">              <block type="RUPI$s" id="61">                <field
    name="name">Calculate Distance</field>                <field name="has_connection">FALSE</field>                <field
    name="#connecting_strategy">+</field>                <field name="#interface_specification">+</field>                <field
    name="#interface_port">+</field>                <field name="#afferent_environment">+</field>                <field
    name="#efferent_environment">+</field>                <field name="#interface_model">+</field>                <field
    name="#thing">+</field>                <field name="#environment">+</field>                <field
    name="#RUPI">+</field>                <field name="#probe">+</field>                <field
    name="#security">+</field>                <requirement pinned="false" h="100"
    w="200">Satisfies requirement(s) :-------------------------------------'
  prefs: []
  type: TYPE_NORMAL
- en: 'The SOS level is designed as follows. CSoS-1: Each Kilobot will use its RUMI
    to exchange information about direction, when it is joining the platoon, and when
    it is leaving the platoon. CSoS-2: When the SoS starts, each Kilobot notifies
    its adjacent follower that it is the leader by transmitting a message. CSoS-3:
    Each Kilobot has a RUPI to estimate the distance between the sender and receiver
    using signal power.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code explains the CSoS systems:-------------------------------------1\.
    CSoS-2                                    </requirement>                                    <data>CSoS-2</data>                                    <next>                                      <block
    type="message$s" id="226" collapsed="true">                                        <field
    name="name">LOAD_PRGRM</field>                                        <field name="transport_type">PAR_message</field>                                        <field
    name="header">  ?  </field>                                        <field name="data_field">  ?  </field>                                        <field
    name="#message_classification">+</field>                                        <field
    name="#trailer">+</field>                                      </block>                                    </next>                                  </block>                                </next>                              </block>                            </next>                          </block>                        </next>                      </block>                    </statement>                    <statement
    name="connects:RUMI">                      <block type="__link" id="156">                        <field
    name="link_to">RUMI / Message Exchange</field>                        <data>RUMI
    : 63 : 0</data>                        <next>                          <block
    type="__link" id="235">                            <field name="link_to">RUMI
    / Kilobot program load</field>                            <data>RUMI : 65 : 0</data>                          </block>                        </next>                      </block>                    </statement>                  </block>                </next>              </block>            </statement>            <statement
    name="may_require:dependability_guarantee">              <block type="dependability_guarantee$s"
    id="77" collapsed="true">                <field name="name">Starting Position
    = Straight line</field>                <field name="#technique">+</field>                <field
    name="#measure">+</field>                <requirement pinned="false" h="100" w="200">Satisfies
    requirement(s) :--------------------------------------------------------------------------1\.
    CSoS-1.2                                    </requirement>                                    <data>CSoS-1.2</data>                                    <statement
    name="cs:CS">                                      <block type="__link" id="155">                                        <field
    name="link_to">CS / Kilobot</field>                                        <data>CS
    : 3 : 1</data>                                      </block>                                    </statement>                                  </block>                                </next>                              </block>                            </statement>                            <statement
    name="on_failure:sequence">                              <block type="execute$s"
    id="164">                                <field name="function">doNothing</field>                                <field
    name="#CS">+</field>                                <statement name="cs:CS">                                  <block
    type="__link" id="165">                                    <field name="link_to">CS
    / Kilobot</field>                                    <data>CS : 3 : 1</data>                                  </block>                                </statement>                              </block>                            </statement>                            <next>                              <block
    type="If$s" id="166" collapsed="true">                                <field name="name">Turn
    Left Follower</field>                                <field name="on_condition">
    == LEFT && sender == LEADER</field>                                <field name="#CS">+</field>                                <field
    name="#state_variable">+</field>                                <field name="#sequence">+</field>                                <field
    name="#sequence">+</field>                                <statement name="cs:CS">                                  <block
    type="__link" id="168">                                    <field name="link_to">CS
    / Kilobot</field>                                    <data>CS : 3 : 1</data>                                  </block>                                </statement>                                <statement
    name="check_on:state_variable">                                  <block type="__link"
    id="169">                                    <field name="link_to">State variable
    / received_msg</field>                                    <data>state_variable
    : 112 : 1</data>                                  </block>                                </statement>                                <statement
    name="on_success:sequence">                                  <block type="execute$s"
    id="170">                                    <field name="function">turnLeft</field>                                    <field
    name="#CS">+</field>                                    <requirement pinned="false"
    h="100" w="200">Satisfies requirement(s) :-------------------------------------1\.
    CSoS-1.1                                    </requirement>                                    <data>CSoS-1.1</data>                                    <statement
    name="cs:CS">                                      <block type="__link" id="171">                                        <field
    name="link_to">CS / Kilobot</field>                                        <data>CS
    : 3 : 1</data>                                      </block>                                    </statement>                                    <next>                                      <block
    type="execute$s" id="172">                                        <field name="function">sendLeft</field>                                        <field
    name="#CS">+</field>                                        <requirement pinned="false"
    h="100" w="200">Satisfies requirement(s) :-------------------------------------1\.
    CSoS-1.1                                        </requirement>                                        <data>CSoS-1.1</data>                                        <statement
    name="cs:CS">                                          <block type="__link" id="173">                                            <field
    name="link_to">CS / Kilobot</field>                                            <data>CS
    : 3 : 1</data>                                          </block>                                        </statement>                                      </block>                                    </next>                                  </block>                                </statement>                                <statement
    name="on_failure:sequence">                                  <block type="execute$s"
    id="174">                                    <field name="function">doNothing</field>                                    <field
    name="#CS">+</field>                                    <statement name="cs:CS">                                      <block
    type="__link" id="175">                                        <field name="link_to">CS
    / Kilobot</field>                                        <data>CS : 3 : 1</data>                                      </block>                                    </statement>                                  </block>                                </statement>                                <next>                                  <block
    type="If$s" id="176" collapsed="true">                                    <field
    name="name">kilo_ticks check</field>                                    <field
    name="on_condition"> > 2000</field>                                    <field
    name="#CS">+</field>                                    <field name="#state_variable">+</field>                                    <field
    name="#sequence">+</field>                                    <field name="#sequence">+</field>                                    <statement
    name="cs:CS">                                      <block type="__link" id="178">                                        <field
    name="link_to">CS / Kilobot</field>                                        <data>CS
    : 3 : 1</data>                                      </block>                                    </statement>                                    <statement
    name="check_on:state_variable">                                      <block type="__link"
    id="177">                                        <field name="link_to">State variable
    / kilo_ticks</field>                                        <data>state_variable
    : 250 : 1</data>                                      </block>                                    </statement>                                    <statement
    name="on_success:sequence">                                      <block type="sub_sequence$s"
    id="233" collapsed="true">                                        <field name="name">Leave</field>                                        <field
    name="#sequence">+</field>                                        <statement name="has:sequence">                                          <block
    type="If$s" id="114">                                            <field name="name">canLeave</field>                                            <field
    name="on_condition">== LAST_IN_PLATOON</field>                                            <field
    name="#CS">+</field>                                            <field name="#state_variable">+</field>                                            <field
    name="#sequence">+</field>                                            <field name="#sequence">+</field>                                            <statement
    name="cs:CS">                                              <block type="__link"
    id="115">                                                <field name="link_to">CS
    / Kilobot</field>                                                <data>CS : 3
    : 1</data>                                              </block>                                            </statement>                                            <statement
    name="check_on:state_variable">                                              <block
    type="__link" id="116">                                                <field
    name="link_to">State variable / kilo_uid</field>                                                <data>state_variable
    : 66 : 1</data>                                              </block>                                            </statement>                                            <statement
    name="on_success:sequence">                                              <block
    type="execute$s" id="352">                                                <field
    name="function">sendLeave</field>                                                <field
    name="#CS">+</field>                                                <requirement
    pinned="false" h="100" w="200">Satisfies requirement(s) :-------------------------------------1\.
    CSoS-1.3                                                </requirement>                                                <data>CSoS-1.3</data>                                                <statement
    name="cs:CS">                                                  <block type="__link"
    id="353">                                                    <field name="link_to">CS
    / Kilobot</field>                                                    <data>CS
    : 3 : 1</data>                                                  </block>                                                </statement>                                                <next>                                                  <block
    type="execute$s" id="354">                                                    <field
    name="function">goAway</field>                                                    <field
    name="#CS">+</field>                                                    <requirement
    pinned="false" h="100" w="200">Satisfies requirement(s) :-------------------------------------1\.
    CSoS-1.3                                                    </requirement>                                                    <data>CSoS-1.3</data>                                                    <statement
    name="cs:CS">                                                      <block type="__link"
    id="355">                                                        <field name="link_to">CS
    / Kilobot</field>                                                        <data>CS
    : 3 : 1</data>                                                      </block>                                                    </statement>                                                  </block>                                                </next>                                              </block>                                            </statement>                                            <statement
    name="on_failure:sequence">                                              <block
    type="execute$s" id="179" collapsed="true">                                                <field
    name="function">doNothing</field>                                                <field
    name="#CS">+</field>                                                <statement
    name="cs:CS">                                                  <block type="__link"
    id="180">                                                    <field name="link_to">CS
    / Kilobot</field>                                                    <data>CS
    : 3 : 1</data>                                                  </block>                                                </statement>                                              </block>                                            </statement>                                          </block>                                        </statement>                                      </block>                                    </statement>                                    <statement
    name="on_failure:sequence">                                      <block type="execute$s"
    id="181">                                        <field name="function">doNothing</field>                                        <field
    name="#CS">+</field>                                        <statement name="cs:CS">                                          <block
    type="__link" id="182">                                            <field name="link_to">CS
    / Kilobot</field>                                            <data>CS : 3 : 1</data>                                          </block>                                        </statement>                                      </block>                                    </statement>                                    <next>                                      <block
    type="sub_sequence$s" id="234" collapsed="true">                                        <field
    name="name">Join</field>                                        <field name="#sequence">+</field>                                        <statement
    name="has:sequence">                                          <block type="sub_sequence$s"
    id="123">                                            <field name="name">checkSequence</field>                                            <field
    name="#sequence">+</field>                                            <statement
    name="has:sequence">                                              <block type="If$s"
    id="124">                                                <field name="name">idCheck</field>                                                <field
    name="on_condition">  == 255</field>                                                <field
    name="#CS">+</field>                                                <field name="#state_variable">+</field>                                                <field
    name="#sequence">+</field>                                                <field
    name="#sequence">+</field>                                                <statement
    name="cs:CS">                                                  <block type="__link"
    id="126">                                                    <field name="link_to">CS
    / Kilobot</field>                                                    <data>CS
    : 3 : 1</data>                                                  </block>                                                </statement>                                                <statement
    name="check_on:state_variable">                                                  <block
    type="__link" id="125">                                                    <field
    name="link_to">State variable / leader_uid</field>                                                    <data>state_variable
    : 67 : 1</data>                                                  </block>                                                </statement>                                                <statement
    name="on_success:sequence">                                                  <block
    type="While$s" id="117">                                                    <field
    name="name">sendingJoin</field>                                                    <field
    name="condition"> != OK</field>                                                    <field
    name="#CS">+</field>                                                    <field
    name="#state_variable">+</field>                                                    <field
    name="#sequence">+</field>                                                    <statement
    name="cs:CS">                                                      <block type="__link"
    id="119">                                                        <field name="link_to">CS
    / Kilobot</field>                                                        <data>CS
    : 3 : 1</data>                                                      </block>                                                    </statement>                                                    <statement
    name="check_on:state_variable">                                                      <block
    type="__link" id="118">                                                        <field
    name="link_to">State variable / received_msg</field>                                                        <data>state_variable
    : 112 : 1</data>                                                      </block>                                                    </statement>                                                    <statement
    name="has:sequence">                                                      <block
    type="execute$s" id="135">                                                        <field
    name="function">sendJoin</field>                                                       <field
    name="#CS">+</field>                                                        <requirement
    pinned="false" h="100" w="200">Satisfies---------------------------------------------------------------------------'
  prefs: []
  type: TYPE_NORMAL
- en: 'This xml code is listed in this GitHub repository :'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/JosephThachilGeorge/Platoon-Project/blob/main/final-model.xml](https://github.com/JosephThachilGeorge/Platoon-Project/blob/main/final-model.xml)'
  prefs: []
  type: TYPE_NORMAL
- en: Note that to run this code you can use any model simulator that accepts xml
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Once you execute, you will get models shown in Figures [15-1a](#Fig1) and [15-1b](#Fig2).![../images/520777_1_En_15_Chapter/520777_1_En_15_Fig1_HTML.jpg](../images/520777_1_En_15_Chapter/520777_1_En_15_Fig1_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15-1a
  prefs: []
  type: TYPE_NORMAL
- en: The models
  prefs: []
  type: TYPE_NORMAL
- en: '![../images/520777_1_En_15_Chapter/520777_1_En_15_Fig2_HTML.jpg](../images/520777_1_En_15_Chapter/520777_1_En_15_Fig2_HTML.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15-1b
  prefs: []
  type: TYPE_NORMAL
- en: The models, continued
  prefs: []
  type: TYPE_NORMAL
- en: 15.6 Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The project platoon helps you design and implement the cyber-physical system.
    The same concept can be used to design any cyber-physical system in the real world.
    The Kilobot movement illustrates the parts of cyber-physical systems and their
    characteristics. This chapter concludes the projects related to cyber-physical
    systems. So far, you’ve seen how to develop blockchains and distributed systems.
    In the next chapter, you learn about the future of blockchain and distributed
    cyber-physical systems.
  prefs: []
  type: TYPE_NORMAL
