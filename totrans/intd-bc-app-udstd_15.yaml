- en: © The Author(s), under exclusive license to APress Media, LLC, part of Springer
    Nature 2022J. T. GeorgeIntroducing Blockchain Applications[https://doi.org/10.1007/978-1-4842-7480-4_15](https://doi.org/10.1007/978-1-4842-7480-4_15)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 作者授权APress Media, LLC独家许可，属于Springer Nature 2022约瑟夫·T·乔治介绍区块链应用[https://doi.org/10.1007/978-1-4842-7480-4_15](https://doi.org/10.1007/978-1-4842-7480-4_15)
- en: 15. The Platoon Project
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15. *Platoon*项目
- en: Joseph Thachil George^([1](#Aff2)  )(1)Rome, Italy
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 约瑟夫·塔奇尔·乔治^([1](#Aff2)  )（1）意大利罗马
- en: This chapter explains how to develop a cyber-physical system based on a game
    called *Platoon*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了如何基于名为*Platoon*的游戏开发一个物联网系统。
- en: Platoon was a video game released in 1987-1988 by Ocean Software, first for
    8-bit home computers and then for 16-bit ones and for the Nintendo Entertainment
    System. Inspired by the war movie *Platoon*, it is composed of levels with different
    gameplay mechanics, both in third and first person. In 1988, Sunsoft also developed
    an arcade conversion, known as *Vs. Platoon,* based on the NES and Nintendo Vs.
    Series system licensed from Nintendo. According to Wikipedia, the game features
    a few stages.^([1](#Fn1))
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*Platoon*是由Ocean Software于1987-1988年发布的一款视频游戏，首先针对8位家用电脑，然后针对16位电脑和任天堂娱乐系统。灵感来自战争电影*Platoon*，由不同的游戏机制组成不同关卡，既有第三人称又有第一人称。1988年，Sunsoft还开发了一款街机转换版，称为*Vs.
    Platoon*，基于任天堂授权的NES和任天堂Vs.系列系统。据维基百科介绍，游戏有几个阶段。^([1](#Fn1))'
- en: The game consists of four levels:¹
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏分为四个关卡¹。
- en: '*Jungle and village:* “Through a labyrinth of horizontal scrolling environments
    connected by perpendicular passages, with two-dimensional movement and third-person
    lateral view”. The path is haunted by traps and the Viet Cong. The player controls
    one soldier at a time, but can replace the soldier at any time with one of the
    others, for example to avoid putting those already wounded at risk. They can jump
    and crouch, shoot and throw grenades, both with limited ammo. In the last part,
    the huts of the village are explored, which become temporarily transparent, in
    search of objects necessary to continue.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*丛林与村庄：* “通过迷宫般的水平滚动环境，由垂直通道连接，具有二维移动和第三人称侧视”。路径上布满陷阱和越南人民军。玩家一次只能控制一名士兵，但可以随时用其他士兵替换，例如为了避免将已受伤的人置于危险之中。他们可以跳跃和蹲下，射击和投掷手榴弹，弹药有限。在最后一部分，探索村庄的小屋，这些小屋会暂时变透明，以寻找继续的必要物品。'
- en: '*Guerrillas:* The game becomes a first person shooter with a minimap taking
    up half the screen. When you meet the guerrillas, who also emerge from the water
    that floods the tunnels, the movement stops and you go to check the viewfinder.
    When you enter a room, the viewfinder becomes a pointer to examine objects; in
    this way there are elements necessary to continue—supplies and traps.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*游击队：* 游戏变成了一款第一人称射击游戏，半个屏幕被迷你地图占据。当你遇到游击队时，他们也会从淹没隧道的水中出现，移动停止，你转向查看镜头。当你进入一个房间时，观景镜变成一个用于检查物品的指针；通过这种方式有必要继续的元素——补给和陷阱。'
- en: '*Bunker:* This is a fixed screen viewfinder shooter; the image is dark and
    only the flashes of gunfire are noticeable by the enemies, unless the player temporarily
    lights the scene with a flare. Ammunition and flares are limited.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*掩体：* 这是一个固定的屏幕视角射击游戏；画面很暗，只有枪声的闪光能被敌人注意到，除非玩家暂时用信号弹照亮场景。弹药和信号弹数量有限。'
- en: '*Barnes Jungle and Bunker:* A maze of fixed 2.5D third-person screens, to cross
    from the bottom to the top of the screen, avoiding obstacles and shooting enemies
    with the help of a compass. Ammo and total time are limited. The final boss is
    Barnes, to be hit with grenades.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*巴恩斯丛林和掩体：* 一个固定的2.5D第三人称屏幕迷宫，从屏幕底部到顶部穿过，避开障碍物并借助指南针射击敌人。弹药和总时间有限。最终老板是巴恩斯，要用手榴弹击中他。'
- en: Each of the five platoon members can take four hits before dying. There is also
    an overall morale gauge, which decreases when innocent civilians are injured or
    hit, and is recharged by gathering food and medicine. You are defeated if morale
    drops to zero, as well as if all team members die.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 五名队员中的每一名可以承受四次打击才会死亡。还有一个总体士气表，当无辜平民受伤或被击中时会减少，通过收集食物和药品来充电。如果士气降至零，以及如果所有队员都死亡，则失败。
- en: In this chapter, you learn how to implement this game with the help of Kilobots
    movements.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何借助Kilobots的移动来实现这个游戏。
- en: 15.1 The Game Environment
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.1 游戏环境
- en: '1.'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: 'AE-1: The Kilobots will operate on a whiteboard.'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AE-1：Kilobots将在白板上操作。
- en: '2.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: 'AE-2: An obstacle will be located in the middle of the whiteboard.'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AE-2：一个障碍物将位于白板的中间。
- en: 15.1.1 SoS Organization
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.1.1 SoS组织
- en: '1.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: 'ASoS-1: The SoS is composed of N Kilobots.'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ASoS-1：SoS由N个Kilobots组成。
- en: '2.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: 'ASoS-2: The SoS is also composed of a controller that loads the program in
    the Kilobots memory.'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ASoS-2：SoS还由一个控制器组成，该控制器将程序加载到Kilobots的内存中。
- en: '3.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: 'ASoS-3: The SoS platoons among the Kilobots composing the SoS.'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ASoS-3：SoS编队在组成SoS的Kilobots之间进行。
- en: '4.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: 'ASoS-4: When the SoS starts, the Kilobots are positioned in a straight line,
    at a distance of D cm.'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ASoS-4：当SoS启动时，Kilobots被放置在一条直线上，距离为D厘米。
- en: '5.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '5.'
- en: 'ASoS-5: When the SoS operates, the distance between Kilobots is maintained
    at approximately D cm.'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ASoS-5：当SoS运行时，Kilobots之间的距离保持在大约D厘米。
- en: '6.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '6.'
- en: 'ASoS-6: The leader is decided before execution.'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ASoS-6：在执行之前确定领导者。
- en: '7.'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '7.'
- en: 'ASoS-7: All the Kilobots know the leader’s ID.'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ASoS-7：所有Kilobots都知道领导者的ID。
- en: 15.1.2 CS-Level
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.1.2 CS级别
- en: '1.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: 'CCS-1: Each Kilobot has a RUMI to exchange messages.'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CCS-1：每个Kilobot都有一个RUMI来交换消息。
- en: '2.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: Each Kilobot has a RUMI to communicate with the controller.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个Kilobot都有一个RUMI与控制器进行通信。
- en: '3.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: The controller has a RUMI to communicate with the Kilobots.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 控制器有一个RUMI与Kilobots进行通信。
- en: '4.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: Each Kilobot has a RUMI to estimate distances.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个Kilobot都有一个RUMI来估算距离。
- en: 15.1.3 SOS-Level
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.1.3 SOS级别
- en: '1.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: 'CSoS-1: Each Kilobot will use its RUMI to exchange information about direction,
    when it is joining the platoon, and when it is leaving the platoon.'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CSoS-1：每个Kilobot都将使用其RUMI来交换有关方向的信息，当它加入编队时以及当它离开编队时。
- en: '2.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: 'CSoS-2: When the SoS starts, each Kilobot notifies the adjacent follower it
    is the leader by transmitting a message.'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CSoS-2：当 SoS 开始时，每个 Kilobot 通过发送消息通知相邻的跟随者它是领袖。
- en: '3.'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: 'CSoS-3: Each Kilobot has a RUPI to estimate distance between the sender and
    the receiver using signal power.'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CSoS-3：每个 Kilobot 都有一个 RUPI 来估算发送方和接收方之间的距离，使用信号功率。
- en: 15.1.4 Viewpoint Emergence
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.1.4 观点出现
- en: '1.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: 'E-1: The interaction of multiple Kilobots leads to a unique platoon.'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: E-1：多个 Kilobot 的互动导致了一个独特的车队。
- en: 15.1.5 Viewpoint Dynamicity
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.1.5 观点动态性
- en: '1.'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: 'D-1: The platoon allows any Kilobot to become a member.'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: D-1：车队允许任何 Kilobot 成为成员。
- en: '2.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: 'D-2: The platoon is composed of at least two Kilobots.'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: D-2：车队由至少两个 Kilobot 组成。
- en: '3.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: 'D-3: The introduction of a Kilobot into the platoon is allowed only at its
    tail.'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: D-3：只有在尾部允许将 Kilobot 引入车队。
- en: '4.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: 'D-4: The platoon allows only the last Kilobot to leave.'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: D-4：车队只允许最后一个 Kilobot 离开。
- en: 15.1.6 Viewpoint Time
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.1.6 观点时间
- en: '1.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: 'T-1: The Kilobot will measure time according to a local clock T-2\. Timely-related
    events are triggered by message exchange.'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: T-1：Kilobot 将根据本地时钟 T-2 测量时间。与时间有关的事件是通过消息交换触发的。
- en: '2.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: 'T-3: When a Kilobot starts, it will prepare motors for Mms.'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: T-3：当 Kilobot 启动时，它将为 Mms 准备电机。
- en: 15.2 The Cyber-Physical Systems
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.2 电子物理系统
- en: Kilobots  will assist you in putting your concept into action. Kilobots were
    used to execute platoon mobility. The Kilobot swarm is a ten-thousand-robot (1024)
    swarm that may be used to develop and test collective behavior in high-growth
    swarms.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Kilobots 将帮助您将概念付诸实践。Kilobots 用于执行车队移动。Kilobot 群体是一个一万个机器人（1024）的群体，可用于开发和测试高增长群体的集体行为。
- en: Every robot has the fundamental capabilities of an independent swarm robot (configurable
    controller, rudimentary movement, and local communication), but they are constructed
    with low-cost parts and built mainly by an automatic system.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 每个机器人都具有独立群体机器人的基本功能（可配置控制器、基本移动和本地通信），但它们采用廉价零件制造，主要由自动系统建造。
- en: Furthermore, the system's architecture enables a single operator to simply and
    flexibly control a large Kilobot collective, including "hands-off" coding, switching
    on, and charging all robots. This project utilizes the Kilobot swarm to examine
    collective “artificial” intelligence (e.g., sync, collectively transport, and
    identity) and to test novel ideas that relate minimum individual capabilities
    to swarm behaviors.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，系统的架构使得单个操作员可以简单灵活地控制大型 Kilobot 集合，包括“无需手动”编码、开启和为所有机器人充电。该项目利用 Kilobot 群体来研究集体“人工”智能（例如，同步、集体运输和身份），并测试将最小个体能力与群体行为相关的新理念。
- en: This project hopes to gain new algorithmic insights into robustness, scalability,
    self-organization, and emerging collectives of restricted individuals utilizing
    a mixed theory-experiment approach.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目希望通过混合理论和实验方法，对稳健性、可伸缩性、自组织性和利用受限个体的新型集合体进行新的算法洞察。
- en: 15.3 Kilobot Source Code
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.3 Kilobot 源代码
- en: '#include <kilombo.h>#include "platoon.h"#include <math.h>#ifdef SIMULATOR#include
    <stdio.h> // for printf#include <stdlib.h>#else#include <avr/io.h>  // for microcontroller
    register defs#endif#define RED RGB(3,0,0)#define GREEN RGB(0,3,0)#define BLUE
    RGB(0,0,3)#define WHITE RGB(3,3,3)#define STRAIGHT 1#define LEFT 2#define JOIN
    3#define QUIT 4#define OK 5#define LEAVE 6#define SPEED_DOWN 7#define TURN_LEFT_DELAY
    126#define GO_STRAIGHT_DELAY 700#define JOIN_DELAY 150#define FOLLOW_DELAY 220#define
    STANDARD_DISTANCE 80#define NORMAL_SPEED 70#define CAN_LEAVE 2#define CAN_JOIN
    3#define LEAVE_TIME 2500#define END_TIME 20000REGISTER_USERDATA(USERDATA)void
    message_rx(message_t *m, distance_measurement_t *d) {    mydata->new_message =
    1;    mydata->received_msg=*m;    mydata->dist = *d;}void setup_message(uint8_t
    data) {      mydata->transmit_msg.type = NORMAL;      mydata->transmit_msg.data[0]
    = kilo_uid & 0xff; //low byte of ID, currently not really used for anything      mydata->transmit_msg.data[1]
    = data;      mydata->transmit_msg.crc = message_crc(&mydata->transmit_msg);}message_t
    *message_tx() {  return &mydata->transmit_msg;}void setupUserData(){    mydata->cur_distance
    = 0;      mydata->new_message = 0;      mydata->turning = 0;    mydata->joining
    = 0;    mydata->following = 0;      mydata->follower_id = kilo_uid+1;}void setup()
    {      setupUserData();      if (kilo_uid == 0)            set_color(WHITE); //
    color of the leader bot      else if(kilo_uid == CAN_JOIN)      {            mydata->my_leader
    = 255;            set_color(BLUE); //color of the joining bot      }      else      {            set_color(RED);
    // color of the moving bots            mydata->my_leader = kilo_uid-1;      }}//
    LEADER CODE/*********************************************************************/int
    checkDistance() {      if (mydata->new_message && mydata->received_msg.data[0]
    == mydata->follower_id) {            if (estimate_distance(&mydata->dist) > STANDARD_DISTANCE+3)                  return
    SPEED_DOWN;      }      return -1;}void speedCorrection(int distance){    if (distance
    == SPEED_DOWN)      set_motors(0,0);    else      set_motors(kilo_turn_left, kilo_turn_right);}void
    leader() {      mydata->myClock = kilo_ticks%(GO_STRAIGHT_DELAY+TURN_LEFT_DELAY);      if
    (mydata->myClock < GO_STRAIGHT_DELAY) {            speedCorrection(checkDistance());            setup_message(STRAIGHT);      }
    else {            setup_message(LEFT);            set_motors(kilo_turn_left, 0);      }}/*********************************************************************///
    FOLLOWER CODE/*********************************************************************/int
    handleMessage() {      if (mydata->new_message && mydata->received_msg.data[0]
    == mydata->my_leader) {            return mydata->received_msg.data[1];      }      return
    0;}int handleOther() {    if(mydata->new_message && mydata->received_msg.data[0]
    != mydata->my_leader) {        return mydata->received_msg.data[1];    }    return
    0;}int goStraight() {    return (kilo_ticks - mydata->message_timestamp < 346);}int
    goLeft() {    int timestamp_isok = (kilo_ticks - mydata->message_timestamp >=
    346);    int passed_delay = kilo_ticks - mydata->message_timestamp < 346 +TURN_LEFT_DELAY;    return
    (timestamp_isok && passed_delay);}int handleTurnLeft() {      if (goStraight())
    {            setup_message(STRAIGHT);            set_motors(kilo_turn_left,kilo_turn_right);            return
    1;      } else if (goLeft()){            setup_message(LEFT);            set_motors(kilo_turn_left,
    0);            return 1;      } else {            setup_message(STRAIGHT);            set_motors(kilo_turn_left,
    kilo_turn_right);            return 0;      }}void leave() {    setup_message(LEAVE);    mydata->my_leader
    = 255;    set_color(GREEN);    set_motors(kilo_turn_left,kilo_turn_right);}void
    join() {    set_motors(kilo_turn_left,kilo_turn_right);    setup_message(JOIN);    if(mydata->new_message
    && mydata->received_msg.data[1] == OK)    {        mydata->my_leader = mydata->received_msg.data[0];        mydata->joining
    = 1;    }}void prepareToFollow() {    mydata->follow_timestamp = kilo_ticks;    mydata->joining
    = 0;    mydata->following = 1;}void followPlatoon() {   if(kilo_ticks< mydata->follow_timestamp
    + FOLLOW_DELAY) {       set_motors(kilo_turn_left,kilo_turn_right);           set_color(RED);   }   else
    mydata->following = 0;}int checkJoin(){    if(mydata->following){        followPlatoon();        return
    1;    }    if(mydata->joining){             prepareToFollow();        return 1;    }    if(kilo_ticks
    == LEAVE_TIME && kilo_uid == CAN_LEAVE) {        leave();        return 1;    }    if(kilo_ticks
    >= LEAVE_TIME + JOIN_DELAY && kilo_uid == CAN_JOIN && mydata->my_leader == 255)
    {       join();       return 1;    }    if(handleOther() == JOIN) {      setup_message(OK);      return
    1;    }    return 0;}void follower() {    if(checkJoin()) return;    int message
    = handleMessage();    if (mydata->turning == 0 && message == LEFT) {            mydata->message_timestamp
    = kilo_ticks;            mydata->turning = 1;    }    if (mydata->turning == 0
    && message == STRAIGHT) {          speedCorrection(checkDistance());          setup_message(STRAIGHT);    }
    else if (mydata->turning == 1) {           mydata->turning = handleTurnLeft();    }}/*********************************************************************///
    COMMON CODE/*********************************************************************/void
    loop() {      if(kilo_ticks >= END_TIME) {            set_color(RGB(0,0,0));            set_motors(0,0);      }      else      {        if(kilo_ticks<
    32) spinup_motors();            if (kilo_uid == 0) leader();            else follower();      }}void
    initMessageFunctions(){    kilo_message_rx = message_rx;    kilo_message_tx =
    message_tx;}int main() {    kilo_init();    initMessageFunctions();    kilo_start(setup,
    loop);    return 0;}Listing 15-1'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <kilombo.h>#include "platoon.h"#include <math.h>#ifdef SIMULATOR#include
    <stdio.h> // for printf#include <stdlib.h>#else#include <avr/io.h>  // for microcontroller
    register defs#endif#define RED RGB(3,0,0)#define GREEN RGB(0,3,0)#define BLUE
    RGB(0,0,3)#define WHITE RGB(3,3,3)#define STRAIGHT 1#define LEFT 2#define JOIN
    3#define QUIT 4#define OK 5#define LEAVE 6#define SPEED_DOWN 7#define TURN_LEFT_DELAY
    126#define GO_STRAIGHT_DELAY 700#define JOIN_DELAY 150#define FOLLOW_DELAY 220#define
    STANDARD_DISTANCE 80#define NORMAL_SPEED 70#define CAN_LEAVE 2#define CAN_JOIN
    3#define LEAVE_TIME 2500#define END_TIME 20000REGISTER_USERDATA(USERDATA)void
    message_rx(message_t *m, distance_measurement_t *d) {    mydata->new_message =
    1;    mydata->received_msg=*m;    mydata->dist = *d;}void setup_message(uint8_t
    data) {      mydata->transmit_msg.type = NORMAL;      mydata->transmit_msg.data[0]
    = kilo_uid & 0xff; //low byte of ID, currently not really used for anything      mydata->transmit_msg.data[1]
    = data;      mydata->transmit_msg.crc = message_crc(&mydata->transmit_msg);}message_t
    *message_tx() {  return &mydata->transmit_msg;}void setupUserData(){    mydata->cur_distance
    = 0;      mydata->new_message = 0;      mydata->turning = 0;    mydata->joining
    = 0;    mydata->following = 0;      mydata->follower_id = kilo_uid+1;}void setup()
    {      setupUserData();      if (kilo_uid == 0)            set_color(WHITE); //
    领航机器人的颜色为白色      else if(kilo_uid == CAN_JOIN)      {            mydata->my_leader
    = 255;            set_color(BLUE); // 加入机器人的颜色为蓝色      }      else      {            set_color(RED);
    // 移动机器人的颜色为红色            mydata->my_leader = kilo_uid-1;      }}// 领航机器人代码/*********************************************************************/int
    checkDistance() {      if (mydata->new_message && mydata->received_msg.data[0]
    == mydata->follower_id) {            if (estimate_distance(&mydata->dist) > STANDARD_DISTANCE+3)                  return
    SPEED_DOWN;      }      return -1;}void speedCorrection(int distance){    if (distance
    == SPEED_DOWN)      set_motors(0,0);    else      set_motors(kilo_turn_left, kilo_turn_right);}void
    leader() {      mydata->myClock = kilo_ticks%(GO_STRAIGHT_DELAY+TURN_LEFT_DELAY);      if
    (mydata->myClock < GO_STRAIGHT_DELAY) {            speedCorrection(checkDistance());            setup_message(STRAIGHT);      }
    else {            setup_message(LEFT);            set_motors(kilo_turn_left, 0);      }}/*********************************************************************///
    跟随机器人代码/*********************************************************************/int
    handleMessage() {      if (mydata->new_message && mydata->received_msg.data[0]
    == mydata->my_leader) {            return mydata->received_msg.data[1];      }      return
    0;}int handleOther() {    if(mydata->new_message && mydata->received_msg.data[0]
    != mydata->my_leader) {        return mydata->received_msg.data[1];    }    return
    0;}int goStraight() {    return (kilo_ticks - mydata->message_timestamp < 346);}int
    goLeft() {    int timestamp_isok = (kilo_ticks - mydata->message_timestamp >=
    346);    int passed_delay = kilo_ticks - mydata->message_timestamp < 346 +TURN_LEFT_DELAY;    return
    (timestamp_isok && passed_delay);}int handleTurnLeft() {      if (goStraight'
- en: Platoon source code
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 排队源代码
- en: '{  "bot_states": [    {      "ID": 0,      "direction": 9.3774271885570943,      "state":
    {},      "x_position": 263.28312031961627,      "y_position": -153.00242098913    },    {      "ID":
    1,      "direction": 9.2974330575267956,      "state": {},      "x_position":
    272.14245496760822,      "y_position": -78.255749422064071    },    {      "ID":
    2,      "direction": 4.7057699363876493,      "state": {},      "x_position":
    -324.34376414595039,      "y_position": -186.66926101606919    },    {      "ID":
    3,      "direction": 2.785910791660513,      "state": {},      "x_position": 266.71626481529483,      "y_position":
    -17.907987160522111    }  ],  "ticks": 4830}Listing 15-2'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '{"bot_states": [{"ID": 0, "direction": 9.3774271885570943, "state": {}, "x_position":
    263.28312031961627, "y_position": -153.00242098913}, {"ID": 1, "direction": 9.2974330575267956,
    "state": {}, "x_position": 272.14245496760822, "y_position": -78.255749422064071},
    {"ID": 2, "direction": 4.7057699363876493, "state": {}, "x_position": -324.34376414595039,
    "y_position": -186.66926101606919}, {"ID": 3, "direction": 2.785910791660513,
    "state": {}, "x_position": 266.71626481529483, "y_position": -17.907987160522111}],
    "ticks": 4830}Listing 15-2'
- en: endstate.json
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 终态.json
- en: '{    "botName" : "Join Tail",    "randSeed" : 1,    "nBots" : 4,    "formation":
    "rline",    "timeStep" : 0.0416666,    "__note" : "0.04166 is 24 FPS which matches
    the movie frame rate",    "__timeStep" : 0.03225,    "simulationTime" : 0,    "commsRadius"
    : 100,    "showComms" : 1,    "showCommsRadius" : 0,    "distributePercent" :
    0.8,    "displayWidth"  : 640,    "displayHeight" : 424,    "displayWidthPercent"
    : 80,    "displayHeightPercent" : 80,    "displayScale"  : 1,    "showHist" :
    1,    "histLength": 4000,    "storeHistory": 1,    "imageName" : "./movie4/f%04d.bmp",    "saveVideo"
    :  0,    "saveVideoN" : 1,    "stepsPerFrame" : 1,    "finalImage" : null,    "stateFileName"
    : "simstates.json",    "stateFileSteps" : 0,    "colorscheme" : "bright",    "speed":
    7,    "turnRate" : 22,    "GUI"  : 1 ,    "msgSuccessRate" : 0.8,    "distanceNoise"
    : 2}Listing 15-3'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '{"botName" : "Join Tail", "randSeed" : 1, "nBots" : 4, "formation": "rline",
    "timeStep" : 0.0416666, "__note" : "0.04166 是 24 FPS，与电影帧速率相匹配", "__timeStep"
    : 0.03225, "simulationTime" : 0, "commsRadius" : 100, "showComms" : 1, "showCommsRadius"
    : 0, "distributePercent" : 0.8, "displayWidth" : 640, "displayHeight" : 424, "displayWidthPercent"
    : 80, "displayHeightPercent" : 80, "displayScale" : 1, "showHist" : 1, "histLength":
    4000, "storeHistory": 1, "imageName" : "./movie4/f%04d.bmp", "saveVideo" : 0,
    "saveVideoN" : 1, "stepsPerFrame" : 1, "finalImage" : null, "stateFileName" :
    "simstates.json", "stateFileSteps" : 0, "colorscheme" : "bright", "speed": 7,
    "turnRate" : 22, "GUI" : 1 , "msgSuccessRate" : 0.8, "distanceNoise" : 2}Listing
    15-3'
- en: kilombo json
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: kilombo json
- en: '{  "bot_states": [      {      "ID": 0,      "direction": 1.57,      "state":
    {},      "x_position": 100.0,      "y_position": 0.0    },    {      "ID": 1,      "direction":
    1.57,      "state": {},      "x_position": 20.0,      "y_position": 0.0    },    {      "ID":
    2,      "direction": 1.57,      "state": {},      "x_position": -60.0,      "y_position":
    0.0    },    {      "ID": 3,      "direction": 1.57,      "state": {},      "x_position":
    -210.0,      "y_position": 0.0    }  ],  "ticks": 7292}Listing 15-4'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '{  "bot_states": [      {      "ID": 0,      "direction": 1.57,      "state":
    {},      "x_position": 100.0,      "y_position": 0.0    },    {      "ID": 1,      "direction":
    1.57,      "state": {},      "x_position": 20.0,      "y_position": 0.0    },    {      "ID":
    2,      "direction": 1.57,      "state": {},      "x_position": -60.0,      "y_position":
    0.0    },    {      "ID": 3,      "direction": 1.57,      "state": {},      "x_position":
    -210.0,      "y_position": 0.0    }  ],  "ticks": 7292}列表 15-4'
- en: start-positions.json
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: start-positions.json
- en: '#ifndef M_PI#define M_PI 3.141592653589793238462643383279502884197169399375105820974944#endif//
    declare motion variable typetypedef enum {    STOP,    FORWARD,    LEFT,    RIGHT}
    motion_t;// declare state variable typetypedef enum {    ORBIT_TOOCLOSE,    ORBIT_NORMAL,}
    orbit_state_t;// declare variablestypedef struct {      uint8_t cur_distance;      uint8_t
    new_message;      distance_measurement_t dist;      message_t received_msg;      message_t
    transmit_msg;      uint8_t my_leader;    uint8_t joining;    uint8_t following;      int
    message_timestamp;      int turning;      int myClock;      int turn_timestamp;      int
    follower_id;    int follow_timestamp;} USERDATA;Listing 15-5'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '#ifndef M_PI#define M_PI 3.141592653589793238462643383279502884197169399375105820974944#endif//
    声明运动变量类型typedef enum {    STOP,    FORWARD,    LEFT,    RIGHT} motion_t;// 声明状态变量类型typedef
    enum {    ORBIT_TOOCLOSE,    ORBIT_NORMAL,} orbit_state_t;// 声明变量stypedef struct
    {      uint8_t cur_distance;      uint8_t new_message;      distance_measurement_t
    dist;      message_t received_msg;      message_t transmit_msg;      uint8_t my_leader;    uint8_t
    joining;    uint8_t following;      int message_timestamp;      int turning;      int
    myClock;      int turn_timestamp;      int follower_id;    int follow_timestamp;}
    USERDATA;列表 15-5'
- en: platoon.h
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: platoon.h
- en: '{    "botName" : "Join Tail",    "randSeed" : 1,    "nBots" : 4,    "formation":
    "rline",    "timeStep" : 0.0416666,    "__note" : "0.04166 is 24 FPS which matches
    the movie frame rate",    "__timeStep" : 0.03225,    "simulationTime" : 0,    "commsRadius"
    : 100,    "showComms" : 1,    "showCommsRadius" : 0,    "distributePercent" :
    0.8,    "displayWidth"  : 640,    "displayHeight" : 424,    "displayWidthPercent"
    : 80,    "displayHeightPercent" : 80,    "displayScale"  : 1,    "showHist" :
    1,    "histLength": 4000,    "storeHistory": 1,    "imageName" : "./movie4/f%04d.bmp",    "saveVideo"
    :  0,    "saveVideoN" : 1,    "stepsPerFrame" : 1,    "finalImage" : null,    "stateFileName"
    : "simstates.json",    "stateFileSteps" : 0,    "colorscheme" : "bright",    "speed":
    7,    "turnRate" : 22,    "GUI"  : 1 ,    "msgSuccessRate" : 0.8,    "distanceNoise"
    : 2}Listing 15-6'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '{    "botName" : "Join Tail",    "randSeed" : 1,    "nBots" : 4,    "formation":
    "rline",    "timeStep" : 0.0416666,    "__note" : "0.04166是24 FPS，与电影帧速率匹配",    "__timeStep"
    : 0.03225,    "simulationTime" : 0,    "commsRadius" : 100,    "showComms" : 1,    "showCommsRadius"
    : 0,    "distributePercent" : 0.8,    "displayWidth"  : 640,    "displayHeight"
    : 424,    "displayWidthPercent" : 80,    "displayHeightPercent" : 80,    "displayScale"  :
    1,    "showHist" : 1,    "histLength": 4000,    "storeHistory": 1,    "imageName"
    : "./movie4/f%04d.bmp",    "saveVideo" :  0,    "saveVideoN" : 1,    "stepsPerFrame"
    : 1,    "finalImage" : null,    "stateFileName" : "simstates.json",    "stateFileSteps"
    : 0,    "colorscheme" : "bright",    "speed": 7,    "turnRate" : 22,    "GUI"  :
    1 ,    "msgSuccessRate" : 0.8,    "distanceNoise" : 2}Listing 15-6'
- en: kilombo.json
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: kilombo.json
- en: Kilobots can perform cooperative transport, which means they can move a huge
    object by working collectively. Kilobot collectives may also use S-DASH to shape
    diverse shapes and repair them if they get distorted. They may also vary their
    size depending on the type.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Kilobots能够进行合作运输，这意味着它们可以通过集体努力移动一个巨大的物体。Kilobot集体还可以使用S-DASH来塑造各种形状并在形状变形时进行修复。它们还可以根据类型变化其大小。
- en: They imitate insects in one program by launching from a "home" site, which is
    a static Kilobot, and spreading across the region looking for "food," which is
    another static Kilobot. When a Kilobot discovered the "food," it returned to its
    "home" location to drop it off.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 他们在一个程序中模仿昆虫，从一个静态Kilobot“家”站点启动，并在区域内寻找“食物”，即另一个静态Kilobot。当一个Kilobot发现了“食物”，它就会返回到它的“家”位置放下它。
- en: Another program led a group of robots to follow a lead robot in a single file.
    The robots were careful not to drive too far ahead of the others so that they
    did not fall behind. They also coordinated their activity, such as flashing their
    lights, with the help of their sensor. A user can conduct scalable tasks using
    an infrared controller and infrared receivers. This means they don't have to visit
    each robot individually to do simple chores like charging or programming.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个程序带领一组机器人跟随一个领头机器人单行列队。这些机器人小心翼翼地不要领先其他人太远，以免落后。他们还通过传感器协调他们的活动，例如闪烁他们的灯光。用户可以使用红外控制器和红外接收器执行可扩展的任务。这意味着他们不必逐个访问每个机器人来执行像充电或编程这样的简单任务。
- en: 15.4 Kilobots Movement
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.4 Kilobots运动
- en: 'Here is the general movement of the Kilobots  :'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Kilobots的一般运动情况：
- en: '1.'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: Progress is made.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进展已经取得。
- en: '2.'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: Robots rotate.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 机器人旋转。
- en: '3.'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: Robots keep in touch with adjacent units.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 机器人与相邻单位保持联系。
- en: '4.'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: Calculate the distance between the adjacent units.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 计算相邻单位之间的距离。
- en: '5.'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '5.'
- en: Verify that there is sufficient RAM to execute S-DASH.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 验证是否有足够的 RAM 来执行 S-DASH。
- en: 'The following extra parts were added to the Kilobot to expand its applications:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了扩展其应用，以下额外的部分被添加到 Kilobot 中：
- en: Ability to measure the amount of light in the environment.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测量环境中光的量的能力。
- en: Ability to allow for scalable operations.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许可扩展操作的能力。
- en: 15.5 Cyber-Physical Modeling
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.5 个物理建模
- en: You can find this model in the GitHub repository. Look for the final-model.xml
    file in [https://github.com/JosephThachilGeorge/Platoon-Project](https://github.com/JosephThachilGeorge/Platoon-Project).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 GitHub 存储库中找到此模型。在[https://github.com/JosephThachilGeorge/Platoon-Project](https://github.com/JosephThachilGeorge/Platoon-Project)中查找
    final-model.xml 文件。
- en: Since the XML file is large, this section explains a few parts of the code.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 XML 文件较大，本节解释了代码的一些部分。
- en: 'To add a block modeling diagram, follow these instructions  :'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加块建模图，请按照以下说明操作：
- en: '1.'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: Drag the block/workspace with the mouse.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用鼠标拖动块/工作区。
- en: '2.'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: Minimize/maximize/partially minimize a block by double-clicking it.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过双击块来最小化/最大化/部分最小化块。
- en: '3.'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: Drag and drop new blocks from the Toolbox from the left side.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从左侧的工具箱中拖放新的块。
- en: '4.'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: Add related blocks to this block by clicking the (+) dropdown.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过点击(+)下拉菜单将相关块添加到此块。
- en: '5.'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '5.'
- en: Right-click the block/workspace to see a menu.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 右键单击块/工作区以查看菜单。
- en: '6.'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '6.'
- en: Close this comment by clicking the button.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过点击按钮关闭此评论。
- en: 'As you can see in the beginning of the project, the SOS organization has various
    requirements. These requirements are shown in the XML file. These are the requirements
    for the Cyber System of Systems (CSoS):-------------------------------------1\.
    CSoS-1.4                              </requirement>                              <data>CSoS-1.4</data>                              <statement
    name="cs:CS">                                <block type="__link" id="136">                                  <field
    name="link_to">CS / Kilobot</field>                                  <data>CS
    : 3 : 1</data>                                </block>                              </statement>                            </block>                          </statement>                          <next>                            <block
    type="execute$s" id="120">                              <field name="function">
    joinPlatoon</field>                              <field name="#CS">+</field>                              <requirement
    pinned="false" h="100" w="200">Satisfies requirement(s) :-------------------------------------1\.
    CSoS-1.42\. CSoS-1.6                              </requirement>                              <data>CSoS-1.4,CSoS-1.6</data>                              <statement
    name="cs:CS">                                <block type="__link" id="129">                                  <field
    name="link_to">CS / Kilobot</field>                                  <data>CS
    : 3 : 1</data>                                </block>                              </statement>                            </block>                          </next>                        </block>                      </statement>                      <statement
    name="on_failure:sequence">                        <block type="execute$s" id="127">                          <field
    name="function">doNothing</field>                          <field name="#CS">+</field>                          <statement
    name="cs:CS">                            <block type="__link" id="128">                              <field
    name="link_to">CS / Kilobot</field>                              <data>CS : 3
    : 1</data>                            </block>                          </statement>                        </block>                      </statement>                    </block>                  </statement>                </block>              </statement>              <next>                <block
    type="If$s" id="525">                  <field name="name">Send OK</field>                  <field
    name="on_condition"> == JOIN</field>                  <field name="#CS">+</field>                  <field
    name="#state_variable">+</field>                  <field name="#sequence">+</field>                  <field
    name="#sequence">+</field>                  <statement name="cs:CS">                    <block
    type="__link" id="526">                      <field name="link_to">CS / Kilobot</field>                      <data>CS
    : 3 : 1</data>                    </block>                  </statement>                  <statement
    name="check_on:state_variable">                    <block type="__link" id="527">                      <field
    name="link_to">State variable / received_msg</field>                      <data>state_variable
    : 112 : 1</data>                    </block>                  </statement>                  <statement
    name="on_success:sequence">                    <block type="While$s" id="326">                      <field
    name="name">turn_check</field>                      <field name="condition">==1</field>                      <field
    name="#CS">+</field>                      <field name="#state_variable">+</field>                      <field
    name="#sequence">+</field>                      <requirement pinned="false" h="100"
    w="200">Satisfies requirement(s) :-------------------------------------1\. CSoS-1.5                      </requirement>                      <data>CSoS-1.5</data>                      <statement
    name="cs:CS">                        <block type="__link" id="327">                          <field
    name="link_to">CS / Kilobot</field>                          <data>CS : 3 : 1</data>                        </block>                      </statement>                      <statement
    name="check_on:state_variable">                        <block type="__link" id="328">                          <field
    name="link_to">State variable / is_turning</field>                          <data>state_variable
    : 321 : 1</data>                        </block>                      </statement>                      <next>                        <block
    type="execute$s" id="528">                          <field name="function"> sendOk</field>                          <field
    name="#CS">+</field>                          <requirement pinned="false" h="100"
    w="200">Satisfies requirement(s) :-------------------------------------1\. CSoS-1.5                          </requirement>                          <statement
    name="cs:CS">                            <block type="__link" id="529">                              <field
    name="link_to">CS / Kilobot</field>                              <data>CS : 3
    : 1</data>                            </block>                          </statement>                        </block>                      </next>                    </block>                    </statement>                    <statement
    name="on_failure:sequence">                      <block type="execute$s" id="530">                        <field
    name="function"> doNothing</field>                        <field name="#CS">+</field>                        <statement
    name="cs:CS">                          <block type="__link" id="531">                            <field
    name="link_to">CS / Controller</field>                            <data>CS : 2
    : 1</data>                          </block>                        </statement>                      </block>                    </statement>                  </block>                </next>              </block>            </next>          </block>        /next>      </block>    </next>  </block></statement>                        <statement
    name="on_failure:sequence">                          <block type="execute$s" id="188">                            <field
    name="function">doNothing</field>                            <field name="#CS">+</field>                            <statement
    name="cs:CS">                              <block type="__link" id="189">                                <field
    name="link_to">CS / Kilobot</field>                                <data>CS :
    3 : 1</data>                              </block>                            </statement>                          </block>                        </statement>                      </block>                    </next>                  </block>                </statement>              </block>            </statement>          </block>        </next>      </block>    </statement>  </block>  <block
    type="requirements" id="8" x="2211" y="57">    <statement name="Architecture_requirements">      <block
    type="simple_requirement" id="12">        <field name="req_id">AE-1</field>        <field
    name="title">Whiteboard width x height</field>        <requirement pinned="false"
    h="100" w="200">Satisfied by block(s) :--------------------------------The message
    transfer is done with the help of RUPI (Relied Upon Physical Interface)  and RUMI
    (Relied Upon Message Interface)  . The message transfer from one Kilobot to another
    is designed in this session.--------------------------------1\. RUMI : Message
    Exchange        </requirement>        <data>63</data>        <next>          <block
    type="simple_requirement" id="34">            <field name="req_id">CCS-3</field>            <field
    name="title">Controller RUMI</field>            <requirement pinned="false" h="100"
    w="200">Satisfied by block(s) :--------------------------------1\. RUMI : Kilobot
    program load            </requirement>            <data>65</data>            <next>              <block
    type="simple_requirement" id="36">                <field name="req_id">CCS-4</field>                <field
    name="title">RUPI kilobot</field>                <requirement pinned="false" h="100"
    w="200">Satisfied by block(s) :--------------------------------1\. RUPI : Calculate
    Distance                </requirement>                <data>61</data>                <next>                  <block
    type="simple_requirement" id="38">                    <field name="req_id">CSoS-1</field>                    <field
    name="title">kbot-kbot RUMI utilization</field>                    <requirement
    pinned="false" h="100" w="200">Satisfied by block(s) :--------------------------------1\.
    RUMI : Message Exchange                    </requirement>                    <data>63</data>                    <next>                      <block
    type="simple_requirement" id="40">                        <field name="req_id">CSoS-2</field>                        <field
    name="title">Leader notification</field>                        <requirement pinned="false"
    h="100" w="200">Satisfied by block(s) :--------------------------------It also
    uses an Automated Surface Observing System (ASOS), which observes the nearby cyber-physical
    system components. It has a security and internal clock system, a controller,
    and dynamicity. An example is shown here:-------------------------------------1\.
    ASoS-3    </requirement>    <data>ASoS-3</data>    <statement name="is_composed_of:system">      <block
    type="CS$s" id="2">        <field name="cardinality">1</field>        <field name="name">Controller</field>        <field
    name="system_type">autonomous</field>        <field name="#boundary">+</field>        <field
    name="#state_space">+</field>        <field name="#HMI">+</field>        <field
    name="#CPS">+</field>        <field name="#service">+</field>        <field name="#role_player">+</field>        <field
    name="#physical_system">+</field>        <field name="#RUI">+</field>        <field
    name="#dependability_guarantee">+</field>        <field name="#fault_containment_region">+</field>        <field
    name="#MAPE_algorithm">+</field>        <field name="#security">+</field>        <field
    name="#clock">+</field>        <field name="#system_resource">+</field>        <field
    name="#architectural_style">+</field>        <field name="#subsystem">+</field>        <field
    name="#state_variable">+</field>        <field name="#interface">+</field>        <field
    name="#dynamicity">+</field>        <requirement pinned="false" h="100" w="200">Satisfies
    requirement(s) :-------------------------------------1\. ASoS-2        </requirement>        <data>ASoS-2</data>        <statement
    name="has:RUI">          <block type="RUMI$s" id="65" collapsed="true">            <field
    name="name">Kilobot program load</field>            <field name="has_connection">FALSE</field>            <field
    name="#connecting_strategy">+</field>            <field name="#interface_specification">+</field>            <field
    name="#interface_port">+</field>            <field name="#afferent_environment">+</field>            <field
    name="#efferent_environment">+</field>            <field name="#interface_model">+</field>            <field
    name="#service">+</field>            <field name="#message">+</field>            <field
    name="#RUMI">+</field>            <field name="#probe">+</field>            <field
    name="#security">+</field>            <requirement pinned="false" h="100" w="200">Satisfies
    requirement(s) :-------------------------------------Another part of the XML file
    is T1, T2, T3, and T4, which are transport messages. They help illustrate how
    messages transfer between CCS-1, CSoS-1, T-2 or TI or T3 or T4.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '项目开始时，SOS组织有各种需求，这些需求显示在XML文件中。这些是关于系统之间的网络系统（CSoS）的需求：-------------------------------------1\.
    CSoS-1.4                              </requirement>                              <data>CSoS-1.4</data>                              <statement
    name="cs:CS">                                <block type="__link" id="136">                                  <field
    name="link_to">CS / Kilobot</field>                                  <data>CS
    : 3 : 1</data>                                </block>                              </statement>                            </block>                          </statement>                          <next>                            <block
    type="execute$s" id="120">                              <field name="function">
    joinPlatoon</field>                              <field name="#CS">+</field>                              <requirement
    pinned="false" h="100" w="200">Satisfies requirement(s) :-------------------------------------1\.
    CSoS-1.42\. CSoS-1.6                              </requirement>                              <data>CSoS-1.4,CSoS-1.6</data>                              <statement
    name="cs:CS">                                <block type="__link" id="129">                                  <field
    name="link_to">CS / Kilobot</field>                                  <data>CS
    : 3 : 1</data>-------------------------------------------------------------------------------------------------------------------。                              </statement>-------------------------------------------------------------------------------------------------------------------                            </block>-------------------------------------------------------------------------------------------------------------------                          </next>-------------------------------------------------------------------------------------------------------------------        </block>----------------------------------------------------------------------的这一部分还有一个名称为T1、T2、T3和T4的内容，用于传输消息。它们帮助说明消息在CCS-1、CSoS-1、T-2或TI或T3或T4之间的传输。'
- en: 'T-1: The Kilobots measure time according to a local clock.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: T-1：Kilobots 根据本地时钟来测量时间。
- en: 'T-2: Time-related events are triggered by message exchange.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: T-2：与时间相关的事件是通过消息交换触发的。
- en: 'T-3: When a Kilobot starts, it will prepare motors for Mms.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: T-3：当一个 Kilobot 启动时，它会为 Mms 准备电机。
- en: 'These requirements are designed with the help of the following code:3\. T-2                    </requirement>                    <data>CCS-1,CSoS-1,T-2</data>                    <statement
    name="exchanges:message">                      <block type="message$s" id="157"
    collapsed="true">                        <field name="name">JOIN</field>                        <field
    name="transport_type">PAR_message</field>                        <field name="header">  ?  </field>                        <field
    name="data_field">  ?  </field>                        <field name="#message_classification">+</field>                        <field
    name="#trailer">+</field>                        <next>                          <block
    type="message$s" id="158" collapsed="true">                            <field
    name="name">LEAVE</field>                            <field name="transport_type">PAR_message</field>                            <field
    name="header">  ?  </field>                            <field name="data_field">  ?  </field>                            <field
    name="#message_classification">+</field>                            <field name="#trailer">+</field>                            <next>                              <block
    type="message$s" id="159" collapsed="true">                                <field
    name="name">DIRECTION</field>                                <field name="transport_type">PAR_message</field>                                <field
    name="header">  ?  </field>                                <field name="data_field">  ?  </field>                                <field
    name="#message_classification">+</field>                                <field
    name="#trailer">+</field>                                <next>                                  <block
    type="message$s" id="160" collapsed="true">                                    <field
    name="name">Leader Notify</field>                                    <field name="transport_type">PAR_message</field>                                    <field
    name="header">  ?  </field>                                    <field name="data_field">  ?  </field>                                    <field
    name="#message_classification">+</field>                                    <field
    name="#trailer">+</field>                                    <requirement pinned="false"
    h="100" w="200">Satisfies requirement(s) :-------------------------------------1\.
    CSoS-2                                    </requirement>                                    <data>CSoS-2</data>                                    <next>                                      <block
    type="message$s" id="226" collapsed="true">                                        <field
    name="name">LOAD_PRGRM</field>                                        <field name="transport_type">PAR_message</field>                                        <field
    name="header">  ?  </field>                                        <field name="data_field">  ?  </field>                                        <field
    name="#message_classification">+</field>                                        <field
    name="#trailer">+</field>                                      </block>                                    </next>                                  </block>                                </next>                              </block>                            </next>                          </block>                        </next>                      </block>                    </statement>                    <statement
    name="connects:RUMI">                      <block type="__link" id="156">                        <field
    name="link_to">RUMI / Message Exchange</field>                        <data>RUMI
    : 63 : 0</data>                        <next>                          <block
    type="__link" id="235">                            <field name="link_to">RUMI
    / Kilobot program load</field>                            <data>RUMI : 65 : 0</data>                          </block>                        </next>                      </block>                    </statement>                  </block>                </next>              </block>            </statement>            <statement
    name="may_require:dependability_guarantee">              <block type="dependability_guarantee$s"
    id="77" collapsed="true">                <field name="name">Starting Position
    = Straight line</field>                <field name="#technique">+</field>                <field
    name="#measure">+</field>                <requirement pinned="false" h="100" w="200">Satisfies
    requirement(s) :-------------------------------------1\. T-3                    </requirement>                    <next>                      <block
    type="dependability_guarantee$s" id="147" collapsed="true">                        <field
    name="name">Starting Distance = 8 cm</field>                        <field name="#technique">+</field>                        <field
    name="#measure">+</field>                        <next>                          <block
    type="dependability_guarantee$s" id="148" collapsed="true">                            <field
    name="name">Running Distance between 7 cm and 9 cm</field>                            <field
    name="#technique">+</field>                            <field name="#measure">+</field>                          </block>                        </next>                      </block>                    </next>                  </block>                </next>              </block>            </statement>            <statement
    name="has:state_variable">              <block type="state_variable$s" id="66"
    collapsed="true">                <field name="name">kilo_uid</field>                <field
    name="value">  ?  </field>                <field name="#state">+</field>                <next>                  <block
    type="state_variable$s" id="67">                    <field name="name">leader_uid</field>                    <field
    name="value"></field>                    <field name="#state">+</field>                    <requirement
    pinned="false" h="100" w="200">Satisfies requirement(s) :-------------------------------------1\.
    T-1                        </requirement>                        <data>T-1</data>                        <next>                          <block
    type="state_variable$s" id="112">                            <field name="name">received_msg</field>                            <field
    name="value">  ?  </field>                            <field name="#state">+</field>                            <next>                              <block
    type="state_variable$s" id="321">                                <field name="name">is_turning</field>                                <field
    name="value">  ?  </field>                                <field name="#state">+</field>                                <statement
    name="describes_a:state">                                  <block type="state$s"
    id="323">                                    <field name="name">kilobot turning</field>                                  </block>                                </statement>                              </block>                            </next>                          </block>                        </next>                      </block>                    </next>                  </block>                </next>              </block>            </statement>            <statement
    name="has:dynamicity">              <block type="__link" id="249">                <field
    name="link_to">Dynamic service / JoinLeave</field>                <data>dynamic_service
    : 238 : 0</data>              </block>            </statement>          </block>        </next>      </block>    </statement>  </block>  <block
    type="sequence_diagram$s" id="227" x="87" y="96">    <field name="name">Platoon</field>    <field
    name="#sub_sequence">+</field>    <statement name="has:sub_sequence">      <block
    type="sub_sequence$s" id="230">        <field name="name">Start</field>        <field
    name="#sequence">+</field>        <statement name="has:sequence">          <block
    type="execute$s" id="247">            <field name="function">Send Program</field>            <field
    name="#CS">+</field>            <statement name="cs:CS">              <block type="__link"
    id="251">                <field name="link_to">CS / Controller</field>                <data>CS
    : 2 : 1</data>                <next>                  <block type="__link" id="319">                    <field
    name="link_to">CS / Kilobot</field>                    <data>CS : 3 : 1</data>                  </block>                </next>              </block>            </statement>            <next>              <block
    type="execute$s" id="252">                <field name="function">Init State Variables</field>                <field
    name="#CS">+</field>                <statement name="cs:CS">                  <block
    type="__link" id="254">                    <field name="link_to">CS / Kilobot</field>                    <data>CS
    : 3 : 1</data>                  </block>                </statement>                <next>                  <block
    type="execute$s" id="253">                    <field name="function">spinup_motors</field>                    <field
    name="#CS">+</field>                    <statement name="cs:CS">                      <block
    type="__link" id="256">                        <field name="link_to">CS / Kilobot</field>                        <data>CS
    : 3 : 1</data>                      </block>                    </statement>                  </block>                </next>              </block>            </next>          </block>        </statement>        <next>          <block
    type="sub_sequence$s" id="138">            <field name="name">Main</field>            <field
    name="#sequence">+</field>            <statement name="has:sequence">              <block
    type="While$s" id="139">                <field name="name">MainLoop</field>                <field
    name="condition"> < 20000</field>                <field name="#CS">+</field>                <field
    name="#state_variable">+</field>                <field name="#sequence">+</field>                <requirement
    pinned="false" h="100" w="200">Satisfies requirement(s) :-------------------------------------1\.
    T-4                </requirement>                <data>T-4</data>                <statement
    name="cs:CS">                  <block type="__link" id="140">                    <field
    name="link_to">CS / Kilobot</field>                    <data>CS : 3 : 1</data>                  </block>                </statement>                <statement
    name="check_on:state_variable">                  <block type="__link" id="141">                    <field
    name="link_to">State variable / kilo_ticks</field>                    <data>state_variable
    : 250 : 1</data>                  </block>                </statement>                <statement
    name="has:sequence">                  <block type="If$s" id="142">                    <field
    name="name">LeaderPrgrm</field>                    <field name="on_condition">  ==
    0</field>                    <field name="#CS">+</field>                    <field
    name="#state_variable">+</field>                    <field name="#sequence">+</field>                    <field
    name="#sequence">+</field>                    <statement name="cs:CS">                      <block
    type="__link" id="143">                        <field name="link_to">CS / Kilobot</field>                        <data>CS
    : 3 : 1</data>                      </block>                    </statement>                    <statement
    name="check_on:state_variable">                      <block type="__link" id="144">                        <field
    name="link_to">State variable / kilo_uid</field>                        <data>state_variable
    : 66 : 1</data>                      </block>                    </statement>                    <statement
    name="on_success:sequence">                      <block type="sub_sequence$s"
    id="231" collapsed="true">                        <field name="name">Go Straight
    Leader</field>                        <field name="#sequence">+</field>                        <statement
    name="has:sequence">                          <block type="While$s" id="237">                            <field
    name="name">StraightDelay</field>                            <field name="condition">kilo_ticks
    mod 826 < 700</field>                            <field name="#CS">+</field>                            <field
    name="#state_variable">+</field>                            <field name="#sequence">+</field>                            <statement
    name="cs:CS">                              <block type="__link" id="239">                                <field
    name="link_to">CS / Kilobot</field>                                <data>CS :
    3 : 1</data>                              </block>                            </statement>                            <statement
    name="check_on:state_variable">                              <block type="__link"
    id="246">                                <field name="link_to">State variable
    / kilo_ticks</field>                                <data>state_variable : 250
    : 1</data>                              </block>                            </statement>                            <statement
    name="has:sequence">                              <block type="execute$s" id="343">                                <field
    name="function">goStraight</field>                                <field name="#CS">+</field>                                <statement
    name="cs:CS">                                  <block type="__link" id="346">                                    <field
    name="link_to">CS / Kilobot</field>                                    <data>CS
    : 3 : 1</data>                                  </block>                                </statement>                                <next>                                  <block
    type="execute$s" id="348">                                    <field name="function">sendStraight</field>                                    <field
    name="#CS">+</field>                                    <statement name="cs:CS">                                      <block
    type="__link" id="349">                                        <field name="link_to">CS
    / Kilobot</field>                                        <data>CS : 3 : 1</data>                                      </block>                                    </statement>                                  </block>                                </next>                              </block>                            </statement>                          </block>                        </statement>                        <next>                          <block
    type="sub_sequence$s" id="232" collapsed="true">                            <field
    name="name">Turn Left Leader</field>                            <field name="#sequence">+</field>                            <statement
    name="has:sequence">                              <block type="While$s" id="240">                                <field
    name="name">TurnDelay</field>                                <field name="condition">kilo_ticks
    mod 826 >=700</field>                                <field name="#CS">+</field>                                <field
    name="#state_variable">+</field>                                <field name="#sequence">+</field>                                <statement
    name="cs:CS">                                  <block type="__link" id="241">                                    <field
    name="link_to">CS / Kilobot</field>                                    <data>CS
    : 3 : 1</data>                                  </block>                                </statement>                                <statement
    name="check_on:state_variable">                                  <block type="__link"
    id="245">                                    <field name="link_to">State variable
    / kilo_ticks</field>                                    <data>state_variable :
    250 : 1</data>                                  </block>                                </statement>                                <statement
    name="has:sequence">                                  <block type="execute$s"
    id="344">                                    <field name="function">turnLeft</field>                                    <field
    name="#CS">+</field>                                    <statement name="cs:CS">                                      <block
    type="__link" id="345">                                        <field name="link_to">CS
    / Kilobot</field>                                        <data>CS : 3 : 1</data>                                      </block>                                    </statement>                                    <next>                                      <block
    type="execute$s" id="350">                                        <field name="function">sendLeft</field>                                        <field
    name="#CS">+</field>                                        <statement name="cs:CS">                                          <block
    type="__link" id="351">                                            <field name="link_to">CS
    / Kilobot</field>                                            <data>CS : 3 : 1</data>                                          </block>                                        </statement>                                      </block>                                    </next>                                  </block>                                </statement>                              </block>                            </statement>                          </block>                        </next>                      </block>                    </statement>                    <statement
    name="on_failure:sequence">                      <block type="execute$s" id="183"
    collapsed="true">                        <field name="function">doNothing</field>                        <field
    name="#CS">+</field>                        <statement name="cs:CS">                          <block
    type="__link" id="184">                            <field name="link_to">CS /
    Kilobot</field>                            <data>CS : 3 : 1</data>                          </block>                        </statement>                      </block>                    </statement>                    <next>                      <block
    type="If$s" id="185">                        <field name="name">FollowerPrgrm</field>                        <field
    name="on_condition"> != 0</field>                        <field name="#CS">+</field>                        <field
    name="#state_variable">+</field>                        <field name="#sequence">+</field>                        <field
    name="#sequence">+</field>                        <statement name="cs:CS">                          <block
    type="__link" id="186">                            <field name="link_to">CS /
    Kilobot</field>                            <data>CS : 3 : 1</data>                          </block>                        </statement>                        <statement
    name="check_on:state_variable">                          <block type="__link"
    id="187">                            <field name="link_to">State variable / kilo_uid</field>                            <data>state_variable
    : 66 : 1</data>                          </block>                        </statement>                        <statement
    name="on_success:sequence">                          <block type="If$s" id="145"
    collapsed="true">                            <field name="name">Go Straight Follower</field>                            <field
    name="on_condition"> == STRAIGHT && sender == LEADER</field>                            <field
    name="#CS">+</field>                            <field name="#state_variable">+</field>                            <field
    name="#sequence">+</field>                            <field name="#sequence">+</field>                            <statement
    name="cs:CS">                              <block type="__link" id="146">                                <field
    name="link_to">CS / Kilobot</field>                                <data>CS :
    3 : 1</data>                              </block>                            </statement>                            <statement
    name="check_on:state_variable">                              <block type="__link"
    id="150">                                <field name="link_to">State variable
    / received_msg</field>                                <data>state_variable : 112
    : 1</data>                              </block>                            </statement>                            <statement
    name="on_success:sequence">                              <block type="execute$s"
    id="522">                                <field name="function"> goStraight</field>                                <field
    name="#CS">+</field>                                <requirement pinned="false"
    h="100" w="200">Satisfies requirement(s) :-------------------------------------The
    environment for this project is represented by AE-1 and AE-2\. In AE-1, the Kilobots
    operate on a whiteboard and in AE-2, an obstacle is located in the middle of the
    whiteboard. The AE-1 and AE-2 environments are shown here:-------------------------------------1\.
    AE-1    </requirement>    <data>AE-1</data>    <statement name="has:entity">      <block
    type="__link" id="192">        <field name="link_to">CS / Controller</field>        <data>CS
    : 2 : 0</data>        <next>          <block type="__link" id="193">            <field
    name="link_to">CS / Kilobot</field>            <data>CS : 3 : 0</data>            <next>              <block
    type="thing$s" id="194" collapsed="true">                <field name="name">Obstacle</field>                <field
    name="#dynamicity">+</field>                <requirement pinned="false" h="100"
    w="200">Satisfies requirement(s) :-------------------------------------1\. AE-2                </requirement>                <data>AE-2</data>              </block>            </next>          </block>        </next>      </block>    </statement>    <statement
    name="has:state_variable">      <block type="state_variable$s" id="195">        <field
    name="name">width</field>        <field name="value">1000</field>        <field
    name="#state">+</field>        <next>          <block type="state_variable$s"
    id="196">            <field name="name">height</field>            <field name="value">1000</field>            <field
    name="#state">+</field>            <next>              <block type="state_variable$s"
    id="197">                <field name="name">obstacle width</field>                <field
    name="value">700</field>                <field name="#state">+</field>                <next>                  <block
    type="state_variable$s" id="198">                    <field name="name">obstacle
    height</field>                    <field name="value">700</field>                    <field
    name="#state">+</field>                  </block>                </next>              </block>            </next>          </block>        </next>      </block>    </statement>  </block>  <block
    type="SoS$s" id="1" x="1059" y="-98">    <field name="name">Kilobot platooning</field>    <field
    name="sos_type">acknowledged</field>    <field name="#system">+</field>    <field
    name="#evolution">+</field>    <field name="#dependability_guarantee">+</field>    <field
    name="#behaviour">+</field>    <field name="#security">+</field>    <comment pinned="false"
    h="159" w="767">This is an example System-of-Systems (SoS) block named "example_block",
    on the work-space.---------------------------------------------------------------------------The
    next ones are about dynamicity and these are named DI, D2, D3, and D4.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'D-1: The platoon will allow any Kilobot to become a member.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D-1：这个排将允许任何基斯博特成为成员。
- en: 'D-2: The platoon is composed of at least two Kilobots.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D-2：这个排至少由两个基斯博特组成。
- en: 'D-3: The introduction of a Kilobot in the platoon is allowed only at its tail.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D-3：在这个排中引入一个基斯博特只允许在它的尾部。
- en: 'D-4: The platoon allows only the last Kilobot to leave.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D-4：这个排只允许最后一个基斯博特离开。
- en: 'These requirements are implemented with the following code:-------------------------------------1\.
    D-42\. D-5        </requirement>        <data>D-4,D-5</data>        <statement
    name="can_access:state_variable">          <block type="__link" id="243">            <field
    name="link_to">State variable / leader_uid</field>            <data>state_variable
    : 67 : 0</data>            <next>              <block type="__link" id="149">                <field
    name="link_to">State variable / kilo_uid</field>                <data>state_variable
    : 66 : 0</data>              </block>            </next>          </block>        </statement>        <next>          <block
    type="service$s" id="244" collapsed="true">            <field name="name">Join</field>            <field
    name="#state_variable">+</field>            <requirement pinned="false" h="100"
    w="200">Satisfies requirement(s) :-------------------------------------1\. D-12\.
    D-3            </requirement>            <data>D-1,D-3</data>            <statement
    name="can_access:state_variable">              <block type="__link" id="248">                <field
    name="link_to">State variable / kilo_uid</field>                <data>state_variable
    : 66 : 0</data>              </block>            </statement>          </block>        </next>      </block>    </statement>  </block>  <block
    type="emergent_phenomenon$s" id="228" collapsed="true" x="748" y="1454">    <field
    name="name">Platooning</field>    <field name="#behaviour">+</field>    <statement
    name="causes:behaviour">      <block type="expected_and_beneficial_behaviour$i"
    id="229">        <field name="name">Unique Platoon</field>        <requirement
    pinned="false" h="100" w="200">Satisfies requirement(s) :-------------------------------------2\.
    D-2            </requirement>            <data>ASoS-1,D-2</data>            <statement
    name="has:RUI">              <block type="RUPI$s" id="61">                <field
    name="name">Calculate Distance</field>                <field name="has_connection">FALSE</field>                <field
    name="#connecting_strategy">+</field>                <field name="#interface_specification">+</field>                <field
    name="#interface_port">+</field>                <field name="#afferent_environment">+</field>                <field
    name="#efferent_environment">+</field>                <field name="#interface_model">+</field>                <field
    name="#thing">+</field>                <field name="#environment">+</field>                <field
    name="#RUPI">+</field>                <field name="#probe">+</field>                <field
    name="#security">+</field>                <requirement pinned="false" h="100"
    w="200">Satisfies requirement(s) :-------------------------------------'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '这些要求是通过以下代码实现的：-------------------------------------1\. D-42\. D-5        </requirement>        <data>D-4,D-5</data>        <statement
    name="can_access:state_variable">          <block type="__link" id="243">            <field
    name="link_to">状态变量 / leader_uid</field>            <data>state_variable : 67
    : 0</data>            <next>              <block type="__link" id="149">                <field
    name="link_to">状态变量 / kilo_uid</field>                <data>state_variable : 66
    : 0</data>              </block>            </next>          </block>        </statement>        <next>          <block
    type="service$s" id="244" collapsed="true">            <field name="name">Join</field>            <field
    name="#state_variable">+</field>            <requirement pinned="false" h="100"
    w="200">满足要求 :-------------------------------------1\. D-12\. D-3            </requirement>            <data>D-1,D-3</data>            <statement
    name="can_access:state_variable">              <block type="__link" id="248">                <field
    name="link_to">状态变量 / kilo_uid</field>                <data>state_variable : 66
    : 0</data>              </block>            </statement>          </block>        </next>      </block>    </statement>  </block>  <block
    type="emergent_phenomenon$s" id="228" collapsed="true" x="748" y="1454">    <field
    name="name">编队</field>    <field name="#behaviour">+</field>    <statement name="causes:behaviour">      <block
    type="expected_and_beneficial_behaviour$i" id="229">        <field name="name">Unique
    Platoon</field>        <requirement pinned="false" h="100" w="200">满足要求 :-------------------------------------2\.
    D-2            </requirement>            <data>ASoS-1,D-2</data>            <statement
    name="has:RUI">              <block type="RUPI$s" id="61">                <field
    name="name">Calculate Distance</field>                <field name="has_connection">FALSE</field>                <field
    name="#connecting_strategy">+</field>                <field name="#interface_specification">+</field>                <field
    name="#interface_port">+</field>                <field name="#afferent_environment">+</field>                <field
    name="#efferent_environment">+</field>                <field name="#interface_model">+</field>                <field
    name="#thing">+</field>                <field name="#environment">+</field>                <field
    name="#RUPI">+</field>                <field name="#probe">+</field>                <field
    name="#security">+</field>                <requirement pinned="false" h="100"
    w="200">满足要求 :-------------------------------------'
- en: 'The SOS level is designed as follows. CSoS-1: Each Kilobot will use its RUMI
    to exchange information about direction, when it is joining the platoon, and when
    it is leaving the platoon. CSoS-2: When the SoS starts, each Kilobot notifies
    its adjacent follower that it is the leader by transmitting a message. CSoS-3:
    Each Kilobot has a RUPI to estimate the distance between the sender and receiver
    using signal power.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: SOS 级别设计如下。CSoS-1：每个 Kilobot 将使用其 RUMI 交换关于方向的信息，在它加入编队时和离开编队时。CSoS-2：当 SoS
    开始时，每个 Kilobot 通过传递消息通知其相邻的跟随者它是领导者。CSoS-3：每个 Kilobot 都有一个 RUPI，用于使用信号强度估算发送者和接收者之间的距离。
- en: 'The following code explains the CSoS systems:-------------------------------------1\.
    CSoS-2                                    </requirement>                                    <data>CSoS-2</data>                                    <next>                                      <block
    type="message$s" id="226" collapsed="true">                                        <field
    name="name">LOAD_PRGRM</field>                                        <field name="transport_type">PAR_message</field>                                        <field
    name="header">  ?  </field>                                        <field name="data_field">  ?  </field>                                        <field
    name="#message_classification">+</field>                                        <field
    name="#trailer">+</field>                                      </block>                                    </next>                                  </block>                                </next>                              </block>                            </next>                          </block>                        </next>                      </block>                    </statement>                    <statement
    name="connects:RUMI">                      <block type="__link" id="156">                        <field
    name="link_to">RUMI / Message Exchange</field>                        <data>RUMI
    : 63 : 0</data>                        <next>                          <block
    type="__link" id="235">                            <field name="link_to">RUMI
    / Kilobot program load</field>                            <data>RUMI : 65 : 0</data>                          </block>                        </next>                      </block>                    </statement>                  </block>                </next>              </block>            </statement>            <statement
    name="may_require:dependability_guarantee">              <block type="dependability_guarantee$s"
    id="77" collapsed="true">                <field name="name">Starting Position
    = Straight line</field>                <field name="#technique">+</field>                <field
    name="#measure">+</field>                <requirement pinned="false" h="100" w="200">Satisfies
    requirement(s) :--------------------------------------------------------------------------1\.
    CSoS-1.2                                    </requirement>                                    <data>CSoS-1.2</data>                                    <statement
    name="cs:CS">                                      <block type="__link" id="155">                                        <field
    name="link_to">CS / Kilobot</field>                                        <data>CS
    : 3 : 1</data>                                      </block>                                    </statement>                                  </block>                                </next>                              </block>                            </statement>                            <statement
    name="on_failure:sequence">                              <block type="execute$s"
    id="164">                                <field name="function">doNothing</field>                                <field
    name="#CS">+</field>                                <statement name="cs:CS">                                  <block
    type="__link" id="165">                                    <field name="link_to">CS
    / Kilobot</field>                                    <data>CS : 3 : 1</data>                                  </block>                                </statement>                              </block>                            </statement>                            <next>                              <block
    type="If$s" id="166" collapsed="true">                                <field name="name">Turn
    Left Follower</field>                                <field name="on_condition">
    == LEFT && sender == LEADER</field>                                <field name="#CS">+</field>                                <field
    name="#state_variable">+</field>                                <field name="#sequence">+</field>                                <field
    name="#sequence">+</field>                                <statement name="cs:CS">                                  <block
    type="__link" id="168">                                    <field name="link_to">CS
    / Kilobot</field>                                    <data>CS : 3 : 1</data>                                  </block>                                </statement>                                <statement
    name="check_on:state_variable">                                  <block type="__link"
    id="169">                                    <field name="link_to">State variable
    / received_msg</field>                                    <data>state_variable
    : 112 : 1</data>                                  </block>                                </statement>                                <statement
    name="on_success:sequence">                                  <block type="execute$s"
    id="170">                                    <field name="function">turnLeft</field>                                    <field
    name="#CS">+</field>                                    <requirement pinned="false"
    h="100" w="200">Satisfies requirement(s) :-------------------------------------1\.
    CSoS-1.1                                    </requirement>                                    <data>CSoS-1.1</data>                                    <statement
    name="cs:CS">                                      <block type="__link" id="171">                                        <field
    name="link_to">CS / Kilobot</field>                                        <data>CS
    : 3 : 1</data>                                      </block>                                    </statement>                                    <next>                                      <block
    type="execute$s" id="172">                                        <field name="function">sendLeft</field>                                        <field
    name="#CS">+</field>                                        <requirement pinned="false"
    h="100" w="200">Satisfies requirement(s) :-------------------------------------1\.
    CSoS-1.1                                        </requirement>                                        <data>CSoS-1.1</data>                                        <statement
    name="cs:CS">                                          <block type="__link" id="173">                                            <field
    name="link_to">CS / Kilobot</field>                                            <data>CS
    : 3 : 1</data>                                          </block>                                        </statement>                                      </block>                                    </next>                                  </block>                                </statement>                                <statement
    name="on_failure:sequence">                                  <block type="execute$s"
    id="174">                                    <field name="function">doNothing</field>                                    <field
    name="#CS">+</field>                                    <statement name="cs:CS">                                      <block
    type="__link" id="175">                                        <field name="link_to">CS
    / Kilobot</field>                                        <data>CS : 3 : 1</data>                                      </block>                                    </statement>                                  </block>                                </statement>                                <next>                                  <block
    type="If$s" id="176" collapsed="true">                                    <field
    name="name">kilo_ticks check</field>                                    <field
    name="on_condition"> > 2000</field>                                    <field
    name="#CS">+</field>                                    <field name="#state_variable">+</field>                                    <field
    name="#sequence">+</field>                                    <field name="#sequence">+</field>                                    <statement
    name="cs:CS">                                      <block type="__link" id="178">                                        <field
    name="link_to">CS / Kilobot</field>                                        <data>CS
    : 3 : 1</data>                                      </block>                                    </statement>                                    <statement
    name="check_on:state_variable">                                      <block type="__link"
    id="177">                                        <field name="link_to">State variable
    / kilo_ticks</field>                                        <data>state_variable
    : 250 : 1</data>                                      </block>                                    </statement>                                    <statement
    name="on_success:sequence">                                      <block type="sub_sequence$s"
    id="233" collapsed="true">                                        <field name="name">Leave</field>                                        <field
    name="#sequence">+</field>                                        <statement name="has:sequence">                                          <block
    type="If$s" id="114">                                            <field name="name">canLeave</field>                                            <field
    name="on_condition">== LAST_IN_PLATOON</field>                                            <field
    name="#CS">+</field>                                            <field name="#state_variable">+</field>                                            <field
    name="#sequence">+</field>                                            <field name="#sequence">+</field>                                            <statement
    name="cs:CS">                                              <block type="__link"
    id="115">                                                <field name="link_to">CS
    / Kilobot</field>                                                <data>CS : 3
    : 1</data>                                              </block>                                            </statement>                                            <statement
    name="check_on:state_variable">                                              <block
    type="__link" id="116">                                                <field
    name="link_to">State variable / kilo_uid</field>                                                <data>state_variable
    : 66 : 1</data>                                              </block>                                            </statement>                                            <statement
    name="on_success:sequence">                                              <block
    type="execute$s" id="352">                                                <field
    name="function">sendLeave</field>                                                <field
    name="#CS">+</field>                                                <requirement
    pinned="false" h="100" w="200">Satisfies requirement(s) :-------------------------------------1\.
    CSoS-1.3                                                </requirement>                                                <data>CSoS-1.3</data>                                                <statement
    name="cs:CS">                                                  <block type="__link"
    id="353">                                                    <field name="link_to">CS
    / Kilobot</field>                                                    <data>CS
    : 3 : 1</data>                                                  </block>                                                </statement>                                                <next>                                                  <block
    type="execute$s" id="354">                                                    <field
    name="function">goAway</field>                                                    <field
    name="#CS">+</field>                                                    <requirement
    pinned="false" h="100" w="200">Satisfies requirement(s) :-------------------------------------1\.
    CSoS-1.3                                                    </requirement>                                                    <data>CSoS-1.3</data>                                                    <statement
    name="cs:CS">                                                      <block type="__link"
    id="355">                                                        <field name="link_to">CS
    / Kilobot</field>                                                        <data>CS
    : 3 : 1</data>                                                      </block>                                                    </statement>                                                  </block>                                                </next>                                              </block>                                            </statement>                                            <statement
    name="on_failure:sequence">                                              <block
    type="execute$s" id="179" collapsed="true">                                                <field
    name="function">doNothing</field>                                                <field
    name="#CS">+</field>                                                <statement
    name="cs:CS">                                                  <block type="__link"
    id="180">                                                    <field name="link_to">CS
    / Kilobot</field>                                                    <data>CS
    : 3 : 1</data>                                                  </block>                                                </statement>                                              </block>                                            </statement>                                          </block>                                        </statement>                                      </block>                                    </statement>                                    <statement
    name="on_failure:sequence">                                      <block type="execute$s"
    id="181">                                        <field name="function">doNothing</field>                                        <field
    name="#CS">+</field>                                        <statement name="cs:CS">                                          <block
    type="__link" id="182">                                            <field name="link_to">CS
    / Kilobot</field>                                            <data>CS : 3 : 1</data>                                          </block>                                        </statement>                                      </block>                                    </statement>                                    <next>                                      <block
    type="sub_sequence$s" id="234" collapsed="true">                                        <field
    name="name">Join</field>                                        <field name="#sequence">+</field>                                        <statement
    name="has:sequence">                                          <block type="sub_sequence$s"
    id="123">                                            <field name="name">checkSequence</field>                                            <field
    name="#sequence">+</field>                                            <statement
    name="has:sequence">                                              <block type="If$s"
    id="124">                                                <field name="name">idCheck</field>                                                <field
    name="on_condition">  == 255</field>                                                <field
    name="#CS">+</field>                                                <field name="#state_variable">+</field>                                                <field
    name="#sequence">+</field>                                                <field
    name="#sequence">+</field>                                                <statement
    name="cs:CS">                                                  <block type="__link"
    id="126">                                                    <field name="link_to">CS
    / Kilobot</field>                                                    <data>CS
    : 3 : 1</data>                                                  </block>                                                </statement>                                                <statement
    name="check_on:state_variable">                                                  <block
    type="__link" id="125">                                                    <field
    name="link_to">State variable / leader_uid</field>                                                    <data>state_variable
    : 67 : 1</data>                                                  </block>                                                </statement>                                                <statement
    name="on_success:sequence">                                                  <block
    type="While$s" id="117">                                                    <field
    name="name">sendingJoin</field>                                                    <field
    name="condition"> != OK</field>                                                    <field
    name="#CS">+</field>                                                    <field
    name="#state_variable">+</field>                                                    <field
    name="#sequence">+</field>                                                    <statement
    name="cs:CS">                                                      <block type="__link"
    id="119">                                                        <field name="link_to">CS
    / Kilobot</field>                                                        <data>CS
    : 3 : 1</data>                                                      </block>                                                    </statement>                                                    <statement
    name="check_on:state_variable">                                                      <block
    type="__link" id="118">                                                        <field
    name="link_to">State variable / received_msg</field>                                                        <data>state_variable
    : 112 : 1</data>                                                      </block>                                                    </statement>                                                    <statement
    name="has:sequence">                                                      <block
    type="execute$s" id="135">                                                        <field
    name="function">sendJoin</field>                                                       <field
    name="#CS">+</field>                                                        <requirement
    pinned="false" h="100" w="200">Satisfies---------------------------------------------------------------------------'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'This xml code is listed in this GitHub repository :'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此xml代码列在此GitHub存储库中：
- en: '[https://github.com/JosephThachilGeorge/Platoon-Project/blob/main/final-model.xml](https://github.com/JosephThachilGeorge/Platoon-Project/blob/main/final-model.xml)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/JosephThachilGeorge/Platoon-Project/blob/main/final-model.xml](https://github.com/JosephThachilGeorge/Platoon-Project/blob/main/final-model.xml)'
- en: Note that to run this code you can use any model simulator that accepts xml
    files.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，要运行此代码，您可以使用接受xml文件的任何模型模拟器。
- en: Once you execute, you will get models shown in Figures [15-1a](#Fig1) and [15-1b](#Fig2).![../images/520777_1_En_15_Chapter/520777_1_En_15_Fig1_HTML.jpg](../images/520777_1_En_15_Chapter/520777_1_En_15_Fig1_HTML.jpg)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，您将看到[15-1a](#Fig1)和[15-1b](#Fig2)图中显示的模型。![../images/520777_1_En_15_Chapter/520777_1_En_15_Fig1_HTML.jpg](../images/520777_1_En_15_Chapter/520777_1_En_15_Fig1_HTML.jpg)
- en: Figure 15-1a
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图15-1a
- en: The models
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 模型
- en: '![../images/520777_1_En_15_Chapter/520777_1_En_15_Fig2_HTML.jpg](../images/520777_1_En_15_Chapter/520777_1_En_15_Fig2_HTML.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![../images/520777_1_En_15_Chapter/520777_1_En_15_Fig2_HTML.jpg](../images/520777_1_En_15_Chapter/520777_1_En_15_Fig2_HTML.jpg)'
- en: Figure 15-1b
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图15-1b
- en: The models, continued
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 模型，续
- en: 15.6 Summary
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.6 总结
- en: The project platoon helps you design and implement the cyber-physical system.
    The same concept can be used to design any cyber-physical system in the real world.
    The Kilobot movement illustrates the parts of cyber-physical systems and their
    characteristics. This chapter concludes the projects related to cyber-physical
    systems. So far, you’ve seen how to develop blockchains and distributed systems.
    In the next chapter, you learn about the future of blockchain and distributed
    cyber-physical systems.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 项目排班帮助您设计和实现网络物理系统。相同的概念可以用来设计现实世界中的任何网络物理系统。Kilobot运动说明了网络物理系统的各个部分及其特点。本章总结了与网络物理系统相关的项目。到目前为止，您已经学习了如何开发区块链和分布式系统。在下一章中，您将了解区块链和分布式网络物理系统的未来。
