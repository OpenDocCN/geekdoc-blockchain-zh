["```\nconst fs = require('fs');\nconst solc = require('solc');\nconst Web3 = require('web3');\nconst web3 = new Web3(\n   new Web3.providers.HttpProvider(\"http://localhost:8545\"));\nvar assert = require('assert');\n\nconst source =\n   fs.readFileSync('c:/Ethereum/mocha/SimpleCoin/SimpleCoin.sol', \n   'utf8');\nconst compiledContract = solc.compile(source, 1);\nconst abi = compiledContract.contracts[':SimpleCoin'].interface;\nconst bytecode = '0x' + compiledContract.contracts[':SimpleCoin'].bytecode;\nconst gasEstimate = web3.eth.estimateGas({ data: bytecode }) + 100000;\n\nconst SimpleCoinContractFactory = web3.eth.contract(JSON.parse(abi));\n\ndescribe('SimpleCoin', function() {\n  this.timeout(5000);\n  describe('SimpleCoin constructor', function() {      \n    it('Contract owner is sender', function(done) {\n         //arrange \n            let sender = web3.eth.accounts[1];\n            let initialSupply = 10000;\n\n            //act\n            let simpleCoinInstance =\n                SimpleCoinContractFactory.new(initialSupply, {\n                   from: sender, data: bytecode, gas: gasEstimate}, \n                   function (e, contract){\n                   if (typeof contract.address !== 'undefined') {\n                          //assert\n                          assert.equal(contract.owner(), sender);\n                          done();\n                   }\n              });\n    });\n\n    it('Contract owner balance is equal to initialSupply', function(done) {\n         //arrange \n            let sender = web3.eth.accounts[1];\n            let initialSupply = 10000;\n\n            //act\n            let simpleCoinInstance =\n                SimpleCoinContractFactory.new(initialSupply, {\n                   from: sender, data: bytecode, gas: gasEstimate}, \n                   function (e, contract){\n                   if (typeof contract.address !== 'undefined') {\n                          //assert\n\n     assert.equal(contract.coinBalance(contract.owner()), initialSupply);\n                          done();\n                   }\n               });\n    });          \n  });\n\n  describe('transfer', function() {     \n    it('Cannot transfer a number of tokens higher than number of tokens\n owned', function(done) {\n         //arrange \n            let sender = web3.eth.accounts[1];\n            let initialSupply = 10000;\n            let recipient = web3.eth.accounts[2];\n            let tokensToTransfer = 12000;\n\n            let simpleCoinInstance = \n                SimpleCoinContractFactory.new(initialSupply, {\n                   from: sender, data: bytecode, gas: gasEstimate}, \n                   function (e, contract){\n                   if (typeof contract.address !== 'undefined') {\n                          //act and assert\n                          assert.throws(\n                                 ()=> {\n                                        contract.transfer(\n                                            recipient, tokensToTransfer, {\n                                            from:sender,gas:200000});\n                                 },\n                                 /VM Exception while processing transaction/\n                          );\n                          done();\n                   }\n\n               });\n    });\n     it('Successful transfer: final sender and recipient balances are\n correct', function(done) {\n         //arrange \n            let sender = web3.eth.accounts[1];\n            let initialSupply = 10000;\n            let recipient = web3.eth.accounts[2];\n            let tokensToTransfer = 200;\n\n            let simpleCoinInstance =\n                SimpleCoinContractFactory.new(initialSupply, {\n                   from: sender, data: bytecode, gas: gasEstimate}, \n                   function (e, contract){\n                   if (typeof contract.address !== 'undefined') {\n\n                          //act\n                          contract.transfer(recipient, tokensToTransfer, {\n                                 from:sender,gas:200000});\n\n                          //assert\n                          const expectedSenderBalance = 9800;\n                          const expectedRecipientBalance = 200;\n\n                          let actualSenderBalance =\n                              contract.coinBalance(sender);\n                          let actualRecipientBalance =\n                              contract.coinBalance(recipient);\n\n                          assert.equal(actualSenderBalance,\n                              expectedSenderBalance);\n                          assert.equal(actualRecipientBalance,\n                              expectedRecipientBalance);\n\n                          done();\n                   }\n               });\n    });\n  });  \n\n  describe('authorize', function() {     \n     it('Successful authorization: the allowance of the authorized account\n is set correctly', function(done) {\n         //arrange \n            let sender = web3.eth.accounts[1];\n            let initialSupply = 10000;\n            let authorizer = web3.eth.accounts[2];\n            let authorized = web3.eth.accounts[3];\n            let allowance = 300;\n\n            let simpleCoinInstance =\n                SimpleCoinContractFactory.new(initialSupply, \n                   {from: sender, data: bytecode, gas: gasEstimate}, \n                   function (e, contract){\n                   if (typeof contract.address !== 'undefined') {\n\n                          //act\n                          let result = contract.authorize(authorized,\n                                 allowance, \n                                 {from:authorizer,gas:200000});\n\n                          //assert\n                          assert.equal(contract.allowance(\n                              authorizer, authorized), 300); \n\n                          done();\n                   }\n              });\n    });\n  });  \n\n  describe('transferFrom', function() {     \n     it('Cannot transfer number of tokens higher than that owned by\n authorizer', function(done) {\n         //arrange \n            let sender = web3.eth.accounts[1];\n            let initialSupply = 10000;\n            let authorizer = web3.eth.accounts[2];\n            let authorized = web3.eth.accounts[3];\n            let toAccount = web3.eth.accounts[5];\n            let allowance = 300;\n            let initialBalanceOfAuthorizer = 400;\n            let tokensToTransferFromAuthorizerToAuthorized = 450;\n\n            let simpleCoinInstance =\n               SimpleCoinContractFactory.new(initialSupply, \n                 {from: sender, data: bytecode, gas: gasEstimate}, \n                 function (e, contract){\n                   if (typeof contract.address !== 'undefined') {\n\n                     //arrange\n                     contract.authorize(authorized, allowance, {\n                        from:authorizer,gas:200000});\n\n                     contract.transfer(authorizer,\n                        initialBalanceOfAuthorizer, \n                      {from:sender,gas:200000});                                 \n\n                     //act and assert\n                     assert.throws(\n                          ()=> {\n                             contract.transferFrom(authorizer,\n                                toAccount,\n                                tokensToTransferFromAuthorizerToAuthorized, \n                                {from:authorized,gas:200000});\n                           },\n                           /VM Exception while processing transaction/\n                      );                    \n\n                      done();\n                   }\n\n              });\n    });\n\n     it('Cannot transfer tokens from an account that has not authorized any\n account', function(done) {\n         //arrange \n            let sender = web3.eth.accounts[1];\n            let initialSupply = 10000;\n            let authorizer = web3.eth.accounts[2];\n            let authorized = web3.eth.accounts[3];\n            let toAccount = web3.eth.accounts[5];\n            let allowance = 300;\n            let initialBalanceOfAuthorizer = 400;\n\n            let fromAccount = web3.eth.accounts[4];            \n            let initialBalanceOfFromAccount = 400;\n\n            let tokensToTransfer = 250;\n\n            let simpleCoinInstance =\n                   SimpleCoinContractFactory.new(initialSupply, {\n                     from: sender, data: bytecode, gas: gasEstimate}, \n                     function (e, contract){\n                       if (typeof contract.address !== 'undefined') {\n\n                          //arrange\n                          contract.authorize(authorized, allowance, \n                              {from:authorizer,gas:200000});\n\n                          contract.transfer(fromAccount,\n                              initialBalanceOfFromAccount, \n                              {from:sender,gas:200000}); \n\n                          //act and assert\n                          assert.throws(\n                              ()=> {\n                                contract.transferFrom(fromAccount,\n                                   toAccount, \n                                   tokensToTransfer,  \n                                   {from:authorized,gas:200000});\n                                },\n                                /VM Exception while processing transaction/\n                          );                    \n\n                          done();\n                      }\n                  });\n    });     \n\n     it('Cannot transfer tokens by an account that has not been\n authorized', function(done) {\n         //arrange \n            let sender = web3.eth.accounts[1];\n            let initialSupply = 10000;\n            let authorizer = web3.eth.accounts[2];\n            let authorized = web3.eth.accounts[3];\n            let toAccount = web3.eth.accounts[5];\n\n            let allowance = 300;\n            let initialBalanceOfAuthorizer = 400;     \n\n            let transferExecuter = web3.eth.accounts[4];            \n\n            let tokensToTransfer = 250;\n\n            let simpleCoinInstance =\n                   SimpleCoinContractFactory.new(initialSupply, \n                     {from: sender, data: bytecode, gas: gasEstimate}, \n                     function (e, contract){\n                       if (typeof contract.address !== 'undefined') {\n\n                          //arrange\n                          contract.authorize(authorized, allowance, {\n                             from:authorizer,gas:200000});\n\n                          contract.transfer(authorizer,\n                             initialBalanceOfAuthorizer, \n                             {from:sender,gas:200000}); \n\n                          //act and assert\n                          assert.throws(\n                             ()=> {\n                                contract.transferFrom(authorizer,\n                                   toAccount, tokensToTransfer,  \n                                   {from:transferExecuter,gas:200000});\n                                },\n                                /VM Exception while processing transaction/\n                          );                    \n\n                          done();\n                       }\n                   });\n    });     \n\n     it('Successful transfer from authorizer to authorized: final source\n and destination balances are correct and allowance is reduced as\n expected', function(done) {\n         //arrange \n            let sender = web3.eth.accounts[1];\n            let initialSupply = 10000;\n            let authorizer = web3.eth.accounts[2];\n            let authorized = web3.eth.accounts[3];\n            let toAccount = web3.eth.accounts[5];\n            let allowance = 300;\n            let initialBalanceOfAuthorizer = 400;            \n\n            let tokensToTransfer = 250;\n\n            let simpleCoinInstance =\n                   SimpleCoinContractFactory.new(initialSupply, \n                     {from: sender, data: bytecode, gas: gasEstimate}, \n\n                     function (e, contract){\n                       if (typeof contract.address !== 'undefined') {\n\n                          //arrange\n                          contract.authorize(authorized, allowance, \n                                 {from:authorizer,gas:200000});\n\n                          contract.transfer(authorizer,\n                              initialBalanceOfAuthorizer, \n                              {from:sender,gas:200000});                                 \n\n                          //act\n                          contract.transferFrom(authorizer, toAccount,\n                              tokensToTransfer, \n                              {from:authorized,gas:200000});\n\n                          //assert\n                          assert.equal(150,\n                              contract.coinBalance(authorizer));\n                          assert.equal(250,\n                              contract.coinBalance(toAccount));                     \n                          assert.equal(50, \n                              contract.allowance(authorizer, authorized));\n\n                          done();\n                       }\n                  });\n    });     \n  });  \n\n  describe('mint', function() {     \n     it('Cannot mint from nonowner account', function(done) {\n            //arrange \n            let sender = web3.eth.accounts[1];\n            let initialSupply = 10000;\n\n            let minter = web3.eth.accounts[2];\n            let recipient = web3.eth.accounts[3];\n            let mintedCoins = 3000;\n\n            let simpleCoinInstance =\n                   SimpleCoinContractFactory.new(initialSupply, \n                     {from: sender, data: bytecode, gas: gasEstimate}, \n                     function (e, contract){\n                       if (typeof contract.address !== 'undefined') {\n                          //act and assert\n                          assert.throws(\n                            ()=> {\n                                contract.mint(recipient, mintedCoins,  \n                                {from:minter,gas:200000});\n                             },\n                             /VM Exception while processing transaction/\n                          );     \n\n                          done();\n\n                       }\n                   });\n     });\n\n     it('Successful minting: the recipient has the correct balance',\n         function(done) {\n            //arrange \n            let sender = web3.eth.accounts[1];\n            let initialSupply = 10000;\n\n            let recipient = web3.eth.accounts[3];\n            let mintedCoins = 3000;\n\n            let simpleCoinInstance =\n                 SimpleCoinContractFactory.new(initialSupply, \n                   {from: sender, data: bytecode, gas: gasEstimate}, \n                   function (e, contract){\n                     if (typeof contract.address !== 'undefined') {\n                          //act\n                          contract.mint(recipient, mintedCoins,  \n                              {from:sender,gas:200000});\n\n                          //assert\n                          assert.equal(contract.coinBalance(recipient),\n                             mintedCoins);\n                          done();\n                     }\n                });\n     });     \n  });\n\n  describe('freezeAccount', function() {     \n     it('Cannot freeze from nonowner account', function(done) {\n            //arrange \n            let sender = web3.eth.accounts[1];\n            let initialSupply = 10000;\n\n            let freezer = web3.eth.accounts[2];\n            let frozen = web3.eth.accounts[3];\n\n            let simpleCoinInstance =\n                   SimpleCoinContractFactory.new(initialSupply, \n                     {from: sender, data: bytecode, gas: gasEstimate}, \n                     function (e, contract){\n                      if (typeof contract.address !== 'undefined') {\n                          //act and assert\n                          assert.throws(\n                             ()=> {\n                                contract.freezeAccount(frozen, true,  \n                                {from:freezer,gas:200000});\n                             },\n                             /VM Exception while processing transaction/\n                          );     \n\n                          done();\n\n                      }\n                   });\n     });\n\n     it('Successful freezing: verify the account has been frozen',\n      function(done) {\n            //arrange \n            let sender = web3.eth.accounts[1];\n            let initialSupply = 10000;\n\n            let frozen = web3.eth.accounts[3];\n\n            let simpleCoinInstance =\n                   SimpleCoinContractFactory.new(initialSupply, \n                     {from: sender, data: bytecode, gas: gasEstimate}, \n                     function (e, contract){\n                       if (typeof contract.address !== 'undefined') {\n                          //act\n                          contract.freezeAccount(frozen, true,  \n                             {from:sender,gas:200000});\n\n                          //assert\n                          assert.equal(contract.frozenAccount(frozen),\n                             true);\n                          done();\n                       }\n                   });\n     });     \n  });\n\n});\n```"]