- en: © Chris Dannen 2017Chris DannenIntroducing Ethereum and Solidity10.1007/978-1-4842-2535-6_2
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © Chris Dannen 2017Chris Dannen介绍以太坊和Solidity10.1007/978-1-4842-2535-6_2
- en: 2. The Mist Browser
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2. The Mist 浏览器
- en: 'In the realm of cryptocurrency software, there are generally two essential
    types of client applications: wallets and full nodesChris Dannen^(1 )(1)Brooklyn,
    New York, USANoteWallet usually denotes a lightweight node that connects to a
    blockchain to perform basic functions, such as sending and receiving cryptocurrency.
    Full nodes are command-line interfaces that can perform the full gamut of operations
    allowed by the network.As we covered in the last chapter, Ethereum can refer to
    both the Ethereum protocol and the Ethereum network created by computers using
    the protocol. Operating a node on the network allows you to upload smart contracts.
    For sending and receiving cryptocurrency (in our case, ether) all you need is
    a wallet application for your computer or smartphone.Ethereum has several client
    applications that are discussed in this book. The most useful (for most readers)
    is the Mist browser, a user-friendly wallet that can perform some of the duties
    of a full node—namely, executing smart contracts.Eventually, entire web-app-like
    programs will be accessible through Mist , with their back ends built on Ethereum;
    that’s why it’s called a browser. Don’t be fooled by Mist’s simplicity. Today,
    it’s useful for sending and receiving the ether cryptocurrency. But tomorrow,
    it may also be a distribution point for consumer and enterprise software applications,
    almost like an App Store.NoteThe term currency, as in cryptocurrency, refers to
    a fungible unit of value for the system, much like a token, or scrip. What exactly
    these little tokens represent will become clear later in this chapter. The term
    fungible, applied to a currency, means “mutually interchangeable.” In fiat currency
    terms, one dollar can be said to be fungible for another dollar.In this chapter,
    you’ll learn how to access the network by using Mist and other applications, in
    order to understand the basics of sending and receiving ether tokens between accounts.
    Subsequent chapters break down how the system works and how to program smart contracts
    for it.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Wallets as a Computing Metaphor
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 钱包作为一种计算隐喻
- en: Wallets are software applications for desktop or mobile devices that hold your
    keys to the EVM. These keys correspond to an account, which is referred to by
    a long account address. In Ethereum, accounts do not store your name or any other
    personal information. They are pseudonymous. Anyone can generate an Ethereum account
    by connecting to the network with any Ethereum client (such as Mist). You can
    generate as many as you’d like.If you’ve already downloaded an Ethereum wallet
    or full node on your computer or phone, you were probably prompted to create an
    account. The wallet application probably also asked you to create a password to
    protect your keys with encryption. As you can gather, these keys are an important
    part of sending and receiving ether.Let’s begin by looking at your account address,
    also called a public key. Your public key has a matching private key that allows
    access to your account. This private key should be kept secret and not published
    anywhere.Accounts in both Bitcoin and Ethereum are represented by long hexidecimal
    addresses. An Ethereum address looks like this:0xB38AA74527aD855054DC17f4324FE9b4004C720CIn
    the Bitcoin protocol, the raw hexidecimal address is encoded in base 58 with a
    built-in version number and checksum, but underneath looks just like an Ethereum
    address. Here’s an example of a Bitcoin address:1GDCKfdTo4yNDd9tEM4JsL8DnTVDw552SyTo
    receive ether or bitcoins, you must give the sender your address, which is why
    it’s called a public key . Of course, these strings are not memorable. If you’re
    new to programming, you might be wondering what’s going on here; why the unwieldy
    alphanumeric mess? Experienced programmers may already know that these public
    and private keys are part of asymmetric key cryptography.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 钱包是桌面或移动设备上的软件应用程序，用于保存您对 EVM 的密钥。 这些密钥对应于一个帐户，该帐户由长帐户地址引用。 在以太坊中，帐户不存储您的姓名或任何其他个人信息。
    它们是匿名的。 任何人都可以通过连接到任何以太坊客户端（例如 Mist）与网络连接来生成以太坊帐户。 您可以生成任意数量的帐户。如果您已经在计算机或手机上下载了以太坊钱包或完整节点，则可能会提示您创建帐户。
    钱包应用程序可能还要求您创建一个密码，以加密方式保护您的密钥。 正如您可以了解的那样，这些密钥是发送和接收 ether 的重要部分。让我们从查看您的帐户地址开始，也称为公钥。
    您的公钥具有一个相匹配的私钥，允许访问您的帐户。 此私钥应保密，并且不应在任何地方发布。比特币和以太坊中的帐户由长十六进制地址表示。 以太坊地址看起来像这样：0xB38AA74527aD855054DC17f4324FE9b4004C720C
    在比特币协议中，原始十六进制地址使用内置版本号和校验和以 base 58 编码，但在底层看起来就像以太坊地址。 这是比特币地址的一个示例：1GDCKfdTo4yNDd9tEM4JsL8DnTVDw552Sy要接收
    ether 或 bitcoins，您必须向发送者提供您的地址，这就是为什么它被称为公钥。 当然，这些字符串是不可记忆的。 如果您是编程新手，您可能想知道这里发生了什么；
    为什么这些难以驾驭的字母数字混乱？ 有经验的程序员可能已经知道，这些公钥和私钥是非对称密钥密码学的一部分。
- en: Your Address Is What?
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 您的地址是什么？
- en: 'Why do account addresses —which are meant to be public, and which some people
    even list on their web sites—consist of such long, cryptic strings? Why can’t
    we just have usernames?The answer is that someday soon you probably will be able
    to generate plain-English usernames, but they’ll function more like top-level
    domain names today. You’ll rent a name from a decentralized network registrar,
    and it will redirect to your real account address, much the way that top-level
    domains redirect to IP addresses today.A lot of plans for the Ethereum network
    are in the pipeline that will eventually replicate the niceties of today’s HTTP
    Web as we know it. To learn more about the Ethereum roadmap, skip to Chapter [11](A433414_1_En_11_Chapter.html).NoteAn
    account is a data object: an entry in the blockchain ledger, indexed by its address,
    containing data about the state of that account, such as its balance. An address
    is a public key belonging to a particular user; it’s how users access their accounts.
    In practice, the address is technically the hash of a public key, not the public
    key itself, but for simplicity, it’s better to ignore this distinction.In the
    EVM, asymmetric cryptography is used by the network to generate and recognize
    valid Ethereum addresses, and also to “digitally sign” transactions. In secure
    communications, asymmetric cryptography is used to encipher private communications,
    so that even if they are intercepted by enemies, they remain unreadable. In blockchain
    the principle works the same; it’s a method for ensuring that messages (in the
    form of EVM transaction requests) are coming from the actual address holder, and
    not an interloper trying to hijack their funds.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么账户地址 —— 那些本应是公开的，并且有些人甚至在他们的网站上列出的 —— 由如此长、神秘的字符串组成？为什么我们不能只有用户名？答案是，很快你可能会能够生成简单的英文用户名，但它们将更像今天的顶级域名。你将从去中心化网络注册处租用一个名字，并且它将重定向到你的真实账户地址，就像今天顶级域名重定向到
    IP 地址一样。以太坊网络的许多计划正在进行中，最终将复制今天我们所知的 HTTP Web 的精妙之处。要了解更多关于以太坊路线图的信息，请跳转到第 [11](A433414_1_En_11_Chapter.html)
    章节。
- en: Where Is My Ether?
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**注意**：账户是一个数据对象：区块链分类账中的一条目录，由其地址索引，包含关于该账户状态的数据，如其余额。地址是属于特定用户的公钥；这是用户访问其账户的方式。实际上，地址在技术上是公钥的哈希值，而不是公钥本身，但为简单起见，最好忽略此区别。在以太虚拟机（EVM）中，网络使用非对称加密来生成和识别有效的以太坊地址，还用于“数字签名”交易。在安全通信中，非对称加密用于加密私人通信，以便即使被敌人拦截，它们也保持不可读状态。在区块链中，原理是相同的；这是一种确保消息（以
    EVM 交易请求的形式）来自实际地址持有者的方法，而不是来自试图劫持其资金的闯入者。'
- en: 'It’s important to note that ether is not contained in any particular machine
    or application. Your ether balance can be queried, and ether sent or received,
    by any computer running an Ethereum node or wallet. Even if the computer where
    your Mist wallet lives gets destroyed, never fear: all you need is your private
    key, and voila, you can access your ether from another node.However, if you hand
    over your private keys to someone else, that person can access the EVM and pull
    your money out without you ever knowing. As far as the network is concerned, anyone
    with your private key is you.Because the EVM is a global machine, it has no way
    of knowing which node you’ll create a transaction from. Unlike today’s web apps,
    Ethereum does not look for a “trusted” computer; it doesn’t know your phone from
    any other phone. If this seems unusual, think of it like a bank ATM system, which
    provides account access for anyone holding your debit card number and your four-digit
    pin.As mentioned in Chapter [1](A433414_1_En_1_Chapter.html), losing your phone
    or computer to theft or destruction does not mean you lose your money, provided
    the following are true:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，以太币不存储在任何特定的机器或应用程序中。您的以太币余额可以通过运行以太坊节点或钱包的任何计算机查询，并发送或接收以太币。即使您的Mist钱包所在的计算机被摧毁了，也不要担心：您只需要您的私钥，然后，您可以从另一个节点访问您的以太币。然而，如果您把私钥交给了别人，那么这个人可以访问EVM并在您不知情的情况下提取您的钱。就网络而言，拥有您的私钥的任何人都是您。因为EVM是一个全球性的机器，它无法知道您将从哪个节点创建交易。与今天的Web应用程序不同，以太坊不会寻找“可信赖”的计算机；它不知道您的手机与其他任何手机有何不同。如果这看起来不寻常，请将其视为银行ATM系统，该系统为持有您的借记卡号和您的四位PIN码的任何人提供帐户访问。如[第1章](A433414_1_En_1_Chapter.html)所述，如果以下条件成立，即使您的手机或计算机被盗或被毁，也不意味着您会失去您的钱：
- en: You have backed up your private key.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您已经备份了您的私钥。
- en: You didn’t give your private key to anyone else.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您没有把您的私钥交给任何其他人。
- en: Backing up a private key is as simple as copying and pasting it into a text
    file, and saving it on a USB stick. Or writing it down on paper. You’ll find more
    private-key backup methods later in this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 备份私钥就像把它复制粘贴到一个文本文件中，并保存在一个USB存储设备上那么简单。或者写在纸上。您将在本章后面找到更多关于备份私钥的方法。
- en: The Bank Teller Metaphor
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 银行出纳员的隐喻
- en: In a way, using a wallet or full node is like getting behind the bank teller’s
    desk and being in control of your own money. Not in the sense that you can get
    paper cash, but in the sense that a bank teller controls a node within the bank’s
    computer system that can execute transactions in a global database of transactions.
    A teller controls the bank’s database, which connects to other bank databases.In
    conventional banking, by extension, a paper check is a written instruction for
    the bank teller to make a transaction using the bank’s computer system. On the
    check is your account number and a routing number. (We’ll talk more about the
    conventional banking system in the next chapter.)For now, it’s only important
    to point out that buildings full of people (plus vast computing resources) are
    required to take your paper check, turn it into an electronic transaction, send
    the transaction to another party, and then update the balances of both parties.
    In cryptocurrency, this legacy banking system—a hodgepodge of human and computer
    processes—is completely obviated by the use of an algorithmic consensus engine
    running on a peer-to-peer computer network. Settlement and clearing of transactions
    happens on the network itself within seconds (or, with bitcoin, minutes) of the
    transaction being digitally signed and broadcast by a node. Thus it can be said
    in in cryptocurrency transaction that “the settlement is the trade.”
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以某种方式，使用钱包或完整节点就像站在银行出纳员的桌子后面，掌控自己的钱一样。不是指你可以得到纸币，而是指银行出纳员控制着银行计算机系统中的一个节点，该节点可以在全球交易数据库中执行交易。出纳员控制着银行的数据库，该数据库连接到其他银行数据库。在传统银行业中，通过延伸，支票是一份书面指示，要求银行出纳员使用银行的计算机系统进行交易。支票上有你的账号和一个路由号码。（我们将在下一章更多地讨论传统银行系统。）目前，只有指出一点很重要，那就是需要大量的人员（加上庞大的计算资源）来接收你的支票，将其转换为电子交易，将交易发送给另一方，然后更新双方的余额。在加密货币中，这种遗留的银行系统——由人类和计算机流程混合而成的大杂烩——完全被运行在点对点计算机网络上的算法共识引擎所取代。交易的结算和清算发生在网络内部，即在节点数字签名和广播交易后的几秒钟（或者在比特币中几分钟）内。因此，在加密货币交易中可以说“结算即交易”。
- en: In Cryptocurrency, You Hold Your Own Assets
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在加密货币中，你拥有自己的资产。
- en: 'Cryptocurrencies are different from the fiat currencies used by conventional
    banks, which are centralized. Your tokens are virtual, and your balance (along
    with that of everyone else who holds ether) is tabulated by the blockchain network.
    There is no tangible ether or bitcoin currency, although some third parties have
    created “collectible” coins preloaded with cryptocurrency.Be extremely wary of
    any online service or organization that offers to hold, store, or act as custodian
    of ether, bitcoins, or any other cryptocurrency. The advantage of distributed
    public systems is to eliminate counterparties from transactions, and allow entities
    to transact on a peer-to-peer basis. The point is, you can hold these assets securely,
    without a custodian.That said, we live in a fiat currency world. Even if cryptocurrencies
    are indeed the future (and as you’ll see in this book, there is stupendous evidence
    they are) perhaps several years or more will serve as a transitional period, wherein
    people have both a cryptocurrency wallet and a traditional bank account.To summarize:
    Do not use any wallet or online service that holds your private keys for you.
    Only use applications that store your private keys on your device. Later in this
    chapter, you’ll find recommendations for desktop and mobile wallets. Let’s get
    back to explaining the purpose of Mist as your first gateway to the EVM.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 加密货币不同于传统银行使用的中心化法定货币。您的代币是虚拟的，您的余额（以及持有以太币的其他所有人的余额）由区块链网络进行记录。虽然一些第三方创建了预加载加密货币的“可收藏”硬币，但没有实体的以太币或比特币货币。对于任何提供持有、存储或担任以太币、比特币或任何其他加密货币的监护人角色的在线服务或组织，要极度谨慎。分布式公共系统的优势在于消除交易中的交易对手，并允许实体之间进行点对点交易。重点是，您可以安全地持有这些资产，而无需监护人。话虽如此，我们生活在法定货币的世界中。即使加密货币确实是未来（正如您将在本书中看到的，有大量证据表明它们确实是），也许还需要几年或更长的时间作为过渡期，人们既有加密货币钱包又有传统银行账户。总之：不要使用任何为您保存私钥的钱包或在线服务。只使用将私钥存储在您设备上的应用程序。在本章的后面，您将找到桌面和移动钱包的推荐。让我们回到解释Mist作为您接入EVM的第一个入口的目的。
- en: Visualizing Ethereum Transactions
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可视化以太坊交易
- en: 'The best way for new Ethereum programmers to visualize the concept of a blockchain
    is to imagine a paper transaction ledger that can be synchronized with other paper
    transaction ledgers around the world.When a wallet application attempts to make
    a change to the database, the change is detected by the nearest Ethereum node,
    which then propagates the change around the network. Eventually, all the transactions
    are recorded on every ledger.In the abstract, this works something like the polygraph
    machine patented by John Isaac Hawkins in 1803\. This was the first “copy machine,”
    although its name today is used to refer to so-called lie-detecting devices. This
    duplicating machine, famously praised by Thomas Jefferson as the finest invention
    of its day, is shown in Figure [2-1](#Fig1). Just like the polygraph, the blockchain
    is an apparatus for allowing many “machines” to change the state of a ledger in
    the same way, nearly simultaneously.![A433414_1_En_2_Fig1_HTML.jpg](A433414_1_En_2_Fig1_HTML.jpg)Figure
    2-1.The polygraph machine is similar to the blockchain in principle: many machines
    working in concert to write similar data to similar local databases. In Bitcoin
    and Ethereum, the technological innovation lies in the fact that these state changes
    can come in out of order, owing to network latency, and the network can reconcile
    them into a single ledger.As mentioned previously, your address is sometimes called
    your public key, but a better metaphor would be a lockbox with a unique serial
    number. The private key is the only thing in this whole system that is named sensibly:
    it unlocks your account and allows you to move ether out.What is ether, exactly?
    It’s merely a balance in your account. When you send and receive either, nothing
    is actually sent or received.In the EVM, when one account increases, the system
    makes sure it’s because another account has sent a payment, and thus decreased
    the same amount. It’s a closed system. It’s practically impossible to give yourself
    free ether, or at least it wouldn’t be worth the costs you’d incur trying falsify
    the ledger. Ethereum uses financial incentives and disincentives for security,
    as you’ll see in Chapter [7](A433414_1_En_7_Chapter.html).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新的以太坊程序员来说，最好的方式是想象一个可以与世界各地的其他纸质交易账本同步的纸质交易账本，以可视化区块链的概念。当钱包应用程序试图对数据库进行更改时，最近的以太坊节点会检测到变化，然后将变化传播到网络中。最终，所有交易都记录在每个账本上。抽象来看，这与约翰·艾萨克·霍金斯在1803年申请专利的测谎仪类似。这是第一个“复印机”，尽管今天它的名称用于指代所谓的测谎设备。这台复制机被托马斯·杰斐逊誉为当时最好的发明，如图[2-1](#Fig1)所示。就像测谎仪一样，区块链是一个允许许多“机器”以几乎相同的方式同时更改账本状态的装置。![A433414_1_En_2_Fig1_HTML.jpg](A433414_1_En_2_Fig1_HTML.jpg)图2-1.测谎仪与区块链在原理上相似：许多机器协同工作，将相似的数据写入相似的本地数据库。在比特币和以太坊中，技术创新在于这些状态更改可以无序发生，这归因于网络延迟，而网络可以将它们调和为单个账本。如前所述，你的地址有时被称为你的公钥，但更好的隐喻是带有唯一序列号的锁箱。私钥是这个整个系统中唯一以合理方式命名的东西：它可以解锁你的账户并允许你移出以太。那么以太到底是什么？它只是你账户中的余额。当你发送和接收以太时，实际上并没有发送或接收任何东西。在以太虚拟机（EVM）中，当一个账户增加时，系统确保这是因为另一个账户发送了付款，因此减少了相同数量。这是一个封闭的系统。几乎不可能给自己免费的以太，或者至少不值得你为了伪造账本而产生的成本。以太坊使用金融激励和抑制措施来保障安全，你将在[第7章](A433414_1_En_7_Chapter.html)中看到。
- en: Breaking with Banking History
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脱离银行历史
- en: One of the most interesting facets of the Ethereum protocol is its issuance
    scheme, which will be discussed later. For now, it’s only important to point out
    that (as with Bitcoin) no individual has the power to create more ether. This
    characteristic stands in stark contrast to the last 400 years of financial markets
    and central bankers, which reads like a history of large-scale scam artists.Since
    the stock-jobbing days of the late 17th century in London’s Exchange Alley, entrepreneurs
    and scammers (then called stock projectors) have been selling equity in ventures
    both legitimate and not. Often they would secretly issue new shares to themselves
    and their confederates when the price would go up—known to Americans in the 19th
    century as watering the stock.Over time, speculating on stocks became a pastime
    that people of all ages and backgrounds enjoyed on both sides of the Atlantic,
    and the modern stock markets were born, with their processes and counterparties
    to act as middlemen who ensure trustworthy transactions. But even with the banking
    regulations passed after the Great Depression, dishonest entrepreneurs still found
    ways to carve out secret stock pools, or unload the shares they had without the
    public knowing—only to let the business collapse after getting their money out.Few
    times in modern history have speculative bubbles wiped out as much wealth and
    human progress as the crash of 1929 in the United States. However, similar depressive
    episodes in the United States and Europe (including the Panic of 1873–1879) were
    caused by someone, either central banks or investors themselves, messing with
    the base quantity of money, equities, or bonds in a large marketplace.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊协议最有趣的方面之一是其发行方案，稍后将进行讨论。现在，重要的是指出（与比特币一样），没有个人有权创建更多的以太币。这一特点与过去400年的金融市场和中央银行家形成了鲜明对比，这些年的历史读起来就像是一部大规模诈骗艺术家的历史。自17世纪末伦敦交易所巷的股票交易以来，企业家和骗子（当时被称为股票投机者）一直在出售正当和不正当的企业股权。通常情况下，当价格上涨时，他们会偷偷地给自己和他们的同谋发行新股份——19世纪美国人所称为“为股票加水”。随着时间的推移，对股票的投机成为了大西洋两岸各年龄段和背景的人们都喜爱的消遣活动，现代股票市场因此诞生了，其过程和交易对手充当着中间人的角色，以确保交易的可信度。但即使在大萧条之后通过的银行监管法规中，不诚实的企业家仍然找到了秘密形成股票池的方法，或者在公众不知情的情况下卸载他们拥有的股份——只是在拿到他们的钱后让企业崩溃。在现代历史上很少有像1929年美国的股市崩盘一样的投机泡沫毁掉了如此多的财富和人类进步。然而，美国和欧洲（包括1873年至1879年的恐慌）发生的类似萧条事件是由某些人——无论是中央银行还是投资者本身——干预大型市场中的货币、股票或债券的基础数量所导致的。
- en: How Encryption Leads to Trust
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加密如何引领信任
- en: 'Chapter [1](A433414_1_En_1_Chapter.html) breezed past any real discussion of
    cryptography, and focused instead on the impact of crypto-networks. But, there’s
    something strange about a secure network comprised of a bunch of strangers’ PCs
    working in concert. How come a single bad apple can’t hack the network and steal
    everyone’s ether? To answer that question, first recall that a blockchain uses
    the following methodologies:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 章节 [1](A433414_1_En_1_Chapter.html) 轻描淡写地提及了加密学的任何真正讨论，并将焦点转移到了加密网络的影响上。但是，一个由一群陌生人的个人电脑共同工作组成的安全网络确实有些奇怪。为什么一个坏苹果不能入侵网络并窃取每个人的以太币？要回答这个问题，首先要记住区块链使用以下方法：
- en: Asymmetric cryptography
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非对称加密
- en: Cryptographic hashing
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码哈希
- en: Peer-to-peer distributed computing
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点对点分布式计算
- en: 'Let’s spend some time briefly talking about the first item on this list: asymmetric
    cryptography, which is sometimes broadly called public-key cryptography. A quick
    detour here will help us better grasp how a public network can be secure. We’ll
    address the other two elements in Chapter [6](A433414_1_En_6_Chapter.html).Asymmetric
    cryptography is a method of sending secure messages back and forth over a network,
    where the sender and the recipient do not trust the channel of communication.
    In the case of the EVM, those messages are transactions, being signed and sent
    to the network in order to change the state of some of its accounts. It’s called
    “asymmetric” because each party has a pair of two different, but mathematically
    related, keys.Public-key cryptography was developed for wartime communications,
    and when used properly, can be extremely secure. Unlike symmetric-key cryptographic,
    public key cryptographic communications don’t require a secure channel between
    parties. This is essential in Bitcoin and Ethereum, because any computer running
    the protocol can join the network, without any vetting. However, the computational
    complexity involved in encrypting data makes it useful only for small data objects,
    like the alphanumeric string that becomes your private key. This is why encryption
    must be used sparingly.At a high level, it can be said that Ethereum uses encryption
    to validate and verify that any and all changes made to account balances in the
    EVM are legitimate, and that no account has been increased (or decreased) erroneously.If
    you’re new to computer science, the very mechanism of encryption might be hazy.
    For the time being, here are some definitions that will help moving forward:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花一些时间简要谈谈列表中的第一项：非对称加密，有时也被广泛称为公钥加密。这里简单地讲一下会帮助我们更好地理解公共网络如何保持安全。我们将在第 [6](A433414_1_En_6_Chapter.html)
    章中讨论其他两个元素。非对称加密是一种在网络上安全地发送消息的方法，发送方和接收方不信任通信渠道。在EVM的情况下，这些消息是交易，被签名并发送到网络以更改其一些账户的状态。之所以称为“非对称”，是因为每个方都有一对两个不同但数学相关的密钥。公钥加密是为战时通信而开发的，当正确使用时可以非常安全。与对称密钥加密不同，公钥加密通信不需要各方之间的安全渠道。这在比特币和以太坊中是至关重要的，因为任何运行该协议的计算机都可以加入网络，无需任何审核。然而，加密数据所涉及的计算复杂性使其仅适用于小型数据对象，例如成为您私钥的字母数字字符串。这就是为什么必须谨慎使用加密的原因。在高层次上，可以说以太坊使用加密来验证和验证EVM中对账户余额所做的任何和所有更改都是合法的，并且没有错误地增加（或减少）任何账户。如果您对计算机科学还不熟悉，加密机制可能会有些模糊。暂时，在此处提供一些定义，这将有助于我们继续前进：
- en: 'Symmetric Encryption: A process by which a snippet of plain text, usually held
    in a document, is smashed together with a shorter data string called a key to
    produce a ciphertext output. This output can be reversed, or decrypted, by the
    party that receives it, so long as they also have that same key. Trying to decode
    the message without the key would be, computationally speaking, immensely time-consuming
    and expensive—so much so that some kinds of encryption are considered practically
    unbreakable, even with huge computing resources.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对称加密：一种过程，即将通常保存在文档中的一小段明文与称为密钥的较短数据字符串结合在一起，产生一个密文输出。只要他们也拥有相同的密钥，接收到密文的一方就可以反转或解密它。试图在没有密钥的情况下解码消息在计算上来说将是极其耗时和昂贵的——以至于有些加密方式即使使用大量的计算资源也被认为几乎不可能被破解。
- en: 'Asymmetric encryption: This way of encrypting information requires the program
    to issue two keys simultaneously, one that is public and one that you keep private.
    The public key is public in the sense that you can list it on your web site or
    social profile, such as an e-mail address. (When communicating, parties can use
    one anothers’ public keys to encrypt information, as described below.)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非对称加密：这种加密信息的方式要求程序同时生成两个密钥，一个是公钥，一个是你保留的私钥。公钥在你的网站或社交资料上可以公开，比如电子邮件地址。（在通信时，各方可以使用彼此的公钥加密信息，如下所述。）
- en: 'Secure Messaging: In our first example, Alice uses Bob’s public key to encrypt
    a message. When he receives the ciphertext, he can decrypt it using his matching
    private key, ensuring that only Bob can read the message. This is called secure
    messaging. But it leaves a dangerous possibility open: anyone could send Bob a
    message claiming to be Alice. How does he know that Alice is the real sender of
    the message?'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全消息：在我们的第一个示例中，爱丽丝使用鲍勃的公钥加密消息。当他收到密文时，他可以使用相匹配的私钥解密，确保只有鲍勃能够阅读消息。这被称为安全消息。但它留下了一个危险的可能性：任何人都可以发送给鲍勃一条声称是爱丽丝发送的消息。他怎么知道爱丽丝是消息的真实发送者呢？
- en: 'Secure and Signed Messaging: If Alice wanted to assure Bob that she is the
    true sender, she would do things differently. First, she would take her plaintext
    message and encrypt it using her private key. Then, she would encrypt it again
    using Bob’s public key. When Bob receives the message, he decrypts it first using
    his private key, but he’s still left with ciphertext. He must decrypt it again
    using Alice’s public key. This second layer of encryption assures him that Alice
    is indeed the sender, because presumably, nobody has Alice’s private key but Alice.
    This is known as “secure and signed” messaging.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全签名消息：如果爱丽丝想向鲍勃确保她是真正的发送者，她会采取不同的做法。首先，她会拿着她的明文消息，使用她的私钥对其进行加密。然后，她会再次使用鲍勃的公钥对其进行加密。当鲍勃收到消息时，他首先使用自己的私钥解密，但他仍然得到的是密文。他必须再次使用爱丽丝的公钥解密。这第二层加密向他保证了爱丽丝确实是发送者，因为据推测，除了爱丽丝之外没有人有爱丽丝的私钥。这被称为“安全签名”消息。
- en: If Alice were to only encrypt her plaintext using her own private key, then
    anyone with her public key could decrypt it. This is known as an “open message
    format” because, while it proves the identity of the sender, it can be decrypted
    by anyone.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果Alice只使用自己的私钥加密她的明文，那么任何拥有她的公钥的人都可以解密它。这被称为“开放式消息格式”，因为虽然它证明了发送者的身份，但任何人都可以解密它。
- en: 'Digital signature: For maximum security, Alice would take another step: she
    would hash the plaintext of her message, and attach it along with the message.
    She would then encrypt this bundle with her own private key, and again with Bob’s
    public key. When Bob receives and decrypts the ciphertext he can run Alice’s plaintext
    message through the same hashing algorithm Alice used. If for some reason the
    fingerprint of the message turns out differently, then it means the actual message
    text was damaged or altered en route.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字签名：为了最大限度地保证安全性，Alice会采取另一步骤：她会对消息的明文进行哈希，并将其与消息一起附加。然后她会用自己的私钥和Bob的公钥再次加密这个捆绑包。当Bob接收并解密密文时，他可以通过与Alice使用的相同哈希算法运行Alice的明文消息。如果由于某种原因消息的指纹变得不同，那么意味着消息文本在传输途中被损坏或更改。
- en: As you’ll appreciate more in Chapter [6](A433414_1_En_6_Chapter.html), which
    covers mining, the method by which individual transactions are broadcast to the
    EVM is similar to the description of the digital signature above, where the contents
    of the transaction are hashed and enciphered before being broadcast to peers.
    Now that you can appreciate the security of the Ethereum network, let’s get to
    the brass tacks of Mist installation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在[第6章](A433414_1_En_6_Chapter.html)中更加欣赏到的那样，这一章涵盖了挖矿，个体交易被广播到EVM的方法与上文对数字签名的描述相似，其中交易内容在广播给对等体之前被哈希和加密。现在你能够欣赏到以太坊网络的安全性，让我们来谈谈Mist的安装要点。
- en: System Requirements
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统需求
- en: Most users will opt for the Mist browser, but this section lists other tools
    that developers may find just as interesting. Mist makes it easy to send and receive
    ether. It also contains an interface for executing smart contracts quickly and
    easily. We’ll talk more about how to run contracts in Mist in Chapter [4](A433414_1_En_4_Chapter.html).Mist
    runs well on a modern computer with at least 2 GB of RAM and 30 GB of hard disk
    space free. For lower-performing machines, try the MetaMask Chrome extension.
    It’s described later in this section.You’ll find the latest version of Mist on
    the Ethereum project GitHub site ( [https://github.com/ethereum/](https://github.com/ethereum/)
    ).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数用户将选择Mist浏览器，但本节列出了其他开发人员可能同样感兴趣的工具。Mist使得发送和接收以太币变得容易。它还包含一个用于快速轻松执行智能合约的接口。我们将在第[4章](A433414_1_En_4_Chapter.html)中更详细地讨论如何在Mist中运行合约。Mist在具有至少2
    GB RAM和30 GB可用硬盘空间的现代计算机上运行良好。对于性能较低的机器，请尝试MetaMask Chrome扩展。它稍后在本节中描述。你可以在以太坊项目GitHub网站上找到最新版本的Mist（[https://github.com/ethereum/](https://github.com/ethereum/)）。
- en: More about [Eth.​guide](http://Eth.guide) and This Book
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于[Eth.​guide](http://Eth.guide)和本书更多信息
- en: Because Ethereum is a new and fast-moving project, some of the project and documentation
    links may change after the publication of this book. For this reason, commonly
    needed links and references for this book are also listed at [http://eth.guide](http://eth.guide)
    and updated regularly with new material. Similarly, all footnoted links are indexed
    on this page by chapter, and updated if and when they change.To make the site
    more useful as a reference, subdomains have been created for popular topics. You’ll
    see these shortcuts mentioned throughout the text.The Eth.guide site is linked
    to the GitHub project for the book itself, so you will also find the sample code
    projects from this book at the same URL. The full URL for the GitHub project for
    this book is [https://github.com/chrisdannen/Introducing-Ethereum-and-Solidity](https://github.com/chrisdannen/Introducing-Ethereum-and-Solidity)
    .If you’re a nontechnical reader just looking to get started with the basics,
    go ahead and skip to the section entitled “Finally, into the Mist!” Developers,
    read on to see what other tools to peruse at this stage of your Ethereum journey.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于以太坊是一个新的、发展迅速的项目，一些项目和文档链接可能在本书出版后发生变化。因此，本书常用的链接和参考资料也列在 [http://eth.guide](http://eth.guide)
    上，并定期更新新的内容。同样，所有脚注链接都按章节索引在本页上，并在更改时进行更新。为了使网站更加实用作为参考，为热门主题创建了子域名。你会在文本中看到这些快捷方式的提及。Eth.guide
    网站链接到书本本身的 GitHub 项目，因此你也会在同一网址找到本书的示例代码项目。本书的 GitHub 项目的完整 URL 是 [https://github.com/chrisdannen/Introducing-Ethereum-and-Solidity](https://github.com/chrisdannen/Introducing-Ethereum-and-Solidity)
    。如果你是一个非技术读者，只是想从基础开始，可以跳到标题为“最后，进入 Mist！”的部分。开发人员，请继续阅读，了解在你的以太坊之旅的这个阶段需要查看的其他工具。
- en: Tools for Developers
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发人员工具
- en: 'Developers will want to check out these three tools in addition to Mist:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员除了 Mist 外，还会想要查看这三个工具：
- en: MetaMask Chrome extension (useful for everyone)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MetaMask Chrome 扩展（适用于所有人）
- en: Geth (useful for intermediate developers)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Geth（适用于中级开发人员）
- en: Parity (useful for advanced developers)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Parity（适用于高级开发人员）
- en: The Chrome extension MetaMask is the simplest way to get up and running with
    Ethereum. It lets you execute smart contracts and transactions right in your browser
    without needing a full Ethereum node. MetaMask has the power to create accounts,
    and to send and receive ether. You can download MetaMask from the Google Chrome
    Add-Ons menu, or by navigating to the project URL at [https://metamask.io/](https://metamask.io/)
    .For all its convenience, MetaMask does not download the entire blockchain to
    your computer; nor can it mine transactions and earn ether. However, these are
    minor drawbacks for users just looking to get up and running with Ethereum quickly.MetaMask
    was built by Aaron Davis (a.k.a. Kumavis) of ConsenSys, an Ethereum development
    and consulting company whose free tools you’ll encounter frequently in this nascent
    Ethereum blockchain space. ConsenSys is a 60-person Ethereum venture studio and
    consulting company in Brooklyn, NY, run by Ethereum project cofounder Joseph Lubin.MetaMask
    was funded in part by development grants (DEVgrants) from the Ethereum Foundation.
    These grants are open to anyone working on an Ethereum project, and do not require
    the project creator to give up any equity. To learn more about DEVgrants, visit
    the program’s Gitter channel at [https://gitter.im/devgrants/public](https://gitter.im/devgrants/public)
    or follow its Twitter handle @devgrants.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome 扩展程序 MetaMask 是开始并运行以太坊的最简单方法。它允许您在浏览器中执行智能合约和交易，而无需完整的以太坊节点。MetaMask
    有创建账户、发送和接收以太币的功能。您可以从 Google Chrome 附加组件菜单下载 MetaMask，或者通过访问项目 URL [https://metamask.io/](https://metamask.io/)
    进行下载。尽管 MetaMask 非常方便，但它并不会将整个区块链下载到您的计算机上；也不能挖掘交易并赚取以太币。然而，对于那些只想快速开始并运行以太坊的用户来说，这些都是较小的缺点。MetaMask
    由 ConsenSys 的 Aaron Davis（又名 Kumavis）开发，这是一家以太坊开发和咨询公司，您将经常在这个新兴的以太坊区块链领域中遇到他们的免费工具。ConsenSys
    是一家位于纽约布鲁克林的 60 人以太坊风险投资工作室和咨询公司，由以太坊项目联合创始人 Joseph Lubin 所运营。MetaMask 部分资助来自以太坊基金会的开发补助（DEVgrants）。这些补助对于任何致力于以太坊项目的人都是开放的，而且不需要项目创始人放弃任何股权。要了解有关
    DEVgrants 的更多信息，请访问该项目的 Gitter 频道 [https://gitter.im/devgrants/public](https://gitter.im/devgrants/public)
    或关注其 Twitter 帐号 @devgrants。
- en: CLI Nodes
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CLI 节点
- en: 'If you already know you want to begin development with Solidity, download a
    full command-line node. The most popular command-line interface (CLI) nodes for
    the Ethereum network are written in Go and C++, and they’re called Geth and Eth
    (alternately, go-ethereum and cpp-ethereum).NoteBecause there are many Ethereum
    clients for various operating systems, this book uses the most straightforward
    development environment: Ubuntu 14.04 running Geth. Mac or Windows users may want
    to try installing a virtual machine such as VirtualBox that can run an Ubuntu
    instance.Advanced developers may also want to pair Geth with Parity, a super-fast
    Ethereum client written in the Rust programming language. In the Chapter [6](A433414_1_En_6_Chapter.html)
    we’ll talk about basic Geth commands.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经确定要用 Solidity 开始开发，可以下载一个完整的命令行节点。以太坊网络中最受欢迎的命令行界面（CLI）节点是用 Go 和 C++ 编写的，它们分别叫做
    Geth 和 Eth（或称为 go-ethereum 和 cpp-ethereum）。注意由于有许多适用于不同操作系统的以太坊客户端，本书使用最简单的开发环境：在运行
    Geth 的 Ubuntu 14.04 上。Mac 或 Windows 用户可能想尝试安装一个可以运行 Ubuntu 实例的虚拟机，比如 VirtualBox。高级开发者可能还想将
    Geth 与 Parity 搭配使用，Parity 是用 Rust 编程语言编写的一个超快的以太坊客户端。在第 [6](A433414_1_En_6_Chapter.html)
    章中，我们将介绍基本的 Geth 命令。
- en: 'Recommended: Using Parity with Geth'
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推荐：使用 Parity 与 Geth
- en: Ethcore.io is a private Ethereum development company composed of a few former
    contributors to the Ethereum project, including Gavin Wood, another Ethereum project
    cofounder, who created the Solidity language and authored the Ethereum Yellow
    Paper.[¹](#Fn1)He and his team have created a powerful node written in the Rust
    programming language. Parity works on macOS, Windows, Ubuntu, and in a Docker
    instance. You can find out more by checking out the GitHub project at [https://github.com/ethcore/parity](https://github.com/ethcore/parity)
    .NoteIf you plan on using a Mist wallet through your Parity node, you’ll need
    to manually start Parity before you open Mist. Otherwise, Mist will connect via
    its own node. Under the hood, the Mist browser runs a Geth node.Detailed step-by-step
    instructions for setting up the Mist wallet with Parity running on the back end
    are available on YouTube from the Ethcore team ( [www.youtube.com/watch?v=sta-p5d1blQ](http://www.youtube.com/watch?v=sta-p5d1blQ)
    ).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Ethcore.io 是一个由一些以太坊项目的前贡献者组成的私人以太坊开发公司，包括以太坊项目的另一位联合创始人 Gavin Wood，他创建了 Solidity
    语言并编写了以太坊黄皮书。[¹](#Fn1)他和他的团队已经创建了一个用 Rust 编程语言编写的强大节点。Parity 可以在 macOS、Windows、Ubuntu
    和 Docker 实例上运行。你可以通过检查 GitHub 项目了解更多信息：[https://github.com/ethcore/parity](https://github.com/ethcore/parity)
    。注意如果你打算通过你的 Parity 节点使用 Mist 钱包，你需要在打开 Mist 之前手动启动 Parity。否则，Mist 将通过其自己的节点连接。在底层，Mist
    浏览器运行着一个 Geth 节点。有关使用 Parity 在后端运行的 Mist 钱包的详细逐步说明，请查看 Ethcore 团队在 YouTube 上的视频（[www.youtube.com/watch?v=sta-p5d1blQ](http://www.youtube.com/watch?v=sta-p5d1blQ)）。
- en: Finally, into the Mist!
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后，进入 Mist！
- en: Now that you have a better sense of what an Ethereum client does, let’s put
    one on your computer. The Mist browser is compatible with Linux, macOS, and Windows
    computers with both 32- and 64-bit architectures. If you don’t know whether your
    computer is 32- or 64-bit, check your system’s hardware profile. Most newer systems
    are 64-bit.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您对以太坊客户端的功能有了更好的了解，让我们在您的计算机上安装一个。Mist 浏览器兼容具有 32 位和 64 位架构的 Linux、macOS 和
    Windows 计算机。如果您不知道您的计算机是 32 位还是 64 位，请查看您系统的硬件配置文件。大多数新系统都是 64 位。
- en: Downloading and Installing Mist
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下载并安装 Mist
- en: First, download Mist from [https://github.com/ethereum/mist/releases](https://github.com/ethereum/mist/releases)
    , as shown in Figure [2-2](#Fig2).![A433414_1_En_2_Fig2_HTML.jpg](A433414_1_En_2_Fig2_HTML.jpg)Figure
    2-2.From the Ethereum project on GitHub, click to download the executable for
    your OS, or download the source code to compile it yourselfYou’ll find this download
    link among the other client downloads at:http://clients.eth.guideOn Windows, double-click
    the executable that downloads. On macOS, open the disk image that downloads and
    drag the Ethereum wallet to your Applications folder. On Ubuntu, download the
    Debian package or unzip the zip file and open it to install.NoteIt’s not possible
    or advantageous to run more than one node at once. If, for example, you try to
    open Geth while Mist is already running, you’ll get an error telling you a node
    is already operational on your machine.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从[https://github.com/ethereum/mist/releases](https://github.com/ethereum/mist/releases)下载
    Mist，如图[2-2](#Fig2)所示。![A433414_1_En_2_Fig2_HTML.jpg](A433414_1_En_2_Fig2_HTML.jpg)图
    2-2.从 GitHub 上的 Ethereum 项目中，点击下载适用于您操作系统的可执行文件，或者下载源代码自行编译。您可以在以下网址的其他客户端下载中找到此下载链接：http://clients.eth.guide在
    Windows 上，双击下载的可执行文件。在 macOS 上，打开下载的磁盘映像，并将以太坊钱包拖到您的应用程序文件夹中。在 Ubuntu 上，下载 Debian
    包或解压缩 zip 文件并打开以进行安装。注意不可能或不建议同时运行多个节点。例如，如果您尝试在 Mist 已经运行时打开 Geth，则会收到一个错误，告诉您该节点已在您的计算机上运行。
- en: Configuring Mist
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 Mist
- en: 'After you download and open the installer, you’ll see a welcome screen like
    the one in Figure [2-3](#Fig3). (There are some of those big promises from Chapter
    [1](A433414_1_En_1_Chapter.html)!)![A433414_1_En_2_Fig3_HTML.jpg](A433414_1_En_2_Fig3_HTML.jpg)Figure
    2-3.The main network is also known as the main chain. The test network is a sandbox
    environment for playing with fake ether and debugging contracts.Here you’ll be
    asked which chain, or network, you want to connect to. At this stage, it doesn’t
    matter which one you choose; you’ll be able to switch networks later. But for
    our purposes, let’s make you a real wallet address: click Use the main network.Notice
    the bottom of the window, which indicates downloading blocks. This application
    runs a full node on the Ethereum network; that means it keeps its own copy of
    the blockchain, which it must first download before any real action can take place.
    This will take a long time, because the blockchain contains a record of every
    transaction ever on the Ethereum chain.Next you’ll see the screen shown in Figure
    [2-4](#Fig4), which you can skip—unless you participated in the Ethereum crowdsale
    back in 2014\. In that case, follow those instructions to redeem your ether.![A433414_1_En_2_Fig4_HTML.jpg](A433414_1_En_2_Fig4_HTML.jpg)Figure
    2-4.The Ethereum crowdsale, which entitled participants to a file representing
    ether, took place in 2014\. Click the Skip option if you didn’t participate.After
    you pick your password, as seen in Figure [2-5](#Fig5) (and write it down or memorize
    it), you’ll see a prompt that requires some explaining.![A433414_1_En_2_Fig5_HTML.jpg](A433414_1_En_2_Fig5_HTML.jpg)Figure
    2-5.Next, choose a passwordNoteThere is no Forgot Password functionality in the
    Ethereum network. That’s because your password is only for this local instance
    of the Mist wallet; it’s not saved on the Ethereum blockchain. In fact, your private
    key is all you need to re-create this account on any other computer running Mist.
    The password you create merely protects you from an interloper sitting down at
    your computer and spending your money through the Mist interface. It does not
    stop anyone from stealing your private keys from your computer’s file system,
    if it’s left unprotected. Take precautions, such as turning of the Automatic Login
    at Startup feature on your Mac, Linux, or Windows PC.On the next screen, shown
    in Figure [2-6](#Fig6), you’ll get your first glimpse at your etherbase address,
    which is like the Ur-address for this machine as long as this node and its data
    are intact. If you delete the Mist application and its data from your system library,
    this public-private key pair—your etherbase—will be deleted. That’s why it’s necessary
    to back up your accounts, which we’ll go over at the end of this chapter.![A433414_1_En_2_Fig6_HTML.jpg](A433414_1_En_2_Fig6_HTML.jpg)Figure
    2-6.Here you can see the new address. You can also deposit bitcoins to be converted
    into ether by the Shapeshift.io API.Finally, you’ll see the screen in Figure [2-7](#Fig7)
    as the blockchain syncs to your computer. If you click Launch Application, the
    Mist interface will load. Don’t be distressed if your new account doesn’t show
    up yet. It will appear when the node is fully synchronized.![A433414_1_En_2_Fig7_HTML.jpg](A433414_1_En_2_Fig7_HTML.jpg)Figure
    2-7.This will take a while. Your new account will show up when it’s done.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Finding Your New Address
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找你的新地址
- en: You can create more addresses, but they will all exist under the aegis of this
    etherbase address, which makes backup easier.If you click through the following
    screens, you’ll notice these are just time-killers to let you learn more about
    Ethereum while the blockchain downloads. If you’re curious, click any of the examples
    in these screens to see the contract code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以创建更多地址，但它们都将存在于这个etherbase地址的保护下，这样备份就更容易了。如果你点击以下屏幕，你会注意到这些只是为了让你在区块链下载时学到更多关于以太坊的知识的时间杀手。如果你感兴趣，可以点击这些屏幕中的任何示例来查看合约代码。
- en: Sending and Receiving Ether
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发送和接收 ether
- en: 'Sending ether requires first holding some ether. On the main network, tokens
    either cost money or can be mined. However, this is an unwieldy way to get started
    for most Ethereum beginners.We’ve gone ahead and created an account on the main
    network, just in case you’re interested in holding real ether for speculative
    value, or if you already have friends and collegues who use it for payments. For
    most readers, using test ether (which you can generate for free on the testnet,
    dubbed Ropsten) is better than paying money for real ether for use on the main
    network. Instructions for connecting to Ropsten are presented in Chapter [5](A433414_1_En_5_Chapter.html).For
    now, it’s worth describing how ether is sent and received, without going through
    the motions, because it will help clarify the way the underlying system works.
    Ether is sent via the Send dialog box, shown in Figure [2-8](#Fig8).![A433414_1_En_2_Fig8_HTML.jpg](A433414_1_En_2_Fig8_HTML.jpg)Figure
    2-8.The Send dialog box in Mist makes it easy to send, receive, and check ether
    balances without using a command-line interface.To send ether, you follow these
    steps:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 发送 ether 需要先持有一些 ether。在主网络上，代币要么需要花钱购买，要么可以挖矿获得。然而，这对大多数以太坊初学者来说是一个笨拙的开始方式。我们已经在主网络上创建了一个账户，以防你有兴趣持有真正的
    ether 用于投机价值，或者你已经有了使用它进行支付的朋友和同事。对于大多数读者来说，在测试网络（命名为 Ropsten）上免费生成的测试 ether 比在主网络上支付真正
    ether 更好。连接到 Ropsten 的说明在第 [5](A433414_1_En_5_Chapter.html) 章中介绍。现在，值得描述一下如何发送和接收
    ether，而不需要实际操作，因为这将有助于澄清底层系统的工作方式。Ether 通过发送对话框发送，如图 [2-8](#Fig8) 所示。![A433414_1_En_2_Fig8_HTML.jpg](A433414_1_En_2_Fig8_HTML.jpg)图
    2-8. Mist 中的发送对话框使发送、接收和检查 ether 余额变得容易，而不需要使用命令行界面。要发送 ether，你需要按照以下步骤操作：
- en: 1.In real life, ask the recipient for their Ethereum address.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1.在现实生活中，询问接收者他们的以太坊地址。
- en: 2.Open Mist. Click Send in the top bar of the Mist wallet. The Send dialog box
    opens.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2.打开 Mist。点击 Mist 钱包顶部的发送。发送对话框会打开。
- en: 3.Choose which wallet you would like to send from,
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3.选择你想要发送的钱包，
- en: 4.Paste in the recipient’s address.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4.粘贴接收者的地址。
- en: 5.Enter the amount.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 5.输入金额。
- en: 6.Click Send.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 6.点击发送。
- en: 'You’ll notice two more options that you can toggle: a data field for entering
    extra text (for example, an order number or thank-you note) and a slider bar for
    choosing a transaction fee. The purpose of transaction fees will become clearer
    in Chapter [6](A433414_1_En_6_Chapter.html). For now, leave the slider in the
    default position, and your transactions will process just fine.NoteFor practical
    purposes, when sending ether, your Mist wallet must be fully synchronized. That
    means that you may need to wait some time for Mist to download the blockchain
    before you can be sure your transactions will process without an error. As you’ll
    see later, this isn’t technically required; recently offline nodes are indeed
    capable of initiating transactions, but only if the user creates the transaction
    in the command line, with up-to-date information about the account in use.[²](#Fn2)To
    receive ether, your node does not have to be synchronized. If you’d like to check
    your balance, you can safely click Launch Application and skip the synchronization
    process when Mist launches.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '你会注意到另外两个可以切换的选项：一个用于输入额外文本（例如，订单号码或感谢信）的数据字段，以及一个用于选择交易费的滑块条。交易费的目的将在[第6章](A433414_1_En_6_Chapter.html)中变得更清晰。现在，将滑块保持在默认位置，你的交易将会正常处理。注意：出于实际目的，当发送以太币时，你的
    Mist 钱包必须完全同步。这意味着你可能需要等待一段时间，让 Mist 下载区块链，然后你才能确保你的交易会在没有错误的情况下处理。正如你稍后会看到的，这并不是技术上必需的；最近离线的节点确实能够发起交易，但前提是用户在命令行中创建交易，并且使用的账户信息是最新的。接收以太币时，你的节点不需要同步。如果你想检查你的余额，你可以安全地点击“启动应用程序”，并在
    Mist 启动时跳过同步过程。  '
- en: Understanding Ethereum Account Types
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解以太坊账户类型
- en: 'Users interact with the Ethereum blockchain through accounts. In Ethereum lingo,
    accounts created and used by humans are called externally owned accounts . This
    is in contrast to contract accounts , as in an address that is occupied by a smart
    contract.NoteExternal accounts aren’t always controlled by humans. Sometimes they’re
    controlled by trusted endpoints somewhere else. The point is, they’re external
    to the EVM.If this distinction is confusing, remember that contracts can take
    actions in lieu of people in the Ethereum network. You can send value (ether)
    to people or you can send it to a smart contract, which will take some automated
    action. For example, a remittance contract might take the sender’s deposit, split
    it in three, and send the amounts onward to three different human relatives. In
    this way, contracts can act in lieu of humans to automate tasks within a decentralized
    organization or to mediate transactions between individuals that would otherwise
    need a counterparty.NoteBoth contract accounts and external accounts are state
    objects. Contract accounts have both account balance state and contract storage;
    external accounts have only balance state. However, it’s important to note that
    there is currently a development proposal under review by the Ethereum development
    community for more abstraction in the EVM. It’s intent is to abstract out the
    duality we have today by turning all accounts into smart contract themselves.
    This way, users are free to define their own security model.To review some of
    the basics:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 用户通过账户与以太坊区块链进行交互。在以太坊术语中，人类创建和使用的账户称为**外部拥有账户**，这与**合约账户**形成对比，即由智能合约占用的地址。注意，外部账户并不总是由人类控制，有时它们是由其他地方的可信节点控制。重点是，它们对于EVM来说是外部的。如果这个区分让人困惑，记住合约可以代替人在以太坊网络中采取行动。你可以向人或智能合约发送价值（以太币），后者将采取一些自动化操作。例如，一个汇款合约可以接受发送者的存款，将其分成三部分，并将金额发送到三个不同的亲属。这样，合约可以代替人类在去中心化组织内自动化任务或调解个人之间本来需要交易对手的交易。注意，合约账户和外部账户都是状态对象。合约账户既有账户余额状态，又有合约存储；外部账户只有余额状态。然而，重要的是目前以太坊开发社区正在审查更多抽象概念的开发提案，以实现EVM的更抽象化。它的目的是通过将所有账户变成智能合约自身来抽象出今天我们所拥有的二元性。这样一来，用户可以自由定义他们自己的安全模型。再来回顾一些基础知识：
- en: A key pair is issued when you register a new account.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册新账户时会发放一个密钥对。
- en: You can register for as many accounts as you like.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以注册任意多个账户。
- en: Creating an account (a key pair) can be done by any Ethereum node (even when
    it is offline).
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建账户（密钥对）可以由任何以太坊节点（即使它处于离线状态）完成。
- en: There is no master list of key pairs or accounts anywhere on Earth.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地球上没有任何与密钥对或账户相关的主列表。
- en: Account numbers are not associated with you, your identity, or your computer.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 账号数字与你、你的身份或你的计算机无关联。
- en: You can access the Ethereum network with your private key from any computer
    running an Ethereum node.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用私钥从运行以太坊节点的任何计算机访问以太坊网络。
- en: Backing Up and Restoring Your Keys
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备份和恢复您的密钥
- en: 'While in the Mist browser, and after Mist has completed synchronizing to the
    blockchain, go to the File menu of your operating system and choose the Accounts
    menu, then Backup Accounts. This opens a folder. Inside this folder are text files
    that have long names starting with the date of creation, such as UTC--2016-09-01
    (...) Each of these plain-text files represents an account.Back up this keystore
    folder by zipping it and putting it somewhere safe, such as a USB key or encrypted
    hard drive.If you open one of these text files, you will find your private and
    public key pair, formatted in a certain notation.To restore an account on a different
    node than it was created upon, simply locate the keystore folder by the same method
    described previously. Instead of duplicating the files already there, restoring
    an Ethereum account in Mist simply involves copying a text file containing a private
    key inside the keystore folder, and restarting Mist. For a full tutorial, visit
    [http://backup.eth.guide](http://backup.eth.guide) and [http://restore.eth.guide](http://restore.eth.guide)
    .If you’d like to find the keystore folder on your hard drive via the terminal,
    it’s usually located in the following directories:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Mist 浏览器中，并在 Mist 完成与区块链的同步后，转到操作系统的文件菜单，选择帐户菜单，然后选择备份帐户。 这将打开一个文件夹。 在此文件夹内是以创建日期开头的长名称的文本文件，例如
    UTC--2016-09-01 (...) 这些纯文本文件中的每一个代表一个帐户。通过将其压缩并放在安全的地方（如 USB 密钥或加密硬盘）来备份此 keystore
    文件夹。如果打开其中一个文本文件，您将找到以某种特定符号格式化的私钥和公钥对。要在与其创建时不同的节点上恢复帐户，只需按照先前描述的相同方法找到 keystore
    文件夹。 与复制已有文件不同，Mist 中恢复以太坊帐户只需复制包含私钥的文本文件到 keystore 文件夹中，然后重新启动 Mist。 有关完整的教程，请访问
    [http://backup.eth.guide](http://backup.eth.guide) 和 [http://restore.eth.guide](http://restore.eth.guide)
    。如果您想通过终端在硬盘上找到 keystore 文件夹，则通常位于以下目录中：
- en: 'Mac: ∼/Library/Ethereum/keystore'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Mac: ∼/Library/Ethereum/keystore'
- en: 'Linux: ∼/.ethereum/keystore'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Linux: ∼/.ethereum/keystore'
- en: 'Windows: %APPDATA%/Ethereum/keystore'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Windows: %APPDATA%/Ethereum/keystore'
- en: 'The preceding process will back up only your normal accounts. Wallet contracts
    are held in the data folder, so (once you’ve done the exercises in later chapters)
    back that up as well:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的过程将仅备份您的常规帐户。 钱包合同存储在数据文件夹中，因此（一旦您完成后续章节中的练习），也要将其备份：
- en: 'Mac: ∼/Library/Application Support/Mist/'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Mac: ∼/Library/Application Support/Mist/'
- en: 'Linux: ∼/.config/Mist or, in earlier versions, ∼/.config/Chromium/Mist (folder
    is hidden)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Linux: ∼/.config/Mist 或，在较早的版本中，∼/.config/Chromium/Mist（文件夹是隐藏的）'
- en: 'Windows: C:\Users\< Your Username >\AppData\Roaming or ∼\AppData\Roaming\Ethereum\keystore'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Windows: C:\Users\< Your Username >\AppData\Roaming 或 ∼\AppData\Roaming\Ethereum\keystore'
- en: Each time you create a new account in Mist, be sure to grab the key file and
    back it up!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 每次在 Mist 中创建新帐户时，请务必获取密钥文件并备份！
- en: Using Paper Wallets
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用纸钱包
- en: 'You may have spotted in the preceding section that an Ethereum node doesn’t
    need to be online to create an account. This has to do with the way the Ethereum
    network generates addresses; it can create a new and valid key pair with near-zero
    chance that key pair already exists.This characteristic of the system allows for
    something most web applications can’t offer: a “paper” account. Sites such as
    MyEtherWallet ( [www.myetherwallet.com](https://www.myetherwallet.com) ) allow
    users to create a key pair right in the browser, stored locally on the machine.
    This site also makes it easy to print your key pair on paper, for safekeeping.This
    is called a paper wallet because it contains a Quick Response (QR) code , allowing
    people to make deposits to your Ethereum account simply by snapping the QR code
    on the paper sheet. In theory, you could go around collecting Ethereum payments
    this way, but you’d need to put that private key into an instance of Mist (or
    another client) to access that ether and send it anywhere else.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经在前面的部分中注意到，以太坊节点不需要在线即可创建账户。这与以太坊网络生成地址的方式有关；它可以创建一个新的有效密钥对，几乎不可能存在相同的密钥对。系统的这一特点允许了大多数网络应用无法提供的功能：一个“纸质”账户。像MyEtherWallet（[www.myetherwallet.com](https://www.myetherwallet.com)）这样的网站允许用户在浏览器中直接创建密钥对，并在本地存储在计算机上。该网站还可以轻松地将您的密钥对打印到纸上，以备份。这被称为纸钱包，因为它包含一个快速响应（QR）码，使人们可以通过扫描纸张上的QR码向您的以太坊账户存款。理论上，您可以通过这种方式收集以太坊付款，但您需要将私钥放入Mist（或其他客户端）的实例中，以访问该以太和将其发送到其他地方。
- en: Using Mobile Wallets
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用移动钱包
- en: 'There are a growing number of mobile wallet applications for iOS and Android
    that store private keys on the mobile device itself. The most popular and trustworthy
    to date is Jaxx, shown in Figure [2-9](#Fig9), which is made by a Canadian software
    company called Decentral. Their software runs on Mac, Linux, Windows, and even
    a few other platforms including Firefox and Chrome. Decentral is operated by Ethereum
    project cofounder Anthony Di Iorio.![A433414_1_En_2_Fig9_HTML.jpg](A433414_1_En_2_Fig9_HTML.jpg)Figure
    2-9.Jaxx is probably your best bet for wallet applications that run on iOS and
    Android. It holds bitcoins, ether, and a selection of other cryptocurrencies.The
    basic interface layout you see in Figure [2-9](#Fig9) has become a fairly standard
    UI in wallet applications. Users are presented with their wallet addresses, and
    can view those same addresses as QR codes. The QR codes make it easier to send
    ether or bitcoins in person, much the same way that Snapchat uses QR codes to
    allow users to follow each other by simply snapping the other user’s code. Here
    you’ll find a list of trustworthy wallet applications: [http://wallets.eth.guide](http://wallets.eth.guide)
    .Before going any further, it’s worth mentioning that an understanding of QR codes
    is all that’s needed to participate in the cryptoeconomy. To send someone ether
    or bitcoins with a mobile wallet, you click Send, scan the other party’s QR code
    (or paste in their public key) and enter an amount. They’ll receive their ether
    within seconds.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Working with Messages and Transactions
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In both Ethereum, transactions are used to refer to state changes in the distributed
    database (that is, in the blockchain). Transactions change account balances within
    the EVM. Messages are data objects passed back and forth across the network between
    smart contracts, and do not necessarily result in any changes being made on the
    chain. For example, if one contract checks the balance of another.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Transactions Change State
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A transaction in Ethereum refers to a piece of data bearing a cryptographic
    signature, which goes in the blockchain, and is thus recorded on every node in
    the network. Every transaction triggers a message to accomplish this state change,
    but messages are also sent by EVM code. These messages are private to the parties
    and are not represented in the blockchain.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊中的交易是指带有加密签名的数据片段，该数据片段存入区块链，并因此记录在网络中的每个节点上。每笔交易触发一个消息来完成这个状态改变，但消息也可以由以太坊虚拟机（EVM）代码发送。这些消息是各方私有的，不在区块链中表示。
- en: Editing a Global Database
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编辑全球数据库
- en: One reason that blockchain networks like Ethereum are touted as immutable is
    that once a transaction is written to the global shared database, it cannot be
    reversed by any other transaction. In modern payments terminology, this is known
    as a system without chargebacks.A chargeback in North American payment channels
    is defined as the forcible return of funds to an account holder, initiated by
    the issuing bank of the instrument. Because Ethereum has no central issuing authority,
    there is no one to appeal to if you mis-key a transaction. Presently, the only
    way to roll back a transaction is a state fork, which requires all nodes on the
    network to agree to manually revert a transaction. This is an extremely difficult
    and unlikely scenario reserved for network-wide attacks of one form or another.The
    reason for this transaction model is security. Compare sending cryptocurrency
    from one account to the other, to the process of writing a conventional paper
    check. In the latter example, your bank receives news of the outgoing transaction
    from your account. The bank first checks your balance to see whether you have
    the funds to pay the amount you endorsed on the check; if you don’t, the depositor’s
    bank does not increase the deposit account. Instead, you are issued a fee for
    writing a bad check.Transactions in the Ethereum network work similarly. The system
    ensures that the outgoing amount from one account is always added to the destination
    account. If for some reason the destination account can’t be accessed—say because
    the cryptographic signature is not valid—then the source account doesn’t have
    its balance decremented, and thus funds are not lost. In Ethereum, externally-generated
    transactions are always signed cryptographically with the keys of the sender and
    the recipient, making it straightforward to ensure that bad actors can’t create
    transactions, and money can’t be lost just because of a mis-keyed address.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链网络如以太坊被吹捧为不可变的一个原因是，一旦交易被写入全球共享数据库，就无法被任何其他交易撤销。在现代支付术语中，这被称为无追索权系统。北美支付渠道中的追索权被定义为由发行机构发起的资金强制退回给账户持有人。因为以太坊没有中央发行机构，所以如果您输错了交易，就没有人可以求助。目前，回滚交易的唯一方法是状态分叉，这需要网络上的所有节点同意手动撤销一笔交易。这是一种极其困难且不太可能发生的情况，只适用于某种形式的网络攻击。这种交易模型的原因是安全性。将加密货币从一个账户发送到另一个账户与撰写传统纸质支票的过程进行比较。在后者的例子中，您的银行会收到您账户的出款交易通知。银行首先检查您的余额，看看您是否有足够的资金支付您在支票上签署的金额；如果没有，存款人的银行不会增加存款账户。相反，您将因为写一张空头支票而被收取费用。以太坊网络中的交易工作方式类似。该系统确保了从一个账户出款的金额始终添加到目标账户。如果因为某种原因无法访问目标账户——比如因为加密签名无效——那么源账户不会减少其余额，因此不会丢失资金。在以太坊中，外部生成的交易始终使用发送者和接收者的密钥进行加密签名，从而可以轻松确保恶意行为者无法创建交易，也不会因为输错地址而丢失资金。
- en: So, What Is a Blockchain?
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 所以，什么是区块链？
- en: 'So far we’ve carefully avoided breaking down the concept of blocks, and focused
    on how transactions are initiated. Next we’ll discuss how those transactions are
    cleared and settled by the network. A block is a unit of time that encompasses
    a certain number of transactions, just as a heartbeat is a period of time in which
    a certain quantity of blood is moved through an animal’s body. Inside that period,
    transaction data is recorded; when the unit of time elapses, the next block begins.
    The blockchain represents the history of state changes within the network database
    of the EVM. To quote the Ethereum docs:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经小心避免了解区块的概念，并且专注于交易是如何发起的。接下来，我们将讨论网络如何清理和结算这些交易。一个区块是一个时间单位，它包含一定数量的交易，就像心跳是一段时间，在这段时间内一定量的血液被输送到动物的身体中一样。在这段时间内，交易数据被记录；当时间单位结束时，下一个区块开始。区块链代表了EVM网络数据库中状态变化的历史。引用以太坊文档的话：
- en: The blocks on the blockchain represent units of time; the blockchain itself
    is a temporal dimension and represents the entire history of states at the discrete
    time points designated by the blocks on the chain. [³](#Fn3)
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 区块链上的区块代表时间单位；区块链本身是一个时间维度，代表了通过链上的区块指定的离散时间点的状态的整个历史。 [³](#Fn3)
- en: Smart contracts may be uploaded to the network in a given block, but may not
    actually send any messages or transactions until a much later block.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约可以在给定的区块中上传到网络，但直到更晚的区块才可能发送任何消息或交易。
- en: Paying for Transactions
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 交易支付
- en: 'When a human sends a transaction, the EVM requires a tiny fee to process the
    transaction. This works similarly for the uploading of smart contracts: users
    must pay for the computational effort the EVM will expend running each contract.
    By forcing users to pay for transactions on the EVM, the likelihood of wasteful
    never-ending programs being executed is theoretically reduced. These costs are
    priced in a unit called gas.You can think of gas as a metric indicating the number
    of steps the EVM will have to take to complete the instructions in the transaction.
    If this is a simple instance of one person sending money to another, the transaction
    fee will be cheap, because this requires a small number of computational steps.
    In the case of a complex smart contract, however, the fee will be higher, because
    the EVM has to use its global resources to execute the Solidity code in the contract
    and figure out what transactions to then execute as a result.Transaction senders
    are required to include a gas limit that says how much they’re willing to pay
    to have their transaction executed. Full nodes on the network which are mining,
    or securing the network for pay, provide the hardware for these many transactions
    to be collated, validated, cleared, settled, and stored within the blockchain,
    thus they receive the transaction fees a user pays when he or she sends ether
    to a friend, or executes a smart contract. Miners who execute the transaction
    collect the fee, so an implicit market process is at play. Whether or not a transaction
    executes is determined by the amount of gas the sender is willing to pay. If the
    total number of steps exceeds the gas budgeted for a transaction, all steps are
    rolled back, and no part of the transaction is executed. If a user sends a transaction
    with too low a transaction fee, it will be processed only after some time, or
    not at all.For context, it’s true that every operation costs some amount of gas;
    most operations cost 1 unit of gas. A complex transaction can cost hundreds of
    units of gas. However, in dollar terms, this adds up to very little.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Denominations
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like fiat currencies, ether balances and values have standardized denominations
    for small units. All ether balances are typically denominated in ether, and remainders
    are denominated in wei. For example, 10.234 ether = 10,234,000,000,000,000,000
    wei.If you think of ether as dollars, wei are like dimes, quarters, pennies, and
    nickels. Table [2-1](#Tab1) details the wei denominations .Table 2-1.Denominations
    of ether. In the Unit column at left, the equivalent bitcoin denominations are
    provided in parentheses
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '| Unit | Wei Value | Number of Wei |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
- en: '| Wei | 1 wei | 1 |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
- en: '| Kwei (babbage) | 1³ wei | 1,000 |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
- en: '| Mwei (lovelace) | 1⁶ wei | 1,000,000 |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
- en: '| Gwei (shannon) | 1⁹ wei | 1,000,000,000 |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
- en: '| Microether (szabo) | 1^(12) wei | 1,000,000,000,000 |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
- en: '| Milliether (finney) | 1^(15) wei | 1,000,000,000,000,000 |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
- en: '| Ether | 1^(18) wei | 1,000,000,000,000,000,000 |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
- en: You can find an ether denomination converter tool at [http://ether.fund/tool/converter](http://ether.fund/tool/converter)
    .
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ether
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The easiest way to obtain ether is to convert bitcoins inside the Mist wallet,
    as described earlier in this chapter. You can earn ether by mining, but as mentioned
    previously, this requires initial setup; you can’t mine from within Mist, unless
    it’s on the testnet. (This has to do with the way smart contracts are tested and
    executed on the network, as you’ll see in Chapter [5](A433414_1_En_5_Chapter.html).)If
    you’d like to buy ether with fiat currency, such as US dollars, you need to do
    so on an exchange or with a licensed money transmitter. To see a table of online
    platforms that sell ether, see [http://vendors.eth.guide](http://vendors.eth.guide)
    .Testnet ether is free, as stated earlier in this chapter. Instructions for getting
    test ether from a “faucet” are in Chapter [5](A433414_1_En_5_Chapter.html), with
    more details about creating transactions.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Anonymity in Cryptocurrency
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bitcoins and ether are not anonymous payment instruments. Anyone who knows your
    public key can look on the blockchain and see the dates and amounts of transactions
    coming in and out of your account. From this data, they might be able to put together
    a pattern of transactions from which they could deduce your activities. Federal
    authorities are already using machine-learning transactions to decode spending
    patterns on dark-market sites such as AlphaBay.[⁴](#Fn4)Anonymity, secrecy, and
    privacy in cryptocurrency are generally conflated by newbies, sometimes with disastrous
    ends. Bitcoin and Ethereum addresses are pseudonymous by nature; they’re not linked
    to your real name or information. But every transaction you send is public, in
    the sense that anyone can see the transaction on the blockchain. This is why public
    blockchains are touted for their transparency; if you know someone’s public key,
    you can look up all their transactions.Data within smart contracts themselves
    are encoded but not encrypted. Encryption is used only to hash large datasets
    and verify transaction senders and recipients. However, you can encrypt data yourself
    before putting it into an Ethereum smart contract, if you’d like to use the public
    Ethereum chains in a private manner.As you’ll see later, every Ethereum transaction
    leaves room for an extra payload of text labeled Input Data. Don’t be tempted
    to store secret things here for safekeeping unless you plan to encrypt them. Even
    then, it is generally a bad idea to store strings such as passwords or account
    pin numbers on the Ethereum blockchain because it is public and can never be removed.
    Anyone can explore a blockchain such as Ethereum by using a web-accessible application
    known as a blockchain explorer.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain Explorers
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As with Bitcoin, every transaction in and out of the EVM is recorded publicly.
    The transaction shown in Figure [2-10](#Fig10) is a typical one for the Ethereum
    blockchain. Clicking the sender or recipient address allows you to see the transactions
    for that address since it was created. This screen capture is from Etherscan (
    [https://etherscan.io](https://etherscan.io) ), but anyone is free to make a blockchain
    explorer for the public Ethereum chain.![A433414_1_En_2_Fig10_HTML.jpg](A433414_1_En_2_Fig10_HTML.jpg)Figure
    2-10.All ether and bitcoin transactions are public. Some users avoid having their
    public key linked to their identity by creating a new account for every transaction.
    Others use the same public key for years, advertising it as a conduit for donations
    or contributions of one kind of another.NoteBlockchain explorers show you a historical
    record of all transactions in the network, and allow you to string together a
    history of transactions. There’s no need to manually record your transaction details!As
    you can see in Figure [2-10](#Fig10), transactions have quite a few attributes.
    We’ll talk more about what these fields mean in Chapter [3](A433414_1_En_3_Chapter.html),
    but for now here’s the takeaway: sending and receiving ether is private to the
    participants and anyone they tell, because public keys are pseudonymous by nature—but
    these transactions are not strictly secret, in the sense that all transactions
    are publicly viewable on the blockchain. It’s easy to trace money hopping from
    one account to another.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far we’ve moved quickly. In this chapter, you learned more about wallets
    and Ethereum clients. If you began synchronizing your instance of Mist as you
    were reading this chapter, it’s probably not even finished yet!In the meantime,
    let’s get prepared for deploying a smart contract.Although you won’t need access
    to an Ubuntu machine for the next chapter, it’s worth lining up for Chapters [4](A433414_1_En_4_Chapter.html),
    [5](A433414_1_En_5_Chapter.html), [8](A433414_1_En_8_Chapter.html), and [9](A433414_1_En_9_Chapter.html).
    In the meantime, move on to the next chapter, where you’ll learn how the Ethereum
    Virtual Machine works.Footnotes[1](#Fn1_source)Gavin Wood, GitHub, “Ethereum Yellow
    Paper,” [https://github.com/ethereum/yellowpaper](https://github.com/ethereum/yellowpaper)
    , 2014.[2](#Fn2_source)StackExchange, “When Transferring Ether, Who Needs to be
    in Sync with the Blockchain,” [https://ethereum.stackexchange.com/questions/2273/when-transferring-ether-who-needs-to-be-in-sync-with-the-blockchain](https://ethereum.stackexchange.com/questions/2273/when-transferring-ether-who-needs-to-be-in-sync-with-the-blockchain)
    , 2016.[3](#Fn3_source)Ethdocs.org, “Account Types, Gas, and Transactions,” [http://ethdocs.org/en/latest/contracts-and-transactions/account-types-gas-and-transactions.html](http://ethdocs.org/en/latest/contracts-and-transactions/account-types-gas-and-transactions.html)
    , 2016.[4](#Fn4_source)Science Magazine, “Why Criminals Can’t Hide Behind Bitcoin,”
    [www.sciencemag.org/news/2016/03/why-criminals-cant-hide-behind-bitcoin](http://www.sciencemag.org/news/2016/03/why-criminals-cant-hide-behind-bitcoin)
    , 2016.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
