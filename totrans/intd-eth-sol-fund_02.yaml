- en: © Chris Dannen 2017Chris DannenIntroducing Ethereum and Solidity10.1007/978-1-4842-2535-6_2
  prefs: []
  type: TYPE_NORMAL
- en: 2. The Mist Browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the realm of cryptocurrency software, there are generally two essential
    types of client applications: wallets and full nodesChris Dannen^(1 )(1)Brooklyn,
    New York, USANoteWallet usually denotes a lightweight node that connects to a
    blockchain to perform basic functions, such as sending and receiving cryptocurrency.
    Full nodes are command-line interfaces that can perform the full gamut of operations
    allowed by the network.As we covered in the last chapter, Ethereum can refer to
    both the Ethereum protocol and the Ethereum network created by computers using
    the protocol. Operating a node on the network allows you to upload smart contracts.
    For sending and receiving cryptocurrency (in our case, ether) all you need is
    a wallet application for your computer or smartphone.Ethereum has several client
    applications that are discussed in this book. The most useful (for most readers)
    is the Mist browser, a user-friendly wallet that can perform some of the duties
    of a full node—namely, executing smart contracts.Eventually, entire web-app-like
    programs will be accessible through Mist , with their back ends built on Ethereum;
    that’s why it’s called a browser. Don’t be fooled by Mist’s simplicity. Today,
    it’s useful for sending and receiving the ether cryptocurrency. But tomorrow,
    it may also be a distribution point for consumer and enterprise software applications,
    almost like an App Store.NoteThe term currency, as in cryptocurrency, refers to
    a fungible unit of value for the system, much like a token, or scrip. What exactly
    these little tokens represent will become clear later in this chapter. The term
    fungible, applied to a currency, means “mutually interchangeable.” In fiat currency
    terms, one dollar can be said to be fungible for another dollar.In this chapter,
    you’ll learn how to access the network by using Mist and other applications, in
    order to understand the basics of sending and receiving ether tokens between accounts.
    Subsequent chapters break down how the system works and how to program smart contracts
    for it.'
  prefs: []
  type: TYPE_NORMAL
- en: Wallets as a Computing Metaphor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wallets are software applications for desktop or mobile devices that hold your
    keys to the EVM. These keys correspond to an account, which is referred to by
    a long account address. In Ethereum, accounts do not store your name or any other
    personal information. They are pseudonymous. Anyone can generate an Ethereum account
    by connecting to the network with any Ethereum client (such as Mist). You can
    generate as many as you’d like.If you’ve already downloaded an Ethereum wallet
    or full node on your computer or phone, you were probably prompted to create an
    account. The wallet application probably also asked you to create a password to
    protect your keys with encryption. As you can gather, these keys are an important
    part of sending and receiving ether.Let’s begin by looking at your account address,
    also called a public key. Your public key has a matching private key that allows
    access to your account. This private key should be kept secret and not published
    anywhere.Accounts in both Bitcoin and Ethereum are represented by long hexidecimal
    addresses. An Ethereum address looks like this:0xB38AA74527aD855054DC17f4324FE9b4004C720CIn
    the Bitcoin protocol, the raw hexidecimal address is encoded in base 58 with a
    built-in version number and checksum, but underneath looks just like an Ethereum
    address. Here’s an example of a Bitcoin address:1GDCKfdTo4yNDd9tEM4JsL8DnTVDw552SyTo
    receive ether or bitcoins, you must give the sender your address, which is why
    it’s called a public key . Of course, these strings are not memorable. If you’re
    new to programming, you might be wondering what’s going on here; why the unwieldy
    alphanumeric mess? Experienced programmers may already know that these public
    and private keys are part of asymmetric key cryptography.
  prefs: []
  type: TYPE_NORMAL
- en: Your Address Is What?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Why do account addresses —which are meant to be public, and which some people
    even list on their web sites—consist of such long, cryptic strings? Why can’t
    we just have usernames?The answer is that someday soon you probably will be able
    to generate plain-English usernames, but they’ll function more like top-level
    domain names today. You’ll rent a name from a decentralized network registrar,
    and it will redirect to your real account address, much the way that top-level
    domains redirect to IP addresses today.A lot of plans for the Ethereum network
    are in the pipeline that will eventually replicate the niceties of today’s HTTP
    Web as we know it. To learn more about the Ethereum roadmap, skip to Chapter [11](A433414_1_En_11_Chapter.html).NoteAn
    account is a data object: an entry in the blockchain ledger, indexed by its address,
    containing data about the state of that account, such as its balance. An address
    is a public key belonging to a particular user; it’s how users access their accounts.
    In practice, the address is technically the hash of a public key, not the public
    key itself, but for simplicity, it’s better to ignore this distinction.In the
    EVM, asymmetric cryptography is used by the network to generate and recognize
    valid Ethereum addresses, and also to “digitally sign” transactions. In secure
    communications, asymmetric cryptography is used to encipher private communications,
    so that even if they are intercepted by enemies, they remain unreadable. In blockchain
    the principle works the same; it’s a method for ensuring that messages (in the
    form of EVM transaction requests) are coming from the actual address holder, and
    not an interloper trying to hijack their funds.'
  prefs: []
  type: TYPE_NORMAL
- en: Where Is My Ether?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It’s important to note that ether is not contained in any particular machine
    or application. Your ether balance can be queried, and ether sent or received,
    by any computer running an Ethereum node or wallet. Even if the computer where
    your Mist wallet lives gets destroyed, never fear: all you need is your private
    key, and voila, you can access your ether from another node.However, if you hand
    over your private keys to someone else, that person can access the EVM and pull
    your money out without you ever knowing. As far as the network is concerned, anyone
    with your private key is you.Because the EVM is a global machine, it has no way
    of knowing which node you’ll create a transaction from. Unlike today’s web apps,
    Ethereum does not look for a “trusted” computer; it doesn’t know your phone from
    any other phone. If this seems unusual, think of it like a bank ATM system, which
    provides account access for anyone holding your debit card number and your four-digit
    pin.As mentioned in Chapter [1](A433414_1_En_1_Chapter.html), losing your phone
    or computer to theft or destruction does not mean you lose your money, provided
    the following are true:'
  prefs: []
  type: TYPE_NORMAL
- en: You have backed up your private key.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You didn’t give your private key to anyone else.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up a private key is as simple as copying and pasting it into a text
    file, and saving it on a USB stick. Or writing it down on paper. You’ll find more
    private-key backup methods later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The Bank Teller Metaphor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a way, using a wallet or full node is like getting behind the bank teller’s
    desk and being in control of your own money. Not in the sense that you can get
    paper cash, but in the sense that a bank teller controls a node within the bank’s
    computer system that can execute transactions in a global database of transactions.
    A teller controls the bank’s database, which connects to other bank databases.In
    conventional banking, by extension, a paper check is a written instruction for
    the bank teller to make a transaction using the bank’s computer system. On the
    check is your account number and a routing number. (We’ll talk more about the
    conventional banking system in the next chapter.)For now, it’s only important
    to point out that buildings full of people (plus vast computing resources) are
    required to take your paper check, turn it into an electronic transaction, send
    the transaction to another party, and then update the balances of both parties.
    In cryptocurrency, this legacy banking system—a hodgepodge of human and computer
    processes—is completely obviated by the use of an algorithmic consensus engine
    running on a peer-to-peer computer network. Settlement and clearing of transactions
    happens on the network itself within seconds (or, with bitcoin, minutes) of the
    transaction being digitally signed and broadcast by a node. Thus it can be said
    in in cryptocurrency transaction that “the settlement is the trade.”
  prefs: []
  type: TYPE_NORMAL
- en: In Cryptocurrency, You Hold Your Own Assets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Cryptocurrencies are different from the fiat currencies used by conventional
    banks, which are centralized. Your tokens are virtual, and your balance (along
    with that of everyone else who holds ether) is tabulated by the blockchain network.
    There is no tangible ether or bitcoin currency, although some third parties have
    created “collectible” coins preloaded with cryptocurrency.Be extremely wary of
    any online service or organization that offers to hold, store, or act as custodian
    of ether, bitcoins, or any other cryptocurrency. The advantage of distributed
    public systems is to eliminate counterparties from transactions, and allow entities
    to transact on a peer-to-peer basis. The point is, you can hold these assets securely,
    without a custodian.That said, we live in a fiat currency world. Even if cryptocurrencies
    are indeed the future (and as you’ll see in this book, there is stupendous evidence
    they are) perhaps several years or more will serve as a transitional period, wherein
    people have both a cryptocurrency wallet and a traditional bank account.To summarize:
    Do not use any wallet or online service that holds your private keys for you.
    Only use applications that store your private keys on your device. Later in this
    chapter, you’ll find recommendations for desktop and mobile wallets. Let’s get
    back to explaining the purpose of Mist as your first gateway to the EVM.'
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing Ethereum Transactions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The best way for new Ethereum programmers to visualize the concept of a blockchain
    is to imagine a paper transaction ledger that can be synchronized with other paper
    transaction ledgers around the world.When a wallet application attempts to make
    a change to the database, the change is detected by the nearest Ethereum node,
    which then propagates the change around the network. Eventually, all the transactions
    are recorded on every ledger.In the abstract, this works something like the polygraph
    machine patented by John Isaac Hawkins in 1803\. This was the first “copy machine,”
    although its name today is used to refer to so-called lie-detecting devices. This
    duplicating machine, famously praised by Thomas Jefferson as the finest invention
    of its day, is shown in Figure [2-1](#Fig1). Just like the polygraph, the blockchain
    is an apparatus for allowing many “machines” to change the state of a ledger in
    the same way, nearly simultaneously.![A433414_1_En_2_Fig1_HTML.jpg](A433414_1_En_2_Fig1_HTML.jpg)Figure
    2-1.The polygraph machine is similar to the blockchain in principle: many machines
    working in concert to write similar data to similar local databases. In Bitcoin
    and Ethereum, the technological innovation lies in the fact that these state changes
    can come in out of order, owing to network latency, and the network can reconcile
    them into a single ledger.As mentioned previously, your address is sometimes called
    your public key, but a better metaphor would be a lockbox with a unique serial
    number. The private key is the only thing in this whole system that is named sensibly:
    it unlocks your account and allows you to move ether out.What is ether, exactly?
    It’s merely a balance in your account. When you send and receive either, nothing
    is actually sent or received.In the EVM, when one account increases, the system
    makes sure it’s because another account has sent a payment, and thus decreased
    the same amount. It’s a closed system. It’s practically impossible to give yourself
    free ether, or at least it wouldn’t be worth the costs you’d incur trying falsify
    the ledger. Ethereum uses financial incentives and disincentives for security,
    as you’ll see in Chapter [7](A433414_1_En_7_Chapter.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Breaking with Banking History
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most interesting facets of the Ethereum protocol is its issuance
    scheme, which will be discussed later. For now, it’s only important to point out
    that (as with Bitcoin) no individual has the power to create more ether. This
    characteristic stands in stark contrast to the last 400 years of financial markets
    and central bankers, which reads like a history of large-scale scam artists.Since
    the stock-jobbing days of the late 17th century in London’s Exchange Alley, entrepreneurs
    and scammers (then called stock projectors) have been selling equity in ventures
    both legitimate and not. Often they would secretly issue new shares to themselves
    and their confederates when the price would go up—known to Americans in the 19th
    century as watering the stock.Over time, speculating on stocks became a pastime
    that people of all ages and backgrounds enjoyed on both sides of the Atlantic,
    and the modern stock markets were born, with their processes and counterparties
    to act as middlemen who ensure trustworthy transactions. But even with the banking
    regulations passed after the Great Depression, dishonest entrepreneurs still found
    ways to carve out secret stock pools, or unload the shares they had without the
    public knowing—only to let the business collapse after getting their money out.Few
    times in modern history have speculative bubbles wiped out as much wealth and
    human progress as the crash of 1929 in the United States. However, similar depressive
    episodes in the United States and Europe (including the Panic of 1873–1879) were
    caused by someone, either central banks or investors themselves, messing with
    the base quantity of money, equities, or bonds in a large marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: How Encryption Leads to Trust
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Chapter [1](A433414_1_En_1_Chapter.html) breezed past any real discussion of
    cryptography, and focused instead on the impact of crypto-networks. But, there’s
    something strange about a secure network comprised of a bunch of strangers’ PCs
    working in concert. How come a single bad apple can’t hack the network and steal
    everyone’s ether? To answer that question, first recall that a blockchain uses
    the following methodologies:'
  prefs: []
  type: TYPE_NORMAL
- en: Asymmetric cryptography
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cryptographic hashing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Peer-to-peer distributed computing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s spend some time briefly talking about the first item on this list: asymmetric
    cryptography, which is sometimes broadly called public-key cryptography. A quick
    detour here will help us better grasp how a public network can be secure. We’ll
    address the other two elements in Chapter [6](A433414_1_En_6_Chapter.html).Asymmetric
    cryptography is a method of sending secure messages back and forth over a network,
    where the sender and the recipient do not trust the channel of communication.
    In the case of the EVM, those messages are transactions, being signed and sent
    to the network in order to change the state of some of its accounts. It’s called
    “asymmetric” because each party has a pair of two different, but mathematically
    related, keys.Public-key cryptography was developed for wartime communications,
    and when used properly, can be extremely secure. Unlike symmetric-key cryptographic,
    public key cryptographic communications don’t require a secure channel between
    parties. This is essential in Bitcoin and Ethereum, because any computer running
    the protocol can join the network, without any vetting. However, the computational
    complexity involved in encrypting data makes it useful only for small data objects,
    like the alphanumeric string that becomes your private key. This is why encryption
    must be used sparingly.At a high level, it can be said that Ethereum uses encryption
    to validate and verify that any and all changes made to account balances in the
    EVM are legitimate, and that no account has been increased (or decreased) erroneously.If
    you’re new to computer science, the very mechanism of encryption might be hazy.
    For the time being, here are some definitions that will help moving forward:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Symmetric Encryption: A process by which a snippet of plain text, usually held
    in a document, is smashed together with a shorter data string called a key to
    produce a ciphertext output. This output can be reversed, or decrypted, by the
    party that receives it, so long as they also have that same key. Trying to decode
    the message without the key would be, computationally speaking, immensely time-consuming
    and expensive—so much so that some kinds of encryption are considered practically
    unbreakable, even with huge computing resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Asymmetric encryption: This way of encrypting information requires the program
    to issue two keys simultaneously, one that is public and one that you keep private.
    The public key is public in the sense that you can list it on your web site or
    social profile, such as an e-mail address. (When communicating, parties can use
    one anothers’ public keys to encrypt information, as described below.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Secure Messaging: In our first example, Alice uses Bob’s public key to encrypt
    a message. When he receives the ciphertext, he can decrypt it using his matching
    private key, ensuring that only Bob can read the message. This is called secure
    messaging. But it leaves a dangerous possibility open: anyone could send Bob a
    message claiming to be Alice. How does he know that Alice is the real sender of
    the message?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Secure and Signed Messaging: If Alice wanted to assure Bob that she is the
    true sender, she would do things differently. First, she would take her plaintext
    message and encrypt it using her private key. Then, she would encrypt it again
    using Bob’s public key. When Bob receives the message, he decrypts it first using
    his private key, but he’s still left with ciphertext. He must decrypt it again
    using Alice’s public key. This second layer of encryption assures him that Alice
    is indeed the sender, because presumably, nobody has Alice’s private key but Alice.
    This is known as “secure and signed” messaging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If Alice were to only encrypt her plaintext using her own private key, then
    anyone with her public key could decrypt it. This is known as an “open message
    format” because, while it proves the identity of the sender, it can be decrypted
    by anyone.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Digital signature: For maximum security, Alice would take another step: she
    would hash the plaintext of her message, and attach it along with the message.
    She would then encrypt this bundle with her own private key, and again with Bob’s
    public key. When Bob receives and decrypts the ciphertext he can run Alice’s plaintext
    message through the same hashing algorithm Alice used. If for some reason the
    fingerprint of the message turns out differently, then it means the actual message
    text was damaged or altered en route.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you’ll appreciate more in Chapter [6](A433414_1_En_6_Chapter.html), which
    covers mining, the method by which individual transactions are broadcast to the
    EVM is similar to the description of the digital signature above, where the contents
    of the transaction are hashed and enciphered before being broadcast to peers.
    Now that you can appreciate the security of the Ethereum network, let’s get to
    the brass tacks of Mist installation.
  prefs: []
  type: TYPE_NORMAL
- en: System Requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most users will opt for the Mist browser, but this section lists other tools
    that developers may find just as interesting. Mist makes it easy to send and receive
    ether. It also contains an interface for executing smart contracts quickly and
    easily. We’ll talk more about how to run contracts in Mist in Chapter [4](A433414_1_En_4_Chapter.html).Mist
    runs well on a modern computer with at least 2 GB of RAM and 30 GB of hard disk
    space free. For lower-performing machines, try the MetaMask Chrome extension.
    It’s described later in this section.You’ll find the latest version of Mist on
    the Ethereum project GitHub site ( [https://github.com/ethereum/](https://github.com/ethereum/)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: More about [Eth.​guide](http://Eth.guide) and This Book
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Because Ethereum is a new and fast-moving project, some of the project and documentation
    links may change after the publication of this book. For this reason, commonly
    needed links and references for this book are also listed at [http://eth.guide](http://eth.guide)
    and updated regularly with new material. Similarly, all footnoted links are indexed
    on this page by chapter, and updated if and when they change.To make the site
    more useful as a reference, subdomains have been created for popular topics. You’ll
    see these shortcuts mentioned throughout the text.The Eth.guide site is linked
    to the GitHub project for the book itself, so you will also find the sample code
    projects from this book at the same URL. The full URL for the GitHub project for
    this book is [https://github.com/chrisdannen/Introducing-Ethereum-and-Solidity](https://github.com/chrisdannen/Introducing-Ethereum-and-Solidity)
    .If you’re a nontechnical reader just looking to get started with the basics,
    go ahead and skip to the section entitled “Finally, into the Mist!” Developers,
    read on to see what other tools to peruse at this stage of your Ethereum journey.
  prefs: []
  type: TYPE_NORMAL
- en: Tools for Developers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Developers will want to check out these three tools in addition to Mist:'
  prefs: []
  type: TYPE_NORMAL
- en: MetaMask Chrome extension (useful for everyone)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geth (useful for intermediate developers)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parity (useful for advanced developers)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Chrome extension MetaMask is the simplest way to get up and running with
    Ethereum. It lets you execute smart contracts and transactions right in your browser
    without needing a full Ethereum node. MetaMask has the power to create accounts,
    and to send and receive ether. You can download MetaMask from the Google Chrome
    Add-Ons menu, or by navigating to the project URL at [https://metamask.io/](https://metamask.io/)
    .For all its convenience, MetaMask does not download the entire blockchain to
    your computer; nor can it mine transactions and earn ether. However, these are
    minor drawbacks for users just looking to get up and running with Ethereum quickly.MetaMask
    was built by Aaron Davis (a.k.a. Kumavis) of ConsenSys, an Ethereum development
    and consulting company whose free tools you’ll encounter frequently in this nascent
    Ethereum blockchain space. ConsenSys is a 60-person Ethereum venture studio and
    consulting company in Brooklyn, NY, run by Ethereum project cofounder Joseph Lubin.MetaMask
    was funded in part by development grants (DEVgrants) from the Ethereum Foundation.
    These grants are open to anyone working on an Ethereum project, and do not require
    the project creator to give up any equity. To learn more about DEVgrants, visit
    the program’s Gitter channel at [https://gitter.im/devgrants/public](https://gitter.im/devgrants/public)
    or follow its Twitter handle @devgrants.
  prefs: []
  type: TYPE_NORMAL
- en: CLI Nodes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you already know you want to begin development with Solidity, download a
    full command-line node. The most popular command-line interface (CLI) nodes for
    the Ethereum network are written in Go and C++, and they’re called Geth and Eth
    (alternately, go-ethereum and cpp-ethereum).NoteBecause there are many Ethereum
    clients for various operating systems, this book uses the most straightforward
    development environment: Ubuntu 14.04 running Geth. Mac or Windows users may want
    to try installing a virtual machine such as VirtualBox that can run an Ubuntu
    instance.Advanced developers may also want to pair Geth with Parity, a super-fast
    Ethereum client written in the Rust programming language. In the Chapter [6](A433414_1_En_6_Chapter.html)
    we’ll talk about basic Geth commands.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Recommended: Using Parity with Geth'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ethcore.io is a private Ethereum development company composed of a few former
    contributors to the Ethereum project, including Gavin Wood, another Ethereum project
    cofounder, who created the Solidity language and authored the Ethereum Yellow
    Paper.[¹](#Fn1)He and his team have created a powerful node written in the Rust
    programming language. Parity works on macOS, Windows, Ubuntu, and in a Docker
    instance. You can find out more by checking out the GitHub project at [https://github.com/ethcore/parity](https://github.com/ethcore/parity)
    .NoteIf you plan on using a Mist wallet through your Parity node, you’ll need
    to manually start Parity before you open Mist. Otherwise, Mist will connect via
    its own node. Under the hood, the Mist browser runs a Geth node.Detailed step-by-step
    instructions for setting up the Mist wallet with Parity running on the back end
    are available on YouTube from the Ethcore team ( [www.youtube.com/watch?v=sta-p5d1blQ](http://www.youtube.com/watch?v=sta-p5d1blQ)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, into the Mist!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have a better sense of what an Ethereum client does, let’s put
    one on your computer. The Mist browser is compatible with Linux, macOS, and Windows
    computers with both 32- and 64-bit architectures. If you don’t know whether your
    computer is 32- or 64-bit, check your system’s hardware profile. Most newer systems
    are 64-bit.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and Installing Mist
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, download Mist from [https://github.com/ethereum/mist/releases](https://github.com/ethereum/mist/releases)
    , as shown in Figure [2-2](#Fig2).![A433414_1_En_2_Fig2_HTML.jpg](A433414_1_En_2_Fig2_HTML.jpg)Figure
    2-2.From the Ethereum project on GitHub, click to download the executable for
    your OS, or download the source code to compile it yourselfYou’ll find this download
    link among the other client downloads at:http://clients.eth.guideOn Windows, double-click
    the executable that downloads. On macOS, open the disk image that downloads and
    drag the Ethereum wallet to your Applications folder. On Ubuntu, download the
    Debian package or unzip the zip file and open it to install.NoteIt’s not possible
    or advantageous to run more than one node at once. If, for example, you try to
    open Geth while Mist is already running, you’ll get an error telling you a node
    is already operational on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Mist
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After you download and open the installer, you’ll see a welcome screen like
    the one in Figure [2-3](#Fig3). (There are some of those big promises from Chapter
    [1](A433414_1_En_1_Chapter.html)!)![A433414_1_En_2_Fig3_HTML.jpg](A433414_1_En_2_Fig3_HTML.jpg)Figure
    2-3.The main network is also known as the main chain. The test network is a sandbox
    environment for playing with fake ether and debugging contracts.Here you’ll be
    asked which chain, or network, you want to connect to. At this stage, it doesn’t
    matter which one you choose; you’ll be able to switch networks later. But for
    our purposes, let’s make you a real wallet address: click Use the main network.Notice
    the bottom of the window, which indicates downloading blocks. This application
    runs a full node on the Ethereum network; that means it keeps its own copy of
    the blockchain, which it must first download before any real action can take place.
    This will take a long time, because the blockchain contains a record of every
    transaction ever on the Ethereum chain.Next you’ll see the screen shown in Figure
    [2-4](#Fig4), which you can skip—unless you participated in the Ethereum crowdsale
    back in 2014\. In that case, follow those instructions to redeem your ether.![A433414_1_En_2_Fig4_HTML.jpg](A433414_1_En_2_Fig4_HTML.jpg)Figure
    2-4.The Ethereum crowdsale, which entitled participants to a file representing
    ether, took place in 2014\. Click the Skip option if you didn’t participate.After
    you pick your password, as seen in Figure [2-5](#Fig5) (and write it down or memorize
    it), you’ll see a prompt that requires some explaining.![A433414_1_En_2_Fig5_HTML.jpg](A433414_1_En_2_Fig5_HTML.jpg)Figure
    2-5.Next, choose a passwordNoteThere is no Forgot Password functionality in the
    Ethereum network. That’s because your password is only for this local instance
    of the Mist wallet; it’s not saved on the Ethereum blockchain. In fact, your private
    key is all you need to re-create this account on any other computer running Mist.
    The password you create merely protects you from an interloper sitting down at
    your computer and spending your money through the Mist interface. It does not
    stop anyone from stealing your private keys from your computer’s file system,
    if it’s left unprotected. Take precautions, such as turning of the Automatic Login
    at Startup feature on your Mac, Linux, or Windows PC.On the next screen, shown
    in Figure [2-6](#Fig6), you’ll get your first glimpse at your etherbase address,
    which is like the Ur-address for this machine as long as this node and its data
    are intact. If you delete the Mist application and its data from your system library,
    this public-private key pair—your etherbase—will be deleted. That’s why it’s necessary
    to back up your accounts, which we’ll go over at the end of this chapter.![A433414_1_En_2_Fig6_HTML.jpg](A433414_1_En_2_Fig6_HTML.jpg)Figure
    2-6.Here you can see the new address. You can also deposit bitcoins to be converted
    into ether by the Shapeshift.io API.Finally, you’ll see the screen in Figure [2-7](#Fig7)
    as the blockchain syncs to your computer. If you click Launch Application, the
    Mist interface will load. Don’t be distressed if your new account doesn’t show
    up yet. It will appear when the node is fully synchronized.![A433414_1_En_2_Fig7_HTML.jpg](A433414_1_En_2_Fig7_HTML.jpg)Figure
    2-7.This will take a while. Your new account will show up when it’s done.'
  prefs: []
  type: TYPE_NORMAL
- en: Finding Your New Address
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can create more addresses, but they will all exist under the aegis of this
    etherbase address, which makes backup easier.If you click through the following
    screens, you’ll notice these are just time-killers to let you learn more about
    Ethereum while the blockchain downloads. If you’re curious, click any of the examples
    in these screens to see the contract code.
  prefs: []
  type: TYPE_NORMAL
- en: Sending and Receiving Ether
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sending ether requires first holding some ether. On the main network, tokens
    either cost money or can be mined. However, this is an unwieldy way to get started
    for most Ethereum beginners.We’ve gone ahead and created an account on the main
    network, just in case you’re interested in holding real ether for speculative
    value, or if you already have friends and collegues who use it for payments. For
    most readers, using test ether (which you can generate for free on the testnet,
    dubbed Ropsten) is better than paying money for real ether for use on the main
    network. Instructions for connecting to Ropsten are presented in Chapter [5](A433414_1_En_5_Chapter.html).For
    now, it’s worth describing how ether is sent and received, without going through
    the motions, because it will help clarify the way the underlying system works.
    Ether is sent via the Send dialog box, shown in Figure [2-8](#Fig8).![A433414_1_En_2_Fig8_HTML.jpg](A433414_1_En_2_Fig8_HTML.jpg)Figure
    2-8.The Send dialog box in Mist makes it easy to send, receive, and check ether
    balances without using a command-line interface.To send ether, you follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.In real life, ask the recipient for their Ethereum address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2.Open Mist. Click Send in the top bar of the Mist wallet. The Send dialog box
    opens.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 3.Choose which wallet you would like to send from,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 4.Paste in the recipient’s address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 5.Enter the amount.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 6.Click Send.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You’ll notice two more options that you can toggle: a data field for entering
    extra text (for example, an order number or thank-you note) and a slider bar for
    choosing a transaction fee. The purpose of transaction fees will become clearer
    in Chapter [6](A433414_1_En_6_Chapter.html). For now, leave the slider in the
    default position, and your transactions will process just fine.NoteFor practical
    purposes, when sending ether, your Mist wallet must be fully synchronized. That
    means that you may need to wait some time for Mist to download the blockchain
    before you can be sure your transactions will process without an error. As you’ll
    see later, this isn’t technically required; recently offline nodes are indeed
    capable of initiating transactions, but only if the user creates the transaction
    in the command line, with up-to-date information about the account in use.[²](#Fn2)To
    receive ether, your node does not have to be synchronized. If you’d like to check
    your balance, you can safely click Launch Application and skip the synchronization
    process when Mist launches.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Ethereum Account Types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Users interact with the Ethereum blockchain through accounts. In Ethereum lingo,
    accounts created and used by humans are called externally owned accounts . This
    is in contrast to contract accounts , as in an address that is occupied by a smart
    contract.NoteExternal accounts aren’t always controlled by humans. Sometimes they’re
    controlled by trusted endpoints somewhere else. The point is, they’re external
    to the EVM.If this distinction is confusing, remember that contracts can take
    actions in lieu of people in the Ethereum network. You can send value (ether)
    to people or you can send it to a smart contract, which will take some automated
    action. For example, a remittance contract might take the sender’s deposit, split
    it in three, and send the amounts onward to three different human relatives. In
    this way, contracts can act in lieu of humans to automate tasks within a decentralized
    organization or to mediate transactions between individuals that would otherwise
    need a counterparty.NoteBoth contract accounts and external accounts are state
    objects. Contract accounts have both account balance state and contract storage;
    external accounts have only balance state. However, it’s important to note that
    there is currently a development proposal under review by the Ethereum development
    community for more abstraction in the EVM. It’s intent is to abstract out the
    duality we have today by turning all accounts into smart contract themselves.
    This way, users are free to define their own security model.To review some of
    the basics:'
  prefs: []
  type: TYPE_NORMAL
- en: A key pair is issued when you register a new account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can register for as many accounts as you like.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an account (a key pair) can be done by any Ethereum node (even when
    it is offline).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no master list of key pairs or accounts anywhere on Earth.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Account numbers are not associated with you, your identity, or your computer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can access the Ethereum network with your private key from any computer
    running an Ethereum node.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing Up and Restoring Your Keys
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While in the Mist browser, and after Mist has completed synchronizing to the
    blockchain, go to the File menu of your operating system and choose the Accounts
    menu, then Backup Accounts. This opens a folder. Inside this folder are text files
    that have long names starting with the date of creation, such as UTC--2016-09-01
    (...) Each of these plain-text files represents an account.Back up this keystore
    folder by zipping it and putting it somewhere safe, such as a USB key or encrypted
    hard drive.If you open one of these text files, you will find your private and
    public key pair, formatted in a certain notation.To restore an account on a different
    node than it was created upon, simply locate the keystore folder by the same method
    described previously. Instead of duplicating the files already there, restoring
    an Ethereum account in Mist simply involves copying a text file containing a private
    key inside the keystore folder, and restarting Mist. For a full tutorial, visit
    [http://backup.eth.guide](http://backup.eth.guide) and [http://restore.eth.guide](http://restore.eth.guide)
    .If you’d like to find the keystore folder on your hard drive via the terminal,
    it’s usually located in the following directories:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Mac: ∼/Library/Ethereum/keystore'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linux: ∼/.ethereum/keystore'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Windows: %APPDATA%/Ethereum/keystore'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The preceding process will back up only your normal accounts. Wallet contracts
    are held in the data folder, so (once you’ve done the exercises in later chapters)
    back that up as well:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Mac: ∼/Library/Application Support/Mist/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linux: ∼/.config/Mist or, in earlier versions, ∼/.config/Chromium/Mist (folder
    is hidden)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Windows: C:\Users\< Your Username >\AppData\Roaming or ∼\AppData\Roaming\Ethereum\keystore'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each time you create a new account in Mist, be sure to grab the key file and
    back it up!
  prefs: []
  type: TYPE_NORMAL
- en: Using Paper Wallets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You may have spotted in the preceding section that an Ethereum node doesn’t
    need to be online to create an account. This has to do with the way the Ethereum
    network generates addresses; it can create a new and valid key pair with near-zero
    chance that key pair already exists.This characteristic of the system allows for
    something most web applications can’t offer: a “paper” account. Sites such as
    MyEtherWallet ( [www.myetherwallet.com](https://www.myetherwallet.com) ) allow
    users to create a key pair right in the browser, stored locally on the machine.
    This site also makes it easy to print your key pair on paper, for safekeeping.This
    is called a paper wallet because it contains a Quick Response (QR) code , allowing
    people to make deposits to your Ethereum account simply by snapping the QR code
    on the paper sheet. In theory, you could go around collecting Ethereum payments
    this way, but you’d need to put that private key into an instance of Mist (or
    another client) to access that ether and send it anywhere else.'
  prefs: []
  type: TYPE_NORMAL
- en: Using Mobile Wallets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are a growing number of mobile wallet applications for iOS and Android
    that store private keys on the mobile device itself. The most popular and trustworthy
    to date is Jaxx, shown in Figure [2-9](#Fig9), which is made by a Canadian software
    company called Decentral. Their software runs on Mac, Linux, Windows, and even
    a few other platforms including Firefox and Chrome. Decentral is operated by Ethereum
    project cofounder Anthony Di Iorio.![A433414_1_En_2_Fig9_HTML.jpg](A433414_1_En_2_Fig9_HTML.jpg)Figure
    2-9.Jaxx is probably your best bet for wallet applications that run on iOS and
    Android. It holds bitcoins, ether, and a selection of other cryptocurrencies.The
    basic interface layout you see in Figure [2-9](#Fig9) has become a fairly standard
    UI in wallet applications. Users are presented with their wallet addresses, and
    can view those same addresses as QR codes. The QR codes make it easier to send
    ether or bitcoins in person, much the same way that Snapchat uses QR codes to
    allow users to follow each other by simply snapping the other user’s code. Here
    you’ll find a list of trustworthy wallet applications: [http://wallets.eth.guide](http://wallets.eth.guide)
    .Before going any further, it’s worth mentioning that an understanding of QR codes
    is all that’s needed to participate in the cryptoeconomy. To send someone ether
    or bitcoins with a mobile wallet, you click Send, scan the other party’s QR code
    (or paste in their public key) and enter an amount. They’ll receive their ether
    within seconds.'
  prefs: []
  type: TYPE_NORMAL
- en: Working with Messages and Transactions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In both Ethereum, transactions are used to refer to state changes in the distributed
    database (that is, in the blockchain). Transactions change account balances within
    the EVM. Messages are data objects passed back and forth across the network between
    smart contracts, and do not necessarily result in any changes being made on the
    chain. For example, if one contract checks the balance of another.
  prefs: []
  type: TYPE_NORMAL
- en: Transactions Change State
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A transaction in Ethereum refers to a piece of data bearing a cryptographic
    signature, which goes in the blockchain, and is thus recorded on every node in
    the network. Every transaction triggers a message to accomplish this state change,
    but messages are also sent by EVM code. These messages are private to the parties
    and are not represented in the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Editing a Global Database
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One reason that blockchain networks like Ethereum are touted as immutable is
    that once a transaction is written to the global shared database, it cannot be
    reversed by any other transaction. In modern payments terminology, this is known
    as a system without chargebacks.A chargeback in North American payment channels
    is defined as the forcible return of funds to an account holder, initiated by
    the issuing bank of the instrument. Because Ethereum has no central issuing authority,
    there is no one to appeal to if you mis-key a transaction. Presently, the only
    way to roll back a transaction is a state fork, which requires all nodes on the
    network to agree to manually revert a transaction. This is an extremely difficult
    and unlikely scenario reserved for network-wide attacks of one form or another.The
    reason for this transaction model is security. Compare sending cryptocurrency
    from one account to the other, to the process of writing a conventional paper
    check. In the latter example, your bank receives news of the outgoing transaction
    from your account. The bank first checks your balance to see whether you have
    the funds to pay the amount you endorsed on the check; if you don’t, the depositor’s
    bank does not increase the deposit account. Instead, you are issued a fee for
    writing a bad check.Transactions in the Ethereum network work similarly. The system
    ensures that the outgoing amount from one account is always added to the destination
    account. If for some reason the destination account can’t be accessed—say because
    the cryptographic signature is not valid—then the source account doesn’t have
    its balance decremented, and thus funds are not lost. In Ethereum, externally-generated
    transactions are always signed cryptographically with the keys of the sender and
    the recipient, making it straightforward to ensure that bad actors can’t create
    transactions, and money can’t be lost just because of a mis-keyed address.
  prefs: []
  type: TYPE_NORMAL
- en: So, What Is a Blockchain?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far we’ve carefully avoided breaking down the concept of blocks, and focused
    on how transactions are initiated. Next we’ll discuss how those transactions are
    cleared and settled by the network. A block is a unit of time that encompasses
    a certain number of transactions, just as a heartbeat is a period of time in which
    a certain quantity of blood is moved through an animal’s body. Inside that period,
    transaction data is recorded; when the unit of time elapses, the next block begins.
    The blockchain represents the history of state changes within the network database
    of the EVM. To quote the Ethereum docs:'
  prefs: []
  type: TYPE_NORMAL
- en: The blocks on the blockchain represent units of time; the blockchain itself
    is a temporal dimension and represents the entire history of states at the discrete
    time points designated by the blocks on the chain. [³](#Fn3)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Smart contracts may be uploaded to the network in a given block, but may not
    actually send any messages or transactions until a much later block.
  prefs: []
  type: TYPE_NORMAL
- en: Paying for Transactions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When a human sends a transaction, the EVM requires a tiny fee to process the
    transaction. This works similarly for the uploading of smart contracts: users
    must pay for the computational effort the EVM will expend running each contract.
    By forcing users to pay for transactions on the EVM, the likelihood of wasteful
    never-ending programs being executed is theoretically reduced. These costs are
    priced in a unit called gas.You can think of gas as a metric indicating the number
    of steps the EVM will have to take to complete the instructions in the transaction.
    If this is a simple instance of one person sending money to another, the transaction
    fee will be cheap, because this requires a small number of computational steps.
    In the case of a complex smart contract, however, the fee will be higher, because
    the EVM has to use its global resources to execute the Solidity code in the contract
    and figure out what transactions to then execute as a result.Transaction senders
    are required to include a gas limit that says how much they’re willing to pay
    to have their transaction executed. Full nodes on the network which are mining,
    or securing the network for pay, provide the hardware for these many transactions
    to be collated, validated, cleared, settled, and stored within the blockchain,
    thus they receive the transaction fees a user pays when he or she sends ether
    to a friend, or executes a smart contract. Miners who execute the transaction
    collect the fee, so an implicit market process is at play. Whether or not a transaction
    executes is determined by the amount of gas the sender is willing to pay. If the
    total number of steps exceeds the gas budgeted for a transaction, all steps are
    rolled back, and no part of the transaction is executed. If a user sends a transaction
    with too low a transaction fee, it will be processed only after some time, or
    not at all.For context, it’s true that every operation costs some amount of gas;
    most operations cost 1 unit of gas. A complex transaction can cost hundreds of
    units of gas. However, in dollar terms, this adds up to very little.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Denominations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like fiat currencies, ether balances and values have standardized denominations
    for small units. All ether balances are typically denominated in ether, and remainders
    are denominated in wei. For example, 10.234 ether = 10,234,000,000,000,000,000
    wei.If you think of ether as dollars, wei are like dimes, quarters, pennies, and
    nickels. Table [2-1](#Tab1) details the wei denominations .Table 2-1.Denominations
    of ether. In the Unit column at left, the equivalent bitcoin denominations are
    provided in parentheses
  prefs: []
  type: TYPE_NORMAL
- en: '| Unit | Wei Value | Number of Wei |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Wei | 1 wei | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| Kwei (babbage) | 1³ wei | 1,000 |'
  prefs: []
  type: TYPE_TB
- en: '| Mwei (lovelace) | 1⁶ wei | 1,000,000 |'
  prefs: []
  type: TYPE_TB
- en: '| Gwei (shannon) | 1⁹ wei | 1,000,000,000 |'
  prefs: []
  type: TYPE_TB
- en: '| Microether (szabo) | 1^(12) wei | 1,000,000,000,000 |'
  prefs: []
  type: TYPE_TB
- en: '| Milliether (finney) | 1^(15) wei | 1,000,000,000,000,000 |'
  prefs: []
  type: TYPE_TB
- en: '| Ether | 1^(18) wei | 1,000,000,000,000,000,000 |'
  prefs: []
  type: TYPE_TB
- en: You can find an ether denomination converter tool at [http://ether.fund/tool/converter](http://ether.fund/tool/converter)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ether
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The easiest way to obtain ether is to convert bitcoins inside the Mist wallet,
    as described earlier in this chapter. You can earn ether by mining, but as mentioned
    previously, this requires initial setup; you can’t mine from within Mist, unless
    it’s on the testnet. (This has to do with the way smart contracts are tested and
    executed on the network, as you’ll see in Chapter [5](A433414_1_En_5_Chapter.html).)If
    you’d like to buy ether with fiat currency, such as US dollars, you need to do
    so on an exchange or with a licensed money transmitter. To see a table of online
    platforms that sell ether, see [http://vendors.eth.guide](http://vendors.eth.guide)
    .Testnet ether is free, as stated earlier in this chapter. Instructions for getting
    test ether from a “faucet” are in Chapter [5](A433414_1_En_5_Chapter.html), with
    more details about creating transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Anonymity in Cryptocurrency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bitcoins and ether are not anonymous payment instruments. Anyone who knows your
    public key can look on the blockchain and see the dates and amounts of transactions
    coming in and out of your account. From this data, they might be able to put together
    a pattern of transactions from which they could deduce your activities. Federal
    authorities are already using machine-learning transactions to decode spending
    patterns on dark-market sites such as AlphaBay.[⁴](#Fn4)Anonymity, secrecy, and
    privacy in cryptocurrency are generally conflated by newbies, sometimes with disastrous
    ends. Bitcoin and Ethereum addresses are pseudonymous by nature; they’re not linked
    to your real name or information. But every transaction you send is public, in
    the sense that anyone can see the transaction on the blockchain. This is why public
    blockchains are touted for their transparency; if you know someone’s public key,
    you can look up all their transactions.Data within smart contracts themselves
    are encoded but not encrypted. Encryption is used only to hash large datasets
    and verify transaction senders and recipients. However, you can encrypt data yourself
    before putting it into an Ethereum smart contract, if you’d like to use the public
    Ethereum chains in a private manner.As you’ll see later, every Ethereum transaction
    leaves room for an extra payload of text labeled Input Data. Don’t be tempted
    to store secret things here for safekeeping unless you plan to encrypt them. Even
    then, it is generally a bad idea to store strings such as passwords or account
    pin numbers on the Ethereum blockchain because it is public and can never be removed.
    Anyone can explore a blockchain such as Ethereum by using a web-accessible application
    known as a blockchain explorer.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain Explorers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As with Bitcoin, every transaction in and out of the EVM is recorded publicly.
    The transaction shown in Figure [2-10](#Fig10) is a typical one for the Ethereum
    blockchain. Clicking the sender or recipient address allows you to see the transactions
    for that address since it was created. This screen capture is from Etherscan (
    [https://etherscan.io](https://etherscan.io) ), but anyone is free to make a blockchain
    explorer for the public Ethereum chain.![A433414_1_En_2_Fig10_HTML.jpg](A433414_1_En_2_Fig10_HTML.jpg)Figure
    2-10.All ether and bitcoin transactions are public. Some users avoid having their
    public key linked to their identity by creating a new account for every transaction.
    Others use the same public key for years, advertising it as a conduit for donations
    or contributions of one kind of another.NoteBlockchain explorers show you a historical
    record of all transactions in the network, and allow you to string together a
    history of transactions. There’s no need to manually record your transaction details!As
    you can see in Figure [2-10](#Fig10), transactions have quite a few attributes.
    We’ll talk more about what these fields mean in Chapter [3](A433414_1_En_3_Chapter.html),
    but for now here’s the takeaway: sending and receiving ether is private to the
    participants and anyone they tell, because public keys are pseudonymous by nature—but
    these transactions are not strictly secret, in the sense that all transactions
    are publicly viewable on the blockchain. It’s easy to trace money hopping from
    one account to another.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far we’ve moved quickly. In this chapter, you learned more about wallets
    and Ethereum clients. If you began synchronizing your instance of Mist as you
    were reading this chapter, it’s probably not even finished yet!In the meantime,
    let’s get prepared for deploying a smart contract.Although you won’t need access
    to an Ubuntu machine for the next chapter, it’s worth lining up for Chapters [4](A433414_1_En_4_Chapter.html),
    [5](A433414_1_En_5_Chapter.html), [8](A433414_1_En_8_Chapter.html), and [9](A433414_1_En_9_Chapter.html).
    In the meantime, move on to the next chapter, where you’ll learn how the Ethereum
    Virtual Machine works.Footnotes[1](#Fn1_source)Gavin Wood, GitHub, “Ethereum Yellow
    Paper,” [https://github.com/ethereum/yellowpaper](https://github.com/ethereum/yellowpaper)
    , 2014.[2](#Fn2_source)StackExchange, “When Transferring Ether, Who Needs to be
    in Sync with the Blockchain,” [https://ethereum.stackexchange.com/questions/2273/when-transferring-ether-who-needs-to-be-in-sync-with-the-blockchain](https://ethereum.stackexchange.com/questions/2273/when-transferring-ether-who-needs-to-be-in-sync-with-the-blockchain)
    , 2016.[3](#Fn3_source)Ethdocs.org, “Account Types, Gas, and Transactions,” [http://ethdocs.org/en/latest/contracts-and-transactions/account-types-gas-and-transactions.html](http://ethdocs.org/en/latest/contracts-and-transactions/account-types-gas-and-transactions.html)
    , 2016.[4](#Fn4_source)Science Magazine, “Why Criminals Can’t Hide Behind Bitcoin,”
    [www.sciencemag.org/news/2016/03/why-criminals-cant-hide-behind-bitcoin](http://www.sciencemag.org/news/2016/03/why-criminals-cant-hide-behind-bitcoin)
    , 2016.
  prefs: []
  type: TYPE_NORMAL
