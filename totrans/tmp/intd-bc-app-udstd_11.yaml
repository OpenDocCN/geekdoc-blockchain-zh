- en: © The Author(s), under exclusive license to APress Media, LLC, part of Springer
    Nature 2022J. T. GeorgeIntroducing Blockchain Applications[https://doi.org/10.1007/978-1-4842-7480-4_11](https://doi.org/10.1007/978-1-4842-7480-4_11)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 作者，独家许可给 APress Media, LLC，属于 Springer Nature 2022J. T. George介绍区块链应用[https://doi.org/10.1007/978-1-4842-7480-4_11](https://doi.org/10.1007/978-1-4842-7480-4_11)
- en: 11. Engineering Based on Models
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11. 基于模型的工程
- en: Joseph Thachil George^([1](#Aff2)  )(1)Rome, Italy
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Joseph Thachil George^([1](#Aff2))(1)意大利罗马
- en: Engineering-based models is an application development technique that prioritizes
    the creation of models or abstractions that are more closely related to specific
    domain notions than computational or algorithmic principles. This technique boosts
    productivity by optimizing system compatibility, simplifies the design process,
    and fosters individual and team communication and collaboration on the system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 基于工程的模型是一种应用开发技术，其优先考虑创建与特定领域概念更相关的模型或抽象，而不是计算或算法原理。这种技术通过优化系统兼容性来提高生产率，简化设计流程，并促进个人和团队对系统的沟通和协作。
- en: Models allow technical and non-technical stakeholders to have the same vision
    and understanding, as well as promote and encourage interaction between them.
    Models also help with project planning by providing a clearer view of the system
    to be built and enabling for managing projects based on objective criteria.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 模型使技术和非技术利益相关者拥有相同的视野和理解，并促进和鼓励他们之间的互动。模型还通过提供对要构建的系统的更清晰视图，并基于客观标准管理项目来帮助项目规划。
- en: 11.1 Model-Driven Approach to Blockchain
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.1 面向区块链的模型驱动方法
- en: In recent years, the notion of blockchain has acquired great traction in practice
    and research, as it offers a practical solution to the problems of anonymity and
    accountability in dispersed situations involving numerous parties that must share
    data and cooperate securely. However, the influence of business core network and
    configuration on successfully using blockchain technology remains largely unknown
    to date. This book offers a model-driven method that captures the features of
    current blockchain-driven business networks by combining an ontology with a layer
    model.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，区块链的概念在实践和研究中获得了巨大的关注，因为它为涉及许多必须共享数据并安全合作的各方的分散情况提供了实际解决方案。然而，业务核心网络和配置对成功使用区块链技术的影响目前仍然大部分未知。本书提供了一种模型驱动的方法，通过将本体与分层模型相结合，捕获当前基于区块链的业务网络的特征。
- en: The levels help describe such networks in detail. The Blockchain Business Network
    Ontology (BBO) is also introduced, which formalizes the ideas and characteristics
    of the various components of a blockchain network. I demonstrate the usefulness
    of this work by assessing and applying it to a real-world blockchain use case.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 各个层次有助于详细描述这样的网络。还介绍了区块链业务网络本体（BBO），它正式化了区块链网络各个组成部分的思想和特征。我通过评估和应用到实际区块链用例来证明这项工作的有用性。
- en: To develop the blockchain business model, you need to have the approach of *model-driven
    engineering*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要开发区块链业务模型，您需要采用*模型驱动工程*的方法。
- en: 11.2 Model-Driven Development
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.2 模型驱动开发
- en: By bringing together diverse viewpoints with varied degrees of abstraction,
    a model-based method aids in the understanding of a system. “A client is able
    to build on a model that includes a system’s features and characteristics, which
    can then be used to completely rebuild the system in this context.” Following
    a model-driven architecture or design helps in a variety of ways to comprehend
    and describe a system.^([1](#Fn1))
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过汇集具有不同抽象程度的多样化观点，基于模型的方法有助于理解系统。“客户能够建立一个包含系统特性和特征的模型，然后可以用于在这个背景下完全重建系统。”
    遵循基于模型的架构或设计有多种方法可以理解和描述系统。^([1](#Fn1))
- en: The links between the various parts, as well as their descriptions, contribute
    to a broad knowledge of the system, while also assisting in the development of
    scalable solutions, because a model is built on a well-defined nomenclature and
    taxonomy.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各部分之间的链接以及它们的描述有助于对系统的广泛了解，同时也有助于开发可扩展的解决方案，因为模型建立在明确定义的命名和分类法上。
- en: To make the development of a system easier, an architectural frame may be used
    to mix and modify multiple models and explanatory levels.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了使系统的开发更容易，可以使用架构框架来混合和修改多个模型和解释层次。
- en: Automat may be used for a group of formalized metamodels, which can then be
    merged and converted into models with a greater degree of information.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用Automat来形成一组正式化的元模型，然后将其合并并转换为具有更高信息度的模型。
- en: Technical standards are a necessary basis for expanding model-based effort acceptability
    and implementation.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术标准是扩展基于模型的工作可接受性和实施的必要基础。
- en: 11.2.1 The Blockchain Layer Model
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 11.2.1 区块链层模型
- en: Creating various models that specifically address diverse elements of a larger
    system aids in the development of a thorough knowledge of that system or phenomena.
    “Various levels of abstraction may be examined using these models, which can then
    be overlaid onto each other or whose information transmitted to other levels in
    order to comprehend the full scope of a concept.”¹
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 创建专门解决较大系统的不同要素的各种模型有助于全面了解该系统或现象。 “可以使用这些模型来检查不同层次的抽象，然后将它们叠加在一起，或将其信息传递到其他层次，以便理解概念的全部范围。”¹
- en: As a result, three fundamental layers (see Figure [11-1](#Fig1)) have been defined
    to make it easier to describe blockchain-driven networks in a sound and comprehensive
    manner. These layers include everything from a business model perspective to a
    code-based viewpoint. All of these levels are essential because we anticipate
    blockchain technology to have a unique impact on each of them.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了更容易地以健全和全面的方式描述基于区块链的网络，定义了三个基本层（见图[11-1](#Fig1)）。这些层包括从业务模型角度到基于代码的观点的一切。所有这些层都是必不可少的，因为我们预计区块链技术对每一层都会产生独特的影响。
- en: Because the layers are interrelated, the technological implementation has an
    impact on the network composition, which has an effect on the business model.
    Figure [11-1](#Fig1) is an example of layered blockchain.![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig1_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig1_HTML.jpg)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于各层相互关联，技术实现对网络构成产生影响，这对商业模型也有影响。[11-1](#Fig1) 图是分层区块链的一个示例。![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig1_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig1_HTML.jpg)
- en: Figure 11-1
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-1
- en: Blockchain layers
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链层
- en: In order to create a model-driven method for defining blockchain transactions
    and blocks layers, you’ll see how to build on these foundations with the help
    of models and metamodels.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个基于模型的方法来定义区块链交易和区块层，您将看到如何借助模型和元模型来建立这些基础。
- en: 11.2.2 Models and Metamodels
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 11.2.2 模型和元模型
- en: This section covers the fundamental ideas that underpin MDE, such as system,
    model, metamodel, as well as their relationships.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了支撑 MDE 的基本思想，例如系统、模型、元模型及其关系。
- en: The *system* is defined in the context of MDE as “a general notion for denoting
    a software application, software platform, or other software artefact.” ^([2](#Fn2))
    A system can also be built up of various subsystems, as illustrated in Figure
    [11-2](#Fig2), and it can interact with other systems. (Systems may interact with
    other systems.)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*系统*在 MDE 的背景下被定义为“用于表示软件应用程序、软件平台或其他软件工件的一般概念。”^([2](#Fn2)) 一个系统也可以由各种子系统组成，如图
    [11-2](#Fig2) 所示，并且可以与其他系统交互。（系统可能与其他系统交互。）'
- en: 'A model is an abstraction of phenomena in the real world: a metamodel is a
    further abstraction, which highlights properties of the model itself. A model
    conforms to its metamodel in the same way that a computer program conforms to
    the grammar of the programming language in which it is written.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 模型是现实世界现象的抽象：元模型是进一步的抽象，突出了模型本身的特性。模型与其元模型的关系类似于计算机程序符合其所编写的编程语言的语法。
- en: 'Domains where metamodels are used:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用元模型的领域：
- en: A schema for semantic data that needs to be exchanged or stored
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于交换或存储语义数据的模式
- en: A language that supports a particular method or process
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持特定方法或流程的语言
- en: A language to express additional semantics to existing information
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于表达对现有信息的附加语义的语言
- en: The following sections cover the details of models and metamodels.![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig2_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig2_HTML.jpg)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下各节详细介绍了模型和元模型的细节。![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig2_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig2_HTML.jpg)
- en: Figure 11-2
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-2
- en: System definition
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 系统定义
- en: 11.2.3 The Model
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 11.2.3 模型
- en: A *model* depicts a system that might or might not exist today or in the future.
    It’s a term of reference considered valid as an example or prototype and worthy
    of imitation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*模型*描绘了一个今天或未来可能存在的系统。这是一个被视为示例或原型的参考术语，并值得模仿。'
- en: 'A model is worth considering since it includes the following details:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一个模型值得考虑，因为它包括以下细节：
- en: A model can be a collection of assertions about the device/system which goes
    into the investigation.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型可以是有关进入调查的设备/系统的断言集合。
- en: A model is the simplest version of a system that was formed with a specific
    goal in mind, and it should be capable of answering queries in place of the actual
    system.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型是根据特定目标形成的系统的最简版本，应该能够回答查询，而不是实际系统。
- en: A model is a simplified edition of a system that was formed with a particular
    objective in mind, and it can reply to the queries for the real program.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型是根据特定目标形成的系统的简化版本，并且可以回答对真实程序的查询。
- en: A model, on the other hand, is a system in and of itself, with its own identity,
    complexity, constituents, linkages, and so on.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，一个模型本身就是一个系统，具有自己的身份、复杂性、组成部分、链接等。
- en: In particular, while considering a model of a model, you must keep in mind that
    one of them serves as a model of a model and, as a result, is a *system*. In summary,
    “model” is a system that helps describe and provide answers to the system under
    study without having to look at it directly, as shown in Figure [11-3](#Fig3).![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig3_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig3_HTML.jpg)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，在考虑模型的模型时，必须记住其中一个充当模型的模型，并且因此是一个*系统*。简而言之，“模型”是一个系统，它有助于描述和提供对研究对象系统的答案，而无需直接查看它，如图[11-3](#Fig3)所示。![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig3_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig3_HTML.jpg)
- en: Figure 11-3
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-3
- en: Relationships between a model and a system
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 模型和系统之间的关系
- en: There is also a relationship between the model and the system. With the help
    of models, you can design a system. By looking at models, you can understand how
    the system works. On the other hand, you can make a number of models based on
    the system architecture. That is the reason you can say that a model is a simplified
    edition of a system, and it is formed with a particular goal in the mind.¹
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 模型和系统之间也存在关系。借助模型，你可以设计一个系统。通过观察模型，你可以理解系统的运作方式。另一方面，你可以根据系统架构制定多个模型。这就是你可以说模型是系统的简化版本，并且是带有特定目标的原因。¹
- en: 11.2.4 The Metamodel
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 11.2.4 元模型
- en: A *metamodel* is a type of model that specifies the architecture of a modeling
    language, based on prior research. However, the following facts must be understood
    from Figure [11-4](#Fig4).![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig4_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig4_HTML.jpg)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*元模型*是一种类型的模型，它指定了基于先前研究的建模语言的体系结构。但是，必须从图[11-4](#Fig4)中了解以下事实。![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig4_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig4_HTML.jpg)'
- en: Figure 11-4
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-4
- en: Relationships between a metamodel and a model
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 元模型和模型之间的关系
- en: We can say that the modeling language will be a set of models, as defined by
    the relationship *Element Of*  between *model* and *modeling language* (or a model
    is an element of a modeling language).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以说，建模语言将是一组模型，由*模型*与*建模语言*之间的关系*元素属于*所定义（或者说一个模型是建模语言的一个元素）。
- en: We can also say that this approach draws its rules from the distinction between
    the concept of a model and that of a metamodel.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以说，这种方法从模型的概念和元模型的概念之间的区别中得出其规则。
- en: 'A UML model  is a representation that captures the important aspects of everything
    you want to model, from a certain point of view and under certain limitations.
    A model is structured in diagrams (UML diagrams), which represent the graphic
    means of expression. The model consists of three basic parts:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 UML 模型是一个捕捉您想要建模的一切重要方面的表示，从某种角度和在某些限制下。模型以图表（UML 图表）结构化，这些图表表示图形表达的手段。模型由三个基本部分组成：
- en: '**Classifiers** **:** They describe a set of objects. An object is an individual
    entity with a state and relationships with other objects.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分类器（Classifiers）：** 它们描述了一组对象。对象是具有状态并与其他对象有关系的个体实体。'
- en: '**Events (Events):** They describe a set of possible occurrences. An occurrence
    is something that happens and has consequences within the system.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件（Events）：** 它们描述了一组可能发生的事件。事件是指在系统内发生并产生后果的事情。'
- en: '**Actions (Behaviors**): They describe a set of possible executions. An execution
    represents the fulfillment of an algorithm in accordance with a set of rules*.*^([3](#Fn3))'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动作（行为）：** 它们描述了一组可能的执行。执行表示根据一组规则执行算法的实现。'
- en: UML diagrams, on the other hand, contain graphic elements that represent elements
    of the model. For example, two associated classes defined within a package diagram
    are two types of classifiers and are represented by two rectangular symbols and
    a link representing the association symbol.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，UML 图表包含代表模型元素的图形元素。例如，在包图中定义的两个相关类是两种分类器，并由两个矩形符号和一个表示关联符号的链接表示。
- en: 11.3 Building the Metamodel and Model
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.3 构建元模型和模型
- en: 'How to build the first metamodel is a well-known and recurrent metamodel problem.
    The official OMG specification describes the semantics of UML by breaking down
    the architecture in the package. Within each package, the elements of the model
    are defined in the following terms in a semiformal way:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如何构建第一个元模型是一个众所周知且反复出现的元模型问题。官方的 OMG 规范通过在包中详细描述 UML 的语义来分解架构。在每个包内，模型的元素以半正式的方式以下列方式定义：
- en: '**Abstract-syntax** **:** Presented, through class diagrams expressed with
    the UML notation, the UML metamodel, its concepts (i.e. meta-classes), and its
    relationships and constraints. To these are added parts of text written in natural
    language (English).'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**抽象语法（Abstract-syntax）：** 通过用 UML 符号表示的类图来展示 UML 元模型，它的概念（即元类），以及它们的关系和约束。其中还加入了用自然语言（英语）编写的部分文本。'
- en: '**Connotation** **:** Provided in natural language, it includes the description
    of elements that make up the UML metamodel and their relationships.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内涵** **：** 以自然语言提供，包括描述构成 UML 元模型及其关系的元素的描述。'
- en: '**Formedness rules** **:** The rules and constraints to define models that
    are valid. These are expressed using both a formal language, OCL, and natural
    language.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**形成规则** **：** 定义有效模型的规则和约束。这些使用形式语言 OCL 和自然语言来表达。'
- en: 'The complexity of the UML metamodel is managed by organizing it into three
    packages: Foundation, Behavioral Elements, and Model Management. The first two
    are further decomposed into packages, each of which contains semantically related
    elements. Here is a brief description of each package:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: UML 元模型的复杂性通过将其组织成三个包来管理：Foundation（基础）、Behavioral Elements（行为元素）和Model Management（模型管理）。前两者进一步分解为包，每个包包含语义相关的元素。以下是对每个包的简要描述：
- en: '**Behavioral Elements** **:** This package specifies the structure needed to
    define the dynamic behaviors of a model. It consists of five subpackages.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行为元素：** 此包指定了定义模型动态行为所需的结构。它由五个子包组成。'
- en: '**Foundation:** This package represents the language infrastructure that specifies
    the structure static modeling. It is divided into three subpackages.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础：** 此包代表了规定了静态建模结构的语言基础设施。它分为三个子包。'
- en: '**Model Management:** This package defines, among others, the model, package
    and subsystem necessary to organize different models and to group together elements
    that have features in common.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型管理：** 此包定义了组织不同模型和将具有共同特征的元素组合在一起所需的模型、包和子系统等内容。'
- en: 11.4 A Modeling Language’s Category
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.4 建模语言的类别
- en: 'According to professionals, there are some other ways you can define modeling
    languages. They say a modeling language may be divided into two types: specific
    and domain-specific. They are differentiated by a higher number of generic constructs,
    which facilitates their application in a variety of areas.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 根据专业人士的说法，你可以定义建模语言的一些其他方式。他们说，建模语言可以分为两种类型：具体和领域特定。它们通过更高数量的通用构造进行区分，这有助于它们在各种领域的应用。
- en: Because they provide comprehensive collection of structures and marking for
    defining and explaining software applications based on the object-oriented paradigm,
    or any type of system as defined by the system engineering discipline, UML and
    SysML are popular instances of specific and domain specific.¹
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它们提供了定义和解释基于面向对象范式的软件应用程序或系统工程学科定义的任何类型系统的综合结构和标记，因此 UML 和 SysML 是具体和领域特定的热门实例。
- en: DSLs, on the other hand, typically use a smaller set of structures or ideas
    that are more directly connected to the application area. Because a DSL is defined
    using domain concepts, it is typically easier to understand, grasp, validate,
    and interact with, facilitating collaboration between developers and domain specialists.
    Some argue that DSLs can improve productivity, dependability, reliability, and
    portability.¹
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，DSL 通常使用一组更直接与应用领域相关的结构或思想。由于 DSL 是使用领域概念定义的，因此通常更容易理解、掌握、验证和交互，从而促进开发人员和领域专家之间的协作。有人认为
    DSL 可以提高生产力、可靠性、可靠性和可移植性。¹
- en: Yet, there are also drawbacks to adopting a DSL, such as the expense of learning,
    creating, and sustaining a contemporary language, as well as the production tools
    needed to use it.![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig5_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig5_HTML.jpg)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，采用 DSL 也有缺点，比如学习、创建和维护现代语言的成本，以及使用它所需的生产工具。![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig5_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig5_HTML.jpg)
- en: Figure 11-5
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-5
- en: Modeling language
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 建模语言
- en: Others, argue that, because of the high quality and complexity of today’s language
    workstations, tool support is no longer a significant obstacle.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 其他人则认为，由于当今语言工作站的高质量和复杂性，工具支持不再是一个重要障碍。
- en: Furthermore, findings suggest that software language engineers would not even
    evaluate their native languages, implying that additional study in the subject
    of software language processes, especially in the development of design, implementation,
    and assessment, is necessary.¹
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，研究结果表明，软件语言工程师甚至不会评估他们的本土语言，这意味着在软件语言过程领域，尤其是在设计、实现和评估方面，需要进行额外的研究。¹
- en: As illustrated in Figure [11-6](#Fig6), a modeling language may be classified
    by its software architecture attributes and organized by one or more views.![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig6_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig6_HTML.jpg)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如图[11-6](#Fig6)所示，建模语言可以根据其软件架构属性进行分类，并由一个或多个视图进行组织。![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig6_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig6_HTML.jpg)
- en: Figure 11-6
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-6
- en: Categorizing a modeling language and the perspectives that go with it
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对建模语言及其相关视角进行分类
- en: 11.5 Designing a Metamodel for CPSs
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.5 为 CPS 设计元模型
- en: CPSs are complicated systems that monitor and regulate the physical environment
    while also assisting humans in their duties.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: CPS 是监控和调节物理环境的复杂系统，同时也协助人类完成任务。
- en: CPS are networked hybrid systems that combine software and hardware. As programmers,
    engineers, and scientists collaborate to build and implement such systems, they
    run into obstacles. Experts from many fields must comprehend the system in order
    to collaborate, regardless of their field.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: CPS 是结合软件和硬件的网络混合系统。作为程序员、工程师和科学家共同建立和实施这种系统时，他们会遇到障碍。无论他们的领域如何，来自许多领域的专家都必须理解系统才能合作。
- en: We suggest a cyber-physical systems metamodel and an educational research method
    that programmers, engineers, and scientists can use, reuse, and modify for new
    applications of cyber-physical systems.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提出了一个网络物理系统元模型和一个教育研究方法，程序员、工程师和科学家可以用、重复使用并修改为网络物理系统的新应用。
- en: Data scientists and programmers utilize this metamodel to build a cyber-physical
    system that provides M1 system models that are understandable across fields. The
    metamodel includes both smart things and humans, which are often present in any
    cyber-physical system’s design. It uses a composite architecture to enable the
    creation of cyber-physical systems with smart elements like leaf nodes.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学家和程序员利用此元模型构建出可跨领域理解的 M1 系统模型的网络物理系统。该元模型包括了智能物件和人类，在任何网络物理系统设计中通常都会出现。它使用复合架构来实现具有智能元素的网络物理系统的创建，如叶子节点。
- en: 11.6 CPS Metamodel Examples
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.6 CPS 元模型示例
- en: 'Consider the following examples:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下例子：
- en: '**Transportation**: System for air traffic control and transportation management.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交通**：空中交通控制系统和交通管理系统。'
- en: '**Health, medical:** Medical gadgets, health monitoring systems, telerobotic
    surgical-systems.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**健康，医疗**：医疗设备、健康监测系统、远程机器人手术系统。'
- en: '**Manufacturing**: Automobiles, airplanes, factory automation systems, chemical
    process tracking, autonomous robotic spaces, and industry networks are all examples
    of industrial networks.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**制造业**：汽车、飞机、工厂自动化系统、化工过程跟踪、自主机器人空间和工业网络都是工业网络的例子。'
- en: '**Environmental**: Farming, environmental, and geological systems are all examples
    of environmental science systems.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境**：农业、环境和地质系统都是环境科学系统的例子。'
- en: '**Aerospace**: Space exploration systems.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**航空航天**：空间探索系统。'
- en: '**Buildings**: Assistive living and smart places in everyday life.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**建筑**：生活辅助和智能生活环境。'
- en: '**Public environment**: Intelligent water supply networks and emergency management.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公共环境**：智能供水网络和应急管理。'
- en: '**Cyber-physical public systems**: These are CPSs that also consider human
    understanding, technological capabilities, and sociocultural factors.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络物理公共系统**：这些是同时考虑人类理解、技术能力和社会文化因素的网络物理系统。'
- en: The *meta-object facility* is introduced in the following section, backed by
    a base-metamodel for cyber-physical systems.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*元对象设施* 在下一节中介绍，支持着基于基本元模型的网络物理系统。'
- en: 11.6.1 Meta-Object Facility
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 11.6.1 元对象设施
- en: The meta-object facility is a standard for model-driven engineering of the Object
    Management Group. This comes from the UML language; Object Management Group needed
    a metamodeling architecture to define UML.^([4](#Fn4))
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 元对象设施是对象管理组织（Object Management Group）的模型驱动工程的标准。这源自于 UML 语言；对象管理组织需要一个元模型架构来定义
    UML。^([4](#Fn4))
- en: It uses object-modeling methods to define any form of metadata. Even though
    it is usually associated with UML, it is independent from it.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用对象建模方法来定义任何形式的元数据。尽管通常与 UML 相关联，但它是独立于 UML 的。
- en: To specify any type of metadata, MOF uses object modeling techniques. Even though
    it is sometimes confused with UML, it is not the same thing.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了指定任何类型的元数据，MOF 使用对象建模技术。即使有时会与 UML 混淆，但它并不是一回事。
- en: We use the stereotype mechanism of UML to create and expand intelligent objects
    on the CPS metamodel. M1-defined classes can be extended and reused utilizing
    the metamodel as a basis. A system is represented by these classes. The top-level
    design of an application on M1 is referred to as top-level design.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 UML 的原型机制来创建和扩展 CPS 元模型上的智能对象。可以利用元模型作为基础扩展和重用 M1 定义的类。这些类代表了一个系统。在 M1
    上的应用的顶层设计被称为顶层设计。
- en: A *system-of-systems* (SoS) is a combination of a finite set of independent
    and operable constituent systems that are networked together for a length of time
    in order to achieve a higher purpose. An SoS integrates CSs.![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig7_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig7_HTML.jpg)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*系统-系统*（SoS）是一组独立且可操作的组成系统的有限组合，它们在一定时间内网络连接在一起以实现更高的目的。一个 SoS 整合了 CS。![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig7_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig7_HTML.jpg)'
- en: Figure 11-7
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-7
- en: A categorization of a modeling language and the perspectives that go with it
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 建模语言的分类以及与之相关的视角
- en: A *constituent system* includes a computer network (the cybersystem), a controlled
    item (the physical system), and perhaps human interaction.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*组成系统* 包括计算机网络（网络系统），受控项（物理系统）以及可能的人类交互。'
- en: 'An SoS could be:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 SoS 可以是：
- en: '**Directed SoS:** An SoS having a centralized purpose and ownership of all
    CSs. A collection of control systems in an unmanned rocket is an example.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有向 SoS：** 具有集中目的和所有 CS 所有权的 SoS。 无人火箭中的控制系统集合就是一个例子。'
- en: '![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig8_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig8_HTML.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig8_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig8_HTML.jpg)'
- en: Figure 11-8
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-8
- en: An SoS integrates a CS
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: SoS 整合了一个 CS
- en: '![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig9_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig9_HTML.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig9_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig9_HTML.jpg)'
- en: Figure 11-9
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-9
- en: An SoS
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 SoS
- en: '**Recognized SoS** **:** CSs are owned independently, but there are cooperative
    agreements among the owners to achieve a common goal.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公认的 SoS** **：** CS 是独立拥有的，但所有者之间存在合作协议以实现共同目标。'
- en: '**Collaboration SoS** **:** Volunteer interactions among independent CSs with
    the objective of achieving a goal that benefits the individual CS.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协作 SoS** **：** 独立 CS 之间的志愿互动，旨在实现有利于个别 CS 的目标。'
- en: '**Virtual SoS** **:** Core alignment and lack of a primary purpose.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟 SoS** **：** 核心对齐和缺乏主要目的。'
- en: Each CS has an interface based on which services are made available to other
    CSs, such as Reliable Interface (RUI), which serves as a CS’s interface via which
    the CS’s services are made available to other CSs.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 每个CS都有一个基于哪些服务可用于其他CS的接口，例如可靠接口（RUI），它作为CS的接口，通过该接口将CS的服务提供给其他CS。
- en: 'RUIs are made up of the following components:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: RUI由以下组件组成：
- en: Relied Upon Message Interface (RUMI)
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖消息接口（RUMI）
- en: Relied Upon Physical Interface (RUPI)
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖物理接口（RUPI）
- en: '![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig10_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig10_HTML.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig10_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig10_HTML.jpg)'
- en: Figure 11-10
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图11-10
- en: SOS and CS
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: SOS和CS
- en: '![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig11_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig11_HTML.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![../images/520777_1_En_11_Chapter/520777_1_En_11_Fig11_HTML.jpg](../images/520777_1_En_11_Chapter/520777_1_En_11_Fig11_HTML.jpg)'
- en: Figure 11-11
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图11-11
- en: RUMI and RUPI
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: RUMI和RUPI
- en: 11.7 Review Questions
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.7回顾问题
- en: '1.'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: “Model-driven engineering is a software development approach that emphasizes
    the creation of models or abstractions that are closer to specific domain notions
    than computational or algebraic concepts.” Is this statement correct or incorrect?
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “模型驱动工程是一种软件开发方法，强调创建比计算或代数概念更接近特定领域概念的模型或抽象。” 这个陈述是正确还是不正确？
- en: 2.The modeling language is established by which of the following?
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2.建立建模语言由以下哪个完成？
- en: a.
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: a.
- en: By a collection of all possible models that correspond to the metamodel in issue,
    which is referred to as a metamodel.
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过与问题中的元模型对应的所有可能模型的集合，这被称为元模型。
- en: b.
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: b.
- en: By a metamodel, which is a collection of models that adhere to the metamodel
    in question.
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过元模型，这是符合问题中的元模型的模型集合。
- en: c.
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: c.
- en: By the metamodel, which is a collection of all feasible models that adhere to
    a certain metastate.
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过元模型，即符合特定元状态的所有可行模型的集合。
- en: d.
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: d.
- en: None of the above.
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以上都不是。
- en: 3.Which of the following statements is correct for *event*?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3.下列关于*事件*的哪项陈述是正确的？
- en: a.
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: a.
- en: Virtual SoS is characterized by the absence of a core goal and central alignment.
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虚拟SoS的特点是缺乏核心目标和中心对齐。
- en: b.
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: b.
- en: Virtual SoS has a lack of purpose and central alignment.
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虚拟SoS缺乏目的和中心对齐。
- en: c.
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: c.
- en: Virtual SoS is characterized by a lack of focus and alignment.
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虚拟SoS的特点是缺乏重点和对齐。
- en: d.
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: d.
- en: All of these.
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有这些。
- en: '4.'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: “Metamodels include UML and the Common Warehouse metamodel.” Is this statement
    correct or incorrect?
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “元模型包括UML和公共仓储元模型。” 这个陈述是正确还是不正确？
- en: 11.8 Review Answers
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.8回顾答案
- en: '1.'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: 'Answer: Correct, Model-driven engineering is a software development methodology
    that focuses on the construction of models or abstractions that are more closely
    related to specific domain concepts than computational or algebraic concepts.'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 答案：正确，模型驱动工程是一种软件开发方法论，其重点是构建与特定领域概念更相关的模型或抽象，而不是计算或代数概念。
- en: '2.'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: 'Answer: A, A collection of all possible models that correspond to the metamodel
    in issue is referred to as a metamodel.'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 答案：A，与问题中的元模型对应的所有可能模型的集合被称为元模型。
- en: '3.'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: 'Answer: A, A virtual SoS is characterized by the absence of a core goal and
    central alignment.'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 答案：A，虚拟SoS的特征是缺乏核心目标和中央对齐。
- en: '4.'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: 'Answer: Correct, UML and the Common Warehouse Metamodel are examples of metamodels.'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 答案：正确，UML和公共仓库元模型是元模型的示例。
- en: 11.9 Summary
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.9 总结
- en: Ever since humans started using computers, researchers have worked to raise
    the level of abstraction. Model-driven engineering (MDE) is the natural continuation
    of this trend, as well as a promising approach to address complexity of platforms
    and the inability of third-generation languages to alleviate this complexity and
    express dominance concepts effectively.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 自从人类开始使用计算机以来，研究人员一直致力于提高抽象级别。模型驱动工程（MDE）是这一趋势的自然延续，也是解决平台复杂性和第三代语言无法缓解这种复杂性以及有效表达主导概念的有前途的方法。
- en: The Model-Driven Engineering (MDE) is at the top of the hierarchy and therefore
    the most abstract. It is recognized as a software engineering paradigm and considers
    models not only as supporting documentation, but also as a central focus of development
    in any engineering discipline and application domain. Model-Driven Development
    (MDD) is slightly lower in the hierarchy than MDE. This approach focuses on the
    disciplines of analysis, design, implementation, and requirements.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 模型驱动工程（MDE）处于层次结构的顶端，因此是最抽象的。它被认为是一种软件工程范 paradigm，将模型视为开发的核心焦点，在任何工程学科和应用领域都不仅仅是支持文档。基于模型的开发（MDD）在层次结构中略低于MDE。这种方法侧重于分析、设计、实现和需求的学科。
- en: The concrete MDD approaches tend to define modeling languages to specify the
    system under study at different levels of abstraction. Model-Based Testing (MBT)
    is focused on the automation of the testing discipline. Testing models are used
    to represent the desired behavior of the system under study. Model-Driven Architecture
    (MDA) is an approach proposed by OMG and is mainly focused on the definition of
    models and their transformations.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 具体的MDD方法倾向于定义建模语言，以在不同抽象级别上指定研究系统。基于模型的测试（MBT）侧重于测试学科的自动化。测试模型用于表示研究系统的期望行为。模型驱动架构（MDA）是OMG提出的一种方法，主要集中于模型的定义及其转换。
- en: To create an effective block chain application, systems must first be modeled.
    The previously-mentioned technique must be included when modeling systems. When
    you apply blockchain technology in the distributed system, as part of the modeling
    of distributed systems, you also need to model the blockchain layers in order
    to have a clear picture of the system architecture and systems of systems (SoS)
    functionality. All these models can be done with the help of the BLOCKLY 4SOS
    modeling technique.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建有效的区块链应用程序，首先必须对系统进行建模。在建模系统时，必须包含先前提到的技术。当您将区块链技术应用于分布式系统时，作为分布式系统建模的一部分，您还需要对区块链层进行建模，以便清楚地了解系统架构和系统的系统（SoS）功能。所有这些模型都可以借助
    BLOCKLY 4SOS 建模技术完成。
- en: As a part of model driven engineering, you need to consider BLOCKLY 4SOS to
    model SOS systems. The next chapter explains the BLOCKLY 4SOS.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 作为模型驱动工程的一部分，您需要考虑使用 BLOCKLY 4SOS 来对 SOS 系统进行建模。接下来的章节将解释 BLOCKLY 4SOS。
