- en: © The Author(s), under exclusive license to APress Media, LLC, part of Springer
    Nature 2022J. T. GeorgeIntroducing Blockchain Applications[https://doi.org/10.1007/978-1-4842-7480-4_10](https://doi.org/10.1007/978-1-4842-7480-4_10)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 作者（们），在 Springer Nature 的 APress Media，LLC 独家许可下 2022J. T. George引入区块链应用[https://doi.org/10.1007/978-1-4842-7480-4_10](https://doi.org/10.1007/978-1-4842-7480-4_10)
- en: 10. Scheduling in Real-Time Systems
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10. 实时系统中的调度
- en: 'Joseph Thachil George^([1](#Aff2)  )(1)Rome, ItalyThe task state determines
    the milestone of a task in a process. The default states are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Joseph Thachil George^([1](#Aff2)  )（1）意大利罗马任务状态确定了进程中任务的里程碑。默认状态如下：
- en: The job has been received and is waiting to be accepted in the system.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作业已被接收，正在等待在系统中被接受。
- en: The task has been accepted by the allocated user (or system). Other users and
    systems cannot modify or complete the work since it is locked.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务已被分配的用户（或系统）接受。其他用户和系统无法修改或完成工作，因为它被锁定了。
- en: The task has been completed.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务已完成。
- en: A user has been assigned to the job. (Manual tasks only.)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户已分配到作业。（仅限手动任务。）
- en: The task attempted to generate a work order in the activation system, but was
    unsuccessful. (Activation tasks only.)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务尝试在激活系统中生成工作订单，但未成功。（仅限激活任务。）
- en: These conditions must be met and cannot be changed. To support your business
    processes, you can define extra states (user-defined states). You can set a task’s
    state to suspended if it can’t be completed on time.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这些条件必须满足且不能更改。为支持您的业务流程，您可以定义额外的状态（用户定义的状态）。如果任务无法按时完成，您可以将任务的状态设置为挂起。
- en: In the absence of other operations, the processor executes a series of instructions
    until they are completed. A task is a sequence of instances (jobs).![../images/520777_1_En_10_Chapter/520777_1_En_10_Fig1_HTML.jpg](../images/520777_1_En_10_Chapter/520777_1_En_10_Fig1_HTML.jpg)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有其他操作的情况下，处理器执行一系列指令，直到它们完成。任务是一系列实例（作业）的序列。![../images/520777_1_En_10_Chapter/520777_1_En_10_Fig1_HTML.jpg](../images/520777_1_En_10_Chapter/520777_1_En_10_Fig1_HTML.jpg)
- en: Figure 10-1
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-1
- en: State even
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 状态偶数
- en: Jobs that are ready are kept in a queue known as the waiting list (QUEUE)  .
    The scheduling algorithm is a method for selecting a task to run on the CPU.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好的作业保存在一个称为等待列表（QUEUE）的队列中。调度算法是选择在 CPU 上运行任务的方法。
- en: 10.1 The Concept of Scheduling
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.1 调度概念
- en: 'The process is composed of the scheduling algorithm:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 进程由调度算法组成：
- en: '**Preemptive:** Work can be briefly paused so that a more critical task can
    be completed.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**抢占式：** 工作可以被暂停一小段时间，以完成更重要的任务。'
- en: '**Non-preemptive:** The task can’t be interrupted. A schedule is a list of
    tasks allocated to the processor in a certain order to the processor. A processor’s
    process is a set of tasks that have been allocated to them.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非抢占式：** 任务不能被中断。调度是将任务按照一定顺序分配给处理器的列表。处理器的进程是已分配给它们的任务集合。'
- en: '![../images/520777_1_En_10_Chapter/520777_1_En_10_Fig2_HTML.jpg](../images/520777_1_En_10_Chapter/520777_1_En_10_Fig2_HTML.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![../images/520777_1_En_10_Chapter/520777_1_En_10_Fig2_HTML.jpg](../images/520777_1_En_10_Chapter/520777_1_En_10_Fig2_HTML.jpg)'
- en: Figure 10-2
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-2
- en: State transition and ready queue
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 状态转换和就绪队列
- en: Processes may need to be swapped or paged out to secondary memory in applications
    with severe real-time limitations.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在具有严重实时限制的应用中，进程可能需要被交换或分页到辅助存储器中。
- en: An operating system is said to be *multitasking* when it runs multiple programs
    at the same time. It is important to distinguish between a program intended as
    a “container of instructions” and a program intended as an “in progress” entity.
    A running program is called a process (or task).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当操作系统同时运行多个程序时，称为*多任务*。重要的是要区分“作为指令容器”的程序和“正在进行中”的程序之间的区别。正在运行的程序称为进程（或任务）。
- en: So while a *program* is a static entity that describes the actions to be performed,
    a *process* is a dynamic entity that represents the execution of those actions.
    The mechanism that the OS adopts to execute several processes “in parallel” (concurrent
    processes) is called *time sharing* .
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，虽然*程序*是描述要执行的操作的静态实体，但*进程*是表示执行这些操作的动态实体。操作系统采用的执行多个进程“并行”（并发进程）的机制称为*时间共享*
    。
- en: It consists of assigning the CPU for a time slice called time-slice, which is
    set for each process. When that time expires, the execution of the process is
    suspended and the CPU is assigned to another process. This technique is called
    *preemptive multitasking* .
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它包括将CPU分配给称为时间片的时间片段，该时间片段为每个进程设置。当时间片段到期时，进程的执行被暂停，并且CPU被分配给另一个进程。这种技术称为*抢占式多任务*
    。
- en: The most important problem with multitasking systems is the allocation of the
    resources required by the various processes. In fact, it may happen that several
    processes simultaneously request a specific single resource that cannot be shared
    (e.g. the printer). In this case, the process requestor is suspended immediately
    and the requesting process is placed in a wait queue. Only when the resource is
    released and no other process in the queue precedes it, can it acquire the resource
    and resume execution.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 多任务系统中最重要的问题是分配各种进程所需的资源。事实上，可能发生多个进程同时请求无法共享的特定单一资源的情况（例如打印机）。在这种情况下，进程请求者立即被挂起，并且请求进程被放置在等待队列中。只有当资源被释放且队列中没有其他进程先于它时，才能获取该资源并恢复执行。
- en: Another problem concerns access to peripherals. Because device I/O operations
    are extremely slow relative to processor speed, a process’s request for an I/O
    operation causes the process to suspend until the operation is complete (the hardware
    mechanism at stake is obviously the interrupt).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题涉及对外设的访问。因为设备I/O操作与处理器速度相比非常慢，进程对I/O操作的请求会导致进程挂起，直到操作完成（明显涉及的硬件机制是中断）。
- en: 'A process can be in one of these three states:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一个进程可以处于以下三种状态之一：
- en: Running. The process has the CPU and is running (ready).
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行。进程具有 CPU 并正在运行（就绪）。
- en: The process was suspended because the time expired.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程因时间到期而暂停。
- en: Blocked (blocked, waiting, suspended). The process cannot advance because it
    needs a resource that is not yet available or because it is waiting for I/O.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阻塞（阻塞，等待，暂停）。进程无法前进，因为它需要一个尚未可用的资源，或者因为它正在等待 I/O。
- en: Managing ready jobs is implemented by a set of queues, each with a defined priority.
    Each process is assigned a priority so that when the process goes to the ready
    state, it is placed in the queue with the corresponding priority.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 管理就绪作业是通过一组具有定义优先级的队列实现的。每个进程被分配一个优先级，以便当进程进入就绪状态时，它将被放置在具有相应优先级的队列中。
- en: The process that runs is the first in the queue. If there are no jobs waiting
    in it, the first job in the queue is executed, and so on.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 运行的进程是队列中的第一个。如果队列中没有等待的作业，则执行队列中的第一个作业，依此类推。
- en: 10.2 Types of Constraints
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.2 约束类型
- en: A transition restriction prevents the data from entering an impossible state
    as a result of a prior state. For example, a person should not be able to switch
    from being “married” to “single, never married.” “Divorced,” “widowed,” or “dead”
    are the only allowed states after “married.”![../images/520777_1_En_10_Chapter/520777_1_En_10_Fig3_HTML.jpg](../images/520777_1_En_10_Chapter/520777_1_En_10_Fig3_HTML.jpg)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡限制防止数据由于先前状态而进入不可能状态。例如，一个人不应该能够从“已婚”转变为“单身，从未结婚过”。在“已婚”之后，“离婚”，“丧偶”或“死亡”是唯一允许的状态。![../images/520777_1_En_10_Chapter/520777_1_En_10_Fig3_HTML.jpg](../images/520777_1_En_10_Chapter/520777_1_En_10_Fig3_HTML.jpg)
- en: Figure 10-3
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-3
- en: Task processor
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 任务处理器
- en: A transitional constraint is a characteristic that governs every legitimate
    transition from one state of the model to its successor state in the formal model
    of information security. It can be thought of as a supplement to state criteria,
    which applies to states as a whole but has no influence on transitions between
    them.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡约束是指每个合法过渡的特征，从模型的一个状态到其后继状态在信息安全的形式模型中。它可以被看作是状态标准的补充，它适用于整体状态但不影响它们之间的过渡。
- en: Once its destination address has been written to secondary storage and it is
    not waiting for a particular task, the process is executable and switchable. If
    a process is waiting for a task, it is put to sleep and its whole address space
    is written to secondary storage.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦其目标地址已被写入二级存储，并且它不在等待特定任务，该进程就是可执行的并且可切换的。如果一个进程正在等待任务，则它会被置于休眠状态，并且其整个地址空间被写入二级存储。
- en: 'Note the following about constraints:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 关于约束的注意事项如下：
- en: Types include jitter, trigger, completeness, and deadline.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型包括抖动、触发、完整性和截止日期。
- en: They can be explicit (included in the system activities specification) or implicit
    (not included in the system activities specification).
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可以是显式的（包含在系统活动规范中）或隐式的（不包含在系统活动规范中）。
- en: They impose a logical order on the execution limits of resources.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们对资源的执行限制施加了逻辑顺序。
- en: They ensure that access to mutually exclusive resources is synchronized.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们确保对互斥资源的访问是同步的。
- en: '![../images/520777_1_En_10_Chapter/520777_1_En_10_Fig4_HTML.jpg](../images/520777_1_En_10_Chapter/520777_1_En_10_Fig4_HTML.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![../images/520777_1_En_10_Chapter/520777_1_En_10_Fig4_HTML.jpg](../images/520777_1_En_10_Chapter/520777_1_En_10_Fig4_HTML.jpg)'
- en: Figure 10-4
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-4
- en: Real-time tasks
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 实时任务
- en: '![../images/520777_1_En_10_Chapter/520777_1_En_10_Fig5_HTML.jpg](../images/520777_1_En_10_Chapter/520777_1_En_10_Fig5_HTML.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![../images/520777_1_En_10_Chapter/520777_1_En_10_Fig5_HTML.jpg](../images/520777_1_En_10_Chapter/520777_1_En_10_Fig5_HTML.jpg)'
- en: Figure 10-5
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-5
- en: Tasks activation
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 任务激活
- en: 10.2.1 Independent Task Scheduling Constraints
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10.2.1 独立任务调度约束
- en: This category assumes that the tasks do not have any dependencies (e.g. mutual
    exclusion).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此类别假设任务没有任何依赖关系（例如互斥）。
- en: 'The *rate monotonic algorithm* is a dynamic algorithm with preemption based
    on static priorities with the following assumptions:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*速率单调算法*是一种基于静态优先级的动态算法，具有抢占功能，具有以下假设：'
- en: '1.'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: Requests for all tasks belonging to a specific task set for which you have hard
    real-time constraints are periodic.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 属于具有硬实时约束的特定任务集合的所有任务的请求都是周期性的。
- en: '2.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: All tasks are independent (absence of mutual exclusion or dependencies).
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有任务都是独立的（没有互斥或依赖关系）。
- en: '3.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: The expiration of each task (Ti) corresponds with the duration of its period
    (pi).
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个任务的到期时间（Ti）对应其周期的持续时间（pi）。
- en: '4.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: You know a priori the maximum computation time for each task.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你事先知道每个任务的最大计算时间。
- en: '5.'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '5.'
- en: Context switching times are ignored.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上下文切换时间被忽略。
- en: '6.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '6.'
- en: 'The sum of the utilization factors of the *n* tasks is limited at the top by:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*n*个任务的利用率因子之和在顶部受到限制：'
- en: '![$$ \mu =\sum \frac{c_i}{p_i}\le n\;\left({2}^{\frac{1}{n}}-1\right) $$](../images/520777_1_En_10_Chapter/520777_1_En_10_Chapter_TeX_Equa.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![$$ \mu =\sum \frac{c_i}{p_i}\le n\;\left({2}^{\frac{1}{n}}-1\right) $$](../images/520777_1_En_10_Chapter/520777_1_En_10_Chapter_TeX_Equa.png)'
- en: 'Where:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 'Where:'
- en: c[i] = Computation time of the i*th* task
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: c[i] = 第i个任务的计算时间
- en: p[i] = Duration of the period of the i*th* task
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: p[i] = 第i个任务的周期持续时间
- en: The algorithm assigns priorities statically and is based on the duration of
    the task period. The tasks with shorter periods will have higher priority and
    those with longer periods have lower priority. In the execution phase, therefore,
    the task with the shortest period will be chosen each time.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法静态地分配优先级，并基于任务周期的持续时间。周期较短的任务优先级较高，周期较长的任务优先级较低。因此，在执行阶段，每次都会选择周期最短的任务。
- en: With the *earliest-deadline-first algorithm* *,* the algorithm with the earliest
    expiration is selected. With the *least-laxity algorithm* *,* the task priority
    is calculated based on the difference between the deadline and the computation
    time necessary for the task. The lower this value is, the higher the priority
    the task is![$$ {laxity}_i={d}_i-{c}_i $$](../images/520777_1_En_10_Chapter/520777_1_En_10_Chapter_TeX_Equb.png)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*最早截止期限优先算法*，选择最早过期的算法。使用*最小松弛度算法*，根据截止期限和任务所需计算时间之间的差异来计算任务优先级。这个值越低，任务的优先级就越高！[$$
    {laxity}_i={d}_i-{c}_i $$](../images/520777_1_En_10_Chapter/520777_1_En_10_Chapter_TeX_Equb.png)
- en: 10.2.2 Scheduling Dependent Tasks
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10.2.2 调度相关任务
- en: In this category, which is closer to reality and therefore more interesting,
    we assume that the tasks have dependencies (e.g. mutual exclusion).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个更接近现实且因此更有趣的类别中，我们假设任务具有依赖关系（例如互斥）。
- en: The *Kernelized Monitor algorithm* *,* proposed by Mok [2], allocates the processor
    for non-interruptible time *q* and assumes that a critical section is executable
    within the time limit. The earliest policy is used for scheduling deadlines first.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*核化监视器算法*，由Mok [2] 提出，为非可中断时间*q*分配处理器，并假设关键部分可在时间限制内执行。最早的策略用于首先安排截止期限。'
- en: The scheduling analysis done in this protocol requires the use of upper bounds
    on the times of execution of all the critical sections that appear in the tasks.
    In fact, the quantity must be calibrated on the longest executable critical section.
    Since these upper bounds can be too pessimistic, using the protocol kernelized
    monitor can lead to low processor utilization.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 该协议中进行的调度分析需要对任务中出现的所有关键部分的执行时间上界进行使用。实际上，该数量必须根据最长可执行的关键部分进行校准。由于这些上界可能太悲观，使用协议核化监视器可能导致处理器利用率低。
- en: The *Priority Ceiling Protocol* is used to schedule a periodic set of tasks
    that have exclusive access to one or multiple common resources protected by traffic
    lights.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*优先级天花板协议*用于安排周期性的任务集，这些任务集具有对由信号灯保护的一个或多个公共资源的独占访问权限。'
- en: This protocol was created by Sha, Rajkmar, and Lehocky in 1990 to solve the
    problem of *priority inversion*. This arises when a high priority job has to wait
    for a higher priority job to be executed, typically due to other resources being
    used by running tasks.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个协议是由Sha、Rajkmar和Lehocky于1990年创建的，旨在解决*优先级反转*问题。这种情况发生在高优先级作业必须等待更高优先级作业执行时，通常是因为正在运行的任务使用了其他资源。
- en: If there are three tasks (T1, T2, and T3) with priority p1> p2> p3, all three
    use the resource R and the algorithm for scheduling the monotonic rate type.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有三个任务（T1、T2和T3）的优先级p1> p2> p3，所有三个任务都使用资源R和用于调度单调速率类型的算法。
- en: Suppose that T1 and T3 need to access the resource to which the mutex S is associated.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 假设T1和T3需要访问与互斥量S相关联的资源。
- en: If T3 starts processing and locks (S) before T1 starts, then T1 will be locked
    for an undefined time, that is, until T3 it will not do an unlock (S), freeing
    the resource S. In fact, T1 cannot continue execution without the resource S held
    by T3\. In this case, T1 is penalized in favor of T3 in spite of the order of
    priorities p1> p3.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 T3 在 T1 开始之前开始处理并锁定（S），那么 T1 将被锁定一段未定义的时间，也就是说，直到 T3 不解锁（S），释放资源 S 为止。事实上，没有资源
    S，T1 无法继续执行。在这种情况下，尽管优先级顺序为 p1 > p3，但 T1 被牺牲以支持 T3。
- en: If, before T3 unlocks (S), T2 starts, then T3 will be suspended to allow T2
    to be processed under the priorities p2> p3\. In this case, T1 will have to wait
    for T2 to stop being processed. Indeed, T1 is blocked on T3, which in turn is
    blocked on T2 in spite of the order of priorities p1> p2.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在 T3 解锁（S）之前，T2 开始，则 T3 将被挂起，以允许 T2 在优先级 p2 > p3 下进行处理。在这种情况下，T1 将不得不等待 T2
    停止处理。事实上，T1 在 T3 上被阻塞，而 T3 又在 T2 上被阻塞，尽管优先级顺序为 p1 > p2。
- en: 'The proposed algorithm is based on the following points:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 所提出的算法基于以下几点：
- en: A task is allowed to enter the critical section only if its priority is higher
    than the task that is currently locking the resource.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个任务只有在其优先级高于当前锁定资源的任务时才允许进入临界区。
- en: When it has finished using the critical section, it releases it, giving it the
    previous priority.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当它使用完临界区后，它会释放它，并赋予它以前的优先级。
- en: 10.3 Review Questions and Answers
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.3 复习问题与答案
- en: Try these review questions as a test of knowledge.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 请尝试这些复习问题，作为对知识的测试。
- en: 10.3.1 Review Questions
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10.3.1 复习问题
- en: '1.'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: “A task is a set of events.” Is this statement correct or incorrect?
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “任务是一系列事件。” 这个说法正确还是错误？
- en: 2.What is scheduling ?
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2.什么是调度？
- en: a.
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: a.
- en: 'Preventive: When a current task can be put on hold in order to finish an even
    more important task.'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预防性：当一个当前任务可以被暂停以完成一个更重要的任务时。
- en: b.
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: b.
- en: 'Preventive: When a running task can be briefly paused in order to complete
    a more critical task.'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预防性：当一个正在运行的任务可以被暂停以完成一个更关键的任务时。
- en: c.
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: c.
- en: 'Preemptive: When the currently executing process can be used to temporarily
    execute another task.'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 抢占性：当当前执行的进程可以被暂时用来执行另一个任务时。
- en: d.
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: d.
- en: 'Preventive: When an ongoing task can be briefly paused to complete a less critical
    task.'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预防性：当正在进行的任务可以暂停一小段时间以完成一个不太关键的任务时。
- en: 3.Which of the following task statements is correct?
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3.以下哪种任务描述是正确的？
- en: a.
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: a.
- en: Depending on the operating system, a task can be a process or a thread.
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据操作系统的不同，一个任务可以是一个进程或一个线程。
- en: b.
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: b.
- en: The job must be a program or a thread, depending on the operating system.
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作业必须是一个程序或一个线程，这取决于操作系统。
- en: c.
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: c.
- en: A task might be a process or a thread, depending on the version.
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个任务可能是一个进程或一个线程，这取决于版本。
- en: d.
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: d.
- en: None of the preceding.
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的都不是。
- en: 4.Which of the following claims regarding events are true?
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4.关于事件的以下说法哪些是正确的？
- en: a.
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: a.
- en: If the current task can’t be paused until it’s finished, it’s non-preemptive.
    A schedule is a list of tasks that the processor has been allocated.
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果当前任务不能暂停直到完成，则为非抢占式。日程安排是处理器被分配的任务列表。
- en: b.
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: b.
- en: Non-preemptive is not whether a job in progress can be paused until it is completed.
    A schedule is a list of tasks that the processor has been allocated.
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非抢占式并不是指正在进行的作业是否可以暂停直到完成。日程安排是处理器被分配的任务列表。
- en: c.
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: c.
- en: Non-preemptive is when the current task can’t be halted until it’s completed.
    A timetable is a set of responsibilities assigned to a specific event.
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非抢占式是指当前任务不能被中止直到完成。时间表是分配给特定事件的一组责任。
- en: d.
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: d.
- en: All of these are true.
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有这些都是真的。
- en: '5.'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '5.'
- en: “A task is a set of instructions that is continually executed by the processor
    in the absence of other activities.” Is this statement correct?
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “任务是在没有其他活动的情况下由处理器持续执行的一组指令。” 这个陈述正确吗？
- en: 10.3.2 Answers
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10.3.2 答案
- en: '1.'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: 'Answer: Incorrect, a task is a series of events.'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 答案：错误，任务是一系列事件。
- en: '2.'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: 'Answer: B, preventive scheduling is when a running task can be briefly paused
    in order to complete a more critical task.'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 答案：B，预防调度是指运行中的任务可以被短暂暂停以完成更重要的任务。
- en: '3.'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: 'Answer: C, a task might be a process or a thread, depending on the version.'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 答案：C，任务可能是一个进程或一个线程，这取决于版本。
- en: '4.'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: 'Answer: A, If the current task can’t be paused until it’s finished, it’s non-preemptive.
    A schedule is a list of tasks that the processor has been allocated.'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 答案：A，如果当前任务不能暂停直到完成，则为非抢占式。日程安排是处理器被分配的任务列表。
- en: '5.'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '5.'
- en: 'Answer: Incorrect, a task is a set of instructions that the processor executes
    in the absence of other operations until it is completed.'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 答案：错误，任务是一组指令，处理器在没有其他操作的情况下执行，直到完成为止。
- en: 10.4 Summary
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.4 总结
- en: This chapter explained how scheduling works in real-time systems. Scheduling
    homogeneous processes arises when several processes with the same requests and
    time constraints must be efficiently served by the scheduling policy. For example,
    such a situation arises in a video server that must support the display of a fixed
    number of videos all characterized by the same frame rate, video resolution, data
    transmission frequency, etc.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了实时系统中调度的工作原理。调度同质过程时，多个具有相同请求和时间限制的进程必须通过调度策略有效地提供服务。例如，在必须支持显示一定数量的视频的视频服务器中，所有视频都具有相同的帧速率、视频分辨率、数据传输频率等特征，就会出现这种情况。
- en: In this situation, a simple but effective scheduling policy is round-robin.
    In fact, all processes are equally important; they have the same amount of work
    to do and crash when they have finished processing the current frame. The scheduling
    algorithm can be optimized by adding a timing mechanism to ensure that each process
    runs at the correct frequency. The simple precedent model rarely occurs in practice.
    A more realistic model provides for the presence of multiple processes competing
    for CPU use, each with its own workload and deadlines.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，一个简单但有效的调度策略是**循环调度**。事实上，所有的进程都同样重要；它们有相同的工作量，当它们完成处理当前帧时就会崩溃。调度算法可以通过添加定时机制来优化，以确保每个进程以正确的频率运行。简单的先例模型在实践中很少出现。一个更现实的模型提供了多个进程竞争CPU使用的情况，每个进程都有自己的工作量和截止日期。
- en: The next chapter focuses on modeling and discusses how model-based engineering
    helps in the distributed system. For the practical implementation of distributed
    systems, the model’s guided engineering is an important concept.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章重点介绍建模，并讨论模型驱动工程如何在分布式系统中发挥作用。对于分布式系统的实际实现，模型引导的工程是一个重要的概念。
