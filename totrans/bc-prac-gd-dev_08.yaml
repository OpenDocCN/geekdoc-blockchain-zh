- en: 8   Private Blockchain Platforms and Use Cases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Blockchain is a peer-to-peer distributed ledger technology, which makes it easier
    to create a more cost-efficient network with no central point of control. This
    is in contrast to the world where members of a business ecosystem maintain their
    own ledger o`r` systems of record (SOR). These separate ledgers are continually
    being reconciled with one another in an inefficient, expensive, and often nonstandard
    way. Over time, these separate ledgers have been duplicated many times within
    each member’s datacenters. It has gotten to the point where data governance, testing,
    release management, and in effect the complete software development life cycle
    (SDLC) is always hampered and more or less broken or damaged. It is no wonder
    that these institutions cannot innovate fast enough. It’s like trying to run a
    race while dragging a trailer containing all the clothing you’ve ever owned throughout
    your lifetime!
  prefs: []
  type: TYPE_NORMAL
- en: However, recently the concept of private blockchains has become popular within
    the discussions on blockchain technology, particularly among financial institutions.
    Instead of having a fully decentralized network open to the public with anonymous
    parties, it is possible to create a system where each party is identified and
    granted permissions to change or read the blockchain. These private blockchains
    are also tackling the performance issue because consensus is performed on fewer
    nodes. In fact, it is likely that there will be many blockchain networks with
    each network serving a different set of goals and distinct business applications
    (see [Figure 8-1](ch8.xhtml#ch8fig1)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](fig8-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 8-1   Many blockchain networks**'
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that there is some discussion that these private blockchains
    are compromising the central concept of decentralization. But for the purposes
    of this book let’s take a look at the differences between the types or categories
    of blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Categories of Blockchain
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Generally speaking, there are three categories of blockchain-like database
    applications: public, consortium, and private.'
  prefs: []
  type: TYPE_NORMAL
- en: •   **Public**   Anyone can read or submit transactions (submissions will be
    committed if valid), and anyone can participate in the consensus process. These
    trustless platforms are secured by mechanisms such as proof of work or proof of
    stake, a.k.a. cryptoeconomics. In other words, influence in the consensus process
    is proportional to the quantity of economic resources that entity can bring to
    bear.
  prefs: []
  type: TYPE_NORMAL
- en: •   **Consortium**   Consensus is controlled by a preselected set of nodes and
    rules for achieving consensus. The right to read the blockchain can be open to
    the public, or it can also be restricted to a set of known participants—for example,
    10 banks in a consortium that agree to the consensus rule that 7 of 10 banks must
    sign (approve) a block for it to be considered a valid representation of the truth.
  prefs: []
  type: TYPE_NORMAL
- en: •   **Private**   Write permissions are kept centralized to a single organization
    or part of it. Read permissions may be public or restricted to a set of known
    participants.
  prefs: []
  type: TYPE_NORMAL
- en: In short, there are really two categories, *public* and *private*. The *consortium*
    is a derivative of the private blockchain with multiple identified and permissioned
    members/participants.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of the advantages of a private blockchain:'
  prefs: []
  type: TYPE_NORMAL
- en: •   When read permission is enforced, a private blockchain provides privacy.
  prefs: []
  type: TYPE_NORMAL
- en: •   A consortium or private entity can change the rules of a blockchain, allowing
    them to revert transactions, modify (fix) balances, etc. This functionality may
    be deemed necessary, although we must say these reasons look more like patches
    to fix defective functionality.
  prefs: []
  type: TYPE_NORMAL
- en: •   The miners (or validators) are identified, defined, and known, so any risk
    of a 51 percent attack from colluding bad actors does not exist or can easily
    be identified and dealt with.
  prefs: []
  type: TYPE_NORMAL
- en: •   Transactions are less expensive, since they only need to be verified by
    a limited set of trusted (and identified) nodes instead of by every node on the
    public network. There does not have to be any transaction fee. There may still
    be a requirement to run a validator node to participate in the network. This would
    be an expense, but would be less expensive to participants than a transaction
    fee on the public network. The validator node may also provide protection against
    a distributed denial-of-service (DDoS) attack.
  prefs: []
  type: TYPE_NORMAL
- en: •   With fewer miners needed, consensus finality can be achieved much faster
    among a smaller group.
  prefs: []
  type: TYPE_NORMAL
- en: So, given the above, it is no surprise that financial institutions invariably
    choose private (or consortium) platforms for their blockchain applications. It
    is also a reason that private blockchains are also known as enterprise blockchains.
  prefs: []
  type: TYPE_NORMAL
- en: Private Blockchain Use Cases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The public blockchain has, in many cases by design, the following challenges
    to enterprise adoption, particularly those industries that are highly regulated:'
  prefs: []
  type: TYPE_NORMAL
- en: •   No privacy
  prefs: []
  type: TYPE_NORMAL
- en: •   Anonymous processors
  prefs: []
  type: TYPE_NORMAL
- en: •   Little to no governance
  prefs: []
  type: TYPE_NORMAL
- en: •   Limited throughput with slow transaction confirmation (performance challenge)
  prefs: []
  type: TYPE_NORMAL
- en: 'In short, there are essentially two aspects to privacy itself: read permission
    and block generation (or write) permission. If the use case requires privacy,
    you will want to restrict read permission. If the use case requires trust spread
    across a limited and predetermined set of participants, you will want to restrict
    write permission. Both aspects individually or collectively may push you to a
    private (or consortium) blockchain platform.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Throughout this chapter we mention use cases for private blockchains. The following
    is a more complete collection of use cases:'
  prefs: []
  type: TYPE_NORMAL
- en: •   A permissioned interfinancial institution settlement layer for digital assets
    (currencies and securities)
  prefs: []
  type: TYPE_NORMAL
- en: •   An intracompany ledger (balance sheet) containing private data without any
    single department being in authoritative control
  prefs: []
  type: TYPE_NORMAL
- en: •   A permissioned platform for the issuance and maintenance of rewards, loyalty
    points, and gift cards
  prefs: []
  type: TYPE_NORMAL
- en: •   A tracking tool for private equity, debt, and other liquid agreements
  prefs: []
  type: TYPE_NORMAL
- en: •   Database management, auditing, etc., internal to a single company
  prefs: []
  type: TYPE_NORMAL
- en: •   Any use case that requires incredibly high numbers of transactions per second
  prefs: []
  type: TYPE_NORMAL
- en: Again, the considerations for choosing a private blockchain platform can be
    narrowed down to the requirements depicted in [Figure 8-2](ch8.xhtml#ch8fig2).
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](fig8-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 8-2   Requirements leading to private blockchains**'
  prefs: []
  type: TYPE_NORMAL
- en: Private Blockchain Technology
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section presents blockchain technology platforms that are applicable for
    the private and consortium spaces.
  prefs: []
  type: TYPE_NORMAL
- en: AlphaPoint Distributed Ledger Platform
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![Images](f0176-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Website: [https://www.alphapoint.com/adlp.html](https://www.alphapoint.com/adlp.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'AlphaPoint Distributed Ledger Platform is a private, permissioned protocol
    that leverages blockchain, and it further allows firms complete control over their
    data. ADLP’s key benefits are:'
  prefs: []
  type: TYPE_NORMAL
- en: •   **Secure architecture**   Multiple entities communicate and link via encrypted
    messages across secure networks.
  prefs: []
  type: TYPE_NORMAL
- en: •   **Permissioned**   Parties can only access data that is explicitly shared
    with them.
  prefs: []
  type: TYPE_NORMAL
- en: The platform enables organizations to digitize, manage, and exchange financial
    instruments; deploy smart contracts along with automated workflows; and therefore
    reduce operational overhead.
  prefs: []
  type: TYPE_NORMAL
- en: Chain Core
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![Images](f0177-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Website: [https://chain.com](https://chain.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Chain Core is a permissioned blockchain platform that is used to issue and/or
    transfer financial assets. Using it, financial institutions can launch and operate
    a blockchain network or connect to other networks in order to move assets around.
    The Chain protocol handles this by defining how assets are issued, transferred,
    and controlled. It allows a single entity (private) or a group of organizations
    (consortium) to operate a network, supports the coexistence of multiple types
    of assets (e.g., currencies, securities, derivatives, gift cards, and loyalty
    points), and has a degree of interoperability with other independent networks.
  prefs: []
  type: TYPE_NORMAL
- en: Corda
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![Images](f0177-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Website: [https://www.corda.net](https://www.corda.net)'
  prefs: []
  type: TYPE_NORMAL
- en: Corda is an open-source platform that implements a distributed ledger made up
    of mutually distrusting nodes that records the state of deals and obligations
    between entities, which can be institutions or individuals. Unlike Ethereum, Corda’s
    smart contracts are currently limited to the application of financial logic, and
    all nonfinancial applications are out of scope.
  prefs: []
  type: TYPE_NORMAL
- en: One of Corda’s key features is pluggable consensus within the same network.
    This feature supports multiple consensus providers, and each can employ different
    algorithms. This type of distributed ledger has many applications focused around
    commerce, such as finance, trade, and supply chain tracking. Other key features
    are that this is a permissioned network, with access controlled by a doorman (TLS
    certificate provided to each node participant upon successful registration), and
    that all communication between nodes is point-to-point, instead of being sent
    to all nodes in a global broadcast.
  prefs: []
  type: TYPE_NORMAL
- en: Domus Tower
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![Images](f0177-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Website: [http://domustower.com](http://domustower.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Domus Tower has a vertical blockchain product that is solely designed to settle
    U.S. equities. The company’s key selling point is that its technology can record
    a high rate of transactions in a scalable manner. The company’s whitepaper begins
    with a statement that the product has been “benchmarked at ingesting over 1 million
    transactions per second on hardware costing less than $50 per hour on Amazon’s
    Web Services with the potential to scale to greater than 10 million transactions
    per second.”
  prefs: []
  type: TYPE_NORMAL
- en: It uses a double-entry approach for credits and debits, and data storage is
    contained in a Merkle directional acyclic graph (MerkleDAG), which ensures that
    the blockchain has not been altered or corrupted. All data transmitted to the
    blockchain is digitally signed and verified before it is written to a block. Authority
    is centralized under this model, and any node on the network that has write permission
    to a blockchain can write transactions to that chain.
  prefs: []
  type: TYPE_NORMAL
- en: The Elements Project
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![Images](f0178-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Website: [https://elementsproject.org](https://elementsproject.org)'
  prefs: []
  type: TYPE_NORMAL
- en: Elements Core is an open-source, protocol-level technology developers can use
    to extend the functionality of Bitcoin to build new applications. Combinations
    of Elements (functionality) developed in this technical community can be brought
    together and fashioned into sidechains. It uses the periodic table and associated
    chemistry approaches to the naming and combining of functionality to build an
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The current list of Elements are:'
  prefs: []
  type: TYPE_NORMAL
- en: •   **Ai (Asset Issuance)**   Ability to issue confidential assets that represent
    any asset such as vouchers, coupons, currencies, deposits, bonds, shares, etc.
  prefs: []
  type: TYPE_NORMAL
- en: •   **Ct (Confidential Transactions)**   In a cryptographic way this keeps the
    amounts transferred visible only to participants in the transaction and those
    they designate, while still guaranteeing that no more coins can be spent than
    are available (double-spend).
  prefs: []
  type: TYPE_NORMAL
- en: •   **Dp (Deterministic Pegs)**   Allow cross-chain transactions to be constructed
    in a decentralized fashion, where tokens can be moved from one blockchain to another.
  prefs: []
  type: TYPE_NORMAL
- en: •   **Op (New Opcodes)**   Delivers new and re-enables some safe but disabled
    operation codes in Bitcoin (i.e., string concatenation, substrings, integer shifts,
    and some bitwise operations).
  prefs: []
  type: TYPE_NORMAL
- en: •   **Rtl (Relative Time Lock)**   Allows a transaction to be time-locked, preventing
    its use in a new transaction until a relative time change is achieved.
  prefs: []
  type: TYPE_NORMAL
- en: •   **Sb (Signed Blocks)**   Allows the creator of the block to verify their
    identity in the future.
  prefs: []
  type: TYPE_NORMAL
- en: •   **Scv (Signature Covers Value)**   Signature on a transaction can be invalidated
    if the inputs have been spent. Transaction can be validated fast by checking its
    signature.
  prefs: []
  type: TYPE_NORMAL
- en: •   **Ss (Schnorr Signatures)**   New way of constructing signatures for transactions.
  prefs: []
  type: TYPE_NORMAL
- en: •   **Sw (Segregated Witness)**   Reduces the required space for transactions
    in a block by a factor of 4.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, there are proposed Elements under development that are not yet
    ready for deployment on a public sidechain.
  prefs: []
  type: TYPE_NORMAL
- en: HydraChain
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![Images](f0179-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Website: [https://github.com/HydraChain/hydrachain](https://github.com/HydraChain/hydrachain)'
  prefs: []
  type: TYPE_NORMAL
- en: HydraChain is 100 percent compatible with Ethereum; it extends the platform
    by adding support for creating permissioned distributed ledgers for private or
    consortium chain applications. All existing tools on the Ethereum platform can
    be reused. The essential difference is that HydraChain does not use proof-of-work
    for consensus, it relies on a registered and accountable set of validators, which
    propose and validate the order of transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Hyperledger is the umbrella project of open-source blockchains and supporting
    tools that was started in December 2015 by the Linux Foundation. The purpose of
    Hyperledger is to advance blockchain technology by identifying and then addressing
    important features that can transform the way business transactions are conducted
    on a distributed ledger.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](f0179-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The requirements for blockchains vary greatly across different use cases and
    industries, and Hyperledger is designed and implemented to be highly modular,
    with pluggable options to suit the differing industry requirements. The simplified
    project goals are:'
  prefs: []
  type: TYPE_NORMAL
- en: •   **Create framework and code base**   Users can then build and run robust,
    industry-specific business transactions.
  prefs: []
  type: TYPE_NORMAL
- en: •   **Foster a community**   This will benefit the ecosystem for all.
  prefs: []
  type: TYPE_NORMAL
- en: •   **Promote participation**   Includes end users, developers, and solution
    providers.
  prefs: []
  type: TYPE_NORMAL
- en: •   **Neutral host**   Establish home for infrastructure, meetings, events,
    and collaborative discussions. Additionally, provide structure around the business
    and technical governance.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Frameworks
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The Hyperledger initiative incubates and promotes a range of business blockchain
    technologies, including distributed ledger frameworks, smart contract engines,
    client libraries, graphical interfaces, utility libraries, and sample applications.
    The Hyperledger umbrella strategy encourages the reuse of common building blocks
    and enables rapid innovation of distributed ledger technology (DLT) components.
    Here are the frameworks for Hyperledger:'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Fabric
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![Images](f0180-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Website: [http://hyperledger.org](http://hyperledger.org)'
  prefs: []
  type: TYPE_NORMAL
- en: Intended as the foundation pillar for developing applications or solutions with
    a modular architecture, Fabric allows components such as consensus and membership
    services to be added in a plug-and-play fashion. Ledger data can be stored in
    multiple formats, consensus protocols can be switched in and out, and different
    identity verification methods are supported. There is support for channels, which
    are separate ledgers of transactions that are only made visible to specified groups
    of network participants.
  prefs: []
  type: TYPE_NORMAL
- en: '**Hyperledger Fabric Tutorial**   Prior to running the tutorial, you will need
    to ensure that your computer has the following prerequisites installed:'
  prefs: []
  type: TYPE_NORMAL
- en: •   cURL (ensure your version handles redirects)
  prefs: []
  type: TYPE_NORMAL
- en: •   Docker and Docker Compose
  prefs: []
  type: TYPE_NORMAL
- en: •   Node.js runtime and NPM
  prefs: []
  type: TYPE_NORMAL
- en: 'The following listing contains the commands and the console output for setting
    up Hyperledger Fabric on a Mac. The first order of business is to set up Go in
    the Path:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0180-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then upgrade Node Package Manager and install Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0181-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a working directory for where the clone of Hyperledger Fabric samples
    should go:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0181-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Issue the `clone` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0181-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Install the platform-specific Hyperledger Fabric binaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0181-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0182-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0182-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0183-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0183-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0184-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are four tutorials that come with Hyperledger Fabric. They are:'
  prefs: []
  type: TYPE_NORMAL
- en: •   **write_first_app**   Designed to show an application developer how to write
    their first application using the Node.js SDK.
  prefs: []
  type: TYPE_NORMAL
- en: •   **build_network**   Oriented toward a network operator going through the
    process of establishing a blockchain network and deploying a simple application
    to test it out.
  prefs: []
  type: TYPE_NORMAL
- en: •   **chaincode4ade**   Shows a developer how to write business logic agreed
    to by the members of the network.
  prefs: []
  type: TYPE_NORMAL
- en: •   **chaincode4noah**   Demonstrates the administration of business logic by
    a network operator.
  prefs: []
  type: TYPE_NORMAL
- en: We will now step through the write_first_app tutorial, which again is designed
    to show the tasks involved and to provide the basis for writing a first application
    against the Hyperledger Fabric network. As with all other persistence layer–based
    (i.e., database or file system) applications that you’ve worked on before, this
    tutorial demonstrates the two common use cases of (1) reading from the chain and
    (2) writing to (or updating) the chain.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the first step is to navigate to the fabric directory and list its contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0184-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now start the Fabric network, which does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: •   Starts a peer node, an ordering node, a Certificate Authority, and a CLI
    container
  prefs: []
  type: TYPE_NORMAL
- en: •   Creates a channel and joins the peer node to the new channel
  prefs: []
  type: TYPE_NORMAL
- en: •   Installs a smart contract onto the peer’s file system and instantiates this
    contract on the channel by starting a chaincode (smart contract) container
  prefs: []
  type: TYPE_NORMAL
- en: •   Calls the initLedger function on the smart contract to create 10 cars in
    the ledger
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0184-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0185-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now view the processes that have been started:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0185-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now install the SDK node modules so that the sample code will function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0186-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s take a look at the query.js code, in particular the highlighted sections
    that show how to connect to the chain and then issue a query:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0187-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0187-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0188-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A slight adjustment to the query will let us read by a single key:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0188-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Submitting the adjusted query and showing the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0188-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0189-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can move on to making some changes to the ledger. We will start off
    with the sample code that will add a new car to the chain. Here is the invoke.js
    code; again the section for inserting CAR10 is highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0189-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0190-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0191-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0192-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you execute the insert, here is the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0192-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After adjusting the query.js code to read the new key (changed `’CAR4’` to
    `’CAR10’`) and executing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0192-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0193-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then execute the invoke.js code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0193-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Run query.js one more time to query CAR10; here is the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0193-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we have stood up the blockchain, read from it, and written to it. The only
    thing left to do is to shut down the docker instance by issuing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0193-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0194-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This concludes the Hyperledger Fabric tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Iroha
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![Images](f0194-01a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Websites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/hyperledger/iroha](https://github.com/hyperledger/iroha)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.hyperledger.org/projects/iroha](https://www.hyperledger.org/projects/iroha)'
  prefs: []
  type: TYPE_NORMAL
- en: Iroha was contributed to Hyperledger by the Japanese fintech company Soramitsu.
    It is a business blockchain framework designed to be simple and easy to incorporate
    into infrastructural projects requiring distributed ledger technology.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some key features are:'
  prefs: []
  type: TYPE_NORMAL
- en: •   Creation and management of complex assets, including currencies, rights,
    serial numbers, patents, etc.
  prefs: []
  type: TYPE_NORMAL
- en: •   Management and permission of user accounts (read and write), including business
    rules for transactions and queries
  prefs: []
  type: TYPE_NORMAL
- en: 'Iroha’s goal is to provide the following encapsulated C++ components that other
    projects can use:'
  prefs: []
  type: TYPE_NORMAL
- en: •   Sumeragi consensus library (inspired by BChain, a chain-style Byzantine
    replication protocol that propagates transactions among the nodes with a chain
    topology)
  prefs: []
  type: TYPE_NORMAL
- en: •   Ed25519 digital signature library
  prefs: []
  type: TYPE_NORMAL
- en: •   SHA-3 hashing library
  prefs: []
  type: TYPE_NORMAL
- en: •   Transaction serialization library
  prefs: []
  type: TYPE_NORMAL
- en: •   P2P broadcast library
  prefs: []
  type: TYPE_NORMAL
- en: •   API server library
  prefs: []
  type: TYPE_NORMAL
- en: •   iOS, Android, and JavaScript libraries
  prefs: []
  type: TYPE_NORMAL
- en: •   Blockchain explorer/data visualization suite
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Sawtooth
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![Images](f0195-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Websites: [https://github.com/hyperledger/sawtooth-core](https://github.com/hyperledger/sawtooth-core)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.hyperledger.org/projects/sawtooth](https://www.hyperledger.org/projects/sawtooth)'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Sawtooth is a modular platform for building, deploying, and running
    distributed ledgers. Hyperledger Sawtooth includes a proprietary consensus algorithm,
    Proof of Elapsed Time (PoET), which targets large distributed validator populations
    with minimal resource consumption.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Tools
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: All platforms need tools and utilities, and blockchain is no different. The
    following are the current tools for the Hyperledger platform.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Cello
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![Images](f0195-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Websites: [https://github.com/hyperledger/cello](https://github.com/hyperledger/cello)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.hyperledger.org/projects/cello](https://www.hyperledger.org/projects/cello)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hyperledger Cello is a toolkit that aims to bring the on-demand “as-a-service”
    deployment model to the blockchain ecosystem. Its goal is to reduce the effort
    required for the setup, ongoing maintenance, and teardown of blockchains. Its
    highlights are:'
  prefs: []
  type: TYPE_NORMAL
- en: •   Instantly provision customizable blockchains, for example, Hyperledger Fabric
  prefs: []
  type: TYPE_NORMAL
- en: •   Maintain a pool of executing blockchains on top of baremetals, VMs, Docker
    Swarm, and Kubernetes
  prefs: []
  type: TYPE_NORMAL
- en: •   Administration dashboard that provides system status and allows adjustment
    to chain numbers or scale resources
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Composer
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![Images](f0195-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Websites: [https://github.com/hyperledger/composer](https://github.com/hyperledger/composer)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.hyperledger.org/projects/composer](https://www.hyperledger.org/projects/composer)'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Composer is a collaboration tool for building blockchain business
    networks, accelerating the development of smart contracts and their deployment
    across a distributed ledger. See [Figure 8-3](ch8.xhtml#ch8fig3) for sample screen
    captures of the tool. Hyperledger Composer is an extensive, open development collaboration
    toolset and framework to make developing blockchain applications easier. Its goal
    is to accelerate producing value by making it easier to model a business network
    and then integrate a blockchain application with the existing/legacy business
    systems. It supports existing Hyperledger Fabric blockchains and supports pluggable
    consensus protocols that have been established by permissioned network members.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](fig8-3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 8-3   Hyperledger Composer**'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Explorer
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![Images](f0196-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Websites: [https://www.hyperledger.org/projects/explorer](https://www.hyperledger.org/projects/explorer)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/hyperledger/blockchain-explorer](https://github.com/hyperledger/blockchain-explorer)'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Explorer, contributed by IBM, Intel, and DTCC, can view, invoke,
    deploy, or query blocks, transactions with associated data, network information
    (e.g., name, status), chain codes and transaction families, and other relevant
    information contained in the blockchain. See [Figure 8-4](ch8.xhtml#ch8fig4) for
    sample screen capture of the tool.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](fig8-4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 8-4   Hyperledger Explorer**'
  prefs: []
  type: TYPE_NORMAL
- en: Interbit
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![Images](f0197-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Website: [http://btl.co/interbit](http://btl.co/interbit)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Interbit is an enterprise-grade blockchain platform that enables applications
    to be built, managed, and run on a blockchain. Its key features are:'
  prefs: []
  type: TYPE_NORMAL
- en: •   **Privacy**   Ensures that data is only available to those who have permission
    to see and change it
  prefs: []
  type: TYPE_NORMAL
- en: •   **Scalability**   Provides a platform that can scale to hundreds of thousands
    of transactions per second
  prefs: []
  type: TYPE_NORMAL
- en: •   **Portability**   The first blockchain platform developed that is able to
    run full nodes on lightweight IoT devices
  prefs: []
  type: TYPE_NORMAL
- en: Monax
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![Images](f0197-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Website: [https://monax.io](https://monax.io)'
  prefs: []
  type: TYPE_NORMAL
- en: Monax is a permissionable smart contract machine. Released in December 2014,
    Monax provides a modular blockchain client with a permissioned smart contract
    interpreter built in part to the specification of the Ethereum Virtual Machine
    (EVM). In early 2017, blockchain startup Monax announced they were joining Hyperledger.
    It is the first code base with an EVM joining the consortium. Swift, an interbank
    transfer platform, has experimented with the Monax platform as part of its project
    to look at integrating blockchain into its payments platform. Let’s walk through
    a Monax tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Monax Tutorial
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: One of the first things to be done for this tutorial is to establish the virtual
    environment; this can be either Docker or Vagrant. We will look at a Vagrant installation.
    The following assumes that you already have Vagrant installed and you have downloaded
    the associated monax.box file and the Monax workshop sources.zip file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to register the Monax virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0198-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then change directory to the workshop material and initialize the `vagrant`
    instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0198-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then start up the instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0198-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you get the above error, it means you haven’t installed VirtualBox. No big
    deal, just go ahead and download and install it and try starting up the instance
    again.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0199-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The final part of the setup stage for the tutorial is to secure shell into
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0199-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that the virtual machine login for the secure shell is `contrib-jessie`,
    the login of the person who originally created the virtual instance.
  prefs: []
  type: TYPE_NORMAL
- en: '**Make a Chain Configuration**   With the Monax virtual machine setup completed,
    you can now begin the process of making a chain configuration. This process creates
    all of the necessary files for a private blockchain within the Monax platform.
    The following is the help text for the chain’s `make` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0200-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0200-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0201-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following command, we make a chain configuration with one full node
    and three participants:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0201-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Start the workshop chain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0202-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Copy the user keys and import them into the development keys server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0202-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that the import step may take a few minutes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tutorial: Phases**   The next steps are the main deployment and test phases.
    It begins with Phase 1, which is a job that does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: •   Deploys the course registry (a Solidity smart contract)
  prefs: []
  type: TYPE_NORMAL
- en: •   Registers a participant
  prefs: []
  type: TYPE_NORMAL
- en: •   Gets the number of participants registered
  prefs: []
  type: TYPE_NORMAL
- en: •   Verifies that the number of course participants is 1
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the above steps expressed in the epm.yaml file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0202-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0203-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To execute the above work and view the output for Phase 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0203-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following listing shows the contents of the Course Registry smart contract
    being deployed (CourseRegistry.sol file):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0203-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0204-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step in the tutorial, Phase 2, is to run a job that does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: •   Deploys the course manager (another Solidity smart contract)
  prefs: []
  type: TYPE_NORMAL
- en: •   Gets a handle on the course manager
  prefs: []
  type: TYPE_NORMAL
- en: •   Registers a participant
  prefs: []
  type: TYPE_NORMAL
- en: •   Gets the number of participants registered
  prefs: []
  type: TYPE_NORMAL
- en: •   Verifies that the number of course participants is 1
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the above steps expressed in the epm.yaml file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0204-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0205-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To execute the above work and view the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0205-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following listing shows the contents of the course manager smart contract
    being deployed (CourseManager.sol file):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0206-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following listing shows the contents of the course registry smart contract
    being deployed (CourseRegistry.sol file):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0206-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following listing shows the contents of the default course registry smart
    contract being deployed (DefaultCourseRegistry.sol file):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0206-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0207-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Phase 3 is to run a job that does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: •   Deploys the course manager (Solidity smart contract)
  prefs: []
  type: TYPE_NORMAL
- en: •   Gets a handle on the course manager
  prefs: []
  type: TYPE_NORMAL
- en: •   Registers a participant (that fails)
  prefs: []
  type: TYPE_NORMAL
- en: •   Gets the number of participants registered
  prefs: []
  type: TYPE_NORMAL
- en: •   Verifies that the number of course participants is 0
  prefs: []
  type: TYPE_NORMAL
- en: •   Registers a participant (that succeeds)
  prefs: []
  type: TYPE_NORMAL
- en: •   Gets the number of participants registered
  prefs: []
  type: TYPE_NORMAL
- en: •   Verifies that the number of course participants is 1
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the above steps expressed in the epm.yaml file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0207-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0208-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To execute the above work and view the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0208-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0209-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Phase 4 is a job that does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: •   Deploys the courses library (Solidity smart contract)
  prefs: []
  type: TYPE_NORMAL
- en: •   Deploys the course manager (link to the course library)
  prefs: []
  type: TYPE_NORMAL
- en: •   Gets a handle on the course manager
  prefs: []
  type: TYPE_NORMAL
- en: •   Adds a course (Solidity 101)
  prefs: []
  type: TYPE_NORMAL
- en: •   Gets the number of courses available
  prefs: []
  type: TYPE_NORMAL
- en: •   Verifies that the number of courses available is 1
  prefs: []
  type: TYPE_NORMAL
- en: •   Registers a participant for the available course (Solidity 101)
  prefs: []
  type: TYPE_NORMAL
- en: •   Gets the number of participants registered
  prefs: []
  type: TYPE_NORMAL
- en: •   Verifies that the number of course participants is 1
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the above steps expressed in the epm.yaml file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0210-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0211-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To execute the above work and view the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0211-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](p0212-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'That is the end of the tutorial. Now comes the teardown, which isn’t documented.
    In order to tear down the whole virtual environment, you will first exit the secure
    shell, if you haven’t already done so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0213-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then you can start the teardown process as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](p0213-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The above tutorial is a brief introduction to the Monax offering. It demonstrated
    defining and starting up a chain, deploying smart contracts written in Solidity,
    and then calling functions on the smart contracts.
  prefs: []
  type: TYPE_NORMAL
- en: MultiChain
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![Images](f0213-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Websites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.multichain.com](https://www.multichain.com)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/MultiChain/multichain](https://github.com/MultiChain/multichain)'
  prefs: []
  type: TYPE_NORMAL
- en: 'MultiChain is an open-source platform for private chains based on Bitcoin’s
    blockchain. Its key features are:'
  prefs: []
  type: TYPE_NORMAL
- en: •   **Managed permissions**   Control over who can connect; send and receive
    transactions; create assets, streams, and blocks
  prefs: []
  type: TYPE_NORMAL
- en: •   **Rapid deployment**   Two steps to create a new blockchain and three to
    connect to an existing one
  prefs: []
  type: TYPE_NORMAL
- en: •   **Unlimited assets**   Tracked and verified at the network level
  prefs: []
  type: TYPE_NORMAL
- en: •   **Data streams**   Allow the creation of multiple key-value, time series,
    or identity databases on a blockchain
  prefs: []
  type: TYPE_NORMAL
- en: MultiChain provides maximal compatibility with the Bitcoin ecosystem, which
    includes the Bitcoin Core APIs/runtime parameters, the peer-to-peer protocol,
    and its transaction/block formats.
  prefs: []
  type: TYPE_NORMAL
- en: Openchain
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![Images](f0214-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Websites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.openchain.org](https://www.openchain.org)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/openchain](https://github.com/openchain)'
  prefs: []
  type: TYPE_NORMAL
- en: Openchain is an open-source distributed ledger platform for issuing and managing
    digital assets. The administrator of an Openchain instance defines the rules of
    the ledger, then the permissioned end users can exchange value on the ledger according
    to its rules. Each transaction on the ledger is digitally signed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Openchain is a generic register of asset ownership. Some example use cases
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: •   Securities, commodities, currencies
  prefs: []
  type: TYPE_NORMAL
- en: •   Ownership titles (land, real estate, music or software licensing)
  prefs: []
  type: TYPE_NORMAL
- en: •   Reward, gift, and loyalty cards
  prefs: []
  type: TYPE_NORMAL
- en: Quorum
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![Images](f0214-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Websites: [https://github.com/jpmorganchase/quorum](https://github.com/jpmorganchase/quorum)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.jpmorgan.com/country/US/EN/Quorum](https://www.jpmorgan.com/country/US/EN/Quorum)'
  prefs: []
  type: TYPE_NORMAL
- en: Quorum an open-source distributed ledger platform based on the official Go implementation
    of Ethereum. It is designed to support applications that require identity and
    (high-speed/throughput) performance of private transactions within a permissioned
    group of known participants. One of the design goals of Quorum is to reuse as
    much existing Ethereum technology as possible and to keep in sync with future
    versions of the public Ethereum code base.
  prefs: []
  type: TYPE_NORMAL
- en: Quorum also comes with Cakeshop, which is a graphical user interface for working
    with Quorum networks, smart contracts, and APIs. The Quorum consensus mechanism
    is based on majority voting, which results in faster blocktimes, transaction finality,
    and on-demand block creation.
  prefs: []
  type: TYPE_NORMAL
- en: Quorum uses cryptography to shield data from those who are not a party to the
    transaction. Quorum is a single shared blockchain and a combination of changes
    to Ethereum along with smart contracts to segment the private data. The Go-Ethereum
    code base changes are to the block proposal and block validation processes. For
    block validation, all nodes validate public transactions, and they also validate
    private transactions that they are party to when executing the contract code associated
    with the transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Stellar
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![Images](f0215-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Website: [https://www.stellar.org](https://www.stellar.org)'
  prefs: []
  type: TYPE_NORMAL
- en: Stellar is an open-source, distributed payments infrastructure that connects
    banks, payment
  prefs: []
  type: TYPE_NORMAL
- en: 'systems, and people. It enables the building of mobile wallets, banking tools,
    and smart devices. The servers in the chain communicate and sync with each other
    to ensure that transactions are valid and get applied to the ledger. Stellar uses
    its own form of consensus called Stellar Consensus Protocol (SCP). Its key properties
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: •   Low latency.
  prefs: []
  type: TYPE_NORMAL
- en: •   Digital signatures and hash families.
  prefs: []
  type: TYPE_NORMAL
- en: •   Decentralized control where anyone is able to participate and no central
    authority dictates whose approval is required for consensus.
  prefs: []
  type: TYPE_NORMAL
- en: •   Flexible trust. Users have the freedom to trust any combination of parties
    they see fit. For example, a small nonprofit may play a key role in keeping much
    larger institutions honest.
  prefs: []
  type: TYPE_NORMAL
- en: Symbiont Assembly
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![Images](f0215-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Website: [https://symbiont.io/technology/introducing-symbiont-assembly](https://symbiont.io/technology/introducing-symbiont-assembly)'
  prefs: []
  type: TYPE_NORMAL
- en: Symbiont Assembly is an immutable (or “append-only”) database that provides
    a single, global ledger whose transaction history is replicated out to all nodes
    in the network. It is a permissioned ledger, where each user signs their transactions
    so that their identity can be verified by all participants on the network.
  prefs: []
  type: TYPE_NORMAL
- en: Symbiont Assembly uses a proprietary Byzantine fault-tolerant consensus protocol
    called BFT-SMaRt, which was designed with simplicity and modularity in mind, and
    has improved performance over public blockchain consensus protocols.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are many options for permissioned private blockchains, and the list is
    likely to grow. In many cases, government/industry regulation dictates that private
    control is needed. That being said, the freedom, neutrality, and openness that
    started Bitcoin on the public blockchain are things to keep in mind. The focus
    of decentralizing control and consensus on the public platform is clearly something
    to think about. There is a great deal of chatter and concern around privacy, identity,
    speed, and cost of the public blockchain solutions. It is important to note that
    by creating privately administered smart contracts on public blockchains, or cross-chain
    exchange layers that sit in between public and private blockchains, it is possible
    to deliver some degree of the properties of private blockchains on the public
    platforms. Time will tell if these types of capabilities and properties ever get
    built into the public blockchain.
  prefs: []
  type: TYPE_NORMAL
