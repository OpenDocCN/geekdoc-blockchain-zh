- en: Chapter 2\. Overview of Hyperledger Projects and Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous chapter introduced you to the concept of blockchain, its main platforms,
    and terminology. We started with a discussion on the origin of blockchain, and
    then discussed several of its general components (including shared ledger, cryptography,
    consensus, and smart contract components), followed by its architecture and supporting
    technology. This chapter covers the Hyperledger projects and tools, and [Chapter 3](ch03.xhtml#hyperledger_fabric_architecture_and_com)
    covers the Hyperledger Fabric architecture and components. Collectively, [Chapter 1](ch01.xhtml#fundamental_concepts_of_blockchain)
    through [Chapter 3](ch03.xhtml#hyperledger_fabric_architecture_and_com) will provide
    you with the necessary knowledge for [Part III](part03.xhtml#developing_smart_contracts_with_hyperle),
    which delves into smart contract development with Hyperledger Fabric.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter mainly targets those who are relatively new to Hyperledger. The
    primary goal is to explore projects and tools that are developed under Hyperledger
    and to equip you with the necessary knowledge and important technical designs
    of the Hyperledger ecosystem so we can then apply these technologies through real-world
    use cases. The materials included in this chapter will help you understand Hyperledger
    as a whole, and you can use this high-level overview as a guideline for making
    the best of each Hyperledger project.
  prefs: []
  type: TYPE_NORMAL
- en: As a reminder, to design and deploy Hyperledger Fabric blockchain applications,
    you need not thoroughly understand all tools and projects discussed here. Just
    use this chapter as your reference for better navigating through the Hyperledger
    projects. Except for Hyperledger Fabric and a few other projects that we cover
    in depth (Hyperledger Aries, Hyperledger Grid, Hyperledger Avalon, and Hyperledger
    Besu), this chapter should not be considered a definitive guide for all Hyperledger
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: For those who already have a good knowledge of the Hyperledger ecosystem, this
    chapter would be a good “scratch the surface” review. Or, if you prefer, feel
    free to jump to the next chapter to explore the Hyperledger Fabric project.
  prefs: []
  type: TYPE_NORMAL
- en: Although we briefly reviewed the history behind blockchain technology in the
    preceding chapter, in this chapter we will slightly expand on the evolution and
    phases of blockchain before diving into the Hyperledger family architecture and
    ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will help you understand the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The four phases in the evolution of blockchain technology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The architecture and design philosophy behind the Hyperledger family
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger distributed ledger technologies like Indy and Sawtooth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Available tools in the Hyperledger family
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Existing libraries in the Hyperledger family
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evolution and Phases of Blockchain Technology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since its inception, blockchain technology has incorporated ideas and components
    like cryptography that are gaining tremendous popularity among businesses. Also,
    the demand for secure, scalable, and reliable automation practices and solutions
    are among the major challenges that emerging technologies such as blockchain have
    to address. Indeed, the traditional business operations in the 21st century are
    entering into a new phase of automation at the enterprise level. Moreover, at
    the global level, emerging markets are keen on adopting technologies that have
    the potential for self-regulation. As a result, the advent of blockchain and its
    evolution play a prominent role in shaping the landscape of self-governed technologies
    and automation in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: One way to view the advances of blockchain technology is to categorize its evolution
    into four generations. Let’s briefly survey blockchain generations from 1.0 to
    4.0.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain 1.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The initial generation of blockchain came into existence with the advent of
    cryptocurrencies like Bitcoin. The role of blockchain technology was to improve
    the existing monetary system by allowing people to send transactions relying on
    cryptography instead of banks. During this generation of blockchain, the network
    was peer-to-peer, decentralized, anonymous, and at the same time transparent.
    However, as discussed in [Chapter 1](ch01.xhtml#fundamental_concepts_of_blockchain),
    its major drawback was its use of the proof-of-work algorithm, which required
    lots of mining.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain 2.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Blockchain technology turned a corner around 2015 when tech innovators started
    exploring its trustless feature in addition to monetary transactions. This led
    to the creation of the Ethereum platform, which brought about two major innovations:'
  prefs: []
  type: TYPE_NORMAL
- en: The use of other digital assets, besides cryptocurrency, as a basis for other
    decentralized projects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The advent of smart contracts (as discussed in [Chapter 1](ch01.xhtml#fundamental_concepts_of_blockchain))
    added security to transactions by automatically controlling the execution of all
    conditions by all actors while automating the transaction processing for all actors
    in a blockchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain 3.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The third generation of blockchain focused on improving its flaws and deficiencies
    while expanding its use cases. For instance, proof-of-stake consensus replaced
    proof of work. Other features and functionalities were added to boost blockchain
    performance and make it adoptable by different industries. For example, blockchain
    architectures such as the consortium or cross-chain transaction processing were
    invented. Likewise, other changes regarding regulatory compliance and governance,
    privacy, and smart contracts were introduced.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain 4.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Currently, professionals don’t agree on the exact features or direction that
    fourth-generation blockchain technology will take. Some believe that it will merge
    with other disruptive technologies like the Internet of Things or AI. Others think
    it should follow the preceding generations by improving its features to make it
    more efficient, scalable, and accessible to the masses.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout its generations, blockchain has come a long way to establish itself
    as an emerging technology that transforms many traditional business operations.
    As such, a good understanding of previous generations or blockchain history will
    help us foresee its vision and future. Eventually, the technology will find its
    feet among enterprise application development projects in both the private and
    public sectors.
  prefs: []
  type: TYPE_NORMAL
- en: 'The latest trends in blockchain are more often reflected in private blockchain
    projects, also known as distributed ledger technology. These DLT projects are
    usually based on three common use cases:'
  prefs: []
  type: TYPE_NORMAL
- en: Traceability of assets
  prefs: []
  type: TYPE_NORMAL
- en: These projects leave a notarized record within the DLT system that makes this
    information backed up and immutable, to ensure that data that will later be accessible.
    This data can be displayed publicly to ensure that certain sensitive data flows
    in; until now, little transparency existed. These projects also can serve to exploit
    data internally and improve internal processes in companies. In the end, what
    you want is to record a series of events that occurred in a physical or digital
    asset.
  prefs: []
  type: TYPE_NORMAL
- en: Digital identity
  prefs: []
  type: TYPE_NORMAL
- en: This use case is subject to the regulations of each country or region. Many
    companies and governments want to digitize user credentials to enhance user data
    security and privacy. This use case has many legal components, and there are different
    ways to approach it. However, digital identity solutions should be implemented
    on a private blockchain network using a DLT like Hyperledger Fabric. An increasing
    number of companies have implementations of self-sovereign digital identities
    seeking to be accepted by regulation, either by hybridizing existing solutions
    based on digital certificates or using already developed identity standards. This
    will be one of the main projects on blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Digital currency
  prefs: []
  type: TYPE_NORMAL
- en: Digital currency has been one of the main use cases since Ethereum appeared.
    It is still a project that continues to undergo improvements and evolutions. Companies
    such as Facebook and Telegram have tried to build their own new payment systems
    based on digital currency. The end of this new type of currency has not been reached
    either; we will continue to see new implementations, since both banks and governments
    will surely end up using this technology for monetary purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Family, Architecture, and Ecosystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we covered in the previous chapter, the Hyperledger project was initiated
    by the nonprofit Linux Foundation as a collaborative (open source) platform for
    designing and building distributed ledger applications. The platform later gained
    momentum and popularity as large private companies such as IBM and Accenture endorsed
    and supported its mission.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger’s adoption and popularity among private businesses stems from several
    factors. The most notable are its well-designed architecture for private transactions
    and its multiledger structure for handling large-scale datasets. With Ethereum,
    for instance, each node on the network holds the same data, but under Hyperledger
    Fabric, nodes may carry different data, depending on the nature of the transaction
    and business requirements. Also, Hyperledger Fabric allows private data sharing
    among a subset of network members, which is well-suited for enterprise business
    applications. As of this writing, some Hyperledger tools and frameworks are at
    the incubation stage, whereas others are active.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hyperledger comes with 16 projects classified into four categories: distributed
    ledger, tools, libraries, and domain-specific projects. We review these 16 projects
    in more detail later in this chapter. For a comprehensive review of individual
    projects and their latest updates or news, visit the Hyperledger project website
    at [www.hyperledger.org](http://www.hyperledger.org).'
  prefs: []
  type: TYPE_NORMAL
- en: The Hyperledger Design Philosophy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we discuss how the Hyperledger framework works, it would be good to have
    a basic understanding of the Hyperledger philosophy. Projects under the Hyperledger
    umbrella have incorporated several principles that are essential for meeting the
    multitude of business requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Modular architecture
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Blockchain applications built with Hyperledger use multiple components such
    as policies, consensus, and chaincodes. This modular architecture allows these
    components to communicate with one another efficiently, while making it easy for
    the developer community to maintain each component independently.
  prefs: []
  type: TYPE_NORMAL
- en: Ultra secure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since data stored on a blockchain application is immutable, it requires a higher
    level of security compared with other applications. Also, the enterprise nature
    of Hyperledger, where multiple ledgers can be stored in its blockchain nodes,
    requires an ultra level of security. Therefore, Hyperledger was designed and developed
    with such security considerations in place since its inception. Indeed, the expert
    team of Hyperledger security regularly reviews and audits security protocols and
    procedures to meet the ever-changing requirements of the cybersecurity landscape.
  prefs: []
  type: TYPE_NORMAL
- en: Interoperability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The interoperability feature of Hyperledger is a distinct feature that allows
    its applications to connect and interact with blockchain applications and networks
    built on other platforms like Ethereum. Indeed, even within Hyperledger projects,
    you can use this interoperability to connect one Hyperledger project to another.
  prefs: []
  type: TYPE_NORMAL
- en: Noncryptocurrency architecture
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The architecture of Hyperledger does not incorporate cryptocurrency tokens like
    Bitcoin. Since its inception, Hyperledger was designed to be used for enterprise
    application development rather than a place for holding and managing cryptocurrencies.
  prefs: []
  type: TYPE_NORMAL
- en: Application programming interfaces
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With current fast-paced developments in the cloud and emerging technologies
    like artificial intelligence, it is imperative for enterprise blockchain applications
    to have rich APIs to communicate and exchange data with existing systems. In fact,
    an API as a bridge between on-chain and off-chain data is common in enterprise
    blockchain developments. To stay ahead of the game, each project under Hyperledger
    has embedded rich APIs into its architecture. The API feature alone is advancing
    the popularity and adoption of Hyperledger among the developer community.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the official Hyperledger website and publications for more detail about
    these features. Now let’s take a look at how the Hyperledger framework works.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Hyperledger
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hyperledger comes with several essential components. Here we’ll briefly discuss
    the eight business blockchain components of Hyperledger.
  prefs: []
  type: TYPE_NORMAL
- en: Consensus layer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The consensus layer has undergone various modifications over time in Hyperledger
    Fabric. First, there was Solo mode, followed by Kafka mode along with Apache ZooKeeper
    to put Fabric networks into production, and now Raft has finally appeared to replace
    Kafka and ZooKeeper. This latest change has given greater power and simplicity
    to Fabric deployments and has brought blockchain technology within reach. It is
    a success for the Hyperledger team.
  prefs: []
  type: TYPE_NORMAL
- en: Smart contract layer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Smart contracts, as with consensus, have evolved within the Hyperledger road
    map. In the beginning, no clear definition existed of the supported languages
    within Fabric. The Fabric developer community, for example, removed Java and then
    included it again. Now developers have also included the TypeScript language.
    In previous versions of Fabric, the installation of chaincodes was quite centralized.
    Hyperledger Fabric v2 introduced new governance, allowing for a more decentralized
    way to perform Fabric installations. We discuss this topic in more detail in [Chapter 9](ch09.xhtml#hyperledger_fabric_vtwo_integration),
    where you’ll learn more about new features introduced in v2.
  prefs: []
  type: TYPE_NORMAL
- en: Communication layer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Communication among peers is one of the most sensitive parts in all blockchains,
    especially to avoid attacks by middlemen. For this reason, it is recommended,
    in many cases, to use the Transport Layer Security (TLS) configuration that Fabric
    provides as one more security point in communications.
  prefs: []
  type: TYPE_NORMAL
- en: Data store abstraction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The way data is stored in Fabric is special. We can store data in either Apache
    CouchDB or by default in LevelDB (you can read more about this in [Chapter 9](ch09.xhtml#hyperledger_fabric_vtwo_integration)).
    CouchDB comes with many more features than LevelDB, and supports the following:'
  prefs: []
  type: TYPE_NORMAL
- en: More programming languages, including Ruby and PHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: APIs and other access methods like RESTful HTTP/JSON API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multisource replication and source-replica replication methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Crypto abstraction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cryptography that Fabric uses within its operation is quite complex and
    works perfectly within the entire call flow among network components. Within these
    cryptographic algorithms, we can find ZKP, which, as discussed in [Chapter 1](ch01.xhtml#fundamental_concepts_of_blockchain),
    allows blockchain transactions within the Fabric network to be verified while
    maintaining user anonymity. Fabric uses another cryptographic protocol called
    *Identity Mixer* to protect users’ privacy when signing, authenticating, and transferring
    certified attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Identity service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The identity services available with Fabric are based on fairly configurable
    certificate authority (CA) architectures. Normally, it is advisable to have a
    root CA, and then intermediate CAs that manage the certificates. And if that were
    not enough, Hyperledger also allows the management of all these certificates to
    be carried out with a hardware security module (HSM) connected to the CA.
  prefs: []
  type: TYPE_NORMAL
- en: API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In our opinion, the API is one of the fundamental pieces of Fabric because it
    is where the use of blockchain data opens up to the outside world. The intuitive
    and convenient Fabric SDKs are used to interconnect the blockchain with any external
    digitized system. Fabric has SDKs in both Node.js and Go as well as Java, and
    with fairly complete documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Interoperation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since Fabric is continually evolving, we need interoperability among the multiple
    versions of Fabric networks. This is a characteristic that Fabric’s developers
    have decided to maintain, and it provides greater continuity to the projects.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s look at how we can utilize the Hyperledger ecosystem to solve real-world
    business problems. In the next two sections, we cover Hyperledger projects, tools,
    and libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Hyperledger Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since Hyperledger is gaining strong support from the open source community,
    new projects are regularly added to the ecosystem. At the time of this writing,
    six projects are active and ten others are in the incubation stage. Each project
    has unique advantages. The Hyperledger projects, as listed in [Table 2-1](#hyperledger_projects_and_typesbased_on),
    are categorized into four types: distributed ledger (or framework), libraries,
    tools, and domain-specific projects.'
  prefs: []
  type: TYPE_NORMAL
- en: Table 2-1\. Hyperledger projects and types^([a](ch02.xhtml#ch01fn1))
  prefs: []
  type: TYPE_NORMAL
- en: '|  |  | Project type |  |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|  | Project name | Distributed ledger | Libraries | Tools | Domain-specific
    | Status |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Hyperledger Indy | X |  |  |  | Active |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Hyperledger Fabric | X |  |  |  | Active |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | Hyperledger Aries |  | X |  |  | Active |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | Hyperledger Iroha | X |  |  |  | Active |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Hyperledger Sawtooth | X |  |  |  | Active |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | Hyperledger Besu | X |  |  |  | Active |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | Hyperledger Quilt |  | X |  |  | Incubation |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | Hyperledger Ursa |  | X |  |  | Incubation |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | Hyperledger Transact |  | X |  |  | Incubation |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | Hyperledger Cactus | X |  |  |  | Incubation |'
  prefs: []
  type: TYPE_TB
- en: '| 11 | Hyperledger Caliper |  |  | X |  | Incubation |'
  prefs: []
  type: TYPE_TB
- en: '| 12 | Hyperledger Cello |  |  | X |  | Incubation |'
  prefs: []
  type: TYPE_TB
- en: '| 13 | Hyperledger Explorer |  |  | X |  | Incubation |'
  prefs: []
  type: TYPE_TB
- en: '| 14 | Hyperledger Grid |  |  |  | X | Incubation |'
  prefs: []
  type: TYPE_TB
- en: '| 15 | Hyperledger Burrow | X |  |  |  | Incubation |'
  prefs: []
  type: TYPE_TB
- en: '| 16 | Hyperledger Avalon |  |  | X |  | Incubation |'
  prefs: []
  type: TYPE_TB
- en: '| ^([a](ch02.xhtml#ch01fn1-marker)) Based on information available from the
    Hyperledger website as of August 2021. |'
  prefs: []
  type: TYPE_TB
- en: This section covers the seven Hyperledger projects that are in the distributed
    ledger category. Further, we briefly explain Hyperledger Grid, a domain-specific
    project for building blockchain supply chains. [“Overview of Hyperledger Tools
    and Libraries”](#overview_of_hyperledger_tools_and_libra) covers the remaining
    two Hyperledger project categories.
  prefs: []
  type: TYPE_NORMAL
- en: Distributed Ledger Frameworks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Seven projects are frameworks for building blockchain distributed ledgers with
    Hyperledger. These framework projects aim to provide platforms for building a
    variety of distributed ledgers and their components. Each project under the Hyperledger
    umbrella has an implementation of its own, as briefly discussed in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Indy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A nonprofit group called the Sovrin Foundation originally developed *Hyperledger
    Indy* as a means for individuals to hold and share their identities with whom
    they want. With the increasing popularity of identity management, especially among
    blockchain use cases, Hyperledger Indy gained momentum to become a decentralized
    platform for managing identities. It comes with tools and features essential for
    digital wallet management on a blockchain network or other distributed ledger
    systems. Internet users, for example, can use one single persistent authentication
    (username and password) stored in Indy for accessing and using all sites on the
    internet.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Fabric
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As covered intensively in this book, *Hyperledger Fabric* is currently the most
    popular and vastly adopted project under the Hyperledger umbrella. Fabric comes
    with modular components like peers, smart contracts, and channels that make it
    suitable for building and managing multiledger enterprise-grade blockchain applications.
    Its smart contract can be written (as covered in detail in [Chapter 4](ch04.xhtml#smart_contract_development))
    in multiple languages like Go, JavaScript, and Java.
  prefs: []
  type: TYPE_NORMAL
- en: The architecture of Hyperledger allows for multiple companies to join and conduct
    transactions as a single consortium. Likewise, as business requirements grow,
    companies can become members of multiple consortiums at once. Indeed, policies
    are one of the most powerful components of Fabric; the policies come with configurations
    that allow both simple (consisting of two members) and complex (consisting of
    multiple consortiums, each with multiple members) blockchain networks to operate.
  prefs: []
  type: TYPE_NORMAL
- en: Note that since this book is about Hyperledger Fabric, we will cover its framework,
    architecture, and components in depth in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Iroha
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Hyperledger Iroha* was originally built by a group of Japanese developers
    in C++ for a few mobile use cases. Similar to Indy, Iroha manages digital wallets
    consisting of identities and digital assets. In addition, it offers role-based
    authentication for accessing and controlling digital credentials.'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Sawtooth
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Originally developed by Intel, *Hyperledger Sawtooth* has the advanced proof-of-elapsed-time
    consensus algorithm that can target a large distributed validator population by
    using the minimum resources possible. Unlike Fabric, Sawtooth has a decentralized
    ordering service: whereas Fabric has only a centralized orderer node that is responsible
    for accepting all transactions and adding them to blocks, each node in the Sawtooth
    network can process and approve transactions and subsequently add them to the
    blockchain network. Furthermore, Sawtooth supports both private and permissionless
    networks. Through integration with Hyperledger Burrow, Sawtooth supports the Ethereum
    Virtual Machine.'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Besu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Written in Java, *Hyperledger Besu* runs on both Ethereum public networks and
    private blockchain networks. One of its main features is its support for multiple
    consensus algorithms such as proof of work, proof of authority, and Istanbul Byzantine
    fault tolerance. Its advance permissioning schemes are especially well suited
    for large-scale transition processing seen in enterprise consortium applications.
  prefs: []
  type: TYPE_NORMAL
- en: Besu follows the specifications and requirements of the Enterprise Ethereum
    Alliance (EEA). In a nutshell, EEA regulates the interactions among public and
    private applications within an Ethereum network. By following EEA guidelines and
    common interface protocols, Besu makes the communication between private and public
    blockchain applications within Hyperledger possible. We elaborate on Besu in detail
    in [Chapter 10](ch10.xhtml#overview_of_other_hyperledger_projects).
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Cactus
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Motivated by concerns in the business community concerning the life cycle of
    an existing blockchain platform and whether companies can perform in an ecosystem
    in which changing technological environments are inevitable, *Hyperledger Cactus*
    came into existence. Even though it is still at the incubation stage (as an Apache
    v2–licensed open source project), Cactus—previously known as the Blockchain Integration
    Framework—is capable of securely connecting blockchain networks in such a way
    that the execution of ledger operations is pluggable among multiple blockchain
    networks at once. Such pluggability, based on its SDK, provides an opportunity
    for developers from different networks to connect their DLTs to Cactus.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Burrow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Partially based on EVM specifications, *Hyperledger Burrow* was created to provide
    a permissioned smart contract interpreter to execute EVM and other (for example,
    WebAssembly) smart contracts on a private virtual machine. Using PoS as its consensus
    algorithm, Burrow is capable of transaction finality as well as high-transaction
    throughput. Its two other notable features are on-chain governance, wherein members
    can vote for self-governed upgrades of smart contracts; and setting code execution
    permissions at a low level (for example, per account).
  prefs: []
  type: TYPE_NORMAL
- en: Domain-Specific
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we reviewed all the framework projects of Hyperledger, we wrap up this
    section by briefly going over Hyperledger Grid, which is the only domain-specific
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Grid
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As supply chain data is securing its place as a prominent use case of blockchain,
    it is attracting the attention of the Hyperledger community and blockchain developers
    to come up with a framework that addresses supply chain solutions. *Hyperledger
    Grid* brings together technologies, frameworks, and libraries to work in concert
    while allowing developers to decide which component best fits their industry and
    market requirements. Grid supports the WebAssembly smart contract engine, which
    provides internal and external Hyperledger integrations. With regard to supply
    chain transactions, Grid supports the transformation, exchange, and tracking of
    assets.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Hyperledger Tools and Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section, we briefly reviewed the seven Hyperledger framework
    projects for building blockchain distributed ledgers. In this section, we continue
    exploring the remaining projects in two categories: tools and libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The tool projects provide a set of utilities to make working with blockchain
    networks easier. These tools handle tasks including performance measurement, on-demand
    deployment, and building a business network with existing business models. The
    following are the four key Hyperledger tool projects.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Caliper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Hyperledger Caliper* is a benchmarking tool for measuring blockchain performance
    and is written in JavaScript. Caliper comes with multiple performance indices
    for measuring transaction throughput like total transactions per second or transaction
    latency. Using Caliper in conjunction with other Hyperledger distributed ledgers
    like Fabric is highly recommended, especially for enterprise projects, as it provides
    developers with objective metrics for system improvements.'
  prefs: []
  type: TYPE_NORMAL
- en: Caliper is one of the most important tools to use in Hyperledger projects (even
    in Quorum or Ethereum projects, since it also supports those types of blockchains).
    It offers connectors to various blockchains, which gives it great power and usability.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Cello
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Hyperledger Cello* brings the on-demand deployment model to blockchains and
    is written in Go. Cello allows blockchain practitioners to manage their blockchains
    more efficiently. For instance, using Cello, the management of network life cycles
    can be automated. Likewise, using Cello, system administrators can manage custom
    configurations of their network. From an implementation perspective, developers
    can use Cello to easily build blockchain-service solutions. In short, it is a
    great resource for all Hyperledger system administrators.'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Explorer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although being deprecated, *Hyperledger Explorer* was originally used as a web
    user interface (UI) dashboard for viewing and managing blockchain transactions
    as well as network information. Tasks such as querying the block, and invoking
    or deploying transactions into blocks, were possible. Explorer was popular among
    nondevelopers and folks who wanted to manage Hyperledger applications and networks
    without writing code or using a command-line interface.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Avalon
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously known as Trusted Compute Framework, *Hyperledger Avalon* addresses
    issues related to confidentiality and scalability by moving the on-chain processing
    tasks to off-chain systems whose computational power is enormous. While still
    at the incubation stage, if implemented in a blockchain, Avalon monitors and tracks
    off-chain transactions. This will result in better transaction policy enforcement
    and more transparent transaction audits. Once the power of off-chain computational
    power is combined with trust, developers can increase production and boost data
    privacy. One of Avalon’s interesting features is its ability to manage the work-order
    life cycle, from registering workers to submitting and finishing orders. We elaborate
    on Avalon in [Chapter 10](ch10.xhtml#overview_of_other_hyperledger_projects).
  prefs: []
  type: TYPE_NORMAL
- en: Libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following are four key Hyperledger libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Aries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Hyperledger Aries* is an application (not a blockchain) for managing digital
    wallets via verifiable credentials so that they can be shared and reused. Its
    peer-to-peer architecture enables blockchain-based data to be shared and communicated
    across multiple blockchain networks or distributed ledger technologies. In addition
    to managing secrets and exchanging verifiable data, Aries allows parties in a
    blockchain to securely exchange confidential information among themselves by using
    its peer-to-peer messaging system. [Chapter 10](ch10.xhtml#overview_of_other_hyperledger_projects)
    covers Aries in more detail.'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Quilt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although it’s at the incubation stage, *Hyperledger Quilt* can act as an intermediary
    between ledger systems to perform Interledger Protocol (ILP) transactions at the
    enterprise level. ILP regulates and manages payments across multiple payment networks
    by connecting distributed ledgers and allowing cross-ledger payment processing.
    The ILP idea was borrowed from the Internet Protocol, as each node or connector
    can route packets of money or an asset across independent networks.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Ursa
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The main purpose of *Hyperledger Ursa* is to boost blockchain network security
    by acting as a shared library of cryptographic data, which prevents people from
    doing redundant cryptographic work. Ursa is currently at the incubation stage;
    however, it comes with two interesting features. First, Ursa is interoperable
    across multiple platforms because the cryptographic verification involves a similar
    protocol on each end of the platforms. Second, Ursa enables modularity through
    sharing common components across multiple networks, eventually leading to more
    modular DLT architectures and adoptions.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Transact
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Hyperledger Transact* is an amazing library for executing transactions with
    smart contracts regardless of the platform for which that contract is written.
    If implemented properly, Transact would be able to integrate smart contract technologies
    like WebAssembly. Although it’s at the incubation stage, Transact will bring about
    a paradigm shift in smart contract development as developers will be able to build
    a smart contract in one language and deploy it simultaneously on multiple platforms.'
  prefs: []
  type: TYPE_NORMAL
- en: Specifically, the capability to execute a smart contract without any dependency
    on its platform creates lots of avenues for collaboration, ledger implementation,
    and source code reusability. Smart contracts, which are at the core of a blockchain
    platform, often consume lots of development time and effort. By using Transact
    as a unified interface for smart contract execution, companies and developers
    can reduce their development and product life cycles.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter started by reviewing the evolution and phases of blockchain and
    then discussed design philosophy, core components, and the architecture of the
    Hyperledger ecosystem. You’ve learned how the various versions, or generations,
    of blockchain have brought about its adoption in both the private and public sectors.
    You also learned the eight key components (consensus layer, smart contract layer,
    communication layer, data store abstraction, crypto abstraction, identity service,
    API, interoperation) embedded in the Hyperledger architecture, making it the top
    choice for building enterprise permissioned blockchain applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also briefly reviewed all 16 projects (consisting of six active projects
    and ten others at the incubation stage) that are part of the Hyperledger ecosystem.
    Finally, we highlighted all 16 projects’ unique advantages and various functionalities
    by categorizing them into four types: distributed ledger, libraries, tools, and
    domain-specific projects.'
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter expands upon the Hyperledger Fabric architecture and components
    to prepare you for building Hyperledger Fabric applications in [Chapter 4](ch04.xhtml#smart_contract_development)
    and onward.
  prefs: []
  type: TYPE_NORMAL
