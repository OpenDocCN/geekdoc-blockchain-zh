- en: Chapter 5\. Tokenize Everything
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。一切都可代币化
- en: 'The advent of Bitcoin gave developers an opportunity to explore different types
    of cryptocurrencies. Yet it was Ethereum, a totally new technology, that gave
    coders the ability to easily create new cryptocurrencies on top of its blockchain,
    known as *tokens*. Today, there are tens of thousands of cryptocurrencies, mostly
    thanks to Ethereum. The Ethereum network sparked the proliferation of the concept
    of “tokenize everything” via initial coin offerings (ICOs), which allow a project
    to raise cryptocurrency funds and give investors tokens in exchange. This chapter
    looks at how that happened. We’ll begin by introducing a few notable examples:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币的出现为开发者提供了探索不同类型加密货币的机会。然而，完全新的技术以太坊给了编码者在其区块链上轻松创建新加密货币（被称为*代币*）的能力。今天，多亏了以太坊，有成千上万种加密货币。以太坊网络通过初始代币发行（ICOs）引发了“一切都可代币化”的概念的蓬勃发展，这使得项目可以筹集加密货币资金，并向投资者提供代币作为交换。本章将探讨这是如何发生的。我们将首先介绍几个显著的例子：
- en: Mastercoin
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Mastercoin
- en: Developer J.R. Willett began working on the Mastercoin whitepaper in 2011\.
    His [aim](https://oreil.ly/tVC-J) was not “to bootstrap an entirely new blockchain,
    as every other cryptocurrency does,” but rather “to create an entirely new network
    of currencies, commodities, and securities on top of Bitcoin itself.” Willett
    eventually realized that community backing in the form of investment via bitcoin
    might help foster adoption. So, he held the first “token sale,” or ICO, in 2013\.
    This enabled Mastercoin to raise [3,700 BTC, or about $2.3 million](https://oreil.ly/UXrMe)
    at the time.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者 J.R. Willett 在2011年开始研究 Mastercoin 白皮书。他的[目标](https://oreil.ly/tVC-J)并非“像其他加密货币一样启动一个全新的区块链”，而是“在比特币本身之上创建一个全新的货币、商品和证券网络”。Willett
    最终意识到，通过比特币的社区支持可能有助于促进采用。因此，他于2013年举行了第一次“代币发售”，或ICO。这使得 Mastercoin 在当时筹集了[3,700
    BTC，约为230万美元](https://oreil.ly/UXrMe)。
- en: Ethereum
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊
- en: As described in the previous chapter, the beginnings of Ethereum trace back
    to November 2013, when Vitalik Buterin began emailing around a whitepaper proposing
    a new protocol based on elements of Bitcoin, Mastercoin, and other projects. This
    document was disseminated throughout the cryptocurrency community, and developers
    and backers began to accumulate. Buterin made a public announcement of the Ethereum
    project in February 2014.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前一章所述，以太坊的起源可以追溯到2013年11月，当时 Vitalik Buterin 开始传阅一份白皮书，提出了一个基于比特币、Mastercoin
    和其他项目元素的新协议。这份文件在加密货币社区广泛传播，开发者和支持者开始聚集。Buterin 在2014年2月公开宣布了以太坊项目。
- en: A Swiss-based nonprofit foundation was created to initiate the ICO, and starting
    in July 2014, for 42 days Ethereum conducted a crowdsale. Approximately 60 million
    ether tokens were sold, raising some 31,000 BTC (around $18 million at the time).
    This became the template for many other ICOs in the future.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一个总部位于瑞士的非营利基金会成立了进行 ICO，从2014年7月开始，以太坊进行了为期42天的众筹。大约售出了6000万以太代币，筹集了大约31000
    BTC（当时约为1800万美元）。这成为了许多未来 ICO 的模板。
- en: Gnosis
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Gnosis
- en: A decentralized prediction market platform, Gnosis shares some concepts and
    some personnel with the Augur project, an early Ethereum-based offering that had
    its ICO in 2015\. The Gnosis multisignature wallet is still one of the most widely
    used in the Ethereum ecosystem, especially for applications such as cold storage
    of tokens.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一个去中心化的预测市场平台，Gnosis 与 Augur 项目共享一些概念和一些人员，Augur 是一个早期基于以太坊的项目，于2015年进行了 ICO。Gnosis
    的多签钱包仍然是以太坊生态系统中最广泛使用的，特别是用于代币的冷存储等应用。
- en: 'The most interesting aspect of the Gnosis project’s ICO was the Dutch-style
    auctioning system it employed. This novel concept enabled tokens to decline in
    value over the time of the ICO, encouraging investors to wait until the end to
    get the best pricing. Most ICOs are conducted the reverse way: cheaper tokens
    are offered the earlier an investor gets in. However, this proved successful as
    Gnosis was able to raise over [$300 million in 15 minutes](https://oreil.ly/_Cf97)
    while keeping 95% of the cryptocurrency attributed to the project and its founders.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Gnosis 项目 ICO 最有趣的方面是它采用的荷兰式拍卖系统。这一新颖的概念使代币在 ICO 的时间内价值下降，鼓励投资者等到最后才获得最佳定价。大多数
    ICO 是以相反的方式进行的：投资者越早参与，代币越便宜。然而，这被证明是成功的，因为 Gnosis 在 15 分钟内筹集了[超过 3 亿美元](https://oreil.ly/_Cf97)，同时保留了项目及其创始人的
    95% 的加密货币。
- en: EOS
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: EOS
- en: EOS.IO, brainchild of Daniel Larimer, is a blockchain protocol that aims to
    solve the scalability issues of blockchains by distributing computing resources
    equally among EOS cryptocurrency holders. The project raised [over $4 billion
    in a year](https://oreil.ly/79g90), one of the biggest raises ever, by using an
    uncapped token sale on Ethereum. The offering was for an ERC-20 token called EOS,
    which was converted into the native token once their native blockchain was ready.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: EOS.IO 是 Daniel Larimer 的创意，是一个旨在通过将计算资源平均分配给 EOS 加密货币持有者来解决区块链可扩展性问题的区块链协议。该项目在以太坊上使用了一个无上限的代币销售，在一年内筹集了[超过
    40 亿美元](https://oreil.ly/79g90)，是有史以来最大的筹资之一。这次发行的是一种名为 EOS 的 ERC-20 代币，一旦他们的原生区块链准备就绪，它们就会被转换为原生代币。
- en: Tokens on the Ethereum Platform
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊平台上的代币
- en: Creating a token allows developers to create a cryptocurrency on the Ethereum
    network. This enables anyone to issue an asset on a blockchain using one of the
    most well-known cryptocurrency protocols. The [ERC-20 standard on Ethereum](https://eips.ethereum.org/EIPS/eip-20)
    is a reference implementation of blockchain assets on the network, paving the
    way for tokens to have properties that enable their use across many different
    exchanges, wallets, and other blockchain services. There *are* other blockchain
    platforms for issuing tokens. However, issuing an ERC-20 asset on Ethereum is
    one of the easiest and most secure ways to create a cryptocurrency today.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 创建代币使开发人员能够在以太坊网络上创建加密货币。这使任何人都可以使用最知名的加密货币协议之一在区块链上发行资产。[以太坊上的 ERC-20 标准](https://eips.ethereum.org/EIPS/eip-20)是网络上区块链资产的参考实现，为代币拥有能够使它们在许多不同的交易所、钱包和其他区块链服务中使用的属性铺平了道路。确实，还有其他发行代币的区块链平台。但是，今天在以太坊上发行
    ERC-20 资产是创建加密货币的最简单、最安全的方法之一。
- en: Outside of technical projects like mobile dapps, distributed computing, or payment
    mechanisms, tokens have the potential to disrupt existing financial services where
    bottlenecks still exist. Blockchain and cryptocurrency have the ability to represent
    something of value in the real world, as long as they can be properly pegged back
    to a real-world asset.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在技术项目之外，如移动 dapps、分布式计算或支付机制等领域，代币有潜力颠覆现有金融服务，其中仍然存在瓶颈。只要它们能够正确地与现实世界的资产挂钩，区块链和加密货币就有能力代表现实世界中的某种价值。
- en: In complex real estate transactions, for example, tokens on a blockchain could
    enable better record keeping for owners—the state of Ohio is looking at [using
    blockchain for this purpose](https://oreil.ly/GEupr). In the future, transfers
    of assets could be completed more quickly and easily using tokens. Other areas
    where tokens may prove useful to prove authenticity could include art, cars, and
    stocks and bonds.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在复杂的房地产交易中，区块链上的代币可以使所有者更好地记录——俄亥俄州正在[考虑使用区块链来实现此目的](https://oreil.ly/GEupr)。未来，使用代币可以更快速、更轻松地完成资产转移。其他代币可能证明其真实性有用的领域包括艺术品、汽车、股票和债券。
- en: Fungible and Nonfungible Tokens
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可替代和不可替代代币
- en: Not all tokens are created equal. One of the most important differentiators
    when creating tokens is whether they are *fungible* or *nonfungible*. Fungible
    tokens all have the same value and are interchangeable with one another, whereas
    nonfungible tokens represent something that is unique.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有代币都是相同的。创建代币时最重要的区分因素之一是它们是*可替代*还是*不可替代*。可替代代币具有相同的价值，并且彼此可互换，而不可替代代币代表的是独特的东西。
- en: Examples of fungible assets are currencies like the US dollar. One dollar is
    one dollar, whether it exists in a physical form as coins or a bill or digitally
    in a bank account or other financial service. Most cryptocurrencies, like bitcoin,
    ether, and ERC-20 assets, are also fungible.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 可互换资产的例子包括像美元这样的货币。一美元就是一美元，无论它是以硬币或纸币的形式存在，还是以数字形式存在于银行账户或其他金融服务中。大多数加密货币，如比特币、以太币和
    ERC-20 资产，也是可互换的。
- en: Items such as cars or houses are nonfungible—each is unique and not interchangeable
    with any other random car or house. [CryptoKitties](https://www.cryptokitties.co)—digital
    cats represented on Ethereum as ERC-721 tokens—are another example of a nonfungible
    asset (we discuss this example more later in this chapter).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 车辆或房屋等物品是不可互换的——每一个都是独一无二的，不能与其他任何随机的车辆或房屋互换。[CryptoKitties](https://www.cryptokitties.co)—以太坊上以
    ERC-721 代币形式表示的数字猫——是不可互换资产的另一个例子（我们稍后在本章中会详细讨论这个例子）。
- en: Note
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: There are implications to creating tokens. Cryptocurrency markets are highly
    volatile. If a token is listed on an exchange and used only for speculation, its
    price could become highly unstable.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 创建代币有其影响。加密货币市场非常波动。如果一个代币被列入交易所并且仅用于投机，其价格可能会变得非常不稳定。
- en: Smart contract development is a nascent area of computer science. It is highly
    recommended that a third-party auditor (like [OpenZeppelin](https://openzeppelin.com/contracts),
    which contributed background for this chapter) take a look at your code before
    you bring a token into the wild. Other well-known companies providing such services
    include [Trail of Bits](https://www.trailofbits.com) and [Chainsecurity](https://chainsecurity.com).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约开发是计算机科学的一个新兴领域。强烈建议在将代币投入使用之前，让第三方审计员（例如[OpenZeppelin](https://openzeppelin.com/contracts)为本章提供了背景）审查一下您的代码。提供此类服务的其他知名公司包括[Trail
    of Bits](https://www.trailofbits.com)和[Chainsecurity](https://chainsecurity.com)。
- en: Ethereum offers many different token types that can be issued. Some popular
    ones include ERC-20, ERC-721, ERC-223, ERC-777, and ERC-1400\. The variety enables
    developers to create different types of functional cryptocurrencies on top of
    the Ethereum blockchain.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊提供了许多不同类型的代币可以发行。一些流行的类型包括 ERC-20、ERC-721、ERC-223、ERC-777 和 ERC-1400。这种多样性使开发人员能够在以太坊区块链上创建不同类型的功能性加密货币。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: An exhaustive list of Ethereum token standards is available on [GitHub](https://oreil.ly/zBZ5x).
    Some of the tokens listed are currently functional, whereas others are merely
    proposed ideas.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有关以太坊代币标准的详尽列表可在[GitHub](https://oreil.ly/zBZ5x)上找到。其中列出的一些代币目前正在使用，而另一些仅仅是提出的想法。
- en: Thanks to Ethereum’s nature, new types of cryptocurrencies on the Ethereum blockchain
    may provide real-world benefits. [ERC-846, which provides for shared ownership
    of a token](https://oreil.ly/TbdBg), is a good example of a real-world use case.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于以太坊的性质，以太坊区块链上的新型加密货币可能提供现实世界的好处。[ERC-846，提供代币的共享所有权](https://oreil.ly/TbdBg)是一个现实用例的好例子。
- en: Is a Token Necessary?
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 是否需要代币？
- en: 'One existential question developers should ask when developing blockchain-based
    solutions is: *Is a token necessary?* Many tokenization/ICO projects have been
    developed with a token for fundraising, but with no clear motivation other than
    to have a cryptocurrency. Although ICOs are a good method of using crypto for
    fundraising, regulatory pressure is pushing developers to create tokens that have
    a greater function within projects.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发基于区块链的解决方案时，开发人员应该问自己的一个存在性问题是：*是否需要一个代币？* 许多代币化/ICO 项目开发了一个代币用于筹款，但除了拥有一种加密货币外，没有明确的动机。虽然ICO是一种利用加密货币进行筹款的好方法，但监管压力正在推动开发人员创建在项目内具有更大功能的代币。
- en: A token may not be useful for a blockchain-based project if it is only for fundraising.
    In addition, any project looking for stable asset value will not find a token
    to be a suitable solution, although assets like stablecoins may be. Any processing
    function that has an asset that is unstable could prove to be problematic in the
    future. This is an issue already experienced on the blockchain in the form of
    transaction fees. A fee on the Bitcoin network, for example, can change based
    on how much network demand there is. The greater the demand, the less space is
    available in the blocks, which can create a fee market where the highest bidder
    “wins.” This supply and demand paradigm also exists in Ethereum for gas fees and
    token prices once they hit exchanges.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个基于区块链的项目仅用于筹款，那么代币可能对该项目没有用处。此外，任何寻求稳定资产价值的项目都不会发现代币是一个合适的解决方案，尽管像稳定币这样的资产可能是。任何具有不稳定资产的处理功能在未来可能会出现问题。这已经在区块链上以交易费用的形式经历过。例如，比特币网络上的费用可以根据网络需求的大小而变化。需求越大，区块中可用空间就越少，这可能会创建一个费用市场，最高出价者“获胜”。这种供求范式在以太坊中也存在，用于气体费用和代币价格一旦它们进入交易所。
- en: Airdrops
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空投
- en: As we’ve said, the main way to distribute tokens is via an ICO or similar type
    of offering. Another alternative is doing an *airdrop*. Intended to leverage network
    effects of already existing blockchains, airdrops are free or low-cost disbursements
    of cryptocurrencies to a large subset of users. The idea is to rapidly give a
    project a user base from its inception, baking in adoption of an already existing
    project/cryptocurrency. The largest case so far has been the Stellar Foundation’s
    [$125 million airdrop](https://oreil.ly/ch3IJ) of its XLM token via the Blockchain.info
    wallet.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所说，分发代币的主要方式是通过ICO或类似的方式。另一个选择是进行*空投*。空投旨在利用已经存在的区块链的网络效应，它是向大量用户免费或低成本分发加密货币的一种方式。其想法是在项目初始阶段快速为项目建立用户群体，从而加速对已经存在的项目/加密货币的采用。到目前为止，最大的案例是恒星基金会通过Blockchain.info钱包空投其XLM代币的
    [$125 million](https://oreil.ly/ch3IJ)。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Airdrops may seem like a solution to nascent cryptocurrency adoption, but they’re
    not without their drawbacks. In particular, there likely are tax implications
    for users to obtain a cryptocurrency-based asset at zero cost. When sold, there
    could be a taxable event, depending on jurisdiction. Providing a token at nearly
    no cost also might not bode well for future value, due to dilution of the underlying
    cryptocurrency being airdropped. There’s no such thing as a free lunch in economics,
    so there could be compensating or even extra costs to airdrops.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 空投可能看起来是解决新兴加密货币采用的一种方法，但它们并非没有缺点。特别是，用户以零成本获得基于加密货币的资产可能存在税务影响。根据司法管辖区的不同，在出售时可能会产生应税事件。几乎没有成本提供代币也可能对未来价值产生不利影响，因为空投导致底层加密货币的稀释。在经济学中没有免费午餐，因此空投可能会产生补偿或甚至额外的成本。
- en: Different Token Types
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不同类型的代币
- en: 'Different Ethereum tokens have different technical specifications, and they
    also use different nomenclature depending on how regulators around the world define
    them. It’s important for developers to understand the various terms being floated
    regarding how to define tokens:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的以太坊代币具有不同的技术规格，也根据全球监管机构的定义不同的命名方式。开发人员理解如何定义代币的各种术语非常重要：
- en: Utility
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 实用性
- en: '*Utility* in the context of tokens means that a blockchain-based cryptocurrency
    must have some use outside of financial speculation. There are several longstanding
    projects attempting to do this in the blockchain world. One of the best-known
    is [Filecoin](https://filecoin.io), where tokens grant users access to space on
    a decentralized cloud storage platform.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在代币的上下文中，*实用性*意味着基于区块链的加密货币必须在金融投机之外有一些用途。在区块链世界中有几个长期存在的项目试图做到这一点。其中一个最著名的是
    [Filecoin](https://filecoin.io)，其中代币授予用户访问去中心化云存储平台的空间。
- en: Security
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 安全
- en: A *security*, as defined by the SEC, is an investment contract. Designed to
    provide a promise of a return, investment contracts are regulated devices used
    around the world for fundraising. For this reason, the tokens proposed in many
    ICOs could be considered securities. They are thus regulated in the jurisdiction
    of issuance. An example of a project that offers security tokens is [bloXroute](https://bloxroute.com),
    a protocol that changes the way networking and routing work for blockchain. Owning
    a bloXroute token means entitlement to a share in the future payout that blockchains
    will be making to bloXroute to use its routing protocol.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 根据美国证券交易委员会（SEC）的定义，*安全*是一种投资合同。设计为提供回报承诺，投资合同是世界各地用于筹款的受监管设备。因此，许多ICO提出的代币可能被视为证券。它们因此在发行司法管辖区受到监管。提供安全代币的项目的一个例子是
    [bloXroute](https://bloxroute.com)，这是一个改变区块链网络和路由工作方式的协议。拥有bloXroute代币意味着有权分享未来区块链将支付给bloXroute以使用其路由协议的收益。
- en: A *security token offering* (STO) is an attempt to create an ICO that fits into
    a regulatory framework. As ICOs mimic some of the qualities of an equity IPO,
    regulators around the world are increasingly trying to understand how to protect
    investors from fraud, excessive risk, and theft. The SEC, for example, has published
    [a framework](https://oreil.ly/rQOGS) for crypto-based security offerings.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*安全代币发行*（STO）是尝试创建符合监管框架的ICO的一种尝试。由于ICO模仿了股权IPO的一些特点，全球各地的监管机构越来越努力了解如何保护投资者免受欺诈、过度风险和盗窃。例如，SEC发布了[一个框架](https://oreil.ly/rQOGS)，用于基于加密货币的安全性发行。'
- en: Understanding Ethereum Requests for Comment
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解以太坊的“请求评论”
- en: With improving capabilities of the EVM, empowering developers to write better
    smart contracts, the Ethereum community began creating standards, formalized as
    Ethereum Requests for Comment (ERCs). These standards are important, as they ensure
    that apps wanting to interact with Ethereum smart contracts will know which functions
    and inputs to call. All proposed ERCs start as an Ethereum Improvement Proposal
    (EIP), which then goes through a vetting process. This is similar to the Bitcoin
    Improvement Process, discussed in [Chapter 3](ch03.xhtml#forks_and_altchains).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 随着EVM功能的不断提升，赋予开发人员编写更好智能合约的能力，以太坊社区开始创建标准，形式化为以太坊“请求评论”（ERCs）。这些标准很重要，因为它们确保希望与以太坊智能合约交互的应用程序将知道调用哪些函数和输入。所有提议的ERC都始于以太坊改进提案（EIP），然后经过审核流程。这与比特币改进流程类似，讨论见[第3章](ch03.xhtml#forks_and_altchains)。
- en: ERC-20
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ERC-20
- en: The most common ERC standard for Ethereum tokens is ERC-20\. Every smart contract
    that is compliant with the ERC-20 standard will implement the methods shown in
    [Table 5-1](#erc-twozero_methods).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊代币的最常见ERC标准是ERC-20。符合ERC-20标准的每个智能合约都将实现[表5-1](#erc-twozero_methods)中显示的方法。
- en: Table 5-1\. ERC-20 methods
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 表5-1。ERC-20方法
- en: '| **Method** | **Description** |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **描述** |'
- en: '| --- | --- |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `totalSupply() public view returns (uint256 totalSupply)` | Get the total
    token supply. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `totalSupply() public view returns (uint256 totalSupply)` | 获取总代币供应量。 |'
- en: '| `balanceOf(address _owner) public view returns (uint256 balance)` | Get the
    account balance of another account with `address _owner`. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `balanceOf(address _owner) public view returns (uint256 balance)` | 获取具有`address
    _owner`的另一个帐户的余额。 |'
- en: '| `transfer(address _to, uint256 _value) public returns (bool success)` | Send
    `_value` amount of tokens from address `_from` to address `_to`. Tokens are sent
    from the address that called the transaction. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `transfer(address _to, uint256 _value) public returns (bool success)` | 从地址`_from`向地址`_to`发送`_value`数量的代币。代币是从调用交易的地址发送的。
    |'
- en: '| `transferFrom(address _from, address _to, uint256 _value) public returns
    (bool success)` | Send `_value` amount of tokens from address `_from` to address
    `_to`. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `transferFrom(address _from, address _to, uint256 _value) public returns
    (bool success)` | 从地址`_from`向地址`_to`发送`_value`数量的代币。 |'
- en: '| `transferFrom(address _from, address _to, uint256 _value) public returns
    (bool success)` | Send `_value` amount of tokens from address `_from` to address
    `_to`. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `transferFrom(address _from, address _to, uint256 _value) public returns
    (bool success)` | 将数量为`_value`的代币从地址`_from`发送到地址`_to`。 |'
- en: '| `approve(address _spender, uint256 _value) public returns (bool success)`
    | Allow `_spender` to withdraw from your account, multiple times, up to `_value`
    amount. If this function is called again, it overwrites the current allowance
    with the new `_value`. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `approve(address _spender, uint256 _value) public returns (bool success)`
    | 允许`_spender`多次从您的帐户提取，最多`_value`金额。如果再次调用此函数，则会用新的`_value`覆盖当前的津贴。 |'
- en: '| `allowance(address _owner, address _spender) public view returns (uint256
    remaining)` | Return the amount which `_spender` is still allowed to withdraw
    from `_owner`. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `allowance(address _owner, address _spender) public view returns (uint256
    remaining)` | 返回`_spender`仍被允许从`_owner`提取的金额。 |'
- en: Every smart contract that is compliant with the ERC-20 standard will implement
    the two events shown in [Table 5-2](#events_supported_by_erc-twozero-complia).
    Developers can build applications that listen for these events to be triggered—for
    example, a cryptocurrency wallet checking to see if any of its Ethereum addresses
    have received tokens.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 符合 ERC-20 标准的每个智能合约都将实现[表 5-2](#events_supported_by_erc-twozero-complia)中显示的两个事件。开发人员可以构建应用程序来监听这些事件的触发，例如，加密货币钱包检查其以太坊地址是否已接收到代币。
- en: Table 5-2\. Events supported by ERC-20-compliant smart contracts
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 表 5-2\. ERC-20 兼容智能合约支持的事件
- en: '| **Event** | **Description** |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| **事件** | **描述** |'
- en: '| --- | --- |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Transfer(address indexed _from, address indexed _to, uint256 _value)` |
    Event triggered when tokens are transferred. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `Transfer(address indexed _from, address indexed _to, uint256 _value)` |
    在代币转移时触发的事件。 |'
- en: '| `Approval(address indexed _owner, address indexed _spender, uint256 _value)`
    | Event triggered whenever `approve(address _spender, uint256 _value)` is called.
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `Approval(address indexed _owner, address indexed _spender, uint256 _value)`
    | 每当调用`approve(address _spender, uint256 _value)`时触发的事件。 |'
- en: 'The following is an example of a basic ERC-20 smart contract, [*Mastering_Blockchain_Token.sol*](https://github.com/Mastering-Blockchain-Book):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个基本的 ERC-20 智能合约示例，[*Mastering_Blockchain_Token.sol*](https://github.com/Mastering-Blockchain-Book)：
- en: '[PRE0]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This token contract was published [on the Ropsten testnet](https://oreil.ly/X8y-v)
    and has the following attributes:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代币合约已经发布在 [Ropsten 测试网](https://oreil.ly/X8y-v)，并具有以下属性：
- en: '*Token name*: Mastering Blockchain Book'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*代币名称*: Mastering Blockchain Book'
- en: '*Token symbol*: MBB'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*代币符号*: MBB'
- en: '*Token supply*: 100 MBB'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*代币供应量*: 100 MBB'
- en: '*Token decimal places*: 18'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*代币小数位*: 18'
- en: 'To create your own custom token, you can simply copy and paste the preceding
    code and change these four values in the `constructor` function:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建您自己的自定义代币，您只需复制并粘贴上述代码，并在`constructor`函数中更改这四个值：
- en: '`symbol`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`symbol`'
- en: The symbol of your token.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代币符号。
- en: '`name`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`'
- en: The name of your token.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代币名称。
- en: '`decimals`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`decimals`'
- en: How many decimals your token can be divided into. The standard value for most
    tokens is 18.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代币可以被分成多少位小数。大多数代币的标准值为 18。
- en: '`totalSupply`'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`totalSupply`'
- en: How many tokens will be in existence. There is a lot of variation in supply
    among tokens; 1 billion is an easy round number that is common.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 存在多少个代币。在代币之间的供应中存在很大的差异；10 亿是一个常见的容易记忆的大数。
- en: ERC-721
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ERC-721
- en: ERC-721 is a standard for nonfungible tokens. As mentioned earlier, with fungible
    tokens (like ERC-20 tokens), each token has the exact same attributes. With nonfungible
    tokens, each token can have different attributes and therefore is unique, which
    allows for extreme digital scarcity.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ERC-721 是非同质代币的标准。如前所述，对于可互换的代币（如 ERC-20 代币），每个代币具有完全相同的属性。对于非同质代币，每个代币可以具有不同的属性，因此是唯一的，这使得极端的数字稀缺成为可能。
- en: Before blockchain, most virtual items could easily be copied. Connecting a virtual
    good or a real-world item to an ERC-721 token is a way to create a digitally scarce
    item that cannot be copied or tampered with.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在区块链出现之前，大多数虚拟物品都很容易被复制。将虚拟商品或现实世界的物品与 ERC-721 代币连接起来是创建一种数字稀缺物品的方式，这种物品无法被复制或篡改。
- en: 'The most famous example of this in the blockchain world is [CryptoKitties](https://oreil.ly/EoBEo),
    virtual cats that are connected to ERC-721 tokens on the Ethereum blockchain.
    [Figure 5-1](#the_unique_attributes_of_the_cryptokitt) shows CryptoKitty #1270015.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '区块链世界中最著名的例子是[加密猫](https://oreil.ly/EoBEo)，这些虚拟猫与以太坊区块链上的 ERC-721 代币相连接。[图5-1](#the_unique_attributes_of_the_cryptokitt)展示了加密猫
    #1270015。'
- en: '![](Images/mabc_0501.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0501.png)'
- en: Figure 5-1\. The unique attributes of the CryptoKitty with the unique ID 1270015
  id: totrans-82
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5-1\. 具有唯一 ID 1270015 的加密猫的独特属性
- en: 'Instead of reading the attribute information about CryptoKitty #1270015 from
    a centralized database, the information is pulled from the [CryptoKitty ERC-721
    smart contract](https://oreil.ly/GFQBV). Go to function #32 and enter the CryptoKitty
    ID, which is `1270015`. From there it is possible to see the unique attributes
    for this CryptoKitty stored on the Ethereum blockchain, as shown in [Figure 5-2](#calling_the_read_function_getkitty_from).'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '不再从集中式数据库中读取有关加密猫 #1270015 的属性信息，而是从[加密猫 ERC-721 智能合约](https://oreil.ly/GFQBV)中提取信息。转到函数
    #32 并输入加密猫的 ID，即`1270015`。从那里可以看到存储在以太坊区块链上的这只加密猫的唯一属性，如[图5-2](#calling_the_read_function_getkitty_from)所示。'
- en: '![](Images/mabc_0502.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0502.png)'
- en: Figure 5-2\. Calling the read function `getKitty` from the main CryptoKitties
    smart contract responds with data stored in Ethereum about the specific kitty
    ID 1270015
  id: totrans-85
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5-2\. 从主 CryptoKitties 智能合约调用读取函数 `getKitty` 响应了存储在以太坊中有关特定猫 ID 1270015 的数据
- en: ERC-777
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ERC-777
- en: This proposed standard is for the next generation of fungible (ERC-20) tokens.
    It includes some improvements to the ERC-20 standard, the most important of which
    is in the way tokens are transferred.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此提议的标准适用于下一代可互换的（ERC-20）代币。其中包括对 ERC-20 标准的一些改进，其中最重要的是代币的转移方式。
- en: 'There are two ways that users can move ERC-20 tokens from one address to another:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方式可以将 ERC-20 代币从一个地址转移到另一个地址：
- en: Push transaction
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 推送交易
- en: Calling the function `transfer(address _to, uint256 _value)` is a push transaction,
    where the sender initiates the transfer of tokens.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 调用函数 `transfer(address _to, uint256 _value)` 是一种推送交易，发送方启动代币的转移。
- en: Pull transaction
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取交易
- en: The combination of the functions `approve(address _spender, uint256 _value)`
    and `transferFrom(address _from, address _to, uint256 _value)` is a pull transaction,
    where the sender gives permission to the receiver and then the receiver pulls
    the tokens out of the sender’s account.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `approve(address _spender, uint256 _value)` 和 `transferFrom(address _from,
    address _to, uint256 _value)` 的组合是一种拉取交易，发送方给予接收方权限，然后接收方从发送方的账户中拉取代币。
- en: If a person sends tokens to a smart contract using a push transaction, then
    the smart contract will receive the tokens. However, the smart contract will not
    receive a trigger telling it that it has received the tokens and instructing it
    to run some code.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个人使用推送交易向智能合约发送代币，那么智能合约将收到这些代币。但是，智能合约不会收到触发器告诉它已经收到了代币，并指示其运行一些代码。
- en: This is the reason for a pull transaction—the smart contract receiving the tokens
    initiates the transaction, and it can recognize when the tokens are received and
    execute additional code to react to this event. The most common use case for a
    smart contract receiving and sending tokens is decentralized exchanges, [IDEX](https://idex.market/eth/idex)
    being the most popular.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这是拉取交易的原因——接收代币的智能合约启动交易，并且它可以识别何时收到代币并执行附加代码以对此事件做出反应。智能合约接收和发送代币的最常见用例是去中心化交易所，[IDEX](https://idex.market/eth/idex)
    是最受欢迎的。
- en: Pull transactions work for smart contracts receiving tokens, but their use has
    led to many tokens accidentally being lost. A common problem is if a user mistakenly
    sends tokens to a smart contract using a push transaction rather than via the
    correct pull method; those tokens will be burned and lost forever, because the
    smart contract will not recognize that it has received the tokens and therefore
    won’t know to send them to another address at a later time.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取交易适用于智能合约接收代币，但是它们的使用导致许多代币意外丢失。一个常见问题是，如果用户错误地使用推送交易而不是通过正确的拉取方法向智能合约发送代币，那么这些代币将永远丢失，因为智能合约不会认识到它已经收到了代币，因此不会知道在以后的时间将它们发送到另一个地址。
- en: 'ERC-777 proposes to fix this problem by introducing the following improvements:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: ERC-777 提出通过引入以下改进来解决这个问题：
- en: '`authorizeOperator(address operator)` and `revokeOperator(address operator)`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`authorizeOperator(address operator)` 和 `revokeOperator(address operator)`'
- en: Allow token holders to authorize smart contracts to transfer tokens on their
    behalf and revoke that permission, respectively. The contracts that are authorized
    are known as *operators*. This is a variation of the pull transaction combination
    in ERC-20, but instead of authorizing the operator each time you want to transfer
    tokens, you only need to authorize the operator once. Then, for each additional
    transfer, the operator can transfer the tokens on your behalf.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 允许代币持有者授权智能合约代表他们转移代币，并分别撤销该权限。被授权的合约称为*操作者*。这是 ERC-20 中的拉取交易组合的一个变体，但与每次想要转移代币时都授权操作者不同，你只需要一次性授权操作者。然后，对于每次额外的转移，操作者都可以代表你转移代币。
- en: '`tokensReceived` and `tokensToSend` hooks'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`tokensReceived`和`tokensToSend`钩子'
- en: The contract receiving the tokens can include a function called `tokensReceived`.
    In that function, the receiving contract can identify which ERC-777 tokens the
    contract would like to accept and which it would like to reject (using `revert`).
    If an ERC-777 token is received but identified as to be rejected, the token transfer
    will not complete. It’s like receiving a letter in the mail and sending it back.
    Similarly, a contract that is requesting a token transfer can receive the `tokensToSend`
    hook, and when that hook is called has the option to revert the transaction. It’s
    less likely that this will happen, because this is the contract that initiated
    the transfer of tokens—it’s like going to the post office to send a letter, but
    then changing your mind as you are about to hand it over.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接收代币的合约可以包含一个名为`tokensReceived`的函数。在该函数中，接收合约可以识别它想要接受哪些 ERC-777 代币以及哪些代币它想要拒绝（使用`revert`）。如果接收到的
    ERC-777 代币被确定为要拒绝，那么代币转移将不会完成。这就像收到一封信然后退回它一样。同样地，一个请求代币转移的合约可以接收`tokensToSend`钩子，并且当该钩子被调用时有选择地撤销交易。这种情况发生的可能性较小，因为这是发起代币转移的合约——就像去邮局寄信，但当你要交出它时改变了主意。
- en: '`send(address to, uint256 amount, bytes data)`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`send(address to, uint256 amount, bytes data)`'
- en: The push transaction includes a `data` field that not only allows the sender
    to send tokens to a contract, but also can contain specialized logic that triggers
    a function in the receiving contract. This is similar to how Ethereum transactions
    are executed.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 推送交易包括一个`data`字段，不仅允许发送者向合约发送代币，而且可以包含触发接收合约中函数的特定逻辑。这类似于以太坊交易的执行方式。
- en: Although the ERC-777 standard is an improvement over ERC-20, it has not been
    adopted by the industry yet because there is a large switching cost for all stakeholders
    to move to the new standard. Many projects would have to create new token contracts,
    and then convince token holders to swap existing tokens for an equivalent amount
    using the new standard. Exchanges and some dapps would have to update their systems
    to support the new standard as well.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 ERC-777 标准是对 ERC-20 的改进，但由于所有利益相关者转移到新标准存在巨大的转换成本，行业尚未采用。许多项目将不得不创建新的代币合约，然后说服代币持有者使用新标准交换等值的现有代币。交易所和一些
    dapp 也将不得不更新其系统以支持新标准。
- en: ERC-1155
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ERC-1155
- en: This standard was designed to track virtual goods in games. For example, the
    default weapon in a shooting game might be a pistol, but it is possible to purchase
    the triple-barreled rocket-launching weapon that kills one hundred enemies in
    one shot.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这个标准是为了追踪游戏中的虚拟商品而设计的。例如，射击游戏中的默认武器可能是手枪，但也可以购买到能一枪杀死一百个敌人的三管火箭发射武器。
- en: 'An ideal token standard for these in-game items would have a mixture of ERC-20
    and ERC-721 attributes:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些游戏道具来说，一个理想的代币标准应该具有 ERC-20 和 ERC-721 的属性混合体：
- en: ERC-20 (fungible) so that you can attach a price to the virtual good, and users
    can then purchase and trade the item
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ERC-20（可替代）以便你可以给虚拟商品附加一个价格，然后用户可以购买和交易该物品
- en: ERC-721 (nonfungible) so that the virtual good can have unique properties—for
    example, how many rockets it can hold, or how powerful the weapon is.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ERC-721（非同质化）以便虚拟物品可以具有独特的属性——例如，它能装载多少火箭，或者武器有多强大。
- en: Like the ERC-777 token standard, this standard includes the concept of an *operator*,
    an address that has the authority to move your tokens on your behalf.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 ERC-777 代币标准，这个标准包括了一个 *操作者* 的概念，一个有权代表你移动你的代币的地址。
- en: 'Another improvement in this standard is the ability to transfer multiple tokens
    in one transaction. When transferring ERC-721 tokens, you call the function `safeTransferFrom`
    and specify the token to be transferred by its `_tokenId`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这个标准的另一个改进是在一次交易中转移多个代币的能力。当转移 ERC-721 代币时，你调用函数 `safeTransferFrom` 并通过其 `_tokenId`
    指定要转移的代币：
- en: '[PRE1]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With ERC-1155 tokens, you can call the function `safeBatchTransferFrom` and
    specify an array of `_id`s:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ERC-1155 代币，你可以调用函数 `safeBatchTransferFrom` 并指定一个 `_id` 的数组：
- en: '[PRE2]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The ability to do batch trades removes another layer of friction, for gamers
    and game publishers alike.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 批量交易的能力消除了另一层摩擦，对于游戏玩家和游戏发行商都是如此。
- en: Enjin, the company that created this standard, is now providing a platform that
    makes it easy for game publishers to support virtual goods on the blockchain.
    One of the biggest challenges to gaining widespread adoption is that the Ethereum
    network is not yet fast enough to support hundreds of thousands of transactions
    a second, which is a common requirement in large-scale games.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 创建此标准的公司Enjin现在提供了一个平台，使游戏发行商能够轻松支持区块链上的虚拟商品。获得广泛采用的最大挑战之一是以太坊网络尚不足以支持每秒数十万次交易，这在大型游戏中是常见要求。
- en: At time of this writing, about 35 games have adopted this standard, and about
    100,000 people hold ERC-1155 virtual goods.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前，大约有35款游戏采用了这一标准，大约有10万人持有ERC-1155虚拟商品。
- en: Multisignature Contracts
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多重签名合约
- en: Sending funds out of an *externally owned account* (EOA) wallet in Ethereum
    only requires one private key. This means if that key is compromised, there’s
    nothing stopping funds being stolen from the account—it’s a single point of failure.
    The purpose of a multisignature wallet is to lower the risk of unauthorized removal
    of funds by requiring multiple private keys to send the funds. This is a similar
    concept to a bank account that requires multiple signatures to authorize a payment.
    There isn’t an ERC standard for multisignature wallet contracts, although this
    type of contract is widely used in the industry.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊中，从外部拥有的账户（EOA）钱包中发送资金只需要一个私钥。这意味着如果该密钥被破解，就没有任何阻止资金被从账户中盗取的东西——这是一个单点故障。多重签名钱包的目的是通过需要多个私钥来发送资金来降低未经授权的资金移除风险。这与需要多个签名来授权支付的银行账户的概念类似。虽然在行业中广泛使用这种类型的合约，但并没有多重签名钱包合约的ERC标准。
- en: 'Every multisignature contract requires *M* of *N* signatures to authorize a
    transaction, where:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 每个多重签名合约都需要*M*中的*N*个签名来授权一笔交易，其中：
- en: '*N* is the *number* of Ethereum addresses that can authorize a transaction.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*N*是能够授权交易的以太坊地址的*数量*。'
- en: '*M* is the *minimum* number of signatures from among those *N* unique addresses
    required for a transaction to be authorized.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*M*是需要授权交易的*N*个唯一地址中的*最小*签名数量。'
- en: Note that *M* must be less than *N*. An example would be a 2-of-3 multisignature
    contract, which means there are three addresses that can authorize a transaction,
    and only two signatures are required to complete the transaction.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 注意*M*必须小于*N*。一个例子是一个2-of-3的多重签名合约，这意味着有三个地址可以授权一笔交易，而完成交易只需要两个签名。
- en: It’s common practice for entities that do ICOs to collect all the funds they
    raise into multisignature wallets. These ICOs also make their multisignature wallet
    code transparent and publicly share which addresses can sign a transaction. This
    transparency increases trust from investors, because at any time investors can
    audit the funds.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于进行 ICO 的实体来说，将他们筹集的所有资金汇集到多重签名钱包中是一种常见做法。这些 ICO 还会公开多重签名钱包的代码，并公开哪些地址可以签署交易。这种透明度增加了投资者的信任，因为投资者随时可以审计资金。
- en: 'If you audit the [multisignature wallet](https://oreil.ly/mkRsK) of a well-known
    company that raised $33 million in its ICO, you can see all the funds that have
    come in and been sent out. You can also audit the wallet’s *M* of *N*:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您审计了一家在 ICO 中筹集了 3300 万美元的知名公司的[多重签名钱包](https://oreil.ly/mkRsK)，您可以看到所有进出的资金。您还可以审计钱包的*M*和*N*：
- en: 'Calling the function `getOwners` shows which addresses can authorize transactions.
    These addresses are called *owners*. In this case, there are five of them:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用函数`getOwners`会显示哪些地址可以授权交易。这些地址被称为*所有者*。在这种情况下，有五个：
- en: '[0x197a3d8fea67ee3b5a8436c5d9b4a794a196006b](https://oreil.ly/woTp1)'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[0x197a3d8fea67ee3b5a8436c5d9b4a794a196006b](https://oreil.ly/woTp1)'
- en: '[0x0063af5125737564407a4081f017c34d647dad4f](https://oreil.ly/s5BHD)'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[0x0063af5125737564407a4081f017c34d647dad4f](https://oreil.ly/s5BHD)'
- en: '[0x00c947cdb9112086d203843be8132bc992737f69](https://oreil.ly/X3yob)'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[0x00c947cdb9112086d203843be8132bc992737f69](https://oreil.ly/X3yob)'
- en: '[0x003cb639f3c0120051abf4f927c2414d56ac766c](https://oreil.ly/7DgeO)'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[0x003cb639f3c0120051abf4f927c2414d56ac766c](https://oreil.ly/7DgeO)'
- en: '[0x00cb0d8171a9fa71e71fbf3f9cc17c6442755c29](https://oreil.ly/7ZSg3)'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[0x00cb0d8171a9fa71e71fbf3f9cc17c6442755c29](https://oreil.ly/7ZSg3)'
- en: Reading the current value of the variable `required` shows how many signatures
    are required to execute a transaction. This wallet requires three signatures to
    execute a transaction.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取变量`required`的当前值显示执行交易所需的签名数量。此钱包需要三个签名才能执行交易。
- en: This wallet that is being audited here is thus a 3-of-5 multisignature wallet.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 此处正在审计的钱包是一个 3-of-5 的多重签名钱包。
- en: As you can see in [Figure 5-3](#example_of_the_series_of_events_that_to), you
    can also audit which addresses signed all the transactions that this wallet has
    executed.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在[图 5-3](#example_of_the_series_of_events_that_to)中所见，您还可以审计哪些地址签署了该钱包执行的所有交易。
- en: '![](Images/mabc_0503.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0503.png)'
- en: Figure 5-3\. Example of [the series of events](https://oreil.ly/bvK_8) that
    took place to set up and execute a multisignature transaction
  id: totrans-135
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-3。[发生的一系列事件的示例](https://oreil.ly/bvK_8)，用于设置和执行多重签名交易
- en: 'As this figure shows, the process for executing a multisignature transaction
    is as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，执行多重签名交易的过程如下：
- en: 'One of the owner addresses ([0x00c9…7f69](https://oreil.ly/qATRF)) that is
    authorized to perform a multisignature transaction calls the `submitTransaction`
    function to submit the transaction details. The `submitTransaction` call performs
    two events:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It stores the details of the requested transaction.
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It adds 0x00c9…7f69 to the list of addresses that confirm the transaction. This
    address therefore both initiates the transaction and confirms the transaction.
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The [`submitTransaction` call](https://oreil.ly/OyENJ) occurs in block #7331149.'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A second owner ([0x0063…ad4f](https://oreil.ly/Ofyns)) calls the function `confirmTransaction`
    to give the second of the three required signatures. This [`confirmTransaction`
    call](https://oreil.ly/N63a8) occurs in block #7331154.'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A third owner ([0x003c…766c](https://oreil.ly/nTVqu)) calls the function `confirmTransaction`
    to give the third signature. This call leads to two events:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The third owner confirms the transaction.
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The contract recognizes that all required signatures have been given and then
    executes the transaction using the details that were submitted in step 1.
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This [`confirmTransaction` call](https://oreil.ly/OXyFD) occurs in block #7458500.'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Decentralized Exchange Contracts
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before Ethereum, every cryptocurrency exchange had to be controlled and managed
    by a company—a centralized authority. Centralized exchanges still exist, with
    popular examples including Coinbase, Bitstamp, and Gemini. The purpose of an exchange
    is to act as a trusted platform where two parties can exchange cryptocurrencies
    securely. To accomplish this, an exchange must do the following for its customers:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Provide a secure place to deposit/withdraw crypto, and hold the funds in escrow.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide an order book, so that two parties can agree on a price to trade the
    crypto at.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swap the cryptocurrencies between the two parties.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A smart contract has the capability to perform the following three actions:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Send/receive and hold ETH and ERC-20 tokens.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Record price requests from EOA accounts.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录来自EOA账户的价格请求。
- en: If two price requests match, change ownership of the corresponding cryptocurrencies.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果两个价格请求匹配，将相应加密货币的所有权转移。
- en: A good example of a *decentralized* exchange on Ethereum is [IDEX](https://idex.market/eth/idex).
    Even though the IDEX website looks similar to a centralized exchange, there are
    significant differences between the two types of exchanges.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊上一个很好的*去中心化*交易所的例子是[IDEX](https://idex.market/eth/idex)。尽管IDEX网站看起来类似于一个集中式交易所，但这两种交易所之间存在着重大差异。
- en: All of the code running a centralized exchange is deployed to a web hosting
    provider—for example, AWS or Azure. Frontend code running on a decentralized exchange
    is also deployed to a web hosting provider, but the backend code is written into
    a smart contract and deployed to the Ethereum network. The database is just the
    Ethereum or some other smart contract blockchain, as illustrated in [Figure 5-4](#infrastructure_differences_between_cent).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 所有运行集中式交易所的代码都部署到Web托管提供商上，例如AWS或Azure。运行在去中心化交易所的前端代码也部署到Web托管提供商上，但后端代码编写进智能合约并部署到以太坊网络。数据库只是以太坊或其他智能合约区块链，如[图5-4](#infrastructure_differences_between_cent)所示。
- en: '![](Images/mabc_0504.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0504.png)'
- en: Figure 5-4\. Infrastructure differences between centralized and decentralized
    exchanges
  id: totrans-158
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5-4\. 集中式和去中心化交易所的基础设施差异的示意图
- en: 'Advantages of a decentralized exchange include:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 去中心化交易所的优势包括：
- en: Greater transparency
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 更高的透明度
- en: Because the backend code is in a smart contract, anyone can audit it before
    using the exchange. The code in a centralized exchange is private. This type of
    transparency increases trust in the decentralized exchange.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 由于后端代码在智能合约中，任何人在使用交易所之前都可以对其进行审计。集中式交易所的代码是私有的。这种透明度增加了对去中心化交易所的信任。
- en: Reduced counterparty risk
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 减少交易对手风险
- en: When you deposit cryptocurrency in a centralized exchange, it maintains custody
    of your funds, and customers expect that at any point in time they can get those
    funds back. However, there have been many cases where exchanges have lost all
    of their customers’ funds. In a decentralized exchange, the smart contract maintains
    custody of the cryptocurrency, and if an audit of the smart contract shows that
    the contract is safe to use, then it’s impossible for the exchange to lose your
    funds.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在集中式交易所存入加密货币时，它会保管您的资金，客户期望随时可以取回这些资金。然而，有很多情况下交易所已经丢失了所有客户的资金。在去中心化交易所中，智能合约保管着加密货币，如果对智能合约的审计表明合约是安全可用的，那么交易所不可能丢失您的资金。
- en: 'Decentralized exchanges also have a few downsides, though. Notably, they are:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管去中心化交易所也有一些缺点。特别是：
- en: Very slow
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 非常缓慢
- en: On a centralized exchange, users expect that if they execute a trade it will
    be completed instantly. On a decentralized exchange, in order for a trade to execute,
    a user must wait for their transaction to be included in a block, which often
    takes at least 10 seconds, or even a minute. By the time the user’s trade executes,
    the opportunity could be gone.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在中心化交易所上，用户期望如果执行交易，交易将立即完成。在去中心化交易所上，为了执行交易，用户必须等待他们的交易被包含在一个区块中，这通常需要至少10秒，甚至一分钟。到用户的交易执行时，机会可能已经错过了。
- en: Expensive
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 昂贵
- en: Decentralized exchanges require users to generate a new transaction every time
    they want to perform an action, including adding an order and cancelling an order.
    Exchange users frequently make multiple orders and changes to those orders in
    a short period of time. On a centralized exchange, these order changes are free,
    but on a decentralized exchange, you have to pay gas to the network for each action,
    which makes it much more expensive to use.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 去中心化交易所要求用户每次想执行操作时生成一个新的交易，包括添加订单和取消订单。交易所用户经常在短时间内进行多个订单和订单更改。在中心化交易所上，这些订单更改是免费的，但在去中心化交易所上，你必须为每个操作向网络支付
    gas，这使得使用成本更高。
- en: Difficult for nontechnical users
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 对非技术用户来说很困难
- en: Since users must sign a transaction every time they complete an action, nontechnical
    users may find using a decentralized exchange is too complicated and requires
    too much effort.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用户每次完成操作都必须签署交易，非技术用户可能会觉得使用去中心化交易所太复杂，需要付出太多努力。
- en: One other big difference between the two is that there is no need to ask anyone’s
    permission to add an ERC-20 token to a decentralized exchange. As soon as an ERC-20
    token is created, it can instantly be traded on a decentralized exchange. Depending
    on whom you speak to, this can be considered a pro or a con. We’ll talk more about
    decentralized exchanges and how they’re used in [Chapter 7](ch07.xhtml#decentralizing_finance_and_the_web).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个两者之间的重大区别是，无需征得任何人的许可即可将 ERC-20 代币添加到去中心化交易所。一旦创建了 ERC-20 代币，它就可以立即在去中心化交易所上进行交易。这取决于你和谁谈论，这可能被视为利弊。我们将在[第7章](ch07.xhtml#decentralizing_finance_and_the_web)中更多地讨论去中心化交易所及其使用方式。
- en: Tip
  id: totrans-172
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can view all the [ERC standards](http://eips.ethereum.org/erc) online, and
    OpenZeppelin provides a great [library of ERC-compliant smart contracts](https://oreil.ly/LOwnY).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在线查看所有的[ERC标准](http://eips.ethereum.org/erc)，而 OpenZeppelin 提供了一系列符合 ERC
    标准的智能合约的[库](https://oreil.ly/LOwnY)。
- en: Summary
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: Ethereum is by far the largest blockchain for tokenization today. In a short
    time frame, any developer can create their own blockchain-based asset. A lot of
    work has been done to give programmers a framework within Ethereum to operate
    in, with the different ERC standards providing a plethora of options. Ethereum-based
    tokenization has enabled the creation of a number of innovative new blockchain-based
    applications, and there surely will be many more as this technology continues
    to mature.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊是迄今为止最大的区块链代币化平台。在短时间内，任何开发者都可以创建自己基于区块链的资产。为了让程序员能够在以太坊内运作，已经做了大量工作，不同的
    ERC 标准提供了大量选项。基于以太坊的代币化已经使得许多创新的基于区块链的应用得以创建，随着这项技术的不断成熟，肯定还会有更多的应用出现。
