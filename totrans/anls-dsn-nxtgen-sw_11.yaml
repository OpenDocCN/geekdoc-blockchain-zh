- en: © Springer Nature Switzerland AG 2020A. M. LangerAnalysis and Design of Next-Generation
    Software Architectures[https://doi.org/10.1007/978-3-030-36899-9_11](https://doi.org/10.1007/978-3-030-36899-9_11)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © Springer Nature Switzerland AG 2020A. M. Langer下一代软件架构的分析与设计[https://doi.org/10.1007/978-3-030-36899-9_11](https://doi.org/10.1007/978-3-030-36899-9_11)
- en: 11. Build Versus Buy
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11. 构建与购买
- en: 'Arthur M. Langer^([1](#Aff2) [ ](#ContactOfAuthor2))(1)Center for Technology
    Management, Columbia University, New York, NY, USAArthur M. LangerEmail: [al261@columbia.edu](mailto:al261@columbia.edu)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'Arthur M. Langer^([1](#Aff2) [ ](#ContactOfAuthor2))(1)哥伦比亚大学技术管理中心，纽约，美国Arthur M. LangerEmail:
    [al261@columbia.edu](mailto:al261@columbia.edu)'
- en: 11.1 Overview
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.1 概述
- en: 'This chapter addresses a difficult and controversial decision that is made
    every time an organization seeks a software solution to meet its needs: do we
    make it to our specific needs, or do we buy something that is made to order but
    may not do everything we want? Often the build decision is called the “make” alternative
    and suggests that the product will be made in-house versus the buy concept that
    can be referred to as outsourcing. I do not believe these simple labels are accurate
    or appropriate. Whether something is built or bought has little to do with whether
    the process is outsourced, so we need to be careful in the way we label these
    two alternatives.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了组织在寻求软件解决方案以满足其需求时每次都要做出的一个困难且有争议的决定：我们是按照我们的特定需求来开发，还是购买一个定制的但可能不完全符合我们所有要求的东西？通常，构建决策被称为“自制”替代方案，并暗示产品将在内部制造，而购买概念可以称为外包。我不认为这些简单的标签准确或合适。无论是构建还是购买，都与流程是否外包关系不大，因此我们在标记这两种替代方案时需要小心。
- en: 'Inman et al. ([2011](#CR3)) suggests that Build and Buy decisions need to be
    made at both the strategic and operational levels. Burt et al. ([2003](#CR2))
    provided some direction on the strategic reasons for buying and tied it into a
    definition of outsourcing, providing three concrete categories of reasons NOT
    to outsource:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Inman等（[2011](#CR3)）建议在战略和运营层面都需要进行构建和购买决策。 Burt等人（[2003](#CR2)）在战略购买原因方面提供了一些指导，并将其与外包定义联系起来，提供了三个明确的不外包原因类别：
- en: '1.'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: The item is critical to the success of the overall product and is perceived
    so by the company’s clientele
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该项目对整体产品的成功至关重要，并被公司客户所认可
- en: '2.'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: The item requires specialized design and skills and such skills are limited
    in the organization
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该项需要专业设计和技能，并且组织内的此类技能有限
- en: '3.'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: The item fits into the firm’s core competencies but needs to be developed in
    the future.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该项目符合公司的核心竞争力，但需要未来开发。
- en: 'Historically, most organizations selected the buy option because their assumption
    was that it lowered costs. Indeed, over 70% of product ownership usually occurs
    after implementation. So where is this cost? It occurs in maintenance, where in-house
    teams must continually alter and develop. The off-the-shelf concept tends to keep
    costs lower because in theory the sum of all the clients will create better software
    for all. Others suggest that a company should always first seek a package because
    of common business challenges including:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，大多数组织选择购买选项，因为他们的假设是它可以降低成本。实际上，超过70％的产品所有权通常在实施后发生。那么这个成本在哪里？它出现在维护中，因为内部团队必须不断地进行修改和开发。即使在理论上，现成的概念倾向于使成本保持较低，因为所有客户的总和将为所有客户创建更好的软件。其他人则建议公司应始终首先寻找一个软件包，因为其中包括常见的业务挑战，包括：
- en: Cost
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本
- en: Time to market
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上市时间
- en: Political situation in the environment
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境中的政治局势
- en: Architectural differences
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构差异
- en: Skill sets of existing staff.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现有员工的技能组合。
- en: 'However, The Gartner Group in 2003 published a report that suggested this trend
    was changing and that there were a growing number of firms that were returning
    to building applications internally. Gartner cited the following reasons for the
    change of heart:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，2003年Gartner集团发表了一份报告，表明这种趋势正在改变，并且有越来越多的公司开始内部构建应用程序。 Gartner列出了以下改变心意的原因：
- en: Rising competitive advantages of using emerging technologies
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用新兴技术的竞争优势不断增强
- en: Increased availability of talented software developers
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有才华的软件开发人员的数量增加
- en: Poor reputation of prior uses of package software—that it is not agile enough
    and difficult for departments to use
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 先前使用软件包的声誉不佳——不够灵活且部门难以使用
- en: Increased needs to adapt to unique and changing business needs.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加了适应独特和不断变化的业务需求的需求。
- en: 'Ledeen’s (2009) and Moore’s ([2002](#CR5)) analysis of how to approach make
    versus buy is quite useful. He established a step-by-step criterion to help organizations
    to make the best decision. This criterion included the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Ledeen（2009年）和Moore（[2002年](#CR5)）关于自制与外购的方法分析非常有用。他建立了一个逐步标准来帮助组织做出最佳决策。这些标准包括以下内容：
- en: Core versus Context
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心与上下文
- en: Coverage
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 覆盖率
- en: Direction
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方向
- en: TCO
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总拥有成本（TCO）
- en: Scale
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规模
- en: Timing
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间
- en: Standards.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准。
- en: 11.2 Core Versus Context
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.2 核心与上下文
- en: 'This decision point relates to the strategic importance of the application.
    The more strategic the application, the more likely that the organization develop
    software internally (also see Langer [2011](#CR4), below). The concept is simple:
    if the application relates to basic functions in accounting, HR or payroll, then
    it is not core. However, software used by WalMart, although accounting related
    is used as a supply chain management that drives every aspect of their competitive
    advantage as a company. The result of course is that Walmart developed their supply
    chain as a core and unique application. Moore’s chart (Table [11.1](#Tab1)) provides
    an interesting matrix of how core can be determined.Table 11.1'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个决策点与应用程序的战略重要性有关。应用程序的战略性越高，组织就越有可能内部开发软件（另请参阅下文的Langer [2011年](#CR4)）。这个概念很简单：如果应用程序涉及会计、人力资源或工资核算的基本功能，那么它就不是核心。然而，沃尔玛使用的软件虽然与会计相关，但却用作供应链管理，推动了公司作为竞争优势的各个方面。结果当然是，沃尔玛将其供应链开发为核心和独特的应用程序。Moore的图表（表[11.1](#Tab1)）提供了一个有趣的核心确定矩阵。
- en: Build versus buy chart
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 自制与外购图表
- en: '|   | CoreEngage | ContextDisengage |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|   | 核心参与 | 上下文脱离 |'
- en: '| --- | --- | --- |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Mission critical (control) | MAKE | OUTSOURCE |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 关键任务（控制） | 制造 | 外包 |'
- en: '| Supporting (entrust) | PARTNER | CONTRACT |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 支持（委托） | 合作伙伴 | 合同 |'
- en: The chart above reflects that Mission Critical application should be developed
    in-house with Context oriented applications may be modified to meet package requirements.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的图表反映出，关键任务应该由内部开发，而面向上下文的应用程序可以进行修改以满足软件包的要求。
- en: 11.3 Coverage
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.3 覆盖率
- en: The coverage assesses the extent of the match of the packaged product with the
    business requirements. The general rule is that a package should have at least
    80% of the features and functions needed by the organization. However, Ledeen
    states that this could be a trap, suggesting that a package’s capabilities outside
    of the immediate needs of the business are equally as important. This is relevant,
    given that business needs are continually evolving, organizations must be cognizant
    of having applications that can not only handle what is, but what may be future
    needs of the business. In addition, a certain feature in a packaged solution may
    actually offer a better business alternative than currently used by the business—so
    it’s a complex issue as they say.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖率评估打包产品与业务要求的匹配程度。一般规则是，软件包应至少包含组织所需功能的80%。然而，Ledeen指出，这可能是一个陷阱，他认为，软件包在业务需求之外的能力同样重要。这是相关的，因为业务需求不断发展，组织必须注意拥有不仅能处理现有需求，还能处理未来业务需求的应用程序。此外，打包解决方案中的某个功能实际上可能比当前业务使用的功能提供更好的业务选择——正如人们所说，这是一个复杂的问题。
- en: 11.4 Direction
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.4 方向
- en: The key words relating to Direction is flexibility, maintainability, and extendibility
    of the software throughout its life. Ultimately, Direction relates to how much
    control the organization has over the product, especially those products that
    may need to change—that is, the volatility of what the software does. For example,
    if the product is a basic accounting system, it is likely not to change substantially
    over its life. However, if it is a healthcare product that it regulated by government
    requirements in a highly fragile market, then Direction is a key decision factor.
    Much of this relates to the design and architecture of the product itself. Can
    it be easily modified? What is the extent of changes that can be controlled via
    user input? All of these factors are significant to whether a package is the wise
    choice.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 关于方向的关键词是软件在其整个生命周期内的灵活性、可维护性和可扩展性。最终，方向与组织对产品的控制程度有关，特别是那些可能需要变化的产品——即软件功能的波动性。例如，如果产品是一个基本的会计系统，在其生命周期内可能不会发生实质性变化。然而，如果它是一个受政府要求监管、处于高度脆弱市场中的医疗保健产品，那么方向就是一个关键的决策因素。其中很大一部分与产品的设计和架构有关。它是否可以轻松修改？可以通过用户输入控制的变化程度是多少？所有这些因素都对一个包是否明智选择至关重要。
- en: 11.5 Total Cost of Ownership (TCO)
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.5 总拥有成本（TCO）
- en: The TCO represents to entire cost. Components of this cost include license fees
    for the product, maintenance, product customizations, and support. The major variable
    in TCO is custom modifications. Vendors will often provide an estimate but managers
    need to be careful of “scope-creep” where original requirements for customizations
    become greatly expanded during the design phase of the project. A good approach
    that can help this decision is to determine the number of features and functions
    in the package that the organization does *not* need. A packaged solution that
    has many features and functions that are not needed might suggest that the application
    is not a great match and is likely designed for a different audience. It is important
    to note that many application packages were developed first as a custom application
    for a specific client and then tailored for others. This process was a typical
    evolution of how many software packages evolved in the market. Therefore, understanding
    the history of how the application package was developed might provide a hint
    as to the TOC and the fit in general—the two tend to go together.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: TCO代表了整个成本。这种成本的组成部分包括产品的许可费、维护、产品定制和支持。TCO中的主要变量是自定义修改。供应商通常会提供一个估算，但管理者需要小心“范围扩展”，即在项目设计阶段，原始的定制需求会大幅扩展。一个有助于这种决策的好方法是确定组织不需要的包中的功能数量。一个具有许多不需要的功能的打包解决方案可能表明该应用程序并不适合，并且可能是为不同的受众设计的。重要的是要注意，许多应用程序包最初是为特定客户定制的自定义应用程序，然后为其他客户进行了定制。这个过程是市场上许多软件包演变的典型演变。因此，了解应用程序包的开发历史可能提供有关TCO和一般适应性的提示——这两者往往是一起的。
- en: 11.6 Scale
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.6 规模
- en: The size of the package is a factor, especially when it has many modules. This
    is very relevant in large Enterprise Resource Planning (ERP) products where a
    high degree of scaled interoperability is important. These modular products also
    allow clients to purchases business components at later periods and easily retrofit
    them. However, if it is *not* the intention of the organization to scale, then
    a large integrated package may be overkill.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 包的大小是一个因素，特别是当它有许多模块时。这在大型企业资源计划（ERP）产品中非常相关，因为高度缩放的互操作性很重要。这些模块化的产品还允许客户在以后的时间购买业务组件并轻松地进行改装。然而，如果组织的意图不是扩展，那么一个大型集成包可能会过度。
- en: 11.7 Timing
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.7 时间
- en: There are many who would believe that a packaged solution will be faster to
    implement—but be careful-often this is not the case. Packaged solutions may add
    steps to the SDLC and as a result could actually prolong the timing of going Live
    on the product. Ledeen suggests that while COTS provides greater predictability
    it could be a reflection on the limits of flexibility and imposed restrictions.
    Either case I would strongly recommend that the decision whether to have a make
    versus buy not be contended solely based on speed to completion—the organization
    may be in for a big surprise. The more an organization can accept the base package
    the faster the implementation will be, for sure. However, accepting the package
    as is does not necessarily mean that it is the best thing for the business.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人认为打包解决方案会更快实施，但要小心，往往情况并非如此。打包解决方案可能会增加软件开发生命周期的步骤，因此实际上可能会延长产品上线的时间。利德恩认为，虽然COTS提供了更大的可预测性，但这可能反映了灵活性和强加限制的局限性。无论哪种情况，我强烈建议决定是自制还是外购的决定不要仅仅基于完成速度来争论——组织可能会大吃一惊。组织越能接受基本包，实施速度就越快，这是肯定的。然而，接受原包装并不一定意味着这对企业是最好的选择。
- en: 11.8 Standards
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.8 标准
- en: Ledeen defines standards as the consistency across systems of the way things
    get done. I see this issue more in terms of consistency of architecture of the
    organization. This means that the hardware platforms and software architecture
    (middleware, office products, etc.) should be consistent for packaged software
    to maximize its benefits. If this is not the case, that is, where you have multiple
    architectures across the organization, then the value of a package become less
    evident. This is especially true if the package requires a specific architecture
    for all of the systems. This is why open systems are so attractive to organizations
    Unfortunately in multi-national firms, having many architectures is not unusual.
    Much of this may have occurred due to corporate acquisitions of other firms—when
    you acquire a new business you often acquire a new systems architecture—both hardware
    and software!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 利德恩将标准定义为系统之间做事情的一致性。我更多地将这个问题看作是组织架构的一致性。这意味着硬件平台和软件架构（中间件、办公软件等）应该对于打包软件来说是一致的，以最大化其好处。如果不是这种情况，也就是说，如果您在组织中拥有多种架构，那么软件包的价值就不那么明显了。如果软件包需要所有系统都采用特定的架构，这一点尤其重要。这就是为什么开放系统对组织如此有吸引力的原因。不幸的是，在跨国公司中，拥有多种架构并不罕见。这其中很多情况可能是由于公司收购其他公司而导致的——当您收购一家新业务时，通常也会收购一种新的系统架构——无论是硬件还是软件！
- en: 11.9 Other Evaluation Criteria
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.9 其他评估标准
- en: 'The above issues are important but there are other contextual things to consider
    when making the decision:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 上述问题很重要，但在做出决定时还有其他上下文因素需要考虑：
- en: '*Complexity of Product*: the more intricate the software application, the harder
    for COTS to work. Complex products also tend to shorten the life cycle and have
    more evolving needs.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*产品复杂性*：软件应用程序越复杂，COTS的工作就越困难。复杂的产品还倾向于缩短生命周期，并且有更多的不断变化的需求。'
- en: '*State of the Art*: Users who seek packaged solutions often require the latest
    and greatest up-to-date product. They may be disappointed to learn that package
    software has some unique limitations in this area. First, vendors of packages
    have user bases to take care of—who ultimately have older versions and hardware
    that they must support. This results in difficulties with downward compatibilities
    of their user base. Just look at Microsoft’s problems when they upgrade operating
    systems and software. IBM used to issue “no support” edicts to its customers who
    failed to upgrade their products over time. The better vendors force their users
    to upgrade but it is always messy.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*最新技术*：寻求打包解决方案的用户通常需要最新和最先进的产品。他们可能会失望地发现，软件包在这方面有一些独特的限制。首先，软件包的供应商有用户群需要照顾——最终会有较老版本和硬件需要支持。这导致了与其用户群的向下兼容性困难。只需看看微软在升级操作系统和软件时遇到的问题。IBM曾经向未能及时升级其产品的客户发布“不提供支持”的禁令。更好的供应商会强迫其用户升级，但这总是很混乱。'
- en: '*Maintenance*: COTS often involves product upgrades and new maintenance releases.
    Sometimes maintenance releases include bug fixes and workarounds for packaged
    discovered problems. Maintenance can also be very tricky—how do organizations
    load new versions from the vendors when there are customizations, for example?
    It gets to be a challenge especially when the updates are regulatory in nature.
    COTS that have customizations inevitably need to go through a retrofit, where
    the customized portions have to be “re-customized” to deal with packaged software
    upgrades. This certainly adds to the cost equation over the life of the package.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*维护*：COTS 通常涉及产品升级和新的维护版本。有时，维护版本包括已发现的包装问题的错误修复和解决方法。维护也可能非常棘手—例如，当更新是法规性质时，组织如何从供应商那里加载新版本？当
    COTS 有定制时，不可避免地需要进行适应性改装，其中定制部分必须“重新定制”以应对包装软件的升级。这无疑会增加软件包的使用寿命成本。'
- en: While the above suggestions offer guides on what to think about and measure,
    the process is still complex without a real scientific methodology to determine
    ultimately whether to make or buy or both. However, Langer ([2011](#CR4)) provides
    yet another concept called Driver/Supporter theory in which “buy” decisions would
    only be made for applications that were considered “Supporters.” Figure [11.1](#Fig1)
    depicts a supporter item as something that has reached the stage of commodity
    notated in the circle labeled as “Economies of Scale.”![../images/480347_1_En_11_Chapter/480347_1_En_11_Fig1_HTML.png](../images/480347_1_En_11_Chapter/480347_1_En_11_Fig1_HTML.png)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然上述建议提供了关于思考和衡量的指导，但在没有真正的科学方法论的情况下，决定最终是制造还是购买还是两者兼而有之仍然是复杂的。然而，Langer（[2011](#CR4)）提出了另一个名为驱动者/支持者理论的概念，在该理论中，“购买”决策只会针对被视为“支持者”的应用程序。图 [11.1](#Fig1)
    描述了支持者项目被视为已达到“规模经济”的圆圈中所注明的商品化阶段。![../images/480347_1_En_11_Chapter/480347_1_En_11_Fig1_HTML.png](../images/480347_1_En_11_Chapter/480347_1_En_11_Fig1_HTML.png)
- en: Fig. 11.1
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1
- en: Langer’s Driver/Supporter life cycle
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Langer 的驱动者/支持者生命周期
- en: The diagram shows that all technology needs start out as Drivers but eventually
    become Supporters, thus lose their uniqueness in the marketplace. It is as if
    you were creating a strategic advantage by implementing a new email system—this
    would not really provide the organization with a competitive advantage—rather
    as an enabler to compete—a very different concept. The point I am making here
    is that a new email system would likely be “bought” and possibly implemented using
    an outsource vendor. In accordance with Burt et al. then this would be a case
    for buying as opposed to making.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图表显示，所有技术需求最初都是驱动者，但最终会成为支持者，因此在市场上失去其独特性。这就好像你正在通过实施新的电子邮件系统来创造战略优势—这实际上不会为组织提供竞争优势—而是作为一种竞争的推动因素—这是一个非常不同的概念。我在这里要强调的是，新的电子邮件系统可能会被“购买”，并可能会使用外包供应商来实施。根据
    Burt 等人的说法，这将是一个购买而不是制造的情况。
- en: 11.10 Drivers and Supporters
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.10 驱动者和支持者
- en: I think this concept of Driver/Supporter is essential to understanding make/buy
    decisions. This section provides further details on this theory and practice as
    a vehicle for better determination of make versus buy.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为理解制造/购买决策的这种驱动者/支持者概念至关重要。本节提供了关于这一理论和实践的进一步细节，作为更好地确定制造与购买的依据。
- en: 'To summarize Driver/Supporter, there are essentially two types of generic functions
    performed by departments in organizations: Driver functions and Supporter functions.
    These functions relate to the essential behaviour and nature of what a department
    contributes to the goals of the organization. I first encountered the concept
    of drivers and supporters at Coopers & Lybrand, which was at that time a Big 8¹
    accounting firm. I studied the formulation of Driver versus Supporter as it related
    to the role of our EDP (Electronic Data Processing) department. The firm was attempting
    to categorize the EDP department as either a Driver or Supporter.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 总结驱动者/支持者，组织中的部门实际上执行了两种通用功能：驱动者功能和支持者功能。这些功能与部门为实现组织目标所做贡献的本质和行为相关。我最初在 Coopers
    & Lybrand（当时是一家 Big 8¹ 会计师事务所）遇到了驱动者和支持者的概念。我研究了驱动者与支持者的制定，因为它与我们的 EDP（电子数据处理）部门的角色有关。公司试图将
    EDP 部门归类为驱动者或支持者。
- en: Drivers are defined as those units that engaged in front-line or direct revenue
    generating activities. Supporters are units that did not generate obvious direct
    revenues but, rather, were designed to support front-line activities. For example,
    operations such as internal accounting, purchasing, or office management were
    all classified as supporter departments. Supporter departments, due to their very
    nature, were evaluated on their effectiveness and efficiency or economies of scale.
    In contrast, driver organizations are expected to generate direct revenues and
    other ROI values for the firm. What was also interesting to me at the time was
    that Drivers were expected to be more daring—since they must inevitably generate
    returns for the business. As such, Drivers engage in what Bradley and Nolan ([1998](#CR1))
    coined “sense and respond” behaviours and activities. Let me explain.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Marketing departments often generate new business by investing or “sensing”
    an opportunity, quickly—because of competitive forces in the marketplace. Thus,
    they must sense an opportunity and be allowed to respond to it in timely fashion.
    The process of sensing opportunity and responding with competitive products or
    services is a stage in the cycle that organizations need to support. Failures
    in the cycles of sense and respond are expected. Take, for example, the launching
    of new fall television shows. Each of the major stations goes through a process
    of “sensing” what shows might be interesting to the viewing audience. They “respond”
    after research and review with a number of new shows. Inevitably, only a few of
    these selected shows are actually successful; some fail almost immediately. While
    relatively few shows succeed, the process is acceptable and is seen by management
    as the consequence of an appropriate set of steps for competing effectively—even
    though the percentage of successful new shows is very low. Therefore, it is safe
    to say that driver organizations are expected to engage in high-risk oriented
    operations, of which many will fail for the sake of creating ultimately successful
    products or services.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding example raises two questions: (1) How does “sense and respond”
    relate to the world of information technology, and (2) why is it important? Information
    technology is unique in that it is both a Driver and a Supporter. The latter being
    the generally accepted norm in most firms. Indeed, most IT functions are established
    to support a myriad of internal functions such as:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Accounting and finance
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data-Center infrastructure (e-mail, desktop, etc.)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise level application (ERP)
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customer support (CRM)
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web and e-commerce activities.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As one would expect, these IT functions are viewed as overhead related, as somewhat
    of a commodity, and, thus, constantly managed on an economy-of-scale basis—that
    is, how can we make this operation more efficient, with a particular focus on
    cost containment?
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'So, what then are IT Driver functions? By definition, they are those that engage
    in direct revenues and identifiable return-on-investment (ROI). How do we define
    such functions in IT, as most activities are sheltered under the umbrella of marketing
    organization domains? (Excluding, of course, software application development
    firms that engage in marketing for their actual application products.) I define
    IT Driver functions as those projects that, if delivered, would change the relationship
    between the organization and its customers, that is, those activities that directly
    affect the classic definition of a market: forces of supply and demand, which
    are governed by the customer (demand) and the vendor (supplier) relationship.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么是IT驱动功能呢？根据定义，它们是那些直接带来收入和可识别的投资回报（ROI）的功能。在IT领域，我们如何定义这样的功能，因为大多数活动都被庇护在营销组织领域的保护伞下呢？（当然，排除了进行其实际应用产品营销的软件应用开发公司。）我将IT驱动功能定义为那些如果交付的话，会改变组织与其客户之间关系的项目，也就是，直接影响市场的经典定义的那些活动：供需关系的力量，由客户（需求）和供应商（供应商）关系所统治。
- en: The conclusion of this section, therefore, is that no Driver application product
    should be implemented using complete outsourcing, rather made in-house and owned
    by the firm. This does not, however, suggest that certain services and components
    be subcontracted out as long as the ownership remains within the company.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本节的结论是，不应该使用完全外包来实施任何驱动应用产品，而应该在公司内部制作并由公司拥有。然而，这并不意味着某些服务和组件应该外包，只要所有权仍然掌握在公司手中。
- en: 11.11 The Supporter Side of Buying
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.11 购买的支持者一面
- en: Based on the definition of a Driver, the Supporter side may indeed represent
    the need to buy a packaged solution. Since Supporter functions are “operational”
    by definition, they are considered to be a commodity and thus able to be implemented
    using more standardized application software. Thus, all of the advantages of using
    packaged software apply. In addition there should be less need for customization.
    For example, think of the choice to build an email system—you would only build
    it in house if you required unique capabilities that provided a competitive advantage.
    That is, the email system would be a Driver application because it would change
    the relationship between the buyer and seller. This is exactly the situation that
    occurred with Walmart, where what would ordinarily have been considered a commodity
    accounting system became an application of great strategic advantage. On the other
    hand, an email system that could provide such advantage would be unlikely for
    most organizations, and therefore they would seek a product that does what most
    organizations need in any email system—as a supporter solution.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 基于驱动的定义，支持者一面可能确实代表了购买打包解决方案的需求。由于支持者功能在定义上是“运营性”的，它们被认为是商品，因此可以使用更标准化的应用软件来实现。因此，使用打包软件的所有优势都适用。此外，应该减少定制的需求。例如，想象一下选择构建电子邮件系统——只有当您需要提供竞争优势的独特能力时，您才会在内部构建它。也就是说，电子邮件系统将是一个驱动应用，因为它会改变买方和卖方之间的关系。这正是沃尔玛所发生的情况，通常被认为是一种商品会计系统成为了具有巨大战略优势的应用。另一方面，大多数组织都不太可能拥有能够提供这种优势的电子邮件系统，因此它们将寻求满足任何电子邮件系统所需的产品，作为支持者解决方案。
- en: 11.12 Open Source Paradigm
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.12 开放源码模式
- en: Open Source software can be defined as free source code developed among a community
    that believes strongly in a free software movement. Initial examples of successful
    open source products are Linux and Netscape Communicator. The Open Source movement
    is supported under the auspices of the Open Source Initiative (OSI) that was formed
    in 1998 to provide guidance and standards of application.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 开放源码软件可以定义为在一个坚信自由软件运动的社区中开发的免费源代码。最初成功的开放源码产品的例子是Linux和Netscape Communicator。开放源码运动得到了开放源码倡议（OSI）的支持，该倡议于1998年成立，旨在提供指导和应用标准。
- en: As I previously mentioned the evolution of open source as an alternative to
    developing software has grown enormously in the software industry. Open source
    can also represent an option with make versus buy. Choices of whether to make
    or buy do not necessarily need to be binary; that is, one or the other, but rather
    could end up as a hybrid decision. For example, an organization can develop its
    own application using open source within its application development strategy
    or it can license a third party product that also contains open source. Finally,
    packages may be licensed that can be bridged or integrated with various open source
    modules. In any case, open source broadens the range of choices when determining
    the best application solution.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到的，作为软件开发替代方案的开源的发展在软件行业已经大幅增长。开源也可以代表着“制造与购买”的选择。制造或购买的选择不一定需要是二进制的；也就是说，要么这个，要么那个，而可能最终成为混合决策。例如，一个组织可以在其应用程序开发战略中使用开源开发自己的应用程序，或者可以许可一个也包含开源的第三方产品。最后，可以许可的软件包可以与各种开源模块桥接或集成。无论如何，开源都在确定最佳应用程序解决方案时扩展了选择范围。
- en: 'Open source users must, however, agree to the following conditions of use as
    well as providing conditions of use to others:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，开源用户必须同意以下使用条件，并向其他人提供使用条件：
- en: Free distribution.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自由分发。
- en: Inclusion of source code.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含源代码。
- en: License must allow modifications and derived works.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许可证必须允许修改和派生作品。
- en: Allowed redistribution of modifications under the same license of the original
    software. License may require the derived work to carry a different name or version
    to protect the integrity of the original author.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许以原始软件的相同许可证重新分发修改。许可可能要求派生作品使用不同的名称或版本以保护原始作者的完整性。
- en: No discriminations against any specific groups or fields of endeavors.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不得歧视任何特定群体或领域。
- en: License cannot be restrictive to any software and be technology platform neutral.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许可证不能限制任何软件并且必须是技术平台中立的。
- en: To a certain extent open source provides organizations with the option to use
    package software that is free to modify and then offer their changes back to those
    that need it in the user base—so it can be a forum where organizations can share
    needs. The negative aspect to sharing is if the modification contains proprietary
    algorithms that represent a competitive advantage for the firm. The software must
    also be hardware neutral which presents challenges for those applications that
    run on proprietary systems. Still, open source applications are growing in popularity
    especially as a cloud computing option.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在一定程度上，开源为组织提供了使用免费修改的软件包并将其修改提供给需要的用户的选择，因此它可以成为组织分享需求的平台。分享的负面影响在于，如果修改包含代表公司竞争优势的专有算法。软件还必须是硬件中立的，这对于运行在专有系统上的应用程序造成了挑战。尽管如此，开源应用程序在云计算选项中的受欢迎程度仍在增加。
- en: Furthermore, open source might present some unexpected legal issues particularly
    as it relates to ownership of the software. Suppose you use an open source routine
    or module in your proprietary application and then the company is acquired by
    another entity. The question then is who owns the product? Legally the portion
    that is open source cannot be owned, which creates a dilemma that was likely not
    foreseen by the organization’s IT management. This dilemma is particularly relevant
    to vendor software products.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，开源可能会带来一些意想不到的法律问题，特别是与软件的所有权有关。假设您在专有应用程序中使用开源例程或模块，然后该公司被另一个实体收购。那么问题就是谁拥有该产品？在法律上，开源部分不能被拥有，这就产生了一个组织的IT管理人员可能没有预料到的困境。这个困境尤其与供应商软件产品相关。
- en: 11.13 Cloud Computing Options
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.13 云计算选项
- en: As I have discussed in previous chapters, cloud computing is the ultimate server-based
    paradigm to support IoT and blockchain technologies. Simply put, the host (Cloud)
    has all of the hardware, software, services and databases to support your business
    or enterprise. The organization essentially has the terminals and printers to
    do the work. Figure [11.2](#Fig2) depicts a cloud high-level configuration.![../images/480347_1_En_11_Chapter/480347_1_En_11_Fig2_HTML.png](../images/480347_1_En_11_Chapter/480347_1_En_11_Fig2_HTML.png)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在之前的章节中讨论过的，云计算是支持物联网和区块链技术的终极基于服务器的范式。简单来说，主机（云）具有支持您的业务或企业所需的所有硬件、软件、服务和数据库。组织基本上拥有终端和打印机来完成工作。图 [11.2](#Fig2)
    描述了云的高级配置。![../images/480347_1_En_11_Chapter/480347_1_En_11_Fig2_HTML.png](../images/480347_1_En_11_Chapter/480347_1_En_11_Fig2_HTML.png)
- en: Fig. 11.2
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2
- en: Cloud configuration
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 云配置
- en: Beyond the connectivity, cloud is really about reduction of cost and perhaps
    using products that are shared by others like IoT devices. This does not mean
    that cloud products cannot have proprietary applications, rather that they have
    the ability to mix and match what is available in the cloud to meet specific needs
    of the organization. Because many of these applications can be shared in the cloud,
    the cost of ownership is very much lowered. Perhaps the largest benefit for using
    a cloud is in the savings for infrastructure and operations staff who would otherwise
    need to support the operation internally. We also know from Chap. [8](480347_1_En_8_Chapter.xhtml)
    that cloud has a number of basic and complex configurations. It is worth reviewing
    these models to help determine the make versus buy decision.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 除了连接性之外，云实际上是关于降低成本，也许使用像物联网设备这样由他人共享的产品。这并不意味着云产品不能有专有应用，而是它们有能力混合匹配云中可用的内容，以满足组织的特定需求。因为许多这些应用程序可以在云中共享，所以拥有权的成本大大降低了。对于使用云的最大好处可能是节省基础设施和运营人员的开支，否则他们需要内部支持运营。我们也从第 [8](480347_1_En_8_Chapter.xhtml)
    章中知道，云有许多基本和复杂的配置。值得审查这些模型以帮助确定自制还是购买的决定。
- en: 11.14 Deployment Models
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.14 部署模型
- en: 'There are essentially five different deployable models for Cloud Computing:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算有五种不同的部署模型：
- en: '1.'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: '*Public/External*: this is the basic model that allows users to access a network
    via the Internet and typically pay on a usage or application access basis. It
    resembles the 1970 concept of timesharing. *Clearly might be easier to buy*.'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*公共/外部*：这是允许用户通过互联网访问网络并通常按使用或应用访问基础支付的基本模型。它类似于 1970 年的分时共享概念。*显然更容易购买*。'
- en: '2.'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: '*Private/Internal*: a private cloud in many ways resembles an Intranet concept
    in that it is an internally developed shared service for the organization. As
    in an Intranet, a private cloud requires organizations to design the network and
    support it as if it were Public—of course with less complexity. *Likely a build
    choice*.'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*私有/内部*：在许多方面，私有云类似于内部网络的概念，因为它是为组织开发的内部开发的共享服务。就像在内部网络中一样，私有云要求组织设计网络并像支持公共云一样支持它，当然复杂度较低。*可能是自制的选择*。'
- en: '3.'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: '*Community*: this configuration represents a group of organizations that share
    resources. In effect it is a restricted public cloud—only certain organizations
    can use it. Community clouds are attractive for specific industries that have
    similar needs or associations. *Could be both depending on the size of the shared
    community*.'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*社区*：此配置表示一组共享资源的组织。实际上，它是一个受限的公共云——只有某些组织可以使用它。对于具有相似需求或关联的特定行业，社区云是有吸引力的。*根据共享社区的规模可能是任何一种*。'
- en: '4.'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: '*Hybrid*: a hybrid cloud really relates to providing specific administrative
    IT functions like backup, performance and security for both public and private
    cloud deployments. So, it is more a utility type of cloud service often provided
    by internal IT services or vendors like Oracle, etc. *Likely both with the private
    being developed and the public outsourced*.'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*混合*：混合云实际上是提供特定的行政IT功能，如备份、性能和安全性，供公共和私有云部署使用。因此，它更像是由内部IT服务或供应商（如 Oracle
    等）提供的公共事业型云服务。*私有云可能是自行开发的，而公共云则是外包的*。'
- en: '5.'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '5.'
- en: '*Combined*: This is the application of multiple types of clouds that allow
    organizations to enjoy the best provisions that it provides to each business.
    *By definition it can be either depending on the circumstances*.'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*组合*：这是应用多种类型的云，允许组织享受每个业务提供的最佳条款。*根据情况可能是任何一种*。'
- en: Figure [11.3](#Fig3) depicts the graphical representations of these cloud type
    deployments.![../images/480347_1_En_11_Chapter/480347_1_En_11_Fig3_HTML.png](../images/480347_1_En_11_Chapter/480347_1_En_11_Fig3_HTML.png)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 [11.3](#Fig3) 描述了这些云类型部署的图形表示。![../images/480347_1_En_11_Chapter/480347_1_En_11_Fig3_HTML.png](../images/480347_1_En_11_Chapter/480347_1_En_11_Fig3_HTML.png)
- en: Fig. 11.3
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3
- en: Cloud deployment types.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 云部署类型。
- en: '*Source* Wikipedia'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*来源* 维基百科'
- en: 'Obviously, cloud computing has its drawbacks—it is essentially outsourcing
    major parts of your operation to a third party—for which is always a risk, so
    these should be measured as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，云计算也有其缺点——实质上是将您运营的主要部分外包给第三方——因此存在风险，因此应按以下方式衡量：
- en: '*Security*: while all third parties promise security, history has shown that
    they can be pierced from the outside. So, security remains a concern for private
    and important data. For example, having healthcare information and other personal
    information in a Cloud could be very dangerous.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*安全性*：虽然所有第三方都承诺安全性，但历史表明它们可能被外部入侵。因此，安全性仍然是私人和重要数据的关注点。例如，在云中拥有医疗信息和其他个人信息可能非常危险。'
- en: '*Governmental and political issues*: If stored data is kept in other locations
    under the auspices and control of other countries, it could be restricted, taken
    or kept from those that need it. The data could also be compromised because of
    different legal systems and changes in government policies. We see such problems
    in multi-national firms quite often.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*政府和政治问题*：如果存储的数据保存在其他国家的地点，受其他国家的监督和控制，它可能会受到限制，被拿走或被留下，这些需要它的人。由于不同的法律体系和政府政策变化，数据也可能会受到损害。我们经常在跨国公司中看到这样的问题。'
- en: '*Downtime*: how much can any vendor guarantee ongoing service without outage,
    and to what extent can Clouds have failover abilities and at what cost?'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*停机时间*：任何供应商能够保证持续服务而无故障的时间有多长，云计算能够具备多大程度的故障转移能力，以及以何种成本？'
- en: '*Conversions*: If you should need to move from one Cloud provider to another,
    what are the risks and problems with moving applications and what compatibility
    problems will occur especially with data conversion?'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*转换*：如果您需要从一个云供应商转移到另一个云供应商，那么移动应用程序会面临什么风险和问题？特别是数据转换方面会出现哪些兼容性问题？'
- en: 11.14.1 Summary
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 11.14.1 摘要
- en: This chapter examined the complexities of whether to make or buy an application
    solution. Hybrid solutions, which involve both a third-party package and internally
    developed applications, are very realistic alternatives. The evolution of open
    source and cloud computing offer attractive opportunities to design and create
    hybrid systems that provide broader alternatives than historically were available.
    Furthermore, the concept of Driver/Supporter provides a more scientific way of
    determining whether to make or buy software solutions all of which are consistent
    with IoT and blockchain architectures to support mobile environments.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了是制造还是购买应用程序解决方案的复杂性。涉及第三方软件包和内部开发的混合解决方案是非常现实的选择。开源和云计算的发展提供了吸引人的机会，设计和创建提供比以往更广泛选择的混合系统。此外，驱动程序/支持者的概念提供了一种更科学的方法，确定是制造还是购买软件解决方案，所有这些都与支持移动环境的物联网和区块链架构一致。
- en: 11.15 Problems and Exercises
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.15 问题和练习
- en: '1.'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: Explain what is meant about Core versus Content.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解释核心与内容的含义。
- en: '2.'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: Why is TOC so important?
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为什么 TOC 如此重要？
- en: '3.'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: Describe Langer’s theory of Driver/Supporter.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 描述 Langer 的驱动程序/支持者理论。
- en: '4.'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: What is the relationship between Driver/Supporter and Make versus Buy?
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 驱动程序/支持者与制造与购买之间的关系是什么？
- en: '5.'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '5.'
- en: Define Open Source. How can Open Source change the decision process on Make
    versus Buy?
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定义开源。开源如何改变制造与购买的决策过程？
- en: '6.'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '6.'
- en: What is Cloud computer? Explain the different types of Clouds.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 云计算是什么？解释不同类型的云。
