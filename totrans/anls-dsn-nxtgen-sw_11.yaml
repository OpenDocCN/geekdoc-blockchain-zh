- en: © Springer Nature Switzerland AG 2020A. M. LangerAnalysis and Design of Next-Generation
    Software Architectures[https://doi.org/10.1007/978-3-030-36899-9_11](https://doi.org/10.1007/978-3-030-36899-9_11)
  prefs: []
  type: TYPE_NORMAL
- en: 11. Build Versus Buy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Arthur M. Langer^([1](#Aff2) [ ](#ContactOfAuthor2))(1)Center for Technology
    Management, Columbia University, New York, NY, USAArthur M. LangerEmail: [al261@columbia.edu](mailto:al261@columbia.edu)'
  prefs: []
  type: TYPE_NORMAL
- en: 11.1 Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This chapter addresses a difficult and controversial decision that is made
    every time an organization seeks a software solution to meet its needs: do we
    make it to our specific needs, or do we buy something that is made to order but
    may not do everything we want? Often the build decision is called the “make” alternative
    and suggests that the product will be made in-house versus the buy concept that
    can be referred to as outsourcing. I do not believe these simple labels are accurate
    or appropriate. Whether something is built or bought has little to do with whether
    the process is outsourced, so we need to be careful in the way we label these
    two alternatives.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inman et al. ([2011](#CR3)) suggests that Build and Buy decisions need to be
    made at both the strategic and operational levels. Burt et al. ([2003](#CR2))
    provided some direction on the strategic reasons for buying and tied it into a
    definition of outsourcing, providing three concrete categories of reasons NOT
    to outsource:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The item is critical to the success of the overall product and is perceived
    so by the company’s clientele
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The item requires specialized design and skills and such skills are limited
    in the organization
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The item fits into the firm’s core competencies but needs to be developed in
    the future.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Historically, most organizations selected the buy option because their assumption
    was that it lowered costs. Indeed, over 70% of product ownership usually occurs
    after implementation. So where is this cost? It occurs in maintenance, where in-house
    teams must continually alter and develop. The off-the-shelf concept tends to keep
    costs lower because in theory the sum of all the clients will create better software
    for all. Others suggest that a company should always first seek a package because
    of common business challenges including:'
  prefs: []
  type: TYPE_NORMAL
- en: Cost
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time to market
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Political situation in the environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Architectural differences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skill sets of existing staff.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, The Gartner Group in 2003 published a report that suggested this trend
    was changing and that there were a growing number of firms that were returning
    to building applications internally. Gartner cited the following reasons for the
    change of heart:'
  prefs: []
  type: TYPE_NORMAL
- en: Rising competitive advantages of using emerging technologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increased availability of talented software developers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poor reputation of prior uses of package software—that it is not agile enough
    and difficult for departments to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increased needs to adapt to unique and changing business needs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ledeen’s (2009) and Moore’s ([2002](#CR5)) analysis of how to approach make
    versus buy is quite useful. He established a step-by-step criterion to help organizations
    to make the best decision. This criterion included the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Core versus Context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coverage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Direction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TCO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standards.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 11.2 Core Versus Context
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This decision point relates to the strategic importance of the application.
    The more strategic the application, the more likely that the organization develop
    software internally (also see Langer [2011](#CR4), below). The concept is simple:
    if the application relates to basic functions in accounting, HR or payroll, then
    it is not core. However, software used by WalMart, although accounting related
    is used as a supply chain management that drives every aspect of their competitive
    advantage as a company. The result of course is that Walmart developed their supply
    chain as a core and unique application. Moore’s chart (Table [11.1](#Tab1)) provides
    an interesting matrix of how core can be determined.Table 11.1'
  prefs: []
  type: TYPE_NORMAL
- en: Build versus buy chart
  prefs: []
  type: TYPE_NORMAL
- en: '|   | CoreEngage | ContextDisengage |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Mission critical (control) | MAKE | OUTSOURCE |'
  prefs: []
  type: TYPE_TB
- en: '| Supporting (entrust) | PARTNER | CONTRACT |'
  prefs: []
  type: TYPE_TB
- en: The chart above reflects that Mission Critical application should be developed
    in-house with Context oriented applications may be modified to meet package requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 11.3 Coverage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The coverage assesses the extent of the match of the packaged product with the
    business requirements. The general rule is that a package should have at least
    80% of the features and functions needed by the organization. However, Ledeen
    states that this could be a trap, suggesting that a package’s capabilities outside
    of the immediate needs of the business are equally as important. This is relevant,
    given that business needs are continually evolving, organizations must be cognizant
    of having applications that can not only handle what is, but what may be future
    needs of the business. In addition, a certain feature in a packaged solution may
    actually offer a better business alternative than currently used by the business—so
    it’s a complex issue as they say.
  prefs: []
  type: TYPE_NORMAL
- en: 11.4 Direction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The key words relating to Direction is flexibility, maintainability, and extendibility
    of the software throughout its life. Ultimately, Direction relates to how much
    control the organization has over the product, especially those products that
    may need to change—that is, the volatility of what the software does. For example,
    if the product is a basic accounting system, it is likely not to change substantially
    over its life. However, if it is a healthcare product that it regulated by government
    requirements in a highly fragile market, then Direction is a key decision factor.
    Much of this relates to the design and architecture of the product itself. Can
    it be easily modified? What is the extent of changes that can be controlled via
    user input? All of these factors are significant to whether a package is the wise
    choice.
  prefs: []
  type: TYPE_NORMAL
- en: 11.5 Total Cost of Ownership (TCO)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The TCO represents to entire cost. Components of this cost include license fees
    for the product, maintenance, product customizations, and support. The major variable
    in TCO is custom modifications. Vendors will often provide an estimate but managers
    need to be careful of “scope-creep” where original requirements for customizations
    become greatly expanded during the design phase of the project. A good approach
    that can help this decision is to determine the number of features and functions
    in the package that the organization does *not* need. A packaged solution that
    has many features and functions that are not needed might suggest that the application
    is not a great match and is likely designed for a different audience. It is important
    to note that many application packages were developed first as a custom application
    for a specific client and then tailored for others. This process was a typical
    evolution of how many software packages evolved in the market. Therefore, understanding
    the history of how the application package was developed might provide a hint
    as to the TOC and the fit in general—the two tend to go together.
  prefs: []
  type: TYPE_NORMAL
- en: 11.6 Scale
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The size of the package is a factor, especially when it has many modules. This
    is very relevant in large Enterprise Resource Planning (ERP) products where a
    high degree of scaled interoperability is important. These modular products also
    allow clients to purchases business components at later periods and easily retrofit
    them. However, if it is *not* the intention of the organization to scale, then
    a large integrated package may be overkill.
  prefs: []
  type: TYPE_NORMAL
- en: 11.7 Timing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many who would believe that a packaged solution will be faster to
    implement—but be careful-often this is not the case. Packaged solutions may add
    steps to the SDLC and as a result could actually prolong the timing of going Live
    on the product. Ledeen suggests that while COTS provides greater predictability
    it could be a reflection on the limits of flexibility and imposed restrictions.
    Either case I would strongly recommend that the decision whether to have a make
    versus buy not be contended solely based on speed to completion—the organization
    may be in for a big surprise. The more an organization can accept the base package
    the faster the implementation will be, for sure. However, accepting the package
    as is does not necessarily mean that it is the best thing for the business.
  prefs: []
  type: TYPE_NORMAL
- en: 11.8 Standards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ledeen defines standards as the consistency across systems of the way things
    get done. I see this issue more in terms of consistency of architecture of the
    organization. This means that the hardware platforms and software architecture
    (middleware, office products, etc.) should be consistent for packaged software
    to maximize its benefits. If this is not the case, that is, where you have multiple
    architectures across the organization, then the value of a package become less
    evident. This is especially true if the package requires a specific architecture
    for all of the systems. This is why open systems are so attractive to organizations
    Unfortunately in multi-national firms, having many architectures is not unusual.
    Much of this may have occurred due to corporate acquisitions of other firms—when
    you acquire a new business you often acquire a new systems architecture—both hardware
    and software!
  prefs: []
  type: TYPE_NORMAL
- en: 11.9 Other Evaluation Criteria
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The above issues are important but there are other contextual things to consider
    when making the decision:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Complexity of Product*: the more intricate the software application, the harder
    for COTS to work. Complex products also tend to shorten the life cycle and have
    more evolving needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*State of the Art*: Users who seek packaged solutions often require the latest
    and greatest up-to-date product. They may be disappointed to learn that package
    software has some unique limitations in this area. First, vendors of packages
    have user bases to take care of—who ultimately have older versions and hardware
    that they must support. This results in difficulties with downward compatibilities
    of their user base. Just look at Microsoft’s problems when they upgrade operating
    systems and software. IBM used to issue “no support” edicts to its customers who
    failed to upgrade their products over time. The better vendors force their users
    to upgrade but it is always messy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Maintenance*: COTS often involves product upgrades and new maintenance releases.
    Sometimes maintenance releases include bug fixes and workarounds for packaged
    discovered problems. Maintenance can also be very tricky—how do organizations
    load new versions from the vendors when there are customizations, for example?
    It gets to be a challenge especially when the updates are regulatory in nature.
    COTS that have customizations inevitably need to go through a retrofit, where
    the customized portions have to be “re-customized” to deal with packaged software
    upgrades. This certainly adds to the cost equation over the life of the package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While the above suggestions offer guides on what to think about and measure,
    the process is still complex without a real scientific methodology to determine
    ultimately whether to make or buy or both. However, Langer ([2011](#CR4)) provides
    yet another concept called Driver/Supporter theory in which “buy” decisions would
    only be made for applications that were considered “Supporters.” Figure [11.1](#Fig1)
    depicts a supporter item as something that has reached the stage of commodity
    notated in the circle labeled as “Economies of Scale.”![../images/480347_1_En_11_Chapter/480347_1_En_11_Fig1_HTML.png](../images/480347_1_En_11_Chapter/480347_1_En_11_Fig1_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 11.1
  prefs: []
  type: TYPE_NORMAL
- en: Langer’s Driver/Supporter life cycle
  prefs: []
  type: TYPE_NORMAL
- en: The diagram shows that all technology needs start out as Drivers but eventually
    become Supporters, thus lose their uniqueness in the marketplace. It is as if
    you were creating a strategic advantage by implementing a new email system—this
    would not really provide the organization with a competitive advantage—rather
    as an enabler to compete—a very different concept. The point I am making here
    is that a new email system would likely be “bought” and possibly implemented using
    an outsource vendor. In accordance with Burt et al. then this would be a case
    for buying as opposed to making.
  prefs: []
  type: TYPE_NORMAL
- en: 11.10 Drivers and Supporters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I think this concept of Driver/Supporter is essential to understanding make/buy
    decisions. This section provides further details on this theory and practice as
    a vehicle for better determination of make versus buy.
  prefs: []
  type: TYPE_NORMAL
- en: 'To summarize Driver/Supporter, there are essentially two types of generic functions
    performed by departments in organizations: Driver functions and Supporter functions.
    These functions relate to the essential behaviour and nature of what a department
    contributes to the goals of the organization. I first encountered the concept
    of drivers and supporters at Coopers & Lybrand, which was at that time a Big 8¹
    accounting firm. I studied the formulation of Driver versus Supporter as it related
    to the role of our EDP (Electronic Data Processing) department. The firm was attempting
    to categorize the EDP department as either a Driver or Supporter.'
  prefs: []
  type: TYPE_NORMAL
- en: Drivers are defined as those units that engaged in front-line or direct revenue
    generating activities. Supporters are units that did not generate obvious direct
    revenues but, rather, were designed to support front-line activities. For example,
    operations such as internal accounting, purchasing, or office management were
    all classified as supporter departments. Supporter departments, due to their very
    nature, were evaluated on their effectiveness and efficiency or economies of scale.
    In contrast, driver organizations are expected to generate direct revenues and
    other ROI values for the firm. What was also interesting to me at the time was
    that Drivers were expected to be more daring—since they must inevitably generate
    returns for the business. As such, Drivers engage in what Bradley and Nolan ([1998](#CR1))
    coined “sense and respond” behaviours and activities. Let me explain.
  prefs: []
  type: TYPE_NORMAL
- en: Marketing departments often generate new business by investing or “sensing”
    an opportunity, quickly—because of competitive forces in the marketplace. Thus,
    they must sense an opportunity and be allowed to respond to it in timely fashion.
    The process of sensing opportunity and responding with competitive products or
    services is a stage in the cycle that organizations need to support. Failures
    in the cycles of sense and respond are expected. Take, for example, the launching
    of new fall television shows. Each of the major stations goes through a process
    of “sensing” what shows might be interesting to the viewing audience. They “respond”
    after research and review with a number of new shows. Inevitably, only a few of
    these selected shows are actually successful; some fail almost immediately. While
    relatively few shows succeed, the process is acceptable and is seen by management
    as the consequence of an appropriate set of steps for competing effectively—even
    though the percentage of successful new shows is very low. Therefore, it is safe
    to say that driver organizations are expected to engage in high-risk oriented
    operations, of which many will fail for the sake of creating ultimately successful
    products or services.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding example raises two questions: (1) How does “sense and respond”
    relate to the world of information technology, and (2) why is it important? Information
    technology is unique in that it is both a Driver and a Supporter. The latter being
    the generally accepted norm in most firms. Indeed, most IT functions are established
    to support a myriad of internal functions such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Accounting and finance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data-Center infrastructure (e-mail, desktop, etc.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise level application (ERP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customer support (CRM)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web and e-commerce activities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As one would expect, these IT functions are viewed as overhead related, as somewhat
    of a commodity, and, thus, constantly managed on an economy-of-scale basis—that
    is, how can we make this operation more efficient, with a particular focus on
    cost containment?
  prefs: []
  type: TYPE_NORMAL
- en: 'So, what then are IT Driver functions? By definition, they are those that engage
    in direct revenues and identifiable return-on-investment (ROI). How do we define
    such functions in IT, as most activities are sheltered under the umbrella of marketing
    organization domains? (Excluding, of course, software application development
    firms that engage in marketing for their actual application products.) I define
    IT Driver functions as those projects that, if delivered, would change the relationship
    between the organization and its customers, that is, those activities that directly
    affect the classic definition of a market: forces of supply and demand, which
    are governed by the customer (demand) and the vendor (supplier) relationship.'
  prefs: []
  type: TYPE_NORMAL
- en: The conclusion of this section, therefore, is that no Driver application product
    should be implemented using complete outsourcing, rather made in-house and owned
    by the firm. This does not, however, suggest that certain services and components
    be subcontracted out as long as the ownership remains within the company.
  prefs: []
  type: TYPE_NORMAL
- en: 11.11 The Supporter Side of Buying
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Based on the definition of a Driver, the Supporter side may indeed represent
    the need to buy a packaged solution. Since Supporter functions are “operational”
    by definition, they are considered to be a commodity and thus able to be implemented
    using more standardized application software. Thus, all of the advantages of using
    packaged software apply. In addition there should be less need for customization.
    For example, think of the choice to build an email system—you would only build
    it in house if you required unique capabilities that provided a competitive advantage.
    That is, the email system would be a Driver application because it would change
    the relationship between the buyer and seller. This is exactly the situation that
    occurred with Walmart, where what would ordinarily have been considered a commodity
    accounting system became an application of great strategic advantage. On the other
    hand, an email system that could provide such advantage would be unlikely for
    most organizations, and therefore they would seek a product that does what most
    organizations need in any email system—as a supporter solution.
  prefs: []
  type: TYPE_NORMAL
- en: 11.12 Open Source Paradigm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open Source software can be defined as free source code developed among a community
    that believes strongly in a free software movement. Initial examples of successful
    open source products are Linux and Netscape Communicator. The Open Source movement
    is supported under the auspices of the Open Source Initiative (OSI) that was formed
    in 1998 to provide guidance and standards of application.
  prefs: []
  type: TYPE_NORMAL
- en: As I previously mentioned the evolution of open source as an alternative to
    developing software has grown enormously in the software industry. Open source
    can also represent an option with make versus buy. Choices of whether to make
    or buy do not necessarily need to be binary; that is, one or the other, but rather
    could end up as a hybrid decision. For example, an organization can develop its
    own application using open source within its application development strategy
    or it can license a third party product that also contains open source. Finally,
    packages may be licensed that can be bridged or integrated with various open source
    modules. In any case, open source broadens the range of choices when determining
    the best application solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open source users must, however, agree to the following conditions of use as
    well as providing conditions of use to others:'
  prefs: []
  type: TYPE_NORMAL
- en: Free distribution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inclusion of source code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: License must allow modifications and derived works.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowed redistribution of modifications under the same license of the original
    software. License may require the derived work to carry a different name or version
    to protect the integrity of the original author.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No discriminations against any specific groups or fields of endeavors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: License cannot be restrictive to any software and be technology platform neutral.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To a certain extent open source provides organizations with the option to use
    package software that is free to modify and then offer their changes back to those
    that need it in the user base—so it can be a forum where organizations can share
    needs. The negative aspect to sharing is if the modification contains proprietary
    algorithms that represent a competitive advantage for the firm. The software must
    also be hardware neutral which presents challenges for those applications that
    run on proprietary systems. Still, open source applications are growing in popularity
    especially as a cloud computing option.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, open source might present some unexpected legal issues particularly
    as it relates to ownership of the software. Suppose you use an open source routine
    or module in your proprietary application and then the company is acquired by
    another entity. The question then is who owns the product? Legally the portion
    that is open source cannot be owned, which creates a dilemma that was likely not
    foreseen by the organization’s IT management. This dilemma is particularly relevant
    to vendor software products.
  prefs: []
  type: TYPE_NORMAL
- en: 11.13 Cloud Computing Options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As I have discussed in previous chapters, cloud computing is the ultimate server-based
    paradigm to support IoT and blockchain technologies. Simply put, the host (Cloud)
    has all of the hardware, software, services and databases to support your business
    or enterprise. The organization essentially has the terminals and printers to
    do the work. Figure [11.2](#Fig2) depicts a cloud high-level configuration.![../images/480347_1_En_11_Chapter/480347_1_En_11_Fig2_HTML.png](../images/480347_1_En_11_Chapter/480347_1_En_11_Fig2_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 11.2
  prefs: []
  type: TYPE_NORMAL
- en: Cloud configuration
  prefs: []
  type: TYPE_NORMAL
- en: Beyond the connectivity, cloud is really about reduction of cost and perhaps
    using products that are shared by others like IoT devices. This does not mean
    that cloud products cannot have proprietary applications, rather that they have
    the ability to mix and match what is available in the cloud to meet specific needs
    of the organization. Because many of these applications can be shared in the cloud,
    the cost of ownership is very much lowered. Perhaps the largest benefit for using
    a cloud is in the savings for infrastructure and operations staff who would otherwise
    need to support the operation internally. We also know from Chap. [8](480347_1_En_8_Chapter.xhtml)
    that cloud has a number of basic and complex configurations. It is worth reviewing
    these models to help determine the make versus buy decision.
  prefs: []
  type: TYPE_NORMAL
- en: 11.14 Deployment Models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are essentially five different deployable models for Cloud Computing:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Public/External*: this is the basic model that allows users to access a network
    via the Internet and typically pay on a usage or application access basis. It
    resembles the 1970 concept of timesharing. *Clearly might be easier to buy*.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Private/Internal*: a private cloud in many ways resembles an Intranet concept
    in that it is an internally developed shared service for the organization. As
    in an Intranet, a private cloud requires organizations to design the network and
    support it as if it were Public—of course with less complexity. *Likely a build
    choice*.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Community*: this configuration represents a group of organizations that share
    resources. In effect it is a restricted public cloud—only certain organizations
    can use it. Community clouds are attractive for specific industries that have
    similar needs or associations. *Could be both depending on the size of the shared
    community*.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Hybrid*: a hybrid cloud really relates to providing specific administrative
    IT functions like backup, performance and security for both public and private
    cloud deployments. So, it is more a utility type of cloud service often provided
    by internal IT services or vendors like Oracle, etc. *Likely both with the private
    being developed and the public outsourced*.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Combined*: This is the application of multiple types of clouds that allow
    organizations to enjoy the best provisions that it provides to each business.
    *By definition it can be either depending on the circumstances*.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure [11.3](#Fig3) depicts the graphical representations of these cloud type
    deployments.![../images/480347_1_En_11_Chapter/480347_1_En_11_Fig3_HTML.png](../images/480347_1_En_11_Chapter/480347_1_En_11_Fig3_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 11.3
  prefs: []
  type: TYPE_NORMAL
- en: Cloud deployment types.
  prefs: []
  type: TYPE_NORMAL
- en: '*Source* Wikipedia'
  prefs: []
  type: TYPE_NORMAL
- en: 'Obviously, cloud computing has its drawbacks—it is essentially outsourcing
    major parts of your operation to a third party—for which is always a risk, so
    these should be measured as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Security*: while all third parties promise security, history has shown that
    they can be pierced from the outside. So, security remains a concern for private
    and important data. For example, having healthcare information and other personal
    information in a Cloud could be very dangerous.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Governmental and political issues*: If stored data is kept in other locations
    under the auspices and control of other countries, it could be restricted, taken
    or kept from those that need it. The data could also be compromised because of
    different legal systems and changes in government policies. We see such problems
    in multi-national firms quite often.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Downtime*: how much can any vendor guarantee ongoing service without outage,
    and to what extent can Clouds have failover abilities and at what cost?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Conversions*: If you should need to move from one Cloud provider to another,
    what are the risks and problems with moving applications and what compatibility
    problems will occur especially with data conversion?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 11.14.1 Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter examined the complexities of whether to make or buy an application
    solution. Hybrid solutions, which involve both a third-party package and internally
    developed applications, are very realistic alternatives. The evolution of open
    source and cloud computing offer attractive opportunities to design and create
    hybrid systems that provide broader alternatives than historically were available.
    Furthermore, the concept of Driver/Supporter provides a more scientific way of
    determining whether to make or buy software solutions all of which are consistent
    with IoT and blockchain architectures to support mobile environments.
  prefs: []
  type: TYPE_NORMAL
- en: 11.15 Problems and Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain what is meant about Core versus Content.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is TOC so important?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Describe Langer’s theory of Driver/Supporter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the relationship between Driver/Supporter and Make versus Buy?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define Open Source. How can Open Source change the decision process on Make
    versus Buy?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '6.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is Cloud computer? Explain the different types of Clouds.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
