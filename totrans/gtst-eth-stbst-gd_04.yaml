- en: © The Author(s), under exclusive license to APress Media, LLC, part of Springer
    Nature 2022D. P. BauerGetting Started with Ethereum [https://doi.org/10.1007/978-1-4842-8045-4_4](https://doi.org/10.1007/978-1-4842-8045-4_4)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: 4. Unit Tests for Smart Contracts
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Davi Pedro Bauer^([1](#Aff2)  )(1)Campo Bom, Rio Grande do Sul, Brazil
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Unit tests are used to test code execution scenarios and ensure that they behave
    as expected. Crucially, unit tests allow you to refactor code and make new changes
    without breaking existing behaviors.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: In smart contracts, unit tests are even more important, as once the contract
    is deployed, it is no longer possible to fix it unless you deploy a new contract.
    Because of this, it is of fundamental importance that you incorporate unit tests
    into all the smart contracts you write, looking for as much coverage as possible.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to write unit tests using Mocha as the test
    runner and Chai as the assertion library.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of this chapter, you will be able to do the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Create a unit test file
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write unit tests for the smart contract
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write test assertions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the unit tests
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check the unit test results
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing Unit Tests for ERC-20 Smart Contracts
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Truffle has an automated testing framework by default, making it considerably
    easier to test your contracts. This framework allows you to create basic and manageable
    tests in a variety of ways. Let’s start coding our first unit test.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Creating a New Unit Test File
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open a new terminal and execute the following command:$ truffle create test
    erc20FixedSupply
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Writing a Test for the Total Supply Contract
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the file ERC20FixedSupply.js, write a new test to assert that the contract
    was created with a fixed supply of 1,000 coins.const erc20FixedSupply = artifacts.require("erc20FixedSupply");contract("erc20FixedSupply",
    function () {    it("should assert true", async function() {        let token
    = await erc20FixedSupply.deployed();        let name = await token.name();        assert.equal(name,
    'Fixed');    });    it("should return total supply of 1000", async function()
    {        const instance = await erc20FixedSupply.deployed();        const totalSupply
    = await instance.totalSupply();        assert.equal(totalSupply, 1000);    });});Test
    using the following command:$ truffle test --network development
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that the test will pass.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Writing Test Assertions for the Balance Contract
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the file ERC20FixedSupply.js, add one more test to assert that the balance
    is correct after a new transfer is made between two accounts.it("should transfer
    150 FIX", async function(){    const instance = await erc20FixedSupply.deployed();    await
    instance.transfer(account[1], 150);    const balanceAccount0 = await instance.balanceOf(accounts[0]);    const
    balanceAccount1 = await instance.balanceOf(accounts[1]);    assert.equal(balanceAccount0.toNumber(),
    850);    assert.equal(balanceAccount1.toNumber(), 150);});
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Running the Unit Tests
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, execute the test again.$ truffle test --network development
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，再次执行测试。$ truffle test --network development
- en: Once again, make sure that all the tests pass. If the unit test has passed,
    a green check mark will appear; otherwise, a red x symbol will appear.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 再次确保所有测试都通过。如果单元测试通过，会出现绿色勾号；否则，会出现红色X符号。
- en: Checking the Unit Test Results
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查单元测试结果
- en: Make sure you get the same output as shown in Figure [4-1](#Fig1).![](../images/521550_1_En_4_Chapter/521550_1_En_4_Fig1_HTML.jpg)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你得到的输出与图[4-1](#Fig1)所示的一致。![](../images/521550_1_En_4_Chapter/521550_1_En_4_Fig1_HTML.jpg)
- en: 'A screenshot of the V S code presents the following output. Contract colon
    e r c 20 FixedSupply. check mark for: should assert true, 72 milliseconds. check
    mark for: should return total supply of 1000, 83 milliseconds. check mark for:
    should transfer 150 FIX, 494 milliseconds, 3 passing, 776 milliseconds.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: V S代码的屏幕快照显示了以下输出。合约名：e r c 20 FixedSupply。检查标记：应该断言为真，72毫秒。检查标记：应该返回1000的总供应量，83毫秒。检查标记：应该转账150
    FIX，494毫秒，3个通过，776毫秒。
- en: Figure 4-1
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-1
- en: 'VS Code: unit test results succeed'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code：单元测试结果成功
- en: Try to change some values like the account balance and see how the results change
    from pass to fail, as shown in Figure [4-2](#Fig2).it("should transfer 150 FIX",
    async function(){    const instance = await erc20FixedSupply.deployed();    await
    instance.transfer("account[1]", 150);    const balanceAccount0 = await instance.balanceOf(accounts[0]);    const
    balanceAccount1 = await instance.balanceOf(accounts[1]);    assert.equal(balanceAccount0.toNumber(),
    750);    assert.equal(balanceAccount1.toNumber(), 250);});![](../images/521550_1_En_4_Chapter/521550_1_En_4_Fig2_HTML.jpg)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试更改一些值，比如账户余额，看看结果如何从通过变为失败，如图[4-2](#Fig2)所示。it("应该转账150 FIX", async function(){    const
    instance = await erc20FixedSupply.deployed();    await instance.transfer("account[1]",
    150);    const balanceAccount0 = await instance.balanceOf(accounts[0]);    const
    balanceAccount1 = await instance.balanceOf(accounts[1]);    assert.equal(balanceAccount0.toNumber(),
    750);    assert.equal(balanceAccount1.toNumber(), 250);});![](../images/521550_1_En_4_Chapter/521550_1_En_4_Fig2_HTML.jpg)
- en: 'A screenshot of the V S code presents the following output. Contract colon
    e r c 20 FixedSupply; checkmark for: should assert true: 51 milliseconds; checkmark
    for: should return total supply of 1000, 51 milliseconds; 1, should transfer 150
    FIX. The next section reads Events emitted during test with details and an explanation
    for them.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: V S代码的屏幕快照显示了以下输出。合约名：e r c 20 FixedSupply；检查标记：应该断言为真：51毫秒；检查标记：应该返回1000的总供应量，51毫秒；1，应该转账150
    FIX。下一节介绍了测试过程中发出的事件以及它们的详细解释。
- en: Figure 4-2
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-2
- en: 'VS Code: unit test results failed'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code：单元测试结果失败
- en: Summary
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned the importance of writing unit tests for smart
    contracts and wrote your first unit test.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了为智能合约编写单元测试的重要性，并写出了你的第一个单元测试。
- en: In the next chapter, we will explore the ERC-721 token standard and how it differs
    from ERC-20\. In addition, you’ll learn to create and deploy contracts in this
    standard.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨ERC-721代币标准以及它与ERC-20的区别。此外，你将学会如何按照这一标准创建和部署合约。
