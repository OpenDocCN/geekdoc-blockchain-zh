- en: Chapter 6
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章
- en: Blockchain Implementation Using Python
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python实现区块链
- en: Saugata Dutta
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Saugata Dutta
- en: Galgotias University, India
  id: totrans-3
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 印度的加尔格蒂亚斯大学
- en: Kavita Saini
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kavita Saini
- en: Galgotias University, India
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 印度的加尔格蒂亚斯大学
- en: ABSTRACT
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter covers an introductory overview of blockchain using Python code.
    This chapter will give a basic understanding of using Python codes in development
    of blockchain. The chapter throws light on beginner-level blockchain creation
    which will help in understanding developing an advance blockchain project using
    Python codes. This chapter covers basic building blocks which will help in creating
    various functions and methods to enhance the blockchain in terms of security.
    This will also help students in creating advanced level of Python program in creating
    better mining algorithms, better queue management, enhanced and secured transactions,
    consensus algorithm, wallets, and accounts.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了使用Python代码的区块链的简要概述。本章将对使用Python代码开发区块链的基本理解进行介绍。本章着重介绍初学者级别的区块链创建，这将有助于理解使用Python代码开发高级区块链项目。本章涵盖了基本的构建模块，这些模块将有助于创建各种功能和方法来增强区块链的安全性。这也将帮助学生创建更高级别的Python程序，以创建更好的挖掘算法、更好的队列管理、增强和安全的交易、共识算法、钱包和账户。
- en: PREFACE
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 前言
- en: The motivation for this writing is originally triggered for my passion into
    network security and data leak prevention. Due to innovation of latest technology
    and at the same time rise in breach of digital security, there are greater needs
    for a technology which has high rate of data security, tamper proof and data leak
    prevention. With a hope to achieve this success, blockchain technology claim to
    produce a same effect of data security, needless to say that using this technology,
    data tampering is immutable where the entire information is stored in blocks and
    hashed. The use of this technology is not restricted only to cryptocurrencies
    but being used in other industries like logistics, supply chain, healthcare and
    so on. This chapter discuss an introduction to blockchain using python code. The
    change in the outlook and market trends due to the usage of this technology which
    is future proof with high level of data security without the involvement of any
    central authority.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我写这篇文章最初的动机源于我对网络安全和数据泄漏预防的热情。随着最新技术的创新以及数字安全漏洞的增加，对于一种具有高数据安全性、防篡改和防数据泄漏的技术的需求日益增加。怀着希望取得成功的心态，区块链技术声称能够产生与数据安全相同的效果，不用说使用这项技术，数据篡改是不可变的，整个信息都存储在区块中并进行了哈希处理。这项技术的应用不仅限于加密货币，还被用于物流、供应链、医疗保健等其他行业。本章讨论了使用Python代码介绍区块链的概述。由于使用这项技术而导致的外观和市场趋势的变化是面向未来的，具有高水平的数据安全性，而不涉及任何中央机构。
- en: It is my interest to find out those latest trends in blockchain technology,
    future developments and a platform to use in various platforms. In reality, the
    success credit goes to everyone who was involved to make this writing a success.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 发现最新的区块链技术趋势、未来发展和在各种平台上使用的平台是我的兴趣。实际上，成功的功劳归功于参与使这篇文章成功的每个人。
- en: INTRODUCTION TO BLOCKCHAIN
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链介绍
- en: Blockchain can be said as a public ledger which is distributed across systems
    irrespective of geographical locations. The ledger is stored and updated across
    many systems across the world. The man behind the blockchain technology is Satoshi
    Nakamoto. The white paper of blockchain was submitted in 2009 where the technology
    exhibits peer to peer, decentralization, consensus algorithm and use of technology
    without the intervention of any third party. Initially the technology was exclusively
    meant for bitcoin but on later stage the functionality extended to every line
    of business with its attribute of high security, append only, decentralized network
    and most importantly does not require any third party approval (Jena et al., 2019).
    The usage of currency is not new and had been in vogue since medieval period.
    The common method of transactions during ancient times were barter method, as
    the settlements were done in exchange of items of same corresponding value like
    metals, precious stones etc. Advent of development, the transactions took a drastic
    change with introduction of coins and notes. The centralized authority is responsible
    for generation of these currencies and has full control over it. The government,
    regulatory body has a strong hold on these currencies and has full authority on
    circulation. These currencies are fixed and doesn’t decline with period. During
    recent times, introduction of floating currencies made transactions easy and quite
    faster. However these transactions which involves, record keeping, identification
    and verification, transfers are centrally managed. Information technology has
    made life easy with users to execute transaction at any point in time but however
    the cyber threat is a challenge. The vulnerabilities are still there and has already
    made a footprint of losses globally. The transactions are centrally managed and
    non-visible. Data and transactions can be modified, tampered, spoofed with well
    orchestration of IT vulnerabilities and loop holes. In fact the data can be a
    threat from an internal traitor as well. There are various other factors and ways
    of violating critical data which is centrally managed. The Blockchain technology
    which during its manifestation stage introduced Bitcoin to start a parallel economy
    claim to solve these problems. Blockchain uses decentralized and distributed network
    along with distributed ledger which doesn’t require any intervention of third
    party or centralized authority to approve or manage. Bitcoins currency is said
    to be the mother of cryptocurrencies and was the first currency introduced using
    the blockchain technology (Jena et al., 2020). The ledger copy of bitcoin is already
    shared among the nodes and each nodes holds the same copy of this distributed
    ledger. The sender uses private and public key to sign and encrypt the transaction
    to send to a receiver. These transactions can be authenticated with the public
    key by anyone but can only be deciphered with the sender’s private key. A group
    of people known as “Miners” known for validating transactions and accumulate these
    transactions with other transactions into a block for which they are paid some
    rewards. This process is also known as mining. After the mining process, once
    the block is generated and the shared ledger is updated to all nodes, the receiver
    is said to have received the amount. These transactions are transparent and cannot
    be modified or tampered. Bitcoin, digital cryptocurrencies invention was an innovation,
    however the blockchain technology has evolved these years with different types
    of consumptions. Industries has started finding ways to use this secured technologies
    in various forms such that the data remains secured, un-tampered, decentralize
    and no control of any party. Ethereum, an open source cryptocurrency and blockchain
    platform, has progressed in use of smart contracts, in fact an inventor. The use
    of smart contracts has been accepted and used by mass and granted as an acceptable
    tools where one can create self-executable contracts on a blockchain platform.
    These contracts has no intervention or control of any parties(Kumari & Saini,
    2019). Proof of stake discovery has made easy in creation of blocks. The validators
    are selected on the basis of more mining power or currency they hold to validate
    block transactions. This has few advantages over the traditional proof of work
    algorithm like saving on power consumptions which is the most common issues and
    more secured in terms of 51% attack. Proof of stake validators doesn’t receives
    reward while they are given transaction fee. The next achievement in the field
    of blockchain technology is scaling. As the blockchain transactions increases
    there are performance degradation and storage related issues. In order to counter
    these issues various ways are being explored like sharding, sidechains, proof
    of stake, block compressions, hybrid consensus etc. (Kavita, 2018). Thus blockchain
    is an evolving technology which deals with the transactions in a secured way with
    the use of decentralized networking, hashing, and cryptography including reward
    mechanism. Blockchain can be said as a digital disruption and a new innovative
    foundation for researchers, scientist and engineers. There are few significant
    components of successful blockchain operations such as appropriate trustworthiness
    standards for individual transactions, robust cryptographic and hashing mechanism,
    system preparedness and reward mechanism to motivate miners (Saini et al., 2018).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链可以被称为一个公共账本，它分布在各个系统之间，不受地理位置的限制。这个账本存储在世界各地的许多系统中，并不断更新。区块链技术的幕后推手是中本聪。区块链的白皮书于2009年提交，其中技术展示了点对点、去中心化、共识算法和在没有任何第三方干预的情况下使用技术。最初，该技术专门用于比特币，但后来其功能扩展到了各行各业，具有高安全性、追加方式、去中心化网络的属性，最重要的是不需要任何第三方的批准（Jena等人，2019年）。货币的使用并不新鲜，在中世纪就已经流行。古代交易的常见方法是以物易物，因为交易是在同等价值的物品（如金属、宝石等）交换的基础上进行的。随着发展的进展，交易方式发生了巨大变化，引入了硬币和纸币。中央权威负责发行这些货币，并对其拥有充分的控制权。政府、监管机构对这些货币拥有强大的控制力，并对流通货币拥有全权。这些货币是固定的，不会随着时间的推移而下降。近年来，浮动货币的引入使交易变得更加简便和快速。然而，这些涉及记录保存、识别和验证、转移等的交易是由中央管理的。信息技术使用户可以随时随地执行交易变得更加容易，但是网络威胁是一个挑战。漏洞仍然存在，并已经在全球范围内造成了损失。交易是由中央管理的，不可见的。数据和交易可以通过精心策划的信息技术漏洞和漏洞进行修改、篡改、欺骗。事实上，数据也可能受到内部叛徒的威胁。有各种其他因素和方法可以违反由中央管理的关键数据。在其显现阶段，区块链技术引入了比特币，以启动并行经济，声称解决了这些问题。区块链使用分布式和分布式网络以及分布式账本，无需任何第三方或中央权威的批准或管理即可使用技术。比特币货币被认为是加密货币的鼻祖，也是使用区块链技术引入的第一种货币（Jena等人，2020年）。比特币的账本副本已经在节点之间共享，每个节点都持有这个分布式账本的相同副本。发送方使用私钥和公钥对交易进行签名和加密，然后发送给接收方。任何人都可以使用公钥对这些交易进行验证，但只有发送方的私钥才能解密。一群人被称为“矿工”，负责验证交易，并将这些交易与其他交易一起累积到一个块中，作为他们获得一些奖励的交易。这个过程也被称为挖矿。在挖矿过程之后，一旦生成了块并将共享账本更新到所有节点，接收方就被认为已经收到了金额。这些交易是透明的，无法修改或篡改。比特币、数字加密货币的发明是一项创新，但是区块链技术在这些年里已经发展出了不同类型的应用。行业已经开始找到各种形式的使用这种安全技术的方法，以确保数据保持安全、未被篡改、去中心化且无任何一方的控制。以太坊是一个开源的加密货币和区块链平台，已经在智能合约的使用方面取得了进展，实际上是一个发明者。智能合约的使用已被大众接受和使用，并被授予了一种可接受的工具，可以在区块链平台上创建自执行合约。这些合约没有任何一方的干预或控制（Kumari
    & Saini, 2019年）。权益证明发现使块的创建变得容易。验证者根据他们持有的更多的挖矿能力或货币来选择验证块交易。这在某种程度上比传统的工作证明算法有一些优势，比如节省电力消耗是最常见的问题，并且在51%攻击方面更加安全。权益证明的验证者在不获得奖励的情况下会获得交易费用。在区块链技术领域的下一个成就是扩展。随着区块链交易的增加，性能下降和与存储相关的问题也会出现。为了解决这些问题，正在探索各种方法，如分片、侧链、权益证明、块压缩、混合共识等（Kavita，2018年）。因此，区块链是一种不断发展的技术，通过使用分
- en: BLOCKCHAIN DESIGN
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链设计
- en: Blockchain as the name says, it’s a chain of blocks. Blockchain is a distributed
    ledger built from a chain of blocks. A block consists of multiple transactions
    and block header. Block header are used to differentiate blocks and helps in creating
    the chain.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链正如其名称所示，它是一系列区块。区块链是由一系列区块构建的分布式分类帐。一个区块由多个交易和区块头组成。区块头用于区分区块并帮助创建链。
- en: A block header consists of
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 区块头包括
- en: '• Timestamp: The time stamp specifies the time of block creation'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '-   时间戳：时间戳指定了区块创建的时间'
- en: '• Version: Specifies the version number of the blockchain'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '-   版本：指定区块链的版本号'
- en: '• Merkle Root: Blocks are connected with each other through hash values. Every
    block will have transactions. It can be one transactions or thousands and there
    should be a root hash of the block. This is achieved by Merkle tree. A tree will
    have root, branches and leaves. The end nodes are called leaves, the nodes in
    between roots and leaves are called branches and in the top is roots. Imagine
    having a block consists of 8 transactions. So calculating hash of each transactions
    will have eight hashes. So we will calculate hash value of first and second, third
    and fourth, fifth and sixth and so on till eighth. Here we will combine the hash
    of first, second, third and fourth and then fifth, sixth, seventh and eighth.
    Finally we will combine a hash of first to eighth which will be the root hash
    or merkle root.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '-   默克尔根：区块通过哈希值连接在一起。每个区块都有交易。它可以是一个交易或数千个交易，应该有一个块的根哈希。这是通过默克尔树实现的。树将有根、分支和叶子。端节点称为叶子，根和叶子之间的节点称为分支，顶部是根。想象一下，一个区块包含8个交易。因此，计算每个交易的哈希将有八个哈希。因此，我们将计算第一个和第二个的哈希值，第三个和第四个的哈希值，第五个和第六个的哈希值，依此类推直到第八个。在这里，我们将组合第一个、第二个、第三个和第四个的哈希，然后是第五个、第六个、第七个和第八个。最后，我们将结合第一个到第八个的哈希值，这将是根哈希或默克尔根。'
- en: '| Figure 1\. Merkle root |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 图 1. 默克尔根 |'
- en: '| ![Figure978-1-7998-8367-8.ch006.f01](i/ch006.f01.png) |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-8367-8.ch006.f01](i/ch006.f01.png) |'
- en: '• Difficulty Target: It is a number which controls the time taken to add a
    new block to the chain'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '-   难度目标：控制添加新区块到链中所需时间的数字'
- en: '• Nonce: Nonce which is “number only used once” is added to the hashed block
    and when it is rehashed meets the criteria of difficulty target.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '-   随机数：随机数（“只用一次的数字”）添加到哈希块中，当它重新哈希符合难度目标的条件时。'
- en: '• Previous Hash: Hash of the previous block'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '-   先前哈希：上一个区块的哈希'
- en: These are some critical components of blockchain functioning.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是区块链运行的一些关键组件。
- en: 'Genesis Block: The first block is known as genesis block. The previous hash
    value of genesis block is 0 as it is the first block.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 创世区块：第一个区块称为创世区块。创世区块的先前哈希值为0，因为它是第一个区块。
- en: '| Figure 2\. Connected blocks in blockchain |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 图 2. 区块链中连接的区块 |'
- en: '| ![Figure978-1-7998-8367-8.ch006.f02](i/ch006.f02.png) |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-8367-8.ch006.f02](i/ch006.f02.png) |'
- en: 'Cryptography: It means secret writing. Here the sender encrypts the message
    with a public key. The encrypted data also known as cipher text cannot be read
    unless decrypted. The encrypted data is decrypted at receivers end with a private
    key.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 密码学：意味着秘密写作。在这里，发送方使用公钥加密消息。加密后的数据也称为密文，除非解密，否则无法读取。在接收者端，使用私钥解密加密数据。
- en: 'Digital Signature: It is used for authentication and integrity sometimes. If
    a data is sent, it must be authenticated from the right user. Here the data is
    encrypted with the sender’s private key and re-encrypted with receiver’s public
    key. At the receiver end it is decrypted with receiver’s private key and re-decrypted
    using sender’s public key.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 数字签名：有时用于认证和完整性。如果发送数据，必须从正确的用户进行认证。在这里，数据使用发送者的私钥加密，然后使用接收者的公钥重新加密。在接收端，它使用接收者的私钥解密，然后使用发送者的公钥重新解密。
- en: 'Hashing: Hash is a function which takes any random length of data and converts
    into a fixed length output. This is used to check the integrity of the data, if
    changed, the fixed output data value will change.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '-   哈希：哈希是一个函数，它接受任意长度的数据并将其转换为固定长度的输出。这用于检查数据的完整性，如果数据更改，则固定输出数据值将发生变化。'
- en: 'Consensus: As blockchain is a distributed ledger and each node will have a
    copy of this ledger. When a block is added, all nodes should come to consensus
    that all have the same copy of the blockchain. So with a consensus algorithm,
    nodes can agree on a particular state of blockchain. On the basis of consensus
    algorithm, it can be decided which node can add the block in the blockchain.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 共识：由于区块链是一个分布式账本，每个节点都会有一份这个账本的副本。当添加一个区块时，所有节点都应该达成共识，即所有节点都拥有相同的区块链副本。因此，通过共识算法，节点可以就区块链的特定状态达成一致。根据共识算法，可以决定哪个节点可以向区块链添加区块。
- en: 'Proof of Work: The node which solves the mathematical puzzle, will add the
    block to the blockchain and in return will receive some rewards. The nodes are
    usually mining nodes. The mathematical puzzle requires lots of power and time
    and requires specific hardware to solve this puzzle. Once the puzzle is won, the
    block can be added to the chain. This whole procedure is known as Proof of work.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 工作量证明：解决数学难题的节点将把区块添加到区块链中，并作为回报接收一些奖励。这些节点通常是挖矿节点。数学难题需要大量的计算和时间，并且需要特定的硬件来解决这个难题。一旦解决了难题，区块就可以添加到链中。这整个过程称为工作量证明。
- en: So to sum up, blockchain works in the principle of adding blocks in chain which
    are connected to each other through hashing mechanism. In blockchain, data cannot
    be manipulated and cannot be tampered with. The block consists of transactional
    data and block header which stores timestamp, version, merkle root, difficulty
    target, nonce and previous hash (Dutta & Saini, 2019). The reason it is said to
    be secured because if the data is modified, the hash value will change. So let’s
    assume there are four blocks and data is modified on the second block, as soon
    as the same is done the hash value of the second block is changed which will affect
    the third block. The third block hash value needs to be regenerated which again
    affect the hash will value of the next block that is fourth. This continues to
    go on. As the number of blocks in the blockchain is humungous, it is nearly impractical
    to change all corresponding blocks because of proof of work, which requires a
    mathematical puzzle to be solved to generate a block and takes a certain period
    of time. Blockchain is also said to be a trustless technology in terms that there
    is no central control or authority. As an example a transaction in blockchain,
    A as sender and B as receiver. A sends some coins to B. The transaction to miners
    will be digital address of B, digital signature, public key and amount. Hence
    this transactions along with other transactions are mined. The difficulty target
    may be the number of 0’s to be measured valid. A nonce number is added in the
    block and are tried randomly until the miners find a valid hash which satisfies
    the consensus criteria. The miner who wins this race is said to be successfully
    mined the block. The block is then added to the chain for which the miner is rewarded.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 综上所述，区块链的工作原理是通过哈希机制将区块添加到连接在一起的链中。在区块链中，数据无法被篡改和操纵。区块由交易数据和区块头组成，其中存储有时间戳、版本、默克尔根、难度目标、随机数和上一个哈希值（Dutta
    & Saini, 2019）。之所以说它是安全的，是因为如果数据被修改，哈希值将会改变。所以让我们假设有四个区块并且数据在第二个区块上被修改了，一旦同样的事情发生，第二个区块的哈希值就会改变，这将影响第三个区块。第三个区块的哈希值需要重新生成，这将再次影响下一个区块，也就是第四个区块。这个过程会继续下去。由于区块链中的区块数量庞大，几乎不可能更改所有相应的区块，因为工作量证明需要解决一个数学难题来生成一个区块，并需要一段时间。区块链还被称为一种无需信任的技术，因为没有中央控制或权威。举例来说，区块链中的一笔交易，A
    为发送方，B 为接收方。A 向 B 发送一些硬币。矿工的交易将是 B 的数字地址、数字签名、公钥和金额。因此，这些交易连同其他交易一起被挖掘。难度目标可能是要衡量有效的零数。在区块中添加一个随机数（nonce），并随机尝试直到矿工找到满足共识条件的有效哈希。赢得这场竞赛的矿工被认为已成功挖掘了区块。然后将区块添加到链中，矿工将获得奖励。
- en: PYTHON LIBRARIES FOR BLOCKCHAIN
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链的 Python 库
- en: In order to create a blockchain code using python, there are many libraries
    that needs to be imported. Python libraries consists of literals, built in functions
    and exceptions. It is a library of modules which can be used in python code when
    one requires it. “json” is an inbuilt package in python to work with json data
    similarly “string” package consists constants, classes and various strings operations
    which will works once it is imported in the Python file. As an example, “crypto”
    and “crypto.Hash” packages can be used to sign and hash the transactions.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Python 创建区块链代码，需要导入许多库。Python 库包括文字，内置函数和异常。它是一个模块库，可以在 Python 代码中使用，当需要时可以使用。“json”是
    Python 中的内置包，用于处理 json 数据，类似地，“string”包包含常量，类和各种字符串操作，在导入 Python 文件后将起作用。例如，“crypto”和“crypto.Hash”包可用于签名和哈希交易。
- en: '| Figure 3\. Python libraries |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 图 3\. Python 库 |'
- en: '| ![Figure978-1-7998-8367-8.ch006.f03](i/ch006.f03.png) |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-8367-8.ch006.f03](i/ch006.f03.png) |'
- en: STARTING WITH BLOCK AND TRANSACTION CLASS
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从区块和交易类开始
- en: The blockchain is a chain which can be attributed as a list. The elements in
    the list are separated by comma. One can access elements of the list while the
    index starts with 0\. The blocks will hold values and each block will be connected
    by hash. Blocks will store transaction values. The first block is the genesis
    block which has no previous hash. The block class will have attributes and will
    have couple of arguments. Self is always required to represent the instance of
    the class, index, previous hash of the block, transaction items of the block,
    nonce and time. Time function will provide the current time. The constructor body
    will have instance attributes for example the transactions instance attribute
    is created by calling self.transactions in the constructor and so on.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链是一种链，可以看作是一个列表。列表中的元素由逗号分隔。可以通过索引访问列表的元素，索引从 0 开始。区块将保存值，并且每个区块将通过哈希连接。区块将存储交易值。第一个区块是创世区块，没有前一个哈希。区块类将具有属性，并且将有几个参数。Self
    表示类的实例，索引，区块的先前哈希，区块的交易项，nonce 和时间。时间函数将提供当前时间。构造函数体将具有实例属性，例如在构造函数中调用 self.transactions
    来创建交易实例属性等。
- en: '| Figure 4\. Block class |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 图 4\. 区块类 |'
- en: '| ![Figure978-1-7998-8367-8.ch006.f04](i/ch006.f04.png) |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-8367-8.ch006.f04](i/ch006.f04.png) |'
- en: In this chapter, a simple example of financial transaction between a sender
    and recipient is illustrated. A transaction class is created where an amount is
    sent to receivers address.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，展示了发送者和接收者之间的金融交易的简单示例。创建了一个交易类，在其中向接收者地址发送金额。
- en: '| Figure 5\. Transaction class |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 图 5\. 交易类 |'
- en: '| ![Figure978-1-7998-8367-8.ch006.f05](i/ch006.f05.png) |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-8367-8.ch006.f05](i/ch006.f05.png) |'
- en: Time variable is created to store the transaction time. Parameters like sender,
    receiver and amount are actually stored in the instance variables. Here we create
    a dictionary object which will have all these four variables such that it can
    be accessed from a single point.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 时间变量被创建来存储交易时间。像发送者，接收者和金额这样的参数实际上存储在实例变量中。在这里，我们创建一个字典对象，它将有所有这四个变量，以便可以从单一点访问它们。
- en: '| Figure 6\. Dictionary object |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 图 6\. 字典对象 |'
- en: '| ![Figure978-1-7998-8367-8.ch006.f06](i/ch006.f06.png) |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-8367-8.ch006.f06](i/ch006.f06.png) |'
- en: As genesis is the primary block, there is a check if sender is the creator of
    the first transaction in genesis block and some value is assigned in the identity
    field else the address of the sender is assigned. This dictionary object will
    be signed by the private key of the sender with built in SHA algorithm. A method
    named tx_signature is created.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于创世区块是主要区块，因此需要检查发送者是否是创世区块中第一笔交易的创建者，并且将在身份字段中分配一些值，否则将分配发送者的地址。此字典对象将由发送者的私钥使用内置的
    SHA 算法进行签名。创建了一个名为 tx_signature 的方法。
- en: '| Figure 7\. Signature method |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 图 7\. 签名方法 |'
- en: '| ![Figure978-1-7998-8367-8.ch006.f07](i/ch006.f07.png) |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-8367-8.ch006.f07](i/ch006.f07.png) |'
- en: A transaction queue can be declared where transactions can be appended here.
    This is a global list variable.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 可以声明一个交易队列，可以在此处附加交易。这是一个全局列表变量。
- en: '| Figure 8\. Transaction Queue |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 图 8\. 交易队列 |'
- en: '| ![Figure978-1-7998-8367-8.ch006.f08](i/ch006.f08.png) |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-8367-8.ch006.f08](i/ch006.f08.png) |'
- en: An example of a digital crypto transaction is as follows, here the sender named
    John has transferred an amount of 2 coins to Ria. Here the public key of Ria is
    addressed. Tx_signature method is invoked to get the senders private key while
    it is signed by calling the method, once the transaction object is created.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 9\. Transaction example |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-8367-8.ch006.f09](i/ch006.f09.png) |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
- en: 'More transactions can be added to the transactions queue. As an example below:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 10\. Transactions |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-8367-8.ch006.f10](i/ch006.f10.png) |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
- en: USER CLASS
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: The user class generates public and private keys with the help of built in python
    RSA algorithm. The values are kept in the instance variable and should not be
    lost as it holds the key. The public key is utilized as an identity for users.
    A property named identity is declared which returns the public key as an HEX representation.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 11\. User class |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-8367-8.ch006.f11](i/ch006.f11.png) |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
- en: 'Multiple users can be created as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 12\. Users |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-8367-8.ch006.f12](i/ch006.f12.png) |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
- en: CREATING THE FIRST GENESIS TRANSACTION
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Genesis block is the first block in the blockchain which does not contains any
    previous hash. A block class is created and be as “block-user0”. An example of
    a transaction is taken, where Joseph transfers 2.0 coins to Lara. Initially a
    global variable is declared which is the hash of the last block, keeping in mind
    that every block stores hash of previous block. The previous block hash and Nonce
    is none in the first block of the blockchain always (Dutta & Saini, 2021a). As
    the block is ready with transaction, it is hashed and hash value is stored in
    the global variable “l_hash”. This value will be referred by the miner for mining
    process.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 13\. First genesis transaction |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-8367-8.ch006.f13](i/ch006.f13.png) |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
- en: CREATING AND LISTING THE BLOCKCHAIN
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: A list variable is created to store the entire blockchain “lst_val”. The entire
    contents of the blockchain can be displayed by creating a method called “disp_bchain”.
    The contents will increase in due course of time, but considering as an example,
    this method list the number of blocks and the contents. A “for” loop is created
    for iteration and values are temporarily stored in the variable “temp_bl”. All
    transactions are retrieved from iteration in “for” loop and display all transactions
    eventually.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 14\. Creating and displaying the blockchain |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-8367-8.ch006.f14](i/ch006.f14.png) |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
- en: ADDING THE BLOCKS TO THE CHAIN
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Adding the block to the blockchain will use append to the list variable “lst_val”.
    The genesis block is now attached in the chain and blockchain contents are displayed
    when the function “disp_bchain” is called.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 15\. Append the list variable |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-8367-8.ch006.f15](i/ch006.f15.png) |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
- en: For the block class “block-user”, an instance is created. Five transactions
    are selected. Miners validates and confirms transactions before it is added in
    the blockchain. This process holds true when the hash created by the sender equals
    to the hash calculated by miner using public key of sender. The index of the last
    transaction is increased such that the next miner can start with the next transaction
    to validate. Here in theis example five transactions are added, hashed and mined
    with difficulty level of 2\. The block created is added to the blockchain and
    the global variable “l_hash” is re-initialize for next use.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于块类“block-user”，创建了一个实例。选择五笔交易。矿工在将其添加到区块链之前验证和确认交易。当发送者创建的哈希等于矿工使用发送者的公钥计算的哈希时，此过程为真。增加最后一笔交易的索引，以便下一个矿工可以从下一笔交易开始验证。在这个例子中，添加了五笔交易，进行了哈希化，并以难度级别2进行了挖掘。创建的区块被添加到区块链中，并且全局变量“l_hash”被重新初始化以供下次使用。
- en: '| Figure 16\. Adding blocks to the blockchain |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 图 16。将区块添加到区块链 |'
- en: '| ![Figure978-1-7998-8367-8.ch006.f16](i/ch006.f16.png) |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-8367-8.ch006.f16](i/ch006.f16.png) |'
- en: MINERS AND MINING
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 矿工和挖矿
- en: Mining is a significant process in public blockchain. The validation and verification
    of transactions and adding those transactions in the block is done by miners (Dutta
    & Saini, 2021b). A digest is generated for proof of work in mining process.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 挖掘是公共区块链中的一个重要过程。矿工（Dutta＆Saini，2021b）负责验证和确认交易，并将这些交易添加到区块中。在挖矿过程中生成了用于工作证明的摘要。
- en: '| Figure 17\. SHA 256 hash |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 图 17。SHA 256哈希 |'
- en: '| ![Figure978-1-7998-8367-8.ch006.f17](i/ch006.f17.png) |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-8367-8.ch006.f17](i/ch006.f17.png) |'
- en: SHA 256 is a hash function which can take any inputs and produces a 256 bits
    output. If there is integrity of the data. This function takes message and produces
    hexadecimal digest output. One can develop own mining function like generate a
    hash of a message which can start with two “1s”. The difficulty level specification
    relies on the number of “1s”. If the difficulty level is 3 then the prefix of
    “1s” will be three e.g. “111”, while if the difficult level is 2 then the prefix
    of “1s” will any change in the input, the output will change. This is also a one
    way process because one cannot generate the input from the output. SHA 256 is
    best suited for checking the two e.g. “11”. In this example, difficulty level
    of 2 is specified which means the prefix should have two “1s”.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: SHA 256是一种哈希函数，可以接受任何输入并产生256位输出。如果数据完整性。此函数接受消息并生成十六进制摘要输出。可以开发自己的挖矿函数，例如生成以两个“1s”开头的消息的哈希。难度级别规范依赖于“1s”的数量。如果难度级别为3，则“1s”的前缀将是三个，例如“111”，而如果难度级别为2，则“1s”的前缀将在输入中发生任何变化时，输出也会发生变化。这也是一个单向过程，因为无法从输出生成输入。SHA
    256最适合检查两个，例如“11”。在此示例中，指定了难度级别为2，这意味着前缀应具有两个“1s”。
- en: '| Figure 18\. Mining function |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| 图 18。挖矿功能 |'
- en: '| ![Figure978-1-7998-8367-8.ch006.f18](i/ch006.f18.png) |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-8367-8.ch006.f18](i/ch006.f18.png) |'
- en: Here the message and the difficulty levels are two parameters for mining and
    the difficulty level is greater than and equal to “2”. The variable “j” is added
    with new numbers and added to the message and the digest value changes. If the
    digest value condition is satisfied, the loop will end returning the digest value.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，消息和难度级别是挖矿的两个参数，难度级别大于等于“2”。变量“j”与新数字相加，并添加到消息中，摘要值发生变化。如果满足摘要值条件，则循环将结束并返回摘要值。
- en: SCOPE
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 范围
- en: Here in this chapter, an introductory overview of blockchain is covered using
    python code. This chapter will give you a basic understanding of using python
    codes in further development of a blockchain project. The chapter throws light
    on basic blockchain creation using python codes and will help you in developing
    advance blockchain development. You can add various other functions and methods
    to enhance the blockchain in terms of security. Using advanced level of python
    you can create better mining algorithms, better queue management, enhanced and
    secured transactions, consensus algorithm, wallets and accounts. This chapter
    doesn’t include interface for clients, server implementation, mining interface,
    rewards distribution and other enhanced features to run a blockchain project and
    is beyond the scope of this chapter.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章节介绍了使用 Python 代码的区块链初步概述。本章将为您提供对在区块链项目进一步开发中使用 Python 代码的基本理解。本章介绍了使用 Python
    代码创建基本区块链，并将帮助您开发高级区块链项目。您可以添加各种其他功能和方法来增强区块链的安全性。使用 Python 的高级水平，您可以创建更好的挖矿算法，更好的队列管理，增强和安全的交易，共识算法，钱包和账户。本章不包括客户端界面，服务器实现，挖矿界面，奖励分配以及运行区块链项目所需的其他增强功能，超出了本章的范围。
- en: ACKNOWLEDGMENT
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 致谢
- en: The success and final outcome of this chapter required a lot of guidance and
    assistance from many people and I am extremely privileged to have got this. All
    that I have done is only due to such supervision and assistance and I am extremely
    thankful to them.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章节的成功和最终结果需要许多人的指导和帮助，我非常荣幸能够得到这些帮助。我所做的一切都是由于这样的监督和帮助，我对他们非常感谢。
- en: REFERENCES
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: 6Dutta & Saini. (2019). Evolution of Blockchain Technology in Business Applications.
    Journal of Emerging Technologies and Innovative Research, 6(9), 240-244.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：6Dutta＆Saini。 （2019年）。 区块链技术在商业应用中的演变。《新兴技术和创新研究杂志》，6（9），240-244。
- en: '7Dutta, S., & Saini, K. (2021a). Securing Data: A Study on Different Transform
    Domain Techniques. WSEAS Transactions on Systems And Control, 16. 10.37394/23203.2021.16.8'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：7Dutta，S.，＆Saini，K。 （2021a）。 数据安全：对不同转换域技术的研究。WSEAS系统和控制交易，16。 10.37394 /
    23203.2021.16.8
- en: 8Dutta, S., & Saini, K. (2021b). Statistical Assessment of Hybrid Blockchain
    for SME Sector. WSEAS Transactions on Systems And Control, 16. 10.37394/23203.2021.16.6
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：8Dutta，S.，＆Saini，K。 （2021b）。 中小企业部门混合区块链的统计评估。WSEAS系统和控制交易，16。 10.37394 /
    23203.2021.16.6
- en: 1Jena, Shanmugam, Dhanaraj, & Saini. (2019). Recent Advances and Future Research
    Directions in Edge Cloud Framework. International Journal of Engineering and Advanced
    Technology, 9(2). 10.35940/ijeat.B3090.129219
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：1Jena，Shanmugam，Dhanaraj和Saini。 （2019年）。 边缘云框架的最新进展和未来研究方向。《国际工程与先进技术杂志》，9（2）。
    10.35940 / ijeat.B3090.129219
- en: '2Jena, S. R., Shanmugam, R., Saini, K., & Kumar, S. (2020). Cloud Computing
    Tools: Inside Views and Analysis. International Conference on Smart Sustainable
    Intelligent Computing and Applications under ICITETM2020, 382-391.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：2Jena，S. R.，Shanmugam，R.，Saini，K.，＆Kumar，S。 （2020年）。 云计算工具：内部视图和分析。ICITETM2020下的国际智能可持续计算和应用会议，382-391。
- en: '4Kavita. (2018). A Future’s Dominant Technology Blockchain: Digital Transformation.
    IEEE International Conference on Computing, Power and Communication Technologies
    2018 (GUCON 2018). 10.1109/GUCON.2018.8675075'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：4Kavita。 （2018年）。 未来的主导技术区块链：数字转型。IEEE国际计算，动力和通信技术会议2018年（GUCON 2018）。 10.1109
    / GUCON.2018.8675075
- en: 3Kumari, K., & Saini, K. (2019). CFDD (CounterFeit Drug Detection) using Blockchain
    in the Pharmaceutical Industry. International Journal of Engineering Research
    & Technology, 8(12), 591-594.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：3Kumari，K.，＆Saini，K。 （2019年）。 利用区块链在制药行业中进行假药检测。《国际工程研究与技术杂志》，8（12），591-594。
- en: '5Saini, K., Agarwal, V., Varshney, A., & Gupta, A. (2018). E2EE For Data Security
    For Hybrid Cloud Services: A Novel Approach. IEEE International Conference on
    Advances in Computing, Communication Control and Networking (IEEE ICACCCN 2018).
    10.1109/ICACCCN.2018.8748782'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：5Saini，K.，Agarwal，V.，Varshney，A.，＆Gupta，A。 （2018年）。 混合云服务的端到端加密以实现数据安全性：一种新方法。IEEE国际计算，通信控制和网络会议（IEEE
    ICACCCN 2018）。 10.1109 / ICACCCN.2018.8748782
