- en: '[CHAPTER 13](toc.xhtml#c13)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Lightning Network](toc.xhtml#c13)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned about an important enhancement called **Segregated
    Witness**. The enhancement eliminated the possibility of transaction malleability
    by moving the signature out of transaction ID calculation. This improvement helped
    exchanges and wallets by enhancing their security.
  prefs: []
  type: TYPE_NORMAL
- en: The enhancement also opened the possibility of secure off-chain transaction,
    leading to development of layer two protocols such as **Lightning Network**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the most successful layer two protocol, called
    Lightning Network. Lightning Network is based on the creation of channels by adding
    fund of both parties and performing off-chain transaction. This was first conceptualized
    by *Satoshi Nakamoto* himself. Later in 2015, it was first proposed by *Thaddeus
    Dryja* and *Joseph Poon* in a paper titled **The Bitcoin Lightning Network. The
    paper is available for public at** the **following** weblink:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[https://lightning.network/lightning-network-paper.pdf](https://lightning.network/lightning-network-paper.pdf)**'
  prefs: []
  type: TYPE_NORMAL
- en: A few months after SegWit was activated in October 2017, Lightning Labs launched
    the beta version of Lightning Network in March 2018.
  prefs: []
  type: TYPE_NORMAL
- en: Lightning Network works by routing payments over Lightning node channels. The
    more widespread the network, the better is the user experience. Due to this, its
    growth has been parabolic, slow in the beginning and rapid now. To help the technology
    grow, a pseudonymous Twitter user launched Lightning Torch in January 2019\. It
    was based on the concept of relay race in Olympics. It was quite successful and
    lasted for 4 months, but beyond that, adoption remained slow at the global scale.
  prefs: []
  type: TYPE_NORMAL
- en: Things changed in 2021 because of more than 2 years of work of Bitcoin Beach,
    a surfing community, and Jack Mallers’ launch of strike, a Lightning Network wallet,
    in *El Salvador*. After that, Bitcoin got Legal Tender status with the support
    of *Nayib Bukele*, the president of *El Salvador*. Additionally, Chivo, a Lightning
    Network wallet, was launched by the government, covering whole country of more
    than a million people in *El Salvador*. Since then, Lightning adoption has been
    rapid.
  prefs: []
  type: TYPE_NORMAL
- en: In 2021, Twitter also integrated Lightning payment.
  prefs: []
  type: TYPE_NORMAL
- en: Lightning Network is an essential element to build circular economy based on
    Bitcoin. In this chapter, you will learn what makes Lightning Network so special.
  prefs: []
  type: TYPE_NORMAL
- en: '[Structure](toc.xhtml#s273a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Simplified working of Lightning Network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Payment between connected peers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Payment though multiple channels
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bolt specifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contracts involved in Lightning Network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offline payments between connected peers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Channel creation
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](images/ent.jpg) Instant or turbo channels'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Offline transactions
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Channel closure
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](images/ent.jpg) Mutually agreed close'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](images/ent.jpg) Unilateral close'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](images/ent.jpg) Revoked transaction closure'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Bidirectional dual funded channel
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Channel creation
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Offline payments involving intermediaries
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring of channels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watchtower
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawback of justice transaction
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing mechanism and considerations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trampoline nodes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Channel management
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Circular rebalancing
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Splicing
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightning Loop or submarine swaps
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-Part Payments or MPP
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: End user experience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightning wallets
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightning invoice
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: LNURL
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Merchant integration
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Social media integrations
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adoption by exchanges
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Other cryptocurrencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-chain atomic swap
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Network topology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Objectives](toc.xhtml#s274a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will focus on learning about Lightning Network and touch
    upon its internals a bit. Lightning Network protocol specifications are defined
    as the BOLT specifications. Each BOLT specification defines specific network abstraction.
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin network only contributes to Lightning Network by providing scripting
    opcodes in the same way a computer microprocessor provides machine instructions
    to high-level language compilers. As a result, Lightning Network can add complexity
    without needing changes in the base layer.
  prefs: []
  type: TYPE_NORMAL
- en: Consequently, the development in Lightning Network is quite dynamic, and the
    protocol is evolving rapidly, allowing improvement and extension of use-cases.
    This requires quicker software development and testing cycle, which is different
    from the way Bitcoin development happens.
  prefs: []
  type: TYPE_NORMAL
- en: Since Lightning Network is quite a wide and dynamic topic, there is a possibility
    that by the time the readers will be reading this chapter, there are already quite
    a few changes in the specifications. We will try to cover as much as possible
    within the limits of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[Simplified working of Lightning Network](toc.xhtml#s275a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We discussed Lightning Network in *[Chapter 4, Bitcoin in the Real World](c04.xhtml)*
    under a highlighted section of *Lightning Network*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the summary of what you learned in *[Chapter 4, Bitcoin in
    the Real World](c04.xhtml)*:'
  prefs: []
  type: TYPE_NORMAL
- en: Two parties create a channel by locking their bitcoins.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any party can send bitcoins to the other party if the current balance on their
    side of the channel still has funds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Payment between the parties is peer-to-peer and does not involve the Bitcoin
    network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any party can close the channel anytime by broadcasting the final cumulative
    transaction over the Bitcoin network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the simplest view of Lightning payment between two parties. Since Lightning
    Network is a complex protocol, it is lot more than simple peer to peer payment.
    This time, we are going deeper into the working of protocol.
  prefs: []
  type: TYPE_NORMAL
- en: '[Payment between connected peers](toc.xhtml#s276a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If Amazon had the option to pay with lightning as a buyer or seller, we could
    open a channel and continue making transaction with Amazon till there is balance
    in the channel.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, Alice creates a channel with milk vendor Bob by loading 0.001![](images/Bitcoin.jpg)
    at her side. In this case, Alice uses UTXOs to fund a transaction that is paying
    2-of-2-multisig contract. This transaction needs to pay network fees and be confirmed
    by getting included in the Bitcoin blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the illustration of the creation of a channel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.1:** Creation of channel'
  prefs: []
  type: TYPE_NORMAL
- en: In this, Alice buys milk from Bob every day, and she pays him every day as she
    buys milk.
  prefs: []
  type: TYPE_NORMAL
- en: Consider that she pays 0.0001![](images/Bitcoin.jpg) for 5 days and mutually
    agrees with Bob to close the channel.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following illustration shows the three days of intermediate transactions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.2:** Offline transactions sent each time'
  prefs: []
  type: TYPE_NORMAL
- en: Each new transaction needs to invalidate the previous transaction so that Alice
    cannot publish it and cheat Bob. None of the intermediate transactions sent by
    Alice to Bob gets published.
  prefs: []
  type: TYPE_NORMAL
- en: Alice and Bob mutually agree and publish transactions after 5 days.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the published transaction that closes the channel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.3:** Transaction published on-chain'
  prefs: []
  type: TYPE_NORMAL
- en: The illustration does not include the transaction fees, which is also paid along
    with the output. In the actual closing of the channel, Alice and Bob cooperate
    on network fees they wish to pay, and then the transaction which is the cumulative
    sum of all preceding transactions gets published.
  prefs: []
  type: TYPE_NORMAL
- en: '[Payment though multiple channels](toc.xhtml#s277a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the real-world scenario, each node will have few channels, so it will be
    connected to only a few other nodes. As the network grows, there will be billions
    of nodes. So, for anyone to connect to others, there will be routing like the
    one we have with internet.
  prefs: []
  type: TYPE_NORMAL
- en: This means there are going to be intermediaries that will facilitate payment
    between nodes. Additionally, there will be multiple routes between source and
    destination, and the protocol will need to make smart decision in selecting the
    routing path. The nodes provide better connectivity, and latency and funds will
    be favored by routing algorithms, so the node will try to incentivize this service
    by charging a routing fee.
  prefs: []
  type: TYPE_NORMAL
- en: To make this possible, nodes in Lightning Network can make payment through the
    intermediate nodes, and intermediate nodes can charge fees.
  prefs: []
  type: TYPE_NORMAL
- en: Consider that Alice wants to pay Carol, but she does not have direct channel
    with Carol. However, Alice can pay Bob and Bob can pay Carol. We also need to
    make sure Bob cannot steal the money.
  prefs: []
  type: TYPE_NORMAL
- en: This can work only if Alice and Bob create contract between them such that Bob
    can redeem bitcoins only if he can prove that he has paid Carol. This means first
    Bob pays Carol, and then Bob proves to Alice that he has paid.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this, Carol creates a secret and both Bob and Alice know its hash.
    The contract between Alice and Bob requires secret, which Bob obtains after paying
    to Carol. And Carol can only redeem the bitcoin she is being paid when she reveals
    the secret. This mechanism ensures that no one can cheat the other person.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the illustration of routing of payment from Alice to Carol
    via Bob:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.4:** Payment through intermediaries'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bolt specifications](toc.xhtml#s278a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lightning Network requires nodes to communicate through messages. They need
    to set conditions to manage failures and attacks, discover each other and remain
    anonymous, and also pass receipts.
  prefs: []
  type: TYPE_NORMAL
- en: Since Lightning Network is open and decentralized, the software implementation
    needs specifications. Bolt is the set of specifications that Lightning Network
    Software follows so that a node using one Lightning Network software can interact
    with nodes running different Lightning Network software.
  prefs: []
  type: TYPE_NORMAL
- en: Bolt stands for ***Basis of Lightning Technology***.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the active list of Bolt specification:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Bolt Specification Number** | **Information** |'
  prefs: []
  type: TYPE_TB
- en: '| Bolt 1 | Base Layer |'
  prefs: []
  type: TYPE_TB
- en: '| Bolt 2 | Peer Protocol for Channel Management |'
  prefs: []
  type: TYPE_TB
- en: '| Bolt 3 | Bitcoin Transaction and Script Formats |'
  prefs: []
  type: TYPE_TB
- en: '| Bolt 4 | Onion Routing Protocol |'
  prefs: []
  type: TYPE_TB
- en: '| Bolt 5 | Recommendations for On-chain Transaction Handling |'
  prefs: []
  type: TYPE_TB
- en: '| Bolt 7 | P2P Node and Channel Discovery |'
  prefs: []
  type: TYPE_TB
- en: '| Bolt 8 | Encrypted and Authenticated Transport |'
  prefs: []
  type: TYPE_TB
- en: '| Bolt 9 | Assigned Feature Flags |'
  prefs: []
  type: TYPE_TB
- en: '| Bolt 10 | DNS Bootstrap and Assisted Node Location |'
  prefs: []
  type: TYPE_TB
- en: '| Bolt 11 | Invoice Protocol for Lightning Payments |'
  prefs: []
  type: TYPE_TB
- en: '**Table 13.1:** Bolt specifications'
  prefs: []
  type: TYPE_NORMAL
- en: Bolt 6 was removed and replaced by Bolt 7.
  prefs: []
  type: TYPE_NORMAL
- en: '[Contracts involved in Lightning Network](toc.xhtml#s279a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, you learned the basic working of Lightning Network.
    Now, we will look at the actual contract and the way in which different situations
    are handled.
  prefs: []
  type: TYPE_NORMAL
- en: '[Offline payments between connected peers](toc.xhtml#s280a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we will look at the condition when payment happens on a single channel
    between connected peers. We look at actual contracts involved in the creation
    of channel, structure of offline transactions, and the different ways by which
    a channel can be closed and funds settled on-chain.
  prefs: []
  type: TYPE_NORMAL
- en: We will also understand how fees is paid at the time of channel creation and
    channel closure, and how each off-chain transaction takes this into consideration.
    We will also understand how the protocol handles cheating through contract.
  prefs: []
  type: TYPE_NORMAL
- en: '[Channel creation](toc.xhtml#s281a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Alice is a client of Bob and wants to create channel with Bob so that she can
    continue paying Bob and pay little fees. As Alice is the client, and she is the
    one who is going to pay, and Bob is always going to receive bitcoins. The channel
    is created such that only Alice has balance at her side of the channel.
  prefs: []
  type: TYPE_NORMAL
- en: Once the channel is created and intermediate off-chain transaction happens,
    anyone should be able to close the channel unilaterally. Closing a channel requires
    network fees to be paid so that at the time of opening a channel, network fee
    needs to be negotiated.
  prefs: []
  type: TYPE_NORMAL
- en: The nodes communicate by interchanging defined message formats. The message
    format is defined in Bolt 2 specification. This facilitates network fee negotiation,
    channel establishments, etc.
  prefs: []
  type: TYPE_NORMAL
- en: The contract value is defined as sum of fund locked in channel and network fee.
    The sum locked in channel is only used for transferring value from Alice to Bob.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the illustration of contract value and its composition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.5:** Contract value compositions'
  prefs: []
  type: TYPE_NORMAL
- en: 'Initially, the fund locked in channel is fully on Alice’s side as she funded
    the 2-of-2-multisig contract between Alice and Bob. This is represented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.6:** Payment channel'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the funding transaction that goes into Bitcoin blockchain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.7:** Funding transaction'
  prefs: []
  type: TYPE_NORMAL
- en: Instant or turbo channels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Lightning Network, it is expected that fully funded channel will be on chain
    before off-chain transactions may happen. However, channel mostly gets opened
    at the time of payment, and to wait for half an hour may lead to bad customer
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: We saw that when the transaction malleability bug was fixed by segregated witness
    softfork, unconfirmed transaction became quite reliable. There is still a risk
    of 0-confirmation attack, in which attacker can publish two transactions simultaneously.
    As most channels do not hold large value on a single channel, relying on an unconfirmed
    channel is a fair tradeoff between security and customer experience.
  prefs: []
  type: TYPE_NORMAL
- en: Not waiting for funding transaction confirmation has one important advantage.
    A low network fee can be paid. Just by waiting for a few hours for confirmation
    can significantly reduce fees.
  prefs: []
  type: TYPE_NORMAL
- en: '[Offline transactions](toc.xhtml#s282a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the funds are locked in 2-of-2-multisig contract, Alice can pay Bob if
    there is balance at the Alice’s side of the channel.
  prefs: []
  type: TYPE_NORMAL
- en: However, Alice can publish an older transaction that gives greater value to
    her. To protect Bob from getting cheated by Alice, all the older transactions
    need to be invalidated before performing the next transaction.
  prefs: []
  type: TYPE_NORMAL
- en: To invalidate the latest transaction, Alice needs to provide revocation key
    to Bob before she can make the next transaction. The revocation key gives Bob
    the power to claim all the funds locked in the channel before Alice could take
    away her claim of funds. To avoid Alice from taking away her share, the new contract
    doesn’t allow Alice to take away her share of funds before a specific duration
    of time has lapsed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the first two commitment transactions, including revocation
    for initial commitment transaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.8:** Commitment transactions and revocation key sharing'
  prefs: []
  type: TYPE_NORMAL
- en: Here, we are only protecting only Bob from being cheated by Alice because Alice
    cannot be cheated by Bob. If Alice and Bob had bidirectional payment channel,
    there would be different commitment transaction for Bob and Alice, and revocation
    would also be shared both ways.
  prefs: []
  type: TYPE_NORMAL
- en: In the commitment transaction, we can observe that if Alice tries to cheat Bob,
    then he can use the revocation key to claim Alice’s share of the funds immediately.
  prefs: []
  type: TYPE_NORMAL
- en: '[Channel closure](toc.xhtml#s283a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three ways to close a channel:'
  prefs: []
  type: TYPE_NORMAL
- en: A channel can be closed by mutual coordination between parties. This way, the
    fees can be renegotiated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A channel can be closed unilaterally. This means any one of the parties can
    publish their last transaction.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One party can cheat the other party by publishing the older state of a transaction.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Bolt 2 specification also details closing of channels.
  prefs: []
  type: TYPE_NORMAL
- en: Mutually agreed close
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the case of mutually negotiated closing, Alice and Bob send protocol messages
    to decide on fees and then recreate and sign the last transaction. Alice and Bob
    then publish the transaction on the Bitcoin blockchain. Unlike unilateral close,
    the mutually coordinated closure transaction does not have any relative time lock,
    so Alice gets her funds immediately by paying lower fees.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the illustration of mutually negotiated final transaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.9:** Mutually negotiated channel closure'
  prefs: []
  type: TYPE_NORMAL
- en: Unilateral close
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the case of unilateral close, the last transaction is published, and Bob
    can take his funds immediately, while Alice must wait till the relative time lock
    expires.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the illustration of unilateral close:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.10:** Unilateral channel closure'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, revocation key was never shared. So, Bob cannot take out his funds,
    but Alice must wait till the relative time lock expires to claim her share.
  prefs: []
  type: TYPE_NORMAL
- en: Revoked transaction closure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If Alice publishes an old transaction that is already revoked, then Bob can
    create a transaction to claim all of Alice’s funds.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the transaction published by Alice:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.11:** Revoked transaction published by Alice'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bob then creates another transaction to punish Alice using his revocation key.
    This transaction is called **j*****ustice*** **t*****ransaction***. Here’s the
    illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.12:** Justice transaction published by Bob'
  prefs: []
  type: TYPE_NORMAL
- en: 'If Bob has lost the revocation key, then Alice can move the locked funds to
    her address after 1 day has passed. Here’s the illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.13:** Alice moves funds to her address after 1 day'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bidirectional dual-funded channel](toc.xhtml#s284a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The case we discussed in the previous sections only involved unidirectional
    payment. Many times, payments between peers can be bidirectional. In this case,
    the new channel is created by using funds from both Alice and Bob.
  prefs: []
  type: TYPE_NORMAL
- en: '[Channel creation](toc.xhtml#s285a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is the illustration of a dual-funded channel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.14:** Funding transaction for dual-funded channel'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, at the time of payments between Alice and Bob, both create a transaction
    and send it to the other party, and to revoke the transaction, both parties transfer
    the revocation key to their counterpart. This happens at every instance, irrespective
    of who pays to whom.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be understood with the help of the following illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.15:** Commitment transactions and revocation sequence'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding transaction, Alice needs to send 10 m![](images/Bitcoin.jpg)
    to Bob to buy coffee. As Bob is the receiver in the previous transaction, Alice
    will be having more funds than Bob. So, Alice can cheat Bob by posting the previous
    transaction. To avoid the risk of getting cheated, Bob needs to get a signed transaction
    from Alice for the coffee, and only then he can revoke his previous transaction
    and sign Alice’s transaction.
  prefs: []
  type: TYPE_NORMAL
- en: This allows Alice and Bob to have bidirectional channel funded by both parties.
    Closing of the channel remains the same as we learned in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: '[Offline payments involving intermediaries](toc.xhtml#s286a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this case, Alice wants to pay Carol 10mB, but she only has a channel with
    Bob, and Bob has a channel with Carol. Bob charges fees to forward the transaction
    through his node, and Alice needs to pay to Bob this fee because she is paying
    Carol. In Lightning Network payment, it is expected that the sender will pay for
    the fees.
  prefs: []
  type: TYPE_NORMAL
- en: Bob uses Lightning Network protocol messages to inform Alice about the fee she
    needs to pay.
  prefs: []
  type: TYPE_NORMAL
- en: As we learned in one of the previous topics, Carol needs to generate a secret
    and give hash of its secret. Carol only needs to share hash of secret with Alice,
    and when Alice and Bob create contract, Bob gets to know the hash of secret, which
    he can use to create contract with Carol or another intermediary.
  prefs: []
  type: TYPE_NORMAL
- en: When Carol reveals the secret to Bob, Carol can claim her funds. This allows
    Bob to know the secret, which he reveals to Alice to claim his funds. Since Bob
    can only reveal secret to Alice, when Carol has revealed secret to Bob, the timeout
    in transaction between Bob and Carol needs to be less than transaction between
    Alice and Bob.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this, offline transactions have ***Hash Time Locked Contract*** (**HTLC**).
    HTLC is a class of contract that requires either hash condition or time condition
    to be met; otherwise, the locked funds can be forfeited. HTLC is the additional
    output in offline transactions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the illustration of transactions held at each end for channels:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.16:** Contract exchange for offline transactions through intermediaries'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding transaction, we can see that in the HTLC output, if secret
    is not revealed and revocation key is not used, then Alice can take back her funds
    in the channel with Bob 14 days after 1,000 blocks are mined, and Bob can take
    his funds in the channel with Carol 13 days after 1,000 blocks are mined.
  prefs: []
  type: TYPE_NORMAL
- en: HTLC is a separate output, so it adds to the cost of transaction and mostly
    carries small value. This means when this transaction is published, the UTXO value
    of the HTLC may make it less usable. To avoid HTLC in final transaction, after
    Bob gets the secret from Carol and he verifies it, a new transaction is created
    by removing HTLC output and merging it with the receiver output.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the sequence diagram of secret and hash sharing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.17:** Sequence diagram of payment through intermediaries'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following illustration, the new modified transaction after secret is
    shared with Bob by Carol:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.18:** Removal of HTLC output after secret is known by Bob'
  prefs: []
  type: TYPE_NORMAL
- en: After this, Bob shares secret with Alice, and both agree to remove HTLC from
    transaction.
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.19:** Removal of HTLC output after secret is known by Alice'
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the preceding updated transaction eliminates the need for settlement
    of transactions.
  prefs: []
  type: TYPE_NORMAL
- en: '[Monitoring of channels](toc.xhtml#s287a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lightning Network has one drawback: nodes need to be online all the time to
    monitor their channels; otherwise, a peer will have a window of opportunity to
    breach channel. This is because if a channel breach happens and the affected peer
    is offline, then it will not know that the breach has happened, and the attacker
    will successfully steal the funds. However, if the victim of channel breach was
    online, it would know that the breach has occurred, and it would have punished
    the attacker by publishing the required justice transaction.'
  prefs: []
  type: TYPE_NORMAL
- en: But in a real-world scenario, the nodes can go offline because of several reasons
    like hurricane, internet connection disruption, fire or electric short circuit,
    or simply because of switching off the power supply by mistake.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this, Lightning Nodes can pay nodes that can monitor its channels.
    These monitoring nodes are called **Watchtowers**.
  prefs: []
  type: TYPE_NORMAL
- en: '[Watchtower](toc.xhtml#s288a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Watchtower is a Lightning Network node that maintains state of channels for
    its client and can publish punishment or justice transaction against channel breaches
    if its client is offline.
  prefs: []
  type: TYPE_NORMAL
- en: Watchtower is supposed to always be online and monitor blockchain all the time.
    The client of watchtower needs to update the watchtower every time a new transaction
    is made by its client or revocation key is shared by its client.
  prefs: []
  type: TYPE_NORMAL
- en: 'The working of watchtower can be understood with the help of the following
    sequence diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.20:** Functioning of watchtower'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding sequence diagram, we can see that the client of watchtower
    keeps the watchtower server updated about the changes in state of all its channels.
    So, in the event of channel breach, the watchtower publishes the justice transaction,
    and the client can claim the punishment transaction.
  prefs: []
  type: TYPE_NORMAL
- en: '[Drawback of justice transaction](toc.xhtml#s289a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have learned, the Lightning Network provides a mechanism to punish a
    node that tries to breach a channel by publishing a non-recent transaction. This
    punishment mechanism is called ***LN-penalty*** and is done by publishing a justice
    transaction. This sounds like a great idea, but in reality, most nodes that get
    punished are not cheating. Most breaches happen because a node did not maintain
    the latest transaction.
  prefs: []
  type: TYPE_NORMAL
- en: It is not right to punish a node for its mistake, so a different mechanism is
    being researched, called ***Eltoo.*** Eltoo might be a future enhancement in Lightning
    Network. It will depend on a new hash-type called `**SIGHASH_ANYPREVOUT**`. Until
    `**SIGHASH_ANYPREVOUT**` does not get added to Bitcoin script, Eltoo cannot be
    implemented. Bitcoin has very stringent enhancement mechanism where most stakeholders
    need to agree on a new enhancements and especially its large developer community
    which means if `**SIGHASH_ANYPREVOUT**` has unacceptable risks it may never get
    accepted. Or a different enhancement may solve this problem. Till that time, we
    need to live with the drawback and take enough precautions to not lose funds.
  prefs: []
  type: TYPE_NORMAL
- en: '[Routing mechanism and considerations](toc.xhtml#s290a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Alice wants to pay Dave, she will need to find route to Dave in such a
    way that paying side of each channel in the route has enough funds so that the
    payment is successful. This is called ***source-routing***. As Alice’s node tries
    to find route to Dave, it looks for channel capacity, which is the combined value
    locked in the channel. Sometimes channel capacity is high enough, but the sending
    end of the channel does not have enough funds; this may lead to failure to process.
  prefs: []
  type: TYPE_NORMAL
- en: This information needs to be collected so that the channel can be avoided the
    next time a similar payment requirement arises. Additionally, nodes and channels
    can be rated based on past breaches.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the considerations that need to be made while finding the
    route to the target receiver:'
  prefs: []
  type: TYPE_NORMAL
- en: Channel capacity is high enough
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Past failures due to the lack of paying side funds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Past channel breaches by nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fee charged by node to forward payment request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Trampoline nodes](toc.xhtml#s291a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the challenges nodes face is finding a route that is cheap and holds
    enough capacity at each channel. This requires constant update of network topology.
    This is fine till the network is not big, but as we are seeing a rapid rise in
    adoption, this is becoming a problem.
  prefs: []
  type: TYPE_NORMAL
- en: Trampoline nodes are special nodes in Lightning Networks that have the sole
    responsibility of maintaining the current network topology by updating it frequently.
    So, a node needs to maintain partial network topology only to connect to trampoline
    nodes or to all nearby nodes.
  prefs: []
  type: TYPE_NORMAL
- en: A trampoline node maintains information about all the nodes in Lightning Network
    and may depend on other Trampoline nodes to extend routing beyond its subnet.
    This way, no node needs to maintain information about the whole network.
  prefs: []
  type: TYPE_NORMAL
- en: Trampoline nodes allow non-custodial mobile wallets to instantly send Lighting
    payments across the globe, without the need for large memory and processing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Payment routing using trampoline node is illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.21:** Sending node taking help of trampoline node to find a route
    to receiving node'
  prefs: []
  type: TYPE_NORMAL
- en: '[Channel management](toc.xhtml#s292a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A channel can be created only to serve requests between peers and is mostly
    hidden from the rest of the network. These are called **private channels**. On
    the other hand, a channel can also be public and can be used by other nodes to
    make routing connections with the rest of the network.
  prefs: []
  type: TYPE_NORMAL
- en: For a public channel, it is important that funds at both ends are balanced so
    that routing does not fail because of a lack of funds at the paying side. This
    requires active channel management and collaboration with peers. There are multiple
    ways to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: '[Circular rebalancing](toc.xhtml#s293a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One way to rebalance a channel is to pay to ourselves from one of our other
    channels.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be understood with the help of the following illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.22:** Circular rebalancing mechanism'
  prefs: []
  type: TYPE_NORMAL
- en: Circular rebalancing is cheap as only off-chain transactions happen, but it
    requires at least one channel to be loaded at the opposite side.
  prefs: []
  type: TYPE_NORMAL
- en: '[Splicing](toc.xhtml#s294a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Circular rebalancing is the preferred rebalancing method, but it is not useful
    for merchants because merchants might be only receiving and not sending and so,
    may not have any channel to move funds to other channels.
  prefs: []
  type: TYPE_NORMAL
- en: Splicing allows change in channel capacity without the need to close or reopen
    a channel. Splicing requires modification of funding transaction while accepting
    all the incoming payment requests. This makes it quite complex to implement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Splice-in means increasing the capacity of a channel. The following is splice-in
    in a nutshell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.23:** Splice-in in a nutshell'
  prefs: []
  type: TYPE_NORMAL
- en: 'Splice-out means reducing the capacity of a channel. The following illustration
    is splice-out in a nutshell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.24:** Splice-out in a nutshell'
  prefs: []
  type: TYPE_NORMAL
- en: This is only simplified representation of splice-in and splice-out. In-reality,
    the implementation will be more complex.
  prefs: []
  type: TYPE_NORMAL
- en: '[Lightning Loop or submarine swaps](toc.xhtml#s295a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Submarine swap, also called Lightning Loop, is another way to manage channels
    by moving funds in and out of a channel. Lightning Loop is based on the principle
    that HTLC can work on both on-chain and off-chain, and so, a swap provider can
    help move funds between off-chain and on-chain in a trustless manner.
  prefs: []
  type: TYPE_NORMAL
- en: Lightning Loop is another way a merchant can move funds to the other side of
    a channel without the complexity of splicing.
  prefs: []
  type: TYPE_NORMAL
- en: To move funds out of channel, a node sends funds through the channel through
    multiple hops to swap provider, which sends funds back to the node on chain, in
    effect, removing the funds from chain.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be understood with the help of the following illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.25:** Moving funds from channel to on-chain using Submarine Swap'
  prefs: []
  type: TYPE_NORMAL
- en: The same method can be used to add funds from on chain using swap provider by
    carrying out the preceding process in the reverse direction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the illustration of using Lightning Loop to move funds to my side of
    the channel from on-chain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.26:** Moving funds from on-chain to channel using Submarine Swap'
  prefs: []
  type: TYPE_NORMAL
- en: '[Multi-Part Payments or MPP](toc.xhtml#s296a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lightning Network is not suitable for transferring large value over channel
    network. This because to transfer value over channel network, only the channels
    that have sufficient balance at the sender’s side can be selected, and channels
    with large capacity are rare. So, it is difficult to build a route between sender
    and receiver if large value needs to be transferred. To overcome this problem,
    Lightning Network software sometimes splits value over multiple channels and finds
    separate routes for each split value. This is called ***Multi-Part Payments***.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be understood with the help of the following illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.27:** Multi-part payment'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding diagram, Alice wants to send 100 m![](images/Bitcoin.jpg) to
    Bob, but there is no route to transfer it. To achieve this, Alice breaks the amount
    into 20 m![](images/Bitcoin.jpg), 30 m![](images/Bitcoin.jpg)`,` and 50 m![](images/Bitcoin.jpg)
    and then sends it through different routes. This way, Bob can receive 100 m![](images/Bitcoin.jpg)
    offline without the need to perform on-chain transactions.
  prefs: []
  type: TYPE_NORMAL
- en: '[End user experience](toc.xhtml#s297a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we use Lightning Network to pay for a service, we need to create a channel
    to pay the peer as many times as we want till there is balance on the payee side
    of channel.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make a payment or receive payments, we need to establish channel between
    our node and a few other nodes in the network. This requires channel management
    and may involve the following activities:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a channel with funds on our side, at the peer side, or at both ends.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create turbo channels or wait for 3-6 confirmations before accepting or sending
    payments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Actively balance channels so that payments can be sent as well as received.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep network topology up-to-date or use trampoline nodes to find the best routes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use watchtower service to avoid being cheated by peers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mutually or unilaterally close channels and monitor Bitcoin blockchain for a
    channel closure/breach event.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This might look scary, but many Lightning Network wallets take care of all these
    internally, and the user experience is seamless.
  prefs: []
  type: TYPE_NORMAL
- en: '[Lightning wallets](toc.xhtml#s298a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lightning wallets are Bitcoin wallets, which also open and manage channels.
    A wallet may give more control to the user by allowing them to allocate funds
    and manage channels, or it may hide all the complexities from the user, making
    the experience seamless. A wallet may be custodial, in which funds are controlled
    by the wallet and the user only logs in and approves a transaction. On the other
    hand, in a non-custodial wallet, seed and keys for creating the wallet are with
    the user.
  prefs: []
  type: TYPE_NORMAL
- en: As Lightning wallets are creating and managing channels, they are also called
    **Lightning Nodes**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the popular Lightning wallets:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Zap wallet, Muun wallet, Bluewallet, Breez wallet, Wallet of Satoshi, Bitcoin
    Lightning Wallet (BLW), Éclair Mobile, etc.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Lightning invoice](toc.xhtml#s299a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have learnt that when Alice purchases coffee from Bob, Bob generates secret
    hash so that Alice can make the payment. To achieve this, Bolt 11 explains the
    structure of the message that Bob needs to share with Alice, and it is called
    Lightning invoice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we have generated a lightning invoice from a merchant application and
    used an open-source application to decode it. Here’s a screenshot of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.28:** Lightning invoice information'
  prefs: []
  type: TYPE_NORMAL
- en: We can see all the information it contains, and it will help Alice to create
    a transaction and send it to a channel through which the payment will get routed
    and reach Bob.
  prefs: []
  type: TYPE_NORMAL
- en: The requested string is just the QR code that Bob shares with Alice. So, Alice
    goes to Bob’s coffee shop. Bob requests payment by showing the QR code in his
    mobile phone wallet. Alice scans the QR code from her mobile wallet and makes
    the payment. This happens in a minute.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the illustration of Lightning Network payment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.29:** Lightning network payment'
  prefs: []
  type: TYPE_NORMAL
- en: '[LNURL](toc.xhtml#s300a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: LNURL is a third layer over Lightning Network. It goes a step further and allows
    you to use Lightning Network to create a channel, make and receive payments, and
    even use it for authentication in a website.
  prefs: []
  type: TYPE_NORMAL
- en: LNURL pay links are reusable, so it does not require rescanning of invoice on
    every purchase. LNURL involves a server, and when the QR code is scanned, the
    scanning application contacts the LNURL server to perform the required service.
    This way, the sending of invoice happens without user interaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'This allows to use Lightning Network for not just payments but also authentication.
    LNURL is used to implement a few other services, which are specified in the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[https://github.com/fiatjaf/lnurl-rfc](https://github.com/fiatjaf/lnurl-rfc)**'
  prefs: []
  type: TYPE_NORMAL
- en: LNURL Auth is one such service enabled by LNURL that allows you to log in to
    a website using Lightning wallet.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the following website to demonstrate LNURL Auth:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[https://lightninglogin.live/login](https://lightninglogin.live/login)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the LNURL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.30:** LNURL Auth for login to website'
  prefs: []
  type: TYPE_NORMAL
- en: 'This decodes to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: lightNING:LNURL1DP68GURN8GHJ7MRFVA58GMNFDENKCMM8D9HZUMRFWEJJ7MR0VA5KU0MTXY7N2WTRX4JNYENXVVMXZVTZV43RWCN9XPSKVDECXY6NWEPHXG6KVCNYXEJRXWRPXVUNSVFK893K2CF5XENRXVNRVEJKVCFSVVURYDPCXCN8GCT884KX7EMFDCSMESJ7
  prefs: []
  type: TYPE_NORMAL
- en: 'We used an online application to decode this, and obtained the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[https://lightninglogin.live/login?k1=59c5e2ffc6a1beb7be0af78157d725fbd6d38a398169cea46f32cfefa0c82486&tag=login](https://lightninglogin.live/login?k1=59c5e2ffc6a1beb7be0af78157d725fbd6d38a398169cea46f32cfefa0c82486&tag=login)**'
  prefs: []
  type: TYPE_NORMAL
- en: A wallet that supports LNURL’s authentication service will be able to coordinate
    with the LNURL server to authenticate and log in to the server. A simple scanning
    of the QR code can allow a user to log in to a website, and they will not need
    any traditional methods of login.
  prefs: []
  type: TYPE_NORMAL
- en: '[Merchant integration](toc.xhtml#s301a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lightning Network wallets allow any brick-and-mortar store to simply install
    a mobile wallet and accept payments. For online businesses, the BTCPay server
    provides easy integration of Lightning Wallet with online payment webpage. BTCPay
    is an open-source project. There are others, such as wooCommerce or CoinGate,
    that also provide Lightning Network integration.
  prefs: []
  type: TYPE_NORMAL
- en: '[Social media integrations](toc.xhtml#s302a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Twitter recently integrated with strike wallet. As of now, anyone with a strike
    wallet can receive bitcoins over Lightning Network channels, and anyone with a
    Lightning wallet can send bitcoins. This mean people can collaborate on a global
    scale and get paid for their services. Additionally, social service organizations
    can directly reach out to people working under tyrannical regimes and help them
    by paying bitcoins directly to them.
  prefs: []
  type: TYPE_NORMAL
- en: Telegram also has Lightning Network bot called **LNTXBOT,** which can be used
    to pay or request payments.
  prefs: []
  type: TYPE_NORMAL
- en: '[Adoption by exchanges](toc.xhtml#s303a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some exchanges were quick to adopt Lightning Network. Zebpay, an Indian exchange,
    is one of them. There are many exchanges globally that also support the exchange
    of bitcoins with other currencies or cryptocurrencies using Lightning Network.
    Some of the popular exchanges are Bitfinex, Strike, OKEx, CashApp, Paxful, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: '[Other cryptocurrencies](toc.xhtml#s304a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lightning Network requires certain enhancements such as segregated witness to
    overcome the risk of transaction malleability and so on. There are many cryptocurrencies
    that use almost the same codebase and scripting language as Bitcoin. The enhancements
    that enabled Lightning Network on Bitcoin network may also enable Lightning Network
    on many other cryptocurrencies.
  prefs: []
  type: TYPE_NORMAL
- en: As of now, Litecoin is the only other cryptocurrency that has enabled Lightning
    Network on its network. A few other cryptocurrencies have shown interest, but
    none have added the required support for Lightning till date.
  prefs: []
  type: TYPE_NORMAL
- en: '[Cross-chain atomic swap](toc.xhtml#s305a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You learned how HTLC can be used to swap off-chain balance with on-chain balance
    using Submarine Swaps. Similarly, HTLC can be used to perform cross-chain swaps
    with another cryptocurrency. This has been demonstrated with Litecoin by the Litecoin
    founder Charlie Lee on 16 September, 2017\. A 2-minute demo is available on YouTube
    titled `**Lightning Cross-Blockchain Swap Between Bitcoin and Litecoin**`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**https://www.youtube.com/watch?v=cBVcgzEuJ7Q**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Network topology](toc.xhtml#s306a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lightning Network is still evolving, and the structure of the network may change
    in the future. However, it seems that the overall network is trying to imitate
    postal network where individuals connect to a wallet provider, the wallet maintains
    channels with bigger hops, and bigger hops are connected to a few other similar
    hops to simplify forwarding.
  prefs: []
  type: TYPE_NORMAL
- en: As an end user, we never need to close our channel with the wallet. If we send
    and receive funds, this channel can continue for extended period; thus, the overall
    fee paid is negligible.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the illustration of Lightning Network topology:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-13.31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 13.31:** Lightning network topology'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding figure, we can see that there are thousands of nodes connected
    with channels. These are public channels, so they can be found and used to update
    topology.
  prefs: []
  type: TYPE_NORMAL
- en: '[Conclusion](toc.xhtml#s307a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the Lightning Network protocol, a layer-two
    protocol of Bitcoin. You learned how Bitcoin’s primitive scripting language makes
    reliable instant transaction possible and understood that Lightning Network has
    its open specification and messaging system to allow different software implementations
    to talk to each other.
  prefs: []
  type: TYPE_NORMAL
- en: You also learned about the nodes that help in routing payments or rebalancing
    of channels and about the ecosystem that is being built for and on Lightning Network.
  prefs: []
  type: TYPE_NORMAL
- en: This brings us to the end of the book. The intention of this book is to help
    build developer community for Bitcoin by making the reader aware of internal details
    of Bitcoin protocol, network, blockchain, transactions, enhancements etc. The
    more developer enters the Bitcoin development community the more secure and better
    Bitcoin will become which gives us hope for more decentralized future.
  prefs: []
  type: TYPE_NORMAL
- en: '[Points to remember](toc.xhtml#s308a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lightning Network is layer-two protocol and uses Bitcoin transaction scripting.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows instant offline payment of bitcoins.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To perform offline transactions using Lightning Network, a channel is created
    between the sender and the receiver.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offline transactions can be performed if the required funds are available at
    the sender’s end of channel.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Channels can be unilaterally closed, or a mutual closure can happen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A channel breach is when an attacker closes a channel by publishing an older
    transaction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Victim of a channel breach punishes attacker by publishing justice transaction,
    which contains revocation key provided by the attacker to pay itself the attacker’s
    funds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A unidirectional channel has funds only at the sender’s end when the channel
    is created.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A bidirectional channel has funds locked at both ends of a channel.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A channel is created by locking funds in 2-of-2-multisig.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A payment can be made between two individuals who do not have direct channels
    by routing payments over multiple nodes passing through a sequence of channels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source routing is when the sender communicates with nodes to build network topology
    to find the best route to the destination.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trampoline nodes help the sender find the best route.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trampoline nodes maintain updated network topology, and the sender only needs
    partial topology.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nodes need to remain online all the time; otherwise, a peer can publish an old
    transaction, and the offline node will lose funds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watchtower nodes can serve nodes by monitoring on-chain all the time and publish
    justice transaction if required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nodes can connect to watchtower server and update it regularly about channel
    states and justice transaction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Circular rebalancing is a method in which a node can balance a channel by moving
    funds to its other channel, which is loaded at the peer side.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submarine swaps or Lightning Loop node helps move on-chain funds to nodes at
    the end of channel or vice versa.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Splicing allows you to dynamically add or reduce capacity of a channel without
    bringing a channel offline.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding capacity of channel is called splice-in, and reducing capacity is called
    splice-out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-part payment allows a sender to send large value transactions over Lightning
    Network by splitting the amount into smaller values and sending them over different
    channels and routes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightning Invoice is generated by merchant or receiver and can be in the form
    of QR code. It is used by a sender to make payment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LNURL is a layer-three protocol.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LNURL provides a way to repeatedly make payment using single QR code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With LNURL, one can perform various other tasks like authentication and creation
    of channels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Questions](toc.xhtml#s309a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Explain the difference between the exchange of messages between unidirectional
    and bidirectional channels.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is it important for public routing nodes to keep the channel balanced?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the benefits of using Trampoline nodes over source routing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain the benefits of using MPP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill in the blanks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Capacity of a channel can be increased by channel management technique called
    ___________ .
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Lightning Network can be used for authenticating a site by using LNURL _______
    .
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Lightning Network has been demonstrated to perform _______ ______ of values
    between Bitcoin node and Litecoin node.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True/False:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: LNURL is layer-three protocol because it has its own messaging protocol that
    helps establish and perform Lightning Network operations.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Circular rebalancing is the best suited channel balancing method for merchants
    as they mostly always receive funds.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Turbo channels are without risks, so high-capacity channel can be opened.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Lightning Network usability depends on how well nodes are interconnected, which
    depends on its popularity.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Create lists of custodial and non-custodial wallets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Lightning Network wallet, make a payment, and try to guess the steps
    that have happened in the background.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
