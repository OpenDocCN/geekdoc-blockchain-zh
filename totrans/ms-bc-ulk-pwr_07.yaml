- en: Chapter 7\. Decentralizing Finance and the Web
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。金融和网络的去中心化
- en: The growing popularity of cryptocurrency, blockchain, and smart contracts has
    ushered in a number of new use cases that provide specialized functionality, from
    increased privacy to the creation of a stable payments system to entirely new
    types of blockchain-based applications. This chapter explores the exciting possibilities
    being revealed in the realms of *decentralized finance* (DeFi) and *decentralized
    apps* (dapps).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 加密货币、区块链和智能合约的日益流行引入了许多新的用例，提供了专业功能，从增加隐私到创建稳定支付系统再到全新类型的基于区块链的应用程序。本章探讨了在去中心化金融（DeFi）和去中心化应用程序（dapps）领域中揭示的令人兴奋的可能性。
- en: Redistribution of Trust
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信任的重新分配
- en: Although they are trying to innovate, [banks today are still slow and expensive](https://oreil.ly/G7ixe).
    Sending money across borders takes more than a day. And for those who don’t have
    a bank account, sending money to family or friends living in other countries is
    costly. With a payment layer that uses cryptocurrency, blockchain can remove intermediaries.
    Over time, it may also allow users to own their data instead of that data being
    owned by big technology companies.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它们正在努力创新，[今天的银行仍然缓慢且昂贵](https://oreil.ly/G7ixe)。跨境汇款需要超过一天的时间。对于那些没有银行账户的人来说，向居住在其他国家的家人或朋友汇款是昂贵的。使用加密货币的支付层，区块链可以消除中间商。随着时间的推移，它也可能允许用户拥有自己的数据，而不是被大型技术公司拥有。
- en: Identity and the Dangers of Hacking
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 身份与黑客攻击的危险
- en: 'Why is it important for users to have ownership of their data? Large companies
    in the technology and finance space have not been great stewards of data. They
    have repeatedly been breached, hacked, and otherwise compromised. In many cases
    they have then attempted to downplay or conceal these breaches, though they have
    often been caught (and fined) later. For example:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 用户拥有数据所有权为何如此重要？科技和金融领域的大型公司一直没有很好地管理数据。它们屡次遭受入侵、黑客攻击和其他威胁。在许多情况下，它们随后试图淡化或隐藏这些入侵，尽管它们通常会在之后被发现（并罚款）。例如：
- en: Yahoo! disclosed 3 billion accounts had been compromised in 2013\. It didn’t
    release information regarding the hack until 2017 and eventually reached a settlement
    to pay $117.5 million in compensation.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yahoo!在2013年披露有30亿个账户被入侵。直到2017年才公布了有关入侵的信息，并最终达成了支付1.175亿美元的赔偿协议。
- en: Facebook saw 50 million user accounts compromised in 2018\. The US Federal Trade
    Commission (FTC) fined the company $5 billion for mishandling user data.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Facebook在2018年看到有5千万用户账户被入侵。美国联邦贸易委员会（FTC）对该公司进行了50亿美元的罚款，原因是滥用用户数据。
- en: Equifax disclosed that the personal information of 143 million of its customers
    had been compromised in 2017\. The company reached a deal with regulators to pay
    $700 million in fines and compensation.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Equifax在2017年披露，其1.43亿客户的个人信息已经被入侵。该公司与监管机构达成协议，支付了7亿美元的罚款和赔偿金。
- en: eBay suffered an attack in 2014 that exposed the personal information (including
    passwords) of over 145 million users.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2014年，eBay 遭受了一次攻击，暴露了超过 1.45 亿用户的个人信息（包括密码）。
- en: Uber’s servers were breached in 2016, after two hackers were able to retrieve
    password information from GitHub. The hackers then accessed the personal information
    of 57 million riders and 600,000 drivers. Uber hid the breach for over a year
    and was ultimately fined $148 million.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2016年，Uber 的服务器遭到入侵，两名黑客能够从 GitHub 检索密码信息。然后黑客访问了 5700 万乘客和 60 万司机的个人信息。Uber
    隐瞒了这次入侵一年多，并最终被罚款 1.48 亿美元。
- en: And these are just technology companies. Well-known hacks at Target, Marriott,
    Home Depot, and JPMorgan, among others, have taken user data and put it in the
    hands of those who try to use that information for nefarious purposes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些仅仅是科技公司。在 Target、万豪、Home Depot 和 JPMorgan 等知名公司发生的入侵事件中，用户数据被获取并落入试图利用这些信息进行不良用途的人手中。
- en: Blockchain technology is promising in that it has the ability to disintermediate
    various industries, many perhaps quite quickly. Some experimentation has already
    begun. Industries including technology, finance, jobs, and gaming are ripe for
    disruption. The technical “scaffolding” is being built today for users to have
    more control over their data.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链技术有望使各个行业脱中介而出，许多行业可能很快就会发生变革。一些试验已经开始。包括科技、金融、就业和游戏在内的行业都是易受干扰的。今天正在建立技术“脚手架”，以便用户更多地控制自己的数据。
- en: The ultimate realization of this idea is the concept of self-sovereign identity,
    where individuals generate their own unique identifiers and store and control
    access to their own personal information, using public/private key pairs. The
    idea of an identity that is owned by a user instead of large companies and government
    bureaucracies is something blockchain developers are enthusiastic about, and it
    could remove the danger of future hacks and thefts that put people’s identities
    at risk.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这一思想的最终实现是自主身份的概念，即个体生成自己的独特标识符并存储和控制访问自己的个人信息，使用公钥/私钥对。这种身份的主人是用户而不是大公司和政府官僚是区块链开发者热衷的事情，它可能消除未来入侵和盗窃的危险，从而使人们的身份面临风险。
- en: A central issue will be how to balance complexity with ease of use. Private
    key management and transaction broadcasting may be difficult to teach or too cumbersome
    for mainstream users. However, some early platforms are trying to tackle this
    problem, as you’ll see in this section.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一个核心问题将是如何平衡复杂性和易用性。私钥管理和交易广播可能很难教授，或者对主流用户来说过于繁琐。然而，一些早期平台正在尝试解决这个问题，您将在本节中看到。
- en: Wallets
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 钱包
- en: In order to use a number of DeFi services, users must become familiar with wallets.
    Fortunately, a number of good options are available today. [MetaMask](https://metamask.io)
    is a software wallet that currently works inside the Chrome, Firefox, and Opera
    browsers. It is also available for Brave, a new type of browser discussed later
    in this chapter. Hardware wallets like [Ledger](https://www.ledger.com) are another
    alternative, and [Coinbase](https://www.coinbase.com) also offers support for
    those who don’t want to concern themselves with key storage.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用一系列 DeFi 服务，用户必须熟悉钱包。幸运的是，今天有很多好的选择。[MetaMask](https://metamask.io) 是一个软件钱包，目前可在
    Chrome、Firefox 和 Opera 浏览器中使用。它也适用于 Brave，这是本章后面讨论的一种新型浏览器。像 [Ledger](https://www.ledger.com)
    这样的硬件钱包是另一种选择，[Coinbase](https://www.coinbase.com) 还为那些不想担心密钥存储的人提供支持。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Remember: if you don’t own the keys, you don’t own the asset.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 记住：如果你不拥有密钥，你就不拥有资产。
- en: Private Keys
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 私钥
- en: The MetaMask and Ledger wallets require users to know and carefully store their
    private keys. The loss of a password, or *seed*—a list of words that store all
    the information needed to recover a wallet—can equal the loss of a private key.
    Because of this, new services that help users maintain identity while securing
    private keys are important. Coinbase already does this for cryptocurrency wallets.
    Identification services like [Keybase](https://keybase.io) and [Blockstack](https://www.blockstack.org)
    make it easier for users to maintain private keys for different types of Web 3.0
    services, covered later in this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: MetaMask 和 Ledger 钱包要求用户知道并仔细存储他们的私钥。密码或*种子*的丢失——一组存储了恢复钱包所需的所有信息的单词列表——等同于私钥的丢失。因此，帮助用户在确保私钥安全的同时保持身份的新服务非常重要。Coinbase
    已经为加密货币钱包做到了这一点。像 [Keybase](https://keybase.io) 和 [Blockstack](https://www.blockstack.org)
    这样的身份识别服务使用户更容易为 Web 3.0 服务（本章后面介绍）维护私钥。
- en: Naming Services
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名服务
- en: Public keys are much more difficult to use than email addresses, usernames,
    or other identifiers, yet they are very important to decentralized services. [Figure 7-1](#public_and_private_keys)
    shows [examples](https://oreil.ly/A_JbA) of public and private keys. The QR codes
    are representations of the keys.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 公钥比电子邮件地址、用户名或其他标识符难以使用得多，但它们对于去中心化服务非常重要。[图 7-1](#public_and_private_keys)
    展示了公钥和私钥的[示例](https://oreil.ly/A_JbA)。QR 码是密钥的表示形式。
- en: '![](Images/mabc_0701.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0701.png)'
- en: Figure 7-1\. Public and private keys
  id: totrans-24
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-1\. 公钥和私钥
- en: Naming services allow users to have *names* that are much more easily read and
    typed than complex public keys are. An example is the [Ethereum Naming Service](https://ens.domains),
    which allows people to use a *<username>.eth* naming convention that translates
    to a public key. The drawback is that using these names can allow analytics to
    track transactions on the blockchain, which risks [revealing identity information](https://oreil.ly/htxHK).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 命名服务允许用户使用比复杂的公钥更容易阅读和输入的*名称*。一个例子是[Ethereum命名服务](https://ens.domains)，它允许人们使用*<username>.eth*的命名约定，该约定可以转换为公钥。缺点是使用这些名称可能会让分析人士跟踪区块链上的交易，这会冒着[泄露身份信息的风险](https://oreil.ly/htxHK)。
- en: Decentralizing Finance
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 去中心化金融
- en: The ecosystem of financial services without intermediaries is growing quickly.
    This is a fascinating area of blockchain that is attracting a lot of attention
    from developers, and a number of platforms are now working to provide decentralized
    finance.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 无中介的金融服务生态系统正在迅速增长。这是区块链中一个引人注目的领域，吸引了许多开发者的关注，现在许多平台都在努力提供去中心化金融服务。
- en: DeFi services use smart contracts, cryptocurrency, and blockchain to [replace
    some of the services that banking has traditionally provided](https://oreil.ly/DrR7o).
    [Figure 7-2](#traditional_versus_decentralized_financ) illustrates.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: DeFi服务使用智能合约、加密货币和区块链来[替代传统银行提供的部分服务](https://oreil.ly/DrR7o)。[图7-2](#traditional_versus_decentralized_financ)说明了这一点。
- en: '![](Images/mabc_0702.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0702.png)'
- en: Figure 7-2\. Traditional versus decentralized finance
  id: totrans-30
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7-2。传统与去中心化金融对比
- en: DeFi has a lot of moving parts, many of which rely on Ethereum and ERC-20 assets.
    The flexibility of ERC-20 on Ethereum is what makes DeFi possible, since pools
    of liquidity can be expanded or reduced depending on market conditions.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: DeFi有许多不同的部分，其中许多依赖于以太坊和ERC-20资产。以太坊上ERC-20的灵活性是DeFi可能的原因，因为流动性池可以根据市场条件进行扩展或缩减。
- en: Important Definitions
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重要定义
- en: 'Smart contracts are essential to the DeFi model. Many cryptocurrencies are
    valuable because of the existence of a fixed supply of assets in circulation.
    However, many DeFi tokens have an *elastic* supply to make them inflationary or
    deflationary, depending on the design of the system. This is where some new terminology
    needs to be defined:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约是DeFi模型的重要组成部分。许多加密货币之所以有价值，是因为流通中有一定数量的资产。然而，许多DeFi代币具有*弹性*供应，使它们具有通货膨胀或通货紧缩的特性，这取决于系统的设计。这就是一些新术语需要定义的地方：
- en: Minting
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 铸币
- en: Used to increase a cryptocurrency supply, *minting* involves the creation of
    new assets. This is done with the creation of new blocks as rewards are generated
    for *stakers*, or users who pool assets for incentives. Minting must be properly
    controlled in order to limit inflation via some system of governance. Otherwise,
    the value of a cryptocurrency may fall in relation to other assets, diminishing
    its purchasing power and store of value properties. Minting is *algorithmically
    fixed*, or relegated to authorities within a system.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 用于增加加密货币供应的 *铸币* 涉及创建新资产。这是通过创建新的区块作为 *权益证明者* 或汇集资产以获取激励的用户生成奖励来实现的。必须正确控制铸币以限制通货膨胀，通过某种治理系统。否则，加密货币的价值可能会相对于其他资产下降，降低其购买力和价值储存属性。铸币是
    *算法固定* 的，或者由系统内的权威机构管理。
- en: Burning
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 销毁
- en: Used to decrease a cryptocurrency supply, *burning* involves the destruction
    of assets. This destruction is done by system authorities. By reducing circulation
    and lessening supply, this can cause the price of a cryptocurrency to go up. However,
    the asset could become *deflationary* via this process—while the value goes up,
    prices of other assets may go down. Burning could be a one-time event, or a staggered
    event triggered by revenue/earnings. Burning is also a way to distribute profits
    back to token holders by reducing the supply in hopes demand and prices rise.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 用于减少加密货币供应的 *销毁* 涉及资产的销毁。这一销毁由系统管理机构完成。通过减少流通和减少供应，这可能导致加密货币价格上涨。然而，通过这一过程，资产可能变得
    *紧缩* —— 虽然价值上升，但其他资产的价格可能下降。销毁可能是一次性事件，也可能是由收入/利润触发的分阶段事件。销毁还是通过减少供应将利润分配给代币持有者的一种方式，希望需求和价格上涨。
- en: Wrapped tokens
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 封装代币
- en: The Ethereum platform was not designed with the ERC-20 standard in mind. Neither
    were Bitcoin or any other cryptocurrencies outside of the Ethereum ecosystem.
    Because of users wanting to trade various cryptocurrencies with ERC-20s in smart
    contracts, *wrapped tokens* have become a solution. The original asset is “wrapped,”
    meaning provably held on-chain as collateral. A smart contract facilitates the
    processes of *depositing* (minting) and *withdrawing* (burning) for these ERC-20
    representatives of their external cryptocurrency counterparts. Some level of trust
    is required to assure that the external tokens remain in custody for the holder
    of the wrapped token balance. Typically, a multisignature scheme is implemented
    among disinterested custodians who mutually sign off on withdrawal requests.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊平台并未考虑 ERC-20 标准。比特币或以太坊生态系统之外的任何其他加密货币也不是。由于用户希望在智能合约中与 ERC-20 代币交易各种加密货币，*封装代币*
    成为一种解决方案。原始资产被“封装”，意味着在链上作为抵押品被证明持有。智能合约促进了这些 ERC-20 代币的 *存入*（铸造）和 *取出*（销毁） 过程，代表它们的外部加密货币。需要一定程度的信任来确保外部代币保留在封装代币余额的持有者名下。通常，多签名方案在互不利益关系的托管人之间实施，他们共同签署提款请求。
- en: DAOs
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: DAOs
- en: '*Decentralized autonomous organizations* (DAOs) are projects organized via
    code, mostly through Ethereum smart contracts. Not controlled by a central authority,
    DAOs have token holders to provide governance. Because DAOs utilize blockchain-based
    smart contracts, there are transparent records of transactions and the rules governing
    a DAO. Although their legal and regulatory status isn’t clear, DAOs have already
    been used for finance, gaming, and social media.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*去中心化自治组织*（DAOs）是通过代码组织的项目，主要通过以太坊智能合约进行。DAOs 不受中央机构控制，而是由代币持有者提供治理。由于 DAOs
    利用基于区块链的智能合约，因此存在着交易的透明记录和管理 DAO 的规则。尽管它们的法律和监管地位尚不清楚，但 DAOs 已经被用于金融、游戏和社交媒体。'
- en: Oracles
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Oracles
- en: Because blockchains don’t interface well with data sources, such as relational
    databases, *oracles* are required to provide outside information. Real-world events
    that are recorded in centralized databases are still needed for these systems
    to function, and oracles serve that purpose. Oracles [bring off-chain data on-chain](https://oreil.ly/nRW1o),
    as illustrated in [Figure 7-3](#how_oracles_interact_with_blockchains).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于区块链与诸如关系型数据库等数据源的接口不佳，*Oracles*被要求提供外部信息。中心化数据库中记录的现实世界事件仍然需要这些系统运行，并且 Oracles
    服务于这一目的。Oracles 将[链下数据带到链上](https://oreil.ly/nRW1o)，如[图 7-3](#how_oracles_interact_with_blockchains)所示。
- en: '![](Images/mabc_0703.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0703.png)'
- en: Figure 7-3\. How oracles interact with blockchains
  id: totrans-45
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-3\. Oracles 与区块链的交互方式
- en: Note
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注
- en: Oracles play an important role in the blockchain ecosystem because they provide
    data smart contracts use to execute code. Any wrong or manipulated feed from an
    oracle could trigger a smart contract execution that could mean an irretrievable
    loss of funds. A smart contract might be fully secured and audited, but if the
    oracle is being manipulated, it would also serve as a weak entry point for hackers
    to exploit. This is why trust in an oracle system is paramount.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Oracles 在区块链生态系统中扮演着重要角色，因为它们提供了智能合约用于执行代码的数据。任何来自 Oracle 的错误或篡改的数据都可能触发智能合约执行，这可能导致资金无法挽回的损失。一个智能合约可能是完全安全和经过审计的，但如果
    Oracle 被操纵，它也会成为黑客利用的弱点。这就是为什么对 Oracle 系统的信任至关重要。
- en: Stablecoins
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 稳定币
- en: As blockchain-based assets that peg to the US dollar and other fiat currencies,
    *stablecoins* underpin services that don’t require banking intermediaries. Many
    stablecoins do have some regulatory risk (discussed in [Chapter 6](ch06.xhtml#market_infrastructure)).
    In addition, there are various levels of governance and centralization between
    different projects. Nevertheless, interesting experiments are being done with
    stablecoins. We’ll briefly look at a few of them here.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 作为与美元和其他法定货币挂钩的基于区块链的资产，*稳定币*支撑着不需要银行中介的服务。许多稳定币确实存在一些监管风险（在[第 6 章](ch06.xhtml#market_infrastructure)讨论）。此外，在不同项目之间存在各种各样的治理和中心化级别。尽管如此，人们对稳定币进行了一些有趣的实验。我们将在这里简要介绍其中一些。
- en: DAI
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DAI
- en: In the volatile world of cryptocurrencies, DeFi requires a stable asset in order
    to properly service users. The major stablecoin cryptocurrency used for this today
    is the [Maker project’s DAI](https://makerdao.com/en). DAI, launched in 2018,
    was originally a “single-collateral token” backed by Ethereum’s ETH. Now DAI is
    a *multicollateral token* backed by several cryptocurrencies, including ETH and
    BAT (Basic Attention Token, the Ethereum token that powers the Brave browser)
    and others.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在加密货币的波动世界中，DeFi 需要稳定的资产以正确为用户提供服务。今天用于此目的的主要稳定币加密货币是[Maker 项目的 DAI](https://makerdao.com/en)。DAI
    于 2018 年推出，最初是由以太坊的 ETH 支持的“单一抵押物代币”。现在，DAI 是由几种加密货币支持的*多重抵押物代币*，包括 ETH 和 BAT（Basic
    Attention Token，驱动 Brave 浏览器的以太坊代币）等。
- en: 'However, the cryptocurrencies that back the DAI stablecoin are inherently volatile.
    So how does Maker create a stable asset from volatile markets? By locking in assets.
    Here’s how it works:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，支持 DAI 稳定币的加密货币本质上是波动性很高的。那么 Maker 是如何从波动的市场中创造稳定资产的呢？通过锁定资产。以下是其工作原理：
- en: A user deposits ETH into the Maker smart contract, called a *vault*.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户将 ETH 存入 Maker 的智能合约，称为*保险库*。
- en: Maker then allows the user to withdraw DAI. The amount that can be withdrawn
    must be collateralized 150%. That means a user who deposits $150 worth of ETH
    can withdraw up to $100 worth of DAI. This DAI is backed by the ETH a user deposits.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Maker 然后允许用户提取 DAI。可以提取的金额必须以 150% 的抵押物抵押。这意味着存入 150 美元的 ETH 的用户最多可以提取 100 美元的
    DAI。此 DAI 由用户存入的 ETH 支持。
- en: If ETH begins to drop against the value deposited, in this example below $150,
    the system will begin to close out the position. If, for example, the user only
    withdraws $50 worth of DAI, the system will not close out until ETH drops to $75,
    which is the 150% collateralization threshold. The position will close unless
    the user deposits ETH or DAI to make up for the collateral requirement.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 ETH 开始下跌至存入价值以下，例如在 150 美元以下，在此示例中，系统将开始关闭该仓位。例如，如果用户只提取了价值 50 美元的 DAI，则系统将在
    ETH 下跌至 75 美元时关闭，这是 150% 抵押的阈值。除非用户存入 ETH 或 DAI 来满足抵押要求，否则该仓位将关闭。
- en: A *stability fee* is charged to return DAI in order to retrieve ETH or another
    cryptocurrency used for collateral. Currently the fee is 3%, but it’s subject
    to change. When DAI is returned to the system, it is *burned* or destroyed because
    it is no longer backed by collateral. The stability fee is used by Maker to fund
    the system’s development.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了取回用于抵押的 ETH 或其他加密货币，将收取*稳定费*。目前的费用为 3%，但可能会变化。当 DAI 返回到系统时，它会被*销毁*或销毁，因为它不再由抵押物支持。
    Maker 使用稳定费来资助系统的发展。
- en: Maker is a DAO, and it also offers an investment token, MKR. MKR is the cryptocurrency
    that determines elements inside the MakerDAO system. Those who hold MKR have influence
    over the system. This includes providing input on collateralization requirements,
    stability fees, how the stability fees are spent, and the emergency shutdown protocol
    in the event of a price crash.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Maker 是一个 DAO，它还提供一种投资代币，MKR。MKR 是决定 MakerDAO 系统内部元素的加密货币。持有 MKR 的人可以影响系统。这包括提供对抵押要求、稳定费用、稳定费用的使用方式以及在价格暴跌时的紧急关闭协议等方面的输入。
- en: For every dollar that is paid in stability fees, the equivalent is bought and
    removed from the MKR market. In addition, for liquidations that cannot be rectified
    by a standard collateral auction, a debt auction occurs where the equivalent amount
    of MKR is also bought and removed from the market.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于支付的每一美元稳定费用，相应的金额将被购买并从 MKR 市场中移除。此外，对于无法通过标准抵押品拍卖纠正的清算，将进行债务拍卖，其中也会购买相应数量的
    MKR 并将其从市场中移除。
- en: Because the Maker system is smart contract–based, it does not require users
    to submit personal Know Your Customer (KYC) information to participate. The only
    thing required to interact with it is a private key and access to some ether.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Maker 系统是基于智能合约的，因此不需要用户提交个人的 KYC 信息即可参与。与之互动所需的仅是私钥和一些以太币。
- en: USDC
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: USDC
- en: 'An ERC-20 stablecoin, [USD Coin (USDC)](https://www.centre.io/usdc) is supported
    by two of the largest and best-known companies in cryptocurrency: Coinbase and
    [Circle](https://www.circle.com). USDC is part of a larger consortium called Centre,
    whose members collaborate on the stablecoin’s governance and use cases. Grant
    Thorton, LLP, is the auditor for USDC. The firm provides monthly attestations
    that there are enough reserves to back the USDC stablecoin. The system requires
    users acquiring or redeeming USDC from the issuer to submit personal information
    for KYC checks.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 ERC-20 稳定币，[美元币（USDC）](https://www.centre.io/usdc)受到加密货币领域两家最大和最知名的公司支持：Coinbase
    和 [Circle](https://www.circle.com)。USDC 是一个名为 Centre 的更大联盟的一部分，其成员共同合作管理稳定币的治理和使用案例。Grant
    Thorton, LLP 是 USDC 的审计师。该公司每月提供证明，证明有足够的储备支持 USDC 稳定币。系统要求从发行者获取或赎回 USDC 的用户提交个人信息进行
    KYC 检查。
- en: TrueUSD
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TrueUSD
- en: Backed by a US-based company called TrustToken, [TrueUSD (TUSD)](https://www.trusttoken.com/trueusd)
    is a dollar-based stablecoin that uses the ERC-20 protocol. TrustToken also has
    stablecoins backed by the Canadian dollar, the British pound, the Australian dollar,
    and the Hong Kong dollar. TrustToken uses the auditing firm Cohen & Cohen to provide
    monthly attestations that it has sufficient bank-held reserves to back its crypto
    assets. This system requires users to submit personal KYC information in order
    to acquire or redeem TUSD.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由美国公司 TrustToken 支持，[TrueUSD（TUSD）](https://www.trusttoken.com/trueusd) 是一种使用
    ERC-20 协议的以美元为基础的稳定币。TrustToken 还有以加拿大元、英镑、澳大利亚元和港元支持的稳定币。TrustToken 使用审计公司 Cohen
    & Cohen 提供每月的证明，证明其拥有足够的银行持有的储备来支持其加密资产。这个系统要求用户提交个人 KYC 信息以获取或兑换 TUSD。
- en: KYC and pseudonymity
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: KYC 和匿名性
- en: As mentioned in the previous sections, although DAI does not require KYC information
    from users, TUSD and USDC do. Because of banking relationships, TUSD and USDC
    require users to provide personal information to redeem their stablecoins for
    fiat. However, inside the blockchain ecosystem, the [stablecoins can be used pseudonymously](https://oreil.ly/Cb6zm),
    changing hands while leaving a blockchain record, as [Figure 7-4](#how_stablecoins_can_be_used_pseudonymou)
    illustrates.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的部分所提到的，虽然 DAI 不需要用户提供 KYC 信息，但 TUSD 和 USDC 需要。由于银行关系，TUSD 和 USDC 要求用户提供个人信息以兑换他们的稳定币为法定货币。然而，在区块链生态系统内部，[稳定币可以使用匿名方式](https://oreil.ly/Cb6zm)，在留下区块链记录的同时更换所有权，就像[图
    7-4](#how_stablecoins_can_be_used_pseudonymou) 所示。
- en: '![](Images/mabc_0704.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0704.png)'
- en: Figure 7-4\. How stablecoins can be used pseudonymously
  id: totrans-67
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-4\. 稳定币如何使用匿名方式
- en: Although DAI is the most used stablecoin in DeFi applications, bank-backed solutions
    are competitors. The main difference is that TUSD and USDC are backed by fiat,
    whereas DAI is currently backed by cryptocurrencies.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 DAI 是 DeFi 应用中最常用的稳定币，但银行支持的解决方案也是竞争对手。主要区别在于 TUSD 和 USDC 是由法定货币支持的，而 DAI
    目前是由加密货币支持的。
- en: DeFi Services
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DeFi 服务
- en: With increased stablecoin liquidity, financial services are being built on top
    of crypto. The website [DeFi Pulse](https://defipulse.com) is a good barometer
    for projects that are getting traction. By looking at the number of ETH locked
    up in smart contracts, it’s easy to tell from DeFi Pulse which projects are gaining
    users. This is a good way to see what these services are being used for in this
    nascent market, which is growing every day.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 随着稳定币流动性的增加，金融服务正在加密货币之上构建。网站[DeFi Pulse](https://defipulse.com) 是一个衡量正在获得关注的项目的良好指标。通过查看锁定在智能合约中的
    ETH 数量，从 DeFi Pulse 很容易看出哪些项目正在吸引用户。这是一个了解这个新兴市场中这些服务被用于什么的好方法，这个市场每天都在增长。
- en: Lending
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 借贷
- en: There is a market for users who want to borrow fiat and keep crypto. DeFi loans
    generally have a very specific purpose. Many cryptocurrency holders don’t want
    to sell crypto, whether for speculative reasons, because they believe in the long-term
    value of cryptocurrency, or because they don’t want to pay taxes upon converting
    to fiat. They don’t want to give up their assets, and will pay for the privilege.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有一类用户希望借入法定货币并持有加密货币。DeFi贷款通常有一个非常具体的目的。许多加密货币持有者不想出售加密货币，无论是出于投机的原因，因为他们相信加密货币的长期价值，还是因为他们不想在转换为法定货币时支付税款。他们不想放弃自己的资产，并愿意为此支付费用。
- en: One way to accomplish this is to use a service such as [Compound](https://compound.finance),
    one of the largest decentralized lending platforms today. Compound allows users
    to borrow against cryptocurrency holdings. The amount borrowed is overcollateralized,
    and issued in DAI. This DAI, because it is pegged to the dollar, can be sold on
    the market for fiat or used to invest in other cryptocurrencies.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这一目标的一种方法是使用诸如[Compound](https://compound.finance)之类的服务，这是当今最大的去中心化借贷平台之一。Compound允许用户根据加密货币持有情况借款。借款金额超额抵押，并以DAI发放。由于该DAI与美元挂钩，因此可以在市场上出售成法定货币，或用于投资于其他加密货币。
- en: Savings
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 储蓄
- en: DeFi savings involves users locking cryptocurrency, usually stablecoin, into
    a smart contract. The contract then provides a yield in the native cryptocurrency.
    The concept is similar to staking (discussed in [Chapter 2](ch02.xhtml#cryptocurrency_fundamentals)),
    except there are no transactions being validated as a result of the cryptocurrency
    being locked up in a smart contract.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: DeFi储蓄涉及用户将加密货币，通常是稳定币，锁定到智能合约中。然后，合约以本地加密货币提供收益。这个概念类似于质押（在[第2章](ch02.xhtml#cryptocurrency_fundamentals)讨论），只是在智能合约中锁定加密货币时不会有任何交易被验证。
- en: Maker has [savings rates for DAI](https://oreil.ly/46dpI) locked up in what
    is called a *DAI Savings Rate* (DSR) contract. The interest paid comes from the
    stability fees that vault owners pay to borrow DAI against cryptocurrencies like
    ETH. The rate is variable, determined by the MKR token holders. Unlike when borrowing
    DAI, there is no penalty to take out saved DAI or the interest paid. Compound
    also has a DeFi savings program.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Maker在所谓的*DAI储蓄率*（DSR）合约中锁定的DAI上有[储蓄利率](https://oreil.ly/46dpI)。支付的利息来自存储库所有者支付的稳定费用，以借入ETH等加密货币的DAI。利率是可变的，由MKR代币持有者确定。与借入DAI时不同，取出已存储的DAI或支付的利息没有任何处罚。Compound也有一个DeFi储蓄计划。
- en: Derivatives
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 衍生品
- en: In DeFi, *derivatives* are used as collateral for *synthetic assets*. For example,
    you might use ETH to get an asset like BTC or gold on the ERC-20 network. Exchanges
    are emerging that offer a number of derivative assets, enabling traders to frictionlessly
    move between these assets in ways that were not possible in the past. Previously,
    this would have required access to several different trading markets.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DeFi 中，*衍生品* 被用作 *合成资产* 的抵押品。例如，你可以使用 ETH 来获取像 BTC 或黄金这样的资产，使用的是 ERC-20 网络。出现了一些提供多种衍生资产的交易所，使得交易者可以在这些资产之间无摩擦地转移，这在过去是不可能的。以前，这需要访问几个不同的交易市场。
- en: Tip
  id: totrans-79
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: '[Synthetix](https://oreil.ly/cNgm1) is currently the leading DeFi platform
    for derivative assets. Users must hold SNX tokens, and stake them in order to
    access the derivative assets. Synthetix currently supports ERC-20 versions of
    ETH, BTC, USD, MKR, gold, EUR, and BNB (Binance Coin). The SNX collateralization
    is 750%, which users can maintain by burning or minting SNX tokens.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[Synthetix](https://oreil.ly/cNgm1) 目前是衍生资产领域的领先 DeFi 平台。用户必须持有 SNX 代币，并对其进行质押才能访问衍生资产。Synthetix
    目前支持 ETH、BTC、USD、MKR、黄金、EUR 和 BNB（币安币）的 ERC-20 版本。SNX 的抵押率为 750%，用户可以通过销毁或铸造 SNX
    代币来维持这一抵押率。'
- en: Decentralized Exchanges
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分散式交易所
- en: Most cryptocurrency exchanges are centralized, hosting wallets and taking fees
    for every trade. With smart contracts, developers can build decentralized exchanges,
    also known as *DEXes*. A DEX allows traders to hold their own private keys and
    swap cryptocurrencies (usually in the form of wrapped tokens).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数加密货币交易所是集中式的，托管钱包并针对每笔交易收取费用。通过智能合约，开发者可以构建分散式交易所，也称为 *DEXes*。DEX 允许交易者持有自己的私钥并交换加密货币（通常是包装令牌形式）。
- en: '[Uniswap](https://docs.uniswap.io) is one of the most popular DEXes available
    today. It has many smart contracts that facilitate ETH/ERC-20 exchange. The platform
    charges 0.3% for each trade, which is placed into a liquidity reserve. This reserve
    is used to incentivize liquidity providers to maintain a pool of assets for trading.
    Unlike centralized exchanges that use databases for trading, all trades on DEXes
    like Uniswap occur on-chain, with no middlemen.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[Uniswap](https://docs.uniswap.io) 是当今最流行的 DEXes 之一。它有许多智能合约，促进 ETH/ERC-20
    交易。该平台为每笔交易收取 0.3% 的费用，这笔费用会被放入流动性储备中。这个储备被用来激励流动性提供者维持一个用于交易的资产池。与使用数据库进行交易的中心化交易所不同，DEXes（如
    Uniswap）上的所有交易都发生在链上，没有中间人。'
- en: Decentralized Versus Centralized Exchanges
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分散式与集中式交易所
- en: DEXes are designed to work in a very different way than a centralized exchange.
    The goal of a DEX is that it can provide users with 100% functionality without
    depending on one centralized authority to power any part of the exchange. This
    can lead to a more transparent, secure, and trustworthy service that allows users
    to maintain custody of their funds at all times. The downside of a DEX is that
    its speed and scalability are limited by the blockchain it runs on. This is because
    users maintain custody of funds, which adds complexity to the overall experience.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: DEX 的设计方式与集中式交易所有很大不同。DEX 的目标是，它可以在不依赖任何集中式权威来提供交易所任何部分的功能的情况下为用户提供 100% 的功能。这可能导致更透明、安全和值得信赖的服务，允许用户始终保管自己的资金。DEX
    的缺点是，其速度和可扩展性受到其运行的区块链的限制。这是因为用户保管资金，这增加了整体体验的复杂性。
- en: Infrastructure
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基础设施
- en: In a centralized exchange, all of the infrastructure is controlled by a single
    entity, usually a company, and is delivered to the user through a website. In
    contrast, all parts of the Uniswap DEX are run by the community, as illustrated
    in [Figure 7-5](#high-level_view_of_infrastructure_diffe).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在集中式交易所中，所有的基础设施都由一个单一实体控制，通常是一家公司，并通过一个网站提供给用户。相比之下，Uniswap DEX 的所有部分都由社区运营，如
    [图 7-5](#high-level_view_of_infrastructure_diffe) 所示。
- en: '![](Images/mabc_0705.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0705.png)'
- en: Figure 7-5\. High-level view of infrastructure differences between centralized
    exchanges and DEXes
  id: totrans-89
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-5\. 集中式交易所和 DEX 之间基础设施差异的高层视图
- en: '[Table 7-1](#frontend_differences_between_centralize) compares the frontend
    code for a centralized and decentralized exchange (in this case, Uniswap).'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 7-1](#frontend_differences_between_centralize) 比较了集中式交易所和去中心化交易所（在本例中为 Uniswap）的前端代码。'
- en: Table 7-1\. Frontend differences between centralized exchanges and Uniswap
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7-1\. 集中式交易所和 Uniswap 之间的前端差异
- en: '| **Type** | **Centralized exchange** | **Uniswap** |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| **类型** | **集中式交易所** | **Uniswap** |'
- en: '| --- | --- | --- |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Distribution & transparency | The frontend code is kept private by the exchange
    and runs on infrastructure the exchange controls. | The frontend code is shared
    in the Uniswap GitHub repository. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 分发与透明度 | 前端代码由交易所保密，并在交易所控制的基础设施上运行。 | 前端代码在 Uniswap GitHub 存储库中共享。 |'
- en: '| Control | The frontend runs on infrastructure the exchange and its hosting
    provider control. | Anyone in the community can launch their own website that
    interacts with the Uniswap DEX. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| 控制 | 前端运行在交易所及其托管提供商控制的基础设施上。 | 社区中的任何人都可以启动自己的网站，与 Uniswap DEX 进行交互。 |'
- en: '| Functionality | The frontend receives data from the backend, for example
    to get the exchange rate for the market USD/ETH. The frontend code also sends
    instructions to the backend, for example to execute a trade. | The frontend code
    only receives data from the DEX smart contract. It does not send instructions
    to the backend. Instead, the user sends instructions to the smart contract directly
    from their client device using an Ethereum wallet like MetaMask. The frontend
    code makes this process more user-friendly by setting up the transaction for the
    user. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 功能性 | 前端从后端接收数据，例如获取市场 USD/ETH 的汇率。前端代码还向后端发送指令，例如执行交易。 | 前端代码仅从 DEX 智能合约接收数据。它不向后端发送指令。相反，用户使用像
    MetaMask 这样的以太坊钱包直接从其客户端设备向智能合约发送指令。前端代码通过为用户设置交易使这一过程更加用户友好。 |'
- en: '| Transaction authorization | The transaction authorization is performed in
    the frontend code, usually with a cookie or an access token stored in the browser.
    | The user authorizes the transaction by generating a transaction signature using
    their private key, stored in MetaMask. MetaMask then pushes the transaction to
    the smart contract. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 交易授权 | 交易授权是在前端代码中执行的，通常使用存储在浏览器中的 cookie 或访问令牌。 | 用户通过使用存储在 MetaMask 中的私钥生成交易签名来授权交易。然后，MetaMask
    将交易推送到智能合约。 |'
- en: '[Figure 7-6](#a_user_executing_a_trade_on_uniswap) is a screenshot of a user
    executing a trade on Uniswap. Note that *the transaction authorization occurs
    in MetaMask, not in the frontend code.*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 7-6](#a_user_executing_a_trade_on_uniswap) 是一个用户在 Uniswap 上执行交易的截图。请注意，*交易授权发生在
    MetaMask 中，而不是在前端代码中。*'
- en: '![](Images/mabc_0706.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0706.png)'
- en: Figure 7-6\. A user executing a trade on Uniswap
  id: totrans-100
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-6\. 用户在 Uniswap 上执行交易
- en: '[Table 7-2](#backendsolidusdatabase_differences_betw) outlines the differences
    between a centralized exchange and a DEX with regard to the backend and database.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 7-2](#backendsolidusdatabase_differences_betw) 概述了中心化交易所和 DEX 在后端和数据库方面的差异。'
- en: Table 7-2\. Backend/database differences between centralized exchanges and Uniswap
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7-2\. 中心化交易所和 Uniswap 之间的后端/数据库差异
- en: '| **Type** | **Centralized exchange** | **Uniswap** |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| **类型** | **中心化交易所** | **Uniswap** |'
- en: '| --- | --- | --- |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Distribution & transparency | The backend and database are kept private by
    the exchange. The public is unable to audit the exchange’s code. | The backend
    logic runs in a smart contract. The code in Uniswap smart contracts can be viewed
    publicly, so potential users can audit the code before using the DEX. All Uniswap
    transactions are recorded on the Ethereum blockchain, which is also publicly viewable.
    |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| 分配与透明度 | 交易所保留后端和数据库的私密性。公众无法审计交易所的代码。 | 后端逻辑在智能合约中运行。Uniswap 智能合约中的代码是公开可见的，因此潜在用户可以在使用
    DEX 之前审计代码。所有 Uniswap 交易都记录在以太坊区块链上，也是公开可见的。 |'
- en: '| Control | The backend runs on infrastructure the exchange and its hosting
    provider control. The exchange can make changes to the backend server or database
    at any time.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '| 控制 | 后端运行在交易所及其托管提供商控制的基础设施上。交易所可以随时更改后端服务器或数据库。'
- en: In addition, the exchange or hosting provider can shut down the backend or database
    at any time. | Uniswap smart contracts and transactions are powered by and recorded
    by thousands of miners. The smart contracts and transactions are immutable and
    can never be changed.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，交易所或托管提供商可以随时关闭后端或数据库。| Uniswap 的智能合约和交易由数千名矿工驱动和记录。智能合约和交易是不可变的，永远无法更改。
- en: The only way to shut down the smart contract or stop transactions from completing
    is by shutting down the Ethereum network. |
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭智能合约或停止交易完成的唯一方法是关闭以太坊网络。
- en: '| Authorizing code execution | Before executing any business logic, the backend
    authorizes API requests using security standards like JWT or OAuth. | Smart contract
    code is run on the Ethereum Virtual Machine (EVM). The smart contract runs on
    the node of the miner producing the block and everyone in the network running
    a full node validating the chain. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| 授权代码执行 | 在执行任何业务逻辑之前，后端使用诸如 JWT 或 OAuth 等安全标准授权 API 请求。| 智能合约代码在以太坊虚拟机（EVM）上运行。智能合约在生产区块的矿工节点上运行，并且网络中的每个运行完整节点的人都会验证链。'
- en: '[Figure 7-7](#one_of_uniswapapostrophes_smart_contrac) shows part of the Uniswap
    V1 Exchange Template smart contract, [viewable on the blockchain](https://oreil.ly/T5ruS).'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 7-7](#one_of_uniswapapostrophes_smart_contrac) 展示了 Uniswap V1 交易所模板智能合约的部分内容，[可在区块链上查看](https://oreil.ly/T5ruS)。'
- en: '![](Images/mabc_0707.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0707.png)'
- en: Figure 7-7\. One of Uniswap’s smart contracts, publicly viewable on the Ethereum
    blockchain
  id: totrans-112
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-7。Uniswap 的智能合约之一，可在以太坊区块链上公开查看
- en: Token listing
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代币列表
- en: When the makers of a token want a centralized exchange to list their token,
    there is often a long delay while both parties attempt to negotiate the terms
    of this business transaction. Often, the token company has to pay a listing fee
    and provide legal documents and legal opinions to reduce the exchange’s liability.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当代币的制造者希望中心化交易所列出其代币时，通常会有很长的延迟，双方尝试协商此业务交易的条款。通常，代币公司必须支付上市费用，并提供法律文件和法律意见以减少交易所的责任。
- en: Since a DEX is not controlled by anyone, the makers of a token can list their
    token on their own—no permission required.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 DEX 无需任何人控制，代币的制造者可以自行将其代币列入交易所——无需许可。
- en: If someone wants to list an ERC-20 token on Uniswap, all they have to do is
    call the `createExchange` method in the Uniswap Token Factory smart contract (*0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95*),
    shown in [Figure 7-8](#uniswap_token_factory_method_that_allow).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人想要在 Uniswap 上列出一个 ERC-20 代币，他们只需在 Uniswap 代币工厂智能合约 (*0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95*)
    中调用 `createExchange` 方法，如 [图 7-8](#uniswap_token_factory_method_that_allow) 所示。
- en: '![](Images/mabc_0708.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0708.png)'
- en: Figure 7-8\. Uniswap Token Factory method that allows anyone to list an ERC-20
    token on the Uniswap DEX
  id: totrans-118
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-8\. Uniswap 令牌工厂方法，允许任何人在 Uniswap DEX 上列出一个 ERC-20 代币
- en: 'As an argument, they need to pass the address of the ERC-20 token smart contract.
    For example, if you wanted to add the SAI ERC-20 token (*0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359*),
    you would execute the `createExchange` method and pass the following argument:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个参数，他们需要传递 ERC-20 代币智能合约的地址。例如，如果你想要添加 SAI ERC-20 代币（*0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359*），你需要执行
    `createExchange` 方法并传递以下参数：
- en: '| **Argument name** | **Value** |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| **参数名称** | **值** |'
- en: '| --- | --- |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `token` | `0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359` |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `token` | `0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359` |'
- en: The Uniswap Token Factory would then generate a new smart contract that allows
    anyone to trade ETH for SAI and vice versa.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 Uniswap 令牌工厂会生成一个新的智能合约，允许任何人交换 ETH 与 SAI。
- en: Custody and counterparty risk
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 托管和交易对手风险
- en: Users of a centralized exchange have to deposit cryptocurrency to begin trading,
    and the exchange takes custody of their funds. Since the exchange controls users’
    funds, there is exposure to *counterparty risk*. That is, if the exchange gets
    hacked or shuts down, there is a risk that its users’ funds may be lost.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 中心化交易所的用户必须存入加密货币才能开始交易，并且交易所托管他们的资金。由于交易所控制用户的资金，存在 *交易对手风险*。也就是说，如果交易所被黑客攻击或关闭，存在交易所用户资金可能丢失的风险。
- en: When someone uses a DEX, the smart contracts manage deposits, withdrawals, trades,
    and maintaining custody of user funds. Before sending funds to the DEX, users
    can audit the smart contract code to know how their funds will be used.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当有人使用 DEX 时，智能合约管理存款、提款、交易，并保管用户资金。在将资金发送到 DEX 之前，用户可以审计智能合约代码，了解他们的资金将如何被使用。
- en: 'Here are the important things to look for in the smart contract:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是在智能合约中寻找的重要事项：
- en: What smart contract methods can move the user’s funds?
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么智能合约方法可以转移用户的资金？
- en: Who can call those methods to move the user’s funds?
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谁可以调用这些方法来移动用户的资金？
- en: Where can those funds be moved to?
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些资金可以转移至哪里？
- en: To clarify how Uniswap manages user funds, we executed a small trade on the
    DEX and then audited the transaction, as shown in [Figure 7-9](#publicly_viewable_record_of_a_method_ca).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了澄清 Uniswap 如何管理用户资金，我们在 DEX 上执行了一笔小额交易，然后审计了交易，如[图 7-9](#publicly_viewable_record_of_a_method_ca)所示。
- en: '![](Images/mabc_0709.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0709.png)'
- en: Figure 7-9\. Publicly viewable record of a method call to a Uniswap smart contract
  id: totrans-133
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-9\. Uniswap 智能合约调用的公开可见记录
- en: As you can see, we traded 0.05 ETH for 8.34 SAI tokens, worth about $8 USD.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们用 0.05 ETH 交易了 8.34 SAI 代币，价值约为 8 美元。
- en: 'In the transaction record, the input data field contains this value:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在交易记录中，输入数据字段包含此值：
- en: '[PRE0]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Breaking down the input data shows which smart contract function is called and
    the arguments passed.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 分解输入数据显示了调用的智能合约函数和传递的参数。
- en: 'The first 10 characters of the input data field specify the function being
    called. In this transaction, the first 10 characters are 0xf39b5b9b. Using an
    [online directory](https://www.4byte.directory), you can learn that the function
    being called is `ethToTokenSwapInput(uint256,uint256)`. The remaining characters
    in the input data field are the values of the arguments passed into the function:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 输入数据字段的前10个字符指定了被调用的函数。在这个交易中，前10个字符是 0xf39b5b9b。通过使用[在线目录](https://www.4byte.directory)，您可以了解到被调用的函数是
    `ethToTokenSwapInput(uint256,uint256)`。输入数据字段中剩余的字符是传递给函数的参数的值：
- en: '[PRE1]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Auditing this transaction, we see that the following steps took place:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 审计此交易，我们看到以下步骤已经发生：
- en: 'The transaction sent 0.05 ETH from our address (*0x76e55ab64c5e2415a8a6375fef216977de7ea213*)
    to the Uniswap SAI smart contract (*0x09cabec1ead1c0ba254b09efb3ee13841712be14*).
    Those funds will remain in the smart contract to be used as liquidity for future
    trades. It’s similar to a bank account: when a user puts funds in, they still
    own the funds and can pull them out at any time; however, while the funds are
    sitting there, the bank can use them too.'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该交易从我们的地址（*0x76e55ab64c5e2415a8a6375fef216977de7ea213*）发送了 0.05 ETH 到 Uniswap
    SAI 智能合约（*0x09cabec1ead1c0ba254b09efb3ee13841712be14*）。这些资金将保留在智能合约中，用于未来交易的流动性。这类似于银行账户：用户存入资金后，仍然拥有资金，并可以随时取出；然而，当资金留在那里时，银行也可以使用它们。
- en: 'The transaction called the function `ethToTokenSwapInput` in the Uniswap SAI
    smart contract (0x09ca…be14) with these input values:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交易调用了 Uniswap SAI 智能合约（0x09ca…be14）中的函数`ethToTokenSwapInput`，并使用了以下输入值：
- en: '| **Argument name** | **Value** |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| **参数名称** | **值** |'
- en: '| --- | --- |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `min_tokens` | `0000000000000000000000000000000000000000000000007349d8cdf224ded3`
    |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `min_tokens` | `0000000000000000000000000000000000000000000000007349d8cdf224ded3`
    |'
- en: '| `deadline` | `000000000000000000000000000000000000000000000000000000005e283df6`
    |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `deadline` | `000000000000000000000000000000000000000000000000000000005e283df6`
    |'
- en: 'These arguments are in hex format because smart contracts are compiled into
    bytecode. Decoding them into human-readable values gives us this:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这些参数是十六进制格式的，因为智能合约被编译成了字节码。将它们解码为人类可读的值，我们得到了这个：
- en: '| **Argument name** | **Value** | **Type** |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| **参数名称** | **值** | **类型** |'
- en: '| --- | --- | --- |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `min_tokens` | `8307409366703988435` | `uint256` |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `min_tokens` | `8307409366703988435` | `uint256` |'
- en: '| `deadline` | `1579695606` | `uint256` |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `deadline` | `1579695606` | `uint256` |'
- en: Note
  id: totrans-152
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: When calling a smart contract, users must send values in hex as arguments. There
    are tools available online, such as [Moesif’s binary encoder/decoder](https://oreil.ly/FO2Qv),
    to help create the input data to be sent with a transaction.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用智能合约时，用户必须以十六进制值作为参数发送。有一些在线工具，比如[Moesif 的二进制编码器/解码器](https://oreil.ly/FO2Qv)，可以帮助创建要与交易一起发送的输入数据。
- en: Let’s take a closer look at the `ethToTokenSwapInput` function defined in the
    [Uniswap V1 Exchange Template smart contract](https://oreil.ly/EJTca) mentioned
    earlier ([Figure 7-10](#the_ethtotokenswapinput_function_from_t)).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看一下之前提到的[Uniswap V1交易所模板智能合约](https://oreil.ly/EJTca)中定义的`ethToTokenSwapInput`函数（[图 7-10](#the_ethtotokenswapinput_function_from_t)）。
- en: '![](Images/mabc_0710.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0710.png)'
- en: Figure 7-10\. The ethToTokenSwapInput function from the Uniswap template code
  id: totrans-156
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-10\. 来自Uniswap模板代码的ethToTokenSwapInput函数
- en: Looking at the method definition, you can see that it calls another method,
    `ethToTokenInput`. As [Figure 7-11](#transaction_logic) shows, this method is
    where the real logic of this transaction takes place.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 查看方法定义，你会发现它调用另一个方法`ethToTokenInput`。正如[图 7-11](#transaction_logic)所示，这个方法是此交易的实际逻辑发生的地方。
- en: '![](Images/mabc_0711.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0711.png)'
- en: Figure 7-11\. Transaction logic
  id: totrans-159
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-11\. 交易逻辑
- en: 'Line 128 in [Figure 7-11](#transaction_logic) checks to make sure that the
    following are true:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 第128行在[图 7-11](#transaction_logic)中检查以下内容是否为真：
- en: The deadline given is equal to or later than the timestamp of the block in which
    this transaction is being included.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定的截止日期等于或晚于此交易被包含的区块的时间戳。
- en: The amount of `eth_sold` is greater than 0.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eth_sold`的数量大于0。'
- en: The number of `min_tokens` expected is greater than 0.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 期望的`min_tokens`数量大于0。
- en: Line 129 gets the quantity of tokens that the smart contract is currently holding.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 第129行获取智能合约当前持有的代币数量。
- en: Line 130 gets the number of tokens that the user should receive in the trade.
    This is an important line because it shows how the exchange rate for the trade
    is calculated. It calls the function `getInputPrice`, which determines the exchange
    rate based on the ratio of ETH to SAI currently sitting in the smart contract.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 第130行获取用户在交易中应该接收的代币数量。这是一行重要的代码，因为它显示了交易的汇率是如何计算的。它调用了`getInputPrice`函数，该函数根据当前智能合约中ETH和SAI的比率确定交易的汇率。
- en: Line 131 checks to make sure the value of `tokens_bought` is greater than or
    equal to the `min_tokens` value, which is the minimum number of tokens the user
    is willing to receive.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 第131行检查`tokens_bought`的值是否大于或等于`min_tokens`值，即用户愿意接收的最小代币数量。
- en: 'If all the previous checks were valid, line 132 is executed. This line transfers
    the tokens from the smart contract to the recipient’s address. More technically,
    it calls the method `transfer` in the SAI smart contract (0x89d2…0359) with the
    following arguments:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有先前的检查都有效，则执行第132行。该行将代币从智能合约转移到收件人的地址。从技术上讲，它调用了SAI智能合约（0x89d2…0359）中的`transfer`方法，并带有以下参数：
- en: '| **Argument name** | **Value** | **Type** |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| **参数名称** | **值** | **类型** |'
- en: '| --- | --- | --- |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `dst` | `0x76e55ab64c5e2415a8a6375fef216977de7ea213` | `address` |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `dst` | `0x76e55ab64c5e2415a8a6375fef216977de7ea213` | `address` |'
- en: '| `wad` | `8342650846452389346` | `uint` |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `wad` | `8342650846452389346` | `uint` |'
- en: Line 133 broadcasts out to all listeners of the event `TokenPurchase` that this
    trade has been executed.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 第 133 行向事件`TokenPurchase`的所有监听器广播，表明此交易已执行。
- en: Finally, line 134 returns the value `token_bought`, which is how many tokens
    the user received.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，第 134 行返回了值`token_bought`，这是用户获得的代币数量。
- en: 'Here are the input values passed to the `ethToTokenInput` method in our example
    transaction, resulting in the trade of 0.05 ETH for 8.34 SAI tokens:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在我们的示例交易中传递给`ethToTokenInput`方法的输入值，导致将 0.05 ETH 交换为 8.34 SAI 代币：
- en: '| **Argument name** | **Value** | **Type** | **Description** |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| **参数名称** | **值** | **类型** | **描述** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `eth_sold` | `50000000000000000` | `uit256(wei)`^([a](ch07.xhtml#idm46164440722952))
    | `msg.value` is passed for this argument, which refers to the amount of ETH that
    was sent in the transaction (0.05 ETH). The type is `uint256(wei)`, where 1 ETH
    = 10^(18) wei, so we multiply 0.05 by 10^(18). |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `eth_sold` | `50000000000000000` | `uit256(wei)`^([a](ch07.xhtml#idm46164440722952))
    | 为此参数传递了`msg.value`，它指的是交易中发送的以太币数量（0.05 ETH）。类型为`uint256(wei)`，其中 1 ETH = 10^(18)
    wei，因此我们将 0.05 乘以 10^(18)。 |'
- en: '| `min_tokens` | `8307409366703988435` | `uint256` | This value was passed
    from the original transaction. It specifies the minimum number of tokens that
    we are willing to receive before executing the transaction. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `min_tokens` | `8307409366703988435` | `uint256` | 这个值是从原始交易中传递的。它指定了我们在执行交易之前愿意接收到的最小代币数量。
    |'
- en: '| `deadline` | `1579695606` | `timestamp` | This value was passed from the
    original transaction. It represents the latest possible date that we are OK with
    for executing the transaction. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `deadline` | `1579695606` | `timestamp` | 这个值是从原始交易中传递的。它表示我们愿意执行交易的最迟日期。
    |'
- en: '| `buyer` | `0x76e55ab64c5e2415a` `8a6375fef216977de7ea213` | `address` | `msg.sender`
    was passed for this argument, which refers to the address that executed the transaction.
    That was our address. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `buyer` | `0x76e55ab64c5e2415a` `8a6375fef216977de7ea213` | `address` | 为此参数传递了`msg.sender`，它指的是执行交易的地址。那就是我们的地址。
    |'
- en: '| `recipient` | `0x76e55ab64c5e2415a` `8a6375fef216977de7ea213` | `address`
    | Same as previous. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `recipient` | `0x76e55ab64c5e2415a` `8a6375fef216977de7ea213` | `address`
    | 与之前相同。 |'
- en: '| ^([a](ch07.xhtml#idm46164440722952-marker)) Wei is the smallest denomination
    of ether. 1 ether = 1,000,000,000,000,000,000 wei. When interacting with the Ethereum
    blockchain, numbers are in terms of wei. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| ^([a](ch07.xhtml#idm46164440722952-marker)) Wei 是以太的最小面值。1 以太 = 1,000,000,000,000,000,000
    wei。与以太坊区块链交互时，数字以 wei 为单位。 |'
- en: Exchange rate
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 汇率
- en: On a centralized exchange, the exchange rate in a market trade is set to a price
    that both a buyer and seller agree to. That logic is programmed into the backend
    server of the exchange. On a DEX, the exchange rate is programmed into the smart
    contract that executes the trade, and can be audited.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在中心化交易所上，市场交易中的汇率设定为买家和卖家都同意的价格。这个逻辑被编程到交易所的后端服务器中。在 DEX 上，汇率被编程到执行交易的智能合约中，并且可以进行审计。
- en: Know your customer
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 认识你的客户
- en: Every centralized exchange has a signup process where users must share identifying
    information such as an email address, phone number, or government-issued ID. Depending
    on its jurisdiction, the exchange must collect a certain amount of identifying
    information before allowing someone to use its service. This is an important way
    that governments prevent financial institutions like exchanges from facilitating
    money laundering and terrorist financing. However, with a DEX, anyone can use
    the exchange without sharing any identity information. The only information shared
    is a cryptocurrency address.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 每个中心化交易所都有一个注册流程，用户必须共享识别信息，如电子邮件地址、电话号码或政府颁发的身份证明。根据其司法管辖权，交易所必须在允许某人使用其服务之前收集一定量的识别信息。这是政府防止交易所等金融机构促进洗钱和恐怖主义融资的重要方式。然而，在
    DEX 中，任何人都可以在不共享任何身份信息的情况下使用交易所。唯一共享的信息是加密货币地址。
- en: The advantage is that anyone with cryptocurrency can use the DEX without asking
    permission. The disadvantage is that DEXes only allow for the trading of cryptocurrencies,
    and do not support fiat currencies like USD or EUR. This is because all fiat currencies
    are tied to the traditional banking system, which uses all central authorities
    like banks and financial institutions.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 优点在于任何持有加密货币的人都可以使用 DEX，无需经过许可。缺点在于 DEX 仅允许交易加密货币，不支持像美元或欧元这样的法定货币。这是因为所有法定货币都与传统银行体系相关联，该体系使用银行和金融机构等中央机构。
- en: Scalability
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可扩展性
- en: A centralized exchange can run its infrastructure on well-established technology
    that can easily perform millions of operations per second. Therefore, it can provide
    a fast trading experience even if it’s serving millions of users.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 中心化交易所可以在成熟的技术基础上运行其基础设施，每秒轻松执行数百万次操作。因此，即使服务于数百万用户，它也可以提供快速的交易体验。
- en: Since a DEX runs entirely on a public blockchain, the DEX’s transaction throughput
    is limited by the blockchain’s maximum transaction speed. As of 2020, Ethereum’s
    maximum transaction rate was less than 20 transactions per second. By comparison,
    as mentioned earlier in the book, Visa’s payments network  can handle up to [65,000
    transactions per second](https://oreil.ly/85rhO).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 DEX 完全在公共区块链上运行，DEX 的交易吞吐量受到区块链的最大交易速度限制。截至 2020 年，以太坊的最大交易速率低于每秒 20 次交易。相比之下，正如本书前面提到的，Visa
    的支付网络可以处理每秒高达 [65,000 次交易](https://oreil.ly/85rhO)。
- en: Flash Loans
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 闪电贷款
- en: Most standard loans have a process for evaluating who can qualify for a loan
    and the maximum amount they can borrow. Some loans may require the borrower to
    provide collateral to guarantee a loan. Lenders create and follow these processes
    to protect themselves from the risk that the borrower may not return the funds,
    and that risk increases the longer the borrower holds onto the funds.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数标准贷款都有一个评估过程，用于评估谁有资格获得贷款以及他们可以借多少的最大金额。一些贷款可能要求借款人提供抵押品来担保贷款。放贷人创建并遵循这些流程，以保护自己免受借款人可能不返还资金的风险，而这种风险随着借款人持有资金的时间增加而增加。
- en: A *flash loan*, on the other hand, allows an Ethereum smart contract to borrow
    a lender’s funds without collateral under the condition that the smart contract
    return the funds plus a fee within the same Ethereum transaction. This is useful
    to a smart contract borrowing funds because it can execute multiple calls to other
    smart contracts within one Ethereum transaction, and therefore can make use of
    the borrowed funds while still returning the funds at the same instant.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，*闪电贷款*允许以太坊智能合约在没有抵押品的情况下借入贷款方的资金，条件是智能合约在同一笔以太坊交易中归还资金加上费用。对于借款资金的智能合约来说，这是有用的，因为它可以在同一笔以太坊交易中执行多次调用其他智能合约，因此可以利用借入的资金，同时在同一瞬间归还资金。
- en: '[Figure 7-12](#example_flash_loan) illustrates what is possible for a smart
    contract to do within one transaction.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 7-12](#example_flash_loan)说明了智能合约在一个交易内可以做到的事情。'
- en: '![](Images/mabc_0712.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0712.png)'
- en: Figure 7-12\. Example flash loan
  id: totrans-196
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7-12\. 示例闪电贷款
- en: If the smart contract does not properly return the funds plus the fee (step
    3), the DeFi lending platform can produce an error in step 1, because steps 1
    and 3 occur in the same transaction. Therefore, the lending platform is not at
    risk of the loan defaulting. Since there is no risk to the lender, the lender
    can loan out to smart contracts all the funds it has available in its lending
    pool.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果智能合约没有正确返回资金加上费用（步骤3），DeFi借贷平台可以在步骤1中产生错误，因为步骤1和步骤3发生在同一笔交易中。因此，借贷平台不会面临贷款违约的风险。由于贷款方没有风险，贷款方可以向智能合约贷款所有其在借贷池中可用的资金。
- en: Smart contracts hold, receive, and send funds. They also keep a record of balances.
    Essentially, the smart contract and community incentives replace the centralized
    authority in a traditional financial product.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约持有、接收和发送资金。它们还记录余额。基本上，智能合约和社区激励替代了传统金融产品中的中心化权威。
- en: Creating a Flash Loan Contract
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建闪电贷款合约
- en: 'Let’s look at an example of how to perform a flash loan. In this example we
    will do the following:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个执行闪电贷款的示例。在这个例子中，我们将执行以下操作：
- en: Create a smart contract that can execute flash loans.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个能够执行闪电贷款的智能合约。
- en: Execute a simple flash loan.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行一个简单的闪电贷款。
- en: The flash loan contract will borrow 1 DAI (ERC-20 token) from the Aave (DeFi
    service) lending pool, and then return 1.0009 DAI. The amount returned is higher
    because it includes the flash loan fee.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 闪电贷款合约将从Aave（DeFi服务）借贷池借入1个DAI（ERC-20代币），然后归还1.0009个DAI。归还的金额更高，因为它包括了闪电贷款手续费。
- en: 'The code for the Flashloan smart contract is as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 闪电贷款智能合约的代码如下：
- en: '[PRE2]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Deploying the Contract
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署合约
- en: You can use [Remix](https://remix.ethereum.org) and MetaMask to deploy this
    smart contract, as  shown in [Figure 7-13](#deploying_the_flashloan_contract).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用[Remix](https://remix.ethereum.org)和MetaMask部署此智能合约，如[图 7-13](#deploying_the_flashloan_contract)所示。
- en: '![](Images/mabc_0713.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0713.png)'
- en: Figure 7-13\. Deploying the Flashloan contract
  id: totrans-210
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7-13\. 部署闪电贷款合约
- en: 'Here are the steps required to publish the Flashloan smart contract to the
    Ropsten network:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 发布 Flashloan 智能合约到 Ropsten 网络需要以下步骤：
- en: Copy the smart contract code (you can find it on [GitHub](https://github.com/Mastering-Blockchain-Book))
    and paste it into Remix.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制智能合约代码（你可以在 [GitHub](https://github.com/Mastering-Blockchain-Book) 找到它），然后粘贴到
    Remix 中。
- en: Compile the code using compiler version 0.6.6+commit.6c089d02 (to check the
    compiler version, click the third button from the top on the lefthand side of
    the Remix IDE).
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用编译器版本 0.6.6+commit.6c089d02 编译代码（要检查编译器版本，请点击 Remix IDE 左侧第三个按钮）。
- en: Publish the code to the Ropsten environment. Be sure to enter the address of
    the Aave LendingPoolAddressProvider contract in the field next to the Deploy button.
    This argument is passed to the constructor method when creating the Flashloan
    contract; it essentially tells the Flashloan contract how to communicate with
    Aave when borrowing funds.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码发布到 Ropsten 环境。确保在部署按钮旁边的字段中输入 Aave LendingPoolAddressProvider 合约的地址。这个参数在创建
    Flashloan 合约时传递给构造方法；它基本上告诉 Flashloan 合约在借款资金时如何与 Aave 通信。
- en: Click Deploy in Remix, then confirm the deployment in MetaMask.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 Remix 中的 Deploy，然后在 MetaMask 中确认部署。
- en: 'The Flashloan smart contract now has the following address:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 Flashloan 智能合约的地址如下：
- en: '[PRE4]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Executing a Flash Loan
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行闪电贷款
- en: To execute a flash loan, perform an Ethereum transaction that calls the function
    `flashloan(address _asset)`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行闪电贷款，请执行调用函数 `flashloan(address _asset)` 的以太坊交易。
- en: 'In this example, we want to execute a flash loan that borrows 1 DAI. The Flashloan
    contract is in the Ropsten environment, so the argument we need to pass is the
    address of the DAI token contract on Ropsten. That address is:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们希望执行一个借出 1 DAI 的闪电贷款。Flashloan 合约位于 Ropsten 环境中，因此我们需要传递的参数是 Ropsten
    上 DAI 代币合约的地址。该地址是：
- en: '[PRE5]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Remember that Aave charges a fee, and if the Flashloan contract is unable to
    pay that fee, it will get an error. To ensure you can pay this fee, make sure
    the Flashloan contract holds at least 0.0009 DAI. You can use the smart contract
    tools on Etherscan to mint and then transfer funds to the contract.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住 Aave 收取费用，如果 Flashloan 合约无法支付该费用，将会出现错误。为确保能支付该费用，请确保 Flashloan 合约至少持有 0.0009
    DAI。你可以使用 Etherscan 上的智能合约工具铸造并转移资金到合约。
- en: Once you’ve identified the DAI token contract address and loaded the Flashloan
    contract with DAI to pay the fee, the contract is ready to execute a flash loan.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确定了 DAI 代币合约地址并加载了 DAI 到 Flashloan 合约以支付费用，该合约就准备好执行闪电贷款。
- en: It’s important to set a very high gas limit because a flash loan will perform
    multiple transactions, using up large amounts of gas—if the gas limit is too low,
    it will get an “out of gas” error.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 设置非常高的 Gas 限制非常重要，因为闪电贷款将执行多个交易，消耗大量 Gas —— 如果 Gas 限制太低，将会出现 “Gas 不足” 错误。
- en: 'In this example, we will send the following transaction to the flash loan contract:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将向闪电贷款合约发送以下交易：
- en: '*Amount*: 0 ETH'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*金额*: 0 ETH'
- en: '*Gas limit*: 300,000'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Gas 限制*: 300,000'
- en: '*Data*: 0x36c40477000000000000000000000000f80a32a835f79d7787e8a8ee5721d0'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*数据*: 0x36c40477000000000000000000000000f80a32a835f79d7787e8a8ee5721d0'
- en: feafd78108
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: feafd78108
- en: 'The data field contains two pieces of information:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 数据字段包含两个信息：
- en: '| **Data value** | **Description** |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| **数据值** | **描述** |'
- en: '| --- | --- |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 0x36c40477 | Instruction to call the function `flashloan(address _asset)`.
    |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| 0x36c40477 | 指令调用函数 `flashloan(address _asset)`。 |'
- en: '| `000000000000000000000000f80a32a8` `35f79d7787e8a8ee5721d0feafd78108` | The
    `_asset` argument being passed into the function. In this example, it is the address
    of the DAI token contract. |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| `000000000000000000000000f80a32a8` `35f79d7787e8a8ee5721d0feafd78108` | 被传递到函数的
    `_asset` 参数。在这个例子中，它是DAI代币合约的地址。 |'
- en: '[Figure 7-14](#flashloan_contract_transaction_in_metam) shows the transaction
    to be sent to the Flashloan contract, including the input data.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 7-14](#flashloan_contract_transaction_in_metam) 展示了发送到闪电贷合约的交易，包括输入数据。'
- en: '![](Images/mabc_0714.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0714.png)'
- en: Figure 7-14\. Flashloan contract transaction in MetaMask wallet
  id: totrans-237
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-14\. 在 MetaMask 钱包中的闪电贷合约交易
- en: You can see a successfully executed transaction of the flash loan [online](https://oreil.ly/3Azdz).
    A lot of activity happened in the one transaction (0xc779…1f23), including function
    calls and token transfers.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在线查看闪电贷的成功执行交易 [online](https://oreil.ly/3Azdz)。在一个交易中 (0xc779…1f23) 发生了许多活动，包括函数调用和代币转账。
- en: Auditing the token transfers in the sample flash loan transaction reveals that
    three token transactions occurred in the one flash loan (see [Table 7-3](#list_of_funds_transferred_in_the_flash)).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 审计样本闪电贷交易中的代币转账显示，一个闪电贷中发生了三笔代币交易 (见 [表 7-3](#list_of_funds_transferred_in_the_flash))。
- en: Table 7-3\. List of funds transferred in the flash loan transaction
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7-3\. 闪电贷交易中转账资金清单
- en: '| **Transaction #** | **Sender** | **Receiver** | **Amount** |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| **交易号** | **发送方** | **接收方** | **金额** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 1 | Aave lending pool (0x4295…9472) | Flashloan contract (0x978e…37A2) |
    1 DAI |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| 1 | Aave借贷池 (0x4295…9472) | 闪电贷合约 (0x978e…37A2) | 1 DAI |'
- en: '| 2 | Flashloan contract (0x978e…37A2) | Aave lending pool (0x4295…9472) |
    1.0009 DAI |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 闪电贷合约 (0x978e…37A2) | Aave借贷池 (0x4295…9472) | 1.0009 DAI |'
- en: '| 3 | Aave lending pool (0x4295…9472) | Aave fee collector (0xeBA2…fC9C) |
    0.00027 DAI |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| 3 | Aave借贷池 (0x4295…9472) | Aave费用收取人 (0xeBA2…fC9C) | 0.00027 DAI |'
- en: Auditing the function calls made in the flash loan transaction reveals a total
    of 24 function calls made involving 10 different smart contracts and one user
    account, as shown in [Figure 7-15](#flowchart_showing_the_sequence_of_impor).
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 审计闪电贷交易中的函数调用显示，涉及到总共 24 次函数调用，涉及到 10 个不同的智能合约和一个用户账户，如 [图 7-15](#flowchart_showing_the_sequence_of_impor)
    所示。
- en: '![](Images/mabc_0715.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0715.png)'
- en: Figure 7-15\. Flow chart showing the sequence of important function calls made
    between different smart contracts
  id: totrans-248
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-15\. 显示不同智能合约之间重要函数调用顺序的流程图
- en: 'The important function calls made in the flash loan transaction are as follows:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 闪电贷交易中的重要函数调用如下：
- en: '*Initiate flash loan*: The flash loan is initiated using the same user account
    (0x8319…9949) that created the flash loan contract. This user account calls the
    function `flashloan(address _asset)` on the flash loan contract (0x978e…37a2),
    with sufficient gas.'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*发起闪电贷款*：闪电贷款是使用创建闪电贷款合约的相同用户账户（0x8319…9949）发起的。此用户账户调用闪电贷款合约（0x978e…37a2）上的`flashloan(address
    _asset)`函数，并提供足够的gas。'
- en: '*Request to borrow*: The flash loan contract (0x978e…37a2) sends a request
    for a flash loan from one of the Aave contracts.'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*请求借款*：Flash贷款合约（0x978e…37a2）向Aave合约之一发送请求，请求进行一次闪电贷款。'
- en: '*Process and send funds*: The Aave contract runs through a series of calls
    and eventually calls the DAI token contract (0xf80a…8108) to transfer 1 DAI to
    the Flashloan contract (0x978e…37a2). This 1 DAI is the amount borrowed.'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*处理并发送资金*：Aave合约通过一系列调用最终调用DAI代币合约（0xf80a…8108）将1个DAI转移到Flashloan合约（0x978e…37a2）。这1个DAI是借出的金额。'
- en: '*Notify funds sent*: After the 1 DAI is sent to the flash loan contract (0x987e…37a2),
    one of Aave’s contracts calls it to notify it that the funds have been sent. At
    this point, the flash loan contract can use the 1 DAI for any purpose. In this
    example, the token does not get used, for simplicity.'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*通知已发送资金*：在1个DAI被发送到闪电贷款合约（0x987e…37a2）之后，Aave的合约之一调用它通知资金已发送。此时，闪电贷款合约可以将1个DAI用于任何目的。在此示例中，为简单起见，令牌未被使用。'
- en: '*Repay funds with fee*: The flash loan contract (0x987e…37a2) then returns
    the funds by calling one of Aave’s contracts, which leads it to call the DAI token
    contract (0xf80a…8108) to transfer 1.0009 DAI to an Aave contract.'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*支付带有费用的资金*：Flash贷款合约（0x987e…37a2）然后通过调用Aave的合约之一来归还资金，这导致其调用DAI代币合约（0xf80a…8108）将1.0009
    DAI转移到Aave合约。'
- en: Flash Loans for Arbitrage
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 闪电贷款用于套利
- en: One of the main use cases for flash loans is to arbitrage between multiple DeFi
    platforms. The biggest advantage of using a flash loan to execute an arbitrage
    is that liquidity is no longer required to sit on the exchanges involved in the
    arbitrage. The requirement for liquidity between crypto exchanges introduces counterparty
    risk, limits the amount that can be arbitraged, and introduces a large barrier
    to entry to begin arbitraging. However, arbitraging with a flash loan provides
    real-time access to multiple large liquidity pools without the need to ask permission.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 闪电贷款的主要用例之一是在多个DeFi平台之间进行套利。使用闪电贷款执行套利的最大优势是不再需要将流动性留在参与套利的交易所上。加密货币交易所之间的流动性要求引入交易对手方风险，限制可以进行套利的金额，并引入开始进行套利的巨大准入壁垒。然而，使用闪电贷款进行套利提供了对多个大型流动性池的实时访问，而无需请求许可。
- en: The lender gives permission for funds to be borrowed when funds are deposited
    into the smart contract. At any time they can look at the contract balances and
    see what percentage of the funds have been loaned out. If a transaction stops
    midloan, the transaction does not complete, and therefore the funds were never
    lent out. The cost for performing a flash loan is simply the gas required to execute
    it.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 出借人在资金存入智能合约时同意借出资金。他们可以随时查看合约余额，并查看已借出资金的百分比。如果交易在贷款过程中停止，则交易不会完成，因此资金从未被借出。执行闪电贷的成本仅仅是执行它所需的燃气。
- en: The Fulcrum Exploit
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作杠杆漏洞
- en: Flash loans have also been used by bad actors to exploit vulnerabilities in
    DeFi platforms. A well-known example occurred on February 15, 2020, when an attacker
    used a flash loan to perform an oracle manipulation attack on the [Fulcrum](https://fulcrum.trade)
    margin trading platform.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意行为者还利用闪电贷来利用 DeFi 平台的漏洞。一个著名的例子发生在 2020 年 2 月 15 日，当时一名攻击者利用闪电贷对[Fulcrum](https://fulcrum.trade)保证金交易平台进行了
    Oracle 操纵攻击。
- en: An oracle provides smart contracts with a trusted view of the outside world.
    For example, a DeFi smart contract will use an oracle to know what the BTC/USD
    exchange rate is. On the day of the attack, the Fulcrum platform was listening
    to multiple oracles for exchange rate data, including Kyber and Uniswap. One reason
    Fulcrum gathers exchange rate data from these DEXes is that it accesses their
    liquidity pools to provide margin trades for Fulcrum’s users.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 为智能合约提供了对外部世界的可信视图。例如，DeFi 智能合约将使用 Oracle 来了解 BTC/USD 汇率是多少。在攻击当天，Fulcrum
    平台正在监听多个交换率数据的 Oracle，包括 Kyber 和 Uniswap。Fulcrum 从这些 DEXes 收集交换率数据的一个原因是它可以访问它们的流动性池，为
    Fulcrum 的用户提供保证金交易。
- en: 'The flash loan contract that performed the oracle manipulation attack has the
    transaction ID:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 Oracle 操纵攻击的闪电贷合约的交易 ID 为：
- en: '[PRE6]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The transaction details can be viewed [online](https://oreil.ly/e8EMp). In total,
    13 smart contract function calls were made.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 交易详情可以[在线查看](https://oreil.ly/e8EMp)。总共进行了 13 次智能合约函数调用。
- en: In an exploit such as this, the attacking flash loan contract borrows, trades,
    and repays wrapped tokens. These are ERC-20 tokens that represent the value of
    a different cryptocurrency. For example, 1 wBTC is a wrapped bitcoin that represents
    1 BTC and in theory is worth 1 BTC, but is in the form of an ERC-20 token.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种攻击中，攻击性闪电贷合约借贷、交易和偿还封装的代币。这些是代表不同加密货币价值的 ERC-20 代币。例如，1 wBTC 是一个封装的比特币，代表
    1 BTC，并在理论上价值为 1 BTC，但以 ERC-20 代币的形式存在。
- en: Note
  id: totrans-265
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Wrapped tokens allow DeFi platforms to trade cryptocurrencies that are not originally
    in the form of an ERC-20 token. For simplicity, anytime you see 1 wETH in this
    discussion, you can assume that it is the equivalent of 1 ETH; the same goes for
    wBTC and BTC.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 封装的代币允许 DeFi 平台交易原本不以 ERC-20 代币形式存在的加密货币。为简单起见，每当在本讨论中看到 1 wETH，您可以假设它等于 1 ETH；wBTC
    和 BTC 也是一样的。
- en: We can break down the process of the attack into five distinct steps, which
    are illustrated in [Figure 7-16](#walkthrough_of_the_fulcrum_attack).
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将攻击过程分解为五个明确的步骤，如[图 7-16](#walkthrough_of_the_fulcrum_attack)所示。
- en: '![](Images/mabc_0716.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0716.png)'
- en: Figure 7-16\. Walkthrough of the Fulcrum attack
  id: totrans-269
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-16\. Fulcrum 攻击的详细步骤
- en: 'The steps can be summarized as follows:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤可以总结如下：
- en: '*Borrow*: The attacking flash loan contract borrows 10,000 ETH ($2.81M USD)
    from the dYdX decentralized trading platform. This action is only valid if it
    repays the loan plus a fee at the end of this Ethereum transaction.'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*借贷*：攻击性闪电贷款合约从去中心化交易平台 dYdX 借入 10,000 ETH（价值 281 万美元）。只有在本次以太坊交易结束时偿还贷款及手续费才有效。'
- en: '*Hoard*: It then borrows 112 wBTC ($1.15M USD) from DeFi lending platform Compound.
    To secure these funds, it provides 5,500 ETH ($1.5M USD) as collateral. The 112
    wBTC will later be dumped onto another market in order to manipulate the oracle
    rate.'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*囤积*：然后从 DeFi 借贷平台 Compound 借入 112 wBTC（价值 115 万美元）。为了担保这些资金，它提供 5,500 ETH（价值
    150 万美元）作为抵押。稍后，这 112 wBTC 将被转移到另一个市场上，以操纵 Oracle 汇率。'
- en: '*Manipulate oracle rate*: Next, it deposits 1,300 ETH onto the Fulcrum margin
    trading platform and opens a short trading position, which is a bet the price
    will fall, on the wETH/wBTC market with 5x leverage. This short position creates
    a domino effect. In order for Fulcrum to service the short position, it swaps
    5,637 ETH ($1.58M USD) for 51.34 wBTC ($525,000 USD) from Kyber. Kyber sources
    the 51.34 wBTC from Uniswap. Significant slippage—when a price moves substantially
    because of a lack of sufficient liquidity—occurs when Kyber pulls this large amount
    of wBTC from Uniswap. This changes the exchange rate of wETH/wBTC on Uniswap from
    1wBTC = 49 wETH, which is the rate given by Compound in the hoarding stage, to
    1wBTC = 109.8 wETH.'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*操纵 Oracle 汇率*：接下来，它将 1,300 ETH 存入 Fulcrum 保证金交易平台，并在 wETH/wBTC 市场上以 5 倍杠杆开设了一个做空交易头寸，即押注价格将下跌。这个空头头寸产生了连锁反应。为了满足
    Fulcrum 的空头头寸，它从 Kyber 那里用 5,637 ETH（价值 158 万美元）兑换了 51.34 wBTC（价值 52.5 万美元）。Kyber
    从 Uniswap 那里获取了这 51.34 wBTC。当 Kyber 从 Uniswap 那里提取了这么大数量的 wBTC 时，由于流动性不足导致了显著的滑点——价格发生大幅变动。这使得
    Uniswap 上的 wETH/wBTC 交换率从 Compound 在囤积阶段给出的 1wBTC = 49 wETH，变为了 1wBTC = 109.8
    wETH。'
- en: '*Trade under new rate*: Now that the wETH/wBTC exchange rate on Uniswap has
    been pumped, the attacking flash loan contract dumps its 112 wBTC onto the Uniswap
    market, receiving 6,871 ETH ($1.93M USD) in this trade. In this action, it receives
    an exchange rate of 1wBTC = 61.3 wETH. This is about 25% higher than the original
    rate it received on Compound, leading to a profit of 1,371 ETH ($385,000 USD).'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*以新汇率交易*：现在，Uniswap 上的 wETH/wBTC 交换率已经被抬高，攻击性闪电贷款合约将其 112 wBTC 倾销到 Uniswap
    市场上，在这笔交易中获得 6,871 ETH（价值 193 万美元）。在这个动作中，它获得的汇率为 1wBTC = 61.3 wETH。这比它在 Compound
    上收到的原始汇率高约 25%，从而获得了 1,371 ETH（价值 38.5 万美元）的利润。'
- en: '*Repay loan*: After the profit has been gained, the flash loan contract repays
    the original 10,000 ETH loan from dYdX. This is required, or else an error will
    be raised and the transaction will not complete. In total, the attacker spent
    0.03 ETH ($7.47 USD) to execute the transaction and gained about $385,000 USD
    worth of cryptocurrency. It then paid back the Compound loan.'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*偿还贷款*：在利润已经获得之后，闪电贷款合约会偿还来自 dYdX 的原始 10,000 个以太币贷款。这是必需的，否则会引发错误，交易将无法完成。总共，攻击者花费了
    0.03 个以太币（7.47 美元）来执行该交易，并获得了价值约 385,000 美元的加密货币。然后它还清了 Compound 贷款。'
- en: Note
  id: totrans-276
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Every time there is a big innovation in financial technology, there are always
    bad actors who look for new ways to exploit the technological shift. For example,
    in the early days of PayPal, hackers started automatically generating fake PayPal
    accounts to perform large-scale credit card fraud. Eventually PayPal created an
    early version of CAPTCHA, a computing test to distinguish human users from machines,
    to help contain this threat. DeFi is no exception. It’s a fundamental shift in
    how financial services are provided, and this fluid situation leads to attackers
    constantly searching for exploits to profit from.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 每当金融科技出现重大创新时，总会有坏人寻找新的方法来利用技术变革。例如，在 PayPal 刚开始的时候，黑客开始自动生成假的 PayPal 账户来进行大规模的信用卡诈骗。最终
    PayPal 创造了 CAPTCHA 的早期版本，这是一种区分人类用户和机器的计算测试，以帮助遏制这种威胁。DeFi 也不例外。这是金融服务提供方式的根本转变，这种流动的情况导致攻击者不断搜索利用的漏洞来获利。
- en: Privacy
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隐私
- en: Public blockchains like Bitcoin and Ethereum are not great when it comes to
    privacy. When thinking about decentralizing finance and the web, information security
    must be carefully considered. To conceal identity, a number of solutions are available.
    Different implementations will make different uses of these solutions, as privacy
    is an experimental (yet growing) area of blockchain technology.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 像比特币和以太坊这样的公共区块链在隐私方面并不是很出色。在考虑到去中心化金融和网络时，必须仔细考虑信息安全。为了隐藏身份，有许多解决方案可供选择。不同的实现将对这些解决方案进行不同的利用，因为隐私是区块链技术中实验性（但不断增长）的领域。
- en: With Bitcoin and Ethereum, all transaction information is visible in the public
    blockchain, including the transaction amount and addresses of the sender and receiver.
    There are use cases where blockchain transaction information must remain private,
    however, and different privacy-focused blockchains, such as Zcash and Monero,
    have been launched to satisfy this need. There are also private blockchain networks
    such as Corda and Quorum that require either an invitation or automatic vetting
    before an organization is allowed to participate. This section considers a few
    aspects of privacy, and we’ll come back to this topic in [Chapter 9](ch09.xhtml#other_blockchains).
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 使用比特币和以太坊，所有交易信息都可以在公共区块链上看到，包括交易金额和发送方和接收方的地址。然而，有些情况下需要保持区块链交易信息私密，因此推出了一些关注隐私的区块链，如
    Zcash 和 Monero。还有一些私有区块链网络，如 Corda 和 Quorum，需要邀请或自动审查才能允许组织参与。本节考虑了隐私的几个方面，我们将在[第九章](ch09.xhtml#other_blockchains)再次讨论这个主题。
- en: Zero-Knowledge Proof
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 零知识证明
- en: A *zero-knowledge proof* is a cryptographic method or protocol where party A
    (the prover) proves to party B (the verifier) that a statement is true without
    revealing any information other than that the statement is true.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '*零知识证明* 是一种密码学方法或协议，其中甲方（证明者）向乙方（验证者）证明一个陈述为真，而不透露任何除了该陈述为真之外的信息。'
- en: Suppose a prover needs to prove to the verifier that they found Waldo in a *Where’s
    Waldo?* drawing. The easiest approach would be for the prover to point to Waldo,
    but doing so reveals the secret of where Waldo is, when the point is merely to
    prove that the prover *knows* where Waldo is. A zero-knowledge approach might
    be for the prover to get a large piece of paper, significantly bigger than the
    Waldo drawing, and cut a hole the shape of Waldo in the center. Out of sight of
    the verifier, the prover covers the drawing so that only Waldo is visible through
    the hole in the paper. The prover has demonstrated that they found Waldo without
    revealing any information that could help the verifier find Waldo.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个证明者需要向验证者证明他们在 *哪里是沃尔多？* 图纸中找到了沃尔多。最简单的方法是让证明者指着沃尔多，但这样做会泄露沃尔多在哪里，而证明的目的仅是证明证明者
    *知道* 沃尔多在哪里。一个零知识的方法可能是让证明者拿一张比 *哪里是沃尔多？* 图纸大得多的纸，然后在纸的中心剪出一个沃尔多形状的洞。在验证者的视线之外，证明者盖住图纸，以便只有通过纸上的洞能看到沃尔多。证明者已经证明了他们找到了沃尔多，而没有透露任何可能帮助验证者找到沃尔多的信息。
- en: 'Let’s consider another example. Say the prover wants to prove to the verifier
    that they know the correct password for logging in to a website. The current method
    many websites use is to store a hash of the user’s password in their database.
    When the user wants to log in, the following sequence takes place:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑另一个例子。假设证明者想向验证者证明他们知道正确的网站登录密码。目前许多网站使用的方法是在他们的数据库中存储用户密码的哈希值。当用户想要登录时，以下序列发生：
- en: The user sends the password as plain text to the server.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户将密码以明文形式发送到服务器。
- en: The server encrypts the password using a standard encryption algorithm, such
    as MD5.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器使用标准加密算法（如 MD5）加密密码。
- en: If the newly generated MD5 hash matches the hash stored in the database, then
    the password entered is valid.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果新生成的 MD5 哈希值与数据库中存储的哈希值匹配，则输入的密码有效。
- en: 'However, this method makes the user’s password vulnerable to the following:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法使用户的密码容易受到以下攻击的影响：
- en: Man in the middle attacks
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 中间人攻击
- en: If a hacker compromises the communication between the user and the server, it
    is possible to intercept the plain-text password.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 如果黑客破坏了用户与服务器之间的通信，就有可能拦截明文密码。
- en: Brute force and dictionary attacks
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 暴力破解和字典攻击
- en: If a website’s database is breached, a hacker can potentially decrypt the user’s
    password through various methods, including brute force using trial and error
    or dictionary attacks using a list of words or phrases.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果网站的数据库被入侵，黑客可以通过各种方法（包括使用试错法进行暴力破解或使用单词或短语列表进行字典攻击）可能解密用户的密码。
- en: 'In a zero-knowledge approach, a user can prove they have a valid password without
    the need to reveal what it is—the server does not store any variation of the password,
    not even a hash. This can be done by implementing the [Thinbus Secure Remote Password
    protocol (SRP)](https://oreil.ly/djyVy):'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在零知识方法中，用户可以证明他们有一个有效的密码而不需要透露是什么密码——服务器不存储密码的任何变体，甚至不存储哈希值。这可以通过实现 [Thinbus
    安全远程密码协议 (SRP)](https://oreil.ly/djyVy) 来完成：
- en: The server stores a randomly generated *salt,* or random data that is used as
    an additional input*,* and a *verifier* that cannot be decrypted into the password.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器存储一个随机生成的 *盐*，或者用作额外输入的随机数据，并且一个无法解密为密码的 *验证者*。
- en: When the user logs in to the website, they send a one-time value used only for
    that particular login. Future messages will look very different. The server receives
    this one-time value, and through the SRP can verify whether the message received
    was sent by a user with a valid password. [Figure 7-17](#flow_of_actions_in_the_registration_act)
    illustrates.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户登录网站时，他们发送一个仅用于该特定登录的一次性值。未来的消息会有很大的不同。服务器接收到这个一次性值，并通过 SRP 可以验证接收到的消息是否由具有有效密码的用户发送。
    [图 7-17](#flow_of_actions_in_the_registration_act) 给出了说明。
- en: '![](Images/mabc_0717.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0717.png)'
- en: Figure 7-17\. Flow of actions in the registration action of the SRP
  id: totrans-297
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-17。SRP 注册动作中的操作流程
- en: Implementation of a zero-knowledge proof significantly improves the privacy
    and security of many systems. However, it introduces additional costs in processing
    power and hard drive space. Another downside is that it requires the two parties
    (prover and verifier) to interact directly with each other.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 实现零知识证明显着提高了许多系统的隐私和安全性。然而，这增加了处理能力和硬盘空间的额外成本。另一个缺点是它需要两方（证明者和验证者）直接相互交互。
- en: 'These downsides would not matter in the case of a website, but implementing
    zero-knowledge proofs in a blockchain would have a significant impact, for a few
    reasons:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在网站的情况下，这些缺点并不重要，但是在区块链中实现零知识证明会产生重大影响，原因有几个：
- en: Blockchain miners maintain a copy of the entire blockchain history, which gets
    big very fast as network usage scales. Adding more data makes this problem even
    worse.
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区块链矿工维护整个区块链历史的副本，随着网络使用规模的扩大，这个历史记录会迅速变得庞大。增加更多数据会使这个问题变得更加严重。
- en: In a blockchain network, the sender of a transaction wants to prove that the
    transaction is valid, and the miners each verify that validity. The problem is
    that the sender does not communicate directly with every miner. Rather, the sender
    broadcasts out transaction details and miners verify the transaction—a process
    that does not involve direct, one-to-one interaction.
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在区块链网络中，交易的发送方希望证明交易的有效性，而每个矿工都验证了该有效性。问题在于，发送方并不直接与每个矿工通信。相反，发送方广播交易细节，而矿工验证交易——这个过程不涉及直接的一对一交互。
- en: So, in order for a blockchain to adopt a zero-knowledge proof method, it must
    be *succinct*, to allow for better scalability, and *noninteractive*, so that
    nodes in the network can verify zero-knowledge statements from nodes they are
    not communicating with directly. With this method, the sender (prover) of the
    transaction can broadcast out one piece of data and the miners (verifiers) can
    verify the transaction’s validity without any additional interaction with the
    sender. The data that the transaction sender broadcasts to the network must be
    very small in size, because that data will be stored on the blockchain.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了让区块链采用零知识证明方法，它必须是*简洁的*，以实现更好的可扩展性，并且*非交互式的*，以便网络中的节点可以验证来自它们没有直接通信的节点的零知识陈述。通过这种方法，交易的发送方（证明者）可以广播出一条数据，而矿工（验证者）可以在不与发送方进行任何额外交互的情况下验证交易的有效性。交易发送方向网络广播的数据必须非常小，因为这些数据将存储在区块链上。
- en: Note
  id: totrans-303
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Zero-knowledge proofs are used in enterprise blockchain applications where mining
    is not used. More on this in [Chapter 9](ch09.xhtml#other_blockchains).
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 零知识证明被用于企业区块链应用中不使用挖矿的情况。有关此内容请参阅[第九章](ch09.xhtml#other_blockchains)。
- en: zk-SNARKs
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: zk-SNARKs
- en: One form of zero-knowledge proof is *Zero-Knowledge Succinct Non-Interactive
    Arguments of Knowledge* (zk-SNARKs), a privacy technology already used in cryptocurrencies
    like Zcash. In Ethereum, it can be used to enhance privacy in smart contracts.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 零知识证明的一种形式是*零知识简洁非交互知识论证*（zk-SNARKs），这是一种隐私技术，已经在像 Zcash 这样的加密货币中使用。在以太坊中，它可以用于增强智能合约的隐私性。
- en: Though it’s expected to be integrated at some point, zk-SNARKs for now requires
    *precompiling*, or processing input data to produce an output*,* on networks like
    Ethereum because of the extensive gas costs required. For the time being, running
    code outside of the EVM is the best way to precompile, using Rust or JavaScript.
    [Aztec](https://www.aztecprotocol.com) is an early mainnet, or production environment,
    tech for Ethereum that successfully integrates zk-SNARKs for enhanced privacy.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管预计在某个时候会集成，但目前zk-SNARKs需要在像以太坊这样的网络上进行*预编译*或处理输入数据以产生输出，因为需要大量的燃气费用。目前，在EVM之外运行代码是预编译的最佳方式，可以使用Rust或JavaScript。
    [Aztec](https://www.aztecprotocol.com)是以太坊的早期主网或生产环境技术，成功地将zk-SNARKs集成到其中以增强隐私。
- en: Zcash
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Zcash
- en: '[Zcash](https://z.cash) is a privacy-focused blockchain that provides senders
    of a transaction the option to make transaction information public or private.
    Private Zcash transactions use zk-SNARKs. Zcash’s implementation of zk-SNARKs
    has provided the community with evidence of how useful this can be to public blockchains.
    Notably, it:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '[Zcash](https://z.cash)是一个专注于隐私的区块链，为交易的发送者提供了将交易信息公开或保密的选项。私人的Zcash交易使用zk-SNARKs。
    Zcash对zk-SNARKs的实现为社区提供了如何将其应用于公共区块链的证据。值得注意的是，它：'
- en: Allows for private transactions to be done on a public blockchain like Bitcoin
    or Ethereum
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许在比特币或以太坊等公共区块链上进行私人交易。
- en: Allows for private execution of smart contract code on a public blockchain
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许在公共区块链上私下执行智能合约代码。
- en: Ring Signatures
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环签名
- en: With ring signatures, anyone from a predefined group can sign transactions,
    increasing the difficulty of determining the identity of the actual signer. Any
    one of the group members could be sending the transaction, concealing the sender
    and increasing privacy. The larger the ring, the higher the chances of concealment.
    The Monero cryptocurrency currently uses this technology, in addition to using
    decoy outputs to hide UXTOs.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 借助环签名，预定义组中的任何人都可以签署交易，增加了确定实际签署者身份的难度。组中的任何成员都可能发送交易，隐藏发送者并增加隐私。环越大，隐藏的机会就越高。目前，门罗币加密货币正在使用这项技术，除了使用假输出来隐藏UXTOs。
- en: Web 3.0
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web 3.0
- en: Blockchain and cryptocurrency with proper levels of privacy could create new
    platforms for the web, incentivizing new types of development and moving users
    away from the [oligarchical model that has come to dominate](https://oreil.ly/YAge3)
    over the last decade.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链和加密货币在适当的隐私级别下，可以为网络创建新平台，激励新型开发，并使用户摆脱过去十年来主导的[寡头模式](https://oreil.ly/YAge3)。
- en: It’s become common to talk about different stages in the evolution of the World
    Wide Web. Web 1.0 consisted of static pages, form fields, and passive content.
    Web 2.0 introduced dynamic pages, interactive fields, and user-generated content.
    Web 3.0 is the next iteration, whereby the data generated from the previous two
    generations is returned, monetized, and controlled by the user. What that will
    look like in totality is unclear, but some characteristics are emerging, and scaffolding
    for Web 3.0 technology is being built today.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 谈论互联网的演变过程中不同阶段已经成为常态。Web 1.0 由静态页面、表单字段和被动内容组成。Web 2.0 引入了动态页面、交互字段和用户生成的内容。Web
    3.0 是下一个迭代版本，通过前两代产生的数据返回给用户进行货币化，并由用户控制。这将完全呈现什么样子目前尚不清楚，但一些特征正在出现，而 Web 3.0
    技术的脚手架正在今天构建中。
- en: Users give away a lot of data, often without realizing it, and much of this
    occurs within web browsers. [Brave](https://brave.com) is a Chromium-based browser
    focused on privacy. Although other web browsers make various claims about their
    privacy features too, Brave is the first to implement blockchain technology. It
    has built-in ad blockers, replacing advertising with cryptocurrency. The Basic
    Attention Token (BAT), its ERC-20 cryptocurrency, is used to compensate website
    owners and content creators in lieu of ad platforms.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 用户经常在不知情的情况下泄露大量数据，其中很多发生在网络浏览器中。[Brave](https://brave.com)是一个以隐私为重点的基于Chromium的浏览器。尽管其他网络浏览器也对其隐私功能提出了各种声明，但Brave是第一个实施区块链技术的浏览器。它内置了广告拦截器，用加密货币替代广告。其
    ERC-20 加密货币基础注意力代币（BAT）用于补偿网站所有者和内容创作者，而不是广告平台。
- en: 'Paying independent developers to work on open source code can be a complex
    process. Cryptocurrency and blockchain are leading to exciting changes in software
    development. Sites like [Gitcoin](https://gitcoin.co) are embracing and supporting
    this movement: it pairs developers looking for projects to work on with funders
    looking for people to implement a bug fix or feature request or do some other
    work on a project, and all the payments are made in crypto.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 支付独立开发者来参与开源代码的工作可能是一个复杂的过程。加密货币和区块链正在引领软件开发领域的激动人心的变革。像[Gitcoin](https://gitcoin.co)这样的网站正在支持和拥抱这一运动：它将寻找项目的开发者与寻找人来实现漏洞修复或功能请求或在项目中进行其他工作的资助者配对，所有支付都以加密货币形式进行。
- en: File storage is an important part of web-based applications, and decentralizing
    this aspect is key. Storing and sharing data is what allows many technology providers
    to take liberties with user information via their terms of service. The [Interplanetary
    File System (IPFS)](https://ipfs.io) is a persistent network that enables distributed
    storage of files as long as a single node keeps running; its aim is to.... Its
    design is modular, allowing it to be used for a variety of use cases.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 文件存储是基于网络的应用程序的重要组成部分，去中心化这一方面至关重要。存储和共享数据是许多技术提供商通过其服务条款对用户信息进行侵犯的原因。[星际文件系统（IPFS）](https://ipfs.io)是一个持久性网络，它使得文件可以分布式存储，只要单个节点保持运行；其目标是....
    其设计是模块化的，允许它用于各种用例。
- en: Building decentralized web frameworks is a huge task. It requires melding identity,
    distributed systems, and blockchain into a scaffolding developers can use to create
    increasingly decentralized applications. [Blockstack](https://www.blockstack.org),
    which started with identity and then moved into distributed systems, is one of
    these early frameworks. It uses REST calls to create dapps in a framework similar
    to what developers have used in the past.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 构建去中心化的网络框架是一项艰巨的任务。它需要将身份、分布式系统和区块链融合到开发者可以用来创建日益去中心化的应用程序的支架中。[Blockstack](https://www.blockstack.org)，从身份出发，然后进入分布式系统，是这些早期框架之一。它使用
    REST 调用来在与开发者过去所使用的类似的框架中创建 dapps。
- en: Then there’s gambling. Since the value is being transferred via smart contract
    in Web 3.0, it is easier to audit whether the rules are fair. In traditional gambling,
    the house usually has the advantage in terms of odds. In this new framework, newer
    kinds of games are being invented—for example, *no-loss gambling.* One example
    is a DAO pool in which everyone puts in stablecoin, which earns returns. The pool
    goes through a randomized selection process to pick the winner; the winner gets
    all the interest earned from the pool, and the losers get back their original
    amount of stablecoin.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 还有赌博。由于在 Web 3.0 中是通过智能合约进行价值转移，因此更容易审计规则是否公平。在传统的赌博中，通常房子在赔率方面具有优势。在这个新框架中，正在发明新的游戏类型，例如*无损赌博*。一个例子是
    DAO 池，每个人都投入稳定币，它会产生收益。池会通过随机选择过程选择赢家；赢家获得池中获得的所有利息，而输家则收回其原始金额的稳定币。
- en: Summary
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Web 3.0 technology is based on a disruption of the traditional centralized services
    model. That model, though it has been successful for some time, is beginning to
    weaken as numbers of cyberattacks increase. New ideas are being injected into
    finance and the web, with developers exploring the use of blockchain, cryptocurrencies,
    and smart contracts to protect user privacy and put control over personal information
    back in the hands of users.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: Web 3.0 技术基于对传统中心化服务模式的颠覆。虽然这种模式曾经取得了一定的成功，但随着网络攻击数量的增加，它开始变得薄弱起来。在金融和网络领域，开发者正在探索使用区块链、加密货币和智能合约来保护用户隐私，并将个人信息的控制权重新交到用户手中。
