- en: '![](index-358_1.png)'
  id: totrans-0
  prefs: []
  type: TYPE_IMG
  zh: '![](index-358_1.png)'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层和以太坊2
- en: '***Figure 9-3\.** Components and workflow of plasma scalability*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '***图9-3.** Plasma可扩展性的组件和工作流程*'
- en: '*solutions*'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*解决方案*'
- en: '**Plasma Smart Contract on Ethereum Mainnet**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**以太坊主网上的Plasma智能合约**'
- en: The top layer is the layer 1 or root blockchain, which in this context is
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 顶层是第1层或根区块链，在此上下文中是
- en: Ethereum mainnet. Plasma smart contracts are deployed to Ethereum
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Ethereum主网。Plasma智能合约部署到以太坊
- en: mainnet, and it has the following functions.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 主网，并且具有以下功能。
- en: 'Deposit function for users to deposit assets to use in layer 1: This'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 用户向层1存入资产以使用的存款功能：此
- en: deposit function will allow a user to send a transaction to a plasma smart
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 存款功能将允许用户向plasma智能合约发送交易
- en: contract with a certain asset value. The asset sent by the user through
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 具有特定资产价值的合约。用户通过
- en: the deposit function will be locked in the mainnet by the plasma smart
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 存款函数将被plasma智能合约在主网上锁定
- en: contract. A record will be created by the smart contract, and a new token
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 合约。智能合约将创建一条记录，并生成一个新代币
- en: related to this deposit will be created. After that, the deposit function can
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与这笔存款相关的将创建。之后，存款函数可以
- en: emit a deposit event to notify plasma blockchain. The token and its value
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 发出存款事件以通知plasma区块链。代币及其价值
- en: will be replicated in the plasma blockchain and used as assets for the layer
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 将在plasma区块链上复制并作为层1的资产使用
- en: 2 blockchain.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 2区块链。
- en: SubmitPlasmaTxRecord function for layer 2 plasma blockchain
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 层2plasma区块链的SubmitPlasmaTxRecord函数
- en: 'to submit the transaction Merkle tree to the layer 1 root chain: The'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将交易Merkle树提交到第1层根链：该
- en: transactions in the plasma blockchain are recorded in a Merkle tree
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 交易记录在Merkle树中
- en: structure, and the root of the Merkle tree is sent to the parent or root
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 结构，以及Merkle树的根发送给父级或根级
- en: blockchain.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链。
- en: '348'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '348'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层和以太坊2
- en: StartWithdraw function that allows users to withdraw assets from the
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: StartWithdraw函数允许用户从
- en: 'layer 2 chain to the layer 1 blockchain: The function is normally called'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 层2链到第1层区块链：该函数通常被称为
- en: by users directly or by operators that connect with both layer 1 and layer
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由用户直接或通过同时连接第1层和层2的运营商进行。
- en: 2 blockchains. The caller of this function should provide plasma block
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 2个区块链。此函数的调用者应提供plasma区块
- en: number, transaction indexid, transaction record, Merkle proof, and
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 数字，交易索引id，交易记录，Merkle证明，以及
- en: signatures. When users withdraw assets from the plasma blockchain, the
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 签名。当用户从plasma区块链提取资产时，
- en: assets in the plasma chain will be burned, and then the assets originally
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: plasma链中的资产将被销毁，然后原始的
- en: deposited on the layer 1 chain will be distributed to the target user. To
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在第1链上存入的资产将分发给目标用户。为了
- en: ensure that the burning operation and unlock operation are secure, there
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 确保燃烧操作和解锁操作是安全的，因此
- en: will be a wait period for the StartWithdraw function to distribute the funds
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 将有一个等待期，以便StartWithdraw函数分配资金
- en: to the users. This is to ensure that the assets in layer 2 are burned before
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在层2燃烧资产之前
- en: the same value of asset in layer 1 is distributed. During this wait period,
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 相同价值的资产在第1层分配。在此等待期间，
- en: anyone can challenge this withdrawal by providing proofs from the plasma
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 任何人都可以通过提供来自plasma链的证明来挑战这个提现
- en: blockchain.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链。
- en: ChallengeWithdraw function that allows any user or operator to
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: ChallengeWithdraw函数允许任何用户或运营商
- en: provide evidence to challenge the withdrawal transaction waiting to be
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 提供证据来挑战等待提现交易的
- en: 'validated: The caller of this function needs to provide a withdrawal ID'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 已验证：此函数的调用者需要提供一个提现ID。
- en: that is challenged and other inputs such as Merkle root and proofs that
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 受到挑战以及其他输入，例如Merkle根和证明，
- en: are similar to the StartWithdraw function. The inputs from StartWithdraw
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 与StartWithdraw函数相似。StartWithdraw的输入
- en: function and ChallengeWithdraw function are compared and validated.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 函数和ChallengeWithdraw函数进行比较和验证。
- en: If the challenge is successful, then the StartWithdraw transaction will
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果挑战成功，那么StartWithdraw交易将
- en: be voided.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将被撤销。
- en: '**Operators**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**运营商**'
- en: Operators connect plasma blockchain with layer 1 root chain. It watches
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 运营商将plasma区块链与第1层根链连接。它监视
- en: deposit events in layer 1 and then generates a new token ID to represent
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在第1层存入事件，然后生成一个新代币ID来表示
- en: the one in the mainnet and then mint the same value of tokens in the
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 主网上的相同值，然后在
- en: plasma chain. Once the new token is generated on the plasma blockchain,
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Plasma链。一旦在Plasma区块链上生成新的代币，
- en: the depositor owns the token and can send the token to any user in the
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 存款者拥有代币，可以将代币发送给以太坊中的任何用户
- en: layer 2 chain. Operators will also submit plasma blockchain Merkle tree
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 第二层链。运营商还将提交Plasma区块链的默克尔树
- en: root records to the layer 1 blockchain. Users can withdraw their assets
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以将资产提取到第1层区块链的**根记录**。
- en: '349'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '349'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第二层与以太坊2.0
- en: to layer 1 using smart contract functions calls on blockchain. If the
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通过智能合约功能调用区块链。如果
- en: withdrawal is requested in layer 2, the operator will also pass the request
    to
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当在第2层请求提现时，运营商也将传递该请求
- en: layer 1 for processing.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 第一层进行处理。
- en: '**Transactions or Smart Contracts on Layer 2**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**第二层的交易或智能合约**'
- en: In the plasma layer 2 chain, users can send regular transactions among
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二层Plasma链中，用户可以在彼此之间发送常规交易。
- en: each other. The plasma chain can also implement smart contract
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 彼此之间。Plasma链还可以实现智能合约
- en: capability to withdraw assets to the layer 1 blockchain. The transactions
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 用户拥有将资产提取到第1层区块链的能力。这些交易
- en: in the plasma chain are packaged into a Merkle tree and saved as a
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在Plasma链中的资产打包成默克尔树并保存为 a
- en: blockchain state. The root of the Merkle is sent to the layer 1 chain
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链状态。默克尔树的根发送到第1层链
- en: for record.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 记录。
- en: '**Plasma Chain**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**Plasma链**'
- en: Plasma chains can be implemented in various ways. Since the security
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Plasma链可以以多种方式实现。由于安全
- en: of the plasma chain is coupled with the root chain and receipts of
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 与根链耦合的Plasma链和收据的
- en: transactions are sent to the receiver, plasma chains do not need to have full
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 交易发送给接收者后，Plasma链不需要具备完整
- en: consensus to ensure security. The plasma chain can be implemented in
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 确保安全。Plasma链可以以
- en: various ways. In one implementation, a plasma chain can be implemented
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 多种方式。在一个实现中，Plasma链可以实现
- en: as a server that takes user transaction inputs and also has a Merkle tree
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个服务器，接受用户交易输入，并具有一个默克尔树
- en: structure or a database to store transactions. The plasma chain can
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 结构或数据库来存储交易。Plasma链可以
- en: also be implemented as a POA (proof of authority) or BFT (Byzantine
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以实现为POA（权限证明）或BFT（拜占庭容错）
- en: Fault Tolerance) blockchain. In this POA or BFT plasma blockchain, a
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 容错）区块链。在这个POA或BFT Plasma区块链中，a
- en: couple of permissioned nodes create a blockchain to accept plasma layer
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 几个授权节点创建一个区块链，接受Plasma第二层
- en: transactions. The root of the transaction Merkle tree is then calculated and
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 交易。然后计算交易默克尔树的根
- en: sent to the root blockchain for record and verification. The plasma chain
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 发送到根区块链进行记录和验证。Plasma链
- en: can also be implemented as a POS (proof of stake) chain where anyone can
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以实现为POS（权益证明）链，任何人都可以
- en: run a node by staking an asset to a smart contract on the root chain. The
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在根链上的智能合约质押资产来运行一个节点。
- en: assets staked in the plasma chain are to secure the plasma chain. If there
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在Plasma链中质押的资产是为了保护Plasma链。如果
- en: is a collusion of nodes in the plasma chain, the stakes of these nodes get
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 是Plasma链中节点的共谋，这些节点的赌注会
- en: slashed through a smart contract on the root chain.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在根链上的智能合约被削减。
- en: '350'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '350'
- en: '![](index-361_1.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](index-361_1.png)'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第二层与以太坊2.0
- en: '**Transaction Merkle Tree Example**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**交易默克尔树示例**'
- en: Ethereum blockchains leverage the Merkle tree extensively. A Merkle tree
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊区块链广泛利用默克尔树。默克尔树
- en: is a data structure that arranges data/message and its respective hash
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 是一种数据结构，它安排数据/消息及其相应的哈希
- en: in a hierarchical tree structure to ensure data integrity and processing
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 确保数据完整性和处理
- en: efficiency. There are multiple Merkle trees. A standard Merkle tree is the
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 效率。有多个默克尔树。标准默克尔树是
- en: one that records the elements and their hash in a binary tree structure as
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 记录元素及其哈希的二进制树结构作为
- en: 'shown in the following diagram (Figure [9-4](#p361)):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示（图[9-4](#p361)）：
- en: '***Figure 9-4\.** A standard Merkle tree example*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '***图9-4.* 标准默克尔树示例*'
- en: The leaf nodes are data nodes, and the nodes on top of leaf nodes
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 叶节点是数据节点，叶节点之上的节点
- en: store the hash of the data element. Here, H(A) means a hash of data A. The
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 存储数据元素的哈希。这里，H(A)表示数据A的哈希。
- en: hashing function can be sha256 or keccak256, which are commonly used
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希函数可以是sha256或keccak256，这些都是常用
- en: in Ethereum. With these Merkle trees, the integrity of each node can be
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊中。有了这些默克尔树，每个节点的完整性可以
- en: verified by providing root hash and hashes of the “uncle’s” node. For
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层与以太坊2.0
- en: example, in the preceding diagram, to prove transactions of A element
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`bytes32 public hash_cd;`'
- en: are valid, users need to provide hash_b, hash_c, and hash_d to compute
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '353'
- en: '351'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`hash_ab= sha256(abi.encodePacked(hash_a, hash_b));`'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '` *//声明父节点和根节点为32字节哈希。*'
- en: the root node hash and compare with the root hash as recorded in the
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`hash_cd= sha256(abi.encodePacked(hash_c, hash_d));*'
- en: root chain.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 片中的Merkle树。这个程序的源代码
- en: The following code snippet demonstrates how the Merkle tree in the
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '` * @param _leaf 要检查的叶子。*'
- en: preceding diagram is implemented in Solidity. The source code for this
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`bytes32 public hash_d;`'
- en: Merkle tree demo program is located at the GitHub location.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 用于哈希叶子或非叶子节点。abi.encodePacked 函数是用来
- en: /**
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 节点。一旦生成了 hash_root，它就被保存到根区块链
- en: '* *@title MerkleDemo for 4 leaf nodes*'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`// abi.encodePacked 连接两个子哈希`'
- en: '*/'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`bytes32 public hash_ab_cd;`'
- en: '*contract MerkleDemo {*'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '` *bytes32 public hash_a;*'
- en: '*//declear leaf nodes*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在前面的图表中，为了证明A元素的交易
- en: '*string public leaf_a = "Alice sent 10 tokens to Bob";*'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '` *string public leaf_c = "Cathy sent 8 tokens to David";*'
- en: '*string public leaf_b = "Bob sent 9 tokens to Cathy";*'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`string public leaf_b = "Bob sent 9 tokens to Cathy";`'
- en: '*string public leaf_c = "Cathy sent 8 tokens to David";*'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了如何在Solidity中实现前图
- en: '*string public leaf_d = "David sent 7 tokens to Eric";*'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`string public leaf_d = "David sent 7 tokens to Eric";`'
- en: '*//declare parent node and root node as 32 bytes hash.*'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 并可以用来根据要求验证Merkle
- en: '*bytes32 public hash_a;*'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供根哈希和“叔叔”节点的哈希来验证。对于
- en: '*bytes32 public hash_b;*'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`bytes32 public hash_b;`'
- en: '*bytes32 public hash_c;*'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`contract MerkleDemo {`'
- en: '*bytes32 public hash_d;*'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，四个叶子节点 – leaf_a, leaf_b, leaf_c,
- en: '*bytes32 public hash_cd;*'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`bytes32 public hash_root;`'
- en: '*bytes32 public hash_ab;*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`hash_root = hash_ab_cd;`'
- en: '*bytes32 public hash_ab_cd;*'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`bytes32 public hash_ab;`'
- en: '*bytes32 public hash_root;*'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 交易。叶子节点的内容被哈希并存储在
- en: In the preceding code snippet, four leaf nodes – leaf_a, leaf_b, leaf_c,
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: and leaf_d – are defined as string type variables that record simplified
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '351'
- en: transactions. The content of the leaf nodes is hashed and stored in
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查代表叶子节点的交易是否在Merkle
- en: variables of hash_a, hash_b, hash_c, and hash_d of bytes32 data type.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 树中的节点。
- en: hash_a and hash_b are combined to form a parent hash named hash_
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: ab. Hash_c and hash_d are combined to form parent node hash_cd. And
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: ab. Hash_c和hash_d组合成父节点hash_cd。并且
- en: '352'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '352'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 位于GitHub上。
- en: finally, hash_ab and hash_cd are combined to form hash_ab_cd. Hash_ab_
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 和 leaf_d – 定义为记录简化的
- en: cd is the top node equivalent to hash_root.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The constructor of MerkleDemo smart contract constructs the Merkle
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 梅克尔演示智能合约的构造函数构建了一个Merkle
- en: 'tree as shown in the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示的树：
- en: /*
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '` *}`'
- en: '* *Constructor function to construct a merkle tree.*'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '` * 构造函数以构建一个Merkle树。`'
- en: '*/'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 用户或操作员。
- en: '*constructor() public {*'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*// construct a Merkle tree with sha256 hash function.*'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 使用sha256哈希函数构建一个Merkle树。`'
- en: '*// abi.encodePacked concatenate two child hashes*'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*hash_a = sha256(abi.encodePacked(leaf_a));*'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: cd 是与 hash_root 相当的最高节点。
- en: '*hash_b = sha256(abi.encodePacked(leaf_b));*'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '` *constructor() public {*'
- en: '*hash_c = sha256(abi.encodePacked(leaf_c));*'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有效，用户需要提供hash_b、hash_c 和 hash_d 来计算
- en: '*hash_d = sha256(abi.encodePacked(leaf_d));*'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`hash_d = sha256(abi.encodePacked(leaf_d));`'
- en: '*hash_ab= sha256(abi.encodePacked(hash_a, hash_b));*'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`hash_a = sha256(abi.encodePacked(leaf_a));`'
- en: '*hash_cd= sha256(abi.encodePacked(hash_c, hash_d));*'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '` *hash_b = sha256(abi.encodePacked(leaf_b));*'
- en: '*hash_ab_cd= sha256(abi.encodePacked(hash_ab, hash_cd));*'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`hash_a` 和 `hash_b` 组合成一个名为 `hash_` 的父哈希'
- en: '*hash_root = hash_ab_cd;*'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '` *hash_c = sha256(abi.encodePacked(leaf_c));*'
- en: '*}*'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '` *bytes32 public hash_c;*'
- en: In the preceding code in the constructor, the sha256 Solidity function
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数之前的代码中，sha256 Solidity函数
- en: is used to hash a leaf or nonleaf node. abi.encodePacked function is to
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 中。
- en: concatenate two elements and hash the merged result to get the parent
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`//声明叶子节点`'
- en: node. Once the hash_root is generated, it is saved to the root blockchain
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '` *@title 4个叶子节点的MerkleDemo*'
- en: and can be used to validate nodes in the Merkle tree as requested by the
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 梅克尔树演示程序位于GitHub上。
- en: users or operators.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 连接两个元素并哈希合并结果以获取父
- en: To check if a transaction represented by a leaf node is in the Merkle
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，hash_ab 和 hash_cd 组合成 hash_ab_cd。Hash_ab_
- en: 'tree, simply use the following checkMerkleTree function:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`string public leaf_a = "Alice sent 10 tokens to Bob";`'
- en: /**
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '* *Check if a leaf is valid*'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '` * 检查叶子是否有效*'
- en: '* *@param _leaf Leaf to check.*'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '353'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`/**'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层与以太坊2.0
- en: '* *@param _index Index of the leaf in the tree.*'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层与以太坊2.0
- en: '* *@param _rootHash Root of the tree.*'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '* *@param _proof Merkle proof showing the leaf is in*'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '*the tree.*'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '* *@return True if the leaf is in the tree, false otherwise.*'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '*function checkMerkleTree(*'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '*string memory _leaf,*'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '*uint256 _index,*'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '*bytes32 _rootHash,*'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '*bytes memory _proof*'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '*) public pure returns (bool) {*'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '*// Check _proof to be one or multiple bytes32*'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '*require(_proof.length % 32 == 0, "proof length not*'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '*valid.");*'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '*// Compute the merkle root.*'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '*bytes32 proofElement;*'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '*bytes32 parentHash = sha256(abi.encodePacked(_leaf));*'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '*uint256 index = _index;*'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '*//loops through each bytes32 element in the proof*'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '*for (uint256 i = 32; i <= _proof.length; i += 32) {*'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '*assembly {*'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '*proofElement = mload(add(_proof, i))*'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '*}*'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '*if (index % 2 == 0) { // leaf node is on the left*'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '*parentHash = sha256(abi.*'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '*encodePacked(parentHash, proofElement));*'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '*} else { //leaf node is on the right*'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '*parentHash = sha256(abi.*'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '*encodePacked(proofElement, parentHash));*'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '*}*'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '354'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '*index = index / 2; //Go to the next level*'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '*}*'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '*// If parentHash equal _rootHash, then it is validated.*'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '*return parentHash == _rootHash;*'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '*}*'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: The checkMerkleTree function takes a leaf node contract (i.e., a
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: transaction), an index that shows the location of the leaf node, a root
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: hash, and then a proof to compute if the root hash as computed by the
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: leaf node and proof matches what is recorded. If the computed hash root
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: and the recorded one match, the leaf and proof are considered as valid.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, the leaf node or the transaction that it represents is considered
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: as tempered.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: And then we have a testcasedemo function to verify leaf nodes c and d
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: 'for the untempered and tempered cases as shown in the following:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '*// test some leaf nodes in the Merkle tree*'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '*function testCasesdemo() public payable returns(string*'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '*memory, string memory, string memory, string memory){*'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '*//valid and invalid transaction message to be validated*'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '*string memory test_leaf_c = "Cathy sent 8 tokens*'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '*to David";*'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '*string memory test_leaf_d = "David sent 7 tokens*'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '*to Eric";*'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '*// These two are tempered and should not be validated*'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '*string memory test_leaf_c_tempered = "Cathy sent 100000*'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '*tokens to David";*'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '*string memory test_leaf_d_tempered = "David sent 100000*'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '*tokens to Eric";*'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '*// leaf_a, leaf_b, leaf_c, lead_d have index = 0, 1, 2,*'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '*3 respectively.*'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '355'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '*// Use test_index variable to represent index*'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '*uint test_index = 2;*'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '*// construct Merkle proof for leaf_c*'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '*bytes memory merkle_proof = abi.encodePacked(hash_d,*'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '*hash_ab);*'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '*bool result = checkMerkleTree(test_leaf_c, test_index,*'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '*hash_root, merkle_proof);*'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '*string memory return_leaf_c = string(abi.*'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '*encodePacked(test_leaf_c, ": ",result?"true":"false"));*'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '*//Do the same validation for tempered leaf_c*'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '*result = checkMerkleTree(test_leaf_c_tempered, test_*'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '*index, hash_root, merkle_proof);*'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '*string memory return_leaf_c_tempered =*'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '*string(abi.encodePacked(test_leaf_c_tempered, ":*'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '*",result?"true":"false"));*'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`",result?"true":"false"));`'
- en: '*// Do the same leaf_d, similar to leaf_c*'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`// Do the same leaf_d, similar to leaf_c`'
- en: '*test_index = 3;*'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`test_index = 3;`'
- en: '*merkle_proof = abi.encodePacked(hash_c, hash_ab);*'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`merkle_proof = abi.encodePacked(hash_c, hash_ab);`'
- en: '*result = checkMerkleTree(test_leaf_d, test_index, hash_*'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`result = checkMerkleTree(test_leaf_d, test_index, hash_`'
- en: '*root, merkle_proof);*'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`root, merkle_proof);`'
- en: '*string memory return_leaf_d = string(abi.*'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`string memory return_leaf_d = string(abi.*'
- en: '*encodePacked(test_leaf_d, ": ",result?"true":"false"));* *result = checkMerkleTree(test_leaf_d_tempered,
    test_*'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`encodePacked(test_leaf_d, ": ",result?"true":"false"));` *result = checkMerkleTree(test_leaf_d_tempered,
    test_`'
- en: '*index, hash_root, merkle_proof);*'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`index, hash_root, merkle_proof);`'
- en: '*string memory return_leaf_d_tempered =*'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`string memory return_leaf_d_tempered =`'
- en: '*string(abi.encodePacked(test_leaf_d_tempered, ":*'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`string(abi.encodePacked(test_leaf_d_tempered, ":*'
- en: '*",result?"true":"false"));*'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`",result?"true":"false"));`'
- en: '*//Return and output results*'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`//Return and output results`'
- en: '*return (return_leaf_c, return_leaf_c_tempered, return_*'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`return (return_leaf_c, return_leaf_c_tempered, return_`'
- en: '*leaf_d, return_leaf_d_tempered);*'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`leaf_d, return_leaf_d_tempered);`'
- en: '*}*'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '356'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '356'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层与以太坊2.0
- en: This test method constructs test_leaf_c and test_leaf_d transactions
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试方法构建了test_leaf_c和test_leaf_d交易
- en: that are valid. Also, it modified the two transactions to test_leaf_c_
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 那些是有效的。还将两个交易修改为test_leaf_c_
- en: tempered and test_leaf_d_tempered and changed the transferred token to
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 温和的test_leaf_d_tempered并将转移的代币更改为
- en: a larger amount. The proof for each node is also constructed and the index
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 一个较大的金额。每个节点的证明也构建了，索引
- en: for the transaction specified. The leaf node, index, root hash, and proof are
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 对于指定的交易。叶节点、索引、根哈希和证明是
- en: 'sent to checkMerkleTree function for verification. The result is shown here:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 发送到checkMerkleTree函数进行验证。结果如下：
- en: '*//Output of testCasedemo*'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`//Output of testCasedemo`'
- en: '*{*'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`{`'
- en: '*"0": "string: Cathy sent 8 tokens to David: true",*'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`"0": "string: Cathy sent 8 tokens to David: true",`'
- en: '*"1": "string: Cathy sent 100000 tokens to David: false",*'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`"1": "string: Cathy sent 100000 tokens to David: false",`'
- en: '*"2": "string: David sent 7 tokens to Eric: true",*'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`"2": "string: David sent 7 tokens to Eric: true",`'
- en: '*"3": "string: David sent 100000 tokens to Eric: false"*'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`"3": "string: David sent 100000 tokens to Eric: false"`'
- en: '*}*'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: The output shows that the untempered transactions are validated as
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示，未温和的交易被验证为
- en: true and the tempered ones are validated as false.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 为真，而温和的验证为假。
- en: '**Transaction Merkle Tree for Plasma MVP**'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '**Plasma MVP事务Merkle树**'
- en: In the last code example, we showed a standard Merkle tree with simple
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个代码示例中，我们展示了一个标准的Merkle树，带有简单的
- en: transaction messages of “User A sent x tokens to user B” recorded in the
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 记录了“用户A向用户B发送了x个代币”的交易消息。在这个
- en: leaf nodes. Although we are able to show that these transaction messages
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 叶节点。尽管我们能够显示这些交易消息
- en: can be proved with a root hash recorded in the root chain and a proof
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过根链中的根哈希和证明
- en: submitted by a user or operator, a simple message format is not sufficient
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 由用户或运营商提交，简单的消息格式是不够的
- en: enough to be used practically for plasma transactions. More complex
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 足够用于plasma交易的实际应用。更复杂的
- en: Merkle tree formats have been proposed for both fungible and nonfungible
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: Merkle树格式已经提出用于可替代和非可替代的
- en: tokens. In the following, we describe Plasma MVP and Plasma Cash.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 代币。在下面，我们描述了Plasma MVP和Plasma Cash。
- en: '357'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '357'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层与以太坊2.0
- en: Plasma MVP uses a standard Merkle tree that uses UTXO to record
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: Plasma MVP使用一个标准的Merkle树，使用UTXO来记录
- en: transactions and send the root hash to the root chain. Vitalik proposed
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 交易发送根哈希到根链。Vitalik提出了
- en: using the following unspent transaction output (UTXO) format for the
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下未花费交易输出（UTXO）格式进行
- en: 'Merkle leaf node:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 可替代的Merkle叶节点：
- en: '*[blknum1, txindex1, oindex1, sig1, # Input 1*'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`[blknum1, txindex1, oindex1, sig1, # Input 1`'
- en: '*blknum2, txindex2, oindex2, sig2, # Input 2*'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`blknum2, txindex2, oindex2, sig2, # Input 2`'
- en: '*newowner1, denom1, # Output 1*'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`newowner1, denom1, # Output 1`'
- en: '*newowner2, denom2, # Output 2*'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`newowner2, denom2, # Output 2`'
- en: '*fee]*'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`fee]`'
- en: This leaf node format uses two inputs and two outputs. The two
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 这个叶节点格式使用两个输入和两个输出。这两个
- en: inputs allow a user to combine two UTXOs to send to one address.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 输入允许用户将两个UTXO组合发送到一个地址。
- en: The two outputs allow a user to send partial UTXO to one user and the
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 两个输出允许用户将部分UTXO发送给一个用户和
- en: others to another user. In this leaf node format, blknum1, txindex1, and
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 发送给另一个用户。在这种叶节点格式中，blknum1、txindex1和
- en: oindex1 represent blockchain number, transaction index, and output
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`oindex1 represent blockchain number, transaction index, and output`'
- en: index for input 1\. This uniquely identifies the leaf node of the transaction
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 为输入1的索引。这唯一地标识了交易的叶节点
- en: Merkle tree. The sig1 is used to sign the transaction to ensure the sender
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 默克尔树。`sig1` 用于签署交易，以确保发送者
- en: is the owner of the UTXO. Similarly, blknum2, txindex2, oindex2, and
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 是UTXO的所有者。类似地，`blknum2, txindex2, oindex2,` 和
- en: sig2 represent the block number, transaction index, output index, and
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`sig2` 代表区块号码、交易索引、输出索引和'
- en: signature of input 2\. For the outputs, newowner1 and denom1 represent
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 输入2的签名。对于输出，`newowner1` 和 `denom1` 代表
- en: the amount of token to be allocated to the new owner 1\. And newowner2
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 要分配给新所有者1的代币数量。新所有者2
- en: and denom2 represent the amount of token to be allocated to the new
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`denom2` 代表要分配给新所有者的代币数量。'
- en: owner 2\. And finally, the fee in the transaction is the amount of token to
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '`owner 2`. 最后，交易中的费用是以代币数量表示的'
- en: pay for the plasma transaction.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 为Plasma交易支付。
- en: Using UTXO format for Merkle tree nodes, the transactions can be
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 使用UTXO格式对默克尔树节点进行编码，可以使交易
- en: uniquely identified, and there is no need to traverse the Merkle tree to
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一标识，无需遍历默克尔树来
- en: query other transactions. To make the query even more efficient, the
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 查询其他交易。为了使查询更加高效，the
- en: blknum, txindex, and oindex can be merged to become a uint256 integer.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`blknum, txindex,` 和 `oindex` 合并成一个uint256整数。'
- en: '358'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '358'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层与以太坊2.0
- en: This way, one integer can be used to uniquely identify a UTXO transaction
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，一个整数就可以用来唯一标识一个UTXO交易
- en: 'using the following conversion:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下转换：
- en: '*utxo_index = blknum*1000000000+txindex*10000+oindex;*'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`utxo_index = blknum*1000000000+txindex*10000+oindex;`'
- en: To retrieve blknum, txindex, and oindex from utxo_index, use the
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 `utxo_index` 检索 `blknum, txindex,` 和 `oindex` ，使用the
- en: 'following:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 如下：
- en: '*Blknum = utxo_index/1000000000;*'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`Blknum = utxo_index/1000000000;`'
- en: '*Txindex = (utxo % 1000000000)/10000;*'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`Txindex = (utxo % 1000000000)/10000;`'
- en: '*oindex = utxo_index - blknum*1000000000-txindex*10000;*'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`oindex = utxo_index - blknum*1000000000-txindex*10000;`'
- en: Using the UTXO format, Plasma MVP can record fungible tokens with
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 使用UTXO格式，Plasma MVP可以记录具有
- en: a UTXO format efficiently on the plasma chain. Users can also withdraw
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在Plasma链上高效地使用UTXO格式。用户还可以提现
- en: their assets or UTXO on the root chain. To submit a withdrawal request,
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 他们的资产或UTXO在根链上。要提交提现请求，
- en: simply send a utxo_index to identify the location of the UTXO, the
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 只需发送一个 `utxo_index` 来标识UTXO的位置，the
- en: transaction itself, the Merkle root, and the signature. The smart contract
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 交易本身、默克尔根和签名。智能合约
- en: will do the following to distribute the funds to the new owner of the
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 将执行以下操作，将资金分发给代币的新所有者
- en: 'root chain:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 根链：
- en: • Check that the sender for the withdrawal request is the
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: • 检查提现请求的发送者是
- en: same as the owner of the UTXO.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 与UTXO的所有者相同。
- en: • The transaction has been signed by the sender.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: • 交易已被发送者签署。
- en: • The output 1 and output 2 amount plus the transaction
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: • 输出1和输出2的数量加上交易
- en: fee is the same as the sum of input 1 and input 2\.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 费用等于输入1和输入2的总和。
- en: • The UTXO for the sender is not spent yet. This would
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: • 发送者的UTXO尚未花费。这会导致
- en: require some time to confirm.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一些时间来确认。
- en: Once all validity checking passes, the plasma smart contract on the
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有的有效性检查都通过了， plasma智能合约在
- en: root chain will distribute the assets on the root chain to the new owners.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 根链将把根链上的资产分发给新所有者。
- en: '359'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '359'
- en: '![](index-370_1.png)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![](index-370_1.png)'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层与以太坊2.0
- en: '**Transaction Merkle Tree for Plasma Cash**'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '**Plasma Cash的交易默克尔树**'
- en: With Plasma MVP mentioned earlier, users can send fungible assets through
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 前面提到的Plasma MVP，用户可以通过
- en: UTXO to the end users. However, the Plasma MVP does not solve the
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 将UTXO发送给最终用户。然而，Plasma MVP没有解决
- en: problem for nonfungible tokens. UTXO has a denominator for transactions
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非同质化代币的问题。UTXO有一个用于交易的分母。
- en: but does not require a unique ID. Plasma Cash is an extension of UTXO
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 但不需要唯一ID。Plasma Cash是UTXO的扩展
- en: where each token is assigned a serial number for record and transfer.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 每个代币都分配一个序列号以记录和转让。
- en: Although cash or money is normally considered as fungible, Plasma
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管现金或货币通常被认为是同质化的，但Plasma
- en: Cash is actually best for dealing with nonfungible tokens similar to ERC721
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，Cash最适合处理类似于ERC721的非同质化代币
- en: or assets that are uniquely identifiable.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 或唯一可识别的资产。
- en: To allow Merkle trees to work with nonfungible tokens, a sparse Merkle
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使默克尔树与非同质化代币一起工作，提出了一个稀疏的默克尔
- en: tree is proposed to ensure uniqueness of a token. The following diagram
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 树被提出以确保代币的唯一性。以下图表
- en: (Figure [9-5) is an illus](#p370)tration of how a sparse Merkle tree works for
    a nonfungible token.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: （图 [9-5) 展示了如何为一个非同质化代币构建一个稀疏的默克尔树](#p370) 。
- en: '***Figure 9-5\.** A Sparse Merkle tree example*'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '***图9-5\.** 一个稀疏Merkle树示例*'
- en: '360'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '360'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层和以太坊2
- en: For ERC721 NFT token, there is an NFT identifier to represent the
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 对于ERC721 NFT代币，有一个NFT标识符来表示
- en: tokenId to represent the index of the token. This uint32 tokenId can be
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: tokenId表示代币的索引。这个uint32 tokenId可以被
- en: casted to a smaller size integer such as uint32 and uint64\.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为较小整数，例如uint32和uint64\。
- en: A Merkle tree can be constructed to represent the tokenId of an NFT. In
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 可以构建一个Merkle树来表示NFT的tokenId。在
- en: this Merkle tree structure, echa token is represented by a leaf node. For a
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 此Merkle树结构，每个代币都由一个叶节点表示。对于一个
- en: tokenId of size n of uint, the number of leaf nodes will be 2^n. For example,
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: tokenId的大小为n的uint，叶节点的数量将是2^n。例如，
- en: the tokenId of uint8 will have a leaf number of 2^8=256\. Similarly, the
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: uint8的tokenId将有一个叶节点数为2^8=256\。同样地，the
- en: leaf numbers for uint16, uint32, and uint64 are 65536, 4294967296, and
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: uint16，uint32和uint64的叶节点数分别为65536，4294967296和
- en: 18446744073709551616, respectively.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 18446744073709551616，分别。
- en: The location of the leaf node is equivalent to the tokenId. The leaf
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 叶节点的位置相当于tokenId。叶
- en: indexes from left to right are arranged from 0 to (2^n-1). The content
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 从左到右的索引从0到（2^n-1）。内容
- en: of the leaf node is a byte32 data that is the hash of a transaction of NFT
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 叶节点的数据是一个byte32，是NFT交易的散列
- en: token. The Plasma transaction format is a tuple of (slot, previousBlock,
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 代币。Plasma交易格式是一个元组（槽，previousBlock，
- en: denomination, owner, hash). Here, slot is the same as tokenId that
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 面值，所有者，散列）。在此，槽与tokenId相同
- en: represents to the index of the leaf node, previousBlock is the block number
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 表示叶节点的索引，previousBlock是区块号码
- en: that contains this tokenId’s owner transfer, denomination is default to 1
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 包含此tokenId的所有权转移，面值默认为1
- en: for NFT case, owner is the new owner for this token transfer, and hash is
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: NFT案例中，所有者是此代币转移的新所有者，而散列是
- en: a sha256 or keccak256 hashing of the other parameters. Once the hash is
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 其他参数的sha256或keccak256散列。一旦散列
- en: computed, its value is inserted to the leaf node at the location of the slot
    or
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 计算，其值将插入到槽位置的叶节点中或
- en: tokenId.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: tokenId。
- en: For a tokenId range of 0 to 2^n-1, there needs to be n level of nodes
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 对于0到2^n-1的tokenId范围，需要有n级节点
- en: from root node to leaf node. If we label the leaf nodes to be at level 0, then
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 从根节点到叶节点。如果我们把叶节点标记为第0层，那么
- en: the root node will be at level n-1\. For tokenId with size of uint16, there
    will
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 根节点将在级别n-1\。对于大小为uint16的tokenId，将
- en: be 16 layers, and uint64 will have 64 layers.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 将是16层，uint64将有64层。
- en: The merkle tree can be initialized as an empty Merkle tree where the
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: Merkle树可以初始化为一个空Merkle树，其中
- en: leaf nodes are all hash of null.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 叶节点都是null的散列。
- en: For level zero, the hash content of the node will be hash_null = H(null)
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 对于零级，节点的散列内容将是hash_null = H(null)
- en: = sha256(null)=e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: = sha256(null)=e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934
- en: ca495991b7852b855\.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: ca495991b7852b855\.
- en: Level 1 hash_null_null = H(H(null), H(null))
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 第一级散列_null_null = H(H(null)，H(null))
- en: Level 2 hash is hash_null_null_null_null = H(H(H(null), H(null)),
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 第二级散列是hash_null_null_null_null = H(H(H(null)，H(null)))
- en: H(H(null), H(null)))
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: H(H(null)，H(null)))
- en: '361'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '361'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层和以太坊2
- en: And so on until it gets to the root of the Merkle tree.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 直到它到达Merkle树的根节点。
- en: Here, H(x) is a hash function such as sha256 or keccak256 that takes a
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 在此，H(x)是如sha256或keccak256的散列函数，它接受一个
- en: string as input and produces a bytes32 hash. H(x, y) is a function that packs
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串作为输入并产生一个bytes32散列。H(x，y)是一个函数，将
- en: x and y and then gets its hash.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: x和y然后获取其散列。
- en: These precalculated values can be used for the proof computation to
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 这些预计算的值可以用于证明计算以
- en: improve efficiency.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 提高效率。
- en: When there is a transaction, a bytes32 hash will be calculated and
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 交易时，将计算一个bytes32散列
- en: stored in a leaf node. Accordingly, all the parent nodes of this leaf node
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在叶节点中。相应地，此叶节点的所有父节点
- en: will be updated up to the root node of the Merkle tree. If there are n levels
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 将更新到Merkle树的根节点。如果有n个级别
- en: for a Merkle tree, each update of a leaf node will trigger n-1 updates to the
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Merkle树，每个叶节点的更新将触发n-1次更新到
- en: parent nodes.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 父节点。
- en: Each block will have a Merkle tree. Since the number of transactions
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 每个块将有一个Merkle树。由于交易数量
- en: for each block is much less than the number of possible tokenIds, the
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个块的交易数量远远少于可能的tokenIds数量，the
- en: Merkle tree will be sparsely populated. Majority of the nodes will be null.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: Merkle树将变得稀疏。大多数节点将是null。
- en: The parent nodes that go from a leaf node to the root node will be the
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 从叶节点到根节点的父节点将是
- en: default value calculated in the preceding table and can be represented by a
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 默认值计算在前面的表中，可以由一个
- en: bit rather than a full 32-byte hash. The fact that nodes that are affected with
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 位而不是完整的32字节哈希。节点受到影响的事实
- en: transactions are scattered in the Merkle tree gives the storage structure the
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 交易分布在Merkle树中，赋予了存储结构
- en: name of sparse Merkle tree.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 稀疏Merkle树的名字。
- en: Different from the Plasma MVP, the proof for Plasma Cash uses two
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 与Plasma MVP不同，Plasma Cash的证明使用两个
- en: 'lists: one is a simplified bit list for the precalculated hashes of null or
    its'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 列表：一个是简化后的位列表，用于预计算的null或其
- en: parents; another one is the concatenated bytes32 hash list. The reason for
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 父节点；另一个是字节32的哈希列表。之所以这样是因为
- en: using a bit list is to save storage space and computation effort as most of
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 使用位列表的目的是节省存储空间和计算努力，因为大多数
- en: the nodes are not altered and have predefined values.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 节点没有被修改并且有预定义的值。
- en: The mechanism for providing proofs for a leaf node for Plasma Cash
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 为Plasma Cash提供叶节点的证明
- en: is different from that of Plasma MVP. In MVP Merkle tree, a proof is a list
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 与Plasma MVP不同。在MVP Merkle树中，证明是一个列表
- en: of node hashes that can be used to compute with a leaf node to derive the
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 节点哈希可以用来与叶节点计算
- en: root node hash. It is normally the concatenated list of hashes by the sibling
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 根节点哈希。通常是由兄弟
- en: nodes of the target leaf node or its parent nodes. For Plasma Cash, since it
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 目标叶节点或其父节点的节点。对于Plasma Cash，由于它
- en: is a sparse Merkle tree, most of the sibling nodes will be null or predefined.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 是一个稀疏的Merkle树，大多数兄弟节点将是null或预定义的。
- en: These nodes can be presented by a bit=0 to mean that the default hash
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 这些节点可以用位=0来表示默认的哈希
- en: value should be used. If the bit is set to 1, then the changed hash value
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 值应该被使用。如果位被设置为1，那么改变后的哈希值
- en: '362'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '362'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 层2与以太坊2
- en: should be used. In the simple sparse Merkle tree shown earlier, for the
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 应该被使用。在前面的简单稀疏Merkle树中，对于
- en: tokenId=0 leaf_a node, the proof is hash_b and hash_c_d. Since hash_b is
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 令牌ID=0叶节点a，证明是hash_b和hash_c_d。由于hash_b是
- en: hash_null, which is already known, the proof can have a bit proof showing
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '`hash_null`的hash，这已经是已知的，证明可以有一个位证明显示'
- en: 01 uses first bit=0 to mean that the first hash is hash_null, which is already
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 01使用第一个位=0来表示第一个哈希是hash_null，这已经是
- en: known, and the second bit is 1 to mean that the modified hash should
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 已知，第二个位是1，表示修改后的哈希应该
- en: be used. This cuts down the proof size almost by half. If there are more
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用。这几乎将证明大小减半。如果更多
- en: nodes and the data is sparsely populated, the proof size can be decreased
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 节点和数据是稀疏的，证明大小可以减小
- en: dramatically.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 显著地。
- en: Overall, with sparse Markle trees, the proof size is decreased, and the
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，有了稀疏的Markle树，证明的大小就会减小，
- en: computational workload is decreased as well.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 计算工作量也减少了。
- en: There are many alterations in implementing plasma layer 2
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 在实施plasma层2中有许多更改
- en: technology. With both plasma and state channels, layer 1 does not have
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 技术。有了plasma和状态通道，层1不需要
- en: full information about layer 2\. Therefore, the security of plasma or state
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 有关层2的完整信息。因此，plasma或状态
- en: channel depends on layer 2 providing proof and transactions to the layer.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 通道取决于层2提供证明和交易给层1。
- en: This dependency on layer 2 limits the usage of state channel and plasma.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 对层2的这种依赖限制了状态通道和plasma的使用。
- en: The third type of layer 2 technology is called rollup. This is different
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种类型的层2技术被称为汇总。这与
- en: from plasma or state channels. In layer 2 rollup, the transactions are
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 来自plasma或状态通道。在层2汇总中，交易是
- en: actually repackaged and then performed in the layer 1 blockchain. With
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上被重新打包然后在层1区块链上执行。有了
- en: rollup, the layer 1 blockchain no longer needs to ask users or layer 2
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 汇总，层1区块链不再需要询问用户或层2
- en: operators for proof and transaction data. In the following, we describe how
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 操作员用于证明和交易数据。在下面，我们描述了如何
- en: rollup works.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 汇总工作。
- en: '**Layer 2 Rollup**'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '**层2汇总**'
- en: In previous sections, we discussed layer 2’s state channel and plasma. State
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几节中，我们讨论了层2的状态通道和plasma。状态
- en: channel has the advantage of only interacting with layer 1 when opening or
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 通道在打开或关闭时只与层1交互
- en: closing the state channel. However, state channels will require participants
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭状态通道。然而，状态通道将需要参与者
- en: to be enrolled in the channel and cannot send transactions to an arbitrary
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 被登记在通道中，不能向任意
- en: address. Layer 2 plasma solved this problem by using operators to send
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 地址。第二层 Plasma 通过使用运营商发送
- en: layer 2 transaction Merkle tree root to the layer 1 storage. However, plasma
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 第二层交易 Merkle 树根到第一层存储。然而，Plasma
- en: layer 2 has the limitation of relying on layer 2 to store and provide proofs
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 第二层依赖于第二层来存储和提供证明
- en: and challenges. In this section, we introduce a third layer 2 technology
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 和挑战。在本节中，我们介绍了一种第三层 2 技术
- en: '363'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '363'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 第 9 章 第二层与以太坊 2
- en: called rollup. Rollup is a technology that repackages transactions in layer
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 称为 Rollup。Rollup 是一种将第一层中的交易重新打包的技术
- en: 2 and sends them as a batch transaction to layer 1\. The parameters in the
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 2 并将它们作为批量交易发送到第一层。参数
- en: batch transactions are optimized to save gas fee and increase scalability.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 批量交易被优化以节省燃气费并提高可扩展性。
- en: There are two kinds of rollup technology that are being developed. One
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 目前正在开发中的有两种 Rollup 技术。一种
- en: is using fraud proof that allows participants to challenge layer 2 to layer
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 正在使用允许参与者挑战第二层到第一层的
- en: 1 transactions. Typical fraud proof solutions are called optimistic layer 2
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 1 交易。典型的欺诈证明解决方案被称为乐观的第二层
- en: solutions such as Arbitrum, Polygon, and Optimism. Another kind is called
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案，如 Arbitrum、Polygon 和 Optimism。另一种被称为
- en: validity proof that uses validation methods such as zero knowledge proof
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 使用零知识证明等验证方法的验证证明
- en: to interact between layer 2 and layer 1\. Validity proof layer 2 solutions
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二层和第一层之间进行交互。第二层解决方案的有效性证明
- en: include zk-rollup, zksync, etc.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 包括 zk-rollup、zksync 等。
- en: '**Optimistic Layer 2**'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '**乐观的第二层**'
- en: An overview of optimistic rollup is shown in the following diagram of
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表概述了乐观 Rollup 的内容
- en: Figur[e 9-6](#p375). The top layer shows the layer 1 blockchain such as Ethereum
    mainnet. An optimistic rollup smart contract is deployed to the layer 1
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 图[9-6](#p375)。最上面的一层显示了如以太坊主网这样的第一层区块链。一个乐观 Rollup 智能合约被部署到第一层
- en: mainnet. There are several major functions for the rollup smart contract.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 主网。Rollup 智能合约有几个主要功能。
- en: For example, the smart contract has a function to receive transactions from
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，智能合约有一个接收来自
- en: layer 2 blockchain in a Merkle tree format and process these transactions
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 第二层区块链以 Merkle 树格式，并处理这些交易
- en: on layer 1\.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一层。
- en: On layer 2, there is a similar blockchain built with OVM (Optimistic
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二层，有一个使用 OVM (乐观
- en: Virtual Machine). OVM supports smart contracts and can process
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机)。OVM 支持智能合约，并可以处理
- en: transactions. The transactions on layer 2 are arranged based on the
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 交易。第二层的交易是根据
- en: transaction time. The ordering of transactions is done by sequencers. The
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 交易时间。交易的排序由序列器完成。交易
- en: ordering of transactions is very important as there might be dependencies
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 交易排序非常重要，因为可能存在依赖关系
- en: among these transactions.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 这些交易之间。
- en: When transactions in layer 2 are repackaged and rolled up to layer 1,
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 当第二层的交易被重新打包并打包到第一层时，
- en: there will be a wait period as layer 1 does not have enough information
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 因为第一层没有足够的信息
- en: to prove that the transactions are valid. During this wait period, the
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 证明交易有效。在这段等待期间，
- en: optimistic rollup smart contract allows third parties to provide fraud
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 乐观 Rollup 智能合约允许第三方提供欺诈
- en: proof to disqualify a rollup and to claim reward tokens. The reward to
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 提供证明以取消 rollup 的资格并领取奖励代币。对于
- en: '364'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '364'
- en: '![](index-375_1.png)'
  id: totrans-489
  prefs: []
  type: TYPE_IMG
  zh: '![](index-375_1.png)'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 第 9 章 第二层与以太坊 2
- en: fraud prover comes from the rollup transaction stakes deposited by
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 欺诈证明来自 rollup 交易中抵押的
- en: the aggregators. If an aggregator provides valid faulty proof, the stake
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合器。如果聚合器提供了有效的错误证明，抵押
- en: deposited by the aggregator will be forfeited.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 存放在聚合器中的资产将被没收。
- en: '***Figure 9-6\.** Overview of Optimistic Rollup*'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '***图 9-6。** 乐观 Rollup 概述*'
- en: Since optimistic rollup relies on fraud proof to ensure that the
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 由于乐观 Rollup 依赖于欺诈证明来确保
- en: transactions in layer 2 are properly propagated to layer 1, there is an
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 第二层中的交易会被正确传播到第一层，第二层中有一个
- en: overhead of several days to one week for the rollup transactions to be
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 几天的开销，Rollup 交易才能最终
- en: finalized in layer 1\. This means that to claim assets in layer one, users
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一层最终确定。这意味着，要在一层中领取资产，用户
- en: will need to wait for up to one week to clear all the challenges posted
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 需要等待最多一周的时间来解决所有提出的
- en: on the rollups. This is a bottleneck for optimistic rollup. To overcome
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 在合证明上。这对于乐观合来说是一个瓶颈。为了克服
- en: the limitation of fraud proof mechanism, the validation proof method is
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 欺诈证明机制的限制，验证证明方法是
- en: proposed to allow transactions to use rollup proof to prove their validity.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 提议允许交易使用合证明来证明其有效性。
- en: In the following, we describe zk-SNARK (Zero-Knowledge Succinct Non-
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 下面，我们描述了zk-SNARK（零知识简洁非交互式知识证明）。
- en: interactive Argument of Knowledge) for validation proof rollup.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 非交互式知识证明）进行验证证明合。
- en: '365'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '365'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层和以太坊2.0
- en: '**zk-SNARK Layer 2**'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '**zk-SNARK 第2层**'
- en: zk-SNARK is a layer 2 rollup scalability solution that uses zero knowledge
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: zk-SNARK是一种使用零知识的第2层合扩展性解决方案
- en: proof to ensure the rollup transactions from layer 2 to layer 1 are always
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 证明以确保从第2层到第1层的合交易始终
- en: in a valid state. Zero Knowledge proof is a technology for a party to prove
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 在有效状态下。零知识证明是一个技术，让一方证明
- en: that a statement is true without revealing what information is processed
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 在不透露处理了哪些信息的情况下证明一个陈述是真实的。
- en: and how the conclusion is derived. zk-SNARK stands for Zero-Knowledge
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 以及结论是如何得出的。zk-SNARK代表零知识
- en: Succinct Non-interactive Argument of Knowledge. zk-SNARK is a special
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 简洁非交互式知识证明。zk-SNARK是一种特殊的
- en: 'zero knowledge proof whose mechanism has the following characteristics:'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 零知识证明的机制具有以下特点：
- en: '**Succinct** – The proof is short and easily verifiable.'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '**简洁** – 证明短小且容易验证。'
- en: This is best for onchain verification, where the gas
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于链上验证来说是最合适的，在那里燃气
- en: costs for the Ethereum, and other networks are
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: Ethereum和其他网络的成本
- en: expensive and many nodes will need to verify the
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 昂贵，许多节点需要验证
- en: same statement.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的陈述。
- en: '**Non-interactive** – Proof generation and verification'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '**非交互式** – 证明生成和验证'
- en: do not require users’ manual interventions.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要用户的手动干预。
- en: The offchain applications can programmably
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 链下应用可以通过编程方式
- en: generate proofs, and onchain smart contracts can
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 生成证明，链上智能合约可以
- en: verify proofs.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 验证证明。
- en: '**Argument of Knowledge** – Meaning that the'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '**知识证明** – 意味着'
- en: statements can be confirmed or falsified with zero
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 陈述可以零知识地得到证实或证伪。
- en: knowledge proof system. The communications
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 知识证明系统。通信
- en: parties gain knowledge of the other party without
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 各方在不泄露对方知识的情况下获得对方知识。
- en: the need to disclose the private information and
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 披露私有信息的需求和
- en: knowledge.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 知识。
- en: Zero knowledge proof is viewed as no private knowledge leak proof.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 零知识证明被视为没有隐私知识泄露的证明。
- en: It means that a person can prove that a knowledge is possessed without
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着一个人可以证明拥有某个知识，而不需要
- en: revealing it. Normally, in order to convince another person that you know
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说服另一个人你知道
- en: something, you have to reveal that knowledge. Zero Knowledge proof is a
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你知道某些东西，你必须透露这个知识。零知识证明是一种
- en: privacy-enhanced crypto computation that can prove beyond reasonable
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 增强隐私的加密计算，可以零知识地证明
- en: doubt about a statement without leaking that statement.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 对一个陈述产生怀疑而不泄露该陈述。
- en: '366'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '366'
- en: '![](index-377_1.png)'
  id: totrans-538
  prefs: []
  type: TYPE_IMG
  zh: '![](index-377_1.png)'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层和以太坊2.0
- en: 'Example: Alice wants to show to Bob that she knows how to do square'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：爱丽丝想向鲍勃展示她知道如何进行平方
- en: root. If the test is just to supply an input and an output such as input=16
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 假设测试只是提供一个输入和一个输出，比如输入=16
- en: and output=4, the third party can know this is about square root. If the
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 假设输出=4，第三方可以知道这是关于平方根的。如果实际处理的信息与此不同，
- en: input and output are hashed, then the third party will not know that the
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 输入和输出都被哈希处理，这样第三方就不知道实际处理了什么信息。
- en: rule of square root is used.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 使用了平方根法则。
- en: Zero knowledge proof can be used in privacy computing and layer
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 零知识证明可以用于隐私计算和层
- en: 2 rollup. With zero knowledge proof such as zk-SNARK, the rollup
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 2层合。利用零知识证明如zk-SNARK，可以实现层合
- en: transactions between layer 1 and layer 2 can be validated without the need
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 第1层和第2层之间的交易可以无需需要
- en: 'of third-party challenges. In the following figure (Figure [9-7](#p377)), we
    explain who zk-SNARK can be used for layer 2 rollup solution:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方挑战。在下面的图表（图[9-7](#p377)）中，我们解释了zk-SNARK可以用于哪种层合解决方案：
- en: '***Figure 9-7\.** zk-SNARK work flow*'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9-7** zk-SNARK工作流程*'
- en: '367'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '367'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层和以太坊2.0
- en: To use zero knowledge proof, first is to define the tasks. This could
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 使用零知识证明，首先需要定义任务。这可能
- en: be proof a person is over a certain age, a person possesses a password, a
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 可以是证明一个人超过一定年龄，一个人拥有密码，一个人
- en: transaction is signed with a private key, the transactions in a Merkle tree
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 交易用私钥签名，Merkle树中的交易
- en: are all valid, etc. Then variables will need to be defined, and functions will
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 都是有效的等。然后需要定义变量，并将函数
- en: need to be written to ensure the proofing conditions are met. For example,
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 需要编写以确保证明条件得到满足。例如，
- en: 'the functions for the preceding tasks will be as follows:'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 先前任务的函数将如下所示：
- en: //Define a function to check the age is over certain age such as
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: //定义一个函数来检查年龄是否超过一定年龄，例如
- en: drinking age
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 饮酒年龄
- en: function proveAge(private age) {
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 函数证明年龄（私有年龄）{
- en: const Drinking_Age = 21;
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 定义饮酒年龄为21；
- en: require (age >= Drinking_Age);
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 要求（年龄 >= 饮酒年龄）；
- en: '}'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: //Define a function for checking a person possesses a password by
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: //定义一个函数，通过
- en: checking the hash of the password matches a known value
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 检查密码哈希是否与已知值匹配
- en: function provePassword(private string password, public
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 函数证明密码（私有字符串密码，公共
- en: bytes32 hash) {
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: bytes32哈希）{
- en: bytes32 password_hash_calculated = sha256(password);
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: bytes32密码哈希计算 = sha256（密码）；
- en: require( password_hash == password_hash_calculated);
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 要求（密码哈希 == 密码哈希计算）；
- en: '}'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: Once the knowledge statement functions are defined, they will need
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦知识声明函数被定义，它们将需要
- en: to be simplified or reduced to meet the zero knowledge proof format.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 以满足零知识证明格式。
- en: This is because the zero knowledge proof has some requirements such as
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为零知识证明有一些要求，如
- en: not revealing any private variables and needing to be stateless. There are
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 不透露任何私有变量并且需要是无状态的。有一些
- en: many ways to do this. One of the ways is to rewrite the functions to meet
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多方法可以做到这一点。其中一种方法是重写函数以满足
- en: the R1CS (rank-1 constraint systems) format. This is done by writing the
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: R1CS（等级1约束系统）格式。这通过编写
- en: functions using circuit models. Once R1CS are defined, a QAP (Quadratic
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 使用电路模型编写函数。一旦R1CS被定义，一个QAP（二次
- en: Arithmetic Program) is used to represent the knowledge statement. Using
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 算术程序）用于表示知识陈述。使用
- en: QAP, the system can generate a proof key and a verification key. The proof
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: QAP，系统可以生成一个证明密钥和一个验证密钥。证明
- en: key is given to a prover, and the verification key is given to a verifier.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥交给证明者，验证密钥交给验证者。
- en: '368'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: '368'
- en: '![](index-379_1.png)'
  id: totrans-582
  prefs: []
  type: TYPE_IMG
  zh: '![](index-379_1.png)'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层与以太坊2.0
- en: As shown in the following figure (Figure [9-8](#p379)), the prover uses the
    proof key, public inputs, and witness to generate a proof. The proof is then sent
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示（图[9-8](#p379)），证明者使用证明密钥、公共输入和证人生成证明。然后将证明发送
- en: to the verifier. The verifier uses public knowledge or public variable data
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 给验证者。验证者使用公共知识或公共变量数据
- en: and the proof to verify that the knowledge statement is true or false.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 以及证明知识陈述是真的还是假的。
- en: '***Figure 9-8\.** zk-SNARK proof and verification*'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: '***图9-8。** zk-SNARK证明与验证*'
- en: Fully understanding zero knowledge proof and zk-SNARK requires a
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 完全理解零知识证明和zk-SNARK需要一个
- en: strong mathematical background. Here, we summarize conceptually how
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 强大的数学背景。在这里，我们从概念上总结
- en: 'zk-SNARK works:'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: zk-SNARK工作原理：
- en: • Zero knowledge proof allows two parties to verify a
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: • 零知识证明允许两个方验证一个
- en: statement without disclosing private information.
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 声明而不泄露私人信息。
- en: • zk-SNARK is a subset of zero knowledge proof that
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: • zk-SNARK是零知识证明的一个子集，
- en: meets the succinct, non-interactive, and augment of
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 满足简洁、非交互式和增强的
- en: knowledge requirements.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 知识要求。
- en: • Layer 2 zk-rollup uses zk-SNARK because this is
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: • 第2层zk-rollup使用zk-SNARK，因为这是
- en: computationally feasible onchain. The heavy duty
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 在链上计算是可行的。重型
- en: computing is carried out offchain to generate a proof.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 计算是在链下进行的，以生成一个证明。
- en: The verification step is efficient and succinct and can
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 验证步骤高效且简洁，并能
- en: be carried out onchain with smart contracts.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 通过智能合约在链上执行。
- en: '369'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: '369'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层与以太坊2.0
- en: • To design a zk-SNARK, the first thing is to define a
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: • 设计zk-SNARK的第一件事是定义一个
- en: proof task. This task is to define a function to verify a
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 证明任务。这个任务是定义一个函数来验证一个
- en: statement.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 声明。
- en: • The defined verification function is then flattened and
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: • 定义的验证函数然后被压平并且
- en: reduced to multiple steps of arithmetic operations.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 减少为多个算术操作步骤。
- en: Sometimes, these arithmetic operations are called zero
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，这些算术操作被称为零
- en: knowledge circuits. The circuits can take private and
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 知识电路。电路可以采取私人和
- en: public inputs and generate a corresponding output.
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 公共输入并生成相应的输出。
- en: • Once an arithmetic circuit is defined, a proof key and
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: • 一旦定义了算术电路，证明密钥和
- en: a verification key can be generated through a setup
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过设置生成一个验证密钥
- en: process. The proof key is given to a prover, and the
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 过程。证明密钥交给证明者，然后
- en: verification key is given to a verifier. The verifier can be
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 验证密钥交给验证者。验证者可以是
- en: a smart contract.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约。
- en: • The prover can do offchain computation with a proof
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: • 证明者可以带证明进行离线计算
- en: key and generate a proof.
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥和生成证明。
- en: • The proof and the public data are then sent to a
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: • 证明和公共数据随后发送到一个
- en: verification smart contract to verify.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 验证智能合约以验证。
- en: zk-SNARK is still under development, and it is foreseeable that more
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 零知识证明（zk-SNARK）仍在开发中，可以预见会有更多
- en: research will generate better zk-SNARK mechanisms for layer 2 rollup.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 研究将生成更好的零知识证明（zk-SNARK）机制，用于第2层滚动
- en: '**Ethereum 2**'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: '**以太坊2.0**'
- en: '**Major Changes in Ethereum 2**'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: '**以太坊2.0的主要变化**'
- en: Both Ethereum 2 and layer 2 are developed to solve scalability problems in
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊2.0和第2层都是为了解决区块链的可扩展性问题而开发的
- en: Ethereum mainnet and improve energy efficiency. In fact, sometimes, the
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊主网并提高能源效率。实际上，有时，
- en: layer 2 solution is jokingly called Ethereum 1.5\. Ethereum 2 is a promising
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 第2层解决方案开玩笑地被称为以太坊1.5。以太坊2.0是一个有前景的
- en: network improvement to Ethereum 1 with the following new components
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 网络改进到以太坊1.0主网，以下是新组件
- en: and features.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 和特性。
- en: '370'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: '370'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层与以太坊2.0
- en: '**Transferring from POW to POS**'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '**从POW到POS的转移**'
- en: Compared with proof-of-work (POW) consensus, proof of state (POS) has
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 与工作量证明（Proof-of-Work，POW）共识相比，权益证明（Proof-of-Stake，POS）具有
- en: the advantages of energy efficiency, higher scalability, better incentive, and
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 能量效率、更高的可扩展性、更好的激励机制和
- en: shorter block time. POS allows one system to have additional computing
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 更短的区块时间。POS允许一个系统具有额外的计算
- en: power to do extra work such as hosting multiple staking accounts or
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 进行额外的计算工作，如托管多个质押账户或
- en: running services to connect with beacon chains or sidechains.
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 运行服务以连接信标链或侧链。
- en: '**Beacon Chain**'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: '**信标链**'
- en: Ethereum beacon chain is an essential proof-of-stake blockchain that
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: Ethereum 信标链是一个基本的权益证明（Proof-of-Stake，POS）区块链，
- en: connects stakers and shards. The stakers are from Ethereum 1 mainnet
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 连接质押者和分片。质押者来自以太坊1主网
- en: accounts that send their ether asset to a staking smart contract to
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 将他们的以太币资产发送到质押智能合约的账户
- en: participate in the beacon chain block generations. The shards are storage
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 参与信标链区块生成。分片是存储
- en: and computational blockchains that expand the features of EVM and state
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 和计算能力，扩展EVM和状态
- en: storage of the mainnet.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 主网存储。
- en: '**Sharding**'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: '**分片**'
- en: Sharding is a new architecture of Ethereum blockchains that allow a
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 分片是以太坊区块链的新架构，允许一个
- en: hierarchical set of blockchains to process transactions independently
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 分层区块链集合，用于独立处理交易
- en: and then aggregate block hashes to its parent shard and eventually store
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 然后聚合区块哈希到其父分片，并最终存储
- en: the hash on the beacon chain. Sharding allows a cluster of blockchains
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 在信标链上的哈希。分片允许区块链集群
- en: to process transactions and execute smart contracts simultaneously and
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 同时处理交易和执行智能合约，
- en: hence dramatically improve the scalability of Ethereum 1 mainnet.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 从而显著提高了以太坊1.0主网的可扩展性。
- en: '**Ethereum 2 Architectural Overview**'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: '**以太坊2.0架构概述**'
- en: Ethereum 2 is an extension of Ethereum 1 with added beacon chains and
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊2.0是对以太坊1.0的扩展，增加了信标链和
- en: sharding chains. The following diagram (Figur[e 9-9) sho](#p382)ws an overview
    of Ethereum 2’s architecture.
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 分片链。以下图表（图9-9）展示了以太坊2.0架构的概述。
- en: '371'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: '371'
- en: '![](index-382_1.png)'
  id: totrans-655
  prefs: []
  type: TYPE_IMG
  zh: '![](index-382_1.png)'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层与以太坊2.0
- en: '***Figure 9-9\.** Ethereum 2 topology and workflow*'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: '***图9-9.* 以太坊2.0的拓扑和工作流程*'
- en: There are three blockchains in Ethereum 2 including the legacy
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊2中包括遗留的
- en: Ethereum mainnet. The Ethereum mainnet provides the staking assets for
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊主网。以太坊主网为
- en: Ethereum 2’s proof-of-stake mechanism. The beacon chain is a proof-of-
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: Ethereum 2的权益证明机制。信标链是一个权益证明的
- en: stake-based blockchain that records the staking information, generates
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 基于质押的区块链记录质押信息，生成
- en: random numbers, proposes validators, and connects with sharding
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 随机数，提出验证者，并与分片
- en: blockchain to record the data and transaction Merkle tree of sharding
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链记录分片的数据显示和交易Merkle树
- en: blockchains. Then there are also multiple sharding blockchains that are
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 然后还有多个分片区块链，
- en: used to store Ethereum 2 data and carry out EVM computations and
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 用于存储以太坊2数据并执行EVM计算和
- en: process transactions.
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 处理交易。
- en: To generate and validate blocks for the three types of blockchains
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 生成和验证三种区块链类型的块
- en: mentioned earlier for Ethereum 2, there are four types of client nodes that
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 前述提到的以太坊2，有四种客户端节点类型，
- en: we want to mention. The first one is the Ethereum 1 client nodes such as
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要提及的。第一个是以太坊1客户端节点，如
- en: geth client that generate blocks for Ethereum 1 mainnet. The second one
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: geth客户端生成以太坊1主网块。第二个是以太坊2
- en: is beacon nodes that propose blocks for the beacon chain. The third one is
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 是信标节点为信标链提出块。第三个是以太坊1
- en: validation nodes for the beacon chain. The validator node will generate or
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 验证节点为信标链。验证节点将生成或
- en: validate beacon chain blocks through beacon chain nodes. Then the fourth
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 通过信标链节点验证信标链块。然后第四
- en: '372'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: '372'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层和以太坊2
- en: one is the sharding nodes that are responsible for blocks of the sharding
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 一个是以太坊分片节点，负责分片块
- en: blockchains.
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链。
- en: The blockchain nodes mentioned earlier connect and communicate
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 前述提到的区块链节点连接和通信
- en: with one another through peer-to-peer or RCP protocols. Several
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点对点或RCP协议相互通信。几个
- en: interactions/edges in the diagram are labeled as A, B, C, D, E, F, and G.
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 图中的交互/边被标记为A、B、C、D、E、F和G。
- en: The edge A is an interaction of an account owner wallet with Ethereum
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 边A是一个账户所有者钱包与以太坊
- en: 1 node. The interaction allows a user to construct and sign a transaction
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 1个节点。这种交互允许用户构建并签署一个交易
- en: in a wallet and then send the signed translation to an Ethereum 1 client
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: 在钱包中，然后将签署的翻译发送给以太坊1客户端
- en: node. The client node then validates the transaction and packages to a
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 节点。客户端节点然后验证交易并将交易打包给一个
- en: new block. In the diagram, the wallet is only connected to an Ethereum 1
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 新块。在图中，钱包只连接到一个以太坊1
- en: node as there is currently no Ethereum 2 wallet to interact with the beacon
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 节点，因为目前没有以太坊2钱包与信标节点交互。
- en: chain yet.
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 链。
- en: The edge B represents Ethereum 1 client nodes to view Ethereum 1
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 边B代表以太坊1客户端节点查看以太坊1
- en: mainnet blocks and transactions or write blocks to the blockchain. In the
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 主网块和交易或向区块链写入块。在
- en: context of Ethereum 2, the interaction B is mainly for a staker to stake an
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊2的上下文中，交互B主要是让质押者质押一个
- en: asset to the Ethereum 2 staking smart contract deployed on Ethereum 1
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 资产转移到以太坊2在以太坊1上部署的质押智能合约
- en: mainnet. Once an asset is deployed as a stake, the smart contract function
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 主网。一旦资产作为质押部署，智能合约功能
- en: will emit an event to show the staking address and amount.
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 将发出一个事件，显示质押地址和金额。
- en: The edge C is an interaction between an Ethereum 1 client node and
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 边C是以太坊1客户端节点与
- en: a beacon node. The staking information in Ethereum 1 blockchain should
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 一个信标节点。以太坊1区块链中的质押信息应该
- en: be visible to the beacon nodes. Beacon nodes use RPC to connect with a
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 可见于信标节点。信标节点使用RPC与一个
- en: client node and get all the events emitted by the staking smart contract.
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端节点和获取由质押智能合约发出的所有事件。
- en: When the new staking information is retrieved from Ethereum mainnet,
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 当从以太坊主网检索新的质押信息时，
- en: the beacon node generates a block to keep the new staking information.
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 信标节点生成一个块以保持新的质押信息。
- en: The edge D is for interaction between the beacon nodes and Sharding
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 边D用于信标节点和分片节点之间的交互。
- en: nodes. The edge E is for sharding nodes to propose blocks for sharding
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 节点之间的边E用于分片节点提出分片块。
- en: blockchain. Sharding nodes are to carry out the data storage and
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链。分片节点负责执行数据存储和
- en: transaction processing.
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 交易处理。
- en: The edge F is for interactions and communications between a validator
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 边F用于验证节点之间的交互和通信。
- en: node and a beacon node. Proof-of-Stake (POS) miners need to run client
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 节点和信标节点之间的交互。权益证明（POS）矿工需要运行客户端
- en: nodes to request tasks from the beacon chain, package transactions,
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 节点请求信标链的任务，包装交易，
- en: validate blocks, and propose blocks. Ethereum 2 architecture separates
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 验证块，并提出块。以太坊2.0架构将
- en: '373'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: '373'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层和以太坊2
- en: beacon nodes from validator nodes. The beacon node does the work of
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 信标节点从验证节点。信标节点执行
- en: managing communications and management of epoch, slots, random
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 管理通信和 epoch、slot、随机
- en: number generation, and validator selections. The validator nodes do the
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 编号生成和验证节点选择。验证节点执行
- en: processing of transactions and blocks. The miner-specific information such
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 处理交易和区块。矿工特定信息，如
- en: as miner credentials is only stored in validator nodes, not in the beacon
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 作为矿工凭证只存储在验证者节点中，而不是在信标
- en: node. The communication between beacon nodes and miner nodes is done
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 节点。信标节点与矿工节点之间的通信是通过
- en: through RPC protocol.
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 通过RPC协议完成。
- en: The edge G is beacon nodes to propose beacon blocks to the beacon
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 信标节点到提议信标块的信标
- en: chain. Each beacon node will synchronize with the beacon chain, manage
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 链。每个信标节点将同步信标链，管理
- en: stakers registry, organize validators into committees, manage epoch and
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 质押者注册表，将验证者组织成委员会，管理时代和
- en: slots, generate a random number, assign validator roles, and propose new
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 槽位，生成一个随机数，分配验证者角色，并提议新的
- en: blocks to the beacon chain.
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 区块到信标链。
- en: From Ethereum 2 architectural topology and interactions, it is clear
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 从以太坊2的架构拓扑和交互来看，很清楚
- en: that Ethereum 1 mainnet is still an essential component of Ethereum 2\.
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊1主网仍然是以太坊2的一个重要组成部分。
- en: The staking power of POS comes from the assets designated by owners
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 权益证明的质押力量来自于所有者指定的资产
- en: to participate in the POS consensus for Ethereum 2\. It is important to
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 参与以太坊2的POS共识。重要的是
- en: understand the process for Ethereum 1 to migrate to Ethereum 2\.
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 理解以太坊1迁移到以太坊2的过程。
- en: '**Migrating from Ethereum 1 to Ethereum 2: POS**'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: '**从以太坊1迁移到以太坊2：权益证明（POS）**'
- en: '**Deposit, Staking, and Slashing**'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: '**存款、质押和削减**'
- en: The migration from Ethereum 1 to Ethereum 2 has been done in a phased
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 从以太坊1迁移到以太坊2已经分阶段完成
- en: approach. The first phase of Ethereum 2 is to build a beacon chain
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 的方法。以太坊2的第一阶段是建立一个信标链
- en: based on proof-of-stake consensus. In the following, we mention some
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 基于权益证明共识。在下面，我们提到了一些
- en: important concepts and steps for staking Ethereum 1 asset to migrating to
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 质押以太坊1资产到迁移的重要概念和步骤
- en: Ethereum 2\.
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊2。
- en: The assets of the proof of stake are deposited in Ethereum 1 mainnet
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 权益证明的资产在以太坊1主网上存款
- en: through a deposit smart contract. In the following, a snippet of deposit
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 通过存款智能合约。在下面，是一个存款的片段
- en: contract interface is shown.
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 合约接口如下所示。
- en: '374'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: '374'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层与以太坊2
- en: // Deposit contract interface based on the following specs for
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: // 基于以下规范的存款合约接口
- en: 'Ethereum 2:'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊2：
- en: // https://github.com/ethereum/eth2.0-specs
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: // https://github.com/ethereum/eth2.0-specs
- en: '*interface IDepositContract {*'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: '*interface IDepositContract {*'
- en: '*/// @notice A processed deposit event.*'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: '*/// @notice 一个已处理的存款事件*'
- en: '*event DepositEvent(*'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: '*event DepositEvent(*'
- en: '*bytes pubkey,*'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: '*bytes pubkey,*'
- en: '*bytes withdrawal_credentials,*'
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: '*bytes withdrawal_credentials,*'
- en: '*bytes amount,*'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: '*bytes amount,*'
- en: '*bytes signature,*'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: '*bytes signature,*'
- en: '*bytes index*'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: '*bytes index*'
- en: '*);*'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: '*);*'
- en: '*/// @notice Submit a Phase 0 DepositData object.*'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: '*/// @notice 提交一个Phase 0 DepositData对象.*'
- en: '*/// @param pubkey A BLS12-381 public key.*'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: '*/// @param pubkey 一个BLS12-381公钥.*'
- en: '*/// @param withdrawal_credentials Commitment to a public*'
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: '*/// @param withdrawal_credentials 对公共*'
- en: '*key for withdrawals.*'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: '*key for withdrawals.*'
- en: '*/// @param signature A BLS12-381 signature.*'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: '*/// @param signature 一个BLS12-381签名.*'
- en: '*/// @param deposit_data_root The SHA-256 hash of the SSZ-*'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: '*/// @param deposit_data_root SSZ的SHA-256哈希的*'
- en: '*encoded DepositData object.*'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: '*encoded DepositData对象.*'
- en: '*/// Used as a protection against malformed input.*'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: '*/// 用于防止输入错误*'
- en: '*function deposit(*'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: '*function deposit(*'
- en: '*bytes calldata pubkey,*'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: '*bytes calldata pubkey,*'
- en: '*bytes calldata withdrawal_credentials,*'
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: '*bytes calldata withdrawal_credentials,*'
- en: '*bytes calldata signature,*'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: '*bytes calldata signature,*'
- en: '*bytes32 deposit_data_root*'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: '*bytes32 deposit_data_root*'
- en: '*) external payable;*'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: '*) external payable;*'
- en: '*/// @notice Query the current deposit root hash.*'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: '*/// @notice 查询当前的存款根哈希.*'
- en: '*/// @return The deposit root hash.*'
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: '*/// @return 存款根哈希.*'
- en: '*function get_deposit_root() external view returns (bytes32);*'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: '*function get_deposit_root() external view returns (bytes32);*'
- en: '*/// @notice Query the current deposit count.*'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: '*/// @notice 查询当前的存款数量.*'
- en: '375'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: '375'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层与以太坊2
- en: '*/// @return The deposit count encoded as a little endian*'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: '*/// @return 以小端格式编码的存款数量*'
- en: '*64-bit number.*'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: '*64-bit number.*'
- en: '*function get_deposit_count() external view returns (bytes*'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: '*function get_deposit_count() external view returns (bytes*'
- en: '*memory);*'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: '*memory);*'
- en: '*}*'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: '*}*'
- en: The deposit smart contract uses a sparse Merkle tree to store the stake
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 存款智能合约使用一个稀疏的Merkle树来存储质押
- en: deposit records and use a deposit event to notify external programs such
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 存款记录，并使用存款事件通知外部程序等
- en: as beacon nodes. Major functions supported by this smart contract include
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 作为信标节点。此智能合约支持的主要功能包括
- en: deposit, get_deposit_root, and get_deposit_count. When depositing a
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 存款，get_deposit_root，和get_deposit_count。存款时
- en: stake, users need to supply information such as public key, withdrawal
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 质押，用户需要提供诸如公钥、提现
- en: credential, owner signature, and deposit data root hash. The deposit
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 凭证，所有者签名和存款数据根哈希。存款
- en: amount is in msg.value and hence is not a function parameter. The deposit
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 数量在msg.value中，因此不是函数参数。存款
- en: ID is incremented automatically and does not need to be supplied.
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: ID会自动递增，不需要提供。
- en: When depositing assets to the deposit smart contract, one key point
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 向存款智能合约存入资产时，一个关键点
- en: to remember is that Ethereum 1 public key and private key pair curve has
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的是，以太坊1的公钥和私钥对曲线有
- en: been replaced with BLS12-381 curve that is more versatile. The Ethereum
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 被更灵活的BLS12-381曲线所取代。以太坊
- en: 2 key pair will need to be generated through a new tool with a 24-word
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 2密钥对需要通过一个新的工具生成，该工具包含24个单词
- en: mnemonic phrase. Different from Ethereum 1, Ethereum 2 has both
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 助记词。与以太坊1不同，以太坊2既有
- en: withdraw keys and validator keys for an account. One set of mnemonic
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 为一个账户生成提现公钥和验证器密钥。一套助记词
- en: phrases can generate multiple withdraw public keys, and one withdraw
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 短语可以生成多个提现公钥，一个提现
- en: key can derive multiple validator keys.
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥可以派生出多个验证器密钥。
- en: '**Run an Ethereum 2 Validator Node**'
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: '**运行以太坊2验证节点**'
- en: '**with POS Staking**'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用权益证明（POS）质押**'
- en: Running a validator node will get rewards from Ethereum 2 blockchain.
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 运行验证节点将获得以太坊2区块链的奖励。
- en: Unlike Bitcoin or Ethereum mining, Ethereum 2 is based on proof of
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 与比特币或以太坊挖矿不同，以太坊2基于权益证明
- en: stake, and hence, all the nodes will get rewarded if the nodes are online
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 质押，因此，所有在线的节点都将获得奖励
- en: and function correctly. The reward return rate is about 3–8% APR at
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 正确。奖励回报率大约在3-8%的年化收益率（APR）。
- en: ether value. The following shows major steps to build an Ethereum 2
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 以太币价值。以下主要展示了构建以太坊2的步骤
- en: mining node.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 挖矿节点。
- en: '376'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: '376'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层和以太坊2
- en: Firstly, Ethereum 2 depends on Ethereum 1\. Therefore, an Ethereum
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，以太坊2依赖于以太坊1。因此，需要一个以太坊
- en: 1 node is still needed. This node can be built with geth or can be a stable
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 1个节点仍然需要。这个节点可以用geth构建，也可以是一个稳定的
- en: public node with a static IP.
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 静态IP的公网节点。
- en: Secondly, users need to allocate staking funds. A minimum of 32 ethers
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步，用户需要分配质押资金。至少需要32个以太币
- en: is needed to run a validator node. Users also need to consider that if their
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 以运行验证节点。用户还需要考虑，如果他们的
- en: node goes down, there is a penalty that will decrease the staking balance.
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 节点宕机，会有一个惩罚，会减少质押余额。
- en: Thirdly, users need to prepare a deposit account. There is a deposit
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 第三步，用户需要准备一个存款账户。有一个存款
- en: tool that can be used to generate mnemonic phrases and derive
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: 工具可以用来生成助记词和派生
- en: withdrawal keys and validator keys. These keys are extremely important
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 提现密钥和验证器密钥。这些密钥非常重要
- en: and should be safeguarded. If the mnemonic phrases and withdrawal keys
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 并应该得到保护。如果助记词和提现密钥
- en: are lost, the locked ether for Ethereum 2 will be lost.
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 如果丢失了，以太坊2的锁定以太币也会丢失。
- en: Fourthly, download and run beacon nodes and validator nodes.
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 第四步，下载并运行信标节点和验证节点。
- en: There are multiple vendors who provide the packages to run beacon and
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个供应商提供运行信标和
- en: validator nodes.
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 验证节点。
- en: And finally, use scripts or third-party tools to deposit assets to deposit
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用脚本或第三方工具将资产存入存款
- en: contracts. The deposited event will be detected by the beacon node. The
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 合约。检测到存款事件后，信标节点将触发该事件。
- en: deposit will be in pending state for a certain time and then become active.
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 存款将在一定时间内处于挂起状态，然后变为活跃。
- en: One important factor to consider is that unlike proof-of-work
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要因素是要考虑，与工作量证明
- en: consensus, the proof-of-stake mechanism implements penalties for
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 共识，权益证明机制对
- en: validators. The Ethereum beacon chain implemented two penalties for
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: 验证者。以太坊信标链实现了对
- en: validators. One is the inactivity penalty that punishes validator nodes
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 验证者。一个是非活动惩罚，惩罚验证器节点
- en: that are offline or do not propose/attest a block. Another one is slashing
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 那些离线或没有提出/证实区块的验证者。另一个是削减
- en: that punishes validators that construct or attest malicious blocks. It is
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 它惩罚构建或证实恶意块的验证者。它是
- en: recommended that validators run a monitoring program to ensure that
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 建议验证者运行一个监控程序，以确保
- en: their nodes are working actively and correctly.
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 他们的节点正在积极且正确地工作。
- en: Many tools and solutions have been developed on this. Users can
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 在这方面已经开发了许多工具和解决方案。用户可以
- en: check the Ethereum 2 website to see the recommended ones.
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 检查以太坊2网站以了解推荐解决方案。
- en: '377'
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: '377'
- en: Chapter 9 Layer 2 and ethereum 2
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章 第2层和以太坊2
- en: '**Uncertainties with Ethereum 2**'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: '**以太坊2.0的不确定性**'
- en: Although Ethereum 2 has been viewed as a promising solution for
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管以太坊2.0被认为是一个有前景的解决方案，但
- en: Ethereum mainnet scalability solutions, there are still some uncertainties
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊主网可扩展性解决方案，仍有一些不确定性
- en: about this project. For example, the sharding chain is still not finalized.
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个项目。例如，分片链仍然没有最终确定。
- en: There has been a lot of debates on sharding regarding security and the
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 关于分片，关于安全和
- en: staking economy. It is recommended that readers keep an open mind on
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 质押经济。建议读者保持开放的心态
- en: the road map, implementation, and rollout of Ethereum 2\.
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊2.0的路线图、实施和推广。
- en: '**Summary**'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, we explained various layer 2 scalability solutions including
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们解释了各种第2层可扩展性解决方案，包括
- en: state channel, plasma, rollups, as well as Ethereum 2 technology.
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 状态通道，plasma，滚动汇总以及以太坊2技术。
- en: Each technology has its pros and cons. When designing decentralized
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 每项技术都有其优点和缺点。在设计去中心化
- en: applications, it is important to consider the usage models of the
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 应用，了解使用模型很重要
- en: applications and choose the most feasible technology to scale out the
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 应用并选择最可行的技术以扩展
- en: solutions.
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案。
- en: '378'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: '378'
- en: '**CHAPTER 10**'
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: '**第10章**'
- en: '**Fund a Project:**'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: '**资助项目：**'
- en: '**Tokens and Gas Fees**'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: '**代币和燃料费**'
- en: '**Introduction**'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: '**引言**'
- en: In previous chapters, we went through the technical aspects of smart
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们了解了智能合约的技术方面
- en: contract coding, development, and deployment as well as blockchain
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 合同编码、开发和部署以及区块链
- en: security and scalability.
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性和可扩展性。
- en: In this chapter, we will discuss how to fund a project from both the
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论如何从 both the
- en: business and technical aspects of smart contracts.
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约的商业和技术方面。
- en: Ethereum has achieved several milestones relevant to project
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊在项目相关的一些里程碑上取得了几项重要成就
- en: funding, such as the Initial Coin Offering (ICO), Nonfungible Token
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 融资，如首次代币发行（ICO），非可替代代币（NFT）
- en: (NFT), decentralized finance (DeFi), and Decentralized Autonomous
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: （NFT），去中心化金融（DeFi），以及去中心化自治组织（DAO）。
- en: Organization (DAO). It is foreseeable that the Security Token Offering
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 组织（DAO）。可以预见，安全代币发行（STO）
- en: (STO), Central Bank Digital Currency (CBDC), and other decentralized
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: （STO），中央银行数字货币（CBDC），以及其他去中心化
- en: applications will soon gain popularity. All of these use cases have one
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: 应用将很快变得流行。所有这些用例都有一个
- en: 'common and essential element: the token. In the following, we describe'
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: '共同且 essential element: the token. In the following, we describe'
- en: how tokens are used to represent assets to fund a project and how to use
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 代币如何用于表示资产以资助一个项目以及如何使用
- en: smart contracts to program tokens.
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: 在智能合约中编程代币。
- en: © Weijia Zhang and Tej Anand 2022
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: © Weijia Zhang and Tej Anand 2022
- en: '379'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: '379'
- en: W. Zhang and T. Anand, *Blockchain and Ethereum Smart Contract Solution Development*,
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 张伟佳，安丹，*区块链与以太坊智能合约解决方案开发*，
- en: '[https://doi.org/10.1007/978-1-4842-8164-2_10](https://doi.org/10.1007/978-1-4842-8164-2_10#DOI)'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://doi.org/10.1007/978-1-4842-8164-2_10](https://doi.org/10.1007/978-1-4842-8164-2_10#DOI)'
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章 资助一个项目：代币和燃料费
- en: '**Tokens for Funding Ecosystem Projects**'
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: '**用于资助生态系统项目的代币**'
- en: '**Tokens in ICO and DeFi**'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: '**代币在ICO和DeFi中的应用**'
- en: An ICO in Ethereum is a fundraising mechanism that was popular around
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊中的ICO是一种筹款机制，曾在大约
- en: the year 2017\. It is enabled by the ERC20 token, which allows tokens to
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: 2017年。它是由ERC20代币实现的，该代币允许代币
- en: be programmable, distributed, and traded in the Ethereum ecosystem.
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 可在以太坊生态系统中进行编程、分布式和交易。
- en: The ERC20 token is fungible, meaning that it only has value and cannot
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: ERC20代币是可替代的，这意味着它只有价值而无法
- en: be distinguished among each other. The ERC20 token follows the
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 彼此区分开来。ERC20代币遵循
- en: 'specification of EIP-20 located in the following URL:'
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: EIP-20规范，位于以下网址：
- en: '[https://eips.ethereum.org/EIPS/eip- 20](https://eips.ethereum.org/EIPS/eip-20)'
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://eips.ethereum.org/EIPS/eip-20](https://eips.ethereum.org/EIPS/eip-20)'
- en: In the ERC20 specification, several standard functions as well as two
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 在ERC20规范中，定义了几种标准函数以及两个
- en: events are defined, and all smart contracts that issue ERC20 tokens will
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 事件被定义，所有发行ERC20代币的智能合约都将
- en: need to implement them accordingly. The function specifications are as
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: 需要相应地实现它们。函数规范如下
- en: 'follows:'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 如下：
- en: // Returns the name of the token
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: // 返回代币的名称
- en: function name() public view returns (string)
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 函数名()公开视图返回（字符串）
- en: //Returns the name of the symbol. Normally several capitalized
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: //返回代币符号的名称。通常是大写的
- en: letters, optional.
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 大写，可选。
- en: function symbol() public view returns (string)
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: function symbol() public view returns (string)
- en: // Returns the number of decimals the token uses.
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: //返回代币使用的小数位数。
- en: function decimals() public view returns (uint8)
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: function decimals() public view returns (uint8)
- en: // Returns the total supply of the token
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: //返回代币的总供应量
- en: function totalSupply() public view returns (uint256)
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: function totalSupply() public view returns (uint256)
- en: // Returns the account balance of another account with
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: //返回另一账户的账户余额
- en: address _owner.
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 地址_owner。
- en: function balanceOf(address _owner) public view returns (uint256
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: function balanceOf(address _owner) public view returns (uint256
- en: balance)
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: 余额)
- en: '380'
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: '380'
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章 资助一个项目：代币和Gas费用
- en: //Transfers _value amount of tokens to address _to, and MUST
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: //向地址_to传输_value代币，并且必须
- en: fire the Transfer event.
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: 触发Transfer事件。
- en: function transfer(address _to, uint256 _value) public returns
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: function transfer(address _to, uint256 _value) public returns
- en: (bool success)
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: 返回（bool 成功）
- en: // Transfers _value amount of tokens from address _from to
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: //从地址_from向
- en: address _to, and MUST fire the Transfer event.
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 地址_to，并且必须触发Transfer事件。
- en: function transferFrom(address _from, address _to, uint256 _
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: function transferFrom(address _from, address _to, uint256 _
- en: value) public returns (bool success)
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: 价值）公共返回（bool 成功）
- en: //Allows _spender to withdraw from your account multiple times,
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: //允许_spender从您的账户多次提款，
- en: up to the _value amount. If this function is called again it
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: 再次调用此函数，它
- en: overwrites the current allowance with _value.
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 用_value覆盖当前的allowance。
- en: function approve(address _spender, uint256 _value) public
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: function approve(address _spender, uint256 _value) public
- en: returns (bool success)
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: 返回（bool 成功）
- en: //Returns the amount which _spender is still allowed to
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: 返回_spender仍然允许取出的金额。
- en: withdraw from _owner.
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 从_owner处提取。
- en: function allowance(address _owner, address _spender) public
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: function allowance(address _owner, address _spender) public
- en: view returns (uint256 remaining)
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 返回（uint256 剩余）
- en: Events
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 事件
- en: // this event MUST trigger when tokens are transferred,
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 当代币被转让时，这个事件必须触发，
- en: including zero value transfers
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 包括零值传输
- en: event Transfer(address indexed _from, address indexed _to,
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: 事件Transfer(address indexed _from, address indexed _to,
- en: uint256 _value)
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: uint256 _value)
- en: //this event MUST trigger on any successful call to
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: 当成功调用以下任何函数时，此事件必须触发：
- en: approve(address _spender, uint256 _value)
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: approve(address _spender, uint256 _value)
- en: event Approval(address indexed _owner, address indexed _
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 事件Approval(address indexed _owner, address indexed _
- en: spender, uint256 _value)
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: spender, uint256 _value)
- en: '381'
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: '381'
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章 资助一个项目：代币和Gas费用
- en: There are two smart contract packages that have been implemented
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: 已经实现了两个智能合约包
- en: 'for the EIP-20 standard: the OpenZeppelin package and the ConsenSys'
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: 对于EIP-20标准：OpenZeppelin包和ConsenSys
- en: package. Developers can extend these packages and make their own
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: 包。开发者可以扩展这些包并创建自己的
- en: ERC20 tokens with a few customized lines of code. For example, by
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: 通过几行自定义代码创建ERC20代币。例如，通过
- en: importing the OpenZeppelin ERC20 package, a developer can create an
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: 导入OpenZeppelin的ERC20包，开发者可以创建一个
- en: ERC20 token named “DEVELOPER_TOKEN” with a symbol of DEV and a
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: ERC20代币，名为“DEVELOPER_TOKEN”，代号DEV，总供应量为
- en: 'customizable total supply as input for the constructor:'
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数中输入自定义的总供应量：
- en: '*// contracts/DEVToken.sol*'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: '*// contracts/DEVToken.sol*'
- en: '*// SPDX-License-Identifier: MIT*'
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: '*// SPDX-License-Identifier: MIT*'
- en: '*pragma solidity ^0.8.0;*'
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: '*pragma solidity ^0.8.0;*'
- en: '*import "@openzeppelin/contracts/token/ERC20/ERC20.sol";*'
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: '*import "@openzeppelin/contracts/token/ERC20/ERC20.sol";*'
- en: '*contract DEVToken is ERC20 {*'
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: '*contract DEVToken is ERC20 {*'
- en: '*constructor(uint256 initialSupply) ERC20("DEVELOPER_TOKEN",*'
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: '*constructor(uint256 initialSupply) ERC20("DEVELOPER_TOKEN",*'
- en: '*"DEV") {*'
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: '*"DEV") {*'
- en: '*_mint(msg.sender, initialSupply);*'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: '*_mint(msg.sender, initialSupply);*'
- en: '*}*'
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: '*}*'
- en: '*}*'
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: '*}*'
- en: When the preceding smart contract is deployed with an initialSupply
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用initialSupply部署上述智能合同时
- en: specified, the deployed token will have totalSupply equal to the initialSupply.
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: 指定，部署的代币将具有totalSupply等于initialSupply。
- en: Once an ERC20 token is created, another smart contract can be written
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了ERC20代币，还可以编写另一个智能合约
- en: to handle the minting and distribution of the token. This smart contract
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: 处理代币的铸币和分发。这个智能合约
- en: is sometimes called the crowdsale smart contract when used for ICOs. A
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: 当用于ICO时，有时被称为众筹智能合约。一个
- en: 'smart contract for crowdsale normally contains the following functions:'
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: 众筹智能合约通常包含以下函数：
- en: '**Ratio of token and ether** – The ratio of ether and'
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: '**代币与以太坊的比例** – 以太坊与'
- en: the target token.
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: 目标代币。
- en: '**Time of the crowdsale** – The start time and end'
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: '`Time of the crowdsale` – 开始时间和结束时间'
- en: time when the token is available for distribution.
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 令牌可用于分配的时间。
- en: '**KYC/AML** – The crowdsale can have a white list for'
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: '`KYC/AML` – 众筹可以有一个白名单'
- en: senders who can participate in the crowdsale.
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: 可以参加众筹的发送者。
- en: '382'
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: '382'
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章 资助一个项目：代币和燃料费
- en: '**Refunds** – The smart contract can also implement'
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: '`Refunds` – 智能合约还可以实现'
- en: the functions to refund the token.
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: 实现退款代币的功能。
- en: Besides crowdfunding, ERC20 tokens are extensively used in other
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: 除了众筹，ERC20代币还广泛用于其他
- en: decentralized finance (DeFi) projects such as Compound for lending,
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: 例如Compound的借贷，
- en: Uniswap for exchanges, and USDC for stablecoins.
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: Uniswap的交易所，以及USDC的稳定币。
- en: In the Ethereum community, there are also some discussions on
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊社区中，关于
- en: whether the ERC20 token is a utility token or a security token. These are
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: 是否ERC20代币是实用代币还是证券代币。这些都是
- en: country or state specific and should be consulted with legal professionals.
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: 特定于国家或州，并应与法律专业人士咨询。
- en: '**Token in NFT**'
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: '**Token in NFT**'
- en: Different from ERC20 tokens, nonfungible tokens (NFT) are distinguishable
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: 与ERC20代币不同，不可替代代币（NFT）是可区分的
- en: and can be used to represent ownership. For example, birth certificates,
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: 并可用于表示所有权。例如，出生证明书，
- en: diplomas, and rental contracts are all nonfungible and have clear ownership.
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 学位证书和租赁合同都是不可替代的，并且有明确的所有权。
- en: An NFT is specified as an EIP-721 standard to represent
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: NFT被指定为EIP-721标准，用于表示
- en: • Physical assets such as houses, cars, and artwork
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: • 例如房屋、汽车和艺术品的物理资产
- en: • Virtual collectables such as digital art and
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: 例如数字艺术和
- en: collectable cards
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: 收藏卡
- en: • “Negative assets” such as loans and debt
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: • 例如贷款和债务的“负资产”
- en: 'The detailed specification of the EIP-721 is located in the following URL:'
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: EIP-721的详细规格位于以下URL：
- en: '[https://eips.ethereum.org/EIPS/eip- 721](https://eips.ethereum.org/EIPS/eip-721)'
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://eips.ethereum.org/EIPS/eip- 721](https://eips.ethereum.org/EIPS/eip-721)'
- en: Similar to the ERC20 token, the ERC721 NFT also defines the token name,
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 与ERC20代币类似，ERC721 NFT还定义了代币名称，
- en: 'token symbol, and total supply. There are some major differences for the NFT:'
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: 代币符号，以及总供应量。NFT有一些主要区别：
- en: • Each NFT token has an index that is unique.
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: 每个NFT代币都有一个唯一的索引。
- en: • Each NFT token has an owner.
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: • 每个NFT代币都有一个所有者。
- en: • Since NFTs can point to a physical or virtual asset outside
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: 由于NFT可以指向物理或虚拟资产之外的
- en: the blockchain, there is an interface ERC721Metadata
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: 在区块链上，有一个名为ERC721Metadata的接口
- en: that defines a function called tokenURL.
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了一个名为tokenURL的函数。
- en: '383'
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: '383'
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章 资助一个项目：代币和燃料费
- en: '*function tokenURI(uint256 _tokenId) external*'
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: '`function tokenURI(uint256 _tokenId) external`'
- en: '*view returns (string);*'
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: '`view returns (string);`'
- en: This tokenURL function takes an input of _tokenId
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: 这个tokenURL函数需要输入_tokenId
- en: and returns a Universal Resource Identifier (URI)
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: 并返回通用资源标识符（URI）
- en: that points to an NFT item defined in a conventional
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: 指向在传统
- en: digital system.
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: 数字系统。
- en: • Each NFT token can be transferred from one owner to
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: 每个NFT代币可以从
- en: 'another with the following function:'
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个具有以下功能的合约：
- en: '*function transferFrom(address _from, address*'
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: '`function transferFrom(address _from, address`'
- en: '*_to, uint256 _tokenId) external payable;*'
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: '`_to, uint256 _tokenId) external payable;`'
- en: • There are also other functions or interfaces that help
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助
- en: NFT tokens to be assigned, transferred, or identified.
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: 分配、转让或识别NFT代币。
- en: NFT tokens based on the EIP-721/ERC721 standard have been
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: 基于EIP-721/ERC721标准的NFT代币已经
- en: implemented by several projects. For example, 0xcert and OpenZeppelin
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: 由几个项目实施。例如，0xcert和OpenZeppelin
- en: have implemented ERC721 token smart contract packages. Developers
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 已经实现了ERC721代币智能合约包。开发者
- en: can easily extend the ERC721 package and create their own ERC721
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 可以轻松扩展ERC721包并创建自己的ERC721
- en: nonfungible tokens.
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: 不可替代代币。
- en: For example, for a college to create an NFT for their students’
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，大学为学生的
- en: diplomas, the smart contract can be written with the following
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: 学位证书，智能合约可以编写如下
- en: 'sample code:'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码：
- en: '// SPDX-License-Identifier: MIT'
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: '// SPDX-License-Identifier: MIT'
- en: pragma solidity ^0.7.0;
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: pragma solidity ^0.7.0;
- en: import "https://github.com/OpenZeppelin/openzeppelin-contracts/
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: 导入"https://github.com/OpenZeppelin/openzeppelin-contracts/
- en: blob/release-v3.4/contracts/token/ERC721/ERC721.sol";
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: blob/release-v3.4/contracts/token/ERC721/ERC721.sol";
- en: contract TTCDiploma is ERC721 {
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: 合同TTCDiploma是基于ERC721 {
- en: uint private _tokenIds;
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: uint private _tokenIds;
- en: address admin;
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: 地址admin；
- en: '384'
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: '384'
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
- en: constructor() ERC721("TexasTechnologyCollegeDiploma",
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
- en: '"TTC") public {'
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
- en: admin = msg.sender;
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
- en: function issueDiploma(address student, string memory
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
- en: tokenURI) public returns (uint256) {
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
- en: require(msg.sender == admin); // only admin can issue
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
- en: diploma.
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
- en: _tokenIds++;
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
- en: uint256 newDiplomaId = _tokenIds;
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
- en: _mint(student, newDiplomaId);
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
- en: _setTokenURI(newDiplomaId, tokenURI);
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
- en: return newDiplomaId;
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
- en: In this program, the TTCDiploma smart contract is written to issue
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
- en: diplomas for students. When the smart contract is deployed, the token
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
- en: name and token symbol are provided. Also, the smart contract deployment
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
- en: address is assigned as the admin address. Only admin can perform
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
- en: privileged actions such as issuing diplomas. In the issueDiploma function,
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
- en: the sender is checked to see if it has admin permissions. If it does, the
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
- en: tokenId is incremented, and a new diploma ID is generated. This new
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
- en: diplomaId is then assigned a tokenURI that points to an external source
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
- en: for retrieving the diploma for that ID. When students want to retrieve the
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
- en: diploma, they simply sign a message and send it to the URI specified by the
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
- en: diplomaId. The diploma server pointed by the URI will check the signed
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
- en: message to verify that the requester is the legitimate owner of the diploma
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
- en: and will then output the diploma to the request.
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
- en: '385'
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
- en: NFT tokens can be used in many fields. There have been many projects
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
- en: that provide marketplaces for NFT artwork and collectables. Projects such
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
- en: as OpenSea and Decentraland are popular for the NFT marketplace.
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
- en: '**Tokens in DeFi (Compound, Uniswap,**'
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
- en: '**and Stablecoins)**'
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
- en: In Chapter [1](https://doi.org/10.1007/978-1-4842-8164-2_1), several DeFi projects
    such as the decentralized lending platform, decentralized exchange, and stablecoins
    are mentioned. All DeFi
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
- en: projects use one or multiple ERC20 tokens as asset tokens or governance
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
- en: tokens. In the following, we mention several examples.
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
- en: Compound is a project for a decentralized lending platform that allows
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
- en: users to lend or borrow cryptocurrency without the need for going through
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
- en: intermediaries such as banks. Lenders can send their asset tokens to a
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
- en: Compound smart contract and receive cTokens to represent the amount
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
- en: of assets that are deposited to the lending pool. cTokens can earn interest
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
- en: and can also be traded. Borrowers can borrow cryptocurrency from the
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
- en: Compound protocol. In order to borrow a crypto asset, borrowers need to
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
- en: supply other crypto assets as collaterals. The collateral calculation is based
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
- en: on the token price feed and a published formula. If the borrowed asset
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
- en: cannot be paid back and the collateral values fall below the threshold to
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
- en: secure the borrowed balance, the collateral can be liquidated based on the
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
- en: rules written in the smart contract.
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
- en: The cTokens represent crypto assets supplied in the lending
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
- en: protocol. In addition, Compound has issued a governing token named
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
- en: COMP. COMP can be earned by supplying or borrowing assets in the
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: COMP。通过在
- en: lending protocol. The COMP token can be used to vote on proposals. All
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: 借贷协议。COMP代币可用于投票提案。所有
- en: cTokens and COMP tokens are ERC20 tokens.
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: cTokens和COMP代币都是ERC20代币。
- en: Uniswap is a decentralized exchange platform using the Automated
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: Uniswap是一个使用自动化
- en: Market Maker (AMM) mechanism. Different users can trade their crypto
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: Market Maker (AMM)机制。不同用户可以交易他们的加密
- en: assets without a dependency on centralized exchanges. Uniswap liquidity
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: 无需依赖中心化交易所即可发行资产。Uniswap流动性
- en: '386'
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: '386'
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章 资助一个项目：代币和Gas费
- en: providers provide pairs of crypto assets as trading pairs for the liquidity
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: 提供商为流动性池提供加密资产对作为交易对
- en: pool. Traders then trade their assets with the assets in the liquidity pool.
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: liquidity pool。交易员然后用liquidity pool中的资产进行交易。
- en: There are two kinds of tokens that are designed for Uniswap and other
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种代币是为Uniswap和其他
- en: similar decentralized exchange platforms. The first kind of token is called
    a
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于去中心化交易平台的第一个代币被称为
- en: liquidity provider (LP) token, which represents the supplier’s contribution
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: liquidity provider (LP)代币，代表供应商的贡献
- en: to the liquidity pool. The LP token is an ERC20 token that is trading pair
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: 到流动性池。LP代币是一种可交易对
- en: specific. Each trading pair will have its own LP token. Another Uniswap
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: 具体。每个交易对都将有自己的LP代币。另一个Uniswap
- en: token is a UNI token that is an ERC20 token as well. The UNI token is
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: 是一个UNI代币，也是ERC20代币。UNI代币是
- en: a governance token that can be used to vote on proposals within the
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: 是一个治理代币，可用于在
- en: Uniswap ecosystem.
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: Uniswap生态系统。
- en: Stablecoins such as DAI, USDT, and USDC are all ERC20 format tokens
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: 稳定币，如DAI、USDT和USDC，都是ERC20格式代币
- en: that can be traded or transferred. Additional functions such as automatic
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: 可以交易或转让。其他功能，如自动
- en: minting and burning based on supply and demand are built on top of
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: 根据供需进行铸币和销毁，构建在
- en: the ERC20 format to make its value stable. Stablecoin values can be kept
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: 使其价值稳定。稳定币的价值可以保持
- en: stable with several mechanisms such as fiat-collateralization, crypto-
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: 与几种机制稳定，如货币抵押、加密
- en: collateralization, or algorithmic mechanism.
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: 抵押，或算法机制。
- en: Although most of the DeFi tokens are ERC20 tokens, they are not the
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大多数DeFi代币都是ERC20代币，但它们并非无法
- en: same as each DeFi builds additional functions on top of the standard
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: 与每个DeFi在标准之上构建附加功能相同
- en: ERC20 tokens. DeFi projects are all open source, and the code for their
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: ERC20代币。DeFi项目都是开源的，它们的代码
- en: tokens can be viewed and inspected in public source code repositories.
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: 代币可以在公共源代码存储库中查看和检查。
- en: '**Tokens for Enterprises/Standardized**'
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: '**企业代币/标准化代币**'
- en: '**(Pervasive) Tokens**'
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: '**(泛在)代币**'
- en: The ICO is enabled by an ERC20 token, which enables tokens to be
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: 通过ERC20代币实现ICO，使代币得以
- en: programmable, distributed, and traded in the Ethereum ecosystem.
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: 可编程、分布式并在以太坊生态系统中交易。
- en: An ERC20 token is a fungible token that is not distinguishable between
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: 一个ERC20代币是一个不可区分的代币，在
- en: individual tokens. An NFT milestone is empowered by ERC721, which
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: 个别代币。一个NFT里程碑由ERC721赋予，它
- en: allows a token to be unique, traceable, exchangeable, and tradable. STO is
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: 使代币唯一、可追溯、可交换和可交易。STO是
- en: empowered by ERC1400 that allows owners to own a portion of an entity
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: 由ERC1400赋予，允许所有者拥有实体的一部分
- en: asset. Tokens are inseparable from decentralized applications.
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: 资产。代币与去中心化应用不可分割。
- en: '387'
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: '387'
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章 资助一个项目：代币和Gas费
- en: Tokens in public blockchains are open, permissionless, and intended
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: 公共区块链中的代币是开放的、无需许可的，并旨在
- en: for large-scale distribution. For enterprises, there is a need to have a more
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: 用于大规模分发。对于企业来说，需要一个更加
- en: structured and formal framework for tokens that can propagate through
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: 为可以通过区块链传播的代币提供结构化和正式的框架
- en: different private blockchains and are easy to design and customize.
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的私有区块链，且易于设计和定制。
- en: Enterprise tokens have potential uses in many areas including the
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: 企业代币在许多领域都有潜在用途，包括
- en: 'following:'
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: 如下：
- en: '**Supply chain tokens**'
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: '**供应链代币**'
- en: In a supply chain, assets can correspond to parts, inventory, orders,
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: 在供应链中，资产可以对应于零部件、库存、订单、
- en: shipment, loans, and bills of lading. All these assets can be tokenized and
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: 货物运输、贷款和提单。所有这些资产都可以被代币化并
- en: recorded in the blockchain. Operations on these assets can be modeled as
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: 记录在区块链上。对这些资产的操作可以建模为
- en: transactions in the blockchain. Enterprises such as IBM, FedEx, Microsoft,
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: 在区块链上进行交易。像IBM、FedEx、微软、
- en: and Accenture are all building blockchain solutions to help solve supply
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 和Accenture都在构建区块链解决方案，以帮助解决供应链
- en: chain problems to increase efficiency, enhance traceability, and maximize
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: 将问题链化以提高效率，增强可追溯性，并最大化
- en: transparency. The types of tokens used in the supply chain are broader
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: 增加透明度。供应链中使用的代币类型更为广泛
- en: than ERC20 or ERC721 that are commonly used in DeFi. In a supply
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: 比ERC20或ERC721更常见的DeFi用例。在供应链
- en: chain system, all identifiable items can be tokenized and recorded in the
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: 在供应链系统中，所有可识别的项目都可以被代币化并在
- en: blockchain.
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链。
- en: '**Industry-Specific Tokens**'
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: '**行业特定代币**'
- en: Tokens can be expanded to represent all identifiable items and can be
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: 代币可以扩展为代表所有可识别的项目，并且可以
- en: used in all industries for physical, digital, or virtual assets. For example,
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: 用于表示物理、数字或虚拟资产的所有行业。例如，
- en: in the renewable energy domain, solar or wind power generation can be
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: 在可再生能源领域，例如太阳能或风力发电，可以
- en: tokenized and traded. Below we describe how carbon credit tokens can be
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: 将碳信用代币化并进行交易。下面我们描述了碳信用代币可以
- en: used to characterize and tokenize CO2 emission and how these credits can
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: 用于描述和代币化CO2排放以及这些信用如何
- en: be traded in the marketplace (Figure [10-1).](#p399)
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在市场交易中交易（图[10-1）。](#p399)
- en: '388'
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: '388'
- en: '![](index-399_1.png)'
  id: totrans-1129
  prefs: []
  type: TYPE_IMG
  zh: '![](index-399_1.png)'
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章 资助项目：代币和燃料费
- en: '***Figure 10-1\.** Overview of Carbon Credit Token (CCT)*'
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: '***图10-1.** 碳信用代币（CCT）概览*'
- en: To establish a carbon credit market, the authority will first need to mint
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: 为了建立一个碳信用市场，当局首先需要铸币
- en: and issue an ERC20 token to represent CO2 reduction. The carbon credit
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
  zh: 发行一个ERC20代币来表示CO2减排。碳信用
- en: authority first creates a Carbon Credit Token (CCT) by using a name such
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: 当局首先通过使用诸如
- en: as “United Groups’ Carbon Credit,” a symbol of “CCT,” and a total amount
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: 作为“联合集团碳信用”，象征“CCT”，总金额
- en: for CO2 reduction. The initial carbon credit is minted and owned by the
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: 减少CO2。初始碳信用额由
- en: authority account. Only the authority has the privilege to transfer or grant
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: 权限账户。只有权限方才有权转让或授予
- en: the carbon credits.
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: 碳信用额。
- en: To manage the carbon credits, the authority will appoint auditors
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了管理碳信用，当局将任命审计师
- en: to review and audit the requests from green energy providers to decide
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: 审查和审计绿色能源提供商的要求，以决定
- en: whether the claims can be granted. If the claims are granted, an event is
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果索赔被批准，将触发一个事件
- en: emitted to show the projectId and the credit amount.
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: 发行的碳信用额。
- en: To claim a carbon credit, green energy providers will first create
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: 为了索赔碳信用，绿色能源提供商首先创建
- en: an NFT token to represent the project. This NFT token is unique and
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: 一个NFT代币来表示项目。这个NFT代币是唯一的，
- en: points to the project records. The project team then files a claim that
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: 指向项目记录。项目团队然后提交一个索赔，
- en: contains information about the CO2 reduction amount and the carbon
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: 包含有关CO2减排量和碳信用额的信息
- en: '389'
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: '389'
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章 资助项目：代币和燃料费
- en: credit requested. The NFT related to the project will also have a Unified
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: 请求的项目的NFT也将有一个统一的
- en: Resource Location that points to an external source that records all
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: 资源位置，指向记录了所有
- en: relevant documents and reports for the project. Once this data is written
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: 项目相关的文件和报告。一旦这些数据被写入
- en: to the blockchain, a Claim event is emitted to inform auditors to audit the
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: 将索赔信息记录到区块链上，将索赔事件发出以通知审计师进行审计
- en: information in the claim. After the claims are audited and approved, the
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: 索赔信息。索赔经审核和批准后，
- en: authority will transfer the carbon credit to the green energy providers’
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: 当局将碳信用转移给绿色能源提供商
- en: accounts. The provider can then send the CCT asset to the carbon credit
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: 账户。提供商可以将CCT资产发送到碳信用
- en: marketplace for trading.
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: 交易市场。
- en: On the consumption side, manufacturers or consumers who need
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: 在消费端，需要
- en: the carbon credit to meet the quota will buy carbon credits from the
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: 碳信用额以满足配额，将从
- en: marketplace. The cryptocurrency paid to the green energy provider for
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: 市场。为碳信用支付给绿色能源提供商的加密货币
- en: CCT asset can be used to expand the work of the green energy provider to
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: CCT资产可用于扩大绿色能源提供商的工作范围
- en: produce more renewable energy.
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: 生产更多可再生能源。
- en: 'For a carbon credit project example, refer to the following repository:'
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: 有关碳信用项目示例，请参考以下存储库：
- en: '[https://github.com/masaun/tokenized- carbon- credit- marketplace/](https://github.com/masaun/tokenized-carbon-credit-marketplace/blob/main/smart-contract/contracts/GreenNFT.sol)'
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
- en: '[blob/main/smart- contract/contracts/GreenNFT.sol](https://github.com/masaun/tokenized-carbon-credit-marketplace/blob/main/smart-contract/contracts/GreenNFT.sol)'
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
- en: '**Token Taxonomy Initiative**'
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
- en: Carbon credit token, solar token, electricity token, parts token, system
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
- en: token, and water token can all be classified as enterprise tokens and can
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
- en: be designed using a more formal definition of tokens. Organizations such
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
- en: as the Enterprise Ethereum Alliance (EEA) and InterWork Alliance (IWA)
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
- en: have been working on Token Taxonomy Initiatives (TTI) to develop a token
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
- en: framework that can be formalized and used to tokenize all identifiable
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
- en: assets in complex enterprise use cases.
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
- en: The token taxonomy infrastructure and framework have the following
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
- en: 'goals and key features:'
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
- en: • Blockchain agnostic, meaning that it is not dependent
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
- en: on Solidity, Haskell, WASM, or Java programming
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
- en: languages for different blockchains
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
- en: '390'
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
- en: '![](index-401_1.png)'
  id: totrans-1179
  prefs: []
  type: TYPE_IMG
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
- en: • Understandable for both business and technical
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
- en: professionals
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
- en: • Descriptive as well as programmable
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
- en: • Address broad usage scenarios for the enterprise and
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
- en: public blockchains
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
- en: • Aim for ease of use, improved interoperability,
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
- en: easier communication, and faster and more secure
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
- en: development
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
- en: The following picture (Figur[e 10-2) sho](#p401)ws the hierarchy of token
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
- en: taxonomy. Different from ERC20 and ERC721 where tokens are defined
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
- en: in specification and coded into smart contract, the Token Taxonomy
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
- en: Framework (TTF) defines tokens in three layers. The first layer is the
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
- en: template layer where the property, formula, and behavior of the tokens
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
- en: are defined. The token templates can be generic, such as the loyalty token
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
- en: template or inventory token template. The second layer is the class layer
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
- en: when templates are assigned parameters to create token classes. For
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
- en: example, loyalty token templates can be applied with airline loyalty or
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
- en: hotel loyalty parameters to create an airline loyalty token class or hotel
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
- en: loyal token class. The token class can then be instantiated into instances
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
- en: such as a Delta or AA airlines loyalty token.
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
- en: '***Figure 10-2\.** Token Taxonomy example*'
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
- en: '391'
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
- en: When using this framework for an Ethereum smart contract, the
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
- en: template layer is similar to ERC20 or ERC721 specifications. The class
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
- en: layer extends the ERC20 smart contracts into airline loyalty tokens or hotel
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
- en: tokens. The instance layer constructs specific tokens with the token smart
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
- en: contract constructor function during deployment.
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
- en: TTF also defines several fundamental attributes for a formalized token,
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
- en: 'including the following:'
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
- en: '**Token unit** – The unit of a token that can be Fractional, Whole, or'
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
- en: Singleton.
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
- en: Fractional means that the token can be divided into fractional units.
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
- en: Whole means that the token cannot be divided but can have
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: 整体意味着代币不能被分割，但可以有
- en: multiple copies.
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
  zh: 多份。
- en: Singleton means that the token cannot be divided and has a
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: 单例意味着代币不能被分割，并且有一个
- en: quantity of 1\.
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: 数量为1。
- en: '**Value type** – If the token has value, its value type is Intrinsic. If a
    token'
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: '**值类型** – 如果代币有价值，其价值类型是内在的。如果一个代币'
- en: is a representation of a physical or digital item that has value, its value
    type
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: 是一个有价值的物理或数字物品的代表，其价值类型
- en: is Reference.
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: 是引用。
- en: '**Representation type** – Tokens that do not have individual identities'
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: '**表示类型** – 不具有个体身份的代币'
- en: are called common or fungible tokens. Tokens that have an index or serial
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
  zh: 被称作普通或可替代的代币。具有索引或序列号的代币
- en: number are called unique or nonfungible tokens.
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: 被称为独特或非可替代的代币。
- en: '**Template type** – Templates describe the basic characteristics of'
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: '**模板类型** – 模板描述了'
- en: tokens. Primitive tokens such as ERC20 or ERC721 are single tokens. More
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
  zh: 代币。例如ERC20或ERC721这样的原始代币是单一的代币。更多的
- en: complex tokens can be created by extending the basic tokens. A hybrid
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: 通过扩展基本代币可以创建复杂的代币。混合
- en: token can have a parent token as well as child tokens of different types.
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: 代币可以有父代币以及不同类型的子代币。
- en: Besides the fundamental properties mentioned earlier, the tokens
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面提到的基本属性外，代币
- en: defined in TTF can also have behavioral properties that allow them to be
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
  zh: 在TTF中定义的模板也可以具有允许它们的行为属性
- en: mintable, transferable, and burnable.
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: 可铸造，可转让，且可销毁。
- en: Transferability is the ability to transfer ownership of the token. Both
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: 可转让性是转让代币所有权的能力。双方
- en: ERC20 and ERC721 tokens are transferable.
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: ERC20和ERC721代币是可转让的。
- en: Mintability is the ability to issue new tokens of the class. Creating new
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: 可铸造性是发行该类新代币的能力。创建新
- en: diplomas for graduating students is an example of minting.
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: 为毕业生颁发文凭是铸造的一个例子。
- en: '392'
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: '392'
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章 资助一个项目：代币和燃料费。
- en: Burnability is the ability to remove tokens from the supply. Some
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: 可销毁性是从流通中移除代币的能力。一些
- en: projects can burn project tokens to decrease the circulating number of
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: 项目可以通过销毁项目代币来减少流通中的代币数量
- en: token supply.
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: 代币供应。
- en: The TTI might seem to be abstract when viewed from the framework
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: 从框架的角度看，TTI可能看起来很抽象
- en: point of view. It is actually quite useful to build generic tools such as
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: 观点来看。实际上，构建如
- en: a token designer that can be used to create tokens through a GUI that
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可以通过GUI创建代币的代币设计师。
- en: supports drag-and-drop features. Developers or users do not need to write
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: 支持拖放功能。开发人员或用户不需要编写
- en: smart contract code for tokens. The code will be automatically generated
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: 代币的智能合约代码。代码将自动生成
- en: when users define tokens through text or GUI tools. The work of TTI is still
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户通过文本或GUI工具定义代币时。TTI的工作仍然
- en: in progress and is currently not accepted as a standard yet.
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: 正在进行中，目前还不是标准。
- en: '**Token Economy Consideration**'
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: '**代币经济考虑**'
- en: '**Token Allocation**'
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: '**代币分配**'
- en: When reward tokens are proposed and designed, they need to be awarded
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
  zh: 当奖励代币被提出和设计时，它们需要被颁发
- en: to those who contribute to the projects. Normally, stakeholders such as
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: 那些为项目做出贡献的人。通常，利益相关者如
- en: project teams, funders, and communities will need to be considered. For
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
  zh: 项目团队、资助者和社区需要考虑。对于
- en: example, the Filecoin project is a blockchain-based decentralized storage
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
  zh: 示例，Filecoin项目是一个基于区块链的去中心化存储项目。
- en: network. The project team built a persistent storage service on top of the
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: 网络。项目团队在
- en: IPFS protocol that allows data users to use Filecoin to incentivize miners
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
  zh: IPFS协议允许数据用户使用Filecoin激励矿工
- en: to provide long-term data storage and availability. Filecoin tokens are
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
  zh: 提供长期数据存储和可用性。Filecoin代币是
- en: designed as a fungible token that uses the percentage chart, shown in the
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
  zh: 设计为使用百分比图表的可替代代币，如图所示
- en: following diagram (Figure [10-3), t](#p404)o allocate Filecoin tokens.
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表（图[10-3）]来分配Filecoin代币。
- en: '393'
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: '393'
- en: '![](index-404_1.jpg)'
  id: totrans-1259
  prefs: []
  type: TYPE_IMG
  zh: '![](index-404_1.jpg)'
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章 资助一个项目：代币和燃料费。
- en: '***Figure 10-3\.** Filecoin token allocation*'
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: '**图10-3.** Filecoin代币分配*'
- en: For the Filecoin project, the maximum number of tokens created
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Filecoin项目，创建的代币最大数量
- en: will be 20 billion. Five percent of the tokens are allocated to the Filecoin
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
  zh: 将是200亿。代币的5%分配给Filecoin
- en: Foundation to facilitate governance of the Filecoin network, fund critical
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
  zh: 基金会以促进Filecoin网络的治理，资助关键
- en: development projects, support the growth of the Filecoin ecosystem, and
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
- en: advocate for Filecoin and the decentralized web. Another 4.5% of the
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
- en: tokens are allocated to the Protocol Labs team and contributors, and 10.5%
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
- en: are for the Protocol Labs company. The Filecoin project allocates 10%
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
- en: of their tokens for the fundraising. The majority of tokens are allocated
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
- en: to miners to support storage mining rewards, block rewards, and other
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
- en: operations such as faucets and storage incentives. The final 15% of the
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
- en: tokens are reserved for future mining services and rewards.
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
- en: '**Token Distribution**'
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
- en: Once the tokens are allocated, there are different ways to distribute the
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
- en: tokens to the receivers, as shown in the following diagram (Figur[e 10-4):](#p405)
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
- en: '394'
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
- en: '***Figure 10-4\.** Token Distribution methods*'
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
- en: '**Gas Fee Consideration**'
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
- en: When funding a project, there are many factors to consider.
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
- en: The Ethereum blockchain has been made sustainable with a gas
  id: totrans-1281
  prefs: []
  type: TYPE_NORMAL
- en: economy in which each transaction is paid by senders to blockchain
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
- en: miners. If a project is building a new blockchain, then the gas fee
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
- en: mechanism should be considered thoroughly to ensure a sustainable
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
- en: network system. For projects that build decentralized applications, the cost
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
- en: of gas consumption should be examined to make sure the high gas cost
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
- en: '395'
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-1288
  prefs: []
  type: TYPE_NORMAL
- en: of transactions will not become a showstopper for the applications. In the
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
- en: following, we discuss how Ethereum gas works and if there exist ways to
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
- en: lower gas fees in smart contract development.
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
- en: '**What Is Ethereum Gas?**'
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
- en: In the Ethereum blockchain, gas can be viewed as the cost of performing
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
- en: transactions or as the mechanism to power the blockchain ecosystem.
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
- en: When a transaction is sent to the blockchain, a small amount of ether
  id: totrans-1295
  prefs: []
  type: TYPE_NORMAL
- en: needs to be specified and paid to the miner in order for the Ethereum
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
- en: blockchain node to take in the transaction to a block. The higher the gas
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
- en: fee, the higher the possibility for mining nodes to include the transaction.
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
- en: In addition to rewarding miners, the gas mechanism also increases the cost
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
- en: of network attacks by malicious users. In a public blockchain, everyone
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
- en: can access the network and send transactions to the miners. Without an
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
- en: appropriate gas fee, tremendous amounts of transactions may be sent to
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
- en: the network, causing congestion issues or even halting the network. The
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
- en: gas fee is a well-designed mechanism to maintain a sustainable network
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
- en: and balance decentralized application ecosystems.
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
- en: '**Understand Ethereum Gas with Gas Station Analogy**'
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
- en: Gas in Ethereum is a complex concept. It is difficult to grasp its meaning
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
- en: and implication for the blockchain network and application ecosystem.
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will use a gas station analogy to help readers better
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
- en: understand gas usage in Ethereum (Figur[e 10-5).](#p407)
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
- en: '396'
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
- en: '![](index-407_1.png)'
  id: totrans-1312
  prefs: []
  type: TYPE_IMG
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
- en: '***Figure 10-5\.** Gas Station Analogy*'
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
- en: Gas in transportation is used as fuel to power vehicles to move
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: 运输中的气体用作燃料，以驱动车辆移动
- en: people and goods from one location to another. On the other hand, gas in
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
  zh: 将人员和大件物品从一个地点转移到另一个地点。另一方面，在
- en: Ethereum is used to power the Ethereum network to make it more secure
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊用于推动以太坊网络，使其更加安全
- en: and less congested and to incentivize blockchain miners. Gas in Ethereum
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
  zh: 较不拥堵，并激励区块链矿工。以太坊中的气体
- en: is used to pay for transferring assets, deploying smart contracts, or calling
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: 用以支付资产转移、部署智能合约或调用
- en: smart contract functions.
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约功能。
- en: In a gas station, the gas price is normally marked as dollars per gallon,
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
  zh: 在加油站，汽油价格通常以每加仑美元标记，
- en: while in Ethereum, the gas price is also used to refer to the unit price of
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: 而在以太坊中，气体价格也用来指代单位价格的
- en: gas. The concept of the gas price is not that straightforward. The gas price
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
  zh: 气体。气体价格的概念并不那么简单。气体价格
- en: unit in Ethereum is wei per gas unit, where wei is the smallest unit of ether.
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊中的单位是每气体单位的 Wei，其中 Wei 是以太坊的最小单位。
- en: One ether is equal to 10 to the power of 18 wei. The gas unit refers to the
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: 一个以太币等于10的18次方 Wei。气体单位指的是
- en: mining cost in Ethereum. It is manually defined in the gas cost table in the
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊的挖矿成本。它是在气体成本表中手动定义的
- en: Ethereum yellow paper. For example, an addition operation has a gas cost
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊白皮书。例如，加法操作的气体成本
- en: of 3, and multiplication has a gas cost of 5\. The total gas fee will be equal
    to
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: 3, 乘法操作的气体成本为 5\. 总气体费用将等于
- en: the gas price multiplied with the gas consumed.
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
  zh: 气体价格乘以消耗的气体。
- en: '397'
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: '397'
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章 资助一个项目：代币和气体费用
- en: In the Ethereum gas mechanism, there is also the concept of gas limits.
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊的气体机制中，也有气体限制的概念。
- en: This is the maximum amount of gas a single transaction can consume.
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: 单个交易可以消耗的最多气体量。
- en: The reason to have a gas limit is to protect the sender account. Sometimes,
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
  zh: 设置气体限制的原因是为了保护发送者账户。有时，
- en: a smart contract might go into a computation loop and drain the whole
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
  zh: 一个智能合约可能会进入计算循环并耗尽整个
- en: account balance if there is no gas limit set. For a car, the gas limit is the
    gas
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有设置气体限制，则发送者账户的余额。对于汽车，油量限制就是油
- en: tank capacity. When a gas limit is set and the consumption of gas exceeds
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
  zh: 油箱容量。当设置了气体限制并且气体消耗超过
- en: that limit, the transaction will be marked as failed, and the state is reverted
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: 超出该限制，交易将被标记为失败，状态将回滚
- en: back to its original state.
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚到原始状态。
- en: There are two kinds of transactions, the first of which is a simple asset
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
  zh: 交易有两种类型，其中一种是简单的资产
- en: transfer to move assets from one account to another. These asset transfers
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
  zh: 转账可将资产从一帐户转移到另一帐户。这些资产转移
- en: will consume 21,000 Gwei gas. The second transaction type is the smart
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: 将消耗 21,000 GWei 气体。第二种交易类型是智能
- en: contract call. The gas consumption is much more than the common asset
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
  zh: 合约调用。消耗的气体比普通资产要多得多。
- en: transfer.
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: 转账。
- en: Furthermore, for the Ethereum blockchain, there is also a maximum
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对于以太坊区块链，还有一个最大
- en: block gas limit. This is the limit of gas for all transactions in a block.
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: 区块气体限制。这是整个区块内所有交易的气体限制。
- en: Finally, the gas consumed here is in the unit of wei. Normally, the
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，此处消耗的气体是以太坊的单位 Wei。通常，
- en: actual cost is measured in USD in which the gas consumed is multiplied by
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
  zh: 实际成本以美元计算，其中消耗的气体乘以
- en: the price of ether to get the fiat cost.
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
  zh: 以太币的价格计算法定货币成本。
- en: '**Quantize Gas Expenses in a Smart Contract Program**'
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: '**在智能合约程序中量化气体费用**'
- en: When a decentralized application is deployed, one of the biggest costs for
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
  zh: 当部署去中心化应用时，对于
- en: the users is the gas fee. The gas fee for Ethereum mainnet transactions
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
  zh: 用户最大的成本之一是气体费。以太坊主网交易的气体费
- en: has been skyrocketing and sometimes reaches over 200 USD for a single
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
  zh: 已经飙升，有时单个
- en: transaction. Hence, the feasibility study of the project will need to include
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: 交易。因此，项目的可行性研究将需要包括
- en: a gas fee expenses analysis to see if the project is financially sustainable.
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
  zh: 对气体费用进行分析，以判断项目在财务上是否可行。
- en: For example, some people have proposed using blockchain to build a
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，有些人提议用区块链来构建一个
- en: decentralized music service. Quantitative analysis can help determine the
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: 去中心化音乐服务的可行性。量化分析有助于确定
- en: cost feasibility for storing musical data, both for musical bits and metadata.
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
  zh: 存储音乐数据（包括音乐比特和元数据）的成本效益分析。
- en: '398'
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
  zh: '398'
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章 资助一个项目：代币和气体费用
- en: As explained in Chapt[er 7, S](https://doi.org/10.1007/978-1-4842-8164-2_7)olidity
    smart contracts are compiled into bytecodes and then deployed to and executed
    on the blockchain. Each
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
- en: bytecode command contains an opcode and operands. The gas costs for
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
- en: various opcodes are shown in the Ethereum yellow paper with some added
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
- en: opcodes and modification in EIPs. The following is the summary of the gas
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
- en: costs for categories of opcodes (Figure [10-6](#p409)).
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
- en: '***Figure 10-6\.** Gas costs for various opcodes*'
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
- en: '399'
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
- en: '***Figure 10-6\.*** ( *continued*)'
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
- en: As we can see from the gas cost table, arithmetic operations such as
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
- en: addition, subtraction, multiplication, division, and logical operations
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
- en: such as AND/OR only cost about 2 to 5 gas units and can be viewed as
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
- en: low gas fee operations. Environment operations such as getting sender
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
- en: address, ether value, and block number are also low gas operations that
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
- en: only consume 2 gas units. The memory manipulating operations are more
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
- en: complex. The operation on a single 256-bit word is only 2 for loading and
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
- en: 3 for storing. However, memory storage also has an additional memory
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
- en: expansion cost. When more data is stored, there is a cost for memory.
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
- en: The cost for memory storage operations is not linear. We will explain this
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
- en: further with the next table.
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
- en: '400'
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
- en: The most expensive opcode operation is storing to the blockchain.
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
- en: When storing data to the blockchain, the cost per word is 20,000 gas
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
- en: units for a nonzero value and 5,000 for a zero value. Loading data from
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
- en: blockchain is 200 gas units per word.
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
- en: There are program counter–related operations such as JUMP, JUMPI,
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
- en: PC, and JUMPDEST defined in the table as well. They cause 1 to 10 gas
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
- en: units, respectively.
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
- en: Halting program operations have very different gas costs. Opcode
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
- en: STOP or RETURN is used to halt the execution of a function. The RETURN
  id: totrans-1391
  prefs: []
  type: TYPE_NORMAL
- en: opcode also returns output data to the calling function. Both opcodes do
  id: totrans-1392
  prefs: []
  type: TYPE_NORMAL
- en: not consume gas.
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
- en: REVERT is an operation that encounters an issue and has to undo all
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
- en: changes to the blockchain. The remaining unused gas allocated to the
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
- en: transaction is returned to the sender. The SELFDESTRUCT operation halts
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
- en: the execution and registers an account for later use. This opcode costs at
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
- en: least 5000 gas units.
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
- en: The preceding table shows the gas cost at the opcode and word
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
- en: payload level. For storage operations, the cost is not necessarily linear. For
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
- en: example, for memory storage operations, there is an additional memory
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
- en: expansion cost. The total cost for MSTORE and MSTORE8 is defined as
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
- en: the sum of memory expansion and static store operations as shown in the
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
- en: 'following:'
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
- en: gas_cost_operation = (new_mem_size_words ^ 2 // 512) + (3 * new_
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
- en: mem_size_words)
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
- en: The following table (Figur[e 10-7) sho](#p412)ws the cost of storage for stack,
    memory, and persisted storage for word, kilobyte, and megabyte data sizes.
  id: totrans-1407
  prefs: []
  type: TYPE_NORMAL
- en: '401'
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
- en: '***Figure 10-7\.** Gas cost of storages for various categories and sizes*'
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
- en: For the stack operations, there is no additional memory expansion
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
- en: cost. The gas per word for POP, PUSHX, DUPX, and SWAPX is defined as
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
- en: 2, 3, 3, and 3 per word, respectively. In Ethereum, a word has 256 bits or 32
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
- en: bytes in size. Since one kilobyte is equal to 32 words (1024 bytes/32 bytes),
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
- en: the gas cost per kilobyte is 32 times the gas cost per word. Hence, the gas
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
- en: per KB for POP, PUSH, DUP, and SWAP is 64, 96, 96, and 96, respectively.
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, since 1MB is 1024 times of 1KB, the gas per MB for POP, PUSH,
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
- en: DUP, and SWAP is 65,536, 98,304, 98304, and 98304, respectively.
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
- en: For memory operations, it is more complex when scaling it to
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
- en: KB and MB.
  id: totrans-1420
  prefs: []
  type: TYPE_NORMAL
- en: The first MLOAD does not have a memory expansion cost. The gas cost
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
- en: for 1KB is equal to 32 times the gas cost per word, which is 96, and the cost
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
- en: per MB is 1024 times the cost per KB, which is 98,304\.
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
- en: For both MSTORE and MSTORE8, there are memory expansion costs
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
- en: with the formula shown in the preceding equation. The cost per KB and
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
- en: 'MB for MSTORE and MSTORE8 is shown in the following:'
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
- en: For 1KB MSTORE or MSTORE8, there are 32 words for new_mem_size_
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
- en: 'word. The following memory expansion equation is used:'
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
- en: '402'
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 10 Fund a projeCt: tokens and Gas Fees'
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
- en: gas_cost_operation = ( new_mem_size_word ^ 2 // 512) + (3 * new_
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
- en: mem_size_words)
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
- en: The result is
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
- en: gas_cost_operation_per_KB = (32^2)/512+3*32 = 98
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, for 1MB MSTORE and MSTORE8, there are
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
- en: 32*1024=32,768 words.
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
- en: The result becomes
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
- en: gas_cost_operation_per_MB = (32768^2)/512+3*32768 = 2,195,456
  id: totrans-1438
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the calculation shows that the memory storage operations
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
- en: are not linear. It increases dramatically when the stored data size increases.
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
- en: For the persisted storage with SSTORE and SLOAD, the gas cost grows
  id: totrans-1441
  prefs: []
  type: TYPE_NORMAL
- en: linearly with data size. The cost per word for SLOAD is 200\. Hence, the
  id: totrans-1442
  prefs: []
  type: TYPE_NORMAL
- en: MLOAD gas cost per KB and MB is 6,400 and 6,553,600, respectively.
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, since cost per word for SSTORE is 20,000, the cost for KB and MB
  id: totrans-1444
  prefs: []
  type: TYPE_NORMAL
- en: is 640,000 and 655,360,000, respectively.
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
- en: From the preceding calculations, it is shown that the quantitative
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
- en: calculation of gas usage and cost is quite complex. In general, storing data
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
- en: in the blockchain and using large amounts of memory in the running
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
- en: nodes are also expensive and should be minimized as much as possible.
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
- en: Gas estimation should be built into project proposals to seek proper
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
- en: funding in order to make the project sustainable.
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**'
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
- en: In this capture, we describe core components for funding a decentralized
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
- en: application project, including token design, token allocation, distribution,
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
- en: and gas cost. For the Ethereum blockchain, the significant gas cost is still
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
- en: a big challenge. There are alternatives such as using a similar blockchain
  id: totrans-1456
  prefs: []
  type: TYPE_NORMAL
- en: with EVM and Solidity support but a lower gas fee. There is also a
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
- en: possibility to build a blockchain that does not require a gas fee. These
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
- en: solutions are all technically possible and can be evaluated to see if it fits
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
- en: with the business model.
  id: totrans-1460
  prefs: []
  type: TYPE_NORMAL
  zh: 与业务模式相结合。
- en: '403'
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: '403'
- en: '**CHAPTER 11**'
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
  zh: '**第11章**'
- en: '**Building Team**'
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
  zh: '**构建团队**'
- en: '**Projects**'
  id: totrans-1464
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目**'
- en: '**Problem Statement and Brainstorming**'
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题陈述和头脑风暴**'
- en: When the Ethereum blockchain was first built, there was no chainId in
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
  zh: 当以太坊区块链最初建立时，链Id是不存在的
- en: the blocks. The concept of chainId was introduced after a DAO attack
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
  zh: 区块。chainId的概念是在DAO攻击之后引入的。
- en: in 2016 that resulted in 3.6 million ethers stolen and made Ethereum
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
  zh: 2016年发生了一次，导致360万个以太币被盗，使以太坊
- en: blockchain to fork into two blockchains, that is, Ethereum mainnet (ETH)
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链分叉成两个区块链，即以太坊主网（ETH）
- en: and Ethereum Classic. The following diagram (Figur[e 11-1) sho](#p415)ws how
    the fork happened. In the diagram, block m is a block where the DAO attack
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
  zh: 和以太坊经典。以下图表（图[11-1](#p415)）展示了分叉是如何发生的。在图表中，区块m是DAO攻击的区块。
- en: happened. The Ethereum foundation had a vote, and the community
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了。以太坊基金会进行了投票，社区
- en: decided to patch the Ethereum node client and invalidate the hacker
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
  zh: 决定修补以太坊节点客户端并无效化黑客
- en: accounts. This is not a rollback but rather an update of all client nodes
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: 账户。这不是回滚，而是客户端节点的全部更新
- en: to force a change of the state of Ethereum. There are some miners who
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
  zh: 对以太坊进行强制状态更改。有一些矿工
- en: believe that blockchain should be immutable and should not be changed
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
  zh: 认为区块链应该是不可变的，不应该更改
- en: due to attack. These miners continue to append blocks to the DAO
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
  zh: 由于攻击。这些矿工继续向DAO添加区块。
- en: attacked blocks and retain the immutability of the Ethereum blockchain.
  id: totrans-1477
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击区块并保留以太坊区块链的不可变性。
- en: They called this blockchain Ethereum Classic (ETC). Since then, there
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
  zh: 他们称这个区块链为以太坊经典（ETC）。自那时以来，已有
- en: have been two forked Ethereum blockchains that share the same blocks
  id: totrans-1479
  prefs: []
  type: TYPE_NORMAL
  zh: 已经分叉成两个共享相同区块的以太坊区块链
- en: until the block of 1920000\.
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
  zh: 直到区块1920000\。
- en: © Weijia Zhang and Tej Anand 2022
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
  zh: © 张伟嘉和Tej Anand 2022
- en: '405'
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
  zh: '405'
- en: W. Zhang and T. Anand, *Blockchain and Ethereum Smart Contract Solution Development*,
  id: totrans-1483
  prefs: []
  type: TYPE_NORMAL
  zh: 张伟嘉（Weijia Zhang）和安德（Tej Anand）合著了《**区块链与以太坊智能合约解决方案开发**》。
- en: '[https://doi.org/10.1007/978-1-4842-8164-2_11](https://doi.org/10.1007/978-1-4842-8164-2_11#DOI)'
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://doi.org/10.1007/978-1-4842-8164-2_11](https://doi.org/10.1007/978-1-4842-8164-2_11#DOI)'
- en: '![](index-415_1.png)'
  id: totrans-1485
  prefs: []
  type: TYPE_IMG
  zh: '![](index-415_1.png)'
- en: Chapter 11 Building team projeCts
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
  zh: 第11章 构建团队项目
- en: '***Figure 11-1\.** Overview of ETH and ETC fork*'
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
  zh: '***图11-1。ETH和ETC分叉概览***'
- en: With Ethereum blockchains forked into ETH and ETC, there is a
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
  zh: 随着以太坊区块链分叉成ETH和ETC，存在一个
- en: double spend or replay attack issue. If Alice has 50 ethers at block M, she
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
  zh: 双重花费或重放攻击问题。如果爱丽丝在区块M有50个以太币，她
- en: actually has 50 ethers for ETH chain and 50 ethers for ETC chain. Suppose
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上在ETH链上有50个以太币，在ETC链上也有50个以太币。假设
- en: Alice signs a transaction to transfer 50 ethers to Bob on the ETH chain,
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
  zh: 爱丽丝在ETH链上签署一个转移50个以太币给鲍勃的交易，
- en: since the ETC and ETH are almost identical, Bob can take the same signed
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
  zh: 由于ETC和ETH几乎相同，鲍勃可以采取相同的签名
- en: transaction and send it to the ETC chain and receive 50 ethers on the ETC
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
  zh: 交易并在ETC链上收到50个以太币。
- en: chain as well.
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
  zh: 链。
- en: To overcome double spend/replay attack on two blockchains, Vitalik
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决两个区块链上的双重花费/重放攻击，维塔利克
- en: proposed EIP-155 (simple replay attack protection) to assign an integer
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
  zh: 提出了EIP-155（简单的重放攻击保护）以分配一个整数。
- en: to each blockchain and sign the transaction with a chainId. This way, the
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: 对每个区块链签名交易，并使用chainId。这样，
- en: transaction signed by Alice for Ethereum mainnet (ETH) cannot be resent
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
  zh: 爱丽丝为以太坊主网（ETH）签署的交易无法重发。
- en: to Ethereum Classic (ETC) chain to cause double spend.
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
  zh: 到以太坊经典（ETC）链上造成双重花费。
- en: In EIP-155, some chainIds are preallocated as shown in the following
  id: totrans-1500
  prefs: []
  type: TYPE_NORMAL
  zh: 在EIP-155中，一些chainIds如以下所示被预分配。
- en: table (Figur[e 11-2](#p416)). To obtain a new chainId, an administrator on behalf
    of the blockchain community will need to go to [https://github.com/](https://github.com/ethereum-lists/chains)
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
  zh: 表（图[11-2](#p416)）。要获得一个新的chainId，区块链社区的负责人需要前往 [https://github.com/](https://github.com/ethereum-lists/chains)
- en: '[ethereum-lists/chains](https://github.com/ethereum-lists/chains) to submit
    a pull request to register for a new chainId. The assignment of the chainId is
    on the first-come first-serve basis'
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
  zh: '[ethereum-lists/chains](https://github.com/ethereum-lists/chains)提交拉取请求以注册新的chainId。chainId的分配是先到先得的基础'
- en: to ensure there is no collision of the chainIds.
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
  zh: 确保没有chainIds的冲突。
- en: '406'
  id: totrans-1504
  prefs: []
  type: TYPE_NORMAL
  zh: '406'
- en: Chapter 11 Building team projeCts
  id: totrans-1505
  prefs: []
  type: TYPE_NORMAL
  zh: 第11章 构建团队项目
- en: '***Figure 11-2\.** Chainids defined in Ethereum mainnet and testnetst*'
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
  zh: '***图11-2。在以太坊主网和测试网上定义的chainids***'
- en: Although EIP-155 solves the replay attack for various blockchains,
  id: totrans-1507
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管EIP-155为各种区块链解决了重放攻击问题，
- en: there are some drawbacks including that the chainId is self-defined and
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些缺点，包括 chainId 是自定义的，并且
- en: not bundled with blockchain property. A malicious user may construct
  id: totrans-1509
  prefs: []
  type: TYPE_NORMAL
  zh: 不与区块链属性捆绑。恶意用户可能构造
- en: a blockchain with a chainId of another blockchain. This can cause
  id: totrans-1510
  prefs: []
  type: TYPE_NORMAL
  zh: 将另一个区块链的 chainId 用于区块链。这可能会导致
- en: crosschain transaction being sent to a wrong target blockchain. Another
  id: totrans-1511
  prefs: []
  type: TYPE_NORMAL
  zh: 发送跨链交易到错误的目标区块链。另一个
- en: drawback is that when a blockchain is forked into two blockchains such as
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
  zh: 分叉的缺点是，当一个区块链分叉成两个区块链时，例如
- en: the case of ETH and ETC, the two blockchains will have the same chainId
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊（ETH）和以太经典（ETC）的情况，这两个区块链将具有相同的 chainId
- en: to cause conflict.
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
  zh: 引起冲突。
- en: '**Specifications and Solutions**'
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
  zh: '**规格和解决方案**'
- en: To overcome the drawback of simple number-based chainId, a
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服简单数字 based chainId 的缺点，一个
- en: crosschainId with 32 bytes can be used to add more information to the
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
  zh: 32 字节的跨链 ID 可以用来添加更多信息到该跨链 ID 中。*
- en: crosschain ID to make it more versatile. The crosschainId can have a
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
  zh: 使跨链 ID 更具通用性。跨链 ID 可以具有一个
- en: genesis block hash and a checksum so that third-party application and
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
  zh: 创世区块散列和一个校验和，以便第三方应用程序和
- en: user can verify that the crosschain ID is valid for a particular blockchain.
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以验证该跨链 ID 对特定区块链是否有效。
- en: '407'
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
  zh: '407'
- en: Chapter 11 Building team projeCts
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
  zh: 第11章 构建团队项目
- en: The specification of the crosschainId is published as Ethereum
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
  zh: 跨链Id的规格作为以太坊
- en: Improvement Protocol (EIP) 3220 and is shown in the following.
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
  zh: 改进协议（EIP）3220，如下所示。
- en: '**EIP-3220: Crosschain Identifier Specification**'
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
  zh: '**EIP-3220：跨链标识符规格**'
- en: '**Simple Summary**'
  id: totrans-1526
  prefs: []
  type: TYPE_NORMAL
  zh: '**简单概述**'
- en: A self-verifying unique blockchain identifier that deals with forks.
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
  zh: 一个自验证的独特区块链标识符，用于解决分叉问题。
- en: '**Abstract**'
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
  zh: '**摘要**'
- en: '*The crosschain ID is a 32-byte hex string and with some bytes extracted from*'
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: 跨链 ID 是一个 32 字节的十六进制字符串，从中提取一些字节来自*
- en: '*blockchain hash and some manually defined to characterize a blockchain.*'
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链散列和一些手动定义的特性来描述一个区块链。*
- en: '*We also propose a* *registration and lookup service* *to retrieve blockchain*
    *metadata from the crosschain ID.*'
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们还提出了一种*注册和查询服务*，可以从跨链 ID 中检索区块链元数据。*'
- en: '**Motivation**'
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
  zh: '**动机**'
- en: '*With the success of Bitcoin and Ethereum, various blockchains such as EOS,*'
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
  zh: 随着比特币和以太坊的成功，各种区块链如 EOS、*
- en: '*Ripple, Litecoin, Besu, Wanchain, and the like have been developed and*'
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
  zh: 开发了如 Ripple、Litecoin、Besu、Wanchain 等，*
- en: '*are growing at a fast pace. There are also other private and consortium*'
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
  zh: '*正在快速发展。还有一些其他的私有和联盟链*'
- en: '*blockchains such as Hyperledger Fabric, Hyperledger Besu, Stellar, Corda,*'
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
  zh: '*如 Hyperledger Fabric、Hyperledger Besu、Stellar、Corda 的*'
- en: '*and Quorum that only allow nodes with permitted identities to join the*'
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
  zh: 仅允许具有许可身份的节点加入的*
- en: '*blockchain network. The growth of public and private blockchains imposes*'
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
  zh: '*区块链网络时。公有和私有区块链的增长强加了*'
- en: '*challenges for interchain interoperability, particularly when these chains
    are*'
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
  zh: '*跨链互操作性面临的挑战，特别是当这些链是*'
- en: '*heterogeneous and incompatible. The Enterprise Ethereum Alliance formed*'
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
  zh: 组成的异构和互不兼容。企业以太坊联盟成立*
- en: '*the* *Crosschain Interoperability Task Force (CITF)* *to look into common*
    *crosschain problems and solutions. CITF team noticed that there is a lack*'
  id: totrans-1541
  prefs: []
  type: TYPE_NORMAL
  zh: '*跨链互操作性任务组（CITF）* *调查常见的跨链问题和解决方案。CITF团队注意到有一个缺失*'
- en: '*of unique identifiers to characterize and describe a blockchain. Several*'
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
  zh: 以描述和表示区块链的唯一标识符。有几个*
- en: '*proposals were discussed in EEA Crosschain Interoperability Task Force*'
  id: totrans-1543
  prefs: []
  type: TYPE_NORMAL
  zh: '*EEA 跨链互操作性任务组的讨论中讨论了这些提案*'
- en: '*meetings and discussions.*'
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
  zh: '*会议和讨论。*'
- en: '408'
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
  zh: '408'
- en: Chapter 11 Building team projeCts
  id: totrans-1546
  prefs: []
  type: TYPE_NORMAL
  zh: 第11章 构建团队项目
- en: '[*EIP- 155*](https://eips.ethereum.org/EIPS/eip-155) *provides a unique identifier
    to a blockchain to provide simple* *relay attack protection. This specification
    defines an integer for chainId*'
  id: totrans-1547
  prefs: []
  type: TYPE_NORMAL
  zh: '[*EIP- 155*](https://eips.ethereum.org/EIPS/eip-155) *为区块链提供唯一标识符，以提供简单的* *中继攻击保护。本规范定义了一个整数作为
    chainId*'
- en: '*for a blockchain and signs the chainId into a transaction data and hence*'
  id: totrans-1548
  prefs: []
  type: TYPE_NORMAL
  zh: '*在交易数据中签署 chainId，从而*'
- en: '*prevents attackers to send the same transaction to different blockchains.*'
  id: totrans-1549
  prefs: []
  type: TYPE_NORMAL
  zh: '*防止攻击者将同一笔交易发送到不同的区块链。*'
- en: '*This specification will require blockchains to define a chainId and register*'
  id: totrans-1550
  prefs: []
  type: TYPE_NORMAL
  zh: 本规范将要求区块链定义 chainId 并注册*
- en: '*the chainId in a public repository.*'
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
  zh: 在公共存储库中注册 chainId。*
- en: '*The challenge of using an integer for chainId is that it is not broad*'
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用整数作为 chainId 的挑战在于它不够广泛*'
- en: '*enough to cover all blockchains and it does not prevent different blockchains*'
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
  zh: '*足以涵盖所有区块链，并且它不能防止不同的区块链*'
- en: '*using the same chainId. Also, it does not address the issue for two forked*'
  id: totrans-1554
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用相同的chainId。此外，它没有解决两个分叉的*'
- en: '*blockchains having the same chainId.*'
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
  zh: '*具有相同chainId的区块链。*'
- en: '*Hence, there is a need for a more robust blockchain identifier that will*'
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
  zh: '*因此，需要一个更健壮的区块链标识符，以*'
- en: '*overcome these drawbacks, especially for crosschain operations where*'
  id: totrans-1557
  prefs: []
  type: TYPE_NORMAL
  zh: '*克服这些缺点，特别是对于跨链操作，其中*'
- en: '*multiple chains are involved. A blockchain identifier (crosschain ID) should*'
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
  zh: '*当涉及多个链时。一个区块链标识符（跨链ID）应该*'
- en: '*be unique and satisfy the following* *requirements:*'
  id: totrans-1559
  prefs: []
  type: TYPE_NORMAL
  zh: '*是唯一的，并满足以下要求：*'
- en: • *Should provide identification, description, and discovery*
  id: totrans-1560
  prefs: []
  type: TYPE_NORMAL
  zh: • *应提供识别、描述和发现的功能*
- en: '*of blockchains*'
  id: totrans-1561
  prefs: []
  type: TYPE_NORMAL
  zh: '*的区块链*'
- en: • *Should provide unique identification of each blockchain*
  id: totrans-1562
  prefs: []
  type: TYPE_NORMAL
  zh: • *应提供每个区块链的唯一识别*
- en: '*in the crosschain service ecosystem*'
  id: totrans-1563
  prefs: []
  type: TYPE_NORMAL
  zh: '*在跨链服务生态系统中*'
- en: • *Should provide descriptions for blockchain identities*
  id: totrans-1564
  prefs: []
  type: TYPE_NORMAL
  zh: • *应提供区块链身份的描述，如chainId、名称、类型、共识机制等*
- en: '*such as chainId, name, type, consensus scheme, etc.*'
  id: totrans-1565
  prefs: []
  type: TYPE_NORMAL
  zh: '*例如，chainId、名称、类型、共识机制等*'
- en: • *Should provide a discovery mechanism for supported*
  id: totrans-1566
  prefs: []
  type: TYPE_NORMAL
  zh: • *应提供一种支持*
- en: '*blockchains and also for new blockchains in the*'
  id: totrans-1567
  prefs: []
  type: TYPE_NORMAL
  zh: '*区块链以及新区块链在*'
- en: '*ecosystem*'
  id: totrans-1568
  prefs: []
  type: TYPE_NORMAL
  zh: '*生态系统*'
- en: • *Should provide a mechanism for a joining blockchain to*
  id: totrans-1569
  prefs: []
  type: TYPE_NORMAL
  zh: • *应提供一种加入区块链的机制*
- en: '*register to the ecosystem*'
  id: totrans-1570
  prefs: []
  type: TYPE_NORMAL
  zh: '*注册到生态系统中*'
- en: • *Should provide a mechanism for a blockchain to edit*
  id: totrans-1571
  prefs: []
  type: TYPE_NORMAL
  zh: • *应提供一种使区块链能够编辑其*
- en: '*properties or unregister from the crosschain ecosystem*'
  id: totrans-1572
  prefs: []
  type: TYPE_NORMAL
  zh: '*属性或从跨链生态系统中注销*'
- en: '409'
  id: totrans-1573
  prefs: []
  type: TYPE_NORMAL
  zh: '409'
- en: Chapter 11 Building team projeCts
  id: totrans-1574
  prefs: []
  type: TYPE_NORMAL
  zh: CHAPTER 11 构建团队项目
- en: • *Should provide a mechanism to get some critical*
  id: totrans-1575
  prefs: []
  type: TYPE_NORMAL
  zh: • *应提供获取一些关键信息的方法，如*
- en: '*information of the blockchain*'
  id: totrans-1576
  prefs: []
  type: TYPE_NORMAL
  zh: '*区块链的信息*'
- en: • *Should provide a mechanism to differentiate an original*
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
  zh: • *应提供区分原始*
- en: '*blockchain and a forked blockchain*'
  id: totrans-1578
  prefs: []
  type: TYPE_NORMAL
  zh: '*区块链和分叉的区块链*'
- en: • *Should provide a mechanism to verify a chainId without*
  id: totrans-1579
  prefs: []
  type: TYPE_NORMAL
  zh: • *应提供一种无需*
- en: '*external registration service*'
  id: totrans-1580
  prefs: []
  type: TYPE_NORMAL
  zh: '*外部注册服务*'
- en: '**Specification**'
  id: totrans-1581
  prefs: []
  type: TYPE_NORMAL
  zh: '**规格**'
- en: The following diagram (Figure [11-3](#p420)) shows the definition of a 32-Byte
    Crosschain ID.
  id: totrans-1582
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表（图[11-3](#p420)）显示了32字节跨链ID的定义。
- en: '410'
  id: totrans-1583
  prefs: []
  type: TYPE_NORMAL
  zh: '410'
- en: Chapter 11 Building team projeCts
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
  zh: CHAPTER 11 构建团队项目
- en: '***Figure 11-3\.** Definition of a 32-byte crosschainId*'
  id: totrans-1585
  prefs: []
  type: TYPE_NORMAL
  zh: '***图11-3。32字节跨链ID的定义*'
- en: '411'
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
  zh: '411'
- en: Chapter 11 Building team projeCts
  id: totrans-1587
  prefs: []
  type: TYPE_NORMAL
  zh: CHAPTER 11 构建团队项目
- en: '**Rationale**'
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
  zh: '**理由**'
- en: '*We have considered various alternative specifications such as using a*'
  id: totrans-1589
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们已经考虑了各种备选方案，比如使用一个*'
- en: '*random unique hex string to represent a blockchain. The drawback of*'
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
  zh: '*用随机唯一的十六进制字符串来表示一个区块链。这种方法的缺点是*'
- en: '*this method is that the random ID cannot be used to verify a blockchain’s*'
  id: totrans-1591
  prefs: []
  type: TYPE_NORMAL
  zh: '*这种方法的问题是随机ID不能用来验证一个区块链的*'
- en: '*intrinsic identity such as the block hash of the genesis block. A second*'
  id: totrans-1592
  prefs: []
  type: TYPE_NORMAL
  zh: '*内在身份，如创世块的块散列。第二个*'
- en: '*alternative is simply using a genesis block hash to represent a blockchain
    ID*'
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
  zh: '*另一种选择就是简单地使用创世块散列来表示区块链ID*'
- en: '*for* *crosschain operations. The drawback of this is that this ID does not
    have* *information about the property of the blockchain and it has problems when*'
  id: totrans-1594
  prefs: []
  type: TYPE_NORMAL
  zh: '*对于跨链操作。这个ID的缺点是它没有关于区块链属性的信息，并且在*'
- en: '*a blockchain is forked into two blockchain.*'
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
  zh: '*一个区块链被分叉成两个区块链。*'
- en: '**Backward Compatibility**'
  id: totrans-1596
  prefs: []
  type: TYPE_NORMAL
  zh: '**向后兼容性**'
- en: '*CrosschainId can be* *backward compatible* *with EIP-155\. The crosschain
    ID*'
  id: totrans-1597
  prefs: []
  type: TYPE_NORMAL
  zh: '*跨链ID可以与EIP-155向后兼容。跨链ID*'
- en: '*contains a 4-byte segment to record the chainId based on EIP-155\.*'
  id: totrans-1598
  prefs: []
  type: TYPE_NORMAL
  zh: '*包含一个4字节段，记录基于EIP-155的chainId*'
- en: '**Security Considerations**'
  id: totrans-1599
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全考虑**'
- en: '*Collision of crosschain ID: Two blockchains can contain the same crosschain*'
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
  zh: '*跨链ID冲突：两个区块链可能包含相同的跨链*'
- en: '*ID and hence mistakenly transfer assets to a wrong blockchain.*'
  id: totrans-1601
  prefs: []
  type: TYPE_NORMAL
  zh: '*ID，从而错误地将资产转移到错误的区块链上。*'
- en: '*This security concern is addressed by comparing the hash of the*'
  id: totrans-1602
  prefs: []
  type: TYPE_NORMAL
  zh: '*这个问题通过比较*'
- en: '*crosschain ID with the hash of the genesis block. If it matches, then the*'
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
  zh: '*跨链ID与创世块的散列相匹配，如果匹配，则*'
- en: '*crosschain ID is verified. If not, the* *crosschain ID* *can be compared with
    the* *forked block hash. If none of the block hash match the crosschain ID hash,*'
  id: totrans-1604
  prefs: []
  type: TYPE_NORMAL
  zh: '*跨链ID已验证。如果没有，可以将与分叉块散列比较的* *跨链ID* *与创世块散列进行比较。如果没有任何块散列与跨链ID散列匹配，*'
- en: '*then the crosschain ID cannot be verified.*'
  id: totrans-1605
  prefs: []
  type: TYPE_NORMAL
  zh: '*那么跨链ID就不能被验证。*'
- en: '*Preventing relay attack: Although crosschain ID by itself is different from*'
  id: totrans-1606
  prefs: []
  type: TYPE_NORMAL
  zh: '*防止中继攻击：尽管跨链ID本身与*'
- en: '*chainId and it is not signed into blockchain transaction, the crosschain ID*'
  id: totrans-1607
  prefs: []
  type: TYPE_NORMAL
  zh: 链Id且未签名到区块链交易中，跨链ID*
- en: '*can still be used for preventing relay attack. An application that handles*'
  id: totrans-1608
  prefs: []
  type: TYPE_NORMAL
  zh: '*仍然可以用于防止中继攻击。处理*'
- en: '*crosschain transaction can verify the crosschain ID with its block hash*'
  id: totrans-1609
  prefs: []
  type: TYPE_NORMAL
  zh: 跨链交易可以通过其块哈希验证跨链ID*
- en: '*and decide whether the transaction is valid or not. Any transaction with a*'
  id: totrans-1610
  prefs: []
  type: TYPE_NORMAL
  zh: '*并决定交易是否有效。带有*'
- en: '*nonverifiable crosschain ID should be rejected.*'
  id: totrans-1611
  prefs: []
  type: TYPE_NORMAL
  zh: 无法验证的跨链ID应该被拒绝*。
- en: '412'
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
  zh: '412'
- en: Chapter 11 Building team projeCts
  id: totrans-1613
  prefs: []
  type: TYPE_NORMAL
  zh: 第11章 构建团队项目
- en: '*The* *crosschain ID* *is not required to be signed into blockchain tx. For*
    *blockchains that do not cryptographically sign crosschain ID into the blocks,*'
  id: totrans-1614
  prefs: []
  type: TYPE_NORMAL
  zh: 跨链ID*无需签名到区块链交易。对于*没有将跨链ID加密签名到区块的区块链，*
- en: '*the crosschain ID cannot be verified with the blocks themselves and has*'
  id: totrans-1615
  prefs: []
  type: TYPE_NORMAL
  zh: '*跨链ID不能与区块本身进行验证，并且有*'
- en: '*to be verified with external smart contract address and offchain utilities*'
  id: totrans-1616
  prefs: []
  type: TYPE_NORMAL
  zh: 与外部智能合约地址和离线工具*进行验证*
- en: '*implemented based on the crosschain ID specification.*'
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
  zh: 基于跨链ID规范*实施*。
- en: To use the crosschainId, a service needs to be developed and deployed
  id: totrans-1618
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用跨链ID，需要开发并部署服务
- en: to a blockchain to register crosschain identities for different blockchains.
  id: totrans-1619
  prefs: []
  type: TYPE_NORMAL
  zh: 将跨链身份注册到不同区块链的区块链。
- en: 'This service should provide the following features:'
  id: totrans-1620
  prefs: []
  type: TYPE_NORMAL
  zh: 此服务应提供以下功能：
- en: • Allow a user to register a blockchain to the service
  id: totrans-1621
  prefs: []
  type: TYPE_NORMAL
  zh: • 允许用户将区块链注册到服务
- en: • Allow administrator or a group of administrators to
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
  zh: • 允许管理员或管理员组
- en: approve or revoke a blockchain registered by a user
  id: totrans-1623
  prefs: []
  type: TYPE_NORMAL
  zh: 批准或撤销用户注册的区块链
- en: • Allow a user to modify the blockchain information
  id: totrans-1624
  prefs: []
  type: TYPE_NORMAL
  zh: • 允许用户修改区块链信息
- en: before it is finalized
  id: totrans-1625
  prefs: []
  type: TYPE_NORMAL
  zh: 在最终确定之前
- en: • Allow any user to list and retrieve crosschain IDs that
  id: totrans-1626
  prefs: []
  type: TYPE_NORMAL
  zh: • 允许任何用户列出和检索跨链ID
- en: are registered
  id: totrans-1627
  prefs: []
  type: TYPE_NORMAL
  zh: 已注册
- en: • Allow lookup of crosschain ID through legacy chainId
  id: totrans-1628
  prefs: []
  type: TYPE_NORMAL
  zh: • 允许通过旧链Id查询跨链ID
- en: defined in EIP-155
  id: totrans-1629
  prefs: []
  type: TYPE_NORMAL
  zh: 定义在EIP-155中
- en: '**Architecture**'
  id: totrans-1630
  prefs: []
  type: TYPE_NORMAL
  zh: '**架构**'
- en: The architecture of the crosschain identity service is shown in the
  id: totrans-1631
  prefs: []
  type: TYPE_NORMAL
  zh: 跨链身份服务的架构在
- en: following diagram (Figure [11-4). T](#p423)he blockchain shown on the bottom
    layer provides security and immutability for the service. The middle layer
  id: totrans-1632
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表（图[11-4])。T](#p423)底层提供的区块链为服务提供了安全和不可变性。中间层
- en: is the smart contracts with functions such as adding crosschain ID, query
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
  zh: 是具有添加跨链ID，查询
- en: ID, approve or revoke ID, modify ID, etc. The smart contract can query or
  id: totrans-1634
  prefs: []
  type: TYPE_NORMAL
  zh: id，批准或撤销id，修改id等。智能合约可以查询或
- en: save states to the blockchain through EVM. The top layer is the GUI layer
  id: totrans-1635
  prefs: []
  type: TYPE_NORMAL
  zh: 通过EVM将状态保存到区块链。顶层是GUI层
- en: that renders web pages, processes user inputs, and communicates with
  id: totrans-1636
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染网页，处理用户输入并与
- en: smart contracts with Web3 and MetaMask wallet. The Web3 layer will need
  id: totrans-1637
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Web3和MetaMask钱包与智能合约交互。Web3层将需要
- en: to connect with an RPC node in order to access smart contracts.
  id: totrans-1638
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到一个RPC节点，以便访问智能合约。
- en: '413'
  id: totrans-1639
  prefs: []
  type: TYPE_NORMAL
  zh: '413'
- en: '![](index-423_1.png)'
  id: totrans-1640
  prefs: []
  type: TYPE_IMG
  zh: '![](index-423_1.png)'
- en: Chapter 11 Building team projeCts
  id: totrans-1641
  prefs: []
  type: TYPE_NORMAL
  zh: 第11章 构建团队项目
- en: '***Figure 11-4\.** Crosschain id service architecture*'
  id: totrans-1642
  prefs: []
  type: TYPE_NORMAL
  zh: '***图11-4。跨链id服务架构*'
- en: '**Design the Smart Contract**'
  id: totrans-1643
  prefs: []
  type: TYPE_NORMAL
  zh: '**设计智能合约**'
- en: 'When designing the smart contract, the following factors are considered:'
  id: totrans-1644
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计智能合约时，考虑以下因素：
- en: actors and roles, data structures, events, and functions.
  id: totrans-1645
  prefs: []
  type: TYPE_NORMAL
  zh: 参与者及其角色，数据结构，事件和功能。
- en: '**Roles**'
  id: totrans-1646
  prefs: []
  type: TYPE_NORMAL
  zh: '**角色**'
- en: Three roles are defined for the crosschain ID service smart contract. The
  id: totrans-1647
  prefs: []
  type: TYPE_NORMAL
  zh: 为跨链ID服务智能合约定义了三个角色。该
- en: owner is a role who deploys the smart contract. This owner owns the smart
  id: totrans-1648
  prefs: []
  type: TYPE_NORMAL
  zh: 所有者是一个角色，部署智能合约。这位所有者拥有智能合约*
- en: contract and has the privilege to assign an administrator for the smart
  id: totrans-1649
  prefs: []
  type: TYPE_NORMAL
  zh: 合约，并拥有为智能合约指定管理员的权限
- en: contract. The administrator (admin) manages the crosschain IDs and
  id: totrans-1650
  prefs: []
  type: TYPE_NORMAL
  zh: 合约。管理员（admin）管理跨链IDs和
- en: can approve or revoke a crosschain ID. Then there are also regular users
  id: totrans-1651
  prefs: []
  type: TYPE_NORMAL
  zh: 可以批准或撤销跨链ID。还有普通用户
- en: who can query crosschain IDs, add a new crosschain ID, or modify its
  id: totrans-1652
  prefs: []
  type: TYPE_NORMAL
  zh: 可以查询跨链ID，添加新的跨链ID或修改其
- en: information.
  id: totrans-1653
  prefs: []
  type: TYPE_NORMAL
  zh: 信息。
- en: '414'
  id: totrans-1654
  prefs: []
  type: TYPE_NORMAL
  zh: '414'
- en: Chapter 11 Building team projeCts
  id: totrans-1655
  prefs: []
  type: TYPE_NORMAL
  zh: 第11章 构建团队项目
- en: '**Events**'
  id: totrans-1656
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件**'
- en: When users perform operations on the smart contract, several kinds
  id: totrans-1657
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在智能合约上执行操作时，会触发几种不同
- en: of events can be emitted so that client applications can query what has
  id: totrans-1658
  prefs: []
  type: TYPE_NORMAL
  zh: 事件可以被发出，以便客户端应用程序可以查询发生了什么
- en: 'happened. Four events are defined:'
  id: totrans-1659
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了。定义了四个事件：
- en: '**AddChainId** – This event is emitted when a new'
  id: totrans-1660
  prefs: []
  type: TYPE_NORMAL
- en: crosschain ID is added to the service.
  id: totrans-1661
  prefs: []
  type: TYPE_NORMAL
- en: '**VerifyChainId** – This event is emitted when a'
  id: totrans-1662
  prefs: []
  type: TYPE_NORMAL
- en: crosschain ID has been verified and approved by the
  id: totrans-1663
  prefs: []
  type: TYPE_NORMAL
- en: administrator.
  id: totrans-1664
  prefs: []
  type: TYPE_NORMAL
- en: '**RevokeChainId** – This event is emitted when'
  id: totrans-1665
  prefs: []
  type: TYPE_NORMAL
- en: a crosschain ID has been revoked by the
  id: totrans-1666
  prefs: []
  type: TYPE_NORMAL
- en: administrator.
  id: totrans-1667
  prefs: []
  type: TYPE_NORMAL
- en: '**ModifyChainIdInfo** – This event is emitted when a'
  id: totrans-1668
  prefs: []
  type: TYPE_NORMAL
- en: registrator modifies metadata of a crosschain ID.
  id: totrans-1669
  prefs: []
  type: TYPE_NORMAL
- en: '**Data Structures**'
  id: totrans-1670
  prefs: []
  type: TYPE_NORMAL
- en: Several data structures have been defined. There is a chainidInfo data
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
- en: struct that contains manager address, long name, short name, category,
  id: totrans-1672
  prefs: []
  type: TYPE_NORMAL
- en: and URL string of a blockchain. There is a Status enumeration with values
  id: totrans-1673
  prefs: []
  type: TYPE_NORMAL
- en: of Pending, Verified, and Revoked. Pending is a status when a crosschain
  id: totrans-1674
  prefs: []
  type: TYPE_NORMAL
- en: ID is just registered. Verified is a status when an administrator approves
  id: totrans-1675
  prefs: []
  type: TYPE_NORMAL
- en: the crosschain ID. Revoked is a status when the administrator finds issues
  id: totrans-1676
  prefs: []
  type: TYPE_NORMAL
- en: with the crosschain ID and rejects its registration. There are also several
  id: totrans-1677
  prefs: []
  type: TYPE_NORMAL
- en: mapping data structures such as idStatus and idInfo that allow the smart
  id: totrans-1678
  prefs: []
  type: TYPE_NORMAL
- en: contract to look up crosschain ID status and metadata information. And
  id: totrans-1679
  prefs: []
  type: TYPE_NORMAL
- en: finally, there is a legacyIds that maps a legacy ID with a new crosschain ID.
  id: totrans-1680
  prefs: []
  type: TYPE_NORMAL
- en: '415'
  id: totrans-1681
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11 Building team projeCts
  id: totrans-1682
  prefs: []
  type: TYPE_NORMAL
- en: '**Functions**'
  id: totrans-1683
  prefs: []
  type: TYPE_NORMAL
- en: 'The following functions are defined for the smart contract:'
  id: totrans-1684
  prefs: []
  type: TYPE_NORMAL
- en: '**addChainId** – This function adds a new crosschain'
  id: totrans-1685
  prefs: []
  type: TYPE_NORMAL
- en: ID to the service. It can be called by any user.
  id: totrans-1686
  prefs: []
  type: TYPE_NORMAL
- en: '**changeAdmin** – This function changes the'
  id: totrans-1687
  prefs: []
  type: TYPE_NORMAL
- en: administrator of the service. It can be called by the
  id: totrans-1688
  prefs: []
  type: TYPE_NORMAL
- en: owner of the smart contract.
  id: totrans-1689
  prefs: []
  type: TYPE_NORMAL
- en: '**apporveChainid** – This function changes the status'
  id: totrans-1690
  prefs: []
  type: TYPE_NORMAL
- en: of the crosschain ID to Verified. It can only be called
  id: totrans-1691
  prefs: []
  type: TYPE_NORMAL
- en: by the administrator of the smart contract service.
  id: totrans-1692
  prefs: []
  type: TYPE_NORMAL
- en: '**revokeChainid** – This function changes the status of'
  id: totrans-1693
  prefs: []
  type: TYPE_NORMAL
- en: the crosschain ID to Revoked. It can only be called
  id: totrans-1694
  prefs: []
  type: TYPE_NORMAL
- en: by the administrator of the smart contract service.
  id: totrans-1695
  prefs: []
  type: TYPE_NORMAL
- en: '**modifyChainidInfo** – This function modified the'
  id: totrans-1696
  prefs: []
  type: TYPE_NORMAL
- en: metadata information of the crosschain ID. It can be
  id: totrans-1697
  prefs: []
  type: TYPE_NORMAL
- en: called by the manager of a crosschain ID.
  id: totrans-1698
  prefs: []
  type: TYPE_NORMAL
- en: '**getChainIdStatus** – This function returns the status'
  id: totrans-1699
  prefs: []
  type: TYPE_NORMAL
- en: of the crosschain ID.
  id: totrans-1700
  prefs: []
  type: TYPE_NORMAL
- en: '**getChainIdFromLegacyId** – This function returns'
  id: totrans-1701
  prefs: []
  type: TYPE_NORMAL
- en: the crosschain ID associated with a legacy ID.
  id: totrans-1702
  prefs: []
  type: TYPE_NORMAL
- en: '**getChainIdInfo** – This function returns the'
  id: totrans-1703
  prefs: []
  type: TYPE_NORMAL
- en: metadata information of a chainId.
  id: totrans-1704
  prefs: []
  type: TYPE_NORMAL
- en: '**UML of Smart Contract**'
  id: totrans-1705
  prefs: []
  type: TYPE_NORMAL
- en: To better visualize the crosschain id service smart contract, the following
  id: totrans-1706
  prefs: []
  type: TYPE_NORMAL
- en: 'UML (Universal Modeling Language) diagram (Figur[e 11-5) is g](#p426)enerated:
    416'
  id: totrans-1707
  prefs: []
  type: TYPE_NORMAL
- en: '![](index-426_1.png)'
  id: totrans-1708
  prefs: []
  type: TYPE_IMG
- en: Chapter 11 Building team projeCts
  id: totrans-1709
  prefs: []
  type: TYPE_NORMAL
- en: '***Figure 11-5\.** UML diagram of crosschain id service smart contract*'
  id: totrans-1710
  prefs: []
  type: TYPE_NORMAL
- en: '417'
  id: totrans-1711
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11 Building team projeCts
  id: totrans-1712
  prefs: []
  type: TYPE_NORMAL
- en: '**Smart Contract Code**'
  id: totrans-1713
  prefs: []
  type: TYPE_NORMAL
- en: The code and explanation for the crosschain ID smart contract are shown
  id: totrans-1714
  prefs: []
  type: TYPE_NORMAL
- en: 'in the following:'
  id: totrans-1715
  prefs: []
  type: TYPE_NORMAL
- en: '// SPDX-License-Identifier: GPL-3.0'
  id: totrans-1716
  prefs: []
  type: TYPE_NORMAL
- en: pragma solidity >=0.7.0 <0.9.0;
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
- en: /**
  id: totrans-1718
  prefs: []
  type: TYPE_NORMAL
- en: '* @title CrosschainId'
  id: totrans-1719
  prefs: []
  type: TYPE_NORMAL
- en: '* @dev manage crosschain identity services'
  id: totrans-1720
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  id: totrans-1721
  prefs: []
  type: TYPE_NORMAL
- en: contract CrosschainIdService {
  id: totrans-1722
  prefs: []
  type: TYPE_NORMAL
- en: // string message;
  id: totrans-1723
  prefs: []
  type: TYPE_NORMAL
- en: address public owner;
  id: totrans-1724
  prefs: []
  type: TYPE_NORMAL
- en: address public admin;
  id: totrans-1725
  prefs: []
  type: TYPE_NORMAL
- en: bytes32 public latestChainid;
  id: totrans-1726
  prefs: []
  type: TYPE_NORMAL
- en: // bytes4 public newlid;
  id: totrans-1727
  prefs: []
  type: TYPE_NORMAL
- en: uint public totalcount;
  id: totrans-1728
  prefs: []
  type: TYPE_NORMAL
- en: bytes32 public newSha256;
  id: totrans-1729
  prefs: []
  type: TYPE_NORMAL
- en: enum Status{PENDING, VERIFIED, REVOKED}
  id: totrans-1730
  prefs: []
  type: TYPE_NORMAL
- en: // mapping(bytes32 => bytes32) chainidlist;
  id: totrans-1731
  prefs: []
  type: TYPE_NORMAL
- en: mapping(bytes32 => Status) public idStatus;
  id: totrans-1732
  prefs: []
  type: TYPE_NORMAL
- en: // mapping legacy id with chainid for faster lookup
  id: totrans-1733
  prefs: []
  type: TYPE_NORMAL
- en: mapping(uint => bytes32) legacyIds;
  id: totrans-1734
  prefs: []
  type: TYPE_NORMAL
- en: struct chainidInfo {
  id: totrans-1735
  prefs: []
  type: TYPE_NORMAL
- en: address manager;
  id: totrans-1736
  prefs: []
  type: TYPE_NORMAL
- en: string longname;
  id: totrans-1737
  prefs: []
  type: TYPE_NORMAL
- en: string shortname;
  id: totrans-1738
  prefs: []
  type: TYPE_NORMAL
- en: string category;
  id: totrans-1739
  prefs: []
  type: TYPE_NORMAL
- en: string url;
  id: totrans-1740
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1741
  prefs: []
  type: TYPE_NORMAL
- en: '418'
  id: totrans-1742
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11 Building team projeCts
  id: totrans-1743
  prefs: []
  type: TYPE_NORMAL
- en: mapping(bytes32 => chainidInfo) idInfo;
  id: totrans-1744
  prefs: []
  type: TYPE_NORMAL
- en: event AddChainId(bytes32 indexed chainId, string name);
  id: totrans-1745
  prefs: []
  type: TYPE_NORMAL
- en: event VerifyChainId(bytes32 indexed chainId);
  id: totrans-1746
  prefs: []
  type: TYPE_NORMAL
- en: event RevokeChainId(bytes32 indexed chainId);
  id: totrans-1747
  prefs: []
  type: TYPE_NORMAL
- en: event ModifyChainIdInfo(bytes32 indexed chainId);
  id: totrans-1748
  prefs: []
  type: TYPE_NORMAL
- en: modifier onlyOwner() {
  id: totrans-1749
  prefs: []
  type: TYPE_NORMAL
- en: require(msg.sender == owner);
  id: totrans-1750
  prefs: []
  type: TYPE_NORMAL
- en: _;
  id: totrans-1751
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1752
  prefs: []
  type: TYPE_NORMAL
- en: modifier onlyAdmin() {
  id: totrans-1753
  prefs: []
  type: TYPE_NORMAL
- en: require(msg.sender == admin);
  id: totrans-1754
  prefs: []
  type: TYPE_NORMAL
- en: _;
  id: totrans-1755
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1756
  prefs: []
  type: TYPE_NORMAL
- en: //add common crosschain id such as Etherem mainnet.
  id: totrans-1757
  prefs: []
  type: TYPE_NORMAL
- en: constructor() {
  id: totrans-1758
  prefs: []
  type: TYPE_NORMAL
- en: owner = msg.sender;
  id: totrans-1759
  prefs: []
  type: TYPE_NORMAL
- en: admin = msg.sender;
  id: totrans-1760
  prefs: []
  type: TYPE_NORMAL
- en: addChainId(0xd4e56740f876aef8c010b86a40d5f56745a118d090
  id: totrans-1761
  prefs: []
  type: TYPE_NORMAL
- en: 6a34e69aec8c0db1cb8fa3, 1, 'Ethereum Mainnet');
  id: totrans-1762
  prefs: []
  type: TYPE_NORMAL
- en: modifyChainIdInfo(latestChainid, "Ethereum Mainnet",
  id: totrans-1763
  prefs: []
  type: TYPE_NORMAL
- en: '"eth", "mainnet", "www.etherscan.io");'
  id: totrans-1764
  prefs: []
  type: TYPE_NORMAL
- en: addChainId(0x6341fd3daf94b748c72ced5a5b26028f2474f5f0
  id: totrans-1765
  prefs: []
  type: TYPE_NORMAL
- en: 0d824504e4fa37a75767e177, 4, 'Ethereum Rinkeby');
  id: totrans-1766
  prefs: []
  type: TYPE_NORMAL
- en: modifyChainIdInfo(latestChainid, "Ethereum Rinkeby",
  id: totrans-1767
  prefs: []
  type: TYPE_NORMAL
- en: '"rinkeby", "testnet", "rinkeby.etherscan.io");'
  id: totrans-1768
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1769
  prefs: []
  type: TYPE_NORMAL
- en: // add a crosschainId
  id: totrans-1770
  prefs: []
  type: TYPE_NORMAL
- en: '// @hash: The block hash for a genesis block or the first'
  id: totrans-1771
  prefs: []
  type: TYPE_NORMAL
- en: forked block
  id: totrans-1772
  prefs: []
  type: TYPE_NORMAL
- en: '419'
  id: totrans-1773
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11 Building team projeCts
  id: totrans-1774
  prefs: []
  type: TYPE_NORMAL
- en: '// legacyid: Legacy chainid based on EIP-155'
  id: totrans-1775
  prefs: []
  type: TYPE_NORMAL
- en: // name of the blockchain
  id: totrans-1776
  prefs: []
  type: TYPE_NORMAL
- en: function addChainId(bytes32 hash, uint legacyid, string
  id: totrans-1777
  prefs: []
  type: TYPE_NORMAL
- en: memory name) public returns (bytes32 chainid) {
  id: totrans-1778
  prefs: []
  type: TYPE_NORMAL
- en: require(hash != 0x00);
  id: totrans-1779
  prefs: []
  type: TYPE_NORMAL
- en: //require (check uniqueness, check oracle if needed)
  id: totrans-1780
  prefs: []
  type: TYPE_NORMAL
- en: // trim the other 16 bytes
  id: totrans-1781
  prefs: []
  type: TYPE_NORMAL
- en: hash = (hash >> 128) <<128;
  id: totrans-1782
  prefs: []
  type: TYPE_NORMAL
- en: //get legacy chainid in bytes32 format
  id: totrans-1783
  prefs: []
  type: TYPE_NORMAL
- en: bytes32 legacy_chainid = bytesToBytes32(toBytes(l
  id: totrans-1784
  prefs: []
  type: TYPE_NORMAL
- en: egacyid));
  id: totrans-1785
  prefs: []
  type: TYPE_NORMAL
- en: // reserve 8 bytes for legacy chainid. Merge with
  id: totrans-1786
  prefs: []
  type: TYPE_NORMAL
- en: block hash
  id: totrans-1787
  prefs: []
  type: TYPE_NORMAL
- en: hash = hash | (legacy_chainid << 64);
  id: totrans-1788
  prefs: []
  type: TYPE_NORMAL
- en: // Calculate sha256 of the combined hash
  id: totrans-1789
  prefs: []
  type: TYPE_NORMAL
- en: newSha256 = sha256(abi.encodePacked(hash));
  id: totrans-1790
  prefs: []
  type: TYPE_NORMAL
- en: // merge the hash with first two bytes of sha256 as
  id: totrans-1791
  prefs: []
  type: TYPE_NORMAL
- en: checksum
  id: totrans-1792
  prefs: []
  type: TYPE_NORMAL
- en: hash = hash | (newSha256 >> 240);
  id: totrans-1793
  prefs: []
  type: TYPE_NORMAL
- en: chainid = hash;
  id: totrans-1794
  prefs: []
  type: TYPE_NORMAL
- en: //Check if chainid already registered. If idStatus is
  id: totrans-1795
  prefs: []
  type: TYPE_NORMAL
- en: empty it has 0x00, revert and exit
  id: totrans-1796
  prefs: []
  type: TYPE_NORMAL
- en: if(abi.encodePacked(idStatus[chainid]).length > 1) {
  id: totrans-1797
  prefs: []
  type: TYPE_NORMAL
- en: revert();
  id: totrans-1798
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1799
  prefs: []
  type: TYPE_NORMAL
- en: if(legacyIds[legacyid] != bytes32(0)) {
  id: totrans-1800
  prefs: []
  type: TYPE_NORMAL
- en: revert();
  id: totrans-1801
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1802
  prefs: []
  type: TYPE_NORMAL
- en: '420'
  id: totrans-1803
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11 Building team projeCts
  id: totrans-1804
  prefs: []
  type: TYPE_NORMAL
- en: legacyIds[legacyid] = chainid;
  id: totrans-1805
  prefs: []
  type: TYPE_NORMAL
- en: latestChainid = chainid;
  id: totrans-1806
  prefs: []
  type: TYPE_NORMAL
- en: // set idStatus to PENDING
  id: totrans-1807
  prefs: []
  type: TYPE_NORMAL
- en: idStatus[chainid] = Status.PENDING;
  id: totrans-1808
  prefs: []
  type: TYPE_NORMAL
- en: // set chainid metadata (partial). The rest set with
  id: totrans-1809
  prefs: []
  type: TYPE_NORMAL
- en: modifyChainIdInfo
  id: totrans-1810
  prefs: []
  type: TYPE_NORMAL
- en: idInfo[chainid].manager = msg.sender;
  id: totrans-1811
  prefs: []
  type: TYPE_NORMAL
- en: idInfo[chainid].longname = name;
  id: totrans-1812
  prefs: []
  type: TYPE_NORMAL
- en: //increment totalcount
  id: totrans-1813
  prefs: []
  type: TYPE_NORMAL
- en: totalcount++;
  id: totrans-1814
  prefs: []
  type: TYPE_NORMAL
- en: emit AddChainId(chainid, name);
  id: totrans-1815
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1816
  prefs: []
  type: TYPE_NORMAL
- en: //The owner changes the administrator of the service. The
  id: totrans-1817
  prefs: []
  type: TYPE_NORMAL
- en: admin can be a multisign address managed out of chain
  id: totrans-1818
  prefs: []
  type: TYPE_NORMAL
- en: function changeAdmin(address newAdmin) onlyOwner public {
  id: totrans-1819
  prefs: []
  type: TYPE_NORMAL
- en: admin = newAdmin;
  id: totrans-1820
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1821
  prefs: []
  type: TYPE_NORMAL
- en: // require sender to be admin
  id: totrans-1822
  prefs: []
  type: TYPE_NORMAL
- en: // approve a chainid
  id: totrans-1823
  prefs: []
  type: TYPE_NORMAL
- en: function approveChainid(bytes32 chainId) onlyAdmin public {
  id: totrans-1824
  prefs: []
  type: TYPE_NORMAL
- en: require(idStatus[chainId] == Status.PENDING);
  id: totrans-1825
  prefs: []
  type: TYPE_NORMAL
- en: idStatus[chainId] = Status.VERIFIED;
  id: totrans-1826
  prefs: []
  type: TYPE_NORMAL
- en: emit VerifyChainId(chainId);
  id: totrans-1827
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1828
  prefs: []
  type: TYPE_NORMAL
- en: // require sender to be admin
  id: totrans-1829
  prefs: []
  type: TYPE_NORMAL
- en: // revoke a chainid
  id: totrans-1830
  prefs: []
  type: TYPE_NORMAL
- en: function revokeChainid(bytes32 chainId) onlyAdmin public {
  id: totrans-1831
  prefs: []
  type: TYPE_NORMAL
- en: '421'
  id: totrans-1832
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11 Building team projeCts
  id: totrans-1833
  prefs: []
  type: TYPE_NORMAL
- en: require(idStatus[chainId] != Status.REVOKED); //Can
  id: totrans-1834
  prefs: []
  type: TYPE_NORMAL
- en: revoke chainId in PENDING or VERIFIED status
  id: totrans-1835
  prefs: []
  type: TYPE_NORMAL
- en: idStatus[chainId] = Status.REVOKED;
  id: totrans-1836
  prefs: []
  type: TYPE_NORMAL
- en: emit RevokeChainId(chainId);
  id: totrans-1837
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1838
  prefs: []
  type: TYPE_NORMAL
- en: function modifyChainIdInfo(bytes32 chainid, string memory
  id: totrans-1839
  prefs: []
  type: TYPE_NORMAL
- en: longname, string memory shortname, string memory category,
  id: totrans-1840
  prefs: []
  type: TYPE_NORMAL
- en: string memory url) public {
  id: totrans-1841
  prefs: []
  type: TYPE_NORMAL
- en: require(idStatus[chainid] == Status.PENDING);
  id: totrans-1842
  prefs: []
  type: TYPE_NORMAL
- en: require(idInfo[chainid].manager == msg.sender);
  id: totrans-1843
  prefs: []
  type: TYPE_NORMAL
- en: if(bytes(longname).length > 1) {
  id: totrans-1844
  prefs: []
  type: TYPE_NORMAL
- en: idInfo[chainid].longname = longname;
  id: totrans-1845
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1846
  prefs: []
  type: TYPE_NORMAL
- en: if(bytes(shortname).length > 1) {
  id: totrans-1847
  prefs: []
  type: TYPE_NORMAL
- en: idInfo[chainid].shortname = shortname;
  id: totrans-1848
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1849
  prefs: []
  type: TYPE_NORMAL
- en: if(bytes(category).length > 1) {
  id: totrans-1850
  prefs: []
  type: TYPE_NORMAL
- en: idInfo[chainid].category = category;
  id: totrans-1851
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1852
  prefs: []
  type: TYPE_NORMAL
- en: if(bytes(url).length > 1) {
  id: totrans-1853
  prefs: []
  type: TYPE_NORMAL
- en: idInfo[chainid].url = url;
  id: totrans-1854
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1855
  prefs: []
  type: TYPE_NORMAL
- en: emit ModifyChainIdInfo(chainid);
  id: totrans-1856
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1857
  prefs: []
  type: TYPE_NORMAL
- en: function getChainIdStatus(bytes32 hash) public view returns
  id: totrans-1858
  prefs: []
  type: TYPE_NORMAL
- en: (Status) {
  id: totrans-1859
  prefs: []
  type: TYPE_NORMAL
- en: return idStatus[hash];
  id: totrans-1860
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1861
  prefs: []
  type: TYPE_NORMAL
- en: function getChainIdFromLegacyId(uint legacyId) public view
  id: totrans-1862
  prefs: []
  type: TYPE_NORMAL
- en: returns (bytes32) {
  id: totrans-1863
  prefs: []
  type: TYPE_NORMAL
- en: '422'
  id: totrans-1864
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11 Building team projeCts
  id: totrans-1865
  prefs: []
  type: TYPE_NORMAL
- en: return legacyIds[legacyId];
  id: totrans-1866
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1867
  prefs: []
  type: TYPE_NORMAL
- en: function getChainIdInfo(bytes32 hash) public view returns
  id: totrans-1868
  prefs: []
  type: TYPE_NORMAL
- en: (chainidInfo memory) {
  id: totrans-1869
  prefs: []
  type: TYPE_NORMAL
- en: return idInfo[hash];
  id: totrans-1870
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1871
  prefs: []
  type: TYPE_NORMAL
- en: //convert an integer to byte array
  id: totrans-1872
  prefs: []
  type: TYPE_NORMAL
- en: function toBytes(uint256 x) public pure returns (bytes
  id: totrans-1873
  prefs: []
  type: TYPE_NORMAL
- en: memory b) {
  id: totrans-1874
  prefs: []
  type: TYPE_NORMAL
- en: b = new bytes(32);
  id: totrans-1875
  prefs: []
  type: TYPE_NORMAL
- en: // b = abi.encodePacked(x);
  id: totrans-1876
  prefs: []
  type: TYPE_NORMAL
- en: assembly { mstore(add(b, 32), x) }
  id: totrans-1877
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1878
  prefs: []
  type: TYPE_NORMAL
- en: //convert byte array to bytes32 fixed array
  id: totrans-1879
  prefs: []
  type: TYPE_NORMAL
- en: function bytesToBytes32(bytes memory source) public pure
  id: totrans-1880
  prefs: []
  type: TYPE_NORMAL
- en: returns (bytes32 result) {
  id: totrans-1881
  prefs: []
  type: TYPE_NORMAL
- en: if (source.length == 0) {
  id: totrans-1882
  prefs: []
  type: TYPE_NORMAL
- en: return 0x0;
  id: totrans-1883
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1884
  prefs: []
  type: TYPE_NORMAL
- en: assembly {
  id: totrans-1885
  prefs: []
  type: TYPE_NORMAL
- en: result = mload(add(source, 32))
  id: totrans-1886
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1887
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1888
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1889
  prefs: []
  type: TYPE_NORMAL
- en: '**Client Considerations**'
  id: totrans-1890
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding section, a smart contract is deployed to a blockchain
  id: totrans-1891
  prefs: []
  type: TYPE_NORMAL
- en: that allows external programs to call the smart contract functions through
  id: totrans-1892
  prefs: []
  type: TYPE_NORMAL
- en: transactions. These client programs can be in command-line interfaces
  id: totrans-1893
  prefs: []
  type: TYPE_NORMAL
- en: '423'
  id: totrans-1894
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11 Building team projeCts
  id: totrans-1895
  prefs: []
  type: TYPE_NORMAL
- en: or web applications. A popular client application is through a web-based
  id: totrans-1896
  prefs: []
  type: TYPE_NORMAL
- en: browser to render the GUI and use MetaMask as a wallet to send the
  id: totrans-1897
  prefs: []
  type: TYPE_NORMAL
- en: transactions. In the following, we demonstrate how to build web pages to
  id: totrans-1898
  prefs: []
  type: TYPE_NORMAL
- en: interact with smart contracts.
  id: totrans-1899
  prefs: []
  type: TYPE_NORMAL
- en: Typically, a web page to interact with a smart contract contains the
  id: totrans-1900
  prefs: []
  type: TYPE_NORMAL
- en: 'following components:'
  id: totrans-1901
  prefs: []
  type: TYPE_NORMAL
- en: • HTML pages to render the GUI
  id: totrans-1902
  prefs: []
  type: TYPE_NORMAL
- en: • JavaScript to process user inputs and smart
  id: totrans-1903
  prefs: []
  type: TYPE_NORMAL
- en: contract output
  id: totrans-1904
  prefs: []
  type: TYPE_NORMAL
- en: • Web3 for JavaScript and smart contract function calls
  id: totrans-1905
  prefs: []
  type: TYPE_NORMAL
- en: • MetaMask plug-in or extension for a wallet to sign
  id: totrans-1906
  prefs: []
  type: TYPE_NORMAL
- en: transactions
  id: totrans-1907
  prefs: []
  type: TYPE_NORMAL
- en: In the case of crosschainId service, the following HTML pages are
  id: totrans-1908
  prefs: []
  type: TYPE_NORMAL
- en: 'designed (Figur[e 11-6](#p433)):'
  id: totrans-1909
  prefs: []
  type: TYPE_NORMAL
- en: '***Figure 11-6\.** Html files for the crosschain id service user interfacet*'
  id: totrans-1910
  prefs: []
  type: TYPE_NORMAL
- en: '424'
  id: totrans-1911
  prefs: []
  type: TYPE_NORMAL
- en: '![](index-434_1.png)'
  id: totrans-1912
  prefs: []
  type: TYPE_IMG
- en: Chapter 11 Building team projeCts
  id: totrans-1913
  prefs: []
  type: TYPE_NORMAL
- en: Each HTML page will have user input in the browser pages and also
  id: totrans-1914
  prefs: []
  type: TYPE_NORMAL
- en: include JavaScript to handle the browser events and user interactions.
  id: totrans-1915
  prefs: []
  type: TYPE_NORMAL
- en: '**HTML Page Example**'
  id: totrans-1916
  prefs: []
  type: TYPE_NORMAL
- en: 'The following (Figure [11-7](#p434)) is an example of an “Add crosschain id”
    GUI markup web page:'
  id: totrans-1917
  prefs: []
  type: TYPE_NORMAL
- en: '***Figure 11-7\.** Example of adding crosschain id GUI page*'
  id: totrans-1918
  prefs: []
  type: TYPE_NORMAL
- en: To render this page, the following HTML is written with multiple
  id: totrans-1919
  prefs: []
  type: TYPE_NORMAL
- en: clickable buttons and input fields. The “Connect Wallet” button allows
  id: totrans-1920
  prefs: []
  type: TYPE_NORMAL
- en: that page to connect to a MetaMask wallet. The “Add Crosschain id”
  id: totrans-1921
  prefs: []
  type: TYPE_NORMAL
- en: button triggers a call to crosschainId smart contract to add a chainId to
  id: totrans-1922
  prefs: []
  type: TYPE_NORMAL
- en: the blockchain. To send transactions to smart contracts on a blockchain,
  id: totrans-1923
  prefs: []
  type: TYPE_NORMAL
- en: several JavaScripts containing Web3, ABI, and APIs are included. The
  id: totrans-1924
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript codes are explained in the next section.
  id: totrans-1925
  prefs: []
  type: TYPE_NORMAL
- en: <!DOCTYPE html>
  id: totrans-1926
  prefs: []
  type: TYPE_NORMAL
- en: <HTML>
  id: totrans-1927
  prefs: []
  type: TYPE_NORMAL
- en: <HEAD>
  id: totrans-1928
  prefs: []
  type: TYPE_NORMAL
- en: '425'
  id: totrans-1929
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11 Building team projeCts
  id: totrans-1930
  prefs: []
  type: TYPE_NORMAL
- en: <META name="generator" content=
  id: totrans-1931
  prefs: []
  type: TYPE_NORMAL
- en: '"HTML Tidy for HTML5 for Linux version 5.6.0">'
  id: totrans-1932
  prefs: []
  type: TYPE_NORMAL
- en: <META charset="utf-8">
  id: totrans-1933
  prefs: []
  type: TYPE_NORMAL
- en: <TITLE>CrosschainIdService</TITLE>
  id: totrans-1934
  prefs: []
  type: TYPE_NORMAL
- en: <BASE href="/">
  id: totrans-1935
  prefs: []
  type: TYPE_NORMAL
- en: <META name="viewport" content=
  id: totrans-1936
  prefs: []
  type: TYPE_NORMAL
- en: '"width=device-width, initial-scale=1">'
  id: totrans-1937
  prefs: []
  type: TYPE_NORMAL
- en: <LINK rel="stylesheet" href="stylesheets/bootstrap.min.css">
  id: totrans-1938
  prefs: []
  type: TYPE_NORMAL
- en: <LINK rel="stylesheet" href="stylesheets/style.css">
  id: totrans-1939
  prefs: []
  type: TYPE_NORMAL
- en: </HEAD>
  id: totrans-1940
  prefs: []
  type: TYPE_NORMAL
- en: <BODY>
  id: totrans-1941
  prefs: []
  type: TYPE_NORMAL
- en: <DIV class="container addCrosschainid">
  id: totrans-1942
  prefs: []
  type: TYPE_NORMAL
- en: <DIV class="row" id="addcrosschainidrow">
  id: totrans-1943
  prefs: []
  type: TYPE_NORMAL
- en: <DIV class="col-lg-6 text-center">
  id: totrans-1944
  prefs: []
  type: TYPE_NORMAL
- en: <H2>Add a new crosschain id</H2>
  id: totrans-1945
  prefs: []
  type: TYPE_NORMAL
- en: <p> <button class="enableEthereumButton">Connect
  id: totrans-1946
  prefs: []
  type: TYPE_NORMAL
- en: Wallet</button>
  id: totrans-1947
  prefs: []
  type: TYPE_NORMAL
- en: <br>Wallet Account:&nbsp; <span class="showAccount">
  id: totrans-1948
  prefs: []
  type: TYPE_NORMAL
- en: <hr>
  id: totrans-1949
  prefs: []
  type: TYPE_NORMAL
- en: <DIV class="blockhash">
  id: totrans-1950
  prefs: []
  type: TYPE_NORMAL
- en: <LABEL for="blockhash"><B>Genesis Blockhash</B>
  id: totrans-1951
  prefs: []
  type: TYPE_NORMAL
- en: </LABEL>
  id: totrans-1952
  prefs: []
  type: TYPE_NORMAL
- en: <INPUT type="text" class="ignore-form-control" id=
  id: totrans-1953
  prefs: []
  type: TYPE_NORMAL
- en: '"blockhash" placeholder="" value="[block0_hash]"'
  id: totrans-1954
  prefs: []
  type: TYPE_NORMAL
- en: size="34"
  id: totrans-1955
  prefs: []
  type: TYPE_NORMAL
- en: required="">
  id: totrans-1956
  prefs: []
  type: TYPE_NORMAL
- en: </DIV>
  id: totrans-1957
  prefs: []
  type: TYPE_NORMAL
- en: <DIV class="legacyid">
  id: totrans-1958
  prefs: []
  type: TYPE_NORMAL
- en: <LABEL for="legacyid"><B>legacy chainid</B></LABEL>
  id: totrans-1959
  prefs: []
  type: TYPE_NORMAL
- en: <INPUT type="text" class="ignore-form-control" id=
  id: totrans-1960
  prefs: []
  type: TYPE_NORMAL
- en: '"legacyid" placeholder="" value="[EIP-155 id]" size="10"'
  id: totrans-1961
  prefs: []
  type: TYPE_NORMAL
- en: '426'
  id: totrans-1962
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11 Building team projeCts
  id: totrans-1963
  prefs: []
  type: TYPE_NORMAL
- en: required="">
  id: totrans-1964
  prefs: []
  type: TYPE_NORMAL
- en: </DIV>
  id: totrans-1965
  prefs: []
  type: TYPE_NORMAL
- en: <DIV class="chainname">
  id: totrans-1966
  prefs: []
  type: TYPE_NORMAL
- en: <LABEL for="chainname"><B>Chain name</B></LABEL>
  id: totrans-1967
  prefs: []
  type: TYPE_NORMAL
- en: <INPUT type="text" class="ignore-form-control" id=
  id: totrans-1968
  prefs: []
  type: TYPE_NORMAL
- en: '"chainname" placeholder="" value="[Ethereum Mainnet]"'
  id: totrans-1969
  prefs: []
  type: TYPE_NORMAL
- en: size="20"
  id: totrans-1970
  prefs: []
  type: TYPE_NORMAL
- en: required="">
  id: totrans-1971
  prefs: []
  type: TYPE_NORMAL
- en: </DIV>
  id: totrans-1972
  prefs: []
  type: TYPE_NORMAL
- en: <br>
  id: totrans-1973
  prefs: []
  type: TYPE_NORMAL
- en: <div class="center-this" id="addChainidButton">
  id: totrans-1974
  prefs: []
  type: TYPE_NORMAL
- en: <button style="margin:0;" onclick="addChainid()"
  id: totrans-1975
  prefs: []
  type: TYPE_NORMAL
- en: id="addChainidButton">Add Crosschain id</button></div>
  id: totrans-1976
  prefs: []
  type: TYPE_NORMAL
- en: <DIV id="addChainidValue"></DIV>
  id: totrans-1977
  prefs: []
  type: TYPE_NORMAL
- en: </DIV>
  id: totrans-1978
  prefs: []
  type: TYPE_NORMAL
- en: </DIV><!-- <hr class="featurette-divider"> -->
  id: totrans-1979
  prefs: []
  type: TYPE_NORMAL
- en: <SCRIPT src="/scripts/web3.min.js"></SCRIPT>
  id: totrans-1980
  prefs: []
  type: TYPE_NORMAL
- en: <SCRIPT src="/scripts/jquery-3.3.1.slim.min.js"></SCRIPT>
  id: totrans-1981
  prefs: []
  type: TYPE_NORMAL
- en: <SCRIPT src="/scripts/jquery.min.js"></SCRIPT>
  id: totrans-1982
  prefs: []
  type: TYPE_NORMAL
- en: <SCRIPT src="/scripts/enableEthereum.js"></SCRIPT>
  id: totrans-1983
  prefs: []
  type: TYPE_NORMAL
- en: <SCRIPT src="/scripts/crosschainid_info.js"></SCRIPT>
  id: totrans-1984
  prefs: []
  type: TYPE_NORMAL
- en: <SCRIPT src="/scripts/addCrosschainid.js"></SCRIPT>
  id: totrans-1985
  prefs: []
  type: TYPE_NORMAL
- en: </DIV>
  id: totrans-1986
  prefs: []
  type: TYPE_NORMAL
- en: </BODY>
  id: totrans-1987
  prefs: []
  type: TYPE_NORMAL
- en: </HTML>
  id: totrans-1988
  prefs: []
  type: TYPE_NORMAL
- en: '**JavaScript Example**'
  id: totrans-1989
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding addCrosschainid.html file, several JavaScript files are
  id: totrans-1990
  prefs: []
  type: TYPE_NORMAL
- en: included. The web3.min.js file is a JavaScript Web3 implementation for
  id: totrans-1991
  prefs: []
  type: TYPE_NORMAL
- en: browsers. This is an open source file that can be downloaded from the
  id: totrans-1992
  prefs: []
  type: TYPE_NORMAL
- en: Web. The enableEthereum.js file is to implement the “Connect Wallet”
  id: totrans-1993
  prefs: []
  type: TYPE_NORMAL
- en: '427'
  id: totrans-1994
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11 Building team projeCts
  id: totrans-1995
  prefs: []
  type: TYPE_NORMAL
- en: button event. Clicking at this button will trigger a function call to get the
  id: totrans-1996
  prefs: []
  type: TYPE_NORMAL
- en: wallet address connected to the browser. In this enableEthereum.js script,
  id: totrans-1997
  prefs: []
  type: TYPE_NORMAL
- en: the ethereumButton object corresponds to the “Connect Wallet” button
  id: totrans-1998
  prefs: []
  type: TYPE_NORMAL
- en: and is registered with a click event handler to call getAccount() function.
  id: totrans-1999
  prefs: []
  type: TYPE_NORMAL
- en: The getAccount calls the Web3 function of eth_requestAccounts to retrieve
  id: totrans-2000
  prefs: []
  type: TYPE_NORMAL
- en: the accounts in the MetaMask. The first account is assigned to account0
  id: totrans-2001
  prefs: []
  type: TYPE_NORMAL
- en: that can be referred to by other scripts. Here, the showAccount object is a
  id: totrans-2002
  prefs: []
  type: TYPE_NORMAL
- en: Div object that will be populated with the account address retrieved from
  id: totrans-2003
  prefs: []
  type: TYPE_NORMAL
- en: the getAccount() function call.
  id: totrans-2004
  prefs: []
  type: TYPE_NORMAL
- en: —----------- enableEthereum.js —---------------------------
  id: totrans-2005
  prefs: []
  type: TYPE_NORMAL
- en: const ethereumButton = document.querySelector('.
  id: totrans-2006
  prefs: []
  type: TYPE_NORMAL
- en: enableEthereumButton');
  id: totrans-2007
  prefs: []
  type: TYPE_NORMAL
- en: const showAccount = document.querySelector('.showAccount');
  id: totrans-2008
  prefs: []
  type: TYPE_NORMAL
- en: var account0 = 0;
  id: totrans-2009
  prefs: []
  type: TYPE_NORMAL
- en: ethereumButton.addEventListener('click', () => {
  id: totrans-2010
  prefs: []
  type: TYPE_NORMAL
- en: getAccount();
  id: totrans-2011
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  id: totrans-2012
  prefs: []
  type: TYPE_NORMAL
- en: async function getAccount() {
  id: totrans-2013
  prefs: []
  type: TYPE_NORMAL
- en: 'const accounts = await ethereum.request({ method: ''eth_'
  id: totrans-2014
  prefs: []
  type: TYPE_NORMAL
- en: requestAccounts' });
  id: totrans-2015
  prefs: []
  type: TYPE_NORMAL
- en: account0 = accounts[0];
  id: totrans-2016
  prefs: []
  type: TYPE_NORMAL
- en: showAccount.innerHTML = account0;
  id: totrans-2017
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-2018
  prefs: []
  type: TYPE_NORMAL
- en: Once enableEthereum.js retrieves the account, a user can enter block 0
  id: totrans-2019
  prefs: []
  type: TYPE_NORMAL
- en: hash, legacy chainId, and blockchain name and click the “Add crosschain
  id: totrans-2020
  prefs: []
  type: TYPE_NORMAL
- en: id” button to register a new blockchain ID. This function is implemented
  id: totrans-2021
  prefs: []
  type: TYPE_NORMAL
- en: in addCrosschainid.js JavaScript. In this script, the addChainid() function
  id: totrans-2022
  prefs: []
  type: TYPE_NORMAL
- en: is called when “Add Crosschain id” button in the web page is clicked. This
  id: totrans-2023
  prefs: []
  type: TYPE_NORMAL
- en: function first checks if the MetaMask wallet is enabled and connected.
  id: totrans-2024
  prefs: []
  type: TYPE_NORMAL
- en: If not, the user will be prompted to install a MetaMask extension. If yes,
  id: totrans-2025
  prefs: []
  type: TYPE_NORMAL
- en: '428'
  id: totrans-2026
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11 Building team projeCts
  id: totrans-2027
  prefs: []
  type: TYPE_NORMAL
- en: a smart contract object named myContract will be constructed with a
  id: totrans-2028
  prefs: []
  type: TYPE_NORMAL
- en: crosschain ID smart contract ABI and contract address. The ABI and
  id: totrans-2029
  prefs: []
  type: TYPE_NORMAL
- en: contract address are specified in a separate crosschainid_info.js file.
  id: totrans-2030
  prefs: []
  type: TYPE_NORMAL
- en: myContract object supports addChainId method that takes in parameters
  id: totrans-2031
  prefs: []
  type: TYPE_NORMAL
- en: of block hash, legacyId, and chain name. These parameters are fetched
  id: totrans-2032
  prefs: []
  type: TYPE_NORMAL
- en: through the input fields in the web page. There are multiple ways to call a
  id: totrans-2033
  prefs: []
  type: TYPE_NORMAL
- en: smart contract function. In this example, the smart contract function call
  id: totrans-2034
  prefs: []
  type: TYPE_NORMAL
- en: 'data is first calculated through the following code:'
  id: totrans-2035
  prefs: []
  type: TYPE_NORMAL
- en: var chainidData = myContract.methods.addChainId(blockhash,
  id: totrans-2036
  prefs: []
  type: TYPE_NORMAL
- en: legacyid, chainname).encodeABI();
  id: totrans-2037
  prefs: []
  type: TYPE_NORMAL
- en: Then chainidData is sent to the smart contract through web3\.
  id: totrans-2038
  prefs: []
  type: TYPE_NORMAL
- en: eth.sendTransaction operation. The transaction receipt is
  id: totrans-2039
  prefs: []
  type: TYPE_NORMAL
- en: returned and shown on the web page.
  id: totrans-2040
  prefs: []
  type: TYPE_NORMAL
- en: —----------- addCrosschainid.js —--------------------------
  id: totrans-2041
  prefs: []
  type: TYPE_NORMAL
- en: //addCrosschain.js implements the addChainid function call to
  id: totrans-2042
  prefs: []
  type: TYPE_NORMAL
- en: add a crosschain id to smart contract
  id: totrans-2043
  prefs: []
  type: TYPE_NORMAL
- en: var web3;
  id: totrans-2044
  prefs: []
  type: TYPE_NORMAL
- en: const ethEnabled = () => {
  id: totrans-2045
  prefs: []
  type: TYPE_NORMAL
- en: if (typeof window.ethereum === 'undefined') {
  id: totrans-2046
  prefs: []
  type: TYPE_NORMAL
- en: alert("You need a Dapp browser to get started. Please
  id: totrans-2047
  prefs: []
  type: TYPE_NORMAL
- en: install metamask");
  id: totrans-2048
  prefs: []
  type: TYPE_NORMAL
- en: return false;
  id: totrans-2049
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-2050
  prefs: []
  type: TYPE_NORMAL
- en: web3 = new Web3(window.ethereum);
  id: totrans-2051
  prefs: []
  type: TYPE_NORMAL
- en: return true;
  id: totrans-2052
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-2053
  prefs: []
  type: TYPE_NORMAL
- en: function addChainid() {
  id: totrans-2054
  prefs: []
  type: TYPE_NORMAL
- en: if (!ethEnabled()) {
  id: totrans-2055
  prefs: []
  type: TYPE_NORMAL
- en: '429'
  id: totrans-2056
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11 Building team projeCts
  id: totrans-2057
  prefs: []
  type: TYPE_NORMAL
- en: alert("Please install an Ethereum-compatible browser or
  id: totrans-2058
  prefs: []
  type: TYPE_NORMAL
- en: extension like MetaMask to use this dApp!");
  id: totrans-2059
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-2060
  prefs: []
  type: TYPE_NORMAL
- en: web3.eth.getAccounts(function(err, accounts) {
  id: totrans-2061
  prefs: []
  type: TYPE_NORMAL
- en: var myContract = new web3.eth.Contract(crosschainid_abi,
  id: totrans-2062
  prefs: []
  type: TYPE_NORMAL
- en: crosschainid_contract.toLowerCase());
  id: totrans-2063
  prefs: []
  type: TYPE_NORMAL
- en: var blockhash = $('.blockhash input').val();
  id: totrans-2064
  prefs: []
  type: TYPE_NORMAL
- en: var legacyid = $('.legacyid input').val();
  id: totrans-2065
  prefs: []
  type: TYPE_NORMAL
- en: var chainname = $('.chainname input').val();
  id: totrans-2066
  prefs: []
  type: TYPE_NORMAL
- en: var chainidData = myContract.methods.addChainId(blockhash,
  id: totrans-2067
  prefs: []
  type: TYPE_NORMAL
- en: legacyid, chainname).encodeABI();
  id: totrans-2068
  prefs: []
  type: TYPE_NORMAL
- en: var tx_chainid = web3.eth.sendTransaction({
  id: totrans-2069
  prefs: []
  type: TYPE_NORMAL
- en: 'from: accounts[0].toLowerCase(),'
  id: totrans-2070
  prefs: []
  type: TYPE_NORMAL
- en: 'to: crosschainid_contract.toLowerCase(),'
  id: totrans-2071
  prefs: []
  type: TYPE_NORMAL
- en: 'data: chainidData'
  id: totrans-2072
  prefs: []
  type: TYPE_NORMAL
- en: '}, function(err, transactionHash) {'
  id: totrans-2073
  prefs: []
  type: TYPE_NORMAL
- en: document.getElementById("addChainidValue").innerHTML =
  id: totrans-2074
  prefs: []
  type: TYPE_NORMAL
- en: '"addChainid tx:" + transactionHash;'
  id: totrans-2075
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  id: totrans-2076
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  id: totrans-2077
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-2078
  prefs: []
  type: TYPE_NORMAL
- en: $(document).ready(function() {
  id: totrans-2079
  prefs: []
  type: TYPE_NORMAL
- en: if (!ethEnabled()) {
  id: totrans-2080
  prefs: []
  type: TYPE_NORMAL
- en: alert("Please install an Ethereum-compatible browser or
  id: totrans-2081
  prefs: []
  type: TYPE_NORMAL
- en: extension like MetaMask to use this dApp!");
  id: totrans-2082
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-2083
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  id: totrans-2084
  prefs: []
  type: TYPE_NORMAL
- en: '430'
  id: totrans-2085
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11 Building team projeCts
  id: totrans-2086
  prefs: []
  type: TYPE_NORMAL
- en: The preceding example shows how to build an add crosschain ID
  id: totrans-2087
  prefs: []
  type: TYPE_NORMAL
- en: web page to interact with a deployed smart contract. Similar pages can
  id: totrans-2088
  prefs: []
  type: TYPE_NORMAL
- en: be built for other functions for listing crosschain IDs, modifying chainId
  id: totrans-2089
  prefs: []
  type: TYPE_NORMAL
- en: information, approving or revoking crosschain IDs, etc.
  id: totrans-2090
  prefs: []
  type: TYPE_NORMAL
- en: '**Security Review**'
  id: totrans-2091
  prefs: []
  type: TYPE_NORMAL
- en: There are many factors to be considered for security. The security
  id: totrans-2092
  prefs: []
  type: TYPE_NORMAL
- en: guideline in Chapter [8 sho](https://doi.org/10.1007/978-1-4842-8164-2_8)uld
    be followed. Each function in the smart contract should have a privilege check.
    For example, when modifying the
  id: totrans-2093
  prefs: []
  type: TYPE_NORMAL
- en: crosschain ID information, there should be a check on the requester to
  id: totrans-2094
  prefs: []
  type: TYPE_NORMAL
- en: ensure that it is the original registrator of the crosschain ID. The second
  id: totrans-2095
  prefs: []
  type: TYPE_NORMAL
- en: check is that the status of the crosschain ID should be in “Pending” state.
  id: totrans-2096
  prefs: []
  type: TYPE_NORMAL
- en: If the crosschain ID is in “Verified” or “Revoked” state, its information
  id: totrans-2097
  prefs: []
  type: TYPE_NORMAL
- en: cannot be modified.
  id: totrans-2098
  prefs: []
  type: TYPE_NORMAL
- en: Another important item is to ensure that only the administrator can
  id: totrans-2099
  prefs: []
  type: TYPE_NORMAL
- en: approve or revoke a crosschain ID registration. This administrator can be a
  id: totrans-2100
  prefs: []
  type: TYPE_NORMAL
- en: single account or a multisign account from a consortium. An administrator
  id: totrans-2101
  prefs: []
  type: TYPE_NORMAL
- en: can transfer its ownership to another account.
  id: totrans-2102
  prefs: []
  type: TYPE_NORMAL
- en: Besides security for the smart contract, the web pages security should
  id: totrans-2103
  prefs: []
  type: TYPE_NORMAL
- en: also be evaluated. For a service to be deployed for production, it is a best
  id: totrans-2104
  prefs: []
  type: TYPE_NORMAL
- en: practice to have a security audit and white box testing to ensure that there
  id: totrans-2105
  prefs: []
  type: TYPE_NORMAL
- en: is no major security vulnerability.
  id: totrans-2106
  prefs: []
  type: TYPE_NORMAL
- en: '**Deploy to Testnet**'
  id: totrans-2107
  prefs: []
  type: TYPE_NORMAL
- en: When writing the code for smart contract and web GUI, developers can
  id: totrans-2108
  prefs: []
  type: TYPE_NORMAL
- en: have a development system and a local web service to test the project.
  id: totrans-2109
  prefs: []
  type: TYPE_NORMAL
- en: Once local development is completed, it can be deployed to public testnet
  id: totrans-2110
  prefs: []
  type: TYPE_NORMAL
- en: for external users to test it. There are several options for Ethereum testnet.
  id: totrans-2111
  prefs: []
  type: TYPE_NORMAL
- en: For the Ethereum blockchain, there are four popular testnets that are
  id: totrans-2112
  prefs: []
  type: TYPE_NORMAL
- en: '431'
  id: totrans-2113
  prefs: []
  type: TYPE_NORMAL
- en: '![](index-441_1.jpg)'
  id: totrans-2114
  prefs: []
  type: TYPE_IMG
- en: Chapter 11 Building team projeCts
  id: totrans-2115
  prefs: []
  type: TYPE_NORMAL
- en: available, including Ropsten, Kovan, Rinkeby, and Goerli testnets. All the
  id: totrans-2116
  prefs: []
  type: TYPE_NORMAL
- en: testnets mentioned here use proof-of-authority (POA) consensus and are
  id: totrans-2117
  prefs: []
  type: TYPE_NORMAL
- en: faster than the mainnet. To use these testnets, first connect the
  id: totrans-2118
  prefs: []
  type: TYPE_NORMAL
- en: MetaMask wallet to the testnet you want the smart contract to be deployed
  id: totrans-2119
  prefs: []
  type: TYPE_NORMAL
- en: to (Figur[e 11-8](#p441)). The testnets have been added to the MetaMask already.
  id: totrans-2120
  prefs: []
  type: TYPE_NORMAL
- en: If you cannot see the testnet listed, simply click at show/hide testnets to
  id: totrans-2121
  prefs: []
  type: TYPE_NORMAL
- en: open up the configuration widget and set “show the testnets” to “on.”
  id: totrans-2122
  prefs: []
  type: TYPE_NORMAL
- en: '***Figure 11-8\.** Connecting to the Ethereum mainnet or testnet through*'
  id: totrans-2123
  prefs: []
  type: TYPE_NORMAL
- en: '*MetaMask*'
  id: totrans-2124
  prefs: []
  type: TYPE_NORMAL
- en: '432'
  id: totrans-2125
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11 Building team projeCts
  id: totrans-2126
  prefs: []
  type: TYPE_NORMAL
- en: Once the MetaMask wallet is set to the designed testnet, testers
  id: totrans-2127
  prefs: []
  type: TYPE_NORMAL
- en: need to get some testing ether to test the dApp. These testnets all
  id: totrans-2128
  prefs: []
  type: TYPE_NORMAL
- en: provide a small amount of ether for testing purposes through dedicated
  id: totrans-2129
  prefs: []
  type: TYPE_NORMAL
- en: faucets. The faucet addresses and block browser URLs are shown in the
  id: totrans-2130
  prefs: []
  type: TYPE_NORMAL
- en: following (Figure [11-9):](#p442)
  id: totrans-2131
  prefs: []
  type: TYPE_NORMAL
- en: '***Figure 11-9\.** Ethereum testnet faucet addresses*'
  id: totrans-2132
  prefs: []
  type: TYPE_NORMAL
- en: Once a smart contract is deployed to testnet and the web pages are
  id: totrans-2133
  prefs: []
  type: TYPE_NORMAL
- en: set up to access the smart contract, the project team can announce alpha
  id: totrans-2134
  prefs: []
  type: TYPE_NORMAL
- en: or beta test programs to the users. The testing program is to involve
  id: totrans-2135
  prefs: []
  type: TYPE_NORMAL
- en: community members to try out the decentralized applications and report
  id: totrans-2136
  prefs: []
  type: TYPE_NORMAL
- en: issues found in the project. Normally, bounties are given to users who
  id: totrans-2137
  prefs: []
  type: TYPE_NORMAL
- en: report issues found in the project. Due to the immutability of blockchain,
  id: totrans-2138
  prefs: []
  type: TYPE_NORMAL
- en: it is critical that the dApps are tested thoroughly in testnet before being
  id: totrans-2139
  prefs: []
  type: TYPE_NORMAL
- en: deployed to the mainnet.
  id: totrans-2140
  prefs: []
  type: TYPE_NORMAL
- en: '**Deploy to Mainnet**'
  id: totrans-2141
  prefs: []
  type: TYPE_NORMAL
- en: Once the dApp is thoroughly tested in testnet, it can be deployed to the
  id: totrans-2142
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum mainnet. The tools and methods for deploying a smart contract
  id: totrans-2143
  prefs: []
  type: TYPE_NORMAL
- en: to a production network are the same as the testnet. There is no faucet for
  id: totrans-2144
  prefs: []
  type: TYPE_NORMAL
- en: the production network. The ether used for deploying smart contracts will
  id: totrans-2145
  prefs: []
  type: TYPE_NORMAL
- en: need to be purchased. Deployment requires noncustodial accounts where
  id: totrans-2146
  prefs: []
  type: TYPE_NORMAL
- en: '433'
  id: totrans-2147
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11 Building team projeCts
  id: totrans-2148
  prefs: []
  type: TYPE_NORMAL
- en: developers actually hold private keys. The custodial accounts hosted by
  id: totrans-2149
  prefs: []
  type: TYPE_NORMAL
- en: companies such as Coinbase and PayPal cannot be used. Developers need
  id: totrans-2150
  prefs: []
  type: TYPE_NORMAL
- en: to own the private key of an account in order to deploy a smart contract.
  id: totrans-2151
  prefs: []
  type: TYPE_NORMAL
- en: In addition, there are several factors to consider for the deployment to the
  id: totrans-2152
  prefs: []
  type: TYPE_NORMAL
- en: mainnet.
  id: totrans-2153
  prefs: []
  type: TYPE_NORMAL
- en: First and foremost is security. Deployment of smart contracts is done
  id: totrans-2154
  prefs: []
  type: TYPE_NORMAL
- en: by sending a transaction to the address 0 of the blockchain. The smart
  id: totrans-2155
  prefs: []
  type: TYPE_NORMAL
- en: contract address is generated through hashing only the sender address
  id: totrans-2156
  prefs: []
  type: TYPE_NORMAL
- en: and the nonce of that transaction. The data field of the transaction will
  id: totrans-2157
  prefs: []
  type: TYPE_NORMAL
- en: be the bytecode of the smart contract and saved to the calculated address
  id: totrans-2158
  prefs: []
  type: TYPE_NORMAL
- en: on the blockchain. Once a smart contract is deployed, the owner of the
  id: totrans-2159
  prefs: []
  type: TYPE_NORMAL
- en: smart contract is the sender that sends the transaction. This sender may
  id: totrans-2160
  prefs: []
  type: TYPE_NORMAL
- en: be assigned privileges to make modifications to the blockchain. It is very
  id: totrans-2161
  prefs: []
  type: TYPE_NORMAL
- en: important to safeguard the smart contract owner address. Sometimes, a
  id: totrans-2162
  prefs: []
  type: TYPE_NORMAL
- en: smart contract owner can call a function to denounce the ownership or
  id: totrans-2163
  prefs: []
  type: TYPE_NORMAL
- en: transfer the ownership to another EOA (external owner account).
  id: totrans-2164
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, the smart contract address will need to be published in a
  id: totrans-2165
  prefs: []
  type: TYPE_NORMAL
- en: trusted media. Users interact with smart contracts by sending transactions
  id: totrans-2166
  prefs: []
  type: TYPE_NORMAL
- en: to the smart contract address. If users send the transactions to a smart
  id: totrans-2167
  prefs: []
  type: TYPE_NORMAL
- en: contract with the wrong address, the fake smart contract may intercept the
  id: totrans-2168
  prefs: []
  type: TYPE_NORMAL
- en: funds sent to faked smart contracts.
  id: totrans-2169
  prefs: []
  type: TYPE_NORMAL
- en: Thirdly, the token associated with the project smart contract will need
  id: totrans-2170
  prefs: []
  type: TYPE_NORMAL
- en: to be added from the users’ wallet. The instructions should be provided to
  id: totrans-2171
  prefs: []
  type: TYPE_NORMAL
- en: the users. For most of the crypto wallet, the tokens are not automatically
  id: totrans-2172
  prefs: []
  type: TYPE_NORMAL
- en: added to the wallet. Users need to add a token to the wallet by adding a
  id: totrans-2173
  prefs: []
  type: TYPE_NORMAL
- en: smart contract, token symbol, decimal value, etc. This information will
  id: totrans-2174
  prefs: []
  type: TYPE_NORMAL
- en: come from the project team and should be published to the users.
  id: totrans-2175
  prefs: []
  type: TYPE_NORMAL
- en: Fourthly, a stable RPC node should be selected and connected to the
  id: totrans-2176
  prefs: []
  type: TYPE_NORMAL
- en: MetaMask or other wallets. An RPC node is an Ethereum client node that
  id: totrans-2177
  prefs: []
  type: TYPE_NORMAL
- en: syncs all blocks to a system and opens connection to Web3 clients. The
  id: totrans-2178
  prefs: []
  type: TYPE_NORMAL
- en: RPC node can be owned by a third party or by the project team itself. In
  id: totrans-2179
  prefs: []
  type: TYPE_NORMAL
- en: '434'
  id: totrans-2180
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11 Building team projeCts
  id: totrans-2181
  prefs: []
  type: TYPE_NORMAL
- en: either case, the RPC node should be safeguarded and prevented from the
  id: totrans-2182
  prefs: []
  type: TYPE_NORMAL
- en: attacks.
  id: totrans-2183
  prefs: []
  type: TYPE_NORMAL
- en: And lastly, the web pages and smart contract should be properly
  id: totrans-2184
  prefs: []
  type: TYPE_NORMAL
- en: integrated. In the web pages, the Web3 object constructs transactions and
  id: totrans-2185
  prefs: []
  type: TYPE_NORMAL
- en: sends the request to the blockchain. It is important to evaluate the Web3
  id: totrans-2186
  prefs: []
  type: TYPE_NORMAL
- en: and other scripts to make sure that they will not be tempered.
  id: totrans-2187
  prefs: []
  type: TYPE_NORMAL
- en: Once the smart contracts are deployed to mainnet, it is open to the
  id: totrans-2188
  prefs: []
  type: TYPE_NORMAL
- en: world. Besides the interfaces such as web portal and CLI provided by
  id: totrans-2189
  prefs: []
  type: TYPE_NORMAL
- en: the project team, third-party developers can also write applications to
  id: totrans-2190
  prefs: []
  type: TYPE_NORMAL
- en: access the smart contract. Due to the “openness,” “decentralization,”
  id: totrans-2191
  prefs: []
  type: TYPE_NORMAL
- en: and “immutability” of blockchain, the operation of decentralized apps is
  id: totrans-2192
  prefs: []
  type: TYPE_NORMAL
- en: more challenging than regular applications and will need to be discussed
  id: totrans-2193
  prefs: []
  type: TYPE_NORMAL
- en: further.
  id: totrans-2194
  prefs: []
  type: TYPE_NORMAL
- en: '**Operation and Upgrade Consideration**'
  id: totrans-2195
  prefs: []
  type: TYPE_NORMAL
- en: Since decentralized applications are not supposed to have centralized
  id: totrans-2196
  prefs: []
  type: TYPE_NORMAL
- en: owner and management, there is a need to build a community that can
  id: totrans-2197
  prefs: []
  type: TYPE_NORMAL
- en: govern the operation and upgrade of decentralized applications. Many
  id: totrans-2198
  prefs: []
  type: TYPE_NORMAL
- en: projects build voting mechanisms to decide on project operation and
  id: totrans-2199
  prefs: []
  type: TYPE_NORMAL
- en: upgrade. Project team issues governing tokens and distributes them to
  id: totrans-2200
  prefs: []
  type: TYPE_NORMAL
- en: community members. The voting power is proportional to the amount of
  id: totrans-2201
  prefs: []
  type: TYPE_NORMAL
- en: governing tokens. The community members can earn governing tokens to
  id: totrans-2202
  prefs: []
  type: TYPE_NORMAL
- en: increase their voting capacity. When a new feature or upgrade is proposed,
  id: totrans-2203
  prefs: []
  type: TYPE_NORMAL
- en: it is sent to a voting system, and each community member can vote to
  id: totrans-2204
  prefs: []
  type: TYPE_NORMAL
- en: adopt or reject the proposal. The accepted proposals are implemented by
  id: totrans-2205
  prefs: []
  type: TYPE_NORMAL
- en: developers as open source and then deployed to the mainnet.
  id: totrans-2206
  prefs: []
  type: TYPE_NORMAL
- en: One major challenge is to upgrade the deployed smart contract if
  id: totrans-2207
  prefs: []
  type: TYPE_NORMAL
- en: security vulnerability is found. Since there is no central authority, the
  id: totrans-2208
  prefs: []
  type: TYPE_NORMAL
- en: community will need to vote for an upgrade. However, since blockchain is
  id: totrans-2209
  prefs: []
  type: TYPE_NORMAL
- en: immutable, the deployed smart contract cannot be patched or upgraded.
  id: totrans-2210
  prefs: []
  type: TYPE_NORMAL
- en: '435'
  id: totrans-2211
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11 Building team projeCts
  id: totrans-2212
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the smart contract will need to be redeployed. When
  id: totrans-2213
  prefs: []
  type: TYPE_NORMAL
- en: redeploying a new smart contract, the tokens governed by the old smart
  id: totrans-2214
  prefs: []
  type: TYPE_NORMAL
- en: contract will need to be ported to the new smart contract. When the new
  id: totrans-2215
  prefs: []
  type: TYPE_NORMAL
- en: smart contract is deployed, all web pages and Web3 interface should point
  id: totrans-2216
  prefs: []
  type: TYPE_NORMAL
- en: to the new smart contract address. This is a very tedious and error-prone
  id: totrans-2217
  prefs: []
  type: TYPE_NORMAL
- en: process.
  id: totrans-2218
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, it would be good to write upgradable smart contracts.
  id: totrans-2219
  prefs: []
  type: TYPE_NORMAL
- en: This is to separate a smart contract into two or multiple smart contracts.
  id: totrans-2220
  prefs: []
  type: TYPE_NORMAL
- en: The first smart contract is an entry smart contract with very simple
  id: totrans-2221
  prefs: []
  type: TYPE_NORMAL
- en: functionality such as receiving an address and calling a target smart
  id: totrans-2222
  prefs: []
  type: TYPE_NORMAL
- en: contract at that address. The target smart contract is the one with the
  id: totrans-2223
  prefs: []
  type: TYPE_NORMAL
- en: majority of functions implemented. If the target smart contract has
  id: totrans-2224
  prefs: []
  type: TYPE_NORMAL
- en: security vulnerability and needs to be upgraded, a new target smart
  id: totrans-2225
  prefs: []
  type: TYPE_NORMAL
- en: contract can be deployed, and the new address can be sent to the entry
  id: totrans-2226
  prefs: []
  type: TYPE_NORMAL
- en: smart contract. When the entry smart contract receives the new target
  id: totrans-2227
  prefs: []
  type: TYPE_NORMAL
- en: smart contract address, it will call the new target smart contract. With this
  id: totrans-2228
  prefs: []
  type: TYPE_NORMAL
- en: upgradable smart contract design, the web pages and CLI does not need to
  id: totrans-2229
  prefs: []
  type: TYPE_NORMAL
- en: be reconfigured as the entry smart contract address does not change.
  id: totrans-2230
  prefs: []
  type: TYPE_NORMAL
- en: To optimally operate a decentralized application, it is essential to build
  id: totrans-2231
  prefs: []
  type: TYPE_NORMAL
- en: some services to monitor key parameters. For example, the total minted
  id: totrans-2232
  prefs: []
  type: TYPE_NORMAL
- en: token should be monitored to ensure that no additional tokens are minted
  id: totrans-2233
  prefs: []
  type: TYPE_NORMAL
- en: by hackers. The transaction throughput and gas fees can also be monitored
  id: totrans-2234
  prefs: []
  type: TYPE_NORMAL
- en: to ensure that that dApp is in healthy operational state. In addition, the
  id: totrans-2235
  prefs: []
  type: TYPE_NORMAL
- en: EVM upgrades and Ethereum hark forks should also be monitored to
  id: totrans-2236
  prefs: []
  type: TYPE_NORMAL
- en: ensures there is no negative impacts to the decentralized applications.
  id: totrans-2237
  prefs: []
  type: TYPE_NORMAL
- en: And finally, a vibrant community is the key for a successful operation
  id: totrans-2238
  prefs: []
  type: TYPE_NORMAL
- en: of decentralized applications. Building a dApp is unseparable from
  id: totrans-2239
  prefs: []
  type: TYPE_NORMAL
- en: building a community. Only with active enrollments of community,
  id: totrans-2240
  prefs: []
  type: TYPE_NORMAL
- en: decentralized applications can sustain, grow, and survive severe attacks.
  id: totrans-2241
  prefs: []
  type: TYPE_NORMAL
- en: '436'
  id: totrans-2242
  prefs: []
  type: TYPE_NORMAL
- en: '**Index**'
  id: totrans-2243
  prefs: []
  type: TYPE_NORMAL
- en: '**A**'
  id: totrans-2244
  prefs: []
  type: TYPE_NORMAL
- en: Atomic value exchanges, 16
  id: totrans-2245
  prefs: []
  type: TYPE_NORMAL
- en: Auditors, 329
  id: totrans-2246
  prefs: []
  type: TYPE_NORMAL
- en: Abstract class, 295
  id: totrans-2247
  prefs: []
  type: TYPE_NORMAL
- en: Authorization through tx.origin,
  id: totrans-2248
  prefs: []
  type: TYPE_NORMAL
- en: Address type, 258, 259
  id: totrans-2249
  prefs: []
  type: TYPE_NORMAL
- en: 282, 283
  id: totrans-2250
  prefs: []
  type: TYPE_NORMAL
- en: Alternate currencies, 37
  id: totrans-2251
  prefs: []
  type: TYPE_NORMAL
- en: Automated Market Maker (AMM)
  id: totrans-2252
  prefs: []
  type: TYPE_NORMAL
- en: Application Bytecode Interface
  id: totrans-2253
  prefs: []
  type: TYPE_NORMAL
- en: mechanism, 224, 386
  id: totrans-2254
  prefs: []
  type: TYPE_NORMAL
- en: (ABI), 236, 246, 310
  id: totrans-2255
  prefs: []
  type: TYPE_NORMAL
- en: Application design decisions
  id: totrans-2256
  prefs: []
  type: TYPE_NORMAL
- en: consensus, 132, 133
  id: totrans-2257
  prefs: []
  type: TYPE_NORMAL
- en: '**B**'
  id: totrans-2258
  prefs: []
  type: TYPE_NORMAL
- en: data, 130–132
  id: totrans-2259
  prefs: []
  type: TYPE_NORMAL
- en: Backward compatible, 412
  id: totrans-2260
  prefs: []
  type: TYPE_NORMAL
- en: development stack, 135–138
  id: totrans-2261
  prefs: []
  type: TYPE_NORMAL
- en: Beacon chain, 371
  id: totrans-2262
  prefs: []
  type: TYPE_NORMAL
- en: smart contracts, 128, 129
  id: totrans-2263
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin, 12, 13, 164, 209
  id: totrans-2264
  prefs: []
  type: TYPE_NORMAL
- en: stakeholder
  id: totrans-2265
  prefs: []
  type: TYPE_NORMAL
- en: block, 167, 175
  id: totrans-2266
  prefs: []
  type: TYPE_NORMAL
- en: organization, 133–135
  id: totrans-2267
  prefs: []
  type: TYPE_NORMAL
- en: block header fields, 176
  id: totrans-2268
  prefs: []
  type: TYPE_NORMAL
- en: tokens, 124–127
  id: totrans-2269
  prefs: []
  type: TYPE_NORMAL
- en: blocks, 177
  id: totrans-2270
  prefs: []
  type: TYPE_NORMAL
- en: transactions, 122–124
  id: totrans-2271
  prefs: []
  type: TYPE_NORMAL
- en: coinbase transaction, 172
  id: totrans-2272
  prefs: []
  type: TYPE_NORMAL
- en: Application themes
  id: totrans-2273
  prefs: []
  type: TYPE_NORMAL
- en: components, 167
  id: totrans-2274
  prefs: []
  type: TYPE_NORMAL
- en: data sovereignty, 117
  id: totrans-2275
  prefs: []
  type: TYPE_NORMAL
- en: consensus mechanism, 184–187
  id: totrans-2276
  prefs: []
  type: TYPE_NORMAL
- en: payments, 117
  id: totrans-2277
  prefs: []
  type: TYPE_NORMAL
- en: design decision, 181
  id: totrans-2278
  prefs: []
  type: TYPE_NORMAL
- en: transparency, 117
  id: totrans-2279
  prefs: []
  type: TYPE_NORMAL
- en: distributed ledger software, 169
  id: totrans-2280
  prefs: []
  type: TYPE_NORMAL
- en: Arbitration, 224
  id: totrans-2281
  prefs: []
  type: TYPE_NORMAL
- en: economics, 182–184
  id: totrans-2282
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic operations, 280, 281,
  id: totrans-2283
  prefs: []
  type: TYPE_NORMAL
- en: fields, 174
  id: totrans-2284
  prefs: []
  type: TYPE_NORMAL
- en: 370, 400
  id: totrans-2285
  prefs: []
  type: TYPE_NORMAL
- en: hash Merkle root of
  id: totrans-2286
  prefs: []
  type: TYPE_NORMAL
- en: Assert() function, 279
  id: totrans-2287
  prefs: []
  type: TYPE_NORMAL
- en: transactions, 177
  id: totrans-2288
  prefs: []
  type: TYPE_NORMAL
- en: Assert violation, 279
  id: totrans-2289
  prefs: []
  type: TYPE_NORMAL
- en: inputs and outputs structure, 170
  id: totrans-2290
  prefs: []
  type: TYPE_NORMAL
- en: Asset management tools, 221
  id: totrans-2291
  prefs: []
  type: TYPE_NORMAL
- en: miners, 166
  id: totrans-2292
  prefs: []
  type: TYPE_NORMAL
- en: Asymmetric key cryptography,
  id: totrans-2293
  prefs: []
  type: TYPE_NORMAL
- en: mining node, 166
  id: totrans-2294
  prefs: []
  type: TYPE_NORMAL
- en: 48, 49, 55
  id: totrans-2295
  prefs: []
  type: TYPE_NORMAL
- en: mining reward, 197
  id: totrans-2296
  prefs: []
  type: TYPE_NORMAL
- en: © Weijia Zhang and Tej Anand 2022
  id: totrans-2297
  prefs: []
  type: TYPE_NORMAL
- en: '437'
  id: totrans-2298
  prefs: []
  type: TYPE_NORMAL
- en: W. Zhang and T. Anand, *Blockchain and Ethereum Smart Contract Solution Development*,
  id: totrans-2299
  prefs: []
  type: TYPE_NORMAL
- en: '[https://doi.org/10.1007/978-1-4842-8164-2](https://doi.org/10.1007/978-1-4842-8164-2#DOI)'
  id: totrans-2300
  prefs: []
  type: TYPE_NORMAL
- en: INDEX
  id: totrans-2301
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin ( *cont.* )
  id: totrans-2302
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain application, 139
  id: totrans-2303
  prefs: []
  type: TYPE_NORMAL
- en: natural forks, 180
  id: totrans-2304
  prefs: []
  type: TYPE_NORMAL
- en: architectural layers, 136
  id: totrans-2305
  prefs: []
  type: TYPE_NORMAL
- en: network software
  id: totrans-2306
  prefs: []
  type: TYPE_NORMAL
- en: development process, 138
  id: totrans-2307
  prefs: []
  type: TYPE_NORMAL
- en: component, 169
  id: totrans-2308
  prefs: []
  type: TYPE_NORMAL
- en: success factors, 113, 114
  id: totrans-2309
  prefs: []
  type: TYPE_NORMAL
- en: node, 166, 169
  id: totrans-2310
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain-based solutions, 120, 157
  id: totrans-2311
  prefs: []
  type: TYPE_NORMAL
- en: permissionless public
  id: totrans-2312
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain-based systems
  id: totrans-2313
  prefs: []
  type: TYPE_NORMAL
- en: blockchain, 197
  id: totrans-2314
  prefs: []
  type: TYPE_NORMAL
- en: solution, 119
  id: totrans-2315
  prefs: []
  type: TYPE_NORMAL
- en: proof-of-work consensus
  id: totrans-2316
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain Ethereum Classic
  id: totrans-2317
  prefs: []
  type: TYPE_NORMAL
- en: mechanism, 197
  id: totrans-2318
  prefs: []
  type: TYPE_NORMAL
- en: (ETC), 405
  id: totrans-2319
  prefs: []
  type: TYPE_NORMAL
- en: script, 175
  id: totrans-2320
  prefs: []
  type: TYPE_NORMAL
- en: Block header, 175
  id: totrans-2321
  prefs: []
  type: TYPE_NORMAL
- en: smart contracts, 197
  id: totrans-2322
  prefs: []
  type: TYPE_NORMAL
- en: Bob’s ping function, 280
  id: totrans-2323
  prefs: []
  type: TYPE_NORMAL
- en: transaction data structure, 170
  id: totrans-2324
  prefs: []
  type: TYPE_NORMAL
- en: Boolean, 255, 256
  id: totrans-2325
  prefs: []
  type: TYPE_NORMAL
- en: transaction life cycle, 165
  id: totrans-2326
  prefs: []
  type: TYPE_NORMAL
- en: Borrow cryptocurrency, 386
  id: totrans-2327
  prefs: []
  type: TYPE_NORMAL
- en: transactions, 167, 176
  id: totrans-2328
  prefs: []
  type: TYPE_NORMAL
- en: Browser client, 307
  id: totrans-2329
  prefs: []
  type: TYPE_NORMAL
- en: values in notional
  id: totrans-2330
  prefs: []
  type: TYPE_NORMAL
- en: Brute-force search process, 74
  id: totrans-2331
  prefs: []
  type: TYPE_NORMAL
- en: transaction, 171
  id: totrans-2332
  prefs: []
  type: TYPE_NORMAL
- en: Burnability, 393
  id: totrans-2333
  prefs: []
  type: TYPE_NORMAL
- en: wallet software component, 168
  id: totrans-2334
  prefs: []
  type: TYPE_NORMAL
- en: Business problems, 116, 119, 121
  id: totrans-2335
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin improvement proposals
  id: totrans-2336
  prefs: []
  type: TYPE_NORMAL
- en: Business process, 115
  id: totrans-2337
  prefs: []
  type: TYPE_NORMAL
- en: (BIP), 196
  id: totrans-2338
  prefs: []
  type: TYPE_NORMAL
- en: Business-to-business exchanges, 20
  id: totrans-2339
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain, 168, 407, 408
  id: totrans-2340
  prefs: []
  type: TYPE_NORMAL
- en: Business use cases, 117
  id: totrans-2341
  prefs: []
  type: TYPE_NORMAL
- en: community, 406
  id: totrans-2342
  prefs: []
  type: TYPE_NORMAL
- en: Byte array, 259, 260
  id: totrans-2343
  prefs: []
  type: TYPE_NORMAL
- en: consensus, 84
  id: totrans-2344
  prefs: []
  type: TYPE_NORMAL
- en: Bytecodes, 305
  id: totrans-2345
  prefs: []
  type: TYPE_NORMAL
- en: distributed ledger, 84
  id: totrans-2346
  prefs: []
  type: TYPE_NORMAL
- en: 32-Byte Crosschain ID, 410
  id: totrans-2347
  prefs: []
  type: TYPE_NORMAL
- en: implementation
  id: totrans-2348
  prefs: []
  type: TYPE_NORMAL
- en: Byzantine Fault Tolerance (BFT)
  id: totrans-2349
  prefs: []
  type: TYPE_NORMAL
- en: categorization, 95–99
  id: totrans-2350
  prefs: []
  type: TYPE_NORMAL
- en: blockchain, 61, 72, 102, 214,
  id: totrans-2351
  prefs: []
  type: TYPE_NORMAL
- en: limitations, 102–106
  id: totrans-2352
  prefs: []
  type: TYPE_NORMAL
- en: 343, 346, 350
  id: totrans-2353
  prefs: []
  type: TYPE_NORMAL
- en: POW, 213
  id: totrans-2354
  prefs: []
  type: TYPE_NORMAL
- en: privacy, 87
  id: totrans-2355
  prefs: []
  type: TYPE_NORMAL
- en: provenance, 87
  id: totrans-2356
  prefs: []
  type: TYPE_NORMAL
- en: '**C**'
  id: totrans-2357
  prefs: []
  type: TYPE_NORMAL
- en: purist perspective, 99
  id: totrans-2358
  prefs: []
  type: TYPE_NORMAL
- en: CAP theorem, 66, 67, 75
  id: totrans-2359
  prefs: []
  type: TYPE_NORMAL
- en: smart contracts ( *see* Smart
  id: totrans-2360
  prefs: []
  type: TYPE_NORMAL
- en: CAP theorem–related design
  id: totrans-2361
  prefs: []
  type: TYPE_NORMAL
- en: contracts)
  id: totrans-2362
  prefs: []
  type: TYPE_NORMAL
- en: trade-offs, 73
  id: totrans-2363
  prefs: []
  type: TYPE_NORMAL
- en: specific variables, 268–270
  id: totrans-2364
  prefs: []
  type: TYPE_NORMAL
- en: Carbon credit market, 389
  id: totrans-2365
  prefs: []
  type: TYPE_NORMAL
- en: technology integration, 71–74
  id: totrans-2366
  prefs: []
  type: TYPE_NORMAL
- en: Carbon credit token, 390
  id: totrans-2367
  prefs: []
  type: TYPE_NORMAL
- en: '438'
  id: totrans-2368
  prefs: []
  type: TYPE_NORMAL
- en: INDEX
  id: totrans-2369
  prefs: []
  type: TYPE_NORMAL
- en: Central bank digital currency
  id: totrans-2370
  prefs: []
  type: TYPE_NORMAL
- en: Consensus mechanism, 82, 84, 85,
  id: totrans-2371
  prefs: []
  type: TYPE_NORMAL
- en: (CBDC), 143, 209, 379
  id: totrans-2372
  prefs: []
  type: TYPE_NORMAL
- en: 164, 184–187
  id: totrans-2373
  prefs: []
  type: TYPE_NORMAL
- en: Centralized ledger, 88, 89
  id: totrans-2374
  prefs: []
  type: TYPE_NORMAL
- en: ConsenSys package, 382
  id: totrans-2375
  prefs: []
  type: TYPE_NORMAL
- en: Centralized ownership, 69
  id: totrans-2376
  prefs: []
  type: TYPE_NORMAL
- en: Consistency, 72
  id: totrans-2377
  prefs: []
  type: TYPE_NORMAL
- en: Chainlink, 225
  id: totrans-2378
  prefs: []
  type: TYPE_NORMAL
- en: Consortium-based
  id: totrans-2379
  prefs: []
  type: TYPE_NORMAL
- en: ChallengeWithdraw function, 349
  id: totrans-2380
  prefs: []
  type: TYPE_NORMAL
- en: networks, 134
  id: totrans-2381
  prefs: []
  type: TYPE_NORMAL
- en: checkMerkleTree function, 353,
  id: totrans-2382
  prefs: []
  type: TYPE_NORMAL
- en: Constraints, 140
  id: totrans-2383
  prefs: []
  type: TYPE_NORMAL
- en: 355, 357
  id: totrans-2384
  prefs: []
  type: TYPE_NORMAL
- en: Constructor function, 252
  id: totrans-2385
  prefs: []
  type: TYPE_NORMAL
- en: checkNotEqual() function, 300
  id: totrans-2386
  prefs: []
  type: TYPE_NORMAL
- en: Contract accounts, 190
  id: totrans-2387
  prefs: []
  type: TYPE_NORMAL
- en: CLI clients, 308
  id: totrans-2388
  prefs: []
  type: TYPE_NORMAL
- en: Contract Bob, 280
  id: totrans-2389
  prefs: []
  type: TYPE_NORMAL
- en: Client computers, 68
  id: totrans-2390
  prefs: []
  type: TYPE_NORMAL
- en: Core blockchain layer, 213
  id: totrans-2391
  prefs: []
  type: TYPE_NORMAL
- en: Client nodes, 212, 372
  id: totrans-2392
  prefs: []
  type: TYPE_NORMAL
- en: Core capabilities of blockchain, 43
  id: totrans-2393
  prefs: []
  type: TYPE_NORMAL
- en: Coding events, 273
  id: totrans-2394
  prefs: []
  type: TYPE_NORMAL
- en: Cross-chain contract, 279
  id: totrans-2395
  prefs: []
  type: TYPE_NORMAL
- en: Coinbase transaction, 172, 219,
  id: totrans-2396
  prefs: []
  type: TYPE_NORMAL
- en: Crosschain ID, 407, 412, 413
  id: totrans-2397
  prefs: []
  type: TYPE_NORMAL
- en: 223, 230
  id: totrans-2398
  prefs: []
  type: TYPE_NORMAL
- en: Crosschain identifier
  id: totrans-2399
  prefs: []
  type: TYPE_NORMAL
- en: Command-line interface (CLI),
  id: totrans-2400
  prefs: []
  type: TYPE_NORMAL
- en: registration and lookup
  id: totrans-2401
  prefs: []
  type: TYPE_NORMAL
- en: 306, 308, 423
  id: totrans-2402
  prefs: []
  type: TYPE_NORMAL
- en: service, 408
  id: totrans-2403
  prefs: []
  type: TYPE_NORMAL
- en: Community-based blockchain
  id: totrans-2404
  prefs: []
  type: TYPE_NORMAL
- en: requirements, 409
  id: totrans-2405
  prefs: []
  type: TYPE_NORMAL
- en: networks, 135
  id: totrans-2406
  prefs: []
  type: TYPE_NORMAL
- en: Crosschain identity service, 413
  id: totrans-2407
  prefs: []
  type: TYPE_NORMAL
- en: Community Telegram chat
  id: totrans-2408
  prefs: []
  type: TYPE_NORMAL
- en: Crosschain ID registration, 431
  id: totrans-2409
  prefs: []
  type: TYPE_NORMAL
- en: group, 325
  id: totrans-2410
  prefs: []
  type: TYPE_NORMAL
- en: Crosschain ID smart contract, 418
  id: totrans-2411
  prefs: []
  type: TYPE_NORMAL
- en: Compilation tools, 217
  id: totrans-2412
  prefs: []
  type: TYPE_NORMAL
- en: Crosschain Interoperability Task
  id: totrans-2413
  prefs: []
  type: TYPE_NORMAL
- en: Complexity of blockchain
  id: totrans-2414
  prefs: []
  type: TYPE_NORMAL
- en: Force (CITF), 408
  id: totrans-2415
  prefs: []
  type: TYPE_NORMAL
- en: security, 319
  id: totrans-2416
  prefs: []
  type: TYPE_NORMAL
- en: Crosschain operations, 412
  id: totrans-2417
  prefs: []
  type: TYPE_NORMAL
- en: constraints of patches and
  id: totrans-2418
  prefs: []
  type: TYPE_NORMAL
- en: Cryptanalysis, 46
  id: totrans-2419
  prefs: []
  type: TYPE_NORMAL
- en: upgradability, 320
  id: totrans-2420
  prefs: []
  type: TYPE_NORMAL
- en: Cryptocurrencies, 227, 390
  id: totrans-2421
  prefs: []
  type: TYPE_NORMAL
- en: decentralized nature of
  id: totrans-2422
  prefs: []
  type: TYPE_NORMAL
- en: Crypto exchanges, 223
  id: totrans-2423
  prefs: []
  type: TYPE_NORMAL
- en: blockchain, 320
  id: totrans-2424
  prefs: []
  type: TYPE_NORMAL
- en: Cryptographic keys, 90
  id: totrans-2425
  prefs: []
  type: TYPE_NORMAL
- en: high value impact on
  id: totrans-2426
  prefs: []
  type: TYPE_NORMAL
- en: Cryptography, 44, 46, 164
  id: totrans-2427
  prefs: []
  type: TYPE_NORMAL
- en: business, 321
  id: totrans-2428
  prefs: []
  type: TYPE_NORMAL
- en: CryptoKitty, 322, 326, 333
  id: totrans-2429
  prefs: []
  type: TYPE_NORMAL
- en: privacy and anonymous nature
  id: totrans-2430
  prefs: []
  type: TYPE_NORMAL
- en: Cryptology
  id: totrans-2431
  prefs: []
  type: TYPE_NORMAL
- en: of blockchain, 320
  id: totrans-2432
  prefs: []
  type: TYPE_NORMAL
- en: asymmetric/public/private key
  id: totrans-2433
  prefs: []
  type: TYPE_NORMAL
- en: trustless and permissionless
  id: totrans-2434
  prefs: []
  type: TYPE_NORMAL
- en: cryptography, 49
  id: totrans-2435
  prefs: []
  type: TYPE_NORMAL
- en: environment, 320
  id: totrans-2436
  prefs: []
  type: TYPE_NORMAL
- en: cryptanalysis, 46
  id: totrans-2437
  prefs: []
  type: TYPE_NORMAL
- en: '439'
  id: totrans-2438
  prefs: []
  type: TYPE_NORMAL
- en: INDEX
  id: totrans-2439
  prefs: []
  type: TYPE_NORMAL
- en: Cryptology ( *cont.* )
  id: totrans-2440
  prefs: []
  type: TYPE_NORMAL
- en: Decentralized Autonomous
  id: totrans-2441
  prefs: []
  type: TYPE_NORMAL
- en: cryptography, 46
  id: totrans-2442
  prefs: []
  type: TYPE_NORMAL
- en: Organization (DAO), 129,
  id: totrans-2443
  prefs: []
  type: TYPE_NORMAL
- en: encryption-decryption
  id: totrans-2444
  prefs: []
  type: TYPE_NORMAL
- en: 142, 209, 226, 379
  id: totrans-2445
  prefs: []
  type: TYPE_NORMAL
- en: process, 45
  id: totrans-2446
  prefs: []
  type: TYPE_NORMAL
- en: Decentralized exchange (DEX),
  id: totrans-2447
  prefs: []
  type: TYPE_NORMAL
- en: high-level encryption-
  id: totrans-2448
  prefs: []
  type: TYPE_NORMAL
- en: 223, 224, 386
  id: totrans-2449
  prefs: []
  type: TYPE_NORMAL
- en: decryption process, 45
  id: totrans-2450
  prefs: []
  type: TYPE_NORMAL
- en: Decentralized Insurance
  id: totrans-2451
  prefs: []
  type: TYPE_NORMAL
- en: states of data, 55, 56
  id: totrans-2452
  prefs: []
  type: TYPE_NORMAL
- en: Platform, 226
  id: totrans-2453
  prefs: []
  type: TYPE_NORMAL
- en: strong asymmetric key
  id: totrans-2454
  prefs: []
  type: TYPE_NORMAL
- en: Decentralized Finance project
  id: totrans-2455
  prefs: []
  type: TYPE_NORMAL
- en: algorithms, 50
  id: totrans-2456
  prefs: []
  type: TYPE_NORMAL
- en: (DeFi), 141, 209, 222,
  id: totrans-2457
  prefs: []
  type: TYPE_NORMAL
- en: strong symmetric key
  id: totrans-2458
  prefs: []
  type: TYPE_NORMAL
- en: 386, 387
  id: totrans-2459
  prefs: []
  type: TYPE_NORMAL
- en: algorithms, 48
  id: totrans-2460
  prefs: []
  type: TYPE_NORMAL
- en: Delegated proof of stake, 185, 186
  id: totrans-2461
  prefs: []
  type: TYPE_NORMAL
- en: Deployment, 433
  id: totrans-2462
  prefs: []
  type: TYPE_NORMAL
- en: DepositEvent class, 274
  id: totrans-2463
  prefs: []
  type: TYPE_NORMAL
- en: '**D**'
  id: totrans-2464
  prefs: []
  type: TYPE_NORMAL
- en: Design trade-offs, 104, 121
  id: totrans-2465
  prefs: []
  type: TYPE_NORMAL
- en: Daily transactions, 344
  id: totrans-2466
  prefs: []
  type: TYPE_NORMAL
- en: Desktop clients, 308
  id: totrans-2467
  prefs: []
  type: TYPE_NORMAL
- en: dApp clients
  id: totrans-2468
  prefs: []
  type: TYPE_NORMAL
- en: Development blockchain, 228
  id: totrans-2469
  prefs: []
  type: TYPE_NORMAL
- en: browser client, 307
  id: totrans-2470
  prefs: []
  type: TYPE_NORMAL
- en: Development stack, 135–138
  id: totrans-2471
  prefs: []
  type: TYPE_NORMAL
- en: CLI clients, 308
  id: totrans-2472
  prefs: []
  type: TYPE_NORMAL
- en: Digital signatures, 44
  id: totrans-2473
  prefs: []
  type: TYPE_NORMAL
- en: CLI format, 306
  id: totrans-2474
  prefs: []
  type: TYPE_NORMAL
- en: fool-proof guarantee, 51
  id: totrans-2475
  prefs: []
  type: TYPE_NORMAL
- en: desktop client, 308
  id: totrans-2476
  prefs: []
  type: TYPE_NORMAL
- en: hashing, 51, 55
  id: totrans-2477
  prefs: []
  type: TYPE_NORMAL
- en: GUI format, 306
  id: totrans-2478
  prefs: []
  type: TYPE_NORMAL
- en: limitation, 51
  id: totrans-2479
  prefs: []
  type: TYPE_NORMAL
- en: mobile client, 307
  id: totrans-2480
  prefs: []
  type: TYPE_NORMAL
- en: one-way functions, 52
  id: totrans-2481
  prefs: []
  type: TYPE_NORMAL
- en: Data at rest, 55
  id: totrans-2482
  prefs: []
  type: TYPE_NORMAL
- en: process, 50
  id: totrans-2483
  prefs: []
  type: TYPE_NORMAL
- en: Data in transit, 55
  id: totrans-2484
  prefs: []
  type: TYPE_NORMAL
- en: Distributed applications (dApps),
  id: totrans-2485
  prefs: []
  type: TYPE_NORMAL
- en: Data in use, 56
  id: totrans-2486
  prefs: []
  type: TYPE_NORMAL
- en: 2, 125, 188, 191, 193, 196,
  id: totrans-2487
  prefs: []
  type: TYPE_NORMAL
- en: Data-related inefficiencies, 25–27
  id: totrans-2488
  prefs: []
  type: TYPE_NORMAL
- en: 197, 201
  id: totrans-2489
  prefs: []
  type: TYPE_NORMAL
- en: Data security risks, 30, 31
  id: totrans-2490
  prefs: []
  type: TYPE_NORMAL
- en: Distributed ledger, 32, 82, 84, 164
  id: totrans-2491
  prefs: []
  type: TYPE_NORMAL
- en: Data sharing, 5
  id: totrans-2492
  prefs: []
  type: TYPE_NORMAL
- en: block, 85
  id: totrans-2493
  prefs: []
  type: TYPE_NORMAL
- en: Data storage location, 284
  id: totrans-2494
  prefs: []
  type: TYPE_NORMAL
- en: databases and blockchain, 94
  id: totrans-2495
  prefs: []
  type: TYPE_NORMAL
- en: Data structures, 415
  id: totrans-2496
  prefs: []
  type: TYPE_NORMAL
- en: implementation, 94
  id: totrans-2497
  prefs: []
  type: TYPE_NORMAL
- en: data type, 255
  id: totrans-2498
  prefs: []
  type: TYPE_NORMAL
- en: peer nodes, 91–94
  id: totrans-2499
  prefs: []
  type: TYPE_NORMAL
- en: Decentralization, 4
  id: totrans-2500
  prefs: []
  type: TYPE_NORMAL
- en: privacy-preserving, 90, 94
  id: totrans-2501
  prefs: []
  type: TYPE_NORMAL
- en: Decentralized applications,
  id: totrans-2502
  prefs: []
  type: TYPE_NORMAL
- en: rules, 90
  id: totrans-2503
  prefs: []
  type: TYPE_NORMAL
- en: 435, 436
  id: totrans-2504
  prefs: []
  type: TYPE_NORMAL
- en: transactions, 93
  id: totrans-2505
  prefs: []
  type: TYPE_NORMAL
- en: '440'
  id: totrans-2506
  prefs: []
  type: TYPE_NORMAL
- en: INDEX
  id: totrans-2507
  prefs: []
  type: TYPE_NORMAL
- en: Distributed systems, 44, 164
  id: totrans-2508
  prefs: []
  type: TYPE_NORMAL
- en: sources, 23
  id: totrans-2509
  prefs: []
  type: TYPE_NORMAL
- en: CAP theorem, 66
  id: totrans-2510
  prefs: []
  type: TYPE_NORMAL
- en: time to settle transactions, 23
  id: totrans-2511
  prefs: []
  type: TYPE_NORMAL
- en: definition, 56
  id: totrans-2512
  prefs: []
  type: TYPE_NORMAL
- en: Economics, Bitcoin, 182–184
  id: totrans-2513
  prefs: []
  type: TYPE_NORMAL
- en: high availability, strong
  id: totrans-2514
  prefs: []
  type: TYPE_NORMAL
- en: Emitted event, 272–274
  id: totrans-2515
  prefs: []
  type: TYPE_NORMAL
- en: consistency, and network
  id: totrans-2516
  prefs: []
  type: TYPE_NORMAL
- en: Encryption-decryption process, 45
  id: totrans-2517
  prefs: []
  type: TYPE_NORMAL
- en: partition tolerance, 67
  id: totrans-2518
  prefs: []
  type: TYPE_NORMAL
- en: Energy consumption, 102
  id: totrans-2519
  prefs: []
  type: TYPE_NORMAL
- en: issues, goals, and
  id: totrans-2520
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise businesses, 98
  id: totrans-2521
  prefs: []
  type: TYPE_NORMAL
- en: approaches, 65
  id: totrans-2522
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise Ethereum Alliance
  id: totrans-2523
  prefs: []
  type: TYPE_NORMAL
- en: real-world issue
  id: totrans-2524
  prefs: []
  type: TYPE_NORMAL
- en: (EEA), 139, 211, 215,
  id: totrans-2525
  prefs: []
  type: TYPE_NORMAL
- en: complexity, 57, 58
  id: totrans-2526
  prefs: []
  type: TYPE_NORMAL
- en: 390, 408
  id: totrans-2527
  prefs: []
  type: TYPE_NORMAL
- en: consistency, 61–65
  id: totrans-2528
  prefs: []
  type: TYPE_NORMAL
- en: Entertainment
  id: totrans-2529
  prefs: []
  type: TYPE_NORMAL
- en: failures, 58–61
  id: totrans-2530
  prefs: []
  type: TYPE_NORMAL
- en: applications, 155–157
  id: totrans-2531
  prefs: []
  type: TYPE_NORMAL
- en: scalability, 58
  id: totrans-2532
  prefs: []
  type: TYPE_NORMAL
- en: Enum, 264, 265
  id: totrans-2533
  prefs: []
  type: TYPE_NORMAL
- en: views, 57
  id: totrans-2534
  prefs: []
  type: TYPE_NORMAL
- en: ERC20 specification, 380
  id: totrans-2535
  prefs: []
  type: TYPE_NORMAL
- en: Domain name servers (DNS), 68
  id: totrans-2536
  prefs: []
  type: TYPE_NORMAL
- en: ERC20 tokens, 380, 382, 383
  id: totrans-2537
  prefs: []
  type: TYPE_NORMAL
- en: Drizzle, 192
  id: totrans-2538
  prefs: []
  type: TYPE_NORMAL
- en: ERC721 NFT token, 361
  id: totrans-2539
  prefs: []
  type: TYPE_NORMAL
- en: Dynamically size array, 262, 263
  id: totrans-2540
  prefs: []
  type: TYPE_NORMAL
- en: ERP software, 4
  id: totrans-2541
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum, 99, 379, 380, 405
  id: totrans-2542
  prefs: []
  type: TYPE_NORMAL
- en: '**E**'
  id: totrans-2543
  prefs: []
  type: TYPE_NORMAL
- en: achievements, 191
  id: totrans-2544
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin UTXOs, 188
  id: totrans-2545
  prefs: []
  type: TYPE_NORMAL
- en: Economic exchange, 15
  id: totrans-2546
  prefs: []
  type: TYPE_NORMAL
- en: blockchain, 196
  id: totrans-2547
  prefs: []
  type: TYPE_NORMAL
- en: Economic inefficiencies
  id: totrans-2548
  prefs: []
  type: TYPE_NORMAL
- en: boot nodes, 212
  id: totrans-2549
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain’s potential to
  id: totrans-2550
  prefs: []
  type: TYPE_NORMAL
- en: client nodes, 212
  id: totrans-2551
  prefs: []
  type: TYPE_NORMAL
- en: address, 31, 32
  id: totrans-2552
  prefs: []
  type: TYPE_NORMAL
- en: contract accounts, 190
  id: totrans-2553
  prefs: []
  type: TYPE_NORMAL
- en: data-related
  id: totrans-2554
  prefs: []
  type: TYPE_NORMAL
- en: dApp architecture and
  id: totrans-2555
  prefs: []
  type: TYPE_NORMAL
- en: inefficiencies, 25–27
  id: totrans-2556
  prefs: []
  type: TYPE_NORMAL
- en: development tools, 192
  id: totrans-2557
  prefs: []
  type: TYPE_NORMAL
- en: data security risks, 30, 31
  id: totrans-2558
  prefs: []
  type: TYPE_NORMAL
- en: distributed applications
  id: totrans-2559
  prefs: []
  type: TYPE_NORMAL
- en: fees to third parties, 24
  id: totrans-2560
  prefs: []
  type: TYPE_NORMAL
- en: creation, 191
  id: totrans-2561
  prefs: []
  type: TYPE_NORMAL
- en: fraud, 29
  id: totrans-2562
  prefs: []
  type: TYPE_NORMAL
- en: Ether denominations, 190
  id: totrans-2563
  prefs: []
  type: TYPE_NORMAL
- en: potential of blockchain
  id: totrans-2564
  prefs: []
  type: TYPE_NORMAL
- en: externally owned accounts, 190
  id: totrans-2565
  prefs: []
  type: TYPE_NORMAL
- en: capability, 33, 34
  id: totrans-2566
  prefs: []
  type: TYPE_NORMAL
- en: permissionless public
  id: totrans-2567
  prefs: []
  type: TYPE_NORMAL
- en: privacy trade-offs, 29
  id: totrans-2568
  prefs: []
  type: TYPE_NORMAL
- en: blockchain, 212
  id: totrans-2569
  prefs: []
  type: TYPE_NORMAL
- en: regulations and rules
  id: totrans-2570
  prefs: []
  type: TYPE_NORMAL
- en: risks, 189
  id: totrans-2571
  prefs: []
  type: TYPE_NORMAL
- en: constraints, 28, 29
  id: totrans-2572
  prefs: []
  type: TYPE_NORMAL
- en: SC, 343–347
  id: totrans-2573
  prefs: []
  type: TYPE_NORMAL
- en: '441'
  id: totrans-2574
  prefs: []
  type: TYPE_NORMAL
- en: INDEX
  id: totrans-2575
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum ( *cont.* )
  id: totrans-2576
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum blockchain platform, 210
  id: totrans-2577
  prefs: []
  type: TYPE_NORMAL
- en: scalability and security, 199
  id: totrans-2578
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum blockchains, 334, 406
  id: totrans-2579
  prefs: []
  type: TYPE_NORMAL
- en: Solidity, 188
  id: totrans-2580
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum-compatible
  id: totrans-2581
  prefs: []
  type: TYPE_NORMAL
- en: transactions, 189
  id: totrans-2582
  prefs: []
  type: TYPE_NORMAL
- en: blockchains, 214
  id: totrans-2583
  prefs: []
  type: TYPE_NORMAL
- en: transactions types, 190
  id: totrans-2584
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum ecosystem projects, 387
  id: totrans-2585
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum 1.5, 370
  id: totrans-2586
  prefs: []
  type: TYPE_NORMAL
- en: DAO, 226
  id: totrans-2587
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum 2, 213, 338
  id: totrans-2588
  prefs: []
  type: TYPE_NORMAL
- en: decentralized exchange (DEX),
  id: totrans-2589
  prefs: []
  type: TYPE_NORMAL
- en: architecture, 371–374
  id: totrans-2590
  prefs: []
  type: TYPE_NORMAL
- en: 223, 224
  id: totrans-2591
  prefs: []
  type: TYPE_NORMAL
- en: beacon chain, 371
  id: totrans-2592
  prefs: []
  type: TYPE_NORMAL
- en: Decentralized Insurance
  id: totrans-2593
  prefs: []
  type: TYPE_NORMAL
- en: migration from Ethereum 1,
  id: totrans-2594
  prefs: []
  type: TYPE_NORMAL
- en: Platform, 226
  id: totrans-2595
  prefs: []
  type: TYPE_NORMAL
- en: 374–376
  id: totrans-2596
  prefs: []
  type: TYPE_NORMAL
- en: Fortmatic, 221
  id: totrans-2597
  prefs: []
  type: TYPE_NORMAL
- en: mining node, 376
  id: totrans-2598
  prefs: []
  type: TYPE_NORMAL
- en: hosted service, 219
  id: totrans-2599
  prefs: []
  type: TYPE_NORMAL
- en: POW to POS, 371
  id: totrans-2600
  prefs: []
  type: TYPE_NORMAL
- en: KYC and Identity, 227
  id: totrans-2601
  prefs: []
  type: TYPE_NORMAL
- en: running a validator nodes,
  id: totrans-2602
  prefs: []
  type: TYPE_NORMAL
- en: MetaMask, 219, 220
  id: totrans-2603
  prefs: []
  type: TYPE_NORMAL
- en: 376, 377
  id: totrans-2604
  prefs: []
  type: TYPE_NORMAL
- en: MyEtherWallet (MEW), 220, 221
  id: totrans-2605
  prefs: []
  type: TYPE_NORMAL
- en: sharding, 371
  id: totrans-2606
  prefs: []
  type: TYPE_NORMAL
- en: NFT application, 224, 225
  id: totrans-2607
  prefs: []
  type: TYPE_NORMAL
- en: uncertainties, 378
  id: totrans-2608
  prefs: []
  type: TYPE_NORMAL
- en: Oracle service, 225, 226
  id: totrans-2609
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum blockchain, 209, 212,
  id: totrans-2610
  prefs: []
  type: TYPE_NORMAL
- en: smart contract–enabled
  id: totrans-2611
  prefs: []
  type: TYPE_NORMAL
- en: 228, 246, 269, 335, 395, 396,
  id: totrans-2612
  prefs: []
  type: TYPE_NORMAL
- en: banking dApp, 222, 223
  id: totrans-2613
  prefs: []
  type: TYPE_NORMAL
- en: 398, 403, 405, 406
  id: totrans-2614
  prefs: []
  type: TYPE_NORMAL
- en: Stablecoin, 227
  id: totrans-2615
  prefs: []
  type: TYPE_NORMAL
- en: advantages, 209
  id: totrans-2616
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum EVM storage data, 284
  id: totrans-2617
  prefs: []
  type: TYPE_NORMAL
- en: and infrastructure, 209
  id: totrans-2618
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum gas fee, 215
  id: totrans-2619
  prefs: []
  type: TYPE_NORMAL
- en: security ( *see* Security)
  id: totrans-2620
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum gas mechanism, 398
  id: totrans-2621
  prefs: []
  type: TYPE_NORMAL
- en: smart contracts, 319
  id: totrans-2622
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum improvement proposal
  id: totrans-2623
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum blockchain architecture
  id: totrans-2624
  prefs: []
  type: TYPE_NORMAL
- en: (EIP), 196, 408
  id: totrans-2625
  prefs: []
  type: TYPE_NORMAL
- en: application layer, 217, 218
  id: totrans-2626
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum.js retrieves, 428
  id: totrans-2627
  prefs: []
  type: TYPE_NORMAL
- en: components architecture and
  id: totrans-2628
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum mainnet (ETH), 341, 342,
  id: totrans-2629
  prefs: []
  type: TYPE_NORMAL
- en: overview, 211
  id: totrans-2630
  prefs: []
  type: TYPE_NORMAL
- en: 347, 364, 405
  id: totrans-2631
  prefs: []
  type: TYPE_NORMAL
- en: core blockchain layer, 213–215
  id: totrans-2632
  prefs: []
  type: TYPE_NORMAL
- en: EIP-155, 406, 407
  id: totrans-2633
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise components layer,
  id: totrans-2634
  prefs: []
  type: TYPE_NORMAL
- en: and ETC, 406
  id: totrans-2635
  prefs: []
  type: TYPE_NORMAL
- en: 215, 216
  id: totrans-2636
  prefs: []
  type: TYPE_NORMAL
- en: and Ethereum Classic, 405
  id: totrans-2637
  prefs: []
  type: TYPE_NORMAL
- en: layers, 211, 218
  id: totrans-2638
  prefs: []
  type: TYPE_NORMAL
- en: plasma smart contract, 348, 349
  id: totrans-2639
  prefs: []
  type: TYPE_NORMAL
- en: network layer, 212, 213
  id: totrans-2640
  prefs: []
  type: TYPE_NORMAL
- en: transactions, 398
  id: totrans-2641
  prefs: []
  type: TYPE_NORMAL
- en: tooling layer, 216, 217
  id: totrans-2642
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum network, 212
  id: totrans-2643
  prefs: []
  type: TYPE_NORMAL
- en: '442'
  id: totrans-2644
  prefs: []
  type: TYPE_NORMAL
- en: INDEX
  id: totrans-2645
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum public blockchain, 215,
  id: totrans-2646
  prefs: []
  type: TYPE_NORMAL
- en: Financial services industry
  id: totrans-2647
  prefs: []
  type: TYPE_NORMAL
- en: 216, 231
  id: totrans-2648
  prefs: []
  type: TYPE_NORMAL
- en: blockchain solutions, 143
  id: totrans-2649
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum smart contract
  id: totrans-2650
  prefs: []
  type: TYPE_NORMAL
- en: capabilities, 140
  id: totrans-2651
  prefs: []
  type: TYPE_NORMAL
- en: development, 210
  id: totrans-2652
  prefs: []
  type: TYPE_NORMAL
- en: CBDC, 143
  id: totrans-2653
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum testnet, 431
  id: totrans-2654
  prefs: []
  type: TYPE_NORMAL
- en: crypto exchanges, 143
  id: totrans-2655
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum tools for smart contract
  id: totrans-2656
  prefs: []
  type: TYPE_NORMAL
- en: DeFi, 141
  id: totrans-2657
  prefs: []
  type: TYPE_NORMAL
- en: development
  id: totrans-2658
  prefs: []
  type: TYPE_NORMAL
- en: economic inefficiencies, 140
  id: totrans-2659
  prefs: []
  type: TYPE_NORMAL
- en: Etherscan, 231
  id: totrans-2660
  prefs: []
  type: TYPE_NORMAL
- en: quintessential third party, 140
  id: totrans-2661
  prefs: []
  type: TYPE_NORMAL
- en: Geth, 231–234
  id: totrans-2662
  prefs: []
  type: TYPE_NORMAL
- en: redundant work/rework/
  id: totrans-2663
  prefs: []
  type: TYPE_NORMAL
- en: MetaMask, 229–231
  id: totrans-2664
  prefs: []
  type: TYPE_NORMAL
- en: reconciliation work, 141
  id: totrans-2665
  prefs: []
  type: TYPE_NORMAL
- en: Remix, 238–243
  id: totrans-2666
  prefs: []
  type: TYPE_NORMAL
- en: themes, 141
  id: totrans-2667
  prefs: []
  type: TYPE_NORMAL
- en: tools and components, 228
  id: totrans-2668
  prefs: []
  type: TYPE_NORMAL
- en: Fixed size array, 261, 262
  id: totrans-2669
  prefs: []
  type: TYPE_NORMAL
- en: Truffle, 235–238
  id: totrans-2670
  prefs: []
  type: TYPE_NORMAL
- en: Fortmatic, 221
  id: totrans-2671
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum virtual machine (EVM),
  id: totrans-2672
  prefs: []
  type: TYPE_NORMAL
- en: Founder-directed network, 134
  id: totrans-2673
  prefs: []
  type: TYPE_NORMAL
- en: 191, 209, 214, 215, 241, 242,
  id: totrans-2674
  prefs: []
  type: TYPE_NORMAL
- en: Frequent flier points, 37
  id: totrans-2675
  prefs: []
  type: TYPE_NORMAL
- en: 245–247, 335, 371
  id: totrans-2676
  prefs: []
  type: TYPE_NORMAL
- en: Function
  id: totrans-2677
  prefs: []
  type: TYPE_NORMAL
- en: Etherscan, 231
  id: totrans-2678
  prefs: []
  type: TYPE_NORMAL
- en: crosschain ID, 416
  id: totrans-2679
  prefs: []
  type: TYPE_NORMAL
- en: Ether withdraw operation not
  id: totrans-2680
  prefs: []
  type: TYPE_NORMAL
- en: getChainIdFromLegacyId, 416
  id: totrans-2681
  prefs: []
  type: TYPE_NORMAL
- en: protected, 276
  id: totrans-2682
  prefs: []
  type: TYPE_NORMAL
- en: getChainIdInfo, 416
  id: totrans-2683
  prefs: []
  type: TYPE_NORMAL
- en: Events
  id: totrans-2684
  prefs: []
  type: TYPE_NORMAL
- en: getChainIdStatus, 416
  id: totrans-2685
  prefs: []
  type: TYPE_NORMAL
- en: defining, 271, 272
  id: totrans-2686
  prefs: []
  type: TYPE_NORMAL
- en: revoked, 416
  id: totrans-2687
  prefs: []
  type: TYPE_NORMAL
- en: emitted, 272–274
  id: totrans-2688
  prefs: []
  type: TYPE_NORMAL
- en: smart contract, 416
  id: totrans-2689
  prefs: []
  type: TYPE_NORMAL
- en: inheritable member, 271
  id: totrans-2690
  prefs: []
  type: TYPE_NORMAL
- en: Function access scopes, 254
  id: totrans-2691
  prefs: []
  type: TYPE_NORMAL
- en: storing location, 271
  id: totrans-2692
  prefs: []
  type: TYPE_NORMAL
- en: Functional security holes, 321
  id: totrans-2693
  prefs: []
  type: TYPE_NORMAL
- en: Exchange of money, 7
  id: totrans-2694
  prefs: []
  type: TYPE_NORMAL
- en: Functional security holes, smart
  id: totrans-2695
  prefs: []
  type: TYPE_NORMAL
- en: Exchange rate, 8
  id: totrans-2696
  prefs: []
  type: TYPE_NORMAL
- en: contracts
  id: totrans-2697
  prefs: []
  type: TYPE_NORMAL
- en: Exchange transactions, 9, 16
  id: totrans-2698
  prefs: []
  type: TYPE_NORMAL
- en: disabled smart contract, 323
  id: totrans-2699
  prefs: []
  type: TYPE_NORMAL
- en: Externally owned accounts, 190
  id: totrans-2700
  prefs: []
  type: TYPE_NORMAL
- en: fund deadlock, 321
  id: totrans-2701
  prefs: []
  type: TYPE_NORMAL
- en: fund leakage, 322
  id: totrans-2702
  prefs: []
  type: TYPE_NORMAL
- en: '**F**'
  id: totrans-2703
  prefs: []
  type: TYPE_NORMAL
- en: Orphan smart contract, 323
  id: totrans-2704
  prefs: []
  type: TYPE_NORMAL
- en: Function call value is not
  id: totrans-2705
  prefs: []
  type: TYPE_NORMAL
- en: Fault tolerance, 59, 72
  id: totrans-2706
  prefs: []
  type: TYPE_NORMAL
- en: checked, 276
  id: totrans-2707
  prefs: []
  type: TYPE_NORMAL
- en: Fault-tolerant distributed system, 60
  id: totrans-2708
  prefs: []
  type: TYPE_NORMAL
- en: Function modifier, 252
  id: totrans-2709
  prefs: []
  type: TYPE_NORMAL
- en: Filecoin project, 394
  id: totrans-2710
  prefs: []
  type: TYPE_NORMAL
- en: Function-specific variables, 281
  id: totrans-2711
  prefs: []
  type: TYPE_NORMAL
- en: '443'
  id: totrans-2712
  prefs: []
  type: TYPE_NORMAL
- en: INDEX
  id: totrans-2713
  prefs: []
  type: TYPE_NORMAL
- en: Function visibility error, 274, 275
  id: totrans-2714
  prefs: []
  type: TYPE_NORMAL
- en: provider credentialing, 150
  id: totrans-2715
  prefs: []
  type: TYPE_NORMAL
- en: Fungible tokens, 127
  id: totrans-2716
  prefs: []
  type: TYPE_NORMAL
- en: service cost, 145
  id: totrans-2717
  prefs: []
  type: TYPE_NORMAL
- en: stakeholders, 147
  id: totrans-2718
  prefs: []
  type: TYPE_NORMAL
- en: '**G**'
  id: totrans-2719
  prefs: []
  type: TYPE_NORMAL
- en: third-party
  id: totrans-2720
  prefs: []
  type: TYPE_NORMAL
- en: administrators, 145–147
  id: totrans-2721
  prefs: []
  type: TYPE_NORMAL
- en: Ganache tool, 228
  id: totrans-2722
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger, 97
  id: totrans-2723
  prefs: []
  type: TYPE_NORMAL
- en: Gas cost, 402
  id: totrans-2724
  prefs: []
  type: TYPE_NORMAL
- en: blockchain
  id: totrans-2725
  prefs: []
  type: TYPE_NORMAL
- en: Gas fee consideration
  id: totrans-2726
  prefs: []
  type: TYPE_NORMAL
- en: implementation, 193
  id: totrans-2727
  prefs: []
  type: TYPE_NORMAL
- en: ecosystems, 396
  id: totrans-2728
  prefs: []
  type: TYPE_NORMAL
- en: ecosystem, 195
  id: totrans-2729
  prefs: []
  type: TYPE_NORMAL
- en: gas consumption, 395
  id: totrans-2730
  prefs: []
  type: TYPE_NORMAL
- en: frameworks and tools, 193, 195
  id: totrans-2731
  prefs: []
  type: TYPE_NORMAL
- en: quantitative calculation, 403
  id: totrans-2732
  prefs: []
  type: TYPE_NORMAL
- en: governance model, 193, 196
  id: totrans-2733
  prefs: []
  type: TYPE_NORMAL
- en: Gas station, 397
  id: totrans-2734
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Fabric, 97
  id: totrans-2735
  prefs: []
  type: TYPE_NORMAL
- en: Geth, 231–234
  id: totrans-2736
  prefs: []
  type: TYPE_NORMAL
- en: Geth client, 372
  id: totrans-2737
  prefs: []
  type: TYPE_NORMAL
- en: getMessage function, 317
  id: totrans-2738
  prefs: []
  type: TYPE_NORMAL
- en: '**I**'
  id: totrans-2739
  prefs: []
  type: TYPE_NORMAL
- en: Gift cards, 38
  id: totrans-2740
  prefs: []
  type: TYPE_NORMAL
- en: Indirect costs, 31
  id: totrans-2741
  prefs: []
  type: TYPE_NORMAL
- en: GitHub location, 352
  id: totrans-2742
  prefs: []
  type: TYPE_NORMAL
- en: Information exchange, 5
  id: totrans-2743
  prefs: []
  type: TYPE_NORMAL
- en: GitHub storage, 241
  id: totrans-2744
  prefs: []
  type: TYPE_NORMAL
- en: Information technology (IT),
  id: totrans-2745
  prefs: []
  type: TYPE_NORMAL
- en: 3, 30, 147
  id: totrans-2746
  prefs: []
  type: TYPE_NORMAL
- en: '**H**'
  id: totrans-2747
  prefs: []
  type: TYPE_NORMAL
- en: Institute for Applied Network
  id: totrans-2748
  prefs: []
  type: TYPE_NORMAL
- en: Security (IANS), 30
  id: totrans-2749
  prefs: []
  type: TYPE_NORMAL
- en: Halting program operations, 401
  id: totrans-2750
  prefs: []
  type: TYPE_NORMAL
- en: Integer, 256–258
  id: totrans-2751
  prefs: []
  type: TYPE_NORMAL
- en: Hashed digital signatures, 54
  id: totrans-2752
  prefs: []
  type: TYPE_NORMAL
- en: Integrated development
  id: totrans-2753
  prefs: []
  type: TYPE_NORMAL
- en: Hashing algorithms, 51–53
  id: totrans-2754
  prefs: []
  type: TYPE_NORMAL
- en: environment (IDE), 240, 247
  id: totrans-2755
  prefs: []
  type: TYPE_NORMAL
- en: hashMerkleRoot field, 177
  id: totrans-2756
  prefs: []
  type: TYPE_NORMAL
- en: Interfaces, 296
  id: totrans-2757
  prefs: []
  type: TYPE_NORMAL
- en: Healthcare applications
  id: totrans-2758
  prefs: []
  type: TYPE_NORMAL
- en: Internal functions, 254
  id: totrans-2759
  prefs: []
  type: TYPE_NORMAL
- en: advocacy organizations, 147
  id: totrans-2760
  prefs: []
  type: TYPE_NORMAL
- en: Internet, 4
  id: totrans-2761
  prefs: []
  type: TYPE_NORMAL
- en: claims processing, 150
  id: totrans-2762
  prefs: []
  type: TYPE_NORMAL
- en: InterWork Alliance (IWA), 125, 390
  id: totrans-2763
  prefs: []
  type: TYPE_NORMAL
- en: clinical trials, 152
  id: totrans-2764
  prefs: []
  type: TYPE_NORMAL
- en: consumers interact with clinical
  id: totrans-2765
  prefs: []
  type: TYPE_NORMAL
- en: providers, 145
  id: totrans-2766
  prefs: []
  type: TYPE_NORMAL
- en: '**J**'
  id: totrans-2767
  prefs: []
  type: TYPE_NORMAL
- en: economic inefficiencies,
  id: totrans-2768
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript console, 232, 234
  id: totrans-2769
  prefs: []
  type: TYPE_NORMAL
- en: 148, 149
  id: totrans-2770
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript files, 427
  id: totrans-2771
  prefs: []
  type: TYPE_NORMAL
- en: healthcare supply chain, 151
  id: totrans-2772
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript scripts, 307
  id: totrans-2773
  prefs: []
  type: TYPE_NORMAL
- en: '444'
  id: totrans-2774
  prefs: []
  type: TYPE_NORMAL
- en: INDEX
  id: totrans-2775
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript VM, 242
  id: totrans-2776
  prefs: []
  type: TYPE_NORMAL
- en: leaf nodes, 351
  id: totrans-2777
  prefs: []
  type: TYPE_NORMAL
- en: JSON RPC, 217
  id: totrans-2778
  prefs: []
  type: TYPE_NORMAL
- en: MerkleDemo smart
  id: totrans-2779
  prefs: []
  type: TYPE_NORMAL
- en: contract, 353
  id: totrans-2780
  prefs: []
  type: TYPE_NORMAL
- en: '**K**'
  id: totrans-2781
  prefs: []
  type: TYPE_NORMAL
- en: Plasma Cash, 360–363
  id: totrans-2782
  prefs: []
  type: TYPE_NORMAL
- en: plasma MVP, 357–359
  id: totrans-2783
  prefs: []
  type: TYPE_NORMAL
- en: Know Your Customers (KYC), 227
  id: totrans-2784
  prefs: []
  type: TYPE_NORMAL
- en: source code, 352
  id: totrans-2785
  prefs: []
  type: TYPE_NORMAL
- en: testcasedemo function, 355, 357
  id: totrans-2786
  prefs: []
  type: TYPE_NORMAL
- en: '**L**'
  id: totrans-2787
  prefs: []
  type: TYPE_NORMAL
- en: MetaMask wallet, 193, 216, 217,
  id: totrans-2788
  prefs: []
  type: TYPE_NORMAL
- en: 219, 220, 229–231, 233, 242,
  id: totrans-2789
  prefs: []
  type: TYPE_NORMAL
- en: Layer 2
  id: totrans-2790
  prefs: []
  type: TYPE_NORMAL
- en: 243, 307, 316, 346, 425, 433
  id: totrans-2791
  prefs: []
  type: TYPE_NORMAL
- en: mechanisms, 343
  id: totrans-2792
  prefs: []
  type: TYPE_NORMAL
- en: Migration from Ethereum 1 to
  id: totrans-2793
  prefs: []
  type: TYPE_NORMAL
- en: performance and scalability, 343
  id: totrans-2794
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum 2, 374–376
  id: totrans-2795
  prefs: []
  type: TYPE_NORMAL
- en: plasma ( *see* Plasma)
  id: totrans-2796
  prefs: []
  type: TYPE_NORMAL
- en: Miner credentials, 374
  id: totrans-2797
  prefs: []
  type: TYPE_NORMAL
- en: rollup, 363–370
  id: totrans-2798
  prefs: []
  type: TYPE_NORMAL
- en: Miner node, 178
  id: totrans-2799
  prefs: []
  type: TYPE_NORMAL
- en: SC, 343–347
  id: totrans-2800
  prefs: []
  type: TYPE_NORMAL
- en: Miner software component
  id: totrans-2801
  prefs: []
  type: TYPE_NORMAL
- en: smart contracts, 343
  id: totrans-2802
  prefs: []
  type: TYPE_NORMAL
- en: interfaces, 169
  id: totrans-2803
  prefs: []
  type: TYPE_NORMAL
- en: Library, 296
  id: totrans-2804
  prefs: []
  type: TYPE_NORMAL
- en: Mintability, 392
  id: totrans-2805
  prefs: []
  type: TYPE_NORMAL
- en: Logical operators, 255
  id: totrans-2806
  prefs: []
  type: TYPE_NORMAL
- en: Mint event, 272
  id: totrans-2807
  prefs: []
  type: TYPE_NORMAL
- en: Mobile client, 307
  id: totrans-2808
  prefs: []
  type: TYPE_NORMAL
- en: '**M**'
  id: totrans-2809
  prefs: []
  type: TYPE_NORMAL
- en: Money
  id: totrans-2810
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin, 13
  id: totrans-2811
  prefs: []
  type: TYPE_NORMAL
- en: Mallory contract, 280
  id: totrans-2812
  prefs: []
  type: TYPE_NORMAL
- en: challenges/drawbacks, 10
  id: totrans-2813
  prefs: []
  type: TYPE_NORMAL
- en: Mapping data structures, 415
  id: totrans-2814
  prefs: []
  type: TYPE_NORMAL
- en: commodities, 11
  id: totrans-2815
  prefs: []
  type: TYPE_NORMAL
- en: Mapping data type, 263, 264
  id: totrans-2816
  prefs: []
  type: TYPE_NORMAL
- en: contract, 7
  id: totrans-2817
  prefs: []
  type: TYPE_NORMAL
- en: Membership rewards, 37
  id: totrans-2818
  prefs: []
  type: TYPE_NORMAL
- en: definition, 12
  id: totrans-2819
  prefs: []
  type: TYPE_NORMAL
- en: Memory operations, 402
  id: totrans-2820
  prefs: []
  type: TYPE_NORMAL
- en: exchange transactions, 8, 9
  id: totrans-2821
  prefs: []
  type: TYPE_NORMAL
- en: Merkle tree
  id: totrans-2822
  prefs: []
  type: TYPE_NORMAL
- en: medium of exchange, 12
  id: totrans-2823
  prefs: []
  type: TYPE_NORMAL
- en: binary tree structure, 351
  id: totrans-2824
  prefs: []
  type: TYPE_NORMAL
- en: properties, 11, 12
  id: totrans-2825
  prefs: []
  type: TYPE_NORMAL
- en: checkMerkleTree function, 353,
  id: totrans-2826
  prefs: []
  type: TYPE_NORMAL
- en: transactions, 7, 8
  id: totrans-2827
  prefs: []
  type: TYPE_NORMAL
- en: 355, 357
  id: totrans-2828
  prefs: []
  type: TYPE_NORMAL
- en: universally acceptable medium
  id: totrans-2829
  prefs: []
  type: TYPE_NORMAL
- en: code snippet, 352
  id: totrans-2830
  prefs: []
  type: TYPE_NORMAL
- en: of exchange, 9
  id: totrans-2831
  prefs: []
  type: TYPE_NORMAL
- en: data integrity and processing
  id: totrans-2832
  prefs: []
  type: TYPE_NORMAL
- en: msg variable, 269
  id: totrans-2833
  prefs: []
  type: TYPE_NORMAL
- en: efficiency, 351
  id: totrans-2834
  prefs: []
  type: TYPE_NORMAL
- en: MyEtherWallet (MEW), 220, 221
  id: totrans-2835
  prefs: []
  type: TYPE_NORMAL
- en: example, 351–357
  id: totrans-2836
  prefs: []
  type: TYPE_NORMAL
- en: MythX security verification, 289
  id: totrans-2837
  prefs: []
  type: TYPE_NORMAL
- en: '445'
  id: totrans-2838
  prefs: []
  type: TYPE_NORMAL
- en: INDEX
  id: totrans-2839
  prefs: []
  type: TYPE_NORMAL
- en: '**N**'
  id: totrans-2840
  prefs: []
  type: TYPE_NORMAL
- en: Plasma
  id: totrans-2841
  prefs: []
  type: TYPE_NORMAL
- en: operators, 349, 350
  id: totrans-2842
  prefs: []
  type: TYPE_NORMAL
- en: NFT applications, 224, 225
  id: totrans-2843
  prefs: []
  type: TYPE_NORMAL
- en: plasma chains, 350
  id: totrans-2844
  prefs: []
  type: TYPE_NORMAL
- en: NFT marketplace, 386
  id: totrans-2845
  prefs: []
  type: TYPE_NORMAL
- en: smart contracts, 348, 349
  id: totrans-2846
  prefs: []
  type: TYPE_NORMAL
- en: NodeKey, 212
  id: totrans-2847
  prefs: []
  type: TYPE_NORMAL
- en: transaction Merkle tree ( *see*
  id: totrans-2848
  prefs: []
  type: TYPE_NORMAL
- en: Nonfungible tokens (NFTs), 127,
  id: totrans-2849
  prefs: []
  type: TYPE_NORMAL
- en: Merkle tree)
  id: totrans-2850
  prefs: []
  type: TYPE_NORMAL
- en: 319, 360, 383, 392
  id: totrans-2851
  prefs: []
  type: TYPE_NORMAL
- en: transactions/smart
  id: totrans-2852
  prefs: []
  type: TYPE_NORMAL
- en: Nonnative tokens, 126
  id: totrans-2853
  prefs: []
  type: TYPE_NORMAL
- en: contracts, 350
  id: totrans-2854
  prefs: []
  type: TYPE_NORMAL
- en: Plasma blockchain, 349
  id: totrans-2855
  prefs: []
  type: TYPE_NORMAL
- en: '**O**'
  id: totrans-2856
  prefs: []
  type: TYPE_NORMAL
- en: Plasma Cash, 357, 360–363
  id: totrans-2857
  prefs: []
  type: TYPE_NORMAL
- en: One-way functions, 52
  id: totrans-2858
  prefs: []
  type: TYPE_NORMAL
- en: Plasma chains, 350
  id: totrans-2859
  prefs: []
  type: TYPE_NORMAL
- en: OpenSea, 225
  id: totrans-2860
  prefs: []
  type: TYPE_NORMAL
- en: Plasma MVP, 357–359, 362
  id: totrans-2861
  prefs: []
  type: TYPE_NORMAL
- en: Open Systems Interconnection
  id: totrans-2862
  prefs: []
  type: TYPE_NORMAL
- en: Polkadot, 199
  id: totrans-2863
  prefs: []
  type: TYPE_NORMAL
- en: (OSI), 211
  id: totrans-2864
  prefs: []
  type: TYPE_NORMAL
- en: Privacy, 82, 107
  id: totrans-2865
  prefs: []
  type: TYPE_NORMAL
- en: OpenZeppelin package, 382
  id: totrans-2866
  prefs: []
  type: TYPE_NORMAL
- en: Privacy preservation, 164
  id: totrans-2867
  prefs: []
  type: TYPE_NORMAL
- en: Optimistic layer 2, 364, 365
  id: totrans-2868
  prefs: []
  type: TYPE_NORMAL
- en: Privacy-preserving distributed
  id: totrans-2869
  prefs: []
  type: TYPE_NORMAL
- en: Optimistic Virtual Machine
  id: totrans-2870
  prefs: []
  type: TYPE_NORMAL
- en: ledgers, 90, 94
  id: totrans-2871
  prefs: []
  type: TYPE_NORMAL
- en: (OVM), 364
  id: totrans-2872
  prefs: []
  type: TYPE_NORMAL
- en: Privacy trade-offs, 29
  id: totrans-2873
  prefs: []
  type: TYPE_NORMAL
- en: Oracle service, 225, 226
  id: totrans-2874
  prefs: []
  type: TYPE_NORMAL
- en: Private keys, 73
  id: totrans-2875
  prefs: []
  type: TYPE_NORMAL
- en: Ouroboros, 199
  id: totrans-2876
  prefs: []
  type: TYPE_NORMAL
- en: Private permissioned
  id: totrans-2877
  prefs: []
  type: TYPE_NORMAL
- en: Outdated compilers, 285, 286
  id: totrans-2878
  prefs: []
  type: TYPE_NORMAL
- en: blockchain, 95, 97
  id: totrans-2879
  prefs: []
  type: TYPE_NORMAL
- en: Out-of-bound index, 284
  id: totrans-2880
  prefs: []
  type: TYPE_NORMAL
- en: Private permissionless, 95
  id: totrans-2881
  prefs: []
  type: TYPE_NORMAL
- en: Out-of-bound write, 284
  id: totrans-2882
  prefs: []
  type: TYPE_NORMAL
- en: Proof of authority (POA), 186, 213,
  id: totrans-2883
  prefs: []
  type: TYPE_NORMAL
- en: 343, 346, 350, 432
  id: totrans-2884
  prefs: []
  type: TYPE_NORMAL
- en: Proof-of-stake (POS), 185, 350, 371,
  id: totrans-2885
  prefs: []
  type: TYPE_NORMAL
- en: '**P**'
  id: totrans-2886
  prefs: []
  type: TYPE_NORMAL
- en: 372, 374–377
  id: totrans-2887
  prefs: []
  type: TYPE_NORMAL
- en: P2P network layer
  id: totrans-2888
  prefs: []
  type: TYPE_NORMAL
- en: Proof-of-work (POW), 178, 338,
  id: totrans-2889
  prefs: []
  type: TYPE_NORMAL
- en: communication, 337
  id: totrans-2890
  prefs: []
  type: TYPE_NORMAL
- en: 371, 377
  id: totrans-2891
  prefs: []
  type: TYPE_NORMAL
- en: Payable functions, 253
  id: totrans-2892
  prefs: []
  type: TYPE_NORMAL
- en: Public blockchains, 96, 342
  id: totrans-2893
  prefs: []
  type: TYPE_NORMAL
- en: Peer-to-peer networks, 32,
  id: totrans-2894
  prefs: []
  type: TYPE_NORMAL
- en: Public key, 48
  id: totrans-2895
  prefs: []
  type: TYPE_NORMAL
- en: 44, 67–71
  id: totrans-2896
  prefs: []
  type: TYPE_NORMAL
- en: Public permissioned
  id: totrans-2897
  prefs: []
  type: TYPE_NORMAL
- en: Permissioned blockchains, 96
  id: totrans-2898
  prefs: []
  type: TYPE_NORMAL
- en: blockchain, 95, 121
  id: totrans-2899
  prefs: []
  type: TYPE_NORMAL
- en: Permissionless
  id: totrans-2900
  prefs: []
  type: TYPE_NORMAL
- en: Public permissionless blockchain,
  id: totrans-2901
  prefs: []
  type: TYPE_NORMAL
- en: blockchains, 97
  id: totrans-2902
  prefs: []
  type: TYPE_NORMAL
- en: 95, 97, 99
  id: totrans-2903
  prefs: []
  type: TYPE_NORMAL
- en: '446'
  id: totrans-2904
  prefs: []
  type: TYPE_NORMAL
- en: INDEX
  id: totrans-2905
  prefs: []
  type: TYPE_NORMAL
- en: '**Q**'
  id: totrans-2906
  prefs: []
  type: TYPE_NORMAL
- en: '**S**'
  id: totrans-2907
  prefs: []
  type: TYPE_NORMAL
- en: Quadratic Arithmetic Program
  id: totrans-2908
  prefs: []
  type: TYPE_NORMAL
- en: S&H green stamps, 37
  id: totrans-2909
  prefs: []
  type: TYPE_NORMAL
- en: (QAP), 368
  id: totrans-2910
  prefs: []
  type: TYPE_NORMAL
- en: SC wallet, 345
  id: totrans-2911
  prefs: []
  type: TYPE_NORMAL
- en: Quantitative analysis, 398
  id: totrans-2912
  prefs: []
  type: TYPE_NORMAL
- en: Securities and Exchange
  id: totrans-2913
  prefs: []
  type: TYPE_NORMAL
- en: Quantum
  id: totrans-2914
  prefs: []
  type: TYPE_NORMAL
- en: Commission (SEC), 127
  id: totrans-2915
  prefs: []
  type: TYPE_NORMAL
- en: computing, 336–338
  id: totrans-2916
  prefs: []
  type: TYPE_NORMAL
- en: Security
  id: totrans-2917
  prefs: []
  type: TYPE_NORMAL
- en: Quorum, 142
  id: totrans-2918
  prefs: []
  type: TYPE_NORMAL
- en: attackable security holes in
  id: totrans-2919
  prefs: []
  type: TYPE_NORMAL
- en: smart contracts, 323–325
  id: totrans-2920
  prefs: []
  type: TYPE_NORMAL
- en: '**R**'
  id: totrans-2921
  prefs: []
  type: TYPE_NORMAL
- en: best practices for smart
  id: totrans-2922
  prefs: []
  type: TYPE_NORMAL
- en: contracts ( *see* Security
  id: totrans-2923
  prefs: []
  type: TYPE_NORMAL
- en: Race conditions, 278
  id: totrans-2924
  prefs: []
  type: TYPE_NORMAL
- en: practices, smart contracts)
  id: totrans-2925
  prefs: []
  type: TYPE_NORMAL
- en: Random Number Generator
  id: totrans-2926
  prefs: []
  type: TYPE_NORMAL
- en: compiler vulnerabilities,
  id: totrans-2927
  prefs: []
  type: TYPE_NORMAL
- en: (RNG), 286, 331
  id: totrans-2928
  prefs: []
  type: TYPE_NORMAL
- en: 285, 286
  id: totrans-2929
  prefs: []
  type: TYPE_NORMAL
- en: Rank-1 constraint systems (R1CS)
  id: totrans-2930
  prefs: []
  type: TYPE_NORMAL
- en: data type and data
  id: totrans-2931
  prefs: []
  type: TYPE_NORMAL
- en: format, 368
  id: totrans-2932
  prefs: []
  type: TYPE_NORMAL
- en: vulnerabilities
  id: totrans-2933
  prefs: []
  type: TYPE_NORMAL
- en: RCP protocols, 373
  id: totrans-2934
  prefs: []
  type: TYPE_NORMAL
- en: arbitrary storage locations,
  id: totrans-2935
  prefs: []
  type: TYPE_NORMAL
- en: Reduce functions, 52
  id: totrans-2936
  prefs: []
  type: TYPE_NORMAL
- en: 284, 285
  id: totrans-2937
  prefs: []
  type: TYPE_NORMAL
- en: Relational database management
  id: totrans-2938
  prefs: []
  type: TYPE_NORMAL
- en: authorization through tx.
  id: totrans-2939
  prefs: []
  type: TYPE_NORMAL
- en: systems, 4
  id: totrans-2940
  prefs: []
  type: TYPE_NORMAL
- en: origin, 282, 283
  id: totrans-2941
  prefs: []
  type: TYPE_NORMAL
- en: Remix, 238–243, 247, 292
  id: totrans-2942
  prefs: []
  type: TYPE_NORMAL
- en: block values, 283
  id: totrans-2943
  prefs: []
  type: TYPE_NORMAL
- en: Remix debugger, 302
  id: totrans-2944
  prefs: []
  type: TYPE_NORMAL
- en: shadowing state variables,
  id: totrans-2945
  prefs: []
  type: TYPE_NORMAL
- en: Remix development
  id: totrans-2946
  prefs: []
  type: TYPE_NORMAL
- en: 281, 282
  id: totrans-2947
  prefs: []
  type: TYPE_NORMAL
- en: tools, 309
  id: totrans-2948
  prefs: []
  type: TYPE_NORMAL
- en: unused variables, 285
  id: totrans-2949
  prefs: []
  type: TYPE_NORMAL
- en: Remix plug-in, 301
  id: totrans-2950
  prefs: []
  type: TYPE_NORMAL
- en: variable value overflow/
  id: totrans-2951
  prefs: []
  type: TYPE_NORMAL
- en: Remote procedure calls
  id: totrans-2952
  prefs: []
  type: TYPE_NORMAL
- en: underflow, 280, 281
  id: totrans-2953
  prefs: []
  type: TYPE_NORMAL
- en: (RPCs), 193
  id: totrans-2954
  prefs: []
  type: TYPE_NORMAL
- en: function vulnerabilities
  id: totrans-2955
  prefs: []
  type: TYPE_NORMAL
- en: RETURN opcode, 401
  id: totrans-2956
  prefs: []
  type: TYPE_NORMAL
- en: assert violation, 279
  id: totrans-2957
  prefs: []
  type: TYPE_NORMAL
- en: Ripple Labs, 142
  id: totrans-2958
  prefs: []
  type: TYPE_NORMAL
- en: cross-chain contract, 279
  id: totrans-2959
  prefs: []
  type: TYPE_NORMAL
- en: Rollup, 363
  id: totrans-2960
  prefs: []
  type: TYPE_NORMAL
- en: delegatecall function, 277
  id: totrans-2961
  prefs: []
  type: TYPE_NORMAL
- en: optimistic layer 2, 364, 365
  id: totrans-2962
  prefs: []
  type: TYPE_NORMAL
- en: DOS with failed function
  id: totrans-2963
  prefs: []
  type: TYPE_NORMAL
- en: zk-SNARK, 365
  id: totrans-2964
  prefs: []
  type: TYPE_NORMAL
- en: calls, 278
  id: totrans-2965
  prefs: []
  type: TYPE_NORMAL
- en: Root blockchain, 348
  id: totrans-2966
  prefs: []
  type: TYPE_NORMAL
- en: ether withdraw operation
  id: totrans-2967
  prefs: []
  type: TYPE_NORMAL
- en: RPC endpoint, 313
  id: totrans-2968
  prefs: []
  type: TYPE_NORMAL
- en: not protected, 276
  id: totrans-2969
  prefs: []
  type: TYPE_NORMAL
- en: '447'
  id: totrans-2970
  prefs: []
  type: TYPE_NORMAL
- en: INDEX
  id: totrans-2971
  prefs: []
  type: TYPE_NORMAL
- en: Security ( *cont.* )
  id: totrans-2972
  prefs: []
  type: TYPE_NORMAL
- en: Self-confined function, 253
  id: totrans-2973
  prefs: []
  type: TYPE_NORMAL
- en: function call value is not
  id: totrans-2974
  prefs: []
  type: TYPE_NORMAL
- en: Self-destruction functions, 276
  id: totrans-2975
  prefs: []
  type: TYPE_NORMAL
- en: checked, 276
  id: totrans-2976
  prefs: []
  type: TYPE_NORMAL
- en: setMessage function, 317
  id: totrans-2977
  prefs: []
  type: TYPE_NORMAL
- en: race conditions and
  id: totrans-2978
  prefs: []
  type: TYPE_NORMAL
- en: sha256/keccak256, 351, 362
  id: totrans-2979
  prefs: []
  type: TYPE_NORMAL
- en: transaction order
  id: totrans-2980
  prefs: []
  type: TYPE_NORMAL
- en: sha256 Solidity function, 353
  id: totrans-2981
  prefs: []
  type: TYPE_NORMAL
- en: dependence, 278, 279
  id: totrans-2982
  prefs: []
  type: TYPE_NORMAL
- en: Sharding nodes, 371, 373
  id: totrans-2983
  prefs: []
  type: TYPE_NORMAL
- en: self-destruction functions, 276
  id: totrans-2984
  prefs: []
  type: TYPE_NORMAL
- en: Signature manipulation, 286, 287
  id: totrans-2985
  prefs: []
  type: TYPE_NORMAL
- en: solidity deprecated
  id: totrans-2986
  prefs: []
  type: TYPE_NORMAL
- en: Small smart contract, 227
  id: totrans-2987
  prefs: []
  type: TYPE_NORMAL
- en: functions, 277
  id: totrans-2988
  prefs: []
  type: TYPE_NORMAL
- en: Smart contract, 382, 414, 415, 423,
  id: totrans-2989
  prefs: []
  type: TYPE_NORMAL
- en: visibility error, 274, 275
  id: totrans-2990
  prefs: []
  type: TYPE_NORMAL
- en: 431, 434
  id: totrans-2991
  prefs: []
  type: TYPE_NORMAL
- en: signature vulnerabilities, 286, 287
  id: totrans-2992
  prefs: []
  type: TYPE_NORMAL
- en: blockchain, 247
  id: totrans-2993
  prefs: []
  type: TYPE_NORMAL
- en: software development, 319
  id: totrans-2994
  prefs: []
  type: TYPE_NORMAL
- en: for business person, 246
  id: totrans-2995
  prefs: []
  type: TYPE_NORMAL
- en: Security audit, 329
  id: totrans-2996
  prefs: []
  type: TYPE_NORMAL
- en: bytecodes, 246
  id: totrans-2997
  prefs: []
  type: TYPE_NORMAL
- en: Security practices, smart contracts
  id: totrans-2998
  prefs: []
  type: TYPE_NORMAL
- en: code and explanation, 418
  id: totrans-2999
  prefs: []
  type: TYPE_NORMAL
- en: blockchain specific security
  id: totrans-3000
  prefs: []
  type: TYPE_NORMAL
- en: compilation, 246
  id: totrans-3001
  prefs: []
  type: TYPE_NORMAL
- en: tips, 334–336
  id: totrans-3002
  prefs: []
  type: TYPE_NORMAL
- en: components, 424
  id: totrans-3003
  prefs: []
  type: TYPE_NORMAL
- en: mitigation plans, 326, 327
  id: totrans-3004
  prefs: []
  type: TYPE_NORMAL
- en: crosschain id, 416
  id: totrans-3005
  prefs: []
  type: TYPE_NORMAL
- en: quantum computing, security
  id: totrans-3006
  prefs: []
  type: TYPE_NORMAL
- en: definition, 245
  id: totrans-3007
  prefs: []
  type: TYPE_NORMAL
- en: impact, 336–338
  id: totrans-3008
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum, 246
  id: totrans-3009
  prefs: []
  type: TYPE_NORMAL
- en: readable smart contract
  id: totrans-3010
  prefs: []
  type: TYPE_NORMAL
- en: function calling, 246
  id: totrans-3011
  prefs: []
  type: TYPE_NORMAL
- en: logic, 330
  id: totrans-3012
  prefs: []
  type: TYPE_NORMAL
- en: Solidity ( *see* Solidity
  id: totrans-3013
  prefs: []
  type: TYPE_NORMAL
- en: review gas consumption, 332, 333
  id: totrans-3014
  prefs: []
  type: TYPE_NORMAL
- en: programming language)
  id: totrans-3015
  prefs: []
  type: TYPE_NORMAL
- en: RNG, 331
  id: totrans-3016
  prefs: []
  type: TYPE_NORMAL
- en: for technical person, 246
  id: totrans-3017
  prefs: []
  type: TYPE_NORMAL
- en: security breaches and patches,
  id: totrans-3018
  prefs: []
  type: TYPE_NORMAL
- en: technical point of view, 246
  id: totrans-3019
  prefs: []
  type: TYPE_NORMAL
- en: 333, 334
  id: totrans-3020
  prefs: []
  type: TYPE_NORMAL
- en: and web GUI, 431
  id: totrans-3021
  prefs: []
  type: TYPE_NORMAL
- en: set a maximum amount of asset
  id: totrans-3022
  prefs: []
  type: TYPE_NORMAL
- en: Smart contract bytecodes, 236
  id: totrans-3023
  prefs: []
  type: TYPE_NORMAL
- en: values, 327, 328
  id: totrans-3024
  prefs: []
  type: TYPE_NORMAL
- en: Smart contract development tools
  id: totrans-3025
  prefs: []
  type: TYPE_NORMAL
- en: smart contract open source, 328
  id: totrans-3026
  prefs: []
  type: TYPE_NORMAL
- en: Mythx, 288, 289
  id: totrans-3027
  prefs: []
  type: TYPE_NORMAL
- en: smart contracts auditing,
  id: totrans-3028
  prefs: []
  type: TYPE_NORMAL
- en: solidity debug
  id: totrans-3029
  prefs: []
  type: TYPE_NORMAL
- en: 329, 330
  id: totrans-3030
  prefs: []
  type: TYPE_NORMAL
- en: debugging smart
  id: totrans-3031
  prefs: []
  type: TYPE_NORMAL
- en: source code and libraries, 327
  id: totrans-3032
  prefs: []
  type: TYPE_NORMAL
- en: contract, 303–305
  id: totrans-3033
  prefs: []
  type: TYPE_NORMAL
- en: well-tested libraries, 331
  id: totrans-3034
  prefs: []
  type: TYPE_NORMAL
- en: enabling debugger, 302
  id: totrans-3035
  prefs: []
  type: TYPE_NORMAL
- en: whitehat, 329
  id: totrans-3036
  prefs: []
  type: TYPE_NORMAL
- en: launching debugger, 302
  id: totrans-3037
  prefs: []
  type: TYPE_NORMAL
- en: Security vulnerability, 334
  id: totrans-3038
  prefs: []
  type: TYPE_NORMAL
- en: source code, 301
  id: totrans-3039
  prefs: []
  type: TYPE_NORMAL
- en: '448'
  id: totrans-3040
  prefs: []
  type: TYPE_NORMAL
- en: INDEX
  id: totrans-3041
  prefs: []
  type: TYPE_NORMAL
- en: solidity test, Remix Plug-in,
  id: totrans-3042
  prefs: []
  type: TYPE_NORMAL
- en: fixed size array, 261, 262
  id: totrans-3043
  prefs: []
  type: TYPE_NORMAL
- en: 296–298, 300, 301
  id: totrans-3044
  prefs: []
  type: TYPE_NORMAL
- en: integer, 256–258
  id: totrans-3045
  prefs: []
  type: TYPE_NORMAL
- en: solidity to UML
  id: totrans-3046
  prefs: []
  type: TYPE_NORMAL
- en: Mapping type, 263, 264
  id: totrans-3047
  prefs: []
  type: TYPE_NORMAL
- en: dApp project, 292
  id: totrans-3048
  prefs: []
  type: TYPE_NORMAL
- en: smart contract functions, 255
  id: totrans-3049
  prefs: []
  type: TYPE_NORMAL
- en: Remix, 292, 293
  id: totrans-3050
  prefs: []
  type: TYPE_NORMAL
- en: Struct, 266–268
  id: totrans-3051
  prefs: []
  type: TYPE_NORMAL
- en: stand-alone tools, 293–296
  id: totrans-3052
  prefs: []
  type: TYPE_NORMAL
- en: supports and non-
  id: totrans-3053
  prefs: []
  type: TYPE_NORMAL
- en: SSA, 290, 292
  id: totrans-3054
  prefs: []
  type: TYPE_NORMAL
- en: supported, 255
  id: totrans-3055
  prefs: []
  type: TYPE_NORMAL
- en: Smart contract–enabled banking
  id: totrans-3056
  prefs: []
  type: TYPE_NORMAL
- en: Solidity deprecated functions, 277
  id: totrans-3057
  prefs: []
  type: TYPE_NORMAL
- en: dApp, 222, 223
  id: totrans-3058
  prefs: []
  type: TYPE_NORMAL
- en: Solidity programming language
  id: totrans-3059
  prefs: []
  type: TYPE_NORMAL
- en: Smart contract languages, 218
  id: totrans-3060
  prefs: []
  type: TYPE_NORMAL
- en: bytecode, 247
  id: totrans-3061
  prefs: []
  type: TYPE_NORMAL
- en: Smart contracts, 82, 99–101, 105,
  id: totrans-3062
  prefs: []
  type: TYPE_NORMAL
- en: comments, 249
  id: totrans-3063
  prefs: []
  type: TYPE_NORMAL
- en: 164, 435
  id: totrans-3064
  prefs: []
  type: TYPE_NORMAL
- en: constructor function, 252
  id: totrans-3065
  prefs: []
  type: TYPE_NORMAL
- en: attackable security
  id: totrans-3066
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum smart contracts, 247
  id: totrans-3067
  prefs: []
  type: TYPE_NORMAL
- en: holes, 323–325
  id: totrans-3068
  prefs: []
  type: TYPE_NORMAL
- en: event, 271–274
  id: totrans-3069
  prefs: []
  type: TYPE_NORMAL
- en: auditing, 329, 330
  id: totrans-3070
  prefs: []
  type: TYPE_NORMAL
- en: function access scope, 254
  id: totrans-3071
  prefs: []
  type: TYPE_NORMAL
- en: security practices ( *see* Security
  id: totrans-3072
  prefs: []
  type: TYPE_NORMAL
- en: function modifier, 252, 253
  id: totrans-3073
  prefs: []
  type: TYPE_NORMAL
- en: practices, smart contracts)
  id: totrans-3074
  prefs: []
  type: TYPE_NORMAL
- en: Hello World example, 248
  id: totrans-3075
  prefs: []
  type: TYPE_NORMAL
- en: and writing code, 325
  id: totrans-3076
  prefs: []
  type: TYPE_NORMAL
- en: importing file, 251, 252
  id: totrans-3077
  prefs: []
  type: TYPE_NORMAL
- en: Smart wallet, 343
  id: totrans-3078
  prefs: []
  type: TYPE_NORMAL
- en: multiple scopes, 253, 254
  id: totrans-3079
  prefs: []
  type: TYPE_NORMAL
- en: Software application, 217
  id: totrans-3080
  prefs: []
  type: TYPE_NORMAL
- en: security ( *see* Security)
  id: totrans-3081
  prefs: []
  type: TYPE_NORMAL
- en: Software as a Service (SaaS), 5
  id: totrans-3082
  prefs: []
  type: TYPE_NORMAL
- en: source code, 247
  id: totrans-3083
  prefs: []
  type: TYPE_NORMAL
- en: sol2uml package, 293
  id: totrans-3084
  prefs: []
  type: TYPE_NORMAL
- en: Solidity smart contract
  id: totrans-3085
  prefs: []
  type: TYPE_NORMAL
- en: Solano, 199
  id: totrans-3086
  prefs: []
  type: TYPE_NORMAL
- en: programming, 319, 322
  id: totrans-3087
  prefs: []
  type: TYPE_NORMAL
- en: Solidity, 330
  id: totrans-3088
  prefs: []
  type: TYPE_NORMAL
- en: Solidity Static Analysis (SSA),
  id: totrans-3089
  prefs: []
  type: TYPE_NORMAL
- en: Solidity data types
  id: totrans-3090
  prefs: []
  type: TYPE_NORMAL
- en: 290, 292
  id: totrans-3091
  prefs: []
  type: TYPE_NORMAL
- en: address type, 258, 259
  id: totrans-3092
  prefs: []
  type: TYPE_NORMAL
- en: Solidity Unit Test plug-in, 296–301
  id: totrans-3093
  prefs: []
  type: TYPE_NORMAL
- en: blockchain specific
  id: totrans-3094
  prefs: []
  type: TYPE_NORMAL
- en: Sparse Merkle trees, 362, 376
  id: totrans-3095
  prefs: []
  type: TYPE_NORMAL
- en: variables, 268–270
  id: totrans-3096
  prefs: []
  type: TYPE_NORMAL
- en: Special global variables, 283
  id: totrans-3097
  prefs: []
  type: TYPE_NORMAL
- en: boolean, 255, 256
  id: totrans-3098
  prefs: []
  type: TYPE_NORMAL
- en: Stablecoins, 227, 387
  id: totrans-3099
  prefs: []
  type: TYPE_NORMAL
- en: byte array, 259, 260
  id: totrans-3100
  prefs: []
  type: TYPE_NORMAL
- en: Stable RPC node, 434
  id: totrans-3101
  prefs: []
  type: TYPE_NORMAL
- en: code security and execution
  id: totrans-3102
  prefs: []
  type: TYPE_NORMAL
- en: Stack-based programing
  id: totrans-3103
  prefs: []
  type: TYPE_NORMAL
- en: efficiency, 255
  id: totrans-3104
  prefs: []
  type: TYPE_NORMAL
- en: language, 201
  id: totrans-3105
  prefs: []
  type: TYPE_NORMAL
- en: Dynamically size array, 262, 263
  id: totrans-3106
  prefs: []
  type: TYPE_NORMAL
- en: Stakeholder organizational
  id: totrans-3107
  prefs: []
  type: TYPE_NORMAL
- en: Enum, 264, 265
  id: totrans-3108
  prefs: []
  type: TYPE_NORMAL
- en: models, 133
  id: totrans-3109
  prefs: []
  type: TYPE_NORMAL
- en: '449'
  id: totrans-3110
  prefs: []
  type: TYPE_NORMAL
- en: INDEX
  id: totrans-3111
  prefs: []
  type: TYPE_NORMAL
- en: StartWithdraw function, 349
  id: totrans-3112
  prefs: []
  type: TYPE_NORMAL
- en: CCT, 389, 390
  id: totrans-3113
  prefs: []
  type: TYPE_NORMAL
- en: State channel (SC), L2, 343–347
  id: totrans-3114
  prefs: []
  type: TYPE_NORMAL
- en: cTokens, 386
  id: totrans-3115
  prefs: []
  type: TYPE_NORMAL
- en: State channels (SC), 363
  id: totrans-3116
  prefs: []
  type: TYPE_NORMAL
- en: DeFi projects, 386
  id: totrans-3117
  prefs: []
  type: TYPE_NORMAL
- en: State channels (SC), L2
  id: totrans-3118
  prefs: []
  type: TYPE_NORMAL
- en: distribution, 394
  id: totrans-3119
  prefs: []
  type: TYPE_NORMAL
- en: components, 344, 345
  id: totrans-3120
  prefs: []
  type: TYPE_NORMAL
- en: ERC20, 380, 383
  id: totrans-3121
  prefs: []
  type: TYPE_NORMAL
- en: offchain computing, 346
  id: totrans-3122
  prefs: []
  type: TYPE_NORMAL
- en: ERC20 and ERC721, 391
  id: totrans-3123
  prefs: []
  type: TYPE_NORMAL
- en: participants, 347
  id: totrans-3124
  prefs: []
  type: TYPE_NORMAL
- en: function, 380
  id: totrans-3125
  prefs: []
  type: TYPE_NORMAL
- en: topology and workflow, 344
  id: totrans-3126
  prefs: []
  type: TYPE_NORMAL
- en: green energy, 390
  id: totrans-3127
  prefs: []
  type: TYPE_NORMAL
- en: transactions, 347
  id: totrans-3128
  prefs: []
  type: TYPE_NORMAL
- en: industries, 388
  id: totrans-3129
  prefs: []
  type: TYPE_NORMAL
- en: wallet, 345
  id: totrans-3130
  prefs: []
  type: TYPE_NORMAL
- en: NFT, 383, 384, 386
  id: totrans-3131
  prefs: []
  type: TYPE_NORMAL
- en: workflow, 345
  id: totrans-3132
  prefs: []
  type: TYPE_NORMAL
- en: in public blockchains, 388
  id: totrans-3133
  prefs: []
  type: TYPE_NORMAL
- en: State variables, 281
  id: totrans-3134
  prefs: []
  type: TYPE_NORMAL
- en: reward, 393
  id: totrans-3135
  prefs: []
  type: TYPE_NORMAL
- en: Storage, 214
  id: totrans-3136
  prefs: []
  type: TYPE_NORMAL
- en: smart contract, 382
  id: totrans-3137
  prefs: []
  type: TYPE_NORMAL
- en: Struct, 266–268
  id: totrans-3138
  prefs: []
  type: TYPE_NORMAL
- en: supply chain, 388
  id: totrans-3139
  prefs: []
  type: TYPE_NORMAL
- en: SubmitPlasmaTxRecord
  id: totrans-3140
  prefs: []
  type: TYPE_NORMAL
- en: taxonomy infrastructure and
  id: totrans-3141
  prefs: []
  type: TYPE_NORMAL
- en: function, 348
  id: totrans-3142
  prefs: []
  type: TYPE_NORMAL
- en: framework, 390
  id: totrans-3143
  prefs: []
  type: TYPE_NORMAL
- en: Supply chain, 388
  id: totrans-3144
  prefs: []
  type: TYPE_NORMAL
- en: templates, 392
  id: totrans-3145
  prefs: []
  type: TYPE_NORMAL
- en: Supply chain–oriented
  id: totrans-3146
  prefs: []
  type: TYPE_NORMAL
- en: unit, 392
  id: totrans-3147
  prefs: []
  type: TYPE_NORMAL
- en: transaction, 24
  id: totrans-3148
  prefs: []
  type: TYPE_NORMAL
- en: value, 392
  id: totrans-3149
  prefs: []
  type: TYPE_NORMAL
- en: Supply chain applications, 153, 154
  id: totrans-3150
  prefs: []
  type: TYPE_NORMAL
- en: Tokens, 124–127
  id: totrans-3151
  prefs: []
  type: TYPE_NORMAL
- en: Symmetric key cryptography, 47, 55
  id: totrans-3152
  prefs: []
  type: TYPE_NORMAL
- en: Token taxonomy framework (TTF),
  id: totrans-3153
  prefs: []
  type: TYPE_NORMAL
- en: System designer, 116
  id: totrans-3154
  prefs: []
  type: TYPE_NORMAL
- en: 125, 391
  id: totrans-3155
  prefs: []
  type: TYPE_NORMAL
- en: Traditional computer network
  id: totrans-3156
  prefs: []
  type: TYPE_NORMAL
- en: architecture, 68
  id: totrans-3157
  prefs: []
  type: TYPE_NORMAL
- en: '**T**'
  id: totrans-3158
  prefs: []
  type: TYPE_NORMAL
- en: Transaction, 7, 82, 106, 278
  id: totrans-3159
  prefs: []
  type: TYPE_NORMAL
- en: Target blockchain healthcare
  id: totrans-3160
  prefs: []
  type: TYPE_NORMAL
- en: Transaction-based analysis, 119
  id: totrans-3161
  prefs: []
  type: TYPE_NORMAL
- en: applications, 150, 158
  id: totrans-3162
  prefs: []
  type: TYPE_NORMAL
- en: Transaction fees, 341
  id: totrans-3163
  prefs: []
  type: TYPE_NORMAL
- en: testcasedemo function, 355, 357
  id: totrans-3164
  prefs: []
  type: TYPE_NORMAL
- en: Transaction logs, 271, 274
  id: totrans-3165
  prefs: []
  type: TYPE_NORMAL
- en: Testing program, 433
  id: totrans-3166
  prefs: []
  type: TYPE_NORMAL
- en: Traveler’s checks, 38
  id: totrans-3167
  prefs: []
  type: TYPE_NORMAL
- en: Third-party applications, 234
  id: totrans-3168
  prefs: []
  type: TYPE_NORMAL
- en: Truffle, 235–238
  id: totrans-3169
  prefs: []
  type: TYPE_NORMAL
- en: Third-party logistics (TPL), 19
  id: totrans-3170
  prefs: []
  type: TYPE_NORMAL
- en: Truisms, 6
  id: totrans-3171
  prefs: []
  type: TYPE_NORMAL
- en: Third-party RPC nodes, 308
  id: totrans-3172
  prefs: []
  type: TYPE_NORMAL
- en: Trust, firms, 6
  id: totrans-3173
  prefs: []
  type: TYPE_NORMAL
- en: Token, 434
  id: totrans-3174
  prefs: []
  type: TYPE_NORMAL
- en: TTCDiploma smart contract, 385
  id: totrans-3175
  prefs: []
  type: TYPE_NORMAL
- en: '450'
  id: totrans-3176
  prefs: []
  type: TYPE_NORMAL
- en: INDEX
  id: totrans-3177
  prefs: []
  type: TYPE_NORMAL
- en: '**U**'
  id: totrans-3178
  prefs: []
  type: TYPE_NORMAL
- en: compile smart contract, 310
  id: totrans-3179
  prefs: []
  type: TYPE_NORMAL
- en: deploy smart contract, 311, 313
  id: totrans-3180
  prefs: []
  type: TYPE_NORMAL
- en: UML diagram, 294
  id: totrans-3181
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum development
  id: totrans-3182
  prefs: []
  type: TYPE_NORMAL
- en: Uniswap, 386
  id: totrans-3183
  prefs: []
  type: TYPE_NORMAL
- en: blockchain, 308, 309
  id: totrans-3184
  prefs: []
  type: TYPE_NORMAL
- en: Universal Resource Identifier
  id: totrans-3185
  prefs: []
  type: TYPE_NORMAL
- en: writing, 313–315, 317
  id: totrans-3186
  prefs: []
  type: TYPE_NORMAL
- en: (URI), 384
  id: totrans-3187
  prefs: []
  type: TYPE_NORMAL
- en: Unspent transaction output
  id: totrans-3188
  prefs: []
  type: TYPE_NORMAL
- en: (UTXO) format,
  id: totrans-3189
  prefs: []
  type: TYPE_NORMAL
- en: '**X, Y**'
  id: totrans-3190
  prefs: []
  type: TYPE_NORMAL
- en: 188, 358–360
  id: totrans-3191
  prefs: []
  type: TYPE_NORMAL
- en: 0xcert, 225
  id: totrans-3192
  prefs: []
  type: TYPE_NORMAL
- en: '**V**'
  id: totrans-3193
  prefs: []
  type: TYPE_NORMAL
- en: '**Z**'
  id: totrans-3194
  prefs: []
  type: TYPE_NORMAL
- en: Validation nodes, 372, 374
  id: totrans-3195
  prefs: []
  type: TYPE_NORMAL
- en: Value exchange
  id: totrans-3196
  prefs: []
  type: TYPE_NORMAL
- en: Zero-Knowledge Succinct Non-
  id: totrans-3197
  prefs: []
  type: TYPE_NORMAL
- en: data role, 18, 20
  id: totrans-3198
  prefs: []
  type: TYPE_NORMAL
- en: interactive Argument of
  id: totrans-3199
  prefs: []
  type: TYPE_NORMAL
- en: economy, 15, 22
  id: totrans-3200
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge (zk-SNARK)
  id: totrans-3201
  prefs: []
  type: TYPE_NORMAL
- en: parties, 17
  id: totrans-3202
  prefs: []
  type: TYPE_NORMAL
- en: characteristics, 366
  id: totrans-3203
  prefs: []
  type: TYPE_NORMAL
- en: proprietary data, 22
  id: totrans-3204
  prefs: []
  type: TYPE_NORMAL
- en: define, 368
  id: totrans-3205
  prefs: []
  type: TYPE_NORMAL
- en: third parties role, 19
  id: totrans-3206
  prefs: []
  type: TYPE_NORMAL
- en: drinking age, 368
  id: totrans-3207
  prefs: []
  type: TYPE_NORMAL
- en: transactions, 88
  id: totrans-3208
  prefs: []
  type: TYPE_NORMAL
- en: layer 2 rollup solution, 367
  id: totrans-3209
  prefs: []
  type: TYPE_NORMAL
- en: Value types, 17
  id: totrans-3210
  prefs: []
  type: TYPE_NORMAL
- en: in privacy computing, 367
  id: totrans-3211
  prefs: []
  type: TYPE_NORMAL
- en: View function, 253
  id: totrans-3212
  prefs: []
  type: TYPE_NORMAL
- en: privacy-enhanced crypto
  id: totrans-3213
  prefs: []
  type: TYPE_NORMAL
- en: computation, 366
  id: totrans-3214
  prefs: []
  type: TYPE_NORMAL
- en: proof and verification, 369
  id: totrans-3215
  prefs: []
  type: TYPE_NORMAL
- en: '**W**'
  id: totrans-3216
  prefs: []
  type: TYPE_NORMAL
- en: R1CS format, 368
  id: totrans-3217
  prefs: []
  type: TYPE_NORMAL
- en: Wallet software component, 168
  id: totrans-3218
  prefs: []
  type: TYPE_NORMAL
- en: value, 368
  id: totrans-3219
  prefs: []
  type: TYPE_NORMAL
- en: Web Client
  id: totrans-3220
  prefs: []
  type: TYPE_NORMAL
- en: works, 369, 370
  id: totrans-3221
  prefs: []
  type: TYPE_NORMAL
- en: '451'
  id: totrans-3222
  prefs: []
  type: TYPE_NORMAL
- en: Document Outline
  id: totrans-3223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Table of Contents](index_split_000.html#p5)'
  id: totrans-3224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[About the Authors](index_split_000.html#p14)'
  id: totrans-3225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[About the Technical Reviewer](index_split_000.html#p16)'
  id: totrans-3226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Acknowledgments](index_split_000.html#p17)'
  id: totrans-3227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 1: Business and Economic Motivation for Blockchain](index_split_000.html#p19)'
  id: totrans-3228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction](index_split_000.html#p20)'
  id: totrans-3229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Brief History of Money](index_split_000.html#p23)'
  id: totrans-3230
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Economy As Value Exchange](index_split_000.html#p30)'
  id: totrans-3231
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Current Economic Inefficiencies](index_split_000.html#p38)'
  id: totrans-3232
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Blockchain’s Potential to Address Current Economic Inefficiencies](index_split_000.html#p47)'
  id: totrans-3233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter Summary/Key Takeaways](index_split_000.html#p50)'
  id: totrans-3234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Sidebars](index_split_000.html#p52)'
  id: totrans-3235
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Quiz Questions](index_split_000.html#p54)'
  id: totrans-3236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[References](index_split_000.html#p55)'
  id: totrans-3237
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 2: Overview of Core Technologies Supporting Blockchain](index_split_000.html#p58)'
  id: totrans-3238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction](index_split_000.html#p58)'
  id: totrans-3239
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Cryptology and Digital Signatures](index_split_000.html#p60)'
  id: totrans-3240
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Distributed Systems](index_split_001.html#p71)'
  id: totrans-3241
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Peer-to-Peer Networking](index_split_001.html#p82)'
  id: totrans-3242
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Blockchain Technology Integration](index_split_001.html#p86)'
  id: totrans-3243
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter Summary/Key Takeaways](index_split_001.html#p89)'
  id: totrans-3244
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Quiz Questions](index_split_001.html#p91)'
  id: totrans-3245
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Sidebar – Key Distributed Systems Terms and Definitions](index_split_001.html#p93)'
  id: totrans-3246
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[References](index_split_001.html#p94)'
  id: totrans-3247
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 3: Blockchain Components and Architecture](index_split_001.html#p95)'
  id: totrans-3248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction](index_split_001.html#p95)'
  id: totrans-3249
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conceptual Overview of Blockchain Components](index_split_001.html#p97)'
  id: totrans-3250
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Distributed Ledgers and Technical Overview of Blockchains](index_split_001.html#p102)'
  id: totrans-3251
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Blockchain Implementation Categorization](index_split_001.html#p109)'
  id: totrans-3252
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Smart Contracts and Blockchain Components Summary](index_split_001.html#p113)'
  id: totrans-3253
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Blockchain Limitations](index_split_001.html#p116)'
  id: totrans-3254
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter Summary/Key Takeaways](index_split_002.html#p120)'
  id: totrans-3255
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Sidebar – Blockchain Terminology](index_split_002.html#p122)'
  id: totrans-3256
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Quiz Questions](index_split_002.html#p123)'
  id: totrans-3257
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[References](index_split_002.html#p125)'
  id: totrans-3258
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 4: Blockchain Business Applications](index_split_002.html#p126)'
  id: totrans-3259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction](index_split_002.html#p126)'
  id: totrans-3260
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Is a Blockchain Necessary?](index_split_002.html#p129)'
  id: totrans-3261
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Blockchain Application Design Decisions](index_split_002.html#p134)'
  id: totrans-3262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Blockchain Applications](index_split_002.html#p152)'
  id: totrans-3263
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Blockchain Finance Applications](index_split_002.html#p152)'
  id: totrans-3264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Blockchain Healthcare Applications](index_split_002.html#p158)'
  id: totrans-3265
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Blockchain Supply Chain Applications](index_split_002.html#p166)'
  id: totrans-3266
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Blockchain Entertainment Applications](index_split_002.html#p168)'
  id: totrans-3267
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter Summary/Key Takeaways](index_split_002.html#p170)'
  id: totrans-3268
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Quiz Questions](index_split_002.html#p172)'
  id: totrans-3269
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[References](index_split_003.html#p174)'
  id: totrans-3270
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 5: Blockchain Implementations Overview: Bitcoin, Ethereum, and Hyperledger](index_split_003.html#p176)'
  id: totrans-3271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction](index_split_003.html#p176)'
  id: totrans-3272
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bitcoin Transactions, Blocks, and Mining](index_split_003.html#p178)'
  id: totrans-3273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bitcoin Economics](index_split_003.html#p195)'
  id: totrans-3274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Consensus Protocols](index_split_003.html#p197)'
  id: totrans-3275
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ethereum](index_split_003.html#p200)'
  id: totrans-3276
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Hyperledger](index_split_003.html#p206)'
  id: totrans-3277
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bitcoin, Ethereum, and Hyperledger Comparison](index_split_003.html#p208)'
  id: totrans-3278
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Emerging Blockchain Implementations](index_split_003.html#p211)'
  id: totrans-3279
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter Summary/Key Takeaways](index_split_003.html#p213)'
  id: totrans-3280
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Sidebar – Stack-Based Programming Language](index_split_003.html#p214)'
  id: totrans-3281
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Quiz Questions](index_split_003.html#p215)'
  id: totrans-3282
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[References](index_split_003.html#p218)'
  id: totrans-3283
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Untitled](index_split_003.html#p181)'
  id: totrans-3284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 6: Ethereum Architecture and Overview](index_split_003.html#p220)'
  id: totrans-3285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction](index_split_003.html#p220)'
  id: totrans-3286
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ethereum Architecture](index_split_003.html#p222)'
  id: totrans-3287
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Network Layer](index_split_003.html#p223)'
  id: totrans-3288
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Core Blockchain Layer](index_split_003.html#p224)'
  id: totrans-3289
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Enterprise Components Layer](index_split_003.html#p226)'
  id: totrans-3290
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tooling Layer](index_split_003.html#p227)'
  id: totrans-3291
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Application Layer](index_split_003.html#p228)'
  id: totrans-3292
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ethereum Blockchain Ecosystem and DeFi Projects](index_split_004.html#p229)'
  id: totrans-3293
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Wallet to Manage Assets](index_split_004.html#p229)'
  id: totrans-3294
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Hosted Service](index_split_004.html#p230)'
  id: totrans-3295
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[MetaMask](index_split_004.html#p230)'
  id: totrans-3296
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[MyEtherWallet](index_split_004.html#p231)'
  id: totrans-3297
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Fortmatic](index_split_004.html#p232)'
  id: totrans-3298
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Smart Contract–Enabled Banking dApp](index_split_004.html#p233)'
  id: totrans-3299
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Decentralized Exchange in Ethereum](index_split_004.html#p234)'
  id: totrans-3300
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NFT Applications](index_split_004.html#p235)'
  id: totrans-3301
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Oracle Service](index_split_004.html#p236)'
  id: totrans-3302
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[DAO Platforms](index_split_004.html#p237)'
  id: totrans-3303
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Decentralized Insurance Platform](index_split_004.html#p237)'
  id: totrans-3304
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Decentralized KYC and Identity](index_split_004.html#p238)'
  id: totrans-3305
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stablecoin](index_split_004.html#p238)'
  id: totrans-3306
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tools to Set Up a Smart Contract Development Environment](index_split_004.html#p239)'
  id: totrans-3307
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[MetaMask: The Simplest Way to Interact with the Ethereum Blockchain](index_split_004.html#p240)'
  id: totrans-3308
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Etherscan: The Most Comprehensive Blockchain Browser](index_split_004.html#p242)'
  id: totrans-3309
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Geth: The Swiss Army Knife for the Ethereum Blockchain](index_split_004.html#p242)'
  id: totrans-3310
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Truffle: The Most Comprehensive Smart Contract Development Tool](index_split_004.html#p246)'
  id: totrans-3311
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Remix: The Most Convenient Web-Based Smart Contract Development Tool](index_split_004.html#p249)'
  id: totrans-3312
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Summary](index_split_004.html#p255)'
  id: totrans-3313
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 7: Programming Smart Contract with Solidity](index_split_004.html#p256)'
  id: totrans-3314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction: What We Learned in the Last Chapter](index_split_004.html#p256)'
  id: totrans-3315
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Is Smart Contract](index_split_004.html#p256)'
  id: totrans-3316
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Is Solidity Programming Language](index_split_004.html#p258)'
  id: totrans-3317
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Module 1: Hello World Solidity Example](index_split_004.html#p259)'
  id: totrans-3318
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Solidity Comments](index_split_004.html#p260)'
  id: totrans-3319
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Solidity Program and Version Declaration](index_split_004.html#p260)'
  id: totrans-3320
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Import a Solidity File](index_split_004.html#p262)'
  id: totrans-3321
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Constructor Function](index_split_004.html#p263)'
  id: totrans-3322
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Function Modifier](index_split_004.html#p263)'
  id: totrans-3323
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Blockchain Access Scope: Pure/View/Payable Functions](index_split_004.html#p264)'
  id: totrans-3324
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Function Access Scope: Public, External, Internal, and Private](index_split_004.html#p265)'
  id: totrans-3325
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Module 2: Solidity Data Types](index_split_004.html#p266)'
  id: totrans-3326
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Boolean](index_split_004.html#p266)'
  id: totrans-3327
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Integer Type](index_split_004.html#p267)'
  id: totrans-3328
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Address Type](index_split_004.html#p269)'
  id: totrans-3329
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Byte Array](index_split_004.html#p270)'
  id: totrans-3330
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Fixed Size Array](index_split_004.html#p272)'
  id: totrans-3331
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Dynamically Sized Array](index_split_004.html#p273)'
  id: totrans-3332
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Mapping Data Type](index_split_004.html#p274)'
  id: totrans-3333
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Enum Data Type](index_split_004.html#p275)'
  id: totrans-3334
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Struct Data Type](index_split_004.html#p277)'
  id: totrans-3335
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Blockchain Specific Variables](index_split_004.html#p279)'
  id: totrans-3336
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Module 3: Events](index_split_004.html#p282)'
  id: totrans-3337
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Is Ethereum Event](index_split_004.html#p282)'
  id: totrans-3338
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Where Are Events Stored](index_split_004.html#p282)'
  id: totrans-3339
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Define an Event](index_split_004.html#p282)'
  id: totrans-3340
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Emit an Event](index_split_004.html#p283)'
  id: totrans-3341
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Event Examples](index_split_004.html#p284)'
  id: totrans-3342
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Module 4: Security](index_split_004.html#p285)'
  id: totrans-3343
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Function Vulnerabilities](index_split_004.html#p285)'
  id: totrans-3344
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Function Visibility Error](index_split_004.html#p285)'
  id: totrans-3345
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vulnerability: Function Call Return Value Not Checked](index_split_004.html#p287)'
  id: totrans-3346
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vulnerability: Ether Withdraw Operation Not Protected](index_split_004.html#p287)'
  id: totrans-3347
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vulnerability: Self-Destruction Functions](index_split_004.html#p287)'
  id: totrans-3348
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vulnerability: Use of Solidity Deprecated Functions](index_split_004.html#p288)'
  id: totrans-3349
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vulnerability: Delegatecall to Untrusted Callee](index_split_004.html#p288)'
  id: totrans-3350
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vulnerability: DOS with Failed Function Calls](index_split_004.html#p289)'
  id: totrans-3351
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vulnerability: Race Conditions and Transaction Order Dependence](index_split_004.html#p289)'
  id: totrans-3352
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vulnerability: Assert Violation](index_split_004.html#p290)'
  id: totrans-3353
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vulnerability: Cross Contract Call Enters into a Loop](index_split_004.html#p290)'
  id: totrans-3354
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Type and Data Vulnerabilities](index_split_005.html#p291)'
  id: totrans-3355
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vulnerability: Variable Value Overflow or Underflow](index_split_005.html#p291)'
  id: totrans-3356
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vulnerability: Shadowing State Variables](index_split_005.html#p292)'
  id: totrans-3357
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vulnerability: Authorization Through tx.origin](index_split_005.html#p293)'
  id: totrans-3358
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vulnerability: Using Block Values to Represent Time](index_split_005.html#p294)'
  id: totrans-3359
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vulnerability: Writing to Arbitrary Storage Locations](index_split_005.html#p295)'
  id: totrans-3360
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vulnerability: Unused Variables](index_split_005.html#p296)'
  id: totrans-3361
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Compiler Vulnerabilities](index_split_005.html#p296)'
  id: totrans-3362
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Outdated Compilers](index_split_005.html#p296)'
  id: totrans-3363
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Randomness Vulnerability](index_split_005.html#p297)'
  id: totrans-3364
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vulnerability: Weak Randomness from Blockchain Attributes](index_split_005.html#p297)'
  id: totrans-3365
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Signature Vulnerability](index_split_005.html#p297)'
  id: totrans-3366
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vulnerability: Signature Manipulation](index_split_005.html#p297)'
  id: totrans-3367
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Module Summary](index_split_005.html#p298)'
  id: totrans-3368
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Module 5: Tools, Test, and Debug](index_split_005.html#p298)'
  id: totrans-3369
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tools](index_split_005.html#p299)'
  id: totrans-3370
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[MythX: A Security Scanning Tool](index_split_005.html#p299)'
  id: totrans-3371
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Solidity Static Analysis: A Security Plug-in for Remix](index_split_005.html#p301)'
  id: totrans-3372
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Solidity to UML: Smart Contract Visualization Tool](index_split_005.html#p303)'
  id: totrans-3373
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Solidity to UML for Remix](index_split_005.html#p303)'
  id: totrans-3374
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Solidity to UML Stand-Alone Tools](index_split_005.html#p304)'
  id: totrans-3375
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Solidity Test](index_split_005.html#p307)'
  id: totrans-3376
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Solidity Unit Testing: A Remix Plug-in for Testing](index_split_005.html#p307)'
  id: totrans-3377
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Solidity Debug](index_split_005.html#p312)'
  id: totrans-3378
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Enable the Debugger](index_split_005.html#p313)'
  id: totrans-3379
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Launch the Debugger](index_split_005.html#p313)'
  id: totrans-3380
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Debug the Smart Contract](index_split_005.html#p314)'
  id: totrans-3381
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Module 6: Client Considerations](index_split_005.html#p316)'
  id: totrans-3382
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Types of dApp clients](index_split_005.html#p317)'
  id: totrans-3383
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Browser Client](index_split_005.html#p318)'
  id: totrans-3384
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Mobile Clients](index_split_005.html#p318)'
  id: totrans-3385
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Desktop Client](index_split_005.html#p319)'
  id: totrans-3386
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CLI Client](index_split_005.html#p319)'
  id: totrans-3387
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Web Client Example for Interacting with Smart Contract](index_split_005.html#p319)'
  id: totrans-3388
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Step 1: Create an Ethereum development blockchain](index_split_005.html#p319)'
  id: totrans-3389
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Step 2: Compile and deploy the smart contract to the development blockchain](index_split_005.html#p321)'
  id: totrans-3390
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Step 3: Deploy the smart contract](index_split_005.html#p322)'
  id: totrans-3391
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Step 4: Write web client to interact with the smart contract](index_split_005.html#p324)'
  id: totrans-3392
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Summary](index_split_005.html#p329)'
  id: totrans-3393
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 8: Security Considerations](index_split_005.html#p330)'
  id: totrans-3394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction](index_split_005.html#p330)'
  id: totrans-3395
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Functional Security Holes in Smart Contracts](index_split_005.html#p332)'
  id: totrans-3396
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Fund Deadlock](index_split_005.html#p332)'
  id: totrans-3397
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Fund Leakage](index_split_005.html#p333)'
  id: totrans-3398
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Disabled Smart Contract](index_split_005.html#p334)'
  id: totrans-3399
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Orphan Smart Contract](index_split_005.html#p334)'
  id: totrans-3400
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Attackable Security Holes in Smart Contracts](index_split_005.html#p334)'
  id: totrans-3401
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Best Security Practices for Smart Contracts](index_split_005.html#p336)'
  id: totrans-3402
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Have a Security Risk Mitigation Plan](index_split_005.html#p337)'
  id: totrans-3403
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Checking Both Main Source Code and Libraries](index_split_005.html#p338)'
  id: totrans-3404
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Put a Cap to the Max Funds](index_split_005.html#p338)'
  id: totrans-3405
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Make Your Smart Contract Open Source and Leverage the Community Effort to
    Harden the Security](index_split_005.html#p339)'
  id: totrans-3406
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Yes, There Are Blockchain Security Whitehats](index_split_005.html#p340)'
  id: totrans-3407
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Have Smart Contract Audited](index_split_005.html#p340)'
  id: totrans-3408
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Readable Smart Contract Logic](index_split_005.html#p341)'
  id: totrans-3409
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Modularize the Smart Contract](index_split_005.html#p341)'
  id: totrans-3410
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using Well-Tested Libraries](index_split_005.html#p342)'
  id: totrans-3411
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Use a Good Random Number Generator](index_split_005.html#p342)'
  id: totrans-3412
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Review Gas Consumption in Security Context](index_split_005.html#p343)'
  id: totrans-3413
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Wisely Use Blockchain](index_split_005.html#p343)'
  id: totrans-3414
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stay on Top of Security Breaches and Patches](index_split_005.html#p344)'
  id: totrans-3415
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Blockchain Specific Security Tips](index_split_005.html#p345)'
  id: totrans-3416
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Security Impact of Quantum Computing](index_split_005.html#p347)'
  id: totrans-3417
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Summary](index_split_005.html#p350)'
  id: totrans-3418
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 9: Layer 2 and Ethereum 2](index_split_005.html#p351)'
  id: totrans-3419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Problem with Ethereum Mainnet](index_split_005.html#p351)'
  id: totrans-3420
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Layer 2 Technology](index_split_005.html#p353)'
  id: totrans-3421
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ethereum State Channel](index_split_005.html#p353)'
  id: totrans-3422
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Plasma As a Layer 2 Technology](index_split_005.html#p357)'
  id: totrans-3423
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Plasma Smart Contract on Ethereum Mainnet](index_split_006.html#p358)'
  id: totrans-3424
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Operators](index_split_006.html#p359)'
  id: totrans-3425
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Transactions or Smart Contracts on Layer 2](index_split_006.html#p360)'
  id: totrans-3426
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Plasma Chain](index_split_006.html#p360)'
  id: totrans-3427
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Transaction Merkle Tree Example](index_split_006.html#p361)'
  id: totrans-3428
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Transaction Merkle Tree for Plasma MVP](index_split_006.html#p367)'
  id: totrans-3429
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Transaction Merkle Tree for Plasma Cash](index_split_006.html#p370)'
  id: totrans-3430
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Layer 2 Rollup](index_split_006.html#p373)'
  id: totrans-3431
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Optimistic Layer 2](index_split_006.html#p374)'
  id: totrans-3432
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[zk-SNARK Layer 2](index_split_006.html#p376)'
  id: totrans-3433
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ethereum 2](index_split_006.html#p380)'
  id: totrans-3434
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Major Changes in Ethereum 2](index_split_006.html#p380)'
  id: totrans-3435
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Transferring from POW to POS](index_split_006.html#p381)'
  id: totrans-3436
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Beacon Chain](index_split_006.html#p381)'
  id: totrans-3437
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Sharding](index_split_006.html#p381)'
  id: totrans-3438
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ethereum 2 Architectural Overview](index_split_006.html#p381)'
  id: totrans-3439
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Migrating from Ethereum 1 to Ethereum 2: POS Deposit, Staking, and Slashing](index_split_006.html#p384)'
  id: totrans-3440
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Run an Ethereum 2 Validator Node with POS Staking](index_split_006.html#p386)'
  id: totrans-3441
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Uncertainties with Ethereum 2](index_split_006.html#p388)'
  id: totrans-3442
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Summary](index_split_006.html#p388)'
  id: totrans-3443
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 10: Fund a Project: Tokens and Gas Fees](index_split_006.html#p389)'
  id: totrans-3444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction](index_split_006.html#p389)'
  id: totrans-3445
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tokens for Funding Ecosystem Projects](index_split_006.html#p390)'
  id: totrans-3446
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tokens in ICO and DeFi](index_split_006.html#p390)'
  id: totrans-3447
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Token in NFT](index_split_006.html#p393)'
  id: totrans-3448
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tokens in DeFi (Compound, Uniswap, and Stablecoins)](index_split_006.html#p396)'
  id: totrans-3449
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tokens for Enterprises/Standardized (Pervasive) Tokens](index_split_006.html#p397)'
  id: totrans-3450
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Supply chain tokens](index_split_006.html#p398)'
  id: totrans-3451
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Industry-Specific Tokens](index_split_006.html#p398)'
  id: totrans-3452
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Token Taxonomy Initiative](index_split_006.html#p400)'
  id: totrans-3453
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Token Economy Consideration](index_split_006.html#p403)'
  id: totrans-3454
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Token Allocation](index_split_006.html#p403)'
  id: totrans-3455
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Token Distribution](index_split_006.html#p404)'
  id: totrans-3456
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Gas Fee Consideration](index_split_006.html#p405)'
  id: totrans-3457
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Is Ethereum Gas?](index_split_006.html#p406)'
  id: totrans-3458
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understand Ethereum Gas with Gas Station Analogy](index_split_006.html#p406)'
  id: totrans-3459
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Quantize Gas Expenses in a Smart Contract Program](index_split_006.html#p408)'
  id: totrans-3460
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Summary](index_split_006.html#p413)'
  id: totrans-3461
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 11: Building Team Projects](index_split_006.html#p414)'
  id: totrans-3462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Problem Statement and Brainstorming](index_split_006.html#p414)'
  id: totrans-3463
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Specifications and Solutions](index_split_006.html#p416)'
  id: totrans-3464
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[EIP-3220: Crosschain Identifier Specification](index_split_006.html#p417)'
  id: totrans-3465
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Simple Summary](index_split_006.html#p417)'
  id: totrans-3466
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Abstract](index_split_006.html#p417)'
  id: totrans-3467
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Motivation](index_split_006.html#p417)'
  id: totrans-3468
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Specification](index_split_006.html#p419)'
  id: totrans-3469
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Rationale](index_split_006.html#p421)'
  id: totrans-3470
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Backward Compatibility](index_split_006.html#p421)'
  id: totrans-3471
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Security Considerations](index_split_006.html#p421)'
  id: totrans-3472
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Architecture](index_split_006.html#p422)'
  id: totrans-3473
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Design the Smart Contract](index_split_006.html#p423)'
  id: totrans-3474
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Roles](index_split_006.html#p423)'
  id: totrans-3475
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Events](index_split_006.html#p424)'
  id: totrans-3476
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Structures](index_split_006.html#p424)'
  id: totrans-3477
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Functions](index_split_006.html#p425)'
  id: totrans-3478
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[UML of Smart Contract](index_split_006.html#p425)'
  id: totrans-3479
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Smart Contract Code](index_split_006.html#p427)'
  id: totrans-3480
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Client Considerations](index_split_006.html#p432)'
  id: totrans-3481
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[HTML Page Example](index_split_006.html#p434)'
  id: totrans-3482
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[JavaScript Example](index_split_006.html#p436)'
  id: totrans-3483
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Security Review](index_split_006.html#p440)'
  id: totrans-3484
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deploy to Testnet](index_split_006.html#p440)'
  id: totrans-3485
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deploy to Mainnet](index_split_006.html#p442)'
  id: totrans-3486
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Operation and Upgrade Consideration](index_split_006.html#p444)'
  id: totrans-3487
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Index](index_split_006.html#p446)'
  id: totrans-3488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
