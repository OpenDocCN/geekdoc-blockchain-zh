["```\ninstance.set(n, {\n  gas: 100000,\n  gasPrice: 10000000000\n}, function (e, result) {\n  // ... ...\n});\n```", "```\npragma solidity ^0.4.17;\n\ncontract HelloWorld  {\n\n    string helloMessage;\n    address public owner;\n\n    constructor () public {\n        helloMessage = \"Hello, World!\";\n        owner = msg.sender;\n    }\n\n    function updateMessage (string _new_msg) public {\n        helloMessage = _new_msg;\n    }\n\n    function sayHello () public view returns (string) {\n        return helloMessage;\n    }\n\n    function kill() public {\n        if (msg.sender == owner) selfdestruct(owner);\n    }\n}\n```", "```\nvar onPageLoad = function () {\n  web3.eth.getAccounts(function (e, address) {\n    if (e) {\n      // ...\n    } else {\n      contract = web3.eth.contract(abi);\n      instance = contract.at(contract_address);\n      instance.myFunc (params..., function (e, r) {\n        if (e) {\n          // ...\n        } else {\n          return_value_0 = r[0];\n          return_value_1 = r[1];\n          // ...\n          // show the UI based on the return values\n          // Make a subsequent call after myFunc\n          instance.secondFunc (params..., function (e2, r2) {\n            // update the UI based on the r2 return values\n          }\n        }\n      });\n\n      instance.anotherFunc (params..., function (e, r) {\n        if (e) {\n          // ...\n        } else {\n          // show results on UI\n        }\n      });\n    }\n  });\n}\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <script>\n      window.addEventListener('load', function() {\n        var hello = web3.eth.contract(...).at(\"...\");\n var new_mesg = location.search.split('new_mesg=')[1];\n        if (new_mesg === undefined || new_mesg == null) {\n        } else {\n          new_mesg = decodeURIComponent(new_mesg.replace(/\\+/g, '%20'));\n\n          web3.eth.getAccounts(function (error, address) {\n            if(!error) {\n              hello.updateMessage(new_mesg, {\n                  from: address.toString()\n              }, function(e, r){\n                if(!e)\n                  document.getElementById(\"status\").innerHTML =\n                    \"<b>Submitted to blockchain</b>. \" +\n                    \"New message will take a few sec to show up! \" +\n                    \"<a href=\\\"helloworld_europa.html\\\">Reload page.</a>\";\n              });\n            }\n          });\n        }\n\n        hello.sayHello(function(error, result){\n          if(!error)\n            document.getElementById(\"mesg\").innerHTML = result;\n        });\n      })\n    </script>\n  </head>\n\n  <body>\n  <h2>Hello World</h2>\n    <form method=GET>\n      New message:<br/><br/>\n      <input type=\"text\" size=\"40\" name=\"new_mesg\"/><br/><br/>\n      <input type=\"submit\"/>\n      <p id=\"status\"/>\n    </form>\n    <p>The current message is: <span id=\"mesg\"/></p>\n  </body>\n</html>\n```", "```\n$ sudo yum install epel-release\n$ sudo yum install nodejs npm\n```", "```\n$ sudo npm install -g ganache-cli\n```", "```\n$ ganache-cli\nGanache CLI v6.0.3 (ganache-core: 2.0.2)\n\nAvailable Accounts\n==================\n(0) 0xbaea21140ce33f0fa7046692f61a4238eaa407e3\n(1) 0x944205dcdaeeb097870925ea26e159f6b6dab4c1\n(2) 0x1f62a96f38d5247815dd4ed2d18ed9e228c06d40\n(3) 0x6235ca5d31c476b649b8517ce24f428db34e8446\n(4) 0xa13feaf894f1ae33e321c78c396a3eaf2048a621\n(5) 0xee3a90f6403853b57a7a325cccee0e6120cb39f2\n(6) 0x889dd868cc580080e1e809fd38ca1b5ff2aef017\n(7) 0xb0e664c4732d7c065b4f20e461cfc89ce5598119\n(8) 0x3c183932b2d9c0aedb611cc89c210ab71e7d3f4c\n(9) 0xf3deac45c47e48620571108b9a9320aacd7518fe\n\nPrivate Keys\n==================\n(0) 75af4be053b6da9b6ae6af0dd137de406bb6405779be056ffa5861873346a54f\n(1) 112ff21d135f28273c3185c6d519f3c4f38907418448ac875443206eed25eb39\n(2) 28b5b6d6d04d38be899f69bb9ce6335d75b30daaea4476c9f16e75cb638076b9\n(3) 122a12f40411b5fd66c354493d3ec9e83d66f14071e47bdfc9a0b747d1040344\n(4) 6e062a75413f9632d33f1520e0b4246e05edde517caf4b1657c6d652d324dc06\n(5) 71212db8910dabd3d5399470bb8ea37a29ffdb2402a2b03d9144d7bea6a5cfda\n(6) 301283f708770350180a2b00e5f8092f43238d23fd2249397f5a185d5a9ecc1f\n(7) 7cfc7dba9c475fc7f394507ea1e9fd3d8604b288a058477b684f9a58a9176f33\n(8) 14f259263d41a1e5986c588f4ae9bc93b6e56c4734ed7046394a7b1d37aba094\n(9) 4aceb1f8a42c36a50402d0e679d0666a61bb4786ef7196c98b5cd3e0f6992b5b\n\nHD Wallet\n==================\nMnemonic:  foot silly tag melt require tuition soon become frequent tell forest\nsatisfy\nBase HD Path:  m/44'/60'/0'/0/{account_index}\n\nListening on localhost:8545\n```", "```\n$ ganache-cli --account=\"0x99cf2f6...,1234000000000000000000\"\n--account=\"0xa295df7...,314159000000000000000000\"\nGanache CLI v6.0.3 (ganache-core: 2.0.2)\n\nAvailable Accounts\n==================\n(0) 0xd61a8f9afaaa3f12e75781c3a1e271c2744442ba\n(1) 0x9f37a44226a4c65336ceacbd608ea248fca5453c\n\nPrivate Keys\n==================\n(0) 99cf2f6a09d3ba6491e838ac62edcd1b8df5507056a89c87e495948a2211c9c4\n(1) a295df779395bb57b38765a592374d56d0d4a259d54fb8f5cfad2f35b90ae8cd\n\nListening on localhost:8545\n```", "```\n$ geth attach http://node.ip.addr:8545\n```", "```\n> personal.newAccount()\nPassphrase:\nRepeat passphrase:\n\"0x7631a9f5b7af9705eb7ce0679022d8174ae51ce0\"\n> eth.accounts\n[\"0x7631a9f5b7af9705eb7ce0679022d8174ae51ce0\", ...]\n```", "```\n> miner.setEtherbase(eth.accounts[0])\n> miner.start(8)\ntrue\n> miner.stop()\nTrue\n```", "```\n> personal.unlockAccount(\"0x7631a9f5b7af9705eb7ce0679022d8174ae51ce0\")\nUnlock account 0x7631a9f5b7af9705eb7ce0679022d8174ae51ce0\nPassphrase:\ntrue\n> eth.sendTransaction({from:\"0x7631a9f5b7af9705eb7ce0679022d8174ae51ce0\",\nto:\"0xfa9ee3557ba7572eb9ee2b96b12baa65f4d2ed8b\",\nvalue: web3.toWei(0.05, \"ether\")})\n\"0xf63cae7598583491f0c9074c8e1415673f6a7382b1c57cc9b06cc77032f80ed3\"\n```", "```\nweb3 = new Web3(new Web3.providers.HttpProvider(\n  \"https://mainnet.infura.io/\"));\n```", "```\nvar balanceWei = web3.eth.getBalance(acct).toNumber();\nvar balance = web3.fromWei(balanceWei, 'ether');\n```", "```\nhttps://geth.ethereum.org/downloads/\n```", "```\n$ geth version\nGeth\nVersion: 1.7.1-stable\n```", "```\n$ nohup geth &\n```", "```\n$ geth --testnet --fast\n```", "```\n$ geth --dev console\n```", "```\n> admin.nodeInfo\n{\n  enode: \"enode://c74de1...ce@[::]:55223?discport=0\",\n  id: \"c74de1...ce\",\n  ip: \"::\",\n  listenAddr: \"[::]:55223\",\n  name: \"Geth/v1.7.0-stable-6c6c7b2a/linux-amd64/go1.7.4\",\n  ports: {\n    discovery: 0,\n    listener: 55223\n  },\n  protocols: {\n    eth: {\n      difficulty: 131072,\n      genesis: \"0xe5be...bc\",\n      head: \"0xe5...bc\",\n      network: 1\n    },\n...\n```", "```\ngeth --bootnodes \"enode://c74de1...ce@192.168.1.3:55223\"\n```", "```\n> admin.addPeer(\"enode://c74de1...ce@192.168.1.3:55223\")\nTrue\n> net.peerCount\n1\n```", "```\npragma solidity ^0.4.17;\ncontract HelloWorld  {\n\n    string helloMessage;\n    address public owner;\n\n    function HelloWorld () public {\n        helloMessage = \"Hello, World!\";\n        owner = msg.sender;\n    }\n\n    function updateMessage (string _new_msg) public {\n        helloMessage = _new_msg;\n    }\n\n    function sayHello () public view returns (string) {\n        return helloMessage;\n    }\n\n    function kill() public {\n        if (msg.sender == owner) selfdestruct(owner);\n    }\n}\n```", "```\n$ sudo add-apt-repository ppa:ethereum/ethereum\n$ sudo apt-get update\n$ sudo apt-get install solc\n```", "```\n$ solc HelloWorld.sol\n```", "```\n> var owner = \"0xMYADDR\"\n> var abi = ...\n> var bytecode = ...\n> var gas = ...\n> personal.unlockAccount(owner)\n... ...\n> var helloContract = eth.contract(abi)\n> var hello = helloContract.new(owner, {from:owner, data:bytecode, gas:gas})\n```", "```\n> hello.address\n\"0xabcdCONTRACTADDRESS\"\n```", "```\n$ sudo yum install epel-release\n$ sudo yum install nodejs npm\n```", "```\n$ sudo npm install -g truffle\n```", "```\n$ mkdir HelloWorld\n$ cd HelloWorld\n$ truffle init\n$ ls\ncontracts        test            truffle.js\nmigrations        truffle-config.js\n```", "```\nvar HelloWorld = artifacts.require(\"./HelloWorld.sol\");\n\nmodule.exports = function(deployer) {\n  deployer.deploy(HelloWorld);\n};\n```", "```\nmodule.exports = {\n\n  networks: {\n    development: {\n      host: \"localhost\",\n      port: 8545,\n      network_id: \"*\" // Match any network id\n    },\n    testnet: {\n      host: \"node.ip.addr\",\n      port: 8545,\n      network_id: 3, // Ropsten,\n      from: \"0x3d113a96a3c88dd48d6c34b3c805309cdd77b543\",\n      gas: 4000000,\n      gasPrice: 20000000000\n    }\n  }\n};\n```", "```\n$ truffle compile\nCompiling ./contracts/HelloWorld.sol...\nCompiling ./contracts/Migrations.sol...\nWriting artifacts to ./build/contracts\n```", "```\n{\n  \"contractName\": \"HelloWorld\",\n  \"abi\": [\n    ... ...\n  ],\n  ... ...\n}\n```", "```\n$ truffle migrate --network development\nUsing network 'development'.\n\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... 0x22cbcdd77c162a7d72624ddc52fd83aea7bc091548f30fcc13d745c65eab0a74\n  Migrations: 0x321a5a4ee365a778082815b6048f8a35d4f44d7b\nSaving successful migration to network...\n  ... 0xcb2b363e308a22732bd35c328c36d2fbf36e025a06ca6e055790c80efae8df13\nSaving artifacts...\nRunning migration: 2_deploy_contracts.js\n  Deploying HelloWorld...\n  ... 0xb332aee5093195519fa3871276cb6079b50e51308ce0d63b58e73fb5331016fc\n  HelloWorld: 0x4788fdecd41530f5e2932ac622e8cffe3247caa9\nSaving successful migration to network...\n  ... 0x8297d06a8112a1fd64b2401f7009d923caa553516a376cd4bf818c1414faf9f9\nSaving artifacts...\n```", "```\n$ ./geth attach http://node.ip.addr:8545 (http://172.33.0.218:8545/)\nWelcome to the Geth JavaScript console!\nmodules: eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0\n> personal.unlockAccount(\"0x3d113a96a3c88dd48d6c34b3c805309cdd77b543\", \"pass\");\ntrue\n```", "```\n$ truffle migrate --network testnet\n\nUsing network 'testnet'.\n\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... 0x958a7303711fbae57594959458333b4c6fb536c66ff392686ca8b70039df7570\n  Migrations: 0x7dab4531f0d12291f8941f84ef9946fbae0a487b\nSaving successful migration to network...\n  ... 0x0f26814aa69b42e2d72731651cc2cdd72fca32c19f82073a76461b76265e564a\nSaving artifacts...\nRunning migration: 2_deploy_contracts.js\n  Deploying HelloWorld...\n  ... 0xc97646bcd00f7a3d1745c4256b334cdca8ff965095f11645144fcf1ec002afc6\n  HelloWorld: 0x8bc27c8129eea739362d786ca0754b5062857e9c\nSaving successful migration to network...\n  ... 0xf077c1158a8cc1530af98b960d90ebb3888aa6674e0bcb62d0c7d4487707c841\nSaving artifacts...\n```", "```\n$ geth attach http://node.ip.addr:8545\n```", "```\n> var abi = [ { \"constant\": false, \"inputs\": [ { \"name\": \"_new_msg\",\n\"type\": \"string\" } ], \"name\": \"updateMessage\", \"outputs\": [], \"payable\":\nfalse, \"stateMutability\": \"nonpayable\", \"type\": \"function\" },\n{ \"constant\": false, \"inputs\": [], \"name\": \"kill\", \"outputs\": [],\n\"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" },\n{ \"constant\": true, \"inputs\": [], \"name\": \"owner\", \"outputs\": [ { \"name\":\n\"\", \"type\": \"address\" } ], \"payable\": false, \"stateMutability\": \"view\",\n\"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\":\n\"sayHello\", \"outputs\": [ { \"name\": \"\", \"type\": \"string\" } ], \"payable\":\nfalse, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [],\n\"payable\": false, \"stateMutability\": \"nonpayable\", \"type\":\n\"constructor\" } ]\n> var helloContract = eth.contract(abi)\n> var hello = helloContract.at(\"0x59a173...10c\");\n```", "```\n> hello.sayHello()\n\"Hello, World!\"\n```", "```\n> personal.newAccount(\"passphrase\")\n```", "```\n> personal.unlockAccount(\"0xd5cb83f0f83af60268e927e1dbb3aeaddc86f886\")\n\nUnlock account 0xd5cb83f0f83af60268e927e1dbb3aeaddc86f886\nPassphrase:true\n... ...\n\n> hello.updateMessage(\"Welcome to Blockchain\", {from:\n\"0xd5cb83f0f83af60268e927e1dbb3aeaddc86f886\"})\n\"0x32761c528f426993ba980fdd212f929857a8bd392c98896a4e4a898077223c07\"\n> hello.sayHello()\n\"Welcome to Blockchain\"\n>\n```", "```\n#State variables\nhelloMessage: public(bytes32)\nowner: public(address)\n\n@public\ndef __init__(_message: bytes32):\n    self.helloMessage = _message\n    self.owner = msg.sender\n\n@public\ndef updateMessage(newMsg: bytes32):\n    self.helloMessage = newMsg\n\n@public\n@constant\ndef sayHello() -> bytes32:\n    return self.helloMessage\n\n@public\ndef kill():\n    if msg.sender == self.owner:\n        selfdestruct(self.owner)\n```", "```\n$ vyper HelloWorld.v.py\n```", "```\n$ vyper -f json HelloWorld.v.py\n```", "```\n> var owner = \"0xMYADDR\"\n> var abi = ...\n> var bytecode = ...\n> var gas = ...\n> personal.unlockAccount(owner)\n... ...\n> var helloContract = eth.contract(abi)\n> var hello = helloContract.new(owner, {from:owner, data:bytecode, gas:gas})\n```", "```\nweb3 = new Web3(new Web3.providers.HttpProvider(\n              \"http://node.ip.addr:8545\"));\nweb3.personal.unlockAccount(\"...\", pass);\nhello.updateMessage(new_mesg);\n```", "```\nconst Web3 = require(\"web3\");\nconst Tx = require('ethereumjs–tx')\nweb3 = new Web3(new Web3.providers.HttpProvider(\n            \"http://node.ip.addr:8545\"));\n\nvar account = \"0x1234\"; // Ethereum account address\nvar key = new Buffer('private key', 'hex');\n\nvar abi = // ABI of Hello World\nvar bytecode = // Bytecode of Hello World\n\nvar create_contract_tx = {\n    gasPrice: web3.toHex(web3.eth.gasPrice),\n    gasLimit: web3.toHex(3000000),\n    data: bytecode,\n    from: account\n};\n\nvar tx = new Tx(create_contract_tx);\ntx.sign(key);\n\nvar stx = tx.serialize();\nweb3.eth.sendRawTransaction('0x' + stx.toString('hex'), (err, hash) => {\n    // ... Test if success\n});\n```", "```\nconst Web3 = require(\"web3\");\nconst Tx = require('ethereumjs–tx')\nweb3 = new Web3(new Web3.providers.HttpProvider(\n            \"http://node.ip.addr:8545\"));\n\nvar account = \"0x1234\"; // Ethereum account address\nvar key = new Buffer('private key', 'hex');\n\nvar abi = // ABI of Hello World\nvar contract_address = \"0xabcd\";\nvar contract = web3.eth.contract(abi).at(contract_address);\nvar data = contract.updateMessage.getData(msg);\nvar nonce = web3.eth.getTransactionCount(account);\n\nvar call_contract_tx = {\n    nonce: web3.toHex(nonce),\n gasPrice: web3.toHex(web3.eth.gasPrice),\n    gasLimit: web3.toHex(3000000),\n    from: account,\n    to: contract_address,\n    value: '0x00',\n    data: data\n};\n\nvar tx = new Tx(call_contract_tx);\ntx.sign(key);\n\nvar stx = tx.serialize();\nweb3.eth.sendRawTransaction('0x' + stx.toString('hex'), (err, hash) => {\n    // ... Test if success\n});\n```", "```\nwith open('filename') as keyfile:\n    encrypted_key = keyfile.read()\n    private_key = w3.eth.account.decrypt(encrypted_key, password)\n```", "```\nfrom web3 import Web3\n\ntx = {\\\n    'to': '0xABCD',\\\n    'value': w3.toWei('10', 'ether'),\\\n    'gas': 2000000,\\\n    'gasPrice': w3.toWei('2', 'gwei'),\\\n    'nonce': 0\\\n}\n\nprivate_key = b\"\\xyz123\"\nsigned = w3.eth.account.signTransaction(transaction, private_key)\ntx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)\n```", "```\nfrom web3 import Web3\n\ncontract_address = =\"0xWXYZ\"\ncontract = w3.eth.contract(address=contract_address, abi=HELLO_ABI)\nnonce = w3.eth.getTransactionCount('0xABCD')\ntx = contract.functions.updateMessage(\\\n    'A new hello message'\\\n).buildTransaction({\\\n    'gas': 70000,\\\n    'gasPrice': w3.toWei('2', 'gwei'),\\\n    'nonce': nonce\\\n})\n\nprivate_key = b\"\\xyz123\"\nsigned = w3.eth.account.signTransaction(tx, private_key)\ntx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)\n```"]