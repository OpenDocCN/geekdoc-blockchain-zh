- en: © Nishith Pathak and Anurag Bhandari 2018Nishith Pathak and Anurag BhandariIoT,
    AI, and Blockchain for .NET[https://doi.org/10.1007/978-1-4842-3709-0_5](A458845_1_En_5_Chapter.html)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © Nishith Pathak 和 Anurag Bhandari 2018 Nishith Pathak 和 Anurag Bhandari 为 .NET
    提供的物联网、人工智能和区块链 [https://doi.org/10.1007/978-1-4842-3709-0_5](A458845_1_En_5_Chapter.html)
- en: 5. Consuming Microsoft Cognitive APIs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5. 使用微软认知 API
- en: Nishith Pathak^(1 ) and Anurag Bhandari²(1)Kotdwara, Dist. Pauri Garhwal, India(2)Jalandhar,
    Punjab, IndiaBy now, you have a fair understanding of Microsoft Cognitive technologies,
    its various offerings in terms of service, and a sneak preview of understanding
    their concepts. Microsoft has done a fantastic job in abstracting the research
    on AI and machine learning, hiding all complex processing nuances by giving easy-to-consume
    REST based services, sitting on its Azure Cloud solution. In fact, the entire
    suite of Microsoft Cognitive Services is exposed as REST APIs. Since the REST
    API has an API endpoint, you really don’t need any specific platform or programming
    language to consume it. Another advantage of the REST API is that it can accept
    input in JSON or XML format and give output in the same formats. This gives you
    great flexibility to consume REST API directly in all major programming languages,
    such as C#, Java, PHP, Ruby, Python, JavaScript, and so on. As this book targets
    .NET developers, we will restrict ourselves to using C# throughout the book. But,
    really, the fundamentals of consuming Microsoft Cognitive Services remain the
    same for any language.Like any enterprise service, every call to Microsoft Cognitive
    Services needs to be authenticated and authorized before being used. This is achieved
    through the use of a subscription key. Once you get a subscription key (we are
    going to discuss later how to do that), it is passed as a query string parameter
    or in a header while calling the REST endpoint of cognitive services. At the end
    of this chapter, you will learn
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Nishith Pathak^(1 ) 和 Anurag Bhandari²(1) 印度 Pauri Garhwal 地区 Kotdwara (2) 印度旁遮普邦
    Jalandhar 到目前为止，您已经对微软认知技术有了相当的了解，了解了它的各种服务提供以及对其概念的一瞥。微软在将人工智能和机器学习的研究抽象化方面做得非常出色，通过提供基于
    REST 的易于消费的服务，在其 Azure 云解决方案上隐藏了所有复杂的处理细节。事实上，整个微软认知服务套件都公开为 REST API。由于 REST
    API 具有 API 终端点，您实际上不需要任何特定的平台或编程语言来使用它。REST API 的另一个优点是它可以接受 JSON 或 XML 格式的输入并以相同的格式输出。这使您可以直接在所有主要编程语言中使用
    REST API，例如 C#、Java、PHP、Ruby、Python、JavaScript 等。由于本书针对 .NET 开发人员，我们将限制自己在整本书中使用
    C#。但是，实际上，使用微软认知服务的基础知识对于任何语言都是相同的。与任何企业服务一样，使用微软认知服务的每个调用在使用之前都需要进行身份验证和授权。这是通过使用订阅密钥来实现的。一旦您获得了订阅密钥（我们将在稍后讨论如何做到这一点），它将作为查询字符串参数或标头传递，同时调用认知服务的
    REST 终端点。在本章的最后，您将学到
- en: Prerequisites for consuming Cognitive Services
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用认知服务的先决条件
- en: Obtaining a subscription key for Cognitive Services
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取认知服务的订阅密钥
- en: Calling the Microsoft Cognitive Vision API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用微软认知视觉 API
- en: Consuming the Cognitive Vision API using Visual Studio
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Visual Studio 消耗认知视觉 API
- en: Interesting uses of the Computer Vision API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算机视觉 API 的有趣用途
- en: Free Tier and Pay Per Use Model
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 免费层和按使用付费模式
- en: 'When people get to know the Microsoft Cognitive API, the first thing that strikes
    them are the following questions:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们了解到 Microsoft 认知 API 时，他们首先想到的是以下问题：
- en: What’s the cost of calling Microsoft Cognitive Services?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用 Microsoft 认知服务的费用是多少？
- en: Are there some free services available for personal use?
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一些个人可用的免费服务吗？
- en: What happens if I provide my credit card details?
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我提供我的信用卡详细信息会发生什么？
- en: Can I put a limit on the use of APIs?
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我可以对 API 的使用设置限制吗？
- en: What are the SLAs for Cognitive APIs being available in enterprise scenarios?
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认知 API 在企业场景中可用的 SLA 是什么？
- en: Before we delve into more details, let’s answer these questions. Microsoft Cognitive
    Services come with two types of models for consuming cognitive services, namely
    free tier and paid tier (some of the services only have a paid tier). Free tier,
    as the name suggests, provides an opportunity to consume Microsoft Cognitive Services
    without paying anything to Microsoft. Free tier is mostly useful for the end user
    to give a try with personal or low-volume applications. If your requirement fulfills
    any of these requisites, we certainly encourage you to use free tier. As you can
    expect, a free tier for each service also have some restrictions. As it doesn’t
    support SLA for services provided by Microsoft, free tier is often called as a
    restricted tier.Cognitive Services also has the paid tier for service, which is
    based on pay per use model and is a model that should be used for any non-personal
    consumption of the cognitive services including enterprise applications. The pay
    per use model has a different pricing model for different services. For example,
    the pay per use model used by the Emotions API differ from the Speech API. Some
    of the Cognitive Services pay per use models have different payment consumption
    models. Figure [5-1](#Fig1) shows the pricing model for the Emotions API. Some
    of the Cognitive Services also provide services on a standard tier that ensure
    Cognitive Service SLA availability at least 99 percent of the time.![A458845_1_En_5_Fig1_HTML.jpg](A458845_1_En_5_Fig1_HTML.jpg)Figure
    5-1Various pricing tiers for the Emotions APINoteWhile writing this book, if your
    free tier session or usage expires, Microsoft Cognitive Services does not automatically
    move from free tier to paid tier. Rather, your services don’t yield a response.
    We encourage you to go ahead and use free tier with ease but do check the Microsoft
    Cognitive Service policy, as it can change over time.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入更多细节之前，让我们回答这些问题。微软认知服务提供了两种类型的模型来消耗认知服务，即免费层和付费层（部分服务仅有付费层）。免费层，顾名思义，为用户提供了在不支付任何费用给微软的情况下消耗微软认知服务的机会。免费层主要适用于最终用户尝试个人或低容量应用。如果您的需求满足其中任何一个先决条件，我们当然鼓励您使用免费层。正如您所预料的，每个服务的免费层也有一些限制。由于不支持微软提供的服务的SLA，免费层通常被称为受限层。认知服务还有基于按使用量付费模型的付费层，这是应该用于包括企业应用在内的认知服务的非个人消费的模型。按使用量付费模型对不同的服务有不同的定价模型。例如，Emotions
    API 使用的按使用量付费模型与 Speech API 不同。一些认知服务的按使用量付费模型有不同的付款消费模型。图[5-1](#Fig1)展示了 Emotions
    API 的定价模型。一些认知服务还提供标准层的服务，该层至少保证认知服务SLA的可用性达到99%。![A458845_1_En_5_Fig1_HTML.jpg](A458845_1_En_5_Fig1_HTML.jpg)图5-1
    Emotions API 的各种定价层注释在撰写本书时，如果您的免费层会话或使用过期，微软认知服务不会自动从免费层转移到付费层。相反，您的服务不会产生响应。我们鼓励您轻松使用免费层，但请务必检查微软认知服务政策，因为它可能随时间而变化。
- en: Understanding the Prerequisites
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解先决条件
- en: 'Each cognitive API is unique and so is its usage and applicability. It is important
    first to understand which Cognitive API needs to be consumed. Chapter [4](A458845_1_En_4_Chapter.html)
    introduced the various APIs. Apart from knowing which cognitive API to consume,
    you need to have its subscription key and programming language of choice. Each
    subscription key for any cognitive service is unique and exclusive, i.e. the subscription
    key is unique for that user and for that specific service. You can’t use the same
    subscription key to call two different cognitive services—the subscription key
    for the Emotions API is not valid for calling the Speech API.In previous chapters,
    we discussed that consuming cognitive services through REST API is language and
    platform independent. This means you are free to consume in any of your favorite
    languages. Since we are targeting .NET developers in this book, we use Visual
    Studio as our development IDE. Visual Studio 2017, as you may know, is a perfect
    development environment and default industry-wide code editor for creating an
    application for the .NET developer. Installing Visual Studio by default installs
    your .NET Framework, language support, template, and compiler. All versions of
    Visual Studio come with several editions (community, professional, enterprise,
    etc.)—we use the Visual studio 2017 professional edition.NoteWe don’t cover the
    installation of Visual Studio 2017 professional edition. If you don’t have Visual
    Studio, visit the download section of [https://www.visualstudio.com](https://www.visualstudio.com)
    to install it.Although we use C# as our preferred language for creating examples,
    concepts of consuming REST services don’t really change even if you are consuming
    it in a non-.Net environment. We further extend our smart hospital use case to
    consume some cognitive services. Flip back to the end of Chapter [1](A458845_1_En_1_Chapter.html)
    if you need to review the smart hospital use case. Throughout this book, our examples
    and code are entirely focused on building the smart hospital.Just to recap, here
    are the prerequisites required for consuming the Cognitive API:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 每个认知 API 都是独一无二的，因此其使用和适用性也是独特的。首先要了解需要使用哪个认知 API。第[4](A458845_1_En_4_Chapter.html)章介绍了各种
    API。除了知道要使用哪个认知 API 外，还需要具有其订阅密钥和所选择的编程语言。任何认知服务的每个订阅密钥都是独特且独占的，即该用户和该特定服务的订阅密钥是唯一的。您不能使用相同的订阅密钥调用两个不同的认知服务
    - 情感 API 的订阅密钥不能用于调用语音 API。在前几章中，我们讨论了通过 REST API 消费认知服务是与语言和平台无关的。这意味着您可以自由选择任何您喜欢的语言来消费。由于我们在本书中针对的是
    .NET 开发人员，因此我们使用 Visual Studio 作为我们的开发 IDE。正如您可能知道的那样，Visual Studio 2017 是一个完美的开发环境，也是创建
    .NET 开发人员应用程序的默认行业范围代码编辑器。通过默认安装 Visual Studio，您将安装 .NET Framework、语言支持、模板和编译器。所有版本的
    Visual Studio 都带有几个版本（社区、专业、企业等） - 我们使用 Visual Studio 2017 专业版。注意我们不涵盖安装 Visual
    Studio 2017 专业版的安装过程。如果您没有 Visual Studio，请访问[https://www.visualstudio.com](https://www.visualstudio.com)的下载部分进行安装。虽然我们使用
    C# 作为创建示例的首选语言，但是即使在非 .NET 环境中消耗，使用 REST 服务的概念也不会真正改变。我们进一步扩展了我们的智能医院用例以消费一些认知服务。如果您需要回顾智能医院用例，请翻回到第[1](A458845_1_En_1_Chapter.html)章的末尾。在本书的整个过程中，我们的示例和代码完全专注于构建智能医院。简而言之，这里是消费认知
    API 所需的先决条件：
- en: Subscription key
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订阅密钥
- en: Visual Studio 2017
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2017
- en: Your passion and enthusiasm
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的热情和热忱
- en: You already have the passion and enthusiasm for creating a smart AI application,
    that’s why you are reading this book. Assuming you have installed Visual Studio
    2017, you now just need to grab your subscription key for the Cognitive API and
    get started.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经拥有创建智能 AI 应用的热情和热忱，这就是你在阅读本书的原因。假设你已经安装了 Visual Studio 2017，现在你只需要获取你的认知
    API 的订阅密钥，然后开始。
- en: How to Get the Subscription Key for Cognitive Services
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何获取认知服务的订阅密钥
- en: All Microsoft Cognitive Services API require a subscription key to be passed
    either as a header or query parameter. All you need in order to get a subscription
    key for your cognitive services is a Hotmail account. You can go through any of
    the Microsoft Cognitive APIs and click on the Get an API key option, which requires
    signing it, and you are done. But wait!! You also need more quota for consuming
    the key. Thinking of longer-term perspective, we recommend you get it through
    a free subscription, which requires you to have an Azure account. If you already
    have an Azure account, you can directly go to the next section or create the account
    here.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 Microsoft 认知服务 API 都需要传递一个订阅密钥，可以作为头部或查询参数。为了获得你的认知服务的订阅密钥，你只需要一个 Hotmail
    账号。你可以通过任何 Microsoft 认知 API，点击获取 API 密钥选项，需要签署，然后完成。但等等！！你还需要更多的额度来消耗这个密钥。考虑更长期的视角，我们建议你通过免费订阅获取，这需要你拥有一个
    Azure 账号。如果你已经有了 Azure 账号，你可以直接进入下一节或在此处创建账号。
- en: Creating the Azure Account
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 Azure 账号
- en: Go to [https://azure.microsoft.com/en-in/free](https://azure.microsoft.com/en-in/free)
    and click on the Start Free button, as shown in Figure [5-2](#Fig2).![A458845_1_En_5_Fig2_HTML.jpg](A458845_1_En_5_Fig2_HTML.jpg)Figure
    5-2The screen for Azure portal free subscriptionMicrosoft wants to encourage new
    developers and architects such as you to play with an Azure account. As soon as
    you create the Azure account, you are entitled with $200 of credit which you can
    eventually use during your trial period of 30 days to explore other Azure products,
    such as testing and deploying apps on Azure VMs, getting insightful information
    about your data, to name a few. In addition to $200, you will get $50 every month
    for using professional Visual Studio 2017 edition.TipThese bonus freebies are
    certainly useful to consume other Azure services and make your application more
    interesting. In due course of the book, we use this money to consume other IOT
    services as well.Clicking on Start Free redirects you to the form shown in Figure
    [5-3](#Fig3). Fill in the details for getting the Azure account.![A458845_1_En_5_Fig3_HTML.jpg](A458845_1_En_5_Fig3_HTML.jpg)Figure
    5-3The form for signing up for the free Azure subscriptionFill in the form by
    entering your personal details, phone, and credit card details before clicking
    on Sign Up. It is important to note that phone and card details are just for verification
    of your identity. There won’t be any charges levied on the card. It is also important
    to know that Azure doesn’t upgrade your tier (from free to paid) by default. Instead,
    once the trial period is over, the service stops but your accounts still stays.
    You have the option anytime to go back again, access your account, and access
    the service. You can also use the credits that you have received by creating your
    free account along with using the professional edition of VS 2017.Once your identity
    is verified, you need to accept the subscription agreement to complete your application.
    At this point, it’s a good idea to spend a few minutes quickly scanning through
    the agreement terms and offer details, links to both of which are given in the
    Agreement section of the application form. Once you’ve accepted the agreement
    and clicked the Sign Up button, you will be redirected to the subscriber’s page.
    Here, click the Start Managing My Service button to go to the Azure portal. First-time
    users of the Azure portal are encouraged to get a little tour, as shown in Figure
    [5-4](#Fig4). It is a good idea to take a tour and become familiar with the dashboard.![A458845_1_En_5_Fig4_HTML.jpg](A458845_1_En_5_Fig4_HTML.jpg)Figure
    5-4The options for first-time users to take a tour of the Azure portal. If it
    is your first time on Azure portal, it is highly recommended to take a quick short
    tour of the portal.You are then redirected to the dashboard, as shown in Figure
    [5-5](#Fig5), which gives you the step-by-step process in a wizard-like interface
    to create new resources.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://azure.microsoft.com/en-in/free](https://azure.microsoft.com/en-in/free)并单击“开始免费”按钮，如图
    [5-2](#Fig2) 所示。![A458845_1_En_5_Fig2_HTML.jpg](A458845_1_En_5_Fig2_HTML.jpg)图
    5-2 Azure 门户免费订阅屏幕Microsoft希望鼓励像您这样的新开发人员和架构师使用 Azure 账户。一旦您创建了 Azure 账户，您将获得$200的信用额度，您可以在为期30天的试用期内最终使用此信用额度来探索其他
    Azure 产品，例如在 Azure VM 上测试和部署应用程序，获取有关您的数据的深入信息，等等。除了$200外，您每个月还将获得$50的专业 Visual
    Studio 2017 版本使用费。提示这些额外的免费赠品肯定有助于消耗其他 Azure 服务，并使您的应用程序更加有趣。在本书的过程中，我们还使用这些资金来消费其他
    IOT 服务。单击“开始免费”将您重定向到图 [5-3](#Fig3) 中显示的表单。填写获取 Azure 账户的详细信息。![A458845_1_En_5_Fig3_HTML.jpg](A458845_1_En_5_Fig3_HTML.jpg)图
    5-3 注册免费 Azure 订阅的表单填写表格，输入个人详细信息、电话和信用卡详细信息，然后单击“注册”。重要的是要注意，电话和卡详细信息仅用于验证您的身份。不会对卡收取任何费用。同样重要的是要知道
    Azure 不会默认将您的级别（从免费到付费）升级。相反，一旦试用期结束，服务就会停止，但您的账户仍然存在。您随时可以再次返回，访问您的账户并使用服务。您还可以使用创建免费账户时收到的信用额度以及专业版
    VS 2017。一旦验证了您的身份，您需要接受订阅协议以完成申请。在这一点上，花几分钟快速浏览协议条款和优惠详情是个好主意，申请表格的“协议”部分提供了两者的链接。一旦您接受了协议并单击了“注册”按钮，您将被重定向到订阅者页面。在这里，单击“开始管理我的服务”按钮即可转到
    Azure 门户。首次使用 Azure 门户的用户被鼓励进行一次简短的旅游，如图 [5-4](#Fig4) 所示。熟悉仪表板是个好主意。![A458845_1_En_5_Fig4_HTML.jpg](A458845_1_En_5_Fig4_HTML.jpg)图
    5-4 首次用户在 Azure 门户中进行浏览的选项。如果这是您第一次使用 Azure 门户，强烈建议您快速浏览一下门户。然后，您将被重定向到仪表板，如图
    [5-5](#Fig5) 所示，该仪表板以向导式界面逐步介绍了创建新资源的过程。
- en: Getting the Subscription Key from Azure Portal
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 Azure 门户获取订阅密钥
- en: Creating the Azure account is a one-time activity. If you already have an Azure
    account, you can directly access the Azure portal to get the subscription keys.![A458845_1_En_5_Fig5_HTML.jpg](A458845_1_En_5_Fig5_HTML.jpg)Figure
    5-5The Azure portal dashboardSearch for Cognitive Services at the top and you
    are redirected to the Cognitive Service page, as shown in Figure [5-6](#Fig6).
    If this is your first time on the page, no cognitive service have been created.![A458845_1_En_5_Fig6_HTML.jpg](A458845_1_En_5_Fig6_HTML.jpg)Figure
    5-6No keys and subscription associated for the first-time usersClick Add and the
    search for the Computer Vision API. Then fill in the details shown in Figure [5-7](#Fig7).![A458845_1_En_5_Fig7_HTML.jpg](A458845_1_En_5_Fig7_HTML.jpg)Figure
    5-7The blade of the Azure portal for creating the computer vision subscription
    keyOnce all the fields are filled in, click the Create button as shown in Figure
    [5-7](#Fig7). It will take a few seconds to a minute for your new account to be
    created and deployed to the selected resource group. You can track the deployment
    status in the Alerts menu in the top-right corner of the portal. Once it’s done,
    the Alert menu shows a confirmation, as shown in Figure [5-8](#Fig8).![A458845_1_En_5_Fig8_HTML.jpg](A458845_1_En_5_Fig8_HTML.jpg)Figure
    5-8The notification of successful creation of the computer vision in Azure portalThis
    confirms the one-time process of creating the keys. You can now click the Go the
    Resource link and select Computer Vision to get the keys. Scroll down a bit to
    find the Keys option under Resource Management. Clicking this option will reveal
    two subscription keys created especially for you, as shown in Figure [5-9](#Fig9).
    Copy one of the two keys and keep it handy. You are going to need it soon.![A458845_1_En_5_Fig9_HTML.jpg](A458845_1_En_5_Fig9_HTML.jpg)Figure
    5-9The computer vision keys generated in the Azure account
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Azure 帐户是一次性活动。如果您已经拥有 Azure 帐户，可以直接访问 Azure 门户以获取订阅密钥。![A458845_1_En_5_Fig5_HTML.jpg](A458845_1_En_5_Fig5_HTML.jpg)图
    5-5 Azure 门户仪表板在顶部搜索认知服务，您将被重定向到认知服务页面，如图 [5-6](#Fig6) 所示。如果这是您第一次访问页面，则尚未创建认知服务。![A458845_1_En_5_Fig6_HTML.jpg](A458845_1_En_5_Fig6_HTML.jpg)图
    5-6 首次用户没有关联密钥和订阅点击“添加”，然后搜索计算机视觉 API。然后填写图 [5-7](#Fig7) 中显示的详细信息。![A458845_1_En_5_Fig7_HTML.jpg](A458845_1_En_5_Fig7_HTML.jpg)图
    5-7 Azure 门户的计算机视觉订阅密钥刀片填写所有字段后，点击如图 [5-7](#Fig7) 所示的“创建”按钮。新帐户的创建和部署需要几秒钟到一分钟。您可以在门户右上角的“警报”菜单中跟踪部署状态。完成后，警报菜单显示一个确认，如图
    [5-8](#Fig8) 所示。![A458845_1_En_5_Fig8_HTML.jpg](A458845_1_En_5_Fig8_HTML.jpg)图
    5-8 Azure 门户中计算机视觉成功创建的通知这证实了创建密钥的一次性过程。现在您可以单击“转到资源”链接，然后选择计算机视觉以获取密钥。向下滚动一点，找到“资源管理”下的“密钥”选项。单击此选项将显示专为您创建的两个订阅密钥，如图
    [5-9](#Fig9) 所示。复制其中一个密钥并使其随身携带。您很快就会需要它。![A458845_1_En_5_Fig9_HTML.jpg](A458845_1_En_5_Fig9_HTML.jpg)图
    5-9 Azure 帐户中生成的计算机视觉密钥
- en: Testing the API
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试 API
- en: It is now important to test whether the subscription keys are working correctly
    before you use them in your application later in the chapter. The easiest way
    to do this is to validate them with any of the free GUI testing tools. We personally
    prefer Postman, which is easier and handy to use. Just call the HTTP API provided
    by the computer vision and use one of the subscription keys as a value for the
    request header as Ocp-Apim-Subscription-Key , as shown in Figure [5-10](#Fig10).![A458845_1_En_5_Fig10_HTML.jpg](A458845_1_En_5_Fig10_HTML.jpg)Figure
    5-10The Postman tool for testing the computer vision APIThe Ocp-Apim-Subscription-Key
    key has been used by Microsoft Cognitive Services to assume its value as a subscription.
    It is important to remember this, as we are going to use this key while calling
    any Microsoft Cognitive Services. Pick one of the images from your desktop; I
    chose the image shown in Figure [5-11](#Fig11). Click on the Send button on Postman
    to call your API. If all the request parameters are correctly set, you should
    get a 200 status.![A458845_1_En_5_Fig11_HTML.jpg](A458845_1_En_5_Fig11_HTML.jpg)Figure
    5-11Image used in Postman to test the subscription keyThe JSON response for this
    image should be:{"description":{"tags":["person","indoor","boy","young","child","little","standing","small","man","front","holding","shirt","wearing","table","room","girl","playing","suitcase","luggage","red","video","living","remote","people"],"captions":[{"text":"a
    young boy standing in a room","confidence":0.74894680759015353}]},"requestId":"f1f9b0fa-d0cf-4e17-9cd2-9d87b8c1c53c","metadata":{"width":441,"height":662,"format":"Jpeg"}}As
    you see, the text caption shows "a young boy standing in a room". Isn’t this really
    accurate! Think about how useful this is, in just a single call. These insights
    can be tremendously beneficial in quite a number of use cases, such as security,
    creating a visual impaired solution for the blind, and so on. Now you are all
    set to use the same cognitive services to do more interesting work. The first
    thing we should do is get familiar with calling these cognitive services in Visual
    Studio.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章后面使用订阅密钥之前，现在重要的是测试订阅密钥是否正常工作。 最简单的方法是使用任何免费的 GUI 测试工具验证它们。 我们个人偏爱 Postman，这个工具更容易使用，也更方便。
    只需调用计算机视觉提供的 HTTP API，并将其中一个订阅密钥作为请求标头的值（如Ocp-Apim-Subscription-Key），如图[5-10](#Fig10)所示。![A458845_1_En_5_Fig10_HTML.jpg](A458845_1_En_5_Fig10_HTML.jpg)图5-10用于测试计算机视觉
    API 的 Postman 工具Ocp-Apim-Subscription-Key密钥已被 Microsoft Cognitive Services 使用以假定其值为订阅。
    需要记住这一点，因为我们将在调用任何 Microsoft Cognitive Services 时使用此密钥。 从桌面上选择一张图片； 我选择了图[5-11](#Fig11)中显示的图片。
    在 Postman 上单击“发送”按钮来调用 API。 如果所有请求参数都设置正确，您应该会收到一个 200 状态。![A458845_1_En_5_Fig11_HTML.jpg](A458845_1_En_5_Fig11_HTML.jpg)图5-11用于测试订阅密钥的
    Postman 中使用的图片此图片的 JSON 响应应为：{"description":{"tags":["person","indoor","boy","young","child","little","standing","small","man","front","holding","shirt","wearing","table","room","girl","playing","suitcase","luggage","red","video","living","remote","people"],"captions":[{"text":"a
    young boy standing in a room","confidence":0.74894680759015353}]},"requestId":"f1f9b0fa-d0cf-4e17-9cd2-9d87b8c1c53c","metadata":{"width":441,"height":662,"format":"Jpeg"}}正如您所见，文本标题显示“一个年轻男孩站在一个房间里”。
    这真的很准确！ 想想看，这有多有用，仅仅一个调用就可以。 这些见解在许多用例中都可以带来巨大的好处，比如安全性、为盲人创建视觉障碍解决方案等。 现在，您已经准备好使用相同的认知服务来做更多有趣的工作了。
    我们应该首先熟悉在 Visual Studio 中调用这些认知服务。
- en: Creating Your First Smart Cognitive Application
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建您的第一个智能认知应用程序
- en: (This section assumes you already have VS 2017 installed.) Open Visual Studio
    2017\. From the File menu, point to New and then click Project. In the New Project
    dialog box, expand the Visual C# node in the Project Types tree. You’ll see various
    templates under it. As we want to quickly create our first cognitive application,
    select Windows Classic Desktop under Visual C#. Select the Console App (.NET Framework).
    Give your project a name, such as myFirstCognitiveApp, as shown in Figure [5-12](#Fig12),
    and click OK to create a new console-based project in Visual Studio 2017.![A458845_1_En_5_Fig12_HTML.jpg](A458845_1_En_5_Fig12_HTML.jpg)Figure
    5-12The VS 2017 new project templateNoteFrom here on, we assume that you understand
    how to create a new project using Visual Studio 2017\. Going forward, we will
    simply ask you to create a new project in VS, specifying the template and any
    specific project name (if required).Open the Solution Explorer and rename the
    Program.cs file to CognitiveApp.cs. In the Project menu, click Add Reference.
    In the Add Reference dialog box, click the Framework tab and add references to
    the following assemblies, as shown in Figure [5-13](#Fig13).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: （本节假设您已经安装了VS 2017。） 打开Visual Studio 2017。 从“文件”菜单，指向“新建”，然后单击“项目”。 在“新建项目”对话框中，展开“Visual
    C#”节点下的“项目类型”树。 您会看到其中的各种模板。 由于我们想快速创建我们的第一个认知应用程序，请选择“Visual C#”下的“Windows经典桌面”，选择“控制台应用程序（.NET
    Framework）”。 给您的项目命名，例如myFirstCognitiveApp，如图[5-12](#Fig12)所示，并单击“确定”以在Visual
    Studio 2017中创建一个新的基于控制台的项目。 ![A458845_1_En_5_Fig12_HTML.jpg](A458845_1_En_5_Fig12_HTML.jpg)图5-12VS
    2017新项目模板注释从这里开始，我们假设您知道如何使用Visual Studio 2017创建新项目。 今后，我们将简单地要求您在VS中创建一个新项目，指定模板和任何特定项目名称（如果需要）。
    打开“解决方案资源管理器”并将“Program.cs”文件重命名为“CognitiveApp.cs”。 在“项目”菜单中，单击“添加引用”。 在“添加引用”对话框中，单击“框架”选项卡，并像图[5-13](#Fig13)中所示添加对以下程序集的引用。
- en: System.Web
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: System.Web
- en: System.Configuration
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: System.Configuration
- en: System.Net.Http
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: System.Net.Http
- en: '![A458845_1_En_5_Fig13_HTML.jpg](A458845_1_En_5_Fig13_HTML.jpg)Figure 5-13The
    Add Reference dialog box in Visual Studio 2017'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '![A458845_1_En_5_Fig13_HTML.jpg](A458845_1_En_5_Fig13_HTML.jpg)图5-13Visual
    Studio 2017中的添加引用对话框框'
- en: Steps for Consuming the Cognitive API
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消耗认知API的步骤
- en: 'Create a new function called DescribeImage that takes images, calls our cognitive
    API, and returns the result from the API as a string. In order to do this, your
    function would follow these series of steps:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为DescribeImage的新函数，该函数接受图像，调用我们的认知API，并将API的结果作为字符串返回。 为了实现这一点，您的函数应该按照以下一系列步骤进行操作：
- en: Step 1\. Create the HTTP client to make HTTP calls.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第1步。 创建HTTP客户端以进行HTTP调用。
- en: Step 2\. Build the HTTP request object with appropriate parameters.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第2步。 使用适当的参数构建HTTP请求对象。
- en: Step 3\. Call the Computer Vision API by passing the HTTP request created in
    Step 2 and getting the response back from the API.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第3步。 通过传递第2步中创建的HTTP请求调用计算机视觉API，并从API获取响应。
- en: Your function signature should look like the following:public static async Task<string>
    DescribeImage(string imageFilePath)If you look at this signature, you’ll observe
    that the function has been marked as static and async. The function has been marked
    static so that you can directly call it from the main function. Here, we use C#’s
    async programming while calling the API to make the user experience smoother and
    more responsive.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你的函数签名应该像下面这样：public static async Task<string> DescribeImage(string imageFilePath)。如果你看这个签名，你会注意到这个函数已经被标记为
    static 和 async。这个函数被标记为 static 是为了你可以直接从主函数调用它。在这里，我们使用 C# 的 async 编程来调用 API，以使用户体验更加流畅和响应更快。
- en: Build the HttpClient Instance
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建 HttpClient 实例
- en: The first and most important step for calling the Cognitive API from Visual
    Studio is to build the httpClient instance. The HttpClient class resides in the
    System.Net.Http namespace. Its instance is required to get, post, put, and delete
    HTTP calls. There are multiple ways to instantiate httpclient. Creating an instance
    inside a using block automatically disposes the object at the end of the block.
    Disposing of I/O-intensive objects appropriately is important because the system
    resources they use aren’t kept reserved and are immediately made available to
    other programs. Your httpclient instantiation should look like this:using (HttpClient
    myhttpClient = new HttpClient())
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Visual Studio 调用认知 API 的第一步也是最重要的一步是构建 httpClient 实例。HttpClient 类位于 System.Net.Http
    命名空间中。它的实例用于发起、发送、修改和删除 HTTP 调用。有多种实例化 httpclient 的方法。在 using 块内创建实例会在块结束时自动释放对象。适当地释放
    I/O 密集型对象非常重要，因为它们所使用的系统资源不会被保留，而是立即提供给其他程序使用。你的 httpclient 实例化应该像这样：using (HttpClient
    myhttpClient = new HttpClient())
- en: Build the Http Request Object with Appropriate Parameters
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用适当的参数构建 Http 请求对象
- en: Now that you have created the httpClient instance, the next step is to pass
    the subscription key in the header and the image as multipart form data content.
    In order to pass the subscription key as a header, you need a unique header key
    named Ocp-Apim-Subscription-Key, which is used across all cognitive services to
    recognize its value as a subscription key. You can create the key-value pair or
    hard code it. Instead, we recommend storing the subscription key in the configuration
    file, which will prevent any recompilation due to a change in the subscription
    key. You can add it to httpclient instance created in the previous steps. Your
    code should look like this:myHttpClient.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key",
    ConfigurationManager.AppSettings["AzureSubscriptionKeyVision"]);The next step
    is to pass the image as multipart form data content to the httpclient. The .NET
    Framework provides the container class MultipartFormDataContent, which resides
    in the System.net.http namespace, to do the honors.using (MultipartFormDataContent
    reqContent = new MultipartFormDataContent())It’s better to instantiate these objects
    using using to get them automatically disposed of. Once the container class is
    created, you can read the entire image in the body in the byte format and add
    it to the multipartFormDataContent instance, as shown here. The File.ReadAllBytes()
    method takes in the absolute path of a file and returns its byte sequence.var
    imgContent = new ByteArrayContent(System.IO.File.ReadAllBytes(imageFilePath));                        reqContent.Add(imgContent);
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经创建了 httpClient 实例，下一步是将订阅密钥传递到标头并将图像作为多部分表单数据内容。为了将订阅密钥作为标头传递，您需要一个名为 Ocp-Apim-Subscription-Key
    的唯一标头键，该键在所有认知服务中都用于识别其值作为订阅密钥。您可以创建键值对或将其硬编码。但我们建议将订阅密钥存储在配置文件中，这将防止由于订阅密钥更改而导致的重新编译。您可以将其添加到之前步骤中创建的
    httpclient 实例中。您的代码应如下所示：myHttpClient.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key",
    ConfigurationManager.AppSettings["AzureSubscriptionKeyVision"]);下一步是将图像作为多部分表单数据内容传递给
    httpclient。.NET Framework 提供了位于 System.net.http 命名空间中的容器类 MultipartFormDataContent
    来执行此操作。使用 using 实例化这些对象可以更好地自动处理它们的释放。创建容器类后，您可以以字节格式读取整个图像并将其添加到 multipartFormDataContent
    实例中，如下所示。File.ReadAllBytes() 方法接受文件的绝对路径并返回其字节序列。var imgContent = new ByteArrayContent(System.IO.File.ReadAllBytes(imageFilePath));reqContent.Add(imgContent);
- en: Calling Microsoft Cognitive Vision API
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用 Microsoft Cognitive Vision API
- en: Now you are all set to call the Cognitive Vision API. For the httpclient to
    make a POST call to the Cognitive Vision API, you need to provide it the correct
    HTTP address of the Cognitive API and the API in the multipartFormDataContent
    object. Specify the address as shown here by setting maxCandidates as 1, which
    ensures that only one description is returned from the API.var queryString = HttpUtility.ParseQueryString(string.Empty);                    queryString["maxCandidates"]
    = "1";var uri = "https://westcentralus.api.cognitive.microsoft.com/vision/v1.0/describe/?"
    + queryString;The next step is to call the Microsoft Cognitive API in an asynchronous
    manner, passing the address and the multiform data content, as shown in this code:HttpResponseMessage  respMessage
    = await myHttpClient.PostAsync(uri, reqContent);string finalJson = await respMessage.Content.ReadAsStringAsync();                        return
    finalJson;The previous code uses the asynchronous operation while calling the
    API. It is always a best practice to call all your APIs in an asynchronous way
    to ensure your application is not unresponsive until you hear back from the API.
    The entire code of your console application should now look something like this:using
    System;using System.Collections.Generic;using System.Configuration;using System.Linq;using
    System.Net.Http;using System.Text;using System.Threading.Tasks;using System.Web;namespace
    myFirstCognitiveApp{    class CognitiveApp    {        static void Main(string[]
    args)        {            Task<string> result = DescribeImage(@"C:\nishith\image.jpg");            Console.WriteLine(result.Result);            Console.ReadLine();        }        public
    static async Task<string> DescribeImage(string imageFilePath)        {            using
    (HttpClient myHttpClient = new HttpClient())            {                myHttpClient.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key",
    ConfigurationManager.AppSettings["AzureSubscriptionKeyVision"]);                using
    (MultipartFormDataContent reqContent = new MultipartFormDataContent())                {                    var
    queryString = HttpUtility.ParseQueryString(string.Empty);                    queryString["maxCandidates"]
    = "1";                    var uri = "https://westcentralus.api.cognitive.microsoft.com/vision/v1.0/describe/?"
    + queryString;                    try                    {                        var
    imgContent = new ByteArrayContent(System.IO.File.ReadAllBytes(imageFilePath));                        reqContent.Add(imgContent);                        HttpResponseMessage  respMessage
    = await myHttpClient.PostAsync(uri, reqContent);                        string
    finalJson = await respMessage.Content.ReadAsStringAsync();                        return
    finalJson;                    }                    catch (System.IO.FileNotFoundException
    ex)                    {                        return "The specified image file
    path is invalid.";                    }                    catch (ArgumentException
    ex)                    {                        return "The HTTP request object
    does not seem to be correctly formed.";                    }                }            }        }    }}
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经准备好调用认知视觉 API 了。为了使 httpclient 能够向认知视觉 API 发送 POST 请求，你需要为其提供正确的认知 API
    的 HTTP 地址和 multipartFormDataContent 对象中的 API。按照此处所示的设置 maxCandidates 为 1 来指定地址，这确保只从
    API 返回一个描述。var queryString = HttpUtility.ParseQueryString(string.Empty); queryString["maxCandidates"]
    = "1"; var uri = "https://westcentralus.api.cognitive.microsoft.com/vision/v1.0/describe/?"
    + queryString; 下一步是以异步方式调用 Microsoft 认知 API，传递地址和多形式数据内容，如下所示的代码所示：HttpResponseMessage
    respMessage = await myHttpClient.PostAsync(uri, reqContent); string finalJson
    = await respMessage.Content.ReadAsStringAsync(); return finalJson; 上述代码在调用 API
    时使用了异步操作。始终最好以异步方式调用所有 API，以确保在从 API 听到回音之前，您的应用程序不会无响应。现在，您的控制台应用程序的整个代码应如下所示：using
    System; using System.Collections.Generic; using System.Configuration; using System.Linq;
    using System.Net.Http; using System.Text; using System.Threading.Tasks; using
    System.Web; namespace myFirstCognitiveApp { class CognitiveApp { static void Main(string[]
    args) { Task<string> result = DescribeImage(@"C:\nishith\image.jpg"); Console.WriteLine(result.Result);
    Console.ReadLine(); } public static async Task<string> DescribeImage(string imageFilePath)
    { using (HttpClient myHttpClient = new HttpClient()) { myHttpClient.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key",
    ConfigurationManager.AppSettings["AzureSubscriptionKeyVision"]); using (MultipartFormDataContent
    reqContent = new MultipartFormDataContent()) { var queryString = HttpUtility.ParseQueryString(string.Empty);
    queryString["maxCandidates"] = "1"; var uri = "https://westcentralus.api.cognitive.microsoft.com/vision/v1.0/describe/?"
    + queryString; try { var imgContent = new ByteArrayContent(System.IO.File.ReadAllBytes(imageFilePath));
    reqContent.Add(imgContent); HttpResponseMessage respMessage = await myHttpClient.PostAsync(uri,
    reqContent); string finalJson = await respMessage.Content.ReadAsStringAsync();
    return finalJson; } catch (System.IO.FileNotFoundException ex) { return "指定的图像文件路径无效。";
    } catch (ArgumentException ex) { return "HTTP 请求对象似乎没有正确形成。"; } } } } } }}
- en: The Result of Your Code
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Build the project and correct any syntax errors if necessary. In Visual Studio,
    pressing F5 or Ctrl+F5 will run your program. This program, being part of a console
    application, will open and run inside the command prompt. Figure [5-14](#Fig14)
    shows the same result in a console window against the child image that we used
    in the Postman example.![A458845_1_En_5_Fig14_HTML.jpg](A458845_1_En_5_Fig14_HTML.jpg)Figure
    5-14The output in the console windowCongratulations! You are finally not just
    able to call cognitive applications but have a clear understanding of the steps
    required to call the Cognitive API. Similar steps need to be performed in the
    next chapters for consuming cognitive services, so it’s better to revise the steps
    once again before marching ahead in our journey of creating smarter applications.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Let’s Do Something a Little More Interesting
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go back to your Console application and replaceTask<string> result = DescribeImage(@"C:\nishith\image.jpg");WithTask<string>
    result = DescribeImage(@"C:\nishith\mahatma.jpg");Then run the application. What
    we did in this code was replace the image of the child with the father of a nation,
    Mahatma Gandhi, as shown in Figure [5-15](#Fig15).![A458845_1_En_5_Fig15_HTML.jpg](A458845_1_En_5_Fig15_HTML.jpg)Figure
    5-15The image of Mahatma Gandhi, which now we are passing to the console application
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: The Output
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you see in Figure [5-16](#Fig16), the caption returned is “Mahatma Gandhi
    wearing glasses posing for the camera”.![A458845_1_En_5_Fig16_HTML.jpg](A458845_1_En_5_Fig16_HTML.jpg)Figure
    5-16The output of passing the Mahatma Gandhi imageThis same cognitive service
    API that could describe the image is able to recognize Steve Jobs. Isn’t this
    amazing? What’s the trick? Under the covers, Microsoft has a celebrity recognition
    image classification model that spans more than 200,000 celebrities from various
    verticals like industry, politics, sports, and entertainment. Whenever any call
    is made to Microsoft Cognitive Vision API, a check is performed to see if the
    person detected is part of this classification model or not.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在图 [5-16](#Fig16) 中所见，返回的标题是“戴眼镜摆姿势的圣雄甘地”。![A458845_1_En_5_Fig16_HTML.jpg](A458845_1_En_5_Fig16_HTML.jpg)图
    5-16 传递圣雄甘地图像的输出。这个能够描述图像的同一个认知服务 API 能够识别史蒂夫·乔布斯。这不是令人惊讶吗？这是什么技巧？在幕后，微软拥有一个跨越工业、政治、体育和娱乐等各个领域的超过
    200,000 名名人的名人识别图像分类模型。每当对微软认知视觉 API 进行调用时，都会执行一个检查，看看检测到的人是否是这个分类模型的一部分。
- en: Your Next Tasks
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你的下一个任务
- en: Each of the 29 cognitive APIs is very powerful. Some of these APIs are multitaskers
    and do more than one task. Our Computer Vision API, for example, is one of the
    most powerful APIs under the Vision category. As you have seen in the previous
    simple examples, the computer vision API is not just able to describe the scene
    for us, but it can also identify the celebrities. Give it a try with some landmarks
    in your city/country and see if the Computer Vision API can recognize things.
    Apart from scene recognition and identifying celebrities, it can be used to accomplish
    the following tasks
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 每一个 29 个认知 API 都非常强大。其中一些 API 是多任务处理程序，可以执行多项任务。例如，我们的计算机视觉 API 是视觉类别下最强大的 API
    之一。正如你在之前的简单示例中所看到的那样，计算机视觉 API 不仅能够为我们描述场景，还能识别名人。试试在你所在城市/国家的一些地标上进行尝试，看看计算机视觉
    API 是否能够识别事物。除了场景识别和识别名人之外，它还可以用来完成以下任务
- en: Provide an image and generate thumbnails
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供一张图像并生成缩略图
- en: Extract a printed or handwritten text from an image
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从图像中提取打印或手写文本
- en: Analyze a video in real time, frame by frame
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时分帧分析视频
- en: We suggest that you modify this program and try it with various images and test
    functionalities by tweaking the code a bit. You will be amazed to see how the
    Microsoft Cognitive Vision API can do all these tasks with great finesse.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议您修改这个程序，并尝试使用各种图像，并通过稍微调整代码来测试功能。您会惊讶地发现微软认知视觉 API 如何以出色的技巧完成所有这些任务。
- en: Recap
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about the prerequisites required to consume the
    Cognitive API. This was followed by a stepwise approach to getting your subscription
    key. You then learned about the approach of calling the Microsoft Cognitive API
    with a detail code walkthrough in Visual Studio. You also got an idea about the
    various possibilities of tasks that can be achieved by just calling Microsoft
    Cognitive API. In the next chapter, we use the other Microsoft Cognitive APIs
    to extend our hospital use case and learn how to use Microsoft Cognitive APIs
    to turn a regular hospital into a smart one.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你了解了消费认知 API 所需的先决条件。接着是一个分步获取订阅密钥的过程。然后你学习了在 Visual Studio 中通过详细代码演示调用
    Microsoft 认知 API 的方法。你还对通过调用 Microsoft 认知 API 可以实现的各种任务有了一个概念。在下一章中，我们将使用其他 Microsoft
    认知 API 来扩展我们的医院用例，并学习如何使用 Microsoft 认知 API 将普通医院转变为智能医院。
