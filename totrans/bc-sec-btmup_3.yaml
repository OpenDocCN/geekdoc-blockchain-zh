- en: CHAPTER 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Infrastructure
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](c03.xhtml) explored blockchains at the theoretical, protocol level.
    Like HTTP, these protocols define how different systems should interact to achieve
    a particular goal.'
  prefs: []
  type: TYPE_NORMAL
- en: While the blockchain theory described in a blockchain's white paper fully defines
    how the system should work, blockchains need to be implemented to be usable. This
    creates a reliance on underlying infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain protocols can be implemented in various different ways. For example,
    Bitcoin could be run using pen, paper, and carrier pigeon; however, this approach
    would create a very slow and unusable system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Blockchain technology relies on modern IT equipment. This includes implementing
    blockchain as software running on blockchain nodes and communicating over computer
    networks.  ## Nodes'
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain systems are implemented as software. This software runs on computers
    called *nodes*.
  prefs: []
  type: TYPE_NORMAL
- en: While a blockchain may have very strong security at the theoretical level, implementing
    the protocols as code introduces additional risks. Blockchain software could contain
    business logic or implementation errors or be vulnerable to attacks by other software
    operating within the same environment.
  prefs: []
  type: TYPE_NORMAL
- en: '### Inside a Blockchain Node'
  prefs: []
  type: TYPE_NORMAL
- en: 'A blockchain node is just software running on a computer. However, a blockchain
    node may have many different responsibilities. The following roles are among those
    that a blockchain node may fulfill:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ledger Storage:** Every node in the blockchain network can maintain a copy
    of the blockchain''s digital ledger. This requires the ability to store the contents
    of the ledger and access the contents of transactions or blocks as needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Block Production:** The blockchain''s digital ledger is updated by blocks
    containing collections of transactions. A blockchain node may participate in the
    consensus process and the creation and distribution of block candidates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Block Validation:** Blockchains are designed to perform decentralized validation
    of the transactions stored on the blockchain''s digital ledger. A blockchain node
    is expected to validate each block it receives before adding the block to its
    copy of the digital ledger.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Smart Contract Execution:** Smart contract platforms allow programs to run
    on top of the digital ledger. Nodes in a smart contract platform host a virtual
    machine and execute code within it as part of the process of validating blocks
    and updating the digital ledger.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not every node in the blockchain network fulfills all of these roles. For example,
    a node may elect not to participate in consensus and block production.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, meeting the needs of the blockchain network requires significant resources
    on behalf of the blockchain node. Attacks against these nodes that disrupt access
    to these resources can have significant impacts on the performance and security
    of the blockchain network.  ### Attacking Blockchain Nodes'
  prefs: []
  type: TYPE_NORMAL
- en: 'Blockchain nodes can be attacked in various different ways. In the following
    sections, I''ll cover some of the primary threats to the security of blockchain
    nodes and their users:'
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain-specific malware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Denial-of-service attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Failure to update
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malicious inputs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software misconfigurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### *Blockchain-Specific Malware*'
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain software running on a node is also running alongside other software,
    including both legitimate programs and potential malware.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some malware variants are specifically designed to target blockchain systems.
    Some of the potential effects of these malware variants are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Theft of Private Keys:** Malware installed on a node or blockchain user''s
    computer may monitor the clipboard and scan the computer''s memory for data that
    resembles blockchain private keys. The keys can then be exfiltrated to the attacker,
    providing full control over the user''s account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transaction Modification:** Blockchain malware may be designed to make changes
    to transaction data before it is digitally signed by a user. For example, malware
    may replace the destination address of a transaction with that of the attacker
    or modify transactions to create malicious approvals for attackers to extract
    a user''s tokens from decentralized finance (DeFi) projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traffic Filtering:** A blockchain node''s view of the state of the blockchain
    and ability to participate in its operations depend on its ability to receive
    and send transactions and blocks. Malware that intercepts and filters a node''s
    blockchain traffic could feed it a false version of the state of the blockchain.
    This could trick the user into supporting a divergent blockchain that supports
    an attacker''s 51% attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Denial-of-Service Attacks:** Malware running on a node could perform a denial-of-service
    attack on that node. This could be accomplished by consuming resources, attacking
    the blockchain software process, or other means.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The security of a blockchain account and the blockchain network as a whole depends
    on the security of the blockchain software running on nodes. Malware installed
    on these nodes could disrupt their operation in various ways.
  prefs: []
  type: TYPE_NORMAL
- en: '##### Countermeasures'
  prefs: []
  type: TYPE_NORMAL
- en: 'Malware infections are a traditional IT security threat, and blockchain-specific
    malware is not very different from other variants. Traditional anti-malware solutions
    can help to protect against this threat.  ##### Case Studies'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Tron blockchain was vulnerable to DoS attacks due to the use of big decimals
    in the code.[¹](#c04-note-0001) Each load of a big decimal takes 2 to 3 minutes
    on a modern laptop and the code used 6 big decimals per request. An attacker exploiting
    this vulnerability could tie up a Tron node''s CPU and also fill up its memory,
    making the blockchain software unusable.  #### *Denial-of-Service Attacks*'
  prefs: []
  type: TYPE_NORMAL
- en: Denial-of-service (DoS) attacks can occur at most levels of the blockchain ecosystem.
    At the node level, a denial-of-service attack involves crashing the blockchain
    software running on an individual node.
  prefs: []
  type: TYPE_NORMAL
- en: DoS attacks can be performed against a node in various different ways. A node
    may be the victim of a distributed denial-of-service (DDoS) attack that overwhelms
    it with spam traffic and renders it unable to respond to legitimate requests.
    Malware installed on a node could consume memory or computational resources to
    hinder blockchain-related processes. Blockchain transactions may be specially
    crafted to consume resources and crash blockchain nodes.
  prefs: []
  type: TYPE_NORMAL
- en: A DoS attack can hurt both the blockchain node and the network as a whole. A
    blockchain node targeted by a DoS attack may no longer be able to participate
    in the blockchain network. The loss of this node could also impact the security
    and performance of the blockchain network by rendering it unable to participate
    in consensus and block production.
  prefs: []
  type: TYPE_NORMAL
- en: '##### Countermeasures'
  prefs: []
  type: TYPE_NORMAL
- en: 'Denial-of-service attacks can come from both inside and outside the blockchain
    ecosystem. Nodes can deploy traditional anti-DDoS and anti-malware solutions to
    protect against external threats. Inside the blockchain ecosystem, systems must
    be designed to protect against malicious transactions designed to consume resources
    and overwhelm blockchain nodes.  ##### Case Studies'
  prefs: []
  type: TYPE_NORMAL
- en: 'Denial-of-service attacks have been performed multiple different times against
    blockchain networks by exploiting software flaws. A flaw in the Bitcoin Core codebase
    enabled an attacker to either perform a denial-of-service attack against nodes
    or inflate the cryptocurrency by using the same Bitcoin in multiple transactions.[²](#c04-note-0002)
    This vulnerability was enabled by poor code review of the Bitcoin Core software
    and was patched before it was exploited on the Bitcoin blockchain. However, other
    blockchains forked the Bitcoin Core software and were vulnerable to the same attacks
    as a result. The Pigeoncoin cryptocurrency became famous as a blockchain attacked
    using this vulnerability, enabling the attacker to print 235 million Pigeoncoins
    (nearly a quarter of the intended maximum supply).  #### *Failure to Update*'
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain software is software, and all software occasionally needs updates.
    The updates may be designed to add functionality or correct issues identified
    with earlier releases.
  prefs: []
  type: TYPE_NORMAL
- en: Update and patch management is a significant challenge in the traditional IT
    space. This leads to attackers scanning for and exploiting publicly known vulnerabilities
    for which patches are available.
  prefs: []
  type: TYPE_NORMAL
- en: However, blockchain decentralization exacerbates the update and patch management
    process. The security of the blockchain network depends on the security of the
    nodes in the network, but no centralized authority exists with the power to compel
    nodes to make updates.
  prefs: []
  type: TYPE_NORMAL
- en: This problem is exacerbated by the fact that some updates to blockchain protocols
    may be controversial. For example, Bitcoin Cash forked from Bitcoin over the SegWit
    upgrade, and Ethereum Classic diverged due to Ethereum's response to the DAO hack.
  prefs: []
  type: TYPE_NORMAL
- en: 'Blockchain nodes face several update-related security risks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Node Exploitation:** Some blockchain software updates are designed to correct
    security vulnerabilities that place blockchain nodes at risk. If a node fails
    to install an update, it may be exploited by an attacker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blockchain Forks:** Blockchain is governed by the longest chain rule, which
    states that the longest version of two conflicting versions of the blockchain
    should be accepted. If an update contains a hard fork, nodes that have and have
    not installed the update may follow different blockchain forks. This can cause
    disruption and increases a blockchain network''s exposure to consensus attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Malicious Updates:** Blockchain software is commonly developed under an open-source
    model with contributions accepted from third parties. Attackers may insert malicious
    functionality into blockchain code that is distributed as part of a software update.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software updates are essential to maintaining the security of the blockchain
    and expanding its functionality. However, often blockchain developers need to
    walk a fine line between encouraging nodes to install updates and publicizing
    vulnerabilities when enough blockchain nodes are vulnerable that attacks could
    disrupt the functioning of the blockchain network.
  prefs: []
  type: TYPE_NORMAL
- en: '##### Countermeasures'
  prefs: []
  type: TYPE_NORMAL
- en: 'Blockchain software often operates under Linus''s law, which states that “given
    enough eyeballs, all bugs are shallow.” However, this only applies if qualified
    developers actually audit the code. Blockchain software should follow secure development
    practices to ensure that updates are high quality, and nodes should install updates
    as soon as they are available.  ##### Case Studies'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Ethereum Parity client had an integer overflow vulnerability up to version
    2.2.10 that would allow an attacker to remotely crash Parity nodes.[³](#c04-note-0003)
    A month after the vulnerability was announced, 40 percent of Parity nodes still
    had not applied the patch. These nodes represented 15 percent of all Ethereum
    nodes at the time, so exploitation of the vulnerability could have had a noticeable
    impact on the performance and security of the Ethereum network.  #### *Malicious
    Inputs*'
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain software is designed to process untrusted input. Users have the ability
    to submit transactions to the blockchain that will be processed and possibly executed
    by the blockchain software.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, all of this processing is performed within the blockchain's isolated
    virtual machine. However, if the code that processes transactions, smart contract
    code, or blocks contains a vulnerability, an attacker may be able to exploit it
    to attack the blockchain network or break out of the sandboxed blockchain environment.
  prefs: []
  type: TYPE_NORMAL
- en: These injection attacks can have significant impacts on a node or the rest of
    the network. A blockchain breakout could allow an attacker to access the underlying
    host, potentially causing it to crash or allowing the attacker to take it over.
  prefs: []
  type: TYPE_NORMAL
- en: Attacks on blockchain nodes could also affect the blockchain network as a whole.
    For example, exploitation of a DoS vulnerability that causes vulnerable nodes
    to crash could make it easier for an attacker to perform a 51% attack against
    the network due to the significant reduction in the network's hashpower.
  prefs: []
  type: TYPE_NORMAL
- en: '##### Countermeasures'
  prefs: []
  type: TYPE_NORMAL
- en: 'Malicious inputs and injection vulnerabilities are enabled by poor input validation.
    Any code that accepts and processes untrusted user input should verify that the
    input is valid before processing it.  ##### Case Studies'
  prefs: []
  type: TYPE_NORMAL
- en: This sort of attack could have happened to users of the EOS distributed ledger
    software. Pre-launch, researchers from security firm Qihoo 360 examined the EOS
    source code and identified a failure to correctly check the bounds of an array
    before writing to it.[⁴](#c04-note-0004) This vulnerability was in the code that
    parsed EOS transactions, meaning that it would be exploitable by a malicious EOS
    user. The researchers ethically reported it to the EOS team, and it was corrected.
  prefs: []
  type: TYPE_NORMAL
- en: 'The impact of this vulnerability would allow an attacker to write code anywhere
    within the running EOS code. The Qihoo researchers developed proof of concept
    attacks demonstrating that it was possible to use the vulnerability to generate
    a reverse shell. This would allow the attacker to gain control over the affected
    computer with the same permissions as the EOS process. Since every node in a blockchain
    network would process all transactions included in a block, getting a malicious
    transaction included in a block would allow an attacker to exploit all nodes in
    the EOS network.  #### *Software Misconfigurations*'
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain software can contain a great deal of optional functionality. For
    example, blockchain nodes may have the opportunity to connect with external applications
    for managing private keys, performing transactions, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: With these optional features comes the risk that users may enable them without
    knowing or considering the security implications. For example, the ability to
    connect to external systems that can make transactions using a blockchain account
    is great for an order processing or logistics management system but a major problem
    if accessed by an attacker.
  prefs: []
  type: TYPE_NORMAL
- en: '##### Countermeasures'
  prefs: []
  type: TYPE_NORMAL
- en: 'Optional features in blockchain software should be disabled by default. Before
    enabling any features, users should research their purpose, how they work, and
    best practices for using and securing them.  ##### Case Studies'
  prefs: []
  type: TYPE_NORMAL
- en: An example of attackers taking advantage of this sort of tinkering is a series
    of thefts from Ethereum wallets.[⁵](#c04-note-0005) This wallet software had the
    ability to open up port 8545 to allow external software to interact with the wallet
    via remote procedure calls (RPCs). This feature is designed to allow the wallet
    to be integrated with an organization's software that would be empowered to perform
    transactions on the Ethereum blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: 'The feature is designed to be used internally, so users should block port 8545
    at the network firewall to prevent exploitation. The feature is disabled by default,
    but some hobbyists enabled it without knowing the appropriate security precautions
    to take. As a result, over $20 million in Ether was stolen from Ethereum users
    by attackers that scanned for port 8545 being open on vulnerable devices.  ###
    Threat Modeling for Blockchain Nodes'
  prefs: []
  type: TYPE_NORMAL
- en: 'Blockchain nodes have security threats that cover all of the STRIDE categories
    except repudiation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Spoofing:** Blockchain malware can steal private keys or modify transactions
    to perform actions on behalf of a blockchain account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tampering:** Malware can be used to perform eclipse/routing attacks, which
    can enable 51% attacks and rewriting of the history of the distributed ledger.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Information Disclosure:** Theft of private keys by blockchain malware can
    allow the attacker to decrypt messages intended for the account owner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Denial of Service:** Blockchain nodes can suffer DoS attacks in various ways,
    such as malware attacks or not being able to access the blockchain after a hard
    fork due to a failure to apply updates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elevation of Privileges:** Blockchain malware can steal private keys, providing
    unauthorized access to a user''s account. Exploitation of injection vulnerabilities
    with malicious inputs could provide an attacker with access to or control over
    the underlying node.  ## Networks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain nodes must be able to communicate with one another. Nodes need access
    to the latest transactions and blocks in order to perform updates to their copies
    of the blockchain's distributed ledger.
  prefs: []
  type: TYPE_NORMAL
- en: Decentralization is a core tenet of blockchain, so blockchain networks do not
    operate under a client-server model. Instead, blockchains use a peer-to-peer network
    where each node is directly connected to a few other nodes. Information percolates
    across the blockchain via multiple different hops. Any pair of nodes has multiple
    different paths linking them, making blockchain networks highly redundant and
    resilient.
  prefs: []
  type: TYPE_NORMAL
- en: Reliable, high-performance communications are essential to blockchain consensus
    and the synchronization of the blockchain network. For this reason, the security
    of the underlying network infrastructure that blockchain relies upon can have
    a significant impact on the security of the blockchain protocol itself.
  prefs: []
  type: TYPE_NORMAL
- en: '### Attacking the Blockchain Network'
  prefs: []
  type: TYPE_NORMAL
- en: 'Blockchain networks can be attacked in a few different ways. The impacts of
    these attacks range from disruptions and degraded performance to the potential
    for double-spends and attacks on blockchain consensus. Three types of network-level
    attacks against the blockchain are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Denial of service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse/routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sybil
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### *Denial-of-service Attacks*'
  prefs: []
  type: TYPE_NORMAL
- en: As a distributed, decentralized system, blockchains are supposed to be immune
    to traditional denial-of-service (DoS) attacks. In a traditional DoS attack, the
    attacker attempts to overwhelm a single point of failure or bottleneck in the
    system, resulting in degraded functionality. For example, many real-world DoS
    attacks attempt to flood a webserver with connection attempts. Once the webserver's
    connection capacity is exceeded, it can no longer accept legitimate connections.
  prefs: []
  type: TYPE_NORMAL
- en: In a fully decentralized blockchain, there is no central authority operating
    the network, so no permanent single point of failure exists. However, temporary
    single points of failure exist in many blockchain implementations, and some implementations
    are not fully decentralized. Either of these enable DoS attacks to be performed
    against the system.
  prefs: []
  type: TYPE_NORMAL
- en: An example of a temporary single point of failure is the block creator selected
    by the blockchain consensus algorithm. These algorithms are designed to ensure
    that only a single person can be selected to create a block within a given interval.
    If an attacker can predict the next block creator before they have the opportunity
    to generate and distribute a block (which is definitely possible in Proof of Stake),
    they can DoS that user. At a minimum, distribution of the block may be delayed,
    and the block may even be ignored if it is not published within the appropriate
    interval.
  prefs: []
  type: TYPE_NORMAL
- en: While the original blockchain had no permanent single points of failure, modifications
    have been made to the protocol to create them in some instances. All private and
    permissioned blockchain implementations have some level of centralization since
    someone has the ability to allow/deny access to the blockchain network or elevated
    privileges on the network. Examples of these single points of failure (which can
    be DoSed) include membership service providers (MSPs) on the Hyperledger private
    blockchain and the use of masternodes on a variety of permissioned blockchains.
  prefs: []
  type: TYPE_NORMAL
- en: '##### Countermeasures'
  prefs: []
  type: TYPE_NORMAL
- en: 'DoS attacks against block producers and other single points of failure in blockchain
    networks use traditional methods to degrade or destroy the availability of these
    systems. Anti-DDoS, anti-malware, and similar solutions can help to protect a
    node against these attacks.  ##### Case Studies'
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform a DoS attack against a block producer or other node critical to
    the blockchain''s operation, it is necessary to unmask the identity of that node.
    However, this is easier than it should be. In a 2018 talk at Devcon 4, Péter Szilágyi
    outlined a few ways in which the identity of Ethereum users can be revealed, including
    trackers and the discovery protocol used to connect light nodes to the network.[⁶](#c04-note-0006)
    With information on nodes'' IP addresses and locations, it is possible to target
    them for DDoS and other attacks.  #### *Eclipse/Routing Attacks*'
  prefs: []
  type: TYPE_NORMAL
- en: An important assumption for blockchain security is that all nodes in the network
    have a connection to one another, either directly or through a series of peer
    connections. In an eclipse or routing attack, an attacker deliberately isolates
    one or more nodes from the rest of the blockchain network. This isolation allows
    the attacker to affect the targeted nodes' view of the state of the blockchain
    ecosystem and can be used as part of several different attacks.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 4.1](#c04-fig-0001) illustrates an eclipse/routing attack on the blockchain.
    The malicious node in the center of the image controls all routes of communication
    between two segments of the blockchain network. This allows the node to control
    data flowing between these two segments.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Schematic illustration of routing attack.](images/c04f001.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**Figure 4.1**](#R_c04-fig-0001): Routing attack'
  prefs: []
  type: TYPE_NORMAL
- en: One simple use of an eclipse/routing attack is performing a double-spend attack.
    By sending different versions of the same transaction to each isolated segment
    of the network, the attacker can get users in those segments to accept and act
    upon the version they see. When the attack is completed, the isolated segments
    will reconnect and find that they have conflicting versions of history. Under
    the longest chain rule, the shorter version will be discarded, leaving only one
    version of the conflicting transactions in the official history of the network.
    Since the attacker controls how and for how long the network is split, they can
    ensure that the longer chain contains the version of history they prefer.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse/routing attacks can also be used to make a 51% attack easier to perform.
    If one isolated segment only has 60 percent of the network's hashpower, then the
    attacker only needs to control 30 percent of the hashpower to create the accepted
    version of the blockchain in that segment. Once the attacker's version is accepted
    and endorsed by that 60 percent and becomes the longest overall chain, the attacker
    can end the eclipse/routing attack. The attacker's version of the blockchain would
    then be accepted by the entire network.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse and routing attacks can be performed through a variety of different
    means. If the attack is targeting a single user (an eclipse attack), malware or
    a Sybil attack can be used to control the victim's connection to the rest of the
    blockchain network. If malware controls a node's network connection or the attacker
    controls enough Sybil accounts that all of a node's peers are malicious, then
    the attacker can filter the node's view of the blockchain network.
  prefs: []
  type: TYPE_NORMAL
- en: A means of partitioning groups of nodes from one another (a routing attack)
    is through a Border Gateway Protocol (BGP) hijack. BGP is designed to define paths
    between autonomous systems (ASs)—such as an ISP's network—on the Internet, and
    an AS will implicitly trust the authenticity of provided routes to a set of IP
    addresses. If an attacker successfully spoofs a BGP route that is shorter than
    all legitimate ones, it will be the one selected. As a result, all traffic between
    two peers (or even two sets of IP prefixes) will pass through the attacker's control
    before reaching its destination. This allows an attacker to manipulate the topology
    of the blockchain network, severing links between segments to isolate them except
    through attacker-controlled nodes.
  prefs: []
  type: TYPE_NORMAL
- en: '##### Countermeasures'
  prefs: []
  type: TYPE_NORMAL
- en: 'Eclipse and routing attacks depend on the attacker''s ability to break the
    blockchain network into multiple, isolated segments. Nodes can make this more
    difficult by deliberately selecting distributed peers, using multihomed nodes
    connected to different IP prefixes, and analyzing network statistics for slowdowns
    caused by a sudden loss of hashpower due to network partitioning.  ##### Case
    Studies'
  prefs: []
  type: TYPE_NORMAL
- en: A 2017 study found that routing attacks would be relatively easy to perform
    due to the distribution of Bitcoin nodes over the Internet.[⁷](#c04-note-0007)
    At the time, 60 percent of Bitcoin network traffic passed through three ISPs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The prevalence of BGP routing attacks meant that Bitcoin nodes were often impacted
    by these attacks. In fact, at least 100 nodes had traffic rerouted by BGP hijacking
    attacks in each month between October 2015 and March 2016, and approximately 8
    percent of Bitcoin nodes were impacted by an attack in November 2015.  #### *Sybil
    Attacks*'
  prefs: []
  type: TYPE_NORMAL
- en: Sybil attacks are simple network-level attacks designed to facilitate other
    types of attacks. In a Sybil attack, the attacker creates a large number of user
    accounts on the blockchain. [Figure 4.2](#c04-fig-0002) illustrates a Sybil attack.
  prefs: []
  type: TYPE_NORMAL
- en: '![Schematic illustration of Sybil attack.](images/c04f002.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**Figure 4.2**](#R_c04-fig-0002): Sybil attack'
  prefs: []
  type: TYPE_NORMAL
- en: Sybil attacks differ from 51% attacks in that each Sybil account doesn't necessarily
    have to have a large number of computational resources at its disposal. In fact,
    Sybil nodes can be an important component of different attacks simply by acting
    as an active account that relays received blocks and transactions to its peers.
  prefs: []
  type: TYPE_NORMAL
- en: A common example of a Sybil attack is a malicious blockchain user attempting
    to exploit a poorly designed on-chain governance system. If, in on-chain voting,
    every account on the blockchain network gets a vote, then an attacker can control
    the governance system by creating a large number of dummy accounts to participate
    in voting. For this reason, many blockchain systems using on-chain governance
    allocate voting power based upon the user's stake in the network, either directly
    or by defining certain users as masternodes based upon their ownership of a certain,
    minimum amount of the blockchain's cryptocurrency.
  prefs: []
  type: TYPE_NORMAL
- en: Sybil attacks can also be used to facilitate eclipse/routing attacks as shown
    in [Figure 4.2](#c04-fig-0002). If an attacker controls a large percentage of
    a network's accounts and nodes, other nodes are more likely to select a malicious
    node as a peer. If all routes between two nodes pass through a malicious node,
    then an attacker has the ability to filter traffic flowing between these nodes.
  prefs: []
  type: TYPE_NORMAL
- en: '##### Countermeasures'
  prefs: []
  type: TYPE_NORMAL
- en: 'Most blockchain consensus and governance algorithms are designed to protect
    against Sybil attacks by using control of a scarce asset as a proxy for votes.
    The impacts of Sybil attacks at the network level can be mitigated by following
    best practices for detecting and mitigating eclipse/routing attacks.  ##### Case
    Studies'
  prefs: []
  type: TYPE_NORMAL
- en: 'The anonymity of blockchain accounts makes it difficult to detect a Sybil attack.
    A 2019 study that simulated the effects of a Sybil attack found that Sybil nodes
    could impact blockchain performance but that malicious nodes could be detected
    by checking if a node only forwarded transactions or blocks from particular nodes.[⁸](#c04-note-0008)  ###
    Threat Modeling for Blockchain Networks'
  prefs: []
  type: TYPE_NORMAL
- en: 'Attacks on blockchain networks fall into several STRIDE threat categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tampering:** Eclipse/routing attacks can help an attacker to perform a 51%
    attack, which rewrites the history of the distributed ledger.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repudiation:** Eclipse/routing attacks can enable double-spends and 51% attacks,
    allowing an attacker to repudiate past transactions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Denial of Service:** Blockchain networks can fall victim to denial-of-service
    attacks in various ways.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elevation of Privileges:** Eclipse/routing attacks can make a 51% achievable,
    granting the attacker control over the blockchain.  ## Conclusion'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain nodes and networks constitute the physical infrastructure that transforms
    theoretical blockchain protocols into workable systems. However, this transition
    from theory to practice can create additional attack vectors against blockchain
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we''ll move beyond the basic blockchain protocol defined
    and implemented by Bitcoin and similar blockchain networks. Smart contract platforms
    allow programs to run on top of the blockchain''s digital ledger, and blockchain
    extensions enable blockchain scalability, extensibility, and interoperability.  ##
    Notes'
  prefs: []
  type: TYPE_NORMAL
- en: '[1](#R_c04-note-0001).  `[www.yahoo.com/video/tron-discloses-critical-vulnerability-could-211000583.html](http://www.yahoo.com/video/tron-discloses-critical-vulnerability-could-211000583.html)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[2](#R_c04-note-0002).  `[www.coindesk.com/markets/2018/10/02/bitcoin-bug-exploited-on-crypto-fork-as-attacker-prints-235-million-pigeoncoins](http://www.coindesk.com/markets/2018/10/02/bitcoin-bug-exploited-on-crypto-fork-as-attacker-prints-235-million-pigeoncoins)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[3](#R_c04-note-0003).  `[https://cointelegraph.com/news/data-just-2-3-of-eth-nodes-running-parity-have-been-patched-against-critical-security-flaw](https://cointelegraph.com/news/data-just-2-3-of-eth-nodes-running-parity-have-been-patched-against-critical-security-flaw)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[4](#R_c04-note-0004).  `[https://thehackernews.com/2018/05/eos-blockchain-smart-contract.html](https://thehackernews.com/2018/05/eos-blockchain-smart-contract.html)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[5](#R_c04-note-0005).  `[https://cointelegraph.com/news/ethereum-hacks-on-the-rise-again-as-price-remains-below-100](https://cointelegraph.com/news/ethereum-hacks-on-the-rise-again-as-price-remains-below-100)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[6](#R_c04-note-0006).  `[www.coindesk.com/markets/2018/11/08/the-little-known-ways-ethereum-reveals-user-location-data](http://www.coindesk.com/markets/2018/11/08/the-little-known-ways-ethereum-reveals-user-location-data)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[7](#R_c04-note-0007).  `[https://btc-hijack.ethz.ch](https://btc-hijack.ethz.ch)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[8](#R_c04-note-0008).  `[https://ieeexplore.ieee.org/document/8944507](https://ieeexplore.ieee.org/document/8944507)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
