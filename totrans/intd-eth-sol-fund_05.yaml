- en: © Chris Dannen 2017Chris DannenIntroducing Ethereum and Solidity10.1007/978-1-4842-2535-6_5
  prefs: []
  type: TYPE_NORMAL
- en: 5. Smart Contracts and Tokens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Small reusable code templates (in programming terms, classes) written in Solidity
    are called smart contracts, a nod to financial contracts. You can think of smart
    contracts as being suited to creating financial derivatives as a web service—with
    a few twistsChris Dannen^(1 )(1)Brooklyn, New York, USAIn the preceding chapter,
    you learned how to use Solidity to create instructions for the Ethereum Virtual
    Machine. However, you stopped short of uploading your program to the EVM, a process
    known generally in computer application development as deployment. This chapter
    presents the process by which you can deploy your Solidity scripts to the EVM,
    making them available as a real product or service.
  prefs: []
  type: TYPE_NORMAL
- en: EVM as Back End
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Software apps, as they currently exist for the Web, iOS, macOS, Windows, Android,
    Linux, and so forth, are typically discussed in two halves: the front end and
    the back end. The back end usually refers to the database and the logic around
    interacting with it, which (as you learned in Chapter [3](A433414_1_En_3_Chapter.html))
    is where the program stores its information. The front end usually refers to the
    part of the application the user sees: the interface with its various labels and
    controls. In software interface design, controls is the general term for the little
    buttons, sliders, dials, hearts, stars, thumbs-up icons, and any other little
    thing you can click to make something happen.As we’ve discussed already, modern-day
    web-enabled applications use a constellation of computers and servers, most of
    them running some version of Linux, which plays a vital role in a sometimes-fragile
    choreography of computers working together to deliver a “seamless” experience
    to your smartphone or computer (usually in the hopes that you’ll pay for this
    experience).Neither EVM nor the Bitcoin virtual machine are powerful today. The
    EVM will continue to get faster as the core developers iterate toward a faster
    block time; how that works will become clearer in Chapter [6](A433414_1_En_6_Chapter.html).
    The takeaway for now is that the EVM is something like a replacement for the traditional
    application back end of a conventionally-hosted web or mobile application. Although
    the EVM itself is a fully fledged computer, it is not yet a complete end-to-end
    platform capable of hosting HTML/CSS interfaces; the most useful role it can play
    is as the back end to a distributed application.'
  prefs: []
  type: TYPE_NORMAL
- en: Smart Contracts to Dapps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A smart contract is just a unit of functionality you upload to the EVM. The
    term distributed application, or dapp , typically describes a web- or smartphone-accessible
    front end which GUI application that uses the EVM as its back end. Unless it’s
    a very simple dapp, its back end functionality will rely on several smart contracts.
  prefs: []
  type: TYPE_NORMAL
- en: Assets Backed by Anything
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In financial parlance, an asset is a valuable resource that you expect will
    produce a benefit or value in the future. Assets can include physical natural
    resources or abstract financial instruments , but by definition, the price of
    an asset should go up over time. (If it goes down, it is known as a depreciating
    asset .)It can be said that cryptocurrencies are assets backed by anything. What
    exactly this means will become clear by the end of this chapter. Let’s look at
    an example next.
  prefs: []
  type: TYPE_NORMAL
- en: Bartering with Fiat Currency
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s say you are Alice, and you live in Japan. For the purposes of this example,
    assume you are paid in Japanese yen and that the prices of things such as rent,
    food, and basic services are denominated in yen.Now let’s say you want to pay
    someone in New York to do some translation work. His name is Bob. Bob the translator
    uses US dollars; he holds them as savings; he pays taxes in USD, too.This creates
    a problem. For most people, foreign currency is not much use, and exchanging it
    incurs high fees and risks of price slippage. Slippage refers to the price dropping
    before you have a chance to sell your lot. Bob doesn’t want yen, and Alice doesn’t
    hold any dollars.Although this example uses fiat moneys, Alice and Bob may as
    well have cabbage and glass beads to barter. Although it’s true that one of them
    can simply drive to the nearest bureau of exchange, probably at an international
    airport, that’s not a parsimonious solution.With cryptocurrency, they need only
    establish a conversion rate, or multiplier, between their local currency and the
    cryptocurrency, and then convert the local price of the barter goods by using
    that multiplier. Whether they’re using paper money or glass beads isn’t relevant.
    For a trade to take place, they merely need to agree on a price.
  prefs: []
  type: TYPE_NORMAL
- en: Ether as Glass Beads
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This example demonstrates one of the fundamental properties of ether and bitcoins:
    they are standard accounting units of value, and simultaneously media of exchange
    themselves. Money also serves these functions, but in actuality, the medium of
    exchange (paper) is just a representation of value that exists in some bank’s
    ledger. Here, they are one in the same.As you’ll learn more in Chapter [6](A433414_1_En_6_Chapter.html),
    these standard account units essentially tabulate themselves and balance the entire
    ledger anytime a payment moves from one place to another. This is another advantage
    over the money of today, which being inert has no “awareness” of other money in
    the system. As you may be imagining already, this makes smart contracts perfect
    for writing self-executing financial agreements.A derivative contract is a financial
    “bet” between two or more parties made on the value of the underlying asset. A
    derivative basically says that under certain conditions, Alice agrees to pay Bob
    a particular amount. The number of financial derivatives currently on Earth tops
    $1 quadrillion dollars. They are popular little instruments!What gives cryptocurrency
    the power to be used this way? The answer to that will become increasingly clear
    in Chapters [6](A433414_1_En_6_Chapter.html) and [7](A433414_1_En_7_Chapter.html),
    but for the sake of expediency, let’s do some thought experiments that will shorten
    the learning curve.'
  prefs: []
  type: TYPE_NORMAL
- en: Cryptocurrency Is a Measure of Time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Because cryptoassets and cryptocurrencies are impossible to counterfeit, this
    gives them an interesting property as a measure of time. Chapter [7](A433414_1_En_7_Chapter.html)
    covers the issuance scheme of ether, but the point here is that these tokens are
    almost like the rings of a tree—their manufacture happens by a sophisticated process
    that cannot be “sped up.” Thus when trading with someone from a faraway economy,
    it becomes easy to trust prices denominated in cryptocurrency, because counterfeiting
    isn’t possible, no matter how rich or powerful the group you’re trading with.Cryptocurrencies,
    as of this writing, are not redeemable by any central authority for gold or fiat
    currency . However, they are classified as property or currency in a handful countries.[¹](#Fn1)Nevertheless,
    it can be said that cryptocurrency get their price from the marketplace: they
    are worth whatever someone in the marketplace will pay. This is in contrast to
    say, a gold-backed currency, which is redeemable from the local treasury, or even
    a treasury bond, and which a government guarantees it will redeem for its own
    fiat currency decades into the future.As a result of its status as a decentralized
    digital medium of exchange, cryptocurrencies can be conceptualized as “assets
    backed by anything.” It doesn’t matter whether you’re trading cattle, bananas,
    soybean futures, or private equities—the deal can be done in cryptocurrency. The
    only challenge is agreeing on a price.Today, even if the buyer and seller agree
    to complete their transaction in cryptocurrency, it’s likely they will quickly
    sell the cryptocurrency for local fiat money, to avoid price slippage. This will
    be less and less common as the prices of cryptocurrencies stabilize. Prices become
    more stable as the volume of transactions increases around the world, and the
    markets for trading cryptocurrencies become deeper, or more liquid.Ether is similar
    to other cryptocurrencies such as bitcoins in this regard, but it does gain some
    intrinsic value from its usefulness in paying gas costs on the EVM. As we discussed
    in Chapter [3](A433414_1_En_3_Chapter.html), this makes ether more like a commodity
    such as oil or corn, which get their respective intrinsic values from their uses
    as fuel and food, respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: Asset Ownership and Civilization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It almost goes without saying that the invention of money as a social construct
    is foundational to civilization. In the pantheon of Great Human Ideas, it probably
    ranks among innovations such as animal domestication, geometry, and stone tools.Being
    highly susceptible to the network effect, money seems to evolve more slowly than
    other technologies. Because people prefer money that can be saved for long periods
    of time, retaining value far into the future, human societies aren’t exactly eager
    to jump to new media of exchange, lest their savings become worthless!The concept
    of network effect describes how technologies become more useful on an individual
    basis as their popularity grows and widens across geographical space. Being able
    to use bitcoins to buy retail goods all over the world is an example of its positive
    network effect. It makes trade possible, everywhere you go, as demonstrated in
    the beach vendor example in Chapter [4](A433414_1_En_4_Chapter.html).Savings,
    or surplus value, enables people to invest in the future. Whether 50,000 years
    ago or today, having extra food, fuel, or human labor at your disposal allows
    you to plan ahead and take actions that use that surplus to facilitate even bigger
    surpluses for future generations. An example is a community that, after a bumper
    crop of food, expands its population and collectively builds a dam to irrigate
    its fields, improving farming yields even further.So what does this ancient history
    have to do with cryptocurrency?
  prefs: []
  type: TYPE_NORMAL
- en: Your Pile of Savings = Reputation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'People who accumulate savings in a certain form of money, whether gold, wampum,
    or US dollars, will reinvest for their future. Typically, people invest in the
    geographic areas where they and their families reside. This is known in economics
    as home bias . It is one way that humans achieve status in a community: by donating
    public works, leading constructive social movements, or providing large-scale
    employment.As discussed in Chapter [1](A433414_1_En_1_Chapter.html), and in the
    preceding section, bitcoins and ether are not guaranteed by any organization to
    be redeemable for anything at any point in the future. Thus, a family seeking
    to protect its inheritance might consider bitcoins or ether a poor choice for
    long-term savings. The same goes for other farsighted institutions such as charities,
    pension funds, trusts, and endowments.Who knows if anyone will be using these
    networks in 50 years! By contrast, nation-states tend to stick around for centuries.
    When they issue fiat currency, they also raise armies to protect their economic
    systems; there is no such central power enforcing the use of bitcoins or ether.
    To make matters even less certain, computer networks in general haven’t been around
    long enough to really know the lifespan of their utility, as compared to, say,
    governments, which have existed (in some form or another) for millennia and can
    last thousands of years. How will cryptocurrency become more durable than the
    moneys we already have?'
  prefs: []
  type: TYPE_NORMAL
- en: Money, Tokens, Reputation … So What?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Longevity is an asset’s killer feature: the longer an asset will grow in value,
    and the more impossible to counterfeit it, the more desirable it is. That’s why
    so many people store their wealth long-term in bonds and real estate.The point
    of ramming home this reality is to think of bitcoins and ether as digital collectibles
    . As you’ll see, this is the most useful approach when considering the many uses
    of smart contracts. After all, learning how to write programs for the EVM is just
    as challenging as figuring out what to build. And the long history of money gives
    us many clues as to what kind of novel business transactions or social constructs
    may be possible with this new asset class.Much has been written about the potential
    of Ethereum to bring to bear the real potential of the Internet, especially the
    Internet of Things.[²](#Fn2) From the literature about Ethereum that’s already
    on the Web, it’s easy to imagine industrial or retail scenarios in which small
    computers can execute microtransactions.But this view limits us to transactions
    we already make today. The promise of the Ethereum and Bitcoin protocols is the
    introduction of new kinds of transactions and instruments. In this Internet of
    Things, what about the world of everyday consumer goods? Aren’t they “things”
    too? Let’s say you print an Ethereum address (a public key) on a physical item,
    and it belongs to a smart contract.Or more practically, consider a QR code , shown
    in Figure [5-1](#Fig1), which is a machine-readable code in a nested-square pattern.
    This one points to the links for this book, [http://eth.guide](http://eth.guide)
    . If you go to the iOS App Store or Google Play apps on your mobile devices, you
    should find any number of free QR code reader apps. Just search QR reader. You
    can imagine how these QR codes, printed on everyday valuables such as clothing,
    jewelry, artworks, or other physical goods, could combine the concepts of derivative
    contracts, everyday reloadable debit cards, and collectibles.![A433414_1_En_5_Fig1_HTML.jpg](A433414_1_En_5_Fig1_HTML.jpg)Figure
    5-1.QR codes provide an easy way for machines to read cryptocurrency addresses
    and URLs. This one goes to [http://eth.guide](http://eth.guide) .'
  prefs: []
  type: TYPE_NORMAL
- en: Coins are Collectibles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before going any further down this rabbit hole, let’s encounter some anthropological
    history courtesy of Nick Szabo, a cryptocurrency pioneer whose prolific web essays
    influenced many of today’s cryptocurrency enthusiasts and cypherpunks.In 2002,
    Szabo wrote about the intersection of physical goods representing abstract value
    throughout the course of human history. These collectibles allowed us to engage
    in bigger, more complex financial transactions, he explained. [³](#Fn3)
  prefs: []
  type: TYPE_NORMAL
- en: Collectibles were crucial in making these kinds of transactions possible for
    the first time. Collectibles augmented our large brains and language as solutions
    to the Prisoner’s Dilemma that keeps almost all animals from cooperating via delayed
    reciprocation with nonkin.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Without a trustworthy collectible to trade back and forth, you might not be
    willing to trade resources with anyone outside your extended familial network.
    This doesn’t bode well for peaceful coexistence in larger nation-states.
  prefs: []
  type: TYPE_NORMAL
- en: The Function of Collectibles in Human Systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Keeping track of favors over time is a major function of money: to serve as
    a closed accounting system for a community to keep track of favors owed and favors
    given. This gets useful as bigger and bigger groups try to interact and cooperate.Using
    collectibles to count favors is the essence of primordial accounting. Eventually,
    the value of these favors became abstracted, leading to the generalized instruments
    of value such as gold. This accounts for the modern-day association between wealth
    and esteem.Ethereum and Bitcoin strike at the heart of a problem that is tens
    of thousands of years old, which is that reputation-accounting a natural human
    behavior, but also an imperfect one. Szabo continues:'
  prefs: []
  type: TYPE_NORMAL
- en: Reputational beliefs can suffer from two major kinds of errors—errors of about
    which person did what, and errors in appraising the value or damages caused by
    that act. In both Homo sapiens neanderthalis and Homo sapiens, with the same large
    brain size, it is quite likely that every local clan member kept track of every
    other local clan member’s favors.… Between clans within a tribe both favor tracking
    and collectibles were used.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Two clans within a tribe exchanging collectibles within a closed system is
    something like a private bank database. Or a private blockchain. Szabo writes:'
  prefs: []
  type: TYPE_NORMAL
- en: Between tribes, collectibles entirely replaced reputation as the enforcer of
    reciprocation, although violence still played a major role in enforcing rights
    as well as being a high transaction cost that prevented most kinds of trade.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Just like the banks of today, human groups of yesteryear had trouble trading
    outside their accounting system. Whose money system do you use? Who keeps track
    of inter-tribe favors? No wonder there was so much bloodshed: the opportunity
    for cheating is just too persistent.'
  prefs: []
  type: TYPE_NORMAL
- en: Early Counterfeiting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The solution to inter-tribe trade was to use rare art objects: not just rare
    earth elements, but any objects that were not trivial to find or create from scratch.
    They couldn’t be just any set of beautiful objects. They had to be hard to come
    by, or the product of skilled craftsmanship, which ensured that each collectible
    represented a certain amount of human work-time. The resulting collectible can
    be considered “proof of work” by the craftsman. And thus we’re back to the concept
    from earlier: bitcoins and ether as a store of time. As Szabo says:'
  prefs: []
  type: TYPE_NORMAL
- en: It had to have certain functional properties, such as the security of being
    wearable on the person, compactness for hiding or burial, and unforgeable costliness.
    That costliness must have been verifiable by the recipient of the transfer—using
    many of the same skills that collectors use to appraise collectibles today.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Jewelry and Art as Money
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There’s perhaps nothing more essential to human economic progress as a reliable
    set of collectibles that can be used as money. This is because money facilitates
    cooperation. Szabo goes so far as to say that cooperation is our defining adaptive
    feature at the group level:'
  prefs: []
  type: TYPE_NORMAL
- en: Today, most large animals on the planet are afraid of projectiles—an adaption
    to only one species of predator.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Yes, that’s us, the tool-creating apes who hunt like wolves and live in social
    colonies like termites! In a sense, modern cryptocurrencies are a super-lubricant
    for our sophisticated human cooperative systems, because they introduce the building
    blocks of an immutable system of account that can span the geography of the entire
    world.
  prefs: []
  type: TYPE_NORMAL
- en: The Step Toward Banknotes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Money, reputation, and status have always been wrapped up together. It makes
    sense that primitive valuables were things you could wear; think gold jewelry
    or diamond-studded crowns. After all, why not show off the status that your hard
    work (or luck!) had bestowed on you?However, as a society gets wealthier, everyone
    gets to own a little gold; then a little more, then a little more. A rising tide
    creates markets for new goods and services that allow the wealthiest people to
    enjoy themselves in ways that also exhibit their social status. At some point,
    it’s too much to wear and carry, and people begin competing on abstractions such
    as brand name of goods, or the particular school where their children go.By this
    point in a developing society, there’s enough wealth stocked up in the banks that
    individual account holders begin trading in banknotes. How this works is best
    explained by economic researcher Martin Armstrong.[⁴](#Fn4) He says:'
  prefs: []
  type: TYPE_NORMAL
- en: The distinction between banknotes and deposit receipts issued by goldsmiths
    was a simple one. A receipt for deposit was transformed into a banknote if the
    receipt was payable to the “bearer” rather than an account. Therefore, Paterson’s
    Bank of England cleverly created the circulating notes by de facto since its receipts
    were payable to the “bearer,” thereby creating circulating “banknotes” when there
    was no provision for such an instrument.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Bitcoin revised this relationship only slightly by creating bearer accounts;
    whoever has the password and private key of an account is by default the owner.
    Bitcoin addresses, like Ethereum addresses, are not registered to individuals.
    They are created pseudonymously.Ether is like an issuance of banknotes that is
    also redeemable for computing time on the EVM.
  prefs: []
  type: TYPE_NORMAL
- en: Platforms for High-Value Digital Collectibles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a digital context, a reliable store of time has incredible potential as
    a platform for digital collectibles: valuable items that can be displayed, worn,
    or hung in one’s personal space—either online or in real life—and that are not
    possible to knock off, nor easily stolen from their rightful owner.When most people
    think of the Internet of Things, they think of sensor motes, self-diagnosing industrial
    equipment, and driverless vehicles. The Internet of Value, a euphemism referring
    to blockchain technologies, one of the many metaphors used to represent Ethereum
    and Bitcoin conceptually. But rather than think abstractly, it may be more useful
    to think about the potential in terms of valuable artwork, jewelry, fashion, or
    premium goods that look much like today’s, but feature verifiable provenance and
    ownership stored on a blockchain.In the future, the ownership, value, and provenance
    of a physical thing may never be “forgotten” as long as the blockchain where it
    was inventoried is still up and running. There will be no Antiques Roadshow on
    TV in 100 years. (We could even write a smart contract to take that bet!)'
  prefs: []
  type: TYPE_NORMAL
- en: Tokens Are a Category of Smart Contract
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Generally speaking, the Ethereum protocol prides itself on being featureless,
    which is one reason that tokens (as a concept) overlap so heavily with smart contracts
    (as a concept). Tokens are just one application of smart contract functionality
    on the EVM.NoteIn this chapter, you will deploy your own token. Tokens are one
    specific (and popular) application of smart contracts. Thus, the Mist wallet makes
    it especially easy to make tokens. There is currently no other category of smart
    contract which is accommodated this way in Mist.That said, Ethereum does make
    provisions for one common use-case of smart contracts, which is a subcurrency,
    a.k.a. token. In the hopes of making it easy to get up and running, the Ethereum
    developers have put an easy-to-use template inside the Mist wallet for quickly
    launching your own tokens. Presumably, other templates for common smart contracts
    will follow. But at present, the one we get out of the box is the ability to create
    a custom unit of value which can be passed around, alongside ether, within the
    EVM.If you were to phrase the user-friendly token-making progress as an elevator
    pitch for its value proposition to users, it would be something like this: “ultra-secure
    digital monetary system with automatic ledger balancing delivered as a service.”Now
    that you’ve gotten a taste of the historic potential of Ethereum and Bitcoin to
    create a new era of cryptocollectibles and smart devices, let’s get back to the
    brass tacks of deploying a token in the wild.NoteThis chapter contains exercises
    that use the Mist wallet you installed in Chapter [2](A433414_1_En_2_Chapter.html).
    After installation on your machine, it may appear labeled as Ethereum Wallet.
    This book refers to it as Mist to differentiate it from the many other Ethereum
    wallets available for desktop and mobile computers today.'
  prefs: []
  type: TYPE_NORMAL
- en: Tokens as Social Contracts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Tokens are sometimes called coins, as you learned in the Chapter [3](A433414_1_En_3_Chapter.html).
    You also learned that tokens themselves are smart contracts. (With enough repetition,
    these terms will hopefully enter your natural vocabulary by the end of this book!)But
    tokens themselves (like all forms of money) can also be seen as social contracts,
    or agreements between groups of users. In plain English, the implicit agreement
    of a group using a token would be as follows: “We all agree this token is money
    in our community.” It’s also a tacit agreement not to counterfeit, undermining
    the system!The closest thing we have to a social contract in software form today
    is probably the end-user license agreements, or EULAs, that users sign when they
    create an account on services such as Facebook, Twitter, iTunes, or Gmail. This
    agreement usually includes language barring activities such as spamming other
    users, which would degrade the user experience.Thinking this way allows us to
    imagine how our digital media and digital goods today might become digital collectibles
    that are discussed, marketed, sold, and displayed inside the social networks of
    the future, in which online artifacts like selfies and podcasts can be sold, licensed,
    or rented for fees of arbitrary size.'
  prefs: []
  type: TYPE_NORMAL
- en: Tokens Are a Great First App
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When making a token, consider that it is only as valuable as the community
    using it believes it will be. Thus, it is far easier to launch a token into an
    existing community that already trades using some kind of money or scrip .However,
    making sub currencies is not the only use of a cryptoasset. The concept of an
    asset is highly generalized. Assets, in the form of financial contracts or smart
    contracts, can be used to represent shares of equity, or lottery tickets, or just
    scrip within a local economy. The price can be determined by the market, or it
    can be pegged to another asset. The rules are largely up to you.NoteScrip is a
    term derived from the word subscription. It has a variety of definitions going
    back in history, but refers primarily to an IOU. It can also refer to private
    currency such as air miles or rewards points. It’s used in this book to mean a
    general unit of account: the “beans” used by the EVM’s giant decentralized bean
    counter!In Ethereum, tokens exist within, and rely upon, the public blockchain:
    you can create a subcurrency of ether, but ether will always remain the priviliged
    token with which miners and gas costs are paid. If you want a purely independent
    blockchain network, you can create your own private blockchain and be completely
    disconnected from the main Ethereum chain.Making a subcurrency is easier and will
    satisfy most use cases for curious developers. If you’re working at an institution
    interested in using its own blockchain, never fear: you will look at making your
    own private chain and cryptoeconomy that is separate and distinct from the Ethereum
    public chain in Chapter [8](A433414_1_En_8_Chapter.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Token on the Testnet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ll need to connect to the Ropsten testnet and get used to sending ether
    around before you can deploy a contract.NoteThe Ropsten testnet was formerly called
    Morden, so you may still see that name in older documentation.Launch the Mist
    wallet on your desktop computer. Navigate to the Develop menu of the Mist wallet,
    and you should find a Network menu that allows you to select the testnet, as shown
    in Figure [5-2](#Fig2).![A433414_1_En_5_Fig2_HTML.jpg](A433414_1_En_5_Fig2_HTML.jpg)Figure
    5-2.Connecting to the testnetOnce you’re using the testnet, you should see an
    alert in the Mist browser highlighted in red, as shown in Figure [5-3](#Fig3).![A433414_1_En_5_Fig3_HTML.jpg](A433414_1_En_5_Fig3_HTML.jpg)Figure
    5-3.Once connected to the testnet, you’ll see an indicator in the Mist UI
  prefs: []
  type: TYPE_NORMAL
- en: Getting Test Ether from the Faucet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In Ethereum, it is trivial to set up a faucet that spouts faux ether you can
    use on the Ropsten testnet. In this section, you won’t set up your own faucet,
    but will use a third-party faucet pictured in Figure [5-4](#Fig4) and available
    at [http://faucet.ropsten.be:3001/](http://faucet.ropsten.be:3001/) .![A433414_1_En_5_Fig4_HTML.jpg](A433414_1_En_5_Fig4_HTML.jpg)Figure
    5-4.The Ethereum testnet comes with the facility for dispensing test ether that
    can be used while writing or debugging contractsYou’ll also find an up-to-date
    shortlink to this faucet at [http://faucet.eth.guide](http://faucet.eth.guide)
    .Follow these steps to receive testnet ether from the faucet:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.After making sure your Mist wallet is on the testnet with the steps above,
    create an address if you haven’t already. Copy this long hexidecial address (beignning
    with 0x...) to your system clipboard and then paste it into the address field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2.To get ether, click the button entitled “send me 1 test ether.”
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you’d like to test out the transfer of ether, you can do that by transferring
    test ether from one address in your Mist wallet to another address in your Mist
    wallet. To do this: Go back to Mist and create a new wallet address in the Home
    view. You can use the Send dialog box to send ether from one of your wallet addresses
    to another. It will be approximately the same speed whether you are sending ether
    to yourself or to someone on the other side of the world; that’s the beauty of
    distributed systems.The testnet also has a blockchain explorer, where you can
    see all your testnet transactions. Simply enter one your testnet Mist addresses
    into the search box at the following testnet blockchain explorer, and you’ll see
    all its transactions listed: [https://testnet.etherscan.io/](https://testnet.etherscan.io/)Now
    that we’ve messed around with test ether on the Ropsten chain, let’s take the
    next step toward making your own ether subcurrency, also known as a token, with
    zero coding.NoteWhat separates the testnet and the main network? They are different
    chains. Kind of like a computer with many hard drives, your Ethereum node can
    connect to many chains.In the next section, you will copy and paste your way to
    the future of money-as-a-web-service. In other words, you’ll use boilerplate code
    to create your own custom accounting and value transfer system—your own asset
    database, secured by the public Ethereum chain!Exercise: Create a Custom Token
    with No CodeCreating your own token can be done in about 5 minutes. All you need
    is the Mist browser, which you downloaded in Chapter [2](A433414_1_En_2_Chapter.html),
    and a text editor. If you’re using macOS, Windows, or Ubuntu, your computer comes
    with a text editor application, but you can also opt for a third-party app such
    as Sublime Text .Recall that download links for all Ethereum client applications,
    including Mist, can be found at [http://clients.eth.guide](http://clients.eth.guide)
    .Note In this exercise, you will create your token on the testnet for the time
    being. Recall that all smart contracts, including tokens, cost money (ether) to
    deploy on the EVM. It’s not particularly dangerous to create a token on the main
    network, but you will need to pay a small amount of real ether to deploy it there,
    and there’s no sense in wasting real money—no matter how small the amount!If you’ve
    programmed before, you’ll know that most developer environments force you to work
    in an integrated suite of applications to create your application. In the Ethereum
    protocol, it’s possible to write and deploy an application by using just your
    computer’s text editor and the Mist wallet. Pretty amazing!In preparation, open
    the Ethereum Mist wallet. Click the Contracts tab at the upper right, as shown
    in Figure [5-5](#Fig5).![A433414_1_En_5_Fig5_HTML.jpg](A433414_1_En_5_Fig5_HTML.jpg)Figure
    5-5.The Contracts tab is where you can paste and deploy your contract'
  prefs: []
  type: TYPE_NORMAL
- en: 1.Click the Deploy New Contract option , as shown in Figure [5-6](#Fig6).![A433414_1_En_5_Fig6_HTML.jpg](A433414_1_En_5_Fig6_HTML.jpg)Figure
    5-6.Click the Deploy New Contract option to enter contract code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2.Navigate to this book’s GitHub project ( [https://github.com/chrisdannen/Introducing-Ethereum-and-Solidity/](https://github.com/chrisdannen/Introducing-Ethereum-and-Solidity/)
    ) and find the document mytoken.sol. Copy the code from this file. It looks like
    the code in Figure [5-7](#Fig7).![A433414_1_En_5_Fig7_HTML.jpg](A433414_1_En_5_Fig7_HTML.jpg)Figure
    5-7.The code for this sample project, viewed in GitHub
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 3.Copy this code. Then go back to the Mist wallet and paste the code in the
    Deploy view, in the box labeled Solidity Contract Source Code , shown in Figure
    [5-8](#Fig8). Be sure to replace everything when you paste; the content shown
    here is placeholder text.![A433414_1_En_5_Fig8_HTML.jpg](A433414_1_En_5_Fig8_HTML.jpg)Figure
    5-8.Replace all the placeholder text when you paste in your contract source code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 4.Now the code should look like the view in Figure [5-9](#Fig9).![A433414_1_En_5_Fig9_HTML.jpg](A433414_1_En_5_Fig9_HTML.jpg)Figure
    5-9.After you’ve pasted in your contract code, you should see a new drop-down
    become available at the right of the screen
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 5.Now you’ll see the name of the contract autoload into the menu at right. It
    should be called My Token. Select i t. The fields shown in Figure [5-10](#Fig10)
    should appear.![A433414_1_En_5_Fig10_HTML.jpg](A433414_1_En_5_Fig10_HTML.jpg)Figure
    5-10.After you paste in contract code, you’ll need to enter your token paramtersNote Notice
    the light-gray text after each label, and recall our discussion of types from
    Chapter [4](A433414_1_En_4_Chapter.html). You’ll see that the supply and decimal
    place fields need to be of the type uint, or positive numbers; the rest can be
    strings of arbitrary text or numbers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '6.Next let’s fill out these fields :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Supply: How many tokens do you want to create?'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Name: What should this token be called?'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Symbol: Use any symbol on the keyboard as your “dollar sign.”'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Decimals: Do you want 100 subunits to a token, as in dollars and cents? Or
    1,000? Or 10,000?'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 7.Now that you’ve set parameters, scroll to the bottom and click the Deploy
    button. You can leave the fee slider at the default; anything your token deployment
    doesn’t spend will get refunded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 8.In the Wallets tab, scroll down to the latest transactions and you should
    see the address of the contract you just deployed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To see your balance of tokens, you’ll need to “watch” this token. That’s the
    subject of the next exercise.After you’ve created a token, you can send it to
    anyone else with a Mist wallet, after they’ve given you their wallet address.
    In order for them to see it, you’ll have to tell them to “watch” for it. More
    details about these particularities follow.Exercise: Watch TokensWhether it’s
    a token you created yourself, or a token created by some big organization, all
    tokens are created equal in the Ethereum system. Your Mist wallet will ignore
    them unless told to do otherwise. Much as your iPhone wouldn’t download every
    app in the App Store, Mist lets you seek out and download the ones you want.As
    you can see from the Watch Contract dialog box in Figure [5-11](#Fig11), you don’t
    need much to follow a token. Let’s dive in.![A433414_1_En_5_Fig11_HTML.jpg](A433414_1_En_5_Fig11_HTML.jpg)Figure
    5-11.Knowing the basics about a token allows Mist to keep track of your balance
    in that tokenAfter a smart contract has been uploaded to the EVM, that’s all it
    takes for the world to access it. Downloading apps isn’t necessary in the Mist
    wallet paradigm, although the code for contracts does get put into each block,
    and thus passively downloaded onto any machine that is mining.Because all smart
    contracts are both delivered as a service and executed locally at approximately
    the same time, it’s almost as if you have the entire App Store already on your
    machine, and you simply need to invoke an app.This invocation of a specific app,
    or contract, is most common in the use case of the token category of apps that
    you’re currently exploring. In token terminology, we call this watching a token.
    Because tokens are such a common and useful application of smart contracts, you
    will find a ready-made token-watching interface in the Mist wallet. Here’s how
    it works:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.Go back to the Contracts tab in Mist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2.Click Watch Token.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 3.Paste in the token address. Write in the name of this token, if it has one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 4.You don’t need to enter anything in the JSON box because Mist comes with a
    front-end interface for tokens. You will enter some data here when you deploy
    a bespoke contract later in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 5.Click the Watch button. You should now see this token’s balance show up in
    your main Mist wallet dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Watching other contracts requires searching the contract address in a blockchain
    explorer. Many blockchain explorers are available for the Ethereum chain, which
    you’ll find at [http://explorer.eth.guide](http://explorer.eth.guide) .In the
    exercises in this chapter, you will deploy contracts on the testnet, so they will
    not be viewable in the preceding explorers. Explorers are like database readers,
    and the testnet is a different database (or chain) than the main network, where
    real ether is transacted, and for which the vast majority of blockchain explorers
    provide an interface.
  prefs: []
  type: TYPE_NORMAL
- en: Registering Your Tokens
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tokens are publicly discoverable, provided you register your tokens with a blockchain
    explorer such as Etherscan and conform to the ERC Token Standard. ERC stands for
    Ethereum Request for Comment, and refers to a common convention called RFC (Request
    for Comment) used by the principal technical development and standards-setting
    bodies for the Internet.In addition to ERC documents, Ethereum community development
    is also led by Ethereum Improvement Proposals, or EIPs. You can a see a list all
    the preprogrammed standardized functions accessible to a standard token at [https://github.com/ethereum/EIPs/issues/20](https://github.com/ethereum/EIPs/issues/20)
    . The Ethereum venture studio ConsenSys has also released free and open source
    standard smart contract code at [https://github.com/ConsenSys/Tokens](https://github.com/ConsenSys/Tokens)
    . Both of these URLs are also linked at [http://tokens.eth.guide](http://tokens.eth.guide)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Deploying Your First Contract
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The launch of the Ethereum protocol did feature several standard contracts,
    but these have been largely deprecated. As of this writing, only tokens are standardized,
    as evidenced by the token wizard you just used in the Mist browser to deploy your
    tokens.However, thanks to Gavin Wood, you have a group of simple contracts released
    under the Apache 2 license, with which you can experiment. Below, we’ll deploy
    one of these contracts, but you can find the rest at [https://github.com/ethcore/contracts](https://github.com/ethcore/contracts)
    . While no longer considered “standard,” the contract below is a useful learning
    tool because it effectively demonstrates some of the autonomy exhibited by smart
    contracts, as you saw them in Chapter [4](A433414_1_En_4_Chapter.html)—in particular,
    how they can hold your ether, and give it back only if you instruct them in advance.NoteRecall
    that there are two types of accounts in Ethereum: the first are smart contract
    accounts, and the second are externally owned accounts that are controlled by
    a key pair and usually held by a human or an external server.If the lack of standard
    contract libraries seems strange, never fear. Plenty of third-party groups are
    creating standard smart contract libraries, some of them even specialized to certain
    industries. Many resources including Solidity sample contracts, best practices,
    guides, tutorials, and contract libraries are listed at [http://solidity.eth.guide](http://solidity.eth.guide)
    .Double-check before you deploy contracts for the first time that you are indeed
    on the testnet! Whether you are on macOS, Windows, or Ubuntu, you will see the
    Develop menu in the top bar, as shown in Figure [5-12](#Fig12) in the Ubuntu 14.04
    environment. Also note that Mist can perform mining on the testnet. This allows
    you to test contracts locally. More details on that in the next sections.![A433414_1_En_5_Fig12_HTML.jpg](A433414_1_En_5_Fig12_HTML.jpg)Figure
    5-12.Double-check you are on the testnetExercise: Deploy a Simple Contract in
    5 MinutesThe Owned contract is perhaps the most popular smart contract learning
    aid. That’s because it establishes one of the fundamental relationships possible
    in the EVM: the relationship between an externally owned account and a contract
    account. Make no mistake: these accounts are discrete entities, but relationships
    between a contract account and an external account can be programmed.Recall that
    a contract account, if incorrectly programmed, could conceivably lock up money
    sent to it—without offering any recourse for getting that money back. There are
    no backdoors into contracts, even for the people who create them. The EVM is fairly
    unforgiving this way! This is also why we use the testnet and fake ether, which
    we get from a faucet when creating contracts in this sandbox environment.You will
    find the contract code at [https://github.com/chrisdannen/Introducing-Ethereum-and-Solidity/](https://github.com/chrisdannen/Introducing-Ethereum-and-Solidity/)
    .Because of the risky nature of contracts, it’s important to practice writing
    contracts that you, the programmer, can control. Hence the named for the Owned
    contract: it teaches how to write a little ether class that is controlled by other
    Solidity code. Let’s have a look at owned.sol://! Owned contract.//! By Gav Wood
    (Ethcore), 2016.//! Released under the Apache Licence 2.pragma solidity ^0.4.6;contract
    Owned {modifier only_owner { if (msg.sender != owner) return; _; }event NewOwner(address
    indexed old, address indexed current);function setOwner(address _new) only_owner
    { NewOwner(owner, _new); owner = _new; }address public owner = msg.sender;}Note
    Don’t forget to add the Solidity version pragma as the first line of your smart
    contract before you deploy it. This isn’t strictly necessary, but it helps prevent
    compiler errors.You’ll deploy the Owned contract in a moment, at which point the
    EVM will give you back a contract address. Once it’s uploaded to the testnet,
    you can paste this contract address into the Mist wallet in the To field and send
    it some amount of ether to activate it. This would make your external account
    msg.sender, and therefore the owner of this contract.What does this mean? This
    contract will be hosted forever on the EVM and it has one function: it belongs
    to whichever person or contract who calls it, at that given address. Keep in mind
    that if someone else copies this contract and deploys it themselves, it’s on the
    same EVM but lives at a different address. It would be a separate instance of
    the same contract.'
  prefs: []
  type: TYPE_NORMAL
- en: Same House, Different Address
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In computing, we might say that two people deploying the same exact contract
    on the same EVM, at necessarily different addresses, equates roughly to building
    two houses from the same blueprint. They can’t occupy the same physical space,
    but are merely instances of the same class, or blueprint, writ in real life.Owned.sol
    is the golden retriever of smart contracts: call it, and it runs right over and
    assigns you ownership of itself—regardless of whether you are a human operating
    an external account, or simply another smart contract that is calling owned.sol
    programmatically.If Alice uploads owned.sol to the EVM from India, it can be accessed
    as a local script, and thus extended, by a contract you upload to the EVM from
    New York. Cool, huh?In the last deployment—the token—you simply pasted in the
    Solidity code and let Mist do the work. That’s cool but a little too easy. To
    learn more about what’s happening under the hood, let’s manually compile the Solidity
    code into EVM bytecode by using the online compiler. As a reminder, you can find
    the online compiler at [http://compiler.eth.guide](http://compiler.eth.guide)
    .After you have the compiler open in your browser, return to this book’s GitHub
    page ( [https://github.com/chrisdannen/Introducing-Ethereum-and-Solidity/](https://github.com/chrisdannen/Introducing-Ethereum-and-Solidity/)
    ). Let’s compile and test the Owned contract . Locate the Solidity script named
    owned.sol in the Github repo and open it to complete the following steps:NoteCopy
    all the text in the file. This includes the version pragma header at the top.
    This tells the compiler which version of the Solidity language this contract was
    written in.'
  prefs: []
  type: TYPE_NORMAL
- en: 1.Copy the text of this contract onto your computer’s clipboard. (Ctrl+C on
    Windows or Linux, and Command+C on Mac.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2.Paste your code (Ctrl+V or Command+V) into the main text box of the browser
    compiler. If there’s some sample code there, clear it all out first. You don’t
    want any of that junk in your nice clean contract. It should look something like
    Figure [5-13](#Fig13).![A433414_1_En_5_Fig13_HTML.jpg](A433414_1_En_5_Fig13_HTML.jpg)Figure
    5-13.Paste in the contract code to the compiler window in your browser
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 3.Click the Compile button, and your contract will compile. Select the bytecode
    that appears in the bytecode field and copy that to your clipboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 4.Go back to the Mist browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '5.Repeat the Contract Deploy process from the Token contract: in the Mist wallet,
    go to the Contracts tab in the upper right, and click Deploy New Contract. Paste
    your new bytecode into the Contract Bytecode box.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 6.Scroll to the bottom and click the Deploy button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 7.In the Wallets tab, scroll down to the latest transactions and you should
    see the address of the contract you just deployed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 8.Go through the same Watch Contract flow as you did with the token. Paste the
    contract address you got from your transaction feed, and name the contract Owned.
    This time, you’ll add some JSON code in the box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 9.Next, return to the Browser-Solidity compiler and copy the content in the
    JSON Interface section of the page. This provides a basic front end for your contract,
    based on what the compiler could glean from your Solidity code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Playing with Contracts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that your contract is deployed with an interface in Mist, you can activate
    it. To call a contract in the EVM, you do not necessarily need to send any ether;
    you can call it simply by sending zero ether to the contract address. Boom, now
    you are the owner! If this doesn’t work, be sure that the contract was uploaded
    to the testnet, and that the Mist you are using to send the zero-ether transaction
    is also on the testnet.For the Owned contract, activation is a yes-or-no question.
    You can call it with zero ether or 100\. In more-sophisticated contracts, the
    amount you send is vital to how the contract behaves subsequently after being
    called.Owned is just a reference contract that might live on the EVM, a pivotal
    public resource contract with lots of incoming references, for years and years.By
    working with a small smart contract, you can see how smart contracts are used
    piecemeal to cobble together entire distributed apps, largely using boilerplate
    code or public-use instances, enabling the end programmer to just write the most
    customized of functionality, reducing the room for error.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter, you were able to deploy two separate smart contracts. In the
    process, you learned about the most basic application you can write for the EVM,
    a token contract. You also considered some of the unique properties of distributed
    programs by playing with owned.sol. By now, you should begin to see how powerful
    the Ethereum protocol can be, and how simple and easy it is to deploy contracts
    that leverage the power of the network.Next, it’s worth learning more about how
    the EVM network-database achieves consensus: a process known as proof-of-work
    mining. That is the subject of the next chapter.Footnotes[1](#Fn1_source)Wikipedia,
    “Legality of Bitcoin by Country,” [https://en.wikipedia.org/wiki/Legality_of_bitcoin_by_country](https://en.wikipedia.org/wiki/Legality_of_bitcoin_by_country)
    , 2017.[2](#Fn2_source)ConsenSys Media, “Programmable Blockchains in Context:
    Ethereum’s Future,” [https://medium.com/consensys-media/programmable-blockchains-in-context-ethereum-s-future-cd8451eb421e#.rwdqmpvu0](https://medium.com/consensys-media/programmable-blockchains-in-context-ethereum-s-future-cd8451eb421e#.rwdqmpvu0)
    , 2015.[3](#Fn3_source)Nick Szabo, “Shelling Out: The Origins of Money,” [http://nakamotoinstitute.org/shelling-out/](http://nakamotoinstitute.org/shelling-out/)
    , 2002.[4](#Fn4_source)Armstrong Economics, “Money and the Evolution of Banking,”
    [www.armstrongeconomics.com/research/monetary-history-of-the-world/historical-outline-origins-of-money/money-and-the-evolution-of-banking/](https://www.armstrongeconomics.com/research/monetary-history-of-the-world/historical-outline-origins-of-money/money-and-the-evolution-of-banking/)
    , 2016.'
  prefs: []
  type: TYPE_NORMAL
