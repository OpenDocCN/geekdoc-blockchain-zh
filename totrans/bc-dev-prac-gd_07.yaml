- en: © Elad Elrom 2019Elad ElromThe Blockchain Developer[https://doi.org/10.1007/978-1-4842-4847-8_7](https://doi.org/10.1007/978-1-4842-4847-8_7)
  prefs: []
  type: TYPE_NORMAL
- en: 7. NEO Blockchain and Smart Contracts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Elad Elrom^([1](#Aff2) )(1)New York, NY, USA
  prefs: []
  type: TYPE_NORMAL
- en: In Chapter [1](475651_1_En_1_Chapter.xhtml), I covered the NEO proof of stake
    (PoS) blockchain consensus mechanism. In Chapter [2](475651_1_En_2_Chapter.xhtml),
    you created a NEO bookkeeping node on AWS Ubuntu and learned how to request a
    consensus authority certificate and get elected as a bookkeeper.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I will expand on the NEO blockchain, and you will learn how
    to set up a local environment, do operations in NEO wallets, create smart contracts
    (NeoContracts), and publish. In this chapter, I will cover NEO’s blockchain high-level
    architecture and how to set up your local environment, create a local testnet
    chain, create “Hello, World” projects in both C# and Python, publish these smart
    contracts, and learn the criteria to compare Ethereum versus EOS versus NEO.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, understanding smart contracts, blockchain, and the process of
    publishing is similar between projects, and covering three projects is sufficient
    to gain an understanding of how to work with the rest of the 40 (at the time of
    writing) projects available for writing smart contracts that are out there.
  prefs: []
  type: TYPE_NORMAL
- en: NEO’s High-Level Blockchain Architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NEO was founded in 2014 with the name of AntShares by Da Hongfei and Erik Zhang
    and then was open sourced on GitHub in June 2015 with the name of NEO. The NEO
    consensus mechanism is called Byzantine Fault Tolerant (dBFT), which is a modified
    PoS. This type of mechanism makes NEO a scalable blockchain. Bookkeeping nodes
    are randomly selected to validate transactions and can support up to 10,000 transactions
    per second.
  prefs: []
  type: TYPE_NORMAL
- en: '*“NEO is a non-profit community-driven blockchain project. It utilizes blockchain
    technology and digital identity to digitize assets and automate the management
    of digital assets using smart contracts. Using a distributed network, it aims
    to create a ‘Smart Economy’. ”*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Neo.org
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'NEO transactions are charges with NEO gas tokens. The NEO genesis block includes
    100 million NEO. Half were sold to early investors, and half were locked in NEO
    smart contract tokens. Each year 15 million NEO tokens are unlocked to be used
    for the NEO development team to fund development goals. NEO charges fees for transactions
    as well as a smart contract’s related transactions. The NEO fee structure related
    to smart contracts is listed in the NEO white paper: [http://docs.neo.org/en-us/sc/systemfees.html](http://docs.neo.org/en-us/sc/systemfees.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: In term of programming languages, NEO smart contracts support the NeoVM (NEO’s
    Universal Lightweight Virtual Machine) compiler, Microsoft.net, Java, Kotlin,
    Go, and Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some notable NEO development features:'
  prefs: []
  type: TYPE_NORMAL
- en: NEO can create smart contract tokens built with the Communications Standard
    (NEP5). These tokens are able to communicate with other NEO tokens.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smart contracts can communicate with other blockchains (this feature is called
    NeoX).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NEO can pass information via a file sharing protocol (called NeoFS).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It uses a lattice-based cryptographic mechanism called quantum-safe (NeoQS).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NEO’s “smart economy” infrastructure (I will explain this concept in the next
    section) enables smart contracts to support front-end applications and integrate
    with other smart contracts and other blockchains through an open API.
  prefs: []
  type: TYPE_NORMAL
- en: NEO’s open API allows you to integrate data from external sources. Figure [7-1](#Fig1)
    shows a high-level architecture diagram of the NeoVM. The NeoVM core is the deployment
    box (the dashed box). As you can see, the external data with the execution engine
    (green box) enables smart contracts to interact and perform operations. Then data
    can be stored on the NEO distributed ledger.
  prefs: []
  type: TYPE_NORMAL
- en: '*“We hope the platform can be used for different front end scenarios, such
    as the Digital asset wallet, Forum, Voting, Profile management and Mobile applications.
    The platform also features an open API that can be used for integration with other
    systems.”*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Da Hongfei, Zhao Chen founder of NEO
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig1_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig1_HTML.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-1
  prefs: []
  type: TYPE_NORMAL
- en: 'NEO’s virtual machine architecture diagram. Image credit: docs.neo.org.'
  prefs: []
  type: TYPE_NORMAL
- en: What Is NEO’s Smart Economy?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NEO coined the term *smart economy*, which explains NEO’s vision. This vision
    consists of changing your existing market from a traditional economy to the smart
    economy with the power of a decentralized blockchain. To achieve this goal, NEO
    integrates digital assets, digital identities, and smart contracts into its platform.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NEO’s smart economy vision is aimed to change the way existing markets work,
    from a traditional economy to a “smart economy,” with the power of a decentralized
    blockchain. This is achieved by integrating digital assets, digital identities,
    and smart contracts.
  prefs: []
  type: TYPE_NORMAL
- en: 'NEO’s smart economy concept consists of integrating the following three components:'
  prefs: []
  type: TYPE_NORMAL
- en: '*NEO digital assets*: These assets contain electronic data and can be programmed.
    Placing the digital assets on a blockchain provides the benefit of PoS blockchains,
    such as decentralization, trust, traceability, and transparency. The NEO blockchain
    enables users to register, trade, and transfer different types of assets. Physical
    assets get digitization through digital identity; then these digital assets can
    be protected by law through validation. For an ICO, it costs 5,000 gas to register
    a digital asset. Then there is a renewal fee of 5,000 gas per year.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*NEO digital identity*: This is the digitization of the identity of individuals,
    organizations, or any other entities. A NEO digital identity is based on the public
    key infrastructure (PKI) X.509 standard implementation that also supports web
    of trust point-to-point certificates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*NEO smart contract*: Smart contracts on NEO are called NeoContracts, and they
    support the C#, VB.NET, F#, Java, Kotlin, and Python languages. Supporting these
    languages gives the benefits of having sophisticated development, debugging, and
    compilation in the Visual Studio, Eclipse, and WebStorm IDEs. NeoVM is built for
    scalability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting Up Your Local Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned, NEO supports enterprise-level programming languages such as C#,
    VB.NET, F# Java, Kotlin, and Python. This selection of programming languages gives
    NEO an advantage in building NeoContracts because you can utilize the Visual Studio
    2017 IDE, which offers enterprise tools for development. In this chapter, I will
    be using the following .NET tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Visual Studio 2017 IDE* : To follow along, install the Visual Studio (VS)
    Community Edition for Mac.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*.NET Core*: To follow along, install .NET Core to be able to publish DLL library
    files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition to .NET, you need the following tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Xcode 10.1*: You need Xcode 10.2 for the tools and libraries you will be installing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Docker*: Docker is a popular tool for creating containers and integrating
    software. You will be using Docker for your private net to run a whole NEO blockchain
    to simulate four consensus nodes in a single, lightweight Docker container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*neo-compiler*: The NEO compiler is needed to turn your code to an .avm file
    that can be deployed on the NEO blockchain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*neo-cli*: You will install and use the NEO command-line tools for wallets,
    operations, and RPC calls to the NEO API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you know what needed, let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: Xcode 10.2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of writing, you need Xcode with at least version 10.1 for the tools
    and libraries needed for NEO. The latest Xcode at the time of writing is Xcode
    10.2.1.
  prefs: []
  type: TYPE_NORMAL
- en: You can check whether you already have Xcode installed via the command line.>
    xcodebuild --versionXcode 10.1Build version 10B61
  prefs: []
  type: TYPE_NORMAL
- en: 'This command will output the version if Xcode is installed. If you need to
    upgrade or install, visit the Apple developer portal: [https://developer.apple.com/download/](https://developer.apple.com/download/)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Install Visual Studio 2017 IDE
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, download and install the latest version of Visual Studio (VS) Community
    Edition for Mac. The community edition is free and can be downloaded from the
    following URL: [https://visualstudio.microsoft.com/vs/community/](https://visualstudio.microsoft.com/vs/community/)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'For future reference, to uninstall a portion or all of VS, follow the instructions
    here: [https://docs.microsoft.com/en-us/visualstudio/mac/uninstall#net-core-script](https://docs.microsoft.com/en-us/visualstudio/mac/uninstall%2523net-core-script)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: The complete VS 2017 consumes a lot of disk space; however, you don’t need all
    the packages downloaded. You need only Xamarin Workbooks in order to develop NeoContracts,
    so only download what’s needed.
  prefs: []
  type: TYPE_NORMAL
- en: During the installation process, the wizard gives you an option of what platforms
    and tools to install. Select Xamarin Workbooks by clicking the checkbox and click
    the Install button. See Figure [7-2](#Fig2).![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig2_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig2_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-2
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Community Edition for Mac install wizard
  prefs: []
  type: TYPE_NORMAL
- en: Install .NET Core
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will be installing .NET Core so you will be able to publish DLL libraries
    files via the command line. This will be done via the dotnet publish command.
    To download it, go to the dotnet Microsoft site; see Figure [7-3](#Fig3).
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dotnet.microsoft.com/download](https://dotnet.microsoft.com/download)![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig3_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig3_HTML.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-3
  prefs: []
  type: TYPE_NORMAL
- en: Downloading Microsoft dotnet core
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be downloading both: Build apps - SDK v2.2.101 and Run apps - Runtime
    v2.2.0.'
  prefs: []
  type: TYPE_NORMAL
- en: To confirm the installation went well, run the dotnet --version command.> dotnet
    --version2.2.101
  prefs: []
  type: TYPE_NORMAL
- en: This command will output the dotnet version, which at the time of writing is
    2.2.101.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the SDK is not installed, you will get the following error message:Did you
    mean to run dotnet SDK commands? Please install dotnet SDK from: http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409You
    can also output your machine info via the info command.> dotnet --info'
  prefs: []
  type: TYPE_NORMAL
- en: Install Docker
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Next, you will install Docker. Docker is needed to create a container that you
    will be using to create your local blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: '*Download Docker from here*: [https://download.docker.com/mac/beta/Docker.dmg](https://download.docker.com/mac/beta/Docker.dmg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Installation instructions*: [https://runnable.com/docker/install-docker-on-macos](https://runnable.com/docker/install-docker-on-macos)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once Docker is downloaded and installed, double-click Docker from the Applications
    menu to get Docker running. You will see the Docker icon in the top menu on your
    computer. You can verify it’s installed correctly by typing docker at the command
    line; it lists the Docker commands.> dockerRun docker ps to view containers running
    to ensure you do not get any error messages.> docker psIf Docker is not running,
    you will get the following message:Cannot connect to the Docker daemon at unix:///var/run/docker.sock.
    Is the docker daemon running?Just open Docker in case you get this message. Additionally,
    if your container is not running but it was already created, you can use the -a
    (all) flag and find the container ID.> docker ps –aList containersThen when you
    have the container ID, you can start that container.> docker start [CONTAINER
    ID]
  prefs: []
  type: TYPE_NORMAL
- en: For now, you won’t see any list of containers as you have not created your containers
    yet.
  prefs: []
  type: TYPE_NORMAL
- en: Download NeoCompiler and Generate neon.dll
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To create your NeoContract, you need to generate an .avm file. To do so, you
    need to create a neon.dll file to be able to generate the smart contract. To get
    started, you will clone the neo-compiler to your desktop and then generate the
    neon.dll file.> cd ~/Desktop> git clone https://github.com/neo-project/neo-compiler>
    cd ~/Desktop/neo-compiler/neon/To publish your self-contained .avm file, you need
    to set a runtime identifier. You can set the neon.csproj runtime identifier to
    the correct OS. As I am using a Mac and not a PC here, I need to change the neon.csproj
    file. To follow along, first make a copy of the original.> cp neon.csproj neon.csproj.backupI
    am using vim, but feel free to use your favorite editor.> vim neon.csproj
  prefs: []
  type: TYPE_NORMAL
- en: Once the file is open, replace the following configuration, which sets a target
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can compare your output and settings with my project here: chapter7/NEO/neo-compiler/neon/.
    Also, you can find neon.csproj there.'
  prefs: []
  type: TYPE_NORMAL
- en: <Project Sdk="Microsoft.NET.Sdk">  <PropertyGroup>    <Copyright>2016-2017 The
    Neo Project</Copyright>    <AssemblyTitle>Neo.Compiler.MSIL</AssemblyTitle>    <Version>2.3.1.1</Version>    <Authors>The
    Neo Project</Authors>    <TargetFramework>netcoreapp2.0</TargetFramework>    <PlatformTarget>anycpu</PlatformTarget>    <AssemblyName>neon</AssemblyName>    <OutputType>Exe</OutputType>    <PackageId>Neo.Compiler.MSIL</PackageId>    <RuntimeIdentifiers>osx.10.12-x64</RuntimeIdentifiers>    <RootNamespace>Neo.Compiler</RootNamespace>    <Company>The
    Neo Project</Company>    <Product>Neo.Compiler.MSIL</Product>    <Description>Neo.Compiler.MSIL</Description>  </PropertyGroup>  <PropertyGroup
    Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">    <DefineConstants>RELEASE;NETCOREAPP1_0</DefineConstants>    <DebugType>none</DebugType>    <DebugSymbols>False</DebugSymbols>    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>  </PropertyGroup>  <PropertyGroup
    Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>  </PropertyGroup>  <ItemGroup>    <PackageReference
    Include="Mono.Cecil" Version="0.10.0" />    <PackageReference Include="Neo.VM"
    Version="2.3.0" />  </ItemGroup></Project>Now publish pointing to the runtime
    identifier osx.10.11-x64 by passing the RuntimeIdentifier setting param  .> dotnet
    publish -r osx.10.11-x64The compiler created your neon.dll file here:bin/Debug/netcoreapp2.0/osx.10.11-x64/publish/neon.dllSee
    Figure [7-4](#Fig4) for the output.![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig4_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig4_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-4
  prefs: []
  type: TYPE_NORMAL
- en: Compiling neon.dll for the target osx.10.11-x64
  prefs: []
  type: TYPE_NORMAL
- en: neo-cli to Generate a NEO Node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you want to create a fill NEO node. To generate a full NEO node, there
    are two full-node options.
  prefs: []
  type: TYPE_NORMAL
- en: '*neo-gui* : This can be used by both developers and NEO users. It can be used
    to do basic user-client operations such as managing wallets but also publishing
    smart contracts. It has a visual user interface. However, it works only on Windows
    at the time of writing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*neo-cli*: This provides an external API for basic wallet operations. It also
    helps other nodes keep a consensus with the network and generate new blocks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this case, I am installing on a Mac, so you will be using neo-cli to manage
    your wallet via the command line. However, it’s good for you to know that you
    can install neo-gui and create a virtual PC that way.
  prefs: []
  type: TYPE_NORMAL
- en: neo-cli
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For neo-cli, you need to install the LevelDB package as it’s a dependency. As
    you recall, you already installed LevelDB in Chapter [3](475651_1_En_3_Chapter.xhtml)
    via Homebrew. If you did not install LevelDB previously, here is the command again:>
    brew install leveldbAlternatively, you can check if you have it and upgrade.>
    brew upgrade leveldbNext, clone neo-cli to your desktop.> cd ~/Desktop> git clone
    https://github.com/neo-project/neo-cliNow, you can use dotnet to publish neo-cli
    from the source code you downloaded.> cd neo-cli> dotnet restore> dotnet publish
    -c ReleaseThe .dll file should be created in the Release folder; see Figure [7-5](#Fig5)
    for the output.![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig5_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig5_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-5
  prefs: []
  type: TYPE_NORMAL
- en: Building the neo-cli DLL
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can compare your output and settings with my project here: chapter7/NEO/neo-cli.'
  prefs: []
  type: TYPE_NORMAL
- en: To run the .dll file, you use dotnet and the location of the DLL file, which
    starts a NEO command-line terminal.> cd bin/Release/netcoreapp2.1/> dotnet neo-cli.dll.
  prefs: []
  type: TYPE_NORMAL
- en: 'neo-cli also supports plugins. For instance, you can enable logs in neo-cli
    with application logs, or you can improve security in RPC nodes via RPC Security.
    A list of plugins can be found here: [https://github.com/neo-project/neo-plugins](https://github.com/neo-project/neo-plugins)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Local NEO Private Testnet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can run your NeoContracts on public testnets just as you have done with
    other blockchains; however, it’s much better to run your own private testnet so
    you have full control of it. A private testnet can be on the cloud, but you will
    have to pay for the service provider, so it’s better if you set up your testnet
    on your local box.
  prefs: []
  type: TYPE_NORMAL
- en: As evident by the documentation, the tools for NEO were primarily developed
    for PC users. However, because of the tools developed by the City of Zion community
    (CoZ, [https://github.com/CityOfZion](https://github.com/CityOfZion) ), running
    a private chain is possible on any platform with Docker and Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps you need to take to run a local NEO private testnet are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Install neo-python*: This allows you to run a full NEO node and to interact
    with the blockchain.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Create neo-privatenet-docker*: This allows you to run a whole NEO blockchain
    with four consensus nodes in a single, lightweight Docker container.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Create a NEO wallet*: This connects to the private net and creates a wallet.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Claim*: This is initially 100,000,000 NEO.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Bootstrap the testnet*: This synchronize*s* the network*.*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Python 3.6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: neo-python needs Python 3.6  or later. Mac comes out of the box with Python,
    and you can verify you have python3 installed via the --version command.> python3
    --versionPython 3.6.xIf you are running a previous version of Python and need
    to install/re-install Python, follow these steps:> brew unlink pythonNext, install
    Python with Brew.> brew install --ignore-dependencies https://raw.githubusercontent.com/Homebrew/homebrew-core/f2a764ef944b1080be64bd88dca9a1d80130c558/Formula/python.rbNow
    switch the Python versions.> brew switch python 3.7.0> brew switch python 3.6.5_1In
    case you don’t have pip installed, run this:> curl -O https://bootstrap.pypa.io/get-pip.py>
    sudo python get-pip.py> pip
  prefs: []
  type: TYPE_NORMAL
- en: Install neo-python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, clone neo-python from the City of Zion and check out the development branch.>
    cd ~/Desktop> git clone https://github.com/CityOfZion/neo-python.git> cd neo-python>
    git checkout developmentYou can create a virtual environment using Python 3.6
    and then run the activate script.> python3.6 -m venv venv> source venv/bin/activateEnsure
    you have the latest pip version by running this command:(venv)> pip install --upgrade
    pipNow you can install the package in an editable form.(venv)> pip install -e.You
    can compare your output with mine; for the steps you took so far, see Figure [7-6](#Fig6).![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig6_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig6_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-6
  prefs: []
  type: TYPE_NORMAL
- en: neo-python installation output
  prefs: []
  type: TYPE_NORMAL
- en: To confirm the installation went well, run the --version command. At the time
    of writing, it outputs version 0.8.3.> np-prompt --versionneo-python v0.8.3-devNow
    you can open a NEO bash with the np-prompt command. To exit bash, run the exit
    command.> np-promptneo>exit
  prefs: []
  type: TYPE_NORMAL
- en: Install neo-privatenet-docker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You already installed Docker, so now you can create a Docker container that
    will create four NEO nodes to create a private testnet. Go ahead and install the
    Docker container on your desktop and build the files, as shown here:> cd ~/Desktop>
    git clone https://github.com/CityOfZion/neo-privatenet-docker.git> cd neo-privatenet-docker>./docker_build.shAfter
    the image is built, you can start a private network like this:>./docker_build.shSuccessfully
    built #build number'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If Docker needs to be restarted or is not running, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: ./docker_run.sh
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Start a Network and Claim Initial NEO and Gas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you will start your private network, create your wallet, and claim the
    initial NEO and 40 gas. This is done by running the docker_run_and_create_wallet.sh
    script. You can see the output in Figure [7-7](#Fig7).> ./docker_run_and_create_wallet.sh![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig7_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig7_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-7
  prefs: []
  type: TYPE_NORMAL
- en: docker_run_and_create_wallet script output
  prefs: []
  type: TYPE_NORMAL
- en: Once the process is completed, you can get a confirmation of the two files that
    were created (see Figure [7-7](#Fig7)).
  prefs: []
  type: TYPE_NORMAL
- en: '*neo-privnet.wallet*: This file is a wallet that you can use with neo-python  .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*neo-privnet.wif*: This file is a WIF private key you can import into other
    clients, such as neo-gui.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These files give you access to the wallet containing the NEO and gas for your
    private network. The script automatically claimed the NEO and gas for you.
  prefs: []
  type: TYPE_NORMAL
- en: You can check Docker and see the neo-privnet container running, as shown in
    Figure [7-8](#Fig8).> docker ps![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig8_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig8_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-8
  prefs: []
  type: TYPE_NORMAL
- en: neo-privnet Docker container running
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrapping the Testnet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you have a private testnet running, you need to bootstrap the testnet
    blockchain database. This synchronizes the network and is done by running np-bootstrap.
    This can take a while; once completed, you will get confirmation.> np-bootstrap
    -nconfirmSuccessfully downloaded bootstrap chain!
  prefs: []
  type: TYPE_NORMAL
- en: Notice that you use the –n flag  to get database notifications.
  prefs: []
  type: TYPE_NORMAL
- en: Start NEO Bash
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you have your private testnet container running with four nodes and
    you bootstrap your testnet database, you can start a neo-cli bash by calling the
    prompt.py command.> cd ~/Desktop/neo-python/neo/bin> python3.6 prompt.py –pOnce
    you run this command, the NEO bash opens, and you can use the state command  to
    view information about the blockchain, as shown in Figure [7-9](#Fig9).neo> state![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig9_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig9_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-9
  prefs: []
  type: TYPE_NORMAL
- en: Information about your blockchain via the state command
  prefs: []
  type: TYPE_NORMAL
- en: 'neo-cli offers access to many RPC calls via the NEO API; however, the wallet
    needs to be open to run these commands. You can open your wallet with the wallet
    command and the file location. This command will ask for the wallet’s password.
    For the password, use coz.neo> wallet open ~/Desktop/neo-privatenet-docker/neo-privnet.walletpassword:
    cozNext, rebuild the wallet and call the wallet command. You will see the NEO
    and NeoGas fake testnet coins available (see Figure [7-10](#Fig10)).neo> wallet
    rebuildneo> wallet![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig10_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig10_HTML.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-10
  prefs: []
  type: TYPE_NORMAL
- en: neo-privnet wallet showing claimed coins
  prefs: []
  type: TYPE_NORMAL
- en: To close the wallet and exit bash, use the wallet close command and exit.neo>
    wallet closeneo> exit
  prefs: []
  type: TYPE_NORMAL
- en: You have succeeded in creating a private NEO blockchain running on a testnet
    with 100 million NEO and 40.0 NeoGas claimed coins that you can use for development.
  prefs: []
  type: TYPE_NORMAL
- en: Potential Problems During Installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'NEO  feels like chasing a moving target at times. In fact, it’s likely that
    by the time you are utilizing the instructions in this book, the code won’t work
    as expected because of changes in NEO. Moreover, during installation, there are
    some potential problems that you can encounter. I suggest you check the latest
    information here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/CityOfZion/neo-python#getting-started](https://github.com/CityOfZion/neo-python%2523getting-started)'
  prefs: []
  type: TYPE_NORMAL
- en: Clean Database
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you need to clean the neo-python database to bootstrap and sync again, run
    the following command:> rm -rf ~/.neopython/Chains/privnet*
  prefs: []
  type: TYPE_NORMAL
- en: b’Corruption Message
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If you are getting a “b’Corruption: corrupted compressed block contents” message,
    you need to re-install LevelDB.> brew reinstall leveldb'
  prefs: []
  type: TYPE_NORMAL
- en: Restart Docker
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It’s good to know how to restart Docker in case you need to restart your computer,
    upgrade the Docker version, or upgrade the container files. To restart Docker,
    select Docker from the top menu and click Restart (see Figure [7-11](#Fig11)).
  prefs: []
  type: TYPE_NORMAL
- en: The state is deleted (the whole “old” blockchain will be gone), and you should
    also remove Chains/privnet from neo-python and any privnet wallets you created.>
    rm ~/Desktop/neo-privatenet-docker/*.wallet> rm ~/Desktop/neo-privatenet-docker/*.wif>
    rm -rf ~/.neopython/Chains/privnet*> docker ps![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig11_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig11_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-11
  prefs: []
  type: TYPE_NORMAL
- en: Docker top menu icon restart button
  prefs: []
  type: TYPE_NORMAL
- en: NEO “Hello, World”
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You have your local private testnet environment and NEO tools set up on your
    machine, so now you are ready for the development of your NeoContract project.
    You can develop in different languages, and the process is similar. I will show
    you the code in C# as well as Python. I have kept the code to a simple working
    “Hello, World” example, but once you are able to get to this point, you can experiment
    with the different features NEO has to offer. Follow these steps to create and
    publish your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Building the NeoContract framework*: Generate a Neo.SmartContract.Framework.dll
    file.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Create a NEO “Hello, World” Project*: Create your #C contract project.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Code a NEO “Hello, World” smart contract in C#*: Code your minimalistic example
    in C#.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Code a NEO “Hello, World” smart contract in Python*: Code your minimalistic
    example in Python.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Publish*: Publish your contract to your private testnet chain.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Building the NeoContract Framework: Neo.SmartContract.Framework.dll'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first step is to create a file that holds the NeoContract framework code
    that you need to include in your NeoContract in order to access the NEO features.
  prefs: []
  type: TYPE_NORMAL
- en: To build your NeoContract, you will be downloading and installing the NEO Development
    Pack. You will place these tools on your desktop for easy access. Note that you
    can always move the files to a better location later. Navigate to the desktop
    and clone the neo-devpack-dotnet project.> cd ~/Desktop> git clone https://github.com/neo-project/neo-devpack-dotnetNext,
    run the neo-devpack-dotnet.sln file by double-clicking it or run the Terminal
    open command.> open neo-devpack-dotnet.sln
  prefs: []
  type: TYPE_NORMAL
- en: VS opens, and you should expect to get three error messages. Click OK to dismiss
    these messages, as these errors will not affect building your project.
  prefs: []
  type: TYPE_NORMAL
- en: In the left window, you can see the Solution tab, as shown in Figure [7-12](#Fig12).
    Expand “neo-devpack-dotnet (master)” if it’s not expanded.
  prefs: []
  type: TYPE_NORMAL
- en: Next, right-click Neo.Smartcontract.Framework and choose Build Neo.Smartcontract.Framework.
    See Figure [7-12](#Fig12).![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig12_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig12_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-12
  prefs: []
  type: TYPE_NORMAL
- en: Building the Neo.SmartContract.Framework project
  prefs: []
  type: TYPE_NORMAL
- en: Once the build is completed, you will get a “Build successful” message in the
    VS output’s top middle window. You can also find the Neo.Smartcontract.Framework.dll
    file here:> cat ~/Desktop/neo-devpack-dotnet/Neo.SmartContract.Framework/bin/Debug/netstandard1.6/Neo.SmartContract.Framework.dll
  prefs: []
  type: TYPE_NORMAL
- en: The .dll file is a .NET Intermediate Language (IL) language file that you will
    include in your library to have access to the NeoContract framework code. Neo.SmartContract.Framework
    does not support the full set of C# features because of the differences between
    the NeoVM and the C# IL file.
  prefs: []
  type: TYPE_NORMAL
- en: Create a NEO “Hello, World” Project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that the Neo.Smartcontract.Framework.dll file is ready to be used, you can
    create your project and include the NEO framework as a dependency.
  prefs: []
  type: TYPE_NORMAL
- en: To get started, open Visual Studio. Select File ➤ New Solution... ➤ New Project
    wizard opens up. In the left menu, select Library ➤ .NET Standard Library. Next,
    select .NET Standard 2.0 for the .NET Core version and then click Next. See Figure
    [7-13](#Fig13).![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig13_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig13_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-13
  prefs: []
  type: TYPE_NORMAL
- en: New Project template wizard
  prefs: []
  type: TYPE_NORMAL
- en: The configure wizard opens with a new project window. Call the project **hello_contract**,
    leave the default settings and click the Create button. See Figure [7-14](#Fig14).![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig14_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig14_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-14
  prefs: []
  type: TYPE_NORMAL
- en: VS create new project wizard
  prefs: []
  type: TYPE_NORMAL
- en: Once the project is created, you need to attach the file Neo.Smartcontract.Framework.dll
    as a dependency. To do that, right-click the Dependencies folder in the Solution
    menu and then click Edit References. See Figure [7-15](#Fig15).![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig15_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig15_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-15
  prefs: []
  type: TYPE_NORMAL
- en: “Hello, World” project dependencies edit reference
  prefs: []
  type: TYPE_NORMAL
- en: In the Edit References window, go to the .NET assembly tab. Choose Browse and
    add the Neo.Smartcontract.Framework.dll file located here:~/Desktop/neo-devpack-dotnet/Neo.SmartContract.Framework/bin/Debug/netstandard1.6/Neo.SmartContract.Framework.dllNext,
    click Open, as shown in Figure [7-16](#Fig16). Select the Neo.SmartContract.Framework.dll
    checkbox and click Ok.![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig16_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig16_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-16
  prefs: []
  type: TYPE_NORMAL
- en: VC edit references .NET assembly
  prefs: []
  type: TYPE_NORMAL
- en: Coding the NEO “Hello, World” Smart Contract in C#
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, you will be using C# to develop your NEO “Hello, World” smart
    contract in .NET. The NeoVM is more compact; you can compile only limited C#/dotnet
    features into your AVM file. You can view the list of features available for development
    here: [https://docs.neo.org/en-us/sc/quickstart/limitation.html](https://docs.neo.org/en-us/sc/quickstart/limitation.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'The examples will use the “Hello, World” example provided in the NEO examples.using
    Neo.SmartContract.Framework;using Neo.SmartContract.Framework.Services.Neo;public
    class Class1: SmartContract{    public static void Main()    {        Storage.Put(Storage.CurrentContext,
    "Hello", "World");    }}'
  prefs: []
  type: TYPE_NORMAL
- en: After writing the code, select Build from the top menu and then Build All (or
    Command+B) to compile the Class1.cs code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The .dll library file was created in the bin/Debug/netstandard2.0/ folder  .
    You will use this .dll file with the neo-compiler and convert the .dll file to
    an AVM file. After compiling the DLL file, the hello_contract.dll file is created
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: ~/Projects/hello_contract/hello_contract/obj/Debug/netstandard2.0/hello_contract.dll
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The NeoContract framework generates the NeoVM bytecode. The code is saved in
    the AVM file format. The *.avm file can then be deployed on the NEO blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the NEO “Hello, World” Smart Contract in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Like in #C, you can generate some minimalistic Python code to print “Hello,
    World.” You can use the Eclipse IDE ( [https://www.eclipse.org/ide/](https://www.eclipse.org/ide/)
    ) or any editor of your choosing. These instructions will be using vim. Create
    a file named sample1.py.> vim ~/Desktop/smartContracts/sample1.pyType the following
    code to print “Hello World.”def Main():  print("Hello World")  return True'
  prefs: []
  type: TYPE_NORMAL
- en: To close and save the file, type :wq in vim.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling Your Smart Contracts to .avm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you have two files named sample1.py and hello_contract.dll, the next
    step is to compile these files into NEO virtual machine files (.avm) that you
    will deploy on the NEO blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by compiling the hello_contract.dll file. Change the directory to
    the DLL file.> cd ~/Desktop/neo-compiler/neon/bin/Debug/netcoreapp2.0/osx.10.11-x64/publishCopy
    Neo.SmartContract.Framework.dll.> cp ~/Projects/hello_contract/hello_contract/bin/Debug/netstandard2.0/Neo.SmartContract.Framework.dll
    ~/Projects/hello_contract/hello_contract/obj/Debug/netstandard2.0Now, you can
    use the dotnet core  tool to publish your DLL into an AVM file, as shown in Figure
    [7-17](#Fig17).> dotnet neon.dll ~/Projects/hello_contract/hello_contract/obj/Debug/netstandard2.0/hello_contract.dllYou
    can see the output, as shown in Figure [7-17](#Fig17).![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig17_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig17_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-17
  prefs: []
  type: TYPE_NORMAL
- en: Converting a DLL into AVM bytecode
  prefs: []
  type: TYPE_NORMAL
- en: You can see the AVM bytecode file using the ls command  .> ls ~/Projects/hello_contract/hello_contract/obj/Debug/netstandard2.0/∗.avmhello_contract.avmSimilarly,
    you can compile the Python sample1.py file into AVM. In NEO bash, use the sc build
    command.> cd ~/Desktop/neo-python/neo/bin> python3.6 prompt.py –pneo> sc build
    ~/Desktop/smartContracts/sample1.pySaved output to ~/Desktop/smartContracts/sample1.avm
  prefs: []
  type: TYPE_NORMAL
- en: Publish a Smart Contract on a Private Testnet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next step is to deploy your AVM files to the NEO private testnet chain.
    You don’t need to remember all the options. You can call the command with the
    help flag to see the options.neo> sc deploy helpDeploy a smart contract (.avm)
    file to the blockchainUsage: sc deploy {path} {storage} {dynamic_invoke} {payable}
    {params} (returntype)path            - path to the desired Python (.py) filestorage         -
    boolean input to determine if smart contract requires storagedynamic_invoke  -
    boolean input to determine if smart contract requires dynamic invokepayable         -
    boolean input to determine if smart contract is payableparams          - input
    parameter types of the smart contractreturntype      - (Optional) the return type
    of the smart contract outputFor more information about parameter types see                  https://neo-python.readthedocs.io/en/latest/data-types.html#contractparametertypesNext
    set storage, dynamic_invoke, and payable as false, and set params and returntype
    as 01, as shown in Figure [7-18](#Fig18).neo> sc deploy ~/Desktop/smartContracts/sample1.avm
    False False False 01 01![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig18_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig18_HTML.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-18
  prefs: []
  type: TYPE_NORMAL
- en: Publishing an AVM file on a private testnet chain
  prefs: []
  type: TYPE_NORMAL
- en: NEO asks for a contract name; let’s call the contract helloWorld. Leave the
    version, author, email, and description fields blank and enter your wallet password
    to pay for the contract.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing to Mainnet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To publish on mainnet, you can use the same process as you did with the testnet;
    just bootstrap to the mainnet.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrapping to Mainnet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To bootstrap to the mainnet blockchain, just run np-bootstrap with the -m flag
    (it’s close to 10 GB). You can also use the notifications database on mainnet.>
    np-prompt –m -n
  prefs: []
  type: TYPE_NORMAL
- en: Installing the neo-gui Client
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An easier approach is to set and publish a NeoContract through neo-gui. You
    need to set up a virtual machine for PC, but deploying AVM files is a breeze.
    Follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.neo.org/en-us/sc/quickstart/deploy-invoke.html](https://docs.neo.org/en-us/sc/quickstart/deploy-invoke.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.neo.org/en-us/node/gui/install.html](https://docs.neo.org/en-us/node/gui/install.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ethereum vs. EOS vs. NEO : Smart Contracts Developer Perspective Showdown'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, I have covered three major blockchains for developing smart contracts,
    and it’s hard not to compare them. However, there are so many factors to take
    into account when comparing these three blockchains. Additionally, at the time
    of writing, there are more than 40 blockchain projects that you can choose from
    for the deployment of smart contracts. Each project has pros and cons, and it’s
    beyond the scope of this book to cover all of them. Instead, I will be focusing
    on specific criteria to try to help you understand what factors to consider when
    selecting a platform out of the three I have covered so far.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is an organization that tries to rate these different blockchains; it’s
    called the China Center for Information Industry Development (CCID). CCID utilizes
    contributions from professors and researchers at China’s most prestigious educational
    institutions including Tsinghua and Beijing University to take into account features,
    adoption rates, and many other indicators to rank each blockchain. However, these
    ratings change often, and you should check the latest blockchain ratings on the
    web site: [http://special.ccidnet.com/pub-bc-eval/index.shtml](http://special.ccidnet.com/pub-bc-eval/index.shtml)
    . Note that at the time of writing, EOS and Ethereum have been maintaining their
    dominance for the fourth consecutive time on the CCID list.'
  prefs: []
  type: TYPE_NORMAL
- en: Further, determining what blockchain to utilize to publish smart contracts should
    take into account more factors, such as your team’s ability, funding, the number
    of needed transactions, the number of accounts needed, wallets, exchanges, and
    much more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another major indicator to consider in determining the health of a blockchain
    is the user and developer adoption. You can find the current number of dapps for
    different smart contract platforms by checking these sites:'
  prefs: []
  type: TYPE_NORMAL
- en: '*EOS*: [https://dappradar.com/eos-dapps](https://dappradar.com/eos-dapps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ethereum*: [https://dappradar.com/dapps](https://dappradar.com/dapps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*NEO*: [http://ndapp.org/](http://ndapp.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking through the list of dapps, keep in mind that although there are 6,050
    dapps listed on Dappradar.com at the time of writing, there are only 106,938 users,
    which indicates that few dapps are being used and mass adaptation is not here
    yet.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, note that this comparison holds true at the time of writing and
    is based on my opinion. You should do your own research and due diligence before
    selecting the ideal blockchain to fit your smart contract needs. Table [7-1](#Tab1)
    provides the comparison.Table 7-1
  prefs: []
  type: TYPE_NORMAL
- en: Etherum vs. EOS vs. NEO Smart Contracts Comparison
  prefs: []
  type: TYPE_NORMAL
- en: '| Category | Ethereum | EOS | NEO |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Adoption | Currently holds the crown | Steady increase in adoption | Least
    adopted out of the three |'
  prefs: []
  type: TYPE_TB
- en: '| CCID ranking | Rank #2 | Rank #1 | Rank #5 |'
  prefs: []
  type: TYPE_TB
- en: '| Consensus mechanism | PoW | DPoS | dBFT |'
  prefs: []
  type: TYPE_TB
- en: '| Transactions per second | 15 | Millions | 10,000 transactions per second
    |'
  prefs: []
  type: TYPE_TB
- en: '| Dapp deployment cost | Minimum fee of 32,000 gas, plus 200 gas per byte of
    the source code | ~120 EOS | Fixed cost of 100 to 1,000 gasICO costs 5,000 gas
    to register digital asset; renew fee of 5,000 gas per year |'
  prefs: []
  type: TYPE_TB
- en: '| Transaction cost | $0.05 to $3.5 | $0 (however, creating a new account costs
    $1 to $4 per account paid by application developers) | Initial 10 gas execution
    free, fees for system calls and instruction (see white paper) |'
  prefs: []
  type: TYPE_TB
- en: '| Scalability | No; await hard fork | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Dev tools | Mature development tools  from project and community, including
    tools for development frameworks, IDEs, communicating, and test tools | Dev tools
    could use an upgrade; debugging still done utilizing caveman debugging | Mature
    development tools |'
  prefs: []
  type: TYPE_TB
- en: '| Docs | Well documented by both project and community | Developers.EOS.IO
    docs and community tutorials are not keeping up with EOS.IO GitHub changes; many
    GitHub issues regarding installation | Projects docs ( [http://docs.neo.org](http://docs.neo.org)
    ) and community tutorials |'
  prefs: []
  type: TYPE_TB
- en: '| Community support | The Ethereum Community Fund (ECF) with organization support:
    Microsoft, Intel, Amazon, J.P. Morgan, and even government involvement | Committed
    $1 *billion* in funds focused on the growth of the EOS ecosystem | Has run and
    supported more than 100 community events |'
  prefs: []
  type: TYPE_TB
- en: '| Development languages | Solidity, Bamboo, Vyper, LLL, Flint | C, C++ | C#,
    VB.NET, F# Java, Kotlin, and Python; future plans to support more languages |'
  prefs: []
  type: TYPE_TB
- en: '| Market cap | $14,068,553,166 USD | $2,341,702,969 USD | $488,507,580 USD
    |'
  prefs: []
  type: TYPE_TB
- en: '| Number of dapps | *1,324* | 226 | Less than 100 |'
  prefs: []
  type: TYPE_TB
- en: '| Wallet | Desktop and hardware wallets, more options than EOS and NEO | Desktop
    and hardware wallets | Desktop and hardware wallets |'
  prefs: []
  type: TYPE_TB
- en: '| Large exchange support | Available on all major exchanges | Not supported
    yet on many major exchanges such as Coinbase | Not supported yet on many major
    exchanges such as Coinbase |'
  prefs: []
  type: TYPE_TB
- en: '| Turing complete | Yes | No | No |'
  prefs: []
  type: TYPE_TB
- en: 'This list summarizes the Ethereum, EOS.IO, and NEO Blockchain platforms’ pros
    and cons:'
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum’s biggest pro is that it was the first and most popular smart contract
    platform and has the most developers, third-party tools, support, documentation,
    and support community. The biggest downside is the Ethereum scalability issue
    of using PoW; there is a hard fork in the works at the time of writing to remedy
    this downside and move Ethereum to PoS. Another downside is the cost of 200 gas
    per byte for source code; this is pricey if your code is not optimized, especially
    as you need to constantly republish your code. Lastly, the support for less popular
    programming languages such as Solidity is less than ideal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EOS’s advantage is its scalability and ability to run millions of transactions
    per second with no change, as well as faster code execution using WASM. EOS supports
    C and C++, and the actual blockchain coded in C++ gives it an advantage as C has
    a larger developer base than Solidity. However, EOS has a long way to go in terms
    of adoption, providing $1 billion funding can be useful for companies and individuals
    with the right idea. Its high ratings and great features are not enough to replace
    Ethereum in dominance it claims to be. Only time will tell.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NEO  supports major programming languages (C#, VB.NET, Java, and Python), giving
    it a big advantage as a large number of developers can code with a smaller learning
    curve. Additionally, the efficient and inexpensive computationally execution of
    contracts is an advantage; however, NEO has the smallest community support out
    of the three platforms, and the stiff 5,000 NeoGas to register digital assets
    yearly may be a buzz killer for many potential projects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where to Go from Here
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Try these resources:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Read the NEO docs here: [http://docs.neo.org](http://docs.neo.org) . The site
    includes tutorials for sample NeoContracts, creating NEO nodes, NEO utilities,
    white papers, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visit [https://neo.org/client](https://neo.org/client) to find NEO wallets from
    third parties.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For debugging, check Neunity.Adapter or Neo-Debugger to write test cases and
    run source code in the IDE: [https://github.com/CityOfZion/neo-debugger-tools/releases](https://github.com/CityOfZion/neo-debugger-tools/releases)
    .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create additional NeoContracts and include SmartContractEvent, which gets dispatched
    through neo.EventHub; subscribe and test your contracts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, I covered the NEO blockchain and NEOContracts. You looked at
    NEO’s high-level blockchain architecture and learned about NEO’s smart economy.
    You set your local environment and upgraded Xcode, installed Visual Studio 2017
    IDE, and installed .NET Core.
  prefs: []
  type: TYPE_NORMAL
- en: You installed Docker, so you can now create containers, and you downloaded neo-compiler
    and generated neon.dll. Lastly, you built the neo-cli so you can manage your wallet
    and run other RPC operations.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you created a local NEO private testnet by installing neo-python and neo-privatenet-docker.
    You bootstrapped the testnet and started NEO bash and were then able to start
    your network and claim NEO and gas.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, I covered potential problems during the installation of your NEO
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you created two “Hello, World” projects, one in C# and one in Python,
    and were able to compile these projects into the NEO virtual machine’s bytecode
    (AVM) files. You took these files and learned how to publish them on the NEO testnet
    blockchain as well as on the NEO mainnet.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, I compared Ethereum versus EOS versus NEO to help you better understand
    the differences between these platforms as well what criteria to look at when
    selecting a platform for your smart contracts.
  prefs: []
  type: TYPE_NORMAL
