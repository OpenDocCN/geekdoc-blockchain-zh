- en: © Elad Elrom 2019Elad ElromThe Blockchain Developer[https://doi.org/10.1007/978-1-4842-4847-8_7](https://doi.org/10.1007/978-1-4842-4847-8_7)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © Elad Elrom 2019 Elad Elrom 区块链开发者[https://doi.org/10.1007/978-1-4842-4847-8_7](https://doi.org/10.1007/978-1-4842-4847-8_7)
- en: 7. NEO Blockchain and Smart Contracts
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7. NEO区块链与智能合约
- en: Elad Elrom^([1](#Aff2) )(1)New York, NY, USA
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Elad Elrom^([1](#Aff2)  )(1)纽约，纽约，美国
- en: In Chapter [1](475651_1_En_1_Chapter.xhtml), I covered the NEO proof of stake
    (PoS) blockchain consensus mechanism. In Chapter [2](475651_1_En_2_Chapter.xhtml),
    you created a NEO bookkeeping node on AWS Ubuntu and learned how to request a
    consensus authority certificate and get elected as a bookkeeper.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在第[1](475651_1_En_1_Chapter.xhtml)章中，我介绍了NEO权益证明（PoS）区块链共识机制。在第[2](475651_1_En_2_Chapter.xhtml)章中，你在AWS
    Ubuntu上创建了一个NEO记账节点，并学习了如何申请共识权威证书和当选记账节点。
- en: In this chapter, I will expand on the NEO blockchain, and you will learn how
    to set up a local environment, do operations in NEO wallets, create smart contracts
    (NeoContracts), and publish. In this chapter, I will cover NEO’s blockchain high-level
    architecture and how to set up your local environment, create a local testnet
    chain, create “Hello, World” projects in both C# and Python, publish these smart
    contracts, and learn the criteria to compare Ethereum versus EOS versus NEO.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将详细介绍NEO区块链，您将学习如何设置本地环境，在NEO钱包中进行操作，创建智能合约（NeoContracts），并进行发布。在本章中，我将涵盖NEO区块链的高级架构以及如何设置本地环境，创建本地测试网链，用C#和Python创建“你好，世界”项目，发布这些智能合约，并学习比较以太坊、EOS和NEO的标准。
- en: As you can see, understanding smart contracts, blockchain, and the process of
    publishing is similar between projects, and covering three projects is sufficient
    to gain an understanding of how to work with the rest of the 40 (at the time of
    writing) projects available for writing smart contracts that are out there.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，理解智能合约、区块链以及发布过程在各个项目中是相似的，涵盖三个项目就足以了解如何与其他40个项目（截至撰写本文时）一起编写智能合约。
- en: NEO’s High-Level Blockchain Architecture
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NEO的高级区块链架构
- en: NEO was founded in 2014 with the name of AntShares by Da Hongfei and Erik Zhang
    and then was open sourced on GitHub in June 2015 with the name of NEO. The NEO
    consensus mechanism is called Byzantine Fault Tolerant (dBFT), which is a modified
    PoS. This type of mechanism makes NEO a scalable blockchain. Bookkeeping nodes
    are randomly selected to validate transactions and can support up to 10,000 transactions
    per second.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: NEO于2014年由达鸿飞和Erik Zhang以AntShares的名字创立，然后在2015年6月以NEO的名字在GitHub上开源。NEO的共识机制被称为拜占庭容错（dBFT），这是一种修改后的PoS。这种机制使得NEO成为一个可扩展的区块链。记账节点随机选择以验证交易，并可支持每秒10,000笔交易。
- en: '*“NEO is a non-profit community-driven blockchain project. It utilizes blockchain
    technology and digital identity to digitize assets and automate the management
    of digital assets using smart contracts. Using a distributed network, it aims
    to create a ‘Smart Economy’. ”*'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “NEO是一个非盈利性社区驱动的区块链项目。它利用区块链技术和数字身份来数字化资产和利用智能合约自动化管理数字资产。利用分布式网络，旨在创建一个‘智能经济’。”
- en: ''
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Neo.org
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —Neo.org
- en: 'NEO transactions are charges with NEO gas tokens. The NEO genesis block includes
    100 million NEO. Half were sold to early investors, and half were locked in NEO
    smart contract tokens. Each year 15 million NEO tokens are unlocked to be used
    for the NEO development team to fund development goals. NEO charges fees for transactions
    as well as a smart contract’s related transactions. The NEO fee structure related
    to smart contracts is listed in the NEO white paper: [http://docs.neo.org/en-us/sc/systemfees.html](http://docs.neo.org/en-us/sc/systemfees.html)
    .'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: NEO交易使用NEO燃料代币进行支付。NEO创世块包含1亿NEO。一半卖给了早期投资者，另一半被锁定在NEO智能合约代币中。每年有1500万NEO代币解锁，用于资助NEO开发团队的发展目标。NEO对交易以及与智能合约相关的交易收取费用。NEO关于智能合约的费用结构列在NEO白皮书：[http://docs.neo.org/en-us/sc/systemfees.html](http://docs.neo.org/en-us/sc/systemfees.html)。
- en: In term of programming languages, NEO smart contracts support the NeoVM (NEO’s
    Universal Lightweight Virtual Machine) compiler, Microsoft.net, Java, Kotlin,
    Go, and Python.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程语言方面，NEO智能合约支持NeoVM（NEO的通用轻量级虚拟机）编译器、Microsoft.net、Java、Kotlin、Go和Python。
- en: 'Here are some notable NEO development features:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些值得注意的NEO开发特性：
- en: NEO can create smart contract tokens built with the Communications Standard
    (NEP5). These tokens are able to communicate with other NEO tokens.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NEO可以创建基于通信标准（NEP5）的智能合约代币。这些代币能够与其他NEO代币进行通信。
- en: Smart contracts can communicate with other blockchains (this feature is called
    NeoX).
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约可以与其他区块链进行通信（这一特性称为NeoX）。
- en: NEO can pass information via a file sharing protocol (called NeoFS).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NEO可以通过一个文件共享协议（称为NeoFS）传递信息。
- en: It uses a lattice-based cryptographic mechanism called quantum-safe (NeoQS).
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用了一种称为量子安全的基于格密码学机制（NeoQS）。
- en: NEO’s “smart economy” infrastructure (I will explain this concept in the next
    section) enables smart contracts to support front-end applications and integrate
    with other smart contracts and other blockchains through an open API.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: NEO的“智慧经济”基础设施（我将在下一节解释这个概念）使智能合约能够支持前端应用程序，并通过开放API与其他智能合约和其他区块链集成。
- en: NEO’s open API allows you to integrate data from external sources. Figure [7-1](#Fig1)
    shows a high-level architecture diagram of the NeoVM. The NeoVM core is the deployment
    box (the dashed box). As you can see, the external data with the execution engine
    (green box) enables smart contracts to interact and perform operations. Then data
    can be stored on the NEO distributed ledger.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: NEO的开放API允许你集成来自外部源的数据。图[7-1](#Fig1)显示了NeoVM的高级架构图。NeoVM核心是部署盒（虚线框）。正如你所见，外部数据与执行引擎（绿色框）使智能合约能够交互并执行操作。然后数据可以存储在NEO分布式账本上。
- en: '*“We hope the platform can be used for different front end scenarios, such
    as the Digital asset wallet, Forum, Voting, Profile management and Mobile applications.
    The platform also features an open API that can be used for integration with other
    systems.”*'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “我们希望这个平台可以用于不同的前端场景，比如数字资产钱包、论坛、投票、资料管理和移动应用程序。该平台还具有一个开放API，可用于与其他系统的集成。”
- en: ''
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Da Hongfei, Zhao Chen founder of NEO
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —NEO的创始人达鸿飞，赵 Chen
- en: '![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig1_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig1_HTML.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig1_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig1_HTML.jpg)'
- en: Figure 7-1
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-1
- en: 'NEO’s virtual machine architecture diagram. Image credit: docs.neo.org.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: NEO的虚拟机架构图。图片来源于：docs.neo.org。
- en: What Is NEO’s Smart Economy?
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是NEO的智慧经济？
- en: NEO coined the term *smart economy*, which explains NEO’s vision. This vision
    consists of changing your existing market from a traditional economy to the smart
    economy with the power of a decentralized blockchain. To achieve this goal, NEO
    integrates digital assets, digital identities, and smart contracts into its platform.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: NEO创造了**智慧经济**这个术语，解释了NEO的愿景。这个愿景包括用去中心化区块链的力量将你的现有市场从传统经济转变为智慧经济。为了实现这个目标，NEO将数字资产、数字身份和智能合约整合到其平台上。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: NEO’s smart economy vision is aimed to change the way existing markets work,
    from a traditional economy to a “smart economy,” with the power of a decentralized
    blockchain. This is achieved by integrating digital assets, digital identities,
    and smart contracts.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: NEO的智慧经济愿景旨在改变现有市场的工作方式，从传统经济转变为“智慧经济”，这是通过去中心化区块链的力量实现的。这通过整合数字资产、数字身份和智能合约来实现。
- en: 'NEO’s smart economy concept consists of integrating the following three components:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: NEO的智慧经济概念包括整合以下三个组件：
- en: '*NEO digital assets*: These assets contain electronic data and can be programmed.
    Placing the digital assets on a blockchain provides the benefit of PoS blockchains,
    such as decentralization, trust, traceability, and transparency. The NEO blockchain
    enables users to register, trade, and transfer different types of assets. Physical
    assets get digitization through digital identity; then these digital assets can
    be protected by law through validation. For an ICO, it costs 5,000 gas to register
    a digital asset. Then there is a renewal fee of 5,000 gas per year.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NEO数字资产**：这些资产包含电子数据并且可以被编程。将数字资产放在区块链上提供了诸如去中心化、信任、可追溯性和透明性等PoS区块链的好处。NEO区块链允许用户注册、交易和转移不同类型的资产。通过数字身份实现物理资产的数字化；然后这些数字资产可以通过验证受到法律保护。对于一个ICO，注册一个数字资产需要5000个气体。然后每年会有5000个气体的续费。'
- en: '*NEO digital identity*: This is the digitization of the identity of individuals,
    organizations, or any other entities. A NEO digital identity is based on the public
    key infrastructure (PKI) X.509 standard implementation that also supports web
    of trust point-to-point certificates.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NEO数字身份**：这是个人、组织或其他实体的身份的数字化。一个NEO数字身份基于公钥基础设施（PKI）X.509标准的实现，同时也支持信任网络点对点证书。'
- en: '*NEO smart contract*: Smart contracts on NEO are called NeoContracts, and they
    support the C#, VB.NET, F#, Java, Kotlin, and Python languages. Supporting these
    languages gives the benefits of having sophisticated development, debugging, and
    compilation in the Visual Studio, Eclipse, and WebStorm IDEs. NeoVM is built for
    scalability.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*NEO智能合约*：NEO上的智能合约称为NeoContracts，它们支持C#、VB.NET、F#、Java、Kotlin和Python语言。支持这些语言使得在Visual
    Studio、Eclipse和WebStorm IDE中拥有复杂的开发、调试和编译优势。NeoVM是为可扩展性而构建的。'
- en: Setting Up Your Local Environment
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Setting Up Your Local Environment
- en: 'As mentioned, NEO supports enterprise-level programming languages such as C#,
    VB.NET, F# Java, Kotlin, and Python. This selection of programming languages gives
    NEO an advantage in building NeoContracts because you can utilize the Visual Studio
    2017 IDE, which offers enterprise tools for development. In this chapter, I will
    be using the following .NET tools:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 'As mentioned, NEO supports enterprise-level programming languages such as C#,
    VB.NET, F# Java, Kotlin, and Python. This selection of programming languages gives
    NEO an advantage in building NeoContracts because you can utilize the Visual Studio
    2017 IDE, which offers enterprise tools for development. In this chapter, I will
    be using the following .NET tools:'
- en: '*Visual Studio 2017 IDE* : To follow along, install the Visual Studio (VS)
    Community Edition for Mac.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Visual Studio 2017 IDE* : To follow along, install the Visual Studio (VS)
    Community Edition for Mac.'
- en: '*.NET Core*: To follow along, install .NET Core to be able to publish DLL library
    files.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*.NET Core*: 为了跟上进度，请安装.NET Core，以便能够发布DLL库文件。'
- en: 'In addition to .NET, you need the following tools:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 'In addition to .NET, you need the following tools:'
- en: '*Xcode 10.1*: You need Xcode 10.2 for the tools and libraries you will be installing.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Xcode 10.1*: 你需要至少Xcode 10.2版本的工具和库。'
- en: '*Docker*: Docker is a popular tool for creating containers and integrating
    software. You will be using Docker for your private net to run a whole NEO blockchain
    to simulate four consensus nodes in a single, lightweight Docker container.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Docker*: Docker是一个流行的创建容器和集成软件的工具。你将使用Docker在你的私有网络中运行一个完整的NEO区块链，以在一个轻量级的Docker容器中模拟四个共识节点。'
- en: '*neo-compiler*: The NEO compiler is needed to turn your code to an .avm file
    that can be deployed on the NEO blockchain.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*neo-compiler*: NEO编译器是必需的，它可以将你的代码转换为可以在NEO区块链上部署的.avm文件。'
- en: '*neo-cli*: You will install and use the NEO command-line tools for wallets,
    operations, and RPC calls to the NEO API.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*neo-cli*: 你将安装并使用NEO命令行工具进行钱包、操作和RPC调用NEO API。'
- en: Now that you know what needed, let’s get started.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Now that you know what needed, let’s get started.
- en: Xcode 10.2
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Xcode 10.2
- en: At the time of writing, you need Xcode with at least version 10.1 for the tools
    and libraries needed for NEO. The latest Xcode at the time of writing is Xcode
    10.2.1.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: At the time of writing, you need Xcode with at least version 10.1 for the tools
    and libraries needed for NEO. The latest Xcode at the time of writing is Xcode
    10.2.1.
- en: You can check whether you already have Xcode installed via the command line.>
    xcodebuild --versionXcode 10.1Build version 10B61
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: You can check whether you already have Xcode installed via the command line.>
    xcodebuild --versionXcode 10.1Build version 10B61
- en: 'This command will output the version if Xcode is installed. If you need to
    upgrade or install, visit the Apple developer portal: [https://developer.apple.com/download/](https://developer.apple.com/download/)
    .'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 'This command will output the version if Xcode is installed. If you need to
    upgrade or install, visit the Apple developer portal: [https://developer.apple.com/download/](https://developer.apple.com/download/)
    .'
- en: Install Visual Studio 2017 IDE
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Install Visual Studio 2017 IDE
- en: 'Next, download and install the latest version of Visual Studio (VS) Community
    Edition for Mac. The community edition is free and can be downloaded from the
    following URL: [https://visualstudio.microsoft.com/vs/community/](https://visualstudio.microsoft.com/vs/community/)
    .'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 'Next, download and install the latest version of Visual Studio (VS) Community
    Edition for Mac. The community edition is free and can be downloaded from the
    following URL: [https://visualstudio.microsoft.com/vs/community/](https://visualstudio.microsoft.com/vs/community/)
    .'
- en: 'For future reference, to uninstall a portion or all of VS, follow the instructions
    here: [https://docs.microsoft.com/en-us/visualstudio/mac/uninstall#net-core-script](https://docs.microsoft.com/en-us/visualstudio/mac/uninstall%2523net-core-script)
    .'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 'For future reference, to uninstall a portion or all of VS, follow the instructions
    here: [https://docs.microsoft.com/en-us/visualstudio/mac/uninstall#net-core-script](https://docs.microsoft.com/en-us/visualstudio/mac/uninstall%2523net-core-script)
    .'
- en: The complete VS 2017 consumes a lot of disk space; however, you don’t need all
    the packages downloaded. You need only Xamarin Workbooks in order to develop NeoContracts,
    so only download what’s needed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: The complete VS 2017 consumes a lot of disk space; however, you don’t need all
    the packages downloaded. You need only Xamarin Workbooks in order to develop NeoContracts,
    so only download what’s needed.
- en: During the installation process, the wizard gives you an option of what platforms
    and tools to install. Select Xamarin Workbooks by clicking the checkbox and click
    the Install button. See Figure [7-2](#Fig2).![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig2_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig2_HTML.jpg)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程中，向导会给你提供一个选项，选择要安装的平台和工具。通过点击复选框选择Xamarin Workbooks，然后点击安装按钮。见图[7-2](#Fig2)
    ![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig2_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig2_HTML.jpg)
- en: Figure 7-2
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-2
- en: Visual Studio Community Edition for Mac install wizard
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Mac版Visual Studio Community Edition安装向导
- en: Install .NET Core
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装.NET Core
- en: You will be installing .NET Core so you will be able to publish DLL libraries
    files via the command line. This will be done via the dotnet publish command.
    To download it, go to the dotnet Microsoft site; see Figure [7-3](#Fig3).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你将安装.NET Core，这样你就可以通过命令行发布DLL库文件。这将通过dotnet publish命令完成。要下载它，请前往dotnet Microsoft网站；见图[7-3](#Fig3)。
- en: '[https://dotnet.microsoft.com/download](https://dotnet.microsoft.com/download)![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig3_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig3_HTML.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dotnet.microsoft.com/download](https://dotnet.microsoft.com/download)![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig3_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig3_HTML.jpg)'
- en: Figure 7-3
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-3
- en: Downloading Microsoft dotnet core
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 下载Microsoft dotnet core
- en: 'You will be downloading both: Build apps - SDK v2.2.101 and Run apps - Runtime
    v2.2.0.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你将下载两个：构建应用 - SDK v2.2.101 和 运行应用 - 运行时 v2.2.0。
- en: To confirm the installation went well, run the dotnet --version command.> dotnet
    --version2.2.101
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认安装是否成功，运行dotnet --version命令。> dotnet --version2.2.101
- en: This command will output the dotnet version, which at the time of writing is
    2.2.101.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将输出dotnet版本，截至编写时为2.2.101。
- en: 'If the SDK is not installed, you will get the following error message:Did you
    mean to run dotnet SDK commands? Please install dotnet SDK from: http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409You
    can also output your machine info via the info command.> dotnet --info'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果SDK没有安装，你会收到以下错误信息：是要运行dotnet SDK命令吗？请从http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409安装dotnet
    SDK你可以通过info命令输出你的机器信息。> dotnet --info
- en: Install Docker
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装Docker
- en: Next, you will install Docker. Docker is needed to create a container that you
    will be using to create your local blockchain.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将安装Docker。Docker是创建您将用于创建本地区块链的容器的必要条件。
- en: '*Download Docker from here*: [https://download.docker.com/mac/beta/Docker.dmg](https://download.docker.com/mac/beta/Docker.dmg)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从这里下载Docker*：[https://download.docker.com/mac/beta/Docker.dmg](https://download.docker.com/mac/beta/Docker.dmg)'
- en: '*Installation instructions*: [https://runnable.com/docker/install-docker-on-macos](https://runnable.com/docker/install-docker-on-macos)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*安装说明*：[https://runnable.com/docker/install-docker-on-macos](https://runnable.com/docker/install-docker-on-macos)'
- en: Once Docker is downloaded and installed, double-click Docker from the Applications
    menu to get Docker running. You will see the Docker icon in the top menu on your
    computer. You can verify it’s installed correctly by typing docker at the command
    line; it lists the Docker commands.> dockerRun docker ps to view containers running
    to ensure you do not get any error messages.> docker psIf Docker is not running,
    you will get the following message:Cannot connect to the Docker daemon at unix:///var/run/docker.sock.
    Is the docker daemon running?Just open Docker in case you get this message. Additionally,
    if your container is not running but it was already created, you can use the -a
    (all) flag and find the container ID.> docker ps –aList containersThen when you
    have the container ID, you can start that container.> docker start [CONTAINER
    ID]
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦下载并安装了Docker，双击从应用程序菜单中的Docker，以启动Docker。你会在电脑上的顶部菜单看到Docker图标。你可以在命令行中输入docker来验证是否正确安装；它列出了Docker命令。>
    dockerRun docker ps to view containers running to ensure you do not get any error
    messages.> docker ps如果Docker没有运行，你会收到以下消息：无法连接到unix:///var/run/docker.sock的Docker守护进程。Docker守护进程正在运行吗？
    just open Docker in case you get this message. Additionally, if your container
    is not running but it was already created, you can use the -a (all) flag and find
    the container ID.> docker ps –aList containers然后当你有了容器ID，你可以启动那个容器。> docker start
    [CONTAINER ID]
- en: For now, you won’t see any list of containers as you have not created your containers
    yet.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你不会看到任何容器列表，因为你还没有创建你的容器。
- en: Download NeoCompiler and Generate neon.dll
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下载NeoCompiler并生成neon.dll
- en: To create your NeoContract, you need to generate an .avm file. To do so, you
    need to create a neon.dll file to be able to generate the smart contract. To get
    started, you will clone the neo-compiler to your desktop and then generate the
    neon.dll file.> cd ~/Desktop> git clone https://github.com/neo-project/neo-compiler>
    cd ~/Desktop/neo-compiler/neon/To publish your self-contained .avm file, you need
    to set a runtime identifier. You can set the neon.csproj runtime identifier to
    the correct OS. As I am using a Mac and not a PC here, I need to change the neon.csproj
    file. To follow along, first make a copy of the original.> cp neon.csproj neon.csproj.backupI
    am using vim, but feel free to use your favorite editor.> vim neon.csproj
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Once the file is open, replace the following configuration, which sets a target
    framework.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can compare your output and settings with my project here: chapter7/NEO/neo-compiler/neon/.
    Also, you can find neon.csproj there.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: <Project Sdk="Microsoft.NET.Sdk">  <PropertyGroup>    <Copyright>2016-2017 The
    Neo Project</Copyright>    <AssemblyTitle>Neo.Compiler.MSIL</AssemblyTitle>    <Version>2.3.1.1</Version>    <Authors>The
    Neo Project</Authors>    <TargetFramework>netcoreapp2.0</TargetFramework>    <PlatformTarget>anycpu</PlatformTarget>    <AssemblyName>neon</AssemblyName>    <OutputType>Exe</OutputType>    <PackageId>Neo.Compiler.MSIL</PackageId>    <RuntimeIdentifiers>osx.10.12-x64</RuntimeIdentifiers>    <RootNamespace>Neo.Compiler</RootNamespace>    <Company>The
    Neo Project</Company>    <Product>Neo.Compiler.MSIL</Product>    <Description>Neo.Compiler.MSIL</Description>  </PropertyGroup>  <PropertyGroup
    Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">    <DefineConstants>RELEASE;NETCOREAPP1_0</DefineConstants>    <DebugType>none</DebugType>    <DebugSymbols>False</DebugSymbols>    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>  </PropertyGroup>  <PropertyGroup
    Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>  </PropertyGroup>  <ItemGroup>    <PackageReference
    Include="Mono.Cecil" Version="0.10.0" />    <PackageReference Include="Neo.VM"
    Version="2.3.0" />  </ItemGroup></Project>Now publish pointing to the runtime
    identifier osx.10.11-x64 by passing the RuntimeIdentifier setting param  .> dotnet
    publish -r osx.10.11-x64The compiler created your neon.dll file here:bin/Debug/netcoreapp2.0/osx.10.11-x64/publish/neon.dllSee
    Figure [7-4](#Fig4) for the output.![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig4_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig4_HTML.jpg)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-4
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Compiling neon.dll for the target osx.10.11-x64
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: neo-cli to Generate a NEO Node
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you want to create a fill NEO node. To generate a full NEO node, there
    are two full-node options.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '*neo-gui* : This can be used by both developers and NEO users. It can be used
    to do basic user-client operations such as managing wallets but also publishing
    smart contracts. It has a visual user interface. However, it works only on Windows
    at the time of writing.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**neo-gui**：这既可以被开发者也可以被 NEO 用户使用。它可以用于进行基本用户客户端操作，如管理钱包，也可以发布智能合约。它有一个视觉用户界面。然而，在撰写本文时，它只在
    Windows 上运行。'
- en: '*neo-cli*: This provides an external API for basic wallet operations. It also
    helps other nodes keep a consensus with the network and generate new blocks.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**neo-cli**：这为基本钱包操作提供了外部 API。它还有助于其他节点与网络保持一致性并生成新区块。'
- en: In this case, I am installing on a Mac, so you will be using neo-cli to manage
    your wallet via the command line. However, it’s good for you to know that you
    can install neo-gui and create a virtual PC that way.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在此例中，我正在 Mac 上安装，因此你将使用 neo-cli 通过命令行管理你的钱包。然而，你知道你可以安装 neo-gui 并创建一个虚拟 PC 也是件好事。
- en: neo-cli
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: neo-cli
- en: For neo-cli, you need to install the LevelDB package as it’s a dependency. As
    you recall, you already installed LevelDB in Chapter [3](475651_1_En_3_Chapter.xhtml)
    via Homebrew. If you did not install LevelDB previously, here is the command again:>
    brew install leveldbAlternatively, you can check if you have it and upgrade.>
    brew upgrade leveldbNext, clone neo-cli to your desktop.> cd ~/Desktop> git clone
    https://github.com/neo-project/neo-cliNow, you can use dotnet to publish neo-cli
    from the source code you downloaded.> cd neo-cli> dotnet restore> dotnet publish
    -c ReleaseThe .dll file should be created in the Release folder; see Figure [7-5](#Fig5)
    for the output.![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig5_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig5_HTML.jpg)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 neo-cli，你需要安装 LevelDB 包，因为它是一个依赖关系。正如你回忆起来，你已经在第 [3](475651_1_En_3_Chapter.xhtml)
    章通过 Homebrew 安装了 LevelDB。如果你之前没有安装 LevelDB，以下是命令再次：> brew install leveldb或者，你可以检查你是否已经安装了它并进行升级。>
    brew upgrade leveldb接下来，将 neo-cli 克隆到你的桌面。> cd ~/Desktop> git clone https://github.com/neo-project/neo-cli现在，你可以使用
    dotnet 从你下载的源代码中发布 neo-cli。> cd neo-cli> dotnet restore> dotnet publish -c Release.dll
    文件应该在 Release 文件夹中创建；请参阅图 [7-5](#Fig5) 以查看输出。![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig5_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig5_HTML.jpg)
- en: Figure 7-5
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-5
- en: Building the neo-cli DLL
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 构建 neo-cli DLL
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can compare your output and settings with my project here: chapter7/NEO/neo-cli.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里与我项目的输出和设置进行比较：chapter7/NEO/neo-cli。
- en: To run the .dll file, you use dotnet and the location of the DLL file, which
    starts a NEO command-line terminal.> cd bin/Release/netcoreapp2.1/> dotnet neo-cli.dll.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行 .dll 文件，你使用 dotnet 和 DLL 文件的路径，这将启动 NEO 命令行终端。> cd bin/Release/netcoreapp2.1/>
    dotnet neo-cli.dll.
- en: 'neo-cli also supports plugins. For instance, you can enable logs in neo-cli
    with application logs, or you can improve security in RPC nodes via RPC Security.
    A list of plugins can be found here: [https://github.com/neo-project/neo-plugins](https://github.com/neo-project/neo-plugins)
    .'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: neo-cli 也支持插件。例如，你可以使用应用程序日志启用 neo-cli 的日志，或者你可以通过 RPC 安全改进 RPC 节点的安全性。可以在以下网址找到插件列表：[https://github.com/neo-project/neo-plugins](https://github.com/neo-project/neo-plugins)
    。
- en: Create a Local NEO Private Testnet
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个本地 NEO 私有测试网
- en: You can run your NeoContracts on public testnets just as you have done with
    other blockchains; however, it’s much better to run your own private testnet so
    you have full control of it. A private testnet can be on the cloud, but you will
    have to pay for the service provider, so it’s better if you set up your testnet
    on your local box.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在公共测试网上像其他区块链一样运行你的 NeoContracts；然而，运行你自己的私有测试网要好得多，因为你拥有完全控制权。私有测试网可以部署在云上，但你需要为服务提供商支付费用，所以最好在本地机器上设置你的测试网。
- en: As evident by the documentation, the tools for NEO were primarily developed
    for PC users. However, because of the tools developed by the City of Zion community
    (CoZ, [https://github.com/CityOfZion](https://github.com/CityOfZion) ), running
    a private chain is possible on any platform with Docker and Python.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如文档所示，NEO 的工具主要是为 PC 用户开发的。然而，由于 City of Zion 社区（CoZ，[https://github.com/CityOfZion](https://github.com/CityOfZion)
    ）开发的工具，任何支持 Docker 和 Python 的平台都可以运行私有链。
- en: 'The steps you need to take to run a local NEO private testnet are as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 运行本地 NEO 私有测试网所需采取的步骤如下：
- en: '1.'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: '*Install neo-python*: This allows you to run a full NEO node and to interact
    with the blockchain.'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**安装 neo-python**：这可以使你运行一个完整的 NEO 节点并与其他区块链互动。'
- en: '2.'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: '*Create neo-privatenet-docker*: This allows you to run a whole NEO blockchain
    with four consensus nodes in a single, lightweight Docker container.'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建 `neo-privatenet-docker`：这允许你在一个轻量级的 Docker 容器中运行整个 NEO 区块链，并带有四个共识节点。
- en: '3.'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: '*Create a NEO wallet*: This connects to the private net and creates a wallet.'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个 NEO 钱包：这连接到私有网络并创建一个钱包。
- en: '4.'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: '*Claim*: This is initially 100,000,000 NEO.'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 领取：这初始为 100,000,000 NEO。
- en: '5.'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '5.'
- en: '*Bootstrap the testnet*: This synchronize*s* the network*.*'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引导测试网络：这同步*网络*。
- en: Python 3.6
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 3.6
- en: neo-python needs Python 3.6  or later. Mac comes out of the box with Python,
    and you can verify you have python3 installed via the --version command.> python3
    --versionPython 3.6.xIf you are running a previous version of Python and need
    to install/re-install Python, follow these steps:> brew unlink pythonNext, install
    Python with Brew.> brew install --ignore-dependencies https://raw.githubusercontent.com/Homebrew/homebrew-core/f2a764ef944b1080be64bd88dca9a1d80130c558/Formula/python.rbNow
    switch the Python versions.> brew switch python 3.7.0> brew switch python 3.6.5_1In
    case you don’t have pip installed, run this:> curl -O https://bootstrap.pypa.io/get-pip.py>
    sudo python get-pip.py> pip
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: neo-python 需要 Python 3.6 或更高版本。Mac 自带 Python，并且你可以通过 --version 命令验证你是否安装了 python3。>
    python3 --versionPython 3.6.x如果你正在运行 Python 的旧版本并且需要安装/重新安装 Python，请按照以下步骤操作：>
    brew unlink python接下来，使用 Brew 安装 Python。> brew install --ignore-dependencies https://raw.githubusercontent.com/Homebrew/homebrew-core/f2a764ef944b1080be64bd88dca9a1d80130c558/Formula/python.rb现在切换
    Python 版本。> brew switch python 3.7.0> brew switch python 3.6.5_1如果你没有安装 pip，运行这个命令：>
    curl -O https://bootstrap.pypa.io/get-pip.py> sudo python get-pip.py> pip
- en: Install neo-python
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 neo-python
- en: Next, clone neo-python from the City of Zion and check out the development branch.>
    cd ~/Desktop> git clone https://github.com/CityOfZion/neo-python.git> cd neo-python>
    git checkout developmentYou can create a virtual environment using Python 3.6
    and then run the activate script.> python3.6 -m venv venv> source venv/bin/activateEnsure
    you have the latest pip version by running this command:(venv)> pip install --upgrade
    pipNow you can install the package in an editable form.(venv)> pip install -e.You
    can compare your output with mine; for the steps you took so far, see Figure [7-6](#Fig6).![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig6_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig6_HTML.jpg)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从 City of Zion 克隆 neo-python 并检出开发分支。> cd ~/Desktop> git clone https://github.com/CityOfZion/neo-python.git>
    cd neo-python> git checkout development你可以使用 Python 3.6 创建一个虚拟环境，然后运行激活脚本。> python3.6
    -m venv venv> source venv/bin/activate确保你通过运行这个命令拥有最新版本的 pip：(venv)> pip install
    --upgrade pip现在你可以以可编辑的形式安装包。(venv)> pip install -e.你可以将你的输出与我的一致进行比较；对于你迄今为止采取的步骤，请参见图
    [7-6](#Fig6)。![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig6_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig6_HTML.jpg)
- en: Figure 7-6
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-6
- en: neo-python installation output
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: neo-python 安装输出
- en: To confirm the installation went well, run the --version command. At the time
    of writing, it outputs version 0.8.3.> np-prompt --versionneo-python v0.8.3-devNow
    you can open a NEO bash with the np-prompt command. To exit bash, run the exit
    command.> np-promptneo>exit
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认安装是否成功，运行 --version 命令。在撰写本文时，它输出的版本为 0.8.3。> np-prompt --versionneo-python
    v0.8.3-dev现在你可以使用 np-prompt 命令打开一个 NEO bash。要退出 bash，运行退出命令。> np-promptneo>exit
- en: Install neo-privatenet-docker
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 neo-privatenet-docker
- en: 'You already installed Docker, so now you can create a Docker container that
    will create four NEO nodes to create a private testnet. Go ahead and install the
    Docker container on your desktop and build the files, as shown here:> cd ~/Desktop>
    git clone https://github.com/CityOfZion/neo-privatenet-docker.git> cd neo-privatenet-docker>./docker_build.shAfter
    the image is built, you can start a private network like this:>./docker_build.shSuccessfully
    built #build number'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '你已经安装了 Docker，所以现在你可以创建一个 Docker 容器，这将创建四个 NEO 节点来创建一个私有的测试网络。继续在你的桌面上安装 Docker
    容器并构建文件，如下所示：> cd ~/Desktop> git clone https://github.com/CityOfZion/neo-privatenet-docker.git>
    cd neo-privatenet-docker> ./docker_build.sh在镜像构建完成后，你可以像这样启动私有网络：> ./docker_build.shSuccessfully
    built #build number'
- en: Note
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If Docker needs to be restarted or is not running, run the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Docker 需要重新启动或没有运行，运行以下命令：
- en: ./docker_run.sh
  id: totrans-116
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ./docker_run.sh
- en: Start a Network and Claim Initial NEO and Gas
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动网络并领取初始 NEO 和 GAS
- en: Next, you will start your private network, create your wallet, and claim the
    initial NEO and 40 gas. This is done by running the docker_run_and_create_wallet.sh
    script. You can see the output in Figure [7-7](#Fig7).> ./docker_run_and_create_wallet.sh![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig7_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig7_HTML.jpg)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将启动您的私有网络，创建您的钱包，并认领初始的NEO和40个GAS。这通过运行docker_run_and_create_wallet.sh脚本完成。您可以在图[7-7](#Fig7)中看到输出。>
    ./docker_run_and_create_wallet.sh![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig7_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig7_HTML.jpg)
- en: Figure 7-7
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-7
- en: docker_run_and_create_wallet script output
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker_run_and_create_wallet`脚本输出'
- en: Once the process is completed, you can get a confirmation of the two files that
    were created (see Figure [7-7](#Fig7)).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦过程完成，您可以获得创建的两个文件的确认（见图[7-7](#Fig7)）。
- en: '*neo-privnet.wallet*: This file is a wallet that you can use with neo-python  .'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`neo-privnet.wallet`：此文件是一个钱包，您可以用neo-python使用。'
- en: '*neo-privnet.wif*: This file is a WIF private key you can import into other
    clients, such as neo-gui.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`neo-privnet.wif`：此文件是一个WIF私钥，您可以在其他客户端（如neo-gui）中导入。'
- en: These files give you access to the wallet containing the NEO and gas for your
    private network. The script automatically claimed the NEO and gas for you.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件为您提供了访问包含您私有网络的NEO和GAS的钱包的权限。脚本自动为您认领了NEO和GAS。
- en: You can check Docker and see the neo-privnet container running, as shown in
    Figure [7-8](#Fig8).> docker ps![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig8_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig8_HTML.jpg)
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以检查Docker，并看到名为neo-privnet的容器正在运行，如图[7-8](#Fig8)所示。> docker ps![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig8_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig8_HTML.jpg)
- en: Figure 7-8
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-8
- en: neo-privnet Docker container running
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 新私有网络Docker容器正在运行
- en: Bootstrapping the Testnet
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引导测试网络
- en: Now that you have a private testnet running, you need to bootstrap the testnet
    blockchain database. This synchronizes the network and is done by running np-bootstrap.
    This can take a while; once completed, you will get confirmation.> np-bootstrap
    -nconfirmSuccessfully downloaded bootstrap chain!
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经有了一个私有测试网络在运行，您需要引导测试网络区块链数据库。这同步了网络，通过运行np-bootstrap完成。这可能需要一点时间；完成后，您将得到确认。>
    np-bootstrap -nconfirmSuccessfully downloaded bootstrap chain!
- en: Notice that you use the –n flag  to get database notifications.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 注意您使用了–n标志来获取数据库通知。
- en: Start NEO Bash
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动NEO Bash
- en: Now that you have your private testnet container running with four nodes and
    you bootstrap your testnet database, you can start a neo-cli bash by calling the
    prompt.py command.> cd ~/Desktop/neo-python/neo/bin> python3.6 prompt.py –pOnce
    you run this command, the NEO bash opens, and you can use the state command  to
    view information about the blockchain, as shown in Figure [7-9](#Fig9).neo> state![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig9_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig9_HTML.jpg)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经有了四个节点的私有测试网络容器在运行，并且您引导了您的测试网络数据库，您可以通过调用prompt.py命令来启动一个neo-cli bash。>
    cd ~/Desktop/neo-python/neo/bin> python3.6 prompt.py –p
- en: Figure 7-9
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-9
- en: Information about your blockchain via the state command
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 通过状态命令获取区块链信息
- en: 'neo-cli offers access to many RPC calls via the NEO API; however, the wallet
    needs to be open to run these commands. You can open your wallet with the wallet
    command and the file location. This command will ask for the wallet’s password.
    For the password, use coz.neo> wallet open ~/Desktop/neo-privatenet-docker/neo-privnet.walletpassword:
    cozNext, rebuild the wallet and call the wallet command. You will see the NEO
    and NeoGas fake testnet coins available (see Figure [7-10](#Fig10)).neo> wallet
    rebuildneo> wallet![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig10_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig10_HTML.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: neo-cli通过NEO API提供对许多RPC调用的访问；然而，必须打开钱包才能运行这些命令。您可以使用钱包命令和文件位置打开您的钱包。此命令将要求输入钱包的密码。对于密码，使用coz.neo>
    钱包打开 ~/Desktop/neo-privatenet-docker/neo-privnet.wallet密码：coz
- en: Figure 7-10
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-10
- en: neo-privnet wallet showing claimed coins
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 新私有网络钱包显示已认领的硬币
- en: To close the wallet and exit bash, use the wallet close command and exit.neo>
    wallet closeneo> exit
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要关闭钱包并退出bash，请使用钱包关闭命令并退出。neo> 钱包关闭neo> 退出
- en: You have succeeded in creating a private NEO blockchain running on a testnet
    with 100 million NEO and 40.0 NeoGas claimed coins that you can use for development.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你成功创建了一个运行在测试网上的私有的NEO区块链，并且声称了1亿NEO和40.0 NeoGas，这些你可以用来进行开发。
- en: Potential Problems During Installation
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装过程中可能遇到的问题
- en: 'NEO  feels like chasing a moving target at times. In fact, it’s likely that
    by the time you are utilizing the instructions in this book, the code won’t work
    as expected because of changes in NEO. Moreover, during installation, there are
    some potential problems that you can encounter. I suggest you check the latest
    information here:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: NEO有时候感觉像是在追一个移动的目标。事实上，很可能在你利用这本书中的说明时，代码不会像预期那样工作，因为NEO发生了变化。此外，在安装过程中，可能会遇到一些潜在的问题。我建议你在这里检查最新的信息：
- en: '[https://github.com/CityOfZion/neo-python#getting-started](https://github.com/CityOfZion/neo-python%2523getting-started)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/CityOfZion/neo-python#getting-started](https://github.com/CityOfZion/neo-python%2523getting-started)'
- en: Clean Database
  id: totrans-143
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 清理数据库
- en: If you need to clean the neo-python database to bootstrap and sync again, run
    the following command:> rm -rf ~/.neopython/Chains/privnet*
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要清理neo-python数据库以重新引导和同步，运行以下命令：> rm -rf ~/.neopython/Chains/privnet*
- en: b’Corruption Message
  id: totrans-145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: b’Corruption Message
- en: 'If you are getting a “b’Corruption: corrupted compressed block contents” message,
    you need to re-install LevelDB.> brew reinstall leveldb'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你收到一个“b’Corruption: corrupted compressed block contents”消息，你需要重新安装LevelDB。>
    brew reinstall leveldb'
- en: Restart Docker
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重启Docker
- en: It’s good to know how to restart Docker in case you need to restart your computer,
    upgrade the Docker version, or upgrade the container files. To restart Docker,
    select Docker from the top menu and click Restart (see Figure [7-11](#Fig11)).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 知道如何重启Docker是有好处的，以防你需要重启计算机、升级Docker版本或升级容器文件。要重启Docker，从顶部菜单选择Docker，然后点击重启（见图[7-11](#Fig11)）。
- en: The state is deleted (the whole “old” blockchain will be gone), and you should
    also remove Chains/privnet from neo-python and any privnet wallets you created.>
    rm ~/Desktop/neo-privatenet-docker/*.wallet> rm ~/Desktop/neo-privatenet-docker/*.wif>
    rm -rf ~/.neopython/Chains/privnet*> docker ps![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig11_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig11_HTML.jpg)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 状态被删除（整个“旧”区块链将会消失），你也应该从neo-python中删除Chains/privnet和任何你创建的privnet钱包。> rm ~/Desktop/neo-privatenet-docker/*.wallet>
    rm ~/Desktop/neo-privatenet-docker/*.wif> rm -rf ~/.neopython/Chains/privnet*>
    docker ps![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig11_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig11_HTML.jpg)
- en: Figure 7-11
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 7-11
- en: Docker top menu icon restart button
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Docker顶部菜单图标重启按钮
- en: NEO “Hello, World”
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NEO “Hello, World”
- en: 'You have your local private testnet environment and NEO tools set up on your
    machine, so now you are ready for the development of your NeoContract project.
    You can develop in different languages, and the process is similar. I will show
    you the code in C# as well as Python. I have kept the code to a simple working
    “Hello, World” example, but once you are able to get to this point, you can experiment
    with the different features NEO has to offer. Follow these steps to create and
    publish your code:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经在你机器上设置好了本地私有测试网环境和NEO工具，所以现在你准备好了进行你的NeoContract项目的开发。你可以在不同的语言中开发，过程是相似的。我会向你展示C#以及Python的代码。我保持代码简单，是一个工作的“Hello,
    World”示例，但一旦你能够达到这个阶段，你可以尝试NEO提供的不同功能。按照以下步骤创建并发布你的代码：
- en: '1.'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: '*Building the NeoContract framework*: Generate a Neo.SmartContract.Framework.dll
    file.'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*构建NeoContract框架*：生成一个Neo.SmartContract.Framework.dll文件。'
- en: '2.'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: '*Create a NEO “Hello, World” Project*: Create your #C contract project.'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*创建一个NEO“Hello, World”项目*：创建你的#C合约项目。'
- en: '3.'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: '*Code a NEO “Hello, World” smart contract in C#*: Code your minimalistic example
    in C#.'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*用C#编写一个NEO“Hello, World”智能合约*：用C#编写你的最小示例。'
- en: '4.'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: '*Code a NEO “Hello, World” smart contract in Python*: Code your minimalistic
    example in Python.'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*用C#编写一个NEO“Hello, World”智能合约*：用C#编写你的最小示例。'
- en: '5.'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '5.'
- en: '*Publish*: Publish your contract to your private testnet chain.'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*发布*：将你的合约发布到你的私有测试网链。'
- en: 'Building the NeoContract Framework: Neo.SmartContract.Framework.dll'
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建NeoContract框架：Neo.SmartContract.Framework.dll
- en: The first step is to create a file that holds the NeoContract framework code
    that you need to include in your NeoContract in order to access the NEO features.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建一个文件，该文件包含你需要在你的NeoContract中包含的NeoContract框架代码，以访问NEO功能。
- en: To build your NeoContract, you will be downloading and installing the NEO Development
    Pack. You will place these tools on your desktop for easy access. Note that you
    can always move the files to a better location later. Navigate to the desktop
    and clone the neo-devpack-dotnet project.> cd ~/Desktop> git clone https://github.com/neo-project/neo-devpack-dotnetNext,
    run the neo-devpack-dotnet.sln file by double-clicking it or run the Terminal
    open command.> open neo-devpack-dotnet.sln
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建你的 NeoContract，你将下载并安装 NEO 开发包。你将这些工具放在你的桌面上以便于访问。请注意，你总是可以把文件移到一个更好的位置。导航到桌面并克隆
    neo-devpack-dotnet 项目。> cd ~/Desktop> git clone https://github.com/neo-project/neo-devpack-dotnet接下来，通过双击它或运行终端打开命令来运行
    neo-devpack-dotnet.sln 文件。> open neo-devpack-dotnet.sln
- en: VS opens, and you should expect to get three error messages. Click OK to dismiss
    these messages, as these errors will not affect building your project.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: VS 打开，你应该预期会得到三个错误信息。点击确定忽略这些信息，因为这些错误不会影响你的项目构建。
- en: In the left window, you can see the Solution tab, as shown in Figure [7-12](#Fig12).
    Expand “neo-devpack-dotnet (master)” if it’s not expanded.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧窗口，你可以看到解决方案标签，如图 [7-12](#Fig12) 所示。如果它没有展开，请展开“neo-devpack-dotnet (master)”。
- en: Next, right-click Neo.Smartcontract.Framework and choose Build Neo.Smartcontract.Framework.
    See Figure [7-12](#Fig12).![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig12_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig12_HTML.jpg)
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，右键点击 Neo.Smartcontract.Framework 并选择构建 Neo.Smartcontract.Framework。见图 [7-12](#Fig12)。![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig12_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig12_HTML.jpg)
- en: Figure 7-12
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-12
- en: Building the Neo.SmartContract.Framework project
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 构建 Neo.SmartContract.Framework 项目
- en: Once the build is completed, you will get a “Build successful” message in the
    VS output’s top middle window. You can also find the Neo.Smartcontract.Framework.dll
    file here:> cat ~/Desktop/neo-devpack-dotnet/Neo.SmartContract.Framework/bin/Debug/netstandard1.6/Neo.SmartContract.Framework.dll
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建完成，你将在 VS 输出的顶部中间窗口得到一个“构建成功”的消息。你也可以在这里找到 Neo.Smartcontract.Framework.dll
    文件：> cat ~/Desktop/neo-devpack-dotnet/Neo.SmartContract.Framework/bin/Debug/netstandard1.6/Neo.SmartContract.Framework.dll
- en: The .dll file is a .NET Intermediate Language (IL) language file that you will
    include in your library to have access to the NeoContract framework code. Neo.SmartContract.Framework
    does not support the full set of C# features because of the differences between
    the NeoVM and the C# IL file.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: .dll 文件是 .NET 中间语言（IL）文件，你将把它包括在你的库中以访问 NeoContract 框架代码。由于 NeoVM 和 C# IL 文件之间的差异，Neo.SmartContract.Framework
    不支持 C# 的全部功能。
- en: Create a NEO “Hello, World” Project
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个 NEO “Hello, World” 项目
- en: Now that the Neo.Smartcontract.Framework.dll file is ready to be used, you can
    create your project and include the NEO framework as a dependency.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 既然 Neo.Smartcontract.Framework.dll 文件已经准备好使用，你可以创建你的项目并把 NEO 框架作为依赖包含进来。
- en: To get started, open Visual Studio. Select File ➤ New Solution... ➤ New Project
    wizard opens up. In the left menu, select Library ➤ .NET Standard Library. Next,
    select .NET Standard 2.0 for the .NET Core version and then click Next. See Figure
    [7-13](#Fig13).![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig13_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig13_HTML.jpg)
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 开始时，打开 Visual Studio。选择文件 ➤ 新解决方案... ➤ 新项目向导打开。在左侧菜单中，选择库 ➤ .NET 标准库。然后，选择 .NET
    标准 2.0 作为 .NET Core 版本，然后点击下一步。见图 [7-13](#Fig13)。![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig13_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig13_HTML.jpg)
- en: Figure 7-13
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-13
- en: New Project template wizard
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 新项目模板向导
- en: The configure wizard opens with a new project window. Call the project **hello_contract**,
    leave the default settings and click the Create button. See Figure [7-14](#Fig14).![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig14_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig14_HTML.jpg)
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 配置向导在新的项目窗口打开。将项目命名为 **hello_contract**，保留默认设置，然后点击创建按钮。见图 [7-14](#Fig14)。![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig14_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig14_HTML.jpg)
- en: Figure 7-14
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-14
- en: VS create new project wizard
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: VS 创建新项目向导
- en: Once the project is created, you need to attach the file Neo.Smartcontract.Framework.dll
    as a dependency. To do that, right-click the Dependencies folder in the Solution
    menu and then click Edit References. See Figure [7-15](#Fig15).![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig15_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig15_HTML.jpg)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦项目创建完成，你需要把 Neo.Smartcontract.Framework.dll 文件作为依赖项附上。为此，右键点击解决方案中的 Dependencies
    文件夹，然后点击编辑引用。见图 [7-15](#Fig15)。![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig15_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig15_HTML.
- en: Figure 7-15
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-15
- en: “Hello, World” project dependencies edit reference
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: “Hello, World”项目依赖编辑引用
- en: In the Edit References window, go to the .NET assembly tab. Choose Browse and
    add the Neo.Smartcontract.Framework.dll file located here:~/Desktop/neo-devpack-dotnet/Neo.SmartContract.Framework/bin/Debug/netstandard1.6/Neo.SmartContract.Framework.dllNext,
    click Open, as shown in Figure [7-16](#Fig16). Select the Neo.SmartContract.Framework.dll
    checkbox and click Ok.![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig16_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig16_HTML.jpg)
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在“编辑引用”窗口中，切换到“.NET程序集”选项卡。点击浏览，并添加位于以下位置的Neo.Smartcontract.Framework.dll文件：~/Desktop/neo-devpack-dotnet/Neo.SmartContract.Framework/bin/Debug/netstandard1.6/Neo.SmartContract.Framework.dll。然后点击打开，如图[7-16](#Fig16)所示。勾选Neo.SmartContract.Framework.dll复选框并点击确定。![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig16_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig16_HTML.jpg)
- en: Figure 7-16
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-16
- en: VC edit references .NET assembly
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: VC编辑引用.NET程序集
- en: Coding the NEO “Hello, World” Smart Contract in C#
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用C#编写NEO“Hello, World”智能合约
- en: 'In this section, you will be using C# to develop your NEO “Hello, World” smart
    contract in .NET. The NeoVM is more compact; you can compile only limited C#/dotnet
    features into your AVM file. You can view the list of features available for development
    here: [https://docs.neo.org/en-us/sc/quickstart/limitation.html](https://docs.neo.org/en-us/sc/quickstart/limitation.html)
    .'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将使用C#在.NET中开发你的NEO“Hello, World”智能合约。NeoVM更紧凑；你可以将有限的C#/dotnet功能编译到你的AVM文件中。你可以在这里查看可用于开发的特性列表：[https://docs.neo.org/en-us/sc/quickstart/limitation.html](https://docs.neo.org/en-us/sc/quickstart/limitation.html)。
- en: 'The examples will use the “Hello, World” example provided in the NEO examples.using
    Neo.SmartContract.Framework;using Neo.SmartContract.Framework.Services.Neo;public
    class Class1: SmartContract{    public static void Main()    {        Storage.Put(Storage.CurrentContext,
    "Hello", "World");    }}'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 示例将使用NEO示例中提供的“Hello, World”示例。
- en: After writing the code, select Build from the top menu and then Build All (or
    Command+B) to compile the Class1.cs code.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 编写代码后，从顶部菜单选择构建，然后构建全部（或命令+B）以编译Class1.cs代码。
- en: 'The .dll library file was created in the bin/Debug/netstandard2.0/ folder  .
    You will use this .dll file with the neo-compiler and convert the .dll file to
    an AVM file. After compiling the DLL file, the hello_contract.dll file is created
    here:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: .dll库文件是在bin/Debug/netstandard2.0/目录下创建的。你将使用这个.dll文件与neo-compiler一起使用，并将.dll文件转换为AVM文件。在编译DLL文件后，hello_contract.dll文件在这里创建：
- en: ~/Projects/hello_contract/hello_contract/obj/Debug/netstandard2.0/hello_contract.dll
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: ~/Projects/hello_contract/hello_contract/obj/Debug/netstandard2.0/hello_contract.dll
- en: Note
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The NeoContract framework generates the NeoVM bytecode. The code is saved in
    the AVM file format. The *.avm file can then be deployed on the NEO blockchain.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: NeoContract框架生成了NeoVM字节码。代码以AVM文件格式保存。*.avm文件随后可以部署在NEO区块链上。
- en: Coding the NEO “Hello, World” Smart Contract in Python
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Python编写NEO“Hello, World”智能合约
- en: 'Like in #C, you can generate some minimalistic Python code to print “Hello,
    World.” You can use the Eclipse IDE ( [https://www.eclipse.org/ide/](https://www.eclipse.org/ide/)
    ) or any editor of your choosing. These instructions will be using vim. Create
    a file named sample1.py.> vim ~/Desktop/smartContracts/sample1.pyType the following
    code to print “Hello World.”def Main():  print("Hello World")  return True'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在C#中，你可以生成一些简约的Python代码来打印“Hello, World.”。你可以使用Eclipse IDE（[https://www.eclipse.org/ide/](https://www.eclipse.org/ide/)）或任何你选择的编辑器。这些说明将使用vim。在~/Desktop/smartContracts/下创建一个名为sample1.py的文件。```vim
    ~/Desktop/smartContracts/sample1.py``` 输入以下代码来打印“Hello World.”
- en: To close and save the file, type :wq in vim.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要在vim中关闭并保存文件，输入:wq。
- en: Compiling Your Smart Contracts to .avm
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编译你的智能合约到.avm
- en: Now that you have two files named sample1.py and hello_contract.dll, the next
    step is to compile these files into NEO virtual machine files (.avm) that you
    will deploy on the NEO blockchain.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如今你已经有了两个名为sample1.py和hello_contract.dll的文件，下一步是编译这些文件成为你将在NEO区块链上部署的NEO虚拟机文件（.avm）。
- en: Let’s start by compiling the hello_contract.dll file. Change the directory to
    the DLL file.> cd ~/Desktop/neo-compiler/neon/bin/Debug/netcoreapp2.0/osx.10.11-x64/publishCopy
    Neo.SmartContract.Framework.dll.> cp ~/Projects/hello_contract/hello_contract/bin/Debug/netstandard2.0/Neo.SmartContract.Framework.dll
    ~/Projects/hello_contract/hello_contract/obj/Debug/netstandard2.0Now, you can
    use the dotnet core  tool to publish your DLL into an AVM file, as shown in Figure
    [7-17](#Fig17).> dotnet neon.dll ~/Projects/hello_contract/hello_contract/obj/Debug/netstandard2.0/hello_contract.dllYou
    can see the output, as shown in Figure [7-17](#Fig17).![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig17_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig17_HTML.jpg)
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们来编译hello_contract.dll文件。将目录更改为DLL文件所在的目录。`cd ~/Desktop/neo-compiler/neon/bin/Debug/netcoreapp2.0/osx.10.11-x64/publish`，然后复制Neo.SmartContract.Framework.dll到hello_contract项目目录下的obj/Debug/netstandard2.0文件夹中。`cp
    ~/Projects/hello_contract/hello_contract/bin/Debug/netstandard2.0/Neo.SmartContract.Framework.dll
    ~/Projects/hello_contract/hello_contract/obj/Debug/netstandard2.0`现在，你可以使用.NET
    Core工具将你的DLL文件发布为AVM文件，如图[7-17](#Fig17)所示。`dotnet neon.dll ~/Projects/hello_contract/hello_contract/obj/Debug/netstandard2.0/hello_contract.dll`你可以看到输出结果，如图[7-17](#Fig17)所示。![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig17_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig17_HTML.jpg)
- en: Figure 7-17
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-17
- en: Converting a DLL into AVM bytecode
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 将DLL转换为AVM字节码
- en: You can see the AVM bytecode file using the ls command  .> ls ~/Projects/hello_contract/hello_contract/obj/Debug/netstandard2.0/∗.avmhello_contract.avmSimilarly,
    you can compile the Python sample1.py file into AVM. In NEO bash, use the sc build
    command.> cd ~/Desktop/neo-python/neo/bin> python3.6 prompt.py –pneo> sc build
    ~/Desktop/smartContracts/sample1.pySaved output to ~/Desktop/smartContracts/sample1.avm
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用ls命令查看AVM字节码文件。`.> ls ~/Projects/hello_contract/hello_contract/obj/Debug/netstandard2.0/∗.avm`hello_contract.avm类似地，你也可以将Python
    sample1.py文件编译为AVM。在NEO bash中，使用sc build命令。`> cd ~/Desktop/neo-python/neo/bin`，然后运行`>
    python3.6 prompt.py –p`，接着编译`~/Desktop/smartContracts/sample1.py`文件。`neo> sc build
    ~/Desktop/smartContracts/sample1.py`输出已保存至`~/Desktop/smartContracts/sample1.avm`。
- en: Publish a Smart Contract on a Private Testnet
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在私有测试网上发布智能合约
- en: 'The next step is to deploy your AVM files to the NEO private testnet chain.
    You don’t need to remember all the options. You can call the command with the
    help flag to see the options.neo> sc deploy helpDeploy a smart contract (.avm)
    file to the blockchainUsage: sc deploy {path} {storage} {dynamic_invoke} {payable}
    {params} (returntype)path            - path to the desired Python (.py) filestorage         -
    boolean input to determine if smart contract requires storagedynamic_invoke  -
    boolean input to determine if smart contract requires dynamic invokepayable         -
    boolean input to determine if smart contract is payableparams          - input
    parameter types of the smart contractreturntype      - (Optional) the return type
    of the smart contract outputFor more information about parameter types see                  https://neo-python.readthedocs.io/en/latest/data-types.html#contractparametertypesNext
    set storage, dynamic_invoke, and payable as false, and set params and returntype
    as 01, as shown in Figure [7-18](#Fig18).neo> sc deploy ~/Desktop/smartContracts/sample1.avm
    False False False 01 01![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig18_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig18_HTML.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将你的AVM文件部署到NEO私有测试网络链。你不需要记住所有选项。你可以带有帮助标志调用命令以查看选项。`neo> sc deploy help`部署智能合约（.avm）文件到区块链用法：`sc
    deploy {path} {storage} {dynamic_invoke} {payable} {params} (returntype)`path
    - 智能合约的Python (.py)文件路径storage - 布尔输入，确定智能合约是否需要存储dynamic_invoke - 布尔输入，确定智能合约是否需要动态调用payable
    - 布尔输入，确定智能合约是否可支付params - 智能合约的输入参数类型returntype - （可选）智能合约输出的返回类型关于参数类型更多信息，请参见`https://neo-python.readthedocs.io/en/latest/data-types.html#contractparametertypes`接下来设置storage、dynamic_invoke和payable为false，将params和returntype设置为01，如图[7-18](#Fig18)所示。`neo>
    sc deploy ~/Desktop/smartContracts/sample1.avm False False False 01 01`![../images/475651_1_En_7_Chapter/475651_1_En_7_Fig18_HTML.jpg](../images/475651_1_En_7_Chapter/475651_1_En_7_Fig18_HTML.jpg)
- en: Figure 7-18
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-18
- en: Publishing an AVM file on a private testnet chain
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在私有测试网络链上发布AVM文件
- en: NEO asks for a contract name; let’s call the contract helloWorld. Leave the
    version, author, email, and description fields blank and enter your wallet password
    to pay for the contract.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: NEO要求提供一个合约名称；我们称这个合约为helloWorld。保留版本、作者、电子邮件和描述字段空白，并输入你的钱包密码以支付合约费用。
- en: Publishing to Mainnet
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布到主网
- en: To publish on mainnet, you can use the same process as you did with the testnet;
    just bootstrap to the mainnet.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要在大网络上发布，你可以使用与测试网络相同的流程；只需引导到主网络即可。
- en: Bootstrapping to Mainnet
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引导到主网络
- en: To bootstrap to the mainnet blockchain, just run np-bootstrap with the -m flag
    (it’s close to 10 GB). You can also use the notifications database on mainnet.>
    np-prompt –m -n
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 为了引导到主网区块链，只需运行np-bootstrap带-m标志（它接近10 GB）。你还可以在主网上使用通知数据库。> np-prompt –m -n
- en: Installing the neo-gui Client
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装neo-gui客户端
- en: 'An easier approach is to set and publish a NeoContract through neo-gui. You
    need to set up a virtual machine for PC, but deploying AVM files is a breeze.
    Follow these instructions:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更简单的方法是通过neo-gui设置并发布NeoContract。你需要为PC设置一个虚拟机，但部署AVM文件是轻而易举的。按照以下说明操作：
- en: '[https://docs.neo.org/en-us/sc/quickstart/deploy-invoke.html](https://docs.neo.org/en-us/sc/quickstart/deploy-invoke.html)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.neo.org/en-us/sc/quickstart/deploy-invoke.html](https://docs.neo.org/en-us/sc/quickstart/deploy-invoke.html)'
- en: '[https://docs.neo.org/en-us/node/gui/install.html](https://docs.neo.org/en-us/node/gui/install.html)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.neo.org/en-us/node/gui/install.html](https://docs.neo.org/en-us/node/gui/install.html)'
- en: 'Ethereum vs. EOS vs. NEO : Smart Contracts Developer Perspective Showdown'
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以太坊vs. EOS vs. NEO：智能合约开发者视角对决
- en: At this point, I have covered three major blockchains for developing smart contracts,
    and it’s hard not to compare them. However, there are so many factors to take
    into account when comparing these three blockchains. Additionally, at the time
    of writing, there are more than 40 blockchain projects that you can choose from
    for the deployment of smart contracts. Each project has pros and cons, and it’s
    beyond the scope of this book to cover all of them. Instead, I will be focusing
    on specific criteria to try to help you understand what factors to consider when
    selecting a platform out of the three I have covered so far.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我已经介绍了三个用于开发智能合约的主要区块链，很难不比较它们。然而，在比较这三个区块链时，需要考虑许多因素。此外，在撰写本文时，您可以从超过40个区块链项目中选择用于智能合约的部署。每个项目都有优点和缺点，而且超出本书的范围涵盖它们全部。相反，我将重点关注特定的标准，以尝试帮助您了解在选择我迄今为止介绍的三个平台之一时应考虑哪些因素。
- en: 'There is an organization that tries to rate these different blockchains; it’s
    called the China Center for Information Industry Development (CCID). CCID utilizes
    contributions from professors and researchers at China’s most prestigious educational
    institutions including Tsinghua and Beijing University to take into account features,
    adoption rates, and many other indicators to rank each blockchain. However, these
    ratings change often, and you should check the latest blockchain ratings on the
    web site: [http://special.ccidnet.com/pub-bc-eval/index.shtml](http://special.ccidnet.com/pub-bc-eval/index.shtml)
    . Note that at the time of writing, EOS and Ethereum have been maintaining their
    dominance for the fourth consecutive time on the CCID list.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个组织试图对这些不同的区块链进行评级；它被称为中国信息产业发展中心（CCID）。CCID利用来自中国最著名教育机构，包括清华大学和北京大学的教授和研究人员的贡献，考虑特性、采用率和其他许多指标来对每个区块链进行排名。然而，这些评级经常变化，你应该在网站上查看最新的区块链评级：[http://special.ccidnet.com/pub-bc-eval/index.shtml](http://special.ccidnet.com/pub-bc-eval/index.shtml)。注意，在撰写本文时，EOS和Ethereum已经连续第四次在CCID列表上保持主导地位。
- en: Further, determining what blockchain to utilize to publish smart contracts should
    take into account more factors, such as your team’s ability, funding, the number
    of needed transactions, the number of accounts needed, wallets, exchanges, and
    much more.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，确定要使用哪个区块链来发布智能合约应考虑更多因素，例如您的团队能力、资金、所需交易数量、所需账户数量、钱包、交易所等。
- en: 'Another major indicator to consider in determining the health of a blockchain
    is the user and developer adoption. You can find the current number of dapps for
    different smart contract platforms by checking these sites:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 确定区块链健康的一个重要指标是用户和开发者的采用。您可以通过检查这些网站来找到不同智能合约平台的dapps当前数量：
- en: '*EOS*: [https://dappradar.com/eos-dapps](https://dappradar.com/eos-dapps)'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*EOS*: [https://dappradar.com/eos-dapps](https://dappradar.com/eos-dapps)'
- en: '*Ethereum*: [https://dappradar.com/dapps](https://dappradar.com/dapps)'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ethereum*: [https://dappradar.com/dapps](https://dappradar.com/dapps)'
- en: '*NEO*: [http://ndapp.org/](http://ndapp.org/)'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*NEO*: [http://ndapp.org/](http://ndapp.org/)'
- en: Looking through the list of dapps, keep in mind that although there are 6,050
    dapps listed on Dappradar.com at the time of writing, there are only 106,938 users,
    which indicates that few dapps are being used and mass adaptation is not here
    yet.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 查看dapps列表时，请记住，尽管在撰写本文时dappradar.com上有6050个dapps，但只有106938个用户，这表明很少有dapps被使用，大规模采用还没有到来。
- en: Additionally, note that this comparison holds true at the time of writing and
    is based on my opinion. You should do your own research and due diligence before
    selecting the ideal blockchain to fit your smart contract needs. Table [7-1](#Tab1)
    provides the comparison.Table 7-1
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，请注意，本次比较是基于编写时的数据，并且基于我的观点。在选择适合您智能合约需求的理想区块链之前，您应该自己进行研究和尽职调查。表[7-1](#Tab1)提供了比较。表7-1
- en: Etherum vs. EOS vs. NEO Smart Contracts Comparison
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '[以太坊](https://wiki.example.org/ethereum) vs. [EOS](https://wiki.example.org/eos)
    vs. [NEO](https://wiki.example.org/neo) 智能合约比较'
- en: '| Category | Ethereum | EOS | NEO |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| 类别 | 以太坊 | EOS | NEO |'
- en: '| --- | --- | --- | --- |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Adoption | Currently holds the crown | Steady increase in adoption | Least
    adopted out of the three |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| 采用率 | 目前占据首位 | 采用率稳步增长 | 三者中采用率最低 |'
- en: '| CCID ranking | Rank #2 | Rank #1 | Rank #5 |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| CCID排名 | 第2名 | 第1名 | 第5名 |'
- en: '| Consensus mechanism | PoW | DPoS | dBFT |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| 共识机制 | PoW | DPoS | dBFT |'
- en: '| Transactions per second | 15 | Millions | 10,000 transactions per second
    |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| 每秒交易数 | 15 | 数百万 | 每秒10,000笔交易 |'
- en: '| Dapp deployment cost | Minimum fee of 32,000 gas, plus 200 gas per byte of
    the source code | ~120 EOS | Fixed cost of 100 to 1,000 gasICO costs 5,000 gas
    to register digital asset; renew fee of 5,000 gas per year |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| Dapp部署成本 | 最低32,000 gas费用，加上源代码每字节200 gas | 约120 EOS | 固定成本100至1,000 gas；ICO注册数字资产需要5,000
    gas，每年更新费用5,000 gas |'
- en: '| Transaction cost | $0.05 to $3.5 | $0 (however, creating a new account costs
    $1 to $4 per account paid by application developers) | Initial 10 gas execution
    free, fees for system calls and instruction (see white paper) |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| 交易成本 | 0.05至3.5美元 | 0美元（然而，创建新账户的成本为每个账户1至4美元，由应用开发者支付） | 初始10 gas执行免费，系统调用和指令费用（请参阅白皮书）
    |'
- en: '| Scalability | No; await hard fork | Yes | Yes |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| 可扩展性 | 否；等待硬分叉 | 是 | 是 |'
- en: '| Dev tools | Mature development tools  from project and community, including
    tools for development frameworks, IDEs, communicating, and test tools | Dev tools
    could use an upgrade; debugging still done utilizing caveman debugging | Mature
    development tools |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| 开发工具 | 项目和社区成熟的发展工具，包括开发框架、IDEs、通信和测试工具 | 开发工具可以升级；调试仍然使用原始调试 | 成熟的发展工具 |'
- en: '| Docs | Well documented by both project and community | Developers.EOS.IO
    docs and community tutorials are not keeping up with EOS.IO GitHub changes; many
    GitHub issues regarding installation | Projects docs ( [http://docs.neo.org](http://docs.neo.org)
    ) and community tutorials |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| 文档 | 项目与社区都提供了良好的文档 | Developers.EOS.IO文档和社区教程没有跟上EOS.IO GitHub的变化；许多GitHub问题涉及安装
    | 项目文档（[http://docs.neo.org](http://docs.neo.org)）和社区教程 |'
- en: '| Community support | The Ethereum Community Fund (ECF) with organization support:
    Microsoft, Intel, Amazon, J.P. Morgan, and even government involvement | Committed
    $1 *billion* in funds focused on the growth of the EOS ecosystem | Has run and
    supported more than 100 community events |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| 社区支持 | 以太坊社区基金会（ECF）获得组织支持：微软、英特尔、亚马逊、摩根大通，甚至有政府参与 | 承诺投入10亿美元资金，专注于EOS生态系统的增长
    | 已经举办并支持了超过100个社区活动 |'
- en: '| Development languages | Solidity, Bamboo, Vyper, LLL, Flint | C, C++ | C#,
    VB.NET, F# Java, Kotlin, and Python; future plans to support more languages |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| 开发语言 | Solidity、Bamboo、Vyper、LLL、Flint | C、C++ | C#、VB.NET、F#、Java、Kotlin和Python；未来计划支持更多语言
    |'
- en: '| Market cap | $14,068,553,166 USD | $2,341,702,969 USD | $488,507,580 USD
    |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| 市值 | 14,068,553,166美元 | 2,341,702,969美元 | 488,507,580美元 |'
- en: '| Number of dapps | *1,324* | 226 | Less than 100 |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| Dapp数量 | 1,324个 | 226个 | 不到100个 |'
- en: '| Wallet | Desktop and hardware wallets, more options than EOS and NEO | Desktop
    and hardware wallets | Desktop and hardware wallets |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| 钱包 | 桌面和硬件钱包，比EOS和NEO有更多选择 | 桌面和硬件钱包 | 桌面和硬件钱包 |'
- en: '| Large exchange support | Available on all major exchanges | Not supported
    yet on many major exchanges such as Coinbase | Not supported yet on many major
    exchanges such as Coinbase |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| 大型交易所支持 | 在所有主要交易所上市 | 尚未在许多主要交易所上市，如Coinbase | 尚未在许多主要交易所上市，如Coinbase |'
- en: '| Turing complete | Yes | No | No |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| 图灵完备 | 是 | 否 | 否 |'
- en: 'This list summarizes the Ethereum, EOS.IO, and NEO Blockchain platforms’ pros
    and cons:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 以下总结是以太坊、EOS.IO和NEO区块链平台的优势和劣势：
- en: Ethereum’s biggest pro is that it was the first and most popular smart contract
    platform and has the most developers, third-party tools, support, documentation,
    and support community. The biggest downside is the Ethereum scalability issue
    of using PoW; there is a hard fork in the works at the time of writing to remedy
    this downside and move Ethereum to PoS. Another downside is the cost of 200 gas
    per byte for source code; this is pricey if your code is not optimized, especially
    as you need to constantly republish your code. Lastly, the support for less popular
    programming languages such as Solidity is less than ideal.
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊最大的优点是它是第一个也是最受欢迎的智能合约平台，拥有最多的开发者、第三方工具、支持、文档和支持社区。最大的缺点是使用PoW的以太坊可扩展性问题；在撰写本文时，有一个硬分叉正在进行中，旨在解决这一缺点并将以太坊转移到PoS。另一个缺点是源代码每字节200气体的成本；如果你的代码没有优化，这会很昂贵，尤其是因为你需要不断重新发布你的代码。最后，对不太流行的编程语言（如Solidity）的支持不如理想。
- en: EOS’s advantage is its scalability and ability to run millions of transactions
    per second with no change, as well as faster code execution using WASM. EOS supports
    C and C++, and the actual blockchain coded in C++ gives it an advantage as C has
    a larger developer base than Solidity. However, EOS has a long way to go in terms
    of adoption, providing $1 billion funding can be useful for companies and individuals
    with the right idea. Its high ratings and great features are not enough to replace
    Ethereum in dominance it claims to be. Only time will tell.
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EOS的优势在于其可扩展性以及在不改变的情况下运行数百万笔交易的能力，以及使用WASM更快地执行代码。EOS支持C和C++，实际编写的区块链使用C++使其具有优势，因为与Solidity相比，C有更多的开发者基础。然而，在采用方面，EOS还有很长的路要走，提供10亿美元的资金对公司和个人来说可能是有用的，有合适想法的话。它的高评分和出色的功能还不足以取代以太坊在其声称的主导地位。时间会告诉我们。
- en: NEO  supports major programming languages (C#, VB.NET, Java, and Python), giving
    it a big advantage as a large number of developers can code with a smaller learning
    curve. Additionally, the efficient and inexpensive computationally execution of
    contracts is an advantage; however, NEO has the smallest community support out
    of the three platforms, and the stiff 5,000 NeoGas to register digital assets
    yearly may be a buzz killer for many potential projects.
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NEO支持主要的编程语言（C#，VB.NET，Java和Python），这给了它一个很大的优势，因为大量的开发者可以编写较小的学习曲线。此外，合同的高效和低成本计算执行是一个优势；然而，NEO是这三个平台中社区支持最小的，以及每年注册数字资产所需的硬性5,000
    NeoGas可能会让许多潜在项目望而却步。
- en: Where to Go from Here
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从这里去哪里
- en: 'Try these resources:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试这些资源：
- en: 'Read the NEO docs here: [http://docs.neo.org](http://docs.neo.org) . The site
    includes tutorials for sample NeoContracts, creating NEO nodes, NEO utilities,
    white papers, and more.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读NEO文档：[http://docs.neo.org](http://docs.neo.org) 。该网站包括样本NeoContracts教程、创建NEO节点、NEO实用程序、白皮书等内容。
- en: Visit [https://neo.org/client](https://neo.org/client) to find NEO wallets from
    third parties.
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问[https://neo.org/client](https://neo.org/client)以查找来自第三方的NEO钱包。
- en: 'For debugging, check Neunity.Adapter or Neo-Debugger to write test cases and
    run source code in the IDE: [https://github.com/CityOfZion/neo-debugger-tools/releases](https://github.com/CityOfZion/neo-debugger-tools/releases)
    .'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于调试，请查看Neunity.Adapter或Neo-Debugger以编写测试用例并在IDE中运行源代码：[https://github.com/CityOfZion/neo-debugger-tools/releases](https://github.com/CityOfZion/neo-debugger-tools/releases)
    。
- en: Create additional NeoContracts and include SmartContractEvent, which gets dispatched
    through neo.EventHub; subscribe and test your contracts.
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建额外的NeoContracts并包括SmartContractEvent，它通过neo.EventHub分发；订阅并测试你的合同。
- en: Summary
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, I covered the NEO blockchain and NEOContracts. You looked at
    NEO’s high-level blockchain architecture and learned about NEO’s smart economy.
    You set your local environment and upgraded Xcode, installed Visual Studio 2017
    IDE, and installed .NET Core.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我介绍了NEO区块链和NEOContracts。你查看了NEO的高级区块链架构并学习了NEO的智慧经济。你设置了你的本地环境并升级了Xcode，安装了Visual
    Studio 2017 IDE，并安装了.NET Core。
- en: You installed Docker, so you can now create containers, and you downloaded neo-compiler
    and generated neon.dll. Lastly, you built the neo-cli so you can manage your wallet
    and run other RPC operations.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经安装了Docker，所以现在可以创建容器，并且你下载了neo-compiler并生成了neon.dll。最后，你构建了neo-cli，所以你可以管理你的钱包和其他RPC操作。
- en: Next, you created a local NEO private testnet by installing neo-python and neo-privatenet-docker.
    You bootstrapped the testnet and started NEO bash and were then able to start
    your network and claim NEO and gas.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你通过安装neo-python和neo-privatenet-docker创建了一个本地的NEO私有测试网。你引导了测试网并启动了NEO bash，然后能够启动你的网络并领取NEO和GAS。
- en: Additionally, I covered potential problems during the installation of your NEO
    tools.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我涵盖了在安装你的NEO工具过程中可能遇到的问题。
- en: Next, you created two “Hello, World” projects, one in C# and one in Python,
    and were able to compile these projects into the NEO virtual machine’s bytecode
    (AVM) files. You took these files and learned how to publish them on the NEO testnet
    blockchain as well as on the NEO mainnet.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你创建了两个“Hello, World”项目，一个用C#，一个用Python，并能够将这些项目编译成NEO虚拟机的字节码（AVM）文件。你将这些文件学会了如何发布到NEO测试网区块链上，以及NEO主网上。
- en: Lastly, I compared Ethereum versus EOS versus NEO to help you better understand
    the differences between these platforms as well what criteria to look at when
    selecting a platform for your smart contracts.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我比较了以太坊、EOS和NEO，以帮助你更好地理解这些平台之间的差异，以及在选择用于你的智能合约的平台时应考虑哪些标准。
