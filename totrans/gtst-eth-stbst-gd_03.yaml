- en: © The Author(s), under exclusive license to APress Media, LLC, part of Springer
    Nature 2022D. P. BauerGetting Started with Ethereum [https://doi.org/10.1007/978-1-4842-8045-4_3](https://doi.org/10.1007/978-1-4842-8045-4_3)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: '3. ERC-20: Fungible Tokens'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Davi Pedro Bauer^([1](#Aff2)  )(1)Campo Bom, Rio Grande do Sul, Brazil
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Fungible tokens are tokens where each unit has the same value, in the same way
    as fiat currency. This means you can exchange one unit of this currency for another
    unit of this currency for the same amount. Thinking about replicating this behavior
    on the blockchain, Fabian Vogelsteller and Vitalik Buterin proposed the creation
    of ERC-20, “Ethereum Request for Comments 20,” in November 2015 to create a simple
    format for Ethereum-based tokens. These tokens work within the Ethereum blockchain
    and are able to interact with other cryptocurrencies on the network. In this chapter,
    you will create simple contracts in the ERC-20 standard and learn how to deploy
    them to test and production networks.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of this chapter, you will be able to do the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Write a simple contract in the ERC-20 standard.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a fixed supply contract.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inherit key implementations with OpenZeppelin.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compile the contract using Truffle.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start a localhost blockchain using Ganache.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy the existing contract to Ganache.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure MetaMask to connect to Ganache.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the deployed token contract to your MetaMask wallet.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrate the contract to Ganache.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transfer tokens between accounts.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add Polygon Mumbai to MetaMask networks.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activate the Polygon add-on on Infura.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the private key to sign the contract.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy the smart contract on Polygon Mumbai.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the Polygon mainnet to MetaMask networks.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the network to use the Polygon mainnet.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy the smart contract on the Polygon mainnet.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify the smart contract on the Polygon mainnet.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a Simple ERC-20 Token Using OpenZeppelin
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s use Truffle to develop a simple ERC-20 Ethereum^([1](#Fn1)) smart contract
    and then import the OpenZeppelin contracts library.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: OpenZeppelin is an open source and auditable library that allows you to reuse
    code from more common implementations, thus serving as an initial code base that
    is always the same. Using OpenZeppelin allows you to focus more on coding the
    business need rather than repeating unnecessary code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: We will use the OpenZeppelin library in this example and in subsequent chapters
    of this book.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Tokens can represent virtually everything in Ethereum, such as the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Reputation points in an online platform
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skills of a character in a game
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lottery tickets
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Financial assets like a share in a company
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A fiat currency like USD
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An ounce of gold
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the Environment
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Initialize Truffle using the following command:$ truffle initNow, initialize
    the project folder.$ npm initFinally, install the OpenZeppelin contracts package.$
    npm install @openzeppelin/contracts
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Writing the Contract
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a new file under the contracts folder with the name ERC20MinerReward.sol.
    Add the license directive, define the Solidity minimum version, and import the
    OpenZeppelin ERC-20 contract library. Finally, define the contract class, the
    contract constructor, the contract name, and the contract symbol.// SPDX-License-Identifier:
    MITpragma solidity ^0.8.0;import "@openzeppelin/contracts/token/ERC20/ERC20.sol";contract
    ERC20MinerReward is ERC20 {    constructor() ERC20("MinerReward", "MRW"){}}'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Setting the Solidity Compiler Version
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Copy the Solidity version used in this contract and then open truffle-config.js*.*
    Uncomment the solc block and set the Solidity version by pasting in the copied
    value.compilers: {    solc: {        version: "0.8.0",        docker: true,        settings:
    {            optimizer: {                enabled: false,                runs:
    200            },            evmVersion: "byzantium"        }    }},'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Compiling the Contract
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now it is the time to compile the contract.$ truffle compile
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: The contract was compiled successfully!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the Result
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that a new folder build/contract was created (Figure [3-1](#Fig1)). The
    new contract is there!![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig1_HTML.jpg)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the truffle compile results. On the left is a section titled
    explorer in which solidarity, build backward slash contracts is selected. On the
    top of the main screen, terminal is selected and a program under it reads dollar
    truffle compile, compiling your contracts with a list of compiling under it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-1
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Truffle compile results
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Deploy the ERC-20 Token to the Ganache Development Blockchain
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ethereum Ganache is a local in-memory blockchain that is intended for development
    and testing. It mimics the characteristics of a real Ethereum network, including
    the availability of a number of accounts funded with test ether.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: This is a nice way to deploy contracts before moving them to a main network.
    Using a development blockchain, you can focus on the implementation without worrying
    about spending real money to deploy the contracts.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the Migration
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new migration file named 2_deploy_contracts.js under the migrations
    folder. In the first line, add a reference to the smart contract and add an export
    function to deploy the smart contract (Figure [3-2](#Fig2)).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig2_HTML.jpg)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the migrations folder under the Solidity block that has the
    2 underscore deploy underscore contracts dot j s tab selected. The command prompt
    reads, const E R C 20 Miner Reward equals artifacts dot require open parenthesis
    open quotes E R C 20 Miner Reward close quotes, close parenthesis. Below, the
    command continues.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-2
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: New migration file
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Starting the Blockchain
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open a new terminal and start the Ganache blockchain.$ ganache-cli
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: A new Ganache blockchain is listening on 127.0.0.1:8545.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Blockchain Network
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open truffle-config.js and uncomment the development block from networks. Make
    sure the host and port are correct (Figure [3-3](#Fig3)).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig3_HTML.jpg)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the truffle hyphen config dot j s tab is selected. Within that
    the networks section is open. There are several instructions provided under networks.
    The other sections provided below are development, where details of the host,
    port, and network i d are given. At the bottom, there is further information of
    advanced options.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-3
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Development network
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the Contract
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Compile the contract using the following command:$ truffle compileMigrate the
    contract using the following command:$ truffle migrateThe contract was deployed
    to the Ganache blockchain, and a contract address was created (Figure [3-4](#Fig4)).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig4_HTML.jpg)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'A screenshot of the truffle migrate contract has 4 tabs on top, problems, output,
    debug console and terminal, of which terminal is selected. There are 4 main sections
    in the terminal: compiling your contracts, starting migrations, 1 underscore initial
    migration dot j s, and summary.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-4
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Truffle migrate contract
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Adding Ganache to MetaMask Networks
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open the MetaMask extension and click the Network drop-down. Select the Custom
    RPC option and set the following fields, as shown in the Figure [3-5](#Fig5):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Set the network name to **Localhost 8545**.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the RPC URL to **http://localhost:8545**.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the chain ID to **1337**.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the currency symbol to **ETH**.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig5_HTML.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
- en: A screenshot of the networks pane under Ethereum Mainnet. There is a warning
    message about a malicious network followed by Network name, Localhost 8 5 4 5,
    New R P C U R L with the link, Chain I D, 1 3 3 7, Currency Symbol, optional,
    with E T H. At the bottom the text reads Block Explorer U R L, which also optional.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-5
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: MetaMask network configuration
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Token to a Wallet
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to the Brave browser (or any browser compatible with MetaMask) and select
    the “Localhost 8585” network.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Click “Add token” and click “Custom token.” Copy the contract address. Paste
    it into the “Token contract address” field.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: The “Token symbol” and “Decimals of precision” fields are filled automatically.
    Click “Next” and click “Add token.” The token was added to the MetaMask wallet.
    The token is there!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Create an ERC-20 Token with a Fixed Supply
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The total number of tokens allowed in the smart contract is defined by ERC-20
    fixed supply tokens. You cannot update the contract once it has been deployed
    to the blockchain. This means that your coin will have that fixed amount after
    deployed and you will not be able to fund with more coins later.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Project
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Initialize a new and empty Ethereum project.$ truffle initCreate a package.json
    file for your project.$ npm initInstall the OpenZeppelin contracts package. It
    contains reusable smart contracts written in Solidity.$ npm install @openzeppelin/contracts
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Writing a Fixed Supply Contract
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a new solidity file and do the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Include the license declaration (this is mandatory).
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the Solidity minimum version.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the OpenZeppelin ERC-20 contract library.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the fixed supply contract class, inheriting from ERC-20.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call the constructor, passing the name and symbol.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '6.'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign the total supply to the sender address (who created the contract).
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '7.'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Override the decimals function.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '8.'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the number of decimals that this token will have.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '// SPDX-License-Identifier: MITpragma solidity ^0.8.0;import "@openzeppelin/contracts/token/ERC20/ERC20.sol";contract
    ERC20FixedSupply is ERC20 {    constructor() ERC20("Fixed", "FIX"){        _mint(msg.sender,
    1000);    }    function decimals() public view virtual override returns (uint8){        return
    0;    }}Go to truffle-config.js and uncomment the solc block (Ctrl+;). Now, update
    the Solidity version number.compilers: {    solc: {        version: "0.8.0",        docker:
    true,        settings: {            optimizer: {                enabled: false,                runs:
    200            },            evmVersion: "byzantium"        }    }},Under the
    migrations folder, create a new file. Set the name to 2_deploy_contracts.sol.$
    touch migrations/2_deploy_contracts.solIn this file, set the required method to
    your contract file and export a function to deploy the contract.var ERC20FixedSupply
    = artifacts.require("./ERC20FixedSupply.sol");module.exports = function(deployer){    deployer.deploy(ERC20FixedSupply);}'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Compiling the Contract
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now it is time to compile the contract.$ truffle compile
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: The contract was compiled successfully!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Starting the Ganache Development Blockchain
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Split the terminal view. Now, start the Ganache development blockchain on 127.0.0.1:8545.$
    ganache-cliGo to truffle-config.js, and under networks, uncomment the development
    block.networks: {    development: {        host: "127.0.0.1",        port: 8545,        network_id:
    "*"    },}'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Migrating the Contract to Ganache
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Run the migrate command to deploy contracts, as shown in Figure [3-6](#Fig6).$
    truffle migrate![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig6_HTML.jpg)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'A screenshot of the truffle compile results has the menu pane on the left with
    truffle hyphen config dot j s selected. On the main part of the screen, there
    are four tabs: Problem, Output, Terminal and Debug Console, of which terminal
    is selected. The terminal text reads compiling your contracts. It is compiled
    and waiting for input.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-6
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'VS Code: migrating the project using the truffle command line'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Before proceeding to the next section, copy the private key of the account that
    deployed the token.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Configuring MetaMask
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open MetaMask. Click your account and then click “Import account.” In this step,
    paste the account private key. Click on “Import”, as shown in Figure [3-7](#Fig7).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig7_HTML.jpg)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the import account page. Below the heading import account, a
    message reads imported account will not be associated with your originally created
    metamask account. Below it, the select type field has private key selected. Below
    it, the field to enter the private key string has a dotted line. Import button
    is highlighted at the bottom.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-7
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'MetaMask: importing an existing wallet using the seed phase Click the Networks
    list and then click Localhost:8545\. Using the localhost network means you will
    be pointing your wallet to your local development blockchain, as shown in Figure
    [3-8](#Fig8).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig8_HTML.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the networks page. The text on the top reads show or hide test
    networks with a dismiss button on the right. The list of some visible networks
    is as follows. Polygon Mumbai, ropsten test network, kovan test network, rinkeby
    test network, and so on. Ropsten test network is check-marked on the left. Add
    network button is at the bottom.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-8
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'MetaMask: network selection list'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Token to MetaMask
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Click “Add token” and then select “Custom token.” Paste in the token contract
    address and click “Next”.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Adding a token is a matter of adding the contract public address of the created
    token. MetaMask will read the symbol and the number of decimal places automatically
    after that. Make sure you get the same result as shown in Figure [3-9](#Fig9).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig9_HTML.jpg)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the Add Tokens window has 2 tabs, Search and Custom Token. Custom
    token is selected. Below, there is a bar for Token Contract address with the address,
    Token symbol with fix, and Decimals of precision with a 0.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-9
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'MetaMask: adding a custom token'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Click “Add tokens.” The token symbol as well as your balance will be shown on
    this screen (Figure [3-10](#Fig10)).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig10_HTML.jpg)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the Add Tokens window has the question Would you like to add
    these tokens? On the left is the word Token and a colourful circular icon labelled
    Fix. On the right, the word Balance is given with 1000 Fix.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-10
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'MetaMask: new custom token overview'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Now, go back to VS Code (see Figure [3-6](#Fig6) for the ganache-cli terminal
    view) and copy another account private key. Return to MetaMask and repeat the
    steps you did for the first account, including adding the token.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Transferring Tokens Between Accounts
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, switch to the first imported account (the one that has all the tokens).
    Click “Send” and then click “Transfer between my accounts.” Select the second
    created account. Enter **115 FIX** as the amount to transfer and click “Next”.
    Finally, click “Confirm”.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: The transaction was sent, but it’s in a pending state. Wait a moment for the
    transaction to be confirmed. Once that happens, the total number of tokens will
    be updated. Select the second imported account; now this account has 115 FIX!
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Deploy the ERC-20 Token to a Testnet Using Infura
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Infura can be used to deploy smart contracts to test networks such as Ropsten,
    Kovan, Rinkeby, Goerli, and also the mainnet. For the testnet, you will need to
    create a new project on Infura and have access to the wallet’s private key, which
    you will use to deploy the contracts. To execute the contract creation transaction,
    this wallet must have an ether balance.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Prerequisites
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open a new terminal and install the fs package. Installing this package provides
    useful functionality to access and interact with the file system.$ npm install
    fsNow, install the wallet provider hdwallet package. This is used to sign transactions
    for addresses derived from a 12- or 24-word mnemonic.$ npm install @truffle/hdwallet-provider@1.2.3
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Your Infura Project
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to [http://infura.io](http://infura.io) and access your dashboard. Click
    “Ethereum” and then click “Create a Project”. Define the project name. Notice
    that you can connect with different testnets and also to the mainnet. Copy the
    project ID and save the changes.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Your Smart Contract
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Go to Visual Studio Code and open truffle-config.js. Uncomment the four constants:
    hdwalletprovider, infurakey, fs, and mnemonic. Paste the project ID as a value
    for the Infurakey constant. Uncomment the ropsten block. Make sure you are using
    the correct project ID in the ropsten endpoint.const HDWalletProvider = require(''@truffle/hdwallet-provider'');const
    infuraKey = "fj4jll3k.....";const fs = require(''fs'');const mnemonic = fs.readFileSync(".secret").toString().trim();'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Private Key
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to the browser and open your MetaMask wallet connected to the Infura network.
    Click “*your account*” and then click “settings,” and finally click “security
    & privacy” (Figure [3-11](#Fig11)).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: You have the option to view your seed phrase, but be aware that this information
    is sensitive and if someone has access to it, they will be able to restore your
    wallet and make use of your funds.![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig11_HTML.jpg)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the Security and Privacy window in the Ropsten Test Network.
    A phrase on the screen reads Reveal Seed Phrase, with a button with the cursor
    on it, which also reads Reveal Seed Phrase.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-11
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 'MetaMask: revealing the seed phrase'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Click “Reveal Seed Phrase” and enter your wallet password to continue; then
    copy the private key.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Go back to Visual Studio Code (Figure [3-6](#Fig6)) and create a new file named
    .secret. Paste the private key into this file. You can also create this file using
    the command line (Figure [3-12](#Fig12)).$ touch .secret![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig12_HTML.jpg)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot has the migrations folder selected under the Solidity block. The
    command prompt reads dollar sign touch space dot secret.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-12
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Secret file
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the Smart Contract
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open the terminal and run the migrate command to deploy the contracts on the
    Ropsten network.$ truffle migrate --network ropsten
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Checking Your Wallet Balance
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to your MetaMask wallet again and notice now that your balance has been reduced.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the Smart Contract on Etherscan
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open a new window and copy the contract address that was created in the deploy
    stage. Go to [https://ropsten.etherscan.io](https://ropsten.etherscan.io) and
    paste the contract address into the search field. Click the Find button. The smart
    contract is there!
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: The tokens were created and transferred to the wallet that created the contract.
    Click the Fixed (FIX) token link. Here you can see an overview of your newly created
    token.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Deploy the ERC-20 Token to the Polygon Testnet (Layer 2)
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Polygon is a protocol and framework for building and connecting Ethereum-compatible
    blockchain networks. You can aggregate scalable solutions on Ethereum to support
    a multichain Ethereum ecosystem.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: MATIC, the native token of Polygon, is an ERC-20 token running on the Ethereum
    blockchain. The tokens are used for payment services on Polygon and as a settlement
    currency between users who operate within the Polygon ecosystem.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Prerequisites
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open a new terminal and install the fs package, if you haven’t already done
    so. This package provides a lot of useful functionality to access and interact
    with the file system.$ npm install fsNow, install the wallet provider hdwallet
    package, if you haven’t already done so. It is used to sign transactions for addresses
    derived from a 12- or 24-word mnemonic.$ npm install @truffle/hdwallet-provider@1.4.0
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Adding Polygon Mumbai to MetaMask Networks
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open the MetaMask extension and click the Network drop-down. Then select the
    Custom RPC option. Set the following values, as shown in Figure [3-13](#Fig13):'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Set the network name to **Matic Testnet**.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the RPC URL to [**https://rpc-mumbai.maticvigil.com**](https://rpc-mumbai.maticvigil.com).
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the chain ID to **80001**.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the currency symbol to **MATIC**.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the Block Explorer URL to [**https://explore-mumbai.maticvigil.com**](https://explore-mumbai.maticvigil.com).
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig13_HTML.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
- en: A screenshot of the MetaMask network configuration page reads as follows. Network
    Name, Matic Testnet. New R P C U R L has the link entered below. Chain I D with
    8 0 0 0 1; Currency Symbol, optional with MATIC. The last line reads Block Explorer
    U R L, optional, with the provided link.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-13
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: 'MetaMask: network configuration page'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Activating the Polygon Add-on on Infura
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to [https://infura.io/upgrade](https://infura.io/upgrade) and click Select
    Addon in the Polygon PoS under Network Add-ons*,* as shown in Figure [3-14](#Fig14)*.*
    The Polygon PoS is currently in beta version on Infura, and you need to activate
    it.![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig14_HTML.jpg)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the Network Add-Ons window describes the polygon PoS as a hybrid
    Plasma Proof-of-Stake sidechain to Ethereum's mainnet which utilizes a Tendermint
    consensus validator layer and a Plasma sidechain for block production. Select
    AddOn and More coming soon buttons are shown below. The pricing of $200 per month
    is struck out.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-14
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: 'Infura: Polygon PoS activation page'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: After activating it, you will be redirected to the summary page. The free layer
    is limited to 100,000 requests a day. You will be asked to provide a credit card
    in order to confirm; as the total cost is zero, you will not be charged. If you
    agree, click Get Started Now. You should see a page similar to the one shown in
    Figure [3-15](#Fig15).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig15_HTML.jpg)
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the Summary window lists the order total as $0 per month, total
    requests as 100,000 per day, core tier of 100,000 requests per day as $0 per month,
    add-ons of Polygon PoS as $0 per month. There is a discount code that can be applied.
    Below there is a checkout section with a credit card already saved.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-15
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'Infura: Summary page order after adding the Polygon PoS plugin'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Your Infura Project
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure that you have a project already set up on Infura. If you haven’t already,
    please follow the steps in Chapter [1](521550_1_En_1_Chapter.xhtml).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Your Smart Contract
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Go to Visual Studio Code and open truffle-config.js*.* Uncomment the four constants:
    hdwalletprovider, infurakey, fs, and mnemonic and *p*aste the project ID as a
    value for infurakey constant.const HDWalletProvider = require(''@truffle/hdwallet-provider'');const
    infuraKey = "fj4jll3k.....";const fs = require(''fs'');const mnemonic = fs.readFileSync(".secret").toString().trim();'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Network (Using the Matic Endpoint)
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first way to connect to a Polygon network is using the Matic network. Now,
    create a matic_testnet configuration under networks in the truffle-config.js file
    and set the following values:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Set the wallet URL to [https://rpc-mumbai.maticvigil.com](https://rpc-mumbai.maticvigil.com).
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set network_id to 80001.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'matic_testnet: {  provider: () => new HDWalletProvider(mnemonic, `https://rpc-mumbai.maticvigil.com`),  network_id:
    80001,  confirmations: 2,  timeoutBlocks: 200,  skipDryRun: true},'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Network (Using the Infura Endpoint)
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another way to connect to the Polygon network is using the Infura endpoint.
    Create a matic_testnet configuration under networks and set the following values:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Set the wallet URL to [https://polygon-mumbai.infura.io/v3/${infuraKey}](https://polygon-mumbai.infura.io/v3/%2524%257binfuraKey%257d).
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set network_id to 80001.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'matic_testnet: {  provider: () => new HDWalletProvider(mnemonic, `https://polygon-mumbai.infura.io/v3/${infuraKey}`),  network_id:
    80001,  confirmations: 2,  timeoutBlocks: 200,  skipDryRun: true,  chainId: 80001,  networkCheckTimeout:
    1000000},'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: To use the Polygon network, you will need to activate the network add-on.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Private Key
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to the browser and open your MetaMask wallet connected to the Infura network.
    Click “*your account*” and then click “settings.” Finally, click “security & privacy,”
    as you can see in Figure [3-16](#Fig16).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig16_HTML.jpg)
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the Security and Privacy window in the Ropsten Test Network.
    A phrase on the screen reads Reveal Seed Phrase, with a long button with the cursor
    on it, which also reads Reveal Seed Phrase.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-16
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'MetaMask: revealing the seed phrase'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: You have the option to view your seed phrase, but be aware that this information
    is sensitive, and if someone has access to it, they will be able to restore your
    wallet and make use of your funds.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: Click Reveal Seed Phrase and enter your wallet password to continue. Copy the
    private key.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Go back to VS Code (on the ganache-cli terminal view) and create a new file
    named .secret. Paste the private secret recovery phrase on this file.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the Smart Contract
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Run the migrate command to deploy contracts to the matic_testnet network.$ truffle
    migrate --network matic_testnetIf you get this error on the terminal, you will
    need to get the test MATIC from Faucet first.1_initial_migration.js======================   Deploying
    'Migrations'   ----------------------Error:  *** Deployment Failed ***"Migrations"
    -- insufficient funds for gas * price + value.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Checking Your Wallet Balance
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to your MetaMask wallet again and notice that your balance has been reduced.
    This happens because you need to pay for each contract deployment. It has an equivalent
    cost in gas, and that cost is calculated according to the instructions you use
    inside a smart contract. This means that the more machine processing you need,
    the higher the gas cost for you to execute this contract. You can find a more
    detailed explanation of how this is calculated in the [Ethereum yellow paper](https://ethereum.github.io/yellowpaper/paper.pdf).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the Smart Contract on PolygonScan
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Copy the contract address that was created in the deploy (this address will
    be shown in the console after truffle migrate has finished running) and go to
    [https://mumbai.polygonscan.com](https://mumbai.polygonscan.com). Paste the contract
    address in the search field and click the Find button. The smart contract is there!
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: The tokens were created and transferred to the wallet that created the contract.
    Now, click the Fixed (FIX) token link, and here you can see the overview of your
    newly created token!
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Deploy the ERC-20 Token to the Polygon Mainnet (Layer 2)
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The mainnet network is used for real transactions, while testnets are used for
    testing smart contracts and decentralized applications (DApps). Polygon is used
    as a second layer and gained popularity because of the transaction cost that are
    lower than the mainnet.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 主网用于真实交易，而测试网用于测试智能合约和去中心化应用（DApps）。Polygon作为第二层而受到欢迎，因为其交易成本低于主网。
- en: Adding the Polygon Mainnet to MetaMask Networks
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向MetaMask网络添加Polygon主网
- en: 'Open the MetaMask extension, click the Network drop-down, and then select the
    Custom RPC option. Set the following values as shown in Figure [3-17](#Fig17):'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 打开MetaMask扩展程序，点击网络下拉菜单，然后选择自定义RPC选项。按照图[3-17](#Fig17)所示设置以下值：
- en: Set the network name to **Matic Mainnet**.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将网络名称设置为**Matic Mainnet**。
- en: Set the RPC URL to [**https://rpc-mainnet.maticvigil.com**](https://rpc-mainnet.maticvigil.com).
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将RPC URL设置为[**https://rpc-mainnet.maticvigil.com**](https://rpc-mainnet.maticvigil.com)。
- en: Set the chain ID to **137**.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将链ID设置为**137**。
- en: Set the currency symbol to **MATIC**.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将货币符号设置为**MATIC**。
- en: Set the Block Explorer URL to [**https://explore-mainnet.maticvigil.com**](https://explore-mainnet.maticvigil.com).
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将区块浏览器U R L设置为[**https://explore-mainnet.maticvigil.com**](https://explore-mainnet.maticvigil.com)。
- en: '![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig17_HTML.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig17_HTML.jpg)'
- en: A screenshot of the network configuration page has the following fields filled
    in. Network name, Matic Mainnet. New R P C U R L, with the link. Chain I D, 1
    3 7\. Currency symbol, optional. Matic. Block Explorer U R L. optional, with the
    link added.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 网络配置页面的截图如下字段已填写。网络名称，Matic Mainnet。新R P C U R L，带有链接。链ID，137。货币符号，可选。Matic。区块浏览器U
    R L，可选，带有链接添加。
- en: Figure 3-17
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-17
- en: 'MetaMask: network configuration page'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: MetaMask：网络配置页面
- en: Configuring the Network (Using the Infura Endpoint)
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置网络（使用Infura端点）
- en: 'Another way to connect to the Polygon network is to use the Infura endpoint.
    Create a matic_mainnet configuration under networks and set the following values:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到Polygon网络的另一种方法是使用Infura端点。在网络下创建一个matic_mainnet配置，并设置以下值：
- en: Set the wallet URL to [https://polygon-mainnet.infura.io/v3/${infuraKey}](https://polygon-mumbai.infura.io/v3/%2524%257binfuraKey%257d).
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将钱包URL设置为[https://polygon-mainnet.infura.io/v3/${infuraKey}](https://polygon-mumbai.infura.io/v3/%2524%257binfuraKey%257d)。
- en: Set network_id to 137.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将network_id设置为137。
- en: 'matic_mainnet: {  provider: () => new HDWalletProvider(mnemonic, `https://polygon-mainnet.infura.io/v3/${infuraKey}`),  network_id:
    137,  gasPrice: 100000000,  confirmations: 2,  timeoutBlocks: 200,  skipDryRun:
    true,  chainId: 137,  networkCheckTimeout: 1000000},'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 'matic_mainnet: {  provider: () => new HDWalletProvider(mnemonic, `https://polygon-mainnet.infura.io/v3/${infuraKey}`),  network_id:
    137,  gasPrice: 100000000,  confirmations: 2,  timeoutBlocks: 200,  skipDryRun:
    true,  chainId: 137,  networkCheckTimeout: 1000000},'
- en: Deploying the Smart Contract
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署智能合约
- en: Run the migrate command to deploy contracts to the matic_mainnet network.$ truffle
    migrate --network matic_mainnet
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 运行migrate命令以将合约部署到matic_mainnet网络。truffle migrate --network matic_mainnet
- en: Checking Your Wallet Balance
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查您的钱包余额
- en: Go to your MetaMask wallet again and notice that your balance has been reduced.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 再次打开你的MetaMask钱包，注意你的余额已经减少。
- en: Verifying the Smart Contract on PolygonScan
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在PolygonScan上验证智能合约
- en: Copy the contract address that was created in the deployment and go to PolygonScan.^([2](#Fn2))
    Paste the contract address in the search field and click the Find button. The
    smart contract is there!
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 复制在部署中创建的合约地址，然后前往PolygonScan。^([2](#Fn2))将合约地址粘贴到搜索字段中，然后点击查找按钮。智能合约就在那里！
- en: The tokens were created and transferred to the wallet that created the contract.
    Now, click the Fixed (FIX) token link, and here you can see the overview of your
    newly created token.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 代币已被创建并转入了创建合约的钱包。现在，点击固定(FIX)代币链接，在这里你可以看到你新创建代币的概览。
- en: Summary
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned what the ERC-20 token standard is and learned how
    to create and deploy fungible tokens to Ganache to the testnet and mainnet networks
    on the Ethereum and Polygon blockchains.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了ERC-20代币标准是什么，并学会了如何将通证化代币部署到Ganache以及部署到以太坊和Polygon区块链上的测试网和主网。
- en: In the next chapter, you will explore unit tests on smart contracts and learn
    how to write your first unit test.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将探索智能合约上的单元测试，并学习如何编写您的第一个单元测试。
