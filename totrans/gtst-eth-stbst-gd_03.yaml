- en: © The Author(s), under exclusive license to APress Media, LLC, part of Springer
    Nature 2022D. P. BauerGetting Started with Ethereum [https://doi.org/10.1007/978-1-4842-8045-4_3](https://doi.org/10.1007/978-1-4842-8045-4_3)
  prefs: []
  type: TYPE_NORMAL
- en: '3. ERC-20: Fungible Tokens'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Davi Pedro Bauer^([1](#Aff2)  )(1)Campo Bom, Rio Grande do Sul, Brazil
  prefs: []
  type: TYPE_NORMAL
- en: Fungible tokens are tokens where each unit has the same value, in the same way
    as fiat currency. This means you can exchange one unit of this currency for another
    unit of this currency for the same amount. Thinking about replicating this behavior
    on the blockchain, Fabian Vogelsteller and Vitalik Buterin proposed the creation
    of ERC-20, “Ethereum Request for Comments 20,” in November 2015 to create a simple
    format for Ethereum-based tokens. These tokens work within the Ethereum blockchain
    and are able to interact with other cryptocurrencies on the network. In this chapter,
    you will create simple contracts in the ERC-20 standard and learn how to deploy
    them to test and production networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of this chapter, you will be able to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Write a simple contract in the ERC-20 standard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a fixed supply contract.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inherit key implementations with OpenZeppelin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compile the contract using Truffle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start a localhost blockchain using Ganache.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy the existing contract to Ganache.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure MetaMask to connect to Ganache.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the deployed token contract to your MetaMask wallet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrate the contract to Ganache.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transfer tokens between accounts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add Polygon Mumbai to MetaMask networks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activate the Polygon add-on on Infura.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the private key to sign the contract.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy the smart contract on Polygon Mumbai.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the Polygon mainnet to MetaMask networks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the network to use the Polygon mainnet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy the smart contract on the Polygon mainnet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify the smart contract on the Polygon mainnet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a Simple ERC-20 Token Using OpenZeppelin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s use Truffle to develop a simple ERC-20 Ethereum^([1](#Fn1)) smart contract
    and then import the OpenZeppelin contracts library.
  prefs: []
  type: TYPE_NORMAL
- en: OpenZeppelin is an open source and auditable library that allows you to reuse
    code from more common implementations, thus serving as an initial code base that
    is always the same. Using OpenZeppelin allows you to focus more on coding the
    business need rather than repeating unnecessary code.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the OpenZeppelin library in this example and in subsequent chapters
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tokens can represent virtually everything in Ethereum, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Reputation points in an online platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skills of a character in a game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lottery tickets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Financial assets like a share in a company
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A fiat currency like USD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An ounce of gold
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the Environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Initialize Truffle using the following command:$ truffle initNow, initialize
    the project folder.$ npm initFinally, install the OpenZeppelin contracts package.$
    npm install @openzeppelin/contracts
  prefs: []
  type: TYPE_NORMAL
- en: Writing the Contract
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a new file under the contracts folder with the name ERC20MinerReward.sol.
    Add the license directive, define the Solidity minimum version, and import the
    OpenZeppelin ERC-20 contract library. Finally, define the contract class, the
    contract constructor, the contract name, and the contract symbol.// SPDX-License-Identifier:
    MITpragma solidity ^0.8.0;import "@openzeppelin/contracts/token/ERC20/ERC20.sol";contract
    ERC20MinerReward is ERC20 {    constructor() ERC20("MinerReward", "MRW"){}}'
  prefs: []
  type: TYPE_NORMAL
- en: Setting the Solidity Compiler Version
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Copy the Solidity version used in this contract and then open truffle-config.js*.*
    Uncomment the solc block and set the Solidity version by pasting in the copied
    value.compilers: {    solc: {        version: "0.8.0",        docker: true,        settings:
    {            optimizer: {                enabled: false,                runs:
    200            },            evmVersion: "byzantium"        }    }},'
  prefs: []
  type: TYPE_NORMAL
- en: Compiling the Contract
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now it is the time to compile the contract.$ truffle compile
  prefs: []
  type: TYPE_NORMAL
- en: The contract was compiled successfully!
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the Result
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that a new folder build/contract was created (Figure [3-1](#Fig1)). The
    new contract is there!![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig1_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the truffle compile results. On the left is a section titled
    explorer in which solidarity, build backward slash contracts is selected. On the
    top of the main screen, terminal is selected and a program under it reads dollar
    truffle compile, compiling your contracts with a list of compiling under it.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-1
  prefs: []
  type: TYPE_NORMAL
- en: Truffle compile results
  prefs: []
  type: TYPE_NORMAL
- en: Deploy the ERC-20 Token to the Ganache Development Blockchain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ethereum Ganache is a local in-memory blockchain that is intended for development
    and testing. It mimics the characteristics of a real Ethereum network, including
    the availability of a number of accounts funded with test ether.
  prefs: []
  type: TYPE_NORMAL
- en: This is a nice way to deploy contracts before moving them to a main network.
    Using a development blockchain, you can focus on the implementation without worrying
    about spending real money to deploy the contracts.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the Migration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new migration file named 2_deploy_contracts.js under the migrations
    folder. In the first line, add a reference to the smart contract and add an export
    function to deploy the smart contract (Figure [3-2](#Fig2)).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig2_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the migrations folder under the Solidity block that has the
    2 underscore deploy underscore contracts dot j s tab selected. The command prompt
    reads, const E R C 20 Miner Reward equals artifacts dot require open parenthesis
    open quotes E R C 20 Miner Reward close quotes, close parenthesis. Below, the
    command continues.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-2
  prefs: []
  type: TYPE_NORMAL
- en: New migration file
  prefs: []
  type: TYPE_NORMAL
- en: Starting the Blockchain
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open a new terminal and start the Ganache blockchain.$ ganache-cli
  prefs: []
  type: TYPE_NORMAL
- en: A new Ganache blockchain is listening on 127.0.0.1:8545.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Blockchain Network
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open truffle-config.js and uncomment the development block from networks. Make
    sure the host and port are correct (Figure [3-3](#Fig3)).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig3_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the truffle hyphen config dot j s tab is selected. Within that
    the networks section is open. There are several instructions provided under networks.
    The other sections provided below are development, where details of the host,
    port, and network i d are given. At the bottom, there is further information of
    advanced options.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-3
  prefs: []
  type: TYPE_NORMAL
- en: Development network
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the Contract
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Compile the contract using the following command:$ truffle compileMigrate the
    contract using the following command:$ truffle migrateThe contract was deployed
    to the Ganache blockchain, and a contract address was created (Figure [3-4](#Fig4)).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig4_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: 'A screenshot of the truffle migrate contract has 4 tabs on top, problems, output,
    debug console and terminal, of which terminal is selected. There are 4 main sections
    in the terminal: compiling your contracts, starting migrations, 1 underscore initial
    migration dot j s, and summary.'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-4
  prefs: []
  type: TYPE_NORMAL
- en: Truffle migrate contract
  prefs: []
  type: TYPE_NORMAL
- en: Adding Ganache to MetaMask Networks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open the MetaMask extension and click the Network drop-down. Select the Custom
    RPC option and set the following fields, as shown in the Figure [3-5](#Fig5):'
  prefs: []
  type: TYPE_NORMAL
- en: Set the network name to **Localhost 8545**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the RPC URL to **http://localhost:8545**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the chain ID to **1337**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the currency symbol to **ETH**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig5_HTML.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A screenshot of the networks pane under Ethereum Mainnet. There is a warning
    message about a malicious network followed by Network name, Localhost 8 5 4 5,
    New R P C U R L with the link, Chain I D, 1 3 3 7, Currency Symbol, optional,
    with E T H. At the bottom the text reads Block Explorer U R L, which also optional.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-5
  prefs: []
  type: TYPE_NORMAL
- en: MetaMask network configuration
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Token to a Wallet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to the Brave browser (or any browser compatible with MetaMask) and select
    the “Localhost 8585” network.
  prefs: []
  type: TYPE_NORMAL
- en: Click “Add token” and click “Custom token.” Copy the contract address. Paste
    it into the “Token contract address” field.
  prefs: []
  type: TYPE_NORMAL
- en: The “Token symbol” and “Decimals of precision” fields are filled automatically.
    Click “Next” and click “Add token.” The token was added to the MetaMask wallet.
    The token is there!
  prefs: []
  type: TYPE_NORMAL
- en: Create an ERC-20 Token with a Fixed Supply
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The total number of tokens allowed in the smart contract is defined by ERC-20
    fixed supply tokens. You cannot update the contract once it has been deployed
    to the blockchain. This means that your coin will have that fixed amount after
    deployed and you will not be able to fund with more coins later.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Initialize a new and empty Ethereum project.$ truffle initCreate a package.json
    file for your project.$ npm initInstall the OpenZeppelin contracts package. It
    contains reusable smart contracts written in Solidity.$ npm install @openzeppelin/contracts
  prefs: []
  type: TYPE_NORMAL
- en: Writing a Fixed Supply Contract
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a new solidity file and do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Include the license declaration (this is mandatory).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the Solidity minimum version.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the OpenZeppelin ERC-20 contract library.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the fixed supply contract class, inheriting from ERC-20.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call the constructor, passing the name and symbol.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '6.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign the total supply to the sender address (who created the contract).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '7.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Override the decimals function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '8.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the number of decimals that this token will have.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '// SPDX-License-Identifier: MITpragma solidity ^0.8.0;import "@openzeppelin/contracts/token/ERC20/ERC20.sol";contract
    ERC20FixedSupply is ERC20 {    constructor() ERC20("Fixed", "FIX"){        _mint(msg.sender,
    1000);    }    function decimals() public view virtual override returns (uint8){        return
    0;    }}Go to truffle-config.js and uncomment the solc block (Ctrl+;). Now, update
    the Solidity version number.compilers: {    solc: {        version: "0.8.0",        docker:
    true,        settings: {            optimizer: {                enabled: false,                runs:
    200            },            evmVersion: "byzantium"        }    }},Under the
    migrations folder, create a new file. Set the name to 2_deploy_contracts.sol.$
    touch migrations/2_deploy_contracts.solIn this file, set the required method to
    your contract file and export a function to deploy the contract.var ERC20FixedSupply
    = artifacts.require("./ERC20FixedSupply.sol");module.exports = function(deployer){    deployer.deploy(ERC20FixedSupply);}'
  prefs: []
  type: TYPE_NORMAL
- en: Compiling the Contract
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now it is time to compile the contract.$ truffle compile
  prefs: []
  type: TYPE_NORMAL
- en: The contract was compiled successfully!
  prefs: []
  type: TYPE_NORMAL
- en: Starting the Ganache Development Blockchain
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Split the terminal view. Now, start the Ganache development blockchain on 127.0.0.1:8545.$
    ganache-cliGo to truffle-config.js, and under networks, uncomment the development
    block.networks: {    development: {        host: "127.0.0.1",        port: 8545,        network_id:
    "*"    },}'
  prefs: []
  type: TYPE_NORMAL
- en: Migrating the Contract to Ganache
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Run the migrate command to deploy contracts, as shown in Figure [3-6](#Fig6).$
    truffle migrate![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig6_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: 'A screenshot of the truffle compile results has the menu pane on the left with
    truffle hyphen config dot j s selected. On the main part of the screen, there
    are four tabs: Problem, Output, Terminal and Debug Console, of which terminal
    is selected. The terminal text reads compiling your contracts. It is compiled
    and waiting for input.'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-6
  prefs: []
  type: TYPE_NORMAL
- en: 'VS Code: migrating the project using the truffle command line'
  prefs: []
  type: TYPE_NORMAL
- en: Before proceeding to the next section, copy the private key of the account that
    deployed the token.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring MetaMask
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open MetaMask. Click your account and then click “Import account.” In this step,
    paste the account private key. Click on “Import”, as shown in Figure [3-7](#Fig7).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig7_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the import account page. Below the heading import account, a
    message reads imported account will not be associated with your originally created
    metamask account. Below it, the select type field has private key selected. Below
    it, the field to enter the private key string has a dotted line. Import button
    is highlighted at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-7
  prefs: []
  type: TYPE_NORMAL
- en: 'MetaMask: importing an existing wallet using the seed phase Click the Networks
    list and then click Localhost:8545\. Using the localhost network means you will
    be pointing your wallet to your local development blockchain, as shown in Figure
    [3-8](#Fig8).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig8_HTML.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the networks page. The text on the top reads show or hide test
    networks with a dismiss button on the right. The list of some visible networks
    is as follows. Polygon Mumbai, ropsten test network, kovan test network, rinkeby
    test network, and so on. Ropsten test network is check-marked on the left. Add
    network button is at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-8
  prefs: []
  type: TYPE_NORMAL
- en: 'MetaMask: network selection list'
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Token to MetaMask
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Click “Add token” and then select “Custom token.” Paste in the token contract
    address and click “Next”.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a token is a matter of adding the contract public address of the created
    token. MetaMask will read the symbol and the number of decimal places automatically
    after that. Make sure you get the same result as shown in Figure [3-9](#Fig9).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig9_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the Add Tokens window has 2 tabs, Search and Custom Token. Custom
    token is selected. Below, there is a bar for Token Contract address with the address,
    Token symbol with fix, and Decimals of precision with a 0.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-9
  prefs: []
  type: TYPE_NORMAL
- en: 'MetaMask: adding a custom token'
  prefs: []
  type: TYPE_NORMAL
- en: Click “Add tokens.” The token symbol as well as your balance will be shown on
    this screen (Figure [3-10](#Fig10)).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig10_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the Add Tokens window has the question Would you like to add
    these tokens? On the left is the word Token and a colourful circular icon labelled
    Fix. On the right, the word Balance is given with 1000 Fix.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-10
  prefs: []
  type: TYPE_NORMAL
- en: 'MetaMask: new custom token overview'
  prefs: []
  type: TYPE_NORMAL
- en: Now, go back to VS Code (see Figure [3-6](#Fig6) for the ganache-cli terminal
    view) and copy another account private key. Return to MetaMask and repeat the
    steps you did for the first account, including adding the token.
  prefs: []
  type: TYPE_NORMAL
- en: Transferring Tokens Between Accounts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, switch to the first imported account (the one that has all the tokens).
    Click “Send” and then click “Transfer between my accounts.” Select the second
    created account. Enter **115 FIX** as the amount to transfer and click “Next”.
    Finally, click “Confirm”.
  prefs: []
  type: TYPE_NORMAL
- en: The transaction was sent, but it’s in a pending state. Wait a moment for the
    transaction to be confirmed. Once that happens, the total number of tokens will
    be updated. Select the second imported account; now this account has 115 FIX!
  prefs: []
  type: TYPE_NORMAL
- en: Deploy the ERC-20 Token to a Testnet Using Infura
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Infura can be used to deploy smart contracts to test networks such as Ropsten,
    Kovan, Rinkeby, Goerli, and also the mainnet. For the testnet, you will need to
    create a new project on Infura and have access to the wallet’s private key, which
    you will use to deploy the contracts. To execute the contract creation transaction,
    this wallet must have an ether balance.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Prerequisites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open a new terminal and install the fs package. Installing this package provides
    useful functionality to access and interact with the file system.$ npm install
    fsNow, install the wallet provider hdwallet package. This is used to sign transactions
    for addresses derived from a 12- or 24-word mnemonic.$ npm install @truffle/hdwallet-provider@1.2.3
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Your Infura Project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to [http://infura.io](http://infura.io) and access your dashboard. Click
    “Ethereum” and then click “Create a Project”. Define the project name. Notice
    that you can connect with different testnets and also to the mainnet. Copy the
    project ID and save the changes.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Your Smart Contract
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Go to Visual Studio Code and open truffle-config.js. Uncomment the four constants:
    hdwalletprovider, infurakey, fs, and mnemonic. Paste the project ID as a value
    for the Infurakey constant. Uncomment the ropsten block. Make sure you are using
    the correct project ID in the ropsten endpoint.const HDWalletProvider = require(''@truffle/hdwallet-provider'');const
    infuraKey = "fj4jll3k.....";const fs = require(''fs'');const mnemonic = fs.readFileSync(".secret").toString().trim();'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Private Key
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to the browser and open your MetaMask wallet connected to the Infura network.
    Click “*your account*” and then click “settings,” and finally click “security
    & privacy” (Figure [3-11](#Fig11)).
  prefs: []
  type: TYPE_NORMAL
- en: You have the option to view your seed phrase, but be aware that this information
    is sensitive and if someone has access to it, they will be able to restore your
    wallet and make use of your funds.![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig11_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the Security and Privacy window in the Ropsten Test Network.
    A phrase on the screen reads Reveal Seed Phrase, with a button with the cursor
    on it, which also reads Reveal Seed Phrase.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-11
  prefs: []
  type: TYPE_NORMAL
- en: 'MetaMask: revealing the seed phrase'
  prefs: []
  type: TYPE_NORMAL
- en: Click “Reveal Seed Phrase” and enter your wallet password to continue; then
    copy the private key.
  prefs: []
  type: TYPE_NORMAL
- en: Go back to Visual Studio Code (Figure [3-6](#Fig6)) and create a new file named
    .secret. Paste the private key into this file. You can also create this file using
    the command line (Figure [3-12](#Fig12)).$ touch .secret![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig12_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot has the migrations folder selected under the Solidity block. The
    command prompt reads dollar sign touch space dot secret.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-12
  prefs: []
  type: TYPE_NORMAL
- en: Secret file
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the Smart Contract
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open the terminal and run the migrate command to deploy the contracts on the
    Ropsten network.$ truffle migrate --network ropsten
  prefs: []
  type: TYPE_NORMAL
- en: Checking Your Wallet Balance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to your MetaMask wallet again and notice now that your balance has been reduced.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the Smart Contract on Etherscan
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open a new window and copy the contract address that was created in the deploy
    stage. Go to [https://ropsten.etherscan.io](https://ropsten.etherscan.io) and
    paste the contract address into the search field. Click the Find button. The smart
    contract is there!
  prefs: []
  type: TYPE_NORMAL
- en: The tokens were created and transferred to the wallet that created the contract.
    Click the Fixed (FIX) token link. Here you can see an overview of your newly created
    token.
  prefs: []
  type: TYPE_NORMAL
- en: Deploy the ERC-20 Token to the Polygon Testnet (Layer 2)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Polygon is a protocol and framework for building and connecting Ethereum-compatible
    blockchain networks. You can aggregate scalable solutions on Ethereum to support
    a multichain Ethereum ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: MATIC, the native token of Polygon, is an ERC-20 token running on the Ethereum
    blockchain. The tokens are used for payment services on Polygon and as a settlement
    currency between users who operate within the Polygon ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Prerequisites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open a new terminal and install the fs package, if you haven’t already done
    so. This package provides a lot of useful functionality to access and interact
    with the file system.$ npm install fsNow, install the wallet provider hdwallet
    package, if you haven’t already done so. It is used to sign transactions for addresses
    derived from a 12- or 24-word mnemonic.$ npm install @truffle/hdwallet-provider@1.4.0
  prefs: []
  type: TYPE_NORMAL
- en: Adding Polygon Mumbai to MetaMask Networks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open the MetaMask extension and click the Network drop-down. Then select the
    Custom RPC option. Set the following values, as shown in Figure [3-13](#Fig13):'
  prefs: []
  type: TYPE_NORMAL
- en: Set the network name to **Matic Testnet**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the RPC URL to [**https://rpc-mumbai.maticvigil.com**](https://rpc-mumbai.maticvigil.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the chain ID to **80001**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the currency symbol to **MATIC**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the Block Explorer URL to [**https://explore-mumbai.maticvigil.com**](https://explore-mumbai.maticvigil.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig13_HTML.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A screenshot of the MetaMask network configuration page reads as follows. Network
    Name, Matic Testnet. New R P C U R L has the link entered below. Chain I D with
    8 0 0 0 1; Currency Symbol, optional with MATIC. The last line reads Block Explorer
    U R L, optional, with the provided link.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-13
  prefs: []
  type: TYPE_NORMAL
- en: 'MetaMask: network configuration page'
  prefs: []
  type: TYPE_NORMAL
- en: Activating the Polygon Add-on on Infura
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to [https://infura.io/upgrade](https://infura.io/upgrade) and click Select
    Addon in the Polygon PoS under Network Add-ons*,* as shown in Figure [3-14](#Fig14)*.*
    The Polygon PoS is currently in beta version on Infura, and you need to activate
    it.![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig14_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the Network Add-Ons window describes the polygon PoS as a hybrid
    Plasma Proof-of-Stake sidechain to Ethereum's mainnet which utilizes a Tendermint
    consensus validator layer and a Plasma sidechain for block production. Select
    AddOn and More coming soon buttons are shown below. The pricing of $200 per month
    is struck out.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Infura: Polygon PoS activation page'
  prefs: []
  type: TYPE_NORMAL
- en: After activating it, you will be redirected to the summary page. The free layer
    is limited to 100,000 requests a day. You will be asked to provide a credit card
    in order to confirm; as the total cost is zero, you will not be charged. If you
    agree, click Get Started Now. You should see a page similar to the one shown in
    Figure [3-15](#Fig15).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig15_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the Summary window lists the order total as $0 per month, total
    requests as 100,000 per day, core tier of 100,000 requests per day as $0 per month,
    add-ons of Polygon PoS as $0 per month. There is a discount code that can be applied.
    Below there is a checkout section with a credit card already saved.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-15
  prefs: []
  type: TYPE_NORMAL
- en: 'Infura: Summary page order after adding the Polygon PoS plugin'
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Your Infura Project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure that you have a project already set up on Infura. If you haven’t already,
    please follow the steps in Chapter [1](521550_1_En_1_Chapter.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Your Smart Contract
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Go to Visual Studio Code and open truffle-config.js*.* Uncomment the four constants:
    hdwalletprovider, infurakey, fs, and mnemonic and *p*aste the project ID as a
    value for infurakey constant.const HDWalletProvider = require(''@truffle/hdwallet-provider'');const
    infuraKey = "fj4jll3k.....";const fs = require(''fs'');const mnemonic = fs.readFileSync(".secret").toString().trim();'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Network (Using the Matic Endpoint)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first way to connect to a Polygon network is using the Matic network. Now,
    create a matic_testnet configuration under networks in the truffle-config.js file
    and set the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: Set the wallet URL to [https://rpc-mumbai.maticvigil.com](https://rpc-mumbai.maticvigil.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set network_id to 80001.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'matic_testnet: {  provider: () => new HDWalletProvider(mnemonic, `https://rpc-mumbai.maticvigil.com`),  network_id:
    80001,  confirmations: 2,  timeoutBlocks: 200,  skipDryRun: true},'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Network (Using the Infura Endpoint)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another way to connect to the Polygon network is using the Infura endpoint.
    Create a matic_testnet configuration under networks and set the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: Set the wallet URL to [https://polygon-mumbai.infura.io/v3/${infuraKey}](https://polygon-mumbai.infura.io/v3/%2524%257binfuraKey%257d).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set network_id to 80001.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'matic_testnet: {  provider: () => new HDWalletProvider(mnemonic, `https://polygon-mumbai.infura.io/v3/${infuraKey}`),  network_id:
    80001,  confirmations: 2,  timeoutBlocks: 200,  skipDryRun: true,  chainId: 80001,  networkCheckTimeout:
    1000000},'
  prefs: []
  type: TYPE_NORMAL
- en: To use the Polygon network, you will need to activate the network add-on.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Private Key
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to the browser and open your MetaMask wallet connected to the Infura network.
    Click “*your account*” and then click “settings.” Finally, click “security & privacy,”
    as you can see in Figure [3-16](#Fig16).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig16_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the Security and Privacy window in the Ropsten Test Network.
    A phrase on the screen reads Reveal Seed Phrase, with a long button with the cursor
    on it, which also reads Reveal Seed Phrase.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-16
  prefs: []
  type: TYPE_NORMAL
- en: 'MetaMask: revealing the seed phrase'
  prefs: []
  type: TYPE_NORMAL
- en: You have the option to view your seed phrase, but be aware that this information
    is sensitive, and if someone has access to it, they will be able to restore your
    wallet and make use of your funds.
  prefs: []
  type: TYPE_NORMAL
- en: Click Reveal Seed Phrase and enter your wallet password to continue. Copy the
    private key.
  prefs: []
  type: TYPE_NORMAL
- en: Go back to VS Code (on the ganache-cli terminal view) and create a new file
    named .secret. Paste the private secret recovery phrase on this file.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the Smart Contract
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Run the migrate command to deploy contracts to the matic_testnet network.$ truffle
    migrate --network matic_testnetIf you get this error on the terminal, you will
    need to get the test MATIC from Faucet first.1_initial_migration.js======================   Deploying
    'Migrations'   ----------------------Error:  *** Deployment Failed ***"Migrations"
    -- insufficient funds for gas * price + value.
  prefs: []
  type: TYPE_NORMAL
- en: Checking Your Wallet Balance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to your MetaMask wallet again and notice that your balance has been reduced.
    This happens because you need to pay for each contract deployment. It has an equivalent
    cost in gas, and that cost is calculated according to the instructions you use
    inside a smart contract. This means that the more machine processing you need,
    the higher the gas cost for you to execute this contract. You can find a more
    detailed explanation of how this is calculated in the [Ethereum yellow paper](https://ethereum.github.io/yellowpaper/paper.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the Smart Contract on PolygonScan
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Copy the contract address that was created in the deploy (this address will
    be shown in the console after truffle migrate has finished running) and go to
    [https://mumbai.polygonscan.com](https://mumbai.polygonscan.com). Paste the contract
    address in the search field and click the Find button. The smart contract is there!
  prefs: []
  type: TYPE_NORMAL
- en: The tokens were created and transferred to the wallet that created the contract.
    Now, click the Fixed (FIX) token link, and here you can see the overview of your
    newly created token!
  prefs: []
  type: TYPE_NORMAL
- en: Deploy the ERC-20 Token to the Polygon Mainnet (Layer 2)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The mainnet network is used for real transactions, while testnets are used for
    testing smart contracts and decentralized applications (DApps). Polygon is used
    as a second layer and gained popularity because of the transaction cost that are
    lower than the mainnet.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Polygon Mainnet to MetaMask Networks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open the MetaMask extension, click the Network drop-down, and then select the
    Custom RPC option. Set the following values as shown in Figure [3-17](#Fig17):'
  prefs: []
  type: TYPE_NORMAL
- en: Set the network name to **Matic Mainnet**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the RPC URL to [**https://rpc-mainnet.maticvigil.com**](https://rpc-mainnet.maticvigil.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the chain ID to **137**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the currency symbol to **MATIC**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the Block Explorer URL to [**https://explore-mainnet.maticvigil.com**](https://explore-mainnet.maticvigil.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig17_HTML.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A screenshot of the network configuration page has the following fields filled
    in. Network name, Matic Mainnet. New R P C U R L, with the link. Chain I D, 1
    3 7\. Currency symbol, optional. Matic. Block Explorer U R L. optional, with the
    link added.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-17
  prefs: []
  type: TYPE_NORMAL
- en: 'MetaMask: network configuration page'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Network (Using the Infura Endpoint)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another way to connect to the Polygon network is to use the Infura endpoint.
    Create a matic_mainnet configuration under networks and set the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: Set the wallet URL to [https://polygon-mainnet.infura.io/v3/${infuraKey}](https://polygon-mumbai.infura.io/v3/%2524%257binfuraKey%257d).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set network_id to 137.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'matic_mainnet: {  provider: () => new HDWalletProvider(mnemonic, `https://polygon-mainnet.infura.io/v3/${infuraKey}`),  network_id:
    137,  gasPrice: 100000000,  confirmations: 2,  timeoutBlocks: 200,  skipDryRun:
    true,  chainId: 137,  networkCheckTimeout: 1000000},'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the Smart Contract
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Run the migrate command to deploy contracts to the matic_mainnet network.$ truffle
    migrate --network matic_mainnet
  prefs: []
  type: TYPE_NORMAL
- en: Checking Your Wallet Balance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to your MetaMask wallet again and notice that your balance has been reduced.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the Smart Contract on PolygonScan
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Copy the contract address that was created in the deployment and go to PolygonScan.^([2](#Fn2))
    Paste the contract address in the search field and click the Find button. The
    smart contract is there!
  prefs: []
  type: TYPE_NORMAL
- en: The tokens were created and transferred to the wallet that created the contract.
    Now, click the Fixed (FIX) token link, and here you can see the overview of your
    newly created token.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned what the ERC-20 token standard is and learned how
    to create and deploy fungible tokens to Ganache to the testnet and mainnet networks
    on the Ethereum and Polygon blockchains.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will explore unit tests on smart contracts and learn
    how to write your first unit test.
  prefs: []
  type: TYPE_NORMAL
