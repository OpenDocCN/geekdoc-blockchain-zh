- en: © The Author(s), under exclusive license to APress Media, LLC, part of Springer
    Nature 2022D. P. BauerGetting Started with Ethereum [https://doi.org/10.1007/978-1-4842-8045-4_3](https://doi.org/10.1007/978-1-4842-8045-4_3)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 作者(们)，独家许可给 APress Media, LLC，Springer Nature 其中一部分 2022D. P. Bauer开始使用以太坊
    [https://doi.org/10.1007/978-1-4842-8045-4_3](https://doi.org/10.1007/978-1-4842-8045-4_3)
- en: '3. ERC-20: Fungible Tokens'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3. ERC-20：可替代通证
- en: Davi Pedro Bauer^([1](#Aff2)  )(1)Campo Bom, Rio Grande do Sul, Brazil
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Davi Pedro Bauer^([1](#Aff2)  )(1)Campo Bom, Rio Grande do Sul, Brazil
- en: Fungible tokens are tokens where each unit has the same value, in the same way
    as fiat currency. This means you can exchange one unit of this currency for another
    unit of this currency for the same amount. Thinking about replicating this behavior
    on the blockchain, Fabian Vogelsteller and Vitalik Buterin proposed the creation
    of ERC-20, “Ethereum Request for Comments 20,” in November 2015 to create a simple
    format for Ethereum-based tokens. These tokens work within the Ethereum blockchain
    and are able to interact with other cryptocurrencies on the network. In this chapter,
    you will create simple contracts in the ERC-20 standard and learn how to deploy
    them to test and production networks.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 可替代通证是每个单位具有相同价值的通证，就像法定货币一样。这意味着你可以用同等价值的另一个单位交换这种货币的一个单位。考虑在区块链上复制此行为，Fabian
    Vogelsteller 和 Vitalik Buterin 在 2015 年 11 月提出了 ERC-20，“以太坊请求评论 20”，以创建以太坊基于通证的简单格式。这些通证在以太坊区块链内运行，并能与网络上的其他加密货币进行交互。在本章中，你将创建符合
    ERC-20 标准的简单合约，并学习如何将它们部署到测试和生产网络。
- en: 'At the end of this chapter, you will be able to do the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将能够完成以下任务：
- en: Write a simple contract in the ERC-20 standard.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写符合 ERC-20 标准的简单合约。
- en: Write a fixed supply contract.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写固定供应合约。
- en: Inherit key implementations with OpenZeppelin.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 OpenZeppelin 继承关键实现。
- en: Compile the contract using Truffle.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Truffle 编译合约。
- en: Start a localhost blockchain using Ganache.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Ganache 启动本地主机区块链。
- en: Deploy the existing contract to Ganache.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将现有合约部署到 Ganache。
- en: Configure MetaMask to connect to Ganache.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 MetaMask 连接到 Ganache。
- en: Add the deployed token contract to your MetaMask wallet.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将部署的通证合约添加到你的 MetaMask 钱包。
- en: Migrate the contract to Ganache.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将合约迁移到 Ganache。
- en: Transfer tokens between accounts.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在账户之间转移通证。
- en: Add Polygon Mumbai to MetaMask networks.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Polygon Mumbai 添加到 MetaMask 网络。
- en: Activate the Polygon add-on on Infura.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Infura 上启用 Polygon 插件。
- en: Configure the private key to sign the contract.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置私钥以签署合约。
- en: Deploy the smart contract on Polygon Mumbai.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Polygon Mumbai 上部署智能合约。
- en: Add the Polygon mainnet to MetaMask networks.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Polygon 主网添加到 MetaMask 网络。
- en: Configure the network to use the Polygon mainnet.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置网络以使用 Polygon 主网。
- en: Deploy the smart contract on the Polygon mainnet.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Polygon 主网上部署智能合约。
- en: Verify the smart contract on the Polygon mainnet.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Polygon 主网上验证智能合约。
- en: Write a Simple ERC-20 Token Using OpenZeppelin
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 OpenZeppelin 编写简单的 ERC-20 通证。
- en: Let’s use Truffle to develop a simple ERC-20 Ethereum^([1](#Fn1)) smart contract
    and then import the OpenZeppelin contracts library.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 Truffle 开发一个简单的 ERC-20 以太坊^([1](#Fn1)) 智能合约，然后导入 OpenZeppelin 合约库。
- en: OpenZeppelin is an open source and auditable library that allows you to reuse
    code from more common implementations, thus serving as an initial code base that
    is always the same. Using OpenZeppelin allows you to focus more on coding the
    business need rather than repeating unnecessary code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: OpenZeppelin 是一个开源且可审计的库，允许您从更常见的实现中重复使用代码，因此作为始终相同的初始代码库。使用 OpenZeppelin 可以让您更专注于编码业务需求，而不是重复不必要的代码。
- en: We will use the OpenZeppelin library in this example and in subsequent chapters
    of this book.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这个示例和本书的后续章节中使用 OpenZeppelin 库。
- en: 'Tokens can represent virtually everything in Ethereum, such as the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 代币可以在以太坊中代表几乎一切，比如以下内容：
- en: Reputation points in an online platform
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在线平台上的声誉积分
- en: Skills of a character in a game
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏中一个角色的技能
- en: Lottery tickets
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 彩票
- en: Financial assets like a share in a company
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类似公司股份这样的金融资产
- en: A fiat currency like USD
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像美元（USD）这样的法定货币
- en: An ounce of gold
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一盎司黄金
- en: Preparing the Environment
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备环境
- en: Initialize Truffle using the following command:$ truffle initNow, initialize
    the project folder.$ npm initFinally, install the OpenZeppelin contracts package.$
    npm install @openzeppelin/contracts
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令初始化 Truffle：$ truffle init现在，初始化项目文件夹：$ npm init最后，安装 OpenZeppelin 合约包：$
    npm install @openzeppelin/contracts
- en: Writing the Contract
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写合约
- en: 'Create a new file under the contracts folder with the name ERC20MinerReward.sol.
    Add the license directive, define the Solidity minimum version, and import the
    OpenZeppelin ERC-20 contract library. Finally, define the contract class, the
    contract constructor, the contract name, and the contract symbol.// SPDX-License-Identifier:
    MITpragma solidity ^0.8.0;import "@openzeppelin/contracts/token/ERC20/ERC20.sol";contract
    ERC20MinerReward is ERC20 {    constructor() ERC20("MinerReward", "MRW"){}}'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '在 contracts 文件夹下创建一个名为 ERC20MinerReward.sol 的新文件。 添加许可证指令，定义 Solidity 的最低版本，并导入
    OpenZeppelin ERC-20 合约库。 最后，定义合约类、合约构造函数、合约名称和合约符号。// SPDX-License-Identifier:
    MITpragma solidity ^0.8.0;import "@openzeppelin/contracts/token/ERC20/ERC20.sol";contract
    ERC20MinerReward is ERC20 {    constructor() ERC20("MinerReward", "MRW"){}}'
- en: Setting the Solidity Compiler Version
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置 Solidity 编译器版本
- en: 'Copy the Solidity version used in this contract and then open truffle-config.js*.*
    Uncomment the solc block and set the Solidity version by pasting in the copied
    value.compilers: {    solc: {        version: "0.8.0",        docker: true,        settings:
    {            optimizer: {                enabled: false,                runs:
    200            },            evmVersion: "byzantium"        }    }},'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '复制此合约中使用的 Solidity 版本，然后打开 truffle-config.js*.* 取消注释 solc 块，并通过粘贴复制的值设置 Solidity
    版本。compilers: {    solc: {        version: "0.8.0",        docker: true,        settings:
    {            optimizer: {                enabled: false,                runs:
    200            },            evmVersion: "byzantium"        }    }},'
- en: Compiling the Contract
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编译合约
- en: Now it is the time to compile the contract.$ truffle compile
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候编译合约了。$ truffle compile
- en: The contract was compiled successfully!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 合约成功编译！
- en: Verifying the Result
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证结果
- en: Notice that a new folder build/contract was created (Figure [3-1](#Fig1)). The
    new contract is there!![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig1_HTML.jpg)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到一个新文件夹 build/contract 被创建了（见图[3-1](#Fig1)）。新合约在那里！![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig1_HTML.jpg)
- en: A screenshot of the truffle compile results. On the left is a section titled
    explorer in which solidarity, build backward slash contracts is selected. On the
    top of the main screen, terminal is selected and a program under it reads dollar
    truffle compile, compiling your contracts with a list of compiling under it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Truffle 编译结果的截图。左侧是标题为“资源管理器”的部分，在其中选择了 Solidity、构建/合约。主屏幕顶部选择了终端，终端下面的程序显示“$
    truffle compile”，并列出了编译的列表。
- en: Figure 3-1
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-1
- en: Truffle compile results
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Truffle 编译结果
- en: Deploy the ERC-20 Token to the Ganache Development Blockchain
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 ERC-20 代币部署到 Ganache 开发区块链
- en: Ethereum Ganache is a local in-memory blockchain that is intended for development
    and testing. It mimics the characteristics of a real Ethereum network, including
    the availability of a number of accounts funded with test ether.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Ethereum Ganache 是一个本地内存区块链，用于开发和测试。它模拟了真实以太坊网络的特性，包括可用于测试以太的多个账户。
- en: This is a nice way to deploy contracts before moving them to a main network.
    Using a development blockchain, you can focus on the implementation without worrying
    about spending real money to deploy the contracts.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在将合约移至主网络之前部署合约的一种好方法。使用开发区块链，您可以专注于实施而不必担心花费真钱来部署合约。
- en: Preparing the Migration
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备迁移
- en: Create a new migration file named 2_deploy_contracts.js under the migrations
    folder. In the first line, add a reference to the smart contract and add an export
    function to deploy the smart contract (Figure [3-2](#Fig2)).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig2_HTML.jpg)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在迁移文件夹下创建一个名为 2_deploy_contracts.js 的新迁移文件。在第一行添加一个指向智能合约的引用，并添加一个导出函数以部署智能合约（见图[3-2](#Fig2)）。![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig2_HTML.jpg)
- en: A screenshot of the migrations folder under the Solidity block that has the
    2 underscore deploy underscore contracts dot j s tab selected. The command prompt
    reads, const E R C 20 Miner Reward equals artifacts dot require open parenthesis
    open quotes E R C 20 Miner Reward close quotes, close parenthesis. Below, the
    command continues.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Solidity 区块下的迁移文件夹的截图，其中选择了 2_deploy_contracts.js 标签。命令提示符显示，const ERC20MinerReward
    = artifacts.require("ERC20MinerReward")。下方是继续的命令。
- en: Figure 3-2
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-2
- en: New migration file
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 新迁移文件
- en: Starting the Blockchain
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动区块链
- en: Open a new terminal and start the Ganache blockchain.$ ganache-cli
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新的终端并启动 Ganache 区块链。$ ganache-cli
- en: A new Ganache blockchain is listening on 127.0.0.1:8545.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的 Ganache 区块链正在监听 127.0.0.1:8545。
- en: Configuring the Blockchain Network
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置区块链网络
- en: Open truffle-config.js and uncomment the development block from networks. Make
    sure the host and port are correct (Figure [3-3](#Fig3)).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig3_HTML.jpg)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 truffle-config.js 并取消对网络中的开发块的注释。 确保主机和端口是正确的（图 [3-3](#Fig3)）。![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig3_HTML.jpg)
- en: A screenshot of the truffle hyphen config dot j s tab is selected. Within that
    the networks section is open. There are several instructions provided under networks.
    The other sections provided below are development, where details of the host,
    port, and network i d are given. At the bottom, there is further information of
    advanced options.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 truffle-hyphen-config.js 标签页的屏幕截图。 在其中，网络部分已打开。 提供了几个网络下的指令。 提供的其他部分如下：开发，其中提供了主机、端口和网络
    ID 的详细信息。 底部提供了高级选项的进一步信息。
- en: Figure 3-3
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-3
- en: Development network
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 开发网络
- en: Deploying the Contract
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署合同
- en: Compile the contract using the following command:$ truffle compileMigrate the
    contract using the following command:$ truffle migrateThe contract was deployed
    to the Ganache blockchain, and a contract address was created (Figure [3-4](#Fig4)).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig4_HTML.jpg)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令编译合同：$ truffle compile使用以下命令迁移合同：$ truffle migrate合同已部署到 Ganache 区块链，并创建了合同地址（图
    [3-4](#Fig4)）。![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig4_HTML.jpg)
- en: 'A screenshot of the truffle migrate contract has 4 tabs on top, problems, output,
    debug console and terminal, of which terminal is selected. There are 4 main sections
    in the terminal: compiling your contracts, starting migrations, 1 underscore initial
    migration dot j s, and summary.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 truffle migrate contract 的屏幕截图有 4 个标签页，分别是问题、输出、调试控制台和终端，其中终端被选中。 终端中有 4
    个主要部分：编译您的合同、开始迁移、1_初始迁移.j s 和摘要。
- en: Figure 3-4
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-4
- en: Truffle migrate contract
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Truffle 迁移合同
- en: Adding Ganache to MetaMask Networks
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 Ganache 添加到 MetaMask 网络
- en: 'Open the MetaMask extension and click the Network drop-down. Select the Custom
    RPC option and set the following fields, as shown in the Figure [3-5](#Fig5):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 MetaMask 扩展并点击网络下拉菜单。 选择自定义 RPC 选项，并设置以下字段，如图 [3-5](#Fig5) 所示：
- en: Set the network name to **Localhost 8545**.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将网络名称设置为 **Localhost 8545**。
- en: Set the RPC URL to **http://localhost:8545**.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 RPC URL 设置为 **http://localhost:8545**。
- en: Set the chain ID to **1337**.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将链 ID 设置为 **1337**。
- en: Set the currency symbol to **ETH**.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将货币符号设置为 **ETH**。
- en: '![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig5_HTML.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig5_HTML.jpg)'
- en: A screenshot of the networks pane under Ethereum Mainnet. There is a warning
    message about a malicious network followed by Network name, Localhost 8 5 4 5,
    New R P C U R L with the link, Chain I D, 1 3 3 7, Currency Symbol, optional,
    with E T H. At the bottom the text reads Block Explorer U R L, which also optional.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊主网下的网络窗格的屏幕截图。 有关恶意网络的警告消息，随后是网络名称、本地主机 8 5 4 5、新的 RPC URL 链接、链 ID、1 3 3
    7、货币符号，可选的，为 E T H。 底部的文本显示区块浏览器 URL，这也是可选的。
- en: Figure 3-5
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-5
- en: MetaMask network configuration
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: MetaMask 网络配置
- en: Adding the Token to a Wallet
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将令牌添加到钱包
- en: Go to the Brave browser (or any browser compatible with MetaMask) and select
    the “Localhost 8585” network.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 转到 Brave 浏览器（或任何与 MetaMask 兼容的浏览器），并选择“Localhost 8585”网络。
- en: Click “Add token” and click “Custom token.” Copy the contract address. Paste
    it into the “Token contract address” field.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“添加令牌”，然后点击“自定义令牌”。 复制合同地址。 将其粘贴到“令牌合同地址”字段中。
- en: The “Token symbol” and “Decimals of precision” fields are filled automatically.
    Click “Next” and click “Add token.” The token was added to the MetaMask wallet.
    The token is there!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: “令牌符号”和“小数精度”字段将自动填充。点击“下一步”，然后点击“添加令牌”。 令牌已添加到 MetaMask 钱包。 令牌已经在那里了！
- en: Create an ERC-20 Token with a Fixed Supply
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建具有固定供应的 ERC-20 令牌
- en: The total number of tokens allowed in the smart contract is defined by ERC-20
    fixed supply tokens. You cannot update the contract once it has been deployed
    to the blockchain. This means that your coin will have that fixed amount after
    deployed and you will not be able to fund with more coins later.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合同中允许的代币总数由 ERC-20 固定供应代币定义。 一旦部署到区块链上，您将无法更新合同。 这意味着在部署后，您的硬币将有固定数量，您将无法以后用更多硬币进行资助。
- en: Creating the Project
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建项目
- en: Initialize a new and empty Ethereum project.$ truffle initCreate a package.json
    file for your project.$ npm initInstall the OpenZeppelin contracts package. It
    contains reusable smart contracts written in Solidity.$ npm install @openzeppelin/contracts
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化一个新的空以太坊项目。$ truffle init为项目创建一个 package.json 文件。$ npm init安装 OpenZeppelin
    合同包。 它包含用 Solidity 编写的可重用智能合同。$ npm install @openzeppelin/contracts
- en: Writing a Fixed Supply Contract
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写固定供应合同
- en: 'Create a new solidity file and do the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 solidity 文件，并执行以下操作：
- en: '1.'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: Include the license declaration (this is mandatory).
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包含许可声明（这是强制性的）。
- en: '2.'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: Define the Solidity minimum version.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定义 Solidity 最低版本。
- en: '3.'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: Import the OpenZeppelin ERC-20 contract library.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 导入 OpenZeppelin ERC-20 合同库。
- en: '4.'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: Define the fixed supply contract class, inheriting from ERC-20.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定义固定供应合同类，继承自 ERC-20。
- en: '5.'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '5.'
- en: Call the constructor, passing the name and symbol.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调用构造函数，传递名称和符号。
- en: '6.'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '6.'
- en: Assign the total supply to the sender address (who created the contract).
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将总供应量分配给发送方地址（创建合同的人）。
- en: '7.'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '7.'
- en: Override the decimals function.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 覆盖小数函数。
- en: '8.'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '8.'
- en: Set the number of decimals that this token will have.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 设置此令牌将具有的小数位数。
- en: '// SPDX-License-Identifier: MITpragma solidity ^0.8.0;import "@openzeppelin/contracts/token/ERC20/ERC20.sol";contract
    ERC20FixedSupply is ERC20 {    constructor() ERC20("Fixed", "FIX"){        _mint(msg.sender,
    1000);    }    function decimals() public view virtual override returns (uint8){        return
    0;    }}Go to truffle-config.js and uncomment the solc block (Ctrl+;). Now, update
    the Solidity version number.compilers: {    solc: {        version: "0.8.0",        docker:
    true,        settings: {            optimizer: {                enabled: false,                runs:
    200            },            evmVersion: "byzantium"        }    }},Under the
    migrations folder, create a new file. Set the name to 2_deploy_contracts.sol.$
    touch migrations/2_deploy_contracts.solIn this file, set the required method to
    your contract file and export a function to deploy the contract.var ERC20FixedSupply
    = artifacts.require("./ERC20FixedSupply.sol");module.exports = function(deployer){    deployer.deploy(ERC20FixedSupply);}'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '// SPDX-License-Identifier: MITpragma solidity ^0.8.0;import "@openzeppelin/contracts/token/ERC20/ERC20.sol";contract
    ERC20FixedSupply is ERC20 {    constructor() ERC20("Fixed", "FIX"){        _mint(msg.sender,
    1000);    }    function decimals() public view virtual override returns (uint8){        return
    0;    }}打开truffle-config.js文件并取消注释solc块（Ctrl+;）。现在，更新Solidity版本号。compilers: {    solc:
    {        version: "0.8.0",        docker: true,        settings: {            optimizer:
    {                enabled: false,                runs: 200            },            evmVersion:
    "byzantium"        }    }},在迁移文件夹下，创建一个新文件。将名称设置为2_deploy_contracts.sol。$ touch
    migrations/2_deploy_contracts.sol在此文件中，将所需方法设置为您的合约文件，并导出一个函数以部署合约。var ERC20FixedSupply
    = artifacts.require("./ERC20FixedSupply.sol");module.exports = function(deployer){    deployer.deploy(ERC20FixedSupply);}'
- en: Compiling the Contract
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编译合约
- en: Now it is time to compile the contract.$ truffle compile
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是编译合约的时候了。$ truffle compile
- en: The contract was compiled successfully!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 合约编译成功！
- en: Starting the Ganache Development Blockchain
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动Ganache开发区块链
- en: 'Split the terminal view. Now, start the Ganache development blockchain on 127.0.0.1:8545.$
    ganache-cliGo to truffle-config.js, and under networks, uncomment the development
    block.networks: {    development: {        host: "127.0.0.1",        port: 8545,        network_id:
    "*"    },}'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '分割终端视图。现在，在127.0.0.1:8545上启动Ganache开发区块链。$ ganache-cli打开truffle-config.js文件，在网络下取消注释开发块。networks:
    {    development: {        host: "127.0.0.1",        port: 8545,        network_id:
    "*"    },}'
- en: Migrating the Contract to Ganache
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将合约迁移到Ganache
- en: Run the migrate command to deploy contracts, as shown in Figure [3-6](#Fig6).$
    truffle migrate![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig6_HTML.jpg)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 运行迁移命令以部署合约，如[图3-6](#Fig6)所示。$ truffle migrate![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig6_HTML.jpg)
- en: 'A screenshot of the truffle compile results has the menu pane on the left with
    truffle hyphen config dot j s selected. On the main part of the screen, there
    are four tabs: Problem, Output, Terminal and Debug Console, of which terminal
    is selected. The terminal text reads compiling your contracts. It is compiled
    and waiting for input.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 显示了 truffle 编译结果的截图，左侧有菜单栏，选择了 truffle-config.js。 屏幕的主要部分有四个选项卡：问题、输出、终端和调试控制台，其中终端被选中。
    终端文本显示正在编译您的合约。 它已经编译完毕，正在等待输入。
- en: Figure 3-6
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-6
- en: 'VS Code: migrating the project using the truffle command line'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code：使用 truffle 命令行迁移项目
- en: Before proceeding to the next section, copy the private key of the account that
    deployed the token.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一节之前，请复制部署代币的账户的私钥。
- en: Configuring MetaMask
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 MetaMask
- en: Open MetaMask. Click your account and then click “Import account.” In this step,
    paste the account private key. Click on “Import”, as shown in Figure [3-7](#Fig7).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig7_HTML.jpg)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 MetaMask。 点击您的账户，然后点击“导入账户”。 在此步骤中，粘贴账户私钥。 点击“导入”，如[图3-7](#Fig7)所示。![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig7_HTML.jpg)
- en: A screenshot of the import account page. Below the heading import account, a
    message reads imported account will not be associated with your originally created
    metamask account. Below it, the select type field has private key selected. Below
    it, the field to enter the private key string has a dotted line. Import button
    is highlighted at the bottom.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 导入账户页面的截图。 在“导入账户”标题下面，有一条消息，内容是“导入的账户将不与您最初创建的 Metamask 账户关联”。 下面是选择类型字段，私钥已被选择。
    在下面，输入私钥字符串的字段有一个虚线。 导入按钮在底部突出显示。
- en: Figure 3-7
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-7
- en: 'MetaMask: importing an existing wallet using the seed phase Click the Networks
    list and then click Localhost:8545\. Using the localhost network means you will
    be pointing your wallet to your local development blockchain, as shown in Figure
    [3-8](#Fig8).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig8_HTML.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: MetaMask：使用种子短语导入现有钱包 点击网络列表，然后点击本地主机：8545。 使用本地主机网络意味着您将把钱包指向您的本地开发区块链，如[图3-8](#Fig8)所示。![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig8_HTML.jpg)
- en: A screenshot of the networks page. The text on the top reads show or hide test
    networks with a dismiss button on the right. The list of some visible networks
    is as follows. Polygon Mumbai, ropsten test network, kovan test network, rinkeby
    test network, and so on. Ropsten test network is check-marked on the left. Add
    network button is at the bottom.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 网络页面的截图。 顶部的文本显示显示或隐藏测试网络，右侧有一个关闭按钮。 一些可见网络的列表如下。 Polygon Mumbai，ropsten测试网络，kovan测试网络，rinkeby测试网络等。
    在左侧的ropsten测试网络旁边有勾选标记。 添加网络按钮位于底部。
- en: Figure 3-8
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-8
- en: 'MetaMask: network selection list'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: MetaMask：网络选择列表
- en: Adding the Token to MetaMask
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将代币添加到 MetaMask
- en: Click “Add token” and then select “Custom token.” Paste in the token contract
    address and click “Next”.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“添加代币”，然后选择“自定义代币”。粘贴代币合约地址，然后点击“下一步”。
- en: Adding a token is a matter of adding the contract public address of the created
    token. MetaMask will read the symbol and the number of decimal places automatically
    after that. Make sure you get the same result as shown in Figure [3-9](#Fig9).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig9_HTML.jpg)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 添加代币只是添加所创建代币的合约公共地址的问题。之后，MetaMask 将自动读取符号和小数位数。确保获得与图 [3-9](#Fig9) 中显示的相同结果。![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig9_HTML.jpg)
- en: A screenshot of the Add Tokens window has 2 tabs, Search and Custom Token. Custom
    token is selected. Below, there is a bar for Token Contract address with the address,
    Token symbol with fix, and Decimals of precision with a 0.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 添加代币窗口的屏幕截图有 2 个选项卡，搜索和自定义代币。已选择自定义代币。下方有一个用于 Token 合约地址的条形码，其中包含地址，代币符号为 fix，精度小数位为
    0。
- en: Figure 3-9
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-9
- en: 'MetaMask: adding a custom token'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: MetaMask：添加自定义代币
- en: Click “Add tokens.” The token symbol as well as your balance will be shown on
    this screen (Figure [3-10](#Fig10)).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig10_HTML.jpg)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“添加代币”。屏幕上将显示代币符号以及您的余额（图 [3-10](#Fig10)）。![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig10_HTML.jpg)
- en: A screenshot of the Add Tokens window has the question Would you like to add
    these tokens? On the left is the word Token and a colourful circular icon labelled
    Fix. On the right, the word Balance is given with 1000 Fix.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 添加代币窗口的屏幕截图有一个问题，问：“是否要添加这些代币？” 左侧是单词 “代币” 和一个名为 Fix 的彩色圆形图标。右侧给出了单词 “余额” 和
    1000 Fix。
- en: Figure 3-10
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-10
- en: 'MetaMask: new custom token overview'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: MetaMask：新自定义代币概览
- en: Now, go back to VS Code (see Figure [3-6](#Fig6) for the ganache-cli terminal
    view) and copy another account private key. Return to MetaMask and repeat the
    steps you did for the first account, including adding the token.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，返回到 VS Code（参见图 [3-6](#Fig6)，显示 ganache-cli 终端视图），并复制另一个账户的私钥。返回到 MetaMask
    并重复为第一个账户所做的步骤，包括添加代币。
- en: Transferring Tokens Between Accounts
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在账户之间转移代币
- en: Now, switch to the first imported account (the one that has all the tokens).
    Click “Send” and then click “Transfer between my accounts.” Select the second
    created account. Enter **115 FIX** as the amount to transfer and click “Next”.
    Finally, click “Confirm”.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，切换到第一个导入的账户（拥有所有代币的账户）。点击“发送”，然后点击“在我的账户之间转移”。选择第二个创建的账户。输入 **115 FIX** 作为要转移的金额，然后点击“下一步”。最后，点击“确认”。
- en: The transaction was sent, but it’s in a pending state. Wait a moment for the
    transaction to be confirmed. Once that happens, the total number of tokens will
    be updated. Select the second imported account; now this account has 115 FIX!
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 交易已发送，但处于待处理状态。请等待片刻，直到交易得到确认。确认后，代币的总数将会更新。选择第二个导入的账户；现在这个账户有115 FIX！
- en: Deploy the ERC-20 Token to a Testnet Using Infura
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 ERC-20 代币部署到测试网络使用 Infura
- en: Infura can be used to deploy smart contracts to test networks such as Ropsten,
    Kovan, Rinkeby, Goerli, and also the mainnet. For the testnet, you will need to
    create a new project on Infura and have access to the wallet’s private key, which
    you will use to deploy the contracts. To execute the contract creation transaction,
    this wallet must have an ether balance.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Infura 可用于将智能合约部署到测试网络，如 Ropsten、Kovan、Rinkeby、Goerli，还有主网络。对于测试网络，您需要在 Infura
    上创建一个新项目，并访问钱包的私钥，用于部署合约。为了执行合约创建交易，此钱包必须有以太坊余额。
- en: Installing the Prerequisites
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装前提条件
- en: Open a new terminal and install the fs package. Installing this package provides
    useful functionality to access and interact with the file system.$ npm install
    fsNow, install the wallet provider hdwallet package. This is used to sign transactions
    for addresses derived from a 12- or 24-word mnemonic.$ npm install @truffle/hdwallet-provider@1.2.3
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新的终端并安装 fs 包。安装此包提供了访问和与文件系统交互的有用功能。$ npm install fs现在，安装钱包提供者 hdwallet
    包。这用于为从 12 或 24 个字的助记词派生的地址签署交易。$ npm install @truffle/hdwallet-provider@1.2.3
- en: Setting Up Your Infura Project
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置你的 Infura 项目
- en: Go to [http://infura.io](http://infura.io) and access your dashboard. Click
    “Ethereum” and then click “Create a Project”. Define the project name. Notice
    that you can connect with different testnets and also to the mainnet. Copy the
    project ID and save the changes.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 [http://infura.io](http://infura.io) 并访问你的仪表板。点击 “Ethereum”，然后点击 “创建一个项目”。定义项目名称。注意你可以连接到不同的测试网络，也可以连接到主网络。复制项目
    ID 并保存更改。
- en: Setting Up Your Smart Contract
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置你的智能合约
- en: 'Go to Visual Studio Code and open truffle-config.js. Uncomment the four constants:
    hdwalletprovider, infurakey, fs, and mnemonic. Paste the project ID as a value
    for the Infurakey constant. Uncomment the ropsten block. Make sure you are using
    the correct project ID in the ropsten endpoint.const HDWalletProvider = require(''@truffle/hdwallet-provider'');const
    infuraKey = "fj4jll3k.....";const fs = require(''fs'');const mnemonic = fs.readFileSync(".secret").toString().trim();'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 Visual Studio Code 并打开 truffle-config.js 文件。取消注释四个常量：hdwalletprovider、infurakey、fs
    和 mnemonic。将项目 ID 粘贴为 Infurakey 常量的值。取消注释 ropsten 区块。确保你在 ropsten 终端使用了正确的项目 ID。const
    HDWalletProvider = require('@truffle/hdwallet-provider');const infuraKey = "fj4jll3k.....";const
    fs = require('fs');const mnemonic = fs.readFileSync(".secret").toString().trim();
- en: Configuring the Private Key
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置私钥
- en: Go to the browser and open your MetaMask wallet connected to the Infura network.
    Click “*your account*” and then click “settings,” and finally click “security
    & privacy” (Figure [3-11](#Fig11)).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 前往浏览器并打开连接到 Infura 网络的你的 MetaMask 钱包。点击 “*your account*”，然后点击 “settings”，最后点击
    “security & privacy”（图 [3-11](#Fig11)）。
- en: You have the option to view your seed phrase, but be aware that this information
    is sensitive and if someone has access to it, they will be able to restore your
    wallet and make use of your funds.![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig11_HTML.jpg)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择查看您的助记词，但请注意这些信息是敏感的，如果有人可以访问它，他们将能够恢复您的钱包并使用您的资金。![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig11_HTML.jpg)
- en: A screenshot of the Security and Privacy window in the Ropsten Test Network.
    A phrase on the screen reads Reveal Seed Phrase, with a button with the cursor
    on it, which also reads Reveal Seed Phrase.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ropsten 测试网络的《安全与隐私》窗口的屏幕截图。屏幕上有一个短语写着“显示助记词”，有一个带光标的按钮，上面也写着“显示助记词”。
- en: Figure 3-11
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-11
- en: 'MetaMask: revealing the seed phrase'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: MetaMask：显示助记词
- en: Click “Reveal Seed Phrase” and enter your wallet password to continue; then
    copy the private key.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“显示助记词”，并输入您的钱包密码以继续；然后复制私钥。
- en: Go back to Visual Studio Code (Figure [3-6](#Fig6)) and create a new file named
    .secret. Paste the private key into this file. You can also create this file using
    the command line (Figure [3-12](#Fig12)).$ touch .secret![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig12_HTML.jpg)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 回到 Visual Studio Code（图 [3-6](#Fig6)）并创建一个名为 .secret 的新文件。将私钥粘贴到此文件中。您也可以使用命令行创建此文件（图
    [3-12](#Fig12)）。$ touch .secret![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig12_HTML.jpg)
- en: A screenshot has the migrations folder selected under the Solidity block. The
    command prompt reads dollar sign touch space dot secret.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 一个屏幕截图显示了在 Solidity 区块下选择了迁移文件夹。命令提示符上写着美元符号 touch 空格 点秘密。
- en: Figure 3-12
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-12
- en: Secret file
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 秘密文件
- en: Deploying the Smart Contract
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署智能合约
- en: Open the terminal and run the migrate command to deploy the contracts on the
    Ropsten network.$ truffle migrate --network ropsten
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并运行迁移命令在 Ropsten 网络部署合约。$ truffle migrate --network ropsten
- en: Checking Your Wallet Balance
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查您的钱包余额
- en: Go to your MetaMask wallet again and notice now that your balance has been reduced.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 再次转到您的 MetaMask 钱包，并注意到您的余额已经减少了。
- en: Verifying the Smart Contract on Etherscan
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Etherscan 上验证智能合约
- en: Open a new window and copy the contract address that was created in the deploy
    stage. Go to [https://ropsten.etherscan.io](https://ropsten.etherscan.io) and
    paste the contract address into the search field. Click the Find button. The smart
    contract is there!
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新窗口并复制在部署阶段创建的合同地址。转到 [https://ropsten.etherscan.io](https://ropsten.etherscan.io)
    并将合同地址粘贴到搜索栏中。点击“查找”按钮。智能合约就在那里！
- en: The tokens were created and transferred to the wallet that created the contract.
    Click the Fixed (FIX) token link. Here you can see an overview of your newly created
    token.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 代币被创建并转移到创建合约的钱包。点击“固定(FIX)”代币链接。在这里你可以看到你的新创建的代币的概述。
- en: Deploy the ERC-20 Token to the Polygon Testnet (Layer 2)
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署 ERC-20 代币到 Polygon Testnet（第 2 层）
- en: Polygon is a protocol and framework for building and connecting Ethereum-compatible
    blockchain networks. You can aggregate scalable solutions on Ethereum to support
    a multichain Ethereum ecosystem.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Polygon是用于构建和连接与以太坊兼容的区块链网络的协议和框架。您可以在以太坊上聚合可扩展的解决方案，以支持多链以太坊生态系统。
- en: MATIC, the native token of Polygon, is an ERC-20 token running on the Ethereum
    blockchain. The tokens are used for payment services on Polygon and as a settlement
    currency between users who operate within the Polygon ecosystem.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: MATIC，Polygon的原生代币，是在以太坊区块链上运行的ERC-20代币。这些代币用于Polygon上的支付服务，并作为Polygon生态系统内的用户之间的结算货币。
- en: Installing the Prerequisites
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装先决条件
- en: Open a new terminal and install the fs package, if you haven’t already done
    so. This package provides a lot of useful functionality to access and interact
    with the file system.$ npm install fsNow, install the wallet provider hdwallet
    package, if you haven’t already done so. It is used to sign transactions for addresses
    derived from a 12- or 24-word mnemonic.$ npm install @truffle/hdwallet-provider@1.4.0
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新的终端并安装fs包，如果您还没有安装的话。此包提供了许多有用的功能，用于访问和与文件系统交互。$ npm install fs现在，如果您还没有安装的话，请安装钱包提供者hdwallet包。它用于为从12或24个单词的助记符派生的地址签名交易。$
    npm install @truffle/hdwallet-provider@1.4.0
- en: Adding Polygon Mumbai to MetaMask Networks
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将Polygon Mumbai添加到MetaMask网络
- en: 'Open the MetaMask extension and click the Network drop-down. Then select the
    Custom RPC option. Set the following values, as shown in Figure [3-13](#Fig13):'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 打开MetaMask扩展程序，点击网络下拉菜单。然后选择自定义RPC选项。设置以下值，如图[3-13](#Fig13)所示：
- en: Set the network name to **Matic Testnet**.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将网络名称设置为**Matic Testnet**。
- en: Set the RPC URL to [**https://rpc-mumbai.maticvigil.com**](https://rpc-mumbai.maticvigil.com).
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将RPC URL设置为[**https://rpc-mumbai.maticvigil.com**](https://rpc-mumbai.maticvigil.com)。
- en: Set the chain ID to **80001**.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将链ID设置为**80001**。
- en: Set the currency symbol to **MATIC**.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将货币符号设置为**MATIC**。
- en: Set the Block Explorer URL to [**https://explore-mumbai.maticvigil.com**](https://explore-mumbai.maticvigil.com).
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将区块浏览器URL设置为[**https://explore-mumbai.maticvigil.com**](https://explore-mumbai.maticvigil.com)。
- en: '![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig13_HTML.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig13_HTML.jpg)'
- en: A screenshot of the MetaMask network configuration page reads as follows. Network
    Name, Matic Testnet. New R P C U R L has the link entered below. Chain I D with
    8 0 0 0 1; Currency Symbol, optional with MATIC. The last line reads Block Explorer
    U R L, optional, with the provided link.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: MetaMask网络配置页面的截图如下所示。网络名称，Matic Testnet。新的RPC URL下方有输入的链接。Chain ID为80001；货币符号，可选为MATIC。最后一行写着区块浏览器URL，可选，使用提供的链接。
- en: Figure 3-13
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-13
- en: 'MetaMask: network configuration page'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: MetaMask：网络配置页面
- en: Activating the Polygon Add-on on Infura
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Infura上激活Polygon插件
- en: Go to [https://infura.io/upgrade](https://infura.io/upgrade) and click Select
    Addon in the Polygon PoS under Network Add-ons*,* as shown in Figure [3-14](#Fig14)*.*
    The Polygon PoS is currently in beta version on Infura, and you need to activate
    it.![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig14_HTML.jpg)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 转到[https://infura.io/upgrade](https://infura.io/upgrade)，点击 Polygon PoS 下的网络附加组件中的选择插件，如图[3-14](#Fig14)所示。Polygon
    PoS 目前在 Infura 上是 beta 版本，您需要激活它。![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig14_HTML.jpg)
- en: A screenshot of the Network Add-Ons window describes the polygon PoS as a hybrid
    Plasma Proof-of-Stake sidechain to Ethereum's mainnet which utilizes a Tendermint
    consensus validator layer and a Plasma sidechain for block production. Select
    AddOn and More coming soon buttons are shown below. The pricing of $200 per month
    is struck out.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 网络附加组件窗口的屏幕截图将 Polygon PoS 描述为以太坊主网的混合 Plasma 权益证明侧链，该侧链利用 Tendermint 共识验证层和
    Plasma 侧链进行区块生产。下方显示了选择附加组件和更多功能即将推出的按钮。每月`$200`的定价已被划掉。
- en: Figure 3-14
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-14
- en: 'Infura: Polygon PoS activation page'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Infura：Polygon PoS 激活页面
- en: After activating it, you will be redirected to the summary page. The free layer
    is limited to 100,000 requests a day. You will be asked to provide a credit card
    in order to confirm; as the total cost is zero, you will not be charged. If you
    agree, click Get Started Now. You should see a page similar to the one shown in
    Figure [3-15](#Fig15).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig15_HTML.jpg)
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 激活后，您将被重定向到摘要页面。免费层每天限制为`100,000`个请求。您将被要求提供信用卡以进行确认；由于总费用为零，您将不会被收费。如果同意，请单击立即开始。您应该会看到一个类似于图[3-15](#Fig15)所示的页面。![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig15_HTML.jpg)
- en: A screenshot of the Summary window lists the order total as $0 per month, total
    requests as 100,000 per day, core tier of 100,000 requests per day as $0 per month,
    add-ons of Polygon PoS as $0 per month. There is a discount code that can be applied.
    Below there is a checkout section with a credit card already saved.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要窗口的屏幕截图将订单总额列为每月`$0`，总请求数为每天`100,000`，核心层为每天`100,000`个请求的费用为每月`$0`，Polygon
    PoS 的附加组件费用为每月`$0`。还有一个可以应用的折扣代码。下方有一个已保存信用卡的结账部分。
- en: Figure 3-15
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-15
- en: 'Infura: Summary page order after adding the Polygon PoS plugin'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Infura：添加 Polygon PoS 插件后的摘要页面订单
- en: Setting Up Your Infura Project
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置您的 Infura 项目
- en: Make sure that you have a project already set up on Infura. If you haven’t already,
    please follow the steps in Chapter [1](521550_1_En_1_Chapter.xhtml).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您在 Infura 上已经设置了一个项目。如果还没有，请按照第[1](521550_1_En_1_Chapter.xhtml)章中的步骤操作。
- en: Setting Up Your Smart Contract
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置您的智能合约
- en: 'Go to Visual Studio Code and open truffle-config.js*.* Uncomment the four constants:
    hdwalletprovider, infurakey, fs, and mnemonic and *p*aste the project ID as a
    value for infurakey constant.const HDWalletProvider = require(''@truffle/hdwallet-provider'');const
    infuraKey = "fj4jll3k.....";const fs = require(''fs'');const mnemonic = fs.readFileSync(".secret").toString().trim();'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 Visual Studio Code 并打开 truffle-config.js 文件。取消注释四个常量：hdwalletprovider、infurakey、fs
    和 mnemonic，并将项目 ID 粘贴为 infurakey 常量的值。const HDWalletProvider = require('@truffle/hdwallet-provider');const
    infuraKey = "fj4jll3k.....";const fs = require('fs');const mnemonic = fs.readFileSync(".secret").toString().trim();
- en: Configuring the Network (Using the Matic Endpoint)
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置网络（使用 Matic 终端）
- en: 'The first way to connect to a Polygon network is using the Matic network. Now,
    create a matic_testnet configuration under networks in the truffle-config.js file
    and set the following values:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到 Polygon 网络的第一种方法是使用 Matic 网络。现在，在 truffle-config.js 文件的 networks 下创建一个名为
    matic_testnet 的配置，并设置以下值：
- en: Set the wallet URL to [https://rpc-mumbai.maticvigil.com](https://rpc-mumbai.maticvigil.com).
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将钱包 URL 设置为 [https://rpc-mumbai.maticvigil.com](https://rpc-mumbai.maticvigil.com)。
- en: Set network_id to 80001.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 network_id 设置为 80001。
- en: 'matic_testnet: {  provider: () => new HDWalletProvider(mnemonic, `https://rpc-mumbai.maticvigil.com`),  network_id:
    80001,  confirmations: 2,  timeoutBlocks: 200,  skipDryRun: true},'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 'matic_testnet: {  provider: () => new HDWalletProvider(mnemonic, `https://rpc-mumbai.maticvigil.com`),  network_id:
    80001,  confirmations: 2,  timeoutBlocks: 200,  skipDryRun: true},'
- en: Configuring the Network (Using the Infura Endpoint)
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置网络（使用 Infura 终端）
- en: 'Another way to connect to the Polygon network is using the Infura endpoint.
    Create a matic_testnet configuration under networks and set the following values:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种连接到 Polygon 网络的方法是使用 Infura 终端。在 networks 下创建一个名为 matic_testnet 的配置，并设置以下值：
- en: Set the wallet URL to [https://polygon-mumbai.infura.io/v3/${infuraKey}](https://polygon-mumbai.infura.io/v3/%2524%257binfuraKey%257d).
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将钱包 URL 设置为 [https://polygon-mumbai.infura.io/v3/${infuraKey}](https://polygon-mumbai.infura.io/v3/%2524%257binfuraKey%257d)。
- en: Set network_id to 80001.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 network_id 设置为 80001。
- en: 'matic_testnet: {  provider: () => new HDWalletProvider(mnemonic, `https://polygon-mumbai.infura.io/v3/${infuraKey}`),  network_id:
    80001,  confirmations: 2,  timeoutBlocks: 200,  skipDryRun: true,  chainId: 80001,  networkCheckTimeout:
    1000000},'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 'matic_testnet: {  provider: () => new HDWalletProvider(mnemonic, `https://polygon-mumbai.infura.io/v3/${infuraKey}`),  network_id:
    80001,  confirmations: 2,  timeoutBlocks: 200,  skipDryRun: true,  chainId: 80001,  networkCheckTimeout:
    1000000},'
- en: To use the Polygon network, you will need to activate the network add-on.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Polygon 网络，您需要激活网络附加组件。
- en: Configuring the Private Key
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置私钥
- en: Go to the browser and open your MetaMask wallet connected to the Infura network.
    Click “*your account*” and then click “settings.” Finally, click “security & privacy,”
    as you can see in Figure [3-16](#Fig16).![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig16_HTML.jpg)
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 转到浏览器并打开连接到 Infura 网络的 MetaMask 钱包。单击“*your account*”，然后单击“settings”。最后，单击“security
    & privacy”，如图 [3-16](#Fig16) 所示。![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig16_HTML.jpg)
- en: A screenshot of the Security and Privacy window in the Ropsten Test Network.
    A phrase on the screen reads Reveal Seed Phrase, with a long button with the cursor
    on it, which also reads Reveal Seed Phrase.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ropsten 测试网络的安全与隐私窗口的屏幕截图。屏幕上的短语为“显示种子短语”，有一个带有光标的长按钮，上面也写着“显示种子短语”。
- en: Figure 3-16
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-16
- en: 'MetaMask: revealing the seed phrase'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: MetaMask：显示种子短语
- en: You have the option to view your seed phrase, but be aware that this information
    is sensitive, and if someone has access to it, they will be able to restore your
    wallet and make use of your funds.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择查看您的种子短语，但请注意此信息非常敏感，如果有人可以访问它，他们将能够恢复您的钱包并使用您的资金。
- en: Click Reveal Seed Phrase and enter your wallet password to continue. Copy the
    private key.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“显示种子短语”，输入您的钱包密码以继续。复制私钥。
- en: Go back to VS Code (on the ganache-cli terminal view) and create a new file
    named .secret. Paste the private secret recovery phrase on this file.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到 VS Code（在 ganache-cli 终端视图上）并创建一个名为 .secret 的新文件。将私有的恢复短语粘贴到此文件中。
- en: Deploying the Smart Contract
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署智能合约
- en: Run the migrate command to deploy contracts to the matic_testnet network.$ truffle
    migrate --network matic_testnetIf you get this error on the terminal, you will
    need to get the test MATIC from Faucet first.1_initial_migration.js======================   Deploying
    'Migrations'   ----------------------Error:  *** Deployment Failed ***"Migrations"
    -- insufficient funds for gas * price + value.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 migrate 命令将合约部署到 matic_testnet 网络。$ truffle migrate --network matic_testnet
    如果在终端上出现此错误，则需要先从 Faucet 获取测试 MATIC。1_initial_migration.js======================
    部署'Migrations'----------------------错误：*** 部署失败 ***“迁移”--燃料不足以支付 gas * 价格 + 值。
- en: Checking Your Wallet Balance
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查您的钱包余额
- en: Go to your MetaMask wallet again and notice that your balance has been reduced.
    This happens because you need to pay for each contract deployment. It has an equivalent
    cost in gas, and that cost is calculated according to the instructions you use
    inside a smart contract. This means that the more machine processing you need,
    the higher the gas cost for you to execute this contract. You can find a more
    detailed explanation of how this is calculated in the [Ethereum yellow paper](https://ethereum.github.io/yellowpaper/paper.pdf).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 再次转到您的 MetaMask 钱包，注意您的余额已经减少。这是因为您需要为每个合约部署支付费用。它具有 gas 的等价成本，并且该成本是根据您在智能合约中使用的指令计算的。这意味着您需要更多的机器处理，您执行此合约的
    gas 成本就越高。您可以在[Ethereum黄皮书](https://ethereum.github.io/yellowpaper/paper.pdf)中找到更详细的解释。
- en: Verifying the Smart Contract on PolygonScan
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在PolygonScan上验证智能合约
- en: Copy the contract address that was created in the deploy (this address will
    be shown in the console after truffle migrate has finished running) and go to
    [https://mumbai.polygonscan.com](https://mumbai.polygonscan.com). Paste the contract
    address in the search field and click the Find button. The smart contract is there!
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 复制在部署中创建的合约地址（此地址将在 truffle migrate 运行完成后显示在控制台中），然后转到[https://mumbai.polygonscan.com](https://mumbai.polygonscan.com)。将合约地址粘贴到搜索栏中，然后点击“查找”按钮。智能合约就在这里！
- en: The tokens were created and transferred to the wallet that created the contract.
    Now, click the Fixed (FIX) token link, and here you can see the overview of your
    newly created token!
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 代币已经创建并转移到创建合约的钱包中。现在，点击“Fixed (FIX) token”链接，在这里你可以看到你新创建的代币的概述！
- en: Deploy the ERC-20 Token to the Polygon Mainnet (Layer 2)
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 ERC-20 代币部署到 Polygon 主网（Layer 2）
- en: The mainnet network is used for real transactions, while testnets are used for
    testing smart contracts and decentralized applications (DApps). Polygon is used
    as a second layer and gained popularity because of the transaction cost that are
    lower than the mainnet.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 主网用于真实交易，而测试网用于测试智能合约和去中心化应用（DApps）。Polygon作为第二层而受到欢迎，因为其交易成本低于主网。
- en: Adding the Polygon Mainnet to MetaMask Networks
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向MetaMask网络添加Polygon主网
- en: 'Open the MetaMask extension, click the Network drop-down, and then select the
    Custom RPC option. Set the following values as shown in Figure [3-17](#Fig17):'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 打开MetaMask扩展程序，点击网络下拉菜单，然后选择自定义RPC选项。按照图[3-17](#Fig17)所示设置以下值：
- en: Set the network name to **Matic Mainnet**.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将网络名称设置为**Matic Mainnet**。
- en: Set the RPC URL to [**https://rpc-mainnet.maticvigil.com**](https://rpc-mainnet.maticvigil.com).
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将RPC URL设置为[**https://rpc-mainnet.maticvigil.com**](https://rpc-mainnet.maticvigil.com)。
- en: Set the chain ID to **137**.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将链ID设置为**137**。
- en: Set the currency symbol to **MATIC**.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将货币符号设置为**MATIC**。
- en: Set the Block Explorer URL to [**https://explore-mainnet.maticvigil.com**](https://explore-mainnet.maticvigil.com).
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将区块浏览器U R L设置为[**https://explore-mainnet.maticvigil.com**](https://explore-mainnet.maticvigil.com)。
- en: '![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig17_HTML.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/521550_1_En_3_Chapter/521550_1_En_3_Fig17_HTML.jpg)'
- en: A screenshot of the network configuration page has the following fields filled
    in. Network name, Matic Mainnet. New R P C U R L, with the link. Chain I D, 1
    3 7\. Currency symbol, optional. Matic. Block Explorer U R L. optional, with the
    link added.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 网络配置页面的截图如下字段已填写。网络名称，Matic Mainnet。新R P C U R L，带有链接。链ID，137。货币符号，可选。Matic。区块浏览器U
    R L，可选，带有链接添加。
- en: Figure 3-17
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-17
- en: 'MetaMask: network configuration page'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: MetaMask：网络配置页面
- en: Configuring the Network (Using the Infura Endpoint)
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置网络（使用Infura端点）
- en: 'Another way to connect to the Polygon network is to use the Infura endpoint.
    Create a matic_mainnet configuration under networks and set the following values:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到Polygon网络的另一种方法是使用Infura端点。在网络下创建一个matic_mainnet配置，并设置以下值：
- en: Set the wallet URL to [https://polygon-mainnet.infura.io/v3/${infuraKey}](https://polygon-mumbai.infura.io/v3/%2524%257binfuraKey%257d).
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将钱包URL设置为[https://polygon-mainnet.infura.io/v3/${infuraKey}](https://polygon-mumbai.infura.io/v3/%2524%257binfuraKey%257d)。
- en: Set network_id to 137.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将network_id设置为137。
- en: 'matic_mainnet: {  provider: () => new HDWalletProvider(mnemonic, `https://polygon-mainnet.infura.io/v3/${infuraKey}`),  network_id:
    137,  gasPrice: 100000000,  confirmations: 2,  timeoutBlocks: 200,  skipDryRun:
    true,  chainId: 137,  networkCheckTimeout: 1000000},'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 'matic_mainnet: {  provider: () => new HDWalletProvider(mnemonic, `https://polygon-mainnet.infura.io/v3/${infuraKey}`),  network_id:
    137,  gasPrice: 100000000,  confirmations: 2,  timeoutBlocks: 200,  skipDryRun:
    true,  chainId: 137,  networkCheckTimeout: 1000000},'
- en: Deploying the Smart Contract
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署智能合约
- en: Run the migrate command to deploy contracts to the matic_mainnet network.$ truffle
    migrate --network matic_mainnet
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 运行migrate命令以将合约部署到matic_mainnet网络。truffle migrate --network matic_mainnet
- en: Checking Your Wallet Balance
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查您的钱包余额
- en: Go to your MetaMask wallet again and notice that your balance has been reduced.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 再次打开你的MetaMask钱包，注意你的余额已经减少。
- en: Verifying the Smart Contract on PolygonScan
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在PolygonScan上验证智能合约
- en: Copy the contract address that was created in the deployment and go to PolygonScan.^([2](#Fn2))
    Paste the contract address in the search field and click the Find button. The
    smart contract is there!
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 复制在部署中创建的合约地址，然后前往PolygonScan。^([2](#Fn2))将合约地址粘贴到搜索字段中，然后点击查找按钮。智能合约就在那里！
- en: The tokens were created and transferred to the wallet that created the contract.
    Now, click the Fixed (FIX) token link, and here you can see the overview of your
    newly created token.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 代币已被创建并转入了创建合约的钱包。现在，点击固定(FIX)代币链接，在这里你可以看到你新创建代币的概览。
- en: Summary
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned what the ERC-20 token standard is and learned how
    to create and deploy fungible tokens to Ganache to the testnet and mainnet networks
    on the Ethereum and Polygon blockchains.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了ERC-20代币标准是什么，并学会了如何将通证化代币部署到Ganache以及部署到以太坊和Polygon区块链上的测试网和主网。
- en: In the next chapter, you will explore unit tests on smart contracts and learn
    how to write your first unit test.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将探索智能合约上的单元测试，并学习如何编写您的第一个单元测试。
