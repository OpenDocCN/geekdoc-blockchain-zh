- en: © The Author(s), under exclusive license to Springer Nature Switzerland AG 2021R.
    Kumar et al. (eds.)Internet of Things, Artificial Intelligence and Blockchain
    Technology[https://doi.org/10.1007/978-3-030-74150-1_2](https://doi.org/10.1007/978-3-030-74150-1_2)
  prefs: []
  type: TYPE_NORMAL
- en: 2. A Survey on Hyperledger Frameworks, Tools, and Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sweeti Sah^([1](#Aff5)  ), B. Surendiran^([1](#Aff5) [ ](#ContactOfAuthor2)),
    R. Dhanalakshmi^([2](#Aff6)) and N. Arulmurugaselvi^([3](#Aff7))(1)Department
    of Computer Science and Engineering, National Institute of Technology, Puducherry,
    India(2)Department of Computer Science and Engineering, IIIT, Tiruchirappalli,
    India(3)Department of ECE, GPT Coimbatore, Coimbatore, Tamil Nadu, IndiaB. SurendiranEmail:
    [surendiran@nitpy.ac.in](mailto:surendiran@nitpy.ac.in)KeywordsBlockchainHyperledgerDistributedImmutabilityDecentralizationLedgerBlockSmart
    contractCryptocurrencyConsensusSweeti Sah'
  prefs: []
  type: TYPE_NORMAL
- en: is a Research Scholar in Computer Science Department in NIT Puducherry, India.
    Her research interests are blockchain and machine learning.
  prefs: []
  type: TYPE_NORMAL
- en: Dr. B. Surendiran
  prefs: []
  type: TYPE_NORMAL
- en: is working as an Assistant Professor (CSE Department) in NIT Puducherry, India.
    He had published more than 35 papers in various international journals and conferences.
    His research interest includes medical imaging, machine learning, and dimensionality
    reduction.
  prefs: []
  type: TYPE_NORMAL
- en: Dr. R. Dhanalakshmi
  prefs: []
  type: TYPE_NORMAL
- en: is working as an Associate Professor (CSE Department) in IIIT Tiruchirappalli,
    India. Her research interest includes medical imaging, machine learning, and networks.
  prefs: []
  type: TYPE_NORMAL
- en: N. Arulmurugaselvi
  prefs: []
  type: TYPE_NORMAL
- en: is an Assistant Professor in GPT Coimbatore (ECE Department), Tamil Nadu, India.
    Her research interest includes medical imaging, image processing, machine learning,
    and digital circuits.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Blockchain is similar to database in which the peers are distributed in the
    network. The structure of network is peer to peer, but there is no centralized
    entity. It is a digital decentralized ledger  . Blocks consists of a set of transactions
    where each transaction transfers a value, and once it is been added to the block,
    it will be broadcasted to the other peers in the network (Ravi and Manimaran [2020](#CR22)).
    Blockchain addresses a wide range of challenges in various domains like voting,
    healthcare, finance, etc. (Khan et al., [2021](#CR12)). In other words, blockchain
    can be defined as a data structure which consists of blocks of the transaction
    list linked to each other. Each block in a blockchain is recognized by a hash
    value, which is produced by SHA 256\. Each block consists of a hash value of the
    previous block in its header, and this produces a chain-like structure. The first
    block is called as the genesis block  (Antonopoulos, [2017](#CR2)).
  prefs: []
  type: TYPE_NORMAL
- en: The evolution of blockchain is shown in Fig. [2.1](#Fig1) (Mitra [2019](#CR18)).![../images/504166_1_En_2_Chapter/504166_1_En_2_Fig1_HTML.png](../images/504166_1_En_2_Chapter/504166_1_En_2_Fig1_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.1
  prefs: []
  type: TYPE_NORMAL
- en: Evolution of blockchain
  prefs: []
  type: TYPE_NORMAL
- en: The three generations of blockchain mainly blockchain 1.0 started from 2008
    and is used for digital currency  (Zhao et al., [2016](#CR35)). It allows financial
    transactions to be executed with Bitcoin which is used as a cash for the Internet
    (Unibright, [2017](#CR30)). Blockchain 2.0 is used for digital finance  (Zhao
    et al., [2016](#CR35)). Introduction of smart contracts  was made on blockchain
    2.0\. Smart contract reduces the cost of execution, arbitration, verification,
    and fraud prevention (Unibright, [2017](#CR30)). Blockchain 3.0 used for digital
    society  , both emerged parallel around 2015 (Zhao et al., [2016](#CR35)). Blockchain
    3.0 makes use of decentralized applications. A DApp has front-end code, and user
    interfaces can be written in any programming language. The combination of contracts
    and front-end forms DApp (Unibright, [2017](#CR30)).
  prefs: []
  type: TYPE_NORMAL
- en: A blockchain can be divided into two types that are public and private. Examples
    for public blockchain  are Bitcoin and Ethereum. So, in public network, any participant
    can access the ledger by joining it, and mostly POW (proof of work) and POS (proof
    of stake) consensus are used and appropriate for cryptocurrency applications,
    whereas Hyperledger Fabric is a permissioned blockchain in which only authenticated
    participants can join the network (Hyperledger Fabric, 2019).
  prefs: []
  type: TYPE_NORMAL
- en: 2.1.1 Framework of Basic Blockchain
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The framework of blockchain consists of various layers (Xu et al., [2017](#CR34)):'
  prefs: []
  type: TYPE_NORMAL
- en: I.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Application layer: This layer consists of programmable currency, finance, and
    society.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: II.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Contract layer: This layer comprises of script code, smart contract, and mechanism
    of the algorithm.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: III.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Excitation layer: This layer shows the issuing and distribution mechanism.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: IV.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Consensus layer: It consists of a consensus algorithm like POW, POS, DPOS,
    etc.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: V.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Network layer: Network includes a peer-to-peer network between nodes, communication,
    and verification mechanism.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: VI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Data layer: This layer consists of a data block, chain structure, hash function
    Merkle tree, timestamp, and asymmetric encryption.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Table [2.1](#Tab1) shows the details about block structure in blockchain (Antonopoulos,
    [2017](#CR2)).Table 2.1
  prefs: []
  type: TYPE_NORMAL
- en: Block structure in a blockchain
  prefs: []
  type: TYPE_NORMAL
- en: '| The structure of a block |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| Field | Size | Function |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Block size | 4 bytes | This is the size of the block in a blockchain network
    |'
  prefs: []
  type: TYPE_TB
- en: '| Block header | 80 bytes | Consists of several fields |'
  prefs: []
  type: TYPE_TB
- en: '| Transaction counter | 1–9 bytes (variant) | Transaction counter tells how
    many transactions it follows |'
  prefs: []
  type: TYPE_TB
- en: '| Transactions | Variable | Within a block, transactions recorded |'
  prefs: []
  type: TYPE_TB
- en: Table [2.2](#Tab2) shows the details about the block header structure in a blockchain
    (Antonopoulos, [2017](#CR2)).Table 2.2
  prefs: []
  type: TYPE_NORMAL
- en: Block header structure in a blockchain
  prefs: []
  type: TYPE_NORMAL
- en: '| The structure of a block header |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| Field | Size | Function |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Version | 4 bytes | To track software upgrades and protocol upgrades, the
    version number is provided |'
  prefs: []
  type: TYPE_TB
- en: '| Previous block hash | 32 bytes | This is the reference to the previous block
    hash |'
  prefs: []
  type: TYPE_TB
- en: '| Merkle root | 32 bytes | This is the root hash of the block transaction |'
  prefs: []
  type: TYPE_TB
- en: '| Timestamp | 4 bytes | Block creation time, usually in seconds from Unix Epoch
    |'
  prefs: []
  type: TYPE_TB
- en: '| Difficulty target | 4 bytes | For each block the proof of work algorithm
    difficulty target |'
  prefs: []
  type: TYPE_TB
- en: '| Nonce | 4 bytes | Counter for proof of burn algorithm |'
  prefs: []
  type: TYPE_TB
- en: Table [2.3](#Tab3) shows the three kinds of blockchain network (Zheng et al.,
    [2017](#CR36)).Table 2.3
  prefs: []
  type: TYPE_NORMAL
- en: Comparison between three types of blockchain networks
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Public | Consortium | Private |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Consensus process | Permissionless | Permissioned | Permissioned |'
  prefs: []
  type: TYPE_TB
- en: '| Consensus determination | Every miner | Set of selected nodes | Single organization
    |'
  prefs: []
  type: TYPE_TB
- en: '| Immutability/tamper | Nearly impossible | Could be | Could be |'
  prefs: []
  type: TYPE_TB
- en: '| Read permission | Public | Public/private | Private |'
  prefs: []
  type: TYPE_TB
- en: '| Efficiency | Less | More | More |'
  prefs: []
  type: TYPE_TB
- en: '| Centralized | No | Partial | Yes |'
  prefs: []
  type: TYPE_TB
- en: 'This paper is organized as follows: Section I consists of “Introduction” to
    the blockchain. Section II shows the literature survey. Section III shows the
    different types of blockchain network. Section IV shows the creation of block
    using Python. Section V discusses all Hyperledger frameworks and its tool. Section
    VI lists various applications. Section VII shows technical challenges faced by
    blockchain. Finally, Section VIII shows the conclusion of overall work.'
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Literature Review
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tanwar et al. ([2020](#CR29)) discussed the blockchain application on modern
    healthcare system, to provide a distributed environment for exchanging records
    and money-related exchanges. The main advantage was to reform the compatibility
    of healthcare database means by giving entry to a patient medical record, hospital
    assets, prescription database, and device tracking including the whole life cycle
    involved within the infrastructure of blockchain. To obtain improved data accessibility,
    an access control policy algorithm  has been proposed by implementing Hyperledger-based
    electronic healthcare record. To evaluate the blockchain network, performance
    metrics involved are latency, throughput, round-trip time optimized to get better
    results.
  prefs: []
  type: TYPE_NORMAL
- en: Khatoon ([2020](#CR13)) discussed the applications for healthcare systems  using
    blockchain technology. It also proposed the multiple workflows involved in the
    healthcare ecosystem for more data management. Various medical workflows are being
    designed and implemented using Ethereum blockchain  platform consisting of complex
    medical procedures like clinical trial and surgery. This also consists of accessing
    and managing the large volume of medical data. The main aim was to improve healthcare
    processes and patient outcomes. With the help of smart contract, transaction costs
    can be reduced. These smart contracts are embedded with general purpose protocols
    to simplify the methods, reducing administrative burdens and finally eliminating
    intermediaries. The proposed work is more scalable, accessible, secure, and decentralized.
    This solves many current issues in healthcare systems like legacy network incongruity,
    siloing, unstructured data collection problems, data security, reducing administrating
    costs, and unknown privacy concerns.
  prefs: []
  type: TYPE_NORMAL
- en: Wutthikarn and Hui ([2018](#CR33)) show the development of a healthcare service
    application prototype in dental clinic services to create a trust relationship,
    to keep transaction records accessible and controlled by participants that comprises
    a transaction ID number generated by Hyperledger Composer. The sharing of transactions
    and medical equipment saves cost and makes the process interoperable in the clinics.
    EHR is an electronic health record keeping the record of a patient electronically.
    Hyperledger provides a platform to share the information across one organization
    to another with the help of blockchain in the form of decentralized ledger among
    the network. Many companies have launched the blockchain platform like Ethereum,
    NEO, NEM, Corda, QUORUM, and Ripple. Because of its modular architecture, open-source,
    and uses of a smart contract having a permissioned model, it is focused more.
    Future work includes the project on a larger scale.
  prefs: []
  type: TYPE_NORMAL
- en: Nasir et al. ([2018](#CR21)) show the performance evaluation of Hyperledger
    Fabric v6.0 and v1.0 and comparison between these two platforms based on execution
    time, latency, and throughput by giving different types of workload to these platforms
    like 10K transactions and then analyzing the scalability by changing the number
    of nodes. Hence the overall performance metric, scalability, latency, throughput,
    and execution time illustrate that Hyperledger Fabric v1.0 unable to reach the
    good performance level under more workload scenarios. The main feature of the
    comparison was ordering service, types of peers, channel mechanism, endorsement
    policy world state, and API.
  prefs: []
  type: TYPE_NORMAL
- en: Valenta and Sandner ([2017](#CR31)) show the comparison between different distributed
    technologies, that is, Ethereum, Hyperledger Fabric, and Corda, where Corda is
    used for the financial services industry and Hyperledger Fabric and Ethereum are
    driven by concrete use cases. In different aspects, Ethereum and Fabric are highly
    flexible. Ethereum is permissionless, and its transparency comes at the cost of
    privacy and scalability. Through the permissioned mode of operation by Fabric,
    it solves the issues of privacy and scalability by using BFT algorithm and fine-grain
    access control. Corda majorly focuses on financial services transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Staroletov and Galkin ([2019](#CR27)) discussed the service-based platform  for
    online education and implied use of blockchain technology to identify the verification
    to design and make a digital education transaction and subject identity verification
    system with the help of blockchain technology. The proposed methodology stores
    the identity data in an encrypted form and all together authenticated and maintained
    by the rest of the nodes in a network. As a result, it ensures the security and
    credibility of identity data and can prevent the personal identity information
    to get altered and leaked by malicious users. This resolves the issue of identity
    deception and information disclosure. Hence the overall safety of the identity-related
    information on the subject transaction is enhanced.
  prefs: []
  type: TYPE_NORMAL
- en: Mitra ([2019](#CR18)) focused on enterprise applications, Hyperledger consortium,
    and components of Hyperledger project, described the architecture of Hyperledger,
    consensus protocol PoET (proof-of-elapsed time)  , and hardware methods to guarantee
    the loyalty of the protocol, and proposed an industrial solution to test Hyperledger
    Sawtooth applications using the containerization with Docker. As a result, two
    extra methods were combined in the research on Hyperledger Sawtooth that is formal
    verification to guarantee the correctness of PoET consensus algorithm and Docker
    for introducing CI/CD into the procedure of enterprise blockchain applications.
    Containerization of nodes enables to significantly accelerate the development
    and subsequent deployment of the blockchain system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Seftyanto et al. ([2019](#CR25)) consists of the blueprint of blockchain-based
    electronic election system for Indonesia using Hyperledger. There were three cases
    of examination: first is blockchain prerequisite, second is the solution to the
    problem, and the third is secure election requirements. According to the analysis,
    the proposed design can be optimally applied to overcome the issues of Indonesia
    voting system and achieving better election environments to maximize the faith
    of all the participants. Future work includes implementation of blueprint, testing,
    as well as evaluation in the real world to improve reliability and performance.'
  prefs: []
  type: TYPE_NORMAL
- en: 2.3 Case Study and Applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Blockchain has several benefits like persistency, anonymity, persistency, and
    auditability. Its application ranges from financial services, cryptocurrency,
    risk management, social services, and Internet of things (Zheng et al., [2018](#CR37)).
    In particular, this paper presents a block creation using Python programming language.
    The steps have been discussed in Section A. Further discussed various Hyperledger
    frameworks and its tools from Section B to Section P. Section Q shows the application
    of blockchain beyond cryptocurrency.
  prefs: []
  type: TYPE_NORMAL
- en: 2.3.1 Creation of Block Using Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As blockchain is a sequence of blocks  holding the transaction records, a block
    comprises of header and body. Here we have discussed the steps of block creation,
    consisting of importing hash library, creation of class, defining the genesis
    block and other blocks and finally printing the values of the block.
  prefs: []
  type: TYPE_NORMAL
- en: 'STEP 1: Importing hash library: This step includes importing the hash library
    in colab and giving input to convert in hexadecimal form as shown in Fig. [2.2](#Fig2).![../images/504166_1_En_2_Chapter/504166_1_En_2_Fig2_HTML.png](../images/504166_1_En_2_Chapter/504166_1_En_2_Fig2_HTML.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.2
  prefs: []
  type: TYPE_NORMAL
- en: Import  of hash library
  prefs: []
  type: TYPE_NORMAL
- en: 'STEP 2: Creating class  : In this step, we create a class for block defining
    the parameters self, previous_hash, and transaction and joining the transaction
    or linking with the previous block hash as shown in Fig. [2.3](#Fig3).![../images/504166_1_En_2_Chapter/504166_1_En_2_Fig3_HTML.png](../images/504166_1_En_2_Chapter/504166_1_En_2_Fig3_HTML.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.3
  prefs: []
  type: TYPE_NORMAL
- en: Creation  of block class
  prefs: []
  type: TYPE_NORMAL
- en: 'STEP 3: Define the genesis block  as shown in Fig. [2.4](#Fig4).![../images/504166_1_En_2_Chapter/504166_1_En_2_Fig4_HTML.png](../images/504166_1_En_2_Chapter/504166_1_En_2_Fig4_HTML.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.4
  prefs: []
  type: TYPE_NORMAL
- en: Creation  of genesis  block
  prefs: []
  type: TYPE_NORMAL
- en: 'STEP 4: Defining the second and third block  as shown in Fig. [2.5](#Fig5).![../images/504166_1_En_2_Chapter/504166_1_En_2_Fig5_HTML.png](../images/504166_1_En_2_Chapter/504166_1_En_2_Fig5_HTML.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.5
  prefs: []
  type: TYPE_NORMAL
- en: Definition  of other blocks
  prefs: []
  type: TYPE_NORMAL
- en: 'STEP 4: Printing the values  of the block as shown in Fig. [2.6](#Fig6).![../images/504166_1_En_2_Chapter/504166_1_En_2_Fig6_HTML.png](../images/504166_1_En_2_Chapter/504166_1_En_2_Fig6_HTML.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.6
  prefs: []
  type: TYPE_NORMAL
- en: Printing the values of the block
  prefs: []
  type: TYPE_NORMAL
- en: 2.4 Hyperledger Frameworks and Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is a free open-source platform, to implement various blockchain applications
    in a network. Figure [2.7](#Fig7), shows various Hyperledger framework and its
    tools (D. Li et al., [2020](#CR15)).![../images/504166_1_En_2_Chapter/504166_1_En_2_Fig7_HTML.png](../images/504166_1_En_2_Chapter/504166_1_En_2_Fig7_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.7
  prefs: []
  type: TYPE_NORMAL
- en: Various Hyperledger frameworks and its tools
  prefs: []
  type: TYPE_NORMAL
- en: This is an umbrella project providing several frameworks and tools. The main
    aim of Hyperledger protocol is to improve the reliability and performance of the
    ledgers. The emphasis is given on the participant of players from various countries
    to advance the blockchain technology. Linux Foundation created an effort to create
    a good environment for collaboration by giving a modular framework for different
    uses (Li et al., [2020](#CR15)). This paper focuses on different Hyperledger frameworks
    and its tool.
  prefs: []
  type: TYPE_NORMAL
- en: 2.4.1 Hyperledger Burrow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hyperledger Burrow  is designed by Monax and guarantor by Intel (Frankenfield
    [2020](#CR7)). Burrow is a permissioned blockchain in which node carries out the
    smart contract similar to the EVM. Hyperledger Burrow is specifically for multichain
    environment with application-specific contracts but coordinating a different domain
    (Bhuvana et al. [2020](#CR5)). It has the following components as shown in Fig.
    [2.8](#Fig8) (Frankenfield [2020](#CR7)).![../images/504166_1_En_2_Chapter/504166_1_En_2_Fig8_HTML.png](../images/504166_1_En_2_Chapter/504166_1_En_2_Fig8_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.8
  prefs: []
  type: TYPE_NORMAL
- en: Components  of Hyperledger Burrow
  prefs: []
  type: TYPE_NORMAL
- en: The consensus layer  is responsible for the creation of an agreement on the
    order and then guaranteeing the correctness of the set of transactions that create
    a block. Smart contract layer processes the transaction requests, and it authorizes
    valid transactions only. Peer-to-peer message transport is done by communication
    layer. Identity management services are responsible for carrying out the function
    for validating and maintaining the user identities and systems. Creation of trust
    on blockchain, API, or application programming interface helps external applications
    and clients provide interface  with the blockchain (Frankenfield [2020](#CR7)).
  prefs: []
  type: TYPE_NORMAL
- en: 2.4.2 Hyperledger Fabric
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Hyperledger Fabric  is maintained by IBM and Linux Foundation. The transactions
    are controlled using chaincode. The privacy between the participants within a
    network is achieved using isolation mechanism called channel. The main function
    of channel is to ensure the transaction and the data to be available only to the
    node that are members in the channel (Nasir et al., [2018](#CR21)). The Mutual
    Authentication and Authorized Data Access Between Fog and User Based on Blockchain
    were discussed by (Arun et al. [2020](#CR4)). Hyperledger Fabric is a free open-source
    platform used to deploy the permissioned network. Fabric provides a high level
    of protection, performance, and transaction privacy. It consists of the following
    components (Shikha Maheshwari, [2018](#CR16)):'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Asset: An asset is a value  . It comprises of state and ownership and is a
    collection of key-value pair.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ledger: This comprises of the world state and block chain. So, world state
    shows the condition of the ledger at a given point of time and can be called as
    the database of the ledger, whereas blockchain consists of transaction history
    of all state changes.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Peer: They are the members of the organization whose identity is known by the
    blockchain network, and they can maintain multiple ledgers.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Channel: They are the network member subset who wants to transact and communicate
    privately. In other words, this is the logical structure which is formed by the
    collection of peers.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Smart contract: In fabric, the smart contract is written in chaincode. It consists
    of assets and related transactions.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '6.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ordering services: The ordering services consist of multiple orderers that
    provide ordering transaction and consensus.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Hyperledger provides  three kinds of ordering services
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (a)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'SOLO: It involves a single ordering node (Wutthikarn and Hui [2018](#CR33)).'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: (b)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Kafka: This is a stream processing platform which uses an Apache Kafka (free
    open source), provides a unified, more throughput, less latency platform for handling
    data feeds in a real time. The data comprises of read-write sets and endorsing
    transactions. This ordering mechanism gives a crash fault-tolerant solution (Wutthikarn
    and Hui [2018](#CR33)).'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: (c)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'SBFT: SBFT is a combination of crash-fault and Byzantine-fault tolerance. This
    means it can get into an agreement, even if there is a faulty node (Wutthikarn
    and Hui [2018](#CR33)).'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '7.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Certificate authority: Within the network, the certificate authority identifies
    all entities like peers, ordering services, and the participants who are involved
    in submitting the transaction and accessing the ledger.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '8.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Hyperledger Fabric client: This provides the interaction between the client
    and the blockchain network.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Table [2.4](#Tab4) shows the comparison between Ethereum and Hyperledger Fabric  (Valenta
    and Sandner [2017](#CR31)).Table 2.4
  prefs: []
  type: TYPE_NORMAL
- en: Comparison  between Ethereum and Hyperledger Fabric
  prefs: []
  type: TYPE_NORMAL
- en: '| Properties | Ethereum | Hyperledger Fabric |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Platform | Generic | Modular |'
  prefs: []
  type: TYPE_TB
- en: '| Governance | Ethereum developers | Linux Foundation |'
  prefs: []
  type: TYPE_TB
- en: '| Concensus | Ledger level | Transaction level |'
  prefs: []
  type: TYPE_TB
- en: '| Mode of operation | Permissionless | Permissioned |'
  prefs: []
  type: TYPE_TB
- en: '| Currency | EtherTokens via smart contract | Currency and token via chaincode
    |'
  prefs: []
  type: TYPE_TB
- en: '| Smart contract | Solidity | Go, Java |'
  prefs: []
  type: TYPE_TB
- en: 'Advantages: The architecture of Hyperledger Fabric provides various advantages
    like scalability, chaincode trust, confidentiality, and consensus modularity as
    listed in Fig. [2.9](#Fig9) (Architecture Origins, [2019](#CR3)).![../images/504166_1_En_2_Chapter/504166_1_En_2_Fig9_HTML.png](../images/504166_1_En_2_Chapter/504166_1_En_2_Fig9_HTML.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.9
  prefs: []
  type: TYPE_NORMAL
- en: Advantages  of Hyperledger Fabric
  prefs: []
  type: TYPE_NORMAL
- en: The ordering service provided by orderers. The endorsers can be different for
    each chaincode. The architecture distinct trusts presumptions for chaincodes from
    trust presumptions for ordering. The endorser nodes are responsible for particular
    chaincode. The system scale is better if the functions are done and performed
    by the same nodes. If different chaincodes specify disjoint endorsers, then it
    introduces a portioning of chaincodes. This allows parallel execution of chaincode.
    The architecture also eases deployment of chaincodes that consist of confidentiality
    requirements with respect to state updates of transactions and content. Finally,
    the architecture has pluggable consensus and is modular  (Hyperledger Fabric,
    2019).
  prefs: []
  type: TYPE_NORMAL
- en: 2.4.3 Hyperledger Grid
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It provides a platform to build supply chain solution  , which comprises of
    distributed ledger components, smart contract (business logic), and data models
    from already existing open standards and industry. It provides authenticity to
    combine components from Hyperledger Stack into one, productive solution of business
    (Akilo [2019](#CR1)).
  prefs: []
  type: TYPE_NORMAL
- en: 2.4.4 Hyperledger Indy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hyperledger Indy  allows self-sovereign identity to make into the distributed
    ledger to have a better-decentralized identity manager using this Hyperledger
    Development Kit (HDK) (Bhuvana et al. [2020](#CR5)). It allows the businesses
    to store pointers to identity and provide tools, libraries, and reusable components
    to issue digital identities on the blockchain platform (Namasudra et al., [2020](#CR20)).
  prefs: []
  type: TYPE_NORMAL
- en: 2.4.5 Hyperledger Iroha
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This was developed by the joint effort  of NTT DATA, Colu, Hitachi, and Soramitsu.
    Hyperledger Iroha concentrates on the evolution of applications of mobile in combination
    with client libraries for both iOS and Android (D. Li et al., [2020](#CR15)).
    This is a well-organized set of libraries and components. The synchronization
    and storage of data are performed off-device, and default network-wide repudiation
    system is done to verify validated nodes (Bhuvana et al. [2020](#CR5)).
  prefs: []
  type: TYPE_NORMAL
- en: 'It provides various features like  (Sawtooth, [2020](#CR24)):'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Easy deployment and maintenance
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Huge libraries for developers
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Access control (role-based)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modular design
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Many signature transactions
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '6.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: YAC  , high-performance Byzantine fault-tolerant consensus algorithm
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2.4.6 Hyperledger Sawtooth
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hyperledger Sawtooth  was made by the Intel team to develop, deploy, and make
    distributed ledger. Based on the magnitude of network, it has a different consensus
    algorithm and also provides an accomplished support for permissioned and permissionless
    deployment (D. Li et al., [2020](#CR15)). It includes proof of elapsed time consensus
    algorithm which targets more distributed validator populations with minimal resources
    (Bhuvana et al. 2020).
  prefs: []
  type: TYPE_NORMAL
- en: 'Few characteristics  are listed below (George [2019](#CR9)):'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It provides a pluggable consensus algorithm.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The benefit of writing the smart contract in any programming language.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prevent double spending and provide parallel transaction execution for high
    throughput.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No centralization.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It helps in creating and broadcasting events.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '6.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Support of Ethereum contract via Hyperledger Burrow combination.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The architecture  of Hyperledger Sawtooth consists of five components (Mitra
    [2019](#CR18)):'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: P2P network for sending transactions and messages between nodes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Smart contract to handle the transactions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dispersed storage (based on Merkle trees).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Consensus algorithm to decide the procedure of transactions and the resulting
    state.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2.4.7 Hyperledger Caliper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a framework  for blockchain on performance benchmark, hosted by the
    Linux Foundation. It combines with multiple distributed ledger technology. With
    predefined test cases, it measures the performance of the specific blockchain
    system (Hyperledger Caliper, [2017](#CR11)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The characteristics of Hyperledger Caliper  are (Elrom [2019](#CR6)):'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It provides amalgamated blockchain benchmark framework.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Frequently accepting the definition of performance indicators.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Frequently accepted benchmark cases  .
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2.4.8 Hyperledger Cello
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cello  is on-demand blockchain module (Montgomery [2018](#CR19)) and helps in
    the development as a service instance as well as in minimizing the efforts that
    are needed for creating, managing, and aborting blockchains. Cello gives containerized
    service that can be easily set up on existing infrastructure in virtual machines,
    cloud, and any other exclusive container platforms (Bhuvana et al. [2020](#CR5)).
  prefs: []
  type: TYPE_NORMAL
- en: 2.4.9 Hyperledger Composer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is built up  on the top of Fabric. It is a well-developed project and simple
    to use. It is used for making a business model based on proof of concept (D. Li
    et al. [2020](#CR15)). Composer provides a front-end interface to construct and
    establish easy blockchain network for particular use cases. Hyperledger Composer
    enables us to write the smart contract to deploy in the internal blockchain network
    simply (Bhuvana et al. [2020](#CR5)).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are few components of Hyperledger composer as discussed below,  (Montgomery
    [2018](#CR19)):'
  prefs: []
  type: TYPE_NORMAL
- en: '1.. bna file (business network administration): This comprises of four files
    packaged together.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (i)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '. cto file (network model): This file contains transactions, assets, and participations
    and can collaborate with these assets defined.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: (ii)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '. js file (JavaScript file): This file is a chaincode that explains the transaction
    processor function.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: (iii)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '. acl file (access control): It comprises of an access control rule which shows
    the rights of different participants'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: (iv)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '. qry file (query file): This consists of query that runs on the network.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Hyperledger composer playground: This is used to construct, deploy, and test
    code the network, without rolling out the blockchain.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'REST API support  : This is the function used by the front-end client such
    as decentralized application.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2.4.10 Hyperledger Explorer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It permits the user to inquire the blocks  and find through associated data,
    transactions, network information, and the transaction families that are being
    put in the ledger as well as the kind of smart contracts that are being executed
    (Bhuvana et al. [2020](#CR5)).
  prefs: []
  type: TYPE_NORMAL
- en: 2.4.11 Hyperledger Quilt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is developed by the effort of NTT data  and ripple. This is a Java implementation
    mainly made to transfer values across dispersed and non-dispersed ledger (Gaur
    et al., [2018](#CR8)), and the other having implementation in JavaScript is called
    Interledger.js (Montgomery [2018](#CR19)).
  prefs: []
  type: TYPE_NORMAL
- en: 2.4.12 Hyperledger Ursa
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the latest project by TSC which is flexible, modular, and cryptography
    library (Hua et al., [2020](#CR10)). It consists of implementation of various
    signature schemes, zero-knowledge proof, and Z-mix (Montgomery [2018](#CR19)).
  prefs: []
  type: TYPE_NORMAL
- en: 2.4.13 Hyperledger Aries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the latest Hyperledger project  . It is neither a blockchain nor an
    application. To create and sign a blockchain transaction, it includes resolver
    which is a blockchain interface. For secure storage, it provides a cryptographic
    wallet, encrypted messaging system, implementation of the DKMS specification (Decentralized
    Key Management System), and means to construct top-level protocols and use cases
    (API-like) (Kuhrt and Klenik [2020](#CR14)).
  prefs: []
  type: TYPE_NORMAL
- en: 2.5 Applications of Blockchain Beyond Currency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are various applications of blockchain even beyond cryptocurrency as
    listed below:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Intangible assets: Copyrights, patents, reservations, trademarks, domain names
    (Swan [2015](#CR28))'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Social records: Death certificates, marriage certificates, business licenses,
    vehicle registration, land and property titles (Swan [2015](#CR28))'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Recognition: Passports, driver’s licenses, identity cards, and voter registrations
    (Swan [2015](#CR28))'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Personal records: Wills, trusts, escrows, signatures, bets, contracts, loans,
    and IOUs (Swan [2015](#CR28))'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Documentation: Notarized documents, proof of insurance, and proof of ownership
    (Swan [2015](#CR28))'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '6.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Physical asset keys: Home, automobile access, rental cars, and hotel rooms
    (Swan [2015](#CR28))'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '7.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Financial transaction: Pensions, annuities, derivatives, mutual funds, bonds,
    crowd funding, private equity, and stock (Swan [2015](#CR28))'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '8.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Blockchain smart contract: Blockchain music, blockchain healthcare, blockchain
    government (Rosic [2017](#CR23))'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '9.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Blockchain Internet of things (IoT): Smart appliances, supply chain sensors
    (Rosic [2017](#CR23))'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '10.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Digital voting: Ability to vote digitally over a network which is immutable
    and transparent (Williams [2018](#CR32))'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '11.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Bio-medical domain: Biomedical records, sensor records, biomedical databases,
    medicine supply, etc. (Zhao et al., [2016](#CR35))'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '12.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Other applications: Bonded contract, third-party arbitration, escrow transaction,
    and multiparty signature transaction (Swan [2015](#CR28))'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2.6 Technical Challenges of Blockchain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Challenges and problems faced by blockchain technology are listed below:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scalability: The capability to handle a greater number of users at a single
    time; therefore it involves several complex algorithms to operate a single transaction
    (Seftyanto et al., [2019](#CR25)).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Interoperability: This is another issue because of which organization is not
    adopting as it works in silos mostly and does not interact with other peer networks
    as they are not capable of sending and receiving from another blockchain network
    (Seftyanto et al., [2019](#CR25)).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'High energy consumption: The technology operates on the proof of work to validate
    transaction and guarantee trust. This process requires more computation power
    to solve a complex puzzle, verify, and secure overall network (Seftyanto et al.,
    [2019](#CR25)).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Integration with legacy system: Integration of blockchain with legacy system
    is a challenging task. The problem is lack of skill developers and organizations
    not having access to the required pool to blockchain talent to engage in the process
    (Meijer [2020](#CR17)).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2.7 Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hence, discussed the concept of blockchain, its evolution, framework and its
    structure. The types of blockchain and its properties have also been shown. Various
    Hyperledger frameworks and Hyperledger tools are specifying there objective and
    where they can be used specifically. Each Hyperledger framework and its tools
    have different functionalities which differentiate among each other. Finally,
    we discussed the technical challenges of blockchain and the various applications
    of blockchain beyond cryptocurrency. Future work includes blockchain technology
    to be discussed with respect to digital advertising, cyber security, forecasting,
    cloud storage, and many more. As applications it is not only limited to the financial
    industry. Implementing this technology in the government system can make the operations
    even more efficient and secure.
  prefs: []
  type: TYPE_NORMAL
