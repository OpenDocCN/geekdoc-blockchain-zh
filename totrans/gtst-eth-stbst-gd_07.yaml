- en: © The Author(s), under exclusive license to APress Media, LLC, part of Springer
    Nature 2022D. P. BauerGetting Started with Ethereum [https://doi.org/10.1007/978-1-4842-8045-4_7](https://doi.org/10.1007/978-1-4842-8045-4_7)
  prefs: []
  type: TYPE_NORMAL
- en: 7. InterPlanetary File System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Davi Pedro Bauer^([1](#Aff2)  )(1)Campo Bom, Rio Grande do Sul, Brazil
  prefs: []
  type: TYPE_NORMAL
- en: The InterPlanetary File System^([1](#Fn1)) (IPFS) is a protocol and peer-to-peer
    network that allows data to be stored and shared in a distributed file system.
    IPFS employs content addressing to distinguish each file in a global namespace
    that connects all computing devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of this chapter, you will be able to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the IPFS node package and initialize a node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View the IPFS node peers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test and explore the IPFS node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add files to IPFS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View the file content on the console and check the file in the web UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View the file content directly in a browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install the IPFS browser extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the IPFS node type and start a node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import a file into the IPFS node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start a local IPFS node and add files to it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check the files added and verify whether a file has been pinned
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pin the files manually
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up API keys on Pinata
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up Pinata as a remote service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pin your file to the remote IPFS node and also unpin it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log in to Fleek
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clone an existing repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install and initialize the Fleek package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy a site to Fleek
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create Your IPFS Node
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let’s create an IPFS node using the command line and upload your first
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Install the IPFS using the Choco package manager.^([2](#Fn2)) The package go-ipfs
    is an IPFS implementation in Go.$ choco install go-ipfs
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Initiate the IPFS local repository.$ ipfs initStart the IPFS local server. The
    daemon command starts an IPFS local server on 127.0.0.1:5001.$ ipfs daemon
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can test the IPFS node showing the peers that are directly connected to
    your node.$ ipfs swarm peersYou can also view some IPFS file content by using
    the cat command and passing the hash as a parameter (Figure [7-1](#Fig1)).$ ipfs
    cat <hash>![](../images/521550_1_En_7_Chapter/521550_1_En_7_Fig1_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the I P F S command output has the terminal tab open with links
    provided. The text below reads Hello and Welcome to I P F S, where I P F S is
    large and stylized. Text at the bottom reads If you're seeing this, you have successfully
    installed I P F S and are now interfacing with the i p f s merkledag.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-1
  prefs: []
  type: TYPE_NORMAL
- en: IPFS cat command output
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Your IPFS Node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to a browser and access the web UI at http://127.0.0.1:5002/. Your node is
    now connected to IPFS! Now, click Files and notice that are no files here yet
    (Figure [7-2](#Fig2)).
  prefs: []
  type: TYPE_NORMAL
- en: Click “Explore” and then click “Peers”. These are the peers that you are connected
    to. Finally, click “Settings”. This is where you can see your node settings.![](../images/521550_1_En_7_Chapter/521550_1_En_7_Fig2_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'A screenshot of the I P F S Web U I has the following icons: Status, Files,
    where the cursor lies, Explore, Peers, and Settings. In the Files window, a note
    reads, No files here yet! Add files to your local IPFS node by clicking the Import
    button above. A section containing the import button along with other details
    is at the top right.'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-2
  prefs: []
  type: TYPE_NORMAL
- en: IPFS Web UI
  prefs: []
  type: TYPE_NORMAL
- en: Add Files to the IPFS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A computer running IPFS can ask all the peers to which it is connected if they
    have a file with a specific hash, and if one of them does, that peer sends back
    the entire file. That would not be possible without a short, unique identifier,
    such as a cryptographic hash.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the File
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Start the IPFS local server. The daemon command starts an IPFS local server
    on 127.0.0.1:5001.$ ipfs daemonNow, create a new file called hello.txt using the
    echo command. This command outputs the given text to a new file.$ echo "test"
    hello.txtAdd the newly created file to your local IPFS node using the ipfs add
    command.$ ipfs add hello.txt
  prefs: []
  type: TYPE_NORMAL
- en: The file was added to IPFS, resulting in a hash identifier.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the File Content on the Console
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can see the file content of this newly added file simply using the ipfs
    cat command followed by the hash. For that, replace the <*your_hash*> code snipped
    by the result hash identifier generated in the previous step by the command “ipfs
    add hello.txt”.$ ipfs cat <your_hash>
  prefs: []
  type: TYPE_NORMAL
- en: After running this command, the file content will be displayed on the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the File in the Web UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Got to [http://127.0.0.1:5001/webui](http://127.0.0.1:5001/webui) and click
    “Files”. Now, click “Pins” and copy the hash. Search by using this hash, and you
    will see that this hash is there.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the File Content in a Browser
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open a new tab and go to ipfs://<*your_hash*>. Now you can see your file content
    in the browser. Here again, replace the <*your_hash*> code snipped by the result
    hash identifier generated for your file with the command “ipfs cat <your_hash>”.
  prefs: []
  type: TYPE_NORMAL
- en: Set Up the IPFS Browser Extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The IPFS Companion Extension^([3](#Fn3)) allows you to run an IPFS node locally
    inside your preferred browser, providing support for ipfs:// addresses, automatic
    IPFS gateway loading of websites and file paths, simple IPFS file import and sharing,
    and more.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Browser Extension
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to the IPFS Companion Extension^([4](#Fn4)) and click “Add to Brave” or the
    name of your browser. Click “Add extension” and then click the “Extensions” icon.
    Finally, pin the IPFS Companion Extension to the extensions bar.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Node Type
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Click the IPFS Companion icon and then click the gear icon. For IPFS Node Type,
    select External.
  prefs: []
  type: TYPE_NORMAL
- en: Starting an External Node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to Visual Studio Code and open a new terminal. Start a new IPFS local server.$
    ipfs daemon
  prefs: []
  type: TYPE_NORMAL
- en: Importing a File
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Click the IPFS Companion icon and then click “Import”. Click “Pick a file” and
    select a file from your local disc. The file will be stored in your IPFS node.
  prefs: []
  type: TYPE_NORMAL
- en: Pin and Unpin IPFS Files on the Local Node
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data can be pinned to one or more IPFS nodes to ensure that it remains on IPFS
    and is not removed during garbage collection. Pinning allows you to manage storage
    space and data retention. Therefore, you should go ahead pin any content that
    you want to keep on IPFS indefinitely. IPFS’s default behavior is to pin files
    to your local IPFS node.
  prefs: []
  type: TYPE_NORMAL
- en: Starting Your Local Node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Start the IPFS local server. The daemon command starts an IPFS local server
    on 127.0.0.1:5001.$ ipfs daemon
  prefs: []
  type: TYPE_NORMAL
- en: Adding a File to Your Node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, create a new file called hello.txt using the echo command. This command
    outputs the given text to a new file.$ echo "world" hello.txtAdd the newly created
    file to your local IPFS node using the ipfs add command.$ ipfs add hello.txt
  prefs: []
  type: TYPE_NORMAL
- en: The file was added to IPFS, resulting in a hash identifier. When you add a file,
    this is automatically pinned to your local node.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the File Was Added
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To check that your file was added, you can use the ipfs cat command to output
    the file content to the terminal.$ ipfs cat your_file_hash
  prefs: []
  type: TYPE_NORMAL
- en: Verifying Your File Was Pinned
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to http://127.0.0.1:5001/webui, click Files, and then click Pins. Your file
    is there!
  prefs: []
  type: TYPE_NORMAL
- en: Unpinning Your File
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can unpin the file from your local IPFS node simply by using the following
    command:$ ipfs pin rm <your_file_hash>
  prefs: []
  type: TYPE_NORMAL
- en: Pinning Your File Manually
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can pin files manually using the following command. Remember that you need
    to copy the hash of your file to pin or unpin it.$ ipfs pin add <your_file_hash>
  prefs: []
  type: TYPE_NORMAL
- en: You’re done; your file was pinned again!
  prefs: []
  type: TYPE_NORMAL
- en: Pin and Unpin Files on a Remote Node Using Pinata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also pin your files to a remote pinning service. These third-party services
    allow you to pin files to nodes that they operate rather than your own local node.
    You don’t have to be concerned about your own node’s disk space or uptime.
  prefs: []
  type: TYPE_NORMAL
- en: While you can manage IPFS files pinned to a remote pinning service using its
    own GUI, CLI, or other dev tools, you can also work directly with pinning services
    using your local IPFS installation, eliminating the need to learn a pinning service’s
    unique API or other tooling.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up API Keys on Pinata
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Log in on your Pinata account and go to API Keys. Click New Key and then check
    the Admin box. Enter **admin-cli** as your key name and finally click Create Key.
    A new key will be generated for you. Copy the JWT value from this window.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Pinata as a Remote Service on Your Terminal
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add Pinata as a pinning remote service. Paste your JWT inside the <*your_jwt_key*>
    chunk.$ ipfs pin remote service add pinata https://api.pinata.cloud/psa <your_jwt_key>List
    all the existing remote services and check that Pinata is there.$ ipfs pin remote
    service ls
  prefs: []
  type: TYPE_NORMAL
- en: Adding a New File to Your Local IPFS Node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add a new file to your IPFS local node.$ echo "world" > hello.txt$ ipfs add
    hello.txt
  prefs: []
  type: TYPE_NORMAL
- en: Copy the hash identifier generated after adding the file to the local node.
  prefs: []
  type: TYPE_NORMAL
- en: Pinning Your File to the Remote IPFS Node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pin your file using the following command. Paste the file hash inside the <*your_file_hash*>
    chunk.$ ipfs pin remote add --service=pinata -name=hello.txt <your_file_hash>
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the Pinata website and click Pin Manager. Your file will appear on
    this page!
  prefs: []
  type: TYPE_NORMAL
- en: Unpinning Your File from the Remote IPFS Node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unpin your file using the following command. Paste the file hash inside your
    <*your_file_hash*> chunk.$ ipfs pin remote rm --service=pinata -name=hello.txt
    <your_file_hash>
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the Pinata website and click Pin Manager. Your file will no longer
    appear on this page; that means your file was unpinned.
  prefs: []
  type: TYPE_NORMAL
- en: Host Your Site on IPFS Using Fleek
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fleek enables you to create a base-layer architecture based on Open Web protocols.
    Create and host your sites, apps, DApps, and other services on trustless, permissionless,
    and open technologies that are geared toward enabling user-controlled, encrypted,
    private, peer-to-peer experiences.
  prefs: []
  type: TYPE_NORMAL
- en: Logging In on Fleek
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to [https://fleek.co](https://fleek.co) and log in with your account; then
    go to your VS Code editor.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning Your Existing Repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Clone an existing repository with some sample code.$ git clone https://github.com/johnnymatthews/random-planet-facts
  prefs: []
  type: TYPE_NORMAL
- en: Installing Fleek
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Install the Fleek command line.$ npm install -g @fleekhq/fleek-cliLog in to
    your Fleek account (you will be prompted to complete the flow in your browser).$
    fleek login
  prefs: []
  type: TYPE_NORMAL
- en: Initializing Fleek
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Initialize the Fleek site in your current directory.$ fleek site:init
  prefs: []
  type: TYPE_NORMAL
- en: You will be asked to select which team you want to use (use the arrow keys for
    selecting). Also, select which site you want to use. Finally, select the public
    directory for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying Your Site
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Deploy the changes in your publish directory.$ fleek site:deploy
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the Fleek site and click Hosting; then click Verify on IPFS. This
    is your site hosted on IPFS. You can now see your deployed site online.
  prefs: []
  type: TYPE_NORMAL
- en: Go back to Hosting and click your-site.on.fleek.co. This is your site host’s
    friendly address (Figure [7-3](#Fig3)).![](../images/521550_1_En_7_Chapter/521550_1_En_7_Fig3_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot where the frosty hyphen frog hyphen 8 1 5 8 folder under the Hosting
    node is open. Below there are 2 points that read deployed locally and verify on
    I P F S. The next part has the overview tab open where there are 2 points provided.
    1\. Site is deployed. 2\. Set up a custom domain with S S L.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-3
  prefs: []
  type: TYPE_NORMAL
- en: Fleek hosting overview
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned how to install and create an IPFS node, as well
    as manage files with this protocol.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to create a Filecoin project.
  prefs: []
  type: TYPE_NORMAL
