- en: © The Author(s), under exclusive license to APress Media, LLC, part of Springer
    Nature 2022D. P. BauerGetting Started with Ethereum [https://doi.org/10.1007/978-1-4842-8045-4_11](https://doi.org/10.1007/978-1-4842-8045-4_11)
  prefs: []
  type: TYPE_NORMAL
- en: 11. Nethereum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Davi Pedro Bauer^([1](#Aff2)  )(1)Campo Bom, Rio Grande do Sul, Brazil
  prefs: []
  type: TYPE_NORMAL
- en: Nethereum^([1](#Fn1)) is an open source .NET integration library for Ethereum
    that simplifies smart contract maintenance and interaction with public and private
    Ethereum nodes. This framework exposes a Web3 class where it is possible to interact
    with methods of wallets or smart contracts. In the example that you will see in
    this chapter, you will use the GetBalance method of a wallet to find out its balance.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of this chapter, you will be able to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new console project using dotnet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a method to get a wallet balance using Nethereum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display the result in the console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting Your Ether Balance Using Nethereum
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start by creating a new console project and adding the Nethereum Web3
    package to our application. Then you will create the method that will fetch the
    balance of a specific wallet address. Finally, you will print this information
    to the console in wei and in ether.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to the terminal and click New Terminal. Create a new dotnet console project
    as follows. This command creates a new project, configuration file, or solution
    based on the specified template:$ dotnet new console -o sampleGo to the project’s
    root directory.$ cd sample
  prefs: []
  type: TYPE_NORMAL
- en: Installing Web3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Install the Nethereum Web3 package. This command adds a package reference to
    a project file:$ dotnet add package Nethereum.Web3Restore all the project packages.
    This command restores the dependencies and tools of a project:$ dotnet restore
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open the Program.cs file and add a reference for threading and Web3. Now, add
    a new method for getting the account balance and then instantiate a new Web3 object.
  prefs: []
  type: TYPE_NORMAL
- en: Go to your Infura project settings and select the Ropsten network. Copy the
    Ropsten https endpoint (Figure [11-1](#Fig1)).![](../images/521550_1_En_11_Chapter/521550_1_En_11_Fig1_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the Infura Projects keys has the project I D on the top left,
    project secret and the bar on the top right, endpoints with the Ropsten option
    selected and 2 links provided below, with clickable copy icons next to them.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11-1
  prefs: []
  type: TYPE_NORMAL
- en: Infura project keys
  prefs: []
  type: TYPE_NORMAL
- en: 'Use this endpoint as a parameter for the Web3 object constructor. In the Program.cs
    file, get the balance from Web3 using your wallet’s public address as a parameter.
    Write the code to output the balance in wei and then convert the wei balance to
    ether. Finally, write the code to output the balance in ether. Now, change your
    main method to call GetAccountBalance().using System;using System.Threading.Tasks;using
    Nethereum.Web3;namespace NethereumSample{    class Program    {        static
    void Main(string[] args)        {            GetAccountBalance().Wait();            Console.ReadLine();        }        static
    async Task GetAccountBalance()        {            var web3 = new Web3("https://ropsten.infura.io/v3/39180531508b4b659780ef7a36426a86");            var
    balance = await web3.Eth.GetBalance.SendRequestAsync("0x03d1b3162DBFaB4A175038eAa4EA4b39423d5A6F");            Console.WriteLine($"Balance
    in Wei: {balance.Value}");            var etherAmount = Web3.Convert.FromWei(balance.Value);            Console.WriteLine($"Balance
    in Ether: {etherAmount}");        }    }}'
  prefs: []
  type: TYPE_NORMAL
- en: Getting the Balance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Build the project. This command builds a project and all of its dependencies:$
    dotnet buildRun the project. This command runs the source code without any explicit
    compile or launch commands:$ dotnet runCheck the terminal output and make sure
    that you get the result shown in Figure [11-2](#Fig2).![](../images/521550_1_En_11_Chapter/521550_1_En_11_Fig2_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: 'A screenshot of the V S code balances in Wei and ether. The Program dot c s
    file is selected and the terminal tab is open. The details of the same, the balance
    in Wei and the balance in Ether are displayed in the window below the command:
    dollar sign dot net run. There is no space between dot and net in the command.'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11-2
  prefs: []
  type: TYPE_NORMAL
- en: VS code balances in wei and ether
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned how to create a console project that gets a wallet
    balance using Nethereum.
  prefs: []
  type: TYPE_NORMAL
