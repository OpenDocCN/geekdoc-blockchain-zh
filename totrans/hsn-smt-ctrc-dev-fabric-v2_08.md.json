["```\n\"dependencies\": {\n    \"fabric-ca-client\": \"^2.1.0\",\n    \"fabric-network\": \"^2.1.0\"\n},\n```", "```\n\"dependencies\": {\n    \"fabric-contract-api\": \"^2.0.0\",\n    \"fabric-shim\": \"^2.0.0\"\n},\n```", "```\nconst { Contract } = require('fabric-contract-api');\n```", "```\nCC_SRC_LANGUAGE=${1:-\"go\"}\n```", "```\n$ ./startFabric.sh javascript\n```", "```\n# clean out any old identities in the wallets\nrm -rf javascript/wallet/*\nrm -rf java/wallet/*\nrm -rf typescript/wallet/*\nrm -rf go/wallet/*\n```", "```\n./network.sh down\n./network.sh up createChannel -ca -s couchdb\n./network.sh deployCC -ccn fabcar -ccv 1 -cci initLedger -ccl ${CC_SRC_LANGUAGE} -ccp ${CC_SRC_PATH}\n```", "```\n$ docker -v\nDocker version 19.03.13, build 4484c46d9d\n```", "```\n$ ./startFabric.sh javascript\n```", "```\nStart network command\nCreating channel 'mychannel'.\n\nIf network is not up, starting nodes with CLI timeout of '5' tries and CLI delay of '3' seconds and\nusing database 'couchdb with crypto from 'Certificate Authorities'\n\nBringing up network\nLOCAL_VERSION=2.3.0\nDOCKER_IMAGE_VERSION=2.3.0\nCA_LOCAL_VERSION=1.4.9\nCA_DOCKER_IMAGE_VERSION=1.4.9\n```", "```\nGenerate certificates using Fabric CA's\n\nCreating network \"net_test\" with the default driver\n\nCreating ca_org2    ... done\nCreating ca_org1    ... done\nCreating ca_orderer ... done\n```", "```\nEnroll the CA admin\n+ fabric-ca-client enroll -u https://admin:adminpw@localhost:7054 --caname ca-org1 --tls.certfiles\n/markmorris/Desktop/fabric-samples/test-network/organizations/fabric-ca/org1/tls-cert.pem\n2021/02/14 17:26:55 [INFO] Created a default configuration file at /markmorris/Desktop/fabric-\nsamples/test-network/organizations/peerOrganizations/org1.example.com/fabric-ca-client-config.yaml\n2021/02/14 17:26:55 [INFO] TLS Enabled\n2021/02/14 17:26:55 [INFO] generating key: &{A:ecdsa S:256}\n2021/02/14 17:26:55 [INFO] encoded CSR\n2021/02/14 17:26:55 [INFO] Stored client certificate at /markmorris/Desktop/fabric-samples/test-\nnetwork/organizations/peerOrganizations/org1.example.com/msp/signcerts/cert.pem\n2021/02/14 17:26:55 [INFO] Stored root CA certificate at /markmorris/Desktop/fabric-samples/test-\nnetwork/organizations/peerOrganizations/org1.example.com/msp/cacerts/localhost-7054-ca-org1.pem\n2021/02/14 17:26:55 [INFO] Stored Issuer public key at /markmorris/Desktop/fabric-samples/test-\nnetwork/organizations/peerOrganizations/org1.example.com/msp/IssuerPublicKey\n2021/02/14 17:26:55 [INFO] Stored Issuer revocation public key at /markmorris/Desktop/fabric-\nsamples/test-network/organizations/peerOrganizations/org1.example.com/msp/IssuerRevocationPublicKey\n```", "```\n+ peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls\n--cafile /markmorris/Desktop/fabric-samples/test-\nnetwork/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.\nexample.com-cert.pem -C mychannel -n fabcar --peerAddresses localhost:7051 --tlsRootCertFiles\n/markmorris/Desktop/fabric-samples/test-\nnetwork/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --\npeerAddresses localhost:9051 --tlsRootCertFiles /markmorris/Desktop/fabric-samples/test-\nnetwork/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt --isInit\n-c '{\"function\":\"initLedger\",\"Args\":[]}'\n```", "```\n+ peer chaincode invoke...\n```", "```\nQuery chaincode definition successful on peer0.org2 on channel 'mychannel'\n```", "```\ndeploying chaincode on channel 'mychannel'\n```", "```\npeer chaincode [*option*] [*flags*]\npeer channel   [*option*] [*flags*]\npeer node      [*option*] [*flags*]\npeer version   [*option*] [*flags*]\n```", "```\nCreating peer0.org1.example.com ... done\nCreating peer0.org2.example.com ... done\n```", "```\ncommand: peer node start\n```", "```\ninstall\ninstantiate\ninvoke\nlist\npackage\nquery\nsignpackage\nupgrade\n```", "```\nexport PATH=${PWD}/../bin:$PATH \nexport FABRIC_CFG_PATH=$PWD/../config/\nexport CORE_PEER_TLS_ENABLED=true\nexport CORE_PEER_LOCALMSPID=\"Org1MSP\"\nexport\nCORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.\nexample.com/tls/ca.crt\nexport\nCORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.\ncom/msp\nexport CORE_PEER_ADDRESS=localhost:7051\n```", "```\npeer version\n```", "```\npeer:\n Version: 2.3.0\n Commit SHA: ec81f3e74\n Go version: go1.14.12\n OS/Arch: darwin/amd64\n Chaincode:\n  Base Docker Label: org.hyperledger.fabric\n  Docker Namespace: hyperledger\n```", "```\npeer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --\ncafile /Volumes/WDCWD10JPLX/markmorris/Desktop/v2.3.0/fabric-samples/test-\nnetwork/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.\nexample.com-cert.pem -C mychannel -n fabcar --peerAddresses localhost:7051 --tlsRootCertFiles\n/Volumes/WDCWD10JPLX/markmorris/Desktop/v2.3.0/fabric-samples/test-\nnetwork/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \n--peerAddresses localhost:9051 --tlsRootCertFiles /Volumes/WDCWD10JPLX/markmorris/Desktop/v2.3.0/fabric-\nsamples/test-\nnetwork/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \n--isInit -c '{\"function\":\"initLedger\",\"Args\":[]}'\n```", "```\n--isInit -c '{\"function\":\"initLedger\",\"Args\":[]}'\n```", "```\n-c '{\"Args\":[\"queryAllCars\"]}'\n```", "```\npeer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls--cafile\n/Volumes/WDCWD10JPLX/markmorris/Desktop/v2.3.0/fabric-samples/test-\nnetwork/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.\nexample.com-cert.pem -C mychannel -n fabcar --peerAddresses localhost:7051 --tlsRootCertFiles\n/Volumes/WDCWD10JPLX/markmorris/Desktop/v2.3.0/fabric-samples/test-\nnetwork/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --\npeerAddresses localhost:9051 --tlsRootCertFiles /Volumes/WDCWD10JPLX/markmorris/Desktop/v2.3.0/fabric-\nsamples/test-\nnetwork/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c\n'{\"Args\":[\"queryAllCars\"]}'\n```", "```\n [chaincodeCmd] chaincodeInvokeOrQuery -> INFO 001 Chaincode invoke successful. result: status:200\npayload:\"[{\\\"Key\\\":\\\"CAR0\\\",\\\"Record\\\":{\\\"color\\\":\\\"blue\\\",\\\"docType\\\":\\\"car\\\",\\\"make\\\":\\\"Toyota\\\", \\\"model\\\":\n\\\"Prius\\\",\\\"owner\\\":\\\"Tomoko\\\"}},{\\\"Key\\\":\\\"CAR1\\\",\\\"Record\\\":{\\\"color\\\":\\\"red\\\", \\\"docType\\\":\\\"car\\\",\n\\\"make\\\":\\\"Ford\\\",\\\"model\\\":\\\"Mustang\\\",\\\"owner\\\":\\\"Brad\\\"}},{\\\"Key\\\":\\\"CAR2\\\",\\”Record\\\":{\\”color\\\":\\\"green\\\",\n\\\"docType\\\":\\\"car\\\",\\\"make\\\":\\\"Hyundai\\\",\\\"model\\\":\\\"Tucson\\\",\\\"owner\\\":\\\"Jin\nSoo\\\"}},{\\\"Key\\\":\\\"CAR3\\\",\\\"Record\\\":{\\\"color\\\":\\\"yellow\\\",\\\"docType\\\":\\\"car\\\",\\\"make\\\":\\\"Volkswagen\\\",\n\\\"model\\\":\\\"Passat\\\",\\\"owner\\\":\\\"Max\\\"}},{\\\"Key\\\":\\\"CAR4\\\",\\\"Record\\\":{\\\"color\\\":\\\"black\\\",\\\"docType\\\":\n\\\"car\\\",\\\"make\\\":\\\"Tesla\\\",\\\"model\\\":\\\"S\\\",\\\"owner\\\":\\\"Adriana\\\"}},{\\\"Key\\\":\\\"CAR5\\\",\\\"Record\\\":{\\\"color\"\\”:\\\n\"purple\\\",\\\"docType\\\":\\\"car\\\",\\\"make\\\":\\\"Peugeot\\\",\\”model\\”:\\”205\\”,\\”owner\\\":\\”Michel\"\\\"}},{\\\"Key\\\":\\\n\"CAR6\\\",\\\"Record\\\":{\\\"color\\\":\\\"white\\\",\\\"docType\\\":\\\"car\\\",\\\"make\\\":\\\"Chery\\\",\\\"model\\\":\\\"S22L\\\",\\\"owner\\\"\n:\\\"Aarav\\\"}},{\\\"Key\\\":\\\"CAR7\\\",\\”Record\\”:{\\”color\\\":\\\"violet\\\",\\\"docType\\\":\\\"car\\\",\\\"make\\”:\\\"Fiat\\\",\n\\\"model\\\":\\\"Punto\\\",\\\"owner\\\":\\\"Pari\\\"}},{\\\"Key\\\":\\\"CAR8\\\",\\\"Record\\\":{\\\"color\\\":\\\"indigo\\\",\\\"docType\\\":\\\"car\\\",\n\\\"make\\\":\"Tata\\\",\\\"model\\\":\\\"Nano\\\",\\\"owner\\\":\\\"Valeria\\\"}},{\\\"Key\\\":\\\"CAR9\\\",\\\"Record\\\":{\\\"color\\\"\n:\\\"brown\\\",\\\"docType\\\":\\\"car\\\",\\\"make\\”\":\\\"”Holden\\\",\\\"model\\\":\\\"Barina\\\",\\\"owner\\\":\\\"Shotaro\\\"}}]\"\n```", "```\nctx.stub.getStateByRange(startKey, endKey)\n```", "```\nexport class Context {\n    stub: ChaincodeStub;\n    clientIdentity: ClientIdentity;\n```", "```\nconst { Contract } = require('fabric-contract-api');\n```", "```\n-c '{\"Args\":[\"changeCarOwner\", \"CAR0\", \"Mark\"]}'\n```", "```\npeer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile\n/Volumes/WDCWD10JPLX/markmorris/Desktop/v2.3.0/fabric-samples/test-\nnetwork/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.\nexample.com-cert.pem -C mychannel -n fabcar --peerAddresses localhost:7051 --tlsRootCertFiles\n/Volumes/WDCWD10JPLX/markmorris/Desktop/v2.3.0/fabric-samples/test-\nnetwork/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --\npeerAddresses localhost:9051 --tlsRootCertFiles /Volumes/WDCWD10JPLX/markmorris/Desktop/v2.3.0/fabric-\nsamples/test-\nnetwork/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c\n'{\"Args\":[\"changeCarOwner\", \"CAR0\", \"Mark\"]}'\n```", "```\n[chaincodeCmd] chaincodeInvokeOrQuery -> INFO 001 Chaincode invoke successful. result: status:200\n```", "```\n-c '{\"Args\":[\"queryCar\", \"CAR0\"]}'\n```", "```\n[chaincodeCmd] chaincodeInvokeOrQuery -> INFO 001 Chaincode invoke successful. result: status:200\npayload:\"{\\\"color\\\":\\\"blue\\\",\\\"docType\\\":\\\"car\\\",\\\"make\\\":\\\"Toyota\\\",\\\"model\\\":\\\"Prius\\\",\\\"owner\\\":\\\"Mark\n\\\"}\"\n```", "```\nnpm install\n```", "```\n\"dependencies\": {\n    \"fabric-ca-client\": \"^2.1.0\",\n    \"fabric-network\": \"^2.1.0\"\n},\n```", "```\nfabric-ca-client\nfabric-common\nfabric-network\nfabric-protos\n```", "```\nnode ./enrollAdmin.js\n```", "```\nSuccessfully enrolled admin user \"admin\" and imported it into the wallet\n```", "```\nnode ./registerUser.js\n```", "```\nSuccessfully registered and enrolled admin user \"appUser\" and imported it into the wallet\n```", "```\nconst FabricCAServices = require('fabric-ca-client');\nconst { Wallets } = require('fabric-network');\n```", "```\n// load the network configuration\nconst ccpPath = path.resolve(__dirname, '..', '..', 'test-network', 'organizations', 'peerOrganizations',\n'org1.example.com', 'connection-org1.json');\nconst ccp = JSON.parse(fs.readFileSync(ccpPath, 'utf8'));\n\n// Create a new CA client for interacting with the CA.\nconst caInfo = ccp.certificateAuthorities['ca.org1.example.com'];\nconst caTLSCACerts = caInfo.tlsCACerts.pem;\nconst ca = new FabricCAServices(caInfo.url, { trustedRoots: caTLSCACerts, verify: false },\ncaInfo.caName);\n```", "```\n// Create a new filesystem-based wallet for managing identities.\nconst walletPath = path.join(process.cwd(), 'wallet');\nconst wallet = await Wallets.newFileSystemWallet(walletPath);\nconsole.log(`Wallet path: ${walletPath}`);\n```", "```\n// Check to see if we've already enrolled the admin user.\nconst identity = await wallet.get('admin');\nif (identity) {\n    console.log('An identity for the admin user \"admin\" already exists in the wallet');\n    return;\n}\n```", "```\n// Enroll the admin user, and import the new identity into the wallet.\nconst enrollment = await ca.enroll({ enrollmentID: 'admin', enrollmentSecret: 'adminpw' });\nconst x509Identity = {\n    credentials: {\n        certificate: enrollment.certificate,\n        privateKey: enrollment.key.toBytes(),\n    },\n    mspId: 'Org1MSP',\n    type: 'X.509',\n};\nawait wallet.put('admin', x509Identity);\nconsole.log('Successfully enrolled admin user \"admin\" and imported it into the wallet');\n```", "```\nconst userIdentity = await wallet.get('appUser');\n```", "```\nconst provider = wallet.getProviderRegistry().getProvider(adminIdentity.type);\nconst adminUser = await provider.getUserContext(adminIdentity, 'admin');\n```", "```\nconst secret = await ca.register({\n    affiliation: 'org1.department1',\n    enrollmentID: 'appUser',\n    role: 'client'\n}, adminUser);\n```", "```\nconst { Gateway, Wallets } = require('fabric-network');\n```", "```\n// load the network configuration\nconst ccpPath = path.resolve(__dirname, '..', '..', 'test-network', 'organizations', 'peerOrganizations',\n'org1.example.com', 'connection-org1.json');\nlet ccp = JSON.parse(fs.readFileSync(ccpPath, 'utf8'));\n\n// Create a new filesystem-based wallet for managing identities.\nconst walletPath = path.join(process.cwd(), 'wallet');\nconst wallet = await Wallets.newFileSystemWallet(walletPath);\nconsole.log(`Wallet path: ${walletPath}`);\n\n// Check to see if we've already enrolled the user.\nconst identity = await wallet.get('appUser');\nif (!identity) {\n    console.log('An identity for the user \"appUser\" does not exist in the wallet');\n    console.log('Run the registerUser.js application before retrying');\n    return;\n}\n```", "```\n// Create a new gateway for connecting to our peer node.\nconst gateway = new Gateway();\nawait gateway.connect(ccp, { wallet, identity: 'appUser', discovery: { enabled: true, asLocalhost: true }\n});\n```", "```\n// Get the network (channel) our contract is deployed to.\nconst network = await gateway.getNetwork('mychannel');\n```", "```\n// Get the contract from the network.\nconst contract = network.getContract('fabcar');\n```", "```\n// Submit the specified transaction.\n// createCar transaction - requires 5 argument, ex: ('createCar', 'CAR12', 'Honda', 'Accord', 'Black', 'Tom')\n// changeCarOwner transaction - requires 2 args , ex: ('changeCarOwner', 'CAR12', 'Dave')\nawait contract.submitTransaction('createCar', 'CAR12', 'Honda', 'Accord', 'Black', 'Tom');\nconsole.log('Transaction has been submitted');\n```", "```\n// Disconnect from the gateway.\nawait gateway.disconnect();\n```", "```\nnode ./invoke.js\n```", "```\nTransaction has been submitted\n```", "```\nnode ./query.js\n```", "```\nTransaction has been evaluated, result is:\n[{\"Key\":\"CAR0\",\"Record\":{\"color\":\"blue\",\"docType\":\"car\",\"make\":\"Toyota\",\"model\":\"Prius\",\"owner\":\"Tomoko\"}\n}, {\"Key\":\"CAR1\",\"Record\":{\"color\":\"red\",\"docType\":\"car\",\"make\":\"Ford\",\"model\":\"Mustang\",\"owner\":\"Brad\"}},\n{\"Key\":\"CAR12\",\"Record\":{\"color\":\"Black\",\"docType\":\"car\",\"make\":\"Honda\",\"model\":\"Accord\", \"owner\":\"Tom\"}},\n{\"Key\":\"CAR2\",\"Record\":{\"color\":\"green\",\"docType\":\"car\",\"make\":\"Hyundai\",\"model\":\"Tucson\", \"owner\":\"Jin\nSoo\"}},{\"Key\":\"CAR3\",\"Record\":{\"color\":\"yellow\",\"docType\":\"car\",\"make\":\"Volkswagen\",\"model\":\"Passat\", \"own\ner\":\"Max\"}},{\"Key\":\"CAR4\",\"Record\":{\"color\":\"black\",\"docType\":\"car\",\"make\":\"Tesla\",\"model\":\"S\", \"owner\":\n\"Adriana\"}},{\"Key\":\"CAR5\",\"Record\":{\"color\":\"purple\",\"docType\":\"car\",\"make\":\"Peugeot\",\"model\": \"205\",\"owner\":\n\"Michel\"}},{\"Key\":\"CAR6\",\"Record\":{\"color\":\"white\",\"docType\":\"car\",\"make\":\"Chery\",\"model\":\"S22L\", \"owner\":\n\"Aarav\"}},{\"Key\":\"CAR7\",\"Record\":{\"color\":\"violet\",\"docType\":\"car\",\"make\":\"Fiat\", \"model\":\"Punto\",\"owner\":\n\"Pari\"}},{\"Key\":\"CAR8\",\"Record\":{\"color\":\"indigo”,\"docType\":\"car\",\"make\":\"Tata\", \"model\":\"Nano\",\"owner\":\n\"Valeria\"}},{\"Key\":\"CAR9\",\"Record\":{\"color\":\"brown\",\"docType\":\"car\",\"make\":\"Holden\", \"model\":\"Barina\",\n\"owner\":\"Shotaro\"}}]\n```", "```\nconst result = await contract.evaluateTransaction('queryAllCars');\n```"]