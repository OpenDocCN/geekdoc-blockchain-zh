- en: © Santiago Palladino 2019S. PalladinoEthereum for Web Developers[https://doi.org/10.1007/978-1-4842-5278-9_1](https://doi.org/10.1007/978-1-4842-5278-9_1)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © Santiago Palladino 2019 S. Palladino《面向Web开发人员的以太坊》[https://doi.org/10.1007/978-1-4842-5278-9_1](https://doi.org/10.1007/978-1-4842-5278-9_1)
- en: 1. Blockchains
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1. 区块链
- en: Santiago Palladino^([1](#Aff2) )(1)Ciudad Autónoma de Buenos Aires, Argentina
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Santiago Palladino^([1](#Aff2) )(1) 阿根廷布宜诺斯艾利斯自治城市
- en: We will begin our journey with a brief introduction to Ethereum and blockchain
    technology in general, starting with Bitcoin. We will explain what makes a blockchain
    and when it makes sense to use one. We will also cover some cryptography basics
    before we start and later provide an overview of decentralized application development
    before we implement our first one in Chapter [2](476252_1_En_2_Chapter.xhtml).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从简要介绍以太坊和区块链技术开始我们的旅程，从比特币开始。我们将解释什么是区块链以及何时使用区块链是合理的。我们还将在开始之前涵盖一些密码学基础，并稍后在实现第一个应用程序之前提供去中心化应用程序开发的概述，该应用程序将在第[2](476252_1_En_2_Chapter.xhtml)章中实现。
- en: A Refresher on Cryptography
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密码学基础知识回顾
- en: 'Before we go into blockchains, we will go over two cryptography concepts that
    are key building blocks in most blockchains: hashes and public key cryptography.
    Feel free to skip this section if you are already familiar with them.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解区块链之前，我们将介绍两个密码学概念，它们是大多数区块链中的关键构建模块：哈希和公钥密码学。如果您已经熟悉这些内容，可以跳过本节。
- en: Hash Functions
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 哈希函数
- en: A *cryptographic hash function* is a pure deterministic function that maps inputs
    from a large space to outputs in a fixed set. These outputs are usually called
    the *digest* of the input. For instance, the input could be the entire text of
    the prologue of this book, and its digest could be the hexadecimal 01cc88cda97d50346743ae58bb3ebe75
    from the space of 128-bit values.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*密码哈希函数* 是一个纯确定性函数，将大空间的输入映射到固定集合的输出。这些输出通常称为输入的 *摘要*。例如，输入可以是本书序言的整个文本，其摘要可以是128位值空间中的十六进制值01cc88cda97d50346743ae58bb3ebe75。'
- en: 'Without going into formalisms, a secure hash function should be *collision
    resistant*. This means that it should be practically impossible to find out two
    different inputs that yield the same digest. Hash functions should also be *non-invertible*:
    given only the digest, it should be practically impossible to find out an input
    that yields that digest. Also, a small change to the input should yield a large
    change to the output digest – two similar inputs should have very different digests.
    Hash functions should also be relatively fast to calculate from their input, so
    verifying that an input matches with its digest is an easy task.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 不涉及形式主义，一个安全的哈希函数应该是 *抗碰撞* 的。这意味着几乎不可能找到两个产生相同摘要的不同输入。哈希函数还应该是 *不可逆的* ：仅给出摘要，几乎不可能找到生成该摘要的输入。此外，对输入进行微小更改应产生对输出摘要的大更改
    —— 两个相似的输入应该具有非常不同的摘要。哈希函数还应相对容易地从其输入计算，因此验证输入是否与其摘要匹配是一项简单的任务。
- en: Hash functions are at the core of maintaining a blockchain’s integrity and also
    form the basis for the proof-of-work consensus mechanism. We will see both uses
    in a few pages.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希函数是维护区块链完整性的核心，并且也构成工作量证明共识机制的基础。我们将在几页中看到这两种用法。
- en: Public Key Cryptography
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 公钥加密
- en: '*Public key* or *asymmetric cryptography* is an encryption system that relies
    on pairs of keys: a private key, known only to its owner, and a corresponding
    public key, shared with the world. A string encrypted with the public key can
    only be decrypted with the private key. Anyone who wants to send a secret message
    to a user can use the recipient’s public key to encrypt it, knowing that only
    the holder of the private key can decrypt it.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*公钥*或*非对称加密*是一种依赖于密钥对的加密系统：私钥仅为其所有者所知，而相应的公钥则与全世界共享。使用公钥加密的字符串只能用私钥解密。任何希望向用户发送秘密消息的人都可以使用接收者的公钥加密它，知道只有私钥的持有者才能解密它。'
- en: Key pairs can also be used inversely as *digital signatures*. A user can send
    a message, along with its digest encrypted with his private key. Any recipient
    can then use the public key to verify that the digest was signed by the owner
    of the private key.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥对也可以反向用作*数字签名*。用户可以发送一条消息，以及用其私钥加密的摘要。然后，任何接收者都可以使用公钥验证摘要是由私钥的所有者签名的。
- en: These signatures are the authentication mechanism in public blockchains. Every
    public key has an associated private key that should be kept secure by its owner
    and grants access to the owned assets in the blockchain.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些签名是公共区块链中的身份验证机制。每个公钥都有一个相应的私钥，应由其所有者保管安全，并授予对区块链中拥有的资产的访问权限。
- en: Public key cryptography can be implemented via many different algorithms, one
    of the most popular ones being Rivest–Shamir–Adleman (better known as RSA). Ethereum,
    however, relies on an Elliptic Curve Digital Signature Algorithm, or ECDSA. This
    algorithm also allows to *recover* the public key, given a message and its signature.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 公钥加密可以通过许多不同的算法实现，其中最流行的之一是Rivest–Shamir–Adleman（更为人所知的是RSA）。然而，以太坊依赖椭圆曲线数字签名算法，即ECDSA。该算法还允许*恢复*给定消息及其签名的公钥。
- en: Armed with these two cryptography concepts, we can now finally get started and
    take on how a blockchain is built.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 借助这两个密码学概念，我们现在终于可以开始并着手了解区块链是如何构建的。
- en: Blockchain 101
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区块链 101
- en: 'A blockchain is a decentralized indelible public digital ledger. We can think
    of a blockchain as a distributed database, where, once a record has been confirmed,
    it can never be removed or altered and where no single authority has control over
    this database, which is replicated across all nodes in a peer-to-peer network.
    What is actually stored in this database may vary: it could be a currency, a registry
    of assets, or even executable code.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链是一个去中心化的不可篡改的公共数字分类帐。我们可以将区块链视为一个分布式数据库，一旦记录被确认，就无法删除或更改，并且没有单一的权威控制着这个数据库，它被复制到对等网络中的所有节点上。实际存储在该数据库中的内容可能各不相同：它可以是一种货币，一份资产登记，甚至是可执行代码。
- en: Transactions and Blocks
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 交易与区块
- en: In a blockchain, every state change is part of a *transaction*. Think of a transaction
    as an atomic write operation from a user in the global database that may alter
    one or more records. Any user in the network can submit a transaction to be executed.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在区块链中，每个状态更改都是一个*交易*的一部分。将交易视为用户在全局数据库中的原子写入操作，可以更改一个或多个记录。网络中的任何用户都可以提交要执行的交易。
- en: 'How transactions are processed is part of the blockchain *state transition
    rules*. The blockchain transitions from one state to another by processing each
    transaction it receives. For instance, a blockchain that manages a currency may
    process transactions as transfers of its currency between two accounts: it reduces
    the sender’s balance and increases the recipient’s by the same amount. Other blockchains
    even allow transactions to create and execute full programs on the chain.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 交易是如何处理的属于区块链的*状态转换规则*的一部分。区块链通过处理收到的每个交易来从一个状态转换到另一个状态。例如，管理货币的区块链可能将交易处理为在两个账户之间转移其货币：它减少了发件人的余额，并以同等金额增加了收件人的余额。其他区块链甚至允许交易在链上创建和执行完整的程序。
- en: When a user sends a transaction, they must cryptographically *sign* it with
    their private key. This way, the blockchain can enforce that only a specific user
    can move a certain asset or alter a certain record. This introduces a notion of
    *ownership* by the holder of a key.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户发送交易时，他们必须用他们的私钥进行加密*签名*。这样，区块链可以强制执行只有特定用户才能移动特定资产或更改特定记录。这引入了由密钥持有人拥有的*所有权*的概念。
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Public blockchains do not require their users to sign up. They can just create
    a new key pair to start signing transactions to participate in the network. However,
    they may require their users to have a currency associated to the blockchain for
    their transactions to be processed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 公共区块链不要求用户注册。他们可以只需创建一个新的密钥对即可开始签署交易以参与网络。但是，他们可能要求用户在其交易得到处理之前在区块链上有一种货币关联。
- en: Transactions are batched together in *blocks*, which are then chained together
    to form the actual blockchain. The blocks constitute the history of the blockchain,
    each of them packing a set of transactions that change its state. How transactions
    are chosen and ordered in each block depends on the blockchain *consensus rules*,
    which we will see in a few pages.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 交易被批量打包到*区块*中，然后这些区块被链在一起形成实际的区块链。这些区块构成了区块链的历史，每个区块都包含一组改变其状态的交易。如何选择和排序每个区块中的交易取决于区块链的*共识规则*，我们将在接下来的几页中看到。
- en: 'When a block is added to the blockchain, it is propagated through the peer-to-peer
    network to all nodes. Each node will re-execute all transactions in the block
    locally in order to check if they are indeed valid, rejecting the block if they
    notice any illegal change. This means that each transaction is actually executed
    once per every single node in the entire network. This allows the blockchain to
    be completely decentralized, since each node checks all transactions that are
    run. However, it comes at a cost: the computational overhead imposes a cap on
    the number of transactions that can be processed per second by the network. In
    other words, performance is traded in exchange for decentralization.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个区块添加到区块链中时，它通过点对点网络传播到所有节点。每个节点将在本地重新执行区块中的所有交易，以检查它们是否确实有效，如果注意到任何非法更改，则拒绝该区块。这意味着每个交易实际上会在整个网络中的每个节点上执行一次。这使得区块链完全去中心化，因为每个节点都检查所有运行的交易。然而，这也带来了成本：计算开销对网络每秒可以处理的交易数量施加了限制。换句话说，性能被以去中心化作为交换。
- en: Given this high cost of processing a change in a blockchain, all transactions
    require a *fee* to be paid. This fee is usually paid in a currency native to the
    blockchain (such as bitcoin in the Bitcoin network^([1](#Fn1)) or ether in Ethereum).
    Regardless of who is the beneficiary of this fee, which we will see in a few pages,
    the goal of the fee is to prevent attackers from flooding the network with transactions
    that need to be processed by every single node, and to provide an incentive to
    the nodes that add new blocks to the chain.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链中处理更改的高成本决定了所有交易都需要支付*费用*。通常，这笔费用使用区块链本地的货币支付（比如比特币在比特币网络中^([1](#Fn1))，以太币在以太坊中）。无论这笔费用的受益者是谁（我们将在接下来的几页中看到），费用的目的是防止攻击者通过向网络发送需要每个节点处理的交易来使网络充斥，并为添加新区块的节点提供激励。
- en: Chain of Hashes
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 哈希链
- en: Blockchains are resistant to changes by keeping a *digest* of their entire history
    on every block. Each block in the chain is identified by a hash computed over
    its own transactions, as well as over the hash of the previous block (Figure [1-1](#Fig1)).![../images/476252_1_En_1_Chapter/476252_1_En_1_Fig1_HTML.png](../images/476252_1_En_1_Chapter/476252_1_En_1_Fig1_HTML.png)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链通过在每个区块上保留其整个历史的*摘要*来抵抗更改。链中的每个区块由计算其自身交易以及前一个区块的哈希所得到的哈希标识（图[1-1](#Fig1)）。![../images/476252_1_En_1_Chapter/476252_1_En_1_Fig1_HTML.png](../images/476252_1_En_1_Chapter/476252_1_En_1_Fig1_HTML.png)
- en: Figure 1-1
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-1
- en: How a blockchain is constructed. Each block is identified by a hash of the previous
    block, plus all its own transactions. We will see the role of the nonce in the
    next section. Image from the Bitcoin paper ^([2](#Fn2))
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链的构造方式。每个区块由前一个区块的哈希加上其自身的所有交易来标识。我们将在下一节看到nonce的作用。图片来自比特币论文^([2](#Fn2))
- en: With this scheme, any change on any transaction on any block in the chain will
    cause all subsequent hashes to change, making any modification trivial to detect.
    For instance, if an attacker tried to alter a transaction that happened ten blocks
    ago, not only the digest of that block would change but also that of the next
    block (since it is calculated based on the previous block hash) and so forth until
    the head of the chain.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方案，对链上任何区块的任何交易的任何更改都将导致所有后续哈希值的更改，使得任何修改都很容易检测到。例如，如果攻击者试图更改十个区块之前发生的交易，不仅该区块的摘要会更改，而且下一个区块的摘要也会更改（因为它是基于前一个区块哈希计算的），依此类推直到链的头部。
- en: However, for this mechanism to be useful to prevent an attacker from modifying
    the blockchain and distributing a spurious copy in the network, it must be *difficult*
    for the attacker to regenerate all blocks. That’s where the proof-of-work comes
    in.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了使这种机制对防止攻击者修改区块链并在网络中分发虚假副本有用，攻击者必须*难以*重新生成所有区块。这就是工作量证明发挥作用的地方。
- en: Reaching Consensus
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 达成共识
- en: How the transactions are ordered and included in the blockchain’s blocks will
    depend on the *consensus algorithm* of the network. Since we are dealing with
    a decentralized database, we need a way for all actors to agree on how changes
    are added to the chain. For instance, if a seller is offering an asset on the
    blockchain and two buyers rush to purchase it, how can a decentralized network
    decide who got first? Even worse, how do we prevent the seller from telling both
    buyers that they made the purchase and cash in twice?^([3](#Fn3)) We need a way
    to determine how transactions are chosen and ordered in order to have a single
    state of the blockchain. In other words, we need a way to establish a *consensus*
    on which blocks are added to the chain.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 交易是如何排序并包含在区块链的区块中的，将取决于网络的*共识算法*。由于我们正在处理分散式数据库，我们需要一种方法让所有参与者就如何将更改添加到链上达成一致意见。例如，如果卖家在区块链上提供资产并有两个买家急于购买，分散式网络如何决定谁先得到？更糟糕的是，我们如何防止卖家告诉两个买家他们都购买了并分两次兑现？^([3](#Fn3))
    我们需要一种确定交易如何选择和排序以确保区块链的单一状态的方法。换句话说，我们需要一种确定哪些区块被添加到链上的*共识*方式。
- en: Many public blockchains like Bitcoin or Ethereum rely on a consensus algorithm
    known as *proof-of-work*. A proof-of-work is a cryptographic proof that a significant
    amount of CPU cycles were spent performing a computation; in this case, computing
    a difficult number based on a block. In order for a block to be added to the blockchain,
    it must be accompanied by its proof-of-work. Any node can propose a new block
    and, if they submit it with its proof-of-work, it gets added to the blockchain.
    The node that gets to add a block receives a reward in return for their effort.^([4](#Fn4))
    Nodes that fulfill this role in the network are called *miners* *,*^([5](#Fn5))
    and whenever a new block is added, they all race to try and add the next to capture
    the corresponding reward.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 许多像比特币或以太坊这样的公共区块链依赖一种称为*工作量证明*的共识算法。工作量证明是一个加密证明，表明大量的CPU周期被用来执行计算；在本例中，是基于一个块计算一个困难数字。为了将一个块添加到区块链中，它必须附带其工作量证明。任何节点都可以提出一个新的块，如果他们提交了它的工作量证明，它就会被添加到区块链中。得到添加块的节点将会得到一份奖励作为他们的努力的回报。[^4]
    在网络中担任这一角色的节点被称为*矿工*[^5]，每当添加一个新块时，他们都会争相尝试添加下一个以捕获相应的奖励。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The mechanism for these proofs is actually quite simple. The identifier for
    every block in the chain is a hash that includes the identifier of the previous
    block, all transactions in the block, and a *nonce*. By changing the nonce, the
    calculated block’s digest will be completely different. In order to add a new
    block to the chain, this identifier must have a certain structure (begin with
    N zeros). Since it is not possible to predict what a digest will look like, a
    miner can only try calculating the block hash repeatedly while changing the nonce
    until he hits a digest that matches the requirements. This requires many attempts
    and is hence considered a proof-of-work.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些证明的机制实际上非常简单。链中每个块的标识符都是一个哈希值，其中包括上一个块的标识符、该块中的所有交易和一个*nonce*。通过更改nonce，计算出的块摘要将完全不同。为了将新块添加到链中，此标识符必须具有一定的结构（以N个零开头）。由于无法预测摘要会是什么样子，矿工只能尝试反复计算块哈希值，同时更改nonce，直到他命中符合要求的摘要为止。这需要许多尝试，因此被视为工作量证明。
- en: 'Remember that the entire infrastructure runs over a peer-to-peer decentralized
    network. This allows nodes to join and leave the network as they wish without
    requiring a centralized server. Here, the proof-of-work algorithm provides a way
    for new nodes to know which is the actual chain: they just need to look for the
    chain with the largest accumulated computing power invested.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 整个基础设施都在一个点对点的去中心化网络上运行。这使得节点可以随意加入和离开网络，而无需中心化服务器。在这里，工作量证明算法为新节点提供了一种知道哪条链是实际链的方法：它们只需寻找累积计算能力最大的链。
- en: This also prevents a malicious actor from just altering a record on the chain
    and recomputing all subsequent block hashes, as we were discussing in the previous
    section. In order to do this, the attacker would need to solve all proof-of-works
    from the block he changed onward, which requires more computing power than the
    rest of the miners in the network.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这也防止了恶意行为者只是在链上更改记录并重新计算所有后续区块哈希，正如我们在上一节中讨论的那样。为了做到这一点，攻击者需要解决从他更改的区块开始的所有工作量证明，这需要比网络中其余矿工更多的计算能力。
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are other mechanisms for consensus besides proof-of-work. In Chapter [8](476252_1_En_8_Chapter.xhtml),
    we will review with proof-of-authority and proof-of-stake as alternatives for
    building faster and smaller chains.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 除了工作量证明之外，还有其他的共识机制。在第[8](476252_1_En_8_Chapter.xhtml)章中，我们将审查权威证明和股权证明作为建立更快、更小的链的替代方案。
- en: 'The consensus algorithm is closely tied to the *finality* of the network. We
    say a transaction is *final* when we know it has been included in the blockchain
    and will not change. A transaction added in the most recent block is far from
    being considered final: if a miner manages to mine two blocks on a row starting
    from the next to last, they may generate a new chain that replaces the latest
    block and does not include that transaction.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 共识算法与网络的*最终性*密切相关。当我们知道一个交易已经包含在区块链中并且不会改变时，我们说这个交易是*最终*的。在最近的区块中添加的交易远不能被认为是最终的：如果一个矿工设法连续挖掘两个区块，从倒数第二个开始，他们可能生成一个替换最新区块并且不包括该交易的新链。
- en: This is called a *reorganization* , and it is not uncommon in proof-of-work
    chains. To know that a transaction is final, we need to wait for several blocks
    to be mined on top of the one in which it was included, to ensure it will not
    change. The number of blocks will depend on the particular chain and how much
    confidence we need.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为*重组*，在工作量证明链中并不罕见。要知道一笔交易是否最终，我们需要等待几个区块在其中包含它的区块上被挖掘，以确保它不会改变。区块的数量将取决于特定的链以及我们需要多少信心。
- en: On Throughput
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 关于吞吐量
- en: Solving a proof-of-work is computationally expensive by design. This by itself
    enforces a limit on the throughput of a blockchain, by forcing to solve a difficult
    puzzle every time a batch of transactions is to be added.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 解决工作量证明问题本身设计上就是计算开销巨大的。这本身就限制了区块链的吞吐量，因为每次要添加一批交易时都要解决一个困难的谜题。
- en: 'However, there is another reason for limiting the number and complexity of
    transactions per second added to the chain: verifiability. In order to keep the
    blockchain decentralized, every node in the network needs to be able to verify
    that every transaction was legitimate and was carried out according to the established
    rules. If the network accepts a very large number of transactions per second,
    then only powerful devices would be able to verify the chain, leaving out of the
    network to any user that cannot access the necessary hardware. Thus, low throughput
    is related to guaranteeing public access to the blockchain.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，限制每秒添加到链上的交易数量和复杂性还有另一个原因：可验证性。为了保持区块链的去中心化，网络中的每个节点都需要能够验证每笔交易是否合法，并且是否按照既定规则进行。如果网络接受非常大量的每秒交易，则只有强大的设备才能够验证链，而无法访问必要硬件的用户将被排除在网络之外。因此，低吞吐量与保证公众访问区块链有关。
- en: In particular, Ethereum is designed to handle about 15 transactions per second.
    Note that transactions can be more or less complex in Ethereum, since they may
    execute arbitrary computations, so this cap is actually related to how much effort
    is required to run and verify each of block’s transactions.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 特别地，以太坊设计处理大约每秒15笔交易。请注意，在以太坊中，交易可以更复杂或更简单，因为它们可以执行任意计算，因此这个限制实际上与运行和验证每个区块的交易所需的努力有关。
- en: Note that these few transactions per second are shared among all users and applications
    in the network, which is a very low limit even for a single traditional web application.
    We will see some approaches around this limitation in Chapter [8](476252_1_En_8_Chapter.xhtml).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每秒仅有这几笔交易是共享给网络中所有用户和应用程序的，这对于单个传统网络应用程序来说是非常低的限制。我们将在第[8](476252_1_En_8_Chapter.xhtml)章中看到一些解决此限制的方法。
- en: From Bitcoin to Ethereum
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从比特币到以太坊
- en: We have so far defined a blockchain as a public database, but we have not gone
    into *what* that database may contain. The first famous blockchain is used to
    track ownership of a digital currency, the bitcoin.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已将区块链定义为一个公共数据库，但我们尚未深入*数据库*可能包含的内容。第一个著名的区块链用于跟踪数字货币比特币的所有权。
- en: 'Most of what we understand as a blockchain today was introduced in 2008 by
    Satoshi Nakamoto^([6](#Fn6)) in his “Bitcoin: A Peer-to-Peer Electronic Cash System”
    paper.^([7](#Fn7)) The paper is short and easy to read, and it packs most of the
    blockchain concepts used today. It introduces a “purely peer-to-peer version of
    electronic cash”, without any centralized owner or issuer.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们今天所理解的大部分区块链概念是由中本聪在2008年的“比特币：一个点对点的电子现金系统”论文中^([6](#Fn6))引入的。该论文篇幅短小，易于阅读，并且包含了当今使用的大部分区块链概念。它介绍了一个“纯粹的点对点电子现金版本”，没有任何中心化的所有者或发行者。
- en: All in all, the Bitcoin blockchain is a public decentralized database that keeps
    track of the balance in bitcoin of its users and supports transactions for moving
    funds from one address to another. It is an implementation of a decentralized
    electronic payments platform.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，比特币区块链是一个公共的分散式数据库，用于跟踪用户比特币余额，并支持从一个地址向另一个地址转移资金的交易。它是一个去中心化电子支付平台的实现。
- en: It’s worth mentioning that, besides plain transfers, Bitcoin also supports a
    limited scripting language. This language allows for constructs such as timelocks,
    which restrict a transfer from being executed until a certain time in the future,
    or multisignature transactions, which require multiple accounts to be in agreement
    to move an asset. However, what can be built with this language is still limited.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，除了普通的转账之外，比特币还支持有限的脚本语言。这种语言允许使用时间锁等构造，限制转账在未来的某个特定时间之前不能执行，或者多重签名交易，需要多个账户达成一致才能转移资产。然而，使用这种语言可以构建的内容仍然有限。
- en: It is with the goal to support arbitrary computation in the network that Ethereum
    came up.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正是为了在网络中支持任意计算，以太坊才被想出来的。
- en: Smart Contracts
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 智能合约
- en: Ethereum was introduced by Vitalik Buterin in 2013, and first launched in 2015.^([8](#Fn8))
    Its main differentiator was the concept of arbitrary code that could be executed
    in the blockchain in the form of smart contracts. A smart contract is a short
    program uploaded to the blockchain, which can react to transactions sent to it
    by executing arbitrary logic. Each smart contract has its own arbitrary state
    as well, which can be updated on any transaction and can keep any data whatsoever.
    And of course, a smart contract can also hold ETH, the native currency of the
    Ethereum network.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊由Vitalik Buterin于2013年引入，并在2015年首次发布。[^8] 它的主要区别在于可以在区块链中以智能合约形式执行任意代码的概念。智能合约是上传到区块链的短程序，可以通过执行任意逻辑来对发送给它的交易作出反应。每个智能合约也有自己的任意状态，可以在任何交易中更新，并且可以保留任何数据。当然，智能合约也可以持有以太币，以太坊网络的本地货币。
- en: In other words, the Ethereum network holds both a digital currency (the ether)
    and executable code (the smart contracts) with their own state.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，以太坊网络既持有一种数字货币（以太币），又持有可执行代码（智能合约）及其自己的状态。
- en: This flexibility allows Ethereum to implement many different constructs. For
    instance, a whole new coin can be easily implemented as a smart contract. The
    contract only needs to keep track of the balance of each user, and provide methods
    for securely transferring them. This allows new cryptocurrencies to be created
    on top of Ethereum with little effort.^([9](#Fn9))
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这种灵活性使得以太坊能够实现许多不同的构造。例如，一个全新的加密货币可以很容易地作为一个智能合约实现。该合约只需要跟踪每个用户的余额，并提供安全转移的方法。这就可以让新的加密货币在以太坊上轻松创建。[^9]
- en: However, remember that all transactions are re-executed by all nodes in the
    network in order to be verified. This means that, while smart contracts may execute
    arbitrary code, this code must be *deterministic*. It must always yield the same
    result, no matter when or where it is run. It also cannot depend on any sources
    external to the blockchain; otherwise, the validity of the blockchain becomes
    dependent on those external sources. A smart contract may only query or interact
    with other smart contracts within the Ethereum network.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，请记住，所有交易都会被网络中的所有节点重新执行以进行验证。这意味着，虽然智能合约可以执行任意代码，但该代码必须是*确定性*的。无论何时何地运行，它都必须始终产生相同的结果。它也不能依赖于区块链外部的任何源；否则，区块链的有效性将取决于那些外部源。智能合约只能查询或与以太坊网络内的其他智能合约进行交互。
- en: Gas Fees
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Gas 费用
- en: Allowing any user to send a transaction with arbitrary code that will be executed
    on every single node in the network is potentially dangerous. A malicious user
    could submit a piece of code extremely expensive to execute or one that never
    finishes.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 允许任何用户发送带有任意代码的交易，在网络中的每个节点上执行该代码，这可能是危险的。一个恶意用户可以提交一段执行起来非常昂贵或永远无法完成的代码。
- en: To guard against this, Ethereum introduces a concept called *gas*. Think of
    gas  as the measure of the computing power required to process a transaction.
    In a transaction, complex operations will consume more gas than simpler ones.
    For instance, altering the storage of the contract is much more expensive than
    a simple arithmetic expression.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防范这种情况，以太坊引入了一个叫做*gas*的概念。把 gas 想象成处理交易所需的计算能力的度量。在一笔交易中，复杂的操作将消耗比简单操作更多的
    gas。例如，修改合约的存储比简单的算术表达式要昂贵得多。
- en: A transaction sent to the network requires a gas allocation in order to be sent.
    This gas is paid for using ETH. Every line of code executed by the transaction
    consumes a bit of its gas, and if it drops to zero, the processing is immediately
    stopped, and the transaction fails. Nevertheless, its sender is still charged
    for the hassle of processing such a long-running process.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 发送到网络的交易需要分配 gas 才能发送。这个 gas 是用 ETH 支付的。交易执行的每一行代码都会消耗一点 gas，如果 gas 降至零，处理将立即停止，交易失败。尽管如此，发送者仍然要为处理这样一个耗时长的过程而付费。
- en: The sender of a transaction can also set the gas price, indicating that they
    are willing to pay more (or less) than other users for the execution of their
    transaction. This is a way to get their transaction included in the blockchain
    faster (or cheaper) than other users, by making it more (or less) attractive to
    miners.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 交易的发送者还可以设置 gas 价格，表示他们愿意为执行其交易支付更多（或更少）的费用。这是一种让他们的交易比其他用户的交易更快（或更便宜）地包含在区块链中的方法，通过使其对矿工更具吸引力（或不那么具有吸引力）。
- en: Decentralized Applications
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 去中心化应用
- en: Smart contracts allow the building of *decentralized applications*, which will
    be our main focus throughout this book. Decentralized applications, or DApps,
    are client-side single-page web applications backed not by a server, but by a
    set of smart contracts on the blockchain. Instead of sending HTTP requests to
    a web server, users of the application send transactions to a smart contract on
    the Ethereum network. It is even possible to host the web application itself on
    a decentralized file storage system,^([10](#Fn10)) making the application completely
    independent of any centralized infrastructure.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约允许构建*去中心化应用程序*，这将是本书的主要重点。去中心化应用程序，或者称为 DApps，是由区块链上一组智能合约支持的客户端单页面 Web
    应用程序。用户不是向 Web 服务器发送 HTTP 请求，而是向以太坊网络上的智能合约发送交易。甚至可以将 Web 应用程序本身托管在去中心化文件存储系统上^([10](#Fn10))，使应用程序完全独立于任何集中式基础设施。
- en: Instead of querying data from a centralized data store, decentralized applications
    use the blockchain as the source of truth. Data used to populate the app is either
    stored on the blockchain or on a remote storage location that is referred to from
    the blockchain. Likewise, the business logic of the application is encoded in
    a set of smart contracts. Users perform persistent actions on the app by sending
    transactions to its smart contracts.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 去中心化应用程序不是从集中式数据存储中查询数据，而是使用区块链作为真相源。用于填充应用程序的数据要么存储在区块链上，要么存储在从区块链引用的远程存储位置上。同样，应用程序的业务逻辑被编码在一组智能合约中。用户通过向其智能合约发送交易来对应用程序执行持续性操作。
- en: User Experience
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 用户体验
- en: How does a DApp look and feel to a user? Some DApps will favor decentralization
    over ease of use and require users to access them with a specialized browser or
    browser extension. These extensions act as wallets, holding the user’s keys, and
    also as a gateway to the blockchain by providing a connection to an Ethereum node.
    Under the hood, they inject a javascript object that provides low-level methods
    for accessing blockchain data and sending transactions on behalf of the user.
    Whenever the application requests to send a transaction, the user is presented
    with a pop-up to approve it. This moves much complexity from the DApp onto the
    extension, but also requires a large effort from the user to get set up, by installing
    the extension, creating and backing up an account, and purchasing ETH to begin
    operating. We will use this approach to build our first DApp in Chapter [2](476252_1_En_2_Chapter.xhtml)
    and revisit it more in-depth in Chapter [5](476252_1_En_5_Chapter.xhtml) as we
    see the details of sending transactions.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: DApp 对用户来说是什么样子？一些 DApp 更注重去中心化而不是易用性，并要求用户使用专门的浏览器或浏览器扩展来访问它们。这些扩展充当钱包，保存用户的密钥，并且作为一个通向区块链的网关，通过连接到以太坊节点来提供连接。在底层，它们注入一个
    JavaScript 对象，提供访问区块链数据和代表用户发送交易的低级方法。每当应用程序请求发送交易时，用户都会收到一个弹出窗口来批准它。这将很多复杂性从
    DApp 转移到扩展，但也需要用户付出大量努力来设置，通过安装扩展，创建和备份帐户，并购买 ETH 来开始操作。我们将使用这种方法在第 [2](476252_1_En_2_Chapter.xhtml)
    章构建我们的第一个 DApp，并在第 [5](476252_1_En_5_Chapter.xhtml) 章更深入地讨论它，因为我们看到了发送交易的细节。
- en: Other DApps have a more user-friendly approach, managing the keys on behalf
    of the user. It’s even possible for a user to be using a DApp without even noticing,
    if all its complexity is handled behind the scenes. However, this also means that
    the user is no longer in control of their own keys, but delegates this on the
    app. Also, if each app manages its own set of keys, interoperability is much more
    difficult, since the user will have a different identity on each service. We will
    explore user-friendly approaches, along with the challenges they pose, in Chapter
    [6](476252_1_En_6_Chapter.xhtml). All in all, good apps offer different experiences
    to different users, depending on how familiar they are with Ethereum.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 其他 DApp 采用更用户友好的方式，代表用户管理密钥。如果所有复杂性都在幕后处理，用户甚至可能在不知不觉中使用 DApp。然而，这也意味着用户不再控制自己的密钥，而是将其委托给应用程序。而且，如果每个应用程序都管理其自己的一组密钥，那么互操作性将变得更加困难，因为用户将在每个服务上具有不同的身份。我们将在第
    [6](476252_1_En_6_Chapter.xhtml) 章探讨用户友好的方法以及它们所带来的挑战。总的来说，好的应用程序为不同的用户提供不同的体验，取决于他们对以太坊的熟悉程度。
- en: Regardless of key management, all DApps need to account for the long confirmation
    times of the network. In traditional web apps, an action in the form of an HTTP
    request takes a few milliseconds to get to the web server and back. However, in
    Ethereum, a transaction may take several seconds to be mined, and even more to
    be confirmed. DApps need to take this into account when designing their interfaces
    and be prepared to handle reorganizations as well. We will learn more about these
    challenges in Chapters [4](476252_1_En_4_Chapter.xhtml) and mostly 5.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 不管密钥管理如何，所有 DApp 都需要考虑网络的长确认时间。在传统的 Web 应用程序中，以 HTTP 请求形式的操作需要几毫秒才能到达 Web 服务器并返回。然而，在以太坊中，一个交易可能需要几秒钟才能被挖掘，并且甚至需要更长时间才能被确认。DApp
    在设计其界面时需要考虑到这一点，并且准备好处理重组。我们将在第[4](476252_1_En_4_Chapter.xhtml)章和主要在第 5 章更深入地了解这些挑战。
- en: Degrees of Decentralization
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 分散程度
- en: 'As we mentioned, a DApp can be fully decentralized: it can be hosted on a decentralized
    storage location, load its data from the blockchain, and rely on smart contracts
    for any business logic. Once launched, there is no centralized party that can
    stop or alter the application and no service that could go down preventing access
    to it. These applications are even resistant to censorship by any agent.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所提到的，DApp 可以是完全分散式的：它可以托管在分散式存储位置上，从区块链加载数据，并依赖智能合约执行任何业务逻辑。一旦启动，就没有中央方可以停止或修改应用程序，也没有任何服务可以关闭阻止访问它。这些应用程序甚至对任何代理进行审查都具有抵抗力。
- en: However, this comes at a cost. Decentralized storage may be slow or occasionally
    unavailable if there are not enough replicas of the content. Running queries on
    the Ethereum network can be too slow for some use cases. And in some scenarios,
    even the hurdle of setting up an Ethereum account can be a show-stopper for our
    users. Fortunately, we can trade in some degrees of decentralization in exchange
    for improving the user experience.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这是有代价的。如果内容的副本不足，分散式存储可能会变得缓慢或偶尔不可用。在某些情况下，在以太坊网络上运行查询可能对某些用例来说太慢了。在某些情景下，甚至建立以太坊账户的障碍都可能成为我们用户的绊脚石。幸运的是，我们可以在某种程度上牺牲分散程度来改善用户体验。
- en: For instance, instead of loading data from the blockchain itself, we can set
    up a centralized server that acts as a cache, providing much faster access to
    the data we need on the client. The web application can still fall back to the
    chain itself if this server goes down or even validate the data it provides against
    the blockchain when needed for a critical operation. We will explore these solutions
    in Chapter [6](476252_1_En_6_Chapter.xhtml).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以设置一个作为缓存的集中式服务器，而不是直接从区块链加载数据，为客户端提供更快速访问所需数据。如果此服务器停机，Web 应用程序仍然可以退回到链本身，甚至在需要进行关键操作时验证其提供的数据与区块链的一致性。我们将在第[6](476252_1_En_6_Chapter.xhtml)章探讨这些解决方案。
- en: Another example is relaying our users’ transactions to the network, so they
    do not need to set up an account, purchase ETH to pay for gas fees, or even interact
    with the Ethereum network at all. We can create an ephemeral key for the client-side
    and use it to sign transactions that we submit to the blockchain on their behalf
    from a dedicated server. This alleviates many of the pains around user onboarding.
    We will explore this and other alternatives in Chapter [8](476252_1_En_8_Chapter.xhtml).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是将用户的交易中继到网络上，这样他们就不需要设置帐户、购买 ETH 来支付 gas 费用，甚至根本不需要与以太坊网络进行任何交互。我们可以为客户端创建一个临时密钥，并使用它来签署我们代表他们从专用服务器提交到区块链的交易。这减轻了许多用户入门的痛苦。我们将在第
    [8](476252_1_En_8_Chapter.xhtml) 章中探讨这一点以及其他替代方案。
- en: We can even build fully centralized applications that interact with a decentralized
    protocol powered by smart contracts on the Ethereum blockchain. The value of the
    blockchain here is not on the application layer, but on the protocol. By managing
    our users’ assets on a decentralized layer, we guarantee that their data is safe,
    and they can at any time transparently migrate to another application on top of
    the same trustless^([11](#Fn11)) protocol.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以构建完全集中化的应用程序，与以太坊区块链上由智能合约驱动的去中心化协议进行交互。这里的区块链价值不在应用程序层，而在协议层。通过在去中心化层管理我们用户的资产，我们保证他们的数据安全，并且他们随时可以透明地迁移到同一信任协议上的另一个应用程序。
- en: All in all, the takeaway is that decentralization is not all or nothing. We
    can and have to choose the appropriate degree of decentralization to implement
    in our applications, knowing that it comes at a trade-off with its ease of use.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 总而言之，结论是分散化不是非此即彼的。我们可以选择适当的去中心化程度来实现我们的应用程序，知道这会与其易用性产生权衡。
- en: Why Blockchain?
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要使用区块链？
- en: The first question you should ask yourself when implementing a blockchain-based
    system is *whether you actually need a blockchain.*^([12](#Fn12))
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当您实施基于区块链的系统时，您应该问自己的第一个问题是*您是否真的需要区块链*。
- en: 'It is easy in technology to get carried away by hype cycles: you may be using
    a Kubernetes cluster to horizontally scale the load over your web application
    that would perfectly run on a single box, or you may be using state-of-the-art
    machine learning algorithms to infer trends from your dataset with less than 100
    entries that would better be visualized in an Excel spreadsheet. Millions have
    been spent in developing native mobile apps for presenting static info, since
    it was cooler than *just* a plain responsive web site.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在技术领域很容易被炒作周期带走：您可能正在使用 Kubernetes 集群来在您的 Web 应用程序上水平扩展负载，而这个应用程序完全可以在一个单独的框上完美运行，或者您可能正在使用最先进的机器学习算法来从少于
    100 条记录的数据集中推断趋势，而这些趋势最好在 Excel 电子表格中可视化。成千上万的资金被用于开发用于呈现静态信息的原生移动应用程序，因为这比*仅仅*是一个简单的响应式网站更酷。
- en: Blockchain is no exception to hype, with the aggravating factor that it can
    be used as an instrument for financial speculators as well. Always remember that
    just because you have a shiny new hammer on your hands, not everything becomes
    a nail. You should not try to hammer a blockchain into every system, but rather
    design a solution and then consider whether it would actually benefit from a blockchain.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链并不例外，它也充满了炒作，更糟糕的是，它可以被用作金融投机者的工具。请记住，仅仅因为你手里有一把闪亮的新锤子，并不意味着所有东西都成了钉子。你不应该试图把区块链强行应用于每个系统，而是应该设计一个解决方案，然后考虑它是否真的会从区块链中受益。
- en: Advantages and Use Cases
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 优势和应用场景
- en: After the preceding disclaimer, we can now focus on where blockchains do shine
    and some suitable use cases for public blockchains or Ethereum in particular.^([13](#Fn13))
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的免责声明之后，我们现在可以专注于区块链的优点以及一些适用于公共区块链或以太坊的合适用例。[^13](#Fn13)
- en: '*Decentralized finance* is one of the most popular use cases.^([14](#Fn14))
    The first blockchain, Bitcoin, was built as a decentralized payments platform,
    but financial applications of a blockchain can go much further. Smart contracts
    can be used to support many kinds of financial workflows, such as decentralized
    exchanges, derivatives, margin trading, insurance, credits, lending, investing,
    prediction markets, and so on. These artifacts traditionally required users to
    place their trust and their assets in a centralized institution – this increased
    the barrier of entry, and the institution often took a hefty fee for their services.
    Now, a smart contract in a public auditable blockchain can act as the institution
    supporting these financial services, acting on cryptocurrencies within the chain.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*去中心化金融*是最受欢迎的应用之一。[^14](#Fn14)第一个区块链比特币是作为去中心化支付平台构建的，但是区块链的金融应用可以做得更多。智能合约可以支持许多种金融工作流程，例如去中心化交易所、衍生品、保证金交易、保险、信用、借贷、投资、预测市场等。这些传统上需要用户将信任和资产放在中心化机构中，这增加了进入门槛，而且机构通常会收取高昂的服务费。现在，在一个公开可审计的区块链中，智能合约可以充当支持这些金融服务的机构，对链内的加密货币进行操作。'
- en: In general, blockchains shine in scenarios where there was a need for a *trusted
    third party* , since they act as a credible neutral platform for several participants
    to interact securely. This holds not just on financial applications but also whenever
    there is a need to publicly verify the transparency of a process. For instance,
    in an online auction, it is possible to verify that bids from all participants
    are processed by having them submitted (encrypted) to the blockchain. If a participant
    sees that their bid was not considered, they can just show proof of their bid
    on the blockchain.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，在需要*可信第三方*的场景中，区块链表现出色，因为它们充当了一个可信的中立平台，让多个参与者可以安全地进行交互。这不仅适用于金融应用，还包括需要公开验证过程透明性的场合。例如，在线拍卖中，可以通过将所有参与者的出价提交（加密）到区块链中来验证所有出价的处理情况。如果参与者发现自己的出价没有被考虑，他们可以在区块链上展示出价的证据。
- en: 'By removing the need for a trusted third party, smart contracts can be used
    to create trustless *platforms* or *protocols.* Instead of building on top of
    a proprietary layer, where the rules of the game may be changed unilaterally by
    the owner, you could build on top of a decentralized platform. A good example
    is a marketplace: traditional big companies that operate application and services
    marketplaces can alter their terms and conditions (and their cut!) at any time.
    On the other hand, a marketplace coordinated by a smart contract is immutable
    and run by no one but the blockchain itself.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通过消除对可信第三方的需求，智能合约可以用来创建无需信任的*平台*或*协议*。与建立在专有层之上的传统平台不同，那里的游戏规则可能会被所有者单方面改变，您可以建立在一个分散的平台之上。一个很好的例子是市场：传统的大公司经营的应用程序和服务市场可以随时更改其条款和条件（以及它们的分成！）。另一方面，由智能合约协调的市场是不可变的，由区块链本身运行而不受任何人控制。
- en: Blockchains can also be used to prove existence of a piece of data.^([15](#Fn15))
    By submitting a signed digest of a document to the blockchain, anyone can then
    prove that certain data was published by a certain date. But, more interestingly,
    blockchains also allow to verify that a certain piece of data was *not* published.
    For instance, if a blockchain is used to store certificate revocations, then anyone
    can easily prove that a certificate was *not* revoked by just showing that the
    revocation was never uploaded to the chain, which acts as a neutral global database.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链也可以用来证明数据的存在。^([15](#Fn15)) 通过向区块链提交文档的签名摘要，任何人都可以证明某些数据是由某个特定日期发布的。但更有趣的是，区块链还可以验证某个特定数据*未*被发布。例如，如果区块链用于存储证书吊销信息，那么任何人都可以轻松证明某个证书*未*被吊销，只需证明吊销从未上传到链上，这充当着一个中立的全球数据库。
- en: Another advantage of a blockchain is that of *permanence* . If you, as a user,
    hold something of value on a digital system and the maintainer of such system
    disappears, along goes your stuff. This can be true not just for currencies but
    also for digital assets, such as collectibles or online achievements. Having digital
    assets registered on a blockchain guarantees that they are maintained independently
    of the organization that created them. It can even enable trading of those assets
    across the boundaries of the system where it was originally created.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链的另一个优势是*永久性*。作为用户，如果您在数字系统上持有某些有价值的东西，而系统的维护者消失了，您的东西也就随之消失了。这不仅适用于货币，还适用于数字资产，例如收藏品或在线成就。将数字资产登记在区块链上可以保证它们独立于创建它们的组织进行维护。甚至可以在原始创建系统的范围之外交易这些资产。
- en: Some groups are also exploring new governance mechanisms by building *decentralized
    autonomous organizations* (DAOs) on Ethereum. In a DAO, a set of participants
    hold some form of voting power and can submit proposals which are then decided
    via a mechanism coded into the DAO smart contract.^([16](#Fn16)) The blockchain
    ensures the absolute transparency of the process and allows for rapidly experimenting
    with new ways of organizing groups around a common purpose.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一些团体也在探索通过在以太坊上建立*去中心化自治组织*（DAOs）来构建新的治理机制。在DAO中，一组参与者持有某种形式的投票权，并可以提交提案，然后通过编码到DAO智能合约中的机制来决定。^([16](#Fn16))
    区块链确保了该过程的绝对透明性，并允许快速尝试围绕共同目标组织团体的新方法。
- en: However, for all the advantages that come from a public blockchain, there are
    also major limitations imposed on what can be built.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尽管公共区块链带来了许多优势，但也对可以构建的内容施加了重大限制。
- en: Limitations
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 限制
- en: 'One of the major limitations imposed by a public blockchain, as we already
    mentioned, is *transaction throughput* . Processing a dozen transactions per second
    is often not enough for a single application, much less for all applications built
    on the same chain to share. This is, however, the cost of decentralization. As
    Vitalik Buterin himself puts it: “Blockchains are NOT about cutting computational
    costs (at least relative to centralized servers). Blockchains are about incurring
    a sacrifice in the form of increased computational costs to achieve a decrease
    in social costs.”^([17](#Fn17))'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经提到的，公共区块链所施加的主要限制之一是*交易吞吐量*。每秒处理十几笔交易通常对于单个应用程序来说是不够的，更不用说所有建立在同一链上的应用程序共享了。然而，这就是去中心化的成本。正如Vitalik
    Buterin本人所说：“区块链并不是为了降低计算成本（至少相对于集中式服务器而言）。区块链是为了通过增加计算成本来实现社会成本的降低。”^([17](#Fn17))
- en: Nevertheless, there is much work toward scaling public blockchains. If a dozen
    transactions per second is too few to share among all applications in a blockchain,
    then we can build more blockchains and interconnect them. Or we can process batches
    of transactions outside the blockchain and then settle them all together in a
    single transaction. We will explore more about these approaches in Chapter [8](476252_1_En_8_Chapter.xhtml),
    regarding scaling.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，公共区块链的规模化工作还有很多工作要做。如果每秒十几笔交易对于区块链中的所有应用程序来说太少了，那么我们可以构建更多的区块链并将它们互连起来。或者我们可以在区块链之外处理交易批次，然后将它们一起结算在单个交易中。关于这些方法的更多探讨将在第[8](476252_1_En_8_Chapter.xhtml)章中，关于扩展方面。
- en: Another major challenge for blockchains is that of *user onboarding* . While
    decentralization offers many benefits in terms of decreasing social costs, removing
    third parties, and providing privacy, it also makes approaching the platform more
    difficult. There is no central authority to hold your hand as you jump onto the
    platform and no one to ask for your help if you misplaced your private keys and
    lost all your funds. Furthermore, in order to interact with the Ethereum network,
    you first need to have ether in your possession, not to mention a wallet to hold
    them, which makes the setup process longer and more cumbersome than most users
    are willing to accept.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链面临的另一个重大挑战是*用户入门*。尽管去中心化在降低社会成本、移除第三方和提供隐私方面有许多好处，但它也使得接近平台变得更加困难。没有中央机构在您跳入平台时拉您的手，如果您误放了私钥并且失去了所有资金，也没有人可以为您提供帮助。此外，要与以太坊网络进行交互，您首先需要拥有以太币，更不用说拥有一个用于保存它们的钱包了，这使得设置过程变得比大多数用户愿意接受的更长、更繁琐。
- en: Onboarding  is being tackled as one of the major pain points in the usage of
    cryptocurrencies in applications, with many companies offering centralized solutions
    or acting as custodians for end users’ assets. Decentralized applications are
    also experimenting with smoother user onboarding flows, so users do not fall out
    of the funnel when asked to download a dedicated browser extension to interact
    with the app. We will go through many of these techniques to ease user onboarding
    in Chapter [7](476252_1_En_7_Chapter.xhtml).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中，用户入门被视为加密货币使用的主要痛点之一，许多公司提供集中式解决方案或充当最终用户资产的托管人。去中心化应用程序也在尝试更顺畅的用户入门流程，以便用户在被要求下载专用浏览器扩展与应用程序进行交互时不会掉出漏斗。我们将在第[7](476252_1_En_7_Chapter.xhtml)章中讨论许多这样的技术，以简化用户入门流程。
- en: Note that the limitations and use cases we have defined so far apply to blockchains
    that are public in nature, that is, networks where any participant can join to
    verify history, submit transactions, query the current data, or even act as a
    miner. However, there is another set of blockchains we have not explored so far.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，到目前为止我们所定义的限制和用例适用于公开性质的区块链，即任何参与者都可以加入以验证历史、提交交易、查询当前数据，甚至充当矿工的网络。然而，还有另一类区块链我们到目前为止尚未探讨。
- en: Non-public Blockchains
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 非公开区块链
- en: When we first defined a blockchain, we described it as a *public* digital ledger.
    However, ever since Bitcoin appeared, there has been extensive work on *permissioned*
    blockchains, which challenge our preceding definition by removing the public nature
    of the chain. These blockchains limit which nodes are allowed to join the network
    or which are allowed to act as miners or send transactions.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们首次定义区块链时，我们将其描述为*公共*数字分类帐。然而，自比特币出现以来，对*许可*区块链的广泛研究使我们之前的定义受到挑战，因为它们消除了链的公共性质。这些区块链限制了哪些节点被允许加入网络，或者哪些被允许充当矿工或发送交易。
- en: For instance, a growing pattern in the enterprise world is that of *federated*
    or *consortium* blockchains. These blockchains are managed by a group (consortium)
    of different institutions. Each member of the consortium controls a node in the
    network that acts as a whitelisted *validator* node and participates in a vote-based
    consensus algorithm for adding new blocks.^([18](#Fn18)) This removes the need
    of a proof-of-work, since consensus is reached by voting among a predefined set
    of nodes.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在企业界中越来越流行的模式是*联合*或*财团*区块链。这些区块链由一组（财团）不同的机构管理。财团的每个成员控制网络中充当白名单*验证器*节点并参与基于投票的共识算法以添加新区块的节点。这消除了工作证明的需求，因为共识是通过预定义的节点集之间的投票达成的。
- en: These permissioned blockchains may also limit not only the nodes that act as
    miners but also which nodes join the network and are able to verify the transactions,
    or which accounts are able to submit transactions for processing.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这些许可区块链不仅可能限制充当矿工的节点，还可能限制加入网络并能够验证交易的节点，或者哪些账户能够提交交易进行处理。
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Some companies are taking this one step further and go with fully *private blockchains*,
    which are internal to the company, and only a single node has the permission to
    add new blocks. These chains are used mostly for auditability and tracing purposes.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一些公司正在采取更进一步的措施，选择完全*私有区块链*，这些区块链是公司内部的，只有一个节点有权限添加新的区块。这些链主要用于审计和追溯目的。
- en: These changes allow federated blockchains to have a much higher transaction
    throughput than public blockchains. Also, by restricting the set of nodes that
    can participate in the network, they are automatically protected against spam,
    and can drop the requirement of paying for transaction fees.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变化使联合区块链的交易吞吐量比公共区块链高得多。此外，通过限制可以参与网络的节点集合，它们自动受到垃圾邮件的保护，并且可以取消支付交易费用的要求。
- en: This allows permissioned blockchains to cater for a different set of use cases.
    For instance, federated chains are often used to settle global transactions among
    the different companies that form the consortium, without the restrictions on
    the number of transactions per second imposed by public blockchains. Here, the
    value of the blockchain lies in its auditability, and in removing the need of
    a *single* trusted party to hold the data shared among the consortium.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得许可区块链能够满足不同的用例。例如，联合链经常用于解决财团成员之间的全球交易，而不受公共区块链对每秒交易数的限制。在这里，区块链的价值在于其可审计性，以及消除了需要一个*单一*信任方来持有财团共享数据的需求。
- en: While there are some disagreements on whether these permissioned chains can
    be considered *true blockchains* or not, the fact is that blockchain technology
    is making its way to the enterprise world. However, throughout this book we will
    focus on public blockchains only, specifically Ethereum. Nevertheless, much of
    the learning from public blockchains can be applied to the permissioned space
    as well.^([19](#Fn19))
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管关于这些许可链是否可以被认为是*真正的区块链*存在一些分歧，但事实是区块链技术正在向企业世界进发。然而，在整本书中，我们将只专注于公共区块链，特别是以太坊。尽管如此，公共区块链的许多学习内容也可以应用于许可空间。^([19](#Fn19))
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Hopefully, this chapter served as an introduction to the world of blockchain
    and Ethereum. You should now have a basic understanding on what a blockchain is,
    when it makes sense to use one, and what are its limitations.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这一章作为区块链和以太坊世界的介绍。你现在应该对区块链是什么，何时使用它以及它的局限性有基本的了解。
- en: We introduced basic concepts to which we will constantly return throughout the
    book, such as smart contracts, transactions, blocks, reorganizations, consensus,
    and nodes. We went from Bitcoin onto Ethereum and briefly mentioned permissioned
    blockchains as an alternative to the public chains.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了一些基本概念，这些概念在整本书中我们将不断回顾，比如智能合约、交易、区块、重新组织、共识和节点。我们从比特币转向以太坊，并简要提到了许可区块链作为公共链的替代方案。
- en: After all this theory, in the next chapter we will go fully hands-on, by implementing
    our first Ethereum DApp. This will give you a better understanding of the concept
    of a decentralized application that we presented in this chapter, and we will
    then go in-depth on its different aspects in the entire book.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 经过这一切理论，下一章我们将完全实践，通过实现我们的第一个以太坊 DApp。这将让你更好地理解我们在本章中提出的去中心化应用概念，并且我们将在整本书中深入探讨它的各个方面。
