["```\n                labels = ['', 'eth', 'manning', 'roberto']\n    ```", "```\n       node =\n    0x0000000000000000000000000000000000000000000000000000000000000000\n    ```", "```\n        labelHash = keccak256('eth') =\n    0x4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0 \n    ```", "```\n        node = keccak256(node + labelhash) = \n    keccak256(\n    0x000000000000000000000000000000000000000000000000000000000000000004f5b81278\n     9fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0) = \n     0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae\n    ```", "```\n     0x5fd962d5ca4599b3b64fe09ff7a630bc3c4032b3b33ecee2d79d4b8f5d6fc7a5\n    ```", "```\n    function namehash(name) {\n        var node =\n    '0x0000000000000000000000000000000000000000000000000000\n     000000000000';                                          *1*\n        if (name !== '') {\n            var labels = name.split(\".\");                      *2*\n            for(var i = labels.length - 1; i >= 0; i--) {\n                label = labels[i];                             *3*\n                labelHash = web3.sha3(label);                  *4*\n                node = web3.sha3(node + labelHash.slice(2), \n                {encoding: 'hex'});                            *5*\n            }\n        }\n        return node.toString();                                *6*\n    }\n    ```", "```\nC:\\Program Files\\geth>geth --testnet\n```", "```\nC:\\Program Files\\geth>geth attach ipc:\\\\.\\pipe\\geth.ipc\n```", "```\n>loadScript('c:/ethereum/ens/ensutils-testnet.js');\n```", "```\n>var domainHash = web3.sha3('manning');\n> \n>var domainExpiryEpoch = testRegistrar.expiryTimes(domainHash)\n.toNumber() * 1000;\n>var domainExpiryDate = new Date(domainExpiryEpoch);\n```", "```\n>personal.unlockAccount(eth.accounts[0], 'PASSWORD_OF_YOUR_ACCOUNT_0');\n>var tx1 = testRegistrar.register(domainHash,\neth.accounts[0], {from: eth.accounts[0]});\n```", "```\n>tx2 = ens.setResolver(namehash('manning.test'),\npublicResolver.address, {from: eth.accounts[0]});\n```", "```\n>publicResolver.setAddr(namehash('manning.test'),\neth.accounts[1], {from: eth.accounts[0]});\n```", "```\n>ens.setSubnodeOwner(namehash('manning.test'),\nweb3.sha3('roberto'), eth.accounts[2], {from: eth.accounts[0]});\n```", "```\n>ens.setResolver(namehash('roberto.manning.test'),\npublicResolver.address, {from: eth.accounts[2]});\n```", "```\n>publicResolver.setAddr(namehash('manning.test'),\neth.accounts[3], {from: eth.accounts[2]});\n```", "```\n>var domainName = 'manning.test';\n>var domainNamehash = namehash(domainName);\n>var resolverAddress = ens.resolver(domainNamehash);\n>resolverContract.at(resolverAddress).addr(namehash(domainNamehash));\n```", "```\n0x4e6c30154768b6bc3da693b1b28c6bd14302b578\n```", "```\n> eth.accounts[1]\n```", "```\n>getAddr(domainName);\n0x4e6c30154768b6bc3da693b1b28c6bd14302b578\n```", "```\nC:\\Program Files\\geth>geth --testnet\n```", "```\nC:\\Program Files\\geth>geth attach ipc:\\\\.\\pipe\\geth.ipc\n```", "```\n> eth.accounts[1]\n\"0x4e6c30154768b6bc3da693b1b28c6bd14302b578\"\n```", "```\nC:\\Program Files\\geth>swarm –datadir\n C:\\Users\\rober\\AppData\\Roaming\\Ethereum\\testnet\n --bzzaccount 0x4e6c30154768b6bc3da693b1b28c6bd14302b578\n```", "```\nINFO [03-11|19:49:47] Peer faa9a1ae is capable (0/3)\nINFO [03-11|19:49:47] found record <faa9a1aef3fb3b0792420a59f929907d86c0937d\n b9310d6835a46f44301faf05> in kaddb\nINFO [03-11|19:49:47] syncronisation request sent with address: 00000000\n -00000000, index: 0-0, session started at: 0, last seen at: 0, latest\n key: 00000000\n\nINFO [03-11|19:49:47] syncer started: address: -, index: 0-0, session\n started at: 933, last seen at: 0, latest key:\nINFO [03-11|19:49:47] syncer[faa9a1ae]: syncing all history complete\nINFO [03-11|19:49:50] Peer d3f2a5c8 is capable (0/3)\n```", "```\nC:\\Users\\rober>curl -H \"Content-Type: text/plain\" \n --data-binary \"my sample text\" http://localhost:8500/bzz:/\n```", "```\neab8083835dec1952eae934eef05dda96dadbcd5d0685251e8c9faab1d0a0f58\n```", "```\nC:\\Users\\rober>curl\n http://localhost:8500/bzz:/eab8083835dec1952eae934eef05dda96dadbcd5d068\n 5251e8c9faab1d0a0f58/\n```", "```\nmy sample text\n```", "```\n{\n     Data—Byte array containing data in binary form\n     Links—Array of Link objects, which link to other IPFS objects\n}\n```", "```\n{\n      Name—String representing the name of the link\n      Hash—Hash of the linked IPFS object \n      Size—Full size of linked IPFS document and all of its linked IPFS\n objects\n}\n```", "```\n{\n    \"Links\":[],                               *1*\n    \"Data\":\"\\u0008\\u0002\\u0012\\u0019\n This is some sample text.\\u0018\\u0019\"     *2*\n}\n```", "```\n{\n\"Links\":[                                               *1*\n  {\n     \"Name\":\"\",                                         *2*\n     \"Hash\":\n \"QmWXuN4UW2ZJ2fo5fj8xt7raMKvsihJJibUpwmtEhbHBci\",    *3*\n     \"Size\":262158                                      *4*\n   },\n   {     \n      \"Name\":\"\",\n      \"Hash\":\"QmfHm32CQnagmHvNV5X715wxEEjgqADWpCeLPYvL9JNoMt\",\n       \"Size\":262158\n   },\n   . . .\n   {\n       \"Name\":\"\",\n       \"Hash\":\"QmXrgsJQGVxg7iH2tgQF8BV9dEhRrCVngc9tWg8VLFn7Es\",\n       \"Size\":13116\n    }\n],\n  \"Data\":\"\\u0008\\u0002\\u0018@ \\u0010 \\u0010 \\u0010 \\u0010 f\"\n}\n```", "```\npragma solidity ^0.4.0;\nimport \"github.com/oraclize/ethereum-api/\n oraclizeAPI.sol\";                                         *1*\n\ncontract KrakenPriceTicker is usingOraclize {                *2*\n\n    string public ETHXBT;                                    *3*\n\n    event newOraclizeQuery(string description);              *4*\n    event newKrakenPriceTicker(string price);                *5*\n\n    function KrakenPriceTicker() {                           *6*\n        oraclize_setProof(proofType_TLSNotary \n            | proofStorage_IPFS);                            *7*\n        update();                                            *8*\n    }\n\n    function __callback(bytes32 myid, \n        string result, bytes proof) {                        *9*\n        if (msg.sender != oraclize_cbAddress()) throw;\n        ETHXBT = result;                                     *10*\n        newKrakenPriceTicker(ETHXBT);                        *11*\n        update();                                            *12*\n    }\n\n    function update() payable {                              *13*\n        if (oraclize.getPrice(\"URL\") > this.balance) {       *14*\n            newOraclizeQuery(\"Oraclize query was NOT sent, \n please add some ETH to cover for the query fee\");\n        } else {\n\n            newOraclizeQuery(\"Oraclize query was sent, \n standing by for the answer..\");\n            oraclize_query(60, \"URL\",\n      \"json(https://api.kraken.com/0/public/Ticker?pair=ETHXBT).result.XETHXXB\n      T.c.0\");                                                *15*\n        }\n    }\n\n} \n```", "```\noraclize_query(60, \"URL\",\n     \"json(https://api.kraken.com/0/public/Ticker?pair=ETHXBT)\n.result.XETHXXBT.c.0\");\n```", "```\n    function __callback(bytes32 myid, string result, bytes proof) {\n        if (msg.sender != oraclize_cbAddress()) throw;\n        ETHXBT = result;\n        newKrakenPriceTicker(ETHXBT);\n        update();\n    }\n```", "```\nc:\\>npm install --global mocha\n```", "```\n{\n  \"name\": \"simple_coin_tests\",\n  \"version\": \"1.0.0\",\n  \"description\": \"unit tests for simple coin\",\n  \"scripts\": {\n    \"test\": \"mocha\"\n  }\n}\n```", "```\nC:\\Ethereum\\mocha\\SimpleCoin>npm init\n```", "```\nvar assert = require('assert');                               *1*\ndescribe('String', function() {                               *2*\n  describe('#length()', function() {                          *3*\n    it('the length of the string \"Ethereum\" should be 8', \n      function() {                                            *4*\n      assert.equal(8, 'Ethereum'.length);                     *5*\n    });\n  });\n});\n```", "```\nC:\\Ethereum\\mocha\\SimpleCoin>npm test dummyTests.js\n```", "```\n> simple_coin_tests@1.0.0 test C:\\Ethereum\\mocha\\SimpleCoin\n> mocha \"dummyTests.js\"\n\n  String\n    #length()\n      √the length of the string \"Ethereum\" should be 8\n\n  1 passing (9ms)\n```", "```\nC:\\>npm install -g solc\nC:\\>npm install -g web3@0.20.0\nC:\\>npm install -g ganache-cli@6.1.8\n```", "```\nC:\\Ethereum\\mocha\\SimpleCoin>npm install solc\nC:\\Ethereum\\mocha\\SimpleCoin>npm install web3@0.20.0\nC:\\Ethereum\\mocha\\SimpleCoin>npm install ganache-cli@6.1.8\n```", "```\npragma solidity ^0.4.24;\ncontract SimpleCoin {\n    mapping (address => uint256) public coinBalance;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public frozenAccount;\n    address public owner;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event FrozenAccount(address target, bool frozen);\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    constructor(uint256 _initialSupply) public {\n        owner = msg.sender;\n        mint(owner, _initialSupply);   \n    }\n\n    function transfer(address _to, uint256 _amount) public {\n        require(coinBalance[msg.sender] > _amount);\n        require(coinBalance[_to] + _amount >= coinBalance[_to] );\n        coinBalance[msg.sender] -= _amount;  \n        coinBalance[_to] += _amount;   \n        emit Transfer(msg.sender, _to, _amount);  \n    }  \n\n    function authorize(address _authorizedAccount, uint256 _allowance)\n        public returns (bool success) {\n        allowance[msg.sender][_authorizedAccount] = _allowance;\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _amount) \n        public returns (bool success) {\n        require(_to != 0x0);                             \n        require(coinBalance[_from] > _amount); \n        require(coinBalance[_to] + _amount >= coinBalance[_to] ); \n        require(_amount <= allowance[_from][msg.sender]);     \n        coinBalance[_from] -= _amount;                          \n        coinBalance[_to] += _amount;                         \n        allowance[_from][msg.sender] -= _amount;\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    function mint(address _recipient, uint256  _mintedAmount) \n        public onlyOwner {\n        coinBalance[_recipient] += _mintedAmount;\n        emit Transfer(owner, _recipient, _mintedAmount);\n    }\n\n    function freezeAccount(address target, bool freeze) \n        public onlyOwner  {\n        frozenAccount[target] = freeze; \n        emit FrozenAccount(target, freeze);\n    }\n}\n```", "```\nconst fs = require('fs');\nconst solc = require('solc');\nconst Web3 = require('web3');\nconst web3 = new Web3(\n   new Web3.providers.HttpProvider(\"http://localhost:8545\"));\nvar assert = require('assert');\n\nconst source = fs.readFileSync(\n   'c:/Ethereum/mocha/SimpleCoin/SimpleCoin.sol', \n   'utf8');                                             *1*\nconst compiledContract = solc.compile(source, 1);\nconst abi = compiledContract.contracts[':SimpleCoin'].interface;\n\nconst bytecode = '0x' + compiledContract.contracts[':SimpleCoin'].bytecode;\nconst gasEstimate = web3.eth.estimateGas({ data: bytecode }) + 100000;\n\nconst SimpleCoinContractFactory = web3.eth.contract(JSON.parse(abi));\n```", "```\ndescribe('SimpleCoin', function() {                    *1*\n  describe('SimpleCoin constructor', function() {      *2*\n    it('Contract owner is sender', function(done) {    *3*\n    ...\n    });\n  });\n});\n```", "```\ndescribe('SimpleCoin', function() {\n  this.timeout(5000);\n  describe('SimpleCoin constructor', function() {\n    it('Contract owner is sender', function(done) {\n        //arrange \n        let sender = web3.eth.accounts[1];                        *1*\n        let initialSupply = 10000;                                *1*\n\n         //act\n         let simpleCoinInstance = \n              SimpleCoinContractFactory.new(initialSupply, {      *2*\n              from: sender, data: bytecode, gas: gasEstimate}, \n              function (e, contract){ \n              if (typeof contract.address !== 'undefined') {\n                    //assert\n                    assert.equal(contract.owner(), sender);       *3*\n\n                    done();                                       *4*\n              }\n        });\n    });\n });\n});\n```", "```\nconst fs = require('fs');\nconst solc = require('solc');\nconst Web3 = require('web3');\nconst web3 = new Web3(\n   new Web3.providers.HttpProvider(\"http://localhost:8545\"));\nvar assert = require('assert');\n\nconst source = fs.readFileSync(\n   'c:/Ethereum/mocha/SimpleCoin/SimpleCoin.sol', 'utf8');\nconst compiledContract = solc.compile(source, 1);\nconst abi = compiledContract.contracts[':SimpleCoin'].interface;\nconst bytecode = '0x' + compiledContract.contracts[':SimpleCoin'].bytecode;\nconst gasEstimate = web3.eth.estimateGas({ data: bytecode }) + 100000;\n\nconst SimpleCoinContractFactory = web3.eth.contract(JSON.parse(abi));\n\ndescribe('SimpleCoin', function() {\n  this.timeout(5000);\n  describe('SimpleCoin constructor', function() {\n    it('Contract owner is sender', function(done) {\n        //arrange \n        let sender = web3.eth.accounts[1]; \n        let initialSupply = 10000; \n\n        //act\n        let simpleCoinInstance = SimpleCoinContractFactory.new(initialSupply, {\n            from: sender, data: bytecode, gas: gasEstimate}, \n            function (e, contract){ \n            if (typeof contract.address !== 'undefined') {\n                    //assert\n                    assert.equal(contract.owner(), sender);\n                    done();\n            }\n        });\n    });\n });\n});\n```", "```\nc:\\>ganache-cli\n```", "```\nC:\\Ethereum\\mocha\\SimpleCoin>npm test SimpleCoinTests.js\n```", "```\nit('Contract owner balance is equal to initialSupply', function(done) {\n    //arrange \n    let sender = web3.eth.accounts[1];\n    let initialSupply = 10000;\n\n    //act\n    let simpleCoinInstance = SimpleCoinContractFactory.new(initialSupply, {\n        from: sender, data: bytecode, gas: gasEstimate},\n        function (e, contract){\n            if (typeof contract.address !== 'undefined') {\n                //assert\n                assert.equal(\n                  contract.coinBalance(contract.owner()), \n                  initialSupply);            *1*\n                done();\n                }\n     });\n});\n```", "```\nC:\\Ethereum\\mocha\\SimpleCoin>npm test SimpleCoinTests.js\n```", "```\nfunction mint(address _recipient, uint256  _mintedAmount) \n    onlyOwner public {\n       ...\nfunction freezeAccount(address target, bool freeze) \n    onlyOwner public { \n```", "```\n  describe('mint', function() {\n     it('Cannot mint from non-owner account', function(done) {\n        //arrange \n\n        let sender = web3.eth.accounts[1];                         *1*\n        let initialSupply = 10000;\n\n        let minter = web3.eth.accounts[2];                         *2*\n        let recipient = web3.eth.accounts[3];\n        let mintedCoins = 3000;\n\n        let simpleCoinInstance = simpleCoinContractFactory\n            .new(initialSupply, {\n                  from: sender, \n                  data: bytecode, \n                  gas: gasEstimate},                               *1*\n                function (e, contract){\n                    if (typeof contract.address !== 'undefined') {\n                        //act and assert\n                        assert.throws(                             *3*\n                           ()=> {\n                              contract.mint(recipient, mintedCoins,\n                                  {from:minter,\n                                   gas:200000});                   *2*\n                           },\n                           /VM Exception while processing transaction/\n                        );\n                        done();\n                    }\n            });\n     });\n});\n```", "```\nassert.throws(\n       ()=> contract.functionBeingTested(),\n     /Expected exception/\n);\n```", "```\n    function transfer(address _to, uint256 _amount) public {\n        require(_to != 0x0); \n        require(coinBalance[msg.sender] > _amount);\n        require(coinBalance[_to] + _amount >= coinBalance[_to] );\n        coinBalance[msg.sender] -= _amount;  \n        coinBalance[_to] += _amount;   \n        Transfer(msg.sender, _to, _amount);  \n    }\n```", "```\nrequire(coinBalance[msg.sender] > _amount);\n```", "```\ndescribe('transfer', function() {\n  it('Cannot transfer a number of tokens higher than that of tokens owned', \n    function(done) {\n     //arrange \n     let sender = web3.eth.accounts[1];\n     let initialSupply = 10000;\n     let recipient = web3.eth.accounts[2];\n     let tokensToTransfer = 12000;                             *1*\n\n     let simpleCoinInstance =\n       SimpleCoinContractFactory.new(initialSupply, {\n         from: sender, data: bytecode, gas: gasEstimate}, \n         function (e, contract){\n           if (typeof contract.address !== 'undefined') {\n           //act and assert\n           assert.throws(                                      *2*\n            ()=>{\n               contract.transfer(recipient, tokensToTransfer, {\n               from:sender, gas:200000});\n            },\n            /VM Exception while processing transaction/        *3*\n           );\n           done();\n          }\n       });\n    });\n});\n```", "```\nit('Successful transfer: final sender and recipient balances are correct', \n  function(done) {\n    //arrange \n    let sender = web3.eth.accounts[1];\n    let initialSupply = 10000;\n    let recipient = web3.eth.accounts[2];\n    let tokensToTransfer = 200;                         *1*\n\n    let simpleCoinInstance = \n      SimpleCoinContractFactory.new(initialSupply, {\n        from: sender, data: bytecode, gas: gasEstimate},\n        function (e, contract){\n          if (typeof contract.address !== 'undefined') {\n\n            //act\n            contract.transfer(recipient, tokensToTransfer, {\n              from:sender,gas:200000});\n\n            //assert\n            const expectedSenderBalance = 9800;         *2*\n            const expectedRecipientBalance = 200;       *2*\n\n            let actualSenderBalance = \n              contract.coinBalance(sender);             *3*\n            let actualRecipientBalance = \n              contract.coinBalance(recipient);          *3*\n\n            assert.equal(actualSenderBalance, \n                       expectedSenderBalance);          *4*\n            assert.equal(actualRecipientBalance, \n                       expectedRecipientBalance);       *4*\n\n            done();\n        }\n     });\n});\n```", "```\nC:\\Ethereum\\mocha\\SimpleCoin>npm test SimpleCoinTests.js \n```", "```\n    function authorize(address _authorizedAccount, uint256 _allowance) \n        public returns (bool success) {\n        allowance[msg.sender][_authorizedAccount] = _allowance; \n        return true;\n    }\n```", "```\ndescribe('authorize', function() {\n  it('Successful authorization: the allowance of the authorized \n      account is set correctly', \n    function(done) {\n      //arrange \n      let sender = web3.eth.accounts[1];\n      let initialSupply = 10000;\n      let authorizer = web3.eth.accounts[2];\n      let authorized = web3.eth.accounts[3];\n      let allowance = 300;                                             *1*\n\n      let simpleCoinInstance = SimpleCoinContractFactory.new(\n         initialSupply, {\n        from: sender, data: bytecode, gas: gasEstimate}, \n        function (e, contract){\n           if (typeof contract.address !== 'undefined') {\n\n                 //act\n             let result = contract.authorize(authorized, allowance, {\n               from:authorizer,gas:200000});                           *2*\n\n             //assert\n             assert.equal(contract.allowance(authorizer, \n                       authorized), 300);                              *3*\n             done();\n                    }\n            });\n    });\n });\n```", "```\n    function transferFrom(address _from, address _to, uint256 _amount) \n        public returns (bool success) {\n        require(_to != 0x0);  \n        require(coinBalance[_from] > _amount); \n        require(coinBalance[_to] + _amount >= coinBalance[_to] ); \n        require(_amount <= allowance[_from][msg.sender]);  \n        coinBalance[_from] -= _amount; \n        coinBalance[_to] += _amount; \n        allowance[_from][msg.sender] -= _amount;\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n```", "```\nC:\\Ethereum\\mocha\\SimpleCoin>npm test SimpleCoinTests.js\n```", "```\nC:>npm install -g truffle@4.1.15\n```", "```\nC:\\Ethereum\\Truffle\\SimpleCoin\n```", "```\nC:\\>cd Ethereum\\Truffle\\SimpleCoin\n```", "```\nC:\\Ethereum\\Truffle\\SimpleCoin>truffle init\n```", "```\n/contracts\n    Migrations.sol\n/migrations\n    1_initial_migration.js\n/test\ntruffle.js\ntruffle-config.js\n```", "```\npragma solidity ^0.4.23;\n\ncontract Migrations {\n  address public owner;\n  uint public last_completed_migration;\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  modifier restricted() {\n    if (msg.sender == owner) _;\n  }\n\n  function setCompleted(uint completed) public restricted {\n    last_completed_migration = completed;\n  }\n\n  function upgrade(address new_address) public restricted {\n    Migrations upgraded = Migrations(new_address);\n    upgraded.setCompleted(last_completed_migration);\n  }\n}\n```", "```\nC:\\Ethereum\\Truffle\\SimpleCoin>truffle compile\n```", "```\nCompiling .\\contracts\\SimpleCoin.sol...\nWriting artifacts to .\\build\\contracts\n```", "```\nC:\\Ethereum\\Truffle\\SimpleCoin>npm uninstall truffle -g\n```", "```\nC:\\Ethereum\\Truffle\\SimpleCoin>npm install truffle@4.1.15 -g\n```", "```\nconstructor() public {\n  owner = msg.sender;\n}\n```", "```\nfunction Migrations() public {\n  owner = msg.sender;\n}\n```", "```\nC:\\Ethereum\\truffle\\SimpleCoin>truffle compile\nCompiling .\\contracts\\Migrations.sol...\nWriting artifacts to .\\build\\contracts\n```", "```\nC:\\Ethereum\\Truffle\\SimpleCoin>npm install solc@0.4.24\n```", "```\nvar SimpleCoin = artifacts.require(\"SimpleCoin\")       *1*\n\nmodule.exports = function(deployer) {                  *2*\n    deployer.deploy(SimpleCoin, 10000);                *3*\n\n};\n```", "```\nvar Migrations = artifacts.require(“Migrations”)   \n\nmodule.exports = function(deployer) { \n    deployer.deploy(Migrations);\n};\n```", "```\nC:\\>cd Ethereum\\Truffle\\SimpleCoin\n```", "```\nC:\\Ethereum\\truffle\\SimpleCoin>npm install -g ganache-cli@6.1.8\n```", "```\nC:\\>cd Ethereum\\Truffle\\SimpleCoin>ganache-cli\n```", "```\nmodule.exports = {\n  networks: {\n    development: {\n      host: \"localhost\",\n      port: 8545,\n      network_id: \"*\" // Match any network id\n    }\n  }\n};\n```", "```\nmodule.exports = {\n  networks: {\n    development: {\n      host: \"localhost\",\n      port: 8545,\n      from: \"0xf17f52151ebef6c7334fad080c5704d77216b732\",   *1*\n      network_id: \"*\" // Match any network id\n    }\n  }\n};\n```", "```\nC\\Ethereum\\Truffle\\SimpleCoin>truffle migrate\n```", "```\nUsing network 'development'.\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... 0x5823254426b34ec4220be899669e562d4691a72fa68fa1956a8eb87f9f431982\n  Migrations: 0x8cdaf0cd259887258bc13a92c0a6da92698644c0\nSaving successful migration to network...\n  ... 0xd7bc86d31bee32fa3988f1c1eabce403a1b5d570340a3a9cdba53a472ee8c956\nSaving artifacts...\nRunning migration: 2_deploy_contracts.js\n  Deploying SimpleCoin...\n  ... 0x21c4120f9f231ea5563c2a988de55440139ba087651d3d292f06ae65434580f7\n  SimpleCoin: 0x345ca3e014aaf5dca488057592ee47305d9b3e10\nSaving successful migration to network...\n  ... 0xf36163615f41ef7ed8f4a8f192149a0bf633fe1a2398ce001bf44c43dc7bdda0\nSaving artifacts...\n```", "```\nC\\Ethereum\\Truffle\\SimpleCoin>truffle develop\n```", "```\nmodule.exports = {\n  networks: {\n    development: {\n      host: \"localhost\",\n      port: 9545,\n      network_id: \"*\" // Match any network id\n    }\n  }\n};\n```", "```\nTruffle(develop)>migrate\n```", "```\nmodule.exports = {\n    networks: {\n       development: {\n       host: \"localhost\",\n       port: 8545,\n       network_id: \"*\"\n    },\n    live: {\n        host: \"localhost\", \n        port: 80,\n        network_id: 1,        \n    },\n    ropsten: {\n        host: \"localhost\", \n        port: 80,\n        network_id: 3,        \n    }  \n}};\n```", "```\nnew Web3.providers.HttpProvider(\"http://<host>:<port>\")\n```", "```\nnetworks: {\n  ...\n  ropsten: {\n    provider: new HDWalletProvider(mnemonic, \"https://ropsten.infura.io/\"),\n    network_id: '3',\n  },\n  ...\n```", "```\nC\\Ethereum\\Truffle\\SimpleCoin>truffle migrate --network ropsten\n```", "```\nC\\Ethereum\\Truffle\\SimpleCoin>truffle migrate --network live\n```", "```\npragma solidity ^0.4.2;\n\nimport \"Truffle/Assert.sol\";                                  *1*\nimport \"Truffle/DeployedAddresses.sol\";                       *2*\nimport \"../contracts/SimpleCoin.sol\";                         *3*\n\ncontract TestSimpleCoin {                                     *4*\n\n  function testInitialBalanceUsingDeployedContract() public {\n    SimpleCoin simpleCoin = SimpleCoin(\n      DeployedAddresses.SimpleCoin());                        *5*\n\n    uint expected = 10000;\n\n    Assert.equal(simpleCoin.coinBalance(tx.origin), expected, \n      \"Owner should have 10000 SimpleCoin initially\");        *6*\n  }\n}\n```", "```\nC\\Ethereum\\Truffle\\SimpleCoin>truffle test \n```", "```\nUsing network 'development'.\n\nCompiling .\\contracts\\SimpleCoin.sol...\nCompiling .\\test\\TestSimpleCoin.sol...\nCompiling Truffle/Assert.sol...\nCompiling Truffle/DeployedAddresses.sol...\n\n  TestSimpleCoin\n    √ testInitialBalanceUsingDeployedContract (48ms)\n\n  1 passing (530ms)\n```", "```\nvar assert = require('assert');\n\nconst source = fs.readFileSync('c:/Ethereum/mocha/SimpleCoin/SimpleCoin.sol', 'utf8');\nconst compiledContract = solc.compile(source, 1);\nconst abi = compiledContract.contracts[':SimpleCoin'].interface;\nconst bytecode = '0x' + compiledContract.contracts[':SimpleCoin'].bytecode;\nconst gasEstimate = web3.eth.estimateGas({ data: bytecode }) + 100000;\n\nconst SimpleCoinContractFactory = web3.eth.contract(JSON.parse(abi));\n\ndescribe('SimpleCoin', function() {\n  this.timeout(5000);\n  describe('SimpleCoin constructor', function() { \n    it('Contract owner is sender', function(done) {\n\n        //arrange \n        let sender = web3.eth.accounts[1]; \n        let initialSupply = 10000; \n\n        //act\n        let simpleCoinInstance = SimpleCoinContractFactory.new(initialSupply, { \n            from: sender, data: bytecode, gas: gasEstimate}, \n            function (e, contract){ \n            if (typeof contract.address !== 'undefined') {\n                //assert\n                assert.equal(contract.owner(), sender);\n                done();\n            }\n            });\n    });\n });\n});\n```", "```\nconst SimpleCoin = artifacts.require(\n   \"./SimpleCoin.sol\");                                 *1*\n\ncontract('SimpleCoin', function(accounts) {             *2*\n  contract('SimpleCoin.Constructor', \n    function(accounts) {                                *3*\n    it(\"Contract owner is sender\", \n       function() {                                     *4*\n       return SimpleCoin.deployed()                     *5*\n       .then(function(instance) {                       *6*\n           return instance.owner();                     *7*\n        })\n       .then(function(contractOwner) {                  *8*\n          assert.equal(contractOwner.valueOf(), \n          accounts[0],                                  *9*\n          \"accounts[0] wasn't the contract owner\");     *10*\n       });\n    });\n  });\n});\n```", "```\nC:\\Ethereum\\Truffle\\SimpleCoin>Truffle test\nUsing network 'development'.\n\nCompiling .\\contracts\\SimpleCoin.sol...\nCompiling .\\test\\TestSimpleCoin.sol...\nCompiling Truffle/Assert.sol...\nCompiling Truffle/DeployedAddresses.sol...\n\n  TestSimpleCoin\n    √ testInitialBalanceUsingDeployedContract (49ms)\n\n  Contract: SimpleCoin\n    Contract: SimpleCoin.Constructor\n      √ Contract owner is sender\n\n  2 passing (1s)\n```", "```\nit(\"Contract owner balance is equal to initialSupply\", function() {\n    return SimpleCoin.deployed()\n    .then(function(instance) {\n        return instance.coinBalance(accounts[0]);\n    }).then(function(contractOwnerBalance) {\n        assert.equal(contractOwnerBalance.valueOf(), \n          10000, \n          \"the contract owner balance is not equal to the full supply of \n 10000\");\n    });\n});  \n```", "```\nC:\\Ethereum\\Truffle\\SimpleCoin>Truffle test\n```", "```\n  TestSimpleCoin\n\n    √ testInitialBalanceUsingDeployedContract (49ms)\n\n  Contract: SimpleCoin\n\n    Contract: SimpleCoin.Constructor\n\n      √ Contract owner is sender\n\n      √ Contract owner balance is equal to initialSupply\n\n  3 passing (1s)\n```", "```\nconst SimpleCoin = artifacts.require(\"./SimpleCoin.sol\");\n\ncontract('SimpleCoin', function(accounts) {\n  contract('SimpleCoin.Constructor', function(accounts) {\n    it(\"Contract owner is sender\", async function() {\n\n      let simpleCoinInstance = \n        await SimpleCoin.deployed();                     *1*\n      let contractOwner = \n        await simpleCoinInstance.owner();                *2*\n\n      assert.equal(contractOwner.valueOf(), \n         accounts[0], \n         \"accounts[0] wasn't the contract owner\");       *3*\n        });\n    });\n});\n```", "```\nC:\\Ethereum\\Truffle\\SimpleCoin>truffle test\n```", "```\nUsing network 'development'.\n\n  Contract: SimpleCoin\n    Contract: SimpleCoin.Constructor\n      √ Contract owner is sender\n\n  1 passing (53ms)\n```", "```\nit(\"Contract owner balance is equal to initialSupply\", async function() {\n    let simpleCoinInstance = await SimpleCoin.deployed();\n    let contractOwnerBalance = \n        await simpleCoinInstance.coinBalance(accounts[0]);\n\n    assert.equal(contractOwnerBalance.valueOf(), \n        10000, \n        \"the contract owner balance is not equal to the full supply of \n 10000\");\n});\n```", "```\ncontract('SimpleCoin.transfer', function(accounts) {\n  it(\"Succesful transfer: final sender and recipient balances are correct\", function() {\n    //arrange \n    let sender = web3.eth.accounts[0];\n    let recipient = web3.eth.accounts[1];\n    let tokensToTransfer = 200;\n\n    const expectedSenderBalance = 9800;\n    const expectedRecipientBalance = 200;\n\n    //act\n    return SimpleCoin.deployed()                            *1*\n    then(function(instance) {\n      simpleCoin = instance;\n        return simpleCoin.transfer(recipient, \n               tokensToTransfer, {from: sender});           *2*\n    }).then(function() {\n         return simpleCoin.coinBalance(sender);             *3*\n    }).then(function(balance) {\n         sender_ending_balance = balance.toNumber();        *4*\n         return simpleCoin.coinBalance(recipient);          *5*\n    }).then(function(balance) {\n         recipient_ending_balance = balance.toNumber();     *6*\n\n      //assert\n      assert.equal(sender_ending_balance, \n          expectedSenderBalance, \n             \"Amount wasn't correctly taken from the sender\");\n      assert.equal(recipient_ending_balance, \n          expectedRecipientBalance, \n             \"Amount wasn't correctly sent to the receiver\");\n    });                                           \n  });               \n});\n```", "```\ncontract('SimpleCoin.transfer', function(accounts) {\n  it(\"Succesful transfer: final sender and recipient balances are correct\", \n async function() {\n    //arrange \n    let sender = web3.eth.accounts[0];\n    let recipient = web3.eth.accounts[1];\n    let tokensToTransfer = 200;\n\n    const expectedSenderBalance = 9800;\n    const expectedRecipientBalance = 200;\n\n    let simpleCoinInstance = await SimpleCoin.deployed();\n\n    //act\n    await simpleCoinInstance.transfer(recipient, \n        tokensToTransfer, {from: sender});\n    let sender_ending_balance = \n        await simpleCoinInstance.coinBalance(sender);    \n     let recipient_ending_balance = \n        await simpleCoinInstance.coinBalance(recipient);                \n\n    //assert\n    assert.equal(sender_ending_balance.valueOf(), \n        expectedSenderBalance, \n        \"Amount wasn't correctly taken from the sender\");\n    assert.equal(recipient_ending_balance.valueOf(), \n        expectedRecipientBalance, \n        \"Amount wasn't correctly sent to the receiver\");\n\n  });               \n});\n```", "```\nC:\\Ethereum\\truffle\\SimpleVoting>truffle init \n```", "```\nmodule.exports = {\n  networks: {\n    development: {\n      host: \"localhost\",\n      port: 8545,\n      network_id: \"*\" // Match any network id\n    }\n  }\n};\n```", "```\nstruct Proposal {\n    string description;   \n    uint voteCount; \n}\n```", "```\nstruct Voter {\n    bool isRegistered;\n    bool hasVoted;  \n    uint votedProposalId;   \n}\n```", "```\nenum WorkflowStatus {\n    RegisteringVoters, \n    ProposalsRegistrationStarted,\n    ProposalsRegistrationEnded,\n    VotingSessionStarted,\n\n    VotingSessionEnded,\n    VotesTallied\n}\n```", "```\naddress public administrator;\n```", "```\nWorkflowStatus public workflowStatus;\n```", "```\n    mapping(address => Voter) public voters;\n    ```", "```\n    Proposal[] public proposals;\n    ```", "```\nuint private winningProposalId;\n```", "```\nmodifier onlyAdministrator() {\n    require(msg.sender == administrator, \n      \"the caller of this function must be the administrator\");\n    _;\n }\n```", "```\n modifier onlyRegisteredVoter() {\n    require(voters[msg.sender].isRegistered, \n      \"the caller of this function must be a registered voter\");\n    _;\n  }\n```", "```\n modifier onlyDuringVotersRegistration() {\n    require(workflowStatus == WorkflowStatus.RegisteringVoters, \n      \"this function can be called only before proposals registration has \n started\");\n    _;\n }    \n```", "```\nmodifier onlyDuringProposalsRegistration() {\n   require(workflowStatus == WorkflowStatus.ProposalsRegistrationStarted, \n     \"this function can be called only during proposals registration\");\n   _;\n}\n```", "```\nevent VoterRegisteredEvent (address voterAddress); \nevent ProposalsRegistrationStartedEvent ();\nevent ProposalsRegistrationEndedEvent ();\nevent ProposalRegisteredEvent(uint proposalId);\nevent VotingSessionStartedEvent ();\nevent VotingSessionEndedEvent ();\nevent VotedEvent (address voter, uint proposalId);\nevent VotesTalliedEvent ();\n\nevent WorkflowStatusChangeEvent (\n   WorkflowStatus previousStatus,\n   WorkflowStatus newStatus\n);\n```", "```\nconstructor() public {\n    administrator = msg.sender;\n    workflowStatus = WorkflowStatus.RegisteringVoters;\n}\n```", "```\nfunction registerVoter(address _voterAddress) \n    public onlyAdministrator onlyDuringVotersRegistration {\n\n    require(!voters[_voterAddress].isRegistered, \n       \"the voter is already registered\");\n\n    voters[_voterAddress].isRegistered = true;\n    voters[_voterAddress].hasVoted = false;\n    voters[_voterAddress].votedProposalId = 0;\n\n    emit VoterRegisteredEvent(_voterAddress);\n}\n```", "```\nfunction startProposalsRegistration() \n    public onlyAdministrator onlyDuringVotersRegistration {\n    workflowStatus = WorkflowStatus. ProposalsRegistrationStarted;\n\n    emit ProposalsRegistrationStartedEvent();\n    emit WorkflowStatusChangeEvent(\n        WorkflowStatus. RegisteringVoters, workflowStatus);\n}\n\nfunction endProposalsRegistration() \n    public onlyAdministrator onlyDuringProposalsRegistration {\n    workflowStatus = WorkflowStatus.ProposalsRegistrationEnded;\n\n    emit ProposalsRegistrationEndedEvent();        \n    emit WorkflowStatusChangeEvent(\n        WorkflowStatus.ProposalsRegistrationStarted, workflowStatus);\n}\n```", "```\nfunction registerProposal(string proposalDescription) \n   public onlyRegisteredVoter \n      onlyDuringProposalsRegistration {           *1*\n   proposals.push(Proposal({                      *2*\n        description: proposalDescription,\n        voteCount: 0\n    }));\n\n   emit ProposalRegisteredEvent(proposals.length - 1);\n}\n```", "```\nfunction vote(uint proposalId) \n    onlyRegisteredVoter \n    onlyDuringVotingSession public {                   *1*\n    require(!voters[msg.sender].hasVoted, \n      \"the caller has already voted\");                 *2*\n\n    voters[msg.sender].hasVoted = true;                *3*\n    voters[msg.sender].votedProposalId = proposalId;   *3*\n\n    proposals[proposalId].voteCount += 1;              *4*\n\n    emit VotedEvent(msg.sender, proposalId);\n}\n```", "```\nfunction tallyVotes() \n    onlyAdministrator \n    onlyAfterVotingSession \n    onlyBeforeVotesTallied public {                           *1*\n    uint winningVoteCount = 0;\n    uint winningProposalIndex = 0;\n\n    for (uint i = 0; i < proposals.length; i++) {             *2*\n        if (proposals[i].voteCount > winningVoteCount) {\n           winningVoteCount = proposals[i].voteCount;\n           winningProposalIndex = i;                          *3*\n        }\n    }\n\n    winningProposalId = winningProposalIndex;                 *4*\n    workflowStatus = WorkflowStatus.VotesTallied;             *5*\n\n    emit VotesTalliedEvent();\n    emit WorkflowStatusChangeEvent(\n        WorkflowStatus. VotingSessionEnded, workflowStatus);   *6*\n}\n```", "```\nfunction getProposalsNumber() public view\n    returns (uint) {\n        return proposals.length;\n}\n\nfunction getProposalDescription(uint index) public view \n    returns (string) {\n        return proposals[index].description;\n}  \n```", "```\nfunction getWinningProposalId() onlyAfterVotesTallied \n    public view\n        returns (uint) {\n        return winningProposalId;\n}\n\nfunction getWinningProposalDescription() onlyAfterVotesTallied \n    public view\n        returns (string) {\n        return proposals[winningProposalId].description;\n}  \n\nfunction getWinningProposalVoteCounts() onlyAfterVotesTallied \n    public view\n        returns (uint) {\n        return proposals[winningProposalId].voteCount;\n}\n```", "```\nfunction isRegisteredVoter(address _voterAddress) public view\n    returns (bool) {\n    return voters[_voterAddress].isRegistered;\n}\n```", "```\nfunction isAdministrator(address _address) public view \n    returns (bool){\n    return _address == administrator;\n}\n```", "```\nfunction getWorkflowStatus() public view\n    returns (WorkflowStatus) {\n    return workflowStatus;       \n}\n```", "```\nvar SimpleVoting = artifacts.require(\"SimpleVoting\");\n\nmodule.exports = function(deployer) {\n  deployer.deploy(SimpleVoting);\n};\n```", "```\nC:\\Ethereum\\Truffle\\SimpleVoting>truffle compile\n```", "```\nCompiling .\\contracts\\SimpleVoting.sol...\nWriting artifacts to .\\build\\contracts\n```", "```\nC:\\Ethereum\\truffle\\SimpleVoting>ganache-cli\n```", "```\nC:\\Ethereum\\truffle\\SimpleVoting>truffle migrate\n```", "```\nUsing network 'development'.\n\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... 0xf3ab00eef045a34e2208f6f4dfa218950f7d1a0d30f3f32982febdff55db6a92\n  Migrations: 0x2f90a477697c9a0144acf862ab7dd98372dd7b33\nSaving successful migration to network...\n  ... 0x7af1903172cab2baac3c05f7ff721c8c54aa0f9f34ad64c3a26495bb591c36c9\nSaving artifacts...\nRunning migration: 2_deploy_contracts.js\n  Deploying SimpleVoting...\n  ... 0x37ecb76d6cd6051c5d122df53db0063d1336e5b3298150b50d62e8ae845e9bbb\n  SimpleVoting: 0xaf18e4e373b90709cc08a231ce24015a0da4f8cc\nSaving successful migration to network...\n  ... 0x19ac99d629c4053bf699c34c83c47288666afe6fa8994b90438d0e78ec204c96\nSaving artifacts...\n```", "```\nconst SimpleVoting = artifacts.require(\"./SimpleVoting.sol\");\n\ncontract('SimpleVoting', function(accounts) {     \n  contract('SimpleVoting.endProposalRegistration - \n    onlyAdministrator modifier ', \n    function(accounts) {\n     it(\"The voting administrator should be able to end the proposal \n registration session only after it has started\", \n       async function() {                                              *1*\n       //arrange \n       let simpleVotingInstance = await SimpleVoting.deployed();\n       let votingAdministrator = await simpleVotingInstance.administrator();\n\n       let nonVotingAdministrator = web3.eth.accounts[1];     \n\n       try {\n            //act\n            await simpleVotingInstance.endProposalsRegistration(\n\n              {from: nonVotingAdministrator});\n            assert.isTrue(false);                                      *2*\n       }\n       catch(e) {\n            //assert\n            assert.isTrue(votingAdministrator != nonVotingAdministrator);\n            assert.equal(e, \"Error: VM Exception while processing \n transaction: revert - the caller of this function \n must be the administrator\");                                        *3*\n       }\n     });\n  });\n\n  contract('SimpleVoting.endProposalRegistration - \n    onlyDuringProposalsRegistration modifier', \n    function(accounts) {\n     it(\"An account that is not the voting administrator must not be able \n to end the proposal registration session\", \n       async function() {                                              *4*\n       //arrange \n       let simpleVotingInstance = await SimpleVoting.deployed();\n       let votingAdministrator = await simpleVotingInstance.administrator();\n\n       try {\n         //act\n            await simpleVotingInstance.endProposalsRegistration(\n              {from: votingAdministrator});\n            assert.isTrue(false);                                      *5*\n       }\n       catch(e) {\n            //assert\n            assert.equal(e, \"Error: VM Exception while processing \n transaction: revert - this function can be called only \n during proposals registration\");                                    *6*\n       }\n     });                                   \n  });\n\n  contract('SimpleVoting.endProposalRegistration - successful', \n    function(accounts) {\n     it(\"An account that is not the voting administrator must \n not be able to end the proposal registration session\", \n       async function() {                                              *7*\n       //arrange \n       let simpleVotingInstance = await SimpleVoting.deployed();\n       let votingAdministrator = await simpleVotingInstance.administrator();\n\n       await simpleVotingInstance.startProposalsRegistration(\n          {from: votingAdministrator});\n       let workflowStatus = await simpleVotingInstance.getWorkflowStatus();\n       let expectedWorkflowStatus = 1;\n\n       assert.equal(workflowStatus.valueOf(), expectedWorkflowStatus, \n          \"The current workflow status does not correspond \n to proposal registration session started\"); \n\n       //act\n       await simpleVotingInstance.endProposalsRegistration(\n         {from: votingAdministrator});\n       let newWorkflowStatus = await simpleVotingInstance\n         .getWorkflowStatus();\n       let newExpectedWorkflowStatus = 2;\n\n       //assert\n       assert.equal(newWorkflowStatus.valueOf(), newExpectedWorkflowStatus,\n         \"The current workflow status does not correspond \n            to proposal registration session ended\");                *8*\n\n       });\n     });\n});\n```", "```\nC:\\Ethereum\\truffle\\SimpleVoting>truffle test\n```", "```\nC:\\Ethereum\\SimpleVotingWebUI>npm install bower\n```", "```\nC:\\Ethereum\\SimpleVotingWebUI>bower install web3#0.20.6\n\nC:\\Ethereum\\SimpleVotingWebUI>bower install jquery\n\nC:\\Ethereum\\SimpleVotingWebUI>bower install truffle-contract\n```", "```\nbower_components\n   |-- web3\n   |-- jquery\n   |-- truffle-contract\n```", "```\nvar abi = \"[{\\\"constant\\\":false,\\\"inputs\\\":[{\\\"name\\\":\\\"_to...\nvar SimpleCoinFactory = web3.eth.contract(JSON.parse(abi));\nvar simpleCoinInstance = SimpleCoinFactory.at('0x773dc5fc8fc3e...');\n```", "```\nwindow.onload = function() {\n     $.getJSON(\"./contracts/SimpleVoting.json\", function(json) {\n         SimpleVoting = TruffleContract( json );         \n       ...\n```", "```\nC:\\Ethereum\\SimpleVotingWebUI>npm install connect serve-static\n```", "```\nvar connect = require('connect');\nvar serveStatic = require('serve-static');\nconnect().use(serveStatic(__dirname)).listen(8080, function(){\n    console.log('Web server running on 8080...');\n});\n```", "```\nC:\\Ethereum\\SimpleVotingWebUI>node webserver.js\n```", "```\nServer running on 8080...\n```", "```\n<html>\n<table><tr><td><b>test</b></td></tr></table>\n</html>\n```", "```\n<head>   \n     <script src=\"bower_components/web3/dist/web3.min.js\"></script>\n     <script src=\"bower_components/jquery/dist/jquery.min.js\"></script>\n     <script src=\"bower_components/truffle-contract/dist/truffle-contract.js\"></script>     \n     <script src=\"./simplevoting.js\"></script>\n</head>\n```", "```\n<table border=\"0\" cellpadding=\"0\" id='currentStatus'> \n     <tr>\n            <td><b>Current status:</b></td>\n\n                        <td id='currentWorkflowStatusMessage'></td>\n            <td></td>\n            <td></td>\n     </tr>     \n</table>\n```", "```\n<table border=\"0\" cellpadding=\"0\" id='user'> \n     <tr>\n         <td><b>Admin address:</b></td>\n         <td><input type=\"text\" id=\"adminAddress\" width=\"400\" /></td>\n         <td><b>password:</b></td>\n         <td><input type=\"text\" id=\"adminPassword\" width=\"400\" /></td>\n         <td><button onclick=\"unlockAdmin()\">Unlock account</button></td>\n         <td id='adminMessage'></td>\n      </tr>     \n</table>\n```", "```\n<td>Voter address:</td>\n<td><input type=\"text\" id=\"voterAddress\" width=\"400\" /></td>\n```", "```\n<td><button onclick=\"registerVoter()\">Register</button></td>\n```", "```\n<table border=\"0\" cellpadding=\"0\" id='proposalsRegistration'> \n     <tr>\n         <td><button onclick=\"startProposalsRegistration()\">Start</button></td>\n <td><button onclick=\"endProposalsRegistration()\">End</button></td>\n <td id='proposalsRegistrationMessage'></td>\n      </tr>     \n</table>\n```", "```\n<td id='voterRegistrationMessage'></td>\n```", "```\n    \"networks\": {\n        \"1526138147842\": {      \"events\": {},\n          \"links\": {},\n          \"address\": \"0xaf18e4e373b90709cc08a231ce24015a0da4f8cc\",\n          \"transactionHash\":\n           \"0x37ecb76d6cd6051c5d122df53db0063d1336e5b3298150b50d62e8ae845e9bbb\"\n        },\n       ...\n        \"1526683622193\": {                                    *1*\n          \"events\": {},\n          \"links\": {},\n          \"address\": \n             \"0xdaef7d6211bc0c0639178f442c68f468494b7ea2\",    *2*\n          \"transactionHash\":\n           \"0xea66f69e35ccc77845405dbc183fc0c3ce831cd977f74c5152d6f97a55ebd8af\"\n    }\n    ```", "```\nvar SimpleVoting;                                    *1*\n\nwindow.onload = function() {\n\n     $.getJSON(\"./contracts/SimpleVoting.json\", \n         function(json) {                            *2*\n         SimpleVoting = TruffleContract( json );     *3*\n\n            SimpleVoting.setProvider(\n               new Web3.providers.HttpProvider(\n                 \"http://localhost:8545\"));          *4*\n```", "```\nhttp//localhost:8080/admin.html\n```", "```\nfunction refreshWorkflowStatus()\n{          \n    SimpleVoting.deployed()                                *1*\n    .then(instance => instance.getWorkflowStatus())        *2*\n    .then(workflowStatus => {\n       var workflowStatusDescription;\n\n       switch(workflowStatus.toString())                   *3*\n       {\n          case '0':\n             workflowStatusDescription = \"Registering Voters\";\n             break;\n          case '1':\n             workflowStatusDescription = \"Proposals Registration Started\";\n             break;\n          ...     \n          default:\n               workflowStatusDescription = \"Unknown Status\";\n      }\n\n    $(\"#currentWorkflowStatusMessage\").html(\n     workflowStatusDescription);                           *4*\n     });\n}\n```", "```\n$.getJSON(\"./contracts/SimpleVoting.json\", function(json) { ...\n\n    ...\n    refreshWorkflowStatus();\n});\n```", "```\nfunction unlockAdmin()\n{\n     var adminAddress = $(\"#adminAddress\").val();\n     var adminPassword = $(\"#adminPassword\").val();\n\n     var result = web3.personal.unlockAccount(\n        adminAddress, adminPassword, 180);               *1*\n     if (result)\n            $(\"#adminMessage\").html('The account has been unlocked');\n     else\n            $(\"#adminMessage\").html('The account has NOT been unlocked');\n}\n```", "```\n<td><button onclick=\"unlockAdmin()\">Unlock account</button></td>\n```", "```\nfunction registerVoter() \n{\n...\nunlockAdmin(adminAddress, adminPassword);\nSimpleVoting.deployed()                         \n.then(instance => instance.registerVoter(voterToRegister, ...\n```", "```\nfunction registerVoter() {\n\n   $(\"#voterRegistrationMessage\").html('');\n   var adminAddress = \n      $(\"#adminAddress\").val();                             *1*\n   var voterToRegister = \n      $(\"#voterAddress\").val();                             *1*\n\n   SimpleVoting.deployed()\n   .then(instance => instance.isAdministrator(   \n       adminAddress))                                       *2*\n   .then(isAdministrator =>  {          \n       if (isAdministrator)\n       {\n          return SimpleVoting.deployed()\n          .then(instance => \n                 instance.isRegisteredVoter(\n                       voterToRegister))                    *3*\n          .then(isRegisteredVoter => {\n               if (isRegisteredVoter)\n                 $(\"#voterRegistrationMessage\")\n                    .html(\n                    'The voter is already registered');     *4*\n               else\n               {\n                ...\n               }\n            });\n       }\n       else\n       {\n          $(\"#voterRegistrationMessage\")\n               .html(\n               'The given address does not correspond \n                  to the administrator');                   *4*\n       }\n\n   });\n}\n```", "```\nreturn SimpleVoting.deployed()\n          .then(instance => instance.getWorkflowStatus())\n          .then(workflowStatus => {\n                 if (workflowStatus > 0)\n                    $(\"#voterRegistrationMessage\")\n                    .html('Voters registration has already ended');\n                 else\n          {\n          ...\n```", "```\nSimpleVoting.deployed()                         *1*\n.then(instance => instance.registerVoter(\n   voterToRegister,                             *2*\n       {from:adminAddress, gas:200000}))        *3*\n.catch(e => $(\"#voterRegistrationMessage\")\n   .html(e));                                   *4*\n```", "```\nvar workflowStatusChangeEvent;\n```", "```\nwindow.onload = function() {\n    $.getJSON(\"./contracts/SimpleVoting.json\", function(json) {\n    ...\n    SimpleVoting.deployed()\n    .then(instance => instance\n .WorkflowStatusChangeEvent())                     *1*\n    .then(workflowStatusChangeEventSubscription => {\n             workflowStatusChangeEvent = \n                workflowStatusChangeEventSubscription;\n\n       workflowStatusChangeEvent\n .watch(function(error, result){                *2*\n          if (!error)\n              refreshWorkflowStatus();                   *3*\n          else\n              console.log(error);\n       });                \n    });     \n   ...\n```", "```\nSimpleVoting.deployed()\n.then(instance => instance.VoterRegisteredEvent())\n.then(voterRegisteredEventSubscription => {\n       voterRegisteredEvent = voterRegisteredEventSubscription;     \n\n       voterRegisteredEvent.watch(function(error, result) {\n       if (!error)\n           $(\"#voterRegistrationMessage\")\n           .html('Voter successfully \n              registered');                 *1*\n       else\n          console.log(error);\n       });                 \n});\n```", "```\n<tr><table border=\"0\" cellpadding=\"0\" width=\"600\" id='proposalsTable'> </table></tr>\n```", "```\n...\nproposalRegisteredEvent.watch(function(error, result) {\n    if (!error)\n    {\n       $(\"#proposalRegistrationMessage\")\n         .html('The proposal has been \n            registered successfully');      *1*\n       loadProposalsTable();                *2*\n    }\n    else\n       console.log(error);\n});\n```", "```\nfunction loadProposalsTable() {\n     SimpleVoting.deployed()\n     .then(instance => instance.getProposalsNumber())\n     .then(proposalsNumber => {\n\n          var innerHtml = \"<tr><td><b>Proposal ID</b></td><td><b>Description</b></td></tr>\";\n\n          j = 0;\n          for (var i = 0; i < proposalsNumber; i++) {\n             getProposalDescription(i)\n             .then(description => {\n                 innerHtml = innerHtml + \"<tr><td>\" + (j++) + \n                     \"</td><td>\" + description + \"</td></tr>\";\n                 $(\"#proposalsTable\").html(innerHtml);\n         });\n         }\n    });          \n}\n\nfunction getProposalDescription(proposalId)\n{\n    return SimpleVoting.deployed()\n       .then(instance => instance.getProposalDescription(proposalId));\n}\n```", "```\nC:\\Ethereum\\truffle\\SimpleVoting>ganache-cli > c:\\temp\\ganache.log\n```", "```\nC:\\Ethereum\\truffle\\SimpleVoting>truffle migrate --reset\n```", "```\nC:\\Ethereum\\SimpleVotingWebUI>node webserver.js\nServer running on 8080...\n```", "```\nhttp://localhost:8080/admin.html\n```", "```\nGanache CLI v6.1.0 (ganache-core: 2.1.0)\n\nAvailable Accounts\n==================\n(0) 0xda53708da879dced568439272eb9a7fab05bd14a\n\n(1) 0xf0d14c6f6a185aaaa74010d510b975ca4caa1cad\n(2) 0x5d6449a4313a5d2dbf7ec326cb8ad204c97413ae\n...\n```", "```\nC:\\Program Files\\geth>geth --testnet –-bootnodes\n\"enode://145a93c5b1151911f1a232e04dd1a76708dd12694f952b8a180ced40e8c4d25a908\na292bed3521b98bdd843147116a52ddb645d34fa51ae7668c39b4d1070845@188.166.147\n.175:30303,enode://2609b7ee28b51f2f493374fee6a2ab12deaf886c5daec948f122bc837\n16aca27840253d191b9e63a6e7ec77643e69ae0d74182d6bb64fd30421d45aba82c13bd@13\n.84.180.240:30303,enode://94c15d1b9e2fe7ce56e458b9a3b672ef11894ddedd0c6f247e\n0f1d3487f52b66208fb4aeb8179fce6e3a749ea93ed147c37976d67af557508d199d9594c35f\n09@188.166.147.175:30303\" \n--verbosity=4 --syncmode \"fast\" --cache=1024 --rpc --rpcport 8545\n--rpccorsdomain \"http://localhost:8080\" --rpcapi \"eth,net,web3,personal\"\n```", "```\nmodule.exports = {\n  networks: {\n    development: {\n      host: \"localhost\",\n      port: 8545,\n      network_id: \"*\" // Match any network id\n    },\n    ropsten: {\n      host: \"localhost\", \n      port: 8545,                                    *1*\n      network_id: 3,    \n      from: \n \"0x70e36be8ab8f6cf66c0c953cf9c63ab63f3fef02\",     *2*\n      gas: 4000000                                   *3*\n    }      \n  }\n};\n```", "```\nC:\\Program Files\\geth>geth attach ipc:\\\\.\\pipe\\geth.ipc\n```", "```\n> web3.personal.unlockAccount(\"0x70e36be8ab8f6cf66c0c953cf9c63ab63f3fef02\", \"YOUR_PASSWORD\", 300);\ntrue\n```", "```\nC:\\Ethereum\\truffle\\SimpleVoting>truffle migrate --network ropsten\n```", "```\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... 0x8ec9c0b3e1d996dcd2f6f8b0ca07f8ce5e5d15bd0cc2eea3142f351f53070499\n  Migrations: 0xeaf67f4ce8a26aa432c106c2d59b7dbeaa3108d8\nSaving successful migration to network...\n  ... 0xadffddd1afe362a802fc6a80d9c60dc2e4a85f9e850ff3c252307ec9255988af\nSaving artifacts...\nRunning migration: 2_deploy_contracts.js\n  Deploying SimpleVoting...\n  ... 0xbe1ca60296cc8fb94a6e97c74bf6c20547b2ed7705e8db84d51e17f38904fa09\n  SimpleVoting: 0x3a437f22d092b6ae37d543dcb765de4366c00ecc\nSaving successful migration to network...\n  ... 0x37f90733539ba00f946ef18b456b5f7d6b362f93e639583d789acd36c033e5d2\nSaving artifacts...\n```", "```\nhttp://localhost:8080/admin.html\n```", "```\nSimpleVoting.setProvider(\n  new Web3.providers.HttpProvider(\n  \"http://localhost:8545\"));\n```", "```\nvar web3Provider;\nif(typeof web3 != 'undefined')\n     web3Provider = new Web3(web3.currentProvider);     *1*\nelse\n     web3Provider = new Web3(\n       new Web3.providers.HttpProvider(\n       \"http://localhost:8545\"));                       *2*\n\nSimpleVoting.setProvider(web3Provider);\n```", "```\n    Voter\n    {\n        HasVoted: boolean,\n        CanVote: Boolean,\n        NumVotes: int\n    }\n    ```", "```\n    delegateVote(address delegatedVoter)\n    ```", "```\n    uint quorum\n    ```"]