- en: Chapter 2
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章
- en: 'Enterprise Blockchains: Hyperledger, R3 Corda, Quorum, and Ethereum'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 企业区块链：Hyperledger、R3 Corda、Quorum 和 Ethereum
- en: 'In this chapter, I will cover the technical merits of the following enterprise
    blockchains, how they are structured, and where they fit into the enterprise:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将介绍以下企业区块链的技术优点，它们的结构以及它们在企业中的适用情况：
- en: Hyperledger
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hyperledger
- en: R3 Corda
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: R3 Corda
- en: Quorum
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Quorum
- en: Ethereum
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊
- en: The technical merits covered in this chapter include security, consensus, virtual
    machines, features, and functions that are critical to understanding the blockchain
    platform. This chapter will cover the architecture at a fundamental level so you
    can understand the blockchain network and services. In [Chapter 3](c03.xhtml),
    “Architecting Your Enterprise Blockchain,” I will focus on the steps of designing
    a blockchain network as well as architecture best practices for the specific blockchains.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的技术优点包括安全性、共识、虚拟机、功能和对理解区块链平台至关重要的功能。本章将从基本层面介绍架构，以便您了解区块链网络和服务。在第 3 章“构建企业区块链”中，我将专注于设计区块链网络的步骤以及特定区块链的架构最佳实践。
- en: '## Comparing Enterprise Blockchains'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '## 企业区块链比较'
- en: Blockchains are used in two main categories of IT solutions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链在两类主要的 IT 解决方案中使用。
- en: Public, permissionless blockchains
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公共、无许可的区块链
- en: Private, enterprise, permissioned blockchains
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私有、企业、许可的区块链
- en: A third approach, considered a hybrid solution, combines a myriad of private
    and public blockchain services. Hybrid blockchains will be discussed as a use
    case in [Chapter 8](c08.xhtml), “Blockchain Use Cases.”
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种方法被认为是混合解决方案，结合了多种私有和公共区块链服务。混合区块链将作为一个用例在“区块链应用案例”中进行讨论。
- en: Enterprise blockchains have different requirements than public blockchains such
    as Ethereum. I will be discussing the merits of enterprise blockchains throughout
    the book.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 企业区块链与以太坊等公共区块链有不同的要求。我将在本书中讨论企业区块链的优点。
- en: As discussed in [Chapter 1](c01.xhtml), “Introduction to Blockchain Technologies,”
    public permissionless blockchains use a networking protocol called the Internet
    Protocol (IP) to communicate with nodes on the blockchain network as well as to
    manage the distribution of transactions. Nodes are other virtual machines that
    are running the blockchain protocol.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在“区块链技术简介”中所讨论的，公共许可的区块链使用称为互联网协议（IP）的网络协议与区块链网络上的节点通信，以及管理交易的分发。节点是正在运行区块链协议的其他虚拟机。
- en: A blockchain will run a variation of protocols, and they can be somewhat different
    from each other on each platform. Ethereum uses a peer-to-peer network protocol,
    for example, whereas R3 Corda uses a point-to-point network protocol.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链将运行各种协议的变体，在每个平台上它们可能略有不同。例如，以太坊使用点对点网络协议，而 R3 Corda 使用点对点网络协议。
- en: Consensus is also vastly different between blockchains, and I will discuss this
    at a high level in this chapter. It will also be covered in more technical detail
    in [Chapter 4](c04.xhtml), “Understanding Enterprise Blockchain Solutions.”
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链之间的共识也有很大的不同，在本章中我将从高层次讨论这个问题。在第 4 章“理解企业区块链解决方案”中也会更详细地讨论这个问题。
- en: '[Table 1.2](c01.xhtml#c01-tbl-0002) shows how different public and private
    blockchains can be when it comes to the features and functions of the platform.
    Choosing the right blockchain platform may come down to just one feature.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[表格 1.2](c01.xhtml#c01-tbl-0002) 展示了不同的公共和私有区块链在平台的功能和功能方面可能有何不同。选择正确的区块链平台可能仅仅取决于一个功能。'
- en: '#### HYBRID BLOCKCHAINS'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 混合区块链'
- en: In a permissionless blockchain, the ledger is open read/write, meaning that
    anyone can access the transaction records. This would be done through a blockchain
    explorer, for example. Other features such as identity, security, and trust are,
    of course, handled differently.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在无许可的区块链中，账本是开放读/写的，这意味着任何人都可以访问交易记录。例如，这可以通过区块链浏览器完成。当然，其他功能如身份、安全性和信任处理方式也会有所不同。
- en: Enterprise blockchains such as Hyperledger Fabric, R3 Corda, and Quorum are
    distributed ledgers in which all participants are known and permissioned to be
    on the blockchain network. Transactions are role-based and determined by consensus
    in the network. Enterprise blockchains generally introduce a form of centralization
    to blockchains but may also be decentralized over a membership consortium. Modular
    components such as consensus or key management systems enable enterprises to determine
    what fits their use cases. Tokens or cryptocurrencies are generally not needed
    in a controlled blockchain ecosystem where membership is controlled. Some consortium
    blockchains such as Hyperledger may provide this capability later.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如 Hyperledger Fabric、R3 Corda 和 Quorum 等企业区块链是分布式分类帐，在其中所有参与者都是已知的，并且有权限加入区块链网络。交易是基于角色的，并由网络中的共识确定。企业区块链通常向区块链引入一种形式的中心化，但也可能在成员联盟中实现去中心化。诸如共识或密钥管理系统之类的模块化组件使企业能够确定符合其用例的内容。在一个受控的区块链生态系统中，会员资格受控，通常不需要代币或加密货币。一些联盟区块链，如
    Hyperledger，可能会在以后提供此功能。
- en: Enterprise blockchains can utilize “off-chain” data storage services, such as
    the Interplanetary File System (IPFS), to reduce costs. Created by Protocol Labs,
    IPFS is a peer-to-peer protocol where each node stores a collection of hashed
    files. IPFS is actually a fascinating approach to blockchain storage that can
    provide costing efficiencies and programmatic efficiencies. IPFS clearly refers
    to files by using hashes, therefore allowing for much richer programmatic interactions.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 企业区块链可以利用“链下”数据存储服务，例如星际文件系统（IPFS），以降低成本。IPFS 由 Protocol Labs 创建，是一种对等网络协议，其中每个节点都存储一组散列文件。IPFS
    实际上是一种引人入胜的区块链存储方法，可以提供成本效益和编程效率。IPFS 使用散列明确地引用文件，因此可以实现更丰富的编程交互。
- en: Enterprise integration may not require middleware or API changes to establish
    enterprise services. For example, with Enterprise Ethereum and Quorum, there is
    already some capability to extend the blockchain as a hybrid solution. A hybrid
    solution means that the blockchain can be extended from a permissioned to a permissionless
    chain such as Ethereum.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 企业集成可能不需要中间件或 API 更改来建立企业服务。例如，使用企业以太坊和 Quorum，已经具备了一定的能力将区块链作为混合解决方案进行扩展。混合解决方案意味着区块链可以从许可链扩展到无许可链，例如以太坊。
- en: 'Enterprise blockchains are generally accepted to fall into one of several categories,
    the most common of which are as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 企业区块链通常被认为属于以下几类之一，其中最常见的是：
- en: '*Private enterprise blockchains* are managed by a single organization. The
    participants are normally internal users.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*私有企业区块链*由单一组织管理。参与者通常是内部用户。'
- en: '*Consortium enterprise blockchains* are managed by multiple trusted organizations.
    Access requires consensus by multiple participants in the consortium.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*联盟企业区块链*由多个受信任的组织管理。访问需要联盟中多个参与者的共识。'
- en: '*Hybrid enterprise blockchains* are generally used for extended off-chain capabilities.
    Hybrid blockchains can be a myriad of private and public extensions.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*混合企业区块链*通常用于扩展链下能力。混合区块链可以是私有和公共扩展的多样化。'
- en: When considering blockchains from a presale's perspective, it is imperative
    that you understand the use cases for the different enterprise blockchains. Not
    every enterprise blockchain has the ability to meet every use case. I will now
    cover the major enterprises blockchains to give you an idea of how they actually
    compare and contrast. I cover each in more technical detail throughout the book
    and also compare and contrast these enterprise blockchain features and use cases.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从售前角度考虑区块链时，必须理解不同企业区块链的用例至关重要。并非每个企业区块链都能满足每个用例。我现在将介绍主要的企业区块链，让你了解它们的实际比较和对比。我将在本书中更详细地介绍每一个，并比较和对比这些企业区块链的特性和用例。
- en: The really convenient part of getting into the enterprise blockchain space today
    is that there aren't many enterprise blockchains to learn—no more than five, even
    if you include Ripple, which is a payment network for banks. I do not cover Ripple
    in depth in this chapter, mainly because it is a banking and payment network service
    and Ripple does not support smart contracts. Smart contracts provide essentially
    the main benefits for enterprise organizations around blockchain use cases.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 今天进入企业区块链领域的真正便利之处在于学习的企业区块链并不多——即使包括瑞波，这是面向银行的支付网络。我在本章中不会对瑞波进行深入介绍，主要是因为它是一种银行和支付网络服务，并且瑞波不支持智能合约。智能合约实质上为企业组织在区块链用例中提供了主要的好处。
- en: Instead, this book will focus on Hyperledger, R3 Corda, Quorum, and Ethereum.
    [Table 2.1](#c02-tbl-0001) shows the five major enterprise-grade blockchains and
    how they compare based on industry, ledger, consensus methods, smart contracts,
    and cryptocurrency support.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，本书将重点关注Hyperledger、R3 Corda、Quorum和以太坊。[表2.1](#c02-tbl-0001)展示了五个主要的企业级区块链及其在行业、账本、共识方法、智能合约和加密货币支持方面的比较。
- en: You can view the full chart online at `[https://www.horsesforsources.com/top-5-blockchain-platforms_031618](https://www.horsesforsources.com/top-5-blockchain-platforms_031618)`.
    It provides insight into how many solution providers out of 50 surveyed actually
    have engagements in the enterprise blockchains.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 `[https://www.horsesforsources.com/top-5-blockchain-platforms_031618](https://www.horsesforsources.com/top-5-blockchain-platforms_031618)`
    上查看完整的表格。它提供了对50个受访解决方案提供商中有多少实际参与企业区块链的洞察。
- en: '[**TABLE 2.1**](#R_c02-tbl-0001): Comparing enterprise blockchains'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[**表2.1**](#R_c02-tbl-0001)：企业区块链比较'
- en: '|  | ETHEREUM | R3 CORDA | QUORUM | HYPERLEDGER | RIPPLE |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '|  | 以太坊 | R3 Corda | Quorum | 超级账本 | 瑞波 |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| **Industry** | Cross-industry | Financials | Cross-industry | Cross-industry
    | Financial |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| **行业** | 跨行业 | 金融 | 跨行业 | 跨行业 | 金融 |'
- en: '| **Ledger** | Permissionless | Permissioned | Permissioned | Permissioned
    | Permissioned |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| **账本** | 无许可 | 许可 | 许可 | 许可 | 许可 |'
- en: '| **Consensus** | Proof of work | Pluggable | Majority voting | Pluggable |
    Probabilistic voting |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| **共识** | 工作证明 | 可插拔 | 多数投票 | 可插拔 | 概率投票 |'
- en: '| **Smart contract support** | Yes | Yes | Yes | Yes | No |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| **智能合约支持** | 是 | 是 | 是 | 是 | 否 |'
- en: '| **Cryptocurrency** | Ether (Eth) | N/A | N/A | N/A | Ripple (XRP) |  ## Introducing
    the Hyperledger Project'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '| **加密货币** | 以太币（Eth） | N/A | N/A | N/A | 瑞波币（XRP） |'
- en: The Linux Foundation hosts Hyperledger and provides a governance structure and
    oversight to the Hyperledger community. It is a global open source project and
    the result of collaboration from technology leaders. Linux Foundation also embraces
    a modular umbrella approach to enterprise blockchains. Hyperledger is an open
    source software licensing model, which allows the user to model code and distribute
    it in an appropriate manner.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Linux基金会托管Hyperledger，并为Hyperledger社区提供治理结构和监督。这是一个全球开源项目，是技术领袖合作的结果。Linux基金会还采用模块化的总体方法来支持企业区块链。Hyperledger是一种开源软件许可模型，允许用户对代码进行建模并以适当的方式分发。
- en: 'As shown in [Figure 2.1](#c02-fig-0001), Hyperledger uses an umbrella approach
    to manage its open source projects. As an organization, Hyperledger manages more
    than 100 open source collaborations (projects). The Hyperledger structure has
    three modules: Infrastructure, Frameworks, and Tools.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [图2.1](#c02-fig-0001) 所示，Hyperledger使用总体方法来管理其开源项目。作为一个组织，Hyperledger管理着100多个开源协作（项目）。Hyperledger结构有三个模块：基础设施、框架和工具。
- en: You can see that Hyperledger has six frameworks and six tools and utilities.
    I will focus mainly on Hyperledger Fabric for this book because of its wide development
    base and the significant enterprise use cases in play now. The umbrella strategy,
    also referred to as the *greenhouse strategy*, is a proven model that the Linux
    Foundation has used repeatedly in the other projects it maintains. Historically,
    the Linux Foundation provides excellent management and insight into how to manage
    an open source project for consortium members.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到Hyperledger有六个框架和六个工具和实用程序。我将主要关注Hyperledger Fabric，因为它拥有广泛的开发基础和目前正在进行的重大企业用例。总体战略，也称为*绿色战略*，是Linux基金会在其维护的其他项目中反复使用的经过验证的模型。历史上，Linux基金会为联盟成员提供了出色的管理和洞察力，以便管理开源项目。
- en: '### Hyperledger Frameworks'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '### Hyperledger框架'
- en: As mentioned, Hyperledger has six frameworks at the time of writing. Each framework
    is a blockchain. The Hyperledger consortium of members realized that one blockchain
    framework would not meet the requirements of all its members. The five frameworks
    ensure its consortium members have the features, functions, and other requirements
    to deploy an appropriate blockchain for its members' use cases.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，截至撰写本文时，超级账本拥有六个框架。每个框架都是一个区块链。超级账本成员组织意识到一个区块链框架无法满足所有成员的需求。这五个框架确保其成员组织具备部署适当区块链的功能、功能和其他要求。
- en: '[Table 2.2](#c02-tbl-0002) presents the five blockchains that make up the Hyperledger
    frameworks. I will focus on the Fabric framework, which is a permissioned blockchain
    that supports channels. Channels allow for controlled transactions that are private.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 2.2](#c02-tbl-0002) 展示了组成超级账本框架的五个区块链。我将重点关注 Fabric 框架，这是一个支持通道的许可区块链。通道允许进行受控的私有交易。'
- en: As mentioned, Fabric will be the focus of the book but the other frameworks
    in the Hyperledger blockchain family such as Burrow or Sawtooth will be referenced
    throughout the book mainly as a comparison for use cases.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，本书将聚焦于 Fabric，但超级账本区块链家族中的其他框架，如 Burrow 或 Sawtooth，也将在整本书中作为用例比较而被提及。
- en: Hyperledger as an organization empowers its members through the project's blockchain
    frameworks, tools, and organizational infrastructure. Hyperledger Fabric is by
    far the most widely used of the frameworks. For example, if you go to the Hyperledger
    GitHub project, you will see that Fabric has the most forks. GitHub is a collaborative
    web-based platform for software development projects that use the Git revision
    control system. Git is the standard for software development and is the most widely
    used platform.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 超级账本作为一个组织，通过该项目的区块链框架、工具和组织基础设施为其成员提供支持。其中，超级账本 Fabric 是目前应用最广泛的框架之一。例如，如果你去超级账本
    GitHub 项目，你会发现 Fabric 有最多的分支。GitHub 是一个基于网络的协作平台，用于使用 Git 版本控制系统的软件开发项目。Git 是软件开发的标准，也是最广泛使用的平台。
- en: '[Figure 2.2](#c02-fig-0002) shows that Fabric has more than 4,700 forks. A
    fork is when developers make a copy of the repository, which is a good sign since
    it shows that developers are making changes to code, testing the code, or using
    the code.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2.2](#c02-fig-0002) 显示 Fabric 有超过 4,700 个分支。分支是开发人员复制存储库的情况，这是一个好迹象，因为它表明开发人员正在对代码进行更改、测试代码或使用代码。'
- en: It's clear that Fabric has the most activity as compared to the other frameworks.
    This is mainly because it's the framework that meets the most use cases. Fabric
    provides some significant features, such as modularity of consensus and encryption
    key management, but it also supports private channels. This book focuses on the
    power and flexibility of Hyperledger Fabric specifically.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，与其他框架相比，Fabric 的活动最为活跃。这主要是因为它是符合最多用例的框架。Fabric 提供了一些重要功能，比如共识的模块化和加密密钥管理，同时还支持私有通道。本书着重介绍超级账本
    Fabric 的强大和灵活性。
- en: '#### HYPERLEDGER INDY'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 超级账本 INDY'
- en: Hyperledger Indy was created and contributed by the Sovrin Foundation. The Sovrin
    Foundation is a private-sector, international nonprofit that was established intentionally
    to govern the world's first self-sovereign identity (SSI) network.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 超级账本 Indy 是由 Sovrin 基金会创建和贡献的。Sovrin 基金会是一个私营部门的国际非营利组织，旨在管理世界上第一个自主身份网络。
- en: Indy is a Hyperledger project made to support independent identities on distributed
    ledger platforms. Indy provides a wide breadth of tools, libraries, and reusable
    components for providing digital identities rooted on blockchains or other distributed
    ledgers. The benefits are that the digital identities provide an interoperable
    capacity to enterprises across administrative domains, applications, and any other
    silos. ![An umbrella diagram depicting hyperledger approach includes frameworks
    such as burrow, fabric, grid, indy, iroha, and sawtooth with symbols and descriptions,
    and tools and libraries such as caliper, cello, composer, explorer, quilt, and
    ursa with symbols and descriptions.](images/c02f001.png)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Indy 是一个超级账本项目，旨在支持分布式分类账平台上的独立身份。Indy 提供了广泛的工具、库和可重复使用组件，用于提供基于区块链或其他分布式分类账的数字身份。其优势在于数字身份为企业提供了跨管理域、应用程序和任何其他隔离体的可互操作能力。![一个伞形图，描述了超级账本方法，包括框架如
    burrow、fabric、grid、indy、iroha 和 sawtooth，以及工具和库如 caliper、cello、composer、explorer、quilt
    和 ursa，带有符号和描述。](images/c02f001.png)
- en: '[**FIGURE 2.1**](#R_c02-fig-0001) Hyperledger approach (Linux Foundation)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[**图 2.1**](#R_c02-fig-0001) Hyperledger 方法（Linux 基金会）'
- en: '**Graphic courtesy of Linux Foundation**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**图形由 Linux 基金会提供**'
- en: '[**TABLE 2.2**](#R_c02-tbl-0002): Blockchains in the Hyperledger framework'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[**表 2.2**](#R_c02-tbl-0002): Hyperledger 框架中的区块链'
- en: '| FRAMEWORK | APPLICATION |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 框架 | 应用 |'
- en: '| --- | --- |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Indy | Decentralized identity |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| Indy | 去中心化身份 |'
- en: '| Iroha | Mobile application focused |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| Iroha | 以移动应用为重点 |'
- en: '| Sawtooth | Permissioned and permissionless support; EVM transaction family
    |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| Sawtooth | 支持许可和无许可；EVM 交易族'
- en: '| Burrow | Permissionable smart contract machine (EVM) |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| Burrow | 可许可的智能合约机器（EVM） |'
- en: '| Fabric | Permissioned with channel support |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| Fabric | 支持通道的有权限制的 |'
- en: '| Grid | Web Assembly–based project for building supply chain-based solutions
    |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| Grid | 基于 Web Assembly 的用于构建基于供应链的解决方案的项目 |'
- en: '![Screen capture depicting the pinned repositories of Hyperledger including
    Fabric with the number of blockchain forks labeled 4.7k encircled.](images/c02f002.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![屏幕截图显示 Hyperledger 的固定仓库，包括标有 4.7k 的区块链分叉数量的 Fabric。](images/c02f002.png)'
- en: '[**FIGURE 2.2**](#R_c02-fig-0002) Hyperledger Fabric GitHub forks'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[**图 2.2**](#R_c02-fig-0002) Hyperledger Fabric GitHub 分叉'
- en: '#### HYPERLEDGER IROHA'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '#### HYPERLEDGER IROHA'
- en: Hyperledger Iroha was created by numerous participating companies, such as Soramitsu,
    Hitachi, NTT Data, and Colu. Iroha is a business blockchain framework specifically
    designed to be efficiently incorporated into mobile projects requiring distributed
    ledger technology. Iroha features a modern, domain-driven C++ design as well as
    a chain-based Byzantine fault-tolerant consensus algorithm called Sumeragi.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Iroha 是由许多参与公司创建的，例如 Soramitsu、日立、NTT 数据和 Colu。Iroha 是一个专门设计用于高效融入需要分布式账本技术的移动项目的业务区块链框架。Iroha
    具有现代的、面向域的 C++ 设计，以及一种基于链的拜占庭容错共识算法，称为 Sumeragi。
- en: 'Sumeragi uses a permissioned-based server reputation system that calculates
    the reliability of servers based on these three specific factors:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Sumeragi 使用基于许可的服务器声誉系统，根据以下三个具体因素计算服务器的可靠性：
- en: The time each server registered with the membership service
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个注册到成员资格服务的服务器的时间
- en: The number of successful transactions processed by each server
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个服务器处理的成功交易数量
- en: Failures detection
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障检测
- en: 'Consensus in Sumeragi is performed on individual transactions and on the global
    state resulting from the application of the transaction.  #### HYPERLEDGER FABRIC'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 'Sumeragi 中的共识是在个别交易和应用交易所产生的全局状态上执行的。 #### HYPERLEDGER FABRIC'
- en: Hyperledger Fabric was mainly developed by IBM. Fabric is clearly intended as
    a foundation for developing applications or solutions with the modular architecture
    that enterprises require. Hyperledger Fabric allows for essentially a modular
    approach to components, such as consensus and membership services, and leverages
    containers to host smart contracts called *chaincode* that comprise the application
    logic of the system.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric 主要由 IBM 开发。Fabric 明确旨在作为开发应用程序或解决方案的基础，具有企业需要的模块化架构。Hyperledger
    Fabric 允许对组件采用基本上是模块化的方法，例如共识和成员资格服务，并利用容器来托管称为*链码*的智能合约，这些合约构成系统的应用逻辑。
- en: The permissioned nature of Hyperledger Fabric provides for privacy of operations
    for the participants. The need for privacy does not exclude the need for identification
    and audit ability from regulators. Basically, the encryption of identity (membership)
    is done in a manner that remains “private” from other blockchain participants.
    Auditing is effectively built in and also provides for compliance requirements,
    which is a major concern for enterprises.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric 的许可性质为参与者的操作提供了隐私保护。对隐私的需求并不排除监管机构对身份验证和审计能力的需求。基本上，身份（成员资格）的加密是以一种对其他区块链参与者“保密”的方式进行的。审计是有效地内置的，并且还提供了符合法规要求的功能，这是企业的主要关注点。
- en: 'Hyperledger Fabric does not perform mining, although cryptocurrency support
    is possible via chaincode by referencing an off-chain exchange.  #### HYPERLEDGER
    SAWTOOTH'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 'Hyperledger Fabric 不执行挖矿，尽管通过链码引用链下交易所可以支持加密货币。 #### HYPERLEDGER SAWTOOTH'
- en: Hyperledger Sawtooth was built by Intel and is closer to a proprietary blockchain
    than an open source blockchain. Sawtooth is a modular platform for building, deploying,
    and running distributed ledgers, and it is considered Hyperledger's second most
    widely accepted blockchain framework.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Sawtooth 由英特尔构建，更接近于专有区块链而不是开源区块链。Sawtooth 是用于构建、部署和运行分布式分类账的模块化平台，被认为是
    Hyperledger 第二最广泛接受的区块链框架。
- en: 'Hyperledger Sawtooth includes a varied consensus algorithm called *proof of
    elapsed time* (PoET), which targets large distributed validator populations with
    minimal resource consumption. This essentially means that it can target distributed
    consensus efficiently.  #### HYPERLEDGER BURROW'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Sawtooth 包括一个称为 *经过时间证明*（PoET）的多样化共识算法，其目标是在最小资源消耗的情况下针对大型分布式验证人群。这基本上意味着它可以高效地针对分布式共识。
- en: Hyperledger Burrow is a permissionable smart contract machine that was the first
    of its kind when it was released in 2014\. Burrow's main value point is that it
    provides a modular blockchain client with a permissioned smart contract interpreter
    that was built to the specification of the Ethereum Virtual Machine (EVM). Burrow
    was specifically built to be a lightweight, efficient, and fast permissioned smart
    contract machine. Burrow accomplishes this goal by leveraging the hardened and
    speedy Tendermint protocol for consensus working with the Burrow's Apache-licensed
    EVM.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Burrow 是一个权限可控的智能合约机器，在 2014 年发布时是其类别中的第一个。Burrow 的主要价值点在于，它提供了一个具有权限的智能合约解释器的模块化区块链客户端，该解释器是按照以太坊虚拟机（EVM）的规范构建的。Burrow
    具体建造成为一个轻量级、高效和快速的权限智能合约机器。Burrow 通过利用经过硬化和高速的 Tendermint 共识协议与 Burrow 的 Apache
    许可的 EVM 合作，实现了这一目标。
- en: Smart contracts should perform the same across different blockchains that support
    smart contracts. This is really useful for portability since users can easily
    start with Hyperledger Burrow and over time migrate their smart contracts to another
    platform.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约应该在支持智能合约的不同区块链上执行相同的操作。这对于可移植性来说非常有用，因为用户可以轻松地从 Hyperledger Burrow 开始，并随着时间的推移将其智能合约迁移到另一个平台。
- en: 'From this chart, it''s clear that Hyperledger as a portfolio of blockchain
    frameworks has some similar capabilities, but the frameworks have some substantial
    use case differences between them as well.  ## Introducing Hyperledger Fabric'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 从这张图表中，很明显 Hyperledger 作为区块链框架的投资组合具有一些相似的能力，但框架之间也有一些实质性的用例差异。## 介绍 Hyperledger
    Fabric
- en: Hyperledger Fabric has wide acceptance as an enterprise blockchain and is Hyperledger's
    most active project. The number of developers using the GitHub repository is clearly
    well above other blockchain frameworks in Hyperledger.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric 作为企业区块链具有广泛的接受度，并且是 Hyperledger 最活跃的项目。使用 GitHub 存储库的开发人员数量明显高于
    Hyperledger 其他区块链框架。
- en: However, I will compare Hyperledger Fabric to Burrow, Sawtooth, Iroha, and Indy
    since those frameworks all have very specific use cases but also have some functionality
    that overlaps in the framework portfolio as well that are worth noting.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我将比较 Hyperledger Fabric 和 Burrow、Sawtooth、Iroha 和 Indy，因为这些框架都具有非常具体的用例，但在框架投资组合中也有一些重叠的功能值得注意。
- en: Hyperledger Fabric as a project was started by Digital Asset and IBM and has
    now emerged as a collaborative cross-industry venture that is currently hosted
    by the Linux Foundation. Hyperledger Fabric was actually the first blockchain
    to exit the “Incubation” stage and achieve the “Active” stage in March 2017 within
    the Hyperledger Project.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric 项目是由 Digital Asset 和 IBM 开始的，现在已经成为一个由 Linux 基金会主持的跨行业协作项目。Hyperledger
    Fabric 实际上是第一个在 Hyperledger 项目中退出“孵化”阶段并在 2017 年 3 月达到“活跃”阶段的区块链。
- en: 'Hyperledger Fabric is a blockchain implementation that is designed for deploying
    a modular and extensible architecture. It has a modular subsystem design so that
    different implementations can be added over time. The modular architecture of
    Hyperledger Fabric separates the transaction processing workflow into three different
    stages, as listed here:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric 是一个设计用于部署模块化和可扩展架构的区块链实现。它具有模块化子系统设计，以便随着时间的推移可以添加不同的实现。Hyperledger
    Fabric 的模块化架构将交易处理工作流分为三个不同的阶段，如下所示：
- en: Chaincode invocation and initiation where the client application requests access
    to the blockchain network.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Chaincode 调用和初始化，客户端应用程序请求访问区块链网络。
- en: Transaction processing and ordering, where the transactions are processed in
    order first and then validated.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事务处理和排序，其中事务首先按顺序处理，然后验证。
- en: Transaction validation and commitment, where the transactions are validated
    and then committed to the blockchain ledger. The world state is updated as part
    of this step.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事务验证和提交，其中事务被验证，然后提交到区块链账本。作为这一步的一部分，世界状态被更新。
- en: These distinct steps provide multiple benefits to the enterprise such as a reduced
    number of trust levels and verification, which improve network scalability and
    performance. In other blockchains such as Ethereum, transactions are processed
    differently in the sense that they are deterministic, meaning they always yield
    the same result given the same input and the same logic.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这些明确的步骤为企业提供了多重好处，例如减少了信任级别和验证，从而提高了网络的可扩展性和性能。在其他区块链中，如以太坊，事务的处理方式不同，它们是确定性的，这意味着它们在相同的输入和相同的逻辑下总是产生相同的结果。
- en: '[Figure 2.3](#c02-fig-0003) shows a typical Fabric network structure. As part
    of the structure you would have a client application, organizations, various types
    of peers, ordering peers, and membership services provider.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2.3](#c02-fig-0003) 显示了典型的 Fabric 网络结构。作为结构的一部分，您将拥有一个客户端应用程序、组织、各种类型的对等体、排序对等体和成员服务提供者。'
- en: '![Flow chart illustrating the structure of a Hyperledger fabric network for
    trade between a shipper and a receiver. The blockchain flows through the rectangular
    boxes labeled client, order service node, client application, membership services
    provider, finally to Peer1.](images/c02f003.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![流程图示例，说明 Hyperledger Fabric 网络的结构，用于船东和收货人之间的贸易。区块链通过标记为客户端、订单服务节点、客户端应用程序、成员服务提供者，最终到
    Peer1 的矩形框流动。](images/c02f003.png)'
- en: '[**FIGURE 2.3**](#R_c02-fig-0003) Hyperledger Fabric overview'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[**图 2.3**](#R_c02-fig-0003) Hyperledger Fabric 概览'
- en: This figure shows a simple Fabric network setup with different peers, two organizations,
    and a client application. Hyperledger Fabric can scale to hundreds of peers, for
    example. I will be discussing scalability and performance around the enterprise
    blockchains in much more detail in [Chapter 3](c03.xhtml).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图显示了一个简单的 Fabric 网络设置，其中包含不同的对等体、两个组织和一个客户端应用程序。例如，Hyperledger Fabric 可以扩展到数百个对等体。我将在[第三章](c03.xhtml)中更详细地讨论企业区块链的可扩展性和性能。
- en: '### Hyperledger Fabric Ledger'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '### Hyperledger Fabric 账本'
- en: The Hyperledger Fabric ledger is an immutable record of blockchain transactions.
    State transitions are initiated by chaincode invocations that are *transactions*.
    A transaction may also be considered a *request* to update the ledger.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric 账本是区块链交易的不可变记录。状态转换是由链码调用发起的，这些调用是*事务*。一个事务也可以被视为更新账本的*请求*。
- en: The result of each transaction is a set of asset key-value pairs that are committed
    to the ledger as a create/read/update/delete (CRUD) operation. This is also a
    transaction log.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 每个事务的结果是一组资产键值对，这些资产键值对被提交到账本作为创建/读取/更新/删除（CRUD）操作。这也是一个事务日志。
- en: A key-value pair is an effective way to represent and identify an asset in the
    Fabric ledger. For example, you would specify a key-value pair that is an asset
    such as a car whose data is stored in the Fabric ledger. The data is stored in
    a key-value pair.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 键值对是在 Fabric 账本中表示和识别资产的有效方式。例如，您将指定一个键值对，这是一个资产，例如一辆汽车，其数据存储在 Fabric 账本中。数据存储在键值对中。
- en: 'Here''s an example of a key pair:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个键对的示例：
- en: '[PRE0]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, “color” is the key, and “purple” is the value of the color.
    This key-value pair is then stored on the ledger, which maintains a record.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，“color”是键，“purple”是颜色的值。然后，这个键值对被存储在账本上，维护一条记录。
- en: Assets are tracked, identified, or updated via a ledger request (transaction)
    such as a query or update. Simply put, the ledger is the actual blockchain. The
    ledger is a file-based ledger that stores serialized blocks. Hyperledger Fabric
    has some interesting capabilities that are outside the standard behavior for a
    blockchain. For example, the state database can always be rebuilt from reprocessing
    the ledger, and a transaction can be rolled back, for example, if a transaction
    is deemed not valid.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 资产通过账本请求（交易）进行跟踪、识别或更新，例如查询或更新。简单来说，账本就是实际的区块链。账本是一个基于文件的账本，它存储序列化的区块。Hyperledger
    Fabric 具有一些有趣的能力，这些能力超出了区块链的标准行为。例如，状态数据库可以始终从重新处理账本中重建，并且可以回滚事务，例如，如果事务被视为无效。
- en: There are currently two options for the state database in Fabric as well. First
    is an embedded database called LevelDB. You can also choose an external CouchDB
    as another option.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric目前还有两种状态数据库选项。首先是一个称为LevelDB的嵌入式数据库。您也可以选择外部的CouchDB作为另一个选项。
- en: Hyperledger Fabric Ledger has two distinct parts.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric账本分为两个不同的部分。
- en: State data is a representation of the current state of the assets on the blockchain.
    Asset state data can be changed upon changes to the state of the data.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态数据是区块链上资产当前状态的表示。资产状态数据可以随着数据状态的变化而变化。
- en: 'Transaction logs record all the transactions in the order they are received
    that modified the state data. Once the data is written to the transaction logs,
    they are immutable and cannot be modified or deleted.  ### Hyperledger Fabric
    Consensus'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '交易日志记录了所有按照接收顺序修改状态数据的交易。一旦数据被写入交易日志，它们就是不可变的，不能被修改或删除。  ### Hyperledger Fabric
    共识'
- en: Hyperledger Fabric's consensus is extensively broad and covers the whole transaction
    flow from start to finish.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric的共识广泛而全面，涵盖了从开始到结束的整个交易流程。
- en: In Hyperledger Fabric, nodes and peers can be somewhat confusing since they
    both have several roles. This is in stark contrast to Ethereum, for example, since
    the roles and tasks of nodes participating in reaching consensus are identical
    to each other. In a nutshell, every node in Ethereum does the same thing, but
    in Hyperledger nodes are very different in their missions on the blockchain network.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在Hyperledger Fabric中，节点和对等节点有些令人困惑，因为它们都有多个角色。这与以太坊形成了鲜明的对比，例如，参与达成共识的节点的角色和任务是相同的。简而言之，以太坊中的每个节点都在做同样的事情，但在Hyperledger中，节点在区块链网络上的任务非常不同。
- en: I discuss Hyperledger nodes in the “Nodes” section later in this chapter.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我在本章后面的“节点”部分讨论了Hyperledger节点。
- en: Consensus algorithms under Hyperledger are pluggable, meaning that users may
    select the algorithm of their choice during deployment.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在Hyperledger下的共识算法是可插拔的，这意味着用户可以在部署过程中选择他们喜欢的算法。
- en: 'Hyperledger Fabric 1.4 supports the following consensus methods at the time
    of writing:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Hyperledger Fabric 1.4支持以下共识方法：
- en: Kafka/Zab
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kafka/Zab
- en: Raft
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raft
- en: SOLO
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOLO
- en: '[Chapter 4](c04.xhtml) covers the options for consensus methods for Hyperledger,
    Ethereum, Corda, and Quorum.  ### Hyperledger Fabric Transactions'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[第四章](c04.xhtml)介绍了Hyperledger、以太坊、Corda和Quorum的共识方法选项。  ### Hyperledger Fabric
    交易'
- en: Transactions in Hyperledger are requests to the blockchain to execute a function
    on the ledger. The function is implemented by chaincode, which is a decentralized
    transactional program running on the validating nodes. Chaincode transactions
    are time-bounded and configured during chaincode deployment, which is similar
    to a database call or a web service invocation.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在Hyperledger中，交易是向区块链发出的请求，在账本上执行一个函数。该函数由链码实现，链码是在验证节点上运行的分散式事务程序。链码交易是有时间限制的，并且在链码部署期间进行配置，类似于数据库调用或Web服务调用。
- en: If a transaction times out, for example, it is considered as an error and will
    not cause state changes on the blockchain ledger. One chaincode function can call
    another chaincode function if the called function has the same restrictive confidentiality
    scope. Basically, a confidential chaincode can call another confidential chaincode
    if they share the same group of validator nodes.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个交易超时，例如，它被视为一个错误，并且不会在区块链账本上导致状态变化。一个链码函数可以调用另一个链码函数，如果被调用的函数具有相同的限制性机密范围。基本上，如果它们共享相同的验证节点组，一个机密链码可以调用另一个机密链码。
- en: As transactions are run in a new block, a delta from the world state in the
    last block on the blockchain is maintained. A delta is a change in the world state
    of the blockchain. For example, if the last block is block 27000 and there is
    an update to the ledger, then the world state changes. Simply put, a new block
    equals a new state.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当交易在新区块中运行时，会维护从区块链上最后一个区块的世界状态到当前区块的变化量。变化量指的是区块链上世界状态的变化。例如，如果最后一个区块是第27000个区块，并且账本有更新，那么世界状态就会发生变化。简单来说，一个新区块等于一个新状态。
- en: Hyperledger supports two types of transactions.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger支持两种类型的交易。
- en: A *code-deploying transaction* is basically the initialization (`Init`) function
    of the blockchain application. `Init` is called when you first deploy your chaincode
    to the blockchain.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*代码部署交易*基本上是区块链应用的初始化(`Init`)函数。当您首次将链码部署到区块链上时，会调用`Init`。'
- en: A *code-invoking transaction* is called when you want to call (Invoke) chaincode
    functions to perform transactions on the blockchain. These transactions will be
    captured as blocks on the blockchain effectively.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*调用代码的交易*是当你想要调用（调用）链码函数在区块链上执行交易时调用的。这些交易将有效地被记录为区块链上的块。'
- en: Hyperledger Fabric is generally considered by the blockchain community as one
    of the simpler platforms for developing applications. This is because of the flexibility
    of the blockchain development support.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 超级账本 Fabric 通常被区块链社区视为开发应用程序的较简单平台之一。这是由于区块链开发支持的灵活性。
- en: Transactions in Hyperledger Fabric have the following workflow. This can be
    significantly different from other blockchains.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 超级账本 Fabric 中的交易具有以下工作流程。这与其他区块链可能有很大不同。
- en: A transaction proposal that will trigger chaincode is initiated by the client
    application.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 触发链码的交易提案由客户端应用程序发起。
- en: The transaction proposal will then transmit to the appropriate peers for endorsement
    as specified in policies.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交易提案随后将按照规定发送给适当的同行进行认可。
- en: The endorsing peer will execute the chaincode and will write the actual transaction
    to the ledger.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 认可节点将执行链码并将实际交易写入分类账。
- en: The endorsing peer will sign the transaction and return it to the proposer.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 认可节点将签署交易并将其返回给提议者。
- en: When comparing Hyperledger Fabric to Ethereum around the transaction workflow,
    you know that, for example, Ethereum uses the sequential execution style, whereas
    Hyperledger Fabric uses a nonsequential execution style for transactions.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当比较超级账本 Fabric 与以太坊的交易工作流程时，你会发现，例如，以太坊使用顺序执行风格，而超级账本 Fabric 使用非顺序执行风格进行交易。
- en: '[Figure 2.4](#c02-fig-0004) shows the contrast between common blockchain transaction
    execution styles. You can see that the two different execution styles vary. For
    example, one difference between the two is that the execute phase is started first
    non-sequentially. This could provide efficiencies in a permissioned blockchain
    that controls its membership but also could provide a response to the requester
    sooner.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2.4](#c02-fig-0004) 显示了常见区块链交易执行风格之间的对比。你可以看到两种不同的执行风格有所不同。例如，两者之间的一个区别是非顺序地首先启动了执行阶段。这可能会为控制其成员资格的许可区块链提供效率，但也可能会更快地向请求者提供响应。'
- en: To sum up the Hyperledger Fabric transaction process, the process starts with
    a transaction proposal, which is initiated by a client. A client is a blockchain
    user with a chaincode application requesting access to the blockchain network.
    Then this transaction proposal is transmitted to the appropriate peers for endorsement
    as specified by an endorsement policy. An endorsing peer executes the chaincode,
    which results in an actual transaction for the ledger to maintain. The client
    receives the confirmation from the peers/nodes.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 总结超级账本 Fabric 交易过程，过程从交易提案开始，由客户端发起。客户端是一个具有链码应用程序的区块链用户，请求访问区块链网络。然后，这个交易提案根据认可策略被传输到适当的同行进行认可。认可节点执行链码，结果是为了维护账本的实际交易。客户端从同行/节点接收确认。
- en: '![Flow charts comparing sequential and nonsequential blockchain execution styles.
    In sequential style, the process flows through three rectangular boxes are labeled
    as order, execute, state update. In nonsequential style, the process flows through
    four rectangular boxes labeled execute, order, validate, and state update.](images/c02f004.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![流程图比较顺序和非顺序的区块链执行风格。在顺序风格中，过程通过三个标有顺序、执行、状态更新的矩形框流动。在非顺序风格中，过程通过标有执行、顺序、验证和状态更新的四个矩形框流动。](images/c02f004.png)'
- en: '[**FIGURE 2.4**](#R_c02-fig-0004) Comparing blockchain execution styles'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[**图 2.4**](#R_c02-fig-0004) 比较区块链执行风格'
- en: In summary, the Fabric network has a clear transaction order that needs to be
    maintained.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，Fabric 网络有一个需要维护的明确交易顺序。
- en: 'For more information on transactions, refer to the white paper “Hyperledger
    Fabric: A Distributed Operating System for Permissioned Blockchains” (`[https://www.hyperledger.org/wp-content/uploads/2017/08/Hyperledger_Arch_WG_Paper_1_Consensus.pdf](https://www.hyperledger.org/wp-content/uploads/2017/08/Hyperledger_Arch_WG_Paper_1_Consensus.pdf)`).  ###
    Hyperledger Fabric Nodes'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '有关交易的更多信息，请参阅白皮书“Hyperledger Fabric: A Distributed Operating System for Permissioned
    Blockchains” (`[https://www.hyperledger.org/wp-content/uploads/2017/08/Hyperledger_Arch_WG_Paper_1_Consensus.pdf](https://www.hyperledger.org/wp-content/uploads/2017/08/Hyperledger_Arch_WG_Paper_1_Consensus.pdf)`)。###
    超级账本 Fabric 节点'
- en: The concept of a node is common in all blockchain technologies. The node becomes
    the communication endpoint in the blockchain technology.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 节点的概念在所有区块链技术中都很常见。节点成为区块链技术中的通信端点。
- en: Nodes connect to other nodes, creating a decentralized network. Nodes use a
    form of a peer-to-peer protocol to keep the distributed ledger in sync across
    the network. In Hyperledger Fabric, nodes need a valid certificate to be able
    to communicate to the network, and the participants use applications that connect
    to the network by way of the nodes.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 节点连接到其他节点，创建一个分散式网络。节点使用一种对等协议形式来保持网络上的分布式账本同步。在 Hyperledger Fabric 中，节点需要一个有效的证书才能与网络进行通信，参与者使用连接到网络的节点的应用程序。
- en: Remember, Hyperledger Fabric is a permissioned blockchain and membership, identity,
    and certificates are validated before transacting on the blockchain. A participant's
    identity is not the same as a node's identity and could be an organization. For
    example, when a participant executes or invokes a transaction, their certificate
    is used for signing that transaction and therefore validated as well.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Hyperledger Fabric 是一种权限区块链，在进行区块链交易之前会验证成员、身份和证书。参与者的身份与节点的身份并不相同，可能是一个组织。例如，当参与者执行或调用交易时，他们的证书将用于签署该交易，因此也将得到验证。
- en: 'It is important to note that not all nodes in Hyperledger are equal, unlike
    other blockchains where every node maintains a copy of the same ledger. In Hyperledger
    Fabric, there are three distinct types of nodes:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，Hyperledger 中并非所有节点都相等，不像其他区块链，每个节点都维护着相同的账本副本。在 Hyperledger Fabric 中，有三种不同类型的节点：
- en: '*Client nodes* initiate transactions for the client applications.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*客户节点* 为客户端应用程序启动交易。'
- en: '*Peer nodes* commit transactions and keep the data in sync across the blockchain
    ledger.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*对等节点* 提交交易并在整个区块链账本上保持数据同步。'
- en: '*Ordered nodes* are the communication backbones and responsible for the distribution
    of the transactions.  ### Hyperledger Fabric Business Networks'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*有序节点* 是通信主干，负责分发交易。 ### Hyperledger Fabric 商业网络'
- en: A business network models participants, assets, registries, and transactions.
    Transaction processors implement business logic on these elements. Access control
    lists (ACLs) define privacy and sharing settings.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 一个商业网络模型包括参与者、资产、注册表和交易。交易处理器在这些元素上实现业务逻辑。访问控制列表（ACL）定义了隐私和共享设置。
- en: The most efficient way to deploy a Hyperledger Fabric business network model
    is by using Composer Playground, an interactive web tool for testing and deploying
    business networks. Blockchain developers can opt to install it on Docker as well
    as locally if they choose.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署 Hyperledger Fabric 商业网络模型方面，最有效的方法是使用 Composer Playground，这是一个交互式的网络工具，用于测试和部署业务网络。区块链开发人员可以选择将其安装在
    Docker 上，也可以选择在本地安装。
- en: 'The business network archive  (BNA) is created by using Hyperledger Composer.
    Composer is a tool that allows blockchain developers to package a few different
    files and generate an archive file, which can then be deployed onto a Fabric network.
    Composer is free for your developers to use and has a version that is available
    on IBM Cloud called Composer Playground.  ### Hyperledger Fabric Chaincode (Smart
    Contracts)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '通过使用 Hyperledger Composer 创建商业网络归档（BNA）。Composer 是一种允许区块链开发人员打包几个不同文件并生成归档文件的工具，然后可以部署到
    Fabric 网络上。Composer 对您的开发人员是免费的，并且在 IBM Cloud 上有一个版本称为 Composer Playground。  ###
    Hyperledger Fabric 链码（智能合约）'
- en: '*Chaincode* is the term to describe a smart contract in Hyperledger Fabric.
    Smart contracts are fully supported on Hyperledger Fabric, and Golang and JavaScript
    are supported at the time of writing.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '*链码* 是描述 Hyperledger Fabric 中智能合约的术语。智能合约在 Hyperledger Fabric 上得到充分支持，并且在撰写时支持
    Golang 和 JavaScript。'
- en: Chaincode is application-level code stored on the ledger as part of a Hyperledger
    transaction. These transactions also modify the ledger state, which is known as
    the *world state*.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 链码是作为 Hyperledger 交易的一部分存储在账本上的应用级别代码。这些交易还修改账本状态，称为*世界状态*。
- en: Chaincode is instantiated specifically on a channel or can be installed on several
    channels. A channel is a specific communication path used between peers looking
    for privacy. For example, if you have two channels, you can effectively deploy
    two versions of the code, and that code will not be accessible to the other code
    from another channel.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 链码专门实例化在一个通道上，或者可以安装在多个通道上。通道是用于寻找隐私的特定通信路径。例如，如果你有两个通道，你可以有效地部署两个代码版本，而且那个代码不会被另一个通道中的其他代码访问。
- en: Client applications interact with the blockchain ledger through the chaincode
    methods `Init` and `Invoke`. The chaincode needs to be installed on every peer
    that will endorse a transaction and be instantiated on the channel. Specifying
    your membership policies would also be part of this chaincode strategy.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端应用程序通过链码方法`Init`和`Invoke`与区块链分类账进行交互。链码需要安装在每个将背书交易的对等方上，并在通道上实例化。指定你的成员政策也将成为这个链码策略的一部分。
- en: When creating chaincode, there are two methods that you will need to implement.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 创建链码时，有两种方法需要实现。
- en: '`Init` is initially called when a chaincode receives an instantiate or upgrade
    transaction.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当链码接收到实例化或升级交易时，首先会调用`Init`。
- en: '`Invoke` is called when the invoke transaction is received to process any transaction
    proposals.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当接收到调用交易以处理任何交易提案时，会调用`Invoke`。
- en: 'If you are developing a blockchain application, you will need to understand
    that creating both an `Init` method and an `Invoke` method within your chaincode
    is important.  ### Hyperledger Fabric Development Tools'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在开发区块链应用程序，你需要明白在你的链码中创建`Init`方法和`Invoke`方法都是重要的。### Hyperledger Fabric
    开发工具
- en: Hyperledger Composer is a development framework that is used for writing a blockchain
    network's chaincode and also is used for deploying the business network in Hyperledger
    Fabric.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Composer 是一个开发框架，用于编写区块链网络的链码，并且也用于在 Hyperledger Fabric 中部署业务网络。
- en: There are two versions of Hyperledger Composer.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Composer 有两个版本。
- en: A downloadable local version, called Composer, that you would install on premises
    in a cloud platform.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种可下载的本地版本，称为 Composer，在云平台的本地安装。
- en: An online version hosted by IBM Cloud called Hyperledger Playground.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由 IBM Cloud 托管的在线版本称为 Hyperledger Playground。
- en: You can download Hyperledger Fabric Composer from GitHub at `[https://hyperledger.github.io/composer/latest/](https://hyperledger.github.io/composer/latest/)`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从 GitHub 下载 Hyperledger Fabric Composer，网址为`[https://hyperledger.github.io/composer/latest/](https://hyperledger.github.io/composer/latest/)`。
- en: You can access Hyperledger Fabric Composer Playground at `[https://composer-playground.mybluemix.net/](https://composer-playground.mybluemix.net/)`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以访问 Hyperledger Fabric Composer Playground，网址为`[https://composer-playground.mybluemix.net/](https://composer-playground.mybluemix.net/)`。
- en: '[Figure 2.5](#c02-fig-0005) shows the initial login screen to Hyperledger Composer
    Playground.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2.5](#c02-fig-0005) 展示了 Hyperledger Composer Playground 的初始登录界面。'
- en: '![Screen capture depicting the web version of the initial login screen to Hyperledger
    Composer Playground with descriptions and artwork.](images/c02f005.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![屏幕截图展示了 Hyperledger Composer Playground 的初始登录界面，包括描述和艺术作品。](images/c02f005.png)'
- en: '[**FIGURE 2.5**](#R_c02-fig-0005) Hyperledger Fabric Composer Playground web
    version initial screen'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[**图 2.5**](#R_c02-fig-0005) Hyperledger Fabric Composer Playground 网页版本初始界面'
- en: Composer Playground is a web-based user interface that you can use to model
    and test your business network. Playground is good for modeling simple proof of
    concepts, as it uses the browser's local storage to simulate the blockchain network.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Composer Playground 是一个基于 Web 的用户界面，你可以用来建模和测试你的业务网络。Playground 适用于建模简单的概念验证，因为它使用浏览器的本地存储来模拟区块链网络。
- en: However, if you are running a local Fabric runtime and have deployed a network
    to it, you can also access that using Playground. In this case, Playground isn't
    simulating the network; it's communicating with the local Fabric runtime directly.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你正在运行本地 Fabric 运行时并已经在其上部署了一个网络，你也可以使用 Playground 访问它。在这种情况下，Playground
    不是模拟网络；它直接与本地 Fabric 运行时通信。
- en: There are REST-based application programming interfaces (APIs) that can be used
    by client applications and that allow you to integrate non blockchain applications
    in the network. Representational State Transfer (REST) technology is an architectural
    style and services approach used in web services development.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 存在基于 REST 的应用程序编程接口（API），客户端应用程序可以使用这些接口，允许你在网络中集成非区块链应用程序。表述性状态转移（REST）技术是一种在
    Web 服务开发中使用的架构风格和服务方法。
- en: 'There are also two software development kits (SDK) available for Hyperledger
    Fabric v1.4: Java and Node are the supported languages at the time of writing.
    Other development languages such as Python and Go will likely be supported according
    to the Hyperledger wiki.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Hyperledger Fabric v1.4，还有两个软件开发工具包（SDK）可用：Java 和 Node 是撰写时支持的语言。根据 Hyperledger
    wiki，其他开发语言，如 Python 和 Go，可能也会得到支持。
- en: 'SDKs are used to build applications for the blockchain and enable developers
    to have an onramp to the blockchain network to facilitate rapid development.  ###
    Hyperledger Fabric Governance'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: SDK 用于构建区块链应用程序，使开发人员能够通过网络接入区块链网络，以促进快速开发。### Hyperledger Fabric Governance
- en: 'Because Hyperledger Fabric is a private validator network protocol, all entities
    are required to register with membership services to obtain an identity. This
    identity provides access and a transaction authority on the network. Certificates
    are issued to members. Two certificates are required: enrollment certificates
    and transaction certificates.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Hyperledger Fabric 是一个私有验证器网络协议，所有实体都需要向成员服务注册以获取身份。该身份提供了网络上的访问和交易权限。证书被发放给成员。需要两个证书：注册证书和交易证书。
- en: Hyperledger Fabric has permissioning governance built into every layer of the
    architecture. Operations such as starting a new consortium, adding or evicting
    members, defining a new channel, adding and evicting participants from channels
    all require collecting approval signatures from the appropriate organizations.
    The overarching policy model is enforced throughout the blockchain network.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric 在架构的每一层都内置了许可制治理。诸如启动新财团、添加或驱逐成员、定义新通道、添加和驱逐通道中的参与者等操作都需要从相应组织收集批准签名。全面的政策模型贯穿整个区块链网络。
- en: Hyperledger Fabric has two levels of permissioning, and governance support based
    on either the consortium or the channel. A consortium is a membership-based network
    services made up of the membership of the organization.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric 有两级许可和基于财团或通道的治理支持。财团是由组织成员组成的基于成员的网络服务。
- en: 'Channels are supported as well, providing enhanced privacy or transactions
    through a point-to-point connection. Channels also provide a separate blockchain
    transaction ledger and network services. [Chapter 9](c09.xhtml), “Blockchain Governance,
    Risk, Compliance (GRC), Privacy, and Legal Concerns,” covers governance around
    Fabric in detail.  ## Introducing R3 Corda'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 还支持通道，通过点对点连接提供增强的交易隐私。通道还提供单独的区块链交易分类帐和网络服务。[第 9 章](c09.xhtml)，“区块链治理、风险、合规（GRC）、隐私和法律问题”，详细介绍了有关
    Fabric 的治理。## 介绍 R3 Corda
- en: R3 is an enterprise blockchain software firm being developed by a broad ecosystem
    of more than 200 members and partners across multiple industries from both the
    private and public sectors. Corda is an open source blockchain platform, and Corda
    Enterprise is a commercial version of Corda blockchain platform for enterprise
    usage with Corda support.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: R3 是一个由跨越私营和公共领域的超过 200 名成员和合作伙伴组成的广泛生态系统开发的企业级区块链软件公司。 Corda 是一个开源的区块链平台，而
    Corda Enterprise 则是 Corda 区块链平台的企业版，提供 Corda 支持，用于企业使用。
- en: The Corda platform was developed in close collaboration with a vast network
    of financial institutions, trade regulators, trade associations, professional
    services firms, and technology companies to leverage the power of blockchain to
    address specific business challenges. Corda was designed to meet the highest standards
    of one of the most complex and highly regulated industries in the world, which
    is the financial sector.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 平台是与金融机构、贸易监管机构、贸易协会、专业服务公司和技术公司的庞大网络密切合作开发的，以利用区块链的力量解决特定的业务挑战。 Corda
    被设计为满足世界上最复杂和高度监管的行业之一——金融部门的最高标准。
- en: However, its blockchain services can be applied to other areas of business.
    Corda allows you to build interoperable blockchain networks that transact in strict
    privacy from other members.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，其区块链服务可以应用于业务的其他领域。Corda 允许您构建在严格保密的条件下与其他成员进行交易的可互操作的区块链网络。
- en: Corda's smart contract technology (CorDapps) allows businesses to transact directly
    with industry-leading security features. I believe that Corda improves on the
    traditional custodial model that legacy financial services organizations have
    of acting as intermediary.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Corda的智能合约技术（CorDapps）允许企业直接进行交易，并具有领先行业的安全功能。我相信Corda改进了传统的托管模式，即传统金融服务组织充当中介。
- en: For example, it defines a standard approach and format for expressing financial
    assets and liabilities. The following are the main benefits of the enterprise
    market utilizing R3 Corda.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，它定义了一种表达金融资产和负债的标准方法和格式。企业市场利用R3 Corda的主要好处如下。
- en: Corda smart contracts can be written in Java and other JVM languages and can
    accelerate the development process for enterprises with in-house expertise.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Corda智能合约可以用Java和其他JVM语言编写，并且可以利用企业内部专业知识加速开发过程。
- en: Corda has a flow framework to manage communication and negotiation between network
    participants. This network of participants is communicating via a direct peer-to-peer
    protocol where each node runs the Corda software as well as Corda applications
    known as CorDapps.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Corda具有流程框架，用于管理网络参与者之间的通信和协商。这些参与者的网络通过直接的点对点协议进行通信，每个节点都运行Corda软件以及称为CorDapps的Corda应用程序。
- en: Corda has a unique “notary” infrastructure to validate uniqueness and sequencing
    of transactions without global broadcast to all network participants.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Corda具有独特的“公证人”基础设施，用于验证交易的唯一性和排序，而无需向所有网络参与者全局广播。
- en: Corda enables the rapid development and deployment of distributed apps called
    CorDapps. CorDapps take the structure of a set of JAR files containing class definitions
    written in Java and/or Kotlin.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Corda使得分布式应用程序（称为CorDapps）的快速开发和部署成为可能。CorDapps采用一组JAR文件的结构，其中包含用Java和/或Kotlin编写的类定义。
- en: Corda was specifically designed to maintain a balance of trade-offs for business
    problems and domain concerns around the financial sector such as scalability and
    security.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Corda专门设计用于在业务问题和金融领域的领域问题之间保持权衡，例如可扩展性和安全性。
- en: Corda has a pluggable consensus, which allows blockchain developers to address
    trade-offs such as performance, scalability, security, and privacy.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Corda具有可插拔的共识机制，允许区块链开发人员解决性能、可扩展性、安全性和隐私等权衡。
- en: The financial sector is one of the most regulated industries not only in the
    United States but also around the world. Handling customer data while dealing
    with privacy and compliance concerns is a burdensome task for these organizations.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 金融部门不仅是美国，而且是全球最受监管的行业之一。在处理隐私和合规性问题时处理客户数据对这些组织来说是一项繁重的任务。
- en: 'R3 Corda handles these challenges with trade-offs that regulated financial
    institutions may find favorable. These trade-offs include the following:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: R3 Corda通过受监管的金融机构可能会发现有利的权衡来处理这些挑战。这些权衡包括以下内容：
- en: Scalability
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展性
- en: Security
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性
- en: Privacy
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐私
- en: Confidentiality
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保密性
- en: Complexity
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复杂性
- en: Performance
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能
- en: Compliance
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合规性
- en: Handling these trade-offs is exactly what R3 Corda was developed to address
    and does well through its structure of CorDapps.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这些权衡正是R3 Corda开发的目标，并通过其CorDapps的结构很好地实现。
- en: Corda is a strictly engineered shared ledger fabric network for financial services
    use cases that can be deployed within existing legal frameworks and that relies
    on proven technologies that the financial sector depends on. R3 Corda has a strict
    and well-defined philosophy that can be broken down into three categories according
    to the Corda white paper (`[https://docs.corda.net/_static/corda-introductory-whitepaper.pdf](https://docs.corda.net/_static/corda-introductory-whitepaper.pdf)`).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Corda是一个严格设计的用于金融服务用例的共享账本网络，可以在现有法律框架内部署，并依赖于金融部门依赖的已验证技术。根据Corda白皮书，R3 Corda具有严格和明确定义的哲学，可以分为三个类别（`[https://docs.corda.net/_static/corda-introductory-whitepaper.pdf](https://docs.corda.net/_static/corda-introductory-whitepaper.pdf)`）。
- en: 'The three categories are:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个类别分别是：
- en: Engineering for the requirements of institutions
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为机构的需求进行工程设计
- en: A focus on nonfunctional requirements
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注重非功能性需求
- en: Extensibility
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展性
- en: There are essentially two direct approaches to deploying a blockchain network
    with R3 Corda.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 部署R3 Corda的基本方法实际上有两种直接方法。
- en: '**Corda** is the open source blockchain platform, enabling businesses to transact
    directly and in strict privacy, reducing transaction and record-keeping costs
    and streamlining business operations.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Corda** 是开源区块链平台，使企业能够直接进行交易，并且具有严格的隐私保护，降低交易和记录成本，简化业务操作。'
- en: '**Corda Enterprise** is an enterprise-ready commercial distribution of Corda
    specifically optimized to meet the demands of enterprises.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Corda Enterprise** 是 Corda 的企业级商业分发版本，专门优化以满足企业的需求。'
- en: 'As shown in [Figure 2.6](#c02-fig-0006), the stack of Corda is actually quite
    simple. Corda has two versions: an enterprise or open source version with blockchain
    network services and on top of the stack is the CorDapp.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图 2.6](#c02-fig-0006)所示，Corda 的堆栈实际上相当简单。 Corda 有两个版本：一个是企业版或开源版，具有区块链网络服务，在堆栈的顶部是
    CorDapp。
- en: '![A stack of four rectangular boxes illustrating the Corda structure, where
    three boxes are labeled as CorDapps, Corda Enterprise, and Corda Open Source (Core
    Components) from top to bottom. On the left side lies a rectangular box labeled
    as Corda Network.](images/c02f006.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![一个由四个矩形框组成的堆栈，显示了 Corda 结构，其中三个框从上到下标有 CorDapps、Corda Enterprise 和 Corda
    Open Source（核心组件），左侧是一个标有 Corda Network 的矩形框。](images/c02f006.png)'
- en: '[**FIGURE 2.6**](#R_c02-fig-0006) Corda stack structure'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '[**图 2.6**](#R_c02-fig-0006) Corda 堆栈结构'
- en: R3 Corda certainly has a niche in the financial and insurance sectors but is
    expanding its use cases, for example, to other sectors. Currently, Corda would
    not be a good fit for a logistics company or a government services organization
    because of the overhead it would have compared to other blockchains such as Hyperledger.
    I will discuss more about R3 Corda and its use cases in [Chapter 8](c08.xhtml),
    “Enterprise Blockchain Use Cases.”
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: R3 Corda 在金融和保险行业确实有一席之地，但正在将其用例扩展到其他行业。 目前，与 Hyperledger 等其他区块链相比，Corda 不适合物流公司或政府服务组织，因为它会产生更大的开销。
    我将在[第 8 章](c08.xhtml)“企业区块链用例”中更详细地讨论 R3 Corda 及其用例。
- en: '### R3 Corda Blockchain Fundamentals'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '### R3 Corda 区块链基础知识'
- en: From a technical perspective, R3 Corda is perhaps the most straightforward enterprise
    blockchain to understand. In my experience, there are several reasons for its
    clear success. The R3 Corda consortium has clearly defined the features, functions,
    and use cases with their consortium members. Corda is a platform for blockchain
    applications for financial enterprises where many applications share similarities
    with an IOU (payment/debt) use case. Corda maintains a vendor approach to development,
    training, and marketing that is well maintained, professional, and directed.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度来看，R3 Corda 或许是最直观易懂的企业区块链。 在我的经验中，有几个原因导致了它的明显成功。 R3 Corda 联盟已经清楚定义了与其联盟成员的特性、功能和用例。
    Corda 是一个金融企业区块链应用平台，其中许多应用与 IOU（付款/债务）用例具有相似性。 Corda 保持供应商方法来进行开发、培训和营销，这是良好维护、专业化和有方向性的。
- en: Corda documentation is clearly defined and professionally developed but also
    maintained by experts assigned by Corda. Finally, R3 Corda is the only enterprise
    blockchain to have a demo tool, Corda DemoBench.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 文档定义清晰，专业开发，但也由 Corda 分配的专家维护。 最后，R3 Corda 是唯一具有演示工具 Corda DemoBench 的企业区块链。
- en: 'The Corda DemoBench tool lets you drive transactions in a blockchain. It is
    useful for performing demos and is free to use.  ### R3 Corda Network'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 'Corda DemoBench 工具让您在区块链中执行交易。 它对于进行演示非常有用，而且可以免费使用。  ### R3 Corda 网络'
- en: The Corda network is a fully connected “graph” network and does not use a gossip
    protocol. Corda communications actually occur point to point and, therefore there
    is somewhat less network overhead as compared to a gossip protocol, where broadcasts
    are sent to all network peers. Peers use a specific peer-to-peer Advanced Message
    Queuing Protocol (AMQP). AMQP is an open-standard Application layer protocol that
    is message-oriented and uses TLS for secure communications.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 网络是一个完全连接的“图”网络，并不使用八卦协议。 Corda 通信实际上是点对点的，因此与八卦协议相比，网络开销要小一些，因为广播消息只发送给所有网络对等体。
    对等体使用特定的点对点高级消息队列协议（AMQP）。 AMQP 是一个开放标准的应用层协议，是面向消息的，并使用 TLS 进行安全通信。
- en: For privacy concerns, the peers do not broadcast to all other network peers,
    but instead they direct to the network peer required in the transaction.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 出于隐私考虑，对等体不会向所有其他网络对等体广播，而是直接向交易所需的网络对等体发送。
- en: Corda is a permissioned network that is specifically designed to address regulated
    financial institutions' concerns and is a natural fit for the banking sector,
    trading sector, and even the insurance sector.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 是一个特定设计的权限网络，旨在解决受监管金融机构的关切，并且自然适合银行业、交易业，甚至是保险业。
- en: '[Figure 2.7](#c02-fig-0007) shows an example of how a Corda blockchain network
    would be set up with the affiliated Corda components. These Corda components are
    generally easy to plan and deploy. The main difference is that Corda has a somewhat
    different approach to naming components such as with a notary or a CorDapp.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2.7](#c02-fig-0007) 展示了 Corda 区块链网络如何设置与相关的 Corda 组件。这些 Corda 组件通常易于规划和部署。主要的区别在于
    Corda 对组件命名的方式略有不同，比如使用公证或 CorDapp。'
- en: '![Flow chart illustrating a Corda blockchain network from broker, to actuary
    service, to notary pool, finally to bank settlement, oracle service, and issue
    insurance policy.](images/c02f007.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![插图展示 Corda 区块链网络从经纪人、精算服务、到公证池，最后到银行结算、Oracle 服务和签发保险政策。](images/c02f007.png)'
- en: '[**FIGURE 2.7**](#R_c02-fig-0007) Corda network'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '[**图 2.7**](#R_c02-fig-0007) Corda 网络'
- en: '[Chapter 3](c03.xhtml), “Architecting Your Enterprise Blockchain,” covers the
    deployment and architecture in more detail.  ### R3 Corda Ledger'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 3 章](c03.xhtml)，“设计您的企业区块链”，更详细地介绍了部署和架构。### R3 Corda 分类帐'
- en: R3 Corda is a targeted distributed ledger technology (DLT) platform that uses
    an effective global broadcast and gossip network protocol to propagate data to
    other members in the blockchain network.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: R3 Corda 是一个定向的分布式分类帐技术（DLT）平台，使用有效的全球广播和流言网络协议将数据传播给区块链网络中的其他成员。
- en: Corda uses a point-to-point messaging protocol (called AMPQ) where the broadcast
    is targeted and is not broadcast to all members on the network. Being that the
    protocol is point to point, only the nodes participating in the transaction will
    be privileged to the transaction ledger activity. This provides the main benefits
    of privacy to the members.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 使用一种点对点的消息传递协议（称为 AMPQ），其中广播是有针对性的，并不会广播到网络上的所有成员。由于协议是点对点的，因此只有参与交易的节点才能特权地查看交易分类帐活动。这为成员提供了隐私的主要好处。
- en: The Corda ledger has some significant differences from other blockchains that
    are noteworthy.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 分类帐与其他区块链有一些显著的不同，值得注意。
- en: The Corda ledger allows for the management and synchronization of business agreements
    between multiple parties that can be designed as a legal contract. The Corda ledger
    was specifically designed to address interparty contracts that are regulated financial
    institutions, which other blockchains just cannot address efficiently.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Corda 分类帐允许管理和同步多方之间可以设计为法律合同的业务协议。Corda 分类帐专门设计用于解决其他区块链无法有效解决的受监管金融机构之间的合同。
- en: There is no centralized ledger operating on behalf of all the nodes on the network,
    which can very different from other blockchains. Instead, each node on the network
    maintains a vault containing all of its known facts. A vault is storage space
    that maintains a secure area for protecting the known facts.
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络上没有代表所有节点运行的集中式分类帐，这与其他区块链非常不同。相反，网络上的每个节点都维护一个包含其所有已知事实的存储库。存储库是维护已知事实的安全区域的存储空间。
- en: 'The Corda Ledger is subjective from each peer''s perspective, meaning that
    the ledger will be accessed differently by each peer depending on membership participation.
    What is somewhat unique is that not all on-ledger facts have to be shared by each
    member for all the other blockchain network members to view. Think about this
    as a “need-to-know” basis or a “compartmentalized” approach to a blockchain ledger.  ###
    R3 Corda Consensus'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Corda 分类帐是从每个对等方的角度主观的，这意味着分类帐将根据成员参与方式而不同地由每个对等方访问。有点独特的是，并非所有在分类帐上的事实都必须由每个成员共享，以便所有其他区块链网络成员查看。可以将此视为“需要知道”的基础，或者是对区块链分类帐采用“分区”的方式思考。###
    R3 Corda 共识
- en: Corda, as mentioned, is operating as a permissioned blockchain ledger for its
    financial-sector membership. This provides more fine-grained access control to
    records and enhances privacy for its membership. It also fair to assume that a
    performance benefit is achieved, as only parties (nodes) taking part in a transaction
    have to reach consensus. The transactions are not distributed to all other nodes.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，Corda 作为其金融部门成员的权限区块链分类账运行。这为记录提供了更精细的访问控制，并增强了其成员的隐私性。可以合理地假设达到了性能上的好处，因为只有参与交易的各方（节点）必须达成共识。交易不会分发给所有其他节点。
- en: Corda allows potentially distrusting parties to reach consensus about the state
    of a set of shared facts. A mechanism is required to ensure all required parties
    agree on the state of the ledger. This capability for Corda to reach consensus
    is facilitated via a verification consensus or uniqueness consensus in Corda.
    This consensus approach in Corda is remarkably different from other blockchains.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 允许潜在的不信任方就一组共享事实的状态达成共识。需要一种机制来确保所有必要的参与方对分类账的状态达成一致。Corda 达成共识的这种能力通过
    Corda 中的验证共识或唯一性共识来促进。Corda 中的这种共识方法与其他区块链有着显著的不同。
- en: Corda consensus is broken into two processes.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 共识分为两个过程。
- en: Transaction validity means that the parties involved can reach certainty that
    a proposed update transaction defining output states is valid by checking that
    the associated contract code runs successfully. It also has all the required signatures
    and that any transactions to which this transaction refers to are also valid.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易的有效性意味着参与方可以通过检查相关合同代码是否成功运行来确信提议的更新交易定义的输出状态是有效的。它还具有所有必需的签名，并且此交易所引用的任何交易也是有效的。
- en: Transaction uniqueness is when the parties can reach certainty that the transaction
    in question is the unique and correct consumer of all its input states. That is,
    there are no other transactions around validity and uniqueness that will consume
    any of the same states.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易的唯一性是指各方可以确信所讨论的交易是所有其输入状态的唯一且正确的消费者。也就是说，在有效性和唯一性周围没有其他交易将消费任何相同状态。
- en: Parties can agree on transaction validity by independently running the same
    contract code and validation logic.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 各方可以通过独立运行相同的合同代码和验证逻辑来就交易的有效性达成一致意见。
- en: '#### CORDA NOTARY'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '#### Corda 公证'
- en: A *notary* is a network service that is unique to Corda. The notary service
    provides what is effectively a uniqueness consensus. One more way to view a notary
    is that it acts as a trusted party that guarantees a particular state is consumed
    only once. You can think of a state similarly to a funding in a wallet in Ethereum
    or the world state in Hyperledger Fabric.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '*公证*是 Corda 特有的网络服务。公证服务实际上提供了唯一性共识。还可以将公证视为一种担保方，保证特定状态仅被消费一次。您可以将状态类似于以太坊钱包中的资金或
    Hyperledger Fabric 中的世界状态。'
- en: The notary provides the point of finality in the system and is similar to an
    intermediary. The process a notary goes through to validate uniqueness is called
    *notarization*. Parties cannot be sure that an equally valid but conflicting transaction
    is regarded as a valid attempt to spend the given input state until the notary
    signature is obtained.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 公证人在系统中提供最终性点，并类似于中间人。公证人用于验证唯一性的过程称为*公证*。除非获得公证人签名，否则各方无法确定是否将同样有效但存在冲突的交易视为对给定输入状态的有效尝试。
- en: For example, each state will have an appointed notary and this notary will notarize
    the transaction only if it is the appointed notary of all the transaction's input
    states. Simply put, notaries are intermediaries who can both block transactions
    and resolve conflicts.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，每个状态将有一个指定的公证人，只有当它是所有交易输入状态的指定公证人时，该公证人才会对交易进行公证。简单地说，公证人是既可以阻止交易又可以解决冲突的中间人。
- en: Corda has pluggable uniqueness services that can improve privacy, scalability,
    legal-system compatibility, and algorithmic agility. For example, a single service
    may be composed of many mutually non-trusting nodes coordinating via a Byzantine
    fault tolerant algorithm or it could be a very simple virtual machine.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 具有可插拔的唯一性服务，可以提高隐私性、可扩展性、与法律体系的兼容性和算法的灵活性。例如，一个单一的服务可以由许多相互不信任的节点组成，通过拜占庭容错算法协调，或者它可以是一个非常简单的虚拟机。
- en: These uniqueness services are required only to attest to whether the states
    consumed by a given transaction have previously been consumed; they are not required
    to attest to the validity of the transaction itself, which is a matter for the
    parties to the transaction.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这些唯一性服务仅需要证明给定交易所消耗的状态是否先前已被消耗；它们不需要证明交易本身的有效性，这是交易各方的问题。
- en: What this really means is that the uniqueness services are not required to see
    the full contents of any transactions. This will significantly improve privacy
    and scalability of the system compared with alternative distributed ledger and
    blockchain designs. This Corda design decision represents an impressive choice
    as to the acceptable trade-offs in shared ledger architectures.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上意味着唯一性服务无需查看任何交易的完整内容。与备选分布式分类账和区块链设计相比，这将显着提高系统的隐私性和可扩展性。这是 Corda 设计决策在共享分类账架构中所接受的折衷选择。
- en: 'In short, the point of finality is reached once the notary service signs the
    transaction. However, there can be exceptions. If a transaction has no input states
    or timestamps, then the “uniqueness” of those properties clearly cannot be confirmed
    nor denied. A notary must be assigned to the transaction, but a notary signature
    is only needed when there are input states and/or timestamps.  ### R3 Corda Nodes'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，当公证服务签署交易时，达到了最终性的点。然而，也可能存在例外情况。如果交易没有输入状态或时间戳，则显然无法确认或否认这些属性的“唯一性”。必须为交易分配公证员，但只有在存在输入状态和/或时间戳时才需要公证签名。###
    R3 Corda 节点
- en: The Java Virtual Machine (JVM) is used for contract execution and validation
    in Corda. This JVM provides several benefits because of the widespread use of
    Java and ease of development. The main point to realize before developing with
    the virtual machine is that it has been augmented with a customized sandbox that
    is more restrictive than the ordinary JVM sandbox. This restrictive virtual machine
    enforces security requirements.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: Java 虚拟机（JVM）用于在 Corda 中执行和验证合约。由于 Java 的广泛使用和开发的便利性，这个 JVM 提供了几个好处。在使用虚拟机进行开发之前要意识到的主要问题是，它已经加强了一个比普通
    JVM 沙箱更严格的定制沙箱。这个限制性虚拟机强制执行安全性要求。
- en: In a nutshell, a Corda node is a JVM runtime environment with a unique identity
    on the blockchain network that hosts Corda services and CorDapps.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Corda 节点是一个 JVM 运行时环境，在区块链网络上具有唯一身份，托管 Corda 服务和 CorDapps。
- en: 'Corda nodes can have four broad categories of functionality, which can be any
    of the following:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 节点可以具有四种广泛的功能，可以是以下任何一种：
- en: Network map provides a way to resolve identities to physical node addresses
    and associated public keys.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络地图提供了一种将标识解析为物理节点地址和关联的公钥的方法。
- en: Notary acts as a “witness” to the transactions and has the final say in whether
    a transaction is a double-spend.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Notary 充当交易的“见证者”，并最终决定交易是否是双重花费。
- en: Oracle is an access point that links the ledger to the outside world by providing
    facts that affect the validity of transactions.
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle 是一个访问点，通过提供影响交易有效性的事实，将分类账与外部世界联系起来。
- en: 'Regular mode starts protocols communicating with other nodes, notaries, and
    oracles, and evolves their private ledgers on the network.  ### R3 Corda States'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正常模式开始协议与其他节点、公证员和 Oracle 通信，并在网络上演变其私有分类账。### R3 Corda 状态
- en: One of the differentiators between other distributed ledger technologies and
    Corda is how the state of blockchain ledger is actually handled. Corda uses the
    term *state* to mean a representation of immutable objects with shared facts such
    as an agreement or contract at a specific point in time.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 与其他分布式分类账技术之间的一个区别是区块链分类账的状态实际上是如何处理的。Corda 使用*状态*一词表示在特定时间点上具有共享事实（如协议或合同）的不可变对象的表示。
- en: The terms *shared facts* and *states* can essentially mean the same thing and
    are generally used interchangeably. Let's clarify what a *state* can be in Corda
    from a ledger perspective. A state may represent anything that the member agrees
    upon, such as a bank note, invoices, and so on at a specific time. This is similar
    to a world state in other blockchains. A static state means that there is no change
    to the representation of the object being defined.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '*共享事实*和*状态*这两个术语基本上意味着相同的事情，并且通常可以互换使用。让我们从分类账的角度澄清一下 Corda 中*状态*可以是什么。从分类账的角度来看，状态可以表示成员在特定时间同意的任何内容，例如银行票据、发票等等。这类似于其他区块链中的世界状态。静态状态意味着对定义的对象的表示没有变化。'
- en: 'For example, if you are familiar with the financial sector, then you can have
    states representing the following:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您熟悉金融领域，那么您可以拥有以下表示状态的状态：
- en: Collateralized debt obligations (CDOs)
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抵押债务证券（CDO）
- en: Collateralized loan obligations (CLOs)
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抵押贷款证券（CLO）
- en: Invoices or statements
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发票或对账单
- en: Bank credits
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 银行信用
- en: Credit default swaps
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信用违约互换
- en: Rate swaps such as interest rates
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利率互换，如利率
- en: Bonds
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 债券
- en: Basically, in Corda the state model can be used to represent literally anything
    that is part of an agreement. A state can be used to represent financial instruments
    or multilateral agreements, assets, or liabilities.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，在 Corda 中，状态模型可用于表示任何属于协议的部分。状态可用于表示金融工具或多边协议、资产或负债。
- en: 'Different types of states can contain different attributes. For instance, a
    trade bond could have a coupon date, a redemption date, and so on. States are
    immutable and therefore cannot be changed to another state after created. States
    contain data about shared facts at a specific point in time.  ### R3 Corda Transactions'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '不同类型的状态可以包含不同的属性。例如，交易债券可能具有票息日期、赎回日期等。状态是不可变的，因此在创建后不能更改为另一种状态。状态包含特定时间点的共享事实数据。  ###
    R3 Corda 交易'
- en: Transactions in R3 Corda are very specific in the sense that it's clearly defined
    which command is to be issued. For example, in Corda, we would declare intent
    as “Issue” or “Agree” in a CorDapp, and the CorDapp would determine whether the
    transactions are valid.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R3 Corda 中，交易非常具体，因为明确定义了要发出哪个命令。例如，在 Corda 中，我们会在 CorDapp 中声明意图为“发行”或“同意”，而
    CorDapp 将确定交易是否有效。
- en: Assume your organization wants to declare which type of transaction is being
    agreed upon. When you design a CordApp, you need to identify the type of transactions
    appropriately.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您的组织希望声明正在达成的交易类型。当您设计 CordApp 时，您需要适当地识别交易类型。
- en: Transactions in R3 Corda are propagated around the network but are not broadcast
    to every node. The broadcast is verified more on a need-to-know approach. This
    allows members to ensure that they maintain privacy around transactions.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R3 Corda 中的交易在网络中传播，但不会广播到每个节点。广播更多地是基于需求的方法进行验证。这使成员能够确保他们在交易周围保持隐私。
- en: 'This transaction approach is comparable to channeling in Hyperledger where
    you have nodes in the network that can be placed on a channel to communicate for
    privacy concerns.  ### R3 Corda Client Applications'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '这种交易方式类似于 Hyperledger 中的通道化，其中网络中的节点可以放置在通道上以进行通信以解决隐私问题。  ### R3 Corda 客户端应用程序'
- en: When considering client applications to integrate with R3 Corda in your enterprise,
    you must realize that Java or Kotlin is used for the Corda APIs. This is not exactly
    a showstopper but something to be aware of. Corda, however, does provide a full
    client library that allows your developers to write clients in a JVM-compatible
    language to interact with the running nodes.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑将客户应用程序集成到您的企业中的 R3 Corda 时，您必须意识到 Corda APIs 使用 Java 或 Kotlin。这并不完全是一种阻碍，但需要注意的事项之一。然而，Corda
    提供了一个完整的客户端库，允许您的开发人员使用 JVM 兼容的语言编写客户端与运行中的节点进行交互。
- en: 'Corda has provided a sample CorDApp for those that would appreciate a tutorial
    in Corda. You can find it at `[https://docs.corda.net/tutorial-cordapp.html](https://docs.corda.net/tutorial-cordapp.html)`.
    For community-driven applications, visit `[https://www.corda.net/develop/samples.html](https://www.corda.net/develop/samples.html)`.  ###
    R3 Corda Smart Contracts'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 'Corda 为那些希望在 Corda 中进行教程的人提供了一个样本 CorDApp。您可以在 `[https://docs.corda.net/tutorial-cordapp.html](https://docs.corda.net/tutorial-cordapp.html)`
    找到它。对于社区驱动的应用程序，请访问 `[https://www.corda.net/develop/samples.html](https://www.corda.net/develop/samples.html)`。  ###
    R3 Corda 智能合约'
- en: In R3 Corda, smart contracts are also referred to as *contracts* and may be
    legally enforceable when the legal prose has been agreed upon by the participants
    in the CordApps. Comparatively, in Ethereum, a smart contract is a singular program
    and not an enforceable contract.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R3 Corda 中，智能合约也被称为 *合约*，当 CordApps 的参与者已经就法律条文达成协议时，这些合约可能是可以被执行的。相比之下，在以太坊中，智能合约是一个独立的程序，而不是可执行的合同。
- en: In Corda, these contracts are deployed via a CorDapp, which is simply a collection
    of contracts working together as an application. In Ethereum this is called a
    *distributed application* (dapp).Realize that these contracts are somewhat different
    from the smart contracts of other blockchain platforms such as Ethereum. In Corda,
    these contracts are not stateful objects representing the current state of the
    world but more like real-world contracts that may have legal prose attached as
    well.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Corda 中，这些合约是通过 CorDapp 部署的，它只是一组作为应用程序一起工作的合约。在以太坊中，这被称为*分布式应用程序*（dapp）。请注意，这些合约与其他区块链平台（如以太坊）的智能合约有些不同。在
    Corda 中，这些合约不是表示世界当前状态的有状态对象，而更像是可能附带法律文书的现实世界合约。
- en: States can contain arbitrary data, allowing them to represent facts such as
    a stock trades, bank notes, or loans, for example.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 状态可以包含任意数据，使其能够表示诸如股票交易、银行票据或贷款等事实。
- en: R3 Corda smart contracts (CordApps) consist of computer code but also can contain
    legal prose that is attached. This is a big differentiator between other blockchains
    since this feature was clearly planned for its members.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: R3 Corda 智能合约（CordApps）由计算机代码组成，但也可以包含附加的法律文书。这是与其他区块链不同的一个重要区别，因为这个功能明显是为其成员所计划的。
- en: Above the smart legal contracts is specific legal prose that are formulated
    in a way that they can be expressed and implemented in smart contract code. The
    rationale behind this is to give the code legitimacy that is affiliated in the
    associated legal prose.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '在智能法律合同之上是特定的法律文书，这些文书被设计为以智能合约代码的形式表达和实现。这样做的理由是为了给与相关法律文书相关的代码合法性。  '
- en: This specific construct historically has been called a Ricardian contract in
    the financial sector. The Ricardian contract was devised by Ian Grigg in 1996,
    as a method of recording a document as a contract of law and linking it securely
    to other systems, such as accounting, as an issuance of value.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，这种特定构造在金融领域被称为里卡迪亚合约。里卡迪亚合约是由 Ian Grigg 在 1996 年设计的，作为将文件记录为法律合同并将其安全链接到其他系统（如会计）的一种方法，作为价值发行。
- en: In the blockchain world, Ricardian contracts are nothing more than digital documents
    that define the detailed terms and conditions of a contract. These contracts are
    usually signed and agreed to by both parties. This Ricardian contract approach
    is used to mitigate current contract issues but also provides clarity to any contract
    challenges in the future.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在区块链世界中，里卡迪亚合约只不过是定义合同详细条款和条件的数字文件。这些合同通常由双方签署并同意。这种里卡迪亚合约方法用于缓解当前的合同问题，但也为未来的任何合同挑战提供了清晰度。
- en: To summarize, a CorDapp is a Ricardian contract that is written with the standard
    legal prose that is required in court and then is cryptographically hashed to
    be available for usage by the application. Corda also has an interesting approach
    that allows a regulatory body to actually be given oversight access. This regulatory
    body can also be brought into the network to act as an observer to verify the
    contract as well (see [Figure 2.8](#c02-fig-0008)).
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，CorDapp 是一个带有法院要求的标准法律文书编写的里卡迪亚合约，然后对其进行加密哈希以供应用程序使用。Corda 还有一种有趣的方法，允许监管机构实际上获得监督访问权限。该监管机构还可以被引入网络作为观察员来验证合同（参见[图
    2.8](#c02-fig-0008)）。
- en: '![Flow chart illustrating the Corda smart contract legal prose, which involves
    four stages, namely CorDaFlow chart illustrating the Corda smart contract legal
    prose involving four stages, namely cordapp, regulatory, legal body, and settlement.
    The handshake symbol depicts successful agreement and letter symbol depicts the
    attached legal prose.pp, regulatory, legal body, and settlement.](images/c02f008.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![流程图，说明 Corda 智能合约法律文书，包括四个阶段，即 CorDapp、监管、法律主体和结算。握手符号表示成功达成协议，信函符号表示附加的法律文书。](images/c02f008.png)'
- en: '[**FIGURE 2.8**](#R_c02-fig-0008) Corda smart contract with legal prose'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '[**图 2.8**](#R_c02-fig-0008) 具有法律文书的 Corda 智能合约'
- en: 'The following are the benefits of smart contracts (CorDapps) in Corda specifically
    for financial institutions that use Corda:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Corda 中特定用于使用 Corda 的金融机构的智能合约（CorDapps）的好处：
- en: Smart contracts regulate and streamline the workflow between the participating
    decentralized firms.
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约调节和简化参与的分散企业之间的工作流程。
- en: These CorDapps also include supervisory and regulatory nodes that provide an
    observer responsibility.
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些 CorDapps 还包括监管和监管节点，提供观察者责任。
- en: The consensus algorithms are limited & to the firms involved.
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共识算法仅限于参与的公司。
- en: Access to the data within an agreement is limited to the permissioned parties
    involved.
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问协议内部数据的权限仅限于参与的经许可方。
- en: 'The CordApps also validate the transaction solely between the two parties that
    are participating.  ### R3 Corda Development Tools'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CordApps 还仅在参与的两方之间验证交易。### R3 Corda 开发工具
- en: R3 Corda, being a private consortium that was built from the ground up to develop
    enterprise blockchains for its consortium members, has a wealth of documentation,
    tools, and services. Corda has a large following of developers, and Corda as an
    organization provides, in my opinion, superior community events that really help
    drive development.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: R3 Corda 是一个私人财团，从头开始建立，为其财团成员开发企业区块链，拥有丰富的文档、工具和服务。Corda 拥有大量的开发者追随者，并且作为一个组织，Corda
    提供了，在我看来，非常有帮助推动开发的优秀社区活动。
- en: '**Corda DemoBench** DemoBench is a stand-alone desktop application that makes
    it easy to configure and launch local Corda nodes. It is useful for training sessions,
    demos, and experimentation. To learn more, visit'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Corda DemoBench** DemoBench 是一个独立的桌面应用程序，可以轻松配置和启动本地 Corda 节点。它非常适用于培训、演示和实验。要了解更多信息，请访问'
- en: '`[https://www.corda.net/discover/demobench.html](https://www.corda.net/discover/demobench.html)`.'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.corda.net/discover/demobench.html](https://www.corda.net/discover/demobench.html)。'
- en: '[Figure 2.9](#c02-fig-0009) shows the starting window after you launch Corda
    DemoBench. We can configure our node and also determine the type of notary in
    Corda Demobench. After you download and install DemoBench, you can start adding
    nodes and notaries.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[图2.9](#c02-fig-0009) 显示了启动 Corda DemoBench 后的起始窗口。我们可以配置我们的节点，并确定 Corda Demobench
    中的记账人类型。在下载并安装 DemoBench 后，您可以开始添加节点和记账人。'
- en: '![Screen capture depicting the initial window that appears after launching
    Corda DemoBench, where a node can be configured and the type of notary can be
    determined. Left column depicts the cordapp extension, and the right column depicts
    the type of configuration.](images/c02f009.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![屏幕截图描绘了启动 Corda DemoBench 后出现的初始窗口，其中可以配置节点并确定 Corda DemoBench 中的记账人类型。左列显示了
    cordapp 扩展，右列显示了配置类型。](images/c02f009.png)'
- en: '[**FIGURE 2.9**](#R_c02-fig-0009) Corda DemoBench initial screen'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '[**图2.9**](#R_c02-fig-0009) Corda DemoBench 初始屏幕'
- en: I cover the installation, configuration and walk thru a demo in [Chapter 5](c05.xhtml).
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我在[第五章](c05.xhtml)中涵盖了安装、配置和演示步骤。
- en: '**Node Explorer** “The Node Explorer provides views to the node''s vault and
    transaction data using Corda''s RPC framework.”'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**节点浏览器** “节点浏览器使用 Corda 的 RPC 框架提供了对节点存储库和事务数据的视图。”'
- en: '`[https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases/net/corda/corda-tools-explorer/3.2-corda/](https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases/net/corda/corda-tools-explorer/3.2-corda/)`.'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`[https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases/net/corda/corda-tools-explorer/3.2-corda/](https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases/net/corda/corda-tools-explorer/3.2-corda/)`。'
- en: '**Blob Inspector** With Corda 3, R3 Corda has guaranteed a wire stable AMQP
    serialization format. As a binary format, it has various advantages over text-based
    protocols but also has the same downside: lack of human readability. The Blob
    Inspector fills this gap. Given a file path or URL, it will display the contents
    of Corda blobs in YAML or JSON.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blob Inspector** 在 Corda 3 中，R3 Corda 已经确保了一种稳定的 AMQP 序列化格式。作为一种二进制格式，它具有各种优点，但也有同样的缺点：缺乏人类可读性。Blob
    Inspector 填补了这一空白。给定文件路径或 URL，它将以 YAML 或 JSON 格式显示 Corda blob 的内容。'
- en: 'You can find documentation for the Blob Inspector here:'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在这里找到 Blob Inspector 的文档：
- en: '`[https://docs.corda.net/head/blob-inspector.html](https://docs.corda.net/head/blob-inspector.html)`.'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`[https://docs.corda.net/head/blob-inspector.html](https://docs.corda.net/head/blob-inspector.html)`。'
- en: 'You can download the Blob Inspector from here:'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以从这里下载 Blob Inspector：
- en: '`[https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases/net/corda/corda-blob-inspector/3.2-corda/corda-blob-inspector-3.2-corda.jar](https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases/net/corda/corda-blob-inspector/3.2-corda/corda-blob-inspector-3.2-corda.jar)`.'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`[https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases/net/corda/corda-blob-inspector/3.2-corda/corda-blob-inspector-3.2-corda.jar](https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases/net/corda/corda-blob-inspector/3.2-corda/corda-blob-inspector-3.2-corda.jar)`。'
- en: '**Network Bootstrapper** “This is a tool that scans all the node configurations
    from a common directory to generate the network parameters file, which is then
    copied to all the nodes'' directories. It also copies each node''s node-info file
    to every other node so that they can all be visible to each other. You can find
    the documentation for the Network Bootstrapper here:”'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络引导程序**“这是一个从一个共同目录扫描所有节点配置以生成网络参数文件的工具，然后将其复制到所有节点的目录中。它还将每个节点的节点信息文件复制到每个其他节点，以便它们都可以相互可见。您可以在此处找到网络引导程序的文档：”'
- en: '`[https://docs.corda.net/head/network-bootstrapper.html](https://docs.corda.net/head/network-bootstrapper.html)`.'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`[https://docs.corda.net/head/network-bootstrapper.html](https://docs.corda.net/head/network-bootstrapper.html)`.'
- en: “You can download the latest version from here:”
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “您可以从此处下载最新版本：”
- en: '`[https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases/net/corda/corda-network-bootstrapper/3.2-corda/corda-network-bootstrapper-3.2-corda-executable.jar](https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases/net/corda/corda-network-bootstrapper/3.2-corda/corda-network-bootstrapper-3.2-corda-executable.jar)`.  ###
    R3 Corda Governance'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`[https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases/net/corda/corda-network-bootstrapper/3.2-corda/corda-network-bootstrapper-3.2-corda-executable.jar](https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases/net/corda/corda-network-bootstrapper/3.2-corda/corda-network-bootstrapper-3.2-corda-executable.jar)`.###
    R3 Corda 治理'
- en: Governance in Corda is clearly an important priority because of the nature of
    its financial sector clients where compliance and liability are a great concern
    to its consortium members.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Corda 的金融行业客户的性质，治理显然是一个重要的优先事项，其中合规性和责任对其财团成员而言是一个重大关切。
- en: Corda uses a unique approach to transaction oversight through the use of a notary
    oversight procedure. A notary is considered a trusted party that guarantees that
    a particular state is consumed only once in Corda. This guarantee of state in
    Corda from the notary eliminates challenges such as any double spending issues,
    over drafting your account, and even can deal with currency exchange–based issues.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 通过使用公证监督程序采用了一种独特的交易监督方法。公证员被认为是一个可信任的方，保证 Corda 中的特定状态仅被消耗一次。来自公证员的 Corda
    状态保证消除了诸如任何双重花费问题、透支账户问题甚至可以处理基于货币兑换的问题等挑战。
- en: Notaries are the main blockchain network's governance structure in a sense because
    they validate the transaction uniqueness and the participation in the network.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 其实，公证员在某种程度上是主要的区块链网络治理结构，因为他们验证了交易的唯一性和网络参与。
- en: In Corda, there is no unified blockchain that contains a record of all the transactions.
    Corda has a different approach where the Corda nodes will see only those transactions
    in which they are directly involved or which they depend on historically for validation
    purposes.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Corda 中，没有包含所有交易记录的统一区块链。Corda 采用了一种不同的方法，其中 Corda 节点将只看到它们直接参与的交易或在历史上对其进行验证的交易。
- en: 'Lastly, the Corda nodes are responsible for checking transaction correctness
    and authorizing the transactions. The Corda nodes fully rely on notaries to verify
    the uniqueness of transactions and provide governance of the blockchain, which
    is a critical part of the governance structure.  ## Introducing Quorum'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Corda 节点负责检查交易的正确性并授权交易。Corda 节点完全依赖于公证员来验证交易的唯一性并提供区块链的治理，这是治理结构的关键部分。##
    介绍 Quorum
- en: Quorum is an open source blockchain solution built by enhancing the existing
    Ethereum blockchain. Quorum is based on the official Go implementation of the
    Ethereum protocol, which provides almost a mirror of Ethereum features and benefits.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum 是通过增强现有的以太坊区块链构建的开源区块链解决方案。Quorum 基于以太坊协议的官方 Go 实现，几乎提供了以太坊功能和优势的镜像。
- en: Quorum provides an additional layer on top of Ethereum that enables it to perform
    private transactions but also makes it more flexible by using different consensus
    algorithms. Quorum overall was designed as a permissioned implementation of Ethereum
    that supports the enterprise requirements of transaction privacy and contract
    privacy.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum 在以太坊之上提供了一个额外的层，使其能够执行私有交易，同时通过使用不同的共识算法使其更加灵活。Quorum总体上是作为以太坊的一个有许可的实现而设计的，它支持交易隐私和合同隐私的企业需求。
- en: The main use case for Quorum is that it can achieve data privacy through the
    introduction of a new “private” transaction identifier with modifications to the
    Ethereum codebase. These modifications are provided in the Go-Ethereum codebase,
    which includes modifications to the block proposal and validation processes. Data
    privacy in Quorum is achieved through cryptography and also through an intentional
    segmentation of the nodes similar to sandboxing.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum 的主要用例是通过引入新的“私有”交易标识符并对以太坊代码库进行修改来实现数据隐私。这些修改包含在 Go-Ethereum 代码库中，其中包括对区块提案和验证过程的修改。
    Quorum 中的数据隐私是通过密码学和节点类似于沙箱化的有意隔离来实现的。
- en: The main reason an enterprise would choose Quorum over Ethereum is privacy;
    a secondary reason is that Quorum is based on Ethereum, which has a robust and
    active development base making it easy to find expertise.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 企业选择 Quorum 而不是以太坊的主要原因是隐私；其次是 Quorum 基于以太坊，后者拥有强大且活跃的开发基础，因此很容易找到专业知识。
- en: Quorum supports private transactions and private contracts through public and
    private state segmentation. Quorum supports privacy by using a newer messaging
    exchange called Constellation. Constellation is a peer-to-peer encrypted message
    exchange used for the targeted transfer of private data to network participants.
    This messaging exchange is similar to what we have in Hyperledger with the implementation
    of Kafka.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum 支持通过公共和私有状态分割来实现私有交易和私有合约。Quorum 使用一种称为 Constellation 的新消息交换来实现隐私。Constellation
    是用于向网络参与者定向传输私有数据的点对点加密消息交换。这种消息交换类似于我们在 Hyperledger 中使用 Kafka 实现的消息交换。
- en: Quorum offers options for consensus mechanisms that are considered desirable
    for a consortium use case. For example, Istanbul Byzantine fault tolerance and
    a Raft-based consensus are two consensus methods that support enterprise features
    such as fault tolerance and availability.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum 提供了可用于联盟用例的共识机制选项。例如，Istanbul 拜占庭容错和基于 Raft 的共识是支持企业特性（如容错性和可用性）的两种共识方法。
- en: Quorum Chain is a new consensus that is based on a majority voting and time-based
    mechanism that supports Ethereum-based transactions that can be propagated through
    the network.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum Chain 是一种新的共识，它基于多数投票和基于时间的机制，支持可以通过网络传播的基于以太坊的交易。
- en: '[Figure 2.10](#c02-fig-0010) shows the high-level components of the Quorum
    blockchain. You can see that there is a Quorum node with Go-Ethereum, which extends
    the capabilities to the Ethereum network.'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2.10](#c02-fig-0010) 展示了 Quorum 区块链的高级组件。您可以看到其中有一个带有 Go-Ethereum 的 Quorum
    节点，它扩展了到以太坊网络的能力。'
- en: '![Schematic diagram illustrating the components of Quorum blockchain. The boxes
    labeled Node, Go-Ethereum, Constellation, Transaction Manger, Enclave, Private
    Ethereum Network, Client Apps are the blockchain components.](images/c02f010.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![Quorum 区块链组件的示意图。 标有 Node、Go-Ethereum、Constellation、Transaction Manager、Enclave、Private
    Ethereum Network、Client Apps 的方框是区块链组件。](images/c02f010.png)'
- en: '[**FIGURE 2.10**](#R_c02-fig-0010) Quorum blockchain components'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '[**图 2.10**](#R_c02-fig-0010) Quorum 区块链组件'
- en: 'Constellation is a mechanism for submitting information and allows encrypted
    communication between peers. Constellation consists of two parts: a transaction
    manager and Enclave.'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: Constellation 是一个提交信息的机制，并允许对等方之间的加密通信。 Constellation 包括两个部分：事务管理器和 Enclave。
- en: Permissions at the node level are governed by smart contract code. The main
    benefit is that it provides a higher level of performance compared to the public
    Ethereum blockchain.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 节点级别的权限由智能合约代码管理。其主要优点是与公共以太坊区块链相比，它提供了更高水平的性能。
- en: 'The primary features of Quorum over public Ethereum are as follows:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum 相对于公共以太坊的主要特点如下：
- en: Transaction and contract privacy
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易和合约的隐私
- en: Multiple voting-based consensus mechanisms
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多种基于投票的共识机制
- en: Network/peer permissions management
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络/节点权限管理
- en: Better performance and scalability because of its simple consensus
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于其简单的共识机制，性能和可扩展性更好
- en: In Quorum, a transaction has to be either public or private. If the transaction
    is private, all the data within that transaction is private for that set of entities
    in the blockchain.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Quorum 中，交易必须是公开的或私有的。如果交易是私有的，则该交易中的所有数据对于区块链中的一组实体来说都是私有的。
- en: In a nutshell, Quorum is open source and more approachable for some organizations
    than implementing a custom private blockchain on other platforms.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Quorum 是开源的，并且对于一些组织来说比在其他平台上实现自定义私有区块链更易接近。
- en: Quorum aims to be a platform that allows integration and experimentation with
    not only the financial industry, but also other companies interested in the blockchain
    technology using a proven platform on Ethereum.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum 的目标是成为一个平台，允许与金融行业以及其他对以太坊区块链技术感兴趣的公司集成和实验，使用以太坊上的一个经过验证的平台。
- en: '### Quorum Blockchain Fundamentals'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '### Quorum 区块链基础知识'
- en: Quorum is a private/permissioned blockchain platform based on the official Go
    implementation of the Ethereum protocol with an enterprise focus. Quorum was built
    on top of an existing Ethereum blockchain and inherits the maturity of the production-hardened
    “go-Ethereum” code base. Quorum has brought together the public and enterprise
    development communities on a common protocol to work for the financial sectors.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum 是基于以太坊协议的官方 Go 实现的私有/许可区块链平台，重点面向企业。Quorum 是建立在现有以太坊区块链之上的，并继承了经过生产测试的“go-Ethereum”代码库的成熟性。Quorum
    将公共和企业开发社区汇集到一个共同的协议上，为金融行业提供服务。
- en: Quorum uses a voting-based consensus algorithm extremely effectively and then
    achieves data privacy through the introduction of a new “private” transaction
    identifier.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum 非常有效地使用基于投票的共识算法，然后通过引入新的“私有”交易标识符实现数据隐私。
- en: One of the clearly stated design goals of Quorum was to reuse as much existing
    technology as possible from Ethereum to minimize the changes required for Go-Ethereum
    to work efficiently.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum 的一个明确的设计目标是尽可能地重用以太坊中的现有技术，以最小化对 Go-Ethereum 所需的更改。
- en: Strategically, for example, this plan actually reduced the effort required to
    keep in sync with future versions of the public Ethereum codebase. Much of the
    logic responsible for the additional privacy functionality resides in a layer
    that sits on top of the standard Ethereum protocol layer.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 战略性地，例如，这个计划实际上减少了与未来版本的公共以太坊代码库保持同步所需的工作量。负责额外隐私功能的大部分逻辑都位于一个层次结构中，该层次结构位于标准以太坊协议层的顶部。
- en: Based on its official description, Quorum is essentially an extension of Ethereum
    through a strategic fork of its code base. The Quorum blockchain has many similarities
    to Ethereum. Quorum has a clear mission to provide the best features of a permissionless
    blockchain with the added privacy, security, and performance of a permissioned
    blockchain for a targeted audience.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 根据其官方描述，Quorum 本质上是以太坊的一个扩展，通过对其代码库进行战略性分叉而实现。Quorum 区块链与以太坊有许多相似之处。Quorum 的明确任务是为目标受众提供权限区块链的最佳特性，并为其提供权限区块链的隐私性、安全性和性能。
- en: Quorum was developed by J.P. Morgan Chase and its consortium members. Quorum
    is one of the first major steps toward the common adoption of blockchain among
    financial industries.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum 是由摩根大通及其财团成员开发的。Quorum 是金融行业普遍采用区块链的一大步。
- en: Essentially, Quorum functions similarly to Ethereum but has four very significant
    differences or areas to appreciate when compared to native Ethereum.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，Quorum 的功能类似于以太坊，但在与原生以太坊进行比较时有四个非常重要的不同点或需要注意的领域。
- en: Network and peer permissions management to sandbox transactions on a private
    Ethereum platform
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络和对等节点权限管理，以在私有以太坊平台上对交易进行隔离
- en: Increased transaction and contract privacy through private transactions
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过私有交易增加交易和合约的隐私性
- en: Voting-based consensus mechanisms not available in Ethereum
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊中没有可用的基于投票的共识机制
- en: 'Higher performance due to limited nodes  ### Quorum Ledger'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '由于节点有限而表现更好  ### Quorum 分类帐'
- en: This system has two distinct types of possible transactions in Quorum, which
    are public and private transactions. *Public transactions* are transactions where
    the payload is fully visible to all participants. These publicly viewable transactions
    are the standard Ethereum transactions you're expecting on the Ethereum blockchain.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Quorum 中，系统有两种明显不同类型的交易，即公共交易和私有交易。 *公共交易* 是指有效负载对所有参与者完全可见的交易。这些公开可查看的交易是您在以太坊区块链上期望的标准以太坊交易。
- en: '*Private transactions* are different where the payload is visible only to participants
    whose public keys are specified in the `privateFor` parameter of the transaction.  ###
    Quorum Consensus'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '*私有交易* 不同之处在于，有效载荷只对在交易的 `privateFor` 参数中指定了公钥的参与者可见。 ### Quorum 共识'
- en: Consensus in Quorum is somewhat more flexible than other blockchains. For example,
    Quorum offers options for consensus mechanisms that are considered desirable for
    consortium use cases.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum中的共识比其他区块链略为灵活。例如，Quorum提供了适用于联盟用例的共识机制的选项。
- en: 'These consensus choices are as follows:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 这些共识选择如下所示：
- en: Istanbul Byzantine fault tolerance and raft-based consensus are consensus methods
    that support enterprise features such as fault tolerance and availability.
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 伊斯坦布尔拜占庭容错和基于Raft的共识是支持企业特性（如容错性和可用性）的共识方法。
- en: Quorum Chain is a newer consensus based on a majority voting and time-based
    mechanisms that support Ethereum-based transactions that can be propagated through
    the network, for example.
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Quorum Chain是一种基于多数投票和基于时间的机制的新型共识，支持可以通过网络传播的基于以太坊的交易，例如。
- en: 'There exists two blockchain states in Quorum. The first state is the public
    state shared by all nodes of public transactions, and the second state is the
    private state local to each node for the private transactions the nodes are authorized
    for.  ### Quorum Smart Contracts'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum存在两种区块链状态。第一个状态是由所有节点共享的公共交易的公共状态，第二个状态是每个节点私有的，用于节点被授权的私有交易。### Quorum智能合约
- en: As previously mentioned, Quorum is based on Ethereum and is a fork of the Ethereum
    blockchain. With that being said, implementing and using Ethereum smart contracts
    will be quite familiar to Ethereum developers.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Quorum基于以太坊，并且是以太坊区块链的一个分叉。说到这一点，实施和使用以太坊智能合约对以太坊开发者来说将会非常熟悉。
- en: Quorum uses the standard Solidity language for writing smart contracts. This
    provides immense value since you can design as you have been in Ethereum.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum使用标准的Solidity语言编写智能合约。这提供了巨大的价值，因为你可以像在以太坊中一样进行设计。
- en: One of the differentiators is that smart contracts can be either public or private
    to one or more network participants on the Quorum blockchain network.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个区别在于智能合约可以是公共的，也可以是私有的，可以是对Quorum区块链网络上的一个或多个网络参与者私有的。
- en: The main difference is that with Quorum you can send a private transaction using
    the Ethereum network protocols. In Quorum, you can send a private transaction
    by coding your smart contract to address this requirement for a private transaction.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 主要区别在于使用Quorum可以使用以太坊网络协议发送私有交易。在Quorum中，你可以通过编写你的智能合约来发送私有交易以满足这一要求。
- en: On a Quorum network you would send a standard Ethereum transaction but set the
    `privateFor` parameter on the message to be the public key of the participant
    that should be able to view and execute the transaction or contract code.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在Quorum网络上，你会发送一个标准的以太坊交易，但将消息的`privateFor`参数设置为应该能够查看和执行该交易或合约代码的参与者的公钥。
- en: '[Figure 2.11](#c02-fig-0011) shows a private transaction in a know your customer
    (KYC) use case.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '[图2.11](#c02-fig-0011)显示了了解你的客户（KYC）用例中的私有交易。'
- en: '![Image described by caption and surrounding text.](images/c02f011.png)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
  zh: '![由标题和周围文本描述的图片。](images/c02f011.png)'
- en: '[**FIGURE 2.11**](#R_c02-fig-0011) KYC private transaction in Quorum'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '[**图2.11**](#R_c02-fig-0011) Quorum中的KYC私有交易'
- en: For more on this, go to `[https://github.com/jpmorganchase/quorum/wiki/Using-Quorum](https://github.com/jpmorganchase/quorum/wiki/Using-Quorum)`.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 若要了解更多，请访问`[https://github.com/jpmorganchase/quorum/wiki/Using-Quorum](https://github.com/jpmorganchase/quorum/wiki/Using-Quorum)`。
- en: 'Private contracts cannot update public contracts. This is intentional, as not
    all participants will be able to execute a private contract. It is important to
    note that once a contract has been made public, the contract cannot be made private
    later. For a public contract to become private, it would need to be deleted from
    the blockchain and a new private contract would have to be created.  ### Quorum
    Tools and Utilities'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 私有合约无法更新公共合约。这是有意的，因为并非所有参与者都能执行私有合约。需要注意的是，一旦合约被公开，该合约就无法稍后变为私有。要使公共合约变为私有，需要将其从区块链中删除，并创建一个新的私有合约。###
    Quorum工具和实用程序
- en: Quorum is based on Ethereum, as we already know, so this allows smart contracts
    to be built with Solidity. Quorum also shares some core development tools with
    Ethereum. One of those tools is Truffle, which is exactly what the majority of
    Ethereum developers are likely using already.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum基于以太坊，正如我们已经知道的那样，因此允许使用Solidity构建智能合约。Quorum还与以太坊共享一些核心开发工具。其中一个工具是Truffle，这恰好是大多数以太坊开发者可能已经在使用的工具。
- en: Essentially, an Ethereum developer will have very little development ramp-up
    time and learning curve for integrating the Quorum blockchain solution due to
    the use of Ethereum tools and utilities.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，以太坊开发人员在集成Quorum区块链解决方案时几乎没有开发启动时间和学习曲线，因为使用了以太坊工具和实用程序。
- en: One tool that was built specifically for Quorum is called Cakeshop. Cakeshop
    provides an easy-to-use graphic interface (GUI) for working with Quorum networks,
    smart contracts, and Quorum APIs. Cakeshop can start up a Geth node, which you
    can then interact with using the Cakeshop front end or can be connected to an
    Ethereum-like node, such as Quorum, that you already have running. The given Cakeshop
    instance will connect with only one node on the blockchain network you specify.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 专门为Quorum构建的一项工具称为Cakeshop。Cakeshop提供了一个易于使用的图形界面（GUI），用于处理Quorum网络、智能合约和Quorum
    API。Cakeshop可以启动一个Geth节点，然后您可以使用Cakeshop前端与其交互，或者连接到您已经在运行的类似以太坊的节点，比如Quorum。给定的Cakeshop实例将仅连接到您指定的区块链网络上的一个节点。
- en: 'You can download the Cakeshop GUI from `[https://github.com/jpmorganchase/cakeshop/wiki/Cakeshop-Overview](https://github.com/jpmorganchase/cakeshop/wiki/Cakeshop-Overview)`.
    For more about Quorum development and tools, please refer to [Chapter 10](c10.xhtml).  ###
    Quorum Governance'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '你可以从`[https://github.com/jpmorganchase/cakeshop/wiki/Cakeshop-Overview](https://github.com/jpmorganchase/cakeshop/wiki/Cakeshop-Overview)`下载Cakeshop
    GUI。有关Quorum开发和工具的更多信息，请参阅[第10章](c10.xhtml)。  ### Quorum治理'
- en: Quorum's permissioned chain is a consortium blockchain and was devised to be
    implemented between participants who are pre-approved by a designated authority.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum的许可链是一个联合区块链，旨在在经过指定权威预先批准的参与者之间实施。
- en: Because Quorum is a fork of the Ethereum blockchain, governance is not exactly
    supported well. For example, as in Ethereum, a per-node permissioning capability
    can be set up via smart contracts to provide some governance. It is expected,
    as funding comes from the Enterprise Ethereum Alliance (EEA), that governance,
    compliance, and other enterprise concerns will be addressed more in detail.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 因为Quorum是以太坊区块链的一个分叉，所以治理并不是很好地支持。例如，就像以太坊一样，可以通过智能合约设置每个节点的权限功能，以提供一些治理。随着资金来自企业以太坊联盟（EEA），预计将更详细地解决治理、合规性和其他企业关注的问题。
- en: It's important to note that the Quorum road map of private transactions and
    smart contracts is on the project list for the development team to work on.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，Quorum私人交易和智能合约的路线图已经列入开发团队的项目列表中。
- en: 'It is also important to note that Quorum has been working with the Zcash team
    to integrate the zero-knowledge security layer (ZSL) into the Quorum protocol.
    These important and highly requested future features could provide some additional
    benefits around compliance, security, and privacy.  ## Introducing Ethereum'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '还需要注意的是，Quorum一直在与Zcash团队合作，将零知识安全层（ZSL）集成到Quorum协议中。这些重要且广受欢迎的未来功能可能会在合规性、安全性和隐私方面提供一些额外的好处。  ##
    介绍以太坊'
- en: Ethereum is an open source platform based on blockchain technology that enables
    developers to build and deploy decentralized applications (smart contracts).
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '[以太坊](https://example.org/ethereum)是一个基于区块链技术的开源平台，使开发人员能够构建和部署去中心化应用程序（智能合约）。'
- en: Ethereum is essentially a world computer that is distributed between thousands
    of nodes. This computer of many distributed nodes is accessible to anyone, anywhere,
    with Internet access. There are no membership requirements to address, and it
    is truly a public blockchain.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊本质上是一个分布在数千个节点之间的全球计算机。这个由许多分布式节点组成的计算机对任何有互联网接入的人都是可访问的。没有任何会员资格要求，它是真正的公共区块链。
- en: The first public beta prerelease network was known as Olympic. The Olympic network
    provided users with a bug bounty of 25,000 Ethers for stress testing the limits
    of the Ethereum blockchain. Ether is the token utilized for using the Ethereum
    network.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个公共测试版网络被称为Olympic。奥林匹克网络为用户提供了25000个以太币的漏洞赏金，用于测试以太坊区块链的极限。以太币是使用以太坊网络的代币。
- en: Ethereum is software running on a network of world computers that ensures that
    data and small computer programs called *smart contracts* are replicated and processed
    on all the computers on the network, without a central coordinator. The founders'
    vision was to create an unstoppable censorship-resistant self-sustaining decentralized
    world computer. For example, if you download Ethereum to your computer, it will
    become an Ethereum “node” on the network, running an EVM, and will behave equivalently
    to all the other nodes.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: Ethereum 是在世界计算机网络上运行的软件，确保数据和称为*智能合约*的小型计算机程序在网络上的所有计算机上复制和处理，而无需中央协调员。创始人的愿景是创建一个不可阻挡的、抵抗审查的、自我维持的分散式世界计算机。例如，如果您将
    Ethereum 下载到您的计算机上，它将成为网络上的一个 Ethereum “节点”，运行一个 EVM，并等效于所有其他节点。
- en: Note that Ethereum is a peer-to-peer network, and there is no centralization;
    therefore, all computers have equivalent status to other nodes. [Figure 2.12](#c02-fig-0012)
    shows the peer-to-peer decentralized network of Ethereum. The network nodes for
    Ethereum run the Ethereum virtual machine. Note that the network structure is
    not flat or hierarchical, like in common networking.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Ethereum 是一个点对点网络，没有中央化；因此，所有计算机都与其他节点具有相等的状态。[图 2.12](#c02-fig-0012)显示了
    Ethereum 的点对点分散网络。Ethereum 的网络节点运行 Ethereum 虚拟机。请注意，网络结构不像常见的网络那样是扁平的或分层的。
- en: '![Schematic diagram of ethereum peer-to-peer decentralized network consists
    of ledger, mining node, and dapp as symbols, and hexagonally interlinked with
    one another.](images/c02f012.png)'
  id: totrans-358
  prefs: []
  type: TYPE_IMG
  zh: '![以图解形式显示的以哈希六边形相互连接的 Ethereum 点对点分散网络的示意图，其中包括分类账、挖矿节点和 dapp 作为符号。](images/c02f012.png)'
- en: '[**FIGURE 2.12**](#R_c02-fig-0012) Ethereum peer-to-peer decentralized network'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '[**图 2.12**](#R_c02-fig-0012) Ethereum 点对点分散网络'
- en: '### Ethereum Blockchain Fundamentals'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '### Ethereum 区块链基础'
- en: Ethereum is the blockchain platform, and ether is the token for using the Ethereum
    virtual machines on the Ethereum platform. Ethereum is a permissionless blockchain
    and has a different approach than the other blockchains discussed earlier in the
    chapter.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: Ethereum 是区块链平台，而 ether 是在 Ethereum 平台上使用 Ethereum 虚拟机的代币。Ethereum 是一个无需许可的区块链，并且与本章前面讨论的其他区块链有不同的方法。
- en: While all blockchains have the ability to process code, most of the blockchains
    are severely limited by restrictions. Ethereum approaches code differently by
    allowing developers to create whatever operations they want. This means developers
    can build thousands of different applications that go outside the typical blockchain
    structures.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管所有区块链都具有处理代码的能力，但大多数区块链受到限制。Ethereum 通过允许开发人员创建任何他们想要的操作来不同地处理代码。这意味着开发人员可以构建成千上万种不同于典型区块链结构的应用程序。
- en: Ethereum contracts have memory and can also have loops, which I will address
    in more detail from a development perspective in [Chapter 10](c10.xhtml).
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: Ethereum 合约具有内存，也可以有循环，我将在[第 10 章](c10.xhtml)从开发角度更详细地讨论。
- en: Ethereum implements smart contracts, which are usually deployed via distributed
    applications that are known as *dapps*. Dapps are applications running directly
    on the blockchain. They are decentralized and not in the control of any one party.
    Their purpose is clearly to use simple logic for peer-to-peer value transfers
    to extend over to more complicated token structures and much more.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: Ethereum 实现了智能合约，通常通过称为*dapps*的分布式应用程序部署。Dapps 是直接在区块链上运行的应用程序。它们是去中心化的，不受任何一方控制。它们的目的显然是使用简单的逻辑进行对等值转移，并扩展到更复杂的令牌结构等等。
- en: These smart contracts and dapps work similarly from an application perspective
    to any other web application. A client application will access an Ethereum application
    via the HTTP protocol through an API. The smart contract will then be invoked
    and will run on the EVM.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 这些智能合约和 dapps 从应用程序的角度来看与任何其他 Web 应用程序类似。客户端应用程序将通过 API 通过 HTTP 协议访问 Ethereum
    应用程序。然后智能合约将被调用并在 EVM 上运行。
- en: Because the economics and the logic are on the same layer, it makes value transfer
    extremely easy. You can save hardware and configuration by deploying the logic
    directly on the blockchain.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 因为经济和逻辑位于同一层，所以价值转移非常容易。您可以通过直接在区块链上部署逻辑来节省硬件和配置。
- en: Ether tokens are created by a schedule that was set by its 2014 presale structure.
    Ether tokens are mined and thus require a miner. For example, 5 ether tokens are
    created for every block mined, which is approximately every 15 seconds. These
    5 ether tokens are sent to the miners that mine the block. Ether can also be sent
    to another miner that participates in the transaction since it is possible that
    several miners to compete for the mining of the blocks. Ether is considered the
    “fuel” that runs the Ethereum network.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 以太币代币是由其 2014 年预售结构设定的时间表创建的。以太币代币是通过挖矿产生的，因此需要矿工。例如，每挖掘一个区块就会创建 5 个以太币代币，大约每
    15 秒一个区块。这 5 个以太币代币被发送给挖掘该区块的矿工。由于可能有多个矿工竞争挖掘区块，因此以太币也可以发送给参与交易的其他矿工。以太币被认为是驱动以太坊网络的“燃料”。
- en: '#### PROOF-OF-WORK MINING'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 工作量证明挖矿'
- en: In proof-of-work (PoW) mining, the miners compete to create valid blocks by
    spending electricity to find solutions to a mathematical puzzle. Ethereum's PoW
    math challenge called Ethash works slightly differently than Bitcoin's PoW mining.
    This allows common hardware to be used for mining and lowers the barrier to mining
    at least from a cost perspective. The downside to this is that it reduces the
    efficiency edge of task-specific hardware known as ASICs, which are common in
    Bitcoin mining.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作量证明（PoW）挖矿中，矿工们通过消耗电力来找到数学难题的解决方案，从而竞争创建有效的区块。以太坊的 PoW 数学挑战名为 Ethash，与比特币的
    PoW 挖矿略有不同。这使得普通硬件可以用于挖矿，并且至少从成本的角度降低了挖矿的门槛。但这样做的缺点是降低了专用硬件（如比特币挖矿中常见的 ASICs）的效率优势。
- en: 'There is a plan to move from energy-intensive PoW mining to a more energy-efficient
    proof-of-stake protocol called Casper. This was scheduled to start to occur in
    2018 and early 2019, but was postponed because of several factors. The updated
    version of the Ethereum software will be called Serenity.  #### TOKEN STANDARDS'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '有一个计划，从耗能的 PoW 挖矿转向更节能的权益证明协议，名为 Casper。原计划于 2018 年和 2019 年初开始实施，但因为几个因素而推迟。更新后的以太坊软件将被称为
    Serenity。  #### 代币标准'
- en: In Ethereum, tokens must adhere to token standards, which define a common list
    of protocols that an Ethereum token has to implement. The most common token standard
    is the ERC20 standard.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊中，代币必须遵循代币标准，这些标准定义了以太坊代币必须实现的一组常见协议。最常见的代币标准是 ERC20 标准。
- en: The ERC20 standard is basically a set of six functions that can be recognized
    and identified by other smart contracts for interactions with the smart contracts.
    Some of the functions are to get the total token supply, get the account balance
    of the wallet, and so on.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: ERC20 标准基本上是一组可以被其他智能合约识别和确认的六个功能，用于与智能合约进行交互。其中一些功能是获取总代币供应量、获取钱包的账户余额等。
- en: This token standard gives developers the ability to program behavior of new
    tokens within the Ethereum ecosystem. Second, this approach is common with crowdfunding
    companies via initial coin offerings (ICOs). An ICO is a similar concept to an
    initial public offering (IPO) in stock markets.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 这种代币标准赋予了开发者在以太坊生态系统内编程新代币行为的能力。其次，通过首次代币发行（ICOs）的方式，这种方法在众筹公司中很常见。ICO 是类似于股票市场中首次公开发行（IPO）的概念。
- en: 'You can find out more about ether tokens at `[https://etherscan.io/tokens](https://etherscan.io/tokens)`.  ###
    Ethereum Ledger'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '您可以在 `[https://etherscan.io/tokens](https://etherscan.io/tokens)` 找到更多关于以太币代币的信息。  ###
    以太坊账本'
- en: In Ethereum, consensus is when the distributed ledger has been updated and all
    nodes maintain their own identical copy of the ledger. This architecture allows
    for a new capacity as a system of record-keeping that goes beyond being a simple
    database. Blocks form a chain by referring to the hash or fingerprint of the previous
    block and are written to the ledger.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊中，共识是指分布式账本已被更新，并且所有节点都保持其自己的相同副本。这种架构使得作为记录系统的新能力超越了简单数据库的范围。区块通过引用上一个区块的哈希或指纹形成链，并被写入账本。
- en: Remember that every node in the network holds a copy of the transaction and
    smart contract history of the network. The nodes also keep track of the current
    “state” on the ledger. Every time a user performs some action, all the nodes on
    the network need to come to agreement that this change took place and have it
    written to the ledger.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，网络中的每个节点都保存着网络的交易和智能合约历史记录的副本。节点还跟踪账本上的当前“状态”。每当用户执行某些操作时，网络上的所有节点都需要达成一致意见，确认这一变化发生，并将其写入账本。
- en: 'For example, every time a program (smart contract application) is used, a network
    of thousands of computers processes it. Contracts written in a smart contract–specific
    programming language that are compiled into what is called *bytecode* will be
    read by the EVM. Then all the nodes execute this contract using their EVMs, which
    in turn update the ledger.  ### Ethereum Node EVM'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，每次使用程序（智能合约应用程序）时，都会有数千台计算机的网络对其进行处理。用智能合约专用编程语言编写的合约，编译成所谓的 *字节码*，然后由 EVM
    读取。然后所有节点都使用他们的 EVM 执行此合约，从而更新分类帐。 ### 以太坊节点 EVM'
- en: The Ethereum Virtual Machine (EVM) is computer software that runs on an abstraction
    layer right above the underlying hardware that is deployed such as a physical
    server or a container.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊虚拟机（EVM）是一种运行在部署的底层硬件之上的抽象层的计算机软件，比如物理服务器或容器。
- en: Ethereum uses a virtual machine to deploy the blockchain services. This virtual
    machine type is considered a Turing complete virtual machine that will run and
    compile the code directly. Turing complete means the software is agile enough
    to run any code defined by the developer. In the development world, this Turing
    complete machine is also considered a flexible virtual machine.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊使用虚拟机部署区块链服务。这种虚拟机类型被认为是图灵完备的虚拟机，可以直接运行和编译代码。图灵完备意味着软件足够灵活，可以运行开发人员定义的任何代码。在开发世界中，这种图灵完备机器也被认为是一种灵活的虚拟机。
- en: Ethereum itself is a protocol defining how the communication should work. It
    is neither proprietary software nor patented. Instead, it is open, and there are
    several different implementations of the Ethereum protocol.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊本身是一个定义通信方式的协议。它既不是专有软件，也没有专利。相反，它是开放的，有几种不同的以太坊协议实现。
- en: Two of the most popular implementations are Go-Ethereum (Geth), which is written
    in Go, and Parity, which is written in Rust.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 最流行的两种实现之一是 Go 语言编写的 Go-Ethereum（Geth），另一种是 Rust 语言编写的 Parity。
- en: Ethereum nodes communicate with each other using the Ethereum protocol. There
    are several different ways to connect to an Ethereum node.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊节点使用以太坊协议相互通信。有几种不同的连接到以太坊节点的方式。
- en: You can connect via HTTP and IPC protocols; WebSocket connections as well may
    be supported.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过 HTTP 和 IPC 协议连接；也可能支持 WebSocket 连接。
- en: The Ethereum node accepts requests in a JSON-RPC format via HTTP. This is a
    standardized way of communicating with Ethereum nodes from clients. Using this
    approach, any software that implements the JSON-RPC calls should be able to connect
    to the blockchain via an Ethereum node.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊节点通过 HTTP 以 JSON-RPC 格式接受请求。这是一种与以太坊节点从客户端通信的标准化方式。使用这种方法，任何实现 JSON-RPC 调用的软件都应该能够通过以太坊节点连接到区块链。
- en: 'Here are some important notes about the EVM:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关于 EVM 的一些重要注意事项：
- en: The only real limitation the EVM has that a typical Turing complete machine
    does not is that the EVM is intrinsically bound by gas.
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EVM 唯一的真正限制是，它是由 gas 内在地限制的，而典型的图灵完备机器则没有这个限制。
- en: The power of the EVM is limited only by the amount of gas that is provided by
    the developer request.
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EVM 的功能只受开发者请求提供的 gas 量限制。
- en: The EVM is a stack-based VM, meaning that it uses an ordering structure that
    processes last-in, first-out ordering.
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EVM 是基于堆栈的虚拟机，意味着它使用一个处理后进先出顺序的排序结构。
- en: Flexibility around the development of smart contracts can be in Python, Java,
    or C++ at the time of writing.
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约的开发灵活性可以在 Python、Java 或 C++ 中实现。
- en: Isolation is achieved when fully deployed since smart contracts are fully isolated
    from the blockchain network.
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全部署时会实现隔离，因为智能合约与区块链网络完全隔离。
- en: '[Figure 2.13](#c02-fig-0013) shows how the EVM fits into the stack.'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2.13](#c02-fig-0013) 展示了 EVM 如何适配到栈中。'
- en: '![The rectangular box contains two columns. The first column divided into five
    rows labeling wallet application; decentralized application; swarm, whisper, and
    EVM in individual box; distributed client hardware; and internet. The second column
    labeled ethereum.](images/c02f013.png)'
  id: totrans-392
  prefs: []
  type: TYPE_IMG
  zh: '![矩形框包含两列。第一列分成五行，分别标记钱包应用程序；分散式应用程序；swarm、whisper 和各自的 EVM 方格；分布式客户端硬件；以及互联网。第二列标记以太坊。](images/c02f013.png)'
- en: '[**FIGURE 2.13**](#R_c02-fig-0013) EVM in the Ethereum stack'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '[**图 2.13**](#R_c02-fig-0013) 以太坊栈中的 EVM'
- en: When joining the Ethereum network, you have some options from a blockchain node
    perspective.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 加入以太坊网络时，从区块链节点的角度来看，您有一些选择。
- en: '**Light nodes** are nodes that do not verify every block or transaction and
    do not have a copy of the current blockchain state. These nodes are generally
    used for development.'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轻节点**是不验证每个区块或交易并且没有当前区块链状态副本的节点。这些节点通常用于开发。'
- en: '**Full nodes** verify every block that is broadcast onto the blockchain network.
    When you set up a full node, the full blockchain is also downloaded to that node.
    This could be significant storage space since at the time of writing is more than
    180 GB.'
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全节点**验证每个广播到区块链网络上的区块。当您设置一个全节点时，完整的区块链也会下载到该节点。这可能需要相当大的存储空间，因为在撰写本文时，其大小超过了
    180 GB。'
- en: '**Archive nodes** are full nodes that preserve the entire history of transactions
    and could be used for compliance requirements in some cases.'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**归档节点**是保留了所有交易历史记录的全节点，在某些情况下可用于遵从性要求。'
- en: '[Ethernode.org](http://ethernode.org) displays the current state of network
    nodes connected to the blockchain. At the time of writing, there are more than
    13,600 nodes. The site also displays the mainnet and testnet. To find out the
    current Ethereum nodes on the blockchain, visit `[https://www.ethernodes.org/network/1](https://www.ethernodes.org/network/1)`.  ###
    Ethereum Client Apps'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '[Ethernode.org](http://ethernode.org) 显示连接到区块链的当前网络节点的当前状态。在撰写本文时，节点数量超过 13,600
    个。该网站还显示了主网和测试网。要了解区块链上当前的以太坊节点，请访问 `[https://www.ethernodes.org/network/1](https://www.ethernodes.org/network/1)`。
    ### 以太坊客户端应用'
- en: 'Developing applications to interface with the Ethereum APIs is straightforward.
    Generally, the following front-end development languages are used with Ethereum:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 开发与以太坊 API 交互的应用程序是很简单的。通常，以下前端开发语言与以太坊一起使用：
- en: HTML
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML
- en: CSS
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS
- en: JavaScript
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript
- en: 'The following backend tools are commonly used:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是常用的后端工具：
- en: Solidity
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Solidity
- en: Truffle
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Truffle
- en: You can download Solidity or compile with your browser.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以下载 Solidity 或者在你的浏览器中编译。
- en: '#### SOLIDITY'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '#### SOLIDITY'
- en: Solidity is the development language behind Ethereum and is specifically designed
    to utilize the EVM. Developers who are working on the Ethereum-based applications
    will be developing their smart contracts in Solidity.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: Solidity 是以太坊背后的开发语言，专门设计用于利用 EVM。正在开发基于以太坊的应用程序的开发人员将会在 Solidity 中开发他们的智能合约。
- en: Solidity uses a large number of programming features, concepts, and methods
    that exist in other development languages. For example, Solidity has, as you would
    expect in a programming language, specific variables, functions, classes, and
    so on.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: Solidity 使用了大量其他开发语言中存在的编程特性、概念和方法。例如，Solidity 有着您在编程语言中所期望的特定变量、函数、类等。
- en: One common API used with Ethereum is the JSON API, which is a lightweight data-interchange
    format that can represent numbers, strings, ordered sequences of values, and collections
    of name-value pairs.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 与以太坊一起使用的一个常见 API 是 JSON API，它是一种轻量级的数据交换格式，可以表示数字、字符串、有序的值序列和名值对集合。
- en: 'The following are some additional tools and applications used with Ethereum:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些与以太坊一起使用的其他工具和应用程序：
- en: '**Languages**—Solidity, Serpent, Mutant'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言**—Solidity、Serpent、Mutant'
- en: '**IDEs**—Solidity Browser, Ethereum Studio'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成开发环境（IDE）**—Solidity 浏览器、以太坊工作室'
- en: '**Clients**—Geth, eth, parity, Ethereum Wallet'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端**—Geth、eth、parity、以太坊钱包'
- en: '**Storage**—IPFS, Swarm, and Storj'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储**—IPFS、Swarm 和 Storj'
- en: '**Dapp Browsers**—Metamask or Mist'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dapp 浏览器**—Metamask 或 Mist'
- en: '**Testing**—Testnet, TestRPC'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**—测试网、TestRPC'
- en: '[Chapter 10](c10.xhtml) includes more details about these toolsets as well
    as Solidity.  ### Ethereum Transactions'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 10 章](c10.xhtml) 包含了更多关于这些工具集以及 Solidity 的细节。 ### 以太坊交易'
- en: Transactions in Ethereum are the way the external world interacts with the Ethereum
    network. A transaction is used when you want to modify or update the state stored
    in the Ethereum network. It is important to note that Ethereum is an account-based
    blockchain implementation, which is different from other blockchains such as Hyperledger.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊中的交易是外部世界与以太坊网络交互的方式。当您想要修改或更新存储在以太坊网络中的状态时，会使用交易。重要的是要注意，以太坊是一个基于账户的区块链实现，这与其他区块链（如
    Hyperledger）不同。
- en: 'There are two types of accounts used in Ethereum to be aware of from a development
    perspective: an externally owned account (EOA) and a contract account.'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 从开发的角度来看，以太坊中有两种类型的账户需要注意：外部拥有账户（EOA）和合约账户。
- en: An externally owned account is effectively an individual user in the external
    world like a buyer and a seller. This user in the Ethereum network is represented
    by a 20-byte (160-bit) address.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 外部拥有的账户实际上是外部世界中的个人用户，例如买方和卖方。以太坊网络中的这个用户由一个20字节（160位）的地址表示。
- en: The contract account has some similarities and differences to the EOA. A contract
    account is created by referring to a deployed contract. This contract account
    is identified by a contract address, and an EOA account is still represented by
    a 20-byte address (160 bit). This is the address that interacts with this deployed
    account.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 合约账户与EOA有一些相似之处和不同之处。合约账户是通过引用已部署的合约而创建的。这个合约账户由一个合约地址标识，而EOA账户仍然由一个20字节地址（160位）表示。这就是与此已部署账户进行交互的地址。
- en: The contract account can also keep ethers when appropriate to the business logic
    at hand. The contract is the “smart contract” capability in the Ethereum network,
    which is where the business logic is actually implemented.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 合约账户在适当时可以保留以太币，根据手头的业务逻辑。合约是以太坊网络中的“智能合约”功能，也是实际实现业务逻辑的地方。
- en: '[Figure 2.14](#c02-fig-0014) represents the high-level steps an Ethereum transaction
    takes for a blockchain user to authorize and access an Ethereum application. You
    can see in the diagram that a user is initiating a web application hosted on Ethereum,
    so this is not particularly complex. From a technical perspective, this is what
    would be expected when invoking an Ethereum application and would require “ether”
    to be able to run an application on the Ethereum blockchain. Ether, of course,
    is required to power the EVM through the use of “gas.”'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '[图2.14](#c02-fig-0014)代表了以太坊交易的高级步骤，区块链用户授权并访问以太坊应用程序。从图中可以看出，用户正在启动一个托管在以太坊上的Web应用程序，因此这并不特别复杂。从技术角度来看，这是调用以太坊应用程序时所预期的情况，并且需要“ether”才能在以太坊区块链上运行应用程序。当然，“ether”是通过“gas”来为EVM提供动力所必需的。'
- en: '![Image described by caption and surrounding text.](images/c02f014.png)'
  id: totrans-425
  prefs: []
  type: TYPE_IMG
  zh: '![由标题和周围文本描述的图像。](images/c02f014.png)'
- en: '[**FIGURE 2.14**](#R_c02-fig-0014) Ethereum authorization transaction overview'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '[**图2.14**](#R_c02-fig-0014) 以太坊授权交易概述'
- en: '[Chapter 4](c04.xhtml) provides a deeper dive into Ethereum consensus and how
    transactions are handled from a smart contract invocation.  ### Ethereum Smart
    Contracts'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '[第四章](c04.xhtml)深入探讨了以太坊共识以及如何处理智能合约调用的交易。### 以太坊智能合约'
- en: Smart contracts are contracts that can be converted to code, stored, and reproduced
    on the network nodes. With smart contracts, you can exchange money, shares, property,
    and anything that is valued in a transparent manner without the services of an
    intermediary. For example, through the use of an Ethereum smart contract, you
    could provide payment for products and have an immutable record of the transactions.
    Smart contracts define the penalties and rules surrounding an agreement just like
    traditional contracts would when properly designed.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约是可以转换为代码、存储和在网络节点上复制的合同。通过智能合约，你可以以透明的方式交换货币、股份、财产和任何有价值的东西，而无需中间人的服务。例如，通过使用以太坊智能合约，你可以支付产品，并且有不可变的交易记录。智能合约像传统合同一样定义了围绕协议的惩罚和规则，只要设计得当。
- en: When you deploy several smart contracts together as an application, it is known
    as a *distributed application* (a *dapp* in Ethereum).
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将几个智能合约一起部署作为一个应用时，这被称为*分布式应用程序*（以太坊中的*dapp*）。
- en: 'Smart contracts in Ethereum provide some significant benefits to the users
    of the platform, including the following:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊中的智能合约为平台用户提供了一些显著的好处，包括以下几点：
- en: Autonomy
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自主性
- en: Trust
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信任
- en: Backup
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备份
- en: Safety
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性
- en: Speed
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 速度
- en: Savings
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 储蓄
- en: Accuracy
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精确性
- en: The basics of Ethereum state are that all modifications to a contract's data
    must be performed by its code. Modifying a contract's data requires a blockchain
    user to send requests to its code. This process kickoff determines whether and
    how to fulfill those requests. Smart contracts on the Ethereum network run on
    the Ethereum Virtual Machine.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊状态的基础是，所有对合约数据的修改必须由其代码执行。修改合约数据需要区块链用户向其代码发送请求。这个过程的启动确定了是否以及如何满足这些请求。以太坊网络上的智能合约在以太坊虚拟机上运行。
- en: Dapps running on the Ethereum network are basically complex smart contracts.
    Ethereum smart contracts have some properties to be aware of, especially when
    your development team is designing a smart contract for an application. First,
    Ethereum smart contracts are deployed in an automated fashion and can act as a
    complement to an agreement between two parties.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊网络上运行的 Dapp 基本上是复杂的智能合约。以太坊智能合约有一些需要注意的特性，特别是当您的开发团队为应用程序设计智能合约时。首先，以太坊智能合约以自动化方式部署，并可作为两方协议的补充。
- en: Second, the terms of the smart contract are to be clearly written in a computer
    language as a set of instructions recorded to an immutable distributed ledger.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，智能合约的条款必须清楚地用计算机语言编写，作为一组记录到不可变分布式分类帐的指令。
- en: Smart contracts when deployed on Ethereum will act as triggered events. For
    example, when a user sends funds of $100 to another Ethereum user to pay for,
    let's say, tickets to a concert, these tickets will be sent to the buyer only
    after the $100 is received from the buyer and deposited in the seller's Ethereum
    wallet. If the $100 is not received from the buyer, then the smart contract will
    not be triggered, and the contract process is stopped.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊上部署智能合约时，智能合约将作为触发事件。例如，当用户向另一个以太坊用户支付 100 美元以购买音乐会门票时，仅在从买家收到并存入卖家以太坊钱包的
    100 美元后，这些门票才会发送给买家。如果未从买家收到 100 美元，则智能合约不会触发，合约流程停止。
- en: '[Figure 2.15](#c02-fig-0015) shows the workflow of an Ethereum transaction.
    There are four main steps to a transaction in Ethereum, and each step must be
    executed properly for the next step to continue. Settlement of the transaction
    can occur only if the execution of the smart contract occurs as programmed.'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2.15](#c02-fig-0015) 显示了以太坊交易的工作流程。以太坊交易有四个主要步骤，每个步骤必须正确执行，以便继续下一个步骤。仅当智能合约的执行按照程序进行时，才能进行交易的结算。'
- en: '![Flow chart depicting smart contract workflow in symbols from defined contract
    to events, then to execute and transfer, and then to transferred cash settlement
    with the down arrow labeling on-chain or off-chain settlement.](images/c02f015.png)'
  id: totrans-443
  prefs: []
  type: TYPE_IMG
  zh: '![流程图显示智能合约工作流程，从定义的合约到事件符号，然后执行和转移，最后通过向下箭头标记的链上或链下结算转移的现金。](images/c02f015.png)'
- en: '[**FIGURE 2.15**](#R_c02-fig-0015) Smart contract workflow'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '[**图 2.15**](#R_c02-fig-0015) 智能合约工作流程'
- en: When writing smart contracts in Ethereum, developers use a programming language
    called Solidity. [Chapter 10](c10.xhtml) covers smart contracts and the basics
    of Solidity in more detail.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊编写智能合约时，开发人员使用一种名为 Solidity 的编程语言。[第 10 章](c10.xhtml) 更详细地介绍了智能合约和 Solidity
    的基础知识。
- en: 'Essentially, a smart contract in the implementation of Solidity is a collection
    of code and data residing at a specific address on the Ethereum blockchain. Solidity
    is a programming language native to Ethereum that was specifically designed for
    Ethereum and was released to the development community in 2015.  ### Ethereum
    Wallets'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '本质上，Solidity 实现中的智能合约是驻留在以太坊区块链上特定地址的代码和数据集合。Solidity 是一种原生于以太坊的编程语言，专门为以太坊设计，并于
    2015 年发布给开发社区使用。  ### 以太坊钱包'
- en: One significant difference between Ethereum and the other enterprise blockchains
    is the fact that Ethereum is a permissionless platform, and it also has a cryptocurrency
    (token) called *ether*. As mentioned, ether is the token that is used for running
    your smart contracts on the Ethereum platform. To send and receive ether, you
    need to have a wallet.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊与其他企业区块链之间的一个重要区别在于以太坊是一个无需许可的平台，而且它还有一种加密货币（代币）称为*以太*。正如前面提到的，以太是在以太坊平台上运行智能合约所使用的代币。要发送和接收以太，您需要有一个钱包。
- en: A *wallet* is a program that allows you to gain access to, send, and receive
    cryptocurrency on the blockchain networks. There are several types of Ethereum
    wallets, including hardware, software, and web wallets.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '*钱包*是一种程序，允许您在区块链网络上访问、发送和接收加密货币。以太坊钱包有几种类型，包括硬件、软件和网页钱包。'
- en: 'Common Ethereum wallets include MyEtherwallet, Jaxx, and Metamask. You can
    also go to an online exchange, such as Coinbase (which is focused on the US market
    at the time of writing) to get an online wallet (`[www.coinbase.com](http://www.coinbase.com)`).  ###
    Ethereum Tools and Utilities'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '常见的以太坊钱包包括 MyEtherWallet、Jaxx 和 Metamask。您还可以访问在线交易所，如 Coinbase（目前主要针对美国市场）获取在线钱包（`[www.coinbase.com](http://www.coinbase.com)`）。  ###
    以太坊工具和实用程序'
- en: Ethereum has a robust ecosystem of tools and utilities because of its large
    developer base and because it's the most successful permissionless smart contract
    blockchain. Finding what you need in the Ethereum ecosystem as a developer won't
    be an issue.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊由于庞大的开发者群体以及它是最成功的无许可智能合约区块链，拥有强大的工具和实用程序生态系统。作为开发者，在以太坊生态系统中找到你需要的东西不会成为问题。
- en: Let's review some of the top tools and utilities that are almost required to
    get going on Ethereum.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一些几乎必须掌握的顶级工具和实用程序，以便开始使用以太坊。
- en: '**Mist Browser Wallet (Deprecated)** Mist Browser Wallet was used to store
    ether, send transactions, and deploy contracts but has recently been deprecated.
    Because of the wide usage of Mist, it clearly deserves a mention. Historically
    significant as well is that Mist was the first GUI wallet and was clearly the
    standard token base at the time.'
  id: totrans-452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mist浏览器钱包（已废弃）** Mist浏览器钱包用于存储以太币、发送交易和部署合约，但最近已经被废弃。由于Mist的广泛使用，它当然值得一提。历史上具有重要意义的是，Mist是第一个GUI钱包，并且显然是当时的标准代币基础。'
- en: You can download Mist Browser Wallet from `[https://github.com/ethereum/mist/releases](https://github.com/ethereum/mist/releases)`.
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以从 `[https://github.com/ethereum/mist/releases](https://github.com/ethereum/mist/releases)`
    下载Mist浏览器钱包。
- en: '**Geth and Eth** These are command-line tools for the Ethereum Network. Essentially
    these command-line tools will allow you to connect your Ethereum server to or
    run your application on the Ethereum blockchain. Geth and Eth are two separate
    command-line tools that can run a full Ethereum, public or private, node. Both
    of these software tools provide multiple user interfaces.'
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Geth 和 Eth** 这些是以太坊网络的命令行工具。基本上，这些命令行工具将允许你将你的以太坊服务器连接到以太坊区块链或在其上运行你的应用程序。Geth
    和 Eth 是两个可以运行完整的以太坊、公共或私有节点的独立命令行工具。这两个软件工具都提供多个用户界面。'
- en: You can download the Geth CLI tools from `[https://www.ethereum.org/cli](https://www.ethereum.org/cli)`.
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以从 `[https://www.ethereum.org/cli](https://www.ethereum.org/cli)` 下载Geth CLI工具。
- en: '**Parity** Party is an advanced Ethereum client written in the new low-level
    language Rust. Parity was created by Dr. Gavin Wood, who is the former CTO of
    Ethereum.'
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Parity** Parity是一个用新的低级语言Rust编写的先进以太坊客户端。Parity由以太坊前首席技术官加文·伍德博士创建。'
- en: You can download the Parity client from `[https://www.parity.io/](https://www.parity.io/)`.
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以从 `[https://www.parity.io/](https://www.parity.io/)` 下载 Parity 客户端。
- en: '**Metamask** Metamask is a Google Chrome browser extension that allows you
    to experience Ethereum in your browser today.'
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Metamask** Metamask 是一个 Google Chrome 浏览器扩展，允许您在浏览器中体验以太坊。'
- en: What is really useful is that it allows you to run Ethereum dapps right in your
    browser without running a full Ethereum node.
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 真正有用的是，它允许您在浏览器中运行以太坊 dapps 而无需运行完整的以太坊节点。
- en: '[Figure 2.16](#c02-fig-0016) shows the Metamask interface. You can see that
    there is an ether balance and that there have been some contract interactions.
    Contract interactions are essentially using the EVM on the Ethereum mainnet.'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[图2.16](#c02-fig-0016) 展示了 Metamask 接口。你可以看到有一个以太币余额，并且已经进行了一些合约交互。合约交互实质上是在以太坊主网上使用EVM。'
- en: '![Screen capture depicting metamask interface of main ethereum network with
    an ether balance of deposit and send options at next, and also listing the history
    of contract interactions at the bottom.](images/c02f016.png)'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![截图展示主以太坊网络中 metamask 接口，其中包含存款和发送选项的以太币余额，以及底部列出的合约交互历史。](images/c02f016.png)'
- en: '[**FIGURE 2.16**](#R_c02-fig-0016) Metamask interface'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[**图2.16**](#R_c02-fig-0016) Metamask 接口'
- en: You can download the Metamask extension from `[https://metamask.io/](https://metamask.io/)`.
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以从 `[https://metamask.io/](https://metamask.io/)` 下载 Metamask 扩展。
- en: '**Truffle** Truffle is a well-tested and utilized development environment,
    testing framework, and asset pipeline for blockchains using the EVM.'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Truffle** Truffle是一个经过充分测试和广泛使用的开发环境、测试框架和资产管道，用于使用EVM的区块链。'
- en: You can download the Truffle framework from `[https://truffleframework.com/](https://truffleframework.com/)`.
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以从 `[https://truffleframework.com/](https://truffleframework.com/)` 下载Truffle框架。
- en: 'Note that this is not an inclusive list of tools. However, I will be discussing
    in more detail Ethereum tools and development-focused frameworks in [Chapter 10](c10.xhtml).  ###
    Ethereum Governance'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这不是一个包含所有工具的列表。但是，我将在[第10章](c10.xhtml)中更详细地讨论以太坊工具和面向开发的框架。### 以太坊治理
- en: Enterprise Ethereum clients must superimpose a permissioning layer since it's
    based on a decentralized platform, which is permissionless. At the time of writing,
    the Enterprise Ethereum Alliance (EEA) is working on version 3.0 of the standard
    specification where chain-wide permissioning configuration and enforcement will
    be enabled.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 企业以太坊客户端必须叠加权限层，因为它基于一个无许可的去中心化平台。在撰写本文时，企业以太坊联盟（EEA）正在制定3.0版标准规范，其中将启用链级权限配置和强制执行。
- en: 'However, a per-node permissioning capability can be set up via implementation
    through smart contracts to provide some governance. Because funding comes from
    the EEA, it''s expected that governance, compliance, and other enterprise concerns
    will be addressed in more detail at the organization’s pace. In a nutshell, if
    you need strict governance, then you may need to consider permissioned blockchains.  ##
    Summary'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，可以通过智能合约的实现设置每个节点的权限能力，以提供一些治理。由于资金来自EEA，预计组织将按照自己的节奏更详细地解决治理、合规和其他企业问题。简而言之，如果需要严格的治理，那么可能需要考虑使用许可的区块链。
- en: This chapter covered the four most widely used enterprise blockchain platforms
    and distributed ledgers. Enterprise blockchains have different requirements than
    public permissionless blockchains such as Ethereum.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章介绍了目前最广泛使用的四种企业区块链平台和分布式账本。企业区块链与以太坊等公共无许可区块链有不同的要求。
- en: 'Enterprise blockchains generally fall into one of several categories: private
    permissioned, public or permissionless, or even hybrid such as Quorum.'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 企业区块链通常分为几类：私有许可、公共或无许可，甚至是混合型，如Quorum。
- en: Hyperledger is the umbrella project run by the Linux Foundation, and Hyperledger
    Fabric is the mostly widely used blockchain in the Hyperledger portfolio according
    to the number of GitHub forks.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 超级账本是由Linux基金会运行的总项目，而超级账本Fabric是超级账本系列中根据GitHub分叉数量最多的区块链。
- en: R3 is an enterprise blockchain software firm working with a broadly targeted
    ecosystem of more than 200 members and partners. These members are across multiple
    industries from both the private and public sectors. R3 has developed Corda, which
    is an open source blockchain platform, and Corda Enterprise, which is a commercial-grade
    version for enterprise usage with support.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: R3是一家企业区块链软件公司，与200多名成员和合作伙伴构成了一个广泛的生态系统。这些成员来自私营和公共部门的多个行业。R3开发了Corda，这是一个开源的区块链平台，以及Corda
    Enterprise，这是一个为企业使用而设计的商业级版本，并获得了支持。
- en: Quorum is an open source blockchain solution built by enhancing the existing
    Ethereum blockchain. It provides an additional layer on top of Ethereum, which
    enables it to perform private transactions but also makes it more flexible by
    using different consensus algorithms. The main reason enterprises may want to
    use Quorum is for the privacy and performance capabilities that can easily extend
    to Ethereum applications.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum是通过增强现有的以太坊区块链构建的开源区块链解决方案。它在以太坊上提供了一个额外的层，使其能够执行私有交易，但也通过使用不同的共识算法使其更加灵活。企业可能希望使用Quorum的主要原因是其具有的隐私和性能能力，这些能力可以轻松扩展到以太坊应用程序。
- en: Ethereum is an open source software platform based on blockchain technology
    that enables blockchain developers to build and deploy decentralized applications
    (smart contracts). Ethereum is clearly the most widely used permissionless smart
    contract blockchain platform and has a wide developer following.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊是基于区块链技术的开源软件平台，使区块链开发者能够构建和部署去中心化应用程序（智能合约）。以太坊显然是最广泛使用的无许可智能合约区块链平台，并拥有广泛的开发者关注。
- en: Each of the blockchains discussed have very different technical merits and use
    cases for the enterprise, so consider each one carefully.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论的每个区块链在企业中的技术优点和用例都非常不同，因此需要仔细考虑每一个。
