- en: ''
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Part II
  prefs: []
  type: TYPE_NORMAL
- en: Algorithmic Issues
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Option Pricing Using Finite Difference Method
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we consider the finite difference method of numerically solving
    the option pricing problem. We start by considering the European call option.
    Pricing of American options is harder due to the possibility of early exercise.
    We later consider the American put option to show how the problem can be tackled.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Black-Scholes equation and boundary condition for a European call option
    *C*(*S*, *t*) are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_1.jpg)(8.1)'
  prefs: []
  type: TYPE_IMG
- en: with
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here *σ* is the volatility parameter and *r* is the risk-free rate of interest.
    In ([8.1](#eq1)), the first two boundary conditions are with respect to *S* and
    specify the values of *C*(*S*, *t*) for *S* = 0 and for *S* → ∞. The last boundary
    condition is with respect to *t*. Note that the boundary condition with respect
    to *t* is a final condition. Due to this, the Black-Scholes equation is said to
    be in the backward form and we are required to obtain the value of *C* for time
    *t* < *T*.
  prefs: []
  type: TYPE_NORMAL
- en: For the purpose of solution, it is easier to deal with an equation of the forward
    form where an initial value is specified. Some variable substitutions convert
    the Black-Scholes equation into the so-called diffusion equation where an initial
    value is specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first set of variable substitutions is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_3.jpg)(8.2)'
  prefs: []
  type: TYPE_IMG
- en: In ([8.1](#eq1)), the quantities ![inline-image](../images/CH008_4.jpg), ![inline-image](../images/CH008_5.jpg)
    and ![inline-image](../images/CH008_6.jpg) are required. These are computed from
    ([8.2](#eq2)) using ![inline-image](../images/CH008_7.jpg), ![inline-image](../images/CH008_8.jpg),
    and ![inline-image](../images/CH008_9.jpg). Simplifying the expressions leads
    to
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_10.jpg)(8.3)'
  prefs: []
  type: TYPE_IMG
- en: where ![inline-image](../images/CH008_11.jpg) and the initial condition becomes
    *v*(*x*, 0) = max(e ^(*x*) − 1, 0).
  prefs: []
  type: TYPE_NORMAL
- en: In the Black-Scholes equation, it is required to consider the time interval
    ![inline-image](../images/CH008_12.jpg). From ![inline-image](../images/CH008_13.jpg),
    for *t* = *T* we get ![inline-image](../images/CH008_14.jpg) and for *t* = 0,
    we get ![inline-image](../images/CH008_15.jpg). This shows ![inline-image](../images/CH008_16.jpg),
    the initial condition for *t* becomes the final condition for τ and the final
    condition for *t* becomes the initial condition for *τ*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next substitution is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_17.jpg)(8.4)'
  prefs: []
  type: TYPE_IMG
- en: for some constants *α* and *β* whose values are to be determined. Taking partial
    derivatives with respect to *t* and *x* in ([8.4](#eq4)) and substituting in ([8.3](#eq3))
    gives after simplification
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_18.jpg)(8.5)'
  prefs: []
  type: TYPE_IMG
- en: Setting *α* = −(*k* − 1)/2 and *β* = *α* ² + (*k* − 1)*α* − *k* eliminates the
    ![inline-image](../images/CH008_19.jpg) term and the *u* term respectively. With
    these values of *α* and *β*, *v* becomes
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_20.jpg)(8.6)'
  prefs: []
  type: TYPE_IMG
- en: 'Also ([8.5](#eq5)) gets transformed into the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_21.jpg)(8.7)'
  prefs: []
  type: TYPE_IMG
- en: 'The initial condition with respect to *τ* and the boundary conditions with
    respect to *x* are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![display-image](../images/CH008_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[Equation (8.7)](#eq7) is called the diffusion equation and is used in Physics
    to model temperature in a thin infinite bar at time *τ*. To solve the original
    Black-Scholes equation for *C* it is sufficient to solve the diffusion [equation
    (8.7)](#eq7) for *u* and then use the variable substitutions in reverse to obtain
    the corresponding value of *C*. So, in the following we will consider the diffusion
    equation.'
  prefs: []
  type: TYPE_NORMAL
- en: 8.1 Crank-Nicolson Method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The finite difference method is a technique for numerically solving partial
    differential equations. In this section, we provide an overview of the Crank-Nicolson
    method for solving the diffusion equation given by [equation (8.7)](#eq7). The
    diffusion equation has partial derivatives with respect to two variables. We consider
    discretisations of these derivatives.
  prefs: []
  type: TYPE_NORMAL
- en: 'The partial derivative ![inline-image](../images/CH008_24.jpg) may be defined
    to be the limiting difference:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This can be approximated in the following ways.
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The ‘big-oh’ notation is defined as follows. For positive real valued functions
    ![inline-image](../images/CH008_27.jpg) and ![inline-image](../images/CH008_28.jpg),
    ![inline-image](../images/CH008_29.jpg) (read as *f* is ‘big-oh’ of *g*) if there
    are positive real numbers *M* and *x* 0 such that ![inline-image](../images/CH008_30.jpg)
    for all ![inline-image](../images/CH008_31.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: For the second order partial derivative with respect to *x* in ([8.7](#eq7)),
    two successive approximations are to be considered. Using either of the two strategies
    ‘forward followed by backward’ or ‘backward followed by forward’, the following
    symmetric central-difference approximation is obtained.
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 8.1.1 Finite difference mesh
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Consider the 2-dimensional plane, where *τ* increases along the horizontal line
    and *x* increases along the vertical line. This plane is divided into a mesh where
    the *τ*-line is assumed to be represented by lines which are ![inline-image](../images/CH008_33.jpg)
    apart and the *x*-line is assumed to be represented by lines which are ![inline-image](../images/CH008_34.jpg)
    lines apart. So, points of the mesh are determined by ![inline-image](../images/CH008_35.jpg)
    for integers *m* and *n*. The value of the function ![inline-image](../images/CH008_36.jpg)
    at this point will be denoted by
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_37.jpg)(8.8)'
  prefs: []
  type: TYPE_IMG
- en: Consequently,
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Recall that ![inline-image](../images/CH008_39.jpg). In the discretisation
    for *τ*, suppose the interval ![inline-image](../images/CH008_40.jpg) is divided
    into *M* sub-intervals. This sets ![inline-image](../images/CH008_41.jpg) to be
    equal to ![inline-image](../images/CH008_42.jpg). In practice, the conditions
    ![inline-image](../images/CH008_43.jpg) and ![inline-image](../images/CH008_44.jpg)
    are approximated by choosing large positive integers *N* ^− and *N* ^+ and considering
    *x* to be in the interval ![inline-image](../images/CH008_45.jpg). So, the boundary
    and initial conditions become the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that the boundary condition implies that ![inline-image](../images/CH008_47.jpg)
    is known for ![inline-image](../images/CH008_48.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the forward difference to approximate ![inline-image](../images/CH008_49.jpg)
    and the symmetric central-difference to approximate ![inline-image](../images/CH008_50.jpg)
    provides the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_51.jpg)(8.9)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the backward difference to approximate ![inline-image](../images/CH008_52.jpg)
    and the symmetric central-difference to approximate ![inline-image](../images/CH008_53.jpg)
    provides the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_54.jpg)(8.10)'
  prefs: []
  type: TYPE_IMG
- en: Changing *m* to *m* + 1 in ([8.10](#eq10)) gives
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_55.jpg)(8.11)'
  prefs: []
  type: TYPE_IMG
- en: 'The average of ([8.9](#eq9)) and ([8.11](#eq11)) is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_56.jpg)(8.12)'
  prefs: []
  type: TYPE_IMG
- en: 'It can be shown that the terms in this equation are accurate to ![inline-image](../images/CH008_57.jpg)
    rather than up to ![inline-image](../images/CH008_58.jpg). Ignoring the error
    terms (i.e., the ‘big-oh’ terms) we have the following approximation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_59.jpg)(8.13)'
  prefs: []
  type: TYPE_IMG
- en: for ![inline-image](../images/CH008_60.jpg), where
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_61.jpg)(8.14)'
  prefs: []
  type: TYPE_IMG
- en: '[Equation (8.13)](#eq13) defines a system of linear equations whereby if ![inline-image](../images/CH008_62.jpg)
    are known for all *n*, then ![inline-image](../images/CH008_63.jpg) can be computed
    for all *n*. In other words, at time ![inline-image](../images/CH008_64.jpg),
    if the values of ![inline-image](../images/CH008_65.jpg) are known for all ![inline-image](../images/CH008_66.jpg),
    then it is possible to compute the values of ![inline-image](../images/CH008_67.jpg)
    for all ![inline-image](../images/CH008_68.jpg). Define'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_69.jpg)(8.15)'
  prefs: []
  type: TYPE_IMG
- en: Then ![inline-image](../images/CH008_70.jpg) can be computed if ![inline-image](../images/CH008_71.jpg)
    are known for all *n*. Once the ![inline-image](../images/CH008_72.jpg) are known,
    it is possible to obtain ![inline-image](../images/CH008_73.jpg) for all *n*.
  prefs: []
  type: TYPE_NORMAL
- en: In matrix notation, ([8.13](#eq13)) can be written as
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_74.jpg)(8.16)'
  prefs: []
  type: TYPE_IMG
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_75.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![display-image](../images/CH008_76.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![display-image](../images/CH008_77.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![display-image](../images/CH008_78.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The values of ![inline-image](../images/CH008_79.jpg) and ![inline-image](../images/CH008_80.jpg)
    are known from the boundary conditions on *x*. So, for all *m*, the vector **b**
    ^( *m* ) is determined by the boundary conditions.
  prefs: []
  type: TYPE_NORMAL
- en: To, solve ([8.16](#eq16)), first obtain **z** ^(*m*) = **Du** ^(*m*) + **b**
    ^(*m*) . This is easy to do using ([8.15](#eq15)). Then the system of linear equations
    **Cu** ^(*m*+1) = **z** ^(*m*) is solved using techniques from numerical linear
    algebra. So, for any ![inline-image](../images/CH008_81.jpg), it is possible to
    find the value of ![inline-image](../images/CH008_82.jpg) for all *n*. Consequently,
    the value *C* of the call option can also be obtained at all the grid points of
    the two dimensional mesh described above.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the use of finite precision computer arithmetic introduces rounding
    errors in numerical solutions. The system is said to be stable if these rounding
    errors are not magnified at each iteration. If the rounding errors do grow in
    magnitude at each iteration of the solution, then the system is said to be unstable.
    It can be shown that the Crank-Nicolson system is stable for *α* > 0.
  prefs: []
  type: TYPE_NORMAL
- en: 8.2 American Options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: American options can be exercised on or *before* the expiry date. Intuitively,
    this additional right makes them more valuable than European options.
  prefs: []
  type: TYPE_NORMAL
- en: For any American option, at each time point *t*, depending on the asset value
    *S*, a decision has to be taken as to whether the asset should be held or, whether
    it should be exercised. This is known as a free boundary value problem. For each
    time *t*, there is a value ![inline-image](../images/CH008_83.jpg) such that if
    the price *S* of the asset is on one side of ![inline-image](../images/CH008_84.jpg),
    then the option should be exercised, while if the price *S* is on the other side
    of ![inline-image](../images/CH008_85.jpg), then the option should be held. The
    value ![inline-image](../images/CH008_86.jpg) is called the optimal exercise price
    and the corresponding value of the option is said to be the exercise value. At
    time point *t*, there could be several such optimal exercise prices. So, the decision
    to sell or retain the option with respect to a particular value ![inline-image](../images/CH008_87.jpg)
    is taken for the asset price in a local neighbourhood of ![inline-image](../images/CH008_88.jpg).
    In the following, we will consider the case of only one optimal exercise price.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose the value of the American put is *P*(*S*, *t*) and let ![inline-image](../images/CH008_89.jpg)
    be the exercise boundary. At time *t*, if ![inline-image](../images/CH008_90.jpg),
    then the option should be exercised and held otherwise. The following is the Black-Scholes
    inequality for *P*(*S*, *t*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_91.jpg)(8.17)'
  prefs: []
  type: TYPE_IMG
- en: 'For each time *t*, the *S*-axis is divided into two regions:'
  prefs: []
  type: TYPE_NORMAL
- en: (1)For ![inline-image](../images/CH008_92.jpg) early exercise is optimal, *P*
    = *E* − *S* and strict inequality holds in ([8.17](#eq17)).(2)For ![inline-image](../images/CH008_93.jpg),
    early exercise is not optimal, *P* > *E* − *S* and equality holds in ([8.17](#eq17)).
  prefs: []
  type: TYPE_NORMAL
- en: Note that under the no-arbitrage condition, *P* < *E* − *S* is not possible,
    as otherwise, an investor may buy both the option and the asset at a total cost
    of *P* + *S* and immediately exercise the option obtaining an amount *E* and in
    the process making a risk-free profit of *E* − (*P* − *S*) > 0.
  prefs: []
  type: TYPE_NORMAL
- en: The boundary conditions at *S* = *S* *f* (*t*) are that *P* and ![inline-image](../images/CH008_94.jpg)
    are continuous, and
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_95.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Tackling the free boundary is problematic. It is possible to re-formulate the
    problem such that the free boundary disappears. The problem is transformed from
    the original (*S*, *t*) variables to ![inline-image](../images/CH008_96.jpg) variables
    using the transformations mentioned in the case of European option. This process
    transforms the optimal exercise boundary *S* *f* (*t*) to ![inline-image](../images/CH008_97.jpg).
    Since *S* *f* (*t*) < *E*, it follows that ![inline-image](../images/CH008_98.jpg).
    Further, the payoff function max(*E* − *S*, 0) is transformed to ![inline-image](../images/CH008_99.jpg).
    This results in the following formulation (the so-called linear complementarity
    problem):'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_100.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![display-image](../images/CH008_101.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The initial and boundary conditions become the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_102.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![display-image](../images/CH008_103.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![display-image](../images/CH008_104.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![display-image](../images/CH008_105.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is no explicit mention of the free boundary in the above formulation.
    Solving the re-formulated problem to obtain an expression for ![inline-image](../images/CH008_106.jpg)
    allows obtaining the free boundary ![inline-image](../images/CH008_107.jpg) using
    the condition that ![inline-image](../images/CH008_108.jpg), but ![inline-image](../images/CH008_109.jpg)
    for ![inline-image](../images/CH008_110.jpg), i.e., it is the point where ![inline-image](../images/CH008_111.jpg)
    first meets ![inline-image](../images/CH008_112.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 8.2.1 Finite Difference Formulation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As before, the ![inline-image](../images/CH008_113.jpg) plane is divided into
    a finite mesh where ![inline-image](../images/CH008_114.jpg) is a step along the
    *x*-axis and ![inline-image](../images/CH008_115.jpg) is a step along the *τ*
    axis. Also, it is assumed that *x* lies in the range ![inline-image](../images/CH008_116.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: The partial derivatives are approximated on the regular mesh with step sizes
    ![inline-image](../images/CH008_117.jpg) and ![inline-image](../images/CH008_118.jpg),
    as before. Also, as before, let ![inline-image](../images/CH008_119.jpg) and write
    ![inline-image](../images/CH008_120.jpg). The condition ![inline-image](../images/CH008_121.jpg)
    is approximated by ![inline-image](../images/CH008_122.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: Using the approximation of the partial derivatives given in [Section 8.1](#s1)
    and using a method similar to the one used in deriving ([8.12](#eq12)), it is
    possible to show that the inequality ![inline-image](../images/CH008_123.jpg)
    is approximated by
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_124.jpg)(8.18)'
  prefs: []
  type: TYPE_IMG
- en: where, as before, ![inline-image](../images/CH008_125.jpg). The boundary and
    initial conditions translate to
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_126.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Define
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_127.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then ([8.18](#eq18)) becomes
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_128.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At time step ![inline-image](../images/CH008_129.jpg) it is possible to find
    ![inline-image](../images/CH008_130.jpg) explicitly since the values of ![inline-image](../images/CH008_131.jpg)
    are known for all *n*. The following approximation is used for the equality in
    the linear complementarity formulation.
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_132.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The above formulation can be transformed into a matrix problem of the following
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH008_133.jpg)'
  prefs: []
  type: TYPE_IMG
- en: for a suitably defined matrix **C** (which turns out to be positive definite)
    and vector **b**. (Note that **C** here is different from the **C** appearing
    in the [Section 8.1](#s1)) As in the case of European option, the problem has
    been converted into a linear algebra problem and techniques from numerical linear
    algebra are used to solve the problem.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: The material in this chapter is based on the treatment given in Wilmott, Howison,
    and Dewynne, 1995\. The description given here is short. For further details we
    refer the reader to Wilmott et al. (1995).
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Option Pricing Using Monte Carlo Methods
  prefs: []
  type: TYPE_NORMAL
- en: Monte Carlo simulation is a very general technique with wide applications. In
    this chapter, we briefly review the technique in the context of option pricing.
  prefs: []
  type: TYPE_NORMAL
- en: 9.1 Simulation of Wiener Process
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Recall that the Wiener process is a family (*W* [*t*] ) [*t*]≥0, where *W* 0
    = 0, *W* [*t*] ∼ *N*(0, *t*) for all *t* ≥ 0, Δ*W* [*t*] = *W* [*t*]+Δ*t* − *W*
    [*t*] on non-overlapping time intervals are independent, and *W* [*t*] depend
    continuously on *t*. Here *N*(*μ*, *σ* ²) denotes the normal distribution with
    mean *μ* and variance *σ* ². As a consequence of the definition, *W* [*t*] − *W*
    *s* ∼ *N*(0, *t* − *s*) and so *E*[*W* [*t*] − *W* *s* ] = 0, Var(*W* [*t*] −
    *W* *s* ) = *t* − *s* implying *E*[(Δ*W* [*t*] )²] = Δ*t*. So, Δ*W* are independent
    and normally distributed with mean 0 and variance Δ*t*.
  prefs: []
  type: TYPE_NORMAL
- en: A discrete time version of the Wiener process can be obtained in the following
    manner. Fix Δ*t* to be a constant time increment. For *i* ≥ 0, let *t* [*i*] =
    *i*Δ*t*. Define Δ*W* *k* = *W* *k*Δ*t* − *W* (*k*−1)Δ*t* . Then, we have ![inline-image](../images/CH009_1.jpg).
    Since, Δ*W* follows *N*(0, Δ*t*), we have ![inline-image](../images/CH009_2.jpg),
    where *Z* is the standard normal variate. Further, Δ*W*'s are independent over
    non-overlapping intervals. So, Δ*W* 1,…,Δ*W* [*i*] are independent and each follows
    *N*(0, Δ*t*).
  prefs: []
  type: TYPE_NORMAL
- en: From the above description, we obtain the following simple method of simulating
    a discrete Wiener process.
  prefs: []
  type: TYPE_NORMAL
- en: Fix a value for Δ*t*
  prefs: []
  type: TYPE_NORMAL
- en: Set *W* 0 = 0
  prefs: []
  type: TYPE_NORMAL
- en: For *k* := 1 to *i* do
  prefs: []
  type: TYPE_NORMAL
- en: Sample Z independently from *N*(0, 1)
  prefs: []
  type: TYPE_NORMAL
- en: Set ![inline-image](../images/CH009_3.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: end for.
  prefs: []
  type: TYPE_NORMAL
- en: This method provides the values of ![inline-image](../images/CH009_4.jpg) at
    the points *t* *k* = *k*Δ*t*, *k* = 0, 1, 2,…. The process is random. So, repeating
    the procedure will (very likely) provide a different set of values. The procedure,
    though, is quite simple and can be used many times to simulate many different
    paths. These paths can be used for further processing, as we describe below.
  prefs: []
  type: TYPE_NORMAL
- en: The key computational step in the above simulation is that of sampling from
    the standard normal distribution. Since the standard normal distribution is continuous
    and computers can handle only finite precision, the sampling process cannot be
    perfect. The Ziggurat method is used for such sampling. It is a particular example
    of rejection sampling. We omit a discussion on the sampling procedure, since this
    will take us too far away from the scope of our discussion.
  prefs: []
  type: TYPE_NORMAL
- en: 9.2 Simulating Itô Stochastic Differential Equation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An Itô stochastic differential equation (SDE) is of the form
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH009_5.jpg)(9.1)'
  prefs: []
  type: TYPE_IMG
- en: where (*X* [*t*] ) [*t*]≥0 is a stochastic process and (*W* [*t*] ) [*t*]≥0
    is a Wiener process. The coefficient *a*(*X* [*t*] , *t*) is called the drift
    term and the coefficient *b*(*X* [*t*] , *t*) is called the volatility or diffusion
    coefficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'The discretisation of [(9.1)](#eq1) is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH009_6.jpg)(9.2)'
  prefs: []
  type: TYPE_IMG
- en: Suppose we consider discrete time steps 0 = *t* 0, *t* 1, *t* 2,… with *t* *k*+1
    − *t* *k* = Δ*t* to be a constant for *k* ≥ 1\. Then *t* *k* = *k*Δ*t* and ![inline-image](../images/CH009_7.jpg)
    and so ![inline-image](../images/CH009_8.jpg). Iteratively, obtaining ![inline-image](../images/CH009_9.jpg)
    and ![inline-image](../images/CH009_10.jpg) allows obtaining ![inline-image](../images/CH009_11.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: Suppose that *S* [*t*] is the price of a stock at time *t*. The rate of return
    d*S* [*t*] /*S* [*t*] is modelled using the geometric Brownian motion, i.e. d*S*
    [*t*] /*S* [*t*] = *μ*d*t* + *σ*d*W* [*t*] . So, d*S* [*t*] = *S* [*t*] *μ*d*t*
    + *S* [*t*] *σ*d*W* [*t*] . Setting *a*(*S* [*t*] , *t*) = *S* [*t*] *μ* and *b*(*S*
    [*t*] , *t*) = *S* [*t*] *σ*, we see that (*S* [*t*] ) [*t*]≥0 satisfies an Itô
    SDE. Consequently, a method to solve *X* [*t*] from [(9.1)](#eq1) can be applied
    to find stock prices.
  prefs: []
  type: TYPE_NORMAL
- en: We have already seen a method for simulating a Wiener process. This can be extended
    to simulate an Itô SDE and solve for *X* [*t*] . The strategy given below is called
    the Euler discretisation. In this algorithm, *y* *k* is the obtained estimate
    of *X* *k*Δ*t* .
  prefs: []
  type: TYPE_NORMAL
- en: Set the value of Δ*t*
  prefs: []
  type: TYPE_NORMAL
- en: Set *y* 0 = *X* 0 and *W* 0 = 0
  prefs: []
  type: TYPE_NORMAL
- en: For *k* := 0 to *N* do
  prefs: []
  type: TYPE_NORMAL
- en: '[*t*] *k*+1 = *t* *k* + Δ*t*'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Z independently from *N*(0, 1)
  prefs: []
  type: TYPE_NORMAL
- en: Set ![inline-image](../images/CH009_12.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Set *y* *k*+1 = *y* *k* + *a*(*y* [*k*] , *t* *k* )Δ*t* + *b*(*y* [*k*] , *t*
    *k* )Δ*W*
  prefs: []
  type: TYPE_NORMAL
- en: End for
  prefs: []
  type: TYPE_NORMAL
- en: The simulation provides the values of *y* 0, *y* 1,…,*y* [*n*] which are estimates
    of *X* 0, *X* Δ*t* ,…,*X* *N*Δ*t* .
  prefs: []
  type: TYPE_NORMAL
- en: The above discretisation procedure introduces an approximation error. This can
    be improved by using better approximation methods such as those due to Milstein
    and Runge-Kutta.
  prefs: []
  type: TYPE_NORMAL
- en: 9.3 Valuing European Options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using a strategy to simulate stock prices makes the idea behind valuing European
    options rather simple.
  prefs: []
  type: TYPE_NORMAL
- en: Let *S* [*t*] for *t* ≥ 0 be the stock price at time *t*. Suppose the exercise
    date for the European option is *T* and the payoff function be Γ(·), i.e. if the
    price of the stock is *S*, then the payoff is Γ(*S*). The actual form of the payoff
    function depends on the nature of the option.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose there is a method to simulate stock price. For example, we may consider
    the stock rate of return Δ*S*/*S* to follow geometric Brownian motion, so that
    the above-mentioned Euler discretisation of Itô SDE can be used to simulate the
    value of *S* at the discrete time points *t* *k* = *k*Δ*t*, *k* = 0,…,*N*. Suppose
    we choose Δ*t* = *T*/*N* so that *t* [*n*] = *T*. Then the above simulation provides
    the value *y* [*n*] which is an estimate of *S* *N*Δ*t* = *S* [*T*] . Given *y*
    [*N*] , we may obtain the payoff Γ(*y* [*n*] ) corresponding to the estimate *y*
    [*n*] of the stock price *S* [*T*] .
  prefs: []
  type: TYPE_NORMAL
- en: The above strategy provides one possible estimate of the payoff at time *T*.
    Since stock prices form a stochastic process, a single estimate is not useful.
    The way to resolve this is to perform the simulation *M* times, where *M* is a
    sufficiently large integer and take the average of the corresponding payoffs.
    In more details, let ![inline-image](../images/CH009_13.jpg) be the estimate of
    *S* [*T*] obtained in the *j*-th simulation, *j* = 1,…,*M*. Let
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH009_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then ![inline-image](../images/CH009_15.jpg) is the average of all the payoffs
    calculated in the *M* simulations. We may consider ![inline-image](../images/CH009_16.jpg)
    to be an estimate of the payoff that will actually occur at time *T*.
  prefs: []
  type: TYPE_NORMAL
- en: Our interest is in obtaining the value of the option at some time point *t*
    < *T*. Once we obtain an estimate ![inline-image](../images/CH009_17.jpg) of the
    payoff at time *T*, we may discount it back to time *t* using the risk-free interest
    rate. Then an estimate of the value of the option at time *t* < *T* is ![inline-image](../images/CH009_18.jpg),
    where *D* *r* (*t*, *T*) is the factor such that an amount *x* at time *t* grows
    to an amount *xD* *r* (*t*, *T*) at time *T* under the risk-free interest rate
    *r*.
  prefs: []
  type: TYPE_NORMAL
- en: The above described strategy for valuing European options requires simulating
    *M* paths for the stock prices. Each path has *N* time steps. Each of these time
    steps requires sampling from the standard normal. So, a total of *MN* samplings
    are required. This forms the dominant computational cost of the entire procedure.
  prefs: []
  type: TYPE_NORMAL
- en: The procedure can be time consuming. For basic European put and call options,
    it may not be faster than the finite difference or other methods. On the other
    hand, the main advantage is that the simulation method applies to general forms
    of the drift and diffusion parameters and also for arbitrary (though computationally
    tractable) forms of the payoff function.
  prefs: []
  type: TYPE_NORMAL
- en: 9.4 Valuing American Options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The key difference between European and American options is the early exercise
    facility in American options. As we have already seen, this makes the problem
    of option pricing more difficult for American options. This also holds for option
    pricing using stock price simulations.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose that the value of some American option is required at time point *t*
    = 0\. As before, let *S* [*t*] be the stock price at time *t* ≥ 0, where *S* 0
    is known and Γ(*S* [*t*] ) be the payoff obtained for the stock price *S* [*t*]
    . Let *V*(*S*, *t*) be the value of the option for stock price *S* and time *t*.
    So, *V*(*S* [*T*] , *T*) = Γ(*S* [*T*] ). The requirement is to obtain *V*(*S*
    0, 0).
  prefs: []
  type: TYPE_NORMAL
- en: In principle, an American option can be exercised at any time on or before the
    expiry time *T*. In the discretised version, the time points where the option
    may be exercised are restricted to a finite set of values in the interval [0,
    *T*]. As before, set Δ*t* = *T*/*N* and consider the time points *t* *k* = *k*Δ*t*.
    The option can be exercised at the points *t* 0, *t* 1,…,*t* [*n*] . Such discretisation
    of the American option converts it into a Bermudean option. By choosing *N* large
    enough, we hope to be able to model continuous time using discrete time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let ![inline-image](../images/CH009_19.jpg) be the value of the stock at time
    point *t* *k* . If the option is exercised at time *t* [*k*] , then the payoff
    is ![inline-image](../images/CH009_20.jpg). This, however, is not the value of
    the option at time *t* *k* . It may be better to hold the option, since it may
    have a higher value in the next time point. There are two issues that arise:'
  prefs: []
  type: TYPE_NORMAL
- en: (1)The value ![inline-image](../images/CH009_21.jpg) at the next time point
    *t* *k*+1 is a random variable which depends on the stock price ![inline-image](../images/CH009_22.jpg)
    at the time point *t* *k* . If we fix ![inline-image](../images/CH009_23.jpg)
    to a value *x*, then we may consider the expected value of ![inline-image](../images/CH009_24.jpg).
    In other words, we consider the function ![inline-image](../images/CH009_25.jpg).(2)At
    time point *t* [*k*] , we have the payoff ![inline-image](../images/CH009_26.jpg)
    for the option which must be considered with respect to the value ![inline-image](../images/CH009_27.jpg).
    We, however, cannot directly compare ![inline-image](../images/CH009_28.jpg) to
    the value ![inline-image](../images/CH009_29.jpg) since the later quantity is
    the expected value at the next time point *t* *k*+1\. To make the comparison meaningful,
    we need to discount the value ![inline-image](../images/CH009_30.jpg) to the time
    point *t* *k* . This is achieved by dividing by *D* *r* (*t* [*k*] , *t* *k*+1)
    which is the growth factor at the risk-free interest. To this end, we define
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH009_31.jpg)(9.3)'
  prefs: []
  type: TYPE_IMG
- en: The net effect of the above two points is that ![inline-image](../images/CH009_32.jpg)
    is the maximum of ![inline-image](../images/CH009_33.jpg) and ![inline-image](../images/CH009_34.jpg),
    i.e.
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH009_35.jpg)(9.5)'
  prefs: []
  type: TYPE_IMG
- en: At a broad level, the approach is the same as the one used for European options,
    i.e. *M* paths for evolution of stock prices are simulated where each path is
    evaluated at the time points *t* 0, *t* 1,…,*t* [*n*] . For the *j*-th path, *j*
    = 1,…,*M*, let ![inline-image](../images/CH009_36.jpg) denote the estimate of
    the stock price ![inline-image](../images/CH009_37.jpg) obtained using the *j*-th
    simulation at time point *t* [*k*] , *k* = 0,…,*N*. For valuing European option,
    only the values ![inline-image](../images/CH009_38.jpg), *j* = 1,…,*M* are required.
    In the present case, all the *y*-values are required.
  prefs: []
  type: TYPE_NORMAL
- en: Let ![inline-image](../images/CH009_39.jpg) denote the value of the option at
    time point *t* *k* in the *j*-th simulation, *k* = 1,…,*N*, *j* = 1,…,*M*. The
    goal is to determine ![inline-image](../images/CH009_40.jpg), i.e. the value of
    the option at time point *t* 1 = Δ*t* in the *j*-th simulation, for *j* = 1,…,*M*.
    Once all the ![inline-image](../images/CH009_41.jpg)s have been obtained, we take
    the average of these as the estimate of the value of the option at time *t* 1
    which is then discounted by the factor *D* *r* (0, *t* 1) corresponding to one
    time interval to obtain an estimate of the value of the option at time *t* = 0\.
    In other words, the estimate ![inline-image](../images/CH009_42.jpg) of the value
    of the option at time *t* = 0, is obtained as
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH009_43.jpg)(9.6)'
  prefs: []
  type: TYPE_IMG
- en: So, the problem reduces to obtaining the values of ![inline-image](../images/CH009_44.jpg)
    for *j* = 1,…,*M*. This is done by first determining the values of ![inline-image](../images/CH009_45.jpg)
    for *j* = 1,…,*M* and then proceeding backward in time, i.e. from the set of values
    ![inline-image](../images/CH009_46.jpg), *j* = 1,…,*M*, the values of ![inline-image](../images/CH009_47.jpg)
    are obtained. We explain below how this is done.
  prefs: []
  type: TYPE_NORMAL
- en: At time point *t* [*n*] = *T* (i.e. expiry date), the value of the option is
    determined by the payoff function Γ and the stock price ![inline-image](../images/CH009_48.jpg).
    So, ![inline-image](../images/CH009_49.jpg) for *j* = 1,…,*M*. Having obtained
    these values, the next step is to obtain the values of ![inline-image](../images/CH009_50.jpg)
    for *j* = 1,…,*M*. We describe the general step, where the values of ![inline-image](../images/CH009_51.jpg),
    *j* = 1,…,*M* are obtained from the values of ![inline-image](../images/CH009_52.jpg),
    *j* = 1,…,*M*.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the set of pairs ![inline-image](../images/CH009_53.jpg) for *j* =
    1,…,*M*. Apply the least square regression technique to this *M* pairs to obtain
    the functional form of *C* *k* (*x*). For *j* = 1,…,*M*, set ![inline-image](../images/CH009_54.jpg).
    This provides the values ![inline-image](../images/CH009_55.jpg), *j* = 1,…,*M*.
    The iteration is continued until the values ![inline-image](../images/CH009_56.jpg),
    *j* = 1,…,*M* are obtained and then [(9.6)](#eq6) is used to obtain the desired
    estimate ![inline-image](../images/CH009_57.jpg) of the option at time point *t*
    = 0.
  prefs: []
  type: TYPE_NORMAL
- en: As in the case of European option, the above procedure proceeds with almost
    no assumptions, i.e. there are no conditions on the drift and diffusion parameters
    or, on the form of the payoff function. Like all simulation-based results, the
    drawbacks are the relatively heavy computational requirement and the potential
    errors arising due to various approximations.
  prefs: []
  type: TYPE_NORMAL
- en: 9.5 Monte Carlo Integration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We briefly consider the general problem of evaluating a definite integral using
    Monte Carlo techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Let *f*(*x*) be a real-valued function, and it is required to estimate the integral
    of *f*(*x*) over an interval [*a*, *b*]. Let *u* *a*,*b* (*x*) be the uniform
    density function over the interval [*a*, *b*]. Then the expectation of *f*(*x*)
    over the interval [*a*, *b*] is defined to be
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH009_58.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'So, we have ![inline-image](../images/CH009_59.jpg). Obtaining an estimate
    of *E*(*f*) allows obtaining an estimate of the required definite integral. An
    estimate of *E*(*f*) is obtained by choosing *x* 1,…,*x* [*n*] independently and
    following *u* *a*,*b* (*x*) and then computing ![inline-image](../images/CH009_60.jpg).
    Using the law of large numbers, the sample mean goes to *E*[*f*] as *N* → ∞. Consequently,
    for a large enough *N*, we have ![inline-image](../images/CH009_61.jpg) and so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH009_62.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This idea extends to higher dimensions. Let *f* be an *n*-variable function
    and the integral of *f* over a domain ![inline-image](../images/CH009_63.jpg)
    is desired. Let ![inline-image](../images/CH009_64.jpg) be the volume of ![inline-image](../images/CH009_65.jpg).
    Suppose *x* 1,…,*x* [*n*] are independently and uniformly sampled from ![inline-image](../images/CH009_66.jpg).
    Then an approximation of ![inline-image](../images/CH009_67.jpg) is given by ![inline-image](../images/CH009_68.jpg).
    The requirement to integrate a high-dimensional function over a particular domain
    arises in various financial applications.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: The material in this chapter is based on Seydel (2012). A basic conceptual-level
    description has been presented here. We refer to Seydel (2012) for much more details.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Determining Stochastic Dominance Relations
  prefs: []
  type: TYPE_NORMAL
- en: Let ![inline-image](../images/CH010_1.jpg) be a non-empty set of real numbers
    with *x* 1 < ⋯ < *x* [*n*] . Let ![inline-image](../images/CH010_2.jpg) be a set
    of cumulative probability distribution functions on ![inline-image](../images/CH010_3.jpg),
    i.e. ![inline-image](../images/CH010_4.jpg) and if a random variable *X* follows
    ![inline-image](../images/CH010_5.jpg), then ![inline-image](../images/CH010_6.jpg).
    For ![inline-image](../images/CH010_7.jpg), let ![inline-image](../images/CH010_8.jpg)
    be the probability mass function corresponding to the cumulative distribution
    function ![inline-image](../images/CH010_9.jpg); let ![inline-image](../images/CH010_10.jpg)
    be the mean for *F* [*i*] , i.e. ![inline-image](../images/CH010_11.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: For ![inline-image](../images/CH010_12.jpg), define
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH010_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We consider the following well-known characterisations of stochastic dominance
    (SD) relations which are equivalent to the utility function-based definitions
    of SD.
  prefs: []
  type: TYPE_NORMAL
- en: '*First-order SD (FSD): F* [*i*] >1 *F* *j* if *F* [*i*] (*x*) ≤ *F* *j* (*x*)
    for all ![inline-image](../images/CH010_14.jpg) and *F* [*i*] (*x*) < *F* *j*
    (*x*) for at least one ![inline-image](../images/CH010_15.jpg).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Second-order SD (SSD): F* [*i*] >2 *F* *j* if ![inline-image](../images/CH010_16.jpg)
    for all ![inline-image](../images/CH010_17.jpg) and ![inline-image](../images/CH010_18.jpg)
    for at least one ![inline-image](../images/CH010_19.jpg).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Third-order SD (TSD): F* [*i*] >3 *F* *j* if ![inline-image](../images/CH010_20.jpg)
    and ![inline-image](../images/CH010_21.jpg) for all ![inline-image](../images/CH010_22.jpg)
    and ![inline-image](../images/CH010_23.jpg) for at least one ![inline-image](../images/CH010_24.jpg).'
  prefs: []
  type: TYPE_NORMAL
- en: The above description of SD relations has been given for discrete distributions.
    The reason is that for the purpose of computing SD relations, one has to either
    directly use discrete distributions or use discretised versions of continuous
    distributions.
  prefs: []
  type: TYPE_NORMAL
- en: The requirement is to determine a subset of distributions in ![inline-image](../images/CH010_25.jpg)
    which are not dominated by any other distributions in ![inline-image](../images/CH010_26.jpg).
    For *m* = 1, 2, 3, define
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH010_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The goal is to be able to determine SD [*m*] , for *m* = 1, 2, 3.
  prefs: []
  type: TYPE_NORMAL
- en: Let us consider the direct method for determining ![inline-image](../images/CH010_28.jpg).
    For distinct *F* and ![inline-image](../images/CH010_29.jpg) in ![inline-image](../images/CH010_30.jpg),
    it is required to determine whether ![inline-image](../images/CH010_31.jpg) or
    *F′* >1 *F*, or neither of these relations hold. Determining this requires comparing
    *F* and ![inline-image](../images/CH010_32.jpg) in a pointwise manner, i.e. comparing
    ![inline-image](../images/CH010_33.jpg) and ![inline-image](../images/CH010_34.jpg)
    for *i* = 1,…,*n* for a total of at most *n* comparisons. Note that it may be
    possible to abort early by determining that neither of *F* or ![inline-image](../images/CH010_35.jpg)
    dominates the other. It is for this reason that the number of comparisons required
    is at most *n* rather than being equal to *n*.
  prefs: []
  type: TYPE_NORMAL
- en: In view of the above, determining ![inline-image](../images/CH010_36.jpg) requires
    comparison of ![inline-image](../images/CH010_37.jpg) distributions for a total
    cost of at most ![inline-image](../images/CH010_38.jpg) comparisons. The question
    is whether the number of comparisons can be reduced? This question is important,
    since in practice situations arise where *N* is large, making ![inline-image](../images/CH010_39.jpg)
    comparisons of distributions to be prohibitively time consuming.
  prefs: []
  type: TYPE_NORMAL
- en: Several properties of SD relations make it possible to reduce the number of
    comparisons. These properties are necessary conditions. Using the necessary conditions,
    it is possible to rule out certain possibilities without actually making a direct
    comparison. Below we mention some of these necessary conditions and explain how
    they can be used to reduce the number of comparisons.
  prefs: []
  type: TYPE_NORMAL
- en: '**Transitivity:** For *m* = 1, 2, 3, it is known that > *m* is transitive,
    i.e. if *F* > *m* *G* and *G* > *m* *H*, then *F* > *m* *H*. This helps computation
    in the following manner. Suppose it has been determined that *F* > *m* *G*. Then
    we discard *G*, i.e. *G* is no longer compared to any other distribution. The
    reason is the following. Since *F* dominates *G*, clearly *G* itself does not
    belong to ![inline-image](../images/CH010_40.jpg). On the other hand, by retaining
    *G*, it could be used to rule out the possiblity that some other distribution
    *H* is in ![inline-image](../images/CH010_41.jpg) which would be the case if *G*
    > *m* *H* holds. By discarding *G*, the comparison *G* > *m* *H*? (i.e. whether
    *G* dominates *H* under > *m* ) will not be made any more. Since *F* is not discarded,
    the comparison, *F* > *m* *H*?, however, will be made. Since *F* > *m* *G* and
    *G* > *m* *H*, by transitivity, *F* > *m* *H* holds which will result in *H* being
    discarded. So, if a comparison results in a losing distribution, then by discarding
    the losing distribution, the correctness of the procedure is not affected. Note
    that a comparison between two distributions need not result in one distribution
    losing out. In this case, transitivity does not help in reducing the work. Nonetheless,
    if the size of ![inline-image](../images/CH010_42.jpg) is significantly lesser
    than *N* (the size of ![inline-image](../images/CH010_43.jpg)), then many comparisons
    will indeed result in a losing distribution. Discarding such distributions will
    provide significant speed improvements.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Condition on mean:** For *m* = 1, 2, 3, it is known that if *F* [*i*] > *m*
    *F* *j* holds for ![inline-image](../images/CH010_44.jpg), then ![inline-image](../images/CH010_45.jpg).
    Note that this is only a necessary condition, i.e. it is not true that ![inline-image](../images/CH010_46.jpg)
    implies *F* [*i*] > *m* *F* *j* . This necessary condition on mean is used in
    the following manner. First compute ![inline-image](../images/CH010_47.jpg) for
    *i* = 1,…,*N* and sort the distributions in descending order of their means. For
    simplicity of exposition, assume that the means are all distinct. The procedure
    tries to grow a list ![inline-image](../images/CH010_48.jpg) which will ultimately
    become ![inline-image](../images/CH010_49.jpg). The algorithm starts by considering
    the distribution with the highest mean. This distribution clearly cannot be dominated
    by any other distribution. So, we may put this distribution in ![inline-image](../images/CH010_50.jpg)
    and remove it from ![inline-image](../images/CH010_51.jpg). Next, the algorithm
    considers the distributions in decreasing order of their means. At an intermediate
    point, suppose a distribution *F* is being considered. All distributions remaining
    in ![inline-image](../images/CH010_52.jpg) have means lower than that of *F* and
    so these distributions cannot dominate *F*. So, to determine whether *F* is in
    ![inline-image](../images/CH010_53.jpg), it is sufficient to check that *F* is
    not dominated by any distribution in ![inline-image](../images/CH010_54.jpg).
    If there is indeed some distribution in ![inline-image](../images/CH010_55.jpg)
    which dominates *F*, then *F* is discarded from ![inline-image](../images/CH010_56.jpg),
    but, not put in ![inline-image](../images/CH010_57.jpg); since *F* is a losing
    distribution, discarding it does not affect anything. On the other hand, if *F*
    is not dominated by any distribution in ![inline-image](../images/CH010_58.jpg),
    it is added to ![inline-image](../images/CH010_59.jpg). This strategy reduces
    the number of comparisons between distributions that are required.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Smallest outcome:** For *i* = 1,…,*N*, let ![inline-image](../images/CH010_60.jpg)
    be the smallest value in ![inline-image](../images/CH010_61.jpg) such that ![inline-image](../images/CH010_62.jpg).
    For ![inline-image](../images/CH010_63.jpg), if ![inline-image](../images/CH010_64.jpg),
    then ![inline-image](../images/CH010_65.jpg). In other words, if ![inline-image](../images/CH010_66.jpg)
    dominates ![inline-image](../images/CH010_67.jpg) under the first-order stochastic
    dominance relation, then the minimum value for which ![inline-image](../images/CH010_68.jpg)
    is positive is at least as large as the minimum value for which ![inline-image](../images/CH010_69.jpg)
    is positive. Similar to the condition on the mean, this is also a necessary condition.
    It can be utilised as follows. Suppose ![inline-image](../images/CH010_70.jpg).
    Then it can be inferred that ![inline-image](../images/CH010_71.jpg) cannot dominate
    ![inline-image](../images/CH010_72.jpg). The possibility that ![inline-image](../images/CH010_73.jpg)
    dominates ![inline-image](../images/CH010_74.jpg) still needs to be checked.'
  prefs: []
  type: TYPE_NORMAL
- en: The two necessary conditions, one on the mean and one on the smallest outcome
    can be combined. Suppose we have ![inline-image](../images/CH010_75.jpg) and ![inline-image](../images/CH010_76.jpg).
    The condition on the mean shows that ![inline-image](../images/CH010_77.jpg) cannot
    dominate ![inline-image](../images/CH010_78.jpg), while the condition on the smallest
    outcome shows that ![inline-image](../images/CH010_79.jpg) cannot dominate ![inline-image](../images/CH010_80.jpg).
    So, it is possible to conclude that neither of ![inline-image](../images/CH010_81.jpg)
    nor ![inline-image](../images/CH010_82.jpg) dominate the other without actually
    making the pointwise comparison of the two distributions.
  prefs: []
  type: TYPE_NORMAL
- en: The two necessary conditions along with transitivity can be combined to obtain
    an algorithm for determining dominance relations. It is known that ![inline-image](../images/CH010_83.jpg).
    So, to determine ![inline-image](../images/CH010_84.jpg), it is advantageous to
    first determine ![inline-image](../images/CH010_85.jpg) and then among the distributions
    in ![inline-image](../images/CH010_86.jpg) determine the maximal elements under
    >2 relation. Similarly, to determine ![inline-image](../images/CH010_87.jpg),
    it is better to first determine ![inline-image](../images/CH010_88.jpg) and then
    among the distributions in ![inline-image](../images/CH010_89.jpg), determine
    the maximal elements under >3 relation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: The material in this chapter is based on Chapter 5 of Levy (2016) and Bawa,
    Lindenberg, and Rafsky (1979). For more details including the state of the art
    we refer to Levy (2016).
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Trading: Background Notions and Market Microstructure'
  prefs: []
  type: TYPE_NORMAL
- en: By a trade we will understand either a purchase or sale of some kind of financial
    instrument. Payment is made in the currency of the country where the trade is
    carried out. There are a wide variety of financial instruments that can be traded.
    These include stocks (or shares), bonds, commodities, currencies, derivatives
    and possibly other instruments. Sometimes, the term security is used to cover
    any kind of financial instrument that can be traded.
  prefs: []
  type: TYPE_NORMAL
- en: A trade takes several steps to complete. The first step consists of a seller
    offering to sell at a particular price and a buyer willing to buy at that price.
    Such a buyer and seller are matched, and a trade between them becomes possible.
    The actual exchange of the financial instrument and the money does not immediately
    take place. This process is called clearing and settlement. It can take a few
    days and involve third parties. Our discussion will not include the clearing and
    settlement functions. We will limit ourselves only to the initiation of the sale/purchase
    orders and the matching of buyers and sellers.
  prefs: []
  type: TYPE_NORMAL
- en: Sale and purchase are specified in atomic units. For example, shares of a company
    are sold as a certain number of shares, where a single share is an atomic unit.
    Goods that are traded should possess the property of *fungibility* which essentially
    means that two different units are exchangeable and possess the same financial
    value. Cash is an example of a fungible asset since any two notes of the same
    denomination are exchangeable and are equivalent from a financial point of view.
  prefs: []
  type: TYPE_NORMAL
- en: A *stock exchange* (or a simply an exchange) is a place where buyers and sellers
    can negotiate and conduct trades. Typically, buyers and sellers do not directly
    negotiate. They go through intermediaries known as *brokers*. Brokers are members
    of the exchange. Both buyers and sellers become clients of brokers. It is the
    brokers who negotiate among themselves on behalf of their clients to conduct trades.
    In exchange for their services, brokers earn commissions.
  prefs: []
  type: TYPE_NORMAL
- en: Until a few decades ago, trades used to be conducted by brokers by physically
    meeting at an exchange. Communication consisted of face-to-face negotiations (often
    using signs) and telephonic interactions. Over time, computers have begun to play
    an increasingly dominant role in the whole process. This has led to automation
    of several aspects of trades.
  prefs: []
  type: TYPE_NORMAL
- en: 11.1 Trading Systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An *electronic stock exchange* is essentially a piece of software. There are
    two basic tasks: entering orders in an order book and matching buy and sell orders.
    Access to the software is provided to brokers. In some cases, buyers and sellers
    can also obtain direct access to the order book of a stock exchange. This is called
    *direct market access*.'
  prefs: []
  type: TYPE_NORMAL
- en: Orders are electronically placed through a computer which communicates with
    the electronic stock exchange. The communication itself is electronic. The speed
    of communication can be a factor in trading where prices change very rapidly.
  prefs: []
  type: TYPE_NORMAL
- en: A stock exchange maintains the current prices at which the various instruments
    are traded on the exchange. These prices are given out in electronic format as
    a live feed. This information is important to buyers and sellers for deciding
    upon the orders to be placed.
  prefs: []
  type: TYPE_NORMAL
- en: Placing of orders may involve a human element. A person could be sitting at
    a desk and studying the prices of different instruments. Based on some intuition
    and/or pre-set rules, the person would be placing relevant orders. Increasingly,
    however, large traders are relying on computers to take the decisions on when
    to place an order and also which order to place.
  prefs: []
  type: TYPE_NORMAL
- en: The procedure of placing an order could also be done by a piece of software.
    This software receives price feeds from the exchange. Additionally, it may also
    receive news feeds and relevant information from other sources. Based on such
    information, the software decides on the placement of orders. This decision-making
    process is an algorithm. The software implements the algorithm. The method of
    making trading decisions based on an algorithm is called *algorithmic trading*.
  prefs: []
  type: TYPE_NORMAL
- en: For an instrument to be traded on a stock exchange it must first be listed on
    the exchange. For example, the stocks of a company may be listed in a stock exchange
    thereby permitting the sale and purchase of the stock on that exchange. It is
    not necessary for the whole stock of a company to be listed on a single stock
    exchange. There could be several stock exchanges where the stocks of a company
    can be traded. Any trade performed on a stock exchange incurs a *transaction fee*.
    For determining profitability of a trade, a trader needs to take into account
    the associated transaction fees.
  prefs: []
  type: TYPE_NORMAL
- en: A stock exchange is not the only system which permits trading. There are alternative
    trading systems.
  prefs: []
  type: TYPE_NORMAL
- en: '*Over-the-counter* (OTC) trades are direct trades between buyers and sellers
    without going through a stock exchange. An OTC market consists of participants.
    Two such participants can conduct a trade without other participants becoming
    aware at the price at which the trade was concluded. So, an OTC market typically
    has less transparency compared to a stock exchange.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Crossing networks* directly match buy and sell orders electronically without
    going through an exchange. Such networks can handle OTC and exchange-listed securities.
    The matches can be done at various times during the day and sometimes even after
    the operating hours of an exchange. The main advantage of such a trading system
    is that large trades can be conducted in anonymity and away from the public view.
    This avoids impacting the price which an otherwise large trade might have had.'
  prefs: []
  type: TYPE_NORMAL
- en: An *electronic communication network (ECN)* is an automated forum for trading
    outside traditional stock exchanges. In contrast with crossing networks, ECNs
    publicise orders that are entered by the big traders. Primarily stocks and currencies
    are traded on ECNs. An advantage of ECNs is that of lower transaction costs and
    providing the facility of order matching outside traditional exchange hours.
  prefs: []
  type: TYPE_NORMAL
- en: A *dark pool* is a private forum for trading various kinds of financial instruments.
    Dark pools are accessed either using crossing networks or directly through proprietary
    systems. Members of a dark pool are generally large traders, and such pools are
    not made accessible to the public. Usually large trades are conducted on dark
    pools. Such trades can be conducted anonymously without the knowledge of the general
    investing public. Trades conducted on dark pools are not transparent. So, traders
    who participate in dark pools have the advantage of having additional information
    regarding trade which is not available to outsiders. Dark pools can be set up
    by independent companies to offer a different trading platform. A broker may also
    set up a dark pool where the clients of the broker interact with each other. Public
    exchanges can also set up dark pools to allow large traders to perform trades
    in an anonymous manner.
  prefs: []
  type: TYPE_NORMAL
- en: 11.2 Some Relevant Notions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we briefly mention a few notions that are widely used.
  prefs: []
  type: TYPE_NORMAL
- en: '*Liquidity*: Market liquidity of a financial asset refers to the property whereby
    the asset can be quickly sold or purchased without a significant change in the
    price of the asset. In a market which is liquid for the asset, it can be sold
    quickly without reducing the price. On the other hand, if the market is not very
    liquid for the asset, then quick selling will require lowering the price. Liquidity
    of an asset could depend on the market. The same asset may be liquid in one market
    and not so in another. Liquidity can be increased through buy-back of shares.'
  prefs: []
  type: TYPE_NORMAL
- en: Liquidation is the task of changing an asset into another with higher liquidity.
    Cash is the most liquid asset, since it can be used to purchase goods and services
    without any loss of value. Often liquidation simply means selling the asset for
    cash. In a somewhat different context, an organisation is said to be liquid if
    it has a sufficient amount of highly liquid assets which can be used to make any
    outstanding payments.
  prefs: []
  type: TYPE_NORMAL
- en: '*Market maker*: A market maker is an entity which quotes both buy and sell
    prices of a financial instrument. The entity is willing to buy and sell securities
    on a regular and continuous basis at the quoted prices. For a market maker to
    make positive profit, the selling price must be higher than the buying price,
    i.e. the market maker should sell at a price which is higher than the price at
    which it is ready to buy. The difference between the selling and the buying price
    is the bid-ask spread of the market maker. A designated market maker (or a designated
    primary market maker) is a market maker which has provided a guarantee that it
    will play the role of a market maker for some assigned security. Such a market
    maker provides liquidity to the security.'
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, a market maker is an entity which places limit orders that cannot
    be immediately executed, i.e. it places buy orders at prices below the current
    selling price and/or sell orders at prices above the current buying price. Such
    orders enter the order book and are possibly executed at a future point of time.
    As a result, such orders introduce liquidity into the market. So, a market maker
    is also called a liquidity provider.
  prefs: []
  type: TYPE_NORMAL
- en: '*Market taker*: A market taker is an entity which places orders that are immediately
    executed. This means that the entity places a buy order at a price which is at
    or above the current selling price and/or places a sell order at a price which
    is at or below the current buying price. Such orders remove liquidity from the
    market and so, these entities are also called liquidity takers.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Maker, taker fees*: Exchanges can differentiate between makers and takers
    by a maker-taker fee structure. When an order of a market maker executes, this
    entity is provided a rebate while the market taker that is a counterparty to the
    market maker''s order has to pay a fee to the market. The amount of rebate and
    the fees can vary depending upon how the exchange wishes to incentivise the maker-taker
    behaviour.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Bid-ask spread*: In broad terms, this is the difference between the selling
    and the buying price of a security. The bid-ask spread could arise from the sale/purchase
    prices quoted by a market maker. It also refers to the difference in the selling
    and buying prices of the security in an exchange. One measure of liquidity of
    an asset is the size of the bid-ask spread. If this spread is small, then the
    asset is very liquid. In particular, if the spread is zero, then the asset is
    said to be frictionless.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Market impact*: This refers to the effect on the price when an entity buys
    or sells an asset. Market impact is quantified by the amount in which the price
    moves in the opposing direction. In other words, if the asset is being purchased,
    then the market impact is the amount by which the price increases while if the
    asset is being sold, then the market impact is the amount by which the price decreases.
    The notion of market impact of an asset is closely related to the liquidity of
    the asset.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Short*: A short sale (or going short) of an asset refers to the act of sale
    of an asset that the seller does not possess. So, the sale has to be made good
    by borrowing the asset from another entity. At a later point of time, the seller
    repurchases the asset from the market and pays back the lender. This is called
    covering the short position. The seller gains if the price decreases between the
    time it makes the sale and the time it buys from the market to pay back to the
    lender. Conversely, the seller loses if the price increases in this period. For
    calculating the profit of the short seller, it is required to take into account
    the possible fee for borrowing and also the possible cash return that the lender
    would have received in the period when it was loaned out.'
  prefs: []
  type: TYPE_NORMAL
- en: A basic requirement for short selling is that the instrument must be fungible,
    since otherwise the short seller will not be able to pay back the lender with
    the actual asset that it had borrowed. Short selling can be done for public securities
    or in currency markets.
  prefs: []
  type: TYPE_NORMAL
- en: In broad terms, going short means gaining if the price of an asset falls. For
    example, an entity may sell a certain number of shares it owns and when the price
    falls, the entity buys back the same number of shares, thus making a profit on
    the price difference. This is to be contrasted with going long where there is
    gain when the price of an asset rises. Traditionally, an entity makes profit through
    the ‘buy low, sell high’ principle. In contrast, a short seller makes profit through
    the ‘sell high, buy low’ principle.
  prefs: []
  type: TYPE_NORMAL
- en: Short selling can be done by speculators who might consider an instrument to
    be presently overvalued and expect the price to come down. Short positions are
    also utilised by portfolio managers who may hedge a long position by a short position.
  prefs: []
  type: TYPE_NORMAL
- en: In the context of options, an entity selling either a call or a put option has
    a short position. The owner of a call option has the right to buy the underlying
    asset at the strike price on a future date. Suppose an entity sells a call option
    without owning the underlying asset. If the market price of the asset falls below
    the strike price, then the option expires out of money and the owner of the call
    option does not exercise the option. So, the entity which sold the call option
    obtains the premium for the option without owning the underlying asset. Conversely,
    the owner of a put option has the right to sell the underlying asset at the strike
    price on a future date. Suppose an entity sells a put option. If the market price
    of the asset stays above the strike price, then the put option expires out of
    money and the option becomes worthless. In this case, the entity which sold the
    put option obtains the premium for the option without actually having to buy the
    asset. For both the cases, the entity with a short position on the option potentially
    makes a profit without actually owning the underlying asset.
  prefs: []
  type: TYPE_NORMAL
- en: Short selling on the currency market can appear to be different from that for
    securities. Currencies are traded in pairs. Consider US dollar and euros. On a
    certain date, a short seller borrows *x* euros and exchanges it for *y* US dollars.
    Suppose that the next day, the price of euros depreciate with respect to the dollar.
    Then using the *y* dollars, the short seller can purchase *z* euros, where *z*
    > *x*. It returns the borrowed *x* euros and makes a profit of (*z* − *x*) euros
    minus the cost of borrowing.
  prefs: []
  type: TYPE_NORMAL
- en: '*Long*: An entity having a long position in an asset means that the entity
    owns a positive amount of the asset. There is a gain if the price of the asset
    increases. This is the conventional concept of investing. An entity buys a certain
    amount of the asset. If the price of the asset goes up, the entity stands to gain,
    while if the price goes down, then the entity potentially loses.'
  prefs: []
  type: TYPE_NORMAL
- en: For options, an entity goes long on an asset by buying either call or put options
    on the asset. For a call option, the entity obtains the right to buy the asset
    at the strike price. If the market price of the asset rises above the strike price,
    then the entity can exercise the option to buy the asset at the strike price and
    sell it on the market, thus making a profit (after discounting the premium for
    buying the option). For a put option, the entity obtains the right to sell the
    asset at the strike price. If the market price of the asset falls below the strike
    price, then the entity can exercise the option by buying from the market and selling
    at the strike price. This again provides a profit after discounting the premium
    paid for purchasing the option. In both cases, to make a profit, the entity with
    the long position on the option is required to own the underlying asset at some
    point of time.
  prefs: []
  type: TYPE_NORMAL
- en: 11.3 Order Book
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In any trading system, traders provide two broad classes of orders, namely,
    buy orders and sell orders. A trading system such as an exchange maintains an
    order book. Such an order book is essentially a list of orders made by traders
    on the various kinds of financial instruments. Information in an order book is
    available to the traders which allows them to make better-informed trades.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each individual order contains at least the following information: the particular
    security to which the order pertains, whether the order is to buy or to sell,
    the quantity and possibly also the price at which the trader is willing to buy
    or sell. Additionally, there should be some way whereby the system can relate
    to the trader who placed the order even if the actual identity of the trader is
    obscured as in a dark pool. Orders placed can also be cancelled subject to some
    restrictions.'
  prefs: []
  type: TYPE_NORMAL
- en: The minimum allowed difference in two quoted prices is called a *tick*. So,
    two orders at two different prices are certainly one tick apart. The actual value
    of the tick may be decided by the trading venue. A *price level* refers to several
    orders which are quoted at the same price. For example, there could be multiple
    sell orders at the same price level. If a bid (or buy order) comes at that level,
    then potentially all the sell orders can be fulfilled. Two price levels are necessarily
    at least one tick apart.
  prefs: []
  type: TYPE_NORMAL
- en: '*Market depth* of a security refers to the various price levels for the security.
    It is provided as a list of the price levels and the total quantity that is to
    be traded at each price level. Intuitively, market depth refers to the size of
    the order that is needed to move the market price by a specified amount. A deep
    market maintains a stable price. In this sense, market depth is related to the
    notion of liquidity.'
  prefs: []
  type: TYPE_NORMAL
- en: Since orders are entered in the order book, the book depth refers to the number
    of price levels of a security. The trading venue may choose to maintain the order
    book to a pre-specified level, and all orders beyond that level are ignored. Alternatively,
    unlimited book depth may also be allowed.
  prefs: []
  type: TYPE_NORMAL
- en: For any security, the highest price at which a trader is willing to buy (the
    highest bid) and the lowest price at which a trader is willing to sell (the lowest
    ask) are called the top of the book. The difference between the highest bid and
    the lowest ask is called the bid-ask spread of the order book. This is an important
    measure of the market for the security.
  prefs: []
  type: TYPE_NORMAL
- en: 11.4 Order
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At a very broad level, an order is either a buy or a sell order. Modern trading
    systems allow a variety of order types. In this section, we briefly mention a
    few such types.
  prefs: []
  type: TYPE_NORMAL
- en: Before proceeding we mention a few terminological issues. Whenever possible,
    an exchange executes an order. This task of executing an order is also variously
    called filling an order or satisfying an order.
  prefs: []
  type: TYPE_NORMAL
- en: The simplest order is a *market order*. Such an order specifies the quantity,
    but not the price. It is to be immediately fulfilled at the best available market
    price whenever there are willing counterparties. For example, a buy market order
    is fulfilled at the lowest ask price and a sell market order is fulfilled at the
    highest bid price. It is to be noted that in modern markets, prices may change
    very fast. Since a market order does not specify a price, it may get fulfilled
    at quite a different price from the price which was available before the order
    was entered. A market order by a trader may be split across multiple counterparties
    resulting in different prices for different quantities of the asset. Since a market
    order is the simplest of all types of orders, they are charged the least amount
    of commission by brokers.
  prefs: []
  type: TYPE_NORMAL
- en: '*Limit orders* are one step up in complexity from market orders. A limit order
    specifies the quantity and the price indicating that the trade for the quantity
    is to be made at the specified or better price. So, a buy limit order can be fulfilled
    by purchasing at the specified or lower price, while a sell limit order can be
    fulfilled by selling at the specified or higher price. If the order book contains
    matching orders at the specified or better prices, then a limit order can be satisfied
    right away. Otherwise, the limit order is entered into the order book queue and
    has to wait for matching orders. It is allowed to partially fulfill a limit order,
    and the order for the remaining quantity is entered into the order book.'
  prefs: []
  type: TYPE_NORMAL
- en: Market and limit orders are the two basic types of orders. These can be further
    qualified with other conditions giving rise to a variety of orders. Below we briefly
    mention a few of these.
  prefs: []
  type: TYPE_NORMAL
- en: '*Fill or Kill (FOK):* The orders are either to be filled completely or cancelled.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Immediate or Cancel (IOC):* The orders are to be executed immediately or cancelled.
    Unlike FOK, partial fulfillment is allowed.'
  prefs: []
  type: TYPE_NORMAL
- en: '*All or Nothing (AON):* Either the order is filled completely or not at all.
    Partial fulfillment is not allowed. Unfilled AON orders are not cancelled.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Market on Open (MOO), Market on Close (MOC), Limit on Open (LOO), Limit on
    Close (LOC):* Some exchanges hold an auction at the opening and at the closing
    times. An MOO order is a market order which is guaranteed to obtain the opening
    price of the auction, while an MOC is guaranteed to obtain the closing price of
    the auction. LOO and LOC are limit orders which are similar to MOO and MOC, respectively,
    with the difference that these orders specify a price and are filled only if the
    opening and the closing prices match the specified price.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Stop Order:* This is an order to transact a trade when the market price reaches
    a specified price. Once the specified price is reached, the stop order becomes
    a market order. So, the trade will definitely take place (subject to availability
    of a counterparty) even if the price changes adversely with respect to the stop
    order price.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Mid-Price Peg:* Such an order specifies a limit price which is the average
    of the best bid and the best offer prices.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Market-if-Touched:* Trade is to be conducted at the best available price if
    the market price reaches a specified ‘if touched’ level. As soon as the trigger
    price is reached, the order is treated as a market order.'
  prefs: []
  type: TYPE_NORMAL
- en: '*One Cancels Other:* This is a pair of orders for two instruments. If one of
    the orders is executed, then the other order stands cancelled.'
  prefs: []
  type: TYPE_NORMAL
- en: '*One Sends Other:* This specifies a cascade of orders. If the first order is
    executed, then the next one is triggered. The orders are executed sequentially.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Bracket Order:* Groups together several orders. For example, a bracketed sell
    order consists of three orders: a short sell limit order at a specified price,
    a buy stop order above the entry price of the sell order and a buy limit order
    below the entry price.'
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to specify display instructions. For example, an all-or-nothing
    buy limit order can instruct to buy if another trader is selling the full quantity
    of the order at the specified price, but, otherwise, not to display the order.
    An iceberg order displays only a small part of the order and leaves a large portion
    of the order undisplayed.
  prefs: []
  type: TYPE_NORMAL
- en: As the above indicates, there is a large variety of orders. Depending on the
    market conditions, not all entered orders can be filled at once. Therein comes
    the question of prioritising the orders. Generally, the simplest orders receive
    the highest priority. So, market orders are the first to be filled followed by
    limit orders. More complex orders receive lower priority. Also, iceberg and dark
    pool orders receive lower priority.
  prefs: []
  type: TYPE_NORMAL
- en: 11.5 Order Matching Algorithms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Orders are entered by traders and are stored in the order book of an exchange.
    Buy and sell orders which match have to be identified and the corresponding trade
    gets fulfilled. These are done using order matching algorithms. In this section,
    we provide an overview of basic order matching algorithms. This discussion is
    based on Janeček and Kabrhel (2007).
  prefs: []
  type: TYPE_NORMAL
- en: Exchanges match orders in two forms, namely continuous and auction. Auctions
    are conducted at the opening and closing times of the exchange, while continuous
    matching is done for the rest of the time that the exchange is open.
  prefs: []
  type: TYPE_NORMAL
- en: Exchanges begin to accept opening orders quite a while before the actual opening
    of the exchange. These orders can be both buy and sell orders and are publicly
    displayed. Based on the displayed orders, traders can cancel previous orders and
    enter new ones. A short time before the opening, orders are no longer allowed
    to be cancelled. Once the exchange opens, a multi-seller and multi-buyer auction
    is carried out to satisfy the opening orders. This sets the opening prices of
    the various securities that are traded on the exchange. A similar auction is carried
    out at the closing time of the exchange which sets the closing prices of the securities.
    These closing prices become the basis for the opening prices of the next day's
    opening auction.
  prefs: []
  type: TYPE_NORMAL
- en: During the day, exchanges perform continuous matching. Market orders are immediately
    fulfilled subject to availability of counterparty traders. Next in preference
    comes the limit orders. Suppose at some point of time, there are *n* limit orders
    for quantities *T* 1,…,*T* [*n*] at the same price level and that there is a counterparty
    trade of *W* quantities with a matching price. Let *T* = *T* 1 + ⋯ + *T* [*n*]
    . If *W* ≥ *T*, then all the *n* limit orders can be satisfied and there is no
    problem. So, suppose *W* < *T*. Then all the *n* orders cannot be completely satisfied.
    There are two methods for handling such a situation, which we describe below.
  prefs: []
  type: TYPE_NORMAL
- en: '*Pro-rata matching*: For *i* = 1,…,*n*, let *s* [*i*] = *T* [*i*] /*T*. From
    the incoming trade of *W* quantities, the quantity alloted to the *i*-th order
    is ![inline-image](../images/CH011_1.jpg), where ![inline-image](../images/CH011_2.jpg)
    is the floor function (i.e. ![inline-image](../images/CH011_3.jpg) is the highest
    integer which is not greater than *x*). So, out of the *W* quantities, a total
    of *S* = *S* 1 + ⋯ + *S* [*n*] ≤ *W* quantities are used. The remaining *W* −
    *S* quantities still need to be alloted. One option would be to allot these using
    the first come, first served (i.e. queue) principle. Depending on the values of
    *s* [*i*] and *W*, it may turn out that *S* [*i*] = 0\. Then the *i*-th order
    does not obtain any allocation in the first round. The remaining *W* − *S* quantities
    may be used to allot to such orders using a first come, first served principle
    in case *W* − *S* is less than the number of unfilled orders in the first round.
    This strategy helps smaller traders.'
  prefs: []
  type: TYPE_NORMAL
- en: Overall, the pro-rata algorithm motivates the placing of larger orders since
    this increases the chances of the order being filled. It does not directly motivate
    to reduce the bid-ask spread.
  prefs: []
  type: TYPE_NORMAL
- en: '*Price/time algorithm*: This algorithm finds the minimum *j* such that *T*
    1 + ⋯ + *T* *j* ≤ *W* and *T* 1 + ⋯ + *T* *j*+1 > *W*. The first *j* orders are
    satisfied in full. If *j* + 1 ≤ *n*, then the possibly remaining *W* − (*T* 1
    + ⋯ + *T* *j* ) quantities are alloted to the (*j* + 1)-th order.'
  prefs: []
  type: TYPE_NORMAL
- en: The price/time algorithm motivates traders to place their orders early. This
    helps in narrowing the bid-ask spread. Once a queue is formed, traders are unlikely
    to join the queue since their orders have a low chance of being filled.
  prefs: []
  type: TYPE_NORMAL
- en: 11.6 Algorithmic Trading
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Trading requires making decisions. These decisions are multi-faceted involving
    several issues such as whether to buy or sell, which security to trade in and
    at what price, when to trade, what kind of order is to be placed. If a trader
    has access to multiple trading exchanges (or platforms), then another dimension
    would be the choice of the trading platform.
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, all such decisions were taken by humans. One person, or a group
    of persons, would analyse all relevant information and then take the appropriate
    decision. The decisions may be communicated in electronic form and also they could
    be implemented using dedicated servers.
  prefs: []
  type: TYPE_NORMAL
- en: Over the last few decades, computers have increasingly begun to take the trade
    decisions themselves. An automated trading software will process information available
    in electronic forms and based on such information takes appropriate trade decisions.
    The trade decisions will be communicated in electronic form to the trading platform
    and digitally executed. Human intervention is not required at any stage of operation.
    Broadly speaking, this way of conducting trade is called algorithmic trading.
    Of course, algorithmic trading is not completely free of human involvement. The
    role of human beings is restricted to developing and testing the trading software
    as also regularly tuning its parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Algorithmic trading is employed by two different groups of traders. Institutional
    investors such as investments banks, pension funds, mutual funds and hedge funds
    have a specific goal for using algorithmic trading. Such investors usually place
    large orders which cannot be satisfied at once. Also, placing a large order might
    move the price in the opposite direction. So, large orders are broken into small
    orders and sent to the market. The decisions related to the order sizes and when
    they are to be placed are taken by a software based on one of several strategies.
    In this kind of application of algorithmic trading, the goal is not necessarily
    to make a big trading profit. Rather, it is a way to reduce market impact and
    lower the cost and risk.
  prefs: []
  type: TYPE_NORMAL
- en: Speculative traders also utilise algorithmic trading. In this case, the goal
    is indeed to make as much profit as possible. Broadly speaking, this involves
    exploiting market imbalances and imperfections to make profitable trades. A basic
    characteristic of such trades is speed. Since market imperfections occur for a
    very short duration, any method for exploiting such imperfections must be fast.
    Algorithmic trading with such aims is called *high frequency trading*.
  prefs: []
  type: TYPE_NORMAL
- en: To enable high speed, a primary requirement is obtaining market information
    very fast. The time between data being generated in a trading platform and these
    being available to a trader is called the latency. So, a goal is to lower this
    latency. For this purpose, ultra-low latency direct market access (ULLDMA) technology
    is employed. Further, traders also aim to locate their trading software very close
    to the market so that the information has to travel a shorter distance. This feature
    is called co-location.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from high speed communication, fast computers are required to take the
    appropriate decisions. The decisions themselves could be simple or they could
    even be quite complex involving market models and stochastic control theories.
    Trading decisions are outputs of some algorithm. In the context of high frequency
    trading, the decision-making algorithms themselves must be very fast. If an algorithm
    comes up with an optimal trade decision, but takes time more than the profitable
    trade window that is available, then such an algorithm will not be useful for
    high frequency trading.
  prefs: []
  type: TYPE_NORMAL
- en: An algorithmic trading software (whether for institutional traders or for high
    frequency trading) goes through several cycles of testing. The first kind of testing
    is called backtesting. This involves running the software on historical data to
    uncover possible bugs, inefficiencies and also to determine its efficacy in increasing
    returns. Another kind of testing is called forward testing. This involves simulated
    trading with real-time market data. The final testing involves live testing where
    the actual performance of the software is compared against the backtested and
    forward tested results. There are various metrics to evaluate an algorithmic trading
    software. Only if a software fares well on these metrics is it deployed for actual
    trade. High frequency trading involves making very fast trade decisions on a lot
    of money. A small mistake or bug can very quickly wipe out a huge amount of funds.
    So, traders employ very stringent evaluation conditions before actually using
    a software for trading.
  prefs: []
  type: TYPE_NORMAL
- en: 11.7 Efficient Market Hypothesis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A basic question in investing is whether it is possible to ‘beat the market’,
    i.e. buy and sell financial instruments resulting in making more money than the
    market average? For beating the market a person may perform various kinds of analysis.
    Such analysis could be to analyse past stock market prices and come out with predictions
    for the future. This is usually called technical analysis. Another type of analysis,
    called fundamental analysis, would be to analyse the financial statements (assets,
    liabilities and earnings) of a business, its health and competitors as well as
    various other publicly available information such as interest rates or the GDP
    of a country.
  prefs: []
  type: TYPE_NORMAL
- en: The Efficient Market Hypothesis (EMH) states that prices fully reflect all available
    information. If the EMH is true, then there is no way to consistently beat the
    market. The only way to ensure higher returns is to invest in riskier instruments.
    Such investments can provide higher returns, but at the same time also has the
    potential to cause a significant loss. Assuming EMH to be true, it is better (in
    the sense of being less riskier) to invest in index funds which aim to return
    the same as the market as a whole rather than beat the market.
  prefs: []
  type: TYPE_NORMAL
- en: The EMH comes in three forms, namely weak, semi-strong and strong. The weak
    form EMH postulates that the present prices fully reflect all historical stock
    prices. The semi-strong form EMH postulates that the present prices fully reflect
    all publicly available information. The strong form EMH postulates that the present
    prices fully reflect all public *and* private information. There have been empirical
    studies to determine whether the EMH holds. Such studies indicate support for
    the weak EMH and also for the semi-strong form EMH with some small unexplained
    anomalies. Regarding the strong form EMH, there does not seem to be significant
    empirical support for this hypothesis.
  prefs: []
  type: TYPE_NORMAL
- en: An important implication of the EMH is that market prices react to only new
    information and change ‘immediately’ as new information becomes available. If
    EMH holds, then it is not possible to make risk-free profits. The goal of arbitrage,
    on the other hand, is to make risk-free (or very low risk) profits. So, if EMH
    holds, then arbitrage is not possible. Arbitrage opportunities, however, indeed
    appear and are exploited by financial experts called arbitrageurs. The explanation
    for this apparently contradictory position is that arbitrage opportunities indicate
    market inefficiencies. These are present for very small intervals of time within
    which the market corrects itself. The goal of arbitrageurs is to identify and
    exploit these small windows of market inefficiencies to make risk-free profits.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of references on basic trading concepts and market microstructures.
    Additionally, there is also a huge amount of online material that is available.
    This chapter has provided a concise summary of relevant information. In making
    the summary, we have benefitted from discussion in Johnson (2009) and Kissell
    (2013).
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Algorithmic Trading Strategies
  prefs: []
  type: TYPE_NORMAL
- en: Consider the situation where a trader wishes to buy or sell a large amount of
    a particular stock within a specific time frame. There could be various reasons
    for such a decision, such as liquidating a holding, or, re-balancing a portfolio.
    While the rationale for the trading decision is indeed important, in this chapter,
    we are not concerned with the actual reason. We will assume that the trader has
    arrived at the decision and consider the problem of how to *implement* the trade.
  prefs: []
  type: TYPE_NORMAL
- en: If the stock is very liquid (with respect to the size of the trade), then there
    is no problem. The entire buy or sell can be conducted as a single order. This,
    however, is rarely the case when the size of the trade is large. A large volume
    of trade usually moves the price in an adverse direction. In other words, if a
    large number of shares are to be purchased, this pushes up the price of the share,
    and conversely, if a large number of shares are to be sold, then this pushes down
    the price of the share. Consequently, for a buy order, the trader ends up paying
    more, while for a sell order, the trader ends up getting less. So, conducting
    the entire trade as a single order will have an adverse market impact, resulting
    in a sub-optimal return for the trader.
  prefs: []
  type: TYPE_NORMAL
- en: The above discussion suggests that the trader will be better off by splitting
    the single order into several child orders. This brings up the question of how
    to obtain the sizes of the child orders and also when to trade them. A related
    important question is evaluating the efficacy of a particular trading strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Various algorithmic trading strategies have been devised to address the above
    problem. Note that the goal of such a strategy is not necessarily to maximise
    profit, rather to minimise the market impact. In this chapter, we take a look
    at some of the basic algorithmic trading strategies that have been proposed.
  prefs: []
  type: TYPE_NORMAL
- en: 12.1 Time Weighted Average Price
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Suppose a trader decides to buy (or sell) *S* shares within a specified period
    of time. As discussed above, when *S* is large, placing a single order for the
    *S* shares will move the price in an adverse direction. The simplest strategy
    for the trader would be the following. Divide the specified time period into *n*
    sub-intervals and place a child order for *S*/*n* shares in each sub-interval.
  prefs: []
  type: TYPE_NORMAL
- en: A simple performance benchmark is the time weighted average price (TWAP). For
    each interval, the average price is determined as the average of the opening,
    closing, high and low prices in that interval. The average of these averages over
    the *n* sub-intervals is the TWAP for the trading duration. The performance of
    the actual trade is assessed by comparing the price with the TWAP. In fact, a
    goal of placing equal size child orders at equal intervals is to achieve the TWAP.
  prefs: []
  type: TYPE_NORMAL
- en: The simple strategy of placing equal size orders at equal intervals of time
    is completely predictable to traders who are closely watching the market. In fact,
    such a trading strategy can also be discovered by an algorithm. This strategy
    can be exploited by another trader. Suppose that a child limit order is placed
    to buy 1,000 shares at $10 per share. Another trader who has been tracking these
    smaller orders places a buy limit order for 500 shares at $10.01 per share. If
    the market price reaches $10.01 and then rises, then this trader makes a profit;
    if the market price drops below $10.01, then this trader sells off the shares
    it purchased at $10.01 at $10.00, making a loss of 1 cent per share. So, there
    is a possibility of making a profit at a very low risk. Such a strategy is sometimes
    called penny jumping.
  prefs: []
  type: TYPE_NORMAL
- en: A simple time splitting strategy is vulnerable to the above kind of issue. So,
    modifications have been introduced to this trading strategy. Such modifications
    involve placing the child orders at random looking time points rather than at
    regular intervals and further, the size of all the child orders are not necessarily
    equal. The goal would still be to achieve a price which is close to the TWAP.
  prefs: []
  type: TYPE_NORMAL
- en: 12.2 Volume Weighted Average Price
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The volume weighted average price (VWAP) is another performance benchmark.
    Here the volume refers to the size of an order. Suppose *n* child orders of sizes
    *S* 1,…,*S* [*n*] were placed, where *S* = *S* 1 + ⋯ + *S* [*n*] is the total
    size of all the child orders. Suppose order *S* *k* traded at price *p* *k* .
    Then the VWAP for the order is defined to be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_1.jpg)(12.1)'
  prefs: []
  type: TYPE_IMG
- en: For a VWAP, it is not required that the child orders be placed at regular intervals.
    The above definition holds even if the child orders are placed at uneven intervals.
  prefs: []
  type: TYPE_NORMAL
- en: Note that like the TWAP, the VWAP is a performance benchmark which can be computed
    after the entire trade is completed. So, the benchmark by itself does not suggest
    how to obtain the sizes *S* 1,…,*S* [*n*] of the child orders. In practice, the
    VWAP algorithm uses historical trading data to obtain an estimate *u* *k* of the
    fraction of trading volume that is likely to be conducted in the trading period
    *k*. Then the volume *S* *k* of the *k*-th child order is set as *S* *k* = *u*
    *k* *S*.
  prefs: []
  type: TYPE_NORMAL
- en: The effectiveness of the method depends on the accuracy of the estimates *u*
    1,…,*u* [*n*] . Perhaps, more importantly, trading on a particular day needs to
    follow the historical pattern. So, a VWAP algorithm which blindly uses historical
    data may end up making a loss. It is important for such algorithms to also track
    the movements of both price and the total volume of the shares that is being traded.
    Based on such information, it may dynamically adjust the volume of the child orders
    over and above the volume that is dictated by historical data.
  prefs: []
  type: TYPE_NORMAL
- en: 12.3 Percentage of Volume
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The goal of a percentage of volume (PoV) strategy is to try and ensure that
    the size of a child order is equal to a certain pre-specified percentage (say
    *γ*) of the total trading volume. Suppose that the total volume of the shares
    that has been traded (by all traders) up to the *k*-th time interval is *X* *k*
    . The value of *X* *k* is known from trading data available on the exchange. Let
    *S* *k* be the size of the child order to be placed in the *k*-th time interval.
    To achieve a PoV of *γ*, we must have
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_2.jpg)(12.2)'
  prefs: []
  type: TYPE_IMG
- en: Like the VWAP, it is not required for the child orders of PoV to be placed at
    regular time intervals. The only issue is that whenever a child order is to be
    placed, the size of the child order is computed using the above formula. The time
    points for placing the child orders could be based on additional information.
  prefs: []
  type: TYPE_NORMAL
- en: 12.4 Participation of Weighted Price
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The PWP is a combination of the PoV and the VWAP. Suppose that the desired PoV
    is *γ*. The trader places a sequence of child orders *S* 1,…,*S* [*n*] of total
    size *S* = *S* 1 + ⋯ + *S* [*n*] . Consider the time duration starting from the
    placing of the first child order till a total of *S*/*γ* shares have been traded
    on the exchange. The participation weighted price (PWP) is the VWAP of the first
    *S*/*γ* shares that has been traded on the market since the first child order
    was placed.
  prefs: []
  type: TYPE_NORMAL
- en: The PWP is also a benchmark that is used in post-trade analysis. The rationale
    for this benchmark is that if the trader had traded *S* shares with PoV *γ*, then
    the trade would have ended when the first *S*/*γ* shares were traded on the market.
    So, it makes sense to look at the VWAP arising from the trades of the first *S*/*γ*
    shares.
  prefs: []
  type: TYPE_NORMAL
- en: 12.5 Bertsimas–Lo Dynamic Programming Strategy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Suppose that a total of *S* shares are to be bought. As before, *n* child orders
    are placed where the *k*-th order is of size *S* *k* . In this section, we assume
    that ![inline-image](../images/CH012_3.jpg), i.e. the entire trade of *S* shares
    is completed in the *n* child orders. The question that we address is how to determine
    the values of *S* 1,…,*S* [*n*] such that the trade is optimal in some sense.
    An answer to this question was given by Bertsimas and Lo (1998) using dynamic
    programming. Following them, we have posed the question in terms of the *S* shares
    to be purchased. The description can be easily modified to handle the scenario
    where *S* shares are to be sold.
  prefs: []
  type: TYPE_NORMAL
- en: 'The price of a share is a random variable. Suppose the *k*-th share is purchased
    at a price of *P* *k* per share, *k* = 1,…,*n*. Then the total expenditure on
    the trade is ![inline-image](../images/CH012_4.jpg). Since the *P* *k* s are random
    variables, the total expenditure is also a random variable. So, an optimality
    goal would be to minimise the expected value of the total expenditure. This problem
    is formulated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_5.jpg)(12.3)'
  prefs: []
  type: TYPE_IMG
- en: 'subject to the constraint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_6.jpg)(12.4)'
  prefs: []
  type: TYPE_IMG
- en: For *i* = *k*,…,*n* + 1, we define *W* *k* to be the number of shares that remain
    to be purchased at the beginning of the *k*-th child order. So,
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_7.jpg)(12.5)'
  prefs: []
  type: TYPE_IMG
- en: From the definition, it follows that *W* [*n*] = *S* [*n*] , since the number
    of shares that remain to be purchased at the beginning of the last child order
    is equal to the number of shares purchased in the last child order (under the
    previously mentioned assumption that the purchase of all the *S* shares are completed
    through the *n* child orders).
  prefs: []
  type: TYPE_NORMAL
- en: The price dynamics needs to be modelled. The price *P* *k* is considered to
    be a random variable which depends on the previous price *P* *k*−1, the size of
    the *k*-th child order *S* *k* (this captures the market impact of the *k*-th
    child order), a random noise *ε* *k* and a state vector **X** *k* . The state
    vector **X** *k* captures multiple extraneous factors which may influence the
    price. The vector **X** *k* itself is also considered to be a function of the
    previous state vector **X** *k*−1 and a random noise *η* *k* . This situation
    is described formally as follows. For *k* = 1,…,*n*,
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_8.jpg)(12.6)'
  prefs: []
  type: TYPE_IMG
- en: For *k* = 1,…,*n*, *ε* *k* and *η* *k* are independent white noise processes
    with zero mean. The price *P* 0 is taken to be some arrival price, while the state
    vector **X** 0 is taken to be some initial information. Note that the functions
    *f* *k* and *g* *k* determining the evolution of the price *P* *k* and the state
    vector **X** *k* can vary with *k*. So, these model the time varying nature of
    the price and state evolution.
  prefs: []
  type: TYPE_NORMAL
- en: The problem formulated in [(12.3)](#eq3) subject to the constraint [(12.4)](#eq4),
    under the price dynamics given by [(12.6)](#eq6), can be solved using techniques
    of stochastic dynamic programming. The basic observation is that an optimal solution
    ![inline-image](../images/CH012_9.jpg) must also be optimal for the remaining
    trading for each intermediate point *k*. In other words, if ![inline-image](../images/CH012_10.jpg)
    is an optimal trading strategy for the entire trade over *n* time periods, then
    for each *k* with 1 < *k* < *n*, ![inline-image](../images/CH012_11.jpg) must
    still be optimal, i.e. ![inline-image](../images/CH012_12.jpg) must minimise ![inline-image](../images/CH012_13.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: The dynamic programming formulation is based on this observation. The Bellman
    equation is obtained as follows. For *k* = 1,…,*n* − 1, let
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_14.jpg)(12.7)'
  prefs: []
  type: TYPE_IMG
- en: and ![inline-image](../images/CH012_15.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: Recall that from the definition of *W* [*k*] , we have ![inline-image](../images/CH012_16.jpg).
    Consider the Bellman equation for *n* − 1, i.e.
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_17.jpg)(12.8)'
  prefs: []
  type: TYPE_IMG
- en: The optimal value ![inline-image](../images/CH012_18.jpg) which minimises [(12.8)](#eq8)
    is a function *h* *n*−1 of *P* *n*−2, **X** *n*−1 and *W* *n*−1\. So,
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_19.jpg)(12.9)'
  prefs: []
  type: TYPE_IMG
- en: Proceeding in the backward direction,
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_20.jpg)(12.10)'
  prefs: []
  type: TYPE_IMG
- en: So, the optimal value ![inline-image](../images/CH012_21.jpg) is a function
    of *P* *n*−*k*−1, **X** *n*−*k* and *W* *n*−*k* , i.e.
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_22.jpg)(12.11)'
  prefs: []
  type: TYPE_IMG
- en: Putting *k* = *n* − 1, we have
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_23.jpg)(12.12)'
  prefs: []
  type: TYPE_IMG
- en: Note that *W* 1 = *S*. Using this, one can work in the forward direction to
    obtain the expressions for the optimal values.
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While the approach is theoretically sound, the problem arises in solving [(12.10)](#eq10)
    to obtain the solution ![inline-image](../images/CH012_25.jpg). In general, *V*
    *n*−*k* (·) may not have a closed form expression and even if it does, there may
    not be analytical methods to solve it for ![inline-image](../images/CH012_26.jpg).
    Instead, numerical approaches are adopted to obtain the optimal values.
  prefs: []
  type: TYPE_NORMAL
- en: 'A special case which is of interest is when the price dynamics follow a particularly
    simple model. The functions *f* 1,…,*f* [*n*] are all taken to be the same and
    further, this common function is of the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: for some *θ* > 0\. In other words, the price *P* *k* depends linearly on the
    previous price and the size of the *k*-th child order. The parameter *θ* captures
    the market impact of the order. For this simple price model, following the general
    argument outlined above, it can be shown that the optimal solution is ![inline-image](../images/CH012_28.jpg),
    i.e. the optimal strategy is to purchase equal number of shares in each time period.
  prefs: []
  type: TYPE_NORMAL
- en: 12.6 Implementation Shortfall
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Suppose a total of *S* shares are to be traded. The trading plan results in
    the execution of *n* child orders with the *k*-th order consisting of *S* *k*
    shares. In general, ![inline-image](../images/CH012_29.jpg). If ![inline-image](../images/CH012_30.jpg),
    then all the *S* shares were traded, while if ![inline-image](../images/CH012_31.jpg),
    then ![inline-image](../images/CH012_32.jpg) shares could not be traded.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose, the arrival price of a share is *p* 0, i.e. this is the price when
    the trading plan is put into execution. The child order *S* *k* is traded at price
    *p* [*k*] , for *k* = 1,…,*n*. Note that the first child order was traded at price
    *p* 1 which could be different from the arrival price *p* 0\. The final price
    that was obtained for the last child order is *p* [*n*] .
  prefs: []
  type: TYPE_NORMAL
- en: The execution of the trading strategy has a cost. Implementation shortfall (IS)
    is an attempt to capture the cost of executing a trading strategy. In its basic
    form, IS is the difference between the paper return and the actual return, i.e.
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_33.jpg)(12.13)'
  prefs: []
  type: TYPE_IMG
- en: The paper return is the difference in value of the entire lot of *S* shares
    between the arrival price *p* 0 and the final price *p* [*n*] , i.e.
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_34.jpg)(12.14)'
  prefs: []
  type: TYPE_IMG
- en: 'The actual return is based on the amount of shares that is actually traded
    which is ![inline-image](../images/CH012_35.jpg). At the final price, the value
    of *S′* shares is *S′p* [*n*] . The price that is actually paid is ![inline-image](../images/CH012_36.jpg).
    Also, there is a cost *C* which covers the various fees that is incurred for the
    trades. The actual return is computed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_37.jpg)(12.15)'
  prefs: []
  type: TYPE_IMG
- en: Using [(12.14)](#eq14) and [(12.15)](#eq15) in [(12.13)](#eq13) we have
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_38.jpg)(12.16)'
  prefs: []
  type: TYPE_IMG
- en: The first component of [(12.16)](#eq16) is the execution cost of the *S′* shares
    that is actually traded, while the second component of [(12.16)](#eq16) is the
    opportunity cost of the *S* − *S′* shares for which the trade could not be completed.
    If all the *S* shares could be traded, then *S′* = *S* in which case the opportunity
    cost is 0 and the implementation shortfall consists only of the execution cost
    and the fees.
  prefs: []
  type: TYPE_NORMAL
- en: 12.7 Almgren–Chriss Efficient Trading Frontier
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The goal of designing a trading strategy is to ensure some kind of optimality.
    The Bertsimas-Lo dynamic programming strategy minimises the expected cost of trading.
    Another approach to designing trading strategies is to work with the implementation
    shortfall. Since the price is a random variable, the implementation shortfall
    is also a random variable. The Almgren–Chriss approach considers the expectation
    and the variance of the implementation shortfall. The approach is to fix a level
    of variance for the implementation shortfall and among all strategies which achieve
    this variance, obtain one which minimises the expected value of the implementation
    shortfall. Since the variance measures the risk of the trading strategy, this
    approach can be seen as a risk-averse trading strategy.
  prefs: []
  type: TYPE_NORMAL
- en: We provide a description of the Almgren–Chriss method in the context where *S*
    units of a security are to be sold within time *T*. The time *T* is divided into
    *n* equal sized time intervals where the length of each interval is *τ* = *T*/*n*.
    Let *t* *k* = *kτ*, *k* = 0,…,*n* be discrete time points. For *k* = 1,…,*n*,
    the *k*-th interval is marked by the beginning time point *t* *k*−1 and the ending
    time point *t* *k* . The number of units sold in *k*-th interval is *S* *k* .
    We assume that ![inline-image](../images/CH012_39.jpg), i.e. the entire holding
    of *S* units of security is completely liquidated within time *T*.
  prefs: []
  type: TYPE_NORMAL
- en: For *k* = 0,…,*n*, let *X* *k* be the number of units which remain to be sold
    at time point *t* *k* . So, *X* 0 = *S* and *X* [*n*] = 0\. Since the number of
    units sold in the *k*-th time period is *S* [*k*] , we have *S* *k* = *X* *k*−1
    − *X* *k* . Consequently, for *k* = 0,…,*n*,
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_40.jpg)(12.17)'
  prefs: []
  type: TYPE_IMG
- en: 'To obtain the implementation shortfall, it is required to model the price dynamics.
    The price of the security is determined by two broad kinds of effects, namely
    factors which are not related to the trade and factors which are related to the
    trade. The former is modelled using volatility and drift, while the latter is
    modelled using market impact. The market impact is further sub-classified into
    two types, one which is permanent across the entire trade of the *S* units and
    another which is temporary and has effect only in the *k*-th interval. A model
    of price considered by Almgren and Chriss is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: For *k* = 0,…,*n*, let the price at the *k*-th time point be *P* *k* . Then
    for *k* = 1,…,*n*, *P* *k* is assumed to follow the discrete arithmetic random
    walk given as
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_41.jpg)(12.18)'
  prefs: []
  type: TYPE_IMG
- en: In [(12.18)](#eq18), *τ* is the length of the time interval, *σ* is the measure
    of volatility of the security and there is no drift term. The *ξ* *k* ’s are independent
    random variables with zero mean and unit variance. The permanent market impact
    of the trading is modelled by the function *g*(*v*), where *v* = *S* *k* /*τ*
    is the average rate of trading in the *k*-th interval.
  prefs: []
  type: TYPE_NORMAL
- en: Let
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From [(12.18)](#eq18), it follows that for *k* ≥ 1,
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_43.jpg)(12.19)'
  prefs: []
  type: TYPE_IMG
- en: The price *P* *k* given by [(12.18)](#eq18) is not obtained. The actually obtained
    price is ![inline-image](../images/CH012_44.jpg) which is obtained from *P* *k*−1
    after discounting for the temporary market impact. So,
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_45.jpg)(12.20)'
  prefs: []
  type: TYPE_IMG
- en: In [(12.20)](#eq20), the temporary market impact is captured by *h*(·). The
    value of *h*(*S* *k* /*τ*) influences the price in the *k*-th interval, but does
    not affect the price in other intervals. The temporary price impact in these intervals
    is captured by evaluating *h*(·) on the average rate of trading in these intervals.
    Note that the form of the temporary impact function *h*(·) is assumed to be the
    same for all the intervals. This, however, is not a limitation and can be suitably
    relaxed.
  prefs: []
  type: TYPE_NORMAL
- en: The appropriate forms of the functions *g* and *h* are determined by the model
    of the market microstructure. Given these forms, it may be necessary to use numerical
    rather than analytical methods to perform various computations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The cost of trading is ![inline-image](../images/CH012_46.jpg). Using [(12.17)](#eq17),
    [(12.18)](#eq18), [(12.19)](#eq19) and [(12.20)](#eq20), ![inline-image](../images/CH012_47.jpg)
    simplifies as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Substituting the expression for *δ* [*k*] , we have
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_49.jpg)(12.21)'
  prefs: []
  type: TYPE_IMG
- en: The effective cost of trading considered by Almgren and Chriss is the difference
    between the initial paper value and the actual return, i.e.
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_50.jpg)(12.22)'
  prefs: []
  type: TYPE_IMG
- en: '![display-image](../images/CH012_51.jpg)(12.23)'
  prefs: []
  type: TYPE_IMG
- en: The expression given by [(12.22)](#eq22) is related to the implementation shortfall
    given by [(12.16)](#eq16) where the fees are ignored and there is no opportunity
    cost since the entire holding is liquidated. Under these conditions, the expression
    given by [(12.23)](#eq23) is the implementation shortfall given by [(12.16)](#eq16).
    Formally, the expression given by [(12.22)](#eq22) is the negative of the expression
    given by [(12.16)](#eq16), but that is due to the difference in the nature of
    trading, i.e. the buying and selling of shares. The value of IS is determined
    by the trading strategy **X** = (*X* 0,…,*X* [*n*] ) (or equivalently (*S* 1,…,*S*
    [*n*] )). We write IS(**X**) to denote this dependence.
  prefs: []
  type: TYPE_NORMAL
- en: The source of randomness in [(12.23)](#eq23) is the *ξ* *k* 's which are independent
    with mean 0 and unit variance. All the other quantities are non-random. Based
    on these observations, and using linearity of expectation and the fact that the
    variance of a sum of independent variables is the sum of their variances, we obtain
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_52.jpg)(12.24)'
  prefs: []
  type: TYPE_IMG
- en: '![display-image](../images/CH012_53.jpg)(12.25)'
  prefs: []
  type: TYPE_IMG
- en: A risk-averse trader will try to ensure that the variance *V*(IS(**X**)) remains
    below a certain upper bound *V* *. Once *V* * is fixed, there could be various
    strategies which achieve this level of risk aversion. Among such strategies, a
    rational trader will choose one which minimises *E*(IS(**X**)). These considerations
    give rise to the following constrained optimisation problem.
  prefs: []
  type: TYPE_NORMAL
- en: Find an efficient trading strategy (*S* 1,…,*S* [*n*] ) such that *E*(IS(**X**))
    is minimised subject to IS(**X**) ≤ *V* *, i.e.
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_54.jpg)(12.26)'
  prefs: []
  type: TYPE_IMG
- en: 'By introducing a Lagrange multiplier *λ*, the constrained optimisation problem
    in [(12.26)](#eq26) is converted into the following unconstrained optimisation
    problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_55.jpg)(12.27)'
  prefs: []
  type: TYPE_IMG
- en: The parameter *λ* is a measure of risk aversion. It quantifies the amount by
    which the variance is penalised with respect to the expectation. If *λ* > 0, then
    *E* + *λV* is strictly convex and [(12.27)](#eq27) has a unique solution **S**
    ^*(*λ*). So, for each risk-averse value *λ*, it is possible to determine an optimal
    solution. As *λ* varies, **S** ^*(*λ*) determines a one-parameter family, thus
    determining the efficient trading frontier.
  prefs: []
  type: TYPE_NORMAL
- en: 12.7.1 Linear Impact Functions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Suppose that both the permanent and the temporary market impact functions *g*(·)
    and *h*(·), respectively, are modelled as linear functions. The function *g*(*v*)
    is taken to be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_56.jpg)(12.28)'
  prefs: []
  type: TYPE_IMG
- en: The parameter *γ* captures the market impact of the whole trade.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the *k*-th interval, *S* *k* units are traded. We have considered the problem
    of liquidation of security. More generally, the trade in the *k*-th interval could
    be either buy or sell. Let sgn(*S* *k* ) be sign of the *S* *k* . Then the linear
    model of the temporary impact function is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_57.jpg)(12.29)'
  prefs: []
  type: TYPE_IMG
- en: The parameter ε represents fixed cost and the parameter *η* captures the temporary
    market impact. (Note that *η* in [(12.29)](#eq29) is not related to the *η* *k*
    used in [(12.6)](#eq6).)
  prefs: []
  type: TYPE_NORMAL
- en: 'We apply [(12.28)](#eq28) and [(12.29)](#eq29) to the expression for *E*(IS(**X**))
    given by [(12.24)](#eq24). Note that ![inline-image](../images/CH012_58.jpg),
    ![inline-image](../images/CH012_59.jpg), and using *X* *k* = *S* *k*+1 + ⋯ + *S*
    [*n*] , we have ![inline-image](../images/CH012_60.jpg). Using these, [(12.24)](#eq24)
    simplifies to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_61.jpg)(12.30)'
  prefs: []
  type: TYPE_IMG
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_62.jpg)(12.31)'
  prefs: []
  type: TYPE_IMG
- en: 'Consider the two simple trading strategies, namely to sell at a constant rate
    and to sell the entire stock at the first time step itself. The expectations and
    the variances in the two cases are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Liquidate at a constant rate:* In this case, *S* *k* = *S*/*n* and so *X*
    *k* = (*n* − *k*)*S*/*n*. These values yield'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_63.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![display-image](../images/CH012_64.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This trading strategy minimises the expected costs, but the variance could be
    large if the period *T* is large.
  prefs: []
  type: TYPE_NORMAL
- en: '*Liquidate at the first step:* In this case, *S* 1 = *S*, *S* 2 = ⋯ = *S* [*n*]
    = 0 and so *X* 1 = ⋯ = *X* [*n*] = 0\. These values yield'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_65.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This trading strategy has the minimum variance. On the other hand, if *η* is
    large and *τ* is small, then the expected costs can be large.
  prefs: []
  type: TYPE_NORMAL
- en: We go back to the optimisation problem posed in [(12.27)](#eq27) for the linear
    market impact model. The expression for *E* in [(12.27)](#eq27) is taken to be
    the one given by [(12.30)](#eq30) and the expression for *V* in [(12.27)](#eq27)
    is taken to be the one given by [(12.25)](#eq25). We consider the problem of liquidation
    so that |*S* *k* | = *S* *k* in [(12.30)](#eq30) and the second term of [(12.30)](#eq30)
    becomes ![inline-image](../images/CH012_66.jpg). Recall that *X* 0 = *S* and *X*
    [*n*] = 0\. So, the minimisation over **X** = (*X* 0,…,*X* [*n*] ) is actually
    over the control variables *X* 1,…,*X* *n*−1\. Let
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_67.jpg)(12.32)'
  prefs: []
  type: TYPE_IMG
- en: For *λ* ≥ 0, *U*(**X**) is strictly convex. So, it is possible to determine
    the unique global minimum by setting the partial derivatives to zero. For computing
    the partial derivatives, note that *S* is a constant, so that the partial derivatives
    of the first and second terms of [(12.30)](#eq30) are 0\. Among the variables
    *S* 1,…,*S* [*n*] , only *S* *k* and *S* *k*+1 depend on *X* *k* while the others
    do not. Further, *S* *k* = *X* *k*−1 − *X* *k* and *S* *k*+1 = *X* *k* − *X* *k*+1\.
    Using these expressions, we have for *k* = 1,…,*n* − 1,
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_68.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The condition ∂*U*/∂*X* *k* = 0 provides
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_69.jpg)(12.33)'
  prefs: []
  type: TYPE_IMG
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_70.jpg)(12.34)'
  prefs: []
  type: TYPE_IMG
- en: 'The specific solution with *X* 0 = *S* and *X* [*n*] = 0 gives the value of
    *X* *k* for *k* = 0,…,*n* to be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_71.jpg)(12.35)'
  prefs: []
  type: TYPE_IMG
- en: where *κ* satisfies the relation ![inline-image](../images/CH012_72.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'From the values of *X* *k* given in [(12.35)](#eq35), it is possible to determine
    the values of *S* *k* for *k* = 1,…,*n* as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH012_73.jpg)(12.36)'
  prefs: []
  type: TYPE_IMG
- en: where *t* *k*−1/2 = (*k* − 1/2)*τ*.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the parameter *κ* is determined by the risk aversion parameter *λ*.
    So, considering linear market impact models, for a fixed value of risk aversion,
    the trading strategy which minimises the expected implementation shortfall can
    be determined and is given by [(12.35)](#eq35). The actual number of units to
    be traded in the *k*-th interval is given by [(12.36)](#eq36).
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: The description in [Section 12.5](#s5) is from Bertsimas and Lo (1998) and the
    description in [Section 12.7](#s7) is from Almgren and Chriss (2000). We refer
    to Kissell (2013) for a more detailed exposition of some of the concepts described
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Portfolio Optimisation
  prefs: []
  type: TYPE_NORMAL
- en: The term portfolio refers to a collection of financial assets such as stocks,
    bonds and options. An entity may spread its investment across the various assets
    in the portfolio. Each asset in the portfolio can potentially earn a return, and
    there is also the potential risk of running a loss. The returns of all the assets
    in a portfolio determine the overall return of the portfolio as also the risks
    of the individual assets determine the overall risk of the portfolio. So, a portfolio
    can potentially earn a return and also has an associated risk of making a loss.
  prefs: []
  type: TYPE_NORMAL
- en: Diversification of risk is a basic motivation for constructing a portfolio.
    By spreading an investment across a number of financial assets, an entity tries
    to ensure that a loss in any one asset can be offset by profit from some other
    asset. Broadly speaking, the goal of portfolio optimisation is essentially to
    maximise the expected return and minimise the risk. Simultaneously achieving both
    can be difficult.
  prefs: []
  type: TYPE_NORMAL
- en: A portfolio can consist of various kinds of assets which may be grouped into
    asset sub-classes. Two asset sub-classes will have fundamentally different financial
    characteristics and also different systemic or undiversifiable risks. For example,
    equities/shares and fixed income securities like bonds will belong to separate
    asset sub-classes. The entity which sets up the portfolio will have to decide
    upon two things. First, the proportion of investment to be made in the various
    asset sub-classes and second, the proportion of investment to be made among the
    assets in a particular sub-class. These proportions are usually called weights.
    Given the assets to be included in the portfolio, the weights assigned to the
    assets determine the return on the portfolio as well as the overall risk of the
    portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: The portfolio weights are determined at one point of time. They may, however,
    be changed from time to time. Such a change will usually entail buying or selling
    of the assets in the portfolio. This involves transaction costs. The duration
    of time during which the weights remain same is called a period. The portfolio
    optimisation problem can be considered both for single-period optimisation and
    multi-period optimisation.
  prefs: []
  type: TYPE_NORMAL
- en: Even before the optimisation problem, one has to consider the assets to be included
    in the portfolio. Theoretically speaking, one may start out by considering all
    available assets in the market and then assign zero weights to some of these.
    From a practical point of view, an investor will usually choose the relevant assets
    based on a lot of factors not all of which can be mathematically modelled.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will consider two kinds of optimisation problems. The first
    problem is the single-period optimisation problem for equities. The task is to
    determine the weights so as to satisfy some rational goals. The second problem
    is that of multi-period optimisation problem for equities. We will not consider
    how an investor chooses the assets to be included in a portfolio or the problem
    of determining the proportion of investment in various asset sub-classes.
  prefs: []
  type: TYPE_NORMAL
- en: 13.1 Markowitz Portfolio Optimisation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Suppose there are *n* assets *A* 1,…,*A* [*n*] in the portfolio. The rate of
    return on asset *A* [*i*] is a random variable *R* [*i*] . If an amount *X* [*i*]
    is invested in *A* [*i*] , then the amount *Y* [*i*] that is obtained is given
    as *Y* [*i*] = *X* [*i*] (1 + *R* [*i*] ). The mean and standard deviation of
    *R* [*i*] will be denoted by ![inline-image](../images/CH013_1.jpg) and ![inline-image](../images/CH013_2.jpg),
    respectively. Here ![inline-image](../images/CH013_3.jpg) is the expected rate
    of return on *A* [*i*] and ![inline-image](../images/CH013_4.jpg) represents the
    risk of investing in *A* [*i*] . For the present we assume that ![inline-image](../images/CH013_5.jpg)
    for all *i* = 1,…,*n*. Since ![inline-image](../images/CH013_6.jpg) represents
    the risk of asset *A* [*i*] , the positivity of ![inline-image](../images/CH013_7.jpg)
    indicates that there is a positive risk of investing in any of the assets.
  prefs: []
  type: TYPE_NORMAL
- en: Let *X* be the amount of investment which is distributed across the *n* assets
    *A* 1,…,*A* [*n*] with amount *X* [*i*] being invested in *A* [*i*] so that *X*
    = *X* 1 + ⋯ + *X* [*n*] . Let *Y* [*i*] be the return on asset *A* [*i*] . Then
    the overall rate of return *R* on the portfolio is ![inline-image](../images/CH013_8.jpg),
    where *α* [*i*] = *X* [*i*] /*X*. So, to consider the rate of return on the portfolio,
    the values of *X* 1,…,*X* [*n*] are not important. It is the proportions ![inline-image](../images/CH013_9.jpg)
    which determine the rate of return of the portfolio. These proportions represent
    the weights assigned to the various assets in the portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the assets *A* 1,…,*A* [*n*] are fixed, a portfolio *p* is simply a vector
    ![inline-image](../images/CH013_10.jpg) such that ![inline-image](../images/CH013_11.jpg).
    We allow the ![inline-image](../images/CH013_12.jpg)''s to be negative. A negative
    value of ![inline-image](../images/CH013_13.jpg) indicates that the asset *A*
    [*i*] has been shorted in the portfolio. The rate of return *R* on the portfolio
    ![inline-image](../images/CH013_14.jpg) is ![inline-image](../images/CH013_15.jpg).
    The expected rate of return *μ* and the variance ![inline-image](../images/CH013_16.jpg)
    of the portfolio are then given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_17.jpg)(13.1)'
  prefs: []
  type: TYPE_IMG
- en: where ![inline-image](../images/CH013_18.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: (1)Suppose *n* ≥ 2 and there are *n* assets which are uncorrelated (i.e. the
    covariances are all equal to zero). Further, suppose that *R* 1 = … = *R* [*n*]
    and ![inline-image](../images/CH013_19.jpg). Then investing in any one asset has
    expected rate of return to be *R* 1 with associated risk ![inline-image](../images/CH013_20.jpg).
    Consider the portfolio *p* = (1/*n*,…,1/*n*), i.e. ![inline-image](../images/CH013_21.jpg).
    Then the expected rate of return of the portfolio is *R* = *R* 1 and the associated
    risk is ![inline-image](../images/CH013_22.jpg). So, by investing in *n* assets,
    the rate of return is unchanged, but as *n* increases, the risk goes down. This
    is an example of diversification.(2)Suppose *n* = 2 and *A* 1 and *A* 2 are two
    assets with returns *R* 1 and *R* 2 having means to be ![inline-image](../images/CH013_23.jpg)
    and ![inline-image](../images/CH013_24.jpg), respectively. Further, suppose *R*
    1 + *R* 2 = 1, i.e. if *R* 1 increases, then *R* 2 decreases and vice versa. Consider
    the portfolio *p* = (1/2, 1/2) which assigns equal weights to the two assets.
    Then the expected rate of return *μ* of the portfolio is ![inline-image](../images/CH013_25.jpg)
    and the variance *σ* of the portfolio is ![inline-image](../images/CH013_26.jpg).
    So, in this case the risk of the portfolio has been reduced to zero. This has
    happened due to the fact that the rates of returns on the two assets satisfy the
    relation *R* 1 + *R* 2 = 1.
  prefs: []
  type: TYPE_NORMAL
- en: In general, assets are correlated and hardly ever satisfy simple relations,
    as in the second example above. As mentioned earlier, the problem of portfolio
    optimisation is to determine the weights ![inline-image](../images/CH013_27.jpg)
    so that *μ* is maximised and *σ* is minimised. Simultaneously achieving both of
    these is not possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before describing the general case, first let us briefly consider the case
    of *n* = 2\. Let the expected rates of returns and variances of the two assets
    *A* 1 and *A* 2 be ![inline-image](../images/CH013_28.jpg) and ![inline-image](../images/CH013_29.jpg),
    respectively. Further, let ![inline-image](../images/CH013_30.jpg) be the covariance
    between the two assets and define the Pearson correlation coefficient *ρ* to be
    ![inline-image](../images/CH013_31.jpg). Suppose the portfolio *p* is ![inline-image](../images/CH013_32.jpg).
    Then the expected rate of return ![inline-image](../images/CH013_33.jpg). The
    variance ![inline-image](../images/CH013_34.jpg) of *p* is a function of *α* and
    is given as ![inline-image](../images/CH013_35.jpg). If ![inline-image](../images/CH013_36.jpg)
    and ![inline-image](../images/CH013_37.jpg), then ![inline-image](../images/CH013_38.jpg),
    i.e. the variance does not depend upon *α*. So, suppose that both ![inline-image](../images/CH013_39.jpg)
    and ![inline-image](../images/CH013_40.jpg) do not hold. Also, recall that we
    are considering all assets to have positive risks, i.e. ![inline-image](../images/CH013_41.jpg).
    Then using basic calculus, it is possible to obtain a unique value of *α* (say
    ![inline-image](../images/CH013_42.jpg)) such that ![inline-image](../images/CH013_43.jpg)
    takes the minimum possible value. The value of ![inline-image](../images/CH013_44.jpg)
    and the corresponding value of ![inline-image](../images/CH013_45.jpg) are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Given the above value of ![inline-image](../images/CH013_47.jpg), the expected
    rate of return of the portfolio *p* is ![inline-image](../images/CH013_48.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'The more general case arises when *n* ≥ 2\. In this case, we consider the approach
    pioneered by Markowitz. In this approach, the expected rate of return of the portfolio
    is fixed to a certain value ![inline-image](../images/CH013_49.jpg) and the weights
    ![inline-image](../images/CH013_50.jpg) are chosen so that the variance is minimised.
    Using ([13.1](#eq1)), the optimisation problem is to obtain a portfolio ![inline-image](../images/CH013_51.jpg)
    such that the following hold:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_52.jpg)(13.2)'
  prefs: []
  type: TYPE_IMG
- en: '![display-image](../images/CH013_53.jpg)(13.3)'
  prefs: []
  type: TYPE_IMG
- en: '![display-image](../images/CH013_54.jpg)(13.4)'
  prefs: []
  type: TYPE_IMG
- en: In ([13.2](#eq2)), ![inline-image](../images/CH013_55.jpg) is defined to be
    equal to ![inline-image](../images/CH013_56.jpg) and the expression itself is
    equal to ½Var(*R*). The scaling factor of 1/2 is introduced to simplify the later
    calculations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The above is an example of a quadratic optimisation problem with linear constraints.
    This can be solved using the method of Lagrange multipliers. Let *λ* and *γ* be
    two new variables. Consider the following expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_57.jpg)(13.5)'
  prefs: []
  type: TYPE_IMG
- en: Partial derivatives of *L* with respect to ![inline-image](../images/CH013_58.jpg)
    and *γ* are set to zero to obtain the following system of *n* + 2 linear inhomogeneous
    equations in the *n* + 2 variables ![inline-image](../images/CH013_59.jpg) and
    *γ*.
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_60.jpg)(13.6)'
  prefs: []
  type: TYPE_IMG
- en: A solution ![inline-image](../images/CH013_61.jpg) to ([13.6](#eq6)) is a solution
    to the quadratic programming problem formulated in [(13.2)](#eq2) to [(13.4)](#eq4).
  prefs: []
  type: TYPE_NORMAL
- en: Given ![inline-image](../images/CH013_62.jpg), the set of feasible portfolios
    consists of portfolios ![inline-image](../images/CH013_63.jpg) such that ![inline-image](../images/CH013_64.jpg).
    If the set of feasible portfolios is non-empty, then it can be shown that the
    system ([13.6](#eq6)) has a solution and so does the optimisation problem ![inline-image](../images/CH013_65.jpg)
    given by [(13.2)](#eq2) to [(13.4)](#eq4).
  prefs: []
  type: TYPE_NORMAL
- en: Consider the set of all ![inline-image](../images/CH013_66.jpg) such that the
    problem ![inline-image](../images/CH013_67.jpg) is feasible and let ![inline-image](../images/CH013_68.jpg)
    be the corresponding value of the minimum variance. This means that if the expected
    return is fixed to ![inline-image](../images/CH013_69.jpg), then the minimum risk
    is ![inline-image](../images/CH013_70.jpg). Consider the set of all such points
    ![inline-image](../images/CH013_71.jpg) on the plane where the risk ![inline-image](../images/CH013_72.jpg)
    is plotted along the *x*-axis and the return ![inline-image](../images/CH013_73.jpg)
    is plotted along the *y*-axis. This curve is called the efficient frontier. Any
    portfolio whose risk and return correspond to a point on the efficient frontier
    is called an efficient portfolio. The term efficiency refers to the fact that
    for the given values of risk and expected return, there is no other portfolio
    which has a lower risk and a higher return.
  prefs: []
  type: TYPE_NORMAL
- en: We consider the equations given by ([13.6](#eq6)) in matrix form. Let ![inline-image](../images/CH013_74.jpg),
    ![inline-image](../images/CH013_75.jpg), **1** = (1,…,1) ^([*T*]) and let ![inline-image](../images/CH013_76.jpg)
    be the variance/co-variance matrix. We will assume that ![inline-image](../images/CH013_77.jpg)
    is invertible. Also, we will assume that not all the ![inline-image](../images/CH013_78.jpg)'s
    are equal.
  prefs: []
  type: TYPE_NORMAL
- en: The first equation of ([13.6](#eq6)) can be written as ![inline-image](../images/CH013_79.jpg)
    so that
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_80.jpg)(13.7)'
  prefs: []
  type: TYPE_IMG
- en: 'In terms of vector notation, the two constraints are written as ![inline-image](../images/CH013_81.jpg)
    and ![inline-image](../images/CH013_82.jpg). Noting from ([13.7](#eq7)) that ![inline-image](../images/CH013_83.jpg),
    we rewrite the constraints as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_84.jpg)(13.8)'
  prefs: []
  type: TYPE_IMG
- en: Let ![inline-image](../images/CH013_85.jpg), ![inline-image](../images/CH013_86.jpg)
    and ![inline-image](../images/CH013_87.jpg). Note that the values of ![inline-image](../images/CH013_88.jpg)
    and ![inline-image](../images/CH013_89.jpg) are fixed and assumed to be a priori
    known. So, *a*, *b* and *c* are constants. Solving ([13.8](#eq8)) for *λ* and
    *γ* gives
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_90.jpg)(13.9)'
  prefs: []
  type: TYPE_IMG
- en: where ![inline-image](../images/CH013_91.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: Fix a value ![inline-image](../images/CH013_92.jpg) of ![inline-image](../images/CH013_93.jpg).
    The variance of the portfolio can be expressed in terms of ![inline-image](../images/CH013_94.jpg)
    as follows. Given a weight vector ![inline-image](../images/CH013_95.jpg), the
    variance ![inline-image](../images/CH013_96.jpg) of the corresponding portfolio
    can be written in terms of ![inline-image](../images/CH013_97.jpg) as ![inline-image](../images/CH013_98.jpg).
    Using ![inline-image](../images/CH013_99.jpg), ![inline-image](../images/CH013_100.jpg)
    and ![inline-image](../images/CH013_101.jpg) we have
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_102.jpg)(13.10)'
  prefs: []
  type: TYPE_IMG
- en: Given the expected rate of return vector ![inline-image](../images/CH013_103.jpg)
    and the variance/co-variance matrix ![inline-image](../images/CH013_104.jpg),
    there is a portfolio which minimises the variance over all possible portfolios.
    To obtain this portfolio, we differentiate ![inline-image](../images/CH013_105.jpg)
    with respect to ![inline-image](../images/CH013_106.jpg) and set the derivative
    to 0, i.e.
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_107.jpg)'
  prefs: []
  type: TYPE_IMG
- en: leading to ![inline-image](../images/CH013_108.jpg) and ![inline-image](../images/CH013_109.jpg).
    From ([13.9](#eq9)), the corresponding values of the Lagrangian multipliers *λ*
    and *γ* are ![inline-image](../images/CH013_110.jpg) and ![inline-image](../images/CH013_111.jpg).
    Denoting the weight vector of the corresponding portfolio by ![inline-image](../images/CH013_112.jpg),
    we have from ([13.7](#eq7))
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_113.jpg)(13.11)'
  prefs: []
  type: TYPE_IMG
- en: Another portfolio with weight vector ![inline-image](../images/CH013_114.jpg)
    is obtained by setting ![inline-image](../images/CH013_115.jpg) in ([13.9](#eq9)),
    or, equivalently, ![inline-image](../images/CH013_116.jpg) whence ![inline-image](../images/CH013_117.jpg).
    From ([13.7](#eq7)), we have
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_118.jpg)(13.12)'
  prefs: []
  type: TYPE_IMG
- en: '***Two fund theorem*** : Suppose that *p* ^((1)) and *p* ^((2)) are two efficient
    portfolios corresponding to rates of returns ![inline-image](../images/CH013_119.jpg)
    and ![inline-image](../images/CH013_120.jpg), respectively. Then *p* ^((1)) (resp.
    *p* ^((2))) is a solution to ([13.6](#eq6)) with ![inline-image](../images/CH013_121.jpg)
    (resp. ![inline-image](../images/CH013_122.jpg)). Using linearity it easily follows
    that for any ![inline-image](../images/CH013_123.jpg), ![inline-image](../images/CH013_124.jpg)
    is a portfolio with expected rate of return to be ![inline-image](../images/CH013_125.jpg).
    Also using linearity, it can be shown that *p* is a solution to ([13.6](#eq6))
    where ![inline-image](../images/CH013_126.jpg). So, the risk-return pair for *p*
    is a point on the efficient frontier. This shows that starting from two efficient
    portfolios, varying *α* over [0, 1], it is possible to obtain a collection of
    points on the efficient frontier.'
  prefs: []
  type: TYPE_NORMAL
- en: Conversely, suppose ![inline-image](../images/CH013_127.jpg) is the weight vector
    of some efficient portfolio. From ([13.7](#eq7)), we have ![inline-image](../images/CH013_128.jpg)
    for appropriate values of the Lagrangian multipliers *λ* and *γ*. Using ([13.11](#eq11))
    and ([13.12](#eq12)), we have ![inline-image](../images/CH013_129.jpg) and ![inline-image](../images/CH013_130.jpg).
    So,
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_131.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From ([13.9](#eq19)), we have ![inline-image](../images/CH013_132.jpg). So,
    letting ![inline-image](../images/CH013_133.jpg), we have ![inline-image](../images/CH013_134.jpg)
    and we can write
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_135.jpg)(13.13)'
  prefs: []
  type: TYPE_IMG
- en: In other words, any efficient portfolio can be written as a convex combination
    of ![inline-image](../images/CH013_136.jpg) and ![inline-image](../images/CH013_137.jpg).
    Now consider any two distinct efficient portfolios whose weight vectors are given
    by ![inline-image](../images/CH013_138.jpg) and ![inline-image](../images/CH013_139.jpg).
    Then there are ![inline-image](../images/CH013_140.jpg) such that
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_141.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![display-image](../images/CH013_142.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, we may obtain ![inline-image](../images/CH013_143.jpg) and ![inline-image](../images/CH013_144.jpg)
    in terms of *u* 1, *u* 2, ![inline-image](../images/CH013_145.jpg) and ![inline-image](../images/CH013_146.jpg).
    Substituting these in ([13.13](#eq13)), we obtain
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_147.jpg)(13.14)'
  prefs: []
  type: TYPE_IMG
- en: This shows that given any two distinct efficient portfolios with weight vectors
    ![inline-image](../images/CH013_148.jpg) and ![inline-image](../images/CH013_149.jpg),
    any efficient portfolio with weight vector ![inline-image](../images/CH013_150.jpg)
    can be obtained as a convex combination of ![inline-image](../images/CH013_151.jpg)
    and ![inline-image](../images/CH013_152.jpg). Earlier we have seen that the convex
    combination of any two efficient portfolios is also an efficient portfolio. So,
    given any two efficient portfolios, the set of all efficient portfolios can be
    obtained as convex combinations of the two portfolios. This result is called the
    two-fund theorem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remarks:'
  prefs: []
  type: TYPE_NORMAL
- en: (1)If ([13.4](#eq4)), (i.e. the constraint ![inline-image](../images/CH013_153.jpg))
    is dropped from ![inline-image](../images/CH013_154.jpg), then we are looking
    for a portfolio which minimises the variance. This problem can also be solved
    using the method of Lagrange multipliers.(2)If ([13.4](#eq4)) is changed to ![inline-image](../images/CH013_155.jpg)
    (i.e. the equality is replaced by the inequality), then the method of Lagrange
    multipliers can no longer be applied. The modified optimisation problem can be
    solved using the Karush–Kuhn–Tucker conditions and an analogous two-fund theorem
    can be proved.(3)In the above formultion of the Markowitz problem, the weights
    ![inline-image](../images/CH013_156.jpg)'s are allowed to be negative (i.e. shorting
    is allowed). If shorting is not allowed, then the non-negativity constraints ![inline-image](../images/CH013_157.jpg)
    have to be included for *i* = 1,…,*n*. The corresponding problem can be handled
    using techniques of linear programming.
  prefs: []
  type: TYPE_NORMAL
- en: 13.1.1 Inclusion of a Risk-free Asset
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The analysis has been under the assumption that ![inline-image](../images/CH013_158.jpg)
    for *i* = 1,…,*n*, i.e. all the assets have a positive risk. In practice, however,
    there usually exist risk-free assets with fixed rates of returns. Examples would
    be bank deposits/loans and government bonds. One may wish to consider a portfolio
    consisting of one such risk-free asset along with other risky assets. The variance
    of the risk-free asset is zero and so, if one tries to simply minimise the variance
    of the combination, then the solution is a portfolio which invests the entire
    amount in the risk-free asset. The corresponding rate of return, however, will
    be lower than what may be achieved by including risky assets in the portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: Let *A* 0 denote the risk-free asset with rate of return ![inline-image](../images/CH013_159.jpg).
    As before, let *A* 1,…,*A* [*n*] be the risky assets with rates of returns *R*
    1,…,*R* [*n*] , respectively, with ![inline-image](../images/CH013_160.jpg), ![inline-image](../images/CH013_161.jpg),
    *i* = 1,…,*n* and ![inline-image](../images/CH013_162.jpg), 1 ≤*i* < *j* ≤ *n*.
    Since *A* 0 is risk-free, its rate of return is a constant; so, its variance is
    zero and also it is uncorrelated to any of the other assets. The risk-free asset
    corresponds to the point ![inline-image](../images/CH013_163.jpg) on the standard
    deviation–mean plane.
  prefs: []
  type: TYPE_NORMAL
- en: Let ![inline-image](../images/CH013_164.jpg) denote the portfolio with ![inline-image](../images/CH013_165.jpg),
    where the proportionate amount of investment in asset *A* [*i*] is ![inline-image](../images/CH013_166.jpg)
    for *i* = 0,…,*n*. For *i* = 1,…,*n*, define ![inline-image](../images/CH013_167.jpg)
    and so ![inline-image](../images/CH013_168.jpg). By ![inline-image](../images/CH013_169.jpg),
    we will denote the portfolio ![inline-image](../images/CH013_170.jpg) which consists
    of the risky assets *A* 1,…,*A* [*n*] with ![inline-image](../images/CH013_171.jpg)
    being the proportionate investment in *A* [*i*] . The expected rate of return
    for ![inline-image](../images/CH013_172.jpg) is ![inline-image](../images/CH013_173.jpg)
    and the variance of ![inline-image](../images/CH013_174.jpg) is ![inline-image](../images/CH013_175.jpg).
    We may assume that *ν* > *r* [*f*] , since if the expected rate of return of the
    risky portfolio is not more than that of the risk-free asset, it does not make
    sense to invest in such a portfolio. The point ![inline-image](../images/CH013_176.jpg)
    on the standard deviation–mean plane corresponds to ![inline-image](../images/CH013_177.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'For the mean–variance analysis of the portfolio *p*, we may equivalently consider
    it to be a portfolio ![inline-image](../images/CH013_178.jpg) consisting of two
    assets, namely *A* 0 and ![inline-image](../images/CH013_179.jpg) with proportion
    ![inline-image](../images/CH013_180.jpg) invested in *A* 0 and the proportion
    ![inline-image](../images/CH013_181.jpg) invested in ![inline-image](../images/CH013_182.jpg).
    The mean and variance of this two-asset portfolio are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_183.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![display-image](../images/CH013_184.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This corresponds to the point ![inline-image](../images/CH013_185.jpg) on the
    standard deviation–mean plane.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose ![inline-image](../images/CH013_186.jpg). Then the efficient frontier
    is the locus of ![inline-image](../images/CH013_187.jpg). Eliminating ![inline-image](../images/CH013_188.jpg)
    from the expressions for *σ* and *μ* shows this locus to be the straight line
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_189.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we have argued earlier, ![inline-image](../images/CH013_190.jpg), so the
    slope of this line is positive. For a given ![inline-image](../images/CH013_191.jpg),
    the slope ![inline-image](../images/CH013_192.jpg) is maximised by minimising
    *τ*. This corresponds to the portfolio ![inline-image](../images/CH013_193.jpg)
    being an efficient portfolio and the point ![inline-image](../images/CH013_194.jpg)
    being on the earlier efficient frontier. So, the line ![inline-image](../images/CH013_195.jpg)
    with the maximum slope is a tangent to the old efficient frontier. Thus, the new
    efficient frontier is a tangent to the old efficient frontier which connects the
    point ![inline-image](../images/CH013_196.jpg) to the point ![inline-image](../images/CH013_197.jpg)
    on the old efficient frontier.
  prefs: []
  type: TYPE_NORMAL
- en: The case of ![inline-image](../images/CH013_198.jpg) is a non-issue. In this
    case, the locus of ![inline-image](../images/CH013_199.jpg) is the line ![inline-image](../images/CH013_200.jpg)
    with a negative slope. This corresponds to shorting of ![inline-image](../images/CH013_201.jpg)
    to invest in *A* 0\. This is an irrational thing to do, since it increases the
    risk and decreases the rate of return.
  prefs: []
  type: TYPE_NORMAL
- en: Since the new efficient frontier is a tangent to the old efficient frontier,
    it is instructive to find the portfolio ![inline-image](../images/CH013_202.jpg)
    which corresponds to the point where the new efficient frontier touches the old
    efficient frontier. This corresponds to maximising the slope ![inline-image](../images/CH013_203.jpg).
    Note that ![inline-image](../images/CH013_204.jpg) and *τ* are functions of ![inline-image](../images/CH013_205.jpg).
    Making this explicit, the slope can be written as
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_206.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For *i* = 1,…,*n*, obtaining ![inline-image](../images/CH013_207.jpg) and setting
    to zero leads to the following system of linear equations in the quantities *v*
    1,…,*v* [*n*] .
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_208.jpg)(13.15)'
  prefs: []
  type: TYPE_IMG
- en: Here ![inline-image](../images/CH013_209.jpg) with ![inline-image](../images/CH013_210.jpg).
    Since ![inline-image](../images/CH013_211.jpg), it follows that *v* 1 + ⋯ + *v*
    [*n*] = *c* and ![inline-image](../images/CH013_212.jpg). So, solving ([13.15](#eq15))
    for *v* 1,…,*v* [*n*] provides the values of ![inline-image](../images/CH013_213.jpg).
    This provides the portfolio ![inline-image](../images/CH013_214.jpg) such that
    the efficient frontier with the risk-free asset is the line joining the point
    ![inline-image](../images/CH013_215.jpg) to the point ![inline-image](../images/CH013_216.jpg)
    corresponding to ![inline-image](../images/CH013_217.jpg). This result is called
    the one-fund theorem.
  prefs: []
  type: TYPE_NORMAL
- en: 13.1.2 Capital Asset Pricing Model
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Consider the set of all assets in the market. Assume that all information about
    these assets are publicly known. Such information include the means, the variances
    and the co-variances. All market participants perform the same market analysis
    based on the publicly available information. This implies that all participants
    discover the same efficient frontier which is a straight line corresponding to
    portfolios which combine the risk-free asset with the same efficient ![inline-image](../images/CH013_218.jpg).
    This ![inline-image](../images/CH013_219.jpg) is called the market portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: Let us denote the market portfolio by *M*. The fact that *M* is the same for
    all market participants implies that the market has reached an equilibrium. A
    consequence of this equilibrium is that the weight of any asset in *M* is the
    ratio of the capital value of the asset to the total market capitalisation. If
    the market consists of *n* (risky) assets *A* 1,…,*A* [*n*] having capital values
    *V* 1,…,*V* [*n*] , then the weight of *A* [*i*] in *M* is *w* [*i*] = *V* [*i*]
    /*V*, where *V* = *V* 1 + ⋯ + *V* [*n*] . In other words, *M* = (*w* 1,…,*w* [*n*]
    ). It is to be noted that all weights in the market portfolio *M* are positive.
    This has two consequences. First, there is no shorting in *M* and second, all
    risky assets are present in *M*, though the weights of some assets may be very
    small. The above analysis is called the capital asset pricing model (CAPM).
  prefs: []
  type: TYPE_NORMAL
- en: Let ![inline-image](../images/CH013_220.jpg) be the standard deviation and mean
    of *M*. Then the efficient frontier is the line joining the point ![inline-image](../images/CH013_221.jpg)
    to ![inline-image](../images/CH013_222.jpg). This line is called the capital market
    line and is given by the equation ![inline-image](../images/CH013_223.jpg). The
    quantity ![inline-image](../images/CH013_224.jpg) is the excess the portfolio
    earns over and above the risk-free rate of return ![inline-image](../images/CH013_225.jpg).
    The slope ![inline-image](../images/CH013_226.jpg) represents the increase in
    expected rate of return per unit change of the standard deviation ![inline-image](../images/CH013_227.jpg).
    This slope is called the price of risk.
  prefs: []
  type: TYPE_NORMAL
- en: Consider a risky asset *A* [*i*] having mean ![inline-image](../images/CH013_228.jpg)
    and variance ![inline-image](../images/CH013_229.jpg) such that ![inline-image](../images/CH013_230.jpg)
    is not on the efficient frontier. Let ![inline-image](../images/CH013_231.jpg)
    be the co-variance of *A* [*i*] with the market portfolio *M*. The excess rate
    of return that *A* [*i*] earns over the risk-free asset is ![inline-image](../images/CH013_232.jpg).
    The CAPM formula states that
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_233.jpg)(13.16)'
  prefs: []
  type: TYPE_IMG
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_234.jpg)(13.17)'
  prefs: []
  type: TYPE_IMG
- en: 'We show how to derive the above formula. Consider a portfolio *p* consisting
    of *A* [*i*] and the market portfolio *M* which assigns a weight *α* to *A* [*i*]
    and a weight ![inline-image](../images/CH013_235.jpg) to *M* with ![inline-image](../images/CH013_236.jpg).
    The expected rate of return and the variance of *p* are given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_237.jpg)(13.18)'
  prefs: []
  type: TYPE_IMG
- en: 'As *α* varies over [0, 1], the locus of ![inline-image](../images/CH013_238.jpg)
    traces out a smooth curve ![inline-image](../images/CH013_239.jpg) on the standard
    deviation–mean plane. Since *A* [*i*] is not efficient, ![inline-image](../images/CH013_240.jpg)
    stays below the capital market line (i.e. the efficient frontier) meeting it only
    at the point ![inline-image](../images/CH013_241.jpg) corresponding to ![inline-image](../images/CH013_242.jpg).
    This implies that the capital market line is a tangent to ![inline-image](../images/CH013_243.jpg)
    at the point ![inline-image](../images/CH013_244.jpg). So, the derivative of ![inline-image](../images/CH013_245.jpg)
    (i.e. ![inline-image](../images/CH013_246.jpg)) at the point ![inline-image](../images/CH013_247.jpg)
    equals the slope of the capital market line. This gives the relation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_248.jpg)(13.19)'
  prefs: []
  type: TYPE_IMG
- en: From ([13.18](#eq18)), it is possible to obtain ![inline-image](../images/CH013_249.jpg)
    and ![inline-image](../images/CH013_250.jpg), and the ratio of these two quantities
    provide an expression for ![inline-image](../images/CH013_251.jpg). Using this
    expression for ![inline-image](../images/CH013_252.jpg) in ([13.19](#eq19)) and
    simplifying provides the expression for ![inline-image](../images/CH013_253.jpg)
    given in ([13.16](#eq16)).
  prefs: []
  type: TYPE_NORMAL
- en: If ![inline-image](../images/CH013_254.jpg), then the expression for ![inline-image](../images/CH013_255.jpg)
    given in ([13.17](#eq17)) is zero and consequently from ([13.16](#eq16)), ![inline-image](../images/CH013_256.jpg),
    i.e. the rate of return for *A* [*i*] is equal to the risk-free rate of return.
    This holds even if the asset *A* [*i*] itself is risky, i.e. ![inline-image](../images/CH013_257.jpg).
    An asset which is uncorrelated to the market will not have a rate of return which
    is higher than the risk-free rate of return. The quantity ![inline-image](../images/CH013_258.jpg)
    expresses the extent of correlation of *A* [*i*] with the market portfolio *M*
    and hence captures the market risk.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose instead of a single risky asset, a portfolio ![inline-image](../images/CH013_259.jpg)
    of risky assets *A* 1,…,*A* *k* is considered where ![inline-image](../images/CH013_260.jpg).
    Let ![inline-image](../images/CH013_261.jpg) denote the expected rate of return
    of the portfolio *p*. Then ![inline-image](../images/CH013_262.jpg) and
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_263.jpg)'
  prefs: []
  type: TYPE_IMG
- en: where ![inline-image](../images/CH013_264.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: The CAPM formula can be used to obtain the price of an asset. Let *P* be the
    price of an asset and denote the payoff of the asset after one period by *Q*.
    Note that *Q* is a random variable while *P* is not. Let ![inline-image](../images/CH013_265.jpg)
    denote the expectation of *Q*. The rate of return is ![inline-image](../images/CH013_266.jpg)
    and so the expected rate of return of the asset is ![inline-image](../images/CH013_267.jpg).
    We use *A* for *A* [*i*] in the CAPM formula ([13.16](#eq16)) which is ![inline-image](../images/CH013_268.jpg),
    where ![inline-image](../images/CH013_269.jpg). Substituting ![inline-image](../images/CH013_270.jpg)
    for *μ* in this formula and solving for *P* yields
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_271.jpg)(13.20)'
  prefs: []
  type: TYPE_IMG
- en: 'The market portfolio is a theoretical concept. If one tries to apply this in
    practice, it will be required to construct a portfolio consisting of the humongous
    number of assets that are present in the market. This will clearly be infeasible.
    To tackle this problem, index funds have been created which attempt to approximate
    the market portfolio. In essence, the index funds consider a small subset of the
    dominant assets in the market. A well-known example is the Standard & Poor''s
    (S&P) 500-stock index which consists of 500 stocks. In applying the CAPM formula
    ([13.20](#eq20)) to an asset *A*, one then replaces S&P for the market portfolio
    *M*. Nevertheless, this requires knowing the rates of returns of *A* and S&P,
    the variance of S&P as well as the co-variance of *A* with S&P. Estimates of these
    quantities are obtained from historical data. Suppose, the values of ![inline-image](../images/CH013_272.jpg)
    and ![inline-image](../images/CH013_273.jpg) are known for *N* time points, where
    ![inline-image](../images/CH013_274.jpg) (resp. ![inline-image](../images/CH013_275.jpg))
    is the rate of return of asset *A* (resp. S&P) at time point *k*. Let ![inline-image](../images/CH013_276.jpg),
    ![inline-image](../images/CH013_277.jpg) be the estimates of the rates of returns
    of *A* and S&P, respectively. Similarly, let ![inline-image](../images/CH013_278.jpg)
    and ![inline-image](../images/CH013_279.jpg) be the estimates of the variance
    of S&P and the co-variance of *A* with S&P. These estimates are obtained from
    the available data as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_280.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![display-image](../images/CH013_281.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![display-image](../images/CH013_282.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![display-image](../images/CH013_283.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, an estimate ![inline-image](../images/CH013_284.jpg) of the *β* of
    the asset *A* is obtained as ![inline-image](../images/CH013_285.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 13.1.3 Further Issues
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this section, we briefly mention two further issues, namely factor models
    and robust portfolio optimisation. Detailed discussion of these issues is beyond
    the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: '**Factor models:** To apply the Markowitz mean–variance analysis, it is required
    to obtain the values of the expected rates of returns and variances of all the
    assets as well as their pairwise co-variances. Such information need to be estimated
    from the available data. If *n* assets are considered, then *n* means and variances
    have to be estimated as well as *n*(*n* − 1)/2 co-variances have to be estimated.
    Since the number of co-variances grows quadratically with *n*, it is difficult
    to obtain reliable estimates of these quantities.'
  prefs: []
  type: TYPE_NORMAL
- en: Linear factor models aim to reduce the dimensionality of the variance/co-variance
    matrix. The idea is to consider a set of random variables called factors and express
    the rate of return of an asset as a linear combination of the factors along with
    an error term. Suppose the factors are *F* 1,…,*F* *ℓ* . Further, suppose there
    are *n* assets *A* 1,…,*A* [*n*] . The rate of return *R* [*i*] of asset *A* [*i*]
    is modelled as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_286.jpg)(13.21)'
  prefs: []
  type: TYPE_IMG
- en: Here *a* [*i*] , *b* [*i*],*j* are constants and ![inline-image](../images/CH013_287.jpg)
    is the error which is a ranom variable with mean 0 and is assumed to be uncorrelated
    with the factors. Also, for *i* ≠ *j*, ![inline-image](../images/CH013_288.jpg)
    and ![inline-image](../images/CH013_289.jpg) are assumed to be uncorrelated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose ![inline-image](../images/CH013_290.jpg) is a portfolio of the *n*
    assets. Then the rate of return *R* of *p* is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_291.jpg)(13.22)'
  prefs: []
  type: TYPE_IMG
- en: '![display-image](../images/CH013_292.jpg)(13.23)'
  prefs: []
  type: TYPE_IMG
- en: where ![inline-image](../images/CH013_293.jpg), ![inline-image](../images/CH013_294.jpg)
    and ![inline-image](../images/CH013_295.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: Performing the Markowitz analysis requires estimating the means and variances
    of the factors and their pairwise co-variances. Assuming ![inline-image](../images/CH013_296.jpg),
    the dimensionality of the variance/co-variance matrix decreases significantly.
  prefs: []
  type: TYPE_NORMAL
- en: '**Robustness:** The input to the Markowitz portfolio optimisation problem consists
    of the estimates of the means, variances and the co-variances. The accuracies
    of these estimates have an effect on the ultimate solution. The goal of robust
    portfolio optimisation is to try and ensure that the accuracy of the ultimate
    solution is not significantly affected by uncertainty of the estimates.'
  prefs: []
  type: TYPE_NORMAL
- en: 13.2 Kelly Criterion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Consider a portfolio consisting of a risk-free asset *A* 0 and a risky asset
    *A* 1\. Let ![inline-image](../images/CH013_297.jpg) be the risk-free interest
    rate and *R* be the rate of return on *A* 1\. Suppose a total amount of investment
    *V* 0 is to be invested in these two assets. A fraction *f* is to be invested
    in *A* 1 and the fraction (1 − *f*) is to be invested in *A* 0\. The return on
    the investment (1 − *f*)*V* 0 on *A* 0 is ![inline-image](../images/CH013_298.jpg)
    and the return on the investment *fV* 0 on *A* 1 is *RfV* 0\. So, the total value
    after one period is *V* 1 and is given by ![inline-image](../images/CH013_299.jpg).
    The growth in investment as a function of *f* is ![inline-image](../images/CH013_300.jpg).
    An optimality goal would be to determine *f* such that the expected value of *G*
    is maximised. The Kelly approach is to determine *f* such that the expected value
    of ln *G* is maximised.
  prefs: []
  type: TYPE_NORMAL
- en: More generally, one can consider investment over a number of intervals with
    the same fraction *f* invested in *A* 1 in each interval. Suppose there are *T*
    intervals and the rates of returns are *R* 1,…,*R* [*T*] . For *t* = 1,…,*T*,
    let *V* [*t*] be the wealth after *t* intervals and *G* [*t*] = *V* [*t*] /*V*
    0\. Then ![inline-image](../images/CH013_301.jpg) and the average growth is ![inline-image](../images/CH013_302.jpg)
    which is the geometric mean of the growths in all the intervals. The Kelly approach
    is to determine *f* such that
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_303.jpg)'
  prefs: []
  type: TYPE_IMG
- en: is maximised.
  prefs: []
  type: TYPE_NORMAL
- en: In a more general sense, the criterion of maximising the expected value of the
    logarithm of the growth funtion is called the Kelly criterion. The value of *f*
    for which the maximum is attained is called the Kelly value.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose *R* is a continuous random variable with ![inline-image](../images/CH013_304.jpg)
    and ![inline-image](../images/CH013_305.jpg). It is desired to determine the Kelly
    value. One may approach this problem using approximation. Divide the time interval
    into *T* equal independent steps with the return on *A* 1 in the *t*-th time interval
    being *R* [*t*] which is defined to be a random variable such that
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_306.jpg)'
  prefs: []
  type: TYPE_IMG
- en: so that ![inline-image](../images/CH013_307.jpg) and ![inline-image](../images/CH013_308.jpg).
    The risk-free rate of return in each time interval is also scaled down to ![inline-image](../images/CH013_309.jpg).
    The growth in *T* time intervals is
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_310.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For large *T*, ![inline-image](../images/CH013_311.jpg) obtained above is considered
    to be an approximation of the growth in the time interval which is equal to ![inline-image](../images/CH013_312.jpg).
    Let ![inline-image](../images/CH013_313.jpg). So,
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_314.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The next task is to expand ![inline-image](../images/CH013_315.jpg) as a Taylor
    series around 0\. For *i* ≥ 1, let ![inline-image](../images/CH013_316.jpg) be
    the *i*-th derivative of ![inline-image](../images/CH013_317.jpg). It is possible
    to show that ![inline-image](../images/CH013_318.jpg), ![inline-image](../images/CH013_319.jpg),
    ![inline-image](../images/CH013_320.jpg) and ![inline-image](../images/CH013_321.jpg)
    for ![inline-image](../images/CH013_322.jpg). So,
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_323.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As ![inline-image](../images/CH013_324.jpg), ![inline-image](../images/CH013_325.jpg),
    where
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_326.jpg)(13.24)'
  prefs: []
  type: TYPE_IMG
- en: This ![inline-image](../images/CH013_327.jpg) corresponds to the expectation
    of the logarithm of the growth corresponding to the portfolio where fraction *f*
    is invested in *A* 1 with return determined by the continuous random variable
    *R*. The value of *f* which maximises ([13.24](#eq24)) is ![inline-image](../images/CH013_328.jpg).
    This value is often called the Kelly fraction of investment. The analysis does
    not require *f* to be non-negative. If ![inline-image](../images/CH013_329.jpg),
    then the optimal value ![inline-image](../images/CH013_330.jpg) turns out to be
    negative. This corresponds to short selling of the asset *A* 1\. Also, if ![inline-image](../images/CH013_331.jpg),
    then this corresponds to borrowing at the risk-free interest rate and investing
    in the risky asset. Further, the condition ![inline-image](../images/CH013_332.jpg)
    means that the entire amount is invested in the risky asset.
  prefs: []
  type: TYPE_NORMAL
- en: The above analysis can be extended to cover a portfolio consisting of a risk-free
    asset *A* 0 and one or more risky assets *A* 1,…,*A* [*n*] . Let the rate of return
    of *A* [*i*] be *R* [*i*] with mean ![inline-image](../images/CH013_333.jpg) and
    variance ![inline-image](../images/CH013_334.jpg). Further, let the co-variance
    of *R* [*i*] and *R* *j* be ![inline-image](../images/CH013_335.jpg). We denote
    the variance/co-variance matrix by ![inline-image](../images/CH013_336.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: Suppose a fraction ![inline-image](../images/CH013_337.jpg) is invested in *A*
    0 and the fractions invested in *A* 1,…,*A* [*n*] are ![inline-image](../images/CH013_338.jpg),
    respectively, with ![inline-image](../images/CH013_339.jpg). Let the rate of return
    of the portfolio be *R* with mean *μ* and variance ![inline-image](../images/CH013_340.jpg).
    Then
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_341.jpg)(13.25)'
  prefs: []
  type: TYPE_IMG
- en: Note that both *μ* and ![inline-image](../images/CH013_342.jpg) is expressed
    in terms of ![inline-image](../images/CH013_343.jpg) and does not involve ![inline-image](../images/CH013_344.jpg).
    We consider the previous analysis of a risky asset and a risk-free asset with
    ![inline-image](../images/CH013_345.jpg), i.e. the situation where the entire
    investment is made on the risky asset. In the present case, the risky asset is
    the portfolio built from *A* 0,*A* 1,…,*A* [*n*] with rate of return *R* having
    mean *μ* and variance ![inline-image](../images/CH013_346.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: Using ![inline-image](../images/CH013_347.jpg) in ([13.24](#eq24)), we obtain
    the growth function to be ![inline-image](../images/CH013_348.jpg). Since *μ*
    and ![inline-image](../images/CH013_349.jpg) are functions of ![inline-image](../images/CH013_350.jpg),
    the growth function depends on ![inline-image](../images/CH013_351.jpg). We write
    ![inline-image](../images/CH013_352.jpg) to make this explicit. So, the following
    function needs to be maximised.
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_353.jpg)(13.26)'
  prefs: []
  type: TYPE_IMG
- en: where *μ* and ![inline-image](../images/CH013_354.jpg) are given by ([13.25](#eq25)).
    This is a standard quadratic optimisation problem. The solution is obtained by
    solving the simultaneous linear equations ![inline-image](../images/CH013_355.jpg),
    *i* = 1,…,*n*. Assuming ![inline-image](../images/CH013_356.jpg) is invertible,
    the solution (*f* 1,…,*f* [*n*] ) is obtained to be ![inline-image](../images/CH013_357.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 13.3 Universal Portfolios
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we consider portfolio optimisation from a different angle.
    A portfolio is a distribution of wealth across a number of assets. Trading takes
    place over multiple time periods. For an asset *A*, suppose the price at the beginning
    of a time period be *P* 0 and the price at the end of the time period be *P* 1\.
    Suppose an amount *X* is invested in the asset *A* at the beginning of the time
    period. This allows the purchase of *X*/*P* 0 quantities of *A* at the beginning
    of the time period whose value becomes *P* 1 *X*/*P* 0 at the end of the time
    period. Let *R* = *P* 1/*P* 0 so that the amount *X* grows to *RX* in the time
    period. The quantity *R* is called the price relative of the asset *A* in that
    time period. (Note that the price relative should not be confused with rate of
    return which was also denoted by *R* in the previous sections.) For considering
    the growth of wealth, the actual prices are not important. It is the price relative
    which determines this growth.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose there are *n* assets *A* 1,…,*A* [*n*] . Let the price relatives of
    the assets for time period *t* be denoted as ![inline-image](../images/CH013_358.jpg).
    Let ![inline-image](../images/CH013_359.jpg) be a portfolio where a proportion
    ![inline-image](../images/CH013_360.jpg) is invested in asset *A* [*i*] . Suppose
    *X* 0 is the total amount invested at the beginning of trading, i.e. the amount
    *X* 0 is distributed among the *n* assets as per the portfolio *p*. After one
    time period, the investments in the assets *A* 1,…,*A* [*n*] are ![inline-image](../images/CH013_361.jpg),
    respectively. The total wealth has changed from *X* 0 to *X* 1 = *RX* 0, where
    ![inline-image](../images/CH013_362.jpg). So, the proportions of investments in
    the various assets have changed. Due to the trading in the time period, the portfolio
    *p* has changed to ![inline-image](../images/CH013_363.jpg). At this point, the
    investor has the option of re-distributing the total wealth of *RX* 0 across the
    *n* assets before trading starts in the next time period. Suppose, the investor
    does not perform such re-distribution. Then, trading in the next time period will
    be based on the total investment of *X* 1 distributed according to the portfolio
    ![inline-image](../images/CH013_364.jpg). Proceeding in this manner, it is possible
    to determine the wealth (i.e. total investment in all the assets) at the end of
    *T* time periods for any *T* ≥ 1.
  prefs: []
  type: TYPE_NORMAL
- en: The question that arises is whether the investor should re-distribute the wealth
    at the end of each time period and if so, how should this re-distribution be done?
    The goal of course is to maximise the total wealth after a certain number *T*
    of time periods. The answer to this question depends on the values of the price
    relatives. These values, however, are available in the future. So, any decision
    to re-balance a portfolio cannot be based on the future values of the price relatives.
    Nonetheless, the total wealth at the end of *T* time periods does depend on the
    price relatives and in hindsight perhaps one can determine what would have been
    the best strategy for portfolio re-balancing after each time period. This hindsight
    information, while useful, cannot be used for determining an investment strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Cover (1991), introduced a method for re-balancing portfolios at the end of
    each time period. This method makes no assumption on the price relatives or their
    distribution. Yet, he was able to show that portfolios constructed using his method
    perform well compared to the best portfolio among a large class of natural portfolios.
    In the following, we describe Cover's algorithm and the sense in which his algorithm
    is optimal.
  prefs: []
  type: TYPE_NORMAL
- en: A constant re-balanced portfolio (CRP) is a strategy which redistributes the
    wealth at the end of each period so that the proportions of investments in the
    various assets remain unchanged. Going back to the previous example, starting
    with wealth *X* 0 invested in portfolio ![inline-image](../images/CH013_365.jpg)
    results in wealth *X* 1 = *RX* 0 distributed according to portfolio ![inline-image](../images/CH013_366.jpg).
    An investor following the CRP strategy will re-distribute the total weight *X*
    1 according to *p*, i.e. the amount held in *A* 1 is changed from *X* 1 *R* 1
    *α* 1/*R* to ![inline-image](../images/CH013_367.jpg), the amount held in *A*
    2 is changed from *X* 1 *R* 2 *α* 2/*R* to ![inline-image](../images/CH013_368.jpg),
    and so on. This process may involve buying or selling of the various assets to
    achieve the proportions in the portfolio *p*.
  prefs: []
  type: TYPE_NORMAL
- en: We consider a small theoretical example of when a CRP strategy can be useful.
    Suppose there are two assets *A* 1 and *A* 2\. The price of *A* 1 does not change,
    while the price of *A* 2 alternatively doubles and halves in successive time periods.
    If the total investment is made in any one of these assets, then the wealth does
    not change. Suppose a CRP strategy with *p* = (1/2, 1/2) is used. Let the initial
    investment be *X* 0 which is distributed across the two assets as (*X* 0/2, *X*
    0/2) following *p*. Assume that in the first time period, the price of *A* 2 halves.
    Then at the end of the first time period, the distribution of wealth is (*X* 0/2,
    *X* 0/4) and the total wealth is *X* 0/2 + *X* 0/4 = 3*X* 0/4\. This wealth is
    re-distributed as (3*X* 0/8, 3*X* 0/8) following *p*. In the second time period,
    the price of *A* 2 doubles and so the distribution of wealth becomes (3*X* 0/8,
    3*X* 0/4) for a total wealth of 9*X* 0/8\. So, in two time periods, the wealth
    *X* 0 has grown by a factor of 9/8 to 9*X* 0/8\. It is easy to see that in 2*t*
    time periods, the wealth will grow to (9/8) ^([*t*]) *X* 0\. Thus, the CRP strategy
    has led to an exponential growth in the wealth. The analysis can be extended to
    the case where the wealth of *A* 1 changes by factors of *r* 1 and 1/*r* 1 in
    alternate time intervals and the wealth of *A* 2 changes by factors of *r* 2 and
    1/*r* 2 in alternate time intervals for any *r* 1, *r* 2 > 1.
  prefs: []
  type: TYPE_NORMAL
- en: The above example goes to underline that some CRPs may lead to a significant
    increase in wealth. Cover considers the set of all CRPs. A best CRP is one which
    provides the maximum increase in wealth among all the CRPs. The best CRP depends
    on the price relatives which are not known in advance. Cover shows that his algorithm
    of portfolio selection ensures that the growth of wealth is not much less than
    the best CRP.
  prefs: []
  type: TYPE_NORMAL
- en: Let
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_369.jpg)'
  prefs: []
  type: TYPE_IMG
- en: be the set all possible portfolios over *n* assets *A* 1,…,*A* [*n*] . Note
    that, in this formulation we do not consider negative weights. We consider *T*
    time periods. The price relative for *A* [*i*] in time period *t* will be denoted
    as *r* [*t*],*i* , *t* = 1,…,*T* and *i* = 1,…,*n*. The price relative for all
    the assets in time period *t* will be denoted as **r** [*t*] = (*r* [*t*],1,…,*r*
    [*t*],*n* ). The sequence of price relatives **r** 1,…,**r** [*t*] will be denoted
    as **r** ^((*t*)).
  prefs: []
  type: TYPE_NORMAL
- en: Given a portfolio **p**, by CRP **p** we will denote the CRP strategy executed
    with portfolio **p**, i.e. after each period, the wealth is re-distributed among
    the assets according to the portfolio **p**. Fix a portfolio ![inline-image](../images/CH013_370.jpg).
    Given the initial wealth to be *X* 0, after the first time period the wealth becomes
    ![inline-image](../images/CH013_371.jpg), where (**p**·**r** 1) denotes the dot
    product of **p** and **r** 1 and is equal to ![inline-image](../images/CH013_372.jpg).
    By a similar reasoning, the wealth at the end of second period is *X* 2 = *X*
    1(**p**·**r** 2) = *X* 0(**p**·**r** 1)(**p**·**r** 2). Extending, we have that
    the wealth at the end of *t* time periods is *X* [*t*] = *X* 0(**p**·**r** 1)⋯(**p**·**r**
    [*t*] ). The growth in wealth is *X* [*t*] /*X* 0 and we define
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_373.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let *D* be a probability distribution on the set of all portfolios. Suppose
    a portfolio **p** is picked following *D*. At the end of (*t* − 1) time periods,
    the sequence of price relatives given by **r** ^((*t*−1)) is known. Consider the
    random variable *G* [*t*]−1(**p**, **r** ^((*t*−1))) which determines the growth
    of wealth in (*t* − 1) time periods using CRP **p** . Note that at the end of
    (*t* − 1) time periods, there is no randomness in **r** ^((*t*−1)) and the only
    randomness in *G* [*t*]−1(**p**, **r** ^((*t*−1))) arises from the choice of **p**.
    The expected growth in wealth in (*t* − 1) time periods is ![inline-image](../images/CH013_374.jpg),
    where this expectation is defined as the following integral:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_375.jpg)(13.27)'
  prefs: []
  type: TYPE_IMG
- en: Next consider the random vector
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_376.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The expected value of this vector is ![inline-image](../images/CH013_377.jpg)
    and is defined as the following integral:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_378.jpg)(13.28)'
  prefs: []
  type: TYPE_IMG
- en: 'Cover''s algorithm constructs a sequence of portfolios **u** 1,…,**u** [*T*]
    , where **u** [*t*] is the portfolio to be used in time period *t*. The initial
    portfolio **u** 1 is taken to be the uniform distribution of investment across
    all the *n* assets, i.e. **u** 1 = (1/*n*,…,1/*n*). For ![inline-image](../images/CH013_379.jpg),
    **u** [*t*] is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_380.jpg)(13.29)'
  prefs: []
  type: TYPE_IMG
- en: The sequence u1,…,**u** [*T*] obtained in this manner is called a universal
    sequence of portfolios, and the method for obtaining the sequence is called the
    universal portfolio selection algorithm. Since the portfolios change after each
    time period, a universal sequence of portfolios is not a CRP.
  prefs: []
  type: TYPE_NORMAL
- en: Given an initial investment *X* 0, using CRP **p** , after *T* time periods,
    wealth of CRP **p** is *X* 0 *G* [*T*] (**p**, **r** ^((*T*))). Given a universal
    sequence of portfolios **u** 1,…,**u** [*T*] , the wealth after *T* time periods
    is compactly denoted as ‘wealth of UNIVERSAL’ and is given as ![inline-image](../images/CH013_381.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: Let *U* be the uniform distribution over ![inline-image](../images/CH013_382.jpg).
    Cover showed
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_383.jpg)(13.30)'
  prefs: []
  type: TYPE_IMG
- en: 'Let ‘wealth of best CRP’ denote the maximum wealth achieved by any CRP in *T*
    time periods. The optimality result proved by Cover and Ordentlich (1996) compares
    the ‘wealth of UNIVERSAL’ with the ‘wealth of best CRP’ and is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_384.jpg)(13.31)'
  prefs: []
  type: TYPE_IMG
- en: The lower bound on the ratio is over *T* time periods. The average per period
    ratio is ![inline-image](../images/CH013_385.jpg) which increases to 1 as *T*
    goes to infinity. So, asymptotically, ([13.31](#eq31)) shows that the wealth that
    can be achieved by the universal portfolio selection algorithm is as good as that
    which can be achieved by the best CRP. The remarkable feature of this result is
    that this optimality condition is achieved by the universal portfolio selection
    algorithm without any knowledge of the future price relatives. It is in this sense
    that the algorithm is called universal.
  prefs: []
  type: TYPE_NORMAL
- en: The actual implementation of the universal portfolio selection algorithm given
    by ([13.29](#eq29)) requires the determination of the expectation and hence the
    integrals given by ([13.27](#eq27)) and ([13.28](#eq28)). One way to do this is
    to approximate the integral using discretisation. We discuss this issue, since
    it also lends some insight into the definition of the universal portfolio selection
    algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose that we wish to determine **u** [*t*] , i.e. the universal portfolio
    to be used in time period *t*. At this point, the sequence of price relative **r**
    ^((*t*−1)) has already become available. The integrals required in the determination
    of **u** [*t*] are approximated by sums over a number of suitably chosen portfolios.
    Suppose *N* portfolios **p** 1,…,**p** [*n*] are sampled independently from **P**
    following the distribution *D*. The growth of wealth using ![inline-image](../images/CH013_386.jpg)
    is *G* [*t*]−1(**p** [*k*] , **r** ^((*t*−1))). So, an approximation of ([13.27](#eq27))
    is obtained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_387.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let ![inline-image](../images/CH013_388.jpg), i.e. the portfolio assigns weight
    ![inline-image](../images/CH013_389.jpg) to asset *A* [*i*] . An approximation
    of ([13.28](#eq28)) is obtained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_390.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Writing **u** [*t*] = (*u* [*t*],1,…,*u* [*t*],*n* ), from ([13.29](#eq29)),
    we have
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH013_391.jpg)(13.32)'
  prefs: []
  type: TYPE_IMG
- en: '![display-image](../images/CH013_392.jpg)(13.33)'
  prefs: []
  type: TYPE_IMG
- en: where ![inline-image](../images/CH013_393.jpg). In other words, the *i*-th component
    of **u** [*t*] is obtained as a weighted sum of the *i*-th components (i.e. the
    ![inline-image](../images/CH013_394.jpg)'s) of the sampled portfolios **p** 1,…,**p**
    [*n*] . The weight *w* [*t*]−1,*k* assigned to the portfolio **p** *k* is the
    wealth this portfolio would make using ![inline-image](../images/CH013_395.jpg)
    normalised by the sum total of the wealth that all the *N* portfolios would together
    make.
  prefs: []
  type: TYPE_NORMAL
- en: For a fixed *t*, the computation of the weights *w* [*t*]−1,*k* for *k* = 1,…,*N*
    requires *O*(*Ntn*) time and *O*(*Nt*) space. The number of samples *N* has to
    be sufficiently large for the procedure to yield results of acceptable accuracy.
    This requirement pushes up the time and space requirements of the algorithm. A
    related issue is that of sampling from ![inline-image](../images/CH013_396.jpg)
    following the distribution *D*. In the case where *D* is the uniform distribution,
    there are algorithms for performing this sampling. The more general Dirichlet
    distribution has been proposed for *D*. This makes the sampling problem more complicated,
    though algorithms have been proposed for this task.
  prefs: []
  type: TYPE_NORMAL
- en: '**Notes**'
  prefs: []
  type: TYPE_NORMAL
- en: Markowitz's portfolio optimisation methodology is a cornerstone in mathematical
    finance. Our coverage of the topic has been elementary. There are a number of
    books and online courses which provide more in-depth discussion. We have benefitted
    from some of the notes by Sigman (2005). Cover's algorithm was proposed in Cover
    (1991). There has been a number of later works building on Cover's original ideas.
    Kelly (1956) had originally proposed his idea in the context of information theory.
    Our description of Kelly criterion is based on Thorp (2006) and Hung (2010).
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Measures of Risk
  prefs: []
  type: TYPE_NORMAL
- en: The goal of an investment is to earn a return. Investments such as government
    bonds and bank deposits earn a fixed rate of return. Such investments are considered
    to be free of any risk. Investments in other financial instruments such as stocks
    and options have the possibility of providing higher rates of returns. This is
    counter-balanced by the possibility of losing money in the investment. Therein
    arises the risk of the investment. There has been a great deal of work on modelling
    risk and using it as a tool in deciding upon an investment. In this chapter, we
    briefly consider some of the important measures of risk that have been considered
    in the literature.
  prefs: []
  type: TYPE_NORMAL
- en: Actually, we have already considered aspects of risk in the previous chapter.
    Considering the return to be a random variable (having at least two moments),
    the standard deviation captures the variability in the return. This is a measure
    of risk. Another risk measure that we have encountered is the *β* in the CAPM
    which is a measure of the undiversifiable risk. In this chapter, we look at two
    other measures of risk, namely the value-at-risk (VaR) and the conditional value-at-risk
    (CVaR). Also, we will consider the Sharpe ratio which is essentially a reward
    to risk ratio. Finally, we briefly describe the theory of Copulas and their application
    to risk assessment.
  prefs: []
  type: TYPE_NORMAL
- en: 14.1 VaR and CVaR
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One way of obtaining an idea of risk of an investment is to obtain an idea of
    the loss that can potentially arise from the investment. Let *X* denote the loss
    that can arise from an investment. In general, *X* will be a random variable.
    So, one can meaningfully ask for the chance that the loss *X* will be more than
    a specified value. One can turn the question around to make it more meaningful
    to the investor. The investor fixes a probability *α* and wants to know the minimum
    number *x* such that the probability of the loss being less than or equal to *x*
    is at least *α*. In other words, the investor wishes to know the lower *α*-percentile
    of the loss *X*. The number *x* depends on *α*. As *α* increases, so does the
    value of *x*. The value-at-risk ![inline-image](../images/CH014_1.jpg) at level
    ![inline-image](../images/CH014_2.jpg) is the number *x*. More formally,
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH014_3.jpg)(14.1)'
  prefs: []
  type: TYPE_IMG
- en: Let *F* *X* (*x*) be the (cumulative) distribution function for the random variable
    *X*. Then it follows that ![inline-image](../images/CH014_4.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: We have considered *X* to be the loss of an investment. The definition in ([14.1](#eq1)),
    however, holds for any random variable *X* irrespective of its interpretation
    as the loss of an investment. This makes VaR a much used concept in various areas
    of engineering.
  prefs: []
  type: TYPE_NORMAL
- en: Coming back to the interpretation of *X* being the loss in an investment, we
    consider some examples to illustrate the definition in ([14.1](#eq1)). Suppose
    ![inline-image](../images/CH014_5.jpg) and ![inline-image](../images/CH014_6.jpg).
    This tells an investor that with at least 95% chance the loss will be at most
    *x* 0, or, equivalently, the possiblity of the loss being more than *x* 0 is at
    most 5%. Next, suppose the investor wishes to obtain similar statements for ![inline-image](../images/CH014_7.jpg).
    Let VaR0.95(*X*) = *x* 1\. So, with at least 99% chance the loss will be at most
    *x* 1, or, equivalently, the possiblity of the loss being *x* 1 or more is at
    most 1%. Note that *x* 1 will in general be more than *x* 0\. So, by having a
    higher threshold of loss, an investor is able to reduce the probability of the
    loss.
  prefs: []
  type: TYPE_NORMAL
- en: The random variable *X* can model various kinds of losses. If an investor is
    interested in possible loss on a single day, then *X* will denote the day loss
    function. More generally, *X* can denote the loss incurred over a fixed number
    of days. In any such situation, ![inline-image](../images/CH014_8.jpg) will capture
    the threshold of loss modelled using *X* at the level *α*.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose *X* follows a normal distribution with mean ![inline-image](../images/CH014_9.jpg)
    and variance ![inline-image](../images/CH014_10.jpg). Then ![inline-image](../images/CH014_11.jpg)
    follows the standard normal distribution denoted by ![inline-image](../images/CH014_12.jpg).
    Suppose ![inline-image](../images/CH014_13.jpg). Then ![inline-image](../images/CH014_14.jpg).
    So, ![inline-image](../images/CH014_15.jpg), i.e. ![inline-image](../images/CH014_16.jpg)
    and so ![inline-image](../images/CH014_17.jpg). For a fixed *μ* and level *α*,
    this shows that ![inline-image](../images/CH014_18.jpg) increases with *σ*. This
    corresponds with the intuition used earlier that the standard deviation is a measure
    of risk.
  prefs: []
  type: TYPE_NORMAL
- en: 'The VaR provides an investor with threshold information. For a level *α*, it
    specifies the threshold *x* such that the loss will stay below *x* with probability
    at least *α*. The threshold ![inline-image](../images/CH014_19.jpg) essentially
    defines a tail of the loss distribution ![inline-image](../images/CH014_20.jpg).
    This threshold does not say anything about what happens in the tail itself. An
    investor may be interested in this information. The reasoning might be as follows:
    OK, if *α* is small, the chance that the loss will be more than ![inline-image](../images/CH014_21.jpg)
    is small, but, nonetheless, such an event might occur; in case the event occurs,
    then is it possible to quantify the *amount* of loss that would be incurred?'
  prefs: []
  type: TYPE_NORMAL
- en: This changes the nature of the problem in two fundamental ways. First, instead
    of ignoring the tail of the distribution beyond the threshold, the investor is
    actually interested in what is happening in the tail. Second, instead of a threshold,
    the investor is asking for an estimate of the loss. The conditional value-at-risk,
    ![inline-image](../images/CH014_22.jpg) at level *α*, is one way of addressing
    these two issues.
  prefs: []
  type: TYPE_NORMAL
- en: Before getting into the formal definition, let us try to understand the problem
    in a somewhat intuitive manner. Once *α* is fixed, the value ![inline-image](../images/CH014_23.jpg)
    is determined. Let *S* be the set of values greater than *x* that *X* can possibly
    take. The values in *S* are the possible values of the loss which are greater
    than *x*. An average of these losses is an estimate of the loss if the loss happens
    to cross the threshold *x*. For computing the average, the original distribution
    of *X* has to be normalised by ![inline-image](../images/CH014_24.jpg) which is
    the probability that *X* belongs to *S*. So, roughly speaking, one may take the
    average of the losses greater than *x* to be the conditional value-at-risk. This
    intuition, though helpful, ignores certain subtleties. We explain some of these
    subtleties after providing the formal definition of ![inline-image](../images/CH014_25.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let *X* be a random variable with a distribution function ![inline-image](../images/CH014_26.jpg).
    Fix a level *α* and let ![inline-image](../images/CH014_27.jpg). We define the
    distribution function ![inline-image](../images/CH014_28.jpg) as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH014_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The entire probability mass of ![inline-image](../images/CH014_30.jpg) lies
    in the set *S* = {*z* : *z* ≥ *x* 0} and in this set ![inline-image](../images/CH014_31.jpg)
    is essentially a translated and normalised version of ![inline-image](../images/CH014_32.jpg).
    Let *Z* be a random variable following the distribution ![inline-image](../images/CH014_33.jpg).
    Then ![inline-image](../images/CH014_34.jpg) is defined to be the expectation
    of *Z*, i.e.'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH014_35.jpg)(14.2)'
  prefs: []
  type: TYPE_IMG
- en: This may seem to confirm that ![inline-image](../images/CH014_36.jpg) is indeed
    the average of losses greater than *x* 0, but, in general, this is not correct.
    If *X* follows a discrete distribution (or a mix of continuous and discrete distributions
    with probability atoms), there are situations when the basic intuition needs to
    be somewhat modified.
  prefs: []
  type: TYPE_NORMAL
- en: For a fixed level ![inline-image](../images/CH014_37.jpg) with ![inline-image](../images/CH014_38.jpg),
    it may indeed turn out that *F* *X* (*x* 0) = 1 as we will see later. If *F* *X*
    (*x* 0) = 1, then *x* 0 is the highest loss that can occur and in this case ![inline-image](../images/CH014_39.jpg).
    Now, suppose that *F* *X* (*x* 0) < 1\. So, there are values greater than *x*
    0 that *X* can take. In this case, define the ‘upper CVaR’ to be the conditional
    expectation of *X* subject to *X* > *x* 0, i.e.
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH014_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let ![inline-image](../images/CH014_41.jpg). Then, it can be shown that
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH014_42.jpg)(14.3)'
  prefs: []
  type: TYPE_IMG
- en: The equivalent definition of ![inline-image](../images/CH014_43.jpg) given by
    ([14.3](#eq3)) makes it easy to compute its value in certain cases. We consider
    some examples.
  prefs: []
  type: TYPE_NORMAL
- en: Let *X* be a discrete random variable taking five possible values ![inline-image](../images/CH014_44.jpg)
    each with probability ![inline-image](../images/CH014_45.jpg). Such a loss distribution
    can arise from a scenario analysis. We consider three values of *α* and compute
    ![inline-image](../images/CH014_46.jpg) and ![inline-image](../images/CH014_47.jpg)
    in each of these cases. These computations bring out the subtleties associated
    with the computation of ![inline-image](../images/CH014_48.jpg) and highlight
    why in general this cannot be considered to be the average of values greater than
    ![inline-image](../images/CH014_49.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'Case ![inline-image](../images/CH014_50.jpg): The minimum value *x* 0 such
    that ![inline-image](../images/CH014_51.jpg) is ![inline-image](../images/CH014_52.jpg).
    So, ![inline-image](../images/CH014_53.jpg). We have ![inline-image](../images/CH014_54.jpg)
    and so ![inline-image](../images/CH014_55.jpg) can be defined. The total probability
    that *X* assigns to ![inline-image](../images/CH014_56.jpg) and ![inline-image](../images/CH014_57.jpg)
    is ![inline-image](../images/CH014_58.jpg). Conditioned on ![inline-image](../images/CH014_59.jpg),
    the probabilities that *X* takes the values ![inline-image](../images/CH014_60.jpg)
    and ![inline-image](../images/CH014_61.jpg) are both equal to ![inline-image](../images/CH014_62.jpg).
    So, ![inline-image](../images/CH014_63.jpg). Since ![inline-image](../images/CH014_64.jpg),
    the value of ![inline-image](../images/CH014_65.jpg) and so from ([14.3](#eq3)),
    ![inline-image](../images/CH014_66.jpg). In this case, we indeed have that ![inline-image](../images/CH014_67.jpg)
    is the average of the losses greater than ![inline-image](../images/CH014_68.jpg).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Case ![inline-image](../images/CH014_69.jpg): The minimum value *x* 0 such
    that ![inline-image](../images/CH014_70.jpg) is *x* 0 = *ℓ* 3\. So, again we have
    ![inline-image](../images/CH014_71.jpg), ![inline-image](../images/CH014_72.jpg)
    and ![inline-image](../images/CH014_73.jpg). The value of ![inline-image](../images/CH014_74.jpg),
    however, changes. We have ![inline-image](../images/CH014_75.jpg) and so from
    ([14.3](#eq3)) ![inline-image](../images/CH014_76.jpg). Note that in this case,
    the value of ![inline-image](../images/CH014_77.jpg) is not equal to the average
    of the losses greater than ![inline-image](../images/CH014_78.jpg). The reason
    is that the value of *α* splits the probability atom at ![inline-image](../images/CH014_79.jpg).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Case ![inline-image](../images/CH014_80.jpg): The minimum value *x* 0 such
    that ![inline-image](../images/CH014_81.jpg) is ![inline-image](../images/CH014_82.jpg).
    So, ![inline-image](../images/CH014_83.jpg) and ![inline-image](../images/CH014_84.jpg).
    In this case, ![inline-image](../images/CH014_85.jpg).'
  prefs: []
  type: TYPE_NORMAL
- en: The comparative analysis between the efficacies of VaR and CVaR is rather long.
    We provide a brief discussion. Clearly VaR is a reasonably simple way to understand
    risk management issue. It provides some basic information about the risk which
    may be sufficient if an investor is not overly concerned about the risk. On the
    other hand, if an investor wishes to obtain more conservative idea of the risk,
    then CVaR is to be preferred over VaR. One problem with CVaR is that it requires
    detailed information about the tail of the distribution of the loss. In general,
    such information may not be available. If estimates about the tail are made from
    historical data, then there is the potential that errors in such estimates can
    affect the estimate of CVaR. In summary, both VaR and CVaR have their uses and
    areas of applicability, and both these measures are widely used in the financial
    world.
  prefs: []
  type: TYPE_NORMAL
- en: 14.2 Sharpe Ratio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A reward-to-variability measure was introduced by Sharpe (1966) which later
    came to be called the Sharpe ratio. This ratio has been used quite extensively
    for making investment decisions. In this section, we provide a brief description
    of the some aspects of the Sharpe ratio.
  prefs: []
  type: TYPE_NORMAL
- en: Let *F* be a fund or a portfolio and denote by *R* *F* the rate of return on
    the fund *F*. This return is to be compared to a benchmark portfolio *B* whose
    rate of return is *R* *B* . Both *R* *F* and *R* *B* are random variables. The
    differential rate of return *D* is the difference in the rates of returns from
    *F* and *B* and is defined to be *D* = *R* *F* − *R* *B* . Let ![inline-image](../images/CH014_86.jpg)
    and ![inline-image](../images/CH014_87.jpg) denote the mean and standard deviation
    of *D*. The Sharpe ratio *S* for the fund *F* with respect to the benchmark *B*
    is defined to be
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH014_88.jpg)(14.4)'
  prefs: []
  type: TYPE_IMG
- en: In theoretical analysis, one may use ([14.4](#eq4)) for analysis of investment
    strategies. An estimate ![inline-image](../images/CH014_89.jpg) of *S* can be
    obtained from historical data. To do this, one obtains an estimate ![inline-image](../images/CH014_90.jpg)
    of ![inline-image](../images/CH014_91.jpg) and ![inline-image](../images/CH014_92.jpg)
    of ![inline-image](../images/CH014_93.jpg) and then sets ![inline-image](../images/CH014_94.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: The Sharpe ratio as defined in ([14.4](#eq4)) refers to a single period. This
    can be extended to multiple periods. Assume that the rates of returns over multiple
    periods are obtained by summing the individual single period rates of returns.
    Also, assume that the rates of returns in these individual periods are uncorrelated.
    Let *D* 1 and *S* 1 denote the single-period differential rate of return and the
    Sharpe ratio, respectively. Similarly, let *D* [*T*] and *S* [*T*] denote the
    differential rate of return and Sharpe ratio over *T* time periods. Then *D* [*T*]
    = *TD* 1 which implies that ![inline-image](../images/CH014_95.jpg) and ![inline-image](../images/CH014_96.jpg)
    (due to the individual period rates of returns being uncorrelated). From this,
    we have ![inline-image](../images/CH014_97.jpg). So, the Sharpe ratio over multiple
    periods is a function of time. In general, the assumption about uncorrelatedness
    of the individual period rates of returns will not hold, and the computation of
    the Sharpe ratio in such cases will be more complicated.
  prefs: []
  type: TYPE_NORMAL
- en: '**Remarks:**'
  prefs: []
  type: TYPE_NORMAL
- en: (1)In the original definition of the Sharpe ratio, the benchmark portfolio *B*
    was taken to be a risk-free investment. In this case, the rate of return *R* *B*
    is the risk-free rate of return and as such is a fixed value without any randomness.(2)Some
    authors have defined the Sharpe ratio more generally to be the ratio of the mean
    to the variance of a random variable. In the context of investment, this can be
    confusing, since one may then define the Sharpe ratio of an investment as the
    mean-to-standard deviation ratio of its rate of return. This loses context, since
    the goal of the Sharpe ratio is to measure the reward to variability ratio of
    the differential rate of return of the investment with respect to a benchmark.
  prefs: []
  type: TYPE_NORMAL
- en: A zero-investment strategy is one which does not involve any outlay of money
    as investment but provides a return sometime in the future. This return would
    depend on the market and could turn out to be positive, zero or negative. Given
    a fund *F* and a benchmark portfolio *B*, a zero-investment strategy would be
    to take a short position in *B* and a long position in *F*. In other words, funds
    borrowed from *B* would be invested in *F*, i.e. *B* would be used to leverage
    *F*. The return on such a zero-investment strategy is clearly *D* = *R* *F* −
    *R* [*B*] , which is the differential return used in the definition of the Sharpe
    ratio. It is this connection which makes the Sharpe ratio a useful tool for analysing
    zero-investment strategies.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the following investment scenario. An investor has invested an amount
    *X* in an asset (or portfolio) *A* with a rate of return *R* *A* . Additionally,
    the investor is considering the possibility of a zero-investment strategy, i.e.
    the investor would like to take a short position in some benchmark portfolio (or
    a risk-free asset) *B* and use the money to take a long position in a fund *F*.
    Suppose the rate of return of this zero-investment strategy is *D*. To actually
    carry out this strategy, the investor would draw an amount *V* from *B* and invest
    it in *F*. The Sharpe ratio of this zero-investment strategy is ![inline-image](../images/CH014_98.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: The amount *V* is a notional value to the investor. The relative position of
    the investor is the ratio of the notional value *V* to the amount *X* that is
    already invested in *A*. Let ![inline-image](../images/CH014_99.jpg) denote this
    relative position. To some extent, the relative position captures the risk to
    the investor. A better measure of the risk position is ![inline-image](../images/CH014_100.jpg)
    which is the product of the relative position and the variability in the differential
    return. In fact, the investor would prefer to fix the value of *k* and then determine
    *p* (assuming that an estimate of ![inline-image](../images/CH014_101.jpg) is
    available). This value of *p* along with the amount *X* will then determine the
    notional value *V* to be leveraged from *B* and used in *F* for the zero-investment
    strategy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Considering both the original investment of *X* in *A* and the zero-investment
    strategy, the total amount at the end of the period is *X*(1 + *R* *A* ) + *VD*
    = *X*(1 + *R* *A* ) + *XpD* and so the total rate of return *R* is *R* = *R* *A*
    + *pD*. Let *ρ* denote the co-variance between the rates of returns on the investment
    in *A* and the zero-investment strategy. The expected value of *R* and its variance
    can be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH014_102.jpg)(14.5)'
  prefs: []
  type: TYPE_IMG
- en: '![display-image](../images/CH014_103.jpg)(14.6)'
  prefs: []
  type: TYPE_IMG
- en: 'Suppose there are several possible zero-investment strategies having different
    values of the Sharpe ratio. Which one should an investor use? From ([14.5](#eq5)),
    we see that for a fixed value of ![inline-image](../images/CH014_104.jpg), the
    expectation of the overall rate of return is maximised by choosing the zero-investment
    strategy with the highest Sharpe ratio. There is, of course, the issue of capturing
    the risk. Several scenarios may arise:'
  prefs: []
  type: TYPE_NORMAL
- en: (1)Suppose that the asset *A* is risk-free, i.e. the amount *X* is invested
    in a risk-free asset. Then ![inline-image](../images/CH014_105.jpg) and so the
    overall risk is ![inline-image](../images/CH014_106.jpg). In such a situation,
    the investor is justified in choosing the zero-investment strategy with the highest
    Sharpe ratio.(2)Suppose the asset *A* is risky, i.e. ![inline-image](../images/CH014_107.jpg).
    Further, assume that the zero correlation strategies being considered by the investor
    has the same (or, similar) correlations with *A*. In other words, the values of
    the correlation coefficient *ρ* of *A* with the various zero-investment strategies
    under consideration are the same. So, the overall risk ![inline-image](../images/CH014_108.jpg)
    remains the same for all the zero-investment strategies. In this case also the
    investor is justified in choosing the zero-investment strategy having the maximum
    Sharpe ratio.(3)In the more general situation (not covered by either of the two
    cases above), the correlations of the various zero-correlations strategies with
    *A* can have significant differences. In this case, choosing the zero-correlation
    strategy with the maximum value of the Sharpe ratio need not be the best investment
    strategy since the risk could also be quantitatively higher. It might be better
    to choose a zero-investment strategy with a lower Sharpe ratio and also having
    a lower value of the correlation with *A* leading to a lower risk.
  prefs: []
  type: TYPE_NORMAL
- en: The scenario considered above was to invest in a single zero-investment strategy
    along with the existing investment in the asset (or, portfolio) *A*. This scenario
    can be extended to cover the case where the investor wishes to invest in multiple
    zero-investment strategies along with the investment *X* in *A* having rate of
    return *R*. Suppose there are *s* zero-investment strategies with the notional
    value and the differential rate of return of the *i*-th zero-investment strategy
    being *V* [*i*] and *D* [*i*] respectively, *i* = 1,…,*s*. We assume that *R*,*D*
    1,…,*D* *s* are pairwise uncorrelated.
  prefs: []
  type: TYPE_NORMAL
- en: Let ![inline-image](../images/CH014_109.jpg) be the relative position, ![inline-image](../images/CH014_110.jpg)
    be the risk position, and ![inline-image](../images/CH014_111.jpg) be the Sharpe
    ratio of the *i*-th zero-investment strategy. Then the overall return is ![inline-image](../images/CH014_112.jpg)
    and so ![inline-image](../images/CH014_113.jpg) and ![inline-image](../images/CH014_114.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: Suppose that the investor wishes to maximise a risk-adjusted expected return.
    Let *τ* denote a level of risk tolerance and consider the problem of determining
    *k* 1,…,*k* *s* such that ![inline-image](../images/CH014_115.jpg) is maximised.
    Using the expressions for ![inline-image](../images/CH014_116.jpg) and ![inline-image](../images/CH014_117.jpg),
    this amounts to maximising ![inline-image](../images/CH014_118.jpg). Since ![inline-image](../images/CH014_119.jpg)
    and ![inline-image](../images/CH014_120.jpg) are constant values, the problem
    reduces to determining ![inline-image](../images/CH014_121.jpg) such that ![inline-image](../images/CH014_122.jpg)
    is maximised. Setting the partial derivatives of this quantity with respect to
    the ![inline-image](../images/CH014_123.jpg)'s to zero and solving provides the
    optimal value of ![inline-image](../images/CH014_124.jpg) to be ![inline-image](../images/CH014_125.jpg).
    This shows that for a fixed value of τ, the risk levels of the zero-investment
    strategies should be proportional to their Sharpe ratios.
  prefs: []
  type: TYPE_NORMAL
- en: 14.3 Copula
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The notion of copula is a basic tool in mathematical statistics. It has been
    used in modelling certain kinds of financial risks. In this section, we provide
    a brief description of copula and mention a few applications to finance.
  prefs: []
  type: TYPE_NORMAL
- en: Formally, a copula is a joint distribution of random variables *U* 1,…,*U* [*n*]
    such that the marginal distribution of *U* [*i*] , *i* = 1,…,*n*, is uniform over
    (0, 1). The term copula is also used to denote the joint cumulative distribution
    function of *U* 1,…,*U* [*n*] .
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH014_126.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that since *U* [*i*] is uniform over (0, 1), Pr[*U* [*i*] ≤ *u* [*i*] ]
    = *u* [*i*] and so if *U* 1,…,*U* [*n*] are independent, it follows that ![inline-image](../images/CH014_127.jpg).
    Also, if *U* 1 = ⋯ = *U* [*n*] , then ![inline-image](../images/CH014_128.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: Copula is a Latin word meaning a link or a tie. The naming of the above concept
    as copula arises from Sklar's theorem which states the following. Let *X* 1,…,*X*
    [*n*] be random variables with joint cumulative distribution *F*(*x* 1,…,*x* [*n*]
    ) = Pr[*X* 1 ≤ *x* 1,…,*X* [*n*] ≤ *x* [*n*] ] and marginals *F* [*i*] (*x*) =
    Pr[*X* [*i*] ≤ *x*]; then there exists a copula *C* such that
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH014_129.jpg)(14.7)'
  prefs: []
  type: TYPE_IMG
- en: Further, if each ![inline-image](../images/CH014_130.jpg) is continuous, then
    *C* is unique.
  prefs: []
  type: TYPE_NORMAL
- en: So, a copula allows the linking of the marginal distributions to the joint distribution.
    The proof in the case where all ![inline-image](../images/CH014_131.jpg) are continuous
    is simple and illustrative. Since ![inline-image](../images/CH014_132.jpg) is
    continuous, there exists an inverse function ![inline-image](../images/CH014_133.jpg)
    such that ![inline-image](../images/CH014_134.jpg) for all ![inline-image](../images/CH014_135.jpg).
    Define *U* [*i*] = *F* [*i*] (*X* [*i*] ). Then *U* [*i*] takes values in (0,
    1) and
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH014_136.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In other words, *U* [*i*] is uniform over (0, 1). So, we have a set of random
    variables *U* 1,…,*U* [*n*] such that the marginal distributions of *U* [*i*]
    are all uniform over (0, 1). The joint distribution of *U* 1,…,*U* [*n*] is therefore
    a copula. Let *C* denote the joint distribution of *U* 1,…,*U* [*n*] . Then
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH014_137.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A consequence of ([14.7](#eq7)) is that translating or scaling the random variables
    *X* 1,…,*X* [*n*] does not change the copula. Let ![inline-image](../images/CH014_138.jpg),
    *i* = 1,…,*n*. Then the copula connecting the marginals to the joint distribution
    of *Y* 1,…,*Y* [*n*] is the same as that connecting the marginals to the joint
    distribution of *X* 1,…,*X* [*n*] . To see this, let *G*(*y* 1,…,*y* [*n*] ) be
    the joint distribution of *Y* 1,…,*Y* [*n*] and *G* [*i*] (*y*) be the marginal
    distribution of *Y* [*i*] . Then
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH014_139.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let *f* be the joint density function of *X* 1,…,*X* [*n*] and *f* [*i*] ,
    *i* = 1,…,*n*, be the density function of the marginal distribution ![inline-image](../images/CH014_140.jpg).
    From ([14.7](#eq7)), it follows that the joint density function *c* of the copula
    *C* is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH014_141.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In other words, the joint density function of the copula is the ratio of the
    original joint density function to the product of the density functions of the
    marginals.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose that the inverse functions of the marginals exist. Then, from ([14.7](#eq7)),
    we have
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH014_142.jpg)(14.8)'
  prefs: []
  type: TYPE_IMG
- en: 'So, ([14.8](#eq8)) shows that for any joint distribution *F* whose marginals
    have inverses, it is possible to extract a copula. This gives a method for obtaining
    copulas from well-known joint distributions. Two important copulas are obtained
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Gaussian copula:* Such a copula is obtained by using multivariate normal ![inline-image](../images/CH014_143.jpg)
    for *F* in ([14.8](#eq8)).'
  prefs: []
  type: TYPE_NORMAL
- en: '*t-copula:* Such a copula is obtained by using the multivariate *t*-distribution
    ![inline-image](../images/CH014_144.jpg) for *F* in ([14.8](#eq8)).'
  prefs: []
  type: TYPE_NORMAL
- en: Since translation and scaling does not change the copula, in both of the above
    cases, we may set ![inline-image](../images/CH014_145.jpg) and ![inline-image](../images/CH014_146.jpg),
    where ![inline-image](../images/CH014_147.jpg) is a correlation matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Let us now briefly consider applications of copulas to finance.
  prefs: []
  type: TYPE_NORMAL
- en: 14.3.1 Portfolio Risk
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Suppose there is a portfolio consisting of *n* bonds. The bonds receive ratings,
    and the value of a bond depends on its ratings. The possible ratings that a bond
    may receive is a finite non-empty set. Consider the *i*-th bond. At any time *t*,
    its rating is determined by a function ![inline-image](../images/CH014_148.jpg).
    So, the value of the *i*-th bond is a function ![inline-image](../images/CH014_149.jpg).
    Consequently, the value of the portfolio at time *t* is ![inline-image](../images/CH014_150.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: The value of the portfolio changes with changes in the ratings of the individual
    bonds. To determine the change in the value of the portfolio, it is required to
    model how the ratings of the bonds change. It would not be proper to assume that
    the changes in the ratings of the individual bonds are independent. So, we need
    to consider the joint distribution of the changes in the ratings of the individual
    bonds from time *t* to time ![inline-image](../images/CH014_151.jpg). Copulas
    are used to model this joint distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose ![inline-image](../images/CH014_152.jpg) and ![inline-image](../images/CH014_153.jpg)
    are two possible ratings. Consider the marginal transition probability
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH014_154.jpg)(14.9)'
  prefs: []
  type: TYPE_IMG
- en: Previously available data about the *i*-th bond can be used to estimate this
    transition probability. As the first step towards applying copula, we introduce
    a random variable *U* [*i*] , corresponding to the *i*-th bond, which is uniform
    over (0, 1). As ![inline-image](../images/CH014_155.jpg) ranges over the set of
    possible ratings, the corresponding probabilities in ([14.9](#eq9)) sum to one.
    So, we can divide the interval (0, 1) into sub-intervals, where the lengths of
    the sub-intervals are the probabilities given by ([14.9](#eq9)). To each such
    sub-interval, we associate the corresponding value of ![inline-image](../images/CH014_156.jpg).
    As a result, the function ![inline-image](../images/CH014_157.jpg) can be considered
    to be a function of the random variable *U* [*i*] . Consequently, the question
    of modelling the joint transition probabilities boils down to that of modelling
    the joint distribution for *U* 1,…,*U* [*n*] , where each *U* [*i*] is uniform
    over (0, 1). A copula is required to model the joint distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Let ![inline-image](../images/CH014_158.jpg). Then *Z* [*i*] follows ![inline-image](../images/CH014_159.jpg).
    The question then boils down to what should be the joint distribution of *Z* 1,…,*Z*
    [*n*] when the marginals are ![inline-image](../images/CH014_160.jpg). The natural
    choice is the multivariate normal distribution *N*(0, ***R*** ). Equivalently,
    one may consider the Gaussian copula defined by ![inline-image](../images/CH014_161.jpg).
    The particular choice of the correlation matrix ** *R* ** is important and depends
    on a number of factors. These considerations are rather detailed and we skip the
    issue of the choice of ***R*** .
  prefs: []
  type: TYPE_NORMAL
- en: 14.3.2 Tail Dependence and Tail Correlation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A basic issue in risk management is the tail of the distribution of losses.
    It is possible that large losses in a portfolio are caused by simultaneous large
    moves in several components. Consequently, it is of interest to be able to model
    the probability of simultaneous extremes in two or more variables.
  prefs: []
  type: TYPE_NORMAL
- en: For simplicity, we consider two random variables *X* 1 and *X* 2 whose joint
    probability distribution is linked by a copula *C* to their marginals. Assume
    that the marginals have inverses. The lower tail dependence of *X* 1 and *X* 2
    is defined to be
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH014_162.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It is of interest to be able to compute the lower tail dependence. This can
    be expressed in terms of the copula *C* as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH014_163.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, ![inline-image](../images/CH014_164.jpg). This calculation also shows that
    the tail dependence is symmetric, i.e. the tail dependence of *X* 1, *X* 2 is
    the same as that of *X* 2, *X* 1\. Being able to express the tail dependence in
    terms of copula allows its computation. The Gaussian copula has the property that
    its tail dependence is 0 regardless of the correlation matrix. On the other hand,
    the *t*-copula has positive tail dependendence even when *X* 1 and *X* 2 are uncorrelated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let *I* [*i*] be the indicator variable for the event ![inline-image](../images/CH014_165.jpg),
    *i* = 1, 2\. For example, *I* [*i*] could be the indicator that the *i*-th bond
    in a portfolio defaults. Then *E*[*I* [*i*] ] = *u* and the standard deviation
    of *I* [*i*] is ![inline-image](../images/CH014_166.jpg). The expectation of *I*
    1 *I* 2 is computed as ![inline-image](../images/CH014_167.jpg). Thus, the correlation
    of *I* 1 and *I* 2 is computed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH014_168.jpg)(14.10)'
  prefs: []
  type: TYPE_IMG
- en: The lower tail correlation of *X* 1 and *X* 2 is defined to be
  prefs: []
  type: TYPE_NORMAL
- en: '![display-image](../images/CH014_169.jpg)'
  prefs: []
  type: TYPE_IMG
- en: which from ([14.10](#eq10)) is seen to be equal to ![inline-image](../images/CH014_170.jpg).
    So, the lower tail correlation is the same as the lower tail dependence.
  prefs: []
  type: TYPE_NORMAL
- en: '**Remark:** Similar to the lower tail dependence, it is possible to define
    the upper tail dependence which can then be expressed in terms of survival copula
    which is a concept similar to that of copula. The properties of upper tail dependence
    are similar to those of the lower tail dependence. The same holds for upper tail
    correlation. We omit these details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Notes**'
  prefs: []
  type: TYPE_NORMAL
- en: Our description of VaR and CVaR is based on Sarykalin, Serraino, and Uryasev
    (2008). The exposition of the Sharpe ratio is from Sharpe (1994). There is a fair
    amount of literature on copula theory both in the context of statistics and its
    application to finance. Our description of copulas is based on the material which
    is part of the course ‘Statistics and Financial Risk’ at the North Carolina State
    University available at [https://www.stat.ncsu.edu/people/bloomfield/courses/st810j/](https://www.stat.ncsu.edu/people/bloomfield/courses/st810j/)
    (Accessed on November 27, 2019).
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: High-frequency Trading
  prefs: []
  type: TYPE_NORMAL
- en: High-frequency trading (HFT) is a form of algorithmic trading. There is no clear-cut
    definition of HFT, though there are some characteristics of HFT activity. For
    one thing, all trading is done by a computer. The trader designs and implements
    an HFT algorithm which runs on very fast computers. The computers receive trading-related
    information from available sources. Such sources include available public information
    (such as stock quotes and other order book information) from one or more stock
    markets and also available news feeds. Based on such information, the HFT algorithm
    decides on the trades. This decision includes the assets to be traded and the
    price and the volume of the trade. Once such decisions are made, the relevant
    orders are sent to the appropriate stock markets. Apart from the initial design
    of the algorithm and subsequent tuning of its top-level parameters, there is no
    human element involved in the entire trading activity.
  prefs: []
  type: TYPE_NORMAL
- en: For any trader, the order-to-trade ratio is the number of orders placed by the
    trader in the market divided by the number of orders that are actually filled
    (i.e. executed). Not all orders are filled. One way in which an order might not
    be filled is for it to expire before it can be filled. Alternatively, the trader
    may send a request to modify or cancel the order before it is filled. A high order-to-trade
    ratio typically indicates that the trader has placed many orders, but has modified
    or cancelled them before they could be executed. Usually, HFT leads to high order-to-trade
    ratios. Another trading parameter is the turnover rate. This refers to the total
    value of stock traded in a unit of time. HFT usually has a high turnover rate.
  prefs: []
  type: TYPE_NORMAL
- en: The speed of trading is of utmost importance in HFT strategies. This speed is
    determined by the time for information to reach the trader's computers, the time
    to reach the trading decision and the time to place an order on a stock exchange.
    The time to reach the trading decision is determined by the complexity of the
    algorithm which makes the decision and the speed of the computer on which the
    algorithm is executed. The communication times (i.e. the time for information
    to reach the trading computer and the time for the orders to reach the stock exchange)
    are determined by the network delays. This time can be reduced by reducing the
    distance between the stock exchange and the trading computer and by using very
    fast networks. Co-location is a paid facility provided by an exchange to place
    the trading computers in the same data centres that house the exchange's computer
    servers. This ensures that the geographical distance between the source of information
    and the trading computer is reduced to the minimum possible. In addition, trading
    firms use ultra-low latency direct market access (ULLDMA) to ensure that network
    delays are minimised.
  prefs: []
  type: TYPE_NORMAL
- en: In many cases, HFT strategies are essentially arbitrage opportunities which
    exploit market inefficiencies. Since market inefficiencies last for very small
    intervals of time, the speed of detecting and leveraging such opportunities is
    of crucial importance. This motivates the need for high-speed trading as explained
    above.
  prefs: []
  type: TYPE_NORMAL
- en: HFT firms usually do not hold long-term positions, utilise significant capital
    or maintain portfolios for a long time. Rather, such trading moves in and out
    of short-term positions at high volumes and high speeds. The amount of profit
    per trade is usually very small. The small margin is compensated by the high volume
    of trade that HFT typically makes.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned above, HFT firms employ proprietary trading algorithms. As such,
    the exact details of such algorithms are not available. There are, however, some
    broad approaches to HFT. In the following sections, we briefly describe some of
    these approaches.
  prefs: []
  type: TYPE_NORMAL
- en: 15.1 Market Making
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Traditionally a market maker is a firm which places orders on both sides of
    the order book. In other words, both buy and sell orders are placed by a market
    maker. The goal is to make a profit from the bid-ask spread. Exchanges have designated
    firms who receive discounts for regularly playing market making roles in various
    stocks. Such market makers provide liquidity and are committed not to exit the
    market.
  prefs: []
  type: TYPE_NORMAL
- en: HFT firms can also adopt market making strategies. They simultaneously place
    buy and sell quotes to profit from the bid-ask spread. Such quotes could be thin
    quotes which are close to the best bid-ask spread and get filled up more often
    or thick quotes which are far from the best bid-ask spread and get filled up less
    frequently. This is one among several aspects of the trading decision to be taken
    by an HFT algorithm. Building profitable market making strategies requires precise
    modelling of the target market microstructure and the use of stochastic control
    techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Although an HFT firm may play the role of a market maker, such firms typically
    do not have any commitment to do so in the long run. They may exit the market
    at their discretion.
  prefs: []
  type: TYPE_NORMAL
- en: 15.2 Exploiting Limit Order Book
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The limit order book of an exchange contains public information. The order book
    provides the list of limit orders (both buy and sell) on all stocks listed on
    the exchange. A simple strategy for exploiting this information would be the basic
    demand–supply intuition. If more orders are placed for an asset, then there is
    an increasing demand for the asset, and the price of the asset can be expected
    to rise. So, a profit can be made by buying the asset while the price is rising
    and then sell it when the price has sufficiently risen.
  prefs: []
  type: TYPE_NORMAL
- en: If a single asset is of interest, then it may be possible for a human to assess
    the above situation and implement the above strategy. On the other hand, the limit
    order book of an exchange will hold a huge amount of information. Searching among
    such information, to find a number of assets where the above simple strategy can
    be applied, is very difficult for a human to do. Computer algorithms can be designed
    to process the information to discover such scenarios and exploit them with high
    speed. Hence, the involvement of HFT firms arises.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting the rising demand for an asset is a basic information that can be
    garnered from a limit order book. HFT strategies may more generally try to obtain
    further insights into the market microstructure from the limit order book.
  prefs: []
  type: TYPE_NORMAL
- en: 15.3 Mean Reversion and Pairs Trading
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mean reversion is the general principle that an asset has a stable (or mean)
    price to which it will return after possible periods of volatility arising from
    external shocks. More formally, an asset price can be modelled using the Ornstein–Uhlenbeck
    process and shown to possess the mean reversion property. An application of the
    mean reversion property is in the use of a trading strategy called pairs trading.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose two assets are of similar types and historical data show the prices
    of the two assets to be correlated. For some reason, this correlation may temporarily
    weaken. As a result, the prices of the two assets diverge more than what is predicted
    from historical data. Suppose the price of asset *A* goes up and the price of
    asset *B* goes down. This suggests the following trading strategy. Short sell
    asset *A* and go long on asset *B*. This means borrow asset *A* and sell it while
    buy asset *B*. The mean reversion assumption implies that after a certain amount
    of time, the prices of *A* and *B* will converge, i.e. the price of *A* will come
    down and the price of *B* will go up. At this point, asset *A* can be purchased
    and replaced to the entity from which it was borrowed for short selling. Also,
    asset *B* can be sold to make a profit.
  prefs: []
  type: TYPE_NORMAL
- en: The above strategy is called pairs trading. It is a market-neutral strategy
    which allows traders to make a profit from almost any market movement. The key
    to being successful in pairs trading is early detection of the price divergence
    and timeliness of the buy and sell decisions. The divergence of historically correlated
    asset prices is market inefficiency. Such opportunities do not occur on a regular
    basis. Even when such an opportunity occurs, it remains open for a very small
    window of time. So, precision of detection and speed of execution is of importance.
  prefs: []
  type: TYPE_NORMAL
- en: 15.4 Arbitrage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Broadly speaking, arbitrage refers to trading practices whereby it is possible
    to make a profit with no (or little) risk. A trader who engages in arbitrage is
    called an arbitrageur. Opportunities for arbitrage arise basically due to market
    inefficiencies and last for very small durations of time. Arbitrageurs have to
    be able to detect such opportunities and act upon them with utmost speed. So,
    exploiting arbitrage opportunities calls for HFT.
  prefs: []
  type: TYPE_NORMAL
- en: It should be noted that the concept of arbitrage is quite old. A simple example
    is the following. Suppose the same asset trades in two different markets. Under
    normal circumstances, the price of the asset in both the markets should be the
    same. If there is a variation in the price, then a sharp trader can buy the asset
    in the market where its price is lower and sell it in the market where its price
    is higher. This allows the trader to make a profit on the price difference with
    almost no risk. The only risk is if the price of the asset falls in the second
    market before the trader can sell. Even in this case, the risk is low as the price
    is unlikely to decrease below the price at which the trader purchased the asset.
    The difference in the price of the same product in two markets is an example of
    market inefficiency. Arbitrageurs will jump in to exploit this difference. As
    a result, there will be push on the prices of the asset in opposite directions
    and will very soon lead to the prices becoming same in both the markets. The above
    analysis is a bit simplistic and ignores transactions costs and the possible costs
    of moving assets across market and possibly boundaries. A careful arbitrageur
    will have to factor in these considerations (at high speed) to decide whether
    or not to exploit the price difference. Nevertheless, the example highlights the
    basic idea of arbitrage.
  prefs: []
  type: TYPE_NORMAL
- en: In the above example, we have considered that arbitrage opportunity whereby
    the same asset does not trade at the same price on all markets. The concept of
    pairs trading mentioned in the earlier section is also a kind of aribtrage. More
    generally, one may expect two different but similar assets backed by similar cash
    flows to trade at similar prices. Any deviation may give rise to an arbitrage
    opportunity.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the following naïve scenario. Suppose that the price of the asset at
    time *T* in the future is *P* and the discounted price at time *t* < *T* is *P*/*D*,
    where *D* is the discount factor arising from the risk-free interest rate. Let
    the current price of the asset be *S*. Suppose an investor borrows an amount *S*
    to buy the asset at time *t*. At time *T*, the investor will have to repay an
    amount *SD* to the lender. Since the price of the asset at time *T* will be *P*,
    he can sell the asset and repay the lender. The profit (or loss) to the investor
    at time *T* is *P* − *SD* (ignoring transaction costs). If *P* > *SD*, then the
    investor makes a profit, if *P* = *SD*, then he breaks even and if, *P* < *SD*,
    then the investor makes a loss. At time *t*, the investor does not know the value
    of *P*, which is modelled as a random quantity. He hopes that *P* will turn out
    to be greater than *SD* which is the reason he makes the investment. His risk
    is that in reality *P* becomes less than *SD*.
  prefs: []
  type: TYPE_NORMAL
- en: In the above setting, suppose that the investor has some way of *knowing* the
    future price *P and* further *P* > *SD* holds. Then the above scenario allows
    the investor to make a risk-free profit at time *T* with no investment. Note that
    the investor does not really need to know the actual future price; it is sufficient
    to know that this future price will be greater than *SD*. This consideration gives
    rise to a general idea for arbitrage. In practice, it is not possible to predict
    the future price of a single asset with any reasonable degree of certainty (except
    for the illegal practice of insider trading).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us consider two portfolios instead of a single asset. Let *V* 1(*t*) and
    *V* 2(*t*) be the values of the two portfolios at time point *t*. Consider two
    time points *T* and *t* with *T* > *t* such that *V* 1(*T*) = *V* 2(*T*). Suppose
    that at time point *t*, *V* 1(*t*) < *V* 2(*t*). This creates an arbitrage opportunity.
    At time *t*, an arbitrageur goes long (i.e. buys) the first portfolio and short
    (i.e. sells by borrowing) the second one. At time *T*, both the portfolios have
    the same value, so the following strategy can be followed: sell the first portfolio
    and use the proceeds to buy the second portfolio and payoff the debt due to the
    short selling. Overall, the arbitrageur has made a risk-free profit.'
  prefs: []
  type: TYPE_NORMAL
- en: 15.4.1 Put–call Parity
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Consider a portfolio ![inline-image](../images/CH015_1.jpg) which is long (i.e.
    has purchased) a European call option and short (i.e. has written) a European
    put option. For both the options, the strike price is *E* and the expiry date
    is *T*. At time *t* ≤ *T*, let *S*(*t*) be the price of the underlying asset;
    *C*(*t*) and *P*(*t*) be the prices of the call and put options, respectively.
    If it turns out that *S*(*T*) > *E*, then the call option will be exercised by
    the portfolio manager making a profit of *S*(*T*) − *E*, the put option will not
    be exercised by the holder (the portfolio has written the put option and somebody
    else is holding it); so the net profit to the portfolio will be *S*(*T*) − *E*.
    On the other hand, if it turns out that *S*(*T*) < *E*, then the portfolio manager
    will not exercise the call option, but the holder of the put option will exercise
    it, resulting in a loss of *E* − *S*(*T*) for the portfolio. This can be summed
    up by saying that the value of the portfolio at time *T* is equal to *S*(*T*)
    − *E*. Note that this covers the possibility *S*(*T*) = *E*, since then neither
    the call nor the put option will be exercised, resulting in a value of 0 for the
    portfolio. This analysis shows that the portfolio consisting of a long call and
    a short put is conceptually equivalent to a forward contract on the underlying
    asset with date *T* and price *E*.
  prefs: []
  type: TYPE_NORMAL
- en: Now consider a second portfolio ![inline-image](../images/CH015_2.jpg) which
    is long (i.e. has purchased) a single unit of the asset and has a loan such that
    at time *T* the repayment amount at the risk-free interest rate is *E*. Consider
    the scenario at time *T*. The asset is sold to obtain an amount *S*(*T*) and the
    loan is repayed. If *S*(*T*) ≥ *E*, then a profit of *S*(*T*) − *E* (or break
    even if *S*(*T*) = *E*) results. If *S*(*T*) < *E*, then a loss of *E* − *S*(*T*)
    results. Consequently, the value of this second portfolio at time *T* is also
    *S*(*T*) − *E*.
  prefs: []
  type: TYPE_NORMAL
- en: In the above, we have two portfolios which have the same value at time *T*.
    At time *t*, the value of ![inline-image](../images/CH015_3.jpg) is *V* 1(*t*)
    = *C*(*t*) − *P*(*t*), whereas the value of ![inline-image](../images/CH015_4.jpg)
    is *V* 2(*t*) = *S*(*t*) – *E*/*D*(*t*, *T*), where *D*(*t*, *T*) is the discount
    factor arising from the risk-free interest rate. From the previous description
    of two-portfolio arbitrage, if *V* 1(*t*) < *V* 2(*t*), then an arbitrageur can
    make a risk-free profit. For an efficient market, the no-arbitrage condition should
    hold resulting in *C*(*t*) – *P*(*t*) = *S*(*t*) – *E*/*D*(*t*, *T*) which is
    the so-called put–call parity relation.
  prefs: []
  type: TYPE_NORMAL
- en: Let us consider in more detail the arbitrage opportunity that arises if the
    put–call parity does not hold. Suppose at time *t*, the price of the call option
    is *C′*, the price of the put option is *P′* and the price of the underlying is
    *S*′ such that *C′* − *P′* < *S′* − *E*/*D*(*t*, *T*). Construct a portfolio which
    is long the call option and short the put option and the underlying. In other
    words, the call option is purchased paying an amount *C′*, the put option is written
    earning an amount *P′* and the underlying is borrowed and sold earning an amount
    *S′*. Additionally, as part of the portfolio, an amount *E*/*D*(*t*, *T*) is invested
    at the risk-free interest rate. The profit in creating the portfolio is *X* =
    *P′* + *S′* − *C′* − *E*/*D*(*t*, *T*) > 0\. Let us consider what happens at time
    *T*. First note that the risk-free investment of *E*/*D*(*t*, *T*) matures to
    *E*. If *S*(*T*) ≥ *E*, then the arbitrageur exercises the call option using the
    amount *E* obtained from the risk-free investment to pay the strike price and
    acquire the underlying which is used to repay the short on the underlying; the
    put option will not be exercised. If *E* < *S*(*T*), then the call option will
    not be exercised, the holder of the put option will exercise the option; the arbitrageur
    uses the amount *E* obtained from the risk-free investment to pay the holder of
    the put option getting in return the underlying which is used to repay the short
    on the underlying. In both cases, there is neither loss nor gain for the arbitrageur
    at time *T*. In creating the portfolio, the arbitrageur makes a risk-free assured
    profit of *X* at time *t*.
  prefs: []
  type: TYPE_NORMAL
- en: A similar reasoning shows the arbitrage opportunity that arises when *C′* −
    *P′* > *S′* − *E*/*D*(*t*, *T*).
  prefs: []
  type: TYPE_NORMAL
- en: 15.4.2 Covered Interest Rate Parity
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This relates to interest rates in two different countries. For simplicity, we
    will assume that funds can be moved across national boundaries at zero costs and
    that the buying and selling exchange rates are the same. Let *i* *d* be the domestic
    interest rate and *i* *f* be the interest rate in a foreign country for the same
    interval of time, say from time *t* to time *T*. Let *S* be the spot exchange
    rate at time *t* from the domestic to the foreign currency, i.e. at time *t* an
    amount of *X* units in the domestic currency is converted to *X*/*S* units in
    the foreign currency. At time *T*, in the domestic market *X* units will grow
    to *X*(1 + *i* *d* ), while in the foreign market *X*/*S* will grow to (1 + *i*
    *f* )*X*/*S*. Now suppose there is a forward contract which stipulates the exchange
    rate at time *T* to be *F*, i.e. at time *T* an amount *Y* units in the foreign
    currency will become *YF* units in the domestic currency. So, at time *T*, the
    amount (1 + *i* *f* )*X*/*S* in the foreign currency will be converted to an amount
    *F*(1 + *i* *f* )*X*/*S* in the domestic currency. If the values of *S*, *F*,
    *i* *d* and *i* *f* are such that *F*(1 + *i* *f* )/*S* is greater than (1 + *i*
    *d* ), then an arbitrageur can exploit the following arbitrage opportunity. Borrow
    an amount *X* in the domestic currency, convert to the foreign currency and invest
    in the foreign currency; at time *T*, execute the forward contract to covert the
    money back to the domestic currency and repay the lender in the domestic currency.
    So, at time *T*, the arbitrageur has to repay an amount (1 + *i* *d* )*X* in the
    domestic currency and gets an amount *F*(1 + *i* *f* )*X*/*S* in the domestic
    currency from his investment, thus earning a risk-free, zero-investment profit
    of an amount *X*(*F*(1 + *i* *f* )/*S* – (1 + *i* *d* )) > 0\. Such possibilities
    arise rarely and last for very short durations. An efficient market corrects itself
    by adjusting the prices of one of *i* [*d*] , *i* [*f*] , *S* and *F*. Consequently,
    the no-arbitrage condition for an efficient market implies that *S*(1 + *i* *d*
    ) = *F*(1 + *i* *f* ) which is the so-called covered interest rate parity relation,
    whereby *F* = *S*(1 + *i* *d* )/(1 + *i* *f* ) thus determining the forward exchange
    rate.
  prefs: []
  type: TYPE_NORMAL
- en: In the following, we briefly discuss several other types of arbitrage.
  prefs: []
  type: TYPE_NORMAL
- en: '*Tick trading:* Public data available from an exchange often contain significant
    information. For example, such data pertain to quotes and trades made so far.
    Large orders by institutional investors are divided into small packets and sent
    to the market. Suppose the institutional investor is interested in buying a large
    number of a particular stock. This will eventually push up the price of the stock.
    The buy will proceed throughout the day and small buy orders will be placed at
    definite intervals. These quotes and the consequent trades constitute public data
    of the exchange. An HFT firm which is filtering these data using an algorithm
    may be able to detect early on that the buy orders are being placed. So, the firm
    can then buy shares of the stock and sell it to the institutional investor when
    the prices have risen later in the day. This kind of trading is called tick trading.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Index fund arbitrage:* Stock market indices are determined by a set of stocks.
    They are usually either price-weighted or capitalisation-weighted quantities.
    An index fund is a portfolio created with the goal of obtaining the return profile
    of some particular stock market index. The portfolio will contain the stocks considered
    in computing the index in the same proportion as in the index. The portfolio manager
    will periodically rebalance the portfolio to track the index that it is following.
    Index funds are made available to the public as a mutual fund. The advantage for
    a layperson is the ability to track the stock market index without actually owning
    the stocks making up the index. Index funds are usually considered safe investments
    and are used for retirement funds.'
  prefs: []
  type: TYPE_NORMAL
- en: Since index funds track a stock market index, from time to time, the portfolio
    constituting the index fund has to be re-balanced. This will entail sale and/or
    purchase of large volumes of some asset. If an HFT firm is able to predict the
    re-balancing of an index fund, then it can buy the relevant stock early on and
    then sell them to the index fund at a profit.
  prefs: []
  type: TYPE_NORMAL
- en: '*Statistical arbitrage:* Financial markets consist of various kinds of financial
    instruments including bonds, stock, commodities, currencies and also derivatives.
    Theoretical relationships are known between the present and future prices of various
    financial instruments. Any deviation from such theoretical relationships constitutes
    a market inefficiency and provides an arbitrage opportunity. While there is no
    generally accepted definition of statistical arbitrage, broadly speaking, statistical
    arbitrage constitutes the use of statistical (and machine learning) techniques
    to process historical and current financial data with the goal of detecting minute
    market inefficiencies. The detection has to be very fast, so that an inefficiency
    can be exploited as an arbitrage opportunity before it vanishes (due to similar
    action by other arbitrageurs). To properly utilise statistical arbitrage, it is
    required to build appropriate mathematical models of the market. This often requires
    sophisticated mathematical tools. Computations based on such models have to be
    both fast and accurate with respect to the predictions.'
  prefs: []
  type: TYPE_NORMAL
- en: 15.5 Market Manipulation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Manipulating market prices by fradulent means is an old strategy. One example
    is the so-called ‘pump and dump’ scheme. In this scheme, the fraudster initially
    acquires a significant holding in a security. Then, he spreads misleading information
    about the security using various means with the goal of creating a false impression
    that the price of the security is going to rise. This is the pump phase. When
    the price actually rises, the fraudster sells off his holdings giving rise to
    the dump phase. A high-frequency trader could also try to implement a pump and
    dump scheme. He uses an algorithm to place orders to momentarily drive up the
    price of a security and then dump whatever holding he has in the security.
  prefs: []
  type: TYPE_NORMAL
- en: Below we discuss three other market manipulation strategies.
  prefs: []
  type: TYPE_NORMAL
- en: A high-frequency trader can place many limit buy orders and then cancel them
    before they are executed. This can create an impression on the other traders that
    the price of the security is rising. This would correspond to the pump phase of
    a pump and dump scheme. Similarly, a large number of sell limit orders which are
    placed (but cancelled before being filled) may lead to the impression that the
    price of the asset is falling, creating a sell pressure on the security. This
    allows the trader to buy the security at a lower price than its actual worth.
    Such a trade practice is called spoofing.
  prefs: []
  type: TYPE_NORMAL
- en: Layering is a more refined form of this kind of trade whereby orders are placed
    at different price levels on one side of the market. This causes the midpoint
    of the bid-ask spread to move away from its otherwise normal value. The same trader
    then executes a trade on the opposite side of the market. This allows the trader
    to obtain a more favourable price than what he may otherwise have obtained.
  prefs: []
  type: TYPE_NORMAL
- en: Quote stuffing is the practice of rapidly sending and cancelling orders with
    the intention of slowing down. These so-called phantom orders accumulate in the
    buffers of the exchange. As a result, the delay of the usual information feed
    released by the exchange increases. Exchanges, on the other hand, sell higher
    capacity feeds for a premium. So, high-frequency traders who purchase such high
    capacity feeds can use quote stuffing to delay the release of the feeds to the
    general public. This may create an opportunity for the trader to act on the obtained
    information before the general public.
  prefs: []
  type: TYPE_NORMAL
- en: It is to be noted that market manipulation methods are illegal. Various firms
    have been penalised for indulging in such practices. The brief description of
    some market manipulation methods given above is only for the sake of completeness.
    We do not advocate the adoption of such practices.
  prefs: []
  type: TYPE_NORMAL
- en: '**Notes**'
  prefs: []
  type: TYPE_NORMAL
- en: There is a large amount of online material on HFT that is available. There are
    also some books that deal with sophisticated mathematics underlying some of the
    theoretical ideas. In this chapter, we have tried to present an intuitive overview
    of HFT as essentially performing various kinds of arbitrage activities.
  prefs: []
  type: TYPE_NORMAL
