["```\nWe define a smart contract called *pharmaledgercontract.js*.  The project structure is shown here:\n   +---manufacturer\n   |   +---application\n   |   |   |   app.js\n   |   |   |   package.json\n   |   |   +---public\n   |   |   +---services\n   |   |   \\---views\n   |   |           index.ejs\n   |   \\---contract\n   |       |   index.js\n   |       |   package.json\n   |       \\---lib\n   |               pharmaledgercontract.js\n```", "```\n    \"dependencies\": {\n        \"fabric-contract-api\": \"^2.1.2\",\n        \"fabric-shim\": \"^2.1.2\"\n    },\n```", "```\nconst { Contract, Context } = require('fabric-contract-api');\n```", "```\n const { Contract, Context } = require('fabric-contract-api');\nclass PharmaLedgerContract extends Contract {\n\n    constructor() {\n        super('org.pln.PharmaLedgerContract');\n    }\n}\n```", "```\n async makeEquipment(ctx, manufacturer, equipmentNumber, equipmentName, ownerName) {\n// makeEquipment logic\n}\nasync wholesalerDistribute(ctx, equipmentNumber, ownerName) {\n// wholesalerDistribute logic\n}\nasync pharmacyReceived(ctx, equipmentNumber, ownerName) {\n// pharmacyReceived logic\n}\n```", "```\n async makeEquipment(ctx, manufacturer, equipmentNumber, equipmentName, ownerName){\n        let dt = new Date().toString();\n        const equipment = {\n            equipmentNumber,\n            manufacturer,\n            equipmentName,\n            ownerName,\n            previousOwnerType: 'MANUFACTURER',\n            currentOwnerType: 'MANUFACTURER',\n            createDateTime: dt,\n            lastUpdated: dt\n        };\nawait ctx.stub.putState(equipmentNumber, Buffer.from(JSON.stringify(equipment)));\n}\n```", "```\n async wholesalerDistribute(ctx, equipmentNumber, ownerName) {\n        const equipmentAsBytes = await ctx.stub.getState(equipmentNumber);\n        if (!equipmentAsBytes || equipmentAsBytes.length === 0) {\n            throw new Error(`${equipmentNumber} does not exist`);\n        }\n        let dt = new Date().toString();\n        const strValue = Buffer.from(equipmentAsBytes).toString('utf8');\n        let record;\n        try {\n            record = JSON.parse(strValue);\n            if(record.currentOwnerType!=='MANUFACTURER') {\n  throw new Error(` equipment - ${equipmentNumber} owner must be MANUFACTURER`);\n            }\n            record.previousOwnerType= record.currentOwnerType;\n            record.currentOwnerType = 'WHOLESALER';\n            record.ownerName = ownerName;\n            record.lastUpdated = dt;\n       } catch (err) {\n          throw new Error(`equipment ${equipmentNumber} data can't be processed`);\n       }\n   await ctx.stub.putState(equipmentNumber, Buffer.from(JSON.stringify(record)));\n   }\n```", "```\nif(record.currentOwnerType!=='WHOLESALER') {\nthrow new Error(` equipment - ${equipmentNumber} owner must be WHOLESALER`);\n}\nrecord.previousOwnerType= record.currentOwnerType;\nrecord.currentOwnerType = 'PHARMACY';Query Functions\n```", "```\n    async queryHistoryByKey(ctx, key) {\n      let iterator = await ctx.stub.getHistoryForKey(key);\n      let result = [];\n      let res = await iterator.next();\n      while (!res.done) {\n        if (res.value) {\n          const obj = JSON.parse(res.value.value.toString('utf8'));\n          result.push(obj);\n        }\n        res = await iterator.next();\n      }\n      await iterator.close();\n      console.info(result);\n      return JSON.stringify(result);\n  }\n```", "```\n|   loadFabric.sh \n|---pharma-ledger-network\n    |   net-pln.sh\n    +---channel-artifacts\n    +---configtx\n    |       configtx.yaml\n    +---docker\n    +---organizations\n    |   +---cryptogen       \n    |   +---manufacturer\n    |   +---pharmacy\n    |   +---wholesaler\n    +---scripts\n```", "```\n OrdererOrgs:\n  - Name: Orderer\n    Domain: example.com\n    EnableNodeOUs: true\n    Specs:\n      - Hostname: orderer\n        SANS:\n          - localhost\n```", "```\n PeerOrgs:\n  - Name: Org1\n    Domain: org1.example.com\n    EnableNodeOUs: true\n    Template:\n      Count: 1\n      SANS:\n        - localhost\n    Users:\n      Count: 1\n```", "```\n Organizations:\n    - &OrdererOrg\n        Name: OrdererOrg\n        ID: OrdererMSP\n        MSPDir: ../organizations/ordererOrganizations/example.com/msp\n        Policies:\n           ....\n        OrdererEndpoints:\n            - orderer.example.com:7050\n    - &Org1\n        Name: Org1MSP\n        ID: Org1MSP\n        MSPDir: ../organizations/peerOrganizations/org1.example.com/msp\n        Policies:\n...\n        AnchorPeers:\n            - Host: peer0.org1.example.com\n              Port: 7051\n- &Org2\n        AnchorPeers:\n            - Host: peer0.org2.example.com\n              Port: 9051\n- &Org3\n        AnchorPeers:\n            - Host: peer0.org3.example.com\n              Port: 11051\n```", "```\n Policies:\n            Readers:\n                Type: Signature\n                Rule: \"OR('Org2MSP.admin', 'Org2MSP.peer', 'Org2MSP.client')\"\n            Endorsement:\n                Type: Signature\n                Rule: \"OR('Org2MSP.peer')\"\n```", "```\n Profiles:\n    PharmaLedgerOrdererGenesis:\n        <<: *ChannelDefaults\n        Orderer:\n            <<: *OrdererDefaults\n            Organizations:\n                - *OrdererOrg\n            Capabilities:\n                <<: *OrdererCapabilities\n        Consortiums:\n            PharmaLedgerConsortium:\n                Organizations:\n                    - *Org1\n                    - *Org2\n                    - *Org3\n    PharmaLedgerChannel:\n        Consortium: PharmaLedgerConsortium\n        <<: *ChannelDefaults\n        Application:\n            <<: *ApplicationDefaults\n            Organizations:\n                - *Org1\n                - *Org2\n                - *Org3\n            Capabilities:\n                <<: *ApplicationCapabilities\n```", "```\n services:\n  orderer.example.com:\n    container_name: orderer.example.com\n    image: hyperledger/fabric-orderer:$IMAGE_TAG\n    environment:..\n    working_dir: /opt/gopath/src/github.com/hyperledger/fabric\n    command: orderer\n    volumes:..\n    ports:\n      - 7050:7050\n    networks:\n      - pln\n\n  peer0.org1.example.com:\n    container_name: peer0.org1.example.com\n    image: hyperledger/fabric-peer:$IMAGE_TAG\n    environment:\n      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_pln\n..\n      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051\n      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051\n      - CORE_PEER_CHAINCODEADDRESS=peer0.org1.example.com:7052\n      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052\n      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051\n      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051\n      - CORE_PEER_LOCALMSPID=Org1MSP\n    volumes:\n...\n    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer\n    command: peer node start\n    ports:\n      - 7051:7051\n    networks:\n      - pln\n```", "```\n./loadFabric.sh\n```", "```\n     cryptogen generate --config=./organizations/cryptogen/crypto-config-org1.yaml --output=\"organizations\"\n    ```", "```\n     cryptogen generate --config=./organizations/cryptogen/crypto-config-orderer.yaml --output=\"organizations\"\n    ```", "```\n     ./organizations/ccp-generate.sh\n    ```", "```\n    echo \"$(json_ccp $ORG $P0PORT $CAPORT $PEERPEM $CAPEM)\" >\n    organizations/peerOrganizations/org1.example.com/connection-org1.json\n    echo \"$(yaml_ccp $ORG $P0PORT $CAPORT $PEERPEM $CAPEM)\" >\n    organizations/peerOrganizations/org1.example.com/connection-org1.yaml\n    ```", "```\n    configtxgen -profile PharmaLedgerOrdererGenesis -channelID system-channel -outputBlock ./system-genesis-\n    block/genesis.block\n    ```", "```\n     IMAGE_TAG=$IMAGETAG docker-compose ${COMPOSE_FILES} up -d 2>&1\n    ```", "```\n     cd pharma-ledger-network \n    ./net-pln.sh up\n    ```", "```\n     Creating network \"net_pln\" with the default driver\n     Creating volume \"net_orderer.example.com\" with default driver\n     Creating volume \"net_peer0.org1.example.com\" with default driver\n     Creating volume \"net_peer0.org2.example.com\" with default driver\n     Creating volume \"net_peer0.org3.example.com\" with default driver\n     Creating orderer.example.com    ... done\n     Creating peer0.org2.example.com ... done\n     Creating peer0.org1.example.com ... done\n     Creating peer0.org3.example.com ... done\n     CONTAINER ID   IMAGE                        COMMAND   ..            NAMES\n     5a1fb5778a94   hyperledger/fabric-peer:latest \"peer node start\" ... peer0.org3.example.com\n     969a5a9f5a85   hyperledger/fabric-peer:latest \"peer node start\" ...  peer0.org1.example.com\n     2f2cf2b0463d  hyperledger/fabric-peer:latest  \"peer node start\" ... peer0.org2.example.com\n     f327510667ff hyperledger/fabric-orderer:latest \"orderer\"       ...  orderer.example.com\n    ```", "```\n cd pharma-ledger-network\n```", "```\n ./net-pln.sh monitor-up\n\n...\nStarting docker log monitoring on network 'net_pln'\nStarting monitoring on all containers on the network net_pln\nUnable to find image 'gliderlabs/logspout:latest' locally\nlatest: Pulling from gliderlabs/logspout\ncbdbe7a5bc2a: Pull complete\n956fa3cf18b6: Pull complete\n94f24e0675e0: Pull complete\nDigest: sha256:872555b51b73d7f50726baeae8d8c138b6b48b550fc71d733df7ffcadc9072e1\nStatus: Downloaded newer image for gliderlabs/logspout:latest\ne8a8ad1787b69cfb7387264ee6ff63fd5a805aabe50ca6af6356d4cd8b27e052\n```", "```\n docker run -d --name=\"logspout\" \\\n   --volume=/var/run/docker.sock:/var/run/docker.sock \\\n   --publish=127.0.0.1:${PORT}:80 \\\n   --network  ${DOCKER_NETWORK} gliderlabs/logspout\n```", "```\n     configtxgen -profile PharmaLedgerChannel -outputCreateChannelTx ./channel-artifacts/${CHANNEL_NAME}.tx\n    -channelID $CHANNEL_NAME\n    ```", "```\n     configtxgen -profile PharmaLedgerChannel -outputAnchorPeersUpdate ./channel-artifacts/${orgmsp}anchors.tx\n    -channelID $CHANNEL_NAME -asOrg ${orgmsp}\n    ```", "```\n    setGlobalVars 1\n    peer channel create -o localhost:7050 -c $CHANNEL_NAME --ordererTLSHostnameOverrideorderer.example.com -\n    f ./channel-artifacts/${CHANNEL_NAME}.tx --outputBlock ./channel-\n    ```", "```\n     setGlobalVars() {\n    ..\n      if [ $USING_ORG -eq 1 ]; then\n        export CORE_PEER_LOCALMSPID=\"Org1MSP\"\n        export CORE_PEER_TLS_ROOTCERT_FILE=$PEER0_ORG1_CA\n        export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.\n    com/msp\n    export CORE_PEER_ADDRESS=localhost:7051\n    ..\n    }\n    ```", "```\n     for org in $(seq 1 $TOTAL_ORGS); do\n      setGlobalVars $ORG \n      peer channel join -b ./channel-artifacts/$CHANNEL_NAME.block >&log.txt\n    done\n    ```", "```\n     setGlobalVars $ORG\n    peer channel update -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com -c $CHANNEL_NAME -\n    f ./channel-artifacts/${CORE_PEER_LOCALMSPID}anchors.tx --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA\n    >&log.txt\n    ```", "```\n     ./net-pln.sh createChannel\n    ```", "```\n     ...\n\n    ***** [Step: 5]: start call updateAnchorPeers 3 on peer: peer0.org3, channelID: plnchannel,\n    smartcontract: , version , sequence  *****\n    Using organization 3\n    2020-06-06 03:24:36.333 UTC [channelCmd] InitCmdFactory -> INFO 001 Endorser and orderer connections\n    initialized\n    2020-06-06 03:24:36.392 UTC [channelCmd] update -> INFO 002 Successfully submitted channel update\n    ***** completed call updateAnchorPeers, updated peer0.org3 on anchorPeers on channelID: plnchannel,\n    smartcontract: , version , sequence  *****\n\n    ***** completed call updateOrgsOnAnchorPeers, anchorPeers updated on channelID: plnchannel,\n    smartcontract: , version , sequence  *****\n\n    ========= Pharma Ledger Network (PLN) Channel plnchannel successfully joined ===========\n    ```", "```\ncd pharma-ledger-network/organizations/manufacturer/contract\nnpm install\n```", "```\n    setGlobalVars 1\n    peer lifecycle chaincode package ${CHINCODE_NAME}.tar.gz --path ${CC_SRC_PATH} --lang\n    ${CC_RUNTIME_LANGUAGE} --label ${CHINCODE_NAME}_${VERSION}\n    ```", "```\n    for org in $(seq 1 $CHAINCODE_ORGS); do\n    setGlobalVars $ORG\n    peer lifecycle chaincode install ${CHINCODE_NAME}.tar.gz >&log.txt\n    done\n    ```", "```\n    2020-06-06 03:30:50.025 UTC [cli.lifecycle.chaincode] submitInstallProposal -> INFO 001 Installed\n    remotely: response:<status:200\n    payload:\"\\nWpharmaLedgerContract_1:1940852a477d7697bb3a12d032268ff48c741c585db166403dd35f5e0b5c4e74\\022\n    \\026pharmaLedgerContract_1\" >\n    2020-06-06 03:30:50.025 UTC [cli.lifecycle.chaincode] submitInstallProposal -> INFO 002 Chaincode code\n    package identifier:\n    pharmaLedgerContract_1:1940852a477d7697bb3a12d032268ff48c741c585db166403dd35f5e0b5c4e74\n    ***** completed call installChaincode, Chaincode is installed on peer0.org1 on channelID: plnchannel,\n    smartcontract: pharmaLedgerContract, version 1, sequence 1 *****\n    ```", "```\n    peer lifecycle chaincode queryinstalled >&log.txt\n    ```", "```\n    Installed chaincodes on peer:\n    Package ID: pharmaLedgerContract_1:1940852a477d7697bb3a12d032268ff48c741c585db166403dd35f5e0b5c4e74,\n    Label: pharmaLedgerContract_1\n    ***** completed call queryInstalled, Query installed successful with PackageID is\n    pharmaLedgerContract_1:1940852a477d7697bb3a12d032268ff48c741c585db166403dd35f5e0b5c4e74 on\n    channelID: plnchannel, smartcontract: pharmaLedgerContract, version 1, sequence 1 *****\n    ```", "```\n    peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride\n    orderer.example.com --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA --channelID\n    $CHANNEL_NAME --name ${CHINCODE_NAME} -- version ${VERSION}  --package-id ${PACKAGE_ID} --sequence ${VERSION} >&log.txt\n    ```", "```\n    peer lifecycle chaincode checkcommitreadiness --channelID $CHANNEL_NAME --name ${CHINCODE_NAME} --\n    version ${VERSION} --sequence ${VERSION} --output json >&log.txt\n    ```", "```\n    ***** [Step: 5]: start call checkCommitReadiness org1 on peer: peer0.org1, channelID: plnchannel,\n    smartcontract: pharmaLedgerContract, version 1, sequence 1 *****\n    Attempting to check the commit readiness of the chaincode definition on peer0.org1, Retry after 3\n    seconds.\n    + peer lifecycle chaincode checkcommitreadiness --channelID plnchannel --name pharmaLedgerContract --\n    version 1 --sequence 1 --output json\n    {\n            \"approvals\": {\n                    \"Org1MSP\": true, \"Org2MSP\": false, \"Org3MSP\": false\n            }\n    }\n    ```", "```\n     ## approve org2\n    approveForMyOrg 2\n    ## check whether the chaincode definition is ready to be committed, two orgs should be approved\n    checkOrgsCommitReadiness 3 1 1 0\n    ## approve org3\n    approveForMyOrg 3\n    ## check whether the chaincode definition is ready to be committed, all 3 orgs should be approved\n    checkOrgsCommitReadiness 3 1 1 1\n    ```", "```\n     {\n            \"approvals\": {\n                    \"Org1MSP\": true, \"Org2MSP\": true, \"Org3MSP\": true\n            }\n    }\n    ***** completed call checkCommitReadiness, Checking the commit readiness of the chaincode definition\n    successful on peer0.org3 on channel 'plnchannel' on channelID: plnchannel,\n    ```", "```\n    peer lifecycle chaincode commit -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --\n    tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA --channelID $CHANNEL_NAME --name ${CHINCODE_NAME}\n    $PEER_CONN_PARMS -- version ${VERSION} --sequence ${VERSION} >&log.txt\n    ```", "```\n    peer lifecycle chaincode querycommitted --channelID $ CHANNEL_NAME --name ${CHINCODE_NAME} >&log.txt\n    ```", "```\n    ./net-pln.sh deploySmartContract\n    ```", "```\n    Committed chaincode definition for chaincode 'pharmaLedgerContract' on channel 'plnchannel':\n    Version: 1, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals:\n    [Org1MSP: true, Org2MSP: true, Org3MSP: true]\n    ***** completed call queryCommitted, Query committed on channel 'plnchannel' on channelID: plnchannel,\n    smartcontract: pharmaLedgerContract, version 1, sequence 1 *****\n    ***** completed call queryAllCommitted, Chaincode installed on channelID: plnchannel, smartcontract: pharmaLedgerContract, version 1, sequence 1 *****\n    === Pharma Ledger Network (PLN) contract successfully deployed on channel plnchannel  ====\n    ```", "```\n     ./net-pln.sh invoke equipment GlobalEquipmentCorp 2000.001 e360-Ventilator GlobalEquipmentCorp\n    ```", "```\n     peer chaincode invoke -o localhost:7050  --ordererTLSHostnameOverride orderer.example.com --tls\n    $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n ${CHINCODE_NAME} $PEER_CONN_PARMS  -c \n    '{\"function\":\"makeEquipment\",\"Args\":[\"' $manufacturer'\",\"'$equipmentNumber'\", \"' $equipmentName'\", \n    \"'$ownerName'\"]}' >&log.txt\n    ```", "```\n    invokeMakeEquipment--> manufacturer:GlobalEquipmentCorp, equipmentNumber:2000.001, equipmentName: e360-\n    Ventilator,ownerName:GlobalEquipmentCorp\n    + peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls true \n    --cafile /home/ubuntu/Hyperledger-Fabric-V2/chapter7-supplychain/pharma-ledger-\n    network/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsc\n    a.example.com-cert.pem -C plnchannel -n pharmaLedgerContract --peerAddresses localhost:7051 \n    --tlsRootCertFiles /home/ubuntu/Hyperledger-Fabric-V2/chapter7-supplychain/pharma-ledger-\n    network/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --\n    peerAddresses localhost:9051 --tlsRootCertFiles /home/ubuntu/Hyperledger-Fabric-V2/chapter7-\n    supplychain/pharma-ledger-\n    network/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt --\n    peerAddresses localhost:11051 --tlsRootCertFiles /home/ubuntu/Hyperledger-Fabric-V2/chapter7-\n    supplychain/pharma-ledger-\n    network/organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt -c \n    '{\"function\":\"makeEquipment\",\"Args\":[\"GlobalEquipmentCorp\",\"2000.001\", \"e360-Ventilator\",\n    \"GlobalEquipmentCorp\"]}'\n    2020-06-06 03:43:09.186 UTC [chaincodeCmd] chaincodeInvokeOrQuery -> INFO 001 Chaincode invoke\n    successful. result: status:200\n    ```", "```\n      peer chaincode  query -C $CHANNEL_NAME - n ${CHINCODE_NAME} -c\n    '{\"function\":\"queryByKey\",\"Args\":[\"'$QUERY_KEY'\"]}' >&log.txt\n    ```", "```\n    ./net-pln.sh invoke query 2000.001\n    ```", "```\n    {\"Key\":\"2000.001\",\"Record\":{\"equipmentNumber\":\"2000.001\",\"manufacturer\":\"GlobalEquipmentCorp\",\"equipmen\n    tName\":\"e360-\n    Ventilator\",\"ownerName\":\"GlobalEquipmentCorp\",\"previousOwnerType\":\n    \"MANUFACTURER\",\"currentOwnerType\":\"MANUFACTURER\",\"createDateTime\":\"Sat Jun 06 2020 03:43:09 GMT+0000 (Coordinated Universal\n    Time)\",\"lastUpdated\":\"Sat Jun 06 2020 03:43:09 GMT+0000 (Coordinated Universal Time)\"}}\n    ```", "```\n    ./net-pln.sh invoke wholesaler 2000.001 GlobalWholesalerCorp\n    ./net-pln.sh invoke pharmacy 2000.001 PharmacyCorp\n    ```", "```\n    ./net-pln.sh invoke queryHistory 2000.001\n    ```", "```\n     ***** start call chaincodeQueryHistory on peer: peer0.org1, channelID: plnchannel, smartcontract:\n    pharmaLedgerContract, version 1, sequence 1 *****\n    + peer chaincode query -C plnchannel -n pharmaLedgerContract -c '{\"function\":\"queryHistoryByKey\",\"Args\":[\"2000.001\"]}'\n    [{\"equipmentNumber\":\"2000.001\",\"manufacturer\":\"GlobalEquipmentCorp\",\"equipmentName\":\"e360-\n    Ventilator\",\"ownerName\":\"PharmacyCorp\",\"previousOwnerType\":\"WHOLESALER\",\"currentOwnerType\":\"PHARMACY\",\"\n    createDateTime\":\"Sat Jun 06 2020 03:43:09 GMT+0000 (Coordinated Universal Time)\",\"lastUpdated\":\"Sat Jun\n    06 2020 03:48:48 GMT+0000 (Coordinated Universal\n    Time)\"},{\"equipmentNumber\":\"2000.001\",\"manufacturer\":\"GlobalEquipmentCorp\",\"equipmentName\":\"e360-\n    Ventilator\",\"ownerName\":\"GlobalWholesalerCorp\",\"previousOwnerType\":\"MANUAFACTURER\",\"currentOwnerType\":\n    \"WHOLESALER\",\"createDateTime\":\"Sat Jun 06 2020 03:43:09 GMT+0000 (Coordinated Universal\n    Time)\",\"lastUpdated\":\"Sat Jun 06 2020 03:46:41 GMT+0000 (Coordinated Universal\n    Time)\"},{\"equipmentNumber\":\"2000.001\",\"manufacturer\":\"GlobalEquipmentCorp\",\"equipmentName\":\"e360-\n    Ventilator\",\"ownerName\":\"GlobalEquipmentCorp\",\"previousOwnerType\":\"\n    MANUAFACTURER\",\"currentOwnerType\":\"MANUAFACTURER\",\"createDateTime\":\"Sat Jun 06 2020 03:43:09 GMT+0000 (Coordinated Universal\n    Time)\",\"lastUpdated\":\"Sat Jun 06 2020 03:43:09 GMT+0000 (Coordinated Universal Time)\"}]\n    ***** completed call chaincodeQuery, Query History successful on channelID: plnchannel, smartcontract:\n    pharmaLedgerContract, version 1, sequence 1 *****\n    ```", "```\n     \"dependencies\" : {\n        \"fabric-contract-api\" : \"^2.1.2\",\n        \"fabric-shim\" : \"^2.1.2\"\n    }\n```", "```\napp.post('/addUser',  async (req, res, next) => {\n});\napp.post('/makeEquipment',  async (req, res, next) => {\n})\napp. get('/queryHistoryByKey',  async (req, res, next) => {\n})\napp. get('/queryByKey', async (req, res, next) => {\n})\n```", "```\nconst wallet = await Wallets.newFileSystemWallet('../identity/user/'+user+'/wallet');\n```", "```\nconst credPath = path. join(fixtures,\n'/peerOrganizations/org1.example.com/users/User1@org1.example.com');\nconst certificate = fs.readFileSync(path. join(credPath, '/msp/signcerts/User1@org1.example.com-\ncert.pem')).toString();\nconst privateKey = fs.readFileSync(path.join(credPath, '/msp/keystore/priv_sk')).toString();\n```", "```\n const identityLabel = user;\n const identity = {\n            credentials: {\n                certificate,\n                privateKey\n            },\n            mspId: 'Org1MSP',\n             type: 'X.509'\n }\n const response = await wallet.put(identityLabel, identity);\n```", "```\n      const wallet = await Wallets.newFileSystemWallet('../identity/user/'+userName+'/wallet');\n    ```", "```\n      const gateway =  new Gateway();\n         let connectionProfile =\n    yaml.safeLoad(fs.readFileSync('../../../organizations/peerOrganizations/\n    org1.example.com/connection-org1.json', 'utf8'));\n          // Set connection options; identity and wallet\n           let connectionOptions = {\n            identity: userName,\n            wallet: wallet,\n            discovery: { enabled: true, asLocalhost: true }\n          };\n          await gateway.connect(connectionProfile, connectionOptions);\n    ```", "```\n    const network = await gateway.getNetwork('plnchannel');\n    const contract = await network.getContract('pharmaLedgerContract', 'org.pln.PharmaLedgerContract');\n    ```", "```\n       const response = await contract.submitTransaction('makeEquipment', manufacturer, equipmentNumber,\n    equipmentName, ownerName);\n    ```", "```\n    const response = await contract.submitTransaction('queryByKey', key);\n    const response = await contract.submitTransaction('queryHistoryByKey', key);\n    ```", "```\n    var urlBase = \" *http://your-machine-public-ip:30000*\";\n    ```", "```\n    npm install\n    pharma-ledger-network/organizations/manufacturer/application$ node app.js\n    App listening at http://:::30000\n    ```", "```\n     var port = process.env.PORT || 30000;\n    ```", "```\n    npm install\n    node app.js\n    This starts the wholesaler web App. Open a browser and enter: http://your-machine-public-ip:30001\n    ```"]