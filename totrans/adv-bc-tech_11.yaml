- en: © The Author(s), under exclusive license to Springer Nature Switzerland AG 2022Y.
    Maleh et al. (eds.)Advances in Blockchain Technology for Cyber Physical SystemsInternet
    of ThingsTechnology, Communications and Computing[https://doi.org/10.1007/978-3-030-93646-4_11](https://doi.org/10.1007/978-3-030-93646-4_11)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: Using Hyperledger Fabric Blockchain to Improve Information Assurance of IoT
    Devices for AI Model Development
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Anthony Kendall^([1](#Aff7) [ ](#ContactOfAuthor1)), Arijit Das^([1](#Aff7) [ ](#ContactOfAuthor2)),
    Bruce Nagy^([1](#Aff7) [ ](#ContactOfAuthor3)), Bonnie Johnson^([1](#Aff7) [ ](#ContactOfAuthor4))
    and Avantika Ghosh^([2](#Aff8) [ ](#ContactOfAuthor5))(1)Naval Postgraduate School,
    Monterey, CA, USA(2)University of California, Berkeley, Berkeley, CA, USAAnthony Kendall (Corresponding
    author)Email: [bruce.nagy@navy.mil](mailto:bruce.nagy@navy.mil)Arijit DasEmail:
    [adas@nps.edu](mailto:adas@nps.edu)Bruce NagyEmail: [bruce.nagy@navy.mil](mailto:bruce.nagy@navy.mil)Bonnie JohnsonEmail:
    [bwjohnso@nps.edu](mailto:bwjohnso@nps.edu)Avantika GhoshEmail: [ghoshavantika_123@berkeley.edu](mailto:ghoshavantika_123@berkeley.edu)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 1 Introduction
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Artificial intelligence (AI) software exercises a high degree of control over
    a particular system function (e.g., movement/guidance of a drone or manned aircraft).
    If the function creates a hazard, this can cause a mishap that has a consequence
    of a catastrophic and critical event, resulting in death or resources destroyed.
    There is no redo, reboot, or retraining of an AI function that fails in this scenario.
    Software safety engineering and test and evaluation efforts to ensure fidelity
    include data-related elements such as process flow, code level, and data structure
    analysis. Cybersecurity plays a role in ensuring cyberattacks do not compromise
    the integrity of the data elements such as AI training sets.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: These flows and interaction with data and software, for example, are similar
    to the use of blockchain (BC) in supply chains used in our previous research,
    the Navy supply chain process, which we believe can be adapted for system safety
    and software integrity and play a role in cybersecurity especially in complex
    systems relying more and more on IoT (Internet of things) sensors on “the edge.”
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Complex systems go beyond IoT sensors supporting “ships at sea” or deployed
    resources, but Abbas [[1](#CR1)] notes that the rise of smart cities depends on
    data streams from many sensors. His article introduces prior knowledge using a
    Hyperledger Fabric-based data architecture that is a secure and trusted smart
    transportation system. Smart cities can also be vulnerable to cyberattacks on
    smart electrical grids, and therefore various blockchain efforts may provide countermeasures.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Abd El-Latif [[2](#CR2)] proposes a quantum-inspired blockchain framework to
    secure smart edge utilities in IoT-based smart cities, and this proposed framework
    would have the ability to withstand the probable attacks from both digital and
    quantum computers. Their authentication and encryption protocol is based on quantum-inspired
    quantum walks (QIQW) to secure data transmission among IoT devices. QIQW is employed
    for linking blocks of the chain.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Abd El-Latif[[2](#CR2)]提出了一个量子启发的区块链框架，用于保护物联网智能边缘工具，该提议的框架将能够抵御来自数字和量子计算机的可能攻击。他们的身份验证和加密协议基于量子启发的量子行走（QIQW）来保护物联网设备之间的数据传输。QIQW被用于链接区块链。
- en: Software and data integrity of course apply to the IoT supporting healthcare
    decision-making as we see the increasing use of smart thermometers, oximeters,
    and other biometrics collected by IoT devices.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，软件和数据的完整性也适用于支持医疗决策的物联网，因为我们看到越来越多的智能温度计、血氧仪以及其他生物特征由物联网设备收集。
- en: Abou-Nassar [[3](#CR3)] proposes a decentralized interoperable trust (DIT) framework
    where smart contracts guarantee the authentication of health budgets and Indirect
    Trust Inference System (ITIS) to reduce semantic gaps and enhances the trustworthy
    factor (TF) estimation via the network nodes and edges. He notes, importantly,
    the simultaneous parallel creation of IoT systems-based ontology has not produced
    a common communication protocol or universal coding language for all IoT devices
    present and, in the future, an important feature of blockchain as a uniter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Abou-Nassar[[3](#CR3)]提出了一个分散式互操作信任（DIT）框架，其中智能合约保证了健康预算的认证，间接信任推理系统（ITIS）通过网络节点和边缘减少语义差距并增强了可信度因子（TF）的估计。他指出，物联网系统本体的同时并行创建并没有产生一个通用的通信协议或所有物联网设备的通用编码语言，而区块链作为一个统一者在今后将是一个重要特征。
- en: Other work by Nguyen [[4](#CR4)] demonstrates the flexibility of blockchain
    smart contracts to improve information assurance of important assets such as healthcare
    data acquisition process using sensor devices, and intrusion detection takes place
    using deep belief network (DBN) model. Blockchain technology is applied for secure
    data transmission to the cloud server, which executes the residual network (ResNet)-based
    classification model.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Nguyen等人的其他工作[[4](#CR4)]展示了区块链智能合约的灵活性，以改进重要资产（如使用传感器设备进行医疗数据采集过程）的信息保障，入侵检测使用深度信念网络（DBN）模型进行。区块链技术应用于将数据安全传输到云服务器，该服务器执行基于残余网络（ResNet）的分类模型。
- en: AI/machine learning (ML), the training sets, algorithms, and associated software
    supporting critical systems such as electrical grids or defense systems are targets
    for increasingly sophisticated adversarial machine learning attacks, which attempt
    to fool models through malicious input into the system such as AI poisoning and
    other attacks. Athalye et al. [[5](#CR5)] showed that it is even possible to fool
    an AI into having it identify a turtle wrongly as a rifle and such attacks are
    likely to become more sophisticated. BC could be used as a countermeasure to prevent
    such poisoning as well as safeguard system integrity. BC, specifically Hyperledger
    Fabric (HLF), is a tamper-resistant decentralized trusted ledger that provides
    proof of transaction where trust is implemented through distributed consensus
    to ensure that only authorized people can modify the code base, AI algorithm,
    or training set and that the modification is traceable and transparent. Distributed
    ledgers provide system safety through BC provenance and policy enforcement through
    a feature called smart contracts, which imbed logical code. Data in support of
    AI and software development can also suffer not only from deliberate sabotage
    or ruse but also from human error.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 人工智能/机器学习（ML），训练集、算法以及支持关键系统如电力网或国防系统的相关软件，成为越来越复杂的对抗性机器学习攻击的目标，这些攻击试图通过系统中的恶意输入（如AI毒化和其他攻击）来愚弄模型。Athalye等人[[5](#CR5)]表明，甚至可能愚弄人工智能，使其错误地将一只乌龟识别为步枪，这类攻击可能会变得更加复杂。BC可用作防范此类毒化以及保障系统完整性的对策。具体而言，Hyperledger
    Fabric（HLF）作为一个防篡改的去中心化可信账本，提供了交易的证明，其中信任通过分布式共识来实现，以确保只有授权的人可以修改代码库、AI算法或训练集，并且修改是可追踪和透明的。分布式账本通过BC溯源和智能合约功能来提供系统安全，智能合约嵌入了逻辑代码。支持AI和软件开发的数据不仅可能受到蓄意破坏或欺骗的影响，还可能受到人为错误的影响。
- en: Machine learning increasingly requires complex data sources from repositories
    and sensors down to the edge for training sets supporting AI development. Getting
    the right and accurate data can be a complex process, and error or intentional
    manipulation is always a concern. The number of sensors and IoT devices, such
    as smart thermometers/oximeters to track COVID-19, has caused an explosion of
    data generation but not an increase in safeguards to ensure system safety if these
    edge devices are used to control machines or make life-critical decisions.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习越来越需要从存储库和传感器一直到边缘的复杂数据源来支持AI开发的训练集。获取正确和准确的数据可能是一个复杂的过程，错误或故意操纵始终是一个问题。传感器和物联网设备的数量，例如用于跟踪COVID-19的智能温度计/血氧计，导致数据产生的爆炸，但没有增加确保如果这些边缘设备用于控制机器或做出生命关键决策的系统安全的保障。
- en: Centralized security and authentication controlling IoT devices could lead to
    a single point of failure, a new target for a cyberattack, and cause a bottleneck
    and high latency [[6](#CR6)]. Typically, an ML project may require diverse data
    sources and modalities. One example may be drones flying over an urban area, which
    requires its ML training set data on the region, including crime rate, weather,
    and road conditions/constraints. For just this simple example, data needed may
    include war-gaming, tabletop exercises, lessons learned, product performance specifications,
    contractor specifications, test evaluation results, a diverse set of sensors,
    IoT devices, and so on. Once an AI is trained, BC can be used to ensure the integrity
    of the data during operations. BC can be used to find the right data, what is
    in it, who owns it, and how to get it with quick authorization. Data scientists
    have long recognized that just getting the right data and permission to use it
    can be an arduous and long process.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 集中式的安全性和认证控制物联网设备可能会导致单一故障点，成为网络攻击的新目标，并引起瓶颈和高延迟[[6](#CR6)]。通常，ML项目可能需要多样化的数据源和模态。一个例子可能是无人机飞越城市区域，需要其ML训练集数据包括该地区的犯罪率、天气和道路条件/约束。就这个简单的例子而言，所需的数据可能包括战争游戏、桌面推演、经验教训、产品性能规格、承包商规格、测试评估结果、各种传感器、物联网设备等等。一旦AI被训练，BC可以用来确保在操作期间数据的完整性。BC可以用来找到正确的数据，了解其中的内容，谁拥有它，以及如何在快速授权的情况下获取它。数据科学家长期以来一直认识到，仅仅获取正确的数据和使用权限可能是一个艰难而漫长的过程。
- en: 2 Cybersecurity Through System Safety
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2 通过系统安全实现网络安全
- en: AI has the potential of creating a technological leap [[7](#CR7)]. That potential
    leap, especially when dealing with critical systems controlled is partially controlled
    by AI, needs scrutiny. This scrutiny focuses on the specificity of the composition
    and size of the training data algorithm. This research describes how an HLF architecture
    can be used to increase safety and confidence in the deployment of AI functions.
    There must be confidence in the data and training sets and the algorithms, and
    there must be confidence that they are tamper proof and free from anomalies, intentional
    or by accident. Acquisition communities cannot identify and certify operational
    constraints of an ML algorithm for deployment without having confidence in the
    training data quality, including any negative side effects [[8](#CR8)] that might
    result from the training process.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: AI具有创造技术飞跃的潜力[[7](#CR7)]。尤其在处理部分由AI控制的关键系统时，这种潜力的飞跃需要仔细审查。这种审查着重于培训数据算法的组成和规模的具体性。这项研究描述了如何利用HLF架构来增加AI功能部署的安全性和信心。对于数据和训练集以及算法，必须有信心，必须确保它们是防篡改的，没有任何意外或意外。如果采购社区对ML算法的部署的操作约束没有信心，包括可能由培训过程导致的任何负面副作用[[8](#CR8)]，则无法识别和认证ML算法的运营约束。
- en: The *system safety* concept calls for a risk management strategy based on identification,
    analysis of hazards, and application of remedial controls using a systems-based
    approach. This is different from traditional safety strategies [[9](#CR9)].
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*系统安全*概念要求基于识别、分析危害和应用修正控制的风险管理策略，采用基于系统的方法。这与传统的安全策略[[9](#CR9)]不同。'
- en: AI or autonomous systems safety issues deployed at sea or other challenging
    environments usually have not included consideration of adversarial attacks that
    might affect functional performance. AI adversarial network attacks using techniques
    like deepfakes, putting an image/video into another image/video for miscategorization
    [[10](#CR10)], will be considered within our BC discussion.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: AI或部署在海上或其他具有挑战性环境的自主系统的安全问题通常没有考虑可能影响功能性能的对抗性攻击。利用诸如Deepfakes之类的技术进行AI对抗网络攻击，将图像/视频放入另一个图像/视频以进行错误分类，将在我们的区块链讨论中考虑。
- en: In assessing safety in the Department of Defense, the goal is to identify anything
    that might be safety critical. Safety critical is “a term applied to a condition,
    event, operation, process or item whose mishap severity consequence is either
    catastrophic or critical (e.g., safety-critical function, safety-critical path,
    and safety-critical component)” [[11](#CR11)]. Specifically, the publication MIL-STD-882E
    [[11](#CR11)] helps software engineers determine the level of rigor (LOR), which
    specifies the depth and breadth of software analysis and verification activities
    necessary to provide a sufficient level of confidence that a safety-critical or
    safety-related software function will perform as required.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在评估国防部的安全性时，目标是识别任何可能是安全关键的事物。安全关键是“一个应用于条件、事件、操作、流程或项目的术语，其失误严重程度后果要么是灾难性的，要么是关键的（例如，安全关键功能、安全关键路径和安全关键部件）”。特别地，出版物MIL-STD-882E帮助软件工程师确定严密度级别（LOR），它指定了进行软件分析和验证活动的深度和广度，以便提供足够的信心，以确保安全关键或与安全相关的软件功能将按要求执行。
- en: 'ML/AI usually falls into the system safety two highest software control categories:
    Level 1 (autonomous) and Level 2 (semiautonomous). We contend that BC could contribute
    to the analysis and verification of software activities by ensuring data integrity
    and better accessibility to the data.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: ML/AI通常属于系统安全的两个最高软件控制类别：Level 1（自主）和Level 2（半自主）。我们认为区块链可以通过确保数据完整性和更好地访问数据来为软件活动的分析和验证做出贡献。
- en: Our previous research used the Hyperledger Fabric (HLF) Blockchain to generate
    three general use cases for naval logistics, including financial and inventory
    transaction audit trails, serial number tracking, and maintenance log integrity.
    We believe the BC network derived from these three use cases could be adapted
    for system safety and cybersecurity purposes since all our previous demonstrations
    dealt with the integrity of the data supporting work processes and events. BC
    tracks food/part items as assets recorded on ledgers, and training data are assets
    and are also created with similar work processes and events. With HLF, you can
    control who, what, and when and identify those who have access to the logistics
    data representing assets as well through an immutable ledger containing logistics
    data that cannot be tampered with. These HLF attributes are similar to what is
    needed to curate data assets. HLF is as transparent as needed but can hide data
    from those without a need to know.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先前的研究使用了Hyperledger Fabric（HLF）区块链来生成海军后勤的三个通用用例，包括财务和库存交易审计、序列号跟踪以及维护日志的完整性。我们相信从这三个用例衍生出的区块链网络可以用于系统安全和网络安全目的，因为我们之前的所有演示都涉及支持工作流程和事件的数据完整性。区块链跟踪将食品/零件项作为在分类账上记录的资产，培训数据也是资产，并且是用类似的工作流程和事件创建的。使用HLF，您可以控制谁、什么以及何时，并通过包含无法篡改的后勤数据的不可变分类账来识别那些可以访问表示资产的后勤数据的人。这些HLF属性与策划数据资产所需的属性相似。HLF透明度足够，但可以隐藏不需要知道的数据。
- en: The data source flows of data and training sets supporting data scientists are
    similar to previous BC research on naval supply chains to improve transparency
    and the safety of the related supply chain data and transactions, but there is
    a higher level of risk since they are often at Level 1 or Level 2 autonomous systems.
    In a sense, training sets and analytical data are like the tracking of parts and
    food since they point to resources represented by the information that needs to
    be protected and distributed in a friction-free manner. Control of these sources
    during the integration process to create training data and general analysis is
    vital to ensure the training sets and AI algorithms are transparent to those who
    need them and are controlled and their validity supported by an audit trail that
    BC provides. Training set alterations could go unnoticed within the AI function
    build process but revealed during operation in hazards affecting unwanted human
    death or resource destruction. Our previous research demonstrated how BC can provide
    a needed data management technology through a tamper-resistant decentralized trusted
    ledger that provides proof of transaction where trust is implemented through distributed
    consensus.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Only authorized people can modify the code base, AI algorithms, or training
    set modifications that are detectable, traceable, and transparent. Distributed
    ledgers provide system safety through BC provenance and policy enforcement through
    smart contracts.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: HLF is a consensus-based network that a large organization can control and has
    no “proof of work” protocol, which is a wasteful use of computer resources. HLF
    uses channels to control who can see what data and through consensus; a large
    organization can control what is allowed to be put on the BC ledger. Such technologies
    can not only be used in naval supply and logistics to streamline and improve effectiveness
    in terms of how workflow can be improved to provide more rapid and secure distribution
    of material and two-way financial transactions but can also be used on data transactions
    such as datasets requested by data scientists. Data scientists have long recognized
    that obtaining “clean data” and the permission to use it has been hampered by
    administrative friction, which can be caused by data owner’s requirements, trust
    issues from generated data source transactions, and other administrative processes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: The benefits of BC technology described in this paper support system safety
    in terms of providing objective quality evidence about data integrity, as well
    as test and evaluation teams in terms of data management control. We believe elements
    of BC, such as smart contracts, could contribute to all acquisition groups involved.
    We will discuss our previous logistic use case as well as new use cases specifically
    for software safety.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 3 The Hyperledger Fabric Blockchain Solution
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HLF provides proof of transaction where trust is implemented through distributed
    consensus and not centralized policy enforcement. The specific version of BC we
    used is HLF, which is open-source from the Linux Foundation. HLF is a permissioned,
    distributed ledger that works on the consensus model that is an integral component
    of the “trust system” in the BC. Essentially, the fabric environment provides
    the “common logging” and service management components on the platform, and the
    containerized infrastructure allows developers to build a BC network where data
    is recorded on distributed ledgers where the data written can be trusted and transactions
    are immutable and tamper proof. Smart contracts can embed legal knowledge, laws,
    and regulations and enforce data policy. BC/HLF can also provide “provenance”
    of an item, such as food or a part, and trace back to the source of that part
    or food item in case of contamination or counterfeit/defective parts as well as
    other times such as blocks of data in support of AI.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Of course, BC can be used for cryptocurrency such as bitcoin, but cryptocurrency
    is not a part of this study, and a semiprivate BC in support of data integrity
    needs a specific set of BC features other than Everledger or Ethereum, which uses
    an inefficient way to verify blocks called proof of work (PoW) instead of the
    more efficient consensus algorithm such as proof of stake.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: With our previous research questions—could BC simplify and enable access and
    identity management for navy supply and logistics systems in a cost-effective
    manner to reduce this friction? How could BC improve Navy logistics to the last
    tactical mile?—we demonstrated the feasibility in previous research of using IBM
    and Oracle versions of HLF to track assets such as food items. Tracking and moving
    assets could be applied to data assets and adapted for software safety use because
    in both cases we care about the integrity of the data generated. There have been
    planned pilot projects in the DoD, usually supply chain scenarios [[12](#CR12)].
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'Although HLF is a Linux open-source project, several software companies have
    adapted HLF as its core BC enterprise solutions and have added additional value
    through add-ons, cloud support, and company expertise that goes beyond the plain
    vanilla HLF. This is common with open-source products as you pay for more capability
    and support. We compared enterprise versions of HLF, IBM, and Oracle HLF BC platforms
    and evaluated their ability to maintain an efficient, streamlined, and accurate
    ledger of all shipment transactions during transportation. Additionally, the team
    developed a ledger serialization function in the smart contracts for synchronized
    connection on ships and bases to the HLF framework. The characteristics of enterprise
    BCs include the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Permissioned architecture.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highly modular.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pluggable consensus.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open smart contract model—flexibility to implement any desired solution model.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Low latency of finality/confirmation.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flexible approach to data privacy—data isolation using “channels” or share private
    data on a need-to-know basis using private data collections.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multilanguage smart contract support—Go, Java, and JavaScript.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designed for continuous operations, including rolling upgrades and asymmetric
    version support.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Governance and versioning of smart contracts.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flexible endorsement model for achieving consensus across required organizations.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Queryable data (key-based queries and JSON queries).
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of X.509 public key infrastructure (PKI), which is quite familiar to
    the DoD for a signed data structure that binds a public key to a person, computer,
    or organization. Certificates are issued by certification authorities (CAs).
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud support and SaaS (software as a service).
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Figure [1](#Fig1) is an example of a very simple generic BC ordering network.
    A1, A2, and A3 are different “off-chain” applications that could be on IoT devices
    or Web browsers on computers or smartphones. These applications connect the on-chain
    world with the BC network/database. These client applications represent the “last
    mile” and could include legacy programs pre-BC. The blue-shaded background represents
    the BC logical infrastructure layer—not whatever physical layer infrastructures
    might be used, such as satellite or fiber optics. O4 is an ordering service. Network
    configuration (NC4) gives administrative rights to organizations R1 and R4\. At
    the network level, certificate authority CA4 is used to dispense identities to
    the administrators and network nodes of the R1 and R4 organizations. Certification
    authorities CA1 and CA4 provide entity validation, and other CAs are shown in
    the diagram. In this example, there are two consortiums (common interest parties),
    represented by R1 and R4 entities who set network configuration policies, seen
    CC1 and CC4 which set up channels. Channels are ways to decide who gets to see
    what ledgers. There are three peers: P1, P2, and P3\. On the left, P1 has S5,
    which is a smart contract that provides the rules for the ledger L1\. Only those
    who have access to Channel 1 (C1) have access to the ledger L1\. You see that
    if you have access to A1 or A2, you have access to C1, but the A2 application
    has access to both C1 and C2 and, therefore, access to ledgers L1 and L2, which
    are set by configuration control (CCL).![](../images/513458_1_En_11_Chapter/513458_1_En_11_Fig1_HTML.png)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 1
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Generic HLF BC network
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 4 Methodology
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our methodology involves two sets of use cases which we implemented as basic
    demonstrations on various Hyperledger Fabric platforms. The first set (original
    cases using Oracle and IBM versions of HLF) was used in our previous research
    in Navy logistics, which we believe can also demonstrate BC use for system safety
    if modified, as both sets of use cases track assets—one tracks food items and
    the other tracks datasets as assets. The key for repurposing a supply chain for
    use in software safety support is through the addition of off-chain application
    programming interface (API), such as representational state transfer (REST, or
    many others), which provides an interface between the BC and the outside world
    and to what is called “the last mile,” which in most of our use cases is a Web
    client. In our first set of use cases (the original use cases), we built two demos
    (Oracle and IBM cloud versions) illustrating the Navy logistics/supply chain.
    We demonstrated how BC can document and authenticate transactions along the supply
    chain, which would be similar to a data supply chain used for data system safety.
    We worked with both Oracle and IBM enterprise BCs to demonstrate the first set
    of use cases. In a work in progress, we have an additional set of use cases (labeled
    new cases) specifically for use with system safety using the open-source version
    of HLF ([https://​www.​hyperledger.​org/​](https://www.hyperledger.org/)).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的方法涉及两套用例，我们在各种Hyperledger Fabric平台上实施了基本演示。第一套（使用Oracle和IBM版本的HLF的原始案例）在我们之前的海军后勤研究中使用过，我们认为如果修改后，它们也可以展示用于系统安全的BC使用，因为两套用例都跟踪资产—一套跟踪食品项目，另一套跟踪数据集作为资产。重新用于软件安全支持的供应链的关键在于添加离线应用程序编程接口（API），例如表征状态传输（REST，或其他许多），它提供了BC和外部世界之间的接口以及所谓的“最后一英里”，在我们的大多数用例中，这是一个Web客户端。在我们的第一套用例中（原始用例），我们构建了两个演示（Oracle和IBM云版本），说明了海军后勤/供应链。我们演示了BC如何在供应链中记录和验证交易，这类似于用于数据系统安全的数据供应链。我们与Oracle和IBM企业BC合作展示了第一套用例。在进行中的工作中，我们有一组额外的用例（标记为新用例），专门用于使用HLF的开源版本进行系统安全。([https://​www.​hyperledger.​org/​](https://www.hyperledger.org/))。
- en: Blockchain Use Case Examples for the Naval Logistics/Supply Chain
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 海军后勤/供应链的区块链用例示例
- en: 'We looked at three general use cases to apply BC technology using both cloud
    versions of IBM and Oracle BC platforms: (1) financial and inventory transaction
    audit trails, (2) serial number tracking, and (3) maintenance log integrity. Maintenance
    log integrity involves the same issues as AI dataset integrity. The three examples
    are as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们研究了使用IBM和Oracle BC平台的云版本应用区块链技术的三种常见用例：（1）财务和库存交易审计追踪，（2）序列号跟踪，以及（3）维护日志完整性。维护日志的完整性涉及与AI数据集完整性相同的问题。以下是三个示例：
- en: '*Original case 1—*financial and inventory transaction audit trials. An investigatory
    inventory and financial transactions via audit trails can be a costly and timely
    process, and the audit trails could encompass different systems throughout a vast
    network in such an organization as the Navy. The questions to be answered might
    include what, where, and who—where a distributed ledger would be able to track
    “what” through immutable data blocks that make up the ledger. One of the BC’s
    strengths is identity verification and management, which would be able to verify
    and track the “who” in any financial and inventory transactions on the BC.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*原始案例1—*财务和库存交易审计追踪。通过审计追踪进行调查的库存和财务交易可能是一个昂贵和耗时的过程，而审计追踪可能涵盖一个如海军这样的组织中各种系统。需要回答的问题可能包括“什么”，“在哪里”，“谁”—其中分布式账本能够通过组成账本的不可变数据块跟踪“什么”。BC的一个优势是身份验证和管理，它能够验证和跟踪BC上任何财务和库存交易中的“谁”。'
- en: '*Original case 2—*serial number tracking/BC tracking can also be applied to
    the tracking of specific items in the supply chain, such as serial numbers. Also,
    the tracking could include a visual identification of the item by an individual,
    which would automatically be identified as a trusted agent to make that verification
    along with the where and the when.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*原始案例2—* 序列号跟踪/区块链跟踪也可应用于追踪供应链中特定物品的跟踪，如序列号。此外，跟踪还可以包括个人对物品的视觉识别，该识别将自动被识别为可信代理以进行验证，并包括何时何地。'
- en: '*Original case 3—*maintenance log integrity/maintenance repairs, such as on
    naval aircraft, ground, or ship systems, typically generate data on various transactional
    databases, which in turn may be sourced to other databases or repositories such
    as data warehouses, enterprise resource planning (ERP) systems. Our past research
    on aviation and ground maintenance systems databases shows that there are errors
    in the databases and often information is not updated. At the tactical and operational
    levels, this could have an impact on the effective efforts to ensure maximum mission
    readiness. Smart contracts, which are integral to HLF, are codes that can check,
    enforce, or flag bad data. Certainly, relational databases can have triggers to
    check for illogical data entries, but it isn’t always being done, and typically
    several databases and sources may be involved in a maintenance information system
    to make such error checking costly or not practical. While some minor errors may
    be acceptable in transactional databases, these errors could have an impact on
    data analysis and ML/AI if the data in these systems are used as training datasets.
    BC could use smart contracts to flag errors over a diverse set of data sources
    and provide basic provenance.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*原始案例 3—*维护日志完整性/维修维护，例如在海军飞机、地面或船舶系统上，通常会产生各种事务性数据库的数据，这些数据可能会被源于其他数据库或存储库，例如数据仓库、企业资源规划
    (ERP) 系统。我们过去对航空和地面维护系统数据库的研究表明，数据库中存在错误，而且经常信息没有更新。在战术和操作层面，这可能会对确保最大任务准备的有效工作产生影响。作为
    HLF 的一部分，智能合约是可以检查、执行或标记错误数据的代码。当然，关系数据库可以有触发器来检查不合逻辑的数据条目，但并不总是这样做，通常几个数据库和来源可能涉及到维护信息系统，使得这种错误检查成本高昂或不可行。虽然在事务性数据库中可能有些微的错误是可以接受的，但如果这些系统中的数据被用作训练数据集，这些错误可能会对数据分析和
    ML/AI 产生影响。BC 可以使用智能合约标记来自各种数据源的错误并提供基本溯源。'
- en: Blockchain Use Case Examples for System Safety
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 系统安全的区块链用例示例
- en: 'In our second set of use cases (using Hyperledger Fabric open-source), we specifically
    address three software system safety use cases applied to the open-source HLF:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第二组用例中（使用 Hyperledger Fabric 开源），我们专门针对三个软件系统安全用例应用于开源 HLF 进行了讨论：
- en: '*New case 1—*a researcher/data scientist needs to manage data or training sets
    for research or ML to process text or binaries (images, RFI signals), structured
    and unstructured.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*新案例 1—*研究人员/数据科学家需要管理数据或研究或 ML 的训练集，以处理文本或二进制文件（图像、RFI 信号）、结构化和非结构化数据。'
- en: '*New case 2—*a data scientist needs to derive metrics on a dataset but is not
    allowed to see raw data.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*新案例 2—*数据科学家需要从数据集中导出指标，但不被允许查看原始数据。'
- en: '*New case 3—*BC is used as a database for relatively small source code.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*新案例 3—*BC 用作相对较小的源代码数据库。'
- en: Figure [2](#Fig2) is a simplified HLF BC network that could support our three
    scenarios for software safety in the blue background square on the right (see
    [https://​www.​hyperledger.​org/​](https://www.hyperledger.org/)). This is the
    BC. This BC is supported by a physical network that could be cloud based and supported
    by the Internet. The “off-chain” applications, IoT, and storage are shown outside
    of the square. These are applications developed in a normal way and not a new
    technology. The applications use standard APIs such as REST to interface between
    the user, databases, and the outside world to connect to the BC. They are called
    off-chain because while they interface with the BC, they are not part of the BC.
    From left to right are the identify certificates**—**CAs such as CA1, CA2, and
    CA3 in our example to identify those who have access. BC is good at leveraging
    existing technologies, and CA is old technology using X.509 public key infrastructure
    (PKI), which is used to encrypt and sign email. A1, A2, A3, and so on are off-chain
    client applications that have access to various ledgers (our database) which are
    controlled through CC1 and CC2 (CCL), which set up channels and their access.
    P1 and P2 are peer nodes that in the example host ledgers L1 and L2 for P1 and
    L3 for P2\. Each ledger is supported by smart contracts (S5, S6, S7) that determine
    the business rules and logic of how the ledger is to be written and who can write
    on it. C1 and C2 are channels to determine what applications or entities are allowed
    to see what ledger, which makes Hyperledger very powerful as you can control who
    sees and changes what—such as organization personnel and contractors having access
    to different data.![](../images/513458_1_En_11_Chapter/513458_1_En_11_Fig2_HTML.png)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: HLF scenarios (new use cases)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Off-chain A1 is an application that administers access to the repository and
    writes to the ledger, which records the metadata in each dataset and provides
    a digital signature/hash value. CCL provides access to Channels 1 and 2 and, as
    shown, access to all ledgers. For structured data in the repository (maybe more
    than the one shown in the diagram), Al would post/write the metadata of a dataset
    of interest including, if practical, all of the data fields and DTG and record
    a hash value or signature. This would be entered in either L1, L2, L3, or other
    ledgers created. It is not practical to record/post large datasets on a BC ledger,
    but metadata and pointer/anchors to the data could be provided through URLs. It
    is possible that through the administrator interfacing with a peer node, the BC
    could store some small datasets through CouchDB, which would provide the current
    information/state of an asset such as a dataset.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: New Case 1
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '*New Case* 1 is about cybersecurity and trust in the data used for analytics
    and the building of AI models*.* Figure [2](#Fig2) shows application A2, which
    could be a customer/client such as a data scientist that is interested in datasets
    or training sets for an AI project. This customer per the diagram (set up by CC)
    has access to Channels 1 and 2, which means he can view Ledgers 1 through 3, which
    would be information about various datasets that can be accessed. In one scenario,
    the person using A2, the Web application, for example, could search for a specific
    dataset or topic and then request that dataset through the application, which
    would check the smart contract—let’s say for L2—to see if the system allows read
    access to the repository.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*新案例* 1 是关于网络安全和对用于分析和构建AI模型的数据的信任。图[2](#Fig2)展示了应用程序A2，这可能是一个客户/客户端，比如一个对AI项目的数据集或训练集感兴趣的数据科学家。根据图表（由CC设置），根据图表（由CC设置），这个客户可以访问通道1和2，这意味着他可以查看总帐1到3，这将是关于可以访问的各种数据集的信息。在一个场景中，例如，使用A2，Web应用程序的人可以搜索特定的数据集或主题，然后通过应用程序请求该数据集，该数据集将检查智能合约——假设为L2——以查看系统是否允许对存储库的读取权限。'
- en: Existing off-chain software would complete the task and send an anchor or link
    (URL) to retrieve that dataset. The customer could later check back and see if
    the data have changed/been tampered with or if the data were given to another
    user. Also, the client would be provided the provenance and metadata and even
    points of contact, including subject matter experts and the owner of the data.
    The client can check to see if the dataset has changed and who changed it, since
    any changes to the repository would be recorded in the appropriate ledger as to
    who, when, and what. Smart contracts could also provide some prefiltering through
    smart contracts to reduce unintentional errors. In the past, this has been done
    pre-analysis, but by using smart contracts, this would only need to be done once
    and not by each researcher or customer. This AI system safety idea is similar
    to the IBM concept [[13](#CR13)], where the authors sought a trusted AI environment
    through provenance with a BC library exposed by REST or Python APIs that provided
    support for “immutable recording of the AI process, querying for traceability
    and audit, fair value attribution, etc.” We take it a further step to suggest
    that BC can be part of a smart repository solution that allows clients to search
    and find trusted datasets and safeguard them. A variation of this use case is
    a federated learning (FL) scenario that uses a collaborative ML technique whereby
    the devices collectively train and update a shared ML model while preserving their
    datasets. Even in a trusted military network using a private BC, some devices
    on the edge may prove untrustworthy, and ur Rehman et al. [[14](#CR14)] propose
    a reputation-aware FL that enables trust through BC consensus and trust algorithms
    through BC smart contracts.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现有的链下软件将完成任务并发送一个锚点或链接（URL）来检索该数据集。客户稍后可以返回并查看数据是否已更改/被篡改或数据是否已提供给另一个用户。此外，客户将提供出处和元数据，甚至包括主题专家和数据所有者的联系方式。客户可以检查数据集是否已更改以及谁更改了它，因为对存储库的任何更改都将记录在适当的总帐中，记录谁、何时和什么。智能合约还可以通过智能合约提供一些预过滤以减少意外错误。过去，这是在分析之前完成的，但是通过使用智能合约，这只需要一次完成，而不是每个研究人员或客户都需要完成。这个AI系统安全性的想法与IBM概念类似[[13](#CR13)]，在那里作者通过REST或Python
    API公开了一个BC库，通过BC库提供了对“AI过程的不可变记录、可追溯性和审计、公平价值归因等”的支持，我们进一步建议BC可以成为智能存储库解决方案的一部分，允许客户搜索和找到可信的数据集并保护它们。这个用例的一个变体是使用协作ML技术的联合学习（FL）场景，其中设备共同训练和更新共享的ML模型，同时保留它们的数据集。即使在使用私人BC的可信军事网络中，一些边缘设备可能证明是不可信的，ur
    Rehman等人[[14](#CR14)]提出了一种通过BC共识和通过BC智能合约的信任算法实现信任的声誉感知FL。
- en: Related to FL are the existence and rise of highly complex problems that require
    solutions that can adapt to changing events and environments. An engineered solution
    must address highly complex problems through adaptive architectures and the embedding
    of constituent systems with the intelligence to learn, self-organize, collaborate,
    and evolve to achieve desired adaptable emergent behavior. Advances in information
    and computational technologies and the emergence of IoT devices that perceive
    their internal and external environments to enable the potential development of
    complex, adaptive, and intelligent capabilities needed to engineer a complex adaptive
    system of system solutions. Blockchain learning coupled with a federated learning
    approach could be key enablers for engineered solutions that address highly complex
    problems through self-organization and desired emergent behavior. A blockchain
    approach can ensure trust among IoT devices (intelligent constituent systems)
    exchanging information and collaborating in a Federated Learning architecture.
    Johnson [[15](#CR15)] notes that system information assurance is critical in an
    adaptive complex system as communication issues could take the form of a cyberattack,
    injecting unauthenticated and/or false data into the system or causing denials
    of service. Blockchain could monitor IoT devices and prefilter out any unreliable
    data sources or unauthenticated IoT devices to ensure trusted collaborations using
    trust algorithms embedded in blockchain smart contracts.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: New Case 2
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: A user wants to compile metrics but is not allowed access to the raw data because
    of security or cross-domain restrictions. Lampropoulos et al. [[16](#CR16)] proposed
    a similar scenario, where one Telco A holds private datasets and internally processes
    a data request by another Telco B and Telco A only returns the results to Telco
    B and not the raw sensitive data. The whole process is performed with transparency,
    ensuring the quality of the results and the privacy of the processed data. A3
    in Fig. [2](#Fig2) is an application that only has access to Channel 2\. The user
    then picks the dataset to use and looks at the metadata and fields; then the smart
    contract (S7) executes the query through A1 and posts the results in the ledger
    L3\. This use case could also be used for a cross-domain solution setting up rules
    when a user could have access to a different domain, the raw data, or just the
    results. Channels that are associated with one specific ledger are the means to
    control who sees what ledgers.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: New Case 3
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Our last scenario is the data are not stored off-chain but in the BC itself.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: HLF has the option of using CouchDB that can use standard JSON queries to get
    the “world” or current state of an asset (like a dataset). Perhaps this use case
    would apply to IoT devices where you want real-time data from sensors but still
    want to ensure software safety. The data would be immutable but replicated throughout
    the network.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Figure [3](#Fig3) summarizes the flow in our simple scenarios. First, the “customer”—a
    data scientist or developer—wants to access data such as for training sets in
    ML, or a developer wants access to code. The customer wants to find the right
    data quickly, know who owns it, and know that it can be reasonably trusted. In
    our example, this data resides in a repository that may include both structured
    data (relational databases) and semi-structured and unstructured data such as
    in the form of .JSON files, text, or graphics. The customer starts a request for
    the data, and an answer comes back with the metadata, data fields, date-time group,
    and hash value of the set. This information is in a ledger in addition to an encrypted
    link to access the dataset.![](../images/513458_1_En_11_Chapter/513458_1_En_11_Fig3_HTML.png)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图[3](#Fig3)总结了我们简单场景中的流程。首先，“客户”——一个数据科学家或开发者——想要访问数据，例如用于ML的训练集，或者开发者想要访问代码。客户希望快速找到合适的数据，知道谁拥有它，并知道它可以合理信任。在我们的示例中，这些数据存储在一个存储库中，可能包括结构化数据（关系数据库）和半结构化和非结构化数据，例如.JSON文件、文本或图形。客户开始请求数据，并返回元数据、数据字段、日期时间组和集合的哈希值。这些信息在分类账中，还有一个加密链接，用于访问数据集。![](../images/513458_1_En_11_Chapter/513458_1_En_11_Fig3_HTML.png)
- en: Fig. 3
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图3
- en: Data scientist use case example and smart repositories
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学家使用案例示例和智能存储库
- en: The customer can also see the complete history of changes to the data and can
    verify that the training set, data, or code has not been tampered through the
    hash code both in the metadata and the ledger on the BC. Only those authorized
    can add to the chain, and it is immutable.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 客户还可以查看数据的完整变更历史，并通过BC上的元数据和分类账的哈希码验证训练集、数据或代码是否被篡改。只有授权的人才能添加到链上，而且它是不可变的。
- en: 5 Use Cases Using Three Hyperledger Fabric Versions
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用三个Hyperledger Fabric版本的5个用例
- en: We discuss our results using the IBM, Oracle, and Linux Foundation versions
    of HLF and their application to system safety scenarios. Figure [3](#Fig3) provides
    a simplistic view of the system safety scenario where the data scientist is looking
    for training sets or related data.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了使用IBM、Oracle和Linux Foundation版本的HLF及其在系统安全场景中的应用结果。图[3](#Fig3)提供了一个系统安全场景的简化视图，其中数据科学家正在寻找训练集或相关数据。
- en: The data scientist (the client) uses a Web browser, enabled by REST API or other
    development interfaces, and searches for a dataset or training set through the
    BC which, through certificates (x.509) and smart contracts, knows who the client
    is. Based on governance, the BC and smart contract will decide if that data scientist
    has the authority to retrieve the data. If so, the client will be sent a link
    to access the repository or even an IoT device or a BC repository with frequently
    used datasets, through x.509 certificates, which will have the identity verified
    by the BC, as well as the sending to the client hash value making sure the dataset
    hasn’t been tampered with. The smart contract may do some initial cleaning up
    and filtering of the data. What normally takes months to get the data may only
    take a day and comes with the assurance that the data had not been tampered through
    an immutable BC. Large organizations may require a myriad of forms or approvals
    to get the data to the data scientists, and smart contracts that embed rules and
    authorizations could streamline that burdensome process.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学家（客户）使用Web浏览器，通过REST API或其他开发接口，搜索数据集或训练集，通过证书（x.509）和智能合约，BC知道客户是谁。根据治理，BC和智能合约将决定该数据科学家是否有权获取数据。如果是，客户将收到一个链接以访问存储库，甚至是一个IoT设备或一个带有经常使用的数据集的BC存储库，通过x.509证书，BC将对身份进行验证，并发送给客户哈希值，确保数据集没有被篡改。智能合约可能会对数据进行一些初始清理和过滤。通常需要几个月才能获得数据，现在可能只需要一天，并且保证数据没有被篡改通过不可变的BC。大型组织可能需要大量表格或批准才能将数据提供给数据科学家，而内嵌规则和授权的智能合约可以简化这个繁琐的过程。
- en: Successful Applications of Blockchain for Naval Supply Chain Tracking
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 海军供应链跟踪区块链成功应用案例
- en: As discussed, our previous research investigated how BC could simplify and enable
    access and identity management for the Navy supply and logistics systems in a
    cost-effective manner to reduce administrative friction and how BC could improve
    Navy logistics to the last tactical mile. In our scenario, the first destination
    transportation (FDT) refers to the movement and cost of moving shipments from
    free on board (FOB) points of origin to the location at which the shipment is
    first received for use or storage. As naval regulations apply, the first checkpoint
    of where a shipment is received, whether within the United States (CONUS) or outside
    (OCONUS), begins with a supplier outside of the DoD supply system or industrial
    activity that creates the shipment. The labor and transportation charges, including
    freight drayage, cartage, port handling, and other in-transit costs, are processed
    at the FDT. Freight cartage refers to any inland transit of cargo between locations,
    which serves as the “checkpoints” in the BC network.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: When a location is assigned responsibility for “cartage of consignments” to
    land-based activities, ships, or other transport units, the charges of transportation
    are given to the location of assigned responsibility, which acts as a peer node
    checkpoint in the network. At this point, the initial entry in the ledger may
    be created and committed by the peer node belonging to the FDT and the orderers.
    It is important to note that FDT does not only include shipments of equipment
    but also the initial transportation of Navy-owned materials that are provided
    to a contractor for research. This indicates that the charges of a shipment from
    a contractor’s facility to its final destination point are paid by the government.
    However, to maintain the legitimacy of a decentralized ledger in this research
    study, the network for which the ledger is maintained consists of only contractors,
    supply facilities, and final base destinations. Essentially, tracking responsibility
    is passed down from supplier to checkpoint. The checkpoint managers responsible
    for the charges in a shipment delivery may create and commit the transaction over
    the BC network, and the next checkpoint manager may agree or disagree about the
    condition and extraneous details of the shipment that the previous manager signed.
    Currently, the Department of Navy (DON) uses service-wide transport (SWT) as a
    clearinghouse, which is a centralized operation and maintenance manager created
    to provide transportation funds for naval shipments and mail. Since naval cargo
    and the movement of mail to bases are not responsibilities of a destination location,
    the SWT was created to pay for the movement of material, such as aircraft engines,
    mission module packages, catapult and arresting gear, propellers, shafts, civil
    engineering support equipment, safety equipment, drones, overseas mail, and Navy
    Exchange Service Command (NEXCOM) merchandise shipped from the United States to
    international locations.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: For disconnected operations, to maintain an accurate ledger with the consensus
    algorithm, the peer nodes must be connected to the fabric environment unless the
    peer node decides to save the ledger as a .JSON file and re-upload the ledger
    as a .CSV file once back online. The ledger is automatically updated after the
    node reconnects following disconnections due to shipboard communications. The
    fabric environment will make BC technology a more viable option for all naval
    transportation activities.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 对于断开操作，为了使用共识算法维护准确的分类帐，对等节点必须连接到织物环境，除非对等节点决定将分类帐保存为 .JSON 文件，然后在重新联机后将分类帐重新上传为
    .CSV 文件。分类帐在节点由于船舶通信而断开连接后重新连接后会自动更新。织物环境将使区块链技术成为所有海运活动的更可行选择。
- en: The Navy requires a multifunctional and secure platform that enables personnel
    to track multiple shipments from production facilities to bases and a secure ledger
    of inventory that can only be modified with either an undisputed consensus or
    an access to the smart contract. Once a peer node administrator or user in the
    network has access to their smart contract, they can modify the transaction protocol
    that occurs on transactions in the network. However, the network will not instantiate
    a new version until there is an agreement with the channel creator or the majority
    of the channel members.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 海军需要一个多功能且安全的平台，使人员能够跟踪从生产设施到基地的多个货物运输，并且只能通过无争议的共识或对智能合约的访问来修改库存的安全分类帐。一旦对等节点的管理员或网络中的用户可以访问他们的智能合约，他们就可以修改网络中的交易发生的事务协议。然而，在与通道创建者或通道大多数成员达成协议之前，网络将不会实例化新版本。
- en: 'In this simplified logistics BC network, the smart contract contains six methods
    that carry out the protocol for each transaction on the ledger: foodAssetExists,
    createFoodAsset, readFoodAsset, updateFoodAsset, trackFoodAsset, and deleteFoodAsset.
    The method of using names indicates that each shipment is checked to verify if
    it already exists at a location denoted by a string. After checking for duplication,
    the asset is created in the ledger using a key-value pair, such as “001: a shipment
    of supplies.” Once the asset is created, it is always a good practice to read
    the asset’s details into the ledger so that users further down the network have
    a detailed understanding of what a package is supposed to contain. Also, if a
    shipment is changed—say, a package is redirected to a base that requires supplies
    urgently—the shipment’s location is updated within the ledger and deleted once
    the shipment arrives.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简化的物流区块链网络中，智能合约包含六种方法，用于执行分类帐上每个交易的协议：foodAssetExists、createFoodAsset、readFoodAsset、updateFoodAsset、trackFoodAsset
    和 deleteFoodAsset。使用名称的方法表示，将检查每个货运是否已经存在于由字符串表示的位置。检查重复后，使用键值对在分类帐中创建资产，例如“001：一批供应品的货物。”一旦创建了资产，最好将资产的详细信息读入分类帐中，以便网络中的后续用户详细了解包裹应该包含的内容。此外，如果货物发生变化——例如，将包裹重定向到紧急需要供应品的基地——则在分类帐内更新货物的位置，并在货物到达后将其删除。
- en: A multifunctional and secure platform that enables personnel to track multiple
    shipments from production facilities to bases or ships in transactions involving
    money, items, material, and history should be trusted, transparent, and traceable
    back to the origin of the item. These transactions involving information, money,
    or physical items such as food or parts usually involve the enforcement of the
    policy, technical, or legal requirements that require the enforcement of business
    rules. BC can maintain a secure ledger of inventory (or transactions involving
    data or information) that can only be modified with either an undisputed consensus
    or an access to the smart contract, which can enforce business rules and flag
    “violations.” Once a peer node administrator or user in the network has access
    to their smart contract, they can modify the transaction protocol that occurs
    on transactions in the network. However, the network will not instantiate a new
    version until there is an agreement with the channel creator or the majority of
    the channel members.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一个多功能且安全的平台，使人员能够追踪从生产设施到基地或船只的多个货物运输，在涉及货币、物品、材料和历史的交易中应该是可信的、透明的，并且可以追溯到物品的起源。这些涉及信息、货币或食品等实物的交易通常涉及到需要执行业务规则的政策、技术或法律要求。区块链可以维护一个安全的存货分类账（或涉及数据或信息的交易），只能在无异议的一致意见或智能合约的访问下进行修改，智能合约可以执行业务规则并标记“违规行为”。一旦网络中的对等节点管理员或用户有权访问他们的智能合约，他们可以修改在网络中进行的交易协议。然而，网络在与通道创建者或大部分通道成员达成一致意见之前不会实例化一个新版本。
- en: 'Based on the above process, we showed how a food or item tracking scenario
    would work using both IBM and Oracle cloud versions of HLF (see Fig. [6](#Fig6)).
    In these BC networks we set up, the smart contracts (Fig. [4](#Fig4)) contain
    six methods that carry out the protocol for each transaction on the ledger: foodAssetExists,
    createFoodAsset, readFoodAsset, updateFoodAsset, trackFoodAsset, and deleteFoodAsset.
    In our food/item tracking scenario, the method of using names indicates that each
    shipment is checked to verify if it already exists at a location denoted by a
    string. After checking for duplication, the asset is created in the ledger using
    a key-value pair, such as “001: a shipment of supplies.” Once the asset is created,
    it is always a good practice to read the asset’s details into the ledger, so that
    users further down the network have a detailed understanding of what a package
    is supposed to contain. Also, if a shipment is changed, say, a package is redirected
    to a base that requires supplies urgently, the shipment’s location is updated
    within the ledger and deleted once the shipment arrives.![](../images/513458_1_En_11_Chapter/513458_1_En_11_Fig4_HTML.png)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上述过程，我们展示了如何使用IBM和Oracle云版本的HLF进行食品或物品跟踪场景（参见图[6](#Fig6)）。在我们设置的这些区块链网络中，智能合约（图[4](#Fig4)）包含六种方法，用于执行分类账上每个交易的协议：foodAssetExists、createFoodAsset、readFoodAsset、updateFoodAsset、trackFoodAsset和deleteFoodAsset。在我们的食品/物品跟踪场景中，使用名称的方法表示每个货运是否已经存在于由字符串表示的位置。在检查是否重复后，使用键值对（例如“001：一批供应品”）在分类账中创建资产。一旦资产被创建，将其详细信息读入分类账是一种良好的做法，以便网络中更深层次的用户对包裹应该包含的内容有详细的了解。此外，如果货运发生了变化，例如，一批货物被重定向到一个急需供应的基地，那么货运的位置将在分类账中更新，并在货运到达后将其删除。
- en: Fig. 4
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图4
- en: Sample ledger of shipments that are added and updated (contents/location)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 添加和更新的货物分类账示例（内容/位置）
- en: Blockchain Use Case Examples for the Navy Logistics/Supply Chain
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 海军后勤/供应链的区块链使用案例示例
- en: Using IBM BC Platform™
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用IBM区块链平台™
- en: 'To use the IBM BC Platform, users are required to install four vital components:
    (1) the Visual Studio Code environment, (2) Node.js, (3) Docker, and (4) Kubernetes.
    The Virtual Studio Code environment is the off-line integrated development environment
    (IDE), where developers create smart contracts using the open-source programming
    language Typescript, which was developed by Microsoft (see Fig. [4](#Fig4)).'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用IBM区块链平台，用户需要安装四个关键组件：（1）Visual Studio Code环境，（2）Node.js，（3）Docker和（4）Kubernetes。Visual
    Studio Code环境是离线集成开发环境（IDE），开发人员在其中使用由微软开发的开源编程语言Typescript创建智能合约，如图[4](#Fig4)所示。
- en: Smart contracts serve as the fundamental basis of all enterprise BCs because
    they give certified users the ability to create new transactions and assets, as
    well as other functions specific to a project. In this project, the team’s main
    goal was to create a consensus network that has the power to create food shipment
    assets, update or delete them from the ledger when required, and track their location
    using the “foodId” string, which may be replaced by radio-frequency identification
    (RFID).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: The HLF (from the Linux Foundation) is the basis of both IBM and Oracle platforms.
    Its components are created in a Kubernetes cluster usually within the IBM Cloud.
    A Kubernetes cluster contains a set of working machines (nodes) that run containerized
    applications. The nodes within the cluster host the components of the application
    workload. Within the cluster, the control plane manages the nodes and workloads
    that run across multiple machines, as shown in Fig. [5](#Fig5).![](../images/513458_1_En_11_Chapter/513458_1_En_11_Fig5_HTML.png)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 5
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Visual representation of the interaction between Kubernetes and Cloud
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Figure [6](#Fig6) illustrates the ordering service and integration of security
    nodes on a blockchain channel. When the fabric environment is running, you can
    create the ordering service. The ordering service is a group of orderers that
    accepts approved transactions endorsed by the peer nodes based on the smart contracts
    and organizes the transactions in the appropriate order in the ledger blocks based
    on the consensus algorithm.![](../images/513458_1_En_11_Chapter/513458_1_En_11_Fig6_HTML.png)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 6
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Ordering service and the integration of security and nodes in a BC channel
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: The peer nodes host ledgers and smart contracts—the backbone of the BC network.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: The smart contract—the transaction protocol—automatically executes, controls,
    and documents transactions or events occurring on the network.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Like all BC frameworks, the network’s integrity is upheld by the consensus algorithm.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Each node in the network reviews the entire BC and checks that all previous
    blocks are valid so that a new transaction may be initiated into the network.
    However, alternatively, in a permissionless public BC, the consensus algorithm
    is replaced by the PoW, which creates a hash system of all of the transactions.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: In a PoW system, miners constantly attempt to solve the algorithm so that they
    may mine new blocks and be the first to extend their BC. HLF doesn’t use the wasteful
    PoW but uses a system closer to the “proof of stake” as a consensus mechanism.
    Essentially, decisions are authorized by users who are permitted to join the system
    and specific channel, as not everyone can join the network. Unlike PoW, computational
    power is not required, since there are no puzzles needed to obtain “currency.”
    In a “proof of stake” system, “validators” are discouraged from creating faulty
    empty blocks because they have the motivation to incorporate a maximum number
    of transactions for gains.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: To ensure security, the hash must be solved by all peer nodes in the network
    so that new transactions may be approved for the network. While this alternate
    approach is viable, it is also time-consuming because ensuring that the ledger
    is tamper-free requires each ledger copy in the nodes to be changed and hashes
    to be solved.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Developers should install Node.js and Docker unless the developer exports both
    items into a .JSON file and re-uploads both files onto the peer nodes as a .CSV
    file. Docker serves as an OS-level platform to package containers and bundled
    software, libraries, and configuration files.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Figure [7](#Fig7) shows that in using well-defined channels within the software,
    these containers communicate with each other to allow the user to connect to the
    fabric environment and add to or change the ledger. Finally, the Kubernetes system,
    which was designed by Google and maintained by the Cloud Native Computing Foundation,
    is the main system that allows the IBM BC Platform to package, install, deploy,
    and manage multiple peer nodes in the platform.![](../images/513458_1_En_11_Chapter/513458_1_En_11_Fig7_HTML.png)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 7
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Interaction between the external software and the HLF environment
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure [8](#Fig8) provides an overview of how you would manage the off-chain
    (UI[2]) and the actual BC network consisting of three fabric components: CA(4),
    peer nodes, and ordering service.![](../images/513458_1_En_11_Chapter/513458_1_En_11_Fig8_HTML.png)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 8
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: High-level representation of IBM blockchain platform architecture
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Using the Oracle Blockchain Platform
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: On both Oracle and IBM platforms, we were able to set up a BC network with peer
    nodes (stakeholders) with smart contracts that set up the rules for transferring
    and tracking assets such as food items discussed previously. More work needs to
    be done on enhancing the network to accurately represent this aspect of the supply
    chain.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: The team set up the network using an Oracle cloud with four peer nodes set up
    over a single channel and used Oracle Identity Management for role-based access.
    Separate roles are required for adding users to a role with BC provisioning entitlement,
    which requires tenancy admin. Additionally, the cloud platform was used instead
    of the software package due to the amount of storage memory required to host the
    software appliance VM packages on a local computer. However, the fundamental concepts
    of using an HLF environment and consensus algorithm remained the same for both
    platforms to build a BC network.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Oracle Blockchain Platform also provides wizards to simplify joining multiple
    instances to the network, creating new channels, and deploying chaincodes. Implementation
    of smart contracts is through Typescript (see Fig. [9](#Fig9)). These and other
    DevOps functions are also available via extensive REST APIs for off-chain applications
    to interface the BC network.![](../images/513458_1_En_11_Chapter/513458_1_En_11_Fig9_HTML.png)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 9
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Sample smart contract for tracking food shipments (language, Typescript)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Oracle offers both a managed cloud version (Oracle Blockchain Platform) of OBP
    (blockchain-as-a-service) and a customer-managed OBP Enterprise Edition for on-premise
    (or third-party cloud) deployment, and nodes can be deployed using both for a
    hybrid network deployment (see Fig. [10](#Fig10)). The cloud SaaS version was
    used for this project. To access this platform, users must log in with authenticated
    credentials in Oracle cloud infrastructure. Once logged in, users can provision
    an instance, which comes with a default channel and participant nodes, along with
    “orderers” that are responsible for maintaining the order of the ledger. An operations
    console is provided, and users are not required to download any external software
    to work with the platform, other than an integrated development environment (i.e.,
    Visual Studio Code) to develop the chaincode and the REST API testing tool, such
    as Postman and/or HLF software development kit, which is downloadable from the
    OBP console under the developer tools tab.![](../images/513458_1_En_11_Chapter/513458_1_En_11_Fig10_HTML.png)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 10
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Oracle blockchain platform cloud service architecture
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: The Oracle Blockchain Platform (see Fig. [10](#Fig10)) comes with an API gateway
    that supports REST API so that developers can invoke a transaction, invoke a query,
    subscribe events with a registered callback, and view the status of a transaction
    within the ledger as well as a set of DevOps REST APIs for administration, configuration,
    and monitoring tasks.^([1](#Fn1))
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Current Use Cases Using Linux Version of HLF for System Safety
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While both IBM and Oracle are HLF based, their complete solutions that use their
    respective cloud services are enhanced by their specific products. For our new
    set of system safety use cases (a work in progress), we installed HLF on a Naval
    Postgraduate School virtual Red Hat server and installed HLF from the Linux open-source
    foundation, which provides all needed images and tools to set up a BC. Unix tools
    include the Git client, CURL, and Docker with Docker Compose without Kubernetes,
    which are key components to build the BC network rapidly. This model suits the
    researcher who wants to study and test out the concepts before moving to production,
    at which point a vendor-supported option can better address the challenges. Typical
    enterprise BC platforms provide dashboards for BC management such as the status
    and health of the HLF network. In the case of the open-source version, no such
    tools are provided; instead, everything is done via command; thus, one has to
    have a good idea of Unix command line tools and scripting languages like bash.
    Both IBM and Oracle allow you to use an IDE to build the applications. All three
    platforms offer interfaces via APIs to programming languages like JavaScript,
    Java, Microsoft Visual Studio, and others. For most production instances, we think
    a cloud-based BC is usually the right way to go for maintainability, support,
    ease of use, and security.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: For the Linux Foundation version of HLF, the complete install includes commands
    to set up an HLF network, issue certificates, set up the ledger, create channels,
    install chaincode, and more. A sample BASH script is provided that goes over all
    these steps and can be customized for new projects such as for our three system
    safety use cases. The Docker container-based platform allows one to have several
    HLF projects to coexist. The test network is shown in Fig. [11](#Fig11) with two
    organizations, R1 and R2\. Organization R0 owns the ordering service (O) of channel
    C1\. A copy of the ledger L1 is on all nodes. The root CA issues the certificates
    CA0, CA1, and CA2 for the three organizations.![](../images/513458_1_En_11_Chapter/513458_1_En_11_Fig11_HTML.png)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 11
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Initial blockchain network on open-source HLF
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Use Case 1
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: First, a channel is created, and member organizations are added to the channel.
    The ledger contains the needed URLs to access different binaries. Using APIs,
    depending on the requester, the chaincode will craft a unique response to be sent
    back. When the response is received, the URL and text are preprocessed; this happens
    in a middleware server outside the HLF; thus, a custom Web page is created and
    served to the end user. This Web page has links to authenticated repositories
    (database back end). Once authenticated access is granted to the data scientist
    (data and training sets used in research and stored in a database), an encrypted
    anchor or URL may be sent to the data scientist to download the dataset.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Use Case 2
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: When a member organization needs to see a part of the ledger, then channels
    have to be created. Membership to a channel is restricted to a subgroup of the
    organizations. In using chaincode, the metrics part of the ledger is provided
    to members of the metrics channel. There exists another channel where members
    can see the raw data using queries—again dictated by the chaincode. Membership
    to the two channels is a different set of organizations. Similar development methods
    used in Use Case 1 apply to Use Case 2.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Use Case 3
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: In this scenario again, a channel is created for a certain member organization
    (not all). These members will be able to access the data in CouchDB via API queries.
    Chaincode will decide which source code (stored in the CouchDB) is provided as
    a returned result of the query. The database is replicated on every node, which
    might be an advantage on the edge and an I/O to IoT devices on the edge. Specific
    use cases for this capability haven’t been developed.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 6 Findings
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We demonstrated through IBM and Oracle examples that HLF could meet logistics/audit
    and security requirements through smart contracts and the inherent trust systems
    with embedded certificates. Data entry errors could be reduced through smart contracts,
    which is an inherent feature of HLF. We believe a consortium BC through HLF would
    be a way to go to be able to share information (through the ledger) with suppliers
    and other third parties but also have the capability not to share when appropriate.
    BC could add the capability for secure transactions through certificates and the
    immutability of the transactions on the BC. The additional capability of BC on
    Navy logistics and supply would be able to catch some data entry errors, to trace
    back to the source, and basically to better know the what, the who (verified),
    and the where of various transactions generated by the supply chain.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: We found that both IBM and Oracle BC platforms may be used to create a secure
    network of peer nodes or naval hotspots that can generate a consensus for the
    legitimacy of the shipment ledger, which can only be modified using smart contracts.
    Since a key component of both platforms is maintaining the accuracy and security
    of the ledger, all users must consistently export and import the smart contracts
    and ledgers onto their respective peer nodes every time an update is made on the
    ledger or if the transaction protocol on the smart contract is changed. A special
    concern with Navy logistics is the possibility of unreliable networks, especially
    from shore to ship. The BC protocol creates a multitude of copies of the blocks
    (the public ledger), and if connectivity is lost, the blocks will be updated once
    the network node communications are reestablished. Both IBM and Oracle BC platforms
    were accessed through the cloud, but the option is for the Navy to put either
    platform on its implementation of the cloud or on servers.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: There were differences between IBM and Oracle implementation of HLF—such as
    how the whole network infrastructure was implemented, user interfaces, developer
    tools and application programming interfaces provided, and how the implementation
    would connect to the Navy’s legacy systems to reach the last mile, such as on
    the ship. These were real value-added capabilities since HLF alone cannot make
    an enterprise BC system that supports the existing logistics information system.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: We found a “consortium BC” with a BC consensus network to be the best fit for
    the use cases. A consortium allows both private and public users to use the BC,
    while control is maintained by the private users (the Navy) through a consensus
    network, which means by the consensus of trusted Navy entities. This is contrasted
    by PoW BC networks used in cyber currency, which are inefficient and not appropriate
    for a government entity. BC technology has the potential for revolutionizing the
    logistics process by ensuring the quality and trustworthiness of logistical generated
    data as well as providing provenance of parts and food, but it is new and risky.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: The team also compared the IBM and Oracle BC platforms on efficiency and maintainability
    of a ledger of shipments and discovered that it was easier to use the IBM platform
    to create and export smart contracts and ledger; however, in September 2021, Oracle
    will provide similar capabilities for developing and deploying smart contracts.
    The IBM platform required users to develop their smart contract on the Visual
    Studio Code environment, export the contract as a .JSON file, log in to the online
    BC network, and import the contract and ledger as a .CSV file using a converter.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: The Oracle Blockchain Platform, on the other hand, allowed users greater flexibility
    to join ledgers more cohesively. The Oracle platform allowed users to log in to
    the Oracle cloud after they were approved by an administrator and used simple
    software like integrated development environment (IDE) and the software development
    kit. Furthermore, the Oracle Blockchain Platform employed chaincode as a smart
    contract for transactional protocols in the network. A chaincode is written in
    either Java, Node.js, or Go and packaged into a ZIP file, which can be installed
    on the network. This is similar to how smart contracts are exported as .JSON files
    and uploaded on the IBM network as .CSV files. More specifically, chaincodes outline
    the structure of the ledger, initialize it, create updates (such as reading or
    updating entries), and respond to queries.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Should HLF be used for software safety for ML and AI development? BC is general-purpose
    technology (GPT) like the Internet, so BC isn’t a solution in and of itself, but
    it acts as an enabler that provides a trusted, distributed ledger that could be
    used for smart repositories and software safety. If other technologies are better,
    then why aren’t they commonplace? BC isn’t *the* solution but, along with off-chain
    technology, may be a technology that enhances existing business processes.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 7 Summary and Conclusions
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From our work, the following lessons learned can be applied to protecting datasets
    such as training sets for AI:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Various versions of HLF will work adequately, but due to complexity, we recommend
    not using open-source but software vendors such as Oracle, IBM, Microsoft Azure
    BC, and others. BC is not a DoD core competency; therefore, contractor support
    is needed.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: HLF or other BCs alone are not the entire solutions, since BC is an enabling
    or general-purpose technology (GPT)—so in itself, it is not a solution. You must
    use a BC protocol within an integrated network infrastructure that also provides
    for the last mile to bring the data to the user, and this is through APIs. We
    recommend, ceteris paribus*,* that you consider using the same company that runs
    your relational databases or ERP, as your team will be familiar with that architecture.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We used a qualitative methodology that included three general logistic use
    cases: (1) financial and inventory transaction audit trails, (2) serial number
    tracking, and (3) maintenance log integrity. These were used in consultation with
    the topic sponsor. We created simple scenarios where items were tracked through
    a BC network, and smart contracts would check for certain conditions that would
    simulate quality control and tracking. We selected two enterprise HLF platforms,
    Oracle and IBM, and evaluated them in terms of functionality, development ease,
    and security.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: We found that both IBM and Oracle BC platforms may be used to create a secure
    network of peer nodes and a consensus for the legitimacy of the shipment ledger,
    which can only be modified using smart contracts. A special concern with Navy
    logistics is the possibility of unreliable networks, especially from shore to
    ship. The BC protocol creates a multitude of copies of the blocks (the public
    ledger), and if connectivity is lost, the blocks will be updated once the network
    node communications are reestablished. Both IBM and Oracle BC platforms were accessed
    through the cloud, but the option is for the Navy to put either platform on its
    implementation of the cloud or servers.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: There were differences between IBM and Oracle implementation of HLF, such as
    how the whole network infrastructure was implemented, user interfaces, developer
    tools and application programming interfaces provided, and how the implementation
    would connect to the Navy’s legacy systems to reach the last mile—such as on the
    ship. These were real value-added capabilities since HLF alone cannot make an
    enterprise BC system that supports the existing logistics information system.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: BC technologies offer the potential to reduce costs and logistical friction
    by providing a trusted ledger in support of logistic transactions and processes.
    Errors can be reduced through smart contracts, as demonstrated in both IBM and
    Oracle BC platforms. BC tracks assets, and therefore, BC can track data assets
    just as well as a partial solution to software safety.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Intermittent Communications
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Navy primarily operates at sea, which means the communications infrastructure
    supporting the BC network may not always be available or reliable or provide bandwidth.
    A significant concern when implementing BC technology in cargo shipments is its
    dependence on a continuous connection to the fabric environment. However, HLF
    is a robust distributed database (ledger) that has many copies of itself.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: The BC platform does require you to be connected to the fabric environment at
    all times or to consistently re-upload the ledger to peer nodes to have a constant
    accurate ledger. BC provides an update method that if a node is off-line, it will
    have an update of its BC once reliable network is reestablished.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: The Issue of Governance
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Figure [4](#Fig4) showed a simple notational circle labeled “Governance,” but
    this issue is far from simple and is the key to any implementation of BC in support
    of data. While a detailed discussion of governance is beyond the scope of this
    paper, Gaur and Gaur [[17](#CR17)] presented a variety of frameworks, some of
    which would apply to permissioned BC networks. Previous discussions of BC governance
    tended to be about public BCs supporting cyber currencies. They noted that while
    BC is about decentralization, there will have to be some aspects of centralized
    governance—especially ones involving policy and legal aspects in the storage and
    use of data. For example, governance could include safeguards through smart contracts
    that could flag possible AI bias, especially ones used for human resources. Governance
    can consist of different layers, and one classification recognizes different levels
    the data serves and is classified as strategic, operational, and tactical governance.
    Since BC is decentralized by nature, the governance should be at the lowest level
    if diversity and flexibility are important. Ziolkowski et al. [[18](#CR18)] looked
    at governance that includes demand and data management, system architecture design
    and development, membership, and data ownership. Each one represents a possible
    off- or on-chain solution that involves technical and policy considerations—both
    of which may include smart contracts as solutions and resources [[19](#CR19)].
    System architecture design and development are not trivial tasks and are based
    to a great extent on governance and policies. To resolve this, IT network engineers
    must work as part of a consortium to determine the appropriate way to expose their
    peers to other organizations to receive transaction endorsement proposal/simulation
    requests while minimizing an attacker’s ability to gain access to sensitive information
    stored in the simulating peer’s database [[19](#CR19)]. The level of rigor is
    ultimately determined by the policies derived by governance. Data accessibility
    is also a key, so governance should have policies that allow scientists working
    for the DoD to find data not through randomness but structure, without undue delay,
    and data that complies with software safety. BC supporting “smart repositories”
    may facilitate this goal. The default should be to allow our data scientists and
    analysts timely access to data unless there is a good reason not to. Our adversaries
    work for AI superiority, and withholding data from their researchers is something
    they avoid. We refer to unclassified and non-PII/medical data.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
