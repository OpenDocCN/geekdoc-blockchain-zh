- en: © Springer Nature Switzerland AG 2020A. M. LangerAnalysis and Design of Next-Generation
    Software Architectures[https://doi.org/10.1007/978-3-030-36899-9_12](https://doi.org/10.1007/978-3-030-36899-9_12)
  prefs: []
  type: TYPE_NORMAL
- en: 12. The Analyst and Project Management in the Next Generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Arthur M. Langer^([1](#Aff2) [ ](#ContactOfAuthor2))(1)Center for Technology
    Management, Columbia University, New York, NY, USAArthur M. LangerEmail: [al261@columbia.edu](mailto:al261@columbia.edu)'
  prefs: []
  type: TYPE_NORMAL
- en: 12.1 Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter provides guidance on system development life cycle methodologies
    and best practices for project management of in the next generation of systems.
    Project organization including roles and responsibilities are covered. There are
    many aspects of the next generation (5G , IoT, Blockchain ) that are generic;
    however, there are certainly many unique aspects when managing these mobile-based
    systems. Thus, this chapter provides an understanding of where these unique challenges
    occur in the life cycle of software development. It also focuses on the ongoing
    support issues that must be addressed to attain best practices.
  prefs: []
  type: TYPE_NORMAL
- en: A project manager who comes from a traditional software development background
    and understands the phases of software development will perhaps do fine in overseeing
    the progress of packaged software projects. Indeed, traditional project managers
    will focus on budget, the schedule, the resources, and the project plan. Unfortunately,
    packaged software systems, because of their wide spread involvement with many
    parts of the business, needs to go beyond just watching and managing the software
    development process . That is, the project management of IoT requires much more
    integration with the internal and consumer communities. It must combine traditional
    development with business creation, and because of the pre-existing nature of
    the package, it also delves into the internal organizations structure and requires
    their participation in every phase of the development and implementation cycle.
    It is for these reasons that I advocate that the traditional analyst considers
    transitioning their skills to include project management . The reasons for my
    position relates mostly to the addition of the consumer interface. Most traditional
    project managers are from the software development side, whereas the new generation
    of development discussed in this book is more about establishing consumer perspectives.
    Listed below are some of the unique components of mobile development projects.
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Project Managers as Complex Managers*: packaged software projects require
    multiple interfaces that are outside the traditional user community. They can
    include interfacing with writers, editors, marketing personnel, customers and
    consumers , all who might be stakeholders in the success of the system.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Shorter and Dynamic Development Schedules*: Due to the dynamic nature of packaged
    systems, the development is less linear. Because there is less experience and
    more stakeholders, there is a tendency to underestimate the time and cost to complete.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*New Untested Technologies*: There is so much new technology offered particularly
    for Web developers that there is a practice of using new versions of development
    software that has not matured. The method of obtaining new software is easily
    distributed over the Web, so it is relatively easy to try new versions as soon
    as they become available. We are also in the world of DevOps which supports the
    corrections of applications after their release—its fixing and ongoing development
    on the fly!'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Degree of Scope Changes*: Mobile applications, because of their involvement
    with many aspects of the consumer , tend to be much more prone to scope creep
    because of the predictive nature of the requirements. Project managers need to
    work closely with internal users, customers, and consumers to advise them of the
    impact of changes on the schedule and the cost of the project. Unfortunately,
    scope changes that are influenced by changes in market trends may not be avoidable.
    Thus, part of a good strategy is to manage scope changes rather than attempt to
    stop them—which might not be realistic.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Costing packaged Systems is Difficult*: The software industry has always had
    difficulties in knowing how to cost a project. Third-party systems are even more
    difficult because of the number of variables, unknowns, and use of new technologies
    and procedures. Blockchain products, IoT and cloud will likely be dominated by
    various outsource and vendor packages.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '6.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Lack of Standards*: The software industry continues to be a profession that
    does not have a governing body. Thus, it is impossible to have real enforced standards
    as other professions enjoy. While there are suggestions and best practices, many
    of them are unproven and not kept current with new developments. Because of the
    lack of successful packaged software projects, there are few success stories to
    create new and better best practices.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '7.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Less Specialized Roles and Responsibilities*: The software development team
    tends to have staff members that have varying responsibilities. Unlike traditional
    software projects, separation of roles and responsibilities are more difficult
    when operating in a mobile environment For example, defining the exact role of
    a analyst can be very tricky; for example, are analysts programmers, database
    developers, or content designers? The reality is that all of these roles can be
    part of a developer’s responsibility.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '8.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Who Bears the Cost?* There is general uncertainty as to who should bear the
    cost of the packaged system. This refers to the internal organization of stakeholders
    who need to agree on the funding. This becomes even more complex when there are
    delays and cost overruns, because the constituents cannot easily agree on who
    is at fault and therefore who should bear the burden of the additional costs.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '9.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Project Management* *Responsibilities are very Broad*: Mobile architectures
    have broader management responsibilities and need to go beyond those of the traditional
    IT project manager. Working with third-party interfaces require management services
    outside the traditional software staff. As discussed in Chap. [1](480347_1_En_1_Chapter.xhtml)
    analysts need to interact more with external users as well as with non-traditional
    members of the development team such as content managers and social media staff.
    Therefore, there are many more obstacles that can cause project managers to fail
    at their jobs.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '10.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*The Product Never Ends*: The nature of how applications are built today and
    deployed suggests that they are living systems. This means that they have a long-life
    cycle made up of ongoing maintenance and enhancements. So, the traditional begin
    and end project does not apply to a packaged software project that inherently
    must be implemented in ongoing phases.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure [12.1](#Fig1) summarizes these differences between traditional and packaged
    software projects.![../images/480347_1_En_12_Chapter/480347_1_En_12_Fig1_HTML.png](../images/480347_1_En_12_Chapter/480347_1_En_12_Fig1_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 12.1
  prefs: []
  type: TYPE_NORMAL
- en: Next generation software and traditional projects compared
  prefs: []
  type: TYPE_NORMAL
- en: 'The questions that need to be answered are not limited to what the process
    and responsibilities should be, but also who should do them? It is my position
    that a business analyst takes the responsibility of managing the process from
    inception to completion. The duties and responsibilities of a business analyst
    are excellent prerequisites for understanding the intricacies of project management
    . Their roles as analysts require them to have relationships with the organization
    and an understanding of the politics and culture that drives the business. I am
    not suggesting that every analyst should become a project manager, but rather
    that one of the analysts should also be the project manager. In order to determine
    the right fit, it is important to define the skill sets that are required for
    successful project management . These are summarized below:'
  prefs: []
  type: TYPE_NORMAL
- en: Software experience.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding of budgeting, scheduling, and resource allocation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Excellent written and verbal communication skills.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to hold and lead meeting discussions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detailed oriented yet globally motivated (can see the difference between the
    forest and the trees).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pragmatic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A sense of humor that comes across as a natural personal trait as opposed to
    an acted one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to be calm and level-headed during crisis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experience with Web technologies, multimedia, and software engineering.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unfortunately, it is difficult to find the project manager that has all of these
    traits. In many cases it is wise to promote from within and develop the expertise
    internally. This is especially effective because an internal individual is a known
    quantity, and most likely already fits into the culture of the organization. Most
    important is that the individual is accepted in the culture. On the downside,
    it takes time to develop internal talent, and sometimes this trained talent leaves
    the company once they have received their training. There is benefit to bringing
    in someone from the outside because they can have a fresh view of the project,
    and offer more objective input on what needs to be done to get the project finished
    on time.
  prefs: []
  type: TYPE_NORMAL
- en: 12.2 Defining the Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step for the project manager is to develop a mission statement for
    the project. A mission statement helps managers and users/consumers to focus on
    three core tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify the projects objectives.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify the users and consumers .
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Determine the scope of the project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 12.3 Identify Objectives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Project objectives are defined as the results that must be attained during the
    project. According to Lewis ([1995](#CR2)), project objectives must be specific,
    measurable, attainable, realistic, and time-limited. The most difficult of these
    objectives tends to be “measurable” and “attainable.” Ultimately, objectives state
    the desired outcomes and focus on how the organization will know when it is reached?
    Objectives are typically devised by the project’s stakeholders. These individuals
    are usually executives and managers that have the most to gain from the successful
    implementation of the packaged software system. Unfortunately, while this sounds
    good, it is difficult to implement. In reality, it is difficult for executives
    to articulate on what they are looking for. Indeed, the packaged software paradigm
    has simply forced many executives to create products because they think it is
    a competitive advantage for their companies to have one. This, in essence, means
    that executives might be driven by the fear that they must do something, or something
    is better than nothing.
  prefs: []
  type: TYPE_NORMAL
- en: Packaged software objectives evolve and cause many iterative events to occur,
    especially in the early phases of the project. Good and effective objectives tend
    to be short sentences that are written down. Using this format, objectives can
    be used by project managers to effectively avoid scope creep. The objectives should
    be distributed to all stakeholders and project members so that everyone understands
    them.
  prefs: []
  type: TYPE_NORMAL
- en: 12.4 Identify Users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Chapter [2](480347_1_En_2_Chapter.xhtml) covered the significance of users
    and their importance to the success of any project. In the chapter I defined three
    types of users: internal, customers and consumers . It is important for project
    managers to understand the value of the input from each of these users. Indeed,
    the content of the Web site will ultimately be determined by the users who access
    the site. However, managers and developers often disagree on how much input is
    needed from users. This is further complicated when managing packaged software
    projects because of the diversity of the users and the complexity of decisions
    that must be made. Furthermore, there is always limited time, so packaged software
    project managers need to be as productive as possible with how user input is obtained,
    the types of interviewing that is done, and the method of measuring the value
    of the user’s input.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the only way to measure a site’s success is to determine whether the
    objectives have been met, the philosophy of who gets interviewed and how much
    value their input has should be mapped to the original objectives set forth by
    management. Thus, besides the internal users, the real obstacle for project managers
    is to identify which users know best what they want from the packaged software
    system. Besides one-on-one interviews, the project manager can also obtain information
    from two other sources: market research and focus groups .'
  prefs: []
  type: TYPE_NORMAL
- en: There are many firms that provide market research services. Such firms have
    databases of researched information relating to user preferences and behaviors.
    They also collect information about packaged solutions and what users expect from
    them. Every packaged software system should have a budget using a market research
    firm so that they can obtain an objective and independent opinion about user preferences,
    particularly within a certain market segment. Conducting a focus group is a cheaper
    yet effective way to get objective input from users. It is particularly useful
    when attempting to assess consumer preferences. Focus groups involve the selection
    of sample consumers that the project manager feels represents the typical user.
    The sessions are filmed behind a mirror, and users respond to questions about
    their preferences when using a packaged software system. The focus group typically
    needs a moderator who controls the meeting agenda and ensures that all of the
    research questions are answered by the participants. During all sessions it is
    important that the project manager ensure that the objectives of the packaged
    software system be clearly defined to the audience. The objectives should be in
    writing and reviewed before the start and end of each session. In addition, the
    objectives should be written on a whiteboard or flip chart so participants can
    be reminded of the scope of the project should certain users start discussions
    on tangent subjects.
  prefs: []
  type: TYPE_NORMAL
- en: 12.5 Determining the Scope of the Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The scope of the project relates to the time and budget of when it needs to
    be completed. Because there is always a limited amount of time and money to create
    product, the scope of the project must be negotiated against what can be done
    with what users want done. Thus, scope is the domain of functions and features
    that will be included in the packaged software system based on a specific time
    commitment and cost outlay. The best approach to formulating a scope statement
    is to first create a work breakdown structure that contains the mission statement,
    lists the objectives, and formulates the tasks and subtasks to complete each objective.
    Thus, a work breakdown structure is really a form of functional decomposition
    of the tasks necessary to meet the objectives. Once stakeholders and the project
    manager agree on the objectives and what tasks will be done to attain them, then
    the scope of the project is complete. Figure [12.2](#Fig2) depicts a sample work
    breakdown structure.![../images/480347_1_En_12_Chapter/480347_1_En_12_Fig2_HTML.png](../images/480347_1_En_12_Chapter/480347_1_En_12_Fig2_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 12.2
  prefs: []
  type: TYPE_NORMAL
- en: Sample work breakdown structure
  prefs: []
  type: TYPE_NORMAL
- en: Once tasks and subtasks have been determined, the packaged software project
    manager needs to determine the time and cost of completing each component. Thus,
    the work breakdown structure will eventually contain the costs for each task within
    each objective for the entire project as proposed. Management and the project
    manager can then begin the process of negotiating what can be completed on time
    and on budget by removing subtasks or tasks as appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: Another valuable approach to building packaged software projects is phasing
    deliverables. Because packaged software projects tend never to be finished, it
    might be advisable to deliver some portion of the system first and then add-on
    functionality in subsequent releases of the system. Obviously, this might not
    always be feasible; there are third-party software systems that cannot be phased,
    that is, they are all or nothing at all. However, I believe that all projects
    can have some level of phased development, and that such development in the long
    run benefits the entire scope of the project. Indeed, first releases of a packaged
    solution typically need revision anyway, and the second phase or version might
    be a better time to add certain features and functions.
  prefs: []
  type: TYPE_NORMAL
- en: I stated that the final work breakdown schedule represents the scope of the
    project. Typically, the packaged software project manager will finalize the scope
    statement by preparing a document that includes the work breakdown structure and
    articulates how this structure will be formulated into deliverables for the project.
    In many ways the scope document acts as a management report and reiterates the
    mission and objectives of the project along with the project plan. Figure [12.3](#Fig3)
    shows a typical project plan developed in Microsoft Project.![../images/480347_1_En_12_Chapter/480347_1_En_12_Fig3_HTML.png](../images/480347_1_En_12_Chapter/480347_1_En_12_Fig3_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 12.3
  prefs: []
  type: TYPE_NORMAL
- en: Third-party software project plan
  prefs: []
  type: TYPE_NORMAL
- en: 12.6 Managing Scope
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A project plan can sometimes be referred to as a work breakdown schedule or
    WBS. As shown in Fig. [12.3](#Fig3), it depicts every step in the project and
    can enforce dependencies within tasks and subtasks. This is important, because
    changes to the plan may affect other tasks. A WBS product like Microsoft’s Project
    provides an automated way of tracking changes and determining its effect on the
    entire project. A popular method of tracking changes is called “critical path
    analysis.” Critical path analysis involves the monitoring of tasks that can have
    an effect on the entire scope of the project, meaning it can change the timeframe
    and cost of delivery. A critical path is defined as a task that if delayed will
    cause a delay in the entire project. A task that can delay the project is then
    called a critical task. The importance of managing critical tasks is crucial for
    successful management of packaged software projects. Project managers are often
    faced with the reality that some task has slipped behind schedule. When faced
    with this dilemma. The project manager needs to decide whether dedicating more
    resources to the task might get it back on schedule. However, the first thing
    that the project manager needs to assess is whether the task can affect the critical
    path. If the answer is yes, then the project manager must attempt to use other
    resources to avoid a scope delay. If the task is not critical, then the delay
    may be acceptable without needing to change the project plan. Figure [12.4](#Fig4)
    shows a critical task and a non-critical task.![../images/480347_1_En_12_Chapter/480347_1_En_12_Fig4_HTML.png](../images/480347_1_En_12_Chapter/480347_1_En_12_Fig4_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 12.4
  prefs: []
  type: TYPE_NORMAL
- en: Critical and non-critical tasks using Microsoft project
  prefs: []
  type: TYPE_NORMAL
- en: 12.7 The Budget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Budgeting is one of the most important responsibilities of a project manager.
    The budget effectively prices the tasks that must be delivered and rolls them
    up to the project cost level. It is important to recognize that all budgets are
    estimates. Therefore, they are never 100% accurate—if they were, they would not
    be budgets. The concept behind budgeting is that some tasks will be over-budget
    and others will be under-budget resulting in an offset that essentially balances
    out to the assumptions outlined in the original plan. Budgets are typically built
    on expense categories. Figure [12.5](#Fig5) shows the common budget categories
    that projects should be tracking.![../images/480347_1_En_12_Chapter/480347_1_En_12_Fig5_HTML.png](../images/480347_1_En_12_Chapter/480347_1_En_12_Fig5_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 12.5
  prefs: []
  type: TYPE_NORMAL
- en: Sample E-business project budget expense categories
  prefs: []
  type: TYPE_NORMAL
- en: 'As stated above, a project budget is a set of assumptions. Typical budget assumptions
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: All content will be provided in machine-readable form.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The content manager will approve content design within 24-hours.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Web design team will present two alternate design schemas.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graphics for the Web site are finalized and ready for integration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is not a bad idea for the project manager to create a budget document that
    includes a list of the assumptions because it allows the manager to track whether
    incorrect assumptions caused delays in the scope of the project. Unfortunately,
    there are also hidden costs that tend not to be included in project budgets. The
    following is a list of common hidden costs that are missed by the project manager:'
  prefs: []
  type: TYPE_NORMAL
- en: Meetings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phone calls.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Research.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development of documents and status reports.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project administration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review Sessions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Presentations to management.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As previously discussed, some project managers add a 10–15% cushion to their
    budgets to absorb common hidden costs. While I do not support cushions, it is
    acceptable if actually listed as a budget item, as opposed to a cushion on each
    budget line item.
  prefs: []
  type: TYPE_NORMAL
- en: 12.8 The Project Team
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The project team is unique from other traditional project organizations. Most
    of the significant differences are attributable to the addition of the packaged
    software responsibilities. Today, the roles and responsibilities for developing
    and supporting packaged software team are far more complex and specialized. The
    project team has evolved because business managers understand the importance of
    technology in transforming the way business is done. On the other hand, there
    are certainly traditional roles and responsibilities that have not changed and
    are generalizable across any software development project.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the structure of project teams can vary depending on the type of project,
    the size of the system, and the time to complete, typical organizations contain
    the following roles and responsibilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Project Manager*: The project manager is responsible for the scope of work,
    developing the project plan, scheduling, allocating resources, budgeting, managing
    the team, interfacing with users, and reporting to management on progress. The
    project manager also deals with politics and other business issues, which include
    but are not limited to contract negotiations, licensing of third-party products,
    and staff hiring. In some instances, the project manager is responsible for handling
    customer and consumer needs as it relates to the design and development of the
    packaged software system. Perhaps the most important responsibility of the packaged
    software project manager is to know at all times what has been done and what needs
    to be done.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Account Manager*: The account manager is usually a senior manager who is responsible
    for a number of projects. Account managers also serve clients in a number of ways,
    from selling new product to providing client support. In many ways, the account
    manager is the representative of the client’s needs to the internal development
    team. Account managers can be called upon to obtain information from customers
    about their needs and their feedback on how the system supports their needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Technical manager*: This individual is the senior technologist of the project.
    He/she is usually from the development team and is the most experienced developer.
    The technical manager is responsible for ensuring that the correct technology
    is being used and deployed properly. This individual manages the programmers,
    database developers and other system integrators. The technical manger provides
    feedback on the development status of each task and reports to the project manager.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Programmer*: A programmer may be needed to do certain custom modifications
    if not outsourced. He/she is responsible for coding applications for the project.
    These applications are coded to spec and can include a myriad of technologies
    including but not limited to server-scripts, database applications, applets and
    ActiveX controls. Development languages used on third-party software projects
    vary, but the Web uses such languages as Java, JavaScript, Visual Basic, VBScript,
    SQL , and C/C++. The technical manager usually manages this individual; however,
    large projects may employ multiple levels of programmers. In certain situations,
    junior programmers report to senior developers who act as mentors to them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Business Analyst* : This individual is responsible for gathering all of the
    user requirements and designing the logic models and architecture of the system,
    which include process models, data models, transactions system design, and process
    specifications. Ultimately the business analyst is responsible for site architecture,
    navigation, search and data retrieval, and interaction design. This role is sometimes
    called an Information Architect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Designer*: Designers create the look and feel of the screens. They use various
    tools to design template content and overall screen structure. Screen designers
    report to the project manager who sets the overall project philosophy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Database* *Administrator* (*DBA*): The DBA is responsible for all physical
    database design and development. This individual must also fine-tune the database
    to ensure efficient operation. Other responsibilities include data partitioning,
    data warehouse setup, data replication and report generation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Network Engineers*: These individuals are responsible for designing network
    configurations that support the packaged software system. Sometimes a network
    engineer is also a security specialist who is responsible for registering domain
    names, setting up email servers and chat rooms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Security Expert*: While this might be the network specialist, larger packaged
    software projects employ a dedicated security expert who works with encryption
    formulas, integrates with content systems, and focuses on securing online transactions.
    This individual can also advise the project manager on strategies to implement
    certain component applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Quality Assurance* *Specialist*: This individual is responsible for creating
    test scripts to ensure that the packaged software system operates within spec.
    The purpose of the test plans, sometimes called acceptance test plans, are to
    provide the minimal set of tests that must be passed for the site to go into production.
    The reporting structure for quality assurance personnel varies. Some believe that
    it is part of the development team and therefore should report to the technical
    manager while others believe that it needs to report directly to the project manager.
    There are still others that believe that the quality assurance staff should report
    to the chief information officer (CIO). The reporting structure is dependent on
    how highly the department values the independence of the testing function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Tester*: A tester is simply a person who carries out the test plans developed
    by the quality assurance staff. These people typically report to quality assurance
    staff, however, sometimes testers are users who are working with the account manager
    to assist in the testing of the product. These testers are in a sense a beta test
    user (beta test means that the software is tested in a live environment).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While this is an exhaustive list of potential positions to have on a project,
    it is unlikely that every one of these positions will exist in any given third-part
    software project. In reality, it is more important that the functionality of each
    of these positions is carried out, regardless of who takes on the responsibility.
    In order to provide better insight to the roles and responsibilities of each position,
    Fig. [12.6](#Fig6) reflects a comparison matrix that compares roles with responsibilities.![../images/480347_1_En_12_Chapter/480347_1_En_12_Fig6_HTML.png](../images/480347_1_En_12_Chapter/480347_1_En_12_Fig6_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 12.6
  prefs: []
  type: TYPE_NORMAL
- en: Project team roles and responsibilities matrix
  prefs: []
  type: TYPE_NORMAL
- en: Figure [12.7](#Fig7) identifies the necessary skills of each of the critical
    members of the project team .![../images/480347_1_En_12_Chapter/480347_1_En_12_Fig7_HTML.png](../images/480347_1_En_12_Chapter/480347_1_En_12_Fig7_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 12.7
  prefs: []
  type: TYPE_NORMAL
- en: Necessary project skill sets
  prefs: []
  type: TYPE_NORMAL
- en: 12.9 Project Team Dynamics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is not unusual for third-party software development projects to operate from
    multiple sites with multiple interfaces. This may require much more organization
    and communication among the members of the team.
  prefs: []
  type: TYPE_NORMAL
- en: 12.10 Set Rules and Guidelines for Communication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When project members are separated by locations or even by work schedules it
    is very important that everyone know what their roles are, and what everybody
    else’s responsibilities are to each other. Project managers should establish guidelines
    on communication and require each member to provide short statuses on where they
    are in the project. While this might seem like a bother to team members, I have
    found that it provides immense value to the project manager because it forces
    each person to discipline themselves and report on where they are in their respective
    worlds. Furthermore, it forces project staff to articulate in writing what they
    have accomplished, what is outstanding, and what they plan to get done. Figure [12.8](#Fig8)
    shows a sample status report that tracks previous objectives with current objectives.
    It should not take more than 15 min to complete.![../images/480347_1_En_12_Chapter/480347_1_En_12_Fig8_HTML.png](../images/480347_1_En_12_Chapter/480347_1_En_12_Fig8_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 12.8
  prefs: []
  type: TYPE_NORMAL
- en: Sample project status report
  prefs: []
  type: TYPE_NORMAL
- en: 12.11 Review Sites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Project managers should create extranets that allow project staff to view the
    work of the project team . This also allows work to be approved virtually over
    the Web. Furthermore, status reports and general announcements can be viewed by
    authorized members of the project team , as well as by stakeholders and users.
    Often extranet documents can be coupled with regular conference call sessions
    where project members can openly discuss reports, Web design samples, and determine
    new milestones as appropriate. Unfortunately, managing an extranet review site
    requires overhead and someone who can do the work. This simply means that someone
    on the project’s staff or some assigned administrative person needs to take on
    the responsibility. There is also the challenge of dealing with staff that do
    not comply with procedures, or need to be reminded about delivering their status
    reports on a regular basis. While this is unfortunate, it is a reality. However,
    it also tells the project manager who needs to be watched closer than other team
    members.
  prefs: []
  type: TYPE_NORMAL
- en: 12.12 Working with User Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Users are an interesting yet challenging resource. While they are clearly needed
    to perform reviews and quality assurance , they are not officially assigned to
    the project and are therefore not under the control of the project manager. Unfortunately,
    this can cause problems if a user is not responsive to the needs of the project
    team . This can be very damaging because the staff will be dependent on receiving
    timely feedback from these resources. Lack of responsiveness from a user can also
    alienate them from the project team . Indeed, there is nothing more damaging than
    a user that shows disinterest in the project that is being designed to serve them.
    Therefore, the packaged software project manager needs to be careful on what commitments
    are made when a user resource is made available to them. Obviously, the project
    manager would want the individual to report directly to him/her and be a full-time
    resource. This could also be wishful thinking. It certainly can be dangerous to
    turn down the help. While this may appear to be a catch-22, it can be managed.
    First, the packaged software project manager should establish the need for user
    assistance early in the project and include it in the requirements documentation
    (it should be part of the assumptions section). Second, the project manager may
    need to limit the amount of work assigned to the user if they indeed are just
    part-time resources.
  prefs: []
  type: TYPE_NORMAL
- en: 12.13 Outsourcing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As discussed in earlier chapters, not all packaged projects can be completed
    using internal staff. In fact, most are not. Using outsourced resources makes
    sense for many projects, especially those that might need very unique and qualified
    personnel that is not on staff, or not deemed worthy of full-time employment.
    There may also be a lack of talent, which is the usual reason why consultants
    are hired in the first place. Sometimes, outsourced relationships are managed
    as strategic partnerships, which means that an outside business provides specific
    services for the firm on a regular basis. Project strategic partnerships can be
    made in many different areas or phases of the project. Outsource firms can provide
    video or audio engineers as needed, or network support personnel to assist in
    installing the packaged solution. On the other hand, the entire project should
    not be outsourced because there may be a false sense of comfort that the firm’s
    personnel need not be involved in the responsibility. I believe in the long run
    this is a mistake. Remember that outsourced firms have their own destiny and growth
    to manage.
  prefs: []
  type: TYPE_NORMAL
- en: 12.14 Planning and Process Development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to operationalize the project plan and to meet the budget, it is necessary
    to develop a phased implementation guide that helps members of the team understand
    where they are in the process . Unfortunately, the project task plan is much too
    detailed to use, so it is a good idea for the project manager to develop a higher-level
    document that can be used during the development project. Such a plan typically
    contains four phases: (1) Strategy, (2) Design, (3) Development, and (4) Testing.
    Figure [12.9](#Fig9) reflects the major software phases and includes the activities
    and output of each phase.![../images/480347_1_En_12_Chapter/480347_1_En_12_Fig9_HTML.png](../images/480347_1_En_12_Chapter/480347_1_En_12_Fig9_HTML.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 12.9
  prefs: []
  type: TYPE_NORMAL
- en: Packaged software development phases
  prefs: []
  type: TYPE_NORMAL
- en: '1.*Strategy*: This phase requires that the stakeholders, account executive,
    users, and the project manager all meet to agree on the objectives, requirements,
    key milestones, and needs of the target audience. The activities in this phase
    comprise of the goals and objectives, feedback from users, research from outside
    sources, and the project proposal document. The culmination of these steps should
    be summarized in a document to be used by the project team . This document is
    sometimes referred to as a Creative Brief. The creative brief is really a summary
    of the original proposal in template form and created so that project team members
    can quickly refer to it and obtain the information they need. Figure [12.10](#Fig10)
    depicts a Creative Brief Template.![../images/480347_1_En_12_Chapter/480347_1_En_12_Fig10_HTML.png](../images/480347_1_En_12_Chapter/480347_1_En_12_Fig10_HTML.png)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fig. 12.10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Sample creative brief
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Creative briefs allow the project manager to conduct effective brainstorming
    sessions with staff. The document acts as an agenda, and also a checkpoint to
    ensure that discussions are not going beyond the objectives of the project and
    that the products are designed in accordance with the target audience’s needs.
  prefs: []
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Design*: Design represents the second major phase. It is comprised of all
    the tasks that participate in the design of the user interface , the analysis
    and design of technical specifications, and the overall architecture of the packaged
    software system. The results of the design phase are the functional specifications,
    detailed project plan timeline and budget, and Web site and report prototypes.
    The design phase typically requires that stakeholders and other users to review
    and sign-off on the specification document before the project can proceed. Of
    course, the approval process of the design document can be done in phases, that
    is, portions of the document can be approved so that the implementation can go
    forward on some limited basis. During the process of designing the packaged system,
    it is important that the project team have access to the content of all screens
    and programs. This is especially important for large projects where there can
    be more than one design group creating content. As stated in the previous chapter,
    content development is an iterative process ; therefore, the team members need
    to constantly have access to the current site architecture and schematic designs.
    That is why it is so important to have the technical specifications in a CASE
    tool and content system so that all members can have instant access to the current
    state of the project.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Development*: This phase includes all of the activities that are involved
    with actually building the site. The challenge for project managers is to control
    changes made to the original specifications. This typically occurs after the first
    prototype reviews where users begin to change or enhance their original requirements.
    While it is not impossible to change specifications, it is certainly dangerous
    and can be a major cause of scope creep.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.*Testing*: During this phase developers and users are testing the site and
    reporting errors. Errors are tricky issues; they must be classified in particular
    areas and levels of severity. For example, some errors cause an application to
    abort, which would be considered a critical error. Others might be aesthetic in
    nature and can be scheduled for fixing but are not severe enough to holdup going
    live. Still other errors are not really errors, but rather deficiencies in design.
    This means that the program is performing to the specification but not in the
    way the user really expects. All of these issues need to be part of an overall
    test plan, which identifies what types of errors are critical and how they affect
    the development process . Figure [12.11](#Fig11) shows a typical test plan.![../images/480347_1_En_12_Chapter/480347_1_En_12_Fig11_HTML.png](../images/480347_1_En_12_Chapter/480347_1_En_12_Fig11_HTML.png)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fig. 12.11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: QA test plan
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 12.15 Technical Planning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Technical planning is the process where the project team develops a working
    strategy for how they will use the features of the packaged system. These features
    include all of the components of development including database , programming,
    transaction systems, multimedia, and scripting. Technical planning is simple in
    concept; how do all of the technology pieces come together, how do they interface,
    and what is the schedule of implementation? Because of the object-oriented methods
    that are employed by packaged software systems, it is easy to have components
    developed in separate teams of programmers. However, there comes a time when all
    components must come together and interface with each other. When the components
    interface correctly the system works. Project managers never quite know if interfaces
    will work until they are actually tested. The concept of “working” means many
    things in software development. The obvious definition is that the program performs
    its tasks correctly and to specification. There is another part of what “working”
    means. This relates to performance of the application. While an application might
    calculate the correct output, it may not do so efficiently. Application performance
    problems tend to first show up during component interface testing. Fortunately,
    this is at a time where applications can be fine-tuned before they go into production.
    Unfortunately, many interface-oriented performance problems first appear in the
    production system because the testing environment was not a true representation
    of the live system. Therefore, it is important for project managers to ensure
    that the test system correctly matches the live environment. Indeed, many performance
    problems occur because of the unexpected stress load on the system. Notwithstanding
    when an application performance problem is discovered, the main challenge is to
    fix the problem. Sometimes performance interface problems can be a serious problem
    especially if the solution requires a redesign of the application architecture
    or substantial changes to the network infrastructure. Any serious problems of
    this caliber could cause serious setbacks to the project schedule and its cost.
    In many ways the planning and decision making regarding how applications are designed,
    which program languages should be used, and what network platforms to choose are
    crucial steps for the project team to make. The project manager must attempt to
    surround him-/herself with the best knowledge available. This knowledge base of
    people might not exist in the organization. Therefore, the project manager might
    need to seek guidance from third-party consultants who can act as specialists
    during these critical decision times.
  prefs: []
  type: TYPE_NORMAL
- en: 12.16 Defining Technical Development Requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A large part of whether systems are implemented properly has to do with how
    well the detailed technical requirements are prepared. The technical project team
    needs to define the technical requirements to implement the logical specifications.
    Remember that logical specifications do not necessarily specify what hardware
    or software to use. Thus, the technical team must evaluate the logical specification
    and make recommendations on how the actual technical specifications are to be
    built. The project manager can be more effective if they ask some key questions:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Are we thinking of using technologies that we have not used before?* Using
    unknown technologies can be very dangerous. An unknown technology is not only
    a new product; it is a product that the development team has never used. Because
    of the extent of new developments in technology, dealing with unknown hardware
    and software needs to be addressed and risks assessed by the project manager.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What benefits will be derived from new technologies?* Implementing new technologies
    for the sake of new technologies is not a good reason to implement unknowns. This
    concept gets back to the old cliché: “if it’s not broken don’t fix it!”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What type of coding is being done?* This relates to whether program code is
    being developed from scratch or via modified software packages. Each has its advantages
    and disadvantages. Writing code from scratch takes longer, but provides the architecture
    that best fits the design. Package software is faster to develop, but may not
    fit well with the overall needs of the company. The rule of thumb is never to
    modify packages by more than 20% of their total code. When this percent is exceeded
    the benefit realized form the package is so minimum that developers might as well
    start from scratch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Will there be access to production*-*like testing environments?* This was
    covered earlier. Project managers must ensure that the proper testing facilities
    are available to mirror the production environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 12.17 Maintenance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Packaged software projects should never be implemented without considering how
    to preserve maintainability. Maintainability is a universal concept that relates
    to what defines a quality product. Products that work is one thing, those that
    work and are maintainable is another. In packaged software systems, product that
    cannot be maintained easily is problematic. I have previously discussed the power
    of content management systems and CASE software as vehicles to support maintenance
    of packaged software systems. There are other best practices that need to be performed
    during the planning stage. First, the manner in which code will be developed and
    the standards to be upheld needs to be agreed upon and put in writing. Technical
    managers should also define how they intend to enforce these standards. Documentation
    of code should also be addressed in the documents. Furthermore, there needs to
    be agreement on the database design as well. This involves getting the Database
    administrators to agree on limits to de-normalization , naming standards, and
    the methods of coding stored procedures and database triggers.
  prefs: []
  type: TYPE_NORMAL
- en: Another important component of maintenance quality is planning for growth. The
    issue of growth relates more to network infrastructure than software development.
    First, the project manager needs to address issues of hardware scalability. This
    relates to the capacity of the network before the hardware architecture needs
    to be changed to accommodate new applications. Second, database servers must be
    configured with real-time backup architecture (no single point of failure concepts)
    and data warehouses need to be designed to perform at peak times.
  prefs: []
  type: TYPE_NORMAL
- en: 12.18 Project Management and Communication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Successful project managers communicate well, not only with their staffs, but
    with vendors, management, and users. Indeed, sometimes communications skills are
    more important than technical ones. Obviously, a complete project manager has
    both. However, the advent of packaged software systems has placed even more emphasis
    on the importance of communication within the project team . There are many reasons
    why poor communications occurs during project life cycles. According to Burdman
    ([1999](#CR1)), there are 11 leading causes for communication problems on a project
    team .
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*People come from different disciplines*: Communication is difficult enough
    among those that work together every day. The influx of many different disciplines
    on an packaged software project creates more challenges because staffs are not
    as familiar with each other. Remember that relationships are very important for
    team interaction. Many teams need to spend time just getting acclimated to each
    other’s business styles.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Lack of mutual understanding of the technology*: Project members do not have
    consistent understandings of the technology. For example, some staff might use
    the word “table” to define a logical database entity , while others call it a
    file. The best solution to this problem is to distribute a list of common technology
    definitions to all project participants.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Personalities*: This occurs in all projects. Some people have conflicting
    personalities and do not naturally get along.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Hidden agenda*: There are often political agendas that team members have.
    They are sometimes difficult to assess, but they definitely cause problems with
    communication among project staff. These individuals are set in their ways and
    have questionable dedication to the success of the project, that is, they have
    a more important political agenda.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Ineffective meetings*: Meetings for the sake of meetings is no reason to meet.
    Sometimes too many meetings can be counterproductive to getting things done. It
    can sometimes be a false solution to other problems that exist in the project
    team . Some meetings are necessary but run too long, and participants begin to
    lose focus on the agenda. Project managers need to be cognizant of the time allotments
    they make to meetings and to respect those timeframes.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '6.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Proximity*: The demographics of where project team members reside is obviously
    a factor in hindering communications among the team members. While this is a disadvantage,
    teleconferencing and video conferencing are all possible anecdotes for managing
    communication projects at a distance. Communication can be further hindered because
    of long distances between staff especially when there are time zone changes. In
    these situations, even conferencing is not feasible. Usually the best way of communicating
    is through email and extranets.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '7.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Assumptions*: Team members can often make assumptions about things that can
    cause communication breakdowns. Usually assumptions create problems because things
    that are believed to be true are not written down.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '8.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Poor infrastructure and support*: The severity of this problem is often overlooked.
    It includes the frustrations of having computer troubles, email incompatibilities,
    and other hardware failures that contribute to communications problems. The best
    approach to avoiding these frustrations is for the project manager to be very
    aggressive on having them fixed timely and properly.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '9.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Being an expert*: Every project has one or two “know-it-allers” who attempt
    to dominate meetings and want to orchestrate their point of view on the rest of
    the staff. These individuals spend so much time telling others what to do that
    they forget what they have to do to make the project successful. Project managers
    should be very aggressive with these type of participants by making it clear what
    everyone’s role is, including the project manager’s responsibilities!'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '10.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Fear*: Fear is a very large barrier with certain staff. These staff members
    become overwhelmed with the size, complexity, and length of packaged software
    project and it can cause them to lose their perspective and creativity. Project
    managers need to interject and provide assistance to those members who struggle
    with a packaged software system.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '11.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Lack of good communications structure*: Good communications systems fit–in
    with the culture of the organization and are realistic in what they might accomplish.
    Many communications problems exist simply because the infrastructure does not
    relate to the needs of the staff.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 12.19 Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This chapter attempted to provide a project manager with a perspective on the
    salient issues that can help them be successful. This chapter was not intended
    to provide a complete step-by-step approach to managing complex projects. I included
    this chapter because I believe that many analysts can also serve as excellent
    project managers. Indeed, much of the important issues discussed in this chapter
    relate to many of the skills that analysts must have to perform their responsibilities
    as software engineers. These include:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Communications Skills*: Analysts have significant experience in working with
    users to obtain input so they can develop system requirements properly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Meeting Management*: JAD sessions are more complex meetings than typical project
    meetings. Analysts that have also been JAD facilitators are very well trained
    on how to control meetings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Politically Astute*: Analysts are experienced with working with people who
    have hidden agendas and are driven by politics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Technically Proficient*: Analysts are educated in logic modeling and are familiar
    with much of the technical issues that come up during the project life cycle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Project Planning*: Analysts are used to developing project plans and managing
    to deliverables; each analysis and design task can be seen as a mini-project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Documentation*: Analysts are supporters of good documentation and understand
    the value of having maintainable processes .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Executive Presence*: Analysts work with executive users and understand how
    to interact with them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Quality Assurance* : Analysts are familiar with quality assurance test plans
    and testing methodologies. They are often involved with test plan development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 12.20 Problems and Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Describe five unique aspects of packaged software projects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compare packaged products with traditional ones.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a Mission Statement for a project mean? How should a project manager
    define the project mission?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain how the scope of a project is determined and how it is controlled.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the key categories of a project budget?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '6.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the roles and responsibilities of the project team? Who determines
    the members?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '7.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain the components of a project status report? How often should the report
    be issued and to whom?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '8.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a creative brief? What are the key components?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '9.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the important aspects of project management communication?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '10.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why are packaged software decisions so important for IoT and blockchain applications?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
