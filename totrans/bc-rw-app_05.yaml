- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ethereum and Hyperledger Fabric
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum is a variant of blockchain that was conceived by Russian–Canadian developers,
    Buterin (2014) and his co-workers. Bitcoin focused on decentralized payments,
    while Buterin and his collaborators aimed to improve the decentralized finance
    system with apps powered in the blockchain and to address the various limitations
    present in Bitcoin. They made an initial proposal that recommended users or applications
    to push arbitrary computer code into the blockchain using transactions. This is
    how the concept of smart contracts (or contracts for short) first emerged.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, Ethereum came into being as a peer-to-peer network that works on a decentralized
    platform called blockchain. This securely executes and verifies application code,
    hitherto called smart contracts, and allows participants on the blockchain to
    transact with each other without a trusted central authority. Transactions are
    sent and received through user-created Ethereum accounts. The sender signs each
    transaction and incurs Ether (Ethereum’s native cryptocurrency) toward the cost
    of processing the transaction on the network. Transaction records are immutable,
    auditable, and securely distributed across the network, giving participants full
    ownership and visibility of transaction data.
  prefs: []
  type: TYPE_NORMAL
- en: But the thing that makes Ethereum so exciting for users is its network’s ability
    to do more than just process financial transactions. Ethereum further enhances
    the merits of the Bitcoin blockchain as it allows developers to run programs that
    represents the core logic of decentralized applications or dApps.
  prefs: []
  type: TYPE_NORMAL
- en: In this way, the Ethereum network provides a more flexible environment than
    the Bitcoin blockchain and derived special-purpose blockchain. It can also process
    smart contracts without the need to create any special-purpose blockchain infrastructure.
    Unlike Bitcoin and other single-purpose blockchains, Ethereum decoupled this smart
    contract layer, which now runs on top of the underlying Ethereum blockchain, making
    it easy to create smart contracts with a few lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum, like other cryptocurrencies, can be used to send and receive value
    globally, without the involvement of a third party that stores data, transfers
    collateral, and keeps track of complex financial instruments. Ethereum also has
    the feature that any participant can broadcast requests to perform arbitrary computations
    that other participants on the network verify, validate, and execute. This causes
    a change in the state of the Ethereum Virtual Machine (EVM), which is committed
    and propagated across the network. The said state of the EVM, which is generated
    by the consensus of all the nodes, is stored in the blockchain. The cryptographic
    mechanism assures that all transactions are signed and executed with the proper
    authorizations.
  prefs: []
  type: TYPE_NORMAL
- en: 5.1 Early Attempts to Program Cryptocurrencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bitcoin Scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Scripts can be considered as one of the initial concepts in the implementation
    of the business logic layer in the blockchain. The script was an optional feature
    in transactions, used to limit the spending of cryptocurrency for specific purposes.
    Later, they were removed because of a bug in the script’s opcodes (such as OP
    _LSHIFT). Some examples of OPCODES in Bitcoin scripts are given in the tables
    (see [Tables 5.1](#c05-tbl-0001) and [5.2](#c05-tbl-0002)).
  prefs: []
  type: TYPE_NORMAL
- en: '[**Table 5.1**](#rc05-tbl-0001) Constants.'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Word** | **Opcode** | **Hex** | **Input** | **Output** | **Description**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| OP_0, OP_FALSE | 0 | 0x00 | Nothing. | (Empty value) | An empty array of
    bytes is pushed onto the stack. (This is not a no-op: an item is added to the
    stack.) |'
  prefs: []
  type: TYPE_TB
- en: '| N/A | 1-75 | 0x01–0x4b | (Special) | Data | The next *opcode* bytes is data
    to be pushed onto the stack |'
  prefs: []
  type: TYPE_TB
- en: '| OP_PUSH-DATA1 | 76 | 0x4c | (Special) | Data | The next byte contains the
    number of bytes to be pushed onto the stack. |'
  prefs: []
  type: TYPE_TB
- en: '[**Table 5.2**](#rc05-tbl-0002) Flow control.'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Word** | **Opcode** | **Hex** | **Input** | **Output** | **Description**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| OP_NOP | 97 | 0x61 | Nothing | Nothing | Does nothing. |'
  prefs: []
  type: TYPE_TB
- en: '| OP_IF | 99 | 0x63 | <expression> if [statements] [else [statements]]* endif
    | If the top stack value is not False, the statements are executed. The top stack
    value is removed. |'
  prefs: []
  type: TYPE_TB
- en: '| OP_NOTIF | 100 | 0x64 | <expression> notif [statements] [else [statements]]*
    endif | If the top stack value is False, the statements are executed. The top
    stack value is removed. |'
  prefs: []
  type: TYPE_TB
- en: Buterin, who was involved in such projects for some time, realized that these
    adaptations of the Bitcoin blockchain were feasible but were neither efficient
    nor flexible enough. Subsequently, he introduced the idea of decoupling the smart
    contract functionalities from the blockchain functionalities and started the Ethereum
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 5.2 Smart Contracts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A smart contract is an application code that resides on a blockchain at a specific
    address known as a contract address. Applications can call smart contract functions,
    change their state, and initiate transactions. Smart contracts are written in
    programming languages, ​​such as Solidity (which is like an object-oriented programming
    language) and Viper. In order to execute smart contracts in any hardware or software,
    an abstraction layer is required. It is provided by EVM that converts high-level
    language into EVM byte code.
  prefs: []
  type: TYPE_NORMAL
- en: Smart contracts satisfy conditions by following a computer’s simple “if… then”
    statements that are programmed on a blockchain. These terms may include payment,
    transfer of goods, or issue of bills when a specified condition is met. Once the
    transaction is completed, the blockchain is updated after which the transaction
    cannot be altered. Only the permitted party can see the result.
  prefs: []
  type: TYPE_NORMAL
- en: In practice, participants do not write new code each time a computation is requested
    on the EVM; rather, application developers upload reusable snippets of code to
    the EVM storage, and then users make request for the execution of these code snippets
    according to various parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Smart contracts are used for the automation of common centralized processes,
    such as conditional transfer of digital assets, multisig asset exchange, or waiting
    for a specific amount of time to execute a transaction.
  prefs: []
  type: TYPE_NORMAL
- en: A smart contract is represented by a contract account. This can be implemented
    by an Externally Owned Account (EOA) that is required to participate in the Ethereum
    blockchain. The invitation process is done using transactions sent by the EOA
    in the form of Ether and gas. When the target address in a transaction is a smart
    contract, the execution of the smart contract occurs upon verification (such as
    checking a nonce combination and fee) and validation of the transaction (see [Table
    5.3](#c05-tbl-0003)).
  prefs: []
  type: TYPE_NORMAL
- en: '[**Table 5.3**](#rc05-tbl-0003) Computation Fee in Gas Points.'
  prefs: []
  type: TYPE_NORMAL
- en: '| S. no. | Operation name | Gas Cost |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1. | Step | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 2. | Load from memory | 20 |'
  prefs: []
  type: TYPE_TB
- en: '| 3. | Store into memory | 100 |'
  prefs: []
  type: TYPE_TB
- en: '| 4. | Transaction base fee | 21000 |'
  prefs: []
  type: TYPE_TB
- en: '| 5. | Contract creation | 53000 |'
  prefs: []
  type: TYPE_TB
- en: 'Transaction in Ethereum contains:'
  prefs: []
  type: TYPE_NORMAL
- en: Amount of Wei (1 Ether = 10^18 Wei)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: STARTGAS (max computational steps)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: GASPRICE (fees per different steps of code execution)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Around 21,000 gas points are paid to miners for adding a transaction to a block.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: Computation requirements are specified in gas, as it is a standard cryptocurrency.
    Unlike Ether, its value does not change as per market swings.'
  prefs: []
  type: TYPE_NORMAL
- en: The state of an Ethereum blockchain changes when state hash and receipt hash
    of smart contract changes.
  prefs: []
  type: TYPE_NORMAL
- en: Like a programming language, the Solidity class contains a state of variables
    and methods to access the public variables. When methods are called during smart
    contract execution, the values of variables change, which in turn changes the
    state of the smart contract. This change is recorded in the form of state hash.
    The final result of the execution is stored in the form of receipt hash. The following
    sample shows a smart contract implemented with Solidity.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The given sample represents a simulated token or coin transferred between addresses
    in the blockchain. Now, let’s examine each part in depth.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The Pragma directive specifies which version of Solidity can be used to compile
    the contract. If someone compiles the contract with any version that is not in
    that range, he gets a compilation error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: MyCoin is the name for the contract definition and is only used to refer to
    this contract in code by other contracts. Contracts are invoked by knowing the
    public address, so it is impossible to have a collision by name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Mapping is a particular construct in Solidity that acts as a dictionary or hash
    for key pairs. Address is a specific data type that represents a public address,
    and uint is an unsigned integer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Transfer is an event arising out of a contract whose payload contains the address
    of the owner or sender (from), recipient (s), and a value. Since contracts run
    asynchronously and concurrently after validation, they do not emit any feedback.
    One way to emulate reactions is to emit events. Those transactions are recorded
    in the log, which can either be queried by any node connected to the network or
    by appending to the client library, which may be an option.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The contract constructor is invoked only once when deployed on the blockchain
    and a public address is assigned. It assigns an arbitrary number of tokens to
    the contract owner. Here, “tx” is an implicit variable that provides an access
    to information about the current transaction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This method moves tokens from the sender’s address to the receiver’s address.
    As would be the case with “tx”, “msg” is another variable that provides access
    to the execution context. This implementation checks whether the sender has tokens
    available in the balance and accordingly moves it to the recipient’s address if
    tokens are available. Otherwise, if no token is available, it returns false to
    complete the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: getBalance returns the balance at the associated address. The node executing
    this method can only query the ledger without submitting any transactions, so
    gas is not required.
  prefs: []
  type: TYPE_NORMAL
- en: 5.3 Working of Ethereum
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a transaction triggers a smart contract, all nodes in the network faithfully
    execute each instruction. To make it happen, Ethereum implements an execution
    ecosystem through a single canonical computer called the EVM. As part of the block
    verification protocol, all nodes in the network operate the EVM (see [Figure 5.1](#c05-fig-0001)).
    In block verification, each node goes through the transactions listed in the respective
    block they need to verify and runs the computer code, triggered by the transaction
    in the EVM. All nodes on the network perform the same computation in order to
    keep their ledgers in sync. Each transaction includes a gas limit and a fee that
    the sender voluntarily pays for the transaction. If the total amount of gas required
    to process the transaction is less than or equal to the gas limit, the transaction
    is processed. Otherwise, the transaction is aborted, and the fee is lost. The
    gas balance, which remains unused after the transaction, is reimbursed to the
    sender in the form of Ether. Hence, it is always better to have a higher gas limit
    than expected for safe transactions. Further, the higher the price, the higher
    will be the priority to verify transactions in the execution queue. Verifiers
    would obviously prefer those who pay more.
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/c05f001.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**Figure 5.1**](#rc05-fig-0001) Working of Ethereum.'
  prefs: []
  type: TYPE_NORMAL
- en: 5.3.1 Gas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gas is consumed in executing lines of code or allocating storage space. Both
    computing resources and storage are scarce and have their own cost. Hence, running
    code in EVM comes at a cost, which is expressed in a unit known as “gas.” Gas
    represents a unit and not a price, and it signifies a tiny fraction of Ether (Wei
    or 10x18). Thus, for every transaction on Ethereum, it is mandatory for the user
    to pay gas. The sender can set a gas limit on each transaction as he wishes, which
    expresses how much he is willing to spend on execution. If the transaction costs
    more than this, it is aborted and the tokens are lost. Otherwise, the balance
    is refunded to the sender.
  prefs: []
  type: TYPE_NORMAL
- en: 5.3.2 Ether
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The purpose of Ether is to establish a market mechanism for computation that
    provides an economic incentive for participants to execute transaction requests
    and to provide computational resources to the network. The broadcast requires
    giving some amount of Ether, which is eventually received as a reward to those
    who verify the transaction, execute it, commit it to the blockchain, and broadcast
    it over the network.
  prefs: []
  type: TYPE_NORMAL
- en: Since all participants are continuously charged, this discourages malicious
    participants from intentionally shutting down the network by requesting the execution
    of infinite loops or resource-intensive scripts, as doing so is heavy on their
    wallets.
  prefs: []
  type: TYPE_NORMAL
- en: Ether and gas are two aspects. Ether is a currency that has an inherent value.
    On the other hand, gas is a fuel, which is an inevitable cost of using the system.
    However, those who have the system (gas) can trade it with those who wish to use
    the system in exchange for the same intrinsic value. If occasionally, the user
    does not have gas to transact, he can convert any Ether around him into gas. This
    is why the Ether market and the gas market are different. The price of one can
    fluctuate without affecting the price of the other.
  prefs: []
  type: TYPE_NORMAL
- en: 5.4 Hyperledger
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hyperledger (HPL) is an open-source private platform managed by the Linux Foundation,
    to build distributed ledger solutions with a modular architecture that delivers
    a high degree of privacy, resilience, and scalability.
  prefs: []
  type: TYPE_NORMAL
- en: 5.5 Working of Hyperledger
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 5.5.1 Components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hyperledger Fabric is an enterprise-level private blockchain network in which
    various business organizations – such as banks, corporate institutions, or trade
    establishments – transact with each other to achieve their business goals.
  prefs: []
  type: TYPE_NORMAL
- en: Each organization has a fabric certificate authority, on the basis of which
    it is identified as a member. Each member of the fabric can set up one or more
    authorized peers to participate in the network, using their own fabric certificate
    authority.
  prefs: []
  type: TYPE_NORMAL
- en: There is a network-connected client-side application, written with a Software
    Development Kit (SDK) of a particular programming language.
  prefs: []
  type: TYPE_NORMAL
- en: 5.5.2 Workflow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Each transaction in fabric takes place in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 5.5.2.1 Proposal
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A transaction is initiated by offering or invoking a transaction request with
    the help of a member organization client application or portal. The client application
    then sends the received proposal to peers in each organization for endorsement.
  prefs: []
  type: TYPE_NORMAL
- en: 5.5.2.2 Endorsement
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After reaching out to peers in each organization to endorse the proposal, the
    peer checks the requesting member’s fabric certificate authority and other details
    required to authenticate the transaction. Then it executes the chain code (a piece
    of code that is written in one of the supported languages, ​​like Go or Java)
    and returns a response. This response indicates acceptance or rejection of the
    following transaction. The response is carried out to the client.
  prefs: []
  type: TYPE_NORMAL
- en: 5.5.2.3 Transmission to Ordering Service
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After receiving the endorsement output, the approved transactions are transmitted
    to the ordering service by the client-side application. The peer responsible for
    the ordering service includes the transaction in a specific block and sends it
    to the peer nodes of various members of the network.
  prefs: []
  type: TYPE_NORMAL
- en: 5.5.2.4 Updating the Ledger
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After receiving the specific block, the peer nodes of the organizations update
    their local ledger with this block, thereby committing new transactions (see [Figure
    5.2](#c05-fig-0002)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/c05f002.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**Figure 5.2**](#rc05-fig-0002) Working of Hyperledger Fabric.'
  prefs: []
  type: TYPE_NORMAL
- en: 5.5.3 Industrial Applications of Hyperledger Fabric
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hyperledger Blockchain is one of the foremost open-source blockchain technologies
    that provides the tools and framework for enterprise-grade blockchain deployment.
    It assures a credible system for implementation of various administrative processes
    of the government, which can be scaled up as and when required, without compromising
    on security and transparency.
  prefs: []
  type: TYPE_NORMAL
- en: Fabric provides a permissioned blockchain for administrative operations of federal
    schemes. If the government wants, it can also make modules for digital identity
    and connect people to the system. Being a licensed network, it may also provide
    a membership identification service, which can be used to authenticate and manage
    digital identities for network participants.
  prefs: []
  type: TYPE_NORMAL
- en: 5.5.3.1 Production
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Production is one of the topmost applications of Hyperledger Fabric. The final
    assembler can use Fabric to create a supply chain network that can be a great
    medium between part suppliers and manufacturers to keep up with demand and supply.
    Using Fabric means more responsiveness in the system, and hence, blockchain in
    manufacturing has amazing potential to change the current landscape forever.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the use of the standard protocol among the participants means that each
    one of them follows the same rules and regulations, creating a standard approach.
  prefs: []
  type: TYPE_NORMAL
- en: 5.5.3.2 B2B Contract
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Under a business-to-business (B2B) contract, two parties automate contracts
    in a mutually trusted environment. To ensure that both parties’ privacy and security
    is maintained, Hyperledger Fabric provides a permissioned way to manage contracts.
    Thus, sensitive business information is not shared with anyone other than those
    two parties. This way B2B contracts can ensure the protection of sensitive information
    from outside parties who have access to the ledger (see [Figure 5.3](#c05-fig-0003)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/c05f003.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**Figure 5.3**](#rc05-fig-0003) B2B working of HPL.'
  prefs: []
  type: TYPE_NORMAL
- en: This proves even more useful when it comes to making contracts traceable to
    the parties in the account. This way, the parties can scrutinize the contract
    and bid accordingly. Hyperledger Fabric ensures that the approach is standardized,
    where bidders can find and bid on contracts without the need to engage directly
    with another business party.
  prefs: []
  type: TYPE_NORMAL
- en: 5.5.3.3 Supply Chain
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A supply chain can be a global or regional network of manufacturers, suppliers,
    and retailers of a particular product. The Hyperledger Fabric network can improve
    the clarity and accountability of transactions within Fabric by reducing the risk
    of counterfeit transactions. On the Fabric network, enterprises holding authentication
    to access the ledger can view data from past transactions. Product status can
    be tracked in a very fast, simple, and efficient manner by updating the real-time
    production, transaction, and shipping status in the ledger.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Fabric can maintain an immutable track record of all participants
    in the supply chain network by managing all aspects, such as raw material input
    and track sourcing, manufacturing telemetry, origin of goods and warehousing,
    and shipping of the finished product.
  prefs: []
  type: TYPE_NORMAL
- en: 5.5.3.4 Asset Depository
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Another use case of Hyperledger Fabric is asset depository in which assets can
    be dematerialized on the blockchain network.
  prefs: []
  type: TYPE_NORMAL
- en: In this way, all stakeholders can directly access the asset, use it to trade
    and interact with the market in real time, without intermediaries. Additionally,
    businesses or stakeholders can reduce operating costs by adding business rules
    to stored assets.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Fabric provides companies, stakeholders, and end users the ability
    to convert one asset type to another, where one party owns one asset type, and
    the other party does not accept it.
  prefs: []
  type: TYPE_NORMAL
- en: 5.5.3.5 Trading and Asset Transfer
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Trading and asset transfers are executed between organizations or members working
    in tandem like importers, exporters, banks, brokers, etc. Hyperledger Fabric can
    add a layer of trust in the form of a document signed by a trusted authority in
    place of a paper document. It also improves system performance.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Fabric enables the trader or stakeholder to have direct access to
    their financial securities and trade it at any time. Another advantage is that
    assets on the blockchain network can be dematerialized with the help of Hyperledger
    Fabric.
  prefs: []
  type: TYPE_NORMAL
- en: 5.5.3.6 Insurance
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Frauds and scams are a common occurrence in the insurance industry. The industry
    spends billions of dollars each year to debunk insurance fraud and false claims.
    The KYC process and verification can be simplified by using a private blockchain
    such as Hyperledger Fabric. Along with this, the insurance company can also refer
    to the transaction data, which is stored inside the ledger. Hyperledger Fabric
    can accelerate claims processing and automate payments, using on-chain code. This
    can further automate the process of recovery of erroneous payments made to the
    insured. This process will also be helpful in processing multi-party settlement
    claims.
  prefs: []
  type: TYPE_NORMAL
- en: 5.5.3.7 Real Estate
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Real estate is another industry where Hyperledger Fabric can be used to increase
    liquidity in the market. Actually, it has become a big issue due to the volatility
    of the market. The market, being limited to the reach of only the high-end buyer,
    is getting out of reach for middle-class citizens.
  prefs: []
  type: TYPE_NORMAL
- en: The use of blockchain can bring about a dramatic change in the real estate sector.
    By using Fabric, real estate can offer fragmented ownership, which is a great
    way to invest in this business. Moreover, it can also streamline international
    property deals without any compacting process.
  prefs: []
  type: TYPE_NORMAL
- en: 5.5.4 Benefits of Hyperledger Fabric
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 5.5.4.1 Open Source
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Hyperledger Fabric, hosted by the Linux Foundation, is an open-source blockchain
    framework designed by an active community of developers to make the code publicly
    accessible. Any participant in the community, who has an interest or expertise
    in programming, can help develop the source code. Any person in the world may
    audit, develop, modify, or distribute the code as he deems fit.
  prefs: []
  type: TYPE_NORMAL
- en: 5.5.4.2 Private and Confidential
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In a public blockchain network, each node in the network receives a full copy
    of the ledger. Thus, keeping confidentiality becomes a matter of grave concern
    as everything is open to all. Being a public blockchain, the identities of all
    participating members are not authenticated. But this is not the case with Hyperledger
    Fabric. The identities of all participating members are verified, and the ledger
    is accessible to the certified members only. It is more advantageous in industry-level
    cases, such as banking, insurance, etc., where customer data needs to be kept
    private.
  prefs: []
  type: TYPE_NORMAL
- en: 5.5.4.3 Access Control
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Hyperledger Fabric provides a virtual blockchain network over and above the
    physical blockchain network, thus enabling access and control of data. It has
    its own access rules and mechanisms for ordering transactions. These act as additional
    tools for access control and help to make data private, hide information from
    competitors, or limit the broadcasting of data between associates.
  prefs: []
  type: TYPE_NORMAL
- en: 5.5.4.4 Chaincode Functionality
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Chaincode uses a container technology to host application codes or smart contracts,
    which define the business rules of the system. It accommodates the complexity
    present in the economy and supports a variety of pluggable components.
  prefs: []
  type: TYPE_NORMAL
- en: 5.5.4.5 Performance
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Hyperledger Fabric is a private blockchain network, so transactions are executed
    quickly without the need for verification. It also provides parallelism and concurrency
    as the transaction are executed separately from the transaction commit and order.
  prefs: []
  type: TYPE_NORMAL
- en: 5.5.4.6 Modular Design
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The modular architecture of Hyperledger Fabric enables it to be used with other
    systems and to modify its functionality over time.
  prefs: []
  type: TYPE_NORMAL
- en: 5.6 Ethereum Versus Hyperledger
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The key differences between Ethereum and Hyperledger are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 5.6.1 Purpose
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ethereum is a platform to build B2C business and decentralized applications
    with the aim of running smart contracts on the EVM. With Ethereum, decentralized
    apps can be created for mass consumption.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger Fabric is managed by the Linux Foundation. Hyperledger has been
    designed to build B2B and cross-industry applications. It helps businesses or
    industries to collaborate with developers, who work with DLT. This allows for
    the creation of customized blockchain apps with limited access.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5.6.2 Cryptocurrency
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ethereum has its own native cryptocurrency called Ethereum (ETH). Any participant
    node can mine ETH by paying for gas.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger does not have any such cryptocurrency that can be involved in mining.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5.6.3 Participation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ethereum is a public (permissionless) network in which anyone who has access
    to the internet can download the software and start mining.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger is a limited-participation network in which only authorized members
    and participants, selected by authorized members, can make access to the Hyperledger
    platform and its tools. It keeps its valuable and confidential information safe
    and does not allow any tampering.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5.6.4 Privacy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ethereum is a public network in which all transactions are absolutely transparent.
    Any person who has an access to the internet can view these transactions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger is a permissioned and limited-access blockchain network in which
    only organizations or individuals holding an authorization certificate can view
    transactions on the network. It is extremely secure and confidential.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5.6.5 Governance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Ethereum network is governed by the Ethereum developers only. It’s a product
    of in-house development rather than a collaboration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger Fabric is a product of successful collaboration between the Linux
    Foundation and IBM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5.6.6 Computer Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ethereum often uses Solidity to write smart contracts, while a high-level language
    like JavaScript, Python, Golang is used to develop applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go is widely used to write chaincode, and to some extent Java and JavaScript
    in Hyperledger.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5.6.7 Smart Contracts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An Ethereum smart contract is a set of conditions, written in a programming
    language, that automatically starts the implementation when certain conditions
    are met. It is irreversible, which, once created, cannot be changed by any third
    party. It governs the transfer of digital assets between two or more parties under
    a contract.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Like smart contracts, Hyperledger Fabric also allows member organizations to
    run some code on peers that create transactions on a specific state. These are
    known as Chaincodes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5.6.8 Consensus Mechanism
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ethereum, being a decentralized network, has a Proof-of-Work (PoW) mechanism
    or consensus mechanism that runs throughout the blockchain. This allows all participating
    nodes of the decentralized network to reach consensus on certain parameters, such
    as account balances, the order of transactions, etc., preventing participants
    from making fake transactions or double-spending coins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger, being a private and permissioned network, does not require any
    PoW or consensus mechanism to validate transactions. If two participants agree
    on a particular transaction, no third participant can view or interfere with that
    transaction. This improves the scalability and transaction rates of the system
    as well as the overall performance of the network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5.6.9 Rate of Transactions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Being a public domain, Ethereum’s massive PoW mechanism slows down its transaction
    speed. It barely manages 20 transactions in a second.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To be a permissioned blockchain network, Hyperledger Fabric does not require
    heavy PoW mechanisms like Ethereum. With this, the transaction speed touches about
    2,000 transactions per second, which is much higher than Ethereum.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5.6.10 Use-cases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ethereum smart contracts can be used publicly or for B2C when developers or
    developing organizations intend to build decentralized applications for customer
    use. With the Ethereum network, anyone who has access to the internet can create
    a node, and each such node possesses a complete copy of the blockchain. Community-led
    open-source applications that are developed and hosted by blockchain developer
    communities around the world can be created using Ethereum. Such applications
    do not require any confidentiality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Businesses, such as private or B2B, which do not wish to keep their confidential
    data on a public blockchain such as Ethereum, can adopt Hyperledger as a permissioned
    blockchain network. It keeps the organization’s information completely secure
    and confidential. Hyperledger’s flexibility can prove to be an exceptional tool
    where an organization or business needs to define its own customized blockchain
    algorithms. In Hyperledger projects, the entire fundamental infrastructure of
    the blockchain can be modified to create customized blockchain applications for
    business purposes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5.7 Decentralized Applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a centralized scheme, the application software resides at one or more central
    locations, depending on the size of the installed client base. In a decentralized
    scheme, the application software resides on each client machine (see [Figure 5.4](#c05-fig-0004)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/c05f004.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**Figure 5.4**](#rc05-fig-0004) Comparison between centralized and distributed
    systems.'
  prefs: []
  type: TYPE_NORMAL
- en: Decentralized applications (dApps) address the problem that requires blockchain
    services and blockchain infrastructure (Garg, 2021). dApps consist of a front-end,
    a blockchain back-end, and middleware, that is, the code that connects the two.
    The dApp front end is used to implement functions/methods on the smart contract,
    which, in turn, change the state of the smart contract. The front-end can be a
    sophisticated web app or mobile app that can employ technologies, such as HTML,
    CSS, and JavaScript frameworks like React. It can be thought of as an embedded
    web client with web3.js scripts communicating over the RPC pipeline. The token
    is used to maintain the standards of the dApp.
  prefs: []
  type: TYPE_NORMAL
- en: 5.7.1 Merits of Decentralized Applications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 5.7.1.1 Zero Downtime
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Relying on a peer-to-peer system ensures that dApps continue to function even
    when individual computers or parts of the network fail. Once smart contracts are
    deployed on the blockchain, the contracts would be implemented by default. This
    forbids malicious actors to launch Denial-of-Service (DoS) attacks, targeting
    individual dApps.
  prefs: []
  type: TYPE_NORMAL
- en: 5.7.1.2 Privacy
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: No real-world identification is required to deploy or interact with the dApp.
  prefs: []
  type: TYPE_NORMAL
- en: 5.7.1.3 Resistance to Censorship
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With a single point of failure, it is very difficult for governments or powerful
    individuals to control the network. No entity on the network can block users from
    submitting transactions, deploying dApps, or reading data from the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: 5.7.1.4 Absolute Data Integrity
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The data stored on the blockchain is immutable and encrypted. Once added to
    the blockchain, it cannot be changed.
  prefs: []
  type: TYPE_NORMAL
- en: 5.7.2 Demerits of Decentralized Applications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although dApps promise to address many of the major problems faced by regular
    apps, they also come with a few hiccups.
  prefs: []
  type: TYPE_NORMAL
- en: 5.7.2.1 Maintenance
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Decentralized applications can be difficult to maintain because once deployed,
    it is not possible for developers to update their dApps (or the underlying data
    stored by dApps). If a bug or vulnerability has been introduced in a previous
    version, it will be difficult to resolve, even after it has been identified.
  prefs: []
  type: TYPE_NORMAL
- en: 5.7.2.2 Performance Overhead
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Scaling is a serious problem in the face of large performance overhead. In order
    to achieve the level of security, integrity, transparency, and reliability that
    Ethereum seeks, each node runs and stores each transaction. On top of this, proof-of-work
    also takes time.
  prefs: []
  type: TYPE_NORMAL
- en: 5.7.2.3 Network Congestion
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When a dApp uses a lot of computational resources, the entire network is backed
    up. Currently, the network can only process about 10 to 15 transactions per second;
    that is, if the transaction speed exceeds this, the pool of unconfirmed transactions
    can grow rapidly.
  prefs: []
  type: TYPE_NORMAL
- en: 5.7.2.4 User Experience
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Due to network effects, dApps often struggle with low user numbers, which makes
    them less interactive. It can also make them less secure, as the security of a
    dApp often depends on how many users it has.
  prefs: []
  type: TYPE_NORMAL
- en: 5.7.2.5 Centralization
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: User-friendly and developer-friendly solutions built on top of Ethereum’s base
    layer are analogous to centralized services. Centralization may offset the advantages
    of blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: 5.8 Tokens
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the Ethereum system, tokens represent a diverse range of digital assets,
    such as vouchers, IOUs, or even real-world, tangible objects. Essentially, Ethereum
    tokens are smart contracts that use the Ethereum blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Tokens can be of two types – fungible or nonfungible. Fungible tokens are of
    equal value and can be exchanged for each other. The ERC20 guidelines are considered
    to be the standard for exchangeable tokens, for example – voting tokens, staking
    tokens, or virtual currencies (Garg, 2022). The standards for nonfungible tokens
    are inherited from the ERC721 guidelines, for instance, rights to an artwork or
    a song. ERC-777 allows additional functionality on top of the token, such as mixer
    contracts for better transaction privacy or an emergency recovery function to
    bail out if one’s private keys are lost. ERC-1155 allows for more efficient trades
    and transaction bundling. This token allows the creation of both standard utility
    tokens (such as $BNB or $BAT) and nonfungible tokens, such as Cryptopunk.
  prefs: []
  type: TYPE_NORMAL
- en: Decentralized Apps built on Ethereum, such as Augur and Grid+, make extensive
    use of the token for market prediction and dispute settlement in terms of payment
    for electricity usage.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum also allows the creation of unique and indivisible tokens, called nonfungible
    tokens (NFTs). Their ownership information is recorded and maintained on the blockchain
    network. These are unique and indivisible tokens, useful for proving the provenance
    of rare assets, both digital and tangible, for example, for representing collectibles,
    digital art, sports memorabilia, virtual real estate, and objects within games.
    NFTs are gaining popularity as more companies seek to tokenize assets and provide
    users with tamper-proof lineage information about their assets.
  prefs: []
  type: TYPE_NORMAL
- en: Coming Up
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In further chapters, we will explore specific use cases for Ethereum-based smart
    contracts and tokens, including identity management, cybersecurity, banking, finance,
    and more. Personal identity is a prerequisite for any individual, public, or business
    enterprise. A sophisticated identification system enables enterprises to conduct
    digital transactions in the real world. With this ideology in mind, the very next
    chapter focuses on the development of a system that not only allows the identities
    to be digital, universal, and multi-purpose, but also assures the privacy and
    security of personal sensitive information.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Buterin V, 2015\. A Next-Generation Smart Contract and Decentralized Application
    Platform. White paper, 1–36\. [https://blockchainlab.com/pdf/Ethereum_white_ paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf](https://blockchainlab.com/pdf/Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf)/
    Accessed on 03 June 2020.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Garg R, 2021\. Blockchain Based Decentralized Applications for Multiple Administrative
    Domain Networking. BITS – Pilani, KK Birla Goa Campus India, 1–69\. doi :10.13140/RG.2.2.29003.87845\.
    [https://www.researchgate.net/publication/351871690_Blockchain_based_Decentralized_Applications_for_Multiple_Administrative_Domain_Networking](https://www.researchgate.net/publication/351871690_Blockchain_based_Decentralized_Applications_for_Multiple_Administrative_Domain_Networking).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Garg R, 2022\. Distributed Ecosystem for Identity Management. Journal of Blockchain
    Research, 1 (1) (In Press).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
