- en: '![](index-1_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![](index-1_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![](index-1_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![](index-1_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![](index-1_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![](index-1_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![](index-1_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![](index-1_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![](index-1_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![](index-1_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Blockchain
  prefs: []
  type: TYPE_NORMAL
- en: Basics
  prefs: []
  type: TYPE_NORMAL
- en: A Non-Technical Introduction
  prefs: []
  type: TYPE_NORMAL
- en: in 25 Steps
  prefs: []
  type: TYPE_NORMAL
- en: ―
  prefs: []
  type: TYPE_NORMAL
- en: Daniel Drescher
  prefs: []
  type: TYPE_NORMAL
- en: BLOCKCHAIN BASICS
  prefs: []
  type: TYPE_NORMAL
- en: '**A NON-TECHNICAL INTRODUCTION**'
  prefs: []
  type: TYPE_NORMAL
- en: '**IN 25 STEPS**'
  prefs: []
  type: TYPE_NORMAL
- en: '***Daniel Drescher***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Blockchain Basics: A Non-Technical Introduction in 25 Steps***'
  prefs: []
  type: TYPE_NORMAL
- en: Daniel Drescher
  prefs: []
  type: TYPE_NORMAL
- en: Frankfurt am Main, Germany
  prefs: []
  type: TYPE_NORMAL
- en: 'ISBN-13 (pbk): 978-1-4842-2603-2'
  prefs: []
  type: TYPE_NORMAL
- en: 'ISBN-13 (electronic): 978-1-4842-2604-9'
  prefs: []
  type: TYPE_NORMAL
- en: DOI 10.1007/978-1-4842-2604-9
  prefs: []
  type: TYPE_NORMAL
- en: 'Library of Congress Control Number: 2017936232'
  prefs: []
  type: TYPE_NORMAL
- en: Copyright © 2017 by Daniel Drescher
  prefs: []
  type: TYPE_NORMAL
- en: This work is subject to copyright. All rights are reserved by the Publisher,
    whether the whole or part of the material is concerned, specifically the rights
    of translation, reprinting, reuse of illustrations, recitation, broadcasting,
    reproduction on microfilms or in any other physical way, and transmission or information
    storage and retrieval, electronic adaptation, computer software, or by similar
    or dissimilar methodology now known or hereafter developed.
  prefs: []
  type: TYPE_NORMAL
- en: Trademarked names, logos, and images may appear in this book. Rather than use
    a trademark symbol with every occurrence of a trademarked name, logo, or image
    we use the names, logos, and images only in an editorial fashion and to the benefit
    of the trademark owner, with no intention of infringement of the trademark.
  prefs: []
  type: TYPE_NORMAL
- en: The use in this publication of trade names, trademarks, service marks, and similar
    terms, even if they are not identified as such, is not to be taken as an expression
    of opinion as to whether or not they are subject to proprietary rights.
  prefs: []
  type: TYPE_NORMAL
- en: While the advice and information in this book are believed to be true and accurate
    at the date of publication, neither the authors nor the editors nor the publisher
    can accept any legal responsibility for any errors or omissions that may be made.
    The publisher makes no warranty, express or implied, with respect to the material
    contained herein.
  prefs: []
  type: TYPE_NORMAL
- en: 'Managing Director: Welmoed Spahr'
  prefs: []
  type: TYPE_NORMAL
- en: 'Editorial Director: Todd Green'
  prefs: []
  type: TYPE_NORMAL
- en: 'Acquisitions Editor: Susan McDermott'
  prefs: []
  type: TYPE_NORMAL
- en: 'Development Editor: Laura Berendson'
  prefs: []
  type: TYPE_NORMAL
- en: 'Technical Reviewer: Laurence Kirk'
  prefs: []
  type: TYPE_NORMAL
- en: 'Coordinating Editor: Rita Fernando'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy Editor: Mary Bearden'
  prefs: []
  type: TYPE_NORMAL
- en: 'Compositor: SPi Global'
  prefs: []
  type: TYPE_NORMAL
- en: 'Indexer: SPi Global'
  prefs: []
  type: TYPE_NORMAL
- en: 'Artist: SPi Global'
  prefs: []
  type: TYPE_NORMAL
- en: Distributed to the book trade worldwide by Springer Science+Business Media New
    York, 233 Spring Street, 6th Floor, New York, NY 10013\. Phone 1-800-SPRINGER,
    fax (201) 348-4505, e-mail [orders-ny@springer-sbm.com](mailto:orders-ny@springer-sbm.com),
    or vis[it www.springeronline.com. A](http://www.springeronline.com)press Media,
    LLC is a California LLC and the sole member (owner) is Springer Science + Business
    Media Finance Inc (SSBM Finance Inc). SSBM Finance Inc is a **Delaware** corporation.
  prefs: []
  type: TYPE_NORMAL
- en: For information on translations, please e-m[ail rights@apress.com, or vis](mailto:rights@apress.com)it
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.apress.com/rights-permissions](http://www.apress.com/rights-permissions).'
  prefs: []
  type: TYPE_NORMAL
- en: Apress titles may be purchased in bulk for academic, corporate, or promotional
    use. eBook versions and licenses are also available for most titles. For more
    information, reference our Print and eBook Bulk Sales web page a[t http://www.apress.com/bulk-sales](http://www.apress.com/bulk-sales).
  prefs: []
  type: TYPE_NORMAL
- en: Any source code or other supplementary material referenced by the author in
    this book is available to readers on GitHub via the book’s product page, located
    at [www.apress.com/9781484226032](http://www.apress.com/9781484226032).
  prefs: []
  type: TYPE_NORMAL
- en: For more detailed information, please vis[it http://www.apress.com/source-code.](http://www.apress.com/source-code/)
  prefs: []
  type: TYPE_NORMAL
- en: Printed on acid-free paper
  prefs: []
  type: TYPE_NORMAL
- en: '**Apress Business: The Unbiased Source of Business Information**'
  prefs: []
  type: TYPE_NORMAL
- en: Apress business books provide essential information and practical advice, each
  prefs: []
  type: TYPE_NORMAL
- en: written for practitioners by recognized experts. Busy managers and profes-
  prefs: []
  type: TYPE_NORMAL
- en: sionals in all areas of the business world—and at all levels of technical sophistication—look
    to our books for the actionable ideas and tools they need to
  prefs: []
  type: TYPE_NORMAL
- en: solve problems, update and enhance their professional skills, make their work
  prefs: []
  type: TYPE_NORMAL
- en: lives easier, and capitalize on opportunity.
  prefs: []
  type: TYPE_NORMAL
- en: Whatever the topic on the business spectrum—entrepreneurship, finance,
  prefs: []
  type: TYPE_NORMAL
- en: sales, marketing, management, regulation, information technology, among oth-
  prefs: []
  type: TYPE_NORMAL
- en: ers—Apress has been praised for providing the objective information and
  prefs: []
  type: TYPE_NORMAL
- en: unbiased advice you need to excel in your daily work life. Our authors have
    no
  prefs: []
  type: TYPE_NORMAL
- en: axes to grind; they understand they have one job only—to deliver up-to-date,
  prefs: []
  type: TYPE_NORMAL
- en: accurate information simply, concisely, and with deep insight that addresses
  prefs: []
  type: TYPE_NORMAL
- en: the real needs of our readers.
  prefs: []
  type: TYPE_NORMAL
- en: It is increasingly hard to find information—whether in the news media, on the
  prefs: []
  type: TYPE_NORMAL
- en: Internet, and now all too often in books—that is even-handed and has your
  prefs: []
  type: TYPE_NORMAL
- en: best interests at heart. We therefore hope that you enjoy this book, which has
  prefs: []
  type: TYPE_NORMAL
- en: been carefully crafted to meet our standards of quality and unbiased coverage.
  prefs: []
  type: TYPE_NORMAL
- en: We are always interested in your feedback or ideas for new titles. Perhaps
  prefs: []
  type: TYPE_NORMAL
- en: you’d even like to write a book yourself. Whatever the case, reach out to us
  prefs: []
  type: TYPE_NORMAL
- en: at [editorial@apress.com](editorial@apress.com) and an editor will respond swiftly.
    Incidentally, at the back of this book, you will find a list of useful related
    titles. Please visit us at [www.apress.com](http://www.apress.com/) to sign up
    for newsletters and discounts on future purchases.
  prefs: []
  type: TYPE_NORMAL
- en: '*The Apress Business Team*'
  prefs: []
  type: TYPE_NORMAL
- en: Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**About the Author** vii **About the Technical Reviewer** ix **Introduction**
    xi **Stage 1:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Terminology and Technical Foundations** 1'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Thinking in Layers and Aspects** 3'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 2:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Seeing the Big Picture** 9'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 3:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Recognizing the Potential** 19'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stage I1: Why the Blockchain Is Needed** 27'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 4:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Discovering the Core Problem** 29'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 5:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Disambiguating the Term** 33'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 6:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Understanding the Nature of Ownership** 39'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 7:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Spending Money Twice** 49'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stage III: How the Blockchain Works** 55'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 8:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Planning the Blockchain** 57'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 9:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Documenting Ownership** 63'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 10: Hashing Data** 71'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 11: Hashing in the Real World** 81'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 12: Identifying and Protecting User Accounts** 93'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 13: Authorizing Transactions** 103'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 14: Storing Transaction Data** 111'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 15: Using the Data Store** 123'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 16: Protecting the Data Store** 135'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 17: Distributing the Data Store Among Peers** 145'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 18: Verif ying and Adding Transactions** 153'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 19: Choosing a Transaction History** 165'
  prefs: []
  type: TYPE_NORMAL
- en: vi
  prefs: []
  type: TYPE_NORMAL
- en: '***Contents***'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 20: Paying for Integrity** 183'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 21: Bringing the Pieces Together** 189'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stage IV: Limitations and How to Overcome Them** 203'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 22: Seeing the Limitations** 205'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 23: Reinventing the Blockchain** 213'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stage V: Using the Blockchain, Summary, and Outlook** 221'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 24: Using the Blockchain** 223'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 25: Summarizing and Going Further** 235'
  prefs: []
  type: TYPE_NORMAL
- en: '**Index** 249'
  prefs: []
  type: TYPE_NORMAL
- en: About the Author
  prefs: []
  type: TYPE_NORMAL
- en: '**Daniel Drescher** is an experienced banking professional who has held'
  prefs: []
  type: TYPE_NORMAL
- en: positions in electronic security trading in several banks. His recent activities
    have focused on automation, machine learning, and big data in the context of
  prefs: []
  type: TYPE_NORMAL
- en: security trading. Among others, Daniel holds a doctorate in econometrics
  prefs: []
  type: TYPE_NORMAL
- en: from the Technical University of Berlin and an MSc in software engineering
  prefs: []
  type: TYPE_NORMAL
- en: from the University of Oxford.
  prefs: []
  type: TYPE_NORMAL
- en: '![](index-8_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: About the Technical
  prefs: []
  type: TYPE_NORMAL
- en: Reviewer
  prefs: []
  type: TYPE_NORMAL
- en: '**Laurence Kirk** who after a successful career'
  prefs: []
  type: TYPE_NORMAL
- en: writing low latency financial applications for the
  prefs: []
  type: TYPE_NORMAL
- en: City of London, was captivated by the potential
  prefs: []
  type: TYPE_NORMAL
- en: of distributed ledger technology. He moved to
  prefs: []
  type: TYPE_NORMAL
- en: Oxford to study for his master’s degree and set
  prefs: []
  type: TYPE_NORMAL
- en: up Extropy.io, a consultancy working with start-
  prefs: []
  type: TYPE_NORMAL
- en: ups to develop applications on the Ethereum
  prefs: []
  type: TYPE_NORMAL
- en: platform. Passionate about distributed technol-
  prefs: []
  type: TYPE_NORMAL
- en: ogy, he now works as a developer, evangelist, and
  prefs: []
  type: TYPE_NORMAL
- en: educator about Ethereum.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs: []
  type: TYPE_NORMAL
- en: This introduction answers the most important question that every author
  prefs: []
  type: TYPE_NORMAL
- en: 'has to answer: Why should anyone read this book? Or more specifically: Why'
  prefs: []
  type: TYPE_NORMAL
- en: should anyone read another book about the blockchain? Continue reading
  prefs: []
  type: TYPE_NORMAL
- en: and you will learn why this book was written, what you can expect from this
  prefs: []
  type: TYPE_NORMAL
- en: book, what you cannot expect from this book, for whom the book was writ-
  prefs: []
  type: TYPE_NORMAL
- en: ten, and how the book is structured.
  prefs: []
  type: TYPE_NORMAL
- en: Why Another Book About the Blockchain?
  prefs: []
  type: TYPE_NORMAL
- en: The blockchain has received a lot of attention in the public discussion and
    in
  prefs: []
  type: TYPE_NORMAL
- en: the media. Some enthusiasts claim that the blockchain is the biggest invention
  prefs: []
  type: TYPE_NORMAL
- en: since the emergence of the Internet. Hence, a lot of books and articles have
  prefs: []
  type: TYPE_NORMAL
- en: been written in the past few years about the blockchain. However, if you want
  prefs: []
  type: TYPE_NORMAL
- en: to learn more about how the blockchain works, you may find yourself lost in
  prefs: []
  type: TYPE_NORMAL
- en: a universe of books that either quickly skim over the technical details or that
  prefs: []
  type: TYPE_NORMAL
- en: discuss the underlying technical concepts at a highly formal level. The former
  prefs: []
  type: TYPE_NORMAL
- en: may leave you unsatisfied because they miss to explain the technical details
  prefs: []
  type: TYPE_NORMAL
- en: necessary to understand and appreciate the blockchain, while the latter may
  prefs: []
  type: TYPE_NORMAL
- en: leave you unsatisfied because they already require the knowledge you want
  prefs: []
  type: TYPE_NORMAL
- en: to acquire.
  prefs: []
  type: TYPE_NORMAL
- en: This book fills the gap that exists between purely technical books about the
  prefs: []
  type: TYPE_NORMAL
- en: blockchain, on the one hand, and the literature that is mostly concerned with
  prefs: []
  type: TYPE_NORMAL
- en: specific applications or discussions about its expected economic impact or
  prefs: []
  type: TYPE_NORMAL
- en: visions about its future, on the other hand.
  prefs: []
  type: TYPE_NORMAL
- en: This book was written because a conceptual understanding of the technical
  prefs: []
  type: TYPE_NORMAL
- en: foundations of the blockchain is necessary in order to understand specific
  prefs: []
  type: TYPE_NORMAL
- en: blockchain applications, evaluate business cases of blockchain startups, or
    fol-
  prefs: []
  type: TYPE_NORMAL
- en: low the discussion about its expected economic impacts. Without an appre-
  prefs: []
  type: TYPE_NORMAL
- en: ciation of the underlying concepts, it will be impossible to assess the value
    or the potential impact of the blockchain in general or understand the added
  prefs: []
  type: TYPE_NORMAL
- en: value of specific blockchain applications. This book focuses on the underlying
  prefs: []
  type: TYPE_NORMAL
- en: concepts of the blockchain since a lack of understanding of a new technology
  prefs: []
  type: TYPE_NORMAL
- en: can lead to being carried away with the hype and being disappointed later on
  prefs: []
  type: TYPE_NORMAL
- en: because of unrealistic unsubstantiated expectations.
  prefs: []
  type: TYPE_NORMAL
- en: xii
  prefs: []
  type: TYPE_NORMAL
- en: '***Introduction***'
  prefs: []
  type: TYPE_NORMAL
- en: This book teaches the concepts that make up the blockchain in a nontechnical
  prefs: []
  type: TYPE_NORMAL
- en: fashion and in a concise and comprehensible way. It addresses the three big
  prefs: []
  type: TYPE_NORMAL
- en: 'questions that arise when being introduced to a new technology: What is it?'
  prefs: []
  type: TYPE_NORMAL
- en: Why do we need it? How does it work?
  prefs: []
  type: TYPE_NORMAL
- en: What You Cannot Expect from This Book
  prefs: []
  type: TYPE_NORMAL
- en: The book is deliberately agnostic to the application of the blockchain. While
  prefs: []
  type: TYPE_NORMAL
- en: cryptocurrencies in general and Bitcoin in particular are prominent applica-
  prefs: []
  type: TYPE_NORMAL
- en: tions of the blockchain, this book explains the blockchain as a general tech-
  prefs: []
  type: TYPE_NORMAL
- en: nology. This approach has been chosen in order to highlight generic concepts
  prefs: []
  type: TYPE_NORMAL
- en: and technical patterns of the blockchain instead of focusing on a specific and
  prefs: []
  type: TYPE_NORMAL
- en: 'narrow application case. Hence, this book is:'
  prefs: []
  type: TYPE_NORMAL
- en: • Not a text specifically about Bitcoin or any other
  prefs: []
  type: TYPE_NORMAL
- en: cryptocurrency
  prefs: []
  type: TYPE_NORMAL
- en: • Not a text solely about one specific blockchain application
  prefs: []
  type: TYPE_NORMAL
- en: • Not a text about proofing the mathematical foundations
  prefs: []
  type: TYPE_NORMAL
- en: of the blockchain
  prefs: []
  type: TYPE_NORMAL
- en: • Not a text about programming a blockchain
  prefs: []
  type: TYPE_NORMAL
- en: • Not a text about the legal consequences and implications
  prefs: []
  type: TYPE_NORMAL
- en: of the blockchain
  prefs: []
  type: TYPE_NORMAL
- en: • Not a text about the social, economic, or ethical impacts
  prefs: []
  type: TYPE_NORMAL
- en: of the blockchain on our society or humankind in general
  prefs: []
  type: TYPE_NORMAL
- en: However, some of these points are addressed to some extent at appropriate
  prefs: []
  type: TYPE_NORMAL
- en: points in this book.
  prefs: []
  type: TYPE_NORMAL
- en: What You Can Expect from This Book
  prefs: []
  type: TYPE_NORMAL
- en: This book explains the technical concepts of the blockchain such as transactions,
    hash values, cryptography, data structures, peer-to-peer systems, distributed
  prefs: []
  type: TYPE_NORMAL
- en: systems, system integrity, and distributed consensus in a nontechnical fashion.
  prefs: []
  type: TYPE_NORMAL
- en: 'The didactical approach of this book is based on four elements:'
  prefs: []
  type: TYPE_NORMAL
- en: • Conversational style
  prefs: []
  type: TYPE_NORMAL
- en: • No mathematics and no formulas
  prefs: []
  type: TYPE_NORMAL
- en: • Incremental steps through the problem domain
  prefs: []
  type: TYPE_NORMAL
- en: • Use of metaphors and analogies
  prefs: []
  type: TYPE_NORMAL
- en: '***Introduction***'
  prefs: []
  type: TYPE_NORMAL
- en: xiii
  prefs: []
  type: TYPE_NORMAL
- en: Conversational Style
  prefs: []
  type: TYPE_NORMAL
- en: This book is deliberately written in a conversational style. It does not use
  prefs: []
  type: TYPE_NORMAL
- en: mathematical or computer science jargon in order to avoid any hurdle for
  prefs: []
  type: TYPE_NORMAL
- en: nontechnical readers. However, the book introduces and explains the nec-
  prefs: []
  type: TYPE_NORMAL
- en: essary terminology needed to join the discussion and to understand other
  prefs: []
  type: TYPE_NORMAL
- en: publications about the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: No Mathematics and No Formulas
  prefs: []
  type: TYPE_NORMAL
- en: Major elements of the blockchain such as cryptography and algorithms are
  prefs: []
  type: TYPE_NORMAL
- en: based on complex mathematical concepts, which in turn come with their own
  prefs: []
  type: TYPE_NORMAL
- en: demanding and sometimes frightening mathematical notation and formulas.
  prefs: []
  type: TYPE_NORMAL
- en: However, this book deliberately does not use any mathematical notation or
  prefs: []
  type: TYPE_NORMAL
- en: formulas in order to avoid any unnecessary complexity or hurdle for nontech-
  prefs: []
  type: TYPE_NORMAL
- en: nical readers.
  prefs: []
  type: TYPE_NORMAL
- en: Incremental Steps Through the Problem Domain
  prefs: []
  type: TYPE_NORMAL
- en: The chapters in this book are called *steps* for a good reason. These steps
    form a learning path that incrementally builds the knowledge about the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: The order of the steps was chosen carefully. They cover the fundamentals
  prefs: []
  type: TYPE_NORMAL
- en: of software engineering, explain the terminology, point out the reason why
  prefs: []
  type: TYPE_NORMAL
- en: the blockchain is needed, and explain the individual concepts that make up
  prefs: []
  type: TYPE_NORMAL
- en: the blockchain as well as their interactions. Calling the individual chapters
  prefs: []
  type: TYPE_NORMAL
- en: steps highlights their dependence and their didactical purpose. They form a
  prefs: []
  type: TYPE_NORMAL
- en: logical sequence to be followed instead of being chapters that could be read
  prefs: []
  type: TYPE_NORMAL
- en: independently.
  prefs: []
  type: TYPE_NORMAL
- en: Use of Metaphors and Analogies
  prefs: []
  type: TYPE_NORMAL
- en: Each step that introduces a new concept starts with a pictorial explanation
  prefs: []
  type: TYPE_NORMAL
- en: by referring to a situation from real life. These metaphors serve four major
  prefs: []
  type: TYPE_NORMAL
- en: purposes. First, they prepare the reader for introduction to a new technical
  prefs: []
  type: TYPE_NORMAL
- en: concept. Second, by connecting a technical concept to an easy-to-understand
  prefs: []
  type: TYPE_NORMAL
- en: real-world scenario, the metaphors reduce the mental hurdle to discover a
  prefs: []
  type: TYPE_NORMAL
- en: new territory. Third, metaphors allow learning new concepts by similarities
  prefs: []
  type: TYPE_NORMAL
- en: and analogies. Finally, metaphors provide rules of thumb for memorizing new
  prefs: []
  type: TYPE_NORMAL
- en: concepts.
  prefs: []
  type: TYPE_NORMAL
- en: xiv
  prefs: []
  type: TYPE_NORMAL
- en: '***Introduction***'
  prefs: []
  type: TYPE_NORMAL
- en: How This Book Is Organized
  prefs: []
  type: TYPE_NORMAL
- en: This book consists of 25 steps grouped into five major stages that all together
  prefs: []
  type: TYPE_NORMAL
- en: form a learning path, which incrementally builds your knowledge of the block-
  prefs: []
  type: TYPE_NORMAL
- en: chain. These steps cover some fundamentals of software engineering, explain
  prefs: []
  type: TYPE_NORMAL
- en: the required terminology, point out the reasons why the blockchain is needed,
  prefs: []
  type: TYPE_NORMAL
- en: explain the individual concepts that make up the blockchain as well as their
  prefs: []
  type: TYPE_NORMAL
- en: interactions, consider applications of the blockchain, and mention areas of
  prefs: []
  type: TYPE_NORMAL
- en: active development and research.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stage I: Terminology and Technical Foundations'
  prefs: []
  type: TYPE_NORMAL
- en: Steps [1](http://dx.doi.org/10.1007/978-1-4842-2604-9_1) to [3 explain major
    concepts of softwar](http://dx.doi.org/10.1007/978-1-4842-2604-9_3)e engineering
    and set the terminology necessary for understanding the succeeding steps. By the
    end of
  prefs: []
  type: TYPE_NORMAL
- en: Step [3,](http://dx.doi.org/10.1007/978-1-4842-2604-9_3) you will have gained
    an overview of the fundamental concepts and an appreciation of the big picture
    in which the blockchain is located.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stage II: Why the Blockchain Is Needed'
  prefs: []
  type: TYPE_NORMAL
- en: '[Steps 4](http://dx.doi.org/10.1007/978-1-4842-2604-9_4) [to 7](http://dx.doi.org/10.1007/978-1-4842-2604-9_7)
    explain why the blockchain is needed, what problem it solves, why solving this
    problem is important, and what potential the blockchain has. By'
  prefs: []
  type: TYPE_NORMAL
- en: '[the end of Step 7](http://dx.doi.org/10.1007/978-1-4842-2604-9_7), you will
    have gained a good understanding of the problem domain in which the blockchain
    is located, the environment in which it provides the most value, and why it is
    needed in the first place.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stage III: How the Blockchain Works'
  prefs: []
  type: TYPE_NORMAL
- en: The third stage is the centerpiece of this book since it explains how the block-
  prefs: []
  type: TYPE_NORMAL
- en: chain works internally. [Steps 8 to](http://dx.doi.org/10.1007/978-1-4842-2604-9_8)
    [21 guide y](http://dx.doi.org/10.1007/978-1-4842-2604-9_21)ou through 15 distinct
    technical concepts that all together make up the blockchain. By the end of Step
    [21](http://dx.doi.org/10.1007/978-1-4842-2604-9_21), you will have reached an
    understanding of all the major concepts of the blockchain, how they work in isolation,
    and how they interact in order to create the
  prefs: []
  type: TYPE_NORMAL
- en: big machinery that is called the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stage IV: Limitations and How to Overcome Them'
  prefs: []
  type: TYPE_NORMAL
- en: '[Steps 22 to](http://dx.doi.org/10.1007/978-1-4842-2604-9_22) [23 f](http://dx.doi.org/10.1007/978-1-4842-2604-9_23)ocus
    on major limitations of the blockchain, explain their reasons, and sketch possible
    ways to overcome them. [By the end of Step 23,](http://dx.doi.org/10.1007/978-1-4842-2604-9_23)
    you will understand why the original idea of the blockchain as explained in the
    previous steps may not be suitable for large-scale commercial applications, what'
  prefs: []
  type: TYPE_NORMAL
- en: changes were made to overcome these limitations, and how these changes
  prefs: []
  type: TYPE_NORMAL
- en: altered the properties of the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: '***Introduction***'
  prefs: []
  type: TYPE_NORMAL
- en: xv
  prefs: []
  type: TYPE_NORMAL
- en: 'Stage V: Using the Blockchain, Summary, and Outlook'
  prefs: []
  type: TYPE_NORMAL
- en: '[Steps 24 and](http://dx.doi.org/10.1007/978-1-4842-2604-9_24) [25 consider
    ho](http://dx.doi.org/10.1007/978-1-4842-2604-9_25)w the blockchain can be used
    in real life and what questions should to be addressed when selecting a blockchain
    application. This'
  prefs: []
  type: TYPE_NORMAL
- en: stage also points out areas of active research and further development. By
  prefs: []
  type: TYPE_NORMAL
- en: '[the end of Step 25,](http://dx.doi.org/10.1007/978-1-4842-2604-9_25) you will
    have gained a well-grounded understanding of the blockchain and you will be well
    prepared to read more advanced texts or to'
  prefs: []
  type: TYPE_NORMAL
- en: become an active part in the ongoing discussion about the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Accompanying Material
  prefs: []
  type: TYPE_NORMAL
- en: The w[ebsite www.blockchain-basics.com](http://www.blockchain-basics.com/) offers
    accompanying material for some of the steps of this book.
  prefs: []
  type: TYPE_NORMAL
- en: '**S T A G E**'
  prefs: []
  type: TYPE_NORMAL
- en: I
  prefs: []
  type: TYPE_NORMAL
- en: Terminology
  prefs: []
  type: TYPE_NORMAL
- en: and Technical
  prefs: []
  type: TYPE_NORMAL
- en: Foundations
  prefs: []
  type: TYPE_NORMAL
- en: This stage explains major concepts of software engineering and establishes
  prefs: []
  type: TYPE_NORMAL
- en: a way to organize and standardize our communication about technology.
  prefs: []
  type: TYPE_NORMAL
- en: This learning stage also introduces the concepts of software architecture and
  prefs: []
  type: TYPE_NORMAL
- en: integrity and how they relate to the blockchain. By the end of this stage, you
  prefs: []
  type: TYPE_NORMAL
- en: will have gained an understanding of the purpose of the blockchain and its
  prefs: []
  type: TYPE_NORMAL
- en: potential.
  prefs: []
  type: TYPE_NORMAL
- en: '**S T E P**'
  prefs: []
  type: TYPE_NORMAL
- en: '1'
  prefs: []
  type: TYPE_NORMAL
- en: Thinking in
  prefs: []
  type: TYPE_NORMAL
- en: Layers and
  prefs: []
  type: TYPE_NORMAL
- en: Aspects
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing systems by separating them into
  prefs: []
  type: TYPE_NORMAL
- en: layers and aspects
  prefs: []
  type: TYPE_NORMAL
- en: This step lays the foundation of our learning path through the blockchain
  prefs: []
  type: TYPE_NORMAL
- en: by introducing a way to organize and standardize our communication about
  prefs: []
  type: TYPE_NORMAL
- en: technology. This step explains how you can analyze a software system and
  prefs: []
  type: TYPE_NORMAL
- en: why it is important to consider a software system as a composition of
  prefs: []
  type: TYPE_NORMAL
- en: layers. Furthermore, this step illustrates what you can gain from considering
  prefs: []
  type: TYPE_NORMAL
- en: different layers in a system and how this approach helps us to understand the
  prefs: []
  type: TYPE_NORMAL
- en: blockchain. Finally, this step provides a short introduction to the concept
    of
  prefs: []
  type: TYPE_NORMAL
- en: software integrity and highlights its importance.
  prefs: []
  type: TYPE_NORMAL
- en: © Daniel Drescher 2017
  prefs: []
  type: TYPE_NORMAL
- en: D. Drescher, *Blockchain Basics*, DOI 10.1007/978-1-4842-2604-9_1
  prefs: []
  type: TYPE_NORMAL
- en: '4'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 1 | Thinking in Layers and Aspects***'
  prefs: []
  type: TYPE_NORMAL
- en: The Metaphor
  prefs: []
  type: TYPE_NORMAL
- en: Do you have a mobile phone? I would guess yes, as most people now have at
  prefs: []
  type: TYPE_NORMAL
- en: least one. How much do you know about the different wireless communica-
  prefs: []
  type: TYPE_NORMAL
- en: tion protocols that are used to send and receive data? How much do you
  prefs: []
  type: TYPE_NORMAL
- en: know about electromagnetic waves that are the foundation of mobile com-
  prefs: []
  type: TYPE_NORMAL
- en: munication? Well, most of us do not know very much about these details
  prefs: []
  type: TYPE_NORMAL
- en: because it is not necessary to know them in order to use a mobile phone and
  prefs: []
  type: TYPE_NORMAL
- en: most of us do not have the time to learn about them. We mentally separate
  prefs: []
  type: TYPE_NORMAL
- en: the mobile phone into the parts we need to know and the parts that can be
  prefs: []
  type: TYPE_NORMAL
- en: ignored or taken for granted.
  prefs: []
  type: TYPE_NORMAL
- en: This approach to technology is not restricted to mobile phones. We use it
  prefs: []
  type: TYPE_NORMAL
- en: all the time when we learn how to use a new television set, a computer, a
  prefs: []
  type: TYPE_NORMAL
- en: washing machine, and so forth. However, these mental partitions are highly
  prefs: []
  type: TYPE_NORMAL
- en: individual since what is considered important and what is not depends on
  prefs: []
  type: TYPE_NORMAL
- en: our individual preferences, the specific technology, and our goals and experi-
  prefs: []
  type: TYPE_NORMAL
- en: ences. As a result, your mental partition of a mobile phone may differ from
    my
  prefs: []
  type: TYPE_NORMAL
- en: mental partition of the same mobile phone. This typically leads to problems
  prefs: []
  type: TYPE_NORMAL
- en: in communication in particular when I try to explain to you what you should
  prefs: []
  type: TYPE_NORMAL
- en: know about a certain mobile phone. Hence, unifying the way of partitioning
  prefs: []
  type: TYPE_NORMAL
- en: a system is the key point when teaching and discussing technology. This step
  prefs: []
  type: TYPE_NORMAL
- en: explains how to partition or layer a system and hence sets the basis for our
  prefs: []
  type: TYPE_NORMAL
- en: communication about the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Layers of a Software System
  prefs: []
  type: TYPE_NORMAL
- en: The following two ways of partitioning a system are used throughout this
  prefs: []
  type: TYPE_NORMAL
- en: 'book:'
  prefs: []
  type: TYPE_NORMAL
- en: • Application vs. implementation
  prefs: []
  type: TYPE_NORMAL
- en: • Functional vs. nonfunctional aspects
  prefs: []
  type: TYPE_NORMAL
- en: Application vs. Implementation
  prefs: []
  type: TYPE_NORMAL
- en: Mentally separating the user’s needs from the technical internals of a sys-
  prefs: []
  type: TYPE_NORMAL
- en: tem leads to a separation of the application layer from the implementation
  prefs: []
  type: TYPE_NORMAL
- en: layer. Everything that belongs to the application layer is concerned with the
  prefs: []
  type: TYPE_NORMAL
- en: user’s needs (e.g., listening to music, taking photos, or booking hotel rooms).
  prefs: []
  type: TYPE_NORMAL
- en: Everything that belongs to the implementation layer is concerned with making
  prefs: []
  type: TYPE_NORMAL
- en: these things happen (e.g., converting digital information into acoustic signals,
    recognizing the color of a pixel in a digital camera, or sending messages over
  prefs: []
  type: TYPE_NORMAL
- en: the Internet to a booking system). Elements of the implementation layer are
  prefs: []
  type: TYPE_NORMAL
- en: technical by nature and are considered a means to an end.
  prefs: []
  type: TYPE_NORMAL
- en: '***Blockchain Basics***'
  prefs: []
  type: TYPE_NORMAL
- en: '5'
  prefs: []
  type: TYPE_NORMAL
- en: Functional vs. Nonfunctional Aspects
  prefs: []
  type: TYPE_NORMAL
- en: Distinguishing between what a system does and how it does what it does
  prefs: []
  type: TYPE_NORMAL
- en: leads to the separation of functional and nonfunctional aspects. Examples of
  prefs: []
  type: TYPE_NORMAL
- en: functional aspects are sending data over a network, playing music, taking pho-
  prefs: []
  type: TYPE_NORMAL
- en: tos, and manipulating individual pixels of a picture. Examples of nonfunctional
  prefs: []
  type: TYPE_NORMAL
- en: aspects are a beautiful graphical user interface, fast-running software, and
    an
  prefs: []
  type: TYPE_NORMAL
- en: ability to keep user data private and save. Other important nonfunctional
  prefs: []
  type: TYPE_NORMAL
- en: aspects of a system are security and integrity. *Integrity* means that a system
    behaves as intended, and it involves many aspects such as security and correctness.
    [1 T](index_split_000.html#17)here is a nice way to remember the difference between
    functional and nonfunctional aspects of a system by referring to grammar usage
    in the English
  prefs: []
  type: TYPE_NORMAL
- en: 'language: verbs describe actions or what is done, while adverbs describe how'
  prefs: []
  type: TYPE_NORMAL
- en: an action is done. For example, a person can walk quickly or slowly. In both
  prefs: []
  type: TYPE_NORMAL
- en: cases, the action of “walk” is identical but how the action is performed differs.
  prefs: []
  type: TYPE_NORMAL
- en: As a rule of thumb, one can say that functional aspects are similar to verbs,
  prefs: []
  type: TYPE_NORMAL
- en: while nonfunctional aspects are similar to adverbs.
  prefs: []
  type: TYPE_NORMAL
- en: Considering Two Layers at the Same Time
  prefs: []
  type: TYPE_NORMAL
- en: Identifying functional and nonfunctional aspects as well as separating application
    and implementation layer can be done at the same time, which leads to a
  prefs: []
  type: TYPE_NORMAL
- en: two-dimensional table. Table [1-1](index_split_000.html#17) illustrates the
    result of mentally layering a mobile phone in this way.
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 1-1\.** Example of Mentally Layering a Mobile Phone'
  prefs: []
  type: TYPE_NORMAL
- en: '**Layer**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Functional Aspects**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nonfunctional Aspects**'
  prefs: []
  type: TYPE_NORMAL
- en: Application
  prefs: []
  type: TYPE_NORMAL
- en: Taking photos
  prefs: []
  type: TYPE_NORMAL
- en: The graphical user interface
  prefs: []
  type: TYPE_NORMAL
- en: Making phone calls
  prefs: []
  type: TYPE_NORMAL
- en: looks beautiful
  prefs: []
  type: TYPE_NORMAL
- en: Sending e-mails
  prefs: []
  type: TYPE_NORMAL
- en: Easy to use
  prefs: []
  type: TYPE_NORMAL
- en: Browsing the Internet
  prefs: []
  type: TYPE_NORMAL
- en: Messages are sent fast
  prefs: []
  type: TYPE_NORMAL
- en: Sending chat messages
  prefs: []
  type: TYPE_NORMAL
- en: Implementation
  prefs: []
  type: TYPE_NORMAL
- en: Saving user data internally
  prefs: []
  type: TYPE_NORMAL
- en: Store data efficiently
  prefs: []
  type: TYPE_NORMAL
- en: Making a connection to the nearest
  prefs: []
  type: TYPE_NORMAL
- en: Saving energy
  prefs: []
  type: TYPE_NORMAL
- en: mobile connector
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining integrity
  prefs: []
  type: TYPE_NORMAL
- en: Accessing pixels in the digital camera
  prefs: []
  type: TYPE_NORMAL
- en: Ensure user privacy
  prefs: []
  type: TYPE_NORMAL
- en: '1Chung, Lawrence, et al. *Non-functional requirements in software engineering*.
    Vol. 5\. New York: Springer Science & Business Media, 2012\.'
  prefs: []
  type: TYPE_NORMAL
- en: '6'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 1 | Thinking in Layers and Aspects***'
  prefs: []
  type: TYPE_NORMAL
- en: Table 1-I may explain the visibility (or the lack of it) of specific elements
    of a system to its users. Functional aspects of the application layer are the
    most
  prefs: []
  type: TYPE_NORMAL
- en: obvious elements of a system, because they serve obvious needs of the users.
  prefs: []
  type: TYPE_NORMAL
- en: These elements are typically the ones users learn about. On the other hand,
  prefs: []
  type: TYPE_NORMAL
- en: the nonfunctional aspects of the implementation layer are rarely seen as major
  prefs: []
  type: TYPE_NORMAL
- en: elements of the system. They are typically taken for granted.
  prefs: []
  type: TYPE_NORMAL
- en: Integrity
  prefs: []
  type: TYPE_NORMAL
- en: Integrity is an important nonfunctional aspect of any software system. It has
  prefs: []
  type: TYPE_NORMAL
- en: thr[ee major components2:](index_split_000.html#18)
  prefs: []
  type: TYPE_NORMAL
- en: '• *Data integrity*: The data used and maintained by the system'
  prefs: []
  type: TYPE_NORMAL
- en: are complete, correct, and free of contradictions.
  prefs: []
  type: TYPE_NORMAL
- en: '• *Behavioral integrity*: The system behaves as intended and it'
  prefs: []
  type: TYPE_NORMAL
- en: is free of logical errors.
  prefs: []
  type: TYPE_NORMAL
- en: '• *Security*: The system is able to restrict access to its data'
  prefs: []
  type: TYPE_NORMAL
- en: and functionality to authorized users only.
  prefs: []
  type: TYPE_NORMAL
- en: Most of us may take integrity of software systems for granted because most
  prefs: []
  type: TYPE_NORMAL
- en: of the time we luckily interact with systems that keep their integrity. This
    is
  prefs: []
  type: TYPE_NORMAL
- en: due to the fact that programmers and software engineers have invested a lot
  prefs: []
  type: TYPE_NORMAL
- en: of time and effort into the development of systems to achieve and maintain
  prefs: []
  type: TYPE_NORMAL
- en: integrity. As a result, we may be a bit spoiled when it comes to appreciating
  prefs: []
  type: TYPE_NORMAL
- en: the work done by software engineers to create systems that maintain a high
  prefs: []
  type: TYPE_NORMAL
- en: level of integrity. But our feelings may change as soon as we interact with
    a
  prefs: []
  type: TYPE_NORMAL
- en: system that fails to do so. These are the occasions when you face a loss of
  prefs: []
  type: TYPE_NORMAL
- en: data, illogical software behavior, or realize that strangers were able to access
    your private data. These are the occasions when your mobile phone, your
  prefs: []
  type: TYPE_NORMAL
- en: computer, your e-mail software, your word processor, or your spreadsheet
  prefs: []
  type: TYPE_NORMAL
- en: calculator make you angry and forget your good manners! On these occasions,
  prefs: []
  type: TYPE_NORMAL
- en: we begin to realize that software integrity is a highly valuable commodity.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, it should not come as a surprise that software professionals spend a
  prefs: []
  type: TYPE_NORMAL
- en: lot of their time working on this seemingly tiny nonfunctional aspect of the
  prefs: []
  type: TYPE_NORMAL
- en: implementation layer.
  prefs: []
  type: TYPE_NORMAL
- en: 2.Boritz, J. Efrim. IS practitioners’ views on core concepts of information
    integrity.
  prefs: []
  type: TYPE_NORMAL
- en: '*International Journal of Accounting Information Systems* 6.4 (2005): 260–279\.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Blockchain Basics***'
  prefs: []
  type: TYPE_NORMAL
- en: '7'
  prefs: []
  type: TYPE_NORMAL
- en: Outlook
  prefs: []
  type: TYPE_NORMAL
- en: This step provided an introduction to some general principles of software
  prefs: []
  type: TYPE_NORMAL
- en: engineering. In particular, the concepts of integrity and functional vs. nonfunctional
    aspects as well as application vs. implementation of a software system
  prefs: []
  type: TYPE_NORMAL
- en: were illustrated. Understanding these concepts will help you appreciate the
  prefs: []
  type: TYPE_NORMAL
- en: wider scope in which the blockchain exists. The next step will present the
  prefs: []
  type: TYPE_NORMAL
- en: bigger picture by using the concepts introduced in this step.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs: []
  type: TYPE_NORMAL
- en: '• Systems can be analyzed by separating them into:'
  prefs: []
  type: TYPE_NORMAL
- en: • Application and implementation layer
  prefs: []
  type: TYPE_NORMAL
- en: • Functional and nonfunctional aspects
  prefs: []
  type: TYPE_NORMAL
- en: • The application layer focuses on the user’s needs, while
  prefs: []
  type: TYPE_NORMAL
- en: the implementation layer focuses on making things
  prefs: []
  type: TYPE_NORMAL
- en: happen.
  prefs: []
  type: TYPE_NORMAL
- en: • Functional aspects focus on what is done, while nonfunc-
  prefs: []
  type: TYPE_NORMAL
- en: tional aspects focus on how things are done.
  prefs: []
  type: TYPE_NORMAL
- en: • Most users are concerned with the functional aspects
  prefs: []
  type: TYPE_NORMAL
- en: of the application layer of a system, while nonfunc-
  prefs: []
  type: TYPE_NORMAL
- en: tional aspects of a system, in particular those of the
  prefs: []
  type: TYPE_NORMAL
- en: implementation layer, are less visible to users.
  prefs: []
  type: TYPE_NORMAL
- en: • Integrity is an important nonfunctional aspect of any
  prefs: []
  type: TYPE_NORMAL
- en: 'software system and it has three major elements:'
  prefs: []
  type: TYPE_NORMAL
- en: • Data integrity
  prefs: []
  type: TYPE_NORMAL
- en: • Behavioral integrity
  prefs: []
  type: TYPE_NORMAL
- en: • Security
  prefs: []
  type: TYPE_NORMAL
- en: • Most software failures, such as losses of data, illogical
  prefs: []
  type: TYPE_NORMAL
- en: behavior, or strangers accessing one’s private data, are
  prefs: []
  type: TYPE_NORMAL
- en: the result of violated system integrity.
  prefs: []
  type: TYPE_NORMAL
- en: '**S T E P**'
  prefs: []
  type: TYPE_NORMAL
- en: '2'
  prefs: []
  type: TYPE_NORMAL
- en: Seeing the Big
  prefs: []
  type: TYPE_NORMAL
- en: Picture
  prefs: []
  type: TYPE_NORMAL
- en: Software architecture and its relation to the
  prefs: []
  type: TYPE_NORMAL
- en: blockchain
  prefs: []
  type: TYPE_NORMAL
- en: This step not only provides the big picture in which the blockchain is located,
  prefs: []
  type: TYPE_NORMAL
- en: but it also highlights its location within the big picture. In order to allow
    you to see the big picture, this step introduces the concept of software architecture
    and explains its relation to the concept of separating a system into
  prefs: []
  type: TYPE_NORMAL
- en: layers and aspects. In order to help you recognize the location of the block-
  prefs: []
  type: TYPE_NORMAL
- en: chain within the big picture, this step highlights the relationship between
    the
  prefs: []
  type: TYPE_NORMAL
- en: blockchain and software architecture. Finally, this step points out the core
  prefs: []
  type: TYPE_NORMAL
- en: purpose of the blockchain in just one sentence. Appreciating its purpose is
    a
  prefs: []
  type: TYPE_NORMAL
- en: cornerstone in understanding the blockchain and understanding the course
  prefs: []
  type: TYPE_NORMAL
- en: of the succeeding steps.
  prefs: []
  type: TYPE_NORMAL
- en: The Metaphor
  prefs: []
  type: TYPE_NORMAL
- en: Have you ever bought a car? Most of us have. Even if you have never bought a
  prefs: []
  type: TYPE_NORMAL
- en: car, you probably know that cars are equipped with different types of engines
  prefs: []
  type: TYPE_NORMAL
- en: (e.g., diesel, gasoline, or electric engine). This is an example of the process
  prefs: []
  type: TYPE_NORMAL
- en: © Daniel Drescher 2017
  prefs: []
  type: TYPE_NORMAL
- en: D. Drescher, *Blockchain Basics*, DOI 10.1007/978-1-4842-2604-9_2
  prefs: []
  type: TYPE_NORMAL
- en: '10'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 2 | Seeing the Big Picture***'
  prefs: []
  type: TYPE_NORMAL
- en: of modularization, which is the result of applying the idea of layering to cars.
  prefs: []
  type: TYPE_NORMAL
- en: Having the choice among different engines when buying a car can result in
  prefs: []
  type: TYPE_NORMAL
- en: amazing differences in the vehicle. Two cars that look identical from the out-
  prefs: []
  type: TYPE_NORMAL
- en: side can differ dramatically with respect to the power of their engines and
  prefs: []
  type: TYPE_NORMAL
- en: hence have very different driving performance. Additionally, your choice of
  prefs: []
  type: TYPE_NORMAL
- en: the engine will have an impact on other characteristics of the car, like its
    price, its operational costs, the type of fuel consumed, the exhaust system, and
    the
  prefs: []
  type: TYPE_NORMAL
- en: dimensions of the brakes. With this picture in mind, understanding the role
    of
  prefs: []
  type: TYPE_NORMAL
- en: the blockchain within the big picture will be much easier.
  prefs: []
  type: TYPE_NORMAL
- en: A Payment System
  prefs: []
  type: TYPE_NORMAL
- en: Let’s apply the concept of layering to a payment system. Table [2-1](index_split_000.html#21)
    shows some of the user’s needs as well as some of the nonfunctional aspects of
    both the
  prefs: []
  type: TYPE_NORMAL
- en: application and the implementation layers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 2-1\.** Aspects and Layers of a Payment System'
  prefs: []
  type: TYPE_NORMAL
- en: '**Layer**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Functional Aspects**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nonfunctional Aspects**'
  prefs: []
  type: TYPE_NORMAL
- en: Application
  prefs: []
  type: TYPE_NORMAL
- en: Deposit money
  prefs: []
  type: TYPE_NORMAL
- en: The graphical user interface looks beautiful
  prefs: []
  type: TYPE_NORMAL
- en: Withdraw money
  prefs: []
  type: TYPE_NORMAL
- en: Easy to use
  prefs: []
  type: TYPE_NORMAL
- en: Transfer money
  prefs: []
  type: TYPE_NORMAL
- en: Transfer of money is done fast
  prefs: []
  type: TYPE_NORMAL
- en: Monitor account balance
  prefs: []
  type: TYPE_NORMAL
- en: System has many participants
  prefs: []
  type: TYPE_NORMAL
- en: Implementation
  prefs: []
  type: TYPE_NORMAL
- en: '?'
  prefs: []
  type: TYPE_NORMAL
- en: Available 24 hours a day
  prefs: []
  type: TYPE_NORMAL
- en: Fraud resistant
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining integrity
  prefs: []
  type: TYPE_NORMAL
- en: Ensure user privacy
  prefs: []
  type: TYPE_NORMAL
- en: Have you spotted the question mark in that part of the table were you nor-
  prefs: []
  type: TYPE_NORMAL
- en: mally see information about the technology used to make the system work?
  prefs: []
  type: TYPE_NORMAL
- en: This space was left blank on purpose. It is the place where you decide which
  prefs: []
  type: TYPE_NORMAL
- en: “engine” should be used to run your system. The next section will tell you a
  prefs: []
  type: TYPE_NORMAL
- en: bit more about the engine equivalent in software systems.
  prefs: []
  type: TYPE_NORMAL
- en: Two Types of Software Architecture
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways to implement software systems. However, one of the
  prefs: []
  type: TYPE_NORMAL
- en: fundamental decisions when implementing a system concerns its architecture,
  prefs: []
  type: TYPE_NORMAL
- en: the way in which its components are organized and related to one another.
  prefs: []
  type: TYPE_NORMAL
- en: '![](index-22_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '***Blockchain Basics***'
  prefs: []
  type: TYPE_NORMAL
- en: '11'
  prefs: []
  type: TYPE_NORMAL
- en: The two major architectural approaches for software systems are centralized
  prefs: []
  type: TYPE_NORMAL
- en: and distributed. [1](index_split_000.html#22)
  prefs: []
  type: TYPE_NORMAL
- en: In centralized software systems, the components are located around and con-
  prefs: []
  type: TYPE_NORMAL
- en: nected with one central component. In contrast, the components of distributed
  prefs: []
  type: TYPE_NORMAL
- en: systems form a network of connected components without having any central
  prefs: []
  type: TYPE_NORMAL
- en: element of coordination or control.
  prefs: []
  type: TYPE_NORMAL
- en: Figure [2-1](index_split_000.html#22) depicts these two contrary architectures.
    The circles in the figure represent system components, also called nodes, and
    the lines represent connections between them. At this point, it is not important
    to know the details
  prefs: []
  type: TYPE_NORMAL
- en: of what these components do and what information is exchanged between
  prefs: []
  type: TYPE_NORMAL
- en: the nodes. The important point is the existence of these two different ways
  prefs: []
  type: TYPE_NORMAL
- en: of organizing software systems. On the left-hand side of Figure [2-1](index_split_000.html#22),
    a distributed architecture is illustrated where components are connected with
    one
  prefs: []
  type: TYPE_NORMAL
- en: another without having a central element. It is important to see that none of
  prefs: []
  type: TYPE_NORMAL
- en: the components is directly connected with all other components. However, all
  prefs: []
  type: TYPE_NORMAL
- en: components are connected with one another at least indirectly. The right-hand
  prefs: []
  type: TYPE_NORMAL
- en: side of Figure [2-1](index_split_000.html#22) illustrates a centralized architecture
    where each component is connected to one central component. The components are
    not connected
  prefs: []
  type: TYPE_NORMAL
- en: with one another directly. They only have one direct connection to the central
  prefs: []
  type: TYPE_NORMAL
- en: component.
  prefs: []
  type: TYPE_NORMAL
- en: '**Figure 2-1\.** Distributed (left) vs. centralized (right) system architecture
    1Tanenbaum, Andrew S., and Maarten Van Steen. *Distributed systems: principles
    and paradigms*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Upper Saddle River, NJ: Pearson Prentice Hall, 2007\.'
  prefs: []
  type: TYPE_NORMAL
- en: '12'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 2 | Seeing the Big Picture***'
  prefs: []
  type: TYPE_NORMAL
- en: The Advantages of Distributed Systems
  prefs: []
  type: TYPE_NORMAL
- en: The major advantages of a distributed system over single computers are[2:](index_split_000.html#23)
  prefs: []
  type: TYPE_NORMAL
- en: • Higher computing power
  prefs: []
  type: TYPE_NORMAL
- en: • Cost reduction
  prefs: []
  type: TYPE_NORMAL
- en: • Higher reliability
  prefs: []
  type: TYPE_NORMAL
- en: • Ability to grow naturally
  prefs: []
  type: TYPE_NORMAL
- en: Higher Computing Power
  prefs: []
  type: TYPE_NORMAL
- en: The computing power of a distributed system is the result of combining the
  prefs: []
  type: TYPE_NORMAL
- en: computing power of all connected computers. Hence, distributed systems
  prefs: []
  type: TYPE_NORMAL
- en: typically have more computing power than each individual computer. This has
  prefs: []
  type: TYPE_NORMAL
- en: been proven true even when comparing distributed systems comprised of
  prefs: []
  type: TYPE_NORMAL
- en: computers of relatively low computing power with isolated super computers.
  prefs: []
  type: TYPE_NORMAL
- en: Cost Reduction
  prefs: []
  type: TYPE_NORMAL
- en: The price of mainstream computers, memory, disk space, and networking
  prefs: []
  type: TYPE_NORMAL
- en: equipment has fallen dramatically during the past 20 years. Since distributed
  prefs: []
  type: TYPE_NORMAL
- en: systems consist of many computers, the initial costs of distributed systems
    are
  prefs: []
  type: TYPE_NORMAL
- en: higher than the initial costs of individual computers. However, the costs of
    creating, maintaining, and operating a super computer are still much higher than
  prefs: []
  type: TYPE_NORMAL
- en: the costs of creating, maintaining, and operating a distributed system. This
    is
  prefs: []
  type: TYPE_NORMAL
- en: particularly true since replacing individual computers of a distributed system
  prefs: []
  type: TYPE_NORMAL
- en: can be done with no significant overall system impact.
  prefs: []
  type: TYPE_NORMAL
- en: Higher Reliability
  prefs: []
  type: TYPE_NORMAL
- en: The increased reliability of a distributed system is based on the fact that
    the
  prefs: []
  type: TYPE_NORMAL
- en: whole network of computers can continue operating even when individual
  prefs: []
  type: TYPE_NORMAL
- en: machines crash. A distributed system does not have a single point of failure.
    If one element fails, the remaining elements can take over. Hence, a single super
  prefs: []
  type: TYPE_NORMAL
- en: computer typically has a lower reliability than a distributed system.
  prefs: []
  type: TYPE_NORMAL
- en: '2Tanenbaum, Andrew S., and Maarten Van. Steen. *Distributed systems: principles
    and paradigms*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Upper Saddle River, NJ: Pearson Prentice Hall, 2007\.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Blockchain Basics***'
  prefs: []
  type: TYPE_NORMAL
- en: '13'
  prefs: []
  type: TYPE_NORMAL
- en: Ability to Grow Naturally
  prefs: []
  type: TYPE_NORMAL
- en: The computing power of a distributed system is the result of the aggregated
  prefs: []
  type: TYPE_NORMAL
- en: computing power of its constituents. One can increase the computing power
  prefs: []
  type: TYPE_NORMAL
- en: of the whole system by connecting additional computers with the system. As a
  prefs: []
  type: TYPE_NORMAL
- en: result, the computing power of the whole system can be increased incremen-
  prefs: []
  type: TYPE_NORMAL
- en: tally on a fine-grained scale. This supports the way in which the demand for
  prefs: []
  type: TYPE_NORMAL
- en: computing power increases in many organizations. The incremental growth of
  prefs: []
  type: TYPE_NORMAL
- en: distributed systems is in contrast to the growth of the computing power of
  prefs: []
  type: TYPE_NORMAL
- en: individual computers. Individual computers provide identical power until they
  prefs: []
  type: TYPE_NORMAL
- en: are replaced by a more powerful computer. This results in a discontinuous
  prefs: []
  type: TYPE_NORMAL
- en: growth of computing power, which is only rarely appreciated by the consum-
  prefs: []
  type: TYPE_NORMAL
- en: ers of computing services.
  prefs: []
  type: TYPE_NORMAL
- en: The Disadvantages of Distributed Systems
  prefs: []
  type: TYPE_NORMAL
- en: 'The disadvantages of distributed systems compared to single computers are:'
  prefs: []
  type: TYPE_NORMAL
- en: • Coordination overhead
  prefs: []
  type: TYPE_NORMAL
- en: • Communication overhead
  prefs: []
  type: TYPE_NORMAL
- en: • Dependency on networks
  prefs: []
  type: TYPE_NORMAL
- en: • Higher program complexity
  prefs: []
  type: TYPE_NORMAL
- en: • Security issues
  prefs: []
  type: TYPE_NORMAL
- en: Coordination Overhead
  prefs: []
  type: TYPE_NORMAL
- en: Distributed systems do not have central entities that coordinate their mem-
  prefs: []
  type: TYPE_NORMAL
- en: bers. Hence, the coordination must be done by the members of the system
  prefs: []
  type: TYPE_NORMAL
- en: themselves. Coordinating work among coworkers in a distributed system is
  prefs: []
  type: TYPE_NORMAL
- en: challenging and costs effort and computing power that cannot be spent on the
  prefs: []
  type: TYPE_NORMAL
- en: genuine computing task, hence, the term coordination overhead.
  prefs: []
  type: TYPE_NORMAL
- en: Communication Overhead
  prefs: []
  type: TYPE_NORMAL
- en: Coordination requires communication. Hence, the computers that form
  prefs: []
  type: TYPE_NORMAL
- en: a distributed system have to communicate with one another. This requires
  prefs: []
  type: TYPE_NORMAL
- en: the existence of a communication protocol and the sending, receiving, and
  prefs: []
  type: TYPE_NORMAL
- en: '14'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 2 | Seeing the Big Picture***'
  prefs: []
  type: TYPE_NORMAL
- en: processing of messages, which in turn costs effort and computing power that
  prefs: []
  type: TYPE_NORMAL
- en: cannot be spend on the genuine computing task, hence, the term communica-
  prefs: []
  type: TYPE_NORMAL
- en: tion overhead.
  prefs: []
  type: TYPE_NORMAL
- en: Dependencies on Networks
  prefs: []
  type: TYPE_NORMAL
- en: Any kind of communication requires a medium. The medium is responsible
  prefs: []
  type: TYPE_NORMAL
- en: for transferring information between the entities communicating with one
  prefs: []
  type: TYPE_NORMAL
- en: another. Computers in distributed systems communicate by means of mes-
  prefs: []
  type: TYPE_NORMAL
- en: sages passed through a network. Networks have their own challenges and
  prefs: []
  type: TYPE_NORMAL
- en: adversities, which in turn impact the communication and coordination among
  prefs: []
  type: TYPE_NORMAL
- en: computers that form a distributed system. However, without any network,
  prefs: []
  type: TYPE_NORMAL
- en: there will be no distributed system, no communication, and therefore no
  prefs: []
  type: TYPE_NORMAL
- en: coordination among the nodes, thus the dependency on networks.
  prefs: []
  type: TYPE_NORMAL
- en: Higher Program Complexity
  prefs: []
  type: TYPE_NORMAL
- en: Solving a computation problem involves writing programs and software. Due
  prefs: []
  type: TYPE_NORMAL
- en: to the disadvantages mentioned previously, any software in a distributed sys-
  prefs: []
  type: TYPE_NORMAL
- en: tem has to solve additional problems such as coordination, communication,
  prefs: []
  type: TYPE_NORMAL
- en: and utilizing of networks. This increases the complexity of the software.
  prefs: []
  type: TYPE_NORMAL
- en: Security Issues
  prefs: []
  type: TYPE_NORMAL
- en: Communication over a network means sending and sharing data that are criti-
  prefs: []
  type: TYPE_NORMAL
- en: cal for the genuine computing task. However, sending information through a
  prefs: []
  type: TYPE_NORMAL
- en: network implies security concerns as untrustworthy entities may misuse the
  prefs: []
  type: TYPE_NORMAL
- en: network in order to access and exploit information. Hence, any distributed
  prefs: []
  type: TYPE_NORMAL
- en: system has to address security concerns. The less restricted the access to the
  prefs: []
  type: TYPE_NORMAL
- en: network over which the distributed nodes communicate is, the higher the
  prefs: []
  type: TYPE_NORMAL
- en: security concerns are for the distributed system.
  prefs: []
  type: TYPE_NORMAL
- en: Distributed Peer-to-Peer Systems
  prefs: []
  type: TYPE_NORMAL
- en: Peer-to-peer networks are a special kind of distributed systems. They consist
  prefs: []
  type: TYPE_NORMAL
- en: of individual computers (also called nodes), which make their computational
  prefs: []
  type: TYPE_NORMAL
- en: resources (e.g., processing power, storage capacity, data or network band-
  prefs: []
  type: TYPE_NORMAL
- en: width) directly available to all other members of the network without having
  prefs: []
  type: TYPE_NORMAL
- en: '![](index-26_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '***Blockchain Basics***'
  prefs: []
  type: TYPE_NORMAL
- en: '15'
  prefs: []
  type: TYPE_NORMAL
- en: any central point of coordination. The nodes in the network are equal con-
  prefs: []
  type: TYPE_NORMAL
- en: cerning their rights and roles in the system. Furthermore, all of them are both
  prefs: []
  type: TYPE_NORMAL
- en: suppliers and consumers of resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Peer-to-peer systems have interesting applications such as file sharing, content
    distribution, and privacy protection. Most of these applications utilize a simple
    but powerful idea: turning the computers of the users into nodes that make'
  prefs: []
  type: TYPE_NORMAL
- en: up the whole distributed system. As a result, the more users or customers use
  prefs: []
  type: TYPE_NORMAL
- en: the software, the larger and more powerful the system becomes. This idea, its
  prefs: []
  type: TYPE_NORMAL
- en: consequences, and it challenges are discussed in the following steps.
  prefs: []
  type: TYPE_NORMAL
- en: Mixing Centralized and Distributed Systems
  prefs: []
  type: TYPE_NORMAL
- en: Centralized and distributed systems are architectural antipodes. Technical
  prefs: []
  type: TYPE_NORMAL
- en: antipodes have always inspired engineers to create hybrid systems that inherit
  prefs: []
  type: TYPE_NORMAL
- en: the strength of their parents. Centralized and distributed systems are no
  prefs: []
  type: TYPE_NORMAL
- en: exception to this. There are two archetypical ways of combining these antipo-
  prefs: []
  type: TYPE_NORMAL
- en: des, and they need to be understood since they will become important when
  prefs: []
  type: TYPE_NORMAL
- en: learning about blockchain applications in the real world. They are centrality
  prefs: []
  type: TYPE_NORMAL
- en: within a distributed system and the distributed system inside the center.
  prefs: []
  type: TYPE_NORMAL
- en: The graphic on the left-hand side of Figure [2-2](index_split_000.html#26) illustrates
    an architecture that establishes a central component within a distributed system.
    On first glance,
  prefs: []
  type: TYPE_NORMAL
- en: the components seem to form a distributed system. However, all of the circles
  prefs: []
  type: TYPE_NORMAL
- en: are connected with the larger circle located in the middle. Hence, such a sys-
  prefs: []
  type: TYPE_NORMAL
- en: tem only appears to be distributed on a superficial view, but it is a centralized
    system in reality.
  prefs: []
  type: TYPE_NORMAL
- en: '**Figure 2-2\.** Mixing distributed with centralized architecture'
  prefs: []
  type: TYPE_NORMAL
- en: '16'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 2 | Seeing the Big Picture***'
  prefs: []
  type: TYPE_NORMAL
- en: The graph on the right-hand side of Figure [2-2](index_split_000.html#26) illustrates
    the opposite approach. Such a system appears to be a centralized system on first
    glance,
  prefs: []
  type: TYPE_NORMAL
- en: because all the circles in the periphery only have one direct connection to
    a
  prefs: []
  type: TYPE_NORMAL
- en: large central component. However, the central component contains a distrib-
  prefs: []
  type: TYPE_NORMAL
- en: uted system inside. The components in the periphery may not even be aware
  prefs: []
  type: TYPE_NORMAL
- en: of the distributed system that lives within the central component.
  prefs: []
  type: TYPE_NORMAL
- en: What these two approaches have in common is that it is hard to determine
  prefs: []
  type: TYPE_NORMAL
- en: their true nature. Are they distributed or centralized? It may not be necessary
  prefs: []
  type: TYPE_NORMAL
- en: to give these architectures unique names. However, it is important to point
  prefs: []
  type: TYPE_NORMAL
- en: out their dual nature. This is particularly important because it may not be
    easy to spot the centrality or the distributed nature within them. I will come
    back
  prefs: []
  type: TYPE_NORMAL
- en: to this point later when I discuss the way the blockchain is commercialized.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying Distributed Systems
  prefs: []
  type: TYPE_NORMAL
- en: The emergence of hybrid architectures makes it hard to identify distributed
  prefs: []
  type: TYPE_NORMAL
- en: systems clearly. Formulating a generally accepted definition of distributed
    sys-
  prefs: []
  type: TYPE_NORMAL
- en: tems is beyond the scope of this book. However, for the course of this book
    it
  prefs: []
  type: TYPE_NORMAL
- en: is important to have an idea of what a distributed system is and how it differs
  prefs: []
  type: TYPE_NORMAL
- en: from other software systems. If you are in doubt whether or not a system
  prefs: []
  type: TYPE_NORMAL
- en: is distributed, look for a single component (e.g., a database, a name or user
  prefs: []
  type: TYPE_NORMAL
- en: registry, a login or logoff component, or an emergency switch-off button) that
  prefs: []
  type: TYPE_NORMAL
- en: could terminate the whole system. If you find such a component, the system
  prefs: []
  type: TYPE_NORMAL
- en: under consideration is not distributed.
  prefs: []
  type: TYPE_NORMAL
- en: ■ **Note** If one single component exists, e.g., a single switch-off button
    that can bring down the whole system, then the system is not distributed.
  prefs: []
  type: TYPE_NORMAL
- en: The Purpose of the Blockchain
  prefs: []
  type: TYPE_NORMAL
- en: When designing a software system, one can choose which architectural style
  prefs: []
  type: TYPE_NORMAL
- en: will be used, similar to choosing an engine for a car. The architectural deci-
  prefs: []
  type: TYPE_NORMAL
- en: sion can be done independently from the functional aspects of the application
  prefs: []
  type: TYPE_NORMAL
- en: layer. As a result, one can create distributed as well as centralized systems
  prefs: []
  type: TYPE_NORMAL
- en: with identical functionality on the application layer. The architecture is only
    a means to an end when it comes to implementing a system. Hence, a payment
  prefs: []
  type: TYPE_NORMAL
- en: system, as was proposed in Table [2-1,](index_split_000.html#21) can be implemented
    as a distributed or centralized system.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the two architectural concepts has its own advantages and disad-
  prefs: []
  type: TYPE_NORMAL
- en: vantages and their own specific way of doing things. Choosing a specific
  prefs: []
  type: TYPE_NORMAL
- en: architecture has consequences on how you will achieve the functional and
  prefs: []
  type: TYPE_NORMAL
- en: '***Blockchain Basics***'
  prefs: []
  type: TYPE_NORMAL
- en: '17'
  prefs: []
  type: TYPE_NORMAL
- en: nonfunctional aspects of a system. In particular, both architectural concepts
  prefs: []
  type: TYPE_NORMAL
- en: have very different approaches to ensure integrity. And this is the point where
  prefs: []
  type: TYPE_NORMAL
- en: the blockchain enters the picture. The blockchain is a tool for achieving integ-
  prefs: []
  type: TYPE_NORMAL
- en: rity in distributed software systems. Hence, it can be seen as a tool to achieve
    a nonfunctional aspect of the implementation layer.
  prefs: []
  type: TYPE_NORMAL
- en: ■ **Note** The purpose of the blockchain is to achieve and maintain integrity
    in distributed systems.
  prefs: []
  type: TYPE_NORMAL
- en: Outlook
  prefs: []
  type: TYPE_NORMAL
- en: Achieving integrity in a distributed system is very technical and it may sound
    a bit boring. However, the question that makes this achievement exciting for many
  prefs: []
  type: TYPE_NORMAL
- en: people depends on what the distributed system will do and what kind of cen-
  prefs: []
  type: TYPE_NORMAL
- en: tralized system it replaces. The next step explains how a peer-to-peer system
  prefs: []
  type: TYPE_NORMAL
- en: has changed our world and why the blockchain as a tool for achieving integrity
  prefs: []
  type: TYPE_NORMAL
- en: in distributed software systems has the potential to change the world too.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs: []
  type: TYPE_NORMAL
- en: • The architecture of a software system determines how
  prefs: []
  type: TYPE_NORMAL
- en: its components are organized and related to one another.
  prefs: []
  type: TYPE_NORMAL
- en: • Centralized and distributed software architectures can
  prefs: []
  type: TYPE_NORMAL
- en: be seen as antipodes.
  prefs: []
  type: TYPE_NORMAL
- en: • A distributed system consists of a number of indepen-
  prefs: []
  type: TYPE_NORMAL
- en: dent computers that cooperate with one another by
  prefs: []
  type: TYPE_NORMAL
- en: using a communication medium in order to achieve a
  prefs: []
  type: TYPE_NORMAL
- en: specific objective without having any centralized element
  prefs: []
  type: TYPE_NORMAL
- en: of control or coordination.
  prefs: []
  type: TYPE_NORMAL
- en: • As a rule of thumb, one can state that as soon as a system
  prefs: []
  type: TYPE_NORMAL
- en: has a single component that could bring down the whole
  prefs: []
  type: TYPE_NORMAL
- en: system it is not distributed, regardless of how complex its
  prefs: []
  type: TYPE_NORMAL
- en: architecture looks.
  prefs: []
  type: TYPE_NORMAL
- en: • The blockchain is part of the implementation layer of a
  prefs: []
  type: TYPE_NORMAL
- en: distributed software system.
  prefs: []
  type: TYPE_NORMAL
- en: • The purpose of the blockchain is to ensure a specific
  prefs: []
  type: TYPE_NORMAL
- en: nonfunctional aspect of a distributed software system
  prefs: []
  type: TYPE_NORMAL
- en: 'that is: achieving and maintaining its integrity.'
  prefs: []
  type: TYPE_NORMAL
- en: '**S T E P**'
  prefs: []
  type: TYPE_NORMAL
- en: '3'
  prefs: []
  type: TYPE_NORMAL
- en: Recognizing the
  prefs: []
  type: TYPE_NORMAL
- en: Potential
  prefs: []
  type: TYPE_NORMAL
- en: How peer-to-peer systems may
  prefs: []
  type: TYPE_NORMAL
- en: change the world
  prefs: []
  type: TYPE_NORMAL
- en: This step deepens our understanding of the purpose of the blockchain by con-
  prefs: []
  type: TYPE_NORMAL
- en: 'sidering a specific kind of distributed system: the peer-to-peer system. As
    a'
  prefs: []
  type: TYPE_NORMAL
- en: result, this step will help you understanding why there is so much excitement
  prefs: []
  type: TYPE_NORMAL
- en: about the blockchain among technologists and business professionals alike.
  prefs: []
  type: TYPE_NORMAL
- en: This step also points out the major area of application in which the blockchain
  prefs: []
  type: TYPE_NORMAL
- en: is expected to provide the most value. Additionally, this step discusses some
  prefs: []
  type: TYPE_NORMAL
- en: consequences of peer-to-peer systems in the real world.
  prefs: []
  type: TYPE_NORMAL
- en: The Metaphor
  prefs: []
  type: TYPE_NORMAL
- en: Can you remember the last time you bought a CD for yourself in a music
  prefs: []
  type: TYPE_NORMAL
- en: store or in a department store? Most people have not bought actual CDs for
  prefs: []
  type: TYPE_NORMAL
- en: a long time now, because the music industry went through a dramatic change.
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, people download individual songs from music portals, share mp3
  prefs: []
  type: TYPE_NORMAL
- en: files among friends, or use music streams on their mobile devices instead of
  prefs: []
  type: TYPE_NORMAL
- en: buying CDs. This change started with the emergence of a piece of software
  prefs: []
  type: TYPE_NORMAL
- en: © Daniel Drescher 2017
  prefs: []
  type: TYPE_NORMAL
- en: D. Drescher, *Blockchain Basics*, DOI 10.1007/978-1-4842-2604-9_3
  prefs: []
  type: TYPE_NORMAL
- en: '20'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 3 | Recognizing the Potential***'
  prefs: []
  type: TYPE_NORMAL
- en: that allowed people to share their music files with one another. But what was
  prefs: []
  type: TYPE_NORMAL
- en: so special about that software? This is what one of its inventors had to say
  prefs: []
  type: TYPE_NORMAL
- en: 'about this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*This system, what’s most interesting about it is, you’re interacting with*'
  prefs: []
  type: TYPE_NORMAL
- en: '*peers, you’re exchanging information with a person down the street.*'
  prefs: []
  type: TYPE_NORMAL
- en: —Shawn Fanning, cofounder of Napster
  prefs: []
  type: TYPE_NORMAL
- en: What Fanning and his coworkers invented was a peer-to-peer system for
  prefs: []
  type: TYPE_NORMAL
- en: sharing music. Back in the late 1990s, this software ushered in a new era for
  prefs: []
  type: TYPE_NORMAL
- en: the established business model of the music industry. This step explains what
  prefs: []
  type: TYPE_NORMAL
- en: the emergence of Napster, the decline of CD sales, and the dramatic changes
  prefs: []
  type: TYPE_NORMAL
- en: of the music industry have to do with the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: How a Peer-to-Peer System Changed a Whole
  prefs: []
  type: TYPE_NORMAL
- en: Industry
  prefs: []
  type: TYPE_NORMAL
- en: 'The music industry has worked for a long time in the following way: musi-'
  prefs: []
  type: TYPE_NORMAL
- en: cians made contracts with studios, which recorded the songs, produced and
  prefs: []
  type: TYPE_NORMAL
- en: marketed the music records on a variety of media (e.g., vinyl, tape, or CD),
  prefs: []
  type: TYPE_NORMAL
- en: which in turn were sold to the customers via a variety of distribution chan-
  prefs: []
  type: TYPE_NORMAL
- en: nels, including department stores and specialized shops. The studios actually
  prefs: []
  type: TYPE_NORMAL
- en: worked as intermediaries between musicians and people who enjoy listening
  prefs: []
  type: TYPE_NORMAL
- en: to music. Music studios could maintain their role as intermediaries due to
  prefs: []
  type: TYPE_NORMAL
- en: their exclusive knowledge and skills in producing, marketing, and distributing
  prefs: []
  type: TYPE_NORMAL
- en: records. However, in the first decade of the 2000s, the environment in which
  prefs: []
  type: TYPE_NORMAL
- en: the music studios operated changed dramatically.
  prefs: []
  type: TYPE_NORMAL
- en: The digitalization of music, the availability of recording equipment at afford-
  prefs: []
  type: TYPE_NORMAL
- en: able prices, the growing spread of privately used PCs, and the emergence of
  prefs: []
  type: TYPE_NORMAL
- en: the Internet made music studios dispensable. The three functions of music
  prefs: []
  type: TYPE_NORMAL
- en: studios—producing, marketing, and distributing records—could be done by
  prefs: []
  type: TYPE_NORMAL
- en: the artists and the consumers themselves. Napster played a major role in the
  prefs: []
  type: TYPE_NORMAL
- en: replacement of the music studios as intermediaries. With Napster, people no
  prefs: []
  type: TYPE_NORMAL
- en: longer relied on the music studios to get the latest hits. It was possible to
  prefs: []
  type: TYPE_NORMAL
- en: share individual music files with people all over the world without the need
    to
  prefs: []
  type: TYPE_NORMAL
- en: buy any CDs. The peer-to-peer approach of Napster, actually being a kind of
  prefs: []
  type: TYPE_NORMAL
- en: '***Blockchain Basics***'
  prefs: []
  type: TYPE_NORMAL
- en: '21'
  prefs: []
  type: TYPE_NORMAL
- en: a digital sharing bazaar for mp3 files, gave consumers access to a wider range
  prefs: []
  type: TYPE_NORMAL
- en: of music than ever before, making the music studios partly dispensable and
  prefs: []
  type: TYPE_NORMAL
- en: '[causing them significant losses.1](index_split_000.html#31)'
  prefs: []
  type: TYPE_NORMAL
- en: The Potential of Peer-to-Peer Systems
  prefs: []
  type: TYPE_NORMAL
- en: The Napster case taught us that peer-to-peer systems have the potential
  prefs: []
  type: TYPE_NORMAL
- en: 'to reshape whole industries based on a simple idea: replacing the middle-'
  prefs: []
  type: TYPE_NORMAL
- en: man with peer-to-peer interactions. In the case of the music industry, the
  prefs: []
  type: TYPE_NORMAL
- en: traditional studios and their marketing and distribution channels that acted
    as
  prefs: []
  type: TYPE_NORMAL
- en: the middlemen between artists and consumers have been replaced by peer-
  prefs: []
  type: TYPE_NORMAL
- en: to-peer file sharing systems. The major characteristics that made the music
  prefs: []
  type: TYPE_NORMAL
- en: industry so vulnerable to being replaced by peer-to-peer systems are the
  prefs: []
  type: TYPE_NORMAL
- en: immaterial nature of music and the low costs of copying and transferring data.
  prefs: []
  type: TYPE_NORMAL
- en: The power of peer-to-peer systems is not restricted to the music industry.
  prefs: []
  type: TYPE_NORMAL
- en: Each industry that mainly acts as a middleman between producers and custom-
  prefs: []
  type: TYPE_NORMAL
- en: ers of immaterial or digital goods and services is vulnerable to being replaced
  prefs: []
  type: TYPE_NORMAL
- en: by a peer-to-peer system. This statement may sound a bit abstract, but you
  prefs: []
  type: TYPE_NORMAL
- en: may discover many middlemen for immaterial and digital goods and services
  prefs: []
  type: TYPE_NORMAL
- en: 'around you once you recognize the largest of them all: the financial industry.'
  prefs: []
  type: TYPE_NORMAL
- en: What is it that you have in your bank account or on your credit or debit card?
  prefs: []
  type: TYPE_NORMAL
- en: Is it real y money? The money you own has been turned into immaterial bits
  prefs: []
  type: TYPE_NORMAL
- en: and bytes long ago. Only a small amount of actual money exists as physical
  prefs: []
  type: TYPE_NORMAL
- en: banknotes and coins. The vast majority of the world’s money and assets exists
  prefs: []
  type: TYPE_NORMAL
- en: as immaterial bits and bytes in the centralized information technology systems
  prefs: []
  type: TYPE_NORMAL
- en: of the financial industry. Banks and many other players of the financial industry
    are just middlemen between producers and consumers of bits and bytes that
  prefs: []
  type: TYPE_NORMAL
- en: make up our money and our wealth. The act of borrowing, lending, or trans-
  prefs: []
  type: TYPE_NORMAL
- en: ferring money from one account to another is just the transfer of an immate-
  prefs: []
  type: TYPE_NORMAL
- en: rial good operated by middlemen, also called intermediaries. It is amazing how
  prefs: []
  type: TYPE_NORMAL
- en: many middlemen are involved in seemingly simple transactions (e.g., transfer-
  prefs: []
  type: TYPE_NORMAL
- en: ring money from one bank account to another one in a different country
  prefs: []
  type: TYPE_NORMAL
- en: involves up to five middlemen, which all need their processing time and impose
  prefs: []
  type: TYPE_NORMAL
- en: their own fees). As a result, something as simple as transferring an amount
    of
  prefs: []
  type: TYPE_NORMAL
- en: money from one bank account to another in a different country involves a long
  prefs: []
  type: TYPE_NORMAL
- en: '1Hong, Seung-Hyun. The effect of Napster on recorded music sales: evidence
    from the consumer expenditure survey. *Stanford Institute for Economic Policy
    Research Working Paper* (2004): 3–18; Leyshon, Andrew. Scary monsters? Software
    formats, peer-to-peer networks, and the spectre of the gift. *Environment and
    Planning D: Society and Space* 21.5 (2003): 533–558\.'
  prefs: []
  type: TYPE_NORMAL
- en: '22'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 3 | Recognizing the Potential***'
  prefs: []
  type: TYPE_NORMAL
- en: processing time and incurs high transactions costs. In a peer-to-peer system,
  prefs: []
  type: TYPE_NORMAL
- en: the same transfer would be much simpler and it would take less time and costs
  prefs: []
  type: TYPE_NORMAL
- en: 'since it could be processed as what it is: a transfer of bits and bytes between'
  prefs: []
  type: TYPE_NORMAL
- en: two peers or nodes, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of peer-to-peer systems over centralized systems is that direct
  prefs: []
  type: TYPE_NORMAL
- en: interactions occur between contractual partners instead of indirect interac-
  prefs: []
  type: TYPE_NORMAL
- en: tions through a middleman, hence, there is less processing time and lower
  prefs: []
  type: TYPE_NORMAL
- en: costs.
  prefs: []
  type: TYPE_NORMAL
- en: The advantages of peer-to-peer systems are not restricted to money trans-
  prefs: []
  type: TYPE_NORMAL
- en: fer. Every industry that mainly acts as a middleman between producers and
  prefs: []
  type: TYPE_NORMAL
- en: customers of immaterial or digital goods and services is vulnerable to being
  prefs: []
  type: TYPE_NORMAL
- en: replaced by a peer-to-peer system. As digitalization continues, more and more
  prefs: []
  type: TYPE_NORMAL
- en: items of everyday life and an increasing amount of goods and services will
  prefs: []
  type: TYPE_NORMAL
- en: become immaterial and will benefit from the efficiencies of peer-to-peer sys-
  prefs: []
  type: TYPE_NORMAL
- en: tems. Advocates of peer-to-peer systems argue that almost all aspects of our
  prefs: []
  type: TYPE_NORMAL
- en: life will be affected by the emergence of digitalization and peer-to-peer net-
  prefs: []
  type: TYPE_NORMAL
- en: works such as payments, money saving, loans, insurance, as well as issuance
  prefs: []
  type: TYPE_NORMAL
- en: and validation of birth certificates, driving licenses, passports, identity
    cards, educational certificates, and patents and labor contracts. Most of them
    already
  prefs: []
  type: TYPE_NORMAL
- en: exist in digital form in centralized systems run by institutions that are nothing
    other than a middleman between natural suppliers and customers.
  prefs: []
  type: TYPE_NORMAL
- en: ■ **Note** Replacing the middleman is also called disintermediation. It is considered
    a serious threat to many business and companies that mainly act as intermediaries
    between different groups of people, such as buyers and seller, borrowers and lenders,
    or producers and consumers.
  prefs: []
  type: TYPE_NORMAL
- en: Terminology and the Link to the Blockchain
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have learned about the potential of peer-to-peer systems, it is
  prefs: []
  type: TYPE_NORMAL
- en: necessary to clarify the terminology of the problem domain and to explain
  prefs: []
  type: TYPE_NORMAL
- en: its relation to the blockchain. In particular, the following points need to
    be
  prefs: []
  type: TYPE_NORMAL
- en: 'discussed:'
  prefs: []
  type: TYPE_NORMAL
- en: • The definition of a peer-to-peer system
  prefs: []
  type: TYPE_NORMAL
- en: • Architecture of peer-to-peer systems
  prefs: []
  type: TYPE_NORMAL
- en: • The link between peer-to-peer systems and the blockchain
  prefs: []
  type: TYPE_NORMAL
- en: '***Blockchain Basics***'
  prefs: []
  type: TYPE_NORMAL
- en: '23'
  prefs: []
  type: TYPE_NORMAL
- en: The Definition of a Peer-to-Peer System
  prefs: []
  type: TYPE_NORMAL
- en: Peer-to-peer systems are distributed software systems that consist of nodes
  prefs: []
  type: TYPE_NORMAL
- en: (individual computers), which make their computational resources (e.g., pro-
  prefs: []
  type: TYPE_NORMAL
- en: cessing power, storage capacity, or information distribution) directly available
    to another. When joining a peer-to-peer system, users turn their computers
  prefs: []
  type: TYPE_NORMAL
- en: into nodes of the system that are equal concerning their rights and roles.
  prefs: []
  type: TYPE_NORMAL
- en: Although users may differ with respect to the resources they contribute,
  prefs: []
  type: TYPE_NORMAL
- en: all the nodes in the system have the same functional capability and responsi-
  prefs: []
  type: TYPE_NORMAL
- en: bility. Hence, the computers of all users are both suppliers and consumers of
  prefs: []
  type: TYPE_NORMAL
- en: resour[ces.2](index_split_000.html#33)
  prefs: []
  type: TYPE_NORMAL
- en: For example, in a peer-to-peer file sharing system, the individual files are
  prefs: []
  type: TYPE_NORMAL
- en: stored on the users’ machines. When someone wants to download a file in
  prefs: []
  type: TYPE_NORMAL
- en: such a system, he or she is downloading it from another person’s machine,
  prefs: []
  type: TYPE_NORMAL
- en: which could be the next door neighbor or someone located halfway around
  prefs: []
  type: TYPE_NORMAL
- en: the world.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture of Peer-to-Peer Systems
  prefs: []
  type: TYPE_NORMAL
- en: Peer-to-peer systems are distributed computer systems by construction since
  prefs: []
  type: TYPE_NORMAL
- en: they are made of individual nodes that share their computational resources
  prefs: []
  type: TYPE_NORMAL
- en: among others. However, there are also peer-to-peer systems that still utilize
  prefs: []
  type: TYPE_NORMAL
- en: elements of centralization. Centralized peer-to-peer systems maintain central
  prefs: []
  type: TYPE_NORMAL
- en: nodes to facilitate the interaction between peers, to maintain directories that
  prefs: []
  type: TYPE_NORMAL
- en: describe the services offered by the peer nodes, or to perform look-ups and
  prefs: []
  type: TYPE_NORMAL
- en: '[identification of the nodes.3](index_split_000.html#33) Centralized peer-to-peer
    systems typically utilize a hybrid architecture, such as the one that was illustrated
    on the left-hand side of Figure [2-2](http://dx.doi.org/10.1007/978-1-4842-2604-9_2#fig2).
    Such architecture allows combining the advantages of centralized and distributed
    computing. On the other hand, purely distributed peer-'
  prefs: []
  type: TYPE_NORMAL
- en: to-peer systems do not have any element of central control or coordination.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, all nodes in those systems perform the same tasks, acting both as
  prefs: []
  type: TYPE_NORMAL
- en: providers and consumers of resources and services.
  prefs: []
  type: TYPE_NORMAL
- en: An example of a centralized peer-to-peer system is Napster, which maintained
  prefs: []
  type: TYPE_NORMAL
- en: a central database of all nodes connected with the system and the songs
  prefs: []
  type: TYPE_NORMAL
- en: available on these nodes.
  prefs: []
  type: TYPE_NORMAL
- en: '2Tanenbaum, Andrew S., and Maarten Van Steen. *Distributed systems: principles
    and paradigms*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Upper Saddle River, NJ: Pearson Prentice Hall, 2007\.'
  prefs: []
  type: TYPE_NORMAL
- en: '3Eberspächer, Jörg, and Rüdiger Schollmeier. First and second generation of
    peer-to-peer systems. In *Peer-to-peer systems and applications*. Berlin Heidelberg:
    Springer Verlag, 2005: 35–56\.'
  prefs: []
  type: TYPE_NORMAL
- en: '24'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 3 | Recognizing the Potential***'
  prefs: []
  type: TYPE_NORMAL
- en: The Link Between Peer-to-Peer Systems and the
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain
  prefs: []
  type: TYPE_NORMAL
- en: As discussed in S[tep 2,](http://dx.doi.org/10.1007/978-1-4842-2604-9_2) the
    blockchain can be considered a tool for achieving and maintaining integrity in
    distributed systems. Purely distributed peer-to-peer systems may use the blockchain
    in order to achieve and to maintain system
  prefs: []
  type: TYPE_NORMAL
- en: integrity. Hence, the link between purely distributed peer-to-peer systems
  prefs: []
  type: TYPE_NORMAL
- en: and the blockchain is its usage for achieving and maintaining integrity in purely
    distributed systems.
  prefs: []
  type: TYPE_NORMAL
- en: The Potential of the Blockchain
  prefs: []
  type: TYPE_NORMAL
- en: The relation between purely distributed peer-to-peer systems to the blockchain
  prefs: []
  type: TYPE_NORMAL
- en: is that the former uses the latter as a tool to achieve and maintain integrity.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, the argument that explains the excitement about and the potential of
  prefs: []
  type: TYPE_NORMAL
- en: 'the blockchain is: Purely distributed peer-to-peer systems have a huge com-'
  prefs: []
  type: TYPE_NORMAL
- en: mercial potential as they can replace centralized systems and change whole
  prefs: []
  type: TYPE_NORMAL
- en: industries due to disintermediation. Since purely distributed peer-to-peer
  prefs: []
  type: TYPE_NORMAL
- en: systems may use the blockchain for achieving and maintaining integrity, the
  prefs: []
  type: TYPE_NORMAL
- en: blockchain becomes important as well. However, the major fact that excites
  prefs: []
  type: TYPE_NORMAL
- en: people is the disintermediation. The blockchain is only a means to an end that
  prefs: []
  type: TYPE_NORMAL
- en: helps to achieve that.
  prefs: []
  type: TYPE_NORMAL
- en: ■ **Note** The excitement about the blockchain is based on its ability to serve
    as a tool for achieving and maintaining integrity in purely distributed peer-to-peer
    systems that have the potential to change whole industries due to disintermediation.
  prefs: []
  type: TYPE_NORMAL
- en: Outlook
  prefs: []
  type: TYPE_NORMAL
- en: This step explained what peer-to-peer systems are and highlighted their
  prefs: []
  type: TYPE_NORMAL
- en: potential to change whole industries due to disintermediation. Additionally,
  prefs: []
  type: TYPE_NORMAL
- en: this step pointed out that the excitement about the blockchain is due to its
  prefs: []
  type: TYPE_NORMAL
- en: ability to serve purely distributed peer-to-peer systems to fulfill their tasks.
  prefs: []
  type: TYPE_NORMAL
- en: However, the question of why achieving and maintaining integrity in distrib-
  prefs: []
  type: TYPE_NORMAL
- en: uted systems is so important has not been answered yet. The next step will
  prefs: []
  type: TYPE_NORMAL
- en: discuss that question in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: '***Blockchain Basics***'
  prefs: []
  type: TYPE_NORMAL
- en: '25'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs: []
  type: TYPE_NORMAL
- en: • Peer-to-peer systems consist of computers, which make
  prefs: []
  type: TYPE_NORMAL
- en: their computational resources directly available to
  prefs: []
  type: TYPE_NORMAL
- en: another.
  prefs: []
  type: TYPE_NORMAL
- en: • The advantage of peer-to-peer systems is their ability to
  prefs: []
  type: TYPE_NORMAL
- en: allow users to interact directly with one another instead
  prefs: []
  type: TYPE_NORMAL
- en: of interacting indirectly through middlemen.
  prefs: []
  type: TYPE_NORMAL
- en: • Replacing middlemen with peer-to-peer systems increases
  prefs: []
  type: TYPE_NORMAL
- en: processing speed and reduces costs.
  prefs: []
  type: TYPE_NORMAL
- en: • Peer-to-peer systems can be centralized or purely
  prefs: []
  type: TYPE_NORMAL
- en: distributed.
  prefs: []
  type: TYPE_NORMAL
- en: • Purely distributed peer-to-peer systems form a network
  prefs: []
  type: TYPE_NORMAL
- en: of equal members that interact directly with one another
  prefs: []
  type: TYPE_NORMAL
- en: without having any central coordination.
  prefs: []
  type: TYPE_NORMAL
- en: • Napster demonstrated the power of peer-to-peer sys-
  prefs: []
  type: TYPE_NORMAL
- en: tems as its file sharing system ushered in a new era for
  prefs: []
  type: TYPE_NORMAL
- en: the business model of the traditional music industry,
  prefs: []
  type: TYPE_NORMAL
- en: which mainly acted as a middleman between artists and
  prefs: []
  type: TYPE_NORMAL
- en: consumers.
  prefs: []
  type: TYPE_NORMAL
- en: • Every industry that mainly acts as a middleman between
  prefs: []
  type: TYPE_NORMAL
- en: producers and customers of immaterial or digital goods
  prefs: []
  type: TYPE_NORMAL
- en: and services is vulnerable to being replaced by peer-to-
  prefs: []
  type: TYPE_NORMAL
- en: peer systems.
  prefs: []
  type: TYPE_NORMAL
- en: • A huge part of our financial system is simple interme-
  prefs: []
  type: TYPE_NORMAL
- en: diation between suppliers and consumers of money,
  prefs: []
  type: TYPE_NORMAL
- en: which mainly exists as digital or immaterial good. Hence,
  prefs: []
  type: TYPE_NORMAL
- en: digitalization and peer-to-peer systems may reshape the
  prefs: []
  type: TYPE_NORMAL
- en: financial industry in a similar fashion as Napster reshaped
  prefs: []
  type: TYPE_NORMAL
- en: the music industry.
  prefs: []
  type: TYPE_NORMAL
- en: • As digitalization continues, more aspects of our everyday
  prefs: []
  type: TYPE_NORMAL
- en: lives and an increasing amount of goods and services will
  prefs: []
  type: TYPE_NORMAL
- en: become immaterial and will benefit from the advantages
  prefs: []
  type: TYPE_NORMAL
- en: of peer-to-peer systems.
  prefs: []
  type: TYPE_NORMAL
- en: • The excitement about the blockchain is based on its
  prefs: []
  type: TYPE_NORMAL
- en: ability to serve as a tool for achieving and maintaining
  prefs: []
  type: TYPE_NORMAL
- en: integrity in purely distributed peer-to-peer systems that
  prefs: []
  type: TYPE_NORMAL
- en: have the potential to change whole industries due to
  prefs: []
  type: TYPE_NORMAL
- en: disintermediation.
  prefs: []
  type: TYPE_NORMAL
- en: '**S T A G E**'
  prefs: []
  type: TYPE_NORMAL
- en: II
  prefs: []
  type: TYPE_NORMAL
- en: Why the
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain
  prefs: []
  type: TYPE_NORMAL
- en: Is Needed
  prefs: []
  type: TYPE_NORMAL
- en: This stage explains the problem that the blockchain is supposed to solve
  prefs: []
  type: TYPE_NORMAL
- en: and why solving this problem is important. This stage also deepens your
  prefs: []
  type: TYPE_NORMAL
- en: understanding of the problem domain in which the blockchain is located, the
  prefs: []
  type: TYPE_NORMAL
- en: environment in which it provides the most value, and its relation to trust,
  prefs: []
  type: TYPE_NORMAL
- en: integrity, and the management of ownership. By the end of this stage, you will
  prefs: []
  type: TYPE_NORMAL
- en: have gained a deeper understanding of the purpose of the blockchain and you
  prefs: []
  type: TYPE_NORMAL
- en: will have reached a differentiated understanding of the term *blockchain* itself.
  prefs: []
  type: TYPE_NORMAL
- en: '**S T E P**'
  prefs: []
  type: TYPE_NORMAL
- en: '4'
  prefs: []
  type: TYPE_NORMAL
- en: Discovering the
  prefs: []
  type: TYPE_NORMAL
- en: Core Problem
  prefs: []
  type: TYPE_NORMAL
- en: How to herd a group of independent computers
  prefs: []
  type: TYPE_NORMAL
- en: The previous two steps pointed out the purpose of the blockchain in general
  prefs: []
  type: TYPE_NORMAL
- en: and highlighted its importance for purely distributed peer-to-peer systems in
  prefs: []
  type: TYPE_NORMAL
- en: particular. It turned out that maintaining integrity in distributed systems
    is the major purpose of the blockchain. But why is maintaining integrity in distributed
    systems and purely distributed peer-to-peer systems in particular such a
  prefs: []
  type: TYPE_NORMAL
- en: challenge? This step answers that question by discovering the subtle relation
  prefs: []
  type: TYPE_NORMAL
- en: between trust and integrity of purely distributed peer-to-peer systems. As a
  prefs: []
  type: TYPE_NORMAL
- en: result, this step will deepen your understanding of the importance of integrity
  prefs: []
  type: TYPE_NORMAL
- en: and uncovers the major problem to be solved by the blockchain. Finally, this
  prefs: []
  type: TYPE_NORMAL
- en: step describes the environment in which the blockchain is expected to pro-
  prefs: []
  type: TYPE_NORMAL
- en: vide the most value.
  prefs: []
  type: TYPE_NORMAL
- en: The Metaphor
  prefs: []
  type: TYPE_NORMAL
- en: Many languages have a pictorial saying for describing the situation when some-
  prefs: []
  type: TYPE_NORMAL
- en: one tries to organize a chaotic group of individuals. For example, in English
  prefs: []
  type: TYPE_NORMAL
- en: one would describe such a situation as trying to herd cats, as it illustrates
  prefs: []
  type: TYPE_NORMAL
- en: the challenges of herding a group of obstinate and intractable animals that
  prefs: []
  type: TYPE_NORMAL
- en: do not accept or even recognize a central authority. Does the problem of
  prefs: []
  type: TYPE_NORMAL
- en: trying to organize a group of individuals who do not accept or recognize a
  prefs: []
  type: TYPE_NORMAL
- en: © Daniel Drescher 2017
  prefs: []
  type: TYPE_NORMAL
- en: D. Drescher, *Blockchain Basics,* DOI 10.1007/978-1-4842-2604-9_4
  prefs: []
  type: TYPE_NORMAL
- en: '30'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 4 | Discovering the Core Problem***'
  prefs: []
  type: TYPE_NORMAL
- en: central authority sound familiar? It happens that this is exactly the situation
  prefs: []
  type: TYPE_NORMAL
- en: of a purely distributed peer-to-peer system, which consists of individual and
  prefs: []
  type: TYPE_NORMAL
- en: independent nodes without having any kind of central control or coordina-
  prefs: []
  type: TYPE_NORMAL
- en: tion. This step explains a major challenge of purely distributed peer-to-peer
  prefs: []
  type: TYPE_NORMAL
- en: systems and how it relates to the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Trust and Integrity in Peer-to-Peer Systems
  prefs: []
  type: TYPE_NORMAL
- en: Trust and integrity are two sides of the same coin. In the context of software
  prefs: []
  type: TYPE_NORMAL
- en: systems, *integrity* is a nonfunctional aspect of a system to be safe, complete,
    consistent, correct, and free of corruption and errors. *Trust* is also the firm
    belief of humans in the reliability, truth, or ability of someone or something
  prefs: []
  type: TYPE_NORMAL
- en: without evidence, proof, or investigation. Trust is given in advance and will
  prefs: []
  type: TYPE_NORMAL
- en: increase or decline based on the results of interactions on an ongoing basis.
  prefs: []
  type: TYPE_NORMAL
- en: With respect to peer-to-peer systems, this means that people will join and con-
  prefs: []
  type: TYPE_NORMAL
- en: tinue to contribute to a system if they trust it and if the results of interacting
    with the system on an ongoing basis confirm and reinforce their trust. Integrity
    of the system is needed in order to fulfill the expectations of the users and
  prefs: []
  type: TYPE_NORMAL
- en: 'reinforce their trust in the system. If the trust of the users is not reinforced
    by the system due to a lack of integrity, the users will abandon the system, which,
    as a result, will eventually cause it to terminate. Due to the importance of trust
    for the existence of peer-to-peer systems, the major question is: How do we'
  prefs: []
  type: TYPE_NORMAL
- en: achieve and maintain integrity in a purely distributed peer-to-peer system?
  prefs: []
  type: TYPE_NORMAL
- en: Achieving and maintaining integrity in purely distributed systems depends on
  prefs: []
  type: TYPE_NORMAL
- en: 'a variety of factors, some of the most important are:'
  prefs: []
  type: TYPE_NORMAL
- en: • Knowledge about the number of nodes or peers
  prefs: []
  type: TYPE_NORMAL
- en: • Knowledge about the trustworthiness of the peers
  prefs: []
  type: TYPE_NORMAL
- en: The chances of achieving integrity in a distributed peer-to-peer system are
  prefs: []
  type: TYPE_NORMAL
- en: higher if the number of nodes as well as their trustworthiness is known.
  prefs: []
  type: TYPE_NORMAL
- en: This situation is comparable to running a private club that adheres to high
  prefs: []
  type: TYPE_NORMAL
- en: moral standards and utilizes a rigorous on-boarding process for new mem-
  prefs: []
  type: TYPE_NORMAL
- en: bers. However, the worst circumstances for achieving integrity in a distributed
  prefs: []
  type: TYPE_NORMAL
- en: peer-to-peer system are given when the number of nodes and their trust-
  prefs: []
  type: TYPE_NORMAL
- en: worthiness is unknown. This is the case when running a purely distributed
  prefs: []
  type: TYPE_NORMAL
- en: peer-to-peer system on the Internet that is open to everyone.
  prefs: []
  type: TYPE_NORMAL
- en: Integrity Threats in Peer-to-Peer Systems
  prefs: []
  type: TYPE_NORMAL
- en: For simplicity, one can consider two major integrity threats in peer-to-peer
  prefs: []
  type: TYPE_NORMAL
- en: 'systems:'
  prefs: []
  type: TYPE_NORMAL
- en: • Technical failures
  prefs: []
  type: TYPE_NORMAL
- en: • Malicious peers
  prefs: []
  type: TYPE_NORMAL
- en: '***Blockchain Basics***'
  prefs: []
  type: TYPE_NORMAL
- en: '31'
  prefs: []
  type: TYPE_NORMAL
- en: Technical Failures
  prefs: []
  type: TYPE_NORMAL
- en: Peer-to-peer systems are comprised of the individual computers of its users
  prefs: []
  type: TYPE_NORMAL
- en: who communicate via a network. All hardware and software components of a
  prefs: []
  type: TYPE_NORMAL
- en: computer system as well as any component of a computer network have the
  prefs: []
  type: TYPE_NORMAL
- en: immanent risk of failing or creating errors. Hence, any distributed system has
    to face the problem that its components may fail or may produce wrong results
    by
  prefs: []
  type: TYPE_NORMAL
- en: chance.
  prefs: []
  type: TYPE_NORMAL
- en: Malicious Peers
  prefs: []
  type: TYPE_NORMAL
- en: Malicious members are the second integrity threat in peer-to-peer systems.
  prefs: []
  type: TYPE_NORMAL
- en: This source of untrustworthiness is not a technical problem, but rather a
  prefs: []
  type: TYPE_NORMAL
- en: problem caused by the goals of the individuals who decide to exploit the
  prefs: []
  type: TYPE_NORMAL
- en: system for their own purposes. One could say that this threat is more related
  prefs: []
  type: TYPE_NORMAL
- en: to sociology and group dynamics than to technology. Dishonest and malicious
  prefs: []
  type: TYPE_NORMAL
- en: peers comprise the most severe threat to the peer-to-peer system, because
  prefs: []
  type: TYPE_NORMAL
- en: 'they attack the foundation on which any peer-to-peer system is built: trust.'
  prefs: []
  type: TYPE_NORMAL
- en: As soon as users can no longer trust their peers, they will turn away and stop
  prefs: []
  type: TYPE_NORMAL
- en: contributing computational resources to the system. Hence, the number of
  prefs: []
  type: TYPE_NORMAL
- en: members will decline and the whole system will become less attractive to the
  prefs: []
  type: TYPE_NORMAL
- en: remaining members, which in turn will accelerate the decline of the system
  prefs: []
  type: TYPE_NORMAL
- en: that eventually will be abandoned completely.
  prefs: []
  type: TYPE_NORMAL
- en: The Core Problem to Be Solved by the
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain
  prefs: []
  type: TYPE_NORMAL
- en: Achieving integrity and trust in the best of all conditions is easy. The real
    challenge is to achieve integrity and trust in a distributed system in the worst
    of all conditions. And this is the problem that the blockchain is supposed to
    solve.
  prefs: []
  type: TYPE_NORMAL
- en: The core problem to be solved by the blockchain is achieving and maintain-
  prefs: []
  type: TYPE_NORMAL
- en: ing integrity in a purely distributed peer-to-peer system that consists of an
  prefs: []
  type: TYPE_NORMAL
- en: unknown number of peers with unknown reliability and trustworthiness. This
  prefs: []
  type: TYPE_NORMAL
- en: problem is not a new one. It is actually a well-known and widely discussed
  prefs: []
  type: TYPE_NORMAL
- en: problem in computer science. By utilizing a metaphor from the military, the
  prefs: []
  type: TYPE_NORMAL
- en: problem is widely regarded as the Byzantine general problem. [1](index_split_000.html#39)
  prefs: []
  type: TYPE_NORMAL
- en: 1Lamport, Leslie, Robert Shostak, and Marshall Pease. The Byzantine generals
    problem.
  prefs: []
  type: TYPE_NORMAL
- en: '*ACM Transactions on Programming Languages and Systems (TOPLAS)* 4.3 (1982):
    382–401\.'
  prefs: []
  type: TYPE_NORMAL
- en: '32'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 4 | Discovering the Core Problem***'
  prefs: []
  type: TYPE_NORMAL
- en: ■ **Note** The problem to be solved by the blockchain is achieving and maintaining
    integrity in a purely distributed peer-to-peer system that consists of an unknown
    number of peers with unknown reliability and trustworthiness.
  prefs: []
  type: TYPE_NORMAL
- en: Outlook
  prefs: []
  type: TYPE_NORMAL
- en: This step highlighted the importance of integrity and trust in peer-to-peer
  prefs: []
  type: TYPE_NORMAL
- en: systems. Furthermore, this step pointed out the core problem to be solved
  prefs: []
  type: TYPE_NORMAL
- en: by the blockchain and emphasized its importance for achieving integrity and
  prefs: []
  type: TYPE_NORMAL
- en: trust in peer-to-peer systems. However, a definition of the term blockchain
    is
  prefs: []
  type: TYPE_NORMAL
- en: still missing. This will be the subject of the next step.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs: []
  type: TYPE_NORMAL
- en: • Integrity and trust are major concerns of peer-to-peer
  prefs: []
  type: TYPE_NORMAL
- en: systems.
  prefs: []
  type: TYPE_NORMAL
- en: • People will join and continue to contribute to a peer-to-
  prefs: []
  type: TYPE_NORMAL
- en: peer system if they trust it and if the results of interacting
  prefs: []
  type: TYPE_NORMAL
- en: with the system on an ongoing basis confirm and rein-
  prefs: []
  type: TYPE_NORMAL
- en: force that trust.
  prefs: []
  type: TYPE_NORMAL
- en: • As soon as people lose trust in a peer-to-peer system,
  prefs: []
  type: TYPE_NORMAL
- en: they will abandon it, which in turn will cause the system
  prefs: []
  type: TYPE_NORMAL
- en: to terminate eventually.
  prefs: []
  type: TYPE_NORMAL
- en: '• Major integrity threats in peer-to-peer systems are:'
  prefs: []
  type: TYPE_NORMAL
- en: • Technical failures
  prefs: []
  type: TYPE_NORMAL
- en: • Malicious peers
  prefs: []
  type: TYPE_NORMAL
- en: '• Achieving integrity in a peer-to-peer system depends on:'
  prefs: []
  type: TYPE_NORMAL
- en: • The knowledge about the number of peers
  prefs: []
  type: TYPE_NORMAL
- en: • The knowledge about the trustworthiness of the peers
  prefs: []
  type: TYPE_NORMAL
- en: • The core problem to be solved by the blockchain is achieving
  prefs: []
  type: TYPE_NORMAL
- en: and maintaining integrity in a purely distributed peer-to-peer
  prefs: []
  type: TYPE_NORMAL
- en: system that is comprised of an unknown number of peers
  prefs: []
  type: TYPE_NORMAL
- en: with unknown reliability and trustworthiness.
  prefs: []
  type: TYPE_NORMAL
- en: '**S T E P**'
  prefs: []
  type: TYPE_NORMAL
- en: '5'
  prefs: []
  type: TYPE_NORMAL
- en: Disambiguating
  prefs: []
  type: TYPE_NORMAL
- en: the Term
  prefs: []
  type: TYPE_NORMAL
- en: Four ways to define the blockchain
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding steps you learned about the major purpose of the block-
  prefs: []
  type: TYPE_NORMAL
- en: chain and the relation between trust and integrity of the software system.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, you gained a well-grounded appreciation of the purpose of the
  prefs: []
  type: TYPE_NORMAL
- en: blockchain, but you are still missing a definition of the term *blockchain*
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: This step will turn your attention to the definition of the term and explain
    its different usages. This step will present a provisional definition of blockchain,
    which will guide you through the remainder of this book. Finally, this step
  prefs: []
  type: TYPE_NORMAL
- en: explains why the management of ownership is a prominent application case
  prefs: []
  type: TYPE_NORMAL
- en: of the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: The Term
  prefs: []
  type: TYPE_NORMAL
- en: 'In this discussion about the blockchain, the term is used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: • As a name for a data structure
  prefs: []
  type: TYPE_NORMAL
- en: • As a name for an algorithm
  prefs: []
  type: TYPE_NORMAL
- en: • As a name for a suite of technologies
  prefs: []
  type: TYPE_NORMAL
- en: • As an umbrella term for purely distributed peer-to-peer
  prefs: []
  type: TYPE_NORMAL
- en: systems with a common application area
  prefs: []
  type: TYPE_NORMAL
- en: © Daniel Drescher 2017
  prefs: []
  type: TYPE_NORMAL
- en: D. Drescher, *Blockchain Basics*, DOI 10.1007/978-1-4842-2604-9_5
  prefs: []
  type: TYPE_NORMAL
- en: '34'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 5 | Disambiguating the Term***'
  prefs: []
  type: TYPE_NORMAL
- en: A Data Structure
  prefs: []
  type: TYPE_NORMAL
- en: In computer science and software engineering, a data structure is a way to
  prefs: []
  type: TYPE_NORMAL
- en: organize data regardless of their concrete informational content. You can think
  prefs: []
  type: TYPE_NORMAL
- en: about a data structure in terms of a floor plan for a building in architecture.
    A floor plan for a building addresses separating and connecting space with walls,
  prefs: []
  type: TYPE_NORMAL
- en: floors, and stairs regardless of their concrete usage. When used as a name
  prefs: []
  type: TYPE_NORMAL
- en: for a data structure, blockchain refers to data put together into units called
  prefs: []
  type: TYPE_NORMAL
- en: blocks. One can think of these blocks much like pages in a book. These blocks
  prefs: []
  type: TYPE_NORMAL
- en: are connected to one another like a chain, hence the name blockchain. In
  prefs: []
  type: TYPE_NORMAL
- en: relation to a book, the words and sentences are the information to be stored.
  prefs: []
  type: TYPE_NORMAL
- en: They are written on different pages instead of being written on a large spool.
  prefs: []
  type: TYPE_NORMAL
- en: The pages are connected with one another via their position in the book and
  prefs: []
  type: TYPE_NORMAL
- en: via the page numbers. You can determine if someone removed a page from the
  prefs: []
  type: TYPE_NORMAL
- en: book by checking whether the page numbers continue without leaving out a
  prefs: []
  type: TYPE_NORMAL
- en: number. Furthermore, the information on the pages as well as the pages within
  prefs: []
  type: TYPE_NORMAL
- en: the book are ordered. The ordering is an important detail, which will be used
  prefs: []
  type: TYPE_NORMAL
- en: extensively. Additionally, the chaining of the data blocks in the data structure
    is achieved by using a very special numbering system, which differs from the
  prefs: []
  type: TYPE_NORMAL
- en: page numbering in ordinary books.
  prefs: []
  type: TYPE_NORMAL
- en: An Algorithm
  prefs: []
  type: TYPE_NORMAL
- en: In software engineering, the term *algorithm* refers to a sequence of instructions
    to be completed by a computer. These instructions often involve data
  prefs: []
  type: TYPE_NORMAL
- en: structures. When used as a name for an algorithm, blockchain refers to a
  prefs: []
  type: TYPE_NORMAL
- en: sequence of instructions that negotiates the informational content of many
  prefs: []
  type: TYPE_NORMAL
- en: blockchain-data-structures in a purely distributed peer-to-peer system, similar
  prefs: []
  type: TYPE_NORMAL
- en: to a democratic voting schema.
  prefs: []
  type: TYPE_NORMAL
- en: A Suite of Technologies
  prefs: []
  type: TYPE_NORMAL
- en: When used to refer to a suite of technologies, blockchain refers to a com-
  prefs: []
  type: TYPE_NORMAL
- en: bination of the blockchain-data-structure, the blockchain-algorithm, as well
  prefs: []
  type: TYPE_NORMAL
- en: as cryptographic and security technologies that combined can be used to
  prefs: []
  type: TYPE_NORMAL
- en: achieve integrity in purely distributed peer-to-peer systems, regardless of
    the
  prefs: []
  type: TYPE_NORMAL
- en: application goal.
  prefs: []
  type: TYPE_NORMAL
- en: An Umbrella Term for Purely Distributed Peer-to-Peer
  prefs: []
  type: TYPE_NORMAL
- en: Systems with a Common Application Area
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain can also be used as an umbrella term for purely distributed peer-
  prefs: []
  type: TYPE_NORMAL
- en: to-peer systems of ledgers that utilize the blockchain-technology-suite. Note
  prefs: []
  type: TYPE_NORMAL
- en: '***Blockchain Basics***'
  prefs: []
  type: TYPE_NORMAL
- en: '35'
  prefs: []
  type: TYPE_NORMAL
- en: that in this context blockchain refers to a purely distributed system as a whole
    instead of referring to a software unit that is part of a purely distributed
  prefs: []
  type: TYPE_NORMAL
- en: system.
  prefs: []
  type: TYPE_NORMAL
- en: The Usage of the Term in This Book
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the rest of this book, blockchain refers to the shortcut for the
  prefs: []
  type: TYPE_NORMAL
- en: umbrella term for purely distributed peer-to-peer systems of ledgers that
  prefs: []
  type: TYPE_NORMAL
- en: utilize the blockchain-technology-suite. If any other meaning is intended, I
    will indicate this by explicitly using the term blockchain-data-structure, blockchain-algorithm,
    or blockchain-technology-suite.
  prefs: []
  type: TYPE_NORMAL
- en: ■ **Note** The technology that is nowadays regarded as blockchain was proposed
    in 2008 under the pseudonym Sa[toshi Nakamoto,1](index_split_000.html#43) whose
    true identity has not yet been revealed.
  prefs: []
  type: TYPE_NORMAL
- en: Provisional Definition
  prefs: []
  type: TYPE_NORMAL
- en: The following definition is not complete. It still lacks important details that
  prefs: []
  type: TYPE_NORMAL
- en: have not yet been presented. However, this definition serves as an intermedi-
  prefs: []
  type: TYPE_NORMAL
- en: 'ate step toward a more complete understanding of the term:'
  prefs: []
  type: TYPE_NORMAL
- en: '*The blockchain is a purely distributed peer-to-peer system of ledgers that*'
  prefs: []
  type: TYPE_NORMAL
- en: '*utilizes a software unit that consist of an algorithm, which negotiates the*'
  prefs: []
  type: TYPE_NORMAL
- en: '*informational content of ordered and connected blocks of data together*'
  prefs: []
  type: TYPE_NORMAL
- en: '*with cryptographic and security technologies in order to achieve and*'
  prefs: []
  type: TYPE_NORMAL
- en: '*maintain its integrity.*'
  prefs: []
  type: TYPE_NORMAL
- en: The Role of Managing Ownership
  prefs: []
  type: TYPE_NORMAL
- en: The provisional definition does not say anything about Bitcoin or managing
  prefs: []
  type: TYPE_NORMAL
- en: ownership of cryptographic money. This may come as a surprise since many
  prefs: []
  type: TYPE_NORMAL
- en: articles and books written about the blockchain claim that its purpose is to
  prefs: []
  type: TYPE_NORMAL
- en: manage ownership of digital currencies. The truth is, managing ownership of
  prefs: []
  type: TYPE_NORMAL
- en: cryptographic money is a very prominent and natural application case of the
  prefs: []
  type: TYPE_NORMAL
- en: blockchain, but it is not the only one. The blockchain has a wide and diverse
  prefs: []
  type: TYPE_NORMAL
- en: range of applications. However, there are two reasons why the management of
  prefs: []
  type: TYPE_NORMAL
- en: ownership of digital goods is the most discussed application of the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: '1Nakamoto, Satoshi. Bitcoin: a peer-to-peer electronic cash system. 2008\.
    [https://bitcoin.org/](https://bitcoin.org/bitcoin.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[bitcoin.pdf.](https://bitcoin.org/bitcoin.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '36'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 5 | Disambiguating the Term***'
  prefs: []
  type: TYPE_NORMAL
- en: First, it is the easiest to understand and to explain. Second, it is the use
    case with the most impact on the economy. The concept of ownership and the
  prefs: []
  type: TYPE_NORMAL
- en: enforcement of ownership rights are core elements of almost every human
  prefs: []
  type: TYPE_NORMAL
- en: society (even some animals have the concept of ownership and fight over its
  prefs: []
  type: TYPE_NORMAL
- en: enforcement). A huge proportion of the activities of banks, insurance com-
  prefs: []
  type: TYPE_NORMAL
- en: panies, custodians, lawyers, courts, solicitors, and consulates are concerned
  prefs: []
  type: TYPE_NORMAL
- en: with just the management of ownership rights or their enforcement. Hence,
  prefs: []
  type: TYPE_NORMAL
- en: managing ownership is a multibillion dollar market, and any technical innova-
  prefs: []
  type: TYPE_NORMAL
- en: tion that could change the way we manage ownership will have a huge impact.
  prefs: []
  type: TYPE_NORMAL
- en: It turns out that the blockchain can indeed dramatically change the way we
  prefs: []
  type: TYPE_NORMAL
- en: manage ownership.
  prefs: []
  type: TYPE_NORMAL
- en: The Application Area of the Blockchain in This
  prefs: []
  type: TYPE_NORMAL
- en: Book
  prefs: []
  type: TYPE_NORMAL
- en: The blockchain as a technology suite as used for managing distributed peer-to-
  prefs: []
  type: TYPE_NORMAL
- en: peer systems of ledgers can have many specific applications such as managing
  prefs: []
  type: TYPE_NORMAL
- en: ownership in digital goods or cryptographic currencies. However, this book
  prefs: []
  type: TYPE_NORMAL
- en: deliberately does not consider just one specific application of the blockchain
  prefs: []
  type: TYPE_NORMAL
- en: because I do not want to distract the attention from the core concepts by
  prefs: []
  type: TYPE_NORMAL
- en: discussing just one specific application case in great detail. However, in order
    to make it easier for you to understand the blockchain, this book considers
  prefs: []
  type: TYPE_NORMAL
- en: the general application case of managing and clarifying ownership regardless
    of
  prefs: []
  type: TYPE_NORMAL
- en: the specific good whose ownership is managed. As a result, the general goal
    of
  prefs: []
  type: TYPE_NORMAL
- en: managing and clarifying ownership will provide some mental guidance through
  prefs: []
  type: TYPE_NORMAL
- en: your learning path and help to create a mental picture of the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Outlook
  prefs: []
  type: TYPE_NORMAL
- en: This step clarified the term blockchain and provided a provisional definition.
  prefs: []
  type: TYPE_NORMAL
- en: This book considers the general application case of managing and clarifying
  prefs: []
  type: TYPE_NORMAL
- en: ownership in order to explain the blockchain, but there really needs to be
  prefs: []
  type: TYPE_NORMAL
- en: a discussion of ownership in more detail. A more detailed understanding of
  prefs: []
  type: TYPE_NORMAL
- en: ownership will help you to understand the functioning of the blockchain. The
  prefs: []
  type: TYPE_NORMAL
- en: next step will explore the foundation of ownership in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: '***Blockchain Basics***'
  prefs: []
  type: TYPE_NORMAL
- en: '37'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs: []
  type: TYPE_NORMAL
- en: • The term blockchain is ambiguous; it has different mean-
  prefs: []
  type: TYPE_NORMAL
- en: ings for different people depending on the context.
  prefs: []
  type: TYPE_NORMAL
- en: '• Blockchain can refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: • A data structure
  prefs: []
  type: TYPE_NORMAL
- en: • An algorithm
  prefs: []
  type: TYPE_NORMAL
- en: • A suite of technologies
  prefs: []
  type: TYPE_NORMAL
- en: • A group of purely distributed peer-to-peer systems
  prefs: []
  type: TYPE_NORMAL
- en: with a common application area
  prefs: []
  type: TYPE_NORMAL
- en: • Managing and clarifying ownership is the most prominent
  prefs: []
  type: TYPE_NORMAL
- en: application case of the blockchain but is not the only one.
  prefs: []
  type: TYPE_NORMAL
- en: • The blockchain is a purely distributed peer-to-peer sys-
  prefs: []
  type: TYPE_NORMAL
- en: tem of ledgers that utilizes a software unit that consists
  prefs: []
  type: TYPE_NORMAL
- en: of an algorithm, which negotiates the informational con-
  prefs: []
  type: TYPE_NORMAL
- en: tent of ordered and connected blocks of data together
  prefs: []
  type: TYPE_NORMAL
- en: with cryptographic and security technologies in order to
  prefs: []
  type: TYPE_NORMAL
- en: achieve and maintain its integrity.
  prefs: []
  type: TYPE_NORMAL
- en: '**S T E P**'
  prefs: []
  type: TYPE_NORMAL
- en: '6'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding
  prefs: []
  type: TYPE_NORMAL
- en: the Nature of
  prefs: []
  type: TYPE_NORMAL
- en: Ownership
  prefs: []
  type: TYPE_NORMAL
- en: Why we know what we own
  prefs: []
  type: TYPE_NORMAL
- en: '[Step 5 pr](http://dx.doi.org/10.1007/978-1-4842-2604-9_5)ovided a preliminary
    definition of the blockchain and insight into why the management of ownership
    is regarded as its most prominent application'
  prefs: []
  type: TYPE_NORMAL
- en: case. This step deepens the relation between the blockchain and its prominent
  prefs: []
  type: TYPE_NORMAL
- en: use case of managing ownership. In particular, this step reveals the connection
  prefs: []
  type: TYPE_NORMAL
- en: between trust and integrity of purely distributed peer-to-peer systems, on the
  prefs: []
  type: TYPE_NORMAL
- en: one hand, and managing ownership, on the other hand. In addition, this step
  prefs: []
  type: TYPE_NORMAL
- en: also provides some general insights into the nature of ownership and intro-
  prefs: []
  type: TYPE_NORMAL
- en: duces basic security concepts.
  prefs: []
  type: TYPE_NORMAL
- en: The Metaphor
  prefs: []
  type: TYPE_NORMAL
- en: Imagine the following situation. At home you are packing an apple into your
  prefs: []
  type: TYPE_NORMAL
- en: bag for lunch. On your way to the office, you decide to go into a supermarket
  prefs: []
  type: TYPE_NORMAL
- en: to buy a sandwich and some cookies. At the checkout point, you are opening
  prefs: []
  type: TYPE_NORMAL
- en: your bag to collect the items you are buying. Just in this moment the employee
  prefs: []
  type: TYPE_NORMAL
- en: © Daniel Drescher 2017
  prefs: []
  type: TYPE_NORMAL
- en: D. Drescher, *Blockchain Basics*, DOI 10.1007/978-1-4842-2604-9_6
  prefs: []
  type: TYPE_NORMAL
- en: '40'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 6 | Understanding the Nature of Ownership***'
  prefs: []
  type: TYPE_NORMAL
- en: of the supermarket is looking at you and sees the apple in your bag, which
  prefs: []
  type: TYPE_NORMAL
- en: happens to be the same kind of apples sold at the supermarket. What would
  prefs: []
  type: TYPE_NORMAL
- en: the employee of the supermarket be thinking in this moment? He could falsely
  prefs: []
  type: TYPE_NORMAL
- en: conclude from his observation that you may have stolen the apple from his
  prefs: []
  type: TYPE_NORMAL
- en: store. Unfortunately, that supermarket does not have any supervision cameras
  prefs: []
  type: TYPE_NORMAL
- en: or any security personnel, and you are the only customer at this moment. So
  prefs: []
  type: TYPE_NORMAL
- en: how could you prove that you did not steal the apple?
  prefs: []
  type: TYPE_NORMAL
- en: Ownership and Witnesses
  prefs: []
  type: TYPE_NORMAL
- en: Have you ever thought about what makes you the owner of the things that
  prefs: []
  type: TYPE_NORMAL
- en: belong to you? Probably, because you are still thinking about the apple in the
  prefs: []
  type: TYPE_NORMAL
- en: supermarket story! So what makes you the owner of the apple in your bag?
  prefs: []
  type: TYPE_NORMAL
- en: How can you prove that you have not stolen it from the supermarket?
  prefs: []
  type: TYPE_NORMAL
- en: So imagine you are in front of a court that disputes your alleged apple-theft
  prefs: []
  type: TYPE_NORMAL
- en: case. How would you prove that you are the owner of the apple? We know
  prefs: []
  type: TYPE_NORMAL
- en: that in the supermarket example, it would suffice to prove your innocence
  prefs: []
  type: TYPE_NORMAL
- en: when no one could testify that you had stolen the apple. However, being dis-
  prefs: []
  type: TYPE_NORMAL
- en: charged from the suspicion of being a thief is not proof of ownership. So let’s
  prefs: []
  type: TYPE_NORMAL
- en: stick to the question of proving your ownership.
  prefs: []
  type: TYPE_NORMAL
- en: It would be of great help if someone could testify that you had bought the
  prefs: []
  type: TYPE_NORMAL
- en: apple *before* you went to the supermarket. Luckily, you remember the shop were
    you bought the apple and the employee who sold the apple to you is
  prefs: []
  type: TYPE_NORMAL
- en: 'willing to testify to this. But you underestimated the prosecutor. He is talking
    to your witness in the cross-examination and asking your witness hard questions:
    Can he remember the apple he sold to you? Can he identify the specific'
  prefs: []
  type: TYPE_NORMAL
- en: apple he sold to you as the apple found in your bag? Can he identify you as
    the
  prefs: []
  type: TYPE_NORMAL
- en: person who bought that particular apple? And finally why does he remember
  prefs: []
  type: TYPE_NORMAL
- en: all these details in the first place? Could it be possible that you paid the
    witness money for testifying to your innocence? So this comes down to a basic
  prefs: []
  type: TYPE_NORMAL
- en: 'principle: having one witness is good, but having many independent witnesses'
  prefs: []
  type: TYPE_NORMAL
- en: is the key to convincing the prosecutor of your innocence.
  prefs: []
  type: TYPE_NORMAL
- en: The last point is extremely important. The more independent witnesses who
  prefs: []
  type: TYPE_NORMAL
- en: testify to the same fact, the higher the chance that this fact is indeed true.
    It turns out that this idea will be one of the core concepts of the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: '***Blockchain Basics***'
  prefs: []
  type: TYPE_NORMAL
- en: '41'
  prefs: []
  type: TYPE_NORMAL
- en: Foundations of Ownership
  prefs: []
  type: TYPE_NORMAL
- en: Taking the findings of the previous section to a more abstract level, one can
  prefs: []
  type: TYPE_NORMAL
- en: 'state that proving ownership involves three elements:'
  prefs: []
  type: TYPE_NORMAL
- en: • An identification of the owner
  prefs: []
  type: TYPE_NORMAL
- en: • An identification of the object being owned
  prefs: []
  type: TYPE_NORMAL
- en: • A mapping of the owner to the object
  prefs: []
  type: TYPE_NORMAL
- en: The testimony of witnesses accomplishes all of these. Historically, eyewit-
  prefs: []
  type: TYPE_NORMAL
- en: nesses have often been the only source of clarifying these elements. However,
  prefs: []
  type: TYPE_NORMAL
- en: relying on oral testimonies of witnesses is time-consuming. As a result, these
  prefs: []
  type: TYPE_NORMAL
- en: elements have been replaced by documents issued by trustworthy entities.
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, we can identify people with ID cards, birth certificates, and driv-
  prefs: []
  type: TYPE_NORMAL
- en: er’s licenses. Serial numbers, production dates, production certificates, or
    a
  prefs: []
  type: TYPE_NORMAL
- en: detailed description can be used to identify objects. These documents do not
  prefs: []
  type: TYPE_NORMAL
- en: change once they are created because the identities of people and objects do
  prefs: []
  type: TYPE_NORMAL
- en: not change.
  prefs: []
  type: TYPE_NORMAL
- en: The mapping between owners and objects is typically done with a ledger
  prefs: []
  type: TYPE_NORMAL
- en: or register. This is not a document that stays constant once created. Every
  prefs: []
  type: TYPE_NORMAL
- en: transfer of ownership needs to be documented in such a register because
  prefs: []
  type: TYPE_NORMAL
- en: an outdated register or ledger cannot be a trustworthy witness for testify-
  prefs: []
  type: TYPE_NORMAL
- en: ing ownership. The importance of having an up-to-date and orderly managed
  prefs: []
  type: TYPE_NORMAL
- en: register has led to the development of special institutions in many societies.
  prefs: []
  type: TYPE_NORMAL
- en: The more valuable certain kinds of objects are, the higher the chance for the
  prefs: []
  type: TYPE_NORMAL
- en: existence of a government-regulated ledger that documents the ownership of
  prefs: []
  type: TYPE_NORMAL
- en: those objects. Most of these ledgers are open to everyone in order to make
  prefs: []
  type: TYPE_NORMAL
- en: it easy to verify ownership and provide easy access to clarify ownership. You
  prefs: []
  type: TYPE_NORMAL
- en: may do some research on your own to identify some of these ledgers in your
  prefs: []
  type: TYPE_NORMAL
- en: country and to what they testify. I found ledgers for documenting ownership
  prefs: []
  type: TYPE_NORMAL
- en: of real estate, patents, ships, airplanes, and companies. I even found registers
    for marriages, births, and deaths.
  prefs: []
  type: TYPE_NORMAL
- en: Figure [6-1 depicts the r](index_split_000.html#49)elation of the different
    concepts involved when designing software for managing ownership.
  prefs: []
  type: TYPE_NORMAL
- en: '![](index-49_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '42'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 6 | Understanding the Nature of Ownership***'
  prefs: []
  type: TYPE_NORMAL
- en: '**Figure 6-1\.** Concepts of ownership'
  prefs: []
  type: TYPE_NORMAL
- en: In Figure [6-1](index_split_000.html#49), the concepts in the top layers are
    more general than those in the lower layers. The concepts on each layer can be
    seen as realizations
  prefs: []
  type: TYPE_NORMAL
- en: of the concepts in layers above them. For example, the proof of ownership
  prefs: []
  type: TYPE_NORMAL
- en: requires identification of owners and property alike as well as the mapping
  prefs: []
  type: TYPE_NORMAL
- en: between owners and property. The use of ownership requires identification
  prefs: []
  type: TYPE_NORMAL
- en: as well as authentication and authorization to ensure that only the legitimate
  prefs: []
  type: TYPE_NORMAL
- en: person uses the property. The boxes in the very bottom row represent the
  prefs: []
  type: TYPE_NORMAL
- en: implementation layer. They show, for example, that password and signature
  prefs: []
  type: TYPE_NORMAL
- en: are concepts used to implement authentication and authorization. A ledger
  prefs: []
  type: TYPE_NORMAL
- en: can be seen as a concrete implementation of a mapping between owners to
  prefs: []
  type: TYPE_NORMAL
- en: their property.
  prefs: []
  type: TYPE_NORMAL
- en: A Short Detour to Security
  prefs: []
  type: TYPE_NORMAL
- en: Figure [6-1](index_split_000.html#49) used three major security related concepts
    that need to be explained in more detail, as their meaning in the context of software
    systems
  prefs: []
  type: TYPE_NORMAL
- en: 'might be a bit different from their common usage:'
  prefs: []
  type: TYPE_NORMAL
- en: • Identification
  prefs: []
  type: TYPE_NORMAL
- en: • Authentication
  prefs: []
  type: TYPE_NORMAL
- en: • Authorization
  prefs: []
  type: TYPE_NORMAL
- en: The meaning and interrelation of these three concepts can be illustrated by
    a
  prefs: []
  type: TYPE_NORMAL
- en: real-world example. Perhaps you attempt to buy a bottle of wine in a liquor
  prefs: []
  type: TYPE_NORMAL
- en: shop. Liquor shops are not allowed to sell alcoholic drinks to those who are
  prefs: []
  type: TYPE_NORMAL
- en: underage. How does the liquor shop ensure that it sells wine only to the right
  prefs: []
  type: TYPE_NORMAL
- en: people? The liquor shop accomplishes this by using identification, authentica-
  prefs: []
  type: TYPE_NORMAL
- en: tion, and authorization. And here is an explanation how this works.
  prefs: []
  type: TYPE_NORMAL
- en: '***Blockchain Basics***'
  prefs: []
  type: TYPE_NORMAL
- en: '43'
  prefs: []
  type: TYPE_NORMAL
- en: Identification
  prefs: []
  type: TYPE_NORMAL
- en: Identification just means to claim to be someone by stating a name or any-
  prefs: []
  type: TYPE_NORMAL
- en: thing else that could be used as an identifier. [1](index_split_000.html#50)
    In the liquor shop example, one could claim to be a certain person by stating
    a name. Identification does not
  prefs: []
  type: TYPE_NORMAL
- en: prove that you really are who you claim to be. Identification does not involve
  prefs: []
  type: TYPE_NORMAL
- en: the proof that you are not underage. Identification just means claiming to be
  prefs: []
  type: TYPE_NORMAL
- en: a certain person.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of authentication is to prevent someone from claiming to be
  prefs: []
  type: TYPE_NORMAL
- en: someone else. Authentication means verifying or proving that you really are
  prefs: []
  type: TYPE_NORMAL
- en: who you claim to b[e1](index_split_000.html#50). This proof can be provided
    by something you have or something you know that can serve as proof that you really
    are who you
  prefs: []
  type: TYPE_NORMAL
- en: claim to be (e.g., an ID card, a driver’s license, or some details of the life
    of the person you claim to be). It is important that the proof of your claimed
    identity is uniquely connected to you (e.g., a photograph of your face, a fingerprint,
    or something else that identifies you uniquely). In the liquor shop example, this
  prefs: []
  type: TYPE_NORMAL
- en: means that you can prove that you really are who you claimed to be by show-
  prefs: []
  type: TYPE_NORMAL
- en: ing a driver’s license that contains a photograph of you. Comparing your face
  prefs: []
  type: TYPE_NORMAL
- en: with the face shown on the photograph on the driver’s license accomplishes
  prefs: []
  type: TYPE_NORMAL
- en: the verification. If you look like the person in the photograph of the driver’s
  prefs: []
  type: TYPE_NORMAL
- en: license, the authentication is successful. Otherwise, the authentication fails.
  prefs: []
  type: TYPE_NORMAL
- en: Double checking one’s face with the photograph on the driver’s license aims
  prefs: []
  type: TYPE_NORMAL
- en: to prevent someone from using someone else’s driver’s license.
  prefs: []
  type: TYPE_NORMAL
- en: Authorization
  prefs: []
  type: TYPE_NORMAL
- en: Authorization means granting access to specific resources or services due
  prefs: []
  type: TYPE_NORMAL
- en: to the characteristics or properties of one’s identity[1\.](index_split_000.html#50)
    Authorization is the consequence of both a successful authentication and evaluation
    of one’s
  prefs: []
  type: TYPE_NORMAL
- en: characteristics or rights. In the liquor shop example, authorization means to
  prefs: []
  type: TYPE_NORMAL
- en: decide whether you are allowed to buy a bottle of wine based on the date
  prefs: []
  type: TYPE_NORMAL
- en: of birth shown on your driver’s license. The shop assistant will refuse to sell
  prefs: []
  type: TYPE_NORMAL
- en: you a bottle of wine if you are too young based on the date of birth shown
  prefs: []
  type: TYPE_NORMAL
- en: '1Van Tilborg, Henk, and Sushil Jajodia, eds. *Encyclopedia of cryptography
    and security*. New York: Springer Science & Business Media, 2014\.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](index-51_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '44'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 6 | Understanding the Nature of Ownership***'
  prefs: []
  type: TYPE_NORMAL
- en: on your driver’s license. Note that in this case the refusal is not due to a
    failed authentication. Identification and authentication worked well, and because
    of
  prefs: []
  type: TYPE_NORMAL
- en: the correct identification, the shop assistant can identify you as an underage
  prefs: []
  type: TYPE_NORMAL
- en: person. Hence, authorization is always the result of evaluating the characteristics
    or properties of the previously authenticated identity against some rules.
  prefs: []
  type: TYPE_NORMAL
- en: ■ **Note** Identification means claiming to be someone. Authentication means
    proving that you really are who you claimed to be. Authorization means getting
    access to something due to the previously authenticated identity.
  prefs: []
  type: TYPE_NORMAL
- en: Purposes and Properties of a Ledger
  prefs: []
  type: TYPE_NORMAL
- en: Figure [6-2](index_split_000.html#51) illustrates how the proof of ownership
    and transfer of ownership relate to the purpose and the properties of a ledger.
  prefs: []
  type: TYPE_NORMAL
- en: '**Figure 6-2\.** Concepts and principles of a ledger'
  prefs: []
  type: TYPE_NORMAL
- en: '***Blockchain Basics***'
  prefs: []
  type: TYPE_NORMAL
- en: '45'
  prefs: []
  type: TYPE_NORMAL
- en: The major lesson to be learned from Figure [6-2 is the fact that a ledger has](index_split_000.html#51)
  prefs: []
  type: TYPE_NORMAL
- en: to fulfill two opposing roles. On the one hand, a ledger serves as a means for
  prefs: []
  type: TYPE_NORMAL
- en: proving ownership, which relies on reading historic data preserved in the led-
  prefs: []
  type: TYPE_NORMAL
- en: ger. On the other hand, the ledger has to document any transfer of ownership,
  prefs: []
  type: TYPE_NORMAL
- en: which in turn implies that new data are produced and written to the ledger.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most important differences of these two purposes can be sum-
  prefs: []
  type: TYPE_NORMAL
- en: marized in the opposing nature of transparency and privacy.
  prefs: []
  type: TYPE_NORMAL
- en: Proving ownership is easier when the ledger is open to anyone. Hence, trans-
  prefs: []
  type: TYPE_NORMAL
- en: parency is the basis of proving ownership rights in a similar way as witnesses
  prefs: []
  type: TYPE_NORMAL
- en: making a public testimony in court. However, transferring ownership must be
  prefs: []
  type: TYPE_NORMAL
- en: exclusively restricted to the lawful owner. So privacy forms the basis of trans-
  prefs: []
  type: TYPE_NORMAL
- en: ferring ownership. Since writing in the ledger means changing ownership, only
  prefs: []
  type: TYPE_NORMAL
- en: very trustful entities should be given writing access to ledgers.
  prefs: []
  type: TYPE_NORMAL
- en: The conflicting forces of transparency vs. privacy, proving ownership vs. trans-
  prefs: []
  type: TYPE_NORMAL
- en: ferring ownership, and reading the ledger vs. writing the ledger can also be
  prefs: []
  type: TYPE_NORMAL
- en: found in the blockchain. It turns out that the blockchain is a gigantic distrib-
  prefs: []
  type: TYPE_NORMAL
- en: uted peer-to-peer system of ledger-like data structures that can be read by
  prefs: []
  type: TYPE_NORMAL
- en: everyone.
  prefs: []
  type: TYPE_NORMAL
- en: Ownership and the Blockchain
  prefs: []
  type: TYPE_NORMAL
- en: A witness in the form of a government-regulated ledger is the key in clarifying
  prefs: []
  type: TYPE_NORMAL
- en: ownership of valuable goods. But what happens if such a ledger is damaged or
  prefs: []
  type: TYPE_NORMAL
- en: destroyed? Or what happens if someone responsible for updating the ledger
  prefs: []
  type: TYPE_NORMAL
- en: makes an error or forges it on purpose? In this case, the ledger does not
  prefs: []
  type: TYPE_NORMAL
- en: reflect reality. This is disastrous because everybody believes that the ledger
  prefs: []
  type: TYPE_NORMAL
- en: represents the truth, similar to a witness in court.
  prefs: []
  type: TYPE_NORMAL
- en: The problem of having only one ledger as the source for clarifying ownership
  prefs: []
  type: TYPE_NORMAL
- en: can be solved in the same way as it has been solved for trials in court. Basing
  prefs: []
  type: TYPE_NORMAL
- en: a verdict only on the testimony of one single witness is risky since this witness
    could be dishonest. Having more witnesses is better. The more independent
  prefs: []
  type: TYPE_NORMAL
- en: witnesses who are interrogated, the higher the chance that those facts that
    are
  prefs: []
  type: TYPE_NORMAL
- en: consistently mentioned among the majority of testimonies reflect the truth.
  prefs: []
  type: TYPE_NORMAL
- en: This fact can be proved by means of statistics and the law of large numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Having many witnesses who independently make their own observations free
  prefs: []
  type: TYPE_NORMAL
- en: of mutual influences is the key for this approach to finding the truth.
  prefs: []
  type: TYPE_NORMAL
- en: 'Applying this finding to the use of a ledger for clarifying ownership is straightforward:
    Instead of maintaining only one single ledger that could be forged,'
  prefs: []
  type: TYPE_NORMAL
- en: one should utilize a purely distributed peer-to-peer system of ledgers and
  prefs: []
  type: TYPE_NORMAL
- en: clarify requests concerning ownership on that version of the reality on which
  prefs: []
  type: TYPE_NORMAL
- en: the majority of peers agrees.
  prefs: []
  type: TYPE_NORMAL
- en: '46'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 6 | Understanding the Nature of Ownership***'
  prefs: []
  type: TYPE_NORMAL
- en: At this point you might be wondering what all this has to do with the
  prefs: []
  type: TYPE_NORMAL
- en: blockchain. The relation between managing ownership with a ledger and the
  prefs: []
  type: TYPE_NORMAL
- en: 'blockchain is summed up as:'
  prefs: []
  type: TYPE_NORMAL
- en: • An individual ledger is used for maintaining information
  prefs: []
  type: TYPE_NORMAL
- en: about ownership, which is equivalent to one blockchain-data-
  prefs: []
  type: TYPE_NORMAL
- en: structure storing ownership-related data.
  prefs: []
  type: TYPE_NORMAL
- en: • The individual ledgers are stored on the computers
  prefs: []
  type: TYPE_NORMAL
- en: (nodes) of a peer-to-peer system.
  prefs: []
  type: TYPE_NORMAL
- en: • The blockchain-algorithm is responsible for letting the
  prefs: []
  type: TYPE_NORMAL
- en: individual nodes collectively arrive at one consistent ver-
  prefs: []
  type: TYPE_NORMAL
- en: sion of the state of ownership on which the final verdict
  prefs: []
  type: TYPE_NORMAL
- en: is based.
  prefs: []
  type: TYPE_NORMAL
- en: • Integrity in this system is its ability to make true state-
  prefs: []
  type: TYPE_NORMAL
- en: ments about ownership.
  prefs: []
  type: TYPE_NORMAL
- en: • Cryptography is necessary for creating a trustworthy
  prefs: []
  type: TYPE_NORMAL
- en: means of identification, authentication, and authorization
  prefs: []
  type: TYPE_NORMAL
- en: and ensuring data security.
  prefs: []
  type: TYPE_NORMAL
- en: Outlook
  prefs: []
  type: TYPE_NORMAL
- en: This step highlighted important characteristics of ownership and how they
  prefs: []
  type: TYPE_NORMAL
- en: relate to the properties of ledgers. Furthermore, this step sketched how
  prefs: []
  type: TYPE_NORMAL
- en: the blockchain relates to ownership and ledgers. The next step discusses an
  prefs: []
  type: TYPE_NORMAL
- en: important consequence of having ownership managed in a purely distributed
  prefs: []
  type: TYPE_NORMAL
- en: peer-to-peer system of ledgers.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs: []
  type: TYPE_NORMAL
- en: '• A proof of ownership has three elements:'
  prefs: []
  type: TYPE_NORMAL
- en: • Identification of the owner
  prefs: []
  type: TYPE_NORMAL
- en: • Identification of the object being owned
  prefs: []
  type: TYPE_NORMAL
- en: • Mapping the owner to the object
  prefs: []
  type: TYPE_NORMAL
- en: • ID cards, birth certificates, and driver’s licenses as well as
  prefs: []
  type: TYPE_NORMAL
- en: serial numbers, production dates, production certificates,
  prefs: []
  type: TYPE_NORMAL
- en: or a detailed object description can be used in order to
  prefs: []
  type: TYPE_NORMAL
- en: identify owners and objects.
  prefs: []
  type: TYPE_NORMAL
- en: '***Blockchain Basics***'
  prefs: []
  type: TYPE_NORMAL
- en: '47'
  prefs: []
  type: TYPE_NORMAL
- en: • The mapping between owners and objects can be main-
  prefs: []
  type: TYPE_NORMAL
- en: tained in a ledger, which plays the same role as a witness
  prefs: []
  type: TYPE_NORMAL
- en: in a trial.
  prefs: []
  type: TYPE_NORMAL
- en: • Having only one ledger is risky since it can be damaged,
  prefs: []
  type: TYPE_NORMAL
- en: destroyed, or forged. In this case, the ledger is no longer
  prefs: []
  type: TYPE_NORMAL
- en: a trustworthy source for clarifying ownership.
  prefs: []
  type: TYPE_NORMAL
- en: • Instead of using only one central ledger, one can utilize a
  prefs: []
  type: TYPE_NORMAL
- en: group of independent ledgers for documenting owner-
  prefs: []
  type: TYPE_NORMAL
- en: ship and clarify requests concerning the ownership on
  prefs: []
  type: TYPE_NORMAL
- en: that version of the reality on which the majority of led-
  prefs: []
  type: TYPE_NORMAL
- en: gers agrees.
  prefs: []
  type: TYPE_NORMAL
- en: • It is possible to create a purely distributed peer-to-peer
  prefs: []
  type: TYPE_NORMAL
- en: system of ledgers by using the blockchain-data-structure.
  prefs: []
  type: TYPE_NORMAL
- en: Each blockchain-data-structure represents one ledger
  prefs: []
  type: TYPE_NORMAL
- en: and is maintained by one node of the system. The block-
  prefs: []
  type: TYPE_NORMAL
- en: chain-algorithm is responsible for letting the individual
  prefs: []
  type: TYPE_NORMAL
- en: nodes collectively arrive at one consistent version of the
  prefs: []
  type: TYPE_NORMAL
- en: state of ownership. Cryptography is used to implement
  prefs: []
  type: TYPE_NORMAL
- en: identification, authentication, and authorization.
  prefs: []
  type: TYPE_NORMAL
- en: • Integrity of a purely distributed peer-to-peer system of
  prefs: []
  type: TYPE_NORMAL
- en: ledgers is found in its ability to make true statements
  prefs: []
  type: TYPE_NORMAL
- en: about ownership and to ensure that only the lawful
  prefs: []
  type: TYPE_NORMAL
- en: owner can transfer his or her property rights to others.
  prefs: []
  type: TYPE_NORMAL
- en: '**S T E P**'
  prefs: []
  type: TYPE_NORMAL
- en: '7'
  prefs: []
  type: TYPE_NORMAL
- en: Spending
  prefs: []
  type: TYPE_NORMAL
- en: Money Twice
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting a vulnerability of distributed
  prefs: []
  type: TYPE_NORMAL
- en: peer-to-peer systems
  prefs: []
  type: TYPE_NORMAL
- en: In the previous step, you learned about the relation between purely distrib-
  prefs: []
  type: TYPE_NORMAL
- en: uted peer-to-peer systems and the most prominent use case of the blockchain
  prefs: []
  type: TYPE_NORMAL
- en: as a means to manage ownership. You also learned that the integrity of a
  prefs: []
  type: TYPE_NORMAL
- en: distributed peer-to-peer system of ledgers is found in its ability to make true
  prefs: []
  type: TYPE_NORMAL
- en: statements about ownership and to ensure that only the lawful owner can
  prefs: []
  type: TYPE_NORMAL
- en: transfer his or her property rights to others. But what does this statement
  prefs: []
  type: TYPE_NORMAL
- en: mean in real life? What happens if integrity is violated? This step considers
  prefs: []
  type: TYPE_NORMAL
- en: these questions in more details. In particular, this step introduces one of
    the
  prefs: []
  type: TYPE_NORMAL
- en: most important examples of violated integrity in distributed peer-to-peer sys-
  prefs: []
  type: TYPE_NORMAL
- en: 'tems: the double spending problem.'
  prefs: []
  type: TYPE_NORMAL
- en: The Metaphor
  prefs: []
  type: TYPE_NORMAL
- en: Counterfeiting bank notes is a severe crime in any country because it under-
  prefs: []
  type: TYPE_NORMAL
- en: mines the foundation and functioning of the economy by creating purchasing
  prefs: []
  type: TYPE_NORMAL
- en: power that is not backed up by valuable resources. As a result, most bank
  prefs: []
  type: TYPE_NORMAL
- en: © Daniel Drescher 2017
  prefs: []
  type: TYPE_NORMAL
- en: D. Drescher, *Blockchain Basics*, DOI 10.1007/978-1-4842-2604-9_7
  prefs: []
  type: TYPE_NORMAL
- en: '50'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 7 | Spending Money Twice***'
  prefs: []
  type: TYPE_NORMAL
- en: notes are equipped with security features that make counterfeiting impossible
  prefs: []
  type: TYPE_NORMAL
- en: or prohibitively costly at least. These security features, such as unique num-
  prefs: []
  type: TYPE_NORMAL
- en: bers, watermarks, or fluorescent fibers, work well with physical bank notes
  prefs: []
  type: TYPE_NORMAL
- en: and other physical goods. But what happens if money or goods become digital
  prefs: []
  type: TYPE_NORMAL
- en: and are managed in distributed peer-to-peer systems of ledgers? This step
  prefs: []
  type: TYPE_NORMAL
- en: explains a specific vulnerability of distributed peer-to-peer systems used for
  prefs: []
  type: TYPE_NORMAL
- en: managing ownership that is equivalent to counterfeiting bank notes. As it turns
  prefs: []
  type: TYPE_NORMAL
- en: out, this vulnerability is a prominent example of violated system integrity.
  prefs: []
  type: TYPE_NORMAL
- en: The Double Spending Problem
  prefs: []
  type: TYPE_NORMAL
- en: Let’s consider a peer-to-peer system for managing ownership of real estate.
    In
  prefs: []
  type: TYPE_NORMAL
- en: such a system, the ledgers that keep track of ownership information are main-
  prefs: []
  type: TYPE_NORMAL
- en: tained by the individual computers of its members instead of being maintained
  prefs: []
  type: TYPE_NORMAL
- en: in a central database. Hence, each peer maintains his or her own copy of the
  prefs: []
  type: TYPE_NORMAL
- en: ledger. As soon as the ownership of a house is transferred from one person
  prefs: []
  type: TYPE_NORMAL
- en: to another, all the ledgers of the system need to be updated in order to con-
  prefs: []
  type: TYPE_NORMAL
- en: tain the latest version of reality. However, passing information forward among
  prefs: []
  type: TYPE_NORMAL
- en: peers and updating the individual ledgers require time. Until the last member
  prefs: []
  type: TYPE_NORMAL
- en: of the system receives the new information and updates his or her copy of
  prefs: []
  type: TYPE_NORMAL
- en: the ledger, the system will not be consistent. Some peers already know about
  prefs: []
  type: TYPE_NORMAL
- en: the latest transfer of ownership, while other peers have not yet received that
  prefs: []
  type: TYPE_NORMAL
- en: information. The fact that not all ledgers have up-to-date information makes
  prefs: []
  type: TYPE_NORMAL
- en: them prone to be exploited by anyone who already has the latest information.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s also imagine the following situation. Person A sells his house to person
    B.
  prefs: []
  type: TYPE_NORMAL
- en: The transfer of ownership from A to B is documented in one of the ledgers in
  prefs: []
  type: TYPE_NORMAL
- en: the peer-to-peer system. This particular ledger needs to inform other peers
  prefs: []
  type: TYPE_NORMAL
- en: about this transfer, who in turn inform other peers as well, until eventually
    all peers learn about the transfer of ownership from A to B. However, suppose
  prefs: []
  type: TYPE_NORMAL
- en: that person A quickly approaches another ledger of the system and demands
  prefs: []
  type: TYPE_NORMAL
- en: 'to document a different transfer of ownership of the identical house: the sale'
  prefs: []
  type: TYPE_NORMAL
- en: from person A to person C. If this peer has not yet learned about the transfer
  prefs: []
  type: TYPE_NORMAL
- en: of ownership from A to B that happened in the past, this peer will approve
  prefs: []
  type: TYPE_NORMAL
- en: and document the transfer of ownership from A to C for the identical house.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, A was able to sell his house twice by exploiting the fact that distribut-
  prefs: []
  type: TYPE_NORMAL
- en: ing information about his first sell requires time. But B and C cannot own the
  prefs: []
  type: TYPE_NORMAL
- en: house at the same time. Only one of them is supposed to be the new and law-
  prefs: []
  type: TYPE_NORMAL
- en: ful owner. Hence, the situation is called the double spending problem.
  prefs: []
  type: TYPE_NORMAL
- en: '***Blockchain Basics***'
  prefs: []
  type: TYPE_NORMAL
- en: '51'
  prefs: []
  type: TYPE_NORMAL
- en: The Term
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to the term *blockchain*, the term *double spending* is ambiguous as
    it is used to refer to the following concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: • A problem caused by copying digital goods
  prefs: []
  type: TYPE_NORMAL
- en: • A problem that may appear in distributed peer-to-peer
  prefs: []
  type: TYPE_NORMAL
- en: systems of ledgers
  prefs: []
  type: TYPE_NORMAL
- en: • An example of violated integrity in purely distributed
  prefs: []
  type: TYPE_NORMAL
- en: peer-to-peer systems
  prefs: []
  type: TYPE_NORMAL
- en: Double Spending as a Problem of Copying Digital
  prefs: []
  type: TYPE_NORMAL
- en: Goods
  prefs: []
  type: TYPE_NORMAL
- en: In the context of copying digital goods, the double spending problem refers
    to
  prefs: []
  type: TYPE_NORMAL
- en: the fact that data on a computer can be copied without noticeable limitations.
  prefs: []
  type: TYPE_NORMAL
- en: This fact causes problems with digital money or any other data that are sup-
  prefs: []
  type: TYPE_NORMAL
- en: posed to have only one owner at a given time. Copying makes it possible to
  prefs: []
  type: TYPE_NORMAL
- en: replicate data that represent pieces of digital money and use them more than
  prefs: []
  type: TYPE_NORMAL
- en: once for making payments. This is the digital equivalent to replicating bank
  prefs: []
  type: TYPE_NORMAL
- en: notes with a copying machine. Besides being technically possible, the copy-
  prefs: []
  type: TYPE_NORMAL
- en: 'ing of digital money violates the core principle of money: an identical piece'
  prefs: []
  type: TYPE_NORMAL
- en: of money cannot be given to different people at the same time. The ability
  prefs: []
  type: TYPE_NORMAL
- en: to copy and spend digital money multiple times renders the money useless,
  prefs: []
  type: TYPE_NORMAL
- en: hence, the double spending problem.
  prefs: []
  type: TYPE_NORMAL
- en: Double Spending as a Problem of Distributed
  prefs: []
  type: TYPE_NORMAL
- en: Peer-to-Peer Systems of Ledgers
  prefs: []
  type: TYPE_NORMAL
- en: When used to describe the problem of a distributed peer-to-peer system of
  prefs: []
  type: TYPE_NORMAL
- en: ledgers, double spending problem refers to the fact that forwarding informa-
  prefs: []
  type: TYPE_NORMAL
- en: tion to all elements of such a system requires time, thus not all peers have
  prefs: []
  type: TYPE_NORMAL
- en: the same ownership information at the same time. Because not all peers have
  prefs: []
  type: TYPE_NORMAL
- en: up-to-date information, they are prone to be exploited by anyone who already
  prefs: []
  type: TYPE_NORMAL
- en: has the latest information. As a result, one may be able to transfer ownership
  prefs: []
  type: TYPE_NORMAL
- en: more than once, resulting in double spending.
  prefs: []
  type: TYPE_NORMAL
- en: '52'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 7 | Spending Money Twice***'
  prefs: []
  type: TYPE_NORMAL
- en: Double Spending as an Example of Violated Integrity
  prefs: []
  type: TYPE_NORMAL
- en: in Distributed Peer-to-Peer Systems
  prefs: []
  type: TYPE_NORMAL
- en: The use of distributed peer-to-peer systems is not restricted to managing
  prefs: []
  type: TYPE_NORMAL
- en: ownership. However, the problem of forwarding information among peers and
  prefs: []
  type: TYPE_NORMAL
- en: updating the data maintained by the members of the system stays the same,
  prefs: []
  type: TYPE_NORMAL
- en: regardless of the specific application domain. Hence, on a more abstract level,
  prefs: []
  type: TYPE_NORMAL
- en: the double spending problem can be seen as a problem of maintaining data
  prefs: []
  type: TYPE_NORMAL
- en: consistency in distributed peer-to-peer systems. Since data consistency is one
  prefs: []
  type: TYPE_NORMAL
- en: aspect of system integrity, one could say that the double spending problem is
  prefs: []
  type: TYPE_NORMAL
- en: a specific example of violated system integrity.
  prefs: []
  type: TYPE_NORMAL
- en: How to Solve the Double Spending Problem
  prefs: []
  type: TYPE_NORMAL
- en: Because double spending can have different meanings, there is no single way
    to
  prefs: []
  type: TYPE_NORMAL
- en: prevent it. Instead, many different solutions may exist. The following sections
  prefs: []
  type: TYPE_NORMAL
- en: describe some of them.
  prefs: []
  type: TYPE_NORMAL
- en: Solving Double Spending as a Problem of Copying
  prefs: []
  type: TYPE_NORMAL
- en: Digital Goods
  prefs: []
  type: TYPE_NORMAL
- en: The problem of spending digital money or any other digital assets more than
  prefs: []
  type: TYPE_NORMAL
- en: once just by copying the data is actually a problem related to the nature of
  prefs: []
  type: TYPE_NORMAL
- en: ownership. Any accepted means of mapping data that represents digital goods
  prefs: []
  type: TYPE_NORMAL
- en: to their owners will solve that problem, regardless of its specific implementa-
  prefs: []
  type: TYPE_NORMAL
- en: tion. Even a physical central book or (more realistically) an electronic ledger,
    regardless of its architecture (centralized or peer-to-peer), can ensure that
    a
  prefs: []
  type: TYPE_NORMAL
- en: digital good will only be spent once, provided the ledger works correctly all
  prefs: []
  type: TYPE_NORMAL
- en: the time.
  prefs: []
  type: TYPE_NORMAL
- en: Solving Double Spending as a Problem of a
  prefs: []
  type: TYPE_NORMAL
- en: Distributed Peer-to-Peer System of Ledgers
  prefs: []
  type: TYPE_NORMAL
- en: In this context, the architecture as well as the application domain of the sys-
  prefs: []
  type: TYPE_NORMAL
- en: tem are given. Distributed peer-to-peer systems of ledgers are often regarded
  prefs: []
  type: TYPE_NORMAL
- en: as the classical example to derive the blockchain. The explanations provided
    in
  prefs: []
  type: TYPE_NORMAL
- en: '[Step 6 highligted the r](http://dx.doi.org/10.1007/978-1-4842-2604-9_6)elation
    between the blockchain and distributed peer-to-peer systems of ledgers. Hence,
    the blockchain, as this term is used throughout'
  prefs: []
  type: TYPE_NORMAL
- en: this book, can be seen as a solution to the double spending problem in a
  prefs: []
  type: TYPE_NORMAL
- en: distributed peer-to-peer system of ledgers.
  prefs: []
  type: TYPE_NORMAL
- en: '***Blockchain Basics***'
  prefs: []
  type: TYPE_NORMAL
- en: '53'
  prefs: []
  type: TYPE_NORMAL
- en: Solving Double Spending as an Example of Violated
  prefs: []
  type: TYPE_NORMAL
- en: Integrity in Distributed Peer-to-Peer Systems
  prefs: []
  type: TYPE_NORMAL
- en: In this context, the architecture of the system is specified but the application
    domain is left unspecified. Hence, solutions on this level focus on achieving
    and maintaining integrity in distributed peer-to-peer systems, regardless of their
  prefs: []
  type: TYPE_NORMAL
- en: concrete usage. However, the concrete usage of a distributed peer-to-peer
  prefs: []
  type: TYPE_NORMAL
- en: system determines the meaning of integrity. For example, a simple file-sharing
  prefs: []
  type: TYPE_NORMAL
- en: application may consider different aspects for defining integrity as compared
  prefs: []
  type: TYPE_NORMAL
- en: to a system that manages ownership in a digital currency. Hence, the question
  prefs: []
  type: TYPE_NORMAL
- en: of whether the blockchain-technology-suite is the right tool for achieving and
  prefs: []
  type: TYPE_NORMAL
- en: maintaining system integrity cannot be answered without knowledge of the
  prefs: []
  type: TYPE_NORMAL
- en: specific application goals. Hence, it could be possible that in specific application
    areas of distributed peer-to-peer systems, other technologies, data structures,
  prefs: []
  type: TYPE_NORMAL
- en: and algorithms are more suitable for achieving and maintaining integrity.
  prefs: []
  type: TYPE_NORMAL
- en: ■ **Note** The double spending problem is a prominent example of violated integrity
    in distributed peer-to-peer systems of ledgers, and the blockchain-technology-suite
    is a tool used to solve it.
  prefs: []
  type: TYPE_NORMAL
- en: The Usage of Double Spending in This Book
  prefs: []
  type: TYPE_NORMAL
- en: In this book the term *double spending* is used to refer to a vulnerability
    that may appear in purely distributed peer-to-peer systems of ledgers.
  prefs: []
  type: TYPE_NORMAL
- en: Outlook
  prefs: []
  type: TYPE_NORMAL
- en: This step explained double spending and highlighted the importance of the
  prefs: []
  type: TYPE_NORMAL
- en: blockchain to achieve integrity in purely distributed peer-to-peer systems.
  prefs: []
  type: TYPE_NORMAL
- en: The next steps focus on how the blockchain achieves and maintains integrity.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs: []
  type: TYPE_NORMAL
- en: • The term *double spending* is ambiguous; it has different
  prefs: []
  type: TYPE_NORMAL
- en: meanings.
  prefs: []
  type: TYPE_NORMAL
- en: '• Double spending can refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: • A problem caused by copying digital goods
  prefs: []
  type: TYPE_NORMAL
- en: '54'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 7 | Spending Money Twice***'
  prefs: []
  type: TYPE_NORMAL
- en: • A problem that may appear in a distributed peer-to-peer
  prefs: []
  type: TYPE_NORMAL
- en: system of ledgers
  prefs: []
  type: TYPE_NORMAL
- en: • An example of violating the integrity of distributed
  prefs: []
  type: TYPE_NORMAL
- en: peer-to-peer systems
  prefs: []
  type: TYPE_NORMAL
- en: • In this book the term double spending is used to refer to
  prefs: []
  type: TYPE_NORMAL
- en: a vulnerability of purely distributed peer-to-peer systems
  prefs: []
  type: TYPE_NORMAL
- en: of ledgers.
  prefs: []
  type: TYPE_NORMAL
- en: • The blockchain is a means to solve the double spending
  prefs: []
  type: TYPE_NORMAL
- en: problem.
  prefs: []
  type: TYPE_NORMAL
- en: '**S T A G E**'
  prefs: []
  type: TYPE_NORMAL
- en: III
  prefs: []
  type: TYPE_NORMAL
- en: How the
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain
  prefs: []
  type: TYPE_NORMAL
- en: Works
  prefs: []
  type: TYPE_NORMAL
- en: This learning stage is the centerpiece of this book because it explains how
    the
  prefs: []
  type: TYPE_NORMAL
- en: blockchain works internally. The 14 learning steps in this stage will guide
    you
  prefs: []
  type: TYPE_NORMAL
- en: through all of the concepts of the blockchain and their underlying technologies.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this stage, you will have reached a solid understanding of all
    the major concepts of the blockchain, how they work in isolation, and how they
  prefs: []
  type: TYPE_NORMAL
- en: interact in order to create the big machinery that is called the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: '**S T E P**'
  prefs: []
  type: TYPE_NORMAL
- en: '8'
  prefs: []
  type: TYPE_NORMAL
- en: Planning the
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain
  prefs: []
  type: TYPE_NORMAL
- en: The basic concepts of managing ownership with
  prefs: []
  type: TYPE_NORMAL
- en: the blockchain
  prefs: []
  type: TYPE_NORMAL
- en: The preceding steps uncovered the relation between trust, integrity, purely
    dis-
  prefs: []
  type: TYPE_NORMAL
- en: tributed peer-to-peer systems, and the blockchain. As a result, you now have
  prefs: []
  type: TYPE_NORMAL
- en: a good understanding of what the blockchain is, why it is needed, and what
  prefs: []
  type: TYPE_NORMAL
- en: problem it solves. However, you still do not know how the blockchain works
  prefs: []
  type: TYPE_NORMAL
- en: internally. This step provides a first impression of how the blockchain works
  prefs: []
  type: TYPE_NORMAL
- en: by explaining the general application scenario that will guide you through the
  prefs: []
  type: TYPE_NORMAL
- en: succeeding steps. It also highlights the major tasks in designing a blockchain
  prefs: []
  type: TYPE_NORMAL
- en: for managing ownership and provides an overview of its major concepts. This
  prefs: []
  type: TYPE_NORMAL
- en: step serves as the starting point for the succeeding steps that will discuss
    in
  prefs: []
  type: TYPE_NORMAL
- en: great detail the concepts and technologies that make up the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: The Goal
  prefs: []
  type: TYPE_NORMAL
- en: The goal here is to understand the concepts that make up the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: For didactical reasons, I will present the challenge of designing your own sys-
  prefs: []
  type: TYPE_NORMAL
- en: tem for managing ownership. Hence, you will face the same challenges that
  prefs: []
  type: TYPE_NORMAL
- en: © Daniel Drescher 2017
  prefs: []
  type: TYPE_NORMAL
- en: D. Drescher, *Blockchain Basics*, DOI 10.1007/978-1-4842-2604-9_8
  prefs: []
  type: TYPE_NORMAL
- en: '58'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 8 | Planning the Blockchain***'
  prefs: []
  type: TYPE_NORMAL
- en: 'the inventor of the blockchain once faced and successfully solved: designing'
  prefs: []
  type: TYPE_NORMAL
- en: a piece of software that manages ownership in a purely distributed peer-to-
  prefs: []
  type: TYPE_NORMAL
- en: peer system of ledgers that operates in a completely open and untrustworthy
  prefs: []
  type: TYPE_NORMAL
- en: environment.
  prefs: []
  type: TYPE_NORMAL
- en: Starting Point
  prefs: []
  type: TYPE_NORMAL
- en: As a starting point, the major facts about the system under consideration can
  prefs: []
  type: TYPE_NORMAL
- en: 'be summarized as following:'
  prefs: []
  type: TYPE_NORMAL
- en: • The system will be a purely distributed peer-to-peer system,
  prefs: []
  type: TYPE_NORMAL
- en: which is made of the computational resources contributed
  prefs: []
  type: TYPE_NORMAL
- en: by its users.
  prefs: []
  type: TYPE_NORMAL
- en: • The peer-to-peer system uses the Internet as a network
  prefs: []
  type: TYPE_NORMAL
- en: for connecting the individual nodes.
  prefs: []
  type: TYPE_NORMAL
- en: • Neither the number of nodes nor their trustworthiness
  prefs: []
  type: TYPE_NORMAL
- en: and reliability is known.
  prefs: []
  type: TYPE_NORMAL
- en: • The goal of the peer-to-peer system is the management
  prefs: []
  type: TYPE_NORMAL
- en: of ownership of a digital good (e.g., sales bonus points or
  prefs: []
  type: TYPE_NORMAL
- en: digital money).
  prefs: []
  type: TYPE_NORMAL
- en: The Path to Follow
  prefs: []
  type: TYPE_NORMAL
- en: There are seven major tasks that need to be addressed when designing and
  prefs: []
  type: TYPE_NORMAL
- en: developing a software system that manages ownership by using a purely
  prefs: []
  type: TYPE_NORMAL
- en: distributed peer-to-peer system of ledgers in an open and untrustworthy
  prefs: []
  type: TYPE_NORMAL
- en: 'environment:'
  prefs: []
  type: TYPE_NORMAL
- en: • Describing ownership
  prefs: []
  type: TYPE_NORMAL
- en: • Protecting ownership
  prefs: []
  type: TYPE_NORMAL
- en: • Storing transaction data
  prefs: []
  type: TYPE_NORMAL
- en: • Preparing ledgers to be distributed in an untrustworthy
  prefs: []
  type: TYPE_NORMAL
- en: environment
  prefs: []
  type: TYPE_NORMAL
- en: • Distributing the ledgers
  prefs: []
  type: TYPE_NORMAL
- en: • Adding new transaction to the ledgers
  prefs: []
  type: TYPE_NORMAL
- en: • Deciding which ledgers represents the truth
  prefs: []
  type: TYPE_NORMAL
- en: '***Blockchain Basics***'
  prefs: []
  type: TYPE_NORMAL
- en: '59'
  prefs: []
  type: TYPE_NORMAL
- en: 'Task 1: Describing Ownership'
  prefs: []
  type: TYPE_NORMAL
- en: Before you can start developing the blockchain, you need to ask yourself what
  prefs: []
  type: TYPE_NORMAL
- en: you want to do with it. Since you will want to design a software system that
  prefs: []
  type: TYPE_NORMAL
- en: manages ownership, you have to decide how to describe ownership first. It
  prefs: []
  type: TYPE_NORMAL
- en: turns out that transactions are a good way to describe any transfer of ownership,
    and the complete history of transactions is the key to identifying the current
  prefs: []
  type: TYPE_NORMAL
- en: owners. Hence, S[tep 9 will explain transactions,](http://dx.doi.org/10.1007/978-1-4842-2604-9_9)
    what they are, how you can describe them, and how you can use them to clarify
    ownership.
  prefs: []
  type: TYPE_NORMAL
- en: 'Task 2: Protecting Ownership'
  prefs: []
  type: TYPE_NORMAL
- en: Describing ownership by using transactions is just the starting point. Moreover,
    you need a way to prevent people from accessing the property of others. In
  prefs: []
  type: TYPE_NORMAL
- en: real life, you can easily prevent people from using your car or from entering
  prefs: []
  type: TYPE_NORMAL
- en: your house by using doors with locks. It turns out that cryptography provides
  prefs: []
  type: TYPE_NORMAL
- en: a way to protect transactions on an individual level, similar to the way doors
  prefs: []
  type: TYPE_NORMAL
- en: with locks protect your individual car or house.
  prefs: []
  type: TYPE_NORMAL
- en: 'Protecting ownership has three major elements: identifying and authenticating'
  prefs: []
  type: TYPE_NORMAL
- en: owners as well as restricting access to the property to its owners. S[teps 12](http://dx.doi.org/10.1007/978-1-4842-2604-9_12)
    and
  prefs: []
  type: TYPE_NORMAL
- en: '[13](http://dx.doi.org/10.1007/978-1-4842-2604-9_13) will explain these concepts
    in more details. However, these steps rely on the concept of hash values. If you
    have never heard about hash values before, you'
  prefs: []
  type: TYPE_NORMAL
- en: do not have to worry. I devoted S[teps 10](http://dx.doi.org/10.1007/978-1-4842-2604-9_10)
    [and 11 to explaining hash values in](http://dx.doi.org/10.1007/978-1-4842-2604-9_11)
  prefs: []
  type: TYPE_NORMAL
- en: great detail. These two steps will also offer interesting insights for those
    who already have a technical background or know about hash values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Task 3: Storing Transaction Data'
  prefs: []
  type: TYPE_NORMAL
- en: Describing ownership by means of transactions and having security measures
  prefs: []
  type: TYPE_NORMAL
- en: that protect ownership on the level of individual transactions are important
  prefs: []
  type: TYPE_NORMAL
- en: steps toward the goal of designing a software system that manages ownership.
  prefs: []
  type: TYPE_NORMAL
- en: However, you need a way to store the whole history of transactions, as this
  prefs: []
  type: TYPE_NORMAL
- en: history is used to clarify ownership. Since the transaction history is the core
  prefs: []
  type: TYPE_NORMAL
- en: element in clarifying ownership, it must be stored in a secure way. It turns
  prefs: []
  type: TYPE_NORMAL
- en: out that the blockchain-data-structure is the digital equivalent to a ledger.
  prefs: []
  type: TYPE_NORMAL
- en: Steps [14](http://dx.doi.org/10.1007/978-1-4842-2604-9_14) [and 15](http://dx.doi.org/10.1007/978-1-4842-2604-9_15)
    explain the requirement that the blockchain-data-structure has to fulfill in order
    to serve as a digital ledger and how it is implemented.
  prefs: []
  type: TYPE_NORMAL
- en: '60'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 8 | Planning the Blockchain***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Task 4: Preparing Ledgers to Be Distributed in an'
  prefs: []
  type: TYPE_NORMAL
- en: Untrustworthy Environment
  prefs: []
  type: TYPE_NORMAL
- en: Having one isolated ledger or blockchain-data-structure that contains trans-
  prefs: []
  type: TYPE_NORMAL
- en: action data is great, but your aim is to design a distributed peer-to-peer system
    of ledgers that operates in an untrustworthy environment. Hence, you will
  prefs: []
  type: TYPE_NORMAL
- en: have copies of the ledger running on untrustworthy nodes in an untrust-
  prefs: []
  type: TYPE_NORMAL
- en: worthy network. Furthermore, you will hand over the control of the ledgers
  prefs: []
  type: TYPE_NORMAL
- en: to the whole network without having any central point of control or coordi-
  prefs: []
  type: TYPE_NORMAL
- en: nation. How can you prevent the ledgers from being forged or manipulated
  prefs: []
  type: TYPE_NORMAL
- en: (e.g., by deleting transactions from the history or adding illegal transactions
  prefs: []
  type: TYPE_NORMAL
- en: to it)? It turns out that the best way to prevent the transaction history from
  prefs: []
  type: TYPE_NORMAL
- en: being changed is to make it unchangeable. This means the ledgers and there-
  prefs: []
  type: TYPE_NORMAL
- en: fore the transaction history cannot be changed once written. As a result,
  prefs: []
  type: TYPE_NORMAL
- en: you will not have to fear that the ledgers will be tampered with or forged
  prefs: []
  type: TYPE_NORMAL
- en: because they cannot be changed in the first place. However, having a distrib-
  prefs: []
  type: TYPE_NORMAL
- en: uted peer-to-peer system of ledgers that can never be changed sounds like a
  prefs: []
  type: TYPE_NORMAL
- en: very secure but pretty useless thing because it will not allow you to add new
  prefs: []
  type: TYPE_NORMAL
- en: transactions. Hence, the challenge of the blockchain-data-structure is to be
  prefs: []
  type: TYPE_NORMAL
- en: unchangeable, on the one hand, while accepting new transactions being added
  prefs: []
  type: TYPE_NORMAL
- en: to it, on the other hand. This sounds like a contradiction in terms, but it
    turns out that this is achievable with a technical trick that is explained in
    Step [16\.](http://dx.doi.org/10.1007/978-1-4842-2604-9_16)
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is a blockchain-data-structure that is append-only: it is possible'
  prefs: []
  type: TYPE_NORMAL
- en: to add new transactions, but it is nearly impossible to change data that were
  prefs: []
  type: TYPE_NORMAL
- en: added in the past.
  prefs: []
  type: TYPE_NORMAL
- en: 'Task 5: Distributing the Ledgers'
  prefs: []
  type: TYPE_NORMAL
- en: Once the ledger is append-only, you can create a distributed peer-to-peer
  prefs: []
  type: TYPE_NORMAL
- en: system of ledgers by making copies of it available to everyone who asks
  prefs: []
  type: TYPE_NORMAL
- en: for it. However, just providing copies of append-only ledgers does not fulfill
  prefs: []
  type: TYPE_NORMAL
- en: your goals. A distributed system that manages ownership involves interac-
  prefs: []
  type: TYPE_NORMAL
- en: tion between the peers or nodes, respectively. Hence, Step [17](http://dx.doi.org/10.1007/978-1-4842-2604-9_17)
    explains how the nodes in the system interact with one another and what information
    is
  prefs: []
  type: TYPE_NORMAL
- en: exchanged among them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Task 6: Adding New Transactions to the Ledgers'
  prefs: []
  type: TYPE_NORMAL
- en: The distributed peer-to-peer system will consist of members whose comput-
  prefs: []
  type: TYPE_NORMAL
- en: ers maintain individual copies of an append-only blockchain-data-structure.
  prefs: []
  type: TYPE_NORMAL
- en: Since the data structure allows you to add new transaction data, you will
  prefs: []
  type: TYPE_NORMAL
- en: have to ensure that only valid and authorized transactions are added. It turns
  prefs: []
  type: TYPE_NORMAL
- en: out that this is possible by allowing all members of the peer-to-peer system
  prefs: []
  type: TYPE_NORMAL
- en: '***Blockchain Basics***'
  prefs: []
  type: TYPE_NORMAL
- en: '61'
  prefs: []
  type: TYPE_NORMAL
- en: to add new data and additionally turning each member of the peer-to-peer
  prefs: []
  type: TYPE_NORMAL
- en: system into supervisors of their peers. As a result, all members will supervise
  prefs: []
  type: TYPE_NORMAL
- en: one another and point out any mistakes made by their peers. Step [18](http://dx.doi.org/10.1007/978-1-4842-2604-9_18)
    explains this approach in more detail as well as the incentives given to the peers
    for
  prefs: []
  type: TYPE_NORMAL
- en: fulfilling their role.
  prefs: []
  type: TYPE_NORMAL
- en: 'Task 7: Deciding Which Ledgers Represent the'
  prefs: []
  type: TYPE_NORMAL
- en: Truth
  prefs: []
  type: TYPE_NORMAL
- en: Once new transactions can be added to the individual ledgers in the peer-
  prefs: []
  type: TYPE_NORMAL
- en: to-peer system, one runs into a problem that is typical for any distributed
  prefs: []
  type: TYPE_NORMAL
- en: 'peer-to-peer system: different peers may have received different transactions'
  prefs: []
  type: TYPE_NORMAL
- en: and soon the history of transactions maintained by them differs. Hence, differ-
  prefs: []
  type: TYPE_NORMAL
- en: ent versions of the transaction history can exist in the peer-to-peer system.
  prefs: []
  type: TYPE_NORMAL
- en: Since the transaction history is the basis for identifying lawful owners, having
    different conflicting transaction histories is a serious threat to the integrity
    of the system. Hence, it is important to find a way either to prevent the emergence
    of different transaction histories in the first place or to find a way to
  prefs: []
  type: TYPE_NORMAL
- en: decide which transaction history represents the truth. Due to the nature of
    a
  prefs: []
  type: TYPE_NORMAL
- en: purely distributed peer-to-peer system, the former approach is not possible.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, you need a criterion for how to find and choose one transaction
  prefs: []
  type: TYPE_NORMAL
- en: 'history that represents the truth. But there is another problem: there is no'
  prefs: []
  type: TYPE_NORMAL
- en: central authority in a purely distributed peer-to-peer system that can declare
  prefs: []
  type: TYPE_NORMAL
- en: which transaction history has to be chosen. It turns out that one can solve
  prefs: []
  type: TYPE_NORMAL
- en: that problem by making every node in the peer-to-peer system decide on its
  prefs: []
  type: TYPE_NORMAL
- en: own which transaction history represents the truth in a way that the majority
  prefs: []
  type: TYPE_NORMAL
- en: of the peers independently agree on that decision. It also turns out that the
  prefs: []
  type: TYPE_NORMAL
- en: way in which the blockchain lets you add new transactions to the append-
  prefs: []
  type: TYPE_NORMAL
- en: only blockchain-data-structure already contains the solution to this problem.
  prefs: []
  type: TYPE_NORMAL
- en: S[tep 19 explains these criteria in detail and ho](http://dx.doi.org/10.1007/978-1-4842-2604-9_19)w
    they are used.
  prefs: []
  type: TYPE_NORMAL
- en: Outlook
  prefs: []
  type: TYPE_NORMAL
- en: This step identified seven tasks that provide a challenging intellectual journey
    through the concepts that constitute the blockchain. Once you fulfill these
  prefs: []
  type: TYPE_NORMAL
- en: 'tasks, you will arrive at the summit: an understanding of the blockchain. [Step
    21](http://dx.doi.org/10.1007/978-1-4842-2604-9_21)'
  prefs: []
  type: TYPE_NORMAL
- en: is the point where you will put all of these concepts together and enjoy the
  prefs: []
  type: TYPE_NORMAL
- en: results of this learning effort. Step [21](http://dx.doi.org/10.1007/978-1-4842-2604-9_21)
    will be an overview chapter like this one, but it will draw on the technical knowledge
    you will have acquired in the
  prefs: []
  type: TYPE_NORMAL
- en: meantime.
  prefs: []
  type: TYPE_NORMAL
- en: '62'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 8 | Planning the Blockchain***'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs: []
  type: TYPE_NORMAL
- en: • In order to design a purely distributed peer-to-peer
  prefs: []
  type: TYPE_NORMAL
- en: system of ledgers for managing ownership, one has to
  prefs: []
  type: TYPE_NORMAL
- en: 'address the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: • Describing ownership
  prefs: []
  type: TYPE_NORMAL
- en: • Protecting ownership from unauthorized access
  prefs: []
  type: TYPE_NORMAL
- en: • Storing transaction data
  prefs: []
  type: TYPE_NORMAL
- en: • Preparing ledgers to be distributed in an
  prefs: []
  type: TYPE_NORMAL
- en: untrustworthy environment
  prefs: []
  type: TYPE_NORMAL
- en: • Forming a system of distributed the ledgers
  prefs: []
  type: TYPE_NORMAL
- en: • Adding and verifying new transactions to the ledgers
  prefs: []
  type: TYPE_NORMAL
- en: • Deciding which ledgers represent the truth
  prefs: []
  type: TYPE_NORMAL
- en: • The tasks outlined above will be addressed in the following
  prefs: []
  type: TYPE_NORMAL
- en: 12 steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**S T E P**'
  prefs: []
  type: TYPE_NORMAL
- en: '9'
  prefs: []
  type: TYPE_NORMAL
- en: Documenting
  prefs: []
  type: TYPE_NORMAL
- en: Ownership
  prefs: []
  type: TYPE_NORMAL
- en: Using the course of history as evidence for the
  prefs: []
  type: TYPE_NORMAL
- en: current state of ownership
  prefs: []
  type: TYPE_NORMAL
- en: This step considers the task of describing ownership in a way that is useful
    for a purely distributed peer-to-peer system of ledgers. This step explains how
  prefs: []
  type: TYPE_NORMAL
- en: the blockchain documents ownership and handles the transfer of ownership.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, this step points out the importance of ordering when documenting
  prefs: []
  type: TYPE_NORMAL
- en: the transfer of ownership. Finally, this step highlights the importance of the
  prefs: []
  type: TYPE_NORMAL
- en: integrity of transaction data for the integrity of the whole system.
  prefs: []
  type: TYPE_NORMAL
- en: The Metaphor
  prefs: []
  type: TYPE_NORMAL
- en: A relay race is a race between teams of runners, where each team member
  prefs: []
  type: TYPE_NORMAL
- en: covers only a part of the total distance. During the race, each runner must
  prefs: []
  type: TYPE_NORMAL
- en: hand off a specific item, the so-called baton, to the next runner within a
  prefs: []
  type: TYPE_NORMAL
- en: certain zone marked on the track. At any given time during the race, only one
  prefs: []
  type: TYPE_NORMAL
- en: member of the competing teams carries a baton. In order to determine which
  prefs: []
  type: TYPE_NORMAL
- en: member of a given team is currently carrying the baton, it is sufficient to
  prefs: []
  type: TYPE_NORMAL
- en: know to whom of the team the baton was handed over at the latest hand off.
  prefs: []
  type: TYPE_NORMAL
- en: © Daniel Drescher 2017
  prefs: []
  type: TYPE_NORMAL
- en: D. Drescher, *Blockchain Basics*, DOI 10.1007/978-1-4842-2604-9_9
  prefs: []
  type: TYPE_NORMAL
- en: '64'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 9 | Documenting Ownership***'
  prefs: []
  type: TYPE_NORMAL
- en: In order to keep track of who carried a baton at any given time, one needs
  prefs: []
  type: TYPE_NORMAL
- en: to record the time of each hand off and the athletes who were involved. This
  prefs: []
  type: TYPE_NORMAL
- en: step explains how the blockchain treats ownership in a similar fashion to that
  prefs: []
  type: TYPE_NORMAL
- en: of the way relay races utilize batons.
  prefs: []
  type: TYPE_NORMAL
- en: The Goal
  prefs: []
  type: TYPE_NORMAL
- en: The goal is the documentation of ownership in a transparent and compre-
  prefs: []
  type: TYPE_NORMAL
- en: hensible way. Anyone who reads that documentation should be able to make
  prefs: []
  type: TYPE_NORMAL
- en: an unambiguous statement concerning the association of the goods to its
  prefs: []
  type: TYPE_NORMAL
- en: owners.
  prefs: []
  type: TYPE_NORMAL
- en: The Challenge
  prefs: []
  type: TYPE_NORMAL
- en: The challenge is to find documentation of ownership that not just claims that
  prefs: []
  type: TYPE_NORMAL
- en: someone is the owner of something, but also provides evidence of ownership
  prefs: []
  type: TYPE_NORMAL
- en: and hence serves as proof of ownership.
  prefs: []
  type: TYPE_NORMAL
- en: The Idea
  prefs: []
  type: TYPE_NORMAL
- en: Instead of describing the current state of ownership by inventory data (i.e.,
    by listing the current possessions of all owners), one maintains a list of all
    transfers of ownership in a ledger in an ongoing fashion. Every transfer of ownership
  prefs: []
  type: TYPE_NORMAL
- en: is described by transaction data that clearly point out which owner hands
  prefs: []
  type: TYPE_NORMAL
- en: off ownership of what item and to whom at what time. The whole history
  prefs: []
  type: TYPE_NORMAL
- en: of transaction data stored in a ledger becomes an audit trail that provides
  prefs: []
  type: TYPE_NORMAL
- en: evidence of how everyone achiev[ed his or her possession.1 T](index_split_000.html#69)his
    is equivalent to tracking every hand off of the baton in a relay race, which allows
    everyone
  prefs: []
  type: TYPE_NORMAL
- en: to reconstruct the whole race later on.
  prefs: []
  type: TYPE_NORMAL
- en: A Short Detour to Inventory and Transaction
  prefs: []
  type: TYPE_NORMAL
- en: Data
  prefs: []
  type: TYPE_NORMAL
- en: There are two competing ways to describe ownership—through inventory
  prefs: []
  type: TYPE_NORMAL
- en: data or transaction data. *Inventory data* describe the current state of ownership.
    They are similar to a bank account statement that just displays the
  prefs: []
  type: TYPE_NORMAL
- en: amount of money that is currently available. *Transaction data* describe transfers
    of ownership. They are similar to a bank account statement that lists every
  prefs: []
  type: TYPE_NORMAL
- en: '1Nakamoto, Satoshi. Bitcoin: A peer-to-peer electronic cash system (2008).'
  prefs: []
  type: TYPE_NORMAL
- en: '***Blockchain Basics***'
  prefs: []
  type: TYPE_NORMAL
- en: '65'
  prefs: []
  type: TYPE_NORMAL
- en: withdrawal, deposit, and transferal of money. One can derive inventory data
  prefs: []
  type: TYPE_NORMAL
- en: by aggregating transaction data. Besides the fact that both inventory data and
  prefs: []
  type: TYPE_NORMAL
- en: transaction data describe ownership, their underlying philosophy differs
  prefs: []
  type: TYPE_NORMAL
- en: dramatically. Inventory data just state or claim ownership, while transaction
  prefs: []
  type: TYPE_NORMAL
- en: data explain and thereby justify ownership. However, inventory data are often
  prefs: []
  type: TYPE_NORMAL
- en: considered more convenient as they immediately state the fact that is inter-
  prefs: []
  type: TYPE_NORMAL
