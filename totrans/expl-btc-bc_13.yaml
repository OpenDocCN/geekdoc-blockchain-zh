- en: '[CHAPTER 11](toc.xhtml#c11)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[第11章](toc.xhtml#c11)'
- en: '[Smart Contract and Other Useful Transactions](toc.xhtml#c11)'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[智能合约与其他有用交易](toc.xhtml#c11)'
- en: In the previous chapter, you learnt to verify and create transactions. You also
    learnt how to check their inputs and outputs and correctness before publishing
    and understood the different ways to publish a transaction. In this chapter, you
    will learn scripting in more detail. You will learn how simple but interesting
    use cases can be implemented using scripting language and other properties of
    Bitcoin transactions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，你学习了如何验证和创建交易。你也学会了如何在发布之前检查它们的输入和输出以及正确性，并理解了发布交易的不同方法。在本章中，你将详细学习脚本编程。你将了解如何使用脚本语言实现简单但有趣的使用案例以及其他比特币交易的属性。
- en: When we think about smart contract, we think about Ethereum, Cardano, Binance
    Smart Chain, etc. We ignore the network that pioneered in smart contract, which
    is Bitcoin. Bitcoin is the most secure cryptocurrency network. As smart contract
    and digital properties might be very valuable, securing them on Bitcoin network
    could be the best option if it is technically feasible.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想到智能合约时，我们会想到以太坊、卡尔达诺、币安智能链等。我们忽略了在智能合约方面领先的网络，即比特币。比特币是最安全的加密货币网络。由于智能合约和数字财产可能非常有价值，如果在技术上可行，将它们保存在比特币网络上可能是最佳选择。
- en: In this chapter, we will go deeper into scripting and build use cases for a
    few useful smart contracts using Bitcoin scripting language. We will also implement
    some other use cases that are not contracts between parties but are useful in
    solving real requirements.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入研究脚本编程，并使用比特币脚本语言构建一些有用智能合约的使用案例。我们还将实现一些其他用例，这些用例不是各方之间的合同，但在解决实际需求方面很有用。
- en: '[Structure](toc.xhtml#s231a)'
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[结构](toc.xhtml#s231a)'
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Script opcodes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本操作码
- en: Digital property
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字财产
- en: Document timestamping
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档时间戳
- en: Time locked transactions
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间锁定交易
- en: Time locked payment
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间锁定支付
- en: Payment with relative locktime
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有相对锁定时间的支付
- en: Smart contract
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约
- en: Solution to trust issue in payments
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决支付中的信任问题
- en: Simple multi-signature payment
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单多签名支付
- en: Improved payment with relative locktime
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有相对锁定时间的改进支付
- en: Payments involving escrow
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 涉及托管的支付
- en: Payment involving secret identifier
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 涉及秘密标识符的支付
- en: Collaborative transactions
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协作交易
- en: Charity use case
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 慈善用例
- en: Subsidy use case
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 补贴用例
- en: Planned contribution within a group
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小组内计划的贡献
- en: '[Objectives](toc.xhtml#s232a)'
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[目标](toc.xhtml#s232a)'
- en: The objective of this chapter is to help you understand the broader scope of
    Bitcoin scripting language. Additionally, it will help you learn to create transactions
    for different scenarios, including smart contract and other useful transactions
    that were not covered in the previous chapters.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是帮助你理解比特币脚本语言更广泛的应用范围。此外，它还将帮助你学习为不同场景创建交易，包括智能合约和其他在前面章节中未涵盖的有用交易。
- en: '[Script opcodes](toc.xhtml#s233a)'
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[脚本操作码](toc.xhtml#s233a)'
- en: In the previous chapter, we used only a few opcodes that are used in standard
    P2PKH and m-of-n-multisig P2SH scripts. While these are sufficient for basic money
    transfers between individuals and groups, a more complex script might be needed.
    In this chapter, we will use a few more opcodes.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们只使用了在标准P2PKH和m-of-n-multisig P2SH脚本中使用的少数操作码。尽管这些足以处理个人和群体之间的基本货币转账，但可能需要更复杂的脚本。在本章中，我们将使用一些更多的操作码。
- en: '[Digital property](toc.xhtml#s234a)'
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[数字财产](toc.xhtml#s234a)'
- en: Digital asset or digital property is the digital representation of an asset.
    The property can be represented as QR code or identifier or hash of specification
    or value. The asset ownership can be changed by the owner of the asset. It can
    also be lent or rented online. Using Bitcoin transaction and scripting language,
    we can implement some of those features. Timestamping is one of the important
    properties of digital asset management, which we will cover in this subtopic.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 数字资产或数字财产是资产的数字表示。财产可以表示为二维码或标识符或规格的哈希或价值。资产所有权可以由资产的所有者改变。它还可以在线借出或出租。使用比特币交易和脚本语言，我们可以实现其中一些功能。时间戳是数字资产管理的重要属性之一，我们将在本子主题中介绍。
- en: '[Document timestamping](toc.xhtml#s235a)'
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[文档时间戳](toc.xhtml#s235a)'
- en: Timestamping a document is necessary for it to be legally binding and for it
    to be part of a contract. Transactions in a block can be associated with the timestamp
    of the block, and it is immutable. If a transaction holds hash of the content
    of a document, then we can consider the document as timestamped. However, for
    this to be legally binding, governments need to recognize Bitcoin blockchain as
    both immutable and having the correct timestamp.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使文档具有法律约束力，并且成为合同的一部分，对其进行时间戳处理是必要的。区块中的交易可以与块的时间戳相关联，并且是不可变的。如果一个交易持有文档内容的散列值，那么我们可以认为该文档已被时间戳。然而，为了具有法律约束力，政府需要承认比特币区块链既是不可变的，又具有正确的时间戳。
- en: 'The following is a short story written by my daughter, for which we are generating
    a hash and will add it to a transaction:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我女儿写的一篇短故事，我们将为它生成散列值并将其添加到交易中：
- en: 'Best Friend Lunch Party: One day two best friends, a monkey and a crocodile
    decided to have lunch together in a farm. The next day, they passed the river
    and reached the farm. After a heavy meal the monkey got up and started growling
    loudly. The frightened crocodile pleaded the monkey to stop. But the monkey said,
    ‘I have a habit of growling after every meal, I cannot help it’. The monkey was
    on the crocodile’s back while crossing the river back home. When they were halfway
    through the river, the crocodile took a dip in the water. When the monkey was
    frightened, the crocodile said, ‘I have a habit of taking a dip in the water after
    every meal, I cannot help it’. Monkey understood his mistake.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳朋友午餐派对：有一天，两只最好的朋友，一只猴子和一只鳄鱼决定在农场一起吃午饭。第二天，他们穿过河流到达农场。在丰盛的一餐后，猴子站起来大声咆哮。吓坏了的鳄鱼请求猴子停下来。但猴子说：“我每餐后都有咆哮的习惯，我忍不住”。猴子骑在鳄鱼背上穿越河流回家。当他们走到河中的一半时，鳄鱼在水里泡了一下。当猴子害怕时，鳄鱼说：“我每餐后都有泡水的习惯，我忍不住”。猴子明白了他的错误。
- en: 'SHA256 of this story:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个故事的SHA256散列值：
- en: '`3365b392ee14def189190638a532f6042446b74c98f186e9b595f77e47817e05`'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`3365b392ee14def189190638a532f6042446b74c98f186e9b595f77e47817e05`'
- en: 'The following is the code to get the hash of the preceding story:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为前故事获取散列值的代码：
- en: '`def contentHash(story: str):`'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`def contentHash(story: str):`'
- en: '`content_h = hashlib.sha256(story.encode(‘ascii’)).digest()`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`content_h = hashlib.sha256(story.encode(‘ascii’)).digest()`'
- en: '`return content_h`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`return content_h`'
- en: To add this to a transaction, we need to pay a small network fee, transfer bitcoins
    from one address to another, and use `**OP_RETURN**` to capture the above hash.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此添加到交易中，我们需要支付一点网络费用，将比特币从一个地址转移到另一个地址，并使用`**OP_RETURN**`捕获上面的散列值。
- en: 'We generate the first block and send the newly mined bitcoins to an address
    as shown in *[figure 11.1](#fig11_1)*:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们生成第一个区块，并将新挖掘的比特币发送到如图*[11.1](#fig11_1)*所示的地址：
- en: '![](images/Figure-11.1.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-11.1.jpg)'
- en: '**Figure 11.1:** Generated Block hash'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**图11.1：生成的区块散列**'
- en: 'The following are the transactions included in the newly mined block:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是新挖掘区块中包含的交易：
- en: '![](images/Figure-11.2.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-11.2.jpg)'
- en: '**Figure 11.2:** Transaction ID of coinbase transaction'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**图11.2：币基交易的交易ID**'
- en: In *[Chapter 10, Create and Validate Transactions](c10.xhtml)* under the topic
    *Building P2PKH transaction*, we have created P2PKH transaction with two inputs
    and two outputs. We modify the code to also support `**OP_RETURN**` output.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在*[第10章，创建和验证交易](c10.xhtml)*中的*构建P2PKH交易*主题下，我们创建了一个具有两个输入和两个输出的P2PKH交易。我们修改代码以支持`**OP_RETURN**`输出。
- en: 'This is the code that provides transaction structure to the transaction builder
    program:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为交易构建程序提供交易结构的代码：
- en: '`def createTransactionStruct():`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`def createTransactionStruct():`'
- en: '`txn = {}`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`txn = {}`'
- en: '`txn[‘version’] = 1`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`txn[‘version’] = 1`'
- en: '`txn[‘input_count’] = 1`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`txn[‘input_count’] = 1`'
- en: '`txn[‘inputs’] = []`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`txn[‘inputs’] = []`'
- en: '`input0 = {}`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`input0 = {}`'
- en: '`input0[‘prevtxn’] = ‘5efcf04e32f061b9c4894f5b3a59fb3d8c5c56a6e7340b89b3a1a9ebacca998f’`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`input0[‘prevtxn’] = ‘5efcf04e32f061b9c4894f5b3a59fb3d8c5c56a6e7340b89b3a1a9ebacca998f’`'
- en: '`input0[‘prevtxnindex’] = 0`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`input0[‘prevtxnindex’] = 0`'
- en: '`input0[‘script_type’] = ‘P2PKH’`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`input0[‘script_type’] = ‘P2PKH’`'
- en: '`input0[‘privkeys’] = [‘KwfxnwxpPG1RmhU8jaU8Ron4m1KZGymLAFNaMnSTonoZ7AQfnV53’]`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`input0[‘privkeys’] = [‘KwfxnwxpPG1RmhU8jaU8Ron4m1KZGymLAFNaMnSTonoZ7AQfnV53’]`'
- en: '`input0[‘script_pubkey’] = ‘76a91481d7033c19dcec645cb3f86ce41678756850ba4d88ac’`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`input0[‘script_pubkey’] = ‘76a91481d7033c19dcec645cb3f86ce41678756850ba4d88ac’`'
- en: '`input0[‘hash_type’] = SIGHASH_ALL`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`input0[‘hash_type’] = SIGHASH_ALL`'
- en: '`txn[‘inputs’].append(input0)`'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`txn[‘inputs’].append(input0)`'
- en: '`txn[‘out_count’] = 2`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`txn[‘out_count’] = 2`'
- en: '`txn[‘outputs’] = []`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`txn[‘outputs’] = []`'
- en: '`output0 = {}`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`output0 = {}`'
- en: '`output0[‘satoshis’] = 4999900000`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`output0[‘satoshis’] = 4999900000`'
- en: '`output0[‘script_type’] = ‘P2PKH’`'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`output0[‘script_type’] = ‘P2PKH’`'
- en: '`output0[‘address’] = ‘mxzmMmVycLDgAA48VtHDeh389eDAwiJqwQ’`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’].append(output0)`'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '`output1 = {}`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '`output1[‘satoshis’] = 0`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '`output1[‘script_type’] = ‘OP_RETURN’`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '`output1[‘content_hash256’] = ‘3365b392ee14def189190638a532f6042446b74c98f186e9b595f77e47817e05’`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’].append(output1)`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘locktime’] = 0`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '`return txn`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.1:** Transaction structure definition of document timestamping'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the value of OP_RETURN opcode:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '`OP_RETURN = 0x6a`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'In *[Chapter 10, Create and Validate Transactions](c10.xhtml)* under topic
    ***Building transactions*** we have defined method `**createSignaturePreimage
    and createSignedTransaction**`. We add following lines to the method to handle
    OP_RETURN script type:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '`if outp[‘script_type’] == ‘OP_RETURN’:`'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '`content_b = bytes.fromhex(outp[‘content_hash256’])`'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptPubkey_b = bytes([OP_RETURN]) \`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '`+ getWithPushdata(content_b)`'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'As we did in *[Chapter 10, Create and Validate Transactions](c10.xhtml)*, we
    execute this program and get raw transaction hex code, as shown in *[figure 11.3](#fig11_3)*:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.3.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.3:** Hex code of transaction created for document stamping'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the output of the newly created transaction:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.4.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.4:** Output of transaction created for document timestamping'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to mine another 100 blocks so that the mined bitcoins we are using
    are ready for transfer:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.5.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.5:** Next 100 blocks are mined'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, publish the newly created transaction:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.6.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.6:** Publish transaction for document timestamping'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we mine a single block again to add the transaction to the newly mined
    block:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.7.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.7:** Mine the next block to include published transaction'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'The following in the newly mined block. We can see that the block contains
    the newly added transaction:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.8.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.8:** Published transaction appears in the new block'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[Time locked transactions](toc.xhtml#s236a)'
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bitcoin allows you to lock a transaction for certain time or block height. It
    allows transactions to be locked in a fixed time or time relative to the funding
    transaction.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: In the following subsections, we will cover a use case for both fixed and the
    relative timelock.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[Time locked payment](toc.xhtml#s237a)'
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can also create transactions that cannot be spent before given timestamp.
    This is done by setting the nLockTime field in a transaction. The nLockTime field
    can either be set to denote block height or to denote Unix epoch time. In the
    case of epoch time, it denotes mean time past instead of the block’s timestamp.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'The `**nLockTime**` field has the following rules:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '`**nLockTime**` < 500000000 denotes block-height'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise, it denotes median time past
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is recommended that `**nLockTime**` is not set to zero or past block height
    or past block-time.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '*Median time past = Medium of (Tn-1, Tn-2, Tn-3, Tn-4, … Tn-10, Tn-11)*'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code provides transaction structure to the transaction builder
    program:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '`def createTransactionStruct():`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '`txn = {}`'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘version’] = 1`'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘input_count’] = 1`'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’] = []`'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '`input0 = {}`'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘prevtxn’] = ‘5efcf04e32f061b9c4894f5b3a59fb3d8c5c56a6e7340b89b3a1a9ebacca998f’`'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘prevtxnindex’] = 0`'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘script_type’] = ‘P2PKH’`'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘privkeys’] = [‘KwfxnwxpPG1RmhU8jaU8Ron4m1KZGymLAFNaMnSTonoZ7AQfnV53’]`'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘script_pubkey’] = ‘76a91481d7033c19dcec645cb3f86ce41678756850ba4d88ac’`'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘hash_type’] = SIGHASH_ALL`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’].append(input0)`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘out_count’] = 1`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’] = []`'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '`output0 = {}`'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘satoshis’] = 4999900000`'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘script_type’] = ‘P2PKH’`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘address’] = ‘mxzmMmVycLDgAA48VtHDeh389eDAwiJqwQ’`'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’].append(output0)`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘locktime’] = 1624196667`'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '`return txn`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.2:** Transaction structure definition of time locked payment'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'We get the following signed transaction for the preceding transaction structure:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.9.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.9:** Create transaction for time locked payment'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: To be able to publish the preceding transaction, the bitcoin in the newly created
    block needs to be available for spend. For this, we create another 100 blocks.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'We now try to publish the transaction, as shown in *[figure 11.10](#fig11_10)*:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.10.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.10:** Publishing the time locked transaction fails'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'Publishing of the transaction fails as the block median timestamp is smaller
    than the locktime we have set:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.11.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.11:** Current timestamp and last block timestamp'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 'The median timestamp is calculated by taking the median of the timestamp in
    a block for the last 11 blocks. To get the median timestamp value as a value greater
    than the locktime set in the transaction, we wait for a few minutes and create
    another 11 blocks:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.12.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.12:** Mine next eleven block to change median time past'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the median time of the last generated block is as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.13.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.13:** Get median time past'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'This timestamp is greater than 1624196667:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.14.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.14:** Median time past to date'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'We again try publishing the transaction:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.15.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.15:** Publishing the transaction is now successful'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the transaction was not valid until the median timestamp of
    the latest block was not less than or equal to lock-time.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[Payment with relative locktime](toc.xhtml#s238a)'
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `**nLockTime**` field in a transaction is set for static block height or
    static epoch time. If the newly created transaction needs to wait for time or
    block count relative to block count or timestamp of depending block, then we use
    `**OP_CHECKSEQUENCEVERIFY**`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: The relative lock-time contract is implemented using the `**OP_CHECKSEQUENCEVERIFY**`
    opcode as a script, so we use P2SH with redeem script. The opcode requires that
    the sequence is set for the corresponding transaction input.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: The relative locktime was a softfork, which required version number of transactions
    to be set as 2\. It also led to changes in the way `**nSequence**` is evaluated.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: 'Prior to the softfork:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: If nSequence is 0xFFFFFFFE, it denotes that nLockTime is set.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If nSequence is 0xFFFFFFFF, it denotes that nLockTime is not set.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following illustration shows the way nSequence is evaluated post softfork:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.16.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.16:** Illustration of nSequence evaluation'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: 'Listed here are the conditions based on which sequence value needs to be set:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: If nSequence > 0xEFFFFFFF, then it is not defined and so, the transaction can
    be included in any block.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If nSequence <= 0xEFFFFFFF, then bit-22 determines if 0-15 bits denote block
    height or timestamp.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If bit-22 is set, then 0-15 bits denote block height.
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If bit-22 is not set, then 0-15 bits denotes medium time past.
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is implemented in the following code:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '`def getSequence(txn_struct: dict, i: int):`'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '`inp = txn_struct[‘inputs’][i]`'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '`if ‘sequence_type’ in inp:`'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '`if inp[‘sequence_type’] == ‘time’:`'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '`sequence = inp[‘sequence’] | (1 << 22)`'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '`else:`'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '`sequence = inp[‘sequence’]`'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '`sequence_b = struct.pack(‘<L’, sequence)`'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '`else:`'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '`if txn_struct[‘locktime’] > 0:`'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '`# sequence`'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '`sequence_b = bytes([0xfe, 0xff, 0xff, 0xff])`'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '`else:`'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '`# sequence`'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '`sequence_b = bytes([0xff, 0xff, 0xff, 0xff])`'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '`return sequence_b`'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.3:** Method to calculate nSequence'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: To implement a simple use case with relative lock-time, in our use case, a newly
    created transaction can only be mined 105 blocks after the funding transaction
    are confirmed.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the redeem script for the transaction:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '`# 105 OP_CHECKSEQUENCEVERIFY OP_DROP`'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '`# <Alice pubkey> CHECKSIG`'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the opcodes we require in this transaction:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '`OP_CHECKSEQUENCEVERIFY = 0xb2`'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '`OP_DROP = 0x75`'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '`OP_CHECKSIG = 0xac`'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is used to generate redeem script hex code:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '`def createRedeemScript(pubkey_alice: str):`'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '`redeem_script_b = bytes([0x01,`'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '`105, # after 105 blocks`'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '`OP_CHECKSEQUENCEVERIFY, OP_DROP])`'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '`pubkey_b = bytes.fromhex(pubkey_alice)`'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '`redeem_script_b += createVarInt(len(pubkey_b)) + pubkey_b`'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '`redeem_script_b += bytes([OP_CHECKSIG])`'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '`return redeem_script_b`'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.4:** Method to create redeem script for relative lock-time'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'We call the preceding method as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '`if __name__ == ‘__main__’:`'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '`pubkey_alice = ‘037fadaea6edf196bf70af16cefb2bd3c830e54c0a6e9a00bf7806b241933547f7’`'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '`redeem_script_b = createRedeemScript(pubkey_alice)`'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '`print(‘redeem script = %s’ % redeem_script_b.hex())`'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '`sh = hash160(redeem_script_b)`'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '`address = sh2address(sh)`'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '`print(‘P2SH address = %s’ % address)`'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: 'We execute it and get following result:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.17.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.17:** Generate Redeem script for relative timelock'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'We generate a block to pay to the contract indicated by the preceding redeem
    script and then get the transaction ID:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.18.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.18:** Transaction ID for relative timelock funding transaction'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: 'We now create a new transaction using the following code:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '`def createTransactionStruct():`'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '`txn = {}`'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘version’] = 2`'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘input_count’] = 1`'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’] = []`'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '`input0 = {}`'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘prevtxn’] = \`'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '`‘e6a31b5c7e39a31bb12c68055c1dd6dcb6554d1546a8621e889f1026e10264c8’`'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘prevtxnindex’] = 0`'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘script_type’] = ‘P2SH_RelativeTimeLock’`'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘privkeys’] = \`'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '`[‘L26JcHRhqEQv8V9DaAmE4bdszwqXS7tHznGYJPp7fxEoEQxxBPcQ’]`'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘redeem_script’] = ‘0169b27521037fadaea6edf196bf70af16cefb2bd3c830e54c0a6e9a00bf7806b241933547f7ac’`'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘hash_type’] = SIGHASH_ALL`'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘sequence’] = 105`'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘sequence_type’] = ‘block’`'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’].append(input0)`'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘out_count’] = 2`'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’] = []`'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '`output0 = {}`'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘satoshis’] = 10*(10**8)`'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘script_type’] = ‘P2PKH’`'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘address’] = ‘mxzmMmVycLDgAA48VtHDeh389eDAwiJqwQ’`'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’].append(output0)`'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '`output1 = {}`'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '`output1[‘satoshis’] = 399999*(10**4)`'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '`output1[‘script_type’] = ‘P2PKH’`'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '`output1[‘address’] = ‘miSFmBeKXf5Wp7Luj46XTu3Yh57nAwhZAo’`'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’].append(output1)`'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘locktime’] = 0`'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '`return txn`'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.5:** Method to create transaction for relative lock-time'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: 'To claim the locked funds in the previous transaction, we provide `**scriptSig**`,
    which consists of the required signature along with redeem script. Here’s the
    code for `**scriptSig**`:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '`def createScriptSigForRelTimeLock(signgrp: list, script_b: bytes):`'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b = getWithPushdata(signgrp[0])`'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b += getWithPushdata(script_b)`'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '`return scriptSig_b`'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.6:** Method to create scriptSig for relative lock-time'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: 'In *[Chapter 10, Create and Validate Transactions](c10.xhtml)* under topic
    ***Building transactions*** we have defined method `**createSignedInput**`. We
    add following lines to the method to handle *relative-timelock* script type:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '`elif txn_input[‘script_type’] == ‘P2SH_RelativeTimeLock’:`'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b = createScriptSigForRelTimeLock(signgrp, script_b)`'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: 'We execute the code and get the signed raw transaction:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.19.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.19:** Create hex code for relative timelock transaction'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: 'If we publish the preceding transaction before 105 blocks are mined, we get
    the following error:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.20.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.20:** Publishing relative timelock transaction before the required
    block height'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have mined 105 blocks after the input transaction, we can publish the
    preceding transaction:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.21.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.21:** Publishing relative timelock transaction after the required
    block height'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '[Smart contract](toc.xhtml#s239a)'
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Smart Contract* is a contract between two or more parties that is written
    in the form of an executable computer program. It executes only when the contract
    allows its execution, and on execution, smart contract follows the conditions
    defined in the contract.'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '*智能合约* 是两个或更多方之间以可执行计算机程序形式编写的合同。只有在合同允许执行时它才会执行，执行时智能合约遵循合同中定义的条件。'
- en: Bitcoin provides a primitive scripting language based on reverse polish notation.
    The script is not Turing complete, which means it cannot solve all computational
    problems. Since smart contracts are contracts modelled in a program, they can
    become more complex with loops and state variables that the Bitcoin script does
    not allow.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币提供了一种基于逆波兰表示法的原始脚本语言。该脚本不是图灵完备的，这意味着它不能解决所有计算问题。由于智能合约是程序化的合同模型，它们可以通过循环和状态变量变得比比特币脚本允许的更复杂。
- en: It has a large number of opcodes that can be used to create a variety of smart
    contracts. Even though there are large number of opcodes, not everything can be
    done by scripting.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 它拥有大量可以用来创建各种智能合约的操作码。尽管操作码很多，但并非一切都可通过脚本实现。
- en: Additionally, Bitcoin transaction itself imposes limitations on the scripts.
    And since Bitcoin transaction fee is calculated based on per vBytes and is reasonably
    high, a complicated and large redeem script can make a smart contract financially
    non-viable.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，比特币交易本身对脚本施加了限制。由于比特币交易费用是基于每v字节计算的，并且相当高，因此一个复杂且较大的赎回脚本可能会使智能合约在经济上不可行。
- en: 'Here are some of the limitations of smart contract on Bitcoin:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是智能合约在比特币上的一些限制：
- en: In a transaction, smart contract can only affect a single input.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在交易中，智能合约只能影响一个输入。
- en: A smart contract can only fund the transaction from a single UTXO that has a
    fixed value.
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约只能从具有固定价值的单个未花费交易输出（UTXO）中资助交易。
- en: Transaction outputs cannot be modified based on smart contract.
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据智能合约，交易输出不能被修改。
- en: Output scripts are standard and can only be one of the standard scripts such
    as P2SH, P2PKH, OP_RETURN, P2PK, or P2MS and standard segwit scripts, which we
    will cover in the next chapter.
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出脚本是标准的，只能是标准脚本中的一种，如P2SH、P2PKH、OP_RETURN、P2PK或P2MS和标准的segwit脚本，这些我们将在下一章中介绍。
- en: 'Bitcoin script is not a Turing complete language, and it does not have options
    to:'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比特币脚本不是图灵完备的语言，并且没有选项：
- en: Have nondeterministic operations such as loops
  id: totrans-285
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有循环等非确定性操作。
- en: Work as a state machine and perform operations based on its state.
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为状态机工作并根据其状态执行操作。
- en: Bitcoin script is limited to the opcode it provides.
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比特币脚本限于它提供的操作码。
- en: Scripting on Bitcoin is costly, and the complexity of a smart contract also
    depends on its financial viability.
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在比特币上编写脚本成本很高，智能合约的复杂性也取决于其经济可行性。
- en: '[Solution to trust issue in payments](toc.xhtml#s240a)'
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[支付中信任问题的解决方案](toc.xhtml#s240a)'
- en: We know that the simple method of payment is to transfer bitcoins to the recipient’s
    address. It would be done in your mobile wallet by scanning the QR code. This
    is great for small payments, but as the transaction fee has increased with increase
    in bitcoin price, making payments for low-priced goods is not financially viable.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道简单的支付方法是将比特币转到收款人的地址。这可以在你的移动钱包中通过扫描二维码来完成。这对于小额支付来说很好，但随着比特币价格的上涨，交易费用也在增加，因此用低价格商品进行支付在经济上并不可行。
- en: For large value payments, we need to improve the security of payments. We will
    improve the security of payments in the following subtopics as we tackle one issue
    at a time.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大额支付，我们需要提高支付的安全性。我们将按照以下子主题逐一解决，以提高支付的安全性。
- en: '[Simple multi-signature payment](toc.xhtml#s241a)'
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[简单的多重签名支付](toc.xhtml#s241a)'
- en: A 2-of-2-multisig between the buyer and seller is a way to secure payments when
    the trusted party needs to depend on the services provided by the non-trusted
    entity. As an example, consider a reputed business that needs to get a service
    from an unregulated small vendor.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 买方和卖方之间的2-of-2多重签名是一种当信任方需要依赖非信任实体提供的服务时，确保支付安全的方法。例如，考虑一个知名企业需要从一家未受监管的小型供应商那里获得一项服务。
- en: In this case, the business locks funds in a 2-of-2-multisig address and only
    completes the payment once it has received the service from the small vendor.
    The locked funds act as the smart contract between the business and the vendor.
    This gives surety to the small vendor that they will get paid as there is no way
    the large business can take the money back.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，商家将资金锁定在2-of-2-multisig地址中，并在从小供应商那里收到服务后才完成支付。锁定的资金作为商家和小供应商之间的智能合约。这给小型供应商带来了保证，因为他们将得到支付，因为大型商家无法取回资金。
- en: '[Improved payment with relative locktime](toc.xhtml#s242a)'
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**带有相对锁定时间的改进支付**'
- en: The problem in the above payment use case is when the small vendor delays in
    providing the required service. They know that the funds are locked, so they can
    be bit careless about their job.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 上述支付用例中的问题是小型供应商在提供所需服务时延迟。他们知道资金被锁定了，所以在工作上面可能会有些疏忽。
- en: To solve this issue, there must be a way the business should be able to revoke.
    However, the business should not be able to revoke the payment at will. This can
    be achieved by relative lock-time so that both parties know that bitcoins are
    locked, but there is a time limit. If the vendor does not get service within time,
    it will get revoked.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，必须有一种方式使得商家能够撤销。然而，商家不应该能够随意撤销支付。这可以通过相对锁定时间实现，这样双方都知道比特币被锁定了，但有一定的时间限制。如果供应商在规定时间内没有提供服务，支付将会被撤销。
- en: 'The use case can be understood with the help of the following illustration.
    Here, Alice represents the trusted business, and Bob represents a small non-trusted
    vendor:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 以下插图可以帮助理解用例。在这里，Alice代表可信赖的商家，而Bob代表一个小型的不可信赖的供应商：
- en: '![](images/Figure-11.22.jpg)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-11.22.jpg)'
- en: '**Figure 11.22:** Improved payment with relative lock time'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '**图11.22:** 带有相对锁定时间的改进支付'
- en: 'To achieve this, we use the P2SH transaction with the following redeem script:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们使用以下赎回脚本的P2SH交易：
- en: '`#IF`'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`#IF`'
- en: '`# OP_2 <Alice’s pubkey> <Bob’s pubkey> OP_2 CHECKMULTISIG`'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`# OP_2 <Alice的公钥> <Bob的公钥> OP_2 CHECKMULTISIG`'
- en: '`#ELSE`'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`#ELSE`'
- en: '`# 105 CHECKSEQUENCEVERIFY DROP`'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 105 CHECKSEQUENCEVERIFY DROP`'
- en: '`# <Alice’s pubkey> CHECKSIG`'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`# <Alice的公钥> CHECKSIG`'
- en: '`#ENDIF`'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`#ENDIF`'
- en: In a normal condition, i.e., when there is no dispute, both sides sign the transaction
    that pays Bob. If there is a dispute, Alice waits for the timeout and then creates
    a transaction signed by her own private key, which transfers the locked amount
    to her address.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常情况下，即没有争议时，双方签署支付Bob的交易。如果有争议，Alice等待超时，然后创建由她自己的私钥签署的交易，将锁定金额转至她的地址。
- en: One thing to remember is that a condition once valid is always valid. So, if
    Alice wants to give extra time to Bob, she can still do it.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的一点是，一旦有效，条件总是有效的。所以，如果Alice想给Bob更多的时间，她仍然可以做到。
- en: 'The following are the required opcodes to create redeem script:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要创建赎回脚本的必需操作码：
- en: '`OP_2 = 0x52`'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`OP_2 = 0x52`'
- en: '`OP_IF = 0x63`'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`OP_IF = 0x63`'
- en: '`OP_ELSE = 0x67`'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`OP_ELSE = 0x67`'
- en: '`OP_ENDIF = 0x68`'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`OP_ENDIF = 0x68`'
- en: '`OP_CHECKSEQUENCEVERIFY = 0xb2`'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`OP_CHECKSEQUENCEVERIFY = 0xb2`'
- en: '`OP_DROP = 0x75`'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`OP_DROP = 0x75`'
- en: '`OP_CHECKMULTISIG = 0xae`'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`OP_CHECKMULTISIG = 0xae`'
- en: '`OP_CHECKSIG = 0xac`'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`OP_CHECKSIG = 0xac`'
- en: 'Redeem script is used to generate the contract address where contract amount
    is locked. The following code is used to generate redeem script:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 赎回脚本用于生成合同地址，在该地址中锁定合同金额。以下代码用于生成赎回脚本：
- en: '`def createRedeemScript2_2_seqcheck(pubkey_l: list):`'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`def createRedeemScript2_2_seqcheck(pubkey_l: list):`'
- en: '`redeem_script_b = bytes([OP_IF, OP_2])`'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`redeem_script_b = bytes([OP_IF, OP_2])`'
- en: '`for pubkey in pubkey_l: # Alice + Bob`'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`for pubkey in pubkey_l: # Alice + Bob`'
- en: '`pubkey_b = bytes.fromhex(pubkey)`'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`pubkey_b = bytes.fromhex(pubkey)`'
- en: '`redeem_script_b += createVarInt(len(pubkey_b)) + pubkey_b`'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`redeem_script_b += createVarInt(len(pubkey_b)) + pubkey_b`'
- en: '`redeem_script_b += bytes([OP_2, OP_CHECKMULTISIG])`'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`redeem_script_b += bytes([OP_2, OP_CHECKMULTISIG])`'
- en: '`redeem_script_b += bytes([OP_ELSE, 0x01,`'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`redeem_script_b += bytes([OP_ELSE, 0x01,`'
- en: '`105, # after 105 blocks`'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '`105, # after 105 blocks`'
- en: '`OP_CHECKSEQUENCEVERIFY, OP_DROP])`'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`OP_CHECKSEQUENCEVERIFY, OP_DROP])`'
- en: '`pubkey_b = bytes.fromhex(pubkey_l[0]) # Alice pubkey`'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`pubkey_b = bytes.fromhex(pubkey_l[0]) # Alice公钥`'
- en: '`redeem_script_b += createVarInt(len(pubkey_b)) + pubkey_b`'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`redeem_script_b += createVarInt(len(pubkey_b)) + pubkey_b`'
- en: '`redeem_script_b += bytes([OP_CHECKSIG, OP_ENDIF])`'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`redeem_script_b += bytes([OP_CHECKSIG, OP_ENDIF])`'
- en: '`return redeem_script_b`'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`return redeem_script_b`'
- en: '**Program 11.7:** Redeem script for payment with relative lock-time'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '**程序11.7:** 带有相对锁定时间的支付赎回脚本'
- en: 'We call the method using the following script:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下脚本调用方法：
- en: '`if __name__ == ‘__main__’:`'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`if __name__ == ‘__main__’:`'
- en: '`pubkey_l = [‘037fadaea6edf196bf70af16cefb2bd3c830e54c0a6e9a00bf7806b241933547f7’,
    ‘02fcb1c7507db15576ab35cd7c9b1ea570141a8b81c9938dae0320392b0f7034d0’]`'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '`redeem_script_b = createRedeemScript2_2_seqcheck(pubkey_l)`'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '`print(‘redeem script = %s’ % redeem_script_b.hex())`'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '`sh = hash160(redeem_script_b)`'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '`address = sh2address(sh)`'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: '`print(‘P2SH address = %s’ % address)`'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: 'On calling the method, we get the following redeem script and address:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.23.jpg)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.23:** Generate redeem script for payment with relative locktime'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: 'We generate a block to pay to this address:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.24.jpg)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.24:** Generate block that pays redeem script'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: 'We get transaction ID from block hash:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.25.jpg)'
  id: totrans-349
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.25:** Get transaction-id from the generated block'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: We generate another 100 blocks so that this transaction is available for payment.
    As you have learnt, there are two possible outcomes of this contract.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, `**OP_CHECKSEQUENCEVERIFY**` was a soft-fork that needed the
    transaction version to be equal to or greater than 2\. So, in the following transaction
    structure, we will use the version as 2:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '`def createTransactionStruct():`'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '`txn = {}`'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘version’] = 2`'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘input_count’] = 1`'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’] = []`'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: '`input0 = {}`'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘prevtxn’] = \`'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '`‘624d92839eb89104d0909df89f95785cb8bb77f0fec66c6c40cf3ad2804a3966’`'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘prevtxnindex’] = 0`'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘script_type’] = ‘P2SH_Condition’`'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘condition’] = True`'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘privkeys’] = \`'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: '`[‘L26JcHRhqEQv8V9DaAmE4bdszwqXS7tHznGYJPp7fxEoEQxxBPcQ’,`'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: '`‘KxR8HHyfAwFPidCw2vXThXqT4vSMNeufirHFapnfCfkzLaohtujG’]`'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘redeem_script’] = ‘635221037fadaea6edf196bf70af16cefb2bd3c830e54c0a6e9a00bf7806b241933547f72102fcb1c7507db15576ab35cd7c9b1ea570141a8b81c9938dae0320392b0f7034d052ae670169b27521037fadaea6edf196bf70af16cefb2bd3c830e54c0a6e9a00bf7806b241933547f7ac68’`'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘hash_type’] = SIGHASH_ALL`'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’].append(input0)`'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘out_count’] = 2`'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’] = []`'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: '`output0 = {}`'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘satoshis’] = 10*(10**8)`'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘script_type’] = ‘P2PKH’`'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘address’] = ‘mxzmMmVycLDgAA48VtHDeh389eDAwiJqwQ’`'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’].append(output0)`'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: '`output1 = {}`'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: '`output1[‘satoshis’] = 399999*(10**4)`'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '`output1[‘script_type’] = ‘P2PKH’`'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: '`output1[‘address’] = ‘miSFmBeKXf5Wp7Luj46XTu3Yh57nAwhZAo’`'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’].append(output1)`'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘locktime’] = 0 # block height`'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: '`return txn`'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.8:** Method to create transaction for True condition'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: To the redeem script, we need to provide public keys of both Alice and Bob as
    in the normal multi-sig script. Here, we also need to provide `**OP_1**` or True
    to the script.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the `**scriptSig**` with included redeem script is as follows:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: '`#OP_0`'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: '`#<Alice’s Signature>`'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: '`#<Bob’s Signature>`'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: '`#OP_1 (True)`'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: '`#IF`'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: '`# OP_2 <Alice’s pubkey> <Bob’s pubkey> OP_2 CHECKMULTISIG`'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: '`#ELSE`'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: '`# 105 CHECKSEQUENCEVERIFY DROP`'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: '`# <Alice’s pubkey> CHECKSIG`'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: '`#ENDIF`'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: 'We further add the following condition in the method `**createSignedInput**`
    to handle `**script_type**` *P2SH_Condition* for the preceding conditional scripts:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: '`elif txn_input[‘script_type’] == ‘P2SH_Condition’:`'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b = createScriptSigForCond(signgrp,`'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: '`script_b,`'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: '`txn_input[‘condition’])`'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: 'We also create `**scriptSig**` for custom condition, as follows:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: '`OP_FALSE = 0x00`'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: '`OP_TRUE = 0x51`'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: '`#########################`'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: '`#True Case`'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: '`#OP_0`'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: '`#<Alice’s Signature>`'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '`#<Bob’s Signature>`'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: '`#OP_TRUE (True)`'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: '`#########################`'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: '`#False Case`'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: '`#<Alice’s Signature>`'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: '`#OP_FALSE (False)`'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: '`#########################`'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: '`#Needs to be customized based on use case`'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: '`def `**createScriptSigForCond**`(signgrp: `**list**`,`'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: '`script_b: bytes,`'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: '`cond: bool):`'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: '`if cond:`'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b = bytes([OP_0])`'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: '`for sign_b in signgrp:`'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b += getWithPushdata(sign_b)`'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b += bytes([OP_TRUE])`'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b += getWithPushdata(script_b)`'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: '`else:`'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b = encodePushdata(len(signgrp[0])) + signgrp[0]`'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b += bytes([OP_FALSE])`'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b += encodePushdata(len(script_b)) + script_b`'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: '`return scriptSig_b`'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.9:** ScriptSig for condition handling'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: 'On executing the code, we get the following signed raw transaction:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.26.jpg)'
  id: totrans-433
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.26:** Create transaction hex code for payment with relative locktime'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: 'We decode the preceding script and get the following decoded script:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.27.jpg)'
  id: totrans-436
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.27:** ScriptSig in the transaction for payment with relative lock'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: 'We publish the transaction we just created as follows:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.28.jpg)'
  id: totrans-439
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.28:** Transaction for payment with relative lock is published'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: This shows how the script works in normal conditions. In the condition of dispute,
    the `**OP_ELSE**` condition gets executed, and we need to hold the transaction
    in the mempool till the `**OP_CHECKSEQUENCEVERIFY**` condition is met. If we publish
    the transaction before the due time, it gets rejected. For this, we need to additionally
    set sequence greater than 105.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we modify the transaction structure as follows:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: '`#2-of-2-multisig with condition`'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: '`def createTransactionStruct():`'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: '`txn = {}`'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘version’] = 2`'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘input_count’] = 1`'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’] = []`'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: '`input0 = {}`'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘prevtxn’] = \`'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: '`‘624d92839eb89104d0909df89f95785cb8bb77f0fec66c6c40cf3ad2804a3966’`'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘prevtxnindex’] = 0`'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘script_type’] = ‘P2SH_Condition’`'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘condition’] = False`'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘privkeys’] = \`'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: '`[‘L26JcHRhqEQv8V9DaAmE4bdszwqXS7tHznGYJPp7fxEoEQxxBPcQ’]`'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘redeem_script’] = ‘635221037fadaea6edf196bf70af16cefb2bd3c830e54c0a6e9a00bf7806b241933547f72102fcb1c7507db15576ab35cd7c9b1ea570141a8b81c9938dae0320392b0f7034d052ae670169b27521037fadaea6edf196bf70af16cefb2bd3c830e54c0a6e9a00bf7806b241933547f7ac68’`'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘hash_type’] = SIGHASH_ALL`'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘sequence’] = 110`'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘sequence_type’] = ‘block’`'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’].append(input0)`'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘out_count’] = 2`'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’] = []`'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: '`output0 = {}`'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘satoshis’] = 10*(10**8)`'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '`output0[‘satoshis’] = 10*(10**8)`'
- en: '`output0[‘script_type’] = ‘P2PKH’`'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '`output0[‘script_type’] = ‘P2PKH’`'
- en: '`output0[‘address’] = ‘mxzmMmVycLDgAA48VtHDeh389eDAwiJqwQ’`'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '`output0[‘address’] = ‘mxzmMmVycLDgAA48VtHDeh389eDAwiJqwQ’`'
- en: '`txn[‘outputs’].append(output0)`'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '`txn[‘outputs’].append(output0)`'
- en: '`output1 = {}`'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '`output1 = {}`'
- en: '`output1[‘satoshis’] = 399999*(10**4)`'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '`output1[‘satoshis’] = 399999*(10**4)`'
- en: '`output1[‘script_type’] = ‘P2PKH’`'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '`output1[‘script_type’] = ‘P2PKH’`'
- en: '`output1[‘address’] = ‘miSFmBeKXf5Wp7Luj46XTu3Yh57nAwhZAo’`'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '`output1[‘地址’] = ‘miSFmBeKXf5Wp7Luj46XTu3Yh57nAwhZAo’`'
- en: '`txn[‘outputs’].append(output1)`'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '`txn[‘outputs’].append(output1)`'
- en: '`txn[‘locktime’] = 0 # block height`'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '`txn[‘locktime’] = 0 # 区块高度`'
- en: '`return txn`'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '`return txn`'
- en: '**Program 11.10:** Method to create transaction for False condition'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '**程序11.10:** 方法——在假定条件下创建交易'
- en: 'On executing the modified code, we get the following signed transaction:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行修改后的代码后，我们得到以下签名交易：
- en: '![](images/Figure-11.29.jpg)'
  id: totrans-478
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-11.29.jpg)'
- en: '**Figure 11.29:** Transaction for payment with relative lock is published'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '**图11.29:** 带有相对锁定的支付交易发布'
- en: 'If we try to execute this script before 106 blocks are mined, we get the following
    error:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试在106个区块被挖出之前执行这个脚本，我们会得到以下错误：
- en: '![](images/Figure-11.30.jpg)'
  id: totrans-481
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-11.30.jpg)'
- en: '**Figure 11.30:** Payment with relative lock fails to publish before required
    block height'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '**图11.30:** 在所需区块高度之前未能发布的相对锁定支付'
- en: 'But once 110 blocks are mined, we can publish it, as shown in the following
    screenshot:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 但是当110个区块被挖出后，我们可以发布它，如下截图所示：
- en: '![](images/Figure-11.31.jpg)'
  id: totrans-484
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-11'
- en: '**Figure 11.31:** Payment with relative lock published after the required block
    height'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '**图11.31:** 在所需区块高度之后发布的相对锁定支付'
- en: You learnt how you can have conditional payments in the contract. Conditionals
    are an important part of a contract, and by learning this, we can think about
    more complex smart contracts.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 你学会了如何在合约中有条件支付。条件是合同的一个重要部分，通过学习这个，我们可以考虑更复杂的智能合约。
- en: '[Payments involving escrow](toc.xhtml#s243a)'
  id: totrans-487
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[涉及托管方的支付](toc.xhtml#s243a)'
- en: If both parties are not trustworthy, we need a trusted third party to resolve
    the dispute. This is like decentralized exchanges in which the buyers and seller
    gets into a trade, and when the payment is received by the seller, it releases
    bitcoin.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 如果双方都不可信，我们需要一个可信的第三方来解决争议。这就像去中心化交易所一样，买家和卖家进入交易，当卖家收到付款时，释放比特币。
- en: 'The following flowchart shows the steps and conditions involved in the entire
    payment process:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 以下流程图展示了整个支付过程中涉及的步骤和条件：
- en: '![](images/Figure-11.32.jpg)'
  id: totrans-490
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-11.32.jpg)'
- en: '**Figure 11.32:** Flow chart for payment involving escrow'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '**图11.32:** 涉及托管方的支付流程图'
- en: For programming this, we only need to have 2-of-3-multisig instead of 2-of-2-multisig
    with relative timeout, which we discussed in the previous subtopic.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 对于编程这部分，我们只需要2-of-3多签名而不是之前的2-of-2多签名带相对超时，我们之前在小节中已经讨论过了。
- en: 'So, the new redeem script will be as follows:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，新的赎回脚本如下：
- en: '`#IF`'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '`#IF`'
- en: '`# OP_2 <Alice’s pubkey><Bob’s pubkey><escrow’s pubkey> OP_3 OP_CHECKMULTISIG`'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '`# OP_2 <Alice的公开密钥><Bob的公开密钥><托管方的公开密钥> OP_3 OP_CHECKMULTISIG`'
- en: '`#ELSE`'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '`#ELSE`'
- en: '`# 105 CHECKSEQUENCEVERIFY DROP`'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 105 CHECKSEQUENCEVERIFY DROP`'
- en: '`# <Alice’s pubkey> CHECKSIG`'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '`# <Alice的公开密钥> CHECKSIG`'
- en: '`#ENDIF`'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '`#ENDIF`'
- en: We will have this as an assignment for the readers.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这个作为一个给读者的作业。
- en: '[Payment involving secret identifier](toc.xhtml#s244a)'
  id: totrans-501
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[涉及秘密标识符的支付](toc.xhtml#s244a)'
- en: Consider a case where a secret agent is on a mission in the enemy territory.
    Some items need to be transferred to them so that the mission can be carried out.
    If they receive that package, then the mission is carried out; otherwise, it is
    aborted. To carry out the mission, they need to be paid. So, they can only claim
    the payment when they have received the package.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个秘密特工在敌对领土执行任务的情况。一些物品需要转交给他们，以便完成任务。如果他们收到了那个包裹，那么任务就完成了；否则，任务就取消了。为了执行任务，他们需要得到付款。所以，他们只能在收到包裹后才能索赔付款。
- en: In this case, a contract needs to be created with a relative locktime and in
    successful condition, the agent needs to reveal the secret.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，需要创建一个带有相对锁定时间并处于成功条件的合约，代理需要在成功条件下揭示秘密。
- en: 'The following is the redeem script for the contract:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是合约的赎回脚本：
- en: '`#IF`'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '`#IF`'
- en: '`# OP_SHA256 <secret_hash> OP_EQUALVERIFY`'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '`# OP_SHA256 <秘密哈希> OP_EQUALVERIFY`'
- en: '`# <Agent’s pubkey> CHECKSIG`'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '`# <代理方的公开密钥> CHECKSIG`'
- en: '`#ELSE`'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '`#ELSE`'
- en: '`# 105 CHECKSEQUENCEVERIFY DROP`'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 105 CHECKSEQUENCEVERIFY DROP`'
- en: '`# <Agency’s pubkey> CHECKSIG`'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '`# <机构方的公开密钥> CHECKSIG`'
- en: '`#ENDIF`'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '`#ENDIF`'
- en: 'The following are the opcodes and their hex values:'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是的操作码及其十六进制值：
- en: '`OP_2 = 0x52`'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '`OP_2 = 0x52`'
- en: '`OP_IF = 0x63`'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '`OP_IF = 0x63`'
- en: '`OP_ELSE = 0x67`'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: '`OP_ENDIF = 0x68`'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: '`OP_CHECKSEQUENCEVERIFY = 0xb2`'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: '`OP_EQUALVERIFY = 0x88`'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: '`OP_DROP = 0x75`'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: '`OP_SHA256 = 0xa8`'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: '`OP_CHECKSIG = 0xac`'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.11:** Opcodes used in redeem script for payment with secret'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code to generate redeem-script:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: '`def createRedeemScriptWithSecretHash(pubkey_agency: str, pubkey_agent: str,
    secret_h: bytes):`'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: '`redeem_script_b = bytes([OP_IF, OP_SHA256])`'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: '`redeem_script_b += createVarInt(len(secret_h)) + secret_h`'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: '`redeem_script_b += bytes([OP_EQUALVERIFY])`'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: '`pubkey_b = bytes.fromhex(pubkey_agent)`'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: '`redeem_script_b += createVarInt(len(pubkey_b)) + pubkey_b`'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
- en: '`redeem_script_b += bytes([OP_CHECKSIG])`'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: '`redeem_script_b += bytes([OP_ELSE, 0x01,`'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
- en: '`105, # after 105 blocks`'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: '`OP_CHECKSEQUENCEVERIFY, OP_DROP])`'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: '`pubkey_b = bytes.fromhex(pubkey_agency)`'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
- en: '`redeem_script_b += createVarInt(len(pubkey_b)) + pubkey_b`'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: '`redeem_script_b += bytes([OP_CHECKSIG, OP_ENDIF])`'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: '`return redeem_script_b`'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.12:** Method to create redeem script for payment with secret'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: 'We call the method by passing public keys and secret, and generate address
    in the following code:'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
- en: '`if __name__ == ‘__main__’:`'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: '`pubkey_agency = ‘037fadaea6edf196bf70af16cefb2bd3c830e54c0a6e9a00bf7806b241933547f7’`'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: '`pubkey_agent = ‘02fcb1c7507db15576ab35cd7c9b1ea570141a8b81c9938dae0320392b0f7034d0’`'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
- en: '`secret = ‘She sells seashells on the seashore’`'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: '`secret_h = hashlib.sha256(secret.encode(‘utf-8’)).digest()`'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
- en: '`redeem_script_b = createRedeemScriptWithSecretHash(pubkey_agency, pubkey_agent,
    secret_h)`'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: '`print(‘redeem script = %s’ % redeem_script_b.hex())`'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: '`sh = hash160(redeem_script_b)`'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: '`address = sh2address(sh)`'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
- en: '`print(‘P2SH address = %s’ % address)`'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
- en: 'On calling the method and then generating address for the redeem script, we
    get the following:'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.33.jpg)'
  id: totrans-551
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.33:** Redeem script for payment involving secret code'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we generate a block to pay to the P2SH address
    and then get the transaction-id for the created coinbase transaction:'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.34.jpg)'
  id: totrans-554
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.34:** Coinbase transaction-id for funding payment involving secret
    code'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: 'If the package reaches the agent, they can use the secret code to receive the
    payment. In that case, the True part of the condition in redeem script is executed.
    We create the transaction structure that provides secret as follows:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
- en: '`def createTransactionStruct():`'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
- en: '`txn = {}`'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘version’] = 1`'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘input_count’] = 1`'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’] = []`'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: '`input0 = {}`'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘prevtxn’] = \`'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
- en: '`‘5bdcb4a0ff46b4443cfa1ff8002a8ccff06e56a8100a259fbfbd4b0ab660d481’`'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘prevtxnindex’] = 0`'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘script_type’] = ‘P2SH_WithSecret’`'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘privkeys’] = \`'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
- en: '`[‘KxR8HHyfAwFPidCw2vXThXqT4vSMNeufirHFapnfCfkzLaohtujG’]`'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘redeem_script’] = ‘63a82009b5eb7277b9d5062d91fe20f141ad4dd81970fd0baa72d31ee346a7c48d5b8c882102fcb1c7507db15576ab35cd7c9b1ea570141a8b81c9938dae0320392b0f7034d0ac670169b27521037fadaea6edf196bf70af16cefb2bd3c830e54c0a6e9a00bf7806b241933547f7ac68’`'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘secret’] = ‘She sells seashells on the seashore’`'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘condition’] = True`'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘hash_type’] = SIGHASH_ALL`'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’].append(input0)`'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘out_count’] = 2`'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’] = []`'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
- en: '`output0 = {}`'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘satoshis’] = 10*(10**8)`'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘script_type’] = ‘P2PKH’`'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘address’] = ‘mxzmMmVycLDgAA48VtHDeh389eDAwiJqwQ’`'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’].append(output0)`'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
- en: '`output1 = {}`'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
- en: '`output1[‘satoshis’] = 399999*(10**4)`'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
- en: '`output1[‘script_type’] = ‘P2PKH’`'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
- en: '`output1[‘address’] = ‘miSFmBeKXf5Wp7Luj46XTu3Yh57nAwhZAo’`'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’].append(output1)`'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘locktime’] = 0 # block height`'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
- en: '`return txn`'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.13:** Method to create transaction for payment with secret'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
- en: 'This is done by having the following `**scriptSig**`:'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
- en: '`#<Agent’s signature>`'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
- en: '`#<secret>`'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
- en: '`#OP_1`'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
- en: '`#IF`'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
- en: '`# OP_SHA256 <secret_hash> OP_EQUALVERIFY`'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
- en: '`# <Agent’s pubkey> CHECKSIG`'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
- en: '`#ELSE`'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
- en: '`# 105 CHECKSEQUENCEVERIFY DROP`'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
- en: '`# <Agency’s pubkey> CHECKSIG`'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
- en: '`#ENDIF`'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
- en: 'This is done in the following code:'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
- en: '`def createScriptSigWithSecret(signgrp: list, script_b: bytes, secret: str,
    cond: bool):`'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
- en: '`if cond:`'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b = getWithPushdata(signgrp[0])`'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
- en: '`secret_b = secret.encode(‘utf-8’)`'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b += getWithPushdata(secret_b)`'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b += bytes([OP_TRUE])`'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
- en: '`else:`'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b = getWithPushdata(signgrp[0])`'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b += bytes([OP_FALSE])`'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b += getWithPushdata(script_b)`'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
- en: '`return scriptSig_b`'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.14:** Method to prepare scriptSig for the secret identifier use
    case'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
- en: The scripts associated with each of the smart contracts discussed in this chapter
    may require separate handling of scriptSig. Each of these methods are added to
    `**createSignedInput**` method as a new condition.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
- en: 'To handle condition with secret discussed in this subtopic we further add the
    following condition in the method `**createSignedInput**` to handle `**script_type**`
    *P2SH_WithSecret* for the preceding conditional scripts:'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
- en: '`elif txn_input[‘script_type’] == ‘P2SH_WithSecret’:`'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
- en: '`if txn_input[‘condition’]:`'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b = createScriptSigWithSecret(signgrp, script_b, txn_input[**‘secret’**],
    **True**)`'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
- en: '`else:`'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b = createScriptSigWithSecret(signgrp, script_b, **‘’**, **False**)`'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
- en: 'We execute the code and get signed raw transaction:'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.35.jpg)'
  id: totrans-621
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.35:** Created transaction for payment involving secret code'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
- en: 'This gives us the following `**scriptSig**`:'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.36.jpg)'
  id: totrans-624
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.36:** ScriptSig of transaction for funding payment involving secret
    code'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
- en: 'We publish it as follows:'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.37.jpg)'
  id: totrans-627
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.37:** Transaction for payment involving secret code is published'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
- en: '[Collaborative transactions](toc.xhtml#s245a)'
  id: totrans-629
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some cases, there are multiple contributors of a single transaction. The
    contributors may not be aware of other parts of the transaction. So, they can
    only sign a portion of the transaction. This is done through different SIGHASH
    types.
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
- en: In *[Chapter 10, Create and Validate Transactions](c10.xhtml),* under the topic
    ***Signature*** *v****erification*****,** you learnt about different SIGHASH types
    and their uses.
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
- en: In a collaborative transaction, each party creates their transaction and sends
    it to a person or authority that has the responsibility to create and publish
    the final transaction.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
- en: 'For individual transactions, the following code contains the changes required
    to generate signature preimage:'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
- en: '`def createSignaturePreimage(txn_struct: dict,`'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
- en: '`script_b: bytes,`'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
- en: '`inp_index: int):`'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b = b’’`'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += struct.pack(‘<L’, txn_struct[‘version’])`'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
- en: '`hashtype = txn_struct[‘inputs’][inp_index][‘hash_type’]`'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
- en: '`if hashtype & SIGHASH_ANYONECANPAY:`'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += createVarInt(1)`'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
- en: '`inputs = [inp_index] # only current input is processed`'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
- en: '`else:`'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += createVarInt(txn_struct[‘input_count’])`'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
- en: '`inputs = range(txn_struct[‘input_count’])`'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
- en: '`for i in inputs:`'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
- en: '`inp = txn_struct[‘inputs’][i]`'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += bytes.fromhex(inp[‘prevtxn’])[::-1]`'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += struct.pack(‘<L’, inp[‘prevtxnindex’])`'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
- en: '`if i == inp_index:`'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += createVarInt(len(script_b))`'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += script_b`'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
- en: '`else:`'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += b’\x00’`'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += getSequence(txn_struct, i)`'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
- en: '`# remove SIGHASH_ANYONECANPAY`'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
- en: '`if hashtype & 0x0F == SIGHASH_NONE:`'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += createVarInt(0)`'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
- en: '`else:`'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
- en: '`# remove SIGHASH_ANYONECANPAY`'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
- en: '`if hashtype & 0x0F == SIGHASH_SINGLE:`'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += createVarInt(inp[‘input_index’] + 1)`'
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
- en: '`outputs = range(inp[‘input_index’] + 1)`'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
- en: '`else:`'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += createVarInt(txn_struct[‘out_count’])`'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
- en: '`outputs = range(txn_struct[‘out_count’])`'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
- en: '`for out in outputs:`'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
- en: '`outp = txn_struct[‘outputs’][out]`'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += struct.pack(‘<Q’, outp[‘satoshis’])`'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
- en: '`if outp[‘script_type’] == ‘OP_RETURN’:`'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
- en: '`content_b = bytes.fromhex(outp[‘content_hash256’])`'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptPubkey_b = bytes([OP_RETURN]) \ + getWithPushdata(content_b)`'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
- en: '`else:`'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptPubkey_b = \`'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
- en: '`getScriptPubkeyFromAddress(outp[‘address’])`'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += createVarInt(len(scriptPubkey_b))`'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += scriptPubkey_b`'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += struct.pack(‘<L’, txn_struct[‘locktime’])`'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += struct.pack(‘<L’, hashtype)`'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
- en: '`return preimage_b`'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.15:** Method to create signature preimage for all sighash types'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the createSignedInput method updated after accumulating all
    the conditions we had used in the preceding use cases:'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
- en: '`def createSignedInput(txn_input: dict, signgrp, script_b: bytes):`'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
- en: '`prevtxn = txn_input[‘prevtxn’]`'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
- en: '`prevtx_rb = bytes.fromhex(prevtxn)[::-1]`'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
- en: '`prevtxnindex = txn_input[‘prevtxnindex’]`'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
- en: '`sgntxnin_b = prevtx_rb + struct.pack(‘<L’, prevtxnindex)`'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
- en: '`if ‘input_txn’ in txn_input: #added`'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig = txn_input[‘scriptsig’]`'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b = bytes.fromhex(scriptSig)`'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
- en: '`elif txn_input[‘script_type’] == ‘P2SH_Multisig’:`'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b = createScriptSigForMultiSig(signgrp, script_b)`'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
- en: '`elif txn_input[‘script_type’] == ‘P2SH_RelativeTimeLock’:`'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b = createScriptSigForRelTimeLock(signgrp, script_b)`'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
- en: '`elif txn_input[‘script_type’] == ‘P2SH_Condition’:`'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b = createScriptSigForCond(signgrp,`'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
- en: '`script_b,`'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
- en: '`txn_input[‘condition’])`'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
- en: '`elif txn_input[‘script_type’] == ‘P2SH_WithSecret’:`'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
- en: '`if txn_input[‘condition’]:`'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b = createScriptSigWithSecret(signgrp, script_b, txn_input[**‘secret’**],
    **True**)`'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
- en: '`else:`'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b = createScriptSigWithSecret(signgrp, script_b, **‘’**, **False**)`'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
- en: '`elif txn_input[‘script_type’] == ‘P2PKH’:`'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptSig_b = createScriptSigForP2PKH(txn_input, signgrp)`'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
- en: '`sgntxnin_b += createVarInt(len(scriptSig_b)) + scriptSig_b`'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
- en: '`return sgntxnin_b`'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.16:** Method to prepare inputs for signed transaction'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
- en: The transactions are generated by each individual and sent to someone to collate.
    Each transaction goes into a new field, `**input_txn**`, in the transaction structure.
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
- en: 'We need code to parse and populate transaction structure with previous the
    transaction-ID, the previous transaction output `**index**`, and `**scriptSig**`.
    The following method does this:'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
- en: '`def updateTxnStructInput(txn_struct: dict, index: int):`'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
- en: '`txn_s = txn_struct[‘inputs’][index][‘input_txn’]`'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
- en: '`txn_b = bytes.fromhex(txn_s)`'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
- en: '`with mmap.mmap(-1, len(txn_b)) as txn_m:`'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
- en: '`txn_m.write(txn_b)`'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
- en: '`txn_m.seek(0)`'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
- en: '`inp = getTransactionInfo(txn_m)`'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
- en: '`txn_input = txn_struct[‘inputs’][index]`'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
- en: '`txn_input[‘prevtxn’] = inp[‘inputs’][0][‘prev_tx_hash’]`'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
- en: '`txn_input[‘prevtxnindex’] = inp[‘inputs’][0][‘prev_tx_out_index’]`'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
- en: '`txn_input[‘scriptsig’] = inp[‘inputs’][0][‘scriptsig’]`'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
- en: '`return txn_struct`'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.17:** Update transaction structure from input transaction hex
    string'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
- en: '`The update structure is called within the following program:`'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
- en: '`def getSignaturesAndExecScripts(txn_struct: dict):`'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
- en: '`signgrp_l = []`'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
- en: '`script_l = []`'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
- en: '`for inp_index in range(txn_struct[‘input_count’]):`'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
- en: '`inp = txn_struct[‘inputs’][inp_index]`'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
- en: '`if ‘input_txn’ in inp:`'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
- en: '`txn_struct = updateTxnStructInput(txn_struct, inp_index)`'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
- en: '`signgrp_l.append([])`'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
- en: '`script_l.append(b’’)`'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
- en: '`else:`'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
- en: '`script_b = getExecutionScript(txn_struct, inp_index)`'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b = createSignaturePreimage(txn_struct, script_b, inp_index)`'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
- en: '`signgrp = []`'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
- en: '`for privkey in inp[‘privkeys’]:`'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
- en: '`hashtype = inp[‘hash_type’]`'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
- en: '`sign_b = signMessage(preimage_b, privkey, hashtype)`'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
- en: '`signgrp.append(sign_b)`'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
- en: '`signgrp_l.append(signgrp)`'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
- en: '`script_l.append(script_b)`'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
- en: '`return txn_struct, signgrp_l, script_l`'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.18:** Modified method on signatures and scripts to also include
    modified transaction structure'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
- en: The preceding method now returns the updated structure as well.
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
- en: There are different conditions in which collaborative transactions may be required.
    Some of these are discussed here.
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
- en: '[Charity use case](toc.xhtml#s246a)'
  id: totrans-748
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the case of charity, people donate money to the organization, and the organization
    then uses those funds and funds from its reserve to perform social service activities.
    Those funds are also used to pay salaries to the regular employees.
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we are using `**SIGHASH_NONE|SIGHASH_ANYONECANPAY**` as donors
    do not know where the funds will be used and so, they cannot sign the outputs.
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
- en: In this use case, the individuals donating will create a transaction without
    outputs and send it to the charitable trust. This transaction will include signature.
    Then, the charitable trust will add additional funds from its reserves and pay
    the vendor, which will provide food, clothing, etc. to the destitute children
    of the organization.
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an illustration of charity:'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.38.jpg)'
  id: totrans-753
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.38:** Charity use case'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
- en: We write code in which Alice and Bob pay 50 ![](images/Bitcoin.jpg) each to
    the trust, and the trust pays 125 ![](images/Bitcoin.jpg) to the merchant after
    adding their 50![](images/Bitcoin.jpg) as additional contribution and pays back
    the rest to itself as change after deducting network fee.
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
- en: 'For Alice, we create code with the following transaction structure method:'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
- en: '`def createTransactionStruct():`'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
- en: '`txn = {}`'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘version’] = 1`'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘input_count’] = 1`'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’] = []`'
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
- en: '`input0 = {}`'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘prevtxn’] = ‘5efcf04e32f061b9c4894f5b3a59fb3d8c5c56a6e7340b89b3a1a9ebacca998f’`'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘prevtxnindex’] = 0`'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘script_type’] = ‘P2PKH’`'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘privkeys’] = [‘KwfxnwxpPG1RmhU8jaU8Ron4m1KZGymLAFNaMnSTonoZ7AQfnV53’]`'
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘script_pubkey’] = ‘76a91481d7033c19dcec645cb3f86ce41678756850ba4d88ac’`'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘hash_type’] = SIGHASH_ANYONECANPAY|SIGHASH_NONE`'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’].append(input0)`'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘out_count’] = 0`'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘locktime’] = 0`'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
- en: '`return txn`'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.19:** Method to define transaction structure for Alice in charity
    use case'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
- en: 'On executing the program, we get the following transaction:'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.39.jpg)'
  id: totrans-775
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.39:** Transaction hex code for Alice in charity use case'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the script in the transaction:'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.40.jpg)'
  id: totrans-778
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.40:** ScriptSig for transaction created for Alice in charity use
    case'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
- en: In the case of sighash-type `**ANYONECANPAY**`, the spender is not aware of
    how many other transactions are going to get merged. So, the input index is 0
    even though it may fall in a different index in the final transaction.
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we create a transaction for Bob by having the following fields in
    the transaction structure:'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘prevtxn’]=’7995c6e08aee1fb5ddb21c7b84ff949bdb2bd98183623606aa1732a61200c12f’`'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘privkeys’] = [‘L26JcHRhqEQv8V9DaAmE4bdszwqXS7tHznGYJPp7fxEoEQxxBPcQ’]`'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘script_pubkey’] = ‘76a914db610ec1429ecb422044ee4ea92f11bc080fdb3d88ac’`'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
- en: 'On executing, we get the following raw transaction:'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.41.jpg)'
  id: totrans-786
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.41:** Create a transaction for Bob in the charity use case'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
- en: Now, the charitable trust pays 125 ![](images/Bitcoin.jpg) to a merchant by
    contributing its own 25 ![](images/Bitcoin.jpg).
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
- en: Till now, the `**createTransactionStruct**` method consisted of previous transaction-ID
    and output indices. Now, to fund the final transaction, we already have two signed
    transactions from Alice and Bob. Consequently, this requires some modification
    to the existing code.
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
- en: 'The charitable trust pays 125 ![](images/Bitcoin.jpg) to merchant with address:'
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
- en: '`mnhWcUMqe9J1G4t3NMqNmLUqxfPTgwv7NK`'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
- en: 'And the change is paid to the following address:'
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
- en: '`mtRkMmpT6uhM9LXVPRk4ck9Gcaz9iuQgmZ`'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the modified transaction structure:'
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
- en: '`def createTransactionStruct():`'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
- en: '`txn = {}`'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘version’] = 1`'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘input_count’] = 3`'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’] = []`'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
- en: '`input0 = {}`'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘input_txn’] = ‘01000000018f99caaceba9a1b3890b34e7a6565c8c3dfb593a5b4f89c4b961f0324ef0fc5e000000006a47304402200a4ae1b5ddc7c49859001b9e2ff86bd4be57f44ce49571d6dc68e9942a86c990022054fa2e3446219e8dd6a4ba434d69bde460c7374228e6c529aaa95bb460e3ad2082210281238fc6d981efce6aa1b3ccb8556a1b115a40f8ab3315c003f415ceedc3defeffffffff0000000000’`'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘hash_type’] = SIGHASH_ANYONECANPAY|SIGHASH_NONE`'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’].append(input0)`'
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
- en: '`input1 = {}`'
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
- en: '`input1[‘input_txn’] = ‘01000000012fc10012a63217aa0636628381d92bdb9b94ff847b1cb2ddb51fee8ae0c69579000000006a4730440220152ecb49937c026ba62afd18604e916a515cb7727780b2e6b981cb0cb717a9940220197a071705e4f929b53e6aadefd477336765cb323ef77b86a3b6882669775d858221037fadaea6edf196bf70af16cefb2bd3c830e54c0a6e9a00bf7806b241933547f7ffffffff0000000000’`'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
- en: '`input1[‘hash_type’] = SIGHASH_ANYONECANPAY|SIGHASH_NONE`'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’].append(input1)`'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
- en: '`input2 = {}`'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
- en: '`input2[‘prevtxn’] = ‘c83e8dc76b2139f84235d38907291ebe2470786b2d5977302a63aff1c5d99649’`'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
- en: '`input2[‘prevtxnindex’] = 0`'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
- en: '`input2[‘script_type’] = ‘P2PKH’`'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
- en: '`input2[‘privkeys’] = [‘KxR8HHyfAwFPidCw2vXThXqT4vSMNeufirHFapnfCfkzLaohtujG’]`'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
- en: '`input2[‘script_pubkey’] = ‘76a9142004e0ff6a6f08115d048fd9af177fae702f681a88ac’`'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
- en: '`input2[‘hash_type’] = SIGHASH_ALL`'
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’].append(input2)`'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘out_count’] = 2`'
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’] = []`'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
- en: '`output0 = {}`'
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘satoshis’] = 12500000000`'
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘script_type’] = ‘P2PKH’`'
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘address’] = ‘mnhWcUMqe9J1G4t3NMqNmLUqxfPTgwv7NK’`'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’].append(output0)`'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
- en: '`output1 = {}`'
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
- en: '`output1[‘satoshis’] = 2499900000`'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
- en: '`output1[‘script_type’] = ‘P2PKH’`'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
- en: '`output1[‘address’] = ‘mtRkMmpT6uhM9LXVPRk4ck9Gcaz9iuQgmZ’`'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’].append(output1)`'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘locktime’] = 0`'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
- en: '`return txn`'
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.20:** Method to define combined transaction structure in charity
    use case'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
- en: 'We execute the preceding program to obtain the final transaction. On decoding
    the final transaction, we get the following `**scriptSig**` for corresponding
    inputs:'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
- en: '**Input 0:**'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.42.jpg)'
  id: totrans-833
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.42:** ScriptSig of first input for transaction in the charity use
    case'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
- en: '**Input 1:**'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.43.jpg)'
  id: totrans-836
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.43:** ScriptSig of second input for transaction in the charity
    use case'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
- en: '**Input 2:**'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.44.jpg)'
  id: totrans-839
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.44:** ScriptSig of third input for transaction in the charity use
    case'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the transaction published successfully to the
    network:'
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.45.jpg)'
  id: totrans-842
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.45:** Transaction in charity use case is successfully published'
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
- en: '[Subsidy use case](toc.xhtml#s247a)'
  id: totrans-844
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This use case solves the requirement where a person or organization partially
    sponsors or subsidizes payment for another individual.
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we use `**SIGHASH_SINGLE|SIGHASH_ANYONECANPAY**` as only one input
    and one output are known by an individual.
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the individual receiving subsidy only pays discounted price for
    the service or product. However, the merchant or service provider receives full
    payment, as the rest of the amount is added by the sponsoring person or organization.
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
- en: 'This use case has limited benefit as it is not useful for the following conditions:'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
- en: Individual needs funds from multiple addresses
  id: totrans-849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Individual needs to pay from a single address to multiple payees
  id: totrans-850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If more than one person is being subsidized, then everyone who is being subsidized
    also gets an index that relates to the index of the final transaction output where
    their transaction will be added.
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
- en: We consider an example use case in which two students are selected for an educational
    trip. The school is sponsoring 25% of the cost of their trip. Since there is more
    than one beneficiary of the subsidy and one final transaction is created, one
    student gets index value as 0, and the other gets index value as 1.
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the illustration of the use case where one person’s purchase
    is subsidized by another person:'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.46.jpg)'
  id: totrans-854
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.46:** Subsidy use case'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, Alice must prepare a transaction for index 0\. So, she does not
    need to make any changes to the code, except transaction structure. The following
    code is for transaction structure for Alice:'
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
- en: '`def createTransactionStruct():`'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
- en: '`txn = {}`'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘version’] = 1`'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘input_count’] = 1`'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’] = []`'
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
- en: '`input0 = {}`'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘prevtxn’] = ‘5efcf04e32f061b9c4894f5b3a59fb3d8c5c56a6e7340b89b3a1a9ebacca998f’`'
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘prevtxnindex’] = 0`'
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘script_type’] = ‘P2PKH’`'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘privkeys’] = [‘KwfxnwxpPG1RmhU8jaU8Ron4m1KZGymLAFNaMnSTonoZ7AQfnV53’]`'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘script_pubkey’] = ‘76a91481d7033c19dcec645cb3f86ce41678756850ba4d88ac’`'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘input_index’] = 0`'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘hash_type’] = SIGHASH_ANYONECANPAY|SIGHASH_SINGLE`'
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’].append(input0)`'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘out_count’] = 1`'
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’] = []`'
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
- en: '`output0 = {}`'
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘satoshis’] = 6667000000`'
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘script_type’] = ‘P2PKH’`'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘address’] = ‘msV23rBcHAtQWSkWV9ph91DV65VduWi1Vt’`'
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’].append(output0)`'
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘locktime’] = 0`'
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
- en: '`return txn`'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.21:** Method to define transaction structure for Alice in the
    subsidy use case'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
- en: 'We execute it to get Alice a signed transaction:'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.47.jpg)'
  id: totrans-882
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.47:** Created transaction for Alice in the subsidy use case'
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
- en: In the case of Bob, since index is 1, Bob will need to have empty output at
    index 0\. This needs to be handled in the code.
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code for the transaction structure:'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
- en: '`def createTransactionStruct():`'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
- en: '`txn = {}`'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘version’] = 1`'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘input_count’] = 1`'
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’] = []`'
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
- en: '`input0 = {}`'
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘prevtxn’] = ‘7995c6e08aee1fb5ddb21c7b84ff949bdb2bd98183623606aa1732a61200c12f’`'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘prevtxnindex’] = 0`'
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘script_type’] = ‘P2PKH’`'
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘privkeys’] = [‘L26JcHRhqEQv8V9DaAmE4bdszwqXS7tHznGYJPp7fxEoEQxxBPcQ’]`'
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘script_pubkey’] = ‘76a914db610ec1429ecb422044ee4ea92f11bc080fdb3d88ac’`'
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘input_index’] = 1`'
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘hash_type’] = SIGHASH_ANYONECANPAY|SIGHASH_SINGLE`'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’].append(input0)`'
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘out_count’] = 2`'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’] = []`'
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
- en: '`output0 = {}`'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘script_type’] = ‘’`'
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’].append(output0)`'
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
- en: '`output1 = {}`'
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
- en: '`output1[‘satoshis’] = 6667000000`'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
- en: '`output1[‘script_type’] = ‘P2PKH’`'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
- en: '`output1[‘address’] = ‘mnhWcUMqe9J1G4t3NMqNmLUqxfPTgwv7NK’`'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’].append(output1)`'
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘locktime’] = 0`'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
- en: '`return txn`'
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.22:** Method to define transaction structure for Bob in subsidy
    use case'
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have introduced new `**script_type**`. This needs to be handled
    when we create signature preimage and signed transaction.
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code creates signature preimage:'
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
- en: '`def createSignaturePreimage(txn_struct: dict,`'
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
- en: '`script_b: bytes,`'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
- en: '`inp_index: int):`'
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b = b’’`'
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += struct.pack(‘<L’, txn_struct[‘version’])`'
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
- en: '`hashtype = txn_struct[‘inputs’][inp_index][‘hash_type’]`'
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
- en: '`if hashtype & SIGHASH_ANYONECANPAY:`'
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += createVarInt(1)`'
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
- en: '`inputs = [inp_index] # only current input is processed`'
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
- en: '`else:`'
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += createVarInt(txn_struct[‘input_count’])`'
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
- en: '`inputs = range(txn_struct[‘input_count’])`'
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
- en: '`for i in inputs:`'
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
- en: '`inp = txn_struct[‘inputs’][i]`'
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += bytes.fromhex(inp[‘prevtxn’])[::-1]`'
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += struct.pack(‘<L’, inp[‘prevtxnindex’])`'
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
- en: '`if i == inp_index:`'
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += createVarInt(len(script_b))`'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += script_b`'
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
- en: '`else:`'
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += b’\x00’`'
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += getSequence(txn_struct, i)`'
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
- en: '`# remove SIGHASH_ANYONECANPAY`'
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
- en: '`if hashtype & 0x0F == SIGHASH_NONE:`'
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += createVarInt(0)`'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
- en: '`else:`'
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
- en: '`# remove SIGHASH_ANYONECANPAY`'
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
- en: '`if hashtype & 0x0F == SIGHASH_SINGLE:`'
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += createVarInt(inp[‘input_index’] + 1)`'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
- en: '`outputs = range(inp[‘input_index’] + 1)`'
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
- en: '`else:`'
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += createVarInt(txn_struct[‘out_count’])`'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
- en: '`outputs = range(txn_struct[‘out_count’])`'
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
- en: '`for out in outputs:`'
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
- en: '`outp = txn_struct[‘outputs’][out]`'
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
- en: '`if outp[‘script_type’] == ‘’:`'
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += bytes([0xff])*8`'
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += bytes([0x00])`'
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
- en: '`else:`'
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += struct.pack(‘<Q’, outp[‘satoshis’])`'
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
- en: '`if outp[‘script_type’] == ‘OP_RETURN’:`'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
- en: '`content_b = bytes.fromhex(outp[‘content_hash256’])`'
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptPubkey_b = bytes([OP_RETURN]) \ + getWithPushdata(content_b)`'
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
- en: '`else:`'
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptPubkey_b = \ getScriptPubkeyFromAddress(outp[**‘address’**])`'
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += createVarInt(len(scriptPubkey_b))`'
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += scriptPubkey_b`'
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += struct.pack(‘<L’, txn_struct[‘locktime’])`'
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
- en: '`preimage_b += struct.pack(‘<L’, hashtype)`'
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
- en: '`return preimage_b`'
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.23:** Method to create preimage with additional support for empty
    script type'
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code for creating signed transaction:'
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
- en: '`def createSignedTransaction(txn_struct: dict,`'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
- en: '`signgrp_l: list,`'
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
- en: '`script_l: list):`'
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
- en: '`sgntxn_b = b’’`'
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
- en: '`sgntxn_b += struct.pack(‘<L’, txn_struct[‘version’])`'
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
- en: '`sgntxn_b += createVarInt(txn_struct[‘input_count’])`'
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
- en: '`for i in range(txn_struct[‘input_count’]):`'
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
- en: '`txn_input = txn_struct[‘inputs’][i]`'
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
- en: '`sgntxn_b += createSignedInput(txn_input, signgrp_l[i], script_l[i])`'
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
- en: '`sgntxn_b += getSequence(txn_struct, i)`'
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
- en: '`sgntxn_b += createVarInt(txn_struct[‘out_count’])`'
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
- en: '`for out in range(txn_struct[‘out_count’]):`'
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
- en: '`outp = txn_struct[‘outputs’][out]`'
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
- en: '`if outp[‘script_type’] == ‘’:`'
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
- en: '`sgntxn_b += bytes([0xff])*8`'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
- en: '`sgntxn_b += bytes([0x00])`'
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
- en: '`else:`'
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
- en: '`sgntxn_b += struct.pack(‘<Q’, outp[‘satoshis’])`'
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
- en: '`if outp[‘script_type’] == ‘OP_RETURN’:`'
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
- en: '`content_b = bytes.fromhex(outp[‘content_hash256’])`'
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptPubkey_b = bytes([OP_RETURN]) \ + getWithPushdata(content_b)`'
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
- en: '`else:`'
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
- en: '`scriptPubkey_b = \ getScriptPubkeyFromAddress(outp[**‘address’**])`'
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
- en: '`sgntxn_b += createVarInt(len(scriptPubkey_b))`'
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
- en: '`sgntxn_b += scriptPubkey_b`'
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
- en: '`sgntxn_b += struct.pack(‘<L’, txn_struct[‘locktime’])`'
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
- en: '`return sgntxn_b`'
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.24:** Method to create signed transaction with additional support
    for empty script type'
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
- en: 'We get the following signed transaction for Bob:'
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.48.jpg)'
  id: totrans-996
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.48:** Created transaction for Bob in the subsidy use case'
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
- en: Alice and Bob give the transaction they created to the College. The College
    includes those transactions in the final transaction and publishes it.
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the transaction structure of the final transaction:'
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
- en: '`def createTransactionStruct():`'
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
- en: '`txn = {}`'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘version’] = 1`'
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘input_count’] = 3`'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’] = []`'
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
- en: '`input0 = {}`'
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘input_txn’] = ‘01000000018f99caaceba9a1b3890b34e7a6565c8c3dfb593a5b4f89c4b961f0324ef0fc5e000000006b483045022100ff8125ed9e52def07818aa14607ab73ede3fdbc2c0aba0721b6645f9522bac050220419d776c4f291e255cc1dead6fd6543ddd39f2cb65274858c50564b92ae3449683210281238fc6d981efce6aa1b3ccb8556a1b115a40f8ab3315c003f415ceedc3defeffffffff01c058628d010000001976a9148343cfe3998d8a49bcfeea63dcbe12643a8e884788ac00000000’`'
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘hash_type’] = SIGHASH_ANYONECANPAY|SIGHASH_SINGLE`'
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’].append(input0)`'
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
- en: '`input1 = {}`'
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
- en: '`input1[‘input_txn’] = ‘01000000012fc10012a63217aa0636628381d92bdb9b94ff847b1cb2ddb51fee8ae0c69579000000006a47304402205a2a89a88e5de4f7198369b0eb01a327a5a737f5d7b80167780c8d492c353e480220497f122aa2fb3fcab3f41a2dcaea67d6f2a68d1b690b121e68eb78b4c19bcbab8321037fadaea6edf196bf70af16cefb2bd3c830e54c0a6e9a00bf7806b241933547f7ffffffff02ffffffffffffffff00c058628d010000001976a9144ec804774aba76cb4685b5152d6924d8ce5c87ae88ac00000000’`'
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
- en: '`input1[‘hash_type’] = SIGHASH_ANYONECANPAY|SIGHASH_SINGLE`'
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’].append(input1)`'
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
- en: '`input2 = {}`'
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
- en: '`input2[‘prevtxn’] = ‘c83e8dc76b2139f84235d38907291ebe2470786b2d5977302a63aff1c5d99649’`'
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
- en: '`input2[‘prevtxnindex’] = 0`'
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
- en: '`input2[‘script_type’] = ‘P2PKH’`'
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
- en: '`input2[‘privkeys’] = [‘KxR8HHyfAwFPidCw2vXThXqT4vSMNeufirHFapnfCfkzLaohtujG’]`'
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
- en: '`input2[‘script_pubkey’] = ‘76a9142004e0ff6a6f08115d048fd9af177fae702f681a88ac’`'
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
- en: '`input2[‘hash_type’] = SIGHASH_ALL`'
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’].append(input2)`'
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘out_count’] = 3`'
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’] = []`'
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
- en: '`output0 = {}`'
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘satoshis’] = 6667000000`'
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘script_type’] = ‘P2PKH’`'
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘address’] = ‘msV23rBcHAtQWSkWV9ph91DV65VduWi1Vt’`'
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’].append(output0)`'
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
- en: '`output1 = {}`'
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
- en: '`output1[‘satoshis’] = 6667000000`'
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
- en: '`output1[‘script_type’] = ‘P2PKH’`'
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
- en: '`output1[‘address’] = ‘mnhWcUMqe9J1G4t3NMqNmLUqxfPTgwv7NK’`'
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’].append(output1)`'
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
- en: '`output2 = {}`'
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
- en: '`output2[‘satoshis’] = 1665990000`'
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
- en: '`output2[‘script_type’] = ‘P2PKH’`'
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
- en: '`output2[‘address’] = ‘mtRkMmpT6uhM9LXVPRk4ck9Gcaz9iuQgmZ’`'
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’].append(output2)`'
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘locktime’] = 0`'
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
- en: '`return txn`'
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.25:** Method to define combined transaction structure in the charity
    use case'
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
- en: 'We execute the code to create the final transaction, as follows:'
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.49.jpg)'
  id: totrans-1042
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.49:** Created transaction in the subsidy use case'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
- en: 'We publish this transaction using Bitcoin Core software, as follows:'
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.50.jpg)'
  id: totrans-1045
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.50:** Subsidy use case transaction published successfully'
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
- en: '[Planned contribution within a group](toc.xhtml#s248a)'
  id: totrans-1047
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike subsidy or charity, in this case, the involved participants are contributing
    for a known purpose, like buying a gift for a teacher. Everyone contributes their
    portion or fair share for buying the gift, and everyone knows how they are paying.
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we are using `**SIGHASH_ALL|SIGHASH_ANYONECANPAY**` as donors
    know where the funds will be used and so, sign the outputs.
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
- en: In this case, one person will create a raw transaction message containing all
    inputs and outputs that everyone signs, and the final signed transaction is then
    published.
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be understood from the following illustration:'
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.51.jpg)'
  id: totrans-1052
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.51:** Planned group transaction'
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding illustration, Alice, Bob, and Carol are buying a gift together
    for their teacher. Alice and Bob create a transaction of paying a merchant and
    give the transaction to Carol. Carol creates the final transaction using the transaction
    received from Alice and Bob and adds her contribution to the final transaction.
    Carol signs the final transaction before publishing it to the Bitcoin network.
    The following is the code for the transaction structure of Alice:'
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
- en: '`def createTransactionStruct():`'
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
- en: '`txn = {}`'
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘version’] = 1`'
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘input_count’] = 1`'
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’] = []`'
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
- en: '`input0 = {}`'
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘prevtxn’] = ‘5efcf04e32f061b9c4894f5b3a59fb3d8c5c56a6e7340b89b3a1a9ebacca998f’`'
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘prevtxnindex’] = 0`'
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘script_type’] = ‘P2PKH’`'
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘privkeys’] = [‘KwfxnwxpPG1RmhU8jaU8Ron4m1KZGymLAFNaMnSTonoZ7AQfnV53’]`'
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘script_pubkey’] = ‘76a91481d7033c19dcec645cb3f86ce41678756850ba4d88ac’`'
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘hash_type’] = SIGHASH_ANYONECANPAY|SIGHASH_ALL`'
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’].append(input0)`'
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘out_count’] = 1`'
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’] = []`'
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
- en: '`output0 = {}`'
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘satoshis’] = 14999990000`'
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘script_type’] = ‘P2PKH’`'
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘address’] = ‘msV23rBcHAtQWSkWV9ph91DV65VduWi1Vt’`'
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’].append(output0)`'
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘locktime’] = 0`'
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
- en: '`return txn`'
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.26:** Method to define transaction structure for Alice in planned
    group transaction'
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
- en: 'Alice creates the following transaction:'
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.52.jpg)'
  id: totrans-1079
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.52:** Transaction hex code for Alice in planned group transaction'
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
- en: 'We modify the following fields in the code for the transaction structure to
    make it for Bob:'
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘prevtxn’] = ‘7995c6e08aee1fb5ddb21c7b84ff949bdb2bd98183623606aa1732a61200c12f’`'
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘privkeys’] = [‘L26JcHRhqEQv8V9DaAmE4bdszwqXS7tHznGYJPp7fxEoEQxxBPcQ’]`'
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘script_pubkey’] = ‘76a914db610ec1429ecb422044ee4ea92f11bc080fdb3d88ac’`'
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.34:** Updated field for Bob in method to define transaction structure
    in planned group transaction'
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
- en: 'Bob creates the following transaction:'
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.53.jpg)'
  id: totrans-1087
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.53:** Transaction hex code for Bob in planned group transaction'
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
- en: 'Carol adds her own input and combines Alice’s and Bob’s transaction in the
    following transaction structure:'
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
- en: '`def createTransactionStruct():`'
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
- en: '`txn = {}`'
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘version’] = 1`'
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘input_count’] = 3`'
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’] = []`'
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
- en: '`input0 = {}`'
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘input_txn’] = ‘01000000018f99caaceba9a1b3890b34e7a6565c8c3dfb593a5b4f89c4b961f0324ef0fc5e000000006a473044022073ecf25c06ffe90cb03951db885defb1a12aaf50f7b068a94dc6fa3f8dd69cf9022070f3b386c9ec95a24f475bb6b5add578591985320b4ab6424886612cd830b9c581210281238fc6d981efce6aa1b3ccb8556a1b115a40f8ab3315c003f415ceedc3defeffffffff01f0ae117e030000001976a9148343cfe3998d8a49bcfeea63dcbe12643a8e884788ac00000000’`'
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
- en: '`input0[‘hash_type’] = SIGHASH_ANYONECANPAY|SIGHASH_ALL`'
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’].append(input0)`'
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
- en: '`input1 = {}`'
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
- en: '`input1[‘input_txn’] = ‘01000000012fc10012a63217aa0636628381d92bdb9b94ff847b1cb2ddb51fee8ae0c69579000000006a473044022002388c5d0d89d73697abead51ae87cb6d9421662ecb513d620e76b90118307ff02206fe1b65fb514bb1e47c279047fe226b9aedd7ced45902cb377bbb70d60e49fb58121037fadaea6edf196bf70af16cefb2bd3c830e54c0a6e9a00bf7806b241933547f7ffffffff01f0ae117e030000001976a9148343cfe3998d8a49bcfeea63dcbe12643a8e884788ac00000000’`'
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
- en: '`input1[‘hash_type’] = SIGHASH_ANYONECANPAY|SIGHASH_ALL`'
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’].append(input1)`'
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
- en: '`input2 = {}`'
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
- en: '`input2[‘prevtxn’] = ‘c83e8dc76b2139f84235d38907291ebe2470786b2d5977302a63aff1c5d99649’`'
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
- en: '`input2[‘prevtxnindex’] = 0`'
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
- en: '`input2[‘script_type’] = ‘P2PKH’`'
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
- en: '`input2[‘privkeys’] = [‘KxR8HHyfAwFPidCw2vXThXqT4vSMNeufirHFapnfCfkzLaohtujG’]`'
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
- en: '`input2[‘script_pubkey’] = ‘76a9142004e0ff6a6f08115d048fd9af177fae702f681a88ac’`'
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
- en: '`input2[‘hash_type’] = SIGHASH_ALL`'
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘inputs’].append(input2)`'
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘out_count’] = 1`'
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’] = []`'
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
- en: '`output0 = {}`'
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘satoshis’] = 14999990000`'
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘script_type’] = ‘P2PKH’`'
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
- en: '`output0[‘address’] = ‘msV23rBcHAtQWSkWV9ph91DV65VduWi1Vt’`'
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘outputs’].append(output0)`'
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
- en: '`txn[‘locktime’] = 0`'
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
- en: '`return txn`'
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
- en: '**Program 11.27:** Method to define combined transaction structure in planned
    group transaction'
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
- en: 'Carol creates the following transaction:'
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.54.jpg)'
  id: totrans-1122
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.54:** Transaction hex code for Carol in planned group transaction'
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
- en: 'And then she publishes the transaction as follows:'
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-11.55.jpg)'
  id: totrans-1125
  prefs: []
  type: TYPE_IMG
- en: '**Figure 11.55:** Planned group transaction is published successfully'
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
- en: With these collaborative transactions, you learnt how multiple individuals can
    collaborate to form a collated transaction.
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
- en: '[Conclusion](toc.xhtml#s249a)'
  id: totrans-1128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learnt about the different ways in which we can use transaction
    and scripting. You also learnt how to timestamp a digital property and how to
    lock a transaction until a block height or time is reached. Further on in the
    chapter, you learnt how to ensure the security of payment, which can lead to building
    peer-to-peer exchange. Additionally, you learnt how to contribute to a transaction
    and collate contributed transactions into a final transaction.
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, you will learn about an important softfork: segregated
    witness.'
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
- en: '[Points to remember](toc.xhtml#s250a)'
  id: totrans-1131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Digital asset or digital property is the digital representation of a property.
  id: totrans-1132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Digital property is unique and is linked to the owner’s Bitcoin address at any
    point.
  id: totrans-1133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Digital property can have marketable value and can be sold, auctioned, or mortgaged.
  id: totrans-1134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `**OP_RETURN**` opcode is used to store data in a transaction.
  id: totrans-1135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `**OP_RETURN**` opcode is non spendable and stays associated with the transaction
    only.
  id: totrans-1136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A transaction can be locked till the medium time past is less than the locktime
    or till block height is reached.
  id: totrans-1137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A transaction can also be locked based on relative locktime from funding transaction
    in terms of either block height or medium time past.
  id: totrans-1138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relative locktime is a softfork and is used in a script.
  id: totrans-1139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relative locktime modifies the method of evolution of the `**nSequence**` field.
  id: totrans-1140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smart contract is a contract between two or more parties written in the form
    of an executable program.
  id: totrans-1141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitcoin smart contract has certain limitations and cannot do everything that
    a few other smart contract platforms can do.
  id: totrans-1142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitcoin smart contract provides enough flexibility to help overcome most of
    its limitations.
  id: totrans-1143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Questions](toc.xhtml#s251a)'
  id: totrans-1144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Write a program to implement a collaborative use case in which Alice and Bob
    bet on their respective teams winning in a football match. If team A wins, Alice
    pays Bob 45 ![](images/Bitcoin.jpg). If team B wins, Bob pays Alice 45 ![](images/Bitcoin.jpg).
    Both lock 50 ![](images/Bitcoin.jpg) in a contract. To settle the bet, Carol takes
    his fees, which is 4.9999 ![](images/Bitcoin.jpg). The remaining 0.0001 ![](images/Bitcoin.jpg)
    are paid as fees to the network. Carol will provide the required condition to
    contract for transferring 95 ![](images/Bitcoin.jpg) to the winner, which is 45
    ![](images/Bitcoin.jpg) as winning amount and 50 ![](images/Bitcoin.jpg) as own
    money.
  id: totrans-1145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program to implement peer-to-peer exchange involving escrow. The program
    needs to have 2-of-3-multisig with `**nLockTime**`. In the program, you need to
    implement the flow chart illustrated in *[figure 11.32](#fig11_32)*.
  id: totrans-1146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program to sell digital asset from one person to another such that the
    transfer of asset only happens if the receiver reveals the secret shared by the
    seller on the Bitcoin network. The following illustration describes the scenario:![](images/Figure-11.56.jpg)
  id: totrans-1147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Figure 11.56:** Scenario'
  id: totrans-1148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'True/False:'
  id: totrans-1149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`OP_RETURN` opcode does not need a nValue. So, it does not cost anything to
    add them in a transaction.'
  id: totrans-1150
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Digital property is an asset that is owned by only one person at a time and
    can be transferred from one wallet address to another.
  id: totrans-1151
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A condition in a contract that, once valid, cannot become invalid in the future.
  id: totrans-1152
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill in the blanks:'
  id: totrans-1153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Medium time past is calculated by taking the median of the timestamps of the
    previous ________ blocks.
  id: totrans-1154
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Sequence value must be ________ than or equal to `OP_CHECKSEQUENCEVERIFY` for
    a transaction to be valid.
  id: totrans-1155
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To collate multiple SIGHASH_SINGLE transactions into a single final transaction,
    each individual transaction needs to have outputs at the right ____________.
  id: totrans-1156
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
