- en: © Nishith Pathak and Anurag Bhandari 2018Nishith Pathak and Anurag BhandariIoT,
    AI, and Blockchain for .NET[https://doi.org/10.1007/978-1-4842-3709-0_10](A458845_1_En_10_Chapter.html)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 2018年 Nishith Pathak 和 Anurag Bhandari
- en: 10. Making Predictions with Machine Learning
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10. 利用机器学习进行预测
- en: 'Nishith Pathak^(1 ) and Anurag Bhandari²(1)Kotdwara, Dist. Pauri Garhwal, India(2)Jalandhar,
    Punjab, IndiaOur adventures in AI 2.0 are nearing their conclusion. If you have
    gone through all of the previous nine chapters, you have almost all the skills
    needed to build the next generation of smart applications. You are almost AI 2.0
    ready. Almost.Reflecting on your journey so far, you now have a clear big-picture
    understanding of how AI, IoT, and Blockchain together form the AI 2.0 architecture
    (Chapter [1](A458845_1_En_1_Chapter.html)), know how to design and build highly
    scalable IoT solutions using Azure IoT Suite (Chapters [2](A458845_1_En_2_Chapter.html)
    and [3](A458845_1_En_3_Chapter.html)), are capable of adding intelligence to your
    applications and IoT solutions by AI-enabling them using Cognitive Services (Chapters
    [4](A458845_1_En_4_Chapter.html), [5](A458845_1_En_5_Chapter.html) and [6](A458845_1_En_6_Chapter.html)),
    know how to integrate your applications with decentralized, transparent and infinitely
    scalable smart networks using Azure Blockchain as a Service (Chapters [7](A458845_1_En_7_Chapter.html)
    and [8](A458845_1_En_8_Chapter.html)), and can analyze and visualize real-time
    data using Azure Stream Analytics and Power BI (Chapter [9](A458845_1_En_9_Chapter.html)).In
    the space of a few chapters, you learned so many “new” technologies. But this
    knowledge is incomplete without the technology that is a major enabler for AI
    and a key accompaniment in real-time data analytics. As you saw in Chapters [1](A458845_1_En_1_Chapter.html)
    and [9](A458845_1_En_9_Chapter.html), that technology is machine learning .Recapping
    from Chapter [1](A458845_1_En_1_Chapter.html), machine learning is the ability
    of a computer to learn without being explicitly programmed. This tremendous ability
    is what makes a computer think like a human. ML makes computers learn to identify
    and distinguish real-world objects through examples rather than instructions.
    It also gives them the ability to learn from their own mistakes through trial
    and error. And ML lends computers the power to make their own decisions once they
    have sufficiently learned about a topic.Perhaps the most useful aspect of ML—that
    makes it slightly better than human intelligence—is its ability to make predictions.
    Of course, not the kind we humans make by looking into crystal balls, rather informed,
    logical ones that can be made by looking at data patterns. There are machine learning
    algorithms that, if supplied with sufficient historic data, can predict how various
    data parameters will be at a point in the future. Weather, earthquake, and cyclone
    predictions are made through this technique, and so are predictions about finding
    water on a remote celestial body such as the Moon or Mars.How does machine learning
    do all this, you’ll learn shortly. By the end of this chapter, you will have learned
    about:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Nishith Pathak^(1 ) 和 Anurag Bhandari²(1) 印度，Pauri Garhwal 区的 Kotdwara(2) 印度，旁遮普邦的
    Jalandhar我们在 AI 2.0 的冒险即将结束。如果你已经阅读了前面的九章，那么你几乎拥有构建下一代智能应用所需的所有技能。你几乎已经准备好进入 AI
    2.0 时代。几乎。回顾一下你迄今为止的旅程，你现在对于 AI、物联网和区块链如何共同构建 AI 2.0 架构（第 [1](A458845_1_En_1_Chapter.html)
    章）有了清晰的大局认识，知道如何使用 Azure IoT 套件设计和构建高度可扩展的物联网解决方案（第 [2](A458845_1_En_2_Chapter.html)
    章和第 [3](A458845_1_En_3_Chapter.html) 章），能够通过启用 AI 为你的应用程序和物联网解决方案增加智能，使用认知服务（第
    [4](A458845_1_En_4_Chapter.html) 章、第 [5](A458845_1_En_5_Chapter.html) 章和第 [6](A458845_1_En_6_Chapter.html)
    章），知道如何将你的应用程序与分散的、透明的、无限可扩展的智能网络集成，使用 Azure 区块链即服务（第 [7](A458845_1_En_7_Chapter.html)
    章和第 [8](A458845_1_En_8_Chapter.html) 章），并且能够使用 Azure Stream Analytics 和 Power
    BI 分析和可视化实时数据（第 [9](A458845_1_En_9_Chapter.html) 章）。在几章的空间里，你学到了这么多“新”的技术。但是，没有了
    AI 的主要推动技术和实时数据分析的关键伴侣，这些知识就是不完整的。正如你在第 [1](A458845_1_En_1_Chapter.html) 章和第 [9](A458845_1_En_9_Chapter.html)
    章所见，这项技术就是机器学习。回顾第 [1](A458845_1_En_1_Chapter.html) 章，机器学习是计算机在没有明确编程的情况下学习的能力。这一巨大的能力使得计算机能够像人类一样思考。机器学习使计算机通过示例而不是指令来学习识别和区分现实世界中的对象。它还赋予了它们通过试错来学习自己的错误的能力。而且，一旦它们对一个主题有了足够的了解，机器学习就赋予了计算机做出自己的决定的能力。也许
    ML 最有用的方面——使它略优于人类智能的地方——是它的预测能力。当然，不是我们人类通过看水晶球做出的那种预测，而是通过查看数据模式做出的有根据、合乎逻辑的预测。有一些机器学习算法，如果提供了足够的历史数据，就能够预测未来某一时刻各种数据参数的情况。天气、地震和气旋的预测就是通过这种技术进行的，像月球或火星这样的遥远天体上是否有水的预测也是如此。机器学习是如何做到这一切的，你很快就会了解到。到本章结束时，你将会学到：
- en: Machine learning (ML)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习（ML）
- en: Problems ML solves
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习解决的问题
- en: Types of machine learning
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习的类型
- en: Azure Machine Learning Studio—what and how
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure机器学习工作室——是什么及如何使用
- en: Picking the right algorithm to solve a problem
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择合适的算法解决问题
- en: Solving a real-world problem using ML
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用机器学习解决实际问题
- en: What Is Machine Learning?
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是机器学习？
- en: 'Now that we have a fair high-level functional idea about machine learning,
    let’s look at its more technical definition. ML is a field of computer science—evolved
    from the study of pattern recognition—that enables machines to learn from data
    to make predictions and progressively improve over time.It is commonly used in
    scenarios where designing software applications using explicit programming is
    not possible. These are scenarios where a computer may have to deal with completely
    new and previously unseen data to make predictions based on that data, making
    it practically impossible to write an exhaustive set of if-conditions to cover
    all possibilities. Some examples of such scenarios include:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对机器学习有了一个相当高层次的功能概念，让我们来看一下更加技术化的定义。机器学习是一门计算机科学领域——起源于模式识别的研究——它使得机器能够从数据中学习，进行预测并随着时间的推移逐步改进。它通常用于无法使用显式编程设计软件应用程序的场景。这些是一些场景，计算机可能必须处理全新的、以前未见过的数据来根据这些数据进行预测，使得编写一套详尽的if条件来覆盖所有可能性实际上是不可能的。这些场景的一些例子包括：
- en: 'Natural language understanding : There can be hundreds of ways to say the same
    sentence in just one language, owing to different dialects, slangs, grammatical
    flow, etc.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自然语言理解：同一句话在同一种语言中可能有数百种不同的表达方式，这是由于不同的方言、俚语、语法流等等。
- en: 'Email spam filtering : Spammers are consistently producing new kinds of spam
    and phishing emails every day.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子邮件垃圾邮件过滤：垃圾邮件发送者每天都在不断地生成新的垃圾邮件和网络钓鱼邮件。
- en: 'In-game AI : When playing a computer game against non-human enemies (bots),
    the behavior and actions of bots must adapt according to your unique style.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏中的人工智能：当与非人类敌人（机器人）对战时，机器人的行为和动作必须根据你的独特风格进行调整。
- en: 'Face recognition : One just cannot explicitly train a computer to recognize
    all the faces in the world.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人脸识别：一个人无法明确地训练计算机识别世界上所有的脸。
- en: 'In the video series Data Science for Beginners, Brandon Rohrer, Senior Data
    Scientist at Microsoft, explains that machine learning can really answer only
    these five questions:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在《数据科学入门》视频系列中，微软高级数据科学家Brandon Rohrer解释了机器学习实际上只能回答以下五个问题：
- en: Is this A or B? (classification)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是A还是B？（分类）
- en: Is this weird? (anomaly detection)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这很奇怪吗？（异常检测）
- en: How much or how many? (regression)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多少或多少？（回归）
- en: How is this organized? (clustering)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是如何组织的？（聚类）
- en: What should I do now? (reinforcement learning)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在我应该做什么？（强化学习）
- en: These are the problems that ML can solve. We’ll look at some of them in detail
    very soon.There are a bunch of algorithms associated with machine learning. Some
    of these are linear regression, neural network regression, two-class SVM, multiclass
    decision forest, K-means clustering, and PCA-based anomaly detection. Depending
    on the problem being solved, one algorithm may work better than all others. Writing
    ML algorithms is not a trivial task. Although it’s possible to write your own
    implementation of a well-established algorithm, doing so is not only time consuming
    but most of the times inefficient.When performing machine learning tasks, it’s
    best to use existing known and well-written implementations of these algorithms.
    There are free and open source machine learning frameworks—such as Torch, Tensorflow,
    and Theano—that effectively let you build machine learning models, albeit with
    the assumption that you know the internals of machine learning and statistics
    at least at a basic level. Alternatively, you can use Azure machine learning to
    build robust ML models through an interactive drag-and-drop interface, which does
    not require data science skills. You’ll see Azure ML in a bit.Using an existing
    ML framework not only greatly decreases the time to build the actual software
    application, it also ensures that you are using ML the way it’s meant to be. No
    matter what ML algorithm or framework you use, its high-level functioning never
    changes. Figure [10-1](#Fig1)  , repeated from Chapter [1](A458845_1_En_1_Chapter.html),
    shows how ML works at a high level.![A458845_1_En_10_Fig1_HTML.jpg](A458845_1_En_10_Fig1_HTML.jpg)Figure
    10-1High-level picture of how machine learning worksAll ML algorithms rely heavily
    on data to create a model that will generate predictions. The more sample data
    you have, the more accurate the model. In the case of machine translation (automated
    machine-based language translation), sample data is a large collection (corpus)
    of sentences written in the source language and their translations written in
    a target language. A suitable ML algorithm (typically an artificial neural network)
    trains the system on the sample data—meaning that it goes through the data identifying
    patterns, without explicitly being told about language grammar and semantics.
    It then spits out a model that can automatically translate sentences from source
    to target language, even for ones it was never trained on. The trained model can
    then be incorporated inside a software application to make machine translation
    a feature of that application.It is important to note that training is an iterative
    and very resource- and time-consuming process. On regular computers, this may
    take months to complete when running 24x7\. ML algorithms typically demand high-end
    computers, with specialized graphical processing units (GPUs), to finish training
    in reasonable amounts of time.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是机器学习可以解决的问题。我们将很快详细介绍其中一些。与机器学习相关的算法有很多。其中一些包括线性回归、神经网络回归、二分类支持向量机、多分类决策森林、K均值聚类和基于主成分分析的异常检测。根据要解决的问题，一个算法可能比其他所有算法都更有效。编写机器学习算法并不是一件简单的任务。尽管可以编写自己的实现来实现一个成熟的算法，但这样做不仅耗时，而且大多数情况下效率低下。在执行机器学习任务时，最好使用现有已知且编写良好的这些算法的实现。有免费且开源的机器学习框架——例如Torch、Tensorflow和Theano——可以让你有效地构建机器学习模型，尽管前提是你至少具备基本水平的机器学习和统计知识。另外，你还可以使用Azure机器学习通过交互式拖放界面构建强大的ML模型，而无需掌握数据科学技能。稍后你会看到Azure
    ML。使用现有的ML框架不仅极大地减少了构建实际软件应用程序的时间，而且确保你以应有的方式使用ML。无论你使用什么ML算法或框架，其高层次的功能永远不会改变。图[10-1](#Fig1)，从第[1](A458845_1_En_1_Chapter.html)章重复，显示了ML在高层次上的工作原理。![A458845_1_En_10_Fig1_HTML.jpg](A458845_1_En_10_Fig1_HTML.jpg)图10-1机器学习工作的高层次图像所有ML算法都严重依赖数据来创建生成预测的模型。你拥有的样本数据越多，模型就越准确。在机器翻译（自动机器翻译）的情况下，样本数据是源语言中写的句子及其目标语言中的翻译的大量集合（语料库）。一个适当的ML算法（通常是人工神经网络）在样本数据上训练系统——这意味着它通过数据识别模式，而不是显式地告诉它语言语法和语义。然后，它会生成一个模型，可以自动将句子从源语言翻译到目标语言，甚至对它从未经过训练的句子也可以。训练后的模型可以被合并到软件应用程序中，使机器翻译成为该应用程序的一个特性。重要的是要注意，训练是一个迭代的、非常耗费资源和时间的过程。在普通计算机上，这可能需要数月时间才能完成，全天候运行。ML算法通常需要高端计算机，配备专门的图形处理单元（GPU），以在合理的时间内完成训练。
- en: ML and Data Science
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 机器学习与数据科学
- en: Machine learning is a confluence of computer science and statistics. Figure
    [10-2](#Fig2) illustrates this point. To perform their tasks, ML algorithms borrow
    heavily from well-established statistical techniques. Its data-driven approach
    and use of statistics sometimes makes it look synonymous with data science. Although
    both fields are technically similar, they differ heavily in terms of applications
    and use. In other words, machine learning is not the same as data science.![A458845_1_En_10_Fig2_HTML.jpg](A458845_1_En_10_Fig2_HTML.jpg)Figure
    10-2Machine learning is the progeny of computer science and statistics fields  ,
    both in turn descended from mathematicsWhile both the fields deal with massive
    amounts of data  to produce models, their focus areas are different. On one hand
    where data science focuses on data analytics to arrive at actionable insights
    that can help the management at an organization take effective decisions, on the
    other hand machine learning focuses on creating predictive models that can be
    used by other software components (rather than human beings) to produce accurate,
    data-driven results. Table [10-1](#Tab1) lists the common differences between
    the two fields.Table 10-1Major Differences Between Data Science  and Machine Learning
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习是计算机科学和统计学的交汇处。图 [10-2](#Fig2) 阐明了这一点。为了完成它们的任务，机器学习算法大量借鉴了成熟的统计技术。它的数据驱动方法和对统计的使用有时使其看起来与数据科学等同。虽然这两个领域在技术上是相似的，但它们在应用和使用方面存在很大的差异。换句话说，机器学习不等同于数据科学。![A458845_1_En_10_Fig2_HTML.jpg](A458845_1_En_10_Fig2_HTML.jpg)图
    10-2 机器学习是计算机科学和统计学领域的产物，这两个领域又源自数学，尽管这两个领域都处理大量的数据来生成模型，但它们的重点领域是不同的。数据科学侧重于数据分析，以得出能够帮助组织管理层做出有效决策的可操作见解，而机器学习侧重于创建可供其他软件组件（而不是人类）使用的预测模型，以生成准确的、数据驱动的结果。表
    [10-1](#Tab1) 列出了这两个领域之间的主要差异。表 10-1 数据科学与机器学习之间的主要差异
- en: '| Data Science | Machine Learning |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 数据科学 | 机器学习 |'
- en: '| :-- | :-- |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- |'
- en: '| Focus on performing analysis on data to produce insights. | Focus on using
    data for self-learning and making predictions. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 专注于对数据进行分析以产生见解。 | 专注于使用数据进行自我学习和预测。 |'
- en: '| Output: Graphs, Excel sheets. | Output: Software, API. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 输出：图形，Excel 表格。 | 输出：软件，API。 |'
- en: '| Audience: Other humans. | Audience: Other software. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 受众：其他人类。 | 受众：其他软件。 |'
- en: '| Considerable human intervention. | Zero human intervention. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 有相当多的人为干预。 | 没有人为干预。 |'
- en: A Quick Look at the Internals
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 快速了解内部情况
- en: 'With tools like Azure Machine Learning Studio, one is no longer required to
    know the internal workings of machine learning. Yet, brief knowledge about the
    internal technical details can help you optimize training, resulting in more accurate
    models.Until now, we have repeatedly been using terms such as model and training
    without explaining what they actually are. Sure, you at least know that training
    is the process through which an ML algorithm uses sample data to make a computer
    learn about something. You also know that model is the output of training process.
    But how is training done and what does a model actually look like?To answer these
    questions, consider the following example. The cars we drive vary in terms of
    engines, sizes, colors, features, etc. As a result, their mileage (miles per gallon/liter)
    varies a lot. If a car A gives x MPG, it’s difficult to say how many MPGs would
    a totally different car B would give. B may or may not give the same mileage x,
    depending on several factors, horsepower being a major one. Usually, with higher
    horsepower you get a lower mileage and vice versa.NoteOf course, horsepower is
    not the only factor that affects a car’s mileage. Other factors include number
    of cylinders, weight, acceleration, displacement, etc. We did not consider all
    these in our example for the sake of simplicity.Suppose that we have horsepower
    and mileage data for a large number of car models. But this list is not exhaustive
    and does not cover all models (or horsepower values). So, we want to use existing
    data so that given a new, previously unseen horsepower value, our system can predict
    the corresponding mileage. Table [10-2](#Tab2)  shows an incomplete snapshot of
    the data.Table 10-2Horsepower vs MPG Courtesy Dua, D. and Karra Taniskidou, E.
    (2017). UCI Machine Learning Repository [ [http://archive.ics.uci.edu/ml](http://archive.ics.uci.edu/ml)
    ]. Irvine, CA: University of California, School of Information and Computer Science.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 借助 Azure 机器学习工作室等工具，不再需要了解机器学习的内部工作原理。然而，对内部技术细节的简要了解可以帮助您优化训练，从而得到更准确的模型。直到现在，我们一直在重复使用诸如模型和训练之类的术语，却没有解释它们究竟是什么。当然，您至少知道训练是
    ML 算法使用样本数据使计算机学习某些内容的过程。您还知道模型是训练过程的输出。但是训练是如何进行的，模型实际上是什么样子呢？为了回答这些问题，请考虑以下示例。我们驾驶的汽车在引擎、尺寸、颜色、功能等方面各不相同。因此，它们的里程（每加仑/升的英里数）差异很大。如果汽车
    A 给出 x MPG，很难说一个完全不同的汽车 B 会给出多少 MPG。B 可能会给出相同的里程 x，也可能不会，这取决于几个因素，其中马力是一个主要因素。通常，马力越高，里程越低，反之亦然。注：当然，马力不是影响汽车里程的唯一因素。其他因素包括气缸数量、重量、加速度、排量等。出于简单起见，我们在示例中没有考虑所有这些因素。假设我们有大量车型的马力和里程数据。但是，此列表并不详尽，并且不涵盖所有车型（或马力值）。因此，我们希望利用现有数据，以便在给定一个新的、以前未见的马力值时，我们的系统可以预测相应的里程。表
    [10-2](#Tab2) 显示了数据的不完整快照。表 10-2 马力与 MPG 归功于 Dua, D. and Karra Taniskidou, E.
    (2017). UCI 机器学习资源库 [ [http://archive.ics.uci.edu/ml](http://archive.ics.uci.edu/ml)
    ]。尔湾，加利福尼亚州：加利福尼亚大学，信息与计算机科学学院。
- en: '| Car Name | Horsepower | Mileage (MPG) |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 车名 | 马力 | 油耗（MPG） |'
- en: '| :-- | :-- | :-- |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| Chevrolet Chevelle Malibu | 130 | 18 |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| Chevrolet Chevelle Malibu | 130 | 18 |'
- en: '| Buick Skylark 320 | 165 | 15 |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| Buick Skylark 320 | 165 | 15 |'
- en: '| Plymouth Satellite | 150 | 18 |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| Plymouth Satellite | 150 | 18 |'
- en: '| AMC Rebel SST | 150 | 16 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| AMC Rebel SST | 150 | 16 |'
- en: '| Ford Torino | 140 | 17 |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| Ford Torino | 140 | 17 |'
- en: Features and Target
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 特征与目标
- en: We want to use horsepower to predict mileage. In machine learning terminology,
    horsepower is a feature that will be used to determine our target (mileage). In
    order to design a model capable of accurately predicting MPG values, just five
    rows of data will not do. We’ll need a very large number of such rows with as
    distinct data as possible. Fortunately, we have close to 400 rows of data.If we
    were to plot a graph using 25 feature versus target data values, it will look
    as shown in Figure [10-3](#Fig3).![A458845_1_En_10_Fig3_HTML.jpg](A458845_1_En_10_Fig3_HTML.jpg)Figure
    10-3A scatter plot with horsepower on the x-axis and MPG on the y-axis
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望使用马力来预测油耗。在机器学习术语中，马力是一个特征，将被用来确定我们的目标（油耗）。为了设计一个能够准确预测MPG值的模型，仅有五行数据是不够的。我们需要尽可能多且具有不同数据的大量行数。幸运的是，我们有接近400行数据。如果我们使用25个特征对目标数据值绘制图表，它将如图[10-3](#Fig3)所示。![A458845_1_En_10_Fig3_HTML.jpg](A458845_1_En_10_Fig3_HTML.jpg)图10-3
    马力作为x轴，MPG作为y轴的散点图
- en: Model
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 模型
- en: Now if we carefully draw a line so that it passes through as many dots as possible,
    we’ll arrive at what looks like Figure [10-4a](#Fig4). This line represents our
    model. Yes, in linear regression this simple line is the model; the chart represents
    linear regression since we have drawn a straight line.Predicting MPG values for
    unknown horsepower is now easy. In Figure [10-4a](#Fig4), we can see that there
    does not seem to be a corresponding MPG for horsepower 120\. If we draw a dotted
    line at 120—perpendicular to the x-axis—the point where it intersects our model
    is the predicted MPG. As seen in Figure [10-4b](#Fig4), the predicted value is
    roughly 19.5.Programmatically, we can draw our model using the well-known mathematical
    equation y = mx + b (do you remember this from your high school days?), where
    m is line’s slope and b is its y-intercept. Since our y-axis represents target
    (MPG) and x-axis feature (horsepower), predicting MPG is as easy as plugging in
    the value of x to arrive at the value of y.![A458845_1_En_10_Fig4_HTML.jpg](A458845_1_En_10_Fig4_HTML.jpg)Figure
    10-4(a) Creating our linear regression model by drawing a line (left). (b) Predicting
    a value using our model (right)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们仔细地画一条线，让它尽可能地穿过尽可能多的点，我们将得到类似于图[10-4a](#Fig4)的样子。这条线代表我们的模型。是的，在线性回归中，这条简单的直线就是模型；图表代表了线性回归，因为我们画了一条直线。现在，对于未知的马力预测
    MPG 值就很容易了。在图[10-4a](#Fig4)中，我们可以看到，马力 120 没有对应的 MPG。如果我们在 120 处画一条虚线——垂直于 x 轴——它与我们的模型相交的点就是预测的
    MPG。如图[10-4b](#Fig4)所示，预测值大约为 19.5。从编程角度来看，我们可以使用著名的数学方程 y = mx + b（你还记得这个方程吗？还记得你的高中时光吗？），其中
    m 是线的斜率，b 是它的 y 截距。由于我们的 y 轴表示目标（MPG），x 轴表示特征（马力），预测 MPG 就像是将 x 的值插入到方程中得到 y 的值一样简单。![A458845_1_En_10_Fig4_HTML.jpg](A458845_1_En_10_Fig4_HTML.jpg)图
    10-4(a) 通过画线创建我们的线性回归模型（左）。(b) 使用我们的模型进行预测（右）
- en: Training and Loss
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 训练和损失
- en: The line we drew was just an approximation. The goal while drawing the line—in
    order to create a model—is to ensure it is not far away from most of the dots.
    In more technical words, the goal of plotting a model is to minimize the loss.
    But what is loss?The vertical distance between a dot and the line is called loss.
    That is, the absolute of difference between actual target value (dot on chart)
    and predicted target value (point on line) for the same feature value. Figure
    [10-5](#Fig5) shows individual loss values for the initial three dots.![A458845_1_En_10_Fig5_HTML.jpg](A458845_1_En_10_Fig5_HTML.jpg)Figure
    10-5Loss is the vertical distance between actual and predicted target valuesTo
    calculate the overall loss in our model, we can use one of several established
    loss functions. The most popular loss function is mean squared error (MSE), which
    is the mean of the sum of squares of all individual losses.![$$ MSE=\frac{1}{N}\sum
    \limits_{\left(x,y\right)\in D}{\left(y- prediction(x)\right)}^2 $$](A458845_1_En_10_Chapter_Equa.gif)Thus,
    we define training as the iterative process of minimizing loss. That is, plotting
    and replotting the model until we arrive at a reasonably low value of MSE (overall
    loss). As with plotting model and calculating loss, there are several well-established
    ways to minimize overall loss. Stochastic Gradient Descent (SGD) is a common mathematical
    technique to iteratively minimize loss and, thus, train a model.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们画的线只是一个近似值。绘制线条的目标——为了创建一个模型——是确保它距离大多数点不远。用更技术性的话说，绘制模型的目标是最小化损失。但是什么是损失？点和线之间的垂直距离称为损失。也就是说，实际目标值（图表上的点）与预测目标值（线上的点）在相同特征值上的差异的绝对值。图
    [10-5](#Fig5) 显示了前三个点的个别损失值。![A458845_1_En_10_Fig5_HTML.jpg](A458845_1_En_10_Fig5_HTML.jpg)图
    10-5损失是实际值和预测目标值之间的垂直距离为了计算我们模型的整体损失，我们可以使用几个已建立的损失函数之一。最流行的损失函数是均方误差（MSE），它是所有个别损失的平方和的均值。![$$
    MSE=\frac{1}{N}\sum \limits_{\left(x,y\right)\in D}{\left(y- prediction(x)\right)}^2
    $$](A458845_1_En_10_Chapter_Equa.gif)因此，我们将训练定义为最小化损失的迭代过程。也就是说，绘制和重新绘制模型，直到我们达到一个相当低的
    MSE（总体损失）值。与绘制模型和计算损失一样，有几种已经建立的方法来最小化总体损失。随机梯度下降（SGD）是一种常见的数学技术，用于迭代地最小化损失，从而训练模型。
- en: Where Do We Go From Here?
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 我们接下来该怎么办呢？
- en: That’s it! This is all you needed to know about the internals of ML. Suddenly,
    the innocuous high-level terms you’d been hearing since Chapter [1](A458845_1_En_1_Chapter.html)
    seem too mathematical. But if you have followed us up until now and understood
    most of ML internal concepts, congratulations! You have unlocked some confidence
    in getting started with an ML framework.What open source ML frameworks, such as
    Tensorflow and scikit-learn, do is they provide you with ready-made methods to
    create a model, calculate loss, and train the model. However, you are required
    to have good working knowledge of cleansing data, picking features, and evaluating
    a trained model, among other things—all of which again require a decent hold on
    statistics and mathematics. An ML framework just makes dealing with multiple algorithms
    and multi-feature scenarios easier.Azure Machine Learning Studio takes ease-of-use
    of ML a bit further by automating all of the above, while still giving expert
    ML engineers and data scientists control over the underlying processes.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止！这就是你需要了解的有关机器学习内部的全部内容。突然间，你从第[1](A458845_1_En_1_Chapter.html)章以来听到的无伤大雅的高层术语似乎太数学化了。但是如果你一直跟着我们并理解了大部分机器学习的内部概念，恭喜你！你已经掌握了一些开始使用机器学习框架的信心。诸如Tensorflow和scikit-learn之类的开源机器学习框架所做的就是提供给你一些现成的方法来创建模型、计算损失并训练模型。然而，你需要对数据清洗、选择特征以及评估训练模型等工作有很好的工作知识——所有这些再次需要对统计学和数学有相当的掌握。一个机器学习框架只是让处理多种算法和多特征场景变得更容易一些。Azure机器学习工作室通过自动化上述所有过程，进一步提高了机器学习的易用性，同时仍然让专业的机器学习工程师和数据科学家对底层过程有控制权。
- en: Problems that ML Solves
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机器学习解决的问题
- en: Machine learning has literally unlocked an infinite amount of possibilities
    to get things done by machines that could not be done using traditional programming
    techniques. If we start listing down all the problems that ML can solve, we’ll
    run out of paper very soon. Fortunately, all these problems can be categorized
    into a handful of problem types. Let’s explore the most common types.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习通过传统编程技术无法完成的事情，实际上打开了无限的可能性。如果我们开始列举机器学习可以解决的所有问题，我们很快就会用完纸。幸运的是，所有这些问题都可以归类为少数几种问题类型。让我们探讨最常见的类型。
- en: Classification
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分类
- en: Identifying whether something is of type X or Y is a very common ML task. Humans
    gain the ability to discern various types of objects at a very early age. We can
    look at an animal with our eyes and instantly say, “it’s a dog.” So easy for a
    human, so humungous a task for a computer.Thinking logically about how a computer
    may perform this task using explicit programming, it’s not uncommon to propose
    a solution where the computer would use a camera to take a picture of the animal
    (simulating human eyes) and compare it with the set of dog images it has in its
    image bank. Odds would be heavily against the possibility of getting a match for
    a photo captured of that exact dog at that specific spot. How do we make computers
    “learn” to recognize dogs, no matter what their pose or location? That’s a very
    good example of a classification problem. Figure [10-6](#Fig6) shows classification
    at work.![A458845_1_En_10_Fig6_HTML.png](A458845_1_En_10_Fig6_HTML.png)Figure
    10-6Multi-class classification to identify the kind of animal. For each class,
    hundreds of images are used to train the computerClassification problems appear
    in two varieties—two-class (is it X or Y?) and multi-class (what kind is it?).
    Given an IoT device’s age, average temperature, and wear and tear, will it fail
    in the next three days (yes or no)? Is this a two-legged animal or a four-legged
    animal? These are two examples of two-class classification problems. Examples
    of multi-class classification are detecting the type of animal and species of
    a dog. In both examples, our system would need to be trained with several different
    animal types and dog species respectively, each animal type or dog species representing
    one class.Who tells a computer what picture is a dog or a cat in the first place?
    Short answer—humans. Each picture is manually tagged with the name of the class
    it represents and supplied to the computer. This process is called labeling, and
    the class name supplied with training data is called a label.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 辨别某物是类型X还是Y是一项非常常见的机器学习任务。人类在很小的时候就具备了辨别各种对象类型的能力。我们可以用眼睛看着动物，立刻说，“那是一只狗。” 对于人类来说很容易，对于计算机来说则是一个巨大的任务。从逻辑上思考计算机如何执行这个任务，使用显式编程的方式，提出一个解决方案并不罕见，即计算机使用摄像头拍摄动物的照片（模拟人类眼睛），并将其与图像库中的一组狗的图像进行比较。以获得一个完全匹配的照片的概率极低。我们如何让计算机“学会”识别狗，无论它们的姿势或位置如何？这是一个非常好的分类问题的例子。图
    [10-6](#Fig6) 展示了分类的工作。![A458845_1_En_10_Fig6_HTML.png](A458845_1_En_10_Fig6_HTML.png)
    图10-6多类分类来识别动物的种类。对于每个类别，使用数百张图像来训练计算机分类问题有两种变体——二类分类（是X还是Y？）和多类分类（它是什么种类？）。考虑到物联网设备的年龄、平均温度和磨损程度，它会在接下来的三天内失效吗（是或否）？这是两个二类分类问题的例子。这是一个两条腿的动物还是四条腿的动物？这是两个二类分类问题的例子。多类分类的例子包括检测动物的类型和狗的品种。在这两个例子中，我们的系统需要用几种不同的动物类型和狗品种分别进行训练，每个动物类型或狗品种代表一个类别。谁告诉计算机第一张图片是狗还是猫？简短的回答——人类。每张图片都手动标记了它代表的类别的名称，并提供给计算机。这个过程称为标记，提供给训练数据的类名称为标签。
- en: Regression
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 回归
- en: This type of supervised learning (more on this later) is used when the expected
    output is continuous. Let’s see what we mean by output being continuous. We read
    about regression earlier in the section called “A Quick Look at the Internals”.
    You now know that regression uses past data about something to make predictions
    about one of its parameters.For example, using a car’s horsepower-mileage data
    we could predict mileages (output) for unknown horsepower values. Since mileage
    is a variable, changing value—varies as per horsepower, age, cylinders, etc. even
    for the same car—it is said to be continuous. The opposite of continuous is discrete.
    Parameters such as car’s color, model year, size, etc. are discrete features.
    A red-colored car will always be red, no matter what its age, horsepower or mileage.Based
    on what you just learned about output types, can you guess the output type classification
    deals with? If you answered discrete, you were absolutely correct.Regression problems
    are very common, and techniques to solve such problems are frequently used by
    scientific communities in researches, enterprises for making business projects,
    and even newspapers and magazines to make predictions about consumer and market
    trends.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这种有监督学习（稍后会详细介绍）用于期望输出是连续的情况。让我们看看输出连续是什么意思。我们在“快速查看内部”部分早些时候已经了解过回归。现在你知道回归是利用某物的过去数据来预测其参数之一。例如，使用汽车的马力-里程数据，我们可以预测未知马力值的里程（输出）。由于里程是一个可变的变量，随着马力、年龄、气缸等变化而变化，即使对于同一辆车，它也被称为连续的。与连续相对的是离散。诸如汽车颜色、型号年份、大小等参数都是离散特征。一辆红色汽车将永远是红色的，无论其年龄、马力或里程如何。根据你刚刚了解的输出类型，你能猜到输出类型分类处理的是什么吗？如果你回答是离散的，那么你是完全正确的。回归问题非常普遍，解决这类问题的技术经常被科学界用于研究、企业用于制定商业项目，甚至被报纸和杂志用于预测消费者和市场趋势。
- en: Anomaly Detection
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 异常检测
- en: The ability to detect anomalies in data is a crucial aspect of proactively ensuring
    security and smooth operation (see Figure [10-7](#Fig7)). Unlike classification,
    detecting anomalies is difficult for humans to perform manually, usually because
    of the amount of data one would have to deal with in order to correctly determine
    nominal trends.![A458845_1_En_10_Fig7_HTML.jpg](A458845_1_En_10_Fig7_HTML.jpg)Figure
    10-7Abnormal point in an otherwise consistent trendOne of the most common anomaly
    detection  use cases is detecting unauthorized transactions for a credit card.
    Consider this—millions of people use credit cards on a daily basis, some using
    them multiple times in a day. For a bank that has hundreds of thousands of credit
    card customers, the amount of daily data generated from card use is enormous.
    Searching through this enormous data, in real time, to look for suspicious patterns
    is not a trivial problem. ML-based anomaly detection algorithms help detect spurious
    transactions (on a stolen credit card) in real time based on customer’s current
    location and past spending trends.Other uses cases for anomaly detection  include
    detecting network breaches on high-volume websites, making medical prognoses based
    on real-time assessment of a patient’s various health parameters, finding out
    hard-to-find small or big financial frauds in banks, etc.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据中检测异常的能力是积极确保安全和顺畅运行的关键方面（见图 [10-7](#Fig7)）。与分类不同，人类通常难以手动执行异常检测，主要是因为正确确定正常趋势所需处理的数据量非常大。![A458845_1_En_10_Fig7_HTML.jpg](A458845_1_En_10_Fig7_HTML.jpg)图
    10-7：在一致趋势中的异常点。检测信用卡的未授权交易是最常见的异常检测用例之一。考虑这一点——数百万人每天使用信用卡，一些人每天使用多次。对于拥有数十万信用卡客户的银行来说，来自卡片使用的每日数据量是巨大的。实时搜索这些海量数据以寻找可疑模式并非易事。基于客户当前位置和过去消费趋势，基于机器学习的异常检测算法帮助实时检测（在被盗信用卡上的）虚假交易。其他异常检测用例包括检测高流量网站上的网络入侵，在实时评估患者各种健康参数的基础上作出医疗预测，发现银行中难以发现的小或大型金融欺诈等。
- en: Clustering
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 聚类
- en: Sometimes it is very useful to check certain patterns by organizing data first.
    For example, for a certain packaged snack company, it may be important to know
    which customers like the same flavor. They could use ML-based clustering to flavor-wise
    organize their users, as shown in Figure [10-8](#Fig8).![A458845_1_En_10_Fig8_HTML.jpg](A458845_1_En_10_Fig8_HTML.jpg)Figure
    10-8Clustering  allows you to organize data into criteria-based clusters for easy
    decision-making
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候通过首先组织数据来检查某些模式是非常有用的。例如，对于某个包装零食公司来说，知道哪些客户喜欢相同的口味可能非常重要。他们可以使用基于机器学习的聚类按口味组织他们的用户，如图
    [10-8](#Fig8) 所示。![A458845_1_En_10_Fig8_HTML.jpg](A458845_1_En_10_Fig8_HTML.jpg)图
    10-8：聚类允许您根据标准将数据组织成集群，以便进行简单决策。
- en: Types of Machine Learning
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机器学习的类型
- en: After having learned what machine learning is—including a quick dive into its
    internal details—and the problems ML can solve, let’s take a quick look at the
    various types of ML. There really are only three types, based on how training
    is done.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了什么是机器学习——包括对其内部细节的快速探索——以及机器学习可以解决的问题之后，让我们快速看一下各种类型的机器学习。实际上，只有三种类型，这取决于训练的方式。
- en: Supervised Learning
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 监督学习
- en: 'Here, the training data is labeled. For a language detection algorithm, learning
    would be supervised if the sentences we supply to the algorithm are explicitly
    labeled with the language it’s written in: sentences written in French and ones
    not in French, sentences written in Spanish and ones not in Spanish, and so on.
    As prior labeling is done by humans, it increases the work effort and cost of
    maintaining such algorithms. So far, this is the most common form of ML as with
    it we get more accurate results. Classification, regression, and anomaly detection
    are all forms of supervised learning.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，训练数据是有标签的。对于语言检测算法来说，如果我们提供给算法的句子明确标记了所用语言：写成法语的句子和非法语的句子，写成西班牙语的句子和非西班牙语的句子，以此类推，那么学习过程就是有监督的。由于先前的标记是由人类完成的，这增加了维护这类算法的工作量和成本。到目前为止，这是最常见的机器学习形式，因为它能够提供更准确的结果。分类、回归和异常检测都是监督学习的形式。
- en: Unsupervised Learning
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无监督学习
- en: Here, the training data is not labeled. Due to a lack of labels, an algorithm
    cannot, of course, learn to magically tell the exact language of a sentence, but
    it can differentiate one language from another. That is, through unsupervised
    learning an ML algorithm can learn to see that French sentences are different
    from Spanish ones, which are different from Hindi ones and so on. Similarly, another
    algorithm can differentiate people who like Tom Hanks from those who like George
    Clooney and so on, and, thus, form clusters of people who like the same actor.
    Clustering algorithms are a form of unsupervised learning.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，训练数据没有标签。由于缺乏标签，算法当然无法神奇地学会准确识别句子的语言，但它可以区分一种语言和另一种语言。也就是说，通过无监督学习，机器学习算法可以学会辨别法语句子与西班牙语句子的不同，以及它们与印地语句子的不同等等。类似地，另一个算法可以区分喜欢汤姆·汉克斯的人和喜欢乔治·克鲁尼的人等等，并因此形成喜欢同一位演员的人的群集。聚类算法是无监督学习的一种形式。
- en: Reinforcement Learning
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 强化学习
- en: Here, a machine is not explicitly supplied training data. It must interact with
    the environment in order to achieve a goal. Due to a lack of training data, it
    must learn by itself from the scratch and rely on a trial-and-error technique
    to take decisions and discover its own correct paths. For each action the machine
    takes, there’s a consequence, and for each consequence it is given a numerical
    reward. So, if an action produces a desirable result, it receives “good” remarks.
    And if the result is disastrous, it receives “very, very bad” remarks. Like humans,
    the machine strives to maximize its total numerical reward—that is, get as many
    “good” and “very good” remarks as possible by not repeating its mistakes.This
    technique of machine learning is especially useful when the machine has to deal
    with very dynamic environments, where creating and supplying training data is
    just not feasible. For example, driving a car, playing a video game, and so on.
    Reinforcement learning  can also be applied to create AIs that can create drawings,
    images, music, and even songs on their own by learning from examples.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，机器并没有明确提供训练数据。它必须与环境互动，以实现目标。由于缺乏训练数据，它必须从零开始自学，并依赖试错技术来做出决策并发现自己正确的路径。对于机器采取的每个动作，都有一个后果，对于每个后果，它都会获得一个数值奖励。因此，如果一个动作产生了期望的结果，它会收到“好”的评价。如果结果是灾难性的，它会收到“非常、非常糟糕”的评价。像人类一样，机器努力最大化其总数值奖励——也就是说，通过不重复自己的错误来获得尽可能多的“好”和“非常好”的评价。当机器不得不处理非常动态的环境时，这种机器学习技术尤其有用，其中创建和提供训练数据根本不可行。例如，驾驶汽车、玩视频游戏等。强化学习也可以应用于创建能够通过学习示例自己创作绘画、图像、音乐，甚至歌曲的AI。
- en: Azure Machine Learning Studio
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure 机器学习工作室
- en: 'There are multiple ways to create ML applications. We saw the mathematics behind
    linear regression in the section “A Quick Look at the Internals” earlier. One
    could write code implementation for linear regression by themselves. That would
    not only be time-consuming but also potentially inefficient and bug-ridden. ML
    frameworks, such as Tensorflow, make things simpler by offering high-level APIs
    to create custom ML models, while still assuming a good understanding of underlying
    concepts. Azure ML Studio offers a novel and easier approach to create end-to-end
    ML solutions without requiring one to know a lot of data science or ML details,
    or even coding skills.ML Studio is a graphical, drag-and-drop interface to design
    and run ML workflows. It allows you to run simple to complex ML solutions right
    in the browser. Creating an ML workflow does not involve any coding, and it requires
    only putting different droppable components together. ML Studio comes with a huge
    list of tried and tested implementation of dozens of ML algorithms to target several
    different types of problems. Figure [10-9](#Fig9) gives a generalized overview
    of a typical ML workflow in ML Studio.![A458845_1_En_10_Fig9_HTML.png](A458845_1_En_10_Fig9_HTML.png)Figure
    10-9Workflow of an ML solution in Azure ML StudioLet’s break down the workflow
    in steps:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 ML 应用程序有多种方法。我们之前在“内部快速查看”部分看到了线性回归背后的数学原理。人们可以自己编写线性回归的代码实现。这不仅费时，而且可能低效且充满错误。ML
    框架，如Tensorflow，通过提供高级 API 来创建自定义 ML 模型，简化了事情，同时假定对基础概念有很好的理解。Azure ML Studio 提供了一种新颖且更容易的方法来创建端到端的
    ML 解决方案，而无需了解很多数据科学或 ML 详情，甚至无需编码技能。ML Studio 是一个图形化的、拖放式界面，用于设计和运行 ML 工作流。它允许你在浏览器中运行简单到复杂的
    ML 解决方案。创建 ML 工作流不涉及任何编码，只需要将不同的可拖动组件放在一起。ML Studio 配备了大量经过测试的多种 ML 算法的实现，以解决几种不同类型的问题。图
    [10-9](#Fig9) 给出了 ML Studio 中典型 ML 工作流程的概述。![A458845_1_En_10_Fig9_HTML.png](A458845_1_En_10_Fig9_HTML.png)图10-9Azure
    ML Studio 中 ML 解决方案的工作流程让我们逐步分解工作流程：
- en: 1.Import data. The very first thing you do in ML Studio is import your data
    on which machine learning is to be performed. ML Studio supports a large variety
    of file formats, including Excel sheets, CSV, Hadoop Hive, Azure SQL DB, blob
    storage, etc.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入数据。在 ML Studio 中，你首先要做的事情就是导入要进行机器学习的数据。ML Studio 支持多种文件格式，包括 Excel 表格、CSV、Hadoop
    Hive、Azure SQL DB、blob 存储等。
- en: '2.Preprocess. Imported raw data may not be straight-away ready for ML analysis.
    For instance, in a tabular format data structure some rows may be missing values
    for one or more columns. Similarly, there may be some columns for which most rows
    do not have a value. It may be desirable to remove missing data to make the overall
    input more consistent and reliable. Microsoft defines three key criteria for data:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预处理。导入的原始数据可能不能直接用于机器学习分析。例如，在表格格式的数据结构中，一些行可能缺少一个或多个列的值。同样，可能有一些列大部分行都没有值。删除缺失数据可能是为了使整体输入更一致和可靠。微软为数据定义了三个关键标准：
- en: a.Relevancy—All columns (features) are related to each other and to the target
    column.
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 相关性—所有列（特征）彼此相关，并与目标列相关。
- en: b.Connectedness—There is zero or minimal amount of missing data values.
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连通性—数据值缺失为零或极小。
- en: c.Accuracy—Most of the rows have accurate (and optionally precise) data values.
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准确性—大多数行具有准确（可选地是精确）的数据值。
- en: 3.Split data. Machine learning (in general) requires data to be split into two
    (non-equal) parts—training data and test data. Training data is used by an ML
    algorithm to generate the initial model. Test data is used to evaluate the generated
    model by helping check its correctness (predicted values vs values in test dataset).
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拆分数据。机器学习（一般来说）需要将数据拆分为两个（非相等的）部分——训练数据和测试数据。训练数据由 ML 算法使用来生成初始模型。测试数据用于评估生成的模型，帮助检查其正确性（预测值
    vs 测试数据集中的值）。
- en: 4.Train Model  . An iterative process that uses a training dataset to create
    the model. The goal is to minimize loss.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 训练模型。这是一个迭代过程，使用训练数据集来创建模型。目标是最小化损失。
- en: 5.Evaluate Model. As mentioned, post initial model creation test data is used
    to evaluate the model.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估模型。如前所述，初始模型创建后会使用测试数据来评估模型。
- en: TipIt is possible to visualize data at each step of the process. Azure ML Studio
    provides several options for data visualization, including scatterplot, bar chart,
    histogram, Jupyter Notebook, and more.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：可以在整个过程的每个步骤可视化数据。Azure ML Studio 提供了多种数据可视化选项，包括散点图、柱状图、直方图、Jupyter Notebook
    等。
- en: Picking an Algorithm
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择算法
- en: The most crucial step in an ML workflow is knowing which algorithm to apply
    after importing data and preprocessing it. ML Studio comes with a host of built-in
    algorithm implementations to pick from. Choosing the right algorithm depends on
    the type of problem being solved as well as the kind of data it will have to deal
    with. For a data scientist, picking the most suitable one would be a reasonably
    easy task. They may be required to try a couple of different options, but at least
    they will know the right ones to try. For a beginner or a non-technical person,
    it may be a daunting task to pick an algorithm.Microsoft have provided a quick
    reference diagram—that they call Machine Learning algorithm cheat sheet—to make
    picking an algorithm a hassle-free task. The cheat sheet is available at [https://bit.ly/2GywUlB](https://bit.ly/2GywUlB)
    . Algorithms are grouped as per problem type, as shown in Table [10-3](#Tab3).
    Furthermore, hints are provided based on parameters such as accuracy and training
    time.Table 10-3List of Algorithms Available in Azure ML Studio
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器学习工作流中最关键的一步是在导入数据并对其进行预处理后知道要应用哪种算法。ML Studio 自带一系列内置算法实现供选择。选择合适的算法取决于解决的问题类型以及将要处理的数据类型。对于数据科学家来说，选择最合适的算法可能是一项相当容易的任务。他们可能需要尝试一些不同的选项，但至少他们会知道要尝试哪些算法是正确的。对于初学者或非技术人员来说，挑选一个算法可能是一项艰巨的任务。微软提供了一个称为机器学习算法备忘单的快速参考图表，使挑选算法变得轻松。备忘单可在
    [https://bit.ly/2GywUlB](https://bit.ly/2GywUlB) 获取。算法根据问题类型分组，如表 [10-3](#Tab3)
    所示。此外，根据准确度和训练时间等参数提供了提示。表 10-3 Azure ML Studio 中可用算法列表
- en: '| Problem | Algorithm(s) |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 问题 | 算法 |'
- en: '| :-- | :-- |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 回归 | 贝叶斯线性回归、提升决策树、决策森林、快速森林分位数回归、线性回归、神经网络回归、序数回归、泊松回归 |'
- en: '| Two-class classification | Averaged Perceptron, Bayes Point Machine, Boosted
    Decision Tree, Decision Forest, Decision Jungle, Logistic Regression, Neural Network,
    Support Vector Machine (SVM) |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 二分类 | 平均感知器、贝叶斯点机器、提升决策树、决策森林、决策丛林、逻辑回归、神经网络、支持向量机（SVM） |'
- en: '| Multi-class classification | Decision Forest, Decision Jungle, Logistic Regression,
    Neural Network, One-vs-All |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 多类分类 | 决策森林、决策丛林、逻辑回归、神经网络、一对所有 |'
- en: '| Regression | Bayesian Linear Regression, Boosted Decision Tree, Decision
    Forest, Fast Forest Quantile Regression, Linear Regression, Neural Network Regression,
    Ordinal Regression, Poisson Regression |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- |'
- en: '| Anomaly detection | One-class SVM, Principal Component Analysis-based (PCA)
    Anomaly Detection |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 异常检测 | 单类 SVM、基于主成分分析（PCA）的异常检测 |'
- en: '| Clustering | K-means Clustering |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 聚类 | K-means 聚类 |'
- en: Using Azure ML Studio to Solve a Problem
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Azure ML Studio 解决问题
- en: Time to solve a real-world problem with machine learning!Asclepius Consortium  wants
    to use patient data collected from various IoT devices to reliably predict whether
    a patient will contract diabetes. Timely detection of diabetes can be effective
    in proactively controlling the disease.This problem, which can also be stated
    as “will the patient contract diabetes?,” is a two-class classification problem
    since the output can be either yes (1) or no (0). To be able to make any sort
    of predictions, we will, of course, need a lot of past data about real diabetes
    cases that can tell us which combination of various patient health parameters
    led to diabetes and which did not.Let’s start.NoteThis problem can also be solved
    using linear regression. But as the output will always be either 0 or 1, rather
    than a more continuous value such as the probability of contracting diabetes,
    it’s best solved with a classification algorithm. During the course of your learning
    and experimenting with machine learning, you will come across a lot of problems
    that can be solved using more than one technique. Sometimes picking the right
    technique is a no-brainer, at other times that requires trying out different techniques
    and determining which one produces the best results.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候用机器学习解决一个真实世界的问题了！Asclepius 联盟希望利用从各种物联网设备收集的患者数据可靠地预测患者是否会患上糖尿病。及时检测糖尿病可以有效地预防控制该疾病。这个问题也可以陈述为“患者是否会患上糖尿病？”，因为输出可以是是（1）或否（0）。为了能够进行任何预测，我们当然需要大量关于真实糖尿病案例的过去数据，这些数据可以告诉我们哪些各种患者健康参数的组合导致了糖尿病，哪些没有。让我们开始吧。注意：这个问题也可以使用线性回归来解决。但是由于输出总是0或1，而不是更连续的值，比如患上糖尿病的概率，所以最好使用分类算法来解决。在学习和尝试机器学习的过程中，你会遇到很多可以用多种技术解决的问题。有时选择正确的技术是轻而易举的，而其他时候则需要尝试不同的技术，并确定哪种技术产生了最佳结果。
- en: Signing Up for Azure ML Studio
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注册 Azure ML Studio
- en: Using Azure ML Studio does not require a valid Azure subscription. If you have
    one, you can use it to unlock its full feature set. If you don’t, you can use
    your personal Microsoft account (@hotmail.com, @outlook.com, etc.) to sign into
    ML Studio and use it with some restrictions. There’s even a third option—an eight-hour
    no-restrictions trial that does not even require you to sign in.Visit [https://studio.azureml.net/](https://studio.azureml.net/)
    , click the Sign Up Here link, and choose the appropriate access. We recommend
    going with Free Workspace access that gives you untimed feature-restricted access
    for free. This type of access is sufficient to allow you to design, evaluate,
    and deploy the ML solution that you’ll design in the following sections. If you
    like ML Studio and want to try out restricted features and increase storage space,
    you can always upgrade later.Choose the Free Workspace option and log into ML
    Studio. It may take a few minutes for Studio to be ready for first-time use.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Experiment
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An ML solution in Studio is called an experiment. One can choose to create their
    own experiment from scratch or choose from dozens of existing samples. Apart from
    the samples that ML Studio provides, there is also Azure AI Gallery ( [https://gallery.azure.ai/](https://gallery.azure.ai/)
    ) that has a list of community-contributed ML experiments that you can save for
    free in your own workspace and use them as starting point for your own experiments.At
    this point, your workspace will be completely empty. The Experiments tab should
    look like in Figure [10-10](#Fig10).![A458845_1_En_10_Fig10_HTML.jpg](A458845_1_En_10_Fig10_HTML.jpg)Figure
    10-10Experiments tab in a new Azure ML Studio workspaceLet’s create a new experiment
    from scratch in order to better understand the various components in an ML workflow,
    and how to set them up correctly. Click the New button in bottom-left and choose
    Experiment ➤ Blank Experiment. After your new experiment is created and ready,
    give it an appropriate name, summary, and description. You can use the name—Diabetes
    Prognosis—that we used in our own experiment.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Studio 中，一个 ML 解决方案称为一个实验。你可以选择从头开始创建自己的实验，也可以从数十个现有样本中选择。除了 ML Studio 提供的样本外，还有
    Azure AI 画廊（[https://gallery.azure.ai/](https://gallery.azure.ai/)），其中列有社区贡献的
    ML 实验列表，你可以免费保存到自己的工作空间中，并将它们用作你自己实验的起点。此时，你的工作空间将完全为空。实验选项卡应该如[图10-10](#Fig10)所示。![A458845_1_En_10_Fig10_HTML.jpg](A458845_1_En_10_Fig10_HTML.jpg)图10-10新
    Azure ML Studio 工作空间中的实验选项卡让我们从头开始创建一个新实验，以更好地理解 ML 工作流程中的各个组件，以及如何正确设置它们。点击左下角的“新建”按钮，选择实验
    ➤ 空白实验。在你的新实验创建并准备就绪后，给它一个合适的名称、摘要和描述。你可以使用我们自己实验中使用的名称——糖尿病预测。
- en: Importing Data
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入数据
- en: Data is the most important part of a machine learning solution. The very first
    thing to do is import data that will help us train our model. To be able to predict
    diabetes in a patient, we need data from past cases. Until we have a fully-functional,
    live IoT solution that captures from patients health parameters relevant to diabetes,
    we need to figure out another way to get data.Fortunately, there are online repositories
    that provide access to quality datasets for free. One such popular option is University
    of California, Irvine (UCI) Machine Learning Repository ( [https://archive.ics.uci.edu/ml/](https://archive.ics.uci.edu/ml/)
    ). This repository is a curated list of donated datasets concerning several different
    areas (life sciences, engineering, business, etc.) and machine learning problem
    types (classification, regression, etc.). Among these datasets, you will find
    a couple of options for diabetes. You can download a dataset from here and later
    import it inside ML Studio, which provides support for importing data in a lot
    of formats such as CSV, Excel, SQL, etc.Alternatively, you can simply reuse one
    of the sample datasets available inside ML Studio itself, some of which are based
    on UCI’s ML repository datasets. Among them is one for diabetes, which we will
    be using for in this experiment.From your experiment page’s left sidebar, go to
    Saved Datasets ➤ Samples ➤ Pima Indians Diabetes Binary Classification dataset.
    You could also use the search feature to look for “diabetes.” Drag and drop the
    dataset to the experiment canvas on the right, as shown in Figure [10-11](#Fig11).![A458845_1_En_10_Fig11_HTML.jpg](A458845_1_En_10_Fig11_HTML.jpg)Figure
    10-11Importing sample data in an ML Studio experimentIt’s a good idea to explore
    what’s inside the dataset. That will not only give you a view of the data that
    Studio will be using for training, it will also help you in picking the right
    features for predictions. In experiment canvas, right-click the dataset and select
    dataset ➤ Visualize. You can also click the dataset’s output port (the little
    circle at bottom-middle) and click Visualize.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 数据是机器学习解决方案中最重要的部分。第一件要做的事情是导入能帮助我们训练模型的数据。为了能够预测患者的糖尿病，我们需要来自过去病例的数据。在我们拥有一个完全功能的、实时的物联网解决方案之前，该解决方案可以捕获与糖尿病相关的患者健康参数，我们需要找到另一种获取数据的方法。幸运的是，有一些在线资源库可以免费提供高质量的数据集。其中一个流行的选项是加州大学尔湾分校（UCI）机器学习库（[https://archive.ics.uci.edu/ml/](https://archive.ics.uci.edu/ml/)）。该资源库是一个由捐赠的数据集组成的策划列表，涉及到几个不同领域（生命科学、工程、商业等）和机器学习问题类型（分类、回归等）。在这些数据集中，你会找到一些关于糖尿病的选项。你可以从这里下载一个数据集，然后在
    ML Studio 中导入它，该工具支持导入多种格式的数据，如 CSV、Excel、SQL 等。或者，你可以简单地重用 ML Studio 中自带的一些样本数据集，其中一些是基于
    UCI 的 ML 资料库数据集的。其中之一就是用于糖尿病的数据集，我们将在这个实验中使用。从你的实验页面的左侧边栏，转到已保存的数据集 ➤ 样本 ➤ 皮马印第安人糖尿病二分类数据集。你也可以使用搜索功能搜索“糖尿病”。将数据集拖放到右侧的实验画布上，如图
    [10-11](#Fig11) 所示。![A458845_1_En_10_Fig11_HTML.jpg](A458845_1_En_10_Fig11_HTML.jpg)图
    10-11 在 ML Studio 实验中导入样本数据查看数据集内部内容是个好主意。这不仅可以让你了解 Studio 将用于训练的数据，还可以帮助你选择正确的特征进行预测。在实验画布中，右键点击数据集，然后选择数据集
    ➤ 可视化。你也可以点击数据集的输出端口（底部中间的小圆圈），然后点击“可视化”。
- en: Preprocessing Data
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 预处理数据
- en: This diabetes dataset has 768 rows and 9 columns. Each row represents one patient’s
    health parameters. The most relevant columns for our experiment include “Plasma
    glucose concentration after two hours in an oral glucose tolerance test” (represents
    sugar level), “Diastolic blood pressure,” “Body mass index,” and “age”. The Class
    Variable column indicates whether the patient was diagnosed with diabetes (yes
    or no; 1 or 0). This column will be our target (output), with features coming
    from other columns.Go through a few cases, analyze them, and see how various health
    parameters correlate to the diagnosis. If you look more carefully, you will see
    that some rows have a value of zero for columns where 0 just doesn’t make sense
    (e.g., body mass index and 2-hour serum insulin). These are perhaps missing values
    that could not be obtained for those patients. To improve the quality of this
    dataset, we can either replace all missing values with intelligent estimates or
    remove them altogether. Doing the former would require advanced data science skills.
    For simplicity, let’s just get rid of all rows that have missing values.Notice
    that the 2-Hour Serum Insulin column appears to have a large number of missing
    values. We should remove the entire column to ensure we do not lose out on a lot
    of rows while cleaning our data. Our goal is to use as many records we possibly
    can for our trained model to be more accurate.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个糖尿病数据集有 768 行和 9 列。每一行代表一个患者的健康参数。对于我们的实验来说，最相关的列包括“口服葡萄糖耐量试验后两小时的血浆葡萄糖浓度”（代表血糖水平）、“舒张压”、“体重指数”和“年龄”。类别变量列表示患者是否被诊断为糖尿病（是或否；1
    或 0）。这一列将是我们的目标（输出），其特征来自其他列。浏览几个案例，分析它们，并查看各种健康参数与诊断之间的相关性。如果你更仔细地观察，你会发现有些行在某些列上的值为零，而零在那些列中是没有意义的（例如，体重指数和
    2 小时血清胰岛素）。这些可能是无法获得该患者的缺失值。为了提高该数据集的质量，我们可以用智能估计值替换所有缺失值，或者直接将它们删除。前者需要高级数据科学技能。为简单起见，让我们只删除所有具有缺失值的行。注意，2
    小时血清胰岛素列似乎有大量缺失值。我们应该删除整个列，以确保在清理数据时不会丢失很多行。我们的目标是尽可能使用更多的记录来训练我们的模型，以提高准确性。
- en: Removing Bad Columns
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 删除不良列
- en: From the left sidebar, go to Data Transformation ➤ Manipulation and drag-and-drop
    Select Columns in Dataset onto the canvas, just below the dataset. Connect the
    dataset’s output port with the newly added module’s input port by dragging the
    former’s output port toward the Select Columns module’s input port. This will
    draw an arrow pointing from dataset to the module.NoteModules in Azure ML Studio
    have ports that allow data to flow from one component to another. Some have input
    ports, some have output ports, and some have both. There are a few modules that
    even have multiple input or output ports, as you’ll see shortly.Clicking the Select
    Columns module once brings up its properties in the right sidebar. From there,
    click the Launch Column Selector button and exclude the 2-Hour Serum Insulin column,
    as shown in Figure [10-12](#Fig12).![A458845_1_En_10_Fig12_HTML.jpg](A458845_1_En_10_Fig12_HTML.jpg)Figure
    10-12Excluding a column in Azure ML StudioAs a hint to yourself, you can add a
    comment to a module about what it does. Double-click the Select Columns module
    and enter the comment Exclude 2-Hour Serum Insulin.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从左侧边栏，转到数据转换 ➤ 操作，并将“选择数据集中的列”拖放到画布上，就在数据集的下方。通过将数据集的输出端口向“选择列”模块的输入端口拖动，将数据集的输出端口连接到新添加的模块的输入端口。这将绘制一个从数据集指向模块的箭头。Azure
    ML Studio中的模块具有允许数据从一个组件流向另一个组件的端口。一些具有输入端口，一些具有输出端口，一些具有两者。有一些模块甚至有多个输入或输出端口，您很快就会看到。单击一次“选择列”模块会在右侧边栏中显示其属性。从那里，单击“启动列选择器”按钮，并排除“2小时血清胰岛素”列，如图[10-12](#Fig12)所示。![A458845_1_En_10_Fig12_HTML.jpg](A458845_1_En_10_Fig12_HTML.jpg)图10-12在Azure
    ML Studio中排除一列作为提示，您可以向模块添加关于其功能的注释。双击“选择列”模块，然后输入注释“排除2小时血清胰岛素”。
- en: Renaming Columns
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重命名列
- en: The default names of columns in our dataset are too long and descriptive. Let’s
    simplify the column names. Search for and add the Edit Metadata module in canvas,
    just below Select Columns. Connect it to the module above. In module’s properties
    pane, click Launch Column Selector and select all columns except 2-Hour Serum
    Insulin. Coming back to the properties pane, add the following new names in the
    New Column Names field, leaving all other fields unchanged:pregnancy_count,glucose_level,diastolic_blood_pressure,triceps_skin_fold_thickness,bmi,diabetes_pedigree_function,age,diabeticClick
    the Run button to run your experiment. After it’s finished running, all modules
    that ran successfully will have a green check mark. At this point, right-click
    the Edit Metadata module and visualize the data. You should see the same dataset
    with renamed columns.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们数据集中的列的默认名称太长且描述性太强了。让我们简化列名称。在画布上搜索并添加编辑元数据模块，就在“选择列”下方。将其连接到上面的模块。在模块的属性窗格中，单击“启动列选择器”，然后选择除了“2小时血清胰岛素”以外的所有列。返回到属性窗格，将以下新名称添加到“新列名称”字段中，其余字段保持不变：怀孕次数，葡萄糖水平，舒张压，三头肌皮褶厚度，BMI，糖尿病谱系功能，年龄，糖尿病者单击“运行”按钮以运行您的实验。运行完成后，所有成功运行的模块都将有一个绿色的复选标记。此时，右键单击编辑元数据模块并可视化数据。您应该看到已更名列的相同数据集。
- en: Removing rows with Missing Values
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 删除带有缺失值的行
- en: This is usually done using the Clean Missing Data module, which can remove rows
    where all or certain columns have no specified values. Since our data has no explicit
    missing values, this module will not work for us. We need something that can exclude
    rows where certain columns are set to 0 (e.g., glucose_level, bmi, etc.).Search
    for and add the Apply SQL Transformation module in canvas, just below Edit Metadata.
    Connect its first input port to the module above. Enter the following query in
    the SQL Query Script field in the module’s properties pane:select * from t1 where
    glucose_level != 0 and diastolic_blood_pressure != 0 and triceps_skin_fold_thickness
    !=0 and bmi != 0;Run your experiment. Once it’s finished, visualize your data
    by right-clicking the Apply SQL Transformation module. You should now see only
    532 rows out of the original 768 rows. Your experiment canvas should now look
    like Figure [10-13](#Fig13).![A458845_1_En_10_Fig13_HTML.jpg](A458845_1_En_10_Fig13_HTML.jpg)Figure
    10-13Experiment canvas after performing data preprocessing
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常使用“清除缺失数据”模块完成，该模块可以删除所有或某些列具有未指定值的行。由于我们的数据没有明确的缺失值，这个模块对我们没用。我们需要能够排除某些列设置为
    0 的行的东西（例如，血糖水平、BMI 等）。在画布中搜索并添加“应用 SQL 转换”模块，放在“编辑元数据”模块的正下方。将其第一个输入端口连接到上面的模块。在模块属性窗格的
    SQL 查询脚本字段中输入以下查询：select * from t1 where glucose_level != 0 and diastolic_blood_pressure
    != 0 and triceps_skin_fold_thickness !=0 and bmi != 0;运行您的实验。完成后，通过右键单击“应用 SQL
    转换”模块来可视化您的数据。现在你应该只看到原来 768 行中的 532 行。你的实验画布现在应该看起来像图 [10-13](#Fig13) 所示。![A458845_1_En_10_Fig13_HTML.jpg](A458845_1_En_10_Fig13_HTML.jpg)图
    10-13数据预处理后的实验画布
- en: Defining Features
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义特征
- en: Our data is now ready to be used for training. But before we perform training,
    we need to handpick relevant columns from our dataset that we can use as features.Search
    for and add a second Select Columns in Dataset module in canvas, just below Apply
    SQL Transformation. Connect it to the module above. From column selector, choose
    glucose_level, diastolic_blood_pressure, triceps_skin_fold_thickness, diabetes_pedigree_function,
    bmi, and age.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据现在可以用于训练了。但在进行训练之前，我们需要从数据集中精选出相关的列，作为特征。在画布中搜索并添加第二个“选择数据集中的列”模块，放在“应用
    SQL 转换”模块的正下方。将其连接到上面的模块。从列选择器中选择血糖水平、舒张压、三头肌皮褶厚度、糖尿病谱系功能、BMI 和年龄。
- en: Splitting Data
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据拆分
- en: As discussed earlier in the chapter, a dataset should be divided into two parts—training
    data and scoring data. While training data is used to actually train the model,
    scoring data is reserved for later testing the trained model to calculate its
    loss.Search for and add the Split Data module in canvas, just below the second
    Select Columns module. Connect it to the module above. In its properties page,
    set 0.75 as the value for Fraction of Rows in the First Output Dataset. Leave
    all other fields as such. Run the experiment to ensure there are no errors. Once
    it’s completed, you can visualize the Split Data module’s left output port to
    check training data and right output port to check scoring data. You should find
    both in the ratio 75-25 percent.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章前面讨论的那样，数据集应该被分成两部分——训练数据和评分数据。而训练数据用于实际训练模型，评分数据则保留用于后续测试训练好的模型以计算其损失。在画布中搜索并添加名为“拆分数据”的模块，就在第二个“选择列”模块的下方。将其连接到上方的模块。在其属性页面中，将第一个输出数据集的行分数设置为0.75。保留所有其他字段不变。运行实验以确保没有错误。一旦完成，你可以可视化“拆分数据”模块的左输出端口以检查训练数据和右输出端口以检查评分数据。你应该会发现两者的比例为75-25%。
- en: Applying an ML Algorithm
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用机器学习算法
- en: With data and features ready, let’s pick an algorithm from one of the several
    built-in algorithms to train the model. Search for and add the module called Two-Class
    Decision Forest in canvas, just to the left of Split Data. This algorithm is known
    for its accuracy and fast training times.Algorithm modules do not have an input
    port, so we will not connect it to any other module at the moment. Your experiment
    canvas should now look like Figure [10-14](#Fig14).![A458845_1_En_10_Fig14_HTML.jpg](A458845_1_En_10_Fig14_HTML.jpg)Figure
    10-14With data and algorithm ready; we are all set to perform the training operation
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好数据和特征后，让我们从几个内置算法中挑选一个算法来训练模型。在画布中搜索并添加名为“二分类决策森林”的模块，就在“拆分数据”的左侧。这个算法以其准确性和快速训练时间而闻名。算法模块没有输入端口，所以我们暂时不会将其连接到任何其他模块。你的实验画布现在应该像[图10-14](#Fig14)一样。![A458845_1_En_10_Fig14_HTML.jpg](A458845_1_En_10_Fig14_HTML.jpg)图10-14准备好数据和算法后，我们可以执行训练操作了。
- en: Training the Model
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 训练模型
- en: Search for and add the module called Train Model in canvas, just below the algorithm
    and Split Data modules. Connect its left input port to the algorithm module and
    its right port to Split Data’s left output port.From its properties pane, select
    the Diabetic column. Doing so will set it as our model’s target value. Run the
    experiment. If all goes well, all modules will have a green checkmark. Like data,
    you can visualize a trained model as well, in which case you will see the various
    trees constructed as a result of the training process.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在画布中搜索并添加名为“训练模型”的模块，就在算法和“拆分数据”模块的下方。将其左输入端口连接到算法模块，右端口连接到“拆分数据”的左输出端口。从其属性窗格中，选择“糖尿病”列。这样做将把它设置为我们模型的目标值。运行实验。如果一切顺利，所有模块都会有一个绿色的勾号。像数据一样，你也可以将训练好的模型可视化，这样你就会看到训练过程中构建的各种树。
- en: Scoring and Evaluating the Trained Model
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对训练模型进行评分和评估
- en: Training using the selected algorithm takes only a few seconds to complete.
    Training times are directly proportional to the amount of data and selected algorithm.
    Despite Azure ML Studio’s state-of-the-art implementations of ML algorithm, you
    should not be straight-away satisfied with the generated model. Just as with a
    food recipe one should taste a finished dish to determine if any modifications
    are necessary to make it more tasty, with a trained model one should score and
    evaluate it to see check certain parameters that can help ascertain if any modifications
    are necessary, for example changing the algorithm.Search for and add the module
    Score Model in canvas, just below the Train Model module. Connect its left input
    port to the Train Model module and its right port to Split Data’s right output
    port. Run the experiment. Figure [10-15](#Fig15) shows how visualizing scored
    data looks.![A458845_1_En_10_Fig15_HTML.jpg](A458845_1_En_10_Fig15_HTML.jpg)Figure
    10-15Visualizing scored data in Azure ML StudioAs you can confirm from the figure,
    scoring is performed with the 25% output of Split Data module. Values in the Diabetic
    column represent the actual values in the dataset, and values in the Scored Labels
    column are predicted values. Also note a correlation between the Score Labels
    and Scored Predictions columns. Where probability is sufficiently high, the actual
    and predicted values are the same. If actual and predicted values match for most
    rows, you can say our trained model is accurate. If not, try tweaking the algorithm
    (or replacing it altogether) and running the experiment again.Next, search for
    and add the Score Model module in canvas, just below the Score Model module. Connect
    its left input port with the above module. Run the experiment and visualize Evaluate
    Model’s output. You will see metrics such as accuracy, precision, f-score, etc.,
    that can be used to determine correctness of this model. For all aforementioned
    metrics, values closer to 1 indicate a good model. See Figure [10-16](#Fig16).![A458845_1_En_10_Fig16_HTML.jpg](A458845_1_En_10_Fig16_HTML.jpg)Figure
    10-16Final preview of a two-class classification ML solution
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用所选算法进行训练仅需几秒钟即可完成。训练时间与数据量和选择的算法成正比。尽管 Azure ML Studio 实现了先进的机器学习算法，但不能马上满意生成的模型。就像烹饪食谱一样，应尝试完成的菜肴以确定是否需要进行任何修改以使其更加美味，训练好的模型也应进行评分和评估，以检查可以帮助确定是否需要进行任何修改的特定参数，例如更改算法。在画布中搜索并添加“评分模型”模块，将其左输入端连接到“训练模型”模块，右端口连接到“拆分数据”的右输出端口。运行实验。图
    [10-15](#Fig15) 显示了可视化得分数据的外观。![A458845_1_En_10_Fig15_HTML.jpg](A458845_1_En_10_Fig15_HTML.jpg)图
    10-15 Azure ML Studio 中得分数据的可视化正如您从图中可以确认的那样，评分是使用“拆分数据”模块的 25% 输出执行的。 “糖尿病”列中的值代表数据集中的实际值，而“预测标签”列中的值是预测值。还要注意“评分标签”和“预测值”列之间的相关性。如果大多数行的实际和预测值匹配，我们可以说我们的训练模型是准确的。如果不匹配，请尝试调整算法（或完全替换）并再次运行实验。接下来，在画布中搜索并添加“评分模型”模块，将其左输入端与上述模块连接。运行实验并可视化“评估模型”的输出。您将看到诸如准确性、精确度、f-分数等指标，可用于确定此模型的正确性。对于所有上述指标，接近
    1 的值表示良好的模型。参见图 [10-16](#Fig16)。![A458845_1_En_10_Fig16_HTML.jpg](A458845_1_En_10_Fig16_HTML.jpg)图
    10-16 两类分类机器学习解决方案的最终预览
- en: Deploying a Trained Model as a Web Service
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将训练好的模型部署为 Web 服务
- en: Now that we have a trained and tested model, it’s time to put it to real use.
    By deploying it as a web service, we’ll give end-user software applications an
    option to programmatically predict values. For example, we use the diabetes prediction
    model’s web service in our IoT solution backend or with Azure Stream Analytics
    to predict diabetes in real time.Choose the Set Up Web Service ➤ Predictive Web
    Service option. This will convert our current experiment to what is called a Predictive
    Experiment. After the conversion is complete, your experiment will have two tabs—Training
    Experiment and Predictive Experiment—with the former containing the experiment
    that you set up in the previous sections and the latter containing its converted
    version that will be used with web service.While in Predictive experiment tab,
    click the Run button. Once running completes successfully, click Deploy Web Service.
    You will be redirected to a new page, where you will find details about the deployed
    web service. It will also have an option to test the web service with specified
    values for features. Refer ML Studio’s documentation at [https://bit.ly/2Eincl7](https://bit.ly/2Eincl7)
    to learn more about publishing, tweaking, and consuming a predictive web service.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个训练好且经过测试的模型，是时候将其投入实际使用了。通过将其部署为 Web 服务，我们将为最终用户的软件应用程序提供一种以编程方式预测值的选项。例如，我们可以在我们的
    IoT 解决方案后端或者使用 Azure Stream Analytics 实时预测糖尿病中使用糖尿病预测模型的 Web 服务。选择“设置 Web 服务 ➤
    预测 Web 服务”选项。这将将我们当前的实验转换为所谓的预测实验。转换完成后，您的实验将具有两个标签页——训练实验和预测实验，前者包含您在前几节设置的实验，后者包含将用于
    Web 服务的转换版本。在预测实验标签页中，单击“运行”按钮。一旦运行成功完成，单击“部署 Web 服务”。您将被重定向到一个新页面，在该页面上，您将找到有关已部署
    Web 服务的详细信息。它还将提供一个选项，用于使用特定功能的指定值测试 Web 服务。有关发布、调整和使用预测 Web 服务的更多信息，请参考 ML Studio
    的文档 [https://bit.ly/2Eincl7](https://bit.ly/2Eincl7)。
- en: Recap
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复习
- en: 'In this chapter, you learned about:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '在本章中，您学到了： '
- en: Machine learning fundamentals—the what and why
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习基础知识——什么是以及为什么
- en: Differences between ML and data science
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习和数据科学之间的区别
- en: Brief overview of ML internals—model and training
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习内部的简要概述——模型和训练
- en: The problems ML solves—classification, regression, etc.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习解决的问题——分类、回归等
- en: Types of ML—supervised, unsupervised, and reinforcement
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习的类型——监督、无监督和强化
- en: Azure Machine Learning Studio
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 机器学习工作室
- en: Creating and deploying your own ML solution
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和部署你自己的机器学习解决方案
- en: Congratulations! You are now officially AI 2.0-ready. In this book, you learned
    a host of new technologies that will separate you from your peers, and help you
    design the next generation of software applications. We encourage you to learn
    about each new technology in more detail and practice as much as possible to improve
    your hands-on skills.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您现在已正式具备 AI 2.0 的能力。在本书中，您学习了许多新技术，这些技术将使您脱颖而出，并帮助您设计下一代软件应用程序。我们鼓励您更详细地了解每项新技术，并尽可能多地进行实践，以提高您的动手能力。
