- en: A. Getting Started with CyberMiles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CyberMiles is an Ethereum-compatible public blockchain with delegated proof-of-stake
    (DPoS) consensus. While it brings many feature enhancements to the Ethereum ecosystem,
    it can also serve as a much faster, much cheaper, and more reliable alternative
    to the Ethereum blockchain. All Ethereum smart contracts can run without modification
    on the CyberMiles blockchain. Furthermore, the CyberMiles ecosystem has easy-to-use
    developer tools that are improved versions of their Ethereum counterparts. Therefore,
    CyberMiles is a good choice for you to learn the Ethereum protocol and get started
    with application development.
  prefs: []
  type: TYPE_NORMAL
- en: While there are many tools that can get you quickly started with Lity, smart
    contracts, and dapp development on the CyberMiles public blockchain, to really
    learn how the blockchain works, you should start a node and synchronize it with
    the blockchain network. The node can run on a server or even on your own laptop
    if needed. In this appendix, I will describe how to run a CyberMiles node using
    Docker and how to interact with the node using command-line tools.
  prefs: []
  type: TYPE_NORMAL
- en: Deploy a Node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The quickest way to deploy a CyberMiles node is to use Docker for the latest
    node software and to use a snapshot for the up-to-date blockchain data. The following
    instructions show you how to build a CyberMiles testnet node. First, you have
    to install the Docker software: [https://docs.docker.com/install/](https://docs.docker.com/install/).'
  prefs: []
  type: TYPE_NORMAL
- en: A Docker image for Travis is stored on Docker Hub. The testnet environment uses
    the `vTestnet` release, which can be pulled automatically from Travis.
  prefs: []
  type: TYPE_NORMAL
- en: '[Click here to view code image](Images/app_images.xhtml#pro_a_1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let’s download the blockchain configuration and data into a local directory,
    `$HOME/.travis`, which we can then make accessible to the Docker container. The
    configuration files are here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Click here to view code image](Images/app_images.xhtml#pro_a_2)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You should edit the `config.toml` file to change the node’s name to your own.
  prefs: []
  type: TYPE_NORMAL
- en: '[Click here to view code image](Images/app_images.xhtml#pro_a_3)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, download the latest block data snapshot here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Click here to view code image](Images/app_images.xhtml#pro_a_4)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Extract the tar file and copy the `data` and `vm` subdirectories from the uncompressed
    directory to `$HOME/.travis.` Finally, start the Docker container by mapping the
    local computer’s `$HOME/.travis` directory to the Docker container’s `/travis`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[Click here to view code image](Images/app_images.xhtml#pro_a_5)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can start a CyberMiles mainnet node using a similar process. The only difference
    is that the configuration and blockchain data download URLs. You can learn more
    at [https://travis.readthedocs.io/en/latest/connect-mainnet.html](https://travis.readthedocs.io/en/latest/connect-mainnet.html).
  prefs: []
  type: TYPE_NORMAL
- en: Interactive Console on the Node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once a CyberMiles node is synchronized to the blockchain, you can use the Travis
    program to connect to it and send commands and interactions to the network. All
    you need to do is to attach the `travis` command to the node. The following command
    should be run on the same computer as Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Click here to view code image](Images/app_images.xhtml#pro_a_6)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: Never expose port 8545 outside the firewall when you have the `personal` module
    enabled. Hackers will be able to steal all your cryptocurrencies stored on the
    node if you do so.
  prefs: []
  type: TYPE_NORMAL
- en: Travis opens an interactive console in the new terminal, and you can use the
    `web3-cmt` JavaScript API to access the blockchain. For instance, the following
    commands will create a new account to hold virtual currency on this network. Just
    repeat the `newAccount()` command a few times, and you will see a few accounts
    in the `cmt.accounts` list. As mentioned earlier, each account consists of a pair
    of private and public keys. Only the public key is recorded on the blockchain
    in each transaction that involves this account.
  prefs: []
  type: TYPE_NORMAL
- en: '[Click here to view code image](Images/app_images.xhtml#pro_a_7)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When you create or unlock accounts from the Travis console, the private key
    of the account is stored in the keystore file on the attached node’s file system.
    Next, you can send some of your CMT from one account to another. Or, if your node
    is on the testnet, you can get some testnet CMT from the faucet at [https://travis-faucet.cybermiles.io/](https://travis-faucet.cybermiles.io/).
  prefs: []
  type: TYPE_NORMAL
- en: '[Click here to view code image](Images/app_images.xhtml#pro_a_8)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The last line is the transaction ID for the transaction to send 0.05 CMT between
    the two accounts. In the next example, let’s see how to build and deploy a smart
    contract and then call its function.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build a smart contract from source, you can use the Europa integrated development
    environment (IDE). Or, you can use the command-line `lityc` compiler, which provides
    more advanced features than Europa, such as security and compliance checks (see
    [Chapter 15](ch15.xhtml#ch15)). The goal is the same: to generate application
    binary interface (ABI) and bytecode from the Lity/Solidity source code so that
    they can be deployed on the blockchain. Let’s see how to use `lityc` for this
    purpose. You can install `lityc` following the instructions at [https://lity.readthedocs.io/](https://lity.readthedocs.io/).
    The following commands generate the bytecode and ABI definition from the `HelloWorld.lity`
    source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Click here to view code image](Images/app_images.xhtml#pro_a_9)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: On the Travis console, you can now deploy the contract bytecode and ABI to the
    CyberMiles blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: '[Click here to view code image](Images/app_images.xhtml#pro_a_10)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Once the contract is deployed with a confirmation from the blockchain, you will
    see its contract address printed on the console. You can now call its functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[Click here to view code image](Images/app_images.xhtml#pro_a_11)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, you can get the contract instance from its deployed address and
    then call its functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[Click here to view code image](Images/app_images.xhtml#pro_a_12)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The Travis console provides reliable and interactive access to the CyberMiles
    blockchain. We highly recommend you get familiar with it and use it to explore
    the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The CyberMiles blockchain is optimized for e-commerce applications. It is fully
    compatible with the Ethereum blockchain yet is much faster, cheaper, and safer.
    It has a full suite of development and deployment tools to facilitate smart contract
    and dapp development. Hence, the CyberMiles blockchain is an excellent alternative
    to get started with Ethereum application development and beyond.
  prefs: []
  type: TYPE_NORMAL
