- en: © The Author(s), under exclusive license to Springer Nature Switzerland AG 2021Y.
    Maleh et al. (eds.)Artificial Intelligence and Blockchain for Future Cybersecurity
    ApplicationsStudies in Big Data90[https://doi.org/10.1007/978-3-030-74575-2_7](https://doi.org/10.1007/978-3-030-74575-2_7)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 作者，独家许可给 Springer Nature Switzerland AG 2021 年。 Maleh 等人（编辑）人工智能和区块链未来网络安全应用研究数据90
    [https://doi.org/10.1007/978-3-030-74575-2_7](https://doi.org/10.1007/978-3-030-74575-2_7)
- en: 'Revisiting the Approaches, Datasets and Evaluation Parameters to Detect Android
    Malware: A Comparative Study from State-of-Art'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新审视检测安卓恶意软件的方法、数据集和评估参数：来自最新研究的比较研究
- en: 'Abu Bakkar Siddikk^([1](#Aff7), [3](#Aff9) [ ](#ContactOfAuthor1)), Md. Fahim Muntasir^([1](#Aff7),
    [3](#Aff9) [ ](#ContactOfAuthor2)), Rifat Jahan Lia^([1](#Aff7), [3](#Aff9) [ ](#ContactOfAuthor3)),
    Sheikh Shah Mohammad Motiur Rahman^([1](#Aff7), [3](#Aff9) [ ](#ContactOfAuthor4)),
    Takia Islam^([1](#Aff7), [3](#Aff9) [ ](#ContactOfAuthor5)) and Mamoun Alazab^([2](#Aff8) [ ](#ContactOfAuthor6))(1)Department
    of Software Engineering, Daffodil International University, Dhaka, Bangladesh(2)College
    of Engineering, IT and Environment, Charles Darwin University, Darwin, Australia(3)nFuture
    Research Lab, Dhaka, BangladeshAbu Bakkar Siddikk (Corresponding author)Email:
    [abu35-1994@diu.edu.bd](mailto:abu35-1994@diu.edu.bd)Md. Fahim MuntasirEmail:
    [fahim35-1900@diu.edu.bd](mailto:fahim35-1900@diu.edu.bd)Rifat Jahan LiaEmail:
    [rifat35-1845@diu.edu.bd](mailto:rifat35-1845@diu.edu.bd)Sheikh Shah Mohammad Motiur Rahman (Corresponding
    author)Email: [motiur.swe@diu.edu.bd](mailto:motiur.swe@diu.edu.bd)Takia IslamEmail:
    [takia35-1014@diu.edu.bd](mailto:takia35-1014@diu.edu.bd)Mamoun AlazabEmail: [alazab.m@ieee.org](mailto:alazab.m@ieee.org)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 阿布·巴卡尔·西迪克（第一作者，[1](#Aff7)，[3](#Aff9) [ ](#ContactOfAuthor1)）、Md。 法希姆·蒙塔斯尔（第一作者，[1](#Aff7)，[3](#Aff9) [ ](#ContactOfAuthor2)）、Rifat
    乔汉·利亚（第一作者，[1](#Aff7)，[3](#Aff9) [ ](#ContactOfAuthor3)）、谢赫·沙阿·穆罕默德·莫提乌尔·拉赫曼（第一作者，[1](#Aff7)，[3](#Aff9) [ ](#ContactOfAuthor4)）、Takia
    伊斯兰（第一作者，[1](#Aff7)，[3](#Aff9) [ ](#ContactOfAuthor5)） 和 Mamoun Alazab（第二作者，[2](#Aff8) [ ](#ContactOfAuthor6)）（1）软件工程系，孟加拉达卡国际大学，达卡，孟加拉国（2）工程、信息技术和环境学院，查尔斯达尔文大学，达尔文，澳大利亚（3）未来研究实验室，达卡，孟加拉国阿布·巴卡尔·西迪克（通讯作者）电子邮件：[abu35-1994@diu.edu.bd](mailto:abu35-1994@diu.edu.bd)Md。
    Fahim Muntasir 电子邮件：[fahim35-1900@diu.edu.bd](mailto:fahim35-1900@diu.edu.bd)Rifat
    Jahan Lia 电子邮件：[rifat35-1845@diu.edu.bd](mailto:rifat35-1845@diu.edu.bd)Sheikh
    Shah Mohammad Motiur Rahman（通讯作者）电子邮件：[motiur.swe@diu.edu.bd](mailto:motiur.swe@diu.edu.bd)Takia
    Islam 电子邮件：[takia35-1014@diu.edu.bd](mailto:takia35-1014@diu.edu.bd)Mamoun Alazab
    电子邮件：[alazab.m@ieee.org](mailto:alazab.m@ieee.org)
- en: Abstract
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: Alongside the recognition of the android operating system (OS), android malware
    is on the increase. Cybercriminals are using different techniques to develop malware
    for android devices. In addition, malware authors are trying to make malicious
    android applications that severely undermine the potential of traditional malware
    detectors. The key purpose of the chapter is to analyze and have a different appearance
    at various techniques of Android malware detection in a variety of research articles.
    However, this chapter presents an analysis of varied android malware detection
    approaches and comparing them to supported various parameters like detection technique,
    analysis method, features extracted and so on. The experiments are based on substantial
    malware datasets, evaluation parameters and this study employ a wide variety of
    machine learning techniques, including decision trees and random forests, support
    vector machines, logistic model trees, and artificial neural networks, also Deep
    learning techniques. It is a comparative analysis that should be useful in this
    field for researchers. The analysis shows, based on simple criteria, the similarities
    and differences in essential published research in addition to the accuracy. Thus,
    this chapter aims to study various android malware detection techniques and to
    identify plausible research directions. The findings showed that machine learning,
    with greater detection accuracy, is a more promising method. In order to achieve
    improved accuracy, future researchers can pursue a deep learning approach with
    the use of a large dataset.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 随着对安卓操作系统（OS）的认可，安卓恶意软件的数量正在增加。网络犯罪分子正在使用不同的技术为安卓设备开发恶意软件。此外，恶意软件作者正在努力制作严重破坏传统恶意软件检测器潜力的恶意安卓应用程序。本章的主要目的是分析并从不同角度审视各种研究文章中的安卓恶意软件检测技术。然而，本章提供了对各种安卓恶意软件检测方法的分析，并将它们与支持的各种参数进行比较，如检测技术、分析方法、提取的特征等。实验基于大量的恶意软件数据集、评估参数，本研究采用了各种机器学习技术，包括决策树和随机森林、支持向量机、逻辑模型树和人工神经网络，还有深度学习技术。这是一个比较分析，对研究人员在这一领域应该是有用的。分析显示，基于简单标准，已发表的重要研究在准确性方面的相似性和差异。因此，本章旨在研究各种安卓恶意软件检测技术，并确定可能的研究方向。研究结果显示，机器学习具有更高的检测准确率，是一种更有前景的方法。未来的研究人员可以追求使用大型数据集的深度学习方法以实现更高的准确率。
- en: KeywordsAndroid malwareDeep learningMachine learningMalware detectionState-of-art
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 关键词：安卓恶意软件、深度学习、机器学习、恶意软件检测、最新技术
- en: 1 Introduction
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1 引言
- en: 'The term malware is a contraction of malicious software. Malware is any piece
    of software that was written with the intent of damaging devices, stealing data,
    and generally causing a mess. The Android operating system tells the user what
    systems and data an app will access, but the OS won’t block any app activity after
    installation. Therefore, every Android device should have an Android malware protection
    program. The risks that an app brings to a device depend on its origins. According
    to Android Malware Detection Model Based on LightGBM from Wang et al. [[7](#CR7)],
    there are proposed a model this is LightGBM for Machine Learning and they are
    run this model on a laptop and found 2000 benign samples are downloaded from Baidu
    app store and Google app store again 2000 malware samples are downloaded from
    VirusShare ([www.​virusshare.​com](http://www.virusshare.com)). They found the
    accuracy of LightGBM is 96.4%. Therefore, LightGBM can reduce the time of execution.
    Danish et al. [[1](#CR1)] proposed the IMCFN method. It is mainly divided into
    two parts: malware image generation and CNN fine-tuning via backpropagation technique.
    For evaluations, they used two Datasets to find out the android malware which
    is the Malimg malware dataset (9,435 samples), and IoTandroid mobile dataset (14,733
    malware and 2,486 benign samples) they mainly focused on deep learning.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 术语恶意软件是恶意软件的缩写。恶意软件是指任何有意编写的软件，旨在损坏设备、窃取数据，并且通常会造成混乱。安卓操作系统会告诉用户应用将访问的系统和数据，但是操作系统不会在安装后阻止任何应用活动。因此，每台安卓设备都应该有一个安卓恶意软件防护程序。应用给设备带来的风险取决于其来源。根据王等人提出的基于
    LightGBM 的安卓恶意软件检测模型[[7](#CR7)]，提出了一种 LightGBM 的模型用于机器学习，他们在笔记本电脑上运行了这个模型，并发现从百度应用商店和谷歌应用商店下载了
    2000 个良性样本，再次从 VirusShare ([www.​virusshare.​com](http://www.virusshare.com))
    下载了 2000 个恶意软件样本。他们发现 LightGBM 的准确率为 96.4%。因此，LightGBM 可以减少执行时间。丹尼斯等人[[1](#CR1)]
    提出了 IMCFN 方法。它主要分为两部分：恶意软件图像生成和 CNN 通过反向传播技术微调。为了评估，他们使用了两个数据集来发现安卓恶意软件，即 Malimg
    恶意软件数据集（9,435 个样本）和 IoTandroid 移动数据集（14,733 个恶意软件样本和 2,486 个良性样本），他们主要关注深度学习。
- en: Malware detection approaches can be either static or dynamic [[33](#CR33), [37](#CR37),
    [41](#CR41)] Static malware detection relies on features extracted from executable
    artifacts such as opcodes, bytecodes, byte level, or strings, while dynamic techniques
    [[12](#CR12), [24](#CR24)] are based on behavioral features from system calls
    and sandbox. For Example, Baoguo et al. [[8](#CR8)] use two datasets one in Microsoft
    and another Drebin dataset. In the Drebin dataset, the top 10 malware families
    are selected and a total of 4020 android malware samples are used for experiments
    based on static and dynamic features. Moreover, many researchers are struggling
    to detect android malware using many tools and techniques for their purpose as
    follows.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件检测方法可以是静态的或动态的[[33](#CR33), [37](#CR37), [41](#CR41)]。静态恶意软件检测依赖于从可执行文件提取的特征，如操作码、字节码、字节级别或字符串，而动态技术[[12](#CR12),
    [24](#CR24)]则基于系统调用和沙箱的行为特征。例如，包国等人[[8](#CR8)] 使用了两个数据集，一个在微软上，另一个在 Drebin 数据集上。在
    Drebin 数据集中，选择了前 10 个恶意软件家族，并使用了总共 4020 个安卓恶意软件样本进行了基于静态和动态特征的实验。此外，许多研究人员正努力使用各种工具和技术来检测安卓恶意软件，以实现他们的目的，如下所示。
- en: There are several methods proposed by the researcher to detect android malware
    as follows:- VizMal [[9](#CR9)] operates on an execution trace of an Android application
    and visualizes it as a sequence of colored boxes, one box for every second of
    the duration of the execution. Concededly, it is often wont to debug a malware
    detection method by performing a fine-grained analysis of misclassified applications.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 研究人员提出了几种检测安卓恶意软件的方法，如下所示：- VizMal [[9](#CR9)] 操作在一个安卓应用的执行跟踪上，并将其可视化为执行持续时间的每秒一个彩色方框的序列。诚然，经常倾向于通过对误分类的应用进行细粒度分析来调试恶意软件检测方法。
- en: MaMaDroid [[36](#CR36)] builds a model of the sequence of API calls as Markov
    chains, which are successively wont to extract features for machine learning algorithms
    to classify apps as benign or malicious. Markov Chains are memoryless models where
    the probability of transitioning from a state to a different one only depends
    on the present state. This is often represented as a group of nodes, each like
    a special state, and a group of edges connecting one node to a different label
    with the probability of that transition.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: MaMaDroid [[36](#CR36)] 以马尔可夫链的形式构建了 API 调用序列的模型，这些调用序列被依次用于提取特征，以便机器学习算法对应用程序进行分类为良性或恶意。马尔可夫链是一种无记忆模型，其中从一个状态转移到另一个状态的概率仅取决于当前状态。这通常表示为一组节点，每个节点对应一个特定的状态，以及一组连接一个节点到另一个节点的边，其转换的概率。
- en: DroidSieve [[34](#CR34)] relies on several features known to be characteristic
    of Android malware, including API calls. It performs a completely unique deep
    inspection of the app to spot discriminating features missed by existing techniques,
    including native components, obfuscation artifacts, and features that are invariant
    under obfuscation. Evaluate its robustness on a group of over 100K benign and
    malicious Android apps. For detection, they achieve up to 99.82 curacies with
    zero false positives. Equivalent features allow family identification with an
    accuracy of 99.26%. They evaluate its robustness on a set of over 100K benign
    and malicious Android apps. For detection, they achieve up to 99.82% accuracy
    with zero false positives. The same features allow family identification with
    an accuracy of 99.26%.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: DroidSieve [[34](#CR34)] 依赖于已知的一些特征，这些特征是 Android 恶意软件的特征，包括 API 调用。它对应用程序进行了完全独特的深度检查，以识别由现有技术遗漏的区分特征，包括本地组件、混淆工件和在混淆下不变的特征。评估其在一组超过
    100K 个良性和恶意 Android 应用程序上的鲁棒性。对于检测，他们达到了高达 99.82 的准确率，零误报。等效特征允许使用 99.26% 的准确率进行家族识别。他们对一组超过
    100K 个良性和恶意 Android 应用程序的鲁棒性进行了评估。对于检测，他们达到了高达 99.82% 的准确率，零误报。同样的特征允许使用 99.26%
    的准确率进行家族识别。
- en: 'The main goal of this chapter can be described as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要目标可以描述如下：
- en: The most widely used malware detection techniques (machine learning & deep learning)
    has been analyzed from different top ranking publisher.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最广泛使用的恶意软件检测技术（机器学习和深度学习）已经从不同的顶级出版商进行了分析。
- en: Identify the most used dataset to detect Android malware with an integrated
    solution.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定用于检测 Android 恶意软件的最常用数据集，以提供一个综合解决方案。
- en: To figure out the most optimized algorithm that is effective for detecting android
    malware.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了找出最优化的算法，以有效地检测 Android 恶意软件。
- en: Detecting the optimized parameter that is sufficient for generating the malware
    detection outcome.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测生成恶意软件检测结果所需的最优化参数。
- en: The top ranking publisher (IEEE, Springer etc.) that published the most android-related
    malware paper has been analyzed.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已分析了发表了最多与 Android 相关的恶意软件论文的顶级出版商（IEEE、Springer 等）。
- en: 'The rest of the chapter is organized as follows: In this chapter, it has tried
    to show a statistical analysis of Android malware detection from 2015 to 2020
    best-published paper among all best publishers (IEEE, Springer, Elsevier, etc.).
    In Sect. [2](#Sec2), have briefly reviewed the Statistical, Dynamical analysis
    on malware Android detection. In Sect. [3](#Sec5), try to explain the process
    of this work using the proposed methodology. In Sect. [4](#Sec12), show a report
    on the results of an analysis based on this study for understanding the Android
    malware from the Analysis and so on. Finally, this paper ends with Sect. [5](#Sec18)
    presenting the final result.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其余部分组织如下：在本章中，试图展示从 2015 年到 2020 年关于 Android 恶意软件检测的统计分析的最佳出版论文，来自所有最佳出版商（IEEE、Springer、Elsevier
    等）。在第 2 节 [2](#Sec2) 中，简要回顾了关于恶意软件 Android 检测的统计和动态分析。在第 3 节 [3](#Sec5) 中，尝试解释使用所提出的方法论进行此工作的过程。在第
    4 节 [4](#Sec12) 中，展示了基于这项研究进行理解 Android 恶意软件的分析结果报告等。最后，本文以第 5 节 [5](#Sec18) 呈现最终结果而结束。
- en: 2 The Most Popular Methods for Detecting Android Malware
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2 用于检测 Android 恶意软件的最流行方法
- en: For obtaining features there are some methods named static analysis, dynamic
    analysis and hybrid analysis in android malware detection.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得特征，存在一些命名为静态分析、动态分析和混合分析的方法，用于 Android 恶意软件检测。
- en: 2.1 Static Analysis Approach
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.1 静态分析方法
- en: The static analysis relies on all the features which are collected without the
    execution of the code. Several studies including [[45](#CR45)–[50](#CR50)] have
    performed static analysis among the 150 papers have been used in this study all
    of which have been gathered at the reputed publisher sites like IEEE, Springer
    etc. Mahindru et al. [[10](#CR10)]executed an approximate pattern for inspecting
    any program’s attributes for making a balance between correct examining accuracy
    and methodical number crunching. Alazab et al. [[10](#CR10)] had discussed the
    static analysis of the papers from 2011 to 2016\. It showed the detection accuracy
    rate on different algorithms and also the application classification rate. Taheri
    et al. [[11](#CR11)] showed and analyzed different techniques using static approaches,
    such as Drebin, StormDroid, and DroidSIFT, ANASTASIA, AndroSimilar, SDHash which
    are applied on Android apps. Lopes et al. [[16](#CR16)] mentioned some static
    malware detection methods such as Android Asset Packaging Tool (AAPT). It retrieves
    files from APK. It also mentioned a malware detection framework that used permissions
    and API calls as features. Yen et al. [[17](#CR17)] said about some basic knowledge
    of static analysis and also some approaches and techniques of it. Zero-day attacks
    and logic make the static method harder to do its job. Nowadays, most static malware
    detection techniques are based on content signatures. Call graphs, system calls,
    dendroid are some of the techniques. A. Saracino et al. [[18](#CR18)] mentioned
    a tool named Alterdroid that compares the differences in behavior between an original
    app. MADAM is the first system that aims at detecting and stopping at run-time
    any kind of malware, without focusing on a specific security threat, using a behavior-based
    and multi-level approach. Not only the accuracy of the runtime detection of MADAM
    is very high, but it also achieves low performance (1.4%) and energy overhead
    (4%). An API level of Android application security authentication mechanism (ASCAA),
    Drebin and a model based on API calls and the use of permissions available in
    various Android applications for capturing features related to malware behavior
    are mentioned in Zhao et al. [[20](#CR20)]. Wang et al. [[39](#CR39)] said about
    the two main techniques of static analysis named Data flow tracking and Decompiling
    and also discussed some static analysis tools such as Smali and Apktool.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 静态分析依赖于所有未执行代码收集的功能。在本研究中，包括[[45](#CR45)–[50](#CR50)]等几项研究进行了静态分析，这些研究中的150篇论文均已收集自IEEE、Springer等知名出版商的网站。Mahindru等人[[10](#CR10)]执行了一个近似模式，用于检查任何程序的属性，以在正确检查准确性和方法性数值分析之间取得平衡。Alazab等人[[10](#CR10)]讨论了2011年至2016年期间的论文的静态分析。它展示了不同算法的检测准确率以及应用程序分类率。Taheri等人[[11](#CR11)]展示并分析了使用静态方法的不同技术，例如Drebin、StormDroid和DroidSIFT、ANASTASIA、AndroSimilar、SDHash等，这些技术应用于Android应用程序。Lopes等人[[16](#CR16)]提到了一些静态恶意软件检测方法，例如Android资产打包工具（AAPT）。它从APK中提取文件。它还提到了一个使用权限和API调用作为特征的恶意软件检测框架。Yen等人[[17](#CR17)]谈到了静态分析的一些基本知识以及一些方法和技术。零日攻击和逻辑使静态方法更难完成其工作。如今，大多数静态恶意软件检测技术都是基于内容签名的。调用图、系统调用、dendroid等是一些技术。A.
    Saracino等人[[18](#CR18)]提到了一个名为Alterdroid的工具，用于比较原始应用程序之间的行为差异。MADAM是第一个旨在检测并在运行时停止任何类型的恶意软件的系统，而不专注于特定的安全威胁，它使用基于行为的多级方法。不仅MADAM的运行时检测准确率非常高，而且它还实现了低性能（1.4％）和能耗开销（4％）。赵等人[[20](#CR20)]提到了Android应用程序安全身份验证机制（ASCAA）、Drebin和基于API调用和Android应用程序中权限的使用的模型等内容。Wang等人[[39](#CR39)]谈到了静态分析的两种主要技术，即数据流跟踪和反编译，并讨论了一些静态分析工具，如Smali和Apktool。
- en: 2.2 Dynamic Analysis Approach
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.2 动态分析方法
- en: At runtime, dynamic analysis will recognize application behavior and it is often
    performed in a sandbox environment.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，动态分析将识别应用程序行为，并通常在沙盒环境中执行。
- en: Dynamic analysis is often progressively instructive since it just dissects code
    that basically executes. Dynamic analysis-based malware detection methods acquire
    high performance. As well but longer and resource-consuming than their static
    embodiment. However, dynamic analysis methods are simpler on the detection of
    the latest malware even as sorts of existing malware. Lopes et al. [[16](#CR16)]
    expressed con to static analysis, the dynamic analysis consists of the execution
    of a given application during a sandboxed environment, so on monitor its conduct.
    It’s being detected to unknown malware and also developed an android malware detection
    that uses the frequency of invoked system calls at runtime as features using dataset
    compromised malicious samples and benign samples in an emulator employing a tool
    named Monkey. Yene et al. [[17](#CR17)] said this sort of method picks out android
    malware executant the whole apk file, it requires some content to possess associated
    with the appliance, and await the trigger moment. Zhao et al. [[20](#CR20)] mentions
    that behavior-based detection technology is its superb achievement in dealing
    with code obfuscation encryption. The feature databases are small and don’t require
    frequent updates. Consequently it’s more wont to detect unknown applications almost
    like known behavior patterns.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 动态分析通常逐步引导性，因为它只分析基本执行的代码。基于动态分析的恶意软件检测方法具有很高的性能。但是，与静态方法相比，动态分析方法更加耗时和资源消耗。然而，动态分析方法对最新恶意软件的检测更为简单，即使对现有恶意软件也是如此。Lopes等人[[16](#CR16)]表示与静态分析相反，动态分析包括在沙盒环境中执行给定应用程序，以监视其行为。它被检测到未知的恶意软件，并且还开发了一种使用运行时调用频率作为特征的android恶意软件检测方法，该方法使用了在模拟器中受损的恶意样本和良性样本的数据集，并使用了一个名为Monkey的工具。Yene等人[[17](#CR17)]说这种方法挑选出android恶意软件的执行程序整个apk文件，它需要一些内容与应用程序相关，并等待触发时刻。赵等人[[20](#CR20)]提到行为基础检测技术在处理代码混淆加密方面取得了出色的成就。特征数据库很小，不需要频繁更新。因此，它更有可能检测到类似于已知行为模式的未知应用程序。
- en: The method of anomaly behavior and the use of device calls log is commonly used
    in the approach to dynamic analysis. The identification of patterns in a specific
    dataset that do not adhere to a deep-rooted lawful activity is based on anomaly
    behavior. Although this technique is capable of detecting unknown applications
    effectively, the false positive rate is high. System Call Log is a process where
    a software request is serviced from the kernel of the basic operating system.
    At the kernel level, malicious detection is conducted at high detection precision
    with few false positive rates.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 异常行为方法和使用设备调用日志常用于动态分析方法。在异常行为方法中，基于不遵循根深蒂固的合法活动的特定数据集中的模式的识别。虽然这种技术能够有效地检测未知应用程序，但误报率很高。系统调用日志是一个过程，其中软件请求从基本操作系统的内核中提供服务。在内核级别，恶意检测以高检测精度进行，误报率很低。
- en: 3 Methodology
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3 方法论
- en: A methodology for completing the integrate technology has been used in this
    article. Initialization, preprocessing, Final Selected Manuscript, Extracting
    Details, Comparative Analysis, and Findings are six stages. Both of these are
    carried out step by step. This paper completed all operations smoothly and within
    a short time by following these measures. It also allows this analysis to gather
    and extract from the papers all the important material. This research work is
    also able to collect the data in a simple way through this technique and that
    will be secure.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本文采用了一种完成集成技术的方法。初始化、预处理、最终选定手稿、提取细节、比较分析和发现是六个阶段。这些都是逐步进行的。通过遵循这些措施，本文顺利地完成了所有操作，并且在短时间内完成。这也使得分析能够从论文中收集和提取所有重要材料。通过这种技术，这项研究工作还能够简单地收集数据，并且将是安全的。
- en: 3.1 Initialization
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.1 初始化
- en: The keywords that are used to search for the necessary information were defined
    at the very first. The keywords identified for this study are Android malware
    detection, deep learning, and machine learning. Then the search process began
    on the basis of the keywords. This paper gathers 250 papers very quickly based
    on the keywords that are listed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 用于搜索所需信息的关键词是在最初定义的。为本研究确定的关键词是Android恶意软件检测、深度学习和机器学习。然后，搜索过程根据这些关键词开始。本文根据列出的关键词迅速收集了250篇论文。
- en: 3.2 Preprocessing
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.2 预处理
- en: Irrelevant papers have been excluded from the 250 papers in preprocessing and
    the list is reduced by 210 as several papers have been replicated and out of the
    keywords and goals. Then, the recent publications were classified and the names
    were listed. Springer, IEEE, ACM, Elsevier, etc. are some of the famous publications
    that have been established in preprocessing. Finally, only the papers from 2015
    to 2020 focused on the identification of android malware with deep learning or
    machine learning are chosen and the paper numbers have again been reduced to 150.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在预处理中，将250篇无关的论文排除，列表减少了210篇，因为有几篇论文重复，并且不符合关键词和目标。然后，对最近的出版物进行分类，并列出名称。Springer、IEEE、ACM、Elsevier等是一些已在预处理中确定的知名出版物。最后，只选择了2015年至2020年关于使用深度学习或机器学习识别安卓恶意软件的论文，并且论文数量再次减少到了150篇。
- en: 3.3 Final Selected Manuscript
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.3 最终选定的手稿
- en: Consequently, android malware detection with deep learning and machine learning
    is focused on keywords after searching articles. Then the number of papers was
    reduced after recognizing common publications and deleting obsolete papers and
    even taking only papers from 2015 to 2020\. Therefore, the number of final manuscripts
    chosen is 150, which covers papers from 2015 to 2020.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，基于搜索文章后，深度学习和机器学习在安卓恶意软件检测上聚焦于关键词。然后，在识别常见出版物并删除过时论文甚至只选择2015年至2020年的论文后，论文数量减少了。因此，最终选定的手稿数量为150篇，涵盖了2015年至2020年的论文。
- en: Here goes the diagram of the methodology (Fig. [1](#Fig1))-![../images/507793_1_En_7_Chapter/507793_1_En_7_Fig1_HTML.png](../images/507793_1_En_7_Chapter/507793_1_En_7_Fig1_HTML.png)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是方法论的图示（图[1](#Fig1))-![../images/507793_1_En_7_Chapter/507793_1_En_7_Fig1_HTML.png](../images/507793_1_En_7_Chapter/507793_1_En_7_Fig1_HTML.png)
- en: Fig. 1
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图1
- en: Diagram of the methodology
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 方法论图示
- en: 3.4 Extract Information
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.4 提取信息
- en: In this step, all the essential data are collected from all 150 papers. The
    collected essential data are publisher’s name, type of the paper, publication’s
    year, evaluation parameters, used datasets, used algorithms and main contribution.
    Thus, the publishers’ names for the 150 papers are mostly IEEE, Springer, ACM,
    and Elsevier. Three types of papers are found among all the papers named journals,
    conferences and book chapters. The papers from 2015 to 2020 have already been
    collected safely and arranged according to the year. According to the collected
    data, it proves that different papers have used different evaluation parameters.Some
    of the evaluation parameters are recall, accuracy, precision, f-measure, TPR,
    FPR, ROC etc. Some of the datasets are VirusTotal, Drebin, AMD, ImageNet, AndroZoo,
    etc. Those papers which used Deep learning algorithms and Machine learning algorithms
    are collected for this paper. Some deep learning algorithms that are used in the
    collected papers are Convolutional Neural Network (CNN), Deep Belief Network (DBN),
    Restricted Boltzmann Machine (RBM), Long short-term memory (LSTM), Deep Neural
    Nets (DNN), Recurrent Neural Network (RNN), Multimodal Neural Network (MNN), etc.
    And some machine learning algorithms are used called Support Vector Machine (SVM),
    K-nearest neighbors (K-NN), K-means, Random Forest(RF), Naïve Bayes (NB), Partial
    Decision Trees (PART), Neural Network Algorithm (NNA), Multilayer Perceptron (MLP),
    Decision Tree (DT), etc. This paper also extracted every paper’s additional techniques
    like Data Flow Graph, Control Flow Graph, N-grams, etc.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，从所有150篇论文中收集了所有必要的数据。收集的基本数据包括出版商名称、论文类型、出版年份、评估参数、使用的数据集、使用的算法和主要贡献。因此，这150篇论文的出版商名称主要是IEEE、Springer、ACM和Elsevier。所有论文中发现了三种类型的论文，分别是期刊、会议和书章节。2015年至2020年的论文已经被安全地收集和按年份排列。根据收集的数据，证明了不同的论文使用了不同的评估参数。一些评估参数包括召回率、准确率、精确率、F-度量、真阳性率、假阳性率、ROC等。一些数据集包括VirusTotal、Drebin、AMD、ImageNet、AndroZoo等。本文收集了使用深度学习算法和机器学习算法的论文。一些在收集的论文中使用的深度学习算法包括卷积神经网络（CNN）、深度信念网络（DBN）、受限玻尔兹曼机（RBM）、长短期记忆网络（LSTM）、深度神经网络（DNN）、循环神经网络（RNN）、多模态神经网络（MNN）等。还使用了一些机器学习算法，称为支持向量机（SVM）、K最近邻（K-NN）、K均值、随机森林（RF）、朴素贝叶斯（NB）、部分决策树（PART）、神经网络算法（NNA）、多层感知器（MLP）、决策树（DT）等。本文还提取了每篇论文的其他技术，如数据流图、控制流图、N-gram等。
- en: 3.5 Comparative Analysis
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.5 对比分析
- en: Comparative analysis was conducted between them after collecting data from all
    the documents. For example, all the names of the algorithms and their kind have
    been specified (deep learning and machine learning). After analyzing the list,
    the outcome states that Support Vector Machine (SVM) is the most used algorithm
    in android malware detection and Machine Learning is the most used algorithm sort.
    Thus, it is obvious from the comparative study that Machine Learning is more used
    for the detection of Android malware than Deep Learning. For this research work,
    the assessment parameters of all papers have also been identified. And it means
    that the most used measurement parameter is accuracy.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在收集所有文档的数据后，对它们进行了比较分析。例如，所有算法的名称及其类型都已经确定（深度学习和机器学习）。经过对列表的分析，结果表明，支持向量机（SVM）是安卓恶意软件检测中使用最多的算法，而机器学习是使用最多的算法类型。因此，从比较研究中可以明显看出，相比深度学习，机器学习更多地用于检测安卓恶意软件。对于这项研究工作，还确定了所有论文的评估参数。这意味着最常用的测量参数是准确性。
- en: 3.6 Findings
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.6 发现
- en: This analysis would verify the results of the previous steps after completing
    all the previous steps. For this article, the names of publishers and types of
    papers were collected from 150 papers from 2015 to 2020\. From the previous steps,
    the algorithms and their forms and the ones that are most used have also been
    found. The dataset and evaluation parameters, along with the most used dataset
    and the most used evaluation matrix, are also in the list of results.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '在完成所有先前步骤后，此分析将验证先前步骤的结果。对于本文，从2015年至2020年收集了150篇论文的出版商名称和论文类型。从先前的步骤中，还发现了算法及其形式以及最常用的算法。数据集和评估参数，以及最常用的数据集和最常用的评估矩阵，也在结果列表中。 '
- en: 4 Result and Discussion
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4 结果与讨论
- en: In this section, this proper study was tried to provide comparative analysis
    based on a comparative study, and the results were finally given in this report.
    The aim of the study, this article is presented by analyzing various important
    terms that are currently relevant to the recognition or detection of android malware
    comprising more than 150 papers. Such pieces of information about our keywords
    consider’s articles available **https://doi.org/10.6084/m9.figshare.12520007.v2**.
    In this research paper, it showed that most researchers have used a Machine Learning
    Approach (ML) of the comparison study not only to detect Android Malware, but
    also to classify several forms of android dataset [[10](#CR10), [42](#CR42), [43](#CR43)]
    to find out android malware.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，尝试通过比较研究提供基于比较研究的比较分析，并最终在本报告中给出了结果。该研究的目的，本文通过分析当前与安卓恶意软件识别或检测相关的各种重要术语来呈现，包括150多篇论文。有关我们关键词的信息考虑到的文章可以在**https://doi.org/10.6084/m9.figshare.12520007.v2**。在这篇研究论文中，显示大多数研究人员使用了比较研究的机器学习方法（ML），不仅用于检测安卓恶意软件，还用于分类几种安卓数据集[[10](#CR10),
    [42](#CR42), [43](#CR43)]以找出安卓恶意软件。
- en: 4.1 The Most Applicable Technique
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.1 最适用的技术
- en: According to the comparative study, A great number of machine learning-based
    Android malware detection techniques have been proposed in the past few years
    and till now it has been proposed. Many researchers including [[2](#CR2), [6](#CR6),
    [13](#CR13)–[15](#CR15), [19](#CR19), [21](#CR21)–[23](#CR23), [25](#CR25)–[32](#CR32),
    [35](#CR35), [38](#CR38), [40](#CR40)] used machine learning approaches within
    2015-2020 which are covered during the study. Thus, this study found that machine
    learning techniques in android malware detection have significant contribution
    and which is increasing day by day.![../images/507793_1_En_7_Chapter/507793_1_En_7_Fig2_HTML.png](../images/507793_1_En_7_Chapter/507793_1_En_7_Fig2_HTML.png)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 根据比较研究，在过去几年中，提出了大量基于机器学习的安卓恶意软件检测技术，直到现在都有。许多研究人员，包括[[2](#CR2), [6](#CR6),
    [13](#CR13)–[15](#CR15), [19](#CR19), [21](#CR21)–[23](#CR23), [25](#CR25)–[32](#CR32),
    [35](#CR35), [38](#CR38), [40](#CR40)]，在2015年至2020年期间使用了机器学习方法，这些都在研究中涵盖了。因此，该研究发现，安卓恶意软件检测中的机器学习技术具有重要的贡献，并且这一贡献日益增加。![../images/507793_1_En_7_Chapter/507793_1_En_7_Fig2_HTML.png](../images/507793_1_En_7_Chapter/507793_1_En_7_Fig2_HTML.png)
- en: Fig. 2
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2
- en: ML:-Machine Learning approaches; DL:-Deep Learning approaches
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: ML：-机器学习方法；DL：-深度学习方法
- en: Machine-learning technique has several false positives applied to real-world
    data. Most researchers therefore investigated the use of malware machine learning
    methods [[33](#CR33)]. Figure [2](#Fig2) shows that many researchers have used
    machine learning (ML) techniques over many years to identify Android Malware and
    researchers expect this to continue in the future.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习技术在应用于真实世界数据时存在一些假阳性。因此，大多数研究人员调查了恶意软件机器学习方法的使用[[33](#CR33)]。图[2](#Fig2)显示，许多研究人员多年来使用机器学习（ML）技术来识别Android恶意软件，并且研究人员期望这种情况在未来会继续存在。
- en: 4.2 The Most Uses Evaluation Parameters
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.2 最常用的评估参数
- en: As shown in Fig. [3](#Fig3) and Fig. [6](#Fig6), most researchers obtained results
    from the assessment parameters by defining the recall percentage in the assessment
    matrix. Overall, the model, algorithm and many methods perform very well as a
    consequence of the performance of the evaluation.![../images/507793_1_En_7_Chapter/507793_1_En_7_Fig3_HTML.png](../images/507793_1_En_7_Chapter/507793_1_En_7_Fig3_HTML.png)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如图[3](#Fig3)和图[6](#Fig6)所示，大多数研究人员通过在评估矩阵中定义召回率百分比来获得评估参数的结果。总的来说，由于评估的性能，模型、算法和许多方法的表现非常好。![../images/507793_1_En_7_Chapter/507793_1_En_7_Fig3_HTML.png](../images/507793_1_En_7_Chapter/507793_1_En_7_Fig3_HTML.png)
- en: Fig. 3
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图3
- en: TPR:-True Positive Rate; TNR:-True Negative Rate; FPR:-False Positive Rate;
    FNR:-False Negative Rate; AUC:-Area Under the Curve; ROC:-Receiver operating characteristic
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: TPR：真阳性率；TNR：真阴性率；FPR：假阳性率；FNR：假阴性率；AUC：曲线下面积；ROC：接收者操作特征
- en: Based on a comparative analysis from 2015 to 2020, all researchers in the paper
    provided maximum enhancement among all evaluation matrices reached by the Recall
    to demonstrate and enhance their model or approaches. Alzaylaee et al. [[3](#CR3)]
    suggested one and more methods based on recall, consistency, accuracy, etc. to
    assess device performance. Since 2015–2020 from this evaluation have found Recall
    where it is most used to perform their proposed method to evaluate dataset and
    find out the performance of dataset to detect android malware.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 基于2015年至2020年的比较分析，本文中的所有研究人员提供的最大增强均在召回率上达到了所有评估指标之间的最大增强，以展示和增强他们的模型或方法。Alzaylaee等人[[3](#CR3)]建议使用召回率、一致性、准确性等一种或多种方法来评估设备性能。自2015年至2020年，在此评估中发现了召回率，它最常用于执行他们提出的方法来评估数据集并找出数据集检测Android恶意软件的性能。
- en: 4.3 Analysis of Algorithms
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.3 算法分析
- en: Different researchers have used different types of algorithms at different times
    for detecting Android malware as shown in the below illustration Fig. [4](#Fig4).
    A search of Android malware detection-related papers from 2015 to 2020 found that
    most researchers gave SVM (Support Vector Machine) the highest priority in their
    paper. Secondly, they have given priority to RF (Random Forest) algorithm and
    they have used significantly NB (Naive Bayes), FNN (Feedforward Neural Network),
    DBN (Deep Belief Network), CNN (Convolutional Neural Network), DT (Decision Tree),
    MLP (Multiple- Path Learning), DNN (Deep Neural Network), NNA (Nearest Neighbour
    Algorithm). Researchers have used two methods for Android malware detection, one
    through machine learning and the other through deep learning. A search of Android
    malware detection related papers from 2015 to 2020 found that most researchers
    preferred machine learning algorithms for the purpose to detecting Android malware.![../images/507793_1_En_7_Chapter/507793_1_En_7_Fig4_HTML.png](../images/507793_1_En_7_Chapter/507793_1_En_7_Fig4_HTML.png)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的研究人员在不同时间使用不同类型的算法来检测Android恶意软件，如下图所示图[4](#Fig4)。从2015年至2020年的Android恶意软件检测相关论文搜索中发现，大多数研究人员在论文中将SVM（支持向量机）作为最优先选择。其次，他们优先考虑了RF（随机森林）算法，并且他们显著使用了NB（朴素贝叶斯）、FNN（前馈神经网络）、DBN（深度信念网络）、CNN（卷积神经网络）、DT（决策树）、MLP（多路径学习）、DNN（深度神经网络）、NNA（最近邻算法）。研究人员使用了两种方法来检测Android恶意软件，一种是通过机器学习，另一种是通过深度学习。从2015年至2020年的Android恶意软件检测相关论文搜索中发现，大多数研究人员更倾向于使用机器学习算法来检测Android恶意软件。![../images/507793_1_En_7_Chapter/507793_1_En_7_Fig4_HTML.png](../images/507793_1_En_7_Chapter/507793_1_En_7_Fig4_HTML.png)
- en: Fig. 4
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图4
- en: AM:-Android Malware; SVM:-Support Vector Machines; CNN:-Convolutional Neural
    Network; NB:-Naive Bayes; RF:-Random Forests; DBN:-Deep Belief Network; DNN:-Deep
    Neural Network; GAN:-Generative Adversarial Network; NNA:-Nearest Neighbour Algorithm;
    RBM:-Restricted Boltzmann Machine; MPL:-Multiple- Path Learning; RT:-Real Time;
    FNN:-Feedforward Neural Network; WANN:-Weight Agnostic Neural Networks; RNN:-Recurrent
    Neural Network; J-48:-Class of Decision Tree; BN:-Bayesian Network; IBK:-Class
    of k-nearest Neighbor Algorithm; DT:-Decision Tree; MLP:-Multilayer Perceptron;
    RR:-Round-Robin; INN:-Incremental Nearest Neighbor; SDG:-Stochastic Gradient Descent;
    NLP:-Natural Language Processing; RD:-Real Road Networking; BRF:-Balanced Random
    Forest
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: AM：Android恶意软件；SVM：支持向量机；CNN：卷积神经网络；NB：朴素贝叶斯；RF：随机森林；DBN：深度信念网络；DNN：深度神经网络；GAN：生成对抗网络；NNA：最近邻算法；RBM：限制性玻尔兹曼机；MPL：多路径学习；RT：实时；FNN：前馈神经网络；WANN：权重不可知神经网络；RNN：循环神经网络；J-48：决策树类；BN：贝叶斯网络；IBK：k-最近邻算法类；DT：决策树；MLP：多层感知机；RR：轮询；INN：增量最近邻；SDG：随机梯度下降；NLP：自然语言处理；RD：真实道路网络；BRF：平衡随机森林
- en: From the discussion of the stimulus at last this paper concludes that SVM is
    a widely used machine learning algorithm for Android malware detection.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从最后的刺激讨论中可以得出结论，SVM是用于Android恶意软件检测的广泛使用的机器学习算法。
- en: 4.4 Publisher
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.4 出版商
- en: According to the comparative analysis, it stands that IEEE, Elsevier, Springer,
    ACM, IOPScience, Arxiv, IET are the publishers for all those papers. Figure [5](#Fig5)
    showed that IEEE had published the highest number of papers among all prominent
    publishers. Between 2015 and 2020, 72% of papers were published in the IEEEE.
    Therefore other publishers had published a few papers. Thus, the comparative analysis
    shows that IEEE has published the highest number of papers on android malware
    detection based on deep learning and machine learning for the years 2015 to 2020.![../images/507793_1_En_7_Chapter/507793_1_En_7_Fig5_HTML.png](../images/507793_1_En_7_Chapter/507793_1_En_7_Fig5_HTML.png)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 根据比较分析，IEEE、Elsevier、Springer、ACM、IOPScience、Arxiv、IET是所有这些论文的出版商。图 [5](#Fig5)
    表明IEEE在所有知名出版商中发表的论文数量最多。在2015年至2020年期间，72%的论文都发表在IEEE。因此，其他出版商发表的论文数量较少。因此，比较分析显示，IEEE在2015年至2020年期间基于深度学习和机器学习的Android恶意软件检测领域发表了最多的论文。![../images/507793_1_En_7_Chapter/507793_1_En_7_Fig5_HTML.png](../images/507793_1_En_7_Chapter/507793_1_En_7_Fig5_HTML.png)
- en: Fig. 5
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图5
- en: A comparative analysis of different type of publication
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 不同类型出版物的比较分析
- en: 4.5 Dataset
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.5 数据集
- en: From this comparative analysis there have found many datasets where many researchers
    used different datasets for their purpose to detect intrusion android malware
    and also showed performance of dataset to how given perfect or accurate result
    to detect android malware As illustrated in Fig. [6](#Fig6) have analysed many
    paper since 2015 to 2020\. Among all 150 papers there have seen most of all used
    Drebin dataset to find out the malware and benign. Thus, now the trend goes to
    the Drebin dataset to detect malware or benign. The Drebin dataset has a lot information
    which helps to detect intrusion of android malware.![../images/507793_1_En_7_Chapter/507793_1_En_7_Fig6_HTML.png](../images/507793_1_En_7_Chapter/507793_1_En_7_Fig6_HTML.png)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种比较分析，发现了许多数据集，许多研究人员使用不同的数据集来检测入侵Android恶意软件，并展示了数据集的性能，以便给出完美或准确的结果来检测Android恶意软件。如图
    [6](#Fig6) 所示，自2015年至2020年分析了许多论文。在所有150篇论文中，发现大多数都使用了Drebin数据集来查找恶意软件和良性软件。因此，现在的趋势是使用Drebin数据集来检测恶意软件或良性软件。Drebin数据集有很多信息，有助于检测Android恶意软件的入侵。![../images/507793_1_En_7_Chapter/507793_1_En_7_Fig6_HTML.png](../images/507793_1_En_7_Chapter/507793_1_En_7_Fig6_HTML.png)
- en: Fig. 6
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图6
- en: Classification on different dataset and dataset classes
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 不同数据集和数据集类别上的分类。
- en: Table 1
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 表1
- en: Statistics of most frequently used publishers, algorithms, data sets, classifiers,
    performance metrics and year-wise distribution of selected studies in Android
    malware detection.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Android恶意软件检测中最常用的出版商、算法、数据集、分类器、性能指标和年度选定研究的统计数据。
- en: '![../images/507793_1_En_7_Chapter/507793_1_En_7_Tab1_HTML.png](../images/507793_1_En_7_Chapter/507793_1_En_7_Tab1_HTML.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![../images/507793_1_En_7_Chapter/507793_1_En_7_Tab1_HTML.png](../images/507793_1_En_7_Chapter/507793_1_En_7_Tab1_HTML.png)'
- en: Alazab et al. [[44](#CR44)] the book of Deep Learning Applications for Cyber
    Security in various chapters proposed the Drebin Dataset which contains maximum
    android applications and malwares using various deep learning applications. Apart
    from [[3](#CR3)–[5](#CR5)] used drebin dataset. Drebin is well-known for its scalable
    and explainable detection.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Alazab等人[[44](#CR44)]在深度学习在网络安全中的应用一书的各章节中提出了Drebin数据集，其中包含了大量的安卓应用程序和恶意软件，使用了各种深度学习应用。除了[[3](#CR3)–[5](#CR5)]之外，也使用了Drebin数据集。Drebin因其可扩展性和可解释性的检测而闻名。
- en: Table [1](#Tab1) Interpretation basically has been used by publishers, articles
    published by year, algorithms based on Classifiers, datasets, most used classifiers,
    and performance metrics of envisage studies by the years in 2015 to 2020\. This
    table data has been partially presented previously using several graphs in above.
    In this table, ‘Name’, ‘No’, and ‘%’ refer to the name of the component, the total
    number of the article those have used the component, and their percentage. Remember
    and note that all given information has been collected from **150** research articles
    in **2015–2020**. Firstly, Table [1](#Tab1) interprets the most used publisher
    android malware detection in research. **IEEE** is the top publisher based on
    this study among 150 papers almost 72 papers have found where android malware
    detection papers have been published and Elsevier, Springer respectably. For this
    study the title of this paper Android malware detection has found maximum in **2016**
    where total number of paper 37\. Secondly has found from 2017 and Thirdly 2015
    where have found 27 related papers for that comparative study. This paper based
    on machine learning and deep learning algorithms Table [1](#Tab1) interprets that
    the maximum number of algorithms have used **machine learning** for detected android
    malware where the percentage is 83.7% and second most usages deep learning algorithm
    where percentage is 15.2% respectively. After that, the list of most used data
    sets in android malware detection research has been presented. **Drebin** data
    sets are the most used datasets in android malware detection where considered
    among all the paper 33.0% used drebin dataset to detect android malware and google
    play (18.8%) is the second highest used dataset respectively. Next the most used
    classifiers in android malware detection research. **Suppose vector machine**
    (SVM) is the most used classifier in the field, it has been considered in 18.9%
    articles by the respective authors. Second and third used classifiers are Random
    Forest (12.9%) and Naive Bayes (12.6%) respectively. Finally the most used performance
    metric in the Android malware detection articles. Most three performance metrics
    are **Recall** (17.6%), Precision and F-Measure(16.1%) and Accuracy (15.5%) respectively.
    Moreover, this is the platform which has a huge scope to research android malware
    detection using machine learning and deep learning algorithms.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 表[1](#Tab1)解释主要被出版商使用，按年份发表的文章，基于分类器的算法，数据集，最常用的分类器以及2015年至2020年间各年度的研究预测指标。此表的数据在上面已经使用了几个图表进行部分呈现。在这个表中，“Name”、“No”和“%”分别指组件的名称，使用该组件的文章总数以及其百分比。请注意，所有给定信息均收集自**2015年至2020年**的**150**篇研究文章。首先，表[1](#Tab1)解释了在研究中使用的最常见的出版商安卓恶意软件检测。根据这项研究，**IEEE**是这项研究中最多的出版商，几乎有72篇文章发现了安卓恶意软件检测论文的出版，其次是Elsevier和Springer。对于这项研究，这篇论文的标题Android恶意软件检测在**2016年**发现了最多，其中共有37篇论文。其次是从2017年发现的，第三是2015年，为了进行对比研究而发现了27篇相关论文。这篇论文基于机器学习和深度学习算法，表[1](#Tab1)解释了使用机器学习检测安卓恶意软件的最大数量的算法，其中百分比为83.7%，第二大使用率的是深度学习算法，百分比分别为15.2%。之后，提出了安卓恶意软件检测研究中最常用的数据集列表。Drebin数据集是安卓恶意软件检测中使用最多的数据集，在所有论文中被认为有33.0%的使用了Drebin数据集来检测安卓恶意软件，谷歌商店（18.8%）是第二高使用的数据集。接下来是安卓恶意软件检测研究中最常用的分类器。支持向量机（SVM）是该领域中使用最多的分类器，由各位作者在18.9%的文章中考虑到。第二和第三使用最多的分类器分别是随机森林（12.9%）和朴素贝叶斯（12.6%）。最后是安卓恶意软件检测文章中使用最多的性能指标。最常用的三个性能指标分别是**召回率**（17.6%）、准确率和F-度量（16.1%）以及准确性（15.5%）。此外，这是一个巨大的平台，可以利用机器学习和深度学习算法来研究安卓恶意软件的检测。
- en: 5 Conclusion
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In this paper, a comparative study of the Approaches, Datasets, Evaluation Parameters
    and the Trends of Android Malware has been conducted and also study on deep learning
    and machine learning approaches for intrusion detection. Specifically, this research
    work analyzed Seven deep learning approaches apart from this paper also analyzed
    Seven machine learning approaches. This paper has studied keeping a dataset including
    Drebin, virus total, virus share [www.​virusshare.​com](http://www.virusshare.com),
    Genome, Contagio and so on.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 本文对安卓恶意软件的方法、数据集、评估参数和趋势进行了比较研究，并对深度学习和机器学习方法进行了入侵检测研究。具体来说，这项研究工作分析了七种深度学习方法，除此之外，本文还分析了七种机器学习方法。本文研究了包括Drebin、病毒总量、病毒共享[www.​virusshare.​com](http://www.virusshare.com)、基因组、Contagio等在内的数据集。
- en: From this study and analysis Machine learning is the most uses technique to
    detect android malware on the other site Drebin is the most used dataset help
    for intrusion detection of android malware, for this reason, it can be said that
    the Drebin database and machine learning is the trend for now. As a result, most
    of the researcher’s nowadays used the Drebin dataset and machine learning method
    to collect malware samples with some important performance indicators, namely,
    recall, accuracy, precision, false alarm rate, detection rate and so on. Finally,
    it was found that maximum android malware detection related paper was published
    in IEEE publication.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 从这项研究和分析中可以得知，机器学习是检测安卓恶意软件最常用的技术，而Drebin是最常用的数据集，用于帮助检测安卓恶意软件入侵，因此可以说，Drebin数据库和机器学习是当前的趋势。因此，现今大多数研究者使用Drebin数据集和机器学习方法来收集恶意软件样本，并考虑一些重要的性能指标，例如召回率、准确率、精确率、误报率、检测率等等。最后，发现绝大多数关于安卓恶意软件检测的论文都发表在IEEE出版物上。
- en: For this purpose, researchers need to look at the creation of an improved mechanism
    in the field of machine learning by exploring more in-depth learning techniques
    in the detection of Android malware and training the algorithm with large Drebin
    datasets to fully exploit the model.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一目的，研究人员需要在机器学习领域寻找改进机制，通过深入学习技术更全面地探索检测安卓恶意软件的方法，并使用大量的Drebin数据集训练算法以充分利用模型。
