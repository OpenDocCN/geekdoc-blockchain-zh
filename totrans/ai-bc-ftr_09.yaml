- en: © The Author(s), under exclusive license to Springer Nature Switzerland AG 2021Y.
    Maleh et al. (eds.)Artificial Intelligence and Blockchain for Future Cybersecurity
    ApplicationsStudies in Big Data90[https://doi.org/10.1007/978-3-030-74575-2_7](https://doi.org/10.1007/978-3-030-74575-2_7)
  prefs: []
  type: TYPE_NORMAL
- en: 'Revisiting the Approaches, Datasets and Evaluation Parameters to Detect Android
    Malware: A Comparative Study from State-of-Art'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Abu Bakkar Siddikk^([1](#Aff7), [3](#Aff9) [ ](#ContactOfAuthor1)), Md. Fahim Muntasir^([1](#Aff7),
    [3](#Aff9) [ ](#ContactOfAuthor2)), Rifat Jahan Lia^([1](#Aff7), [3](#Aff9) [ ](#ContactOfAuthor3)),
    Sheikh Shah Mohammad Motiur Rahman^([1](#Aff7), [3](#Aff9) [ ](#ContactOfAuthor4)),
    Takia Islam^([1](#Aff7), [3](#Aff9) [ ](#ContactOfAuthor5)) and Mamoun Alazab^([2](#Aff8) [ ](#ContactOfAuthor6))(1)Department
    of Software Engineering, Daffodil International University, Dhaka, Bangladesh(2)College
    of Engineering, IT and Environment, Charles Darwin University, Darwin, Australia(3)nFuture
    Research Lab, Dhaka, BangladeshAbu Bakkar Siddikk (Corresponding author)Email:
    [abu35-1994@diu.edu.bd](mailto:abu35-1994@diu.edu.bd)Md. Fahim MuntasirEmail:
    [fahim35-1900@diu.edu.bd](mailto:fahim35-1900@diu.edu.bd)Rifat Jahan LiaEmail:
    [rifat35-1845@diu.edu.bd](mailto:rifat35-1845@diu.edu.bd)Sheikh Shah Mohammad Motiur Rahman (Corresponding
    author)Email: [motiur.swe@diu.edu.bd](mailto:motiur.swe@diu.edu.bd)Takia IslamEmail:
    [takia35-1014@diu.edu.bd](mailto:takia35-1014@diu.edu.bd)Mamoun AlazabEmail: [alazab.m@ieee.org](mailto:alazab.m@ieee.org)'
  prefs: []
  type: TYPE_NORMAL
- en: Abstract
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Alongside the recognition of the android operating system (OS), android malware
    is on the increase. Cybercriminals are using different techniques to develop malware
    for android devices. In addition, malware authors are trying to make malicious
    android applications that severely undermine the potential of traditional malware
    detectors. The key purpose of the chapter is to analyze and have a different appearance
    at various techniques of Android malware detection in a variety of research articles.
    However, this chapter presents an analysis of varied android malware detection
    approaches and comparing them to supported various parameters like detection technique,
    analysis method, features extracted and so on. The experiments are based on substantial
    malware datasets, evaluation parameters and this study employ a wide variety of
    machine learning techniques, including decision trees and random forests, support
    vector machines, logistic model trees, and artificial neural networks, also Deep
    learning techniques. It is a comparative analysis that should be useful in this
    field for researchers. The analysis shows, based on simple criteria, the similarities
    and differences in essential published research in addition to the accuracy. Thus,
    this chapter aims to study various android malware detection techniques and to
    identify plausible research directions. The findings showed that machine learning,
    with greater detection accuracy, is a more promising method. In order to achieve
    improved accuracy, future researchers can pursue a deep learning approach with
    the use of a large dataset.
  prefs: []
  type: TYPE_NORMAL
- en: KeywordsAndroid malwareDeep learningMachine learningMalware detectionState-of-art
  prefs: []
  type: TYPE_NORMAL
- en: 1 Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The term malware is a contraction of malicious software. Malware is any piece
    of software that was written with the intent of damaging devices, stealing data,
    and generally causing a mess. The Android operating system tells the user what
    systems and data an app will access, but the OS won’t block any app activity after
    installation. Therefore, every Android device should have an Android malware protection
    program. The risks that an app brings to a device depend on its origins. According
    to Android Malware Detection Model Based on LightGBM from Wang et al. [[7](#CR7)],
    there are proposed a model this is LightGBM for Machine Learning and they are
    run this model on a laptop and found 2000 benign samples are downloaded from Baidu
    app store and Google app store again 2000 malware samples are downloaded from
    VirusShare ([www.​virusshare.​com](http://www.virusshare.com)). They found the
    accuracy of LightGBM is 96.4%. Therefore, LightGBM can reduce the time of execution.
    Danish et al. [[1](#CR1)] proposed the IMCFN method. It is mainly divided into
    two parts: malware image generation and CNN fine-tuning via backpropagation technique.
    For evaluations, they used two Datasets to find out the android malware which
    is the Malimg malware dataset (9,435 samples), and IoTandroid mobile dataset (14,733
    malware and 2,486 benign samples) they mainly focused on deep learning.'
  prefs: []
  type: TYPE_NORMAL
- en: Malware detection approaches can be either static or dynamic [[33](#CR33), [37](#CR37),
    [41](#CR41)] Static malware detection relies on features extracted from executable
    artifacts such as opcodes, bytecodes, byte level, or strings, while dynamic techniques
    [[12](#CR12), [24](#CR24)] are based on behavioral features from system calls
    and sandbox. For Example, Baoguo et al. [[8](#CR8)] use two datasets one in Microsoft
    and another Drebin dataset. In the Drebin dataset, the top 10 malware families
    are selected and a total of 4020 android malware samples are used for experiments
    based on static and dynamic features. Moreover, many researchers are struggling
    to detect android malware using many tools and techniques for their purpose as
    follows.
  prefs: []
  type: TYPE_NORMAL
- en: There are several methods proposed by the researcher to detect android malware
    as follows:- VizMal [[9](#CR9)] operates on an execution trace of an Android application
    and visualizes it as a sequence of colored boxes, one box for every second of
    the duration of the execution. Concededly, it is often wont to debug a malware
    detection method by performing a fine-grained analysis of misclassified applications.
  prefs: []
  type: TYPE_NORMAL
- en: MaMaDroid [[36](#CR36)] builds a model of the sequence of API calls as Markov
    chains, which are successively wont to extract features for machine learning algorithms
    to classify apps as benign or malicious. Markov Chains are memoryless models where
    the probability of transitioning from a state to a different one only depends
    on the present state. This is often represented as a group of nodes, each like
    a special state, and a group of edges connecting one node to a different label
    with the probability of that transition.
  prefs: []
  type: TYPE_NORMAL
- en: DroidSieve [[34](#CR34)] relies on several features known to be characteristic
    of Android malware, including API calls. It performs a completely unique deep
    inspection of the app to spot discriminating features missed by existing techniques,
    including native components, obfuscation artifacts, and features that are invariant
    under obfuscation. Evaluate its robustness on a group of over 100K benign and
    malicious Android apps. For detection, they achieve up to 99.82 curacies with
    zero false positives. Equivalent features allow family identification with an
    accuracy of 99.26%. They evaluate its robustness on a set of over 100K benign
    and malicious Android apps. For detection, they achieve up to 99.82% accuracy
    with zero false positives. The same features allow family identification with
    an accuracy of 99.26%.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main goal of this chapter can be described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The most widely used malware detection techniques (machine learning & deep learning)
    has been analyzed from different top ranking publisher.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify the most used dataset to detect Android malware with an integrated
    solution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To figure out the most optimized algorithm that is effective for detecting android
    malware.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting the optimized parameter that is sufficient for generating the malware
    detection outcome.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The top ranking publisher (IEEE, Springer etc.) that published the most android-related
    malware paper has been analyzed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The rest of the chapter is organized as follows: In this chapter, it has tried
    to show a statistical analysis of Android malware detection from 2015 to 2020
    best-published paper among all best publishers (IEEE, Springer, Elsevier, etc.).
    In Sect. [2](#Sec2), have briefly reviewed the Statistical, Dynamical analysis
    on malware Android detection. In Sect. [3](#Sec5), try to explain the process
    of this work using the proposed methodology. In Sect. [4](#Sec12), show a report
    on the results of an analysis based on this study for understanding the Android
    malware from the Analysis and so on. Finally, this paper ends with Sect. [5](#Sec18)
    presenting the final result.'
  prefs: []
  type: TYPE_NORMAL
- en: 2 The Most Popular Methods for Detecting Android Malware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For obtaining features there are some methods named static analysis, dynamic
    analysis and hybrid analysis in android malware detection.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Static Analysis Approach
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The static analysis relies on all the features which are collected without the
    execution of the code. Several studies including [[45](#CR45)–[50](#CR50)] have
    performed static analysis among the 150 papers have been used in this study all
    of which have been gathered at the reputed publisher sites like IEEE, Springer
    etc. Mahindru et al. [[10](#CR10)]executed an approximate pattern for inspecting
    any program’s attributes for making a balance between correct examining accuracy
    and methodical number crunching. Alazab et al. [[10](#CR10)] had discussed the
    static analysis of the papers from 2011 to 2016\. It showed the detection accuracy
    rate on different algorithms and also the application classification rate. Taheri
    et al. [[11](#CR11)] showed and analyzed different techniques using static approaches,
    such as Drebin, StormDroid, and DroidSIFT, ANASTASIA, AndroSimilar, SDHash which
    are applied on Android apps. Lopes et al. [[16](#CR16)] mentioned some static
    malware detection methods such as Android Asset Packaging Tool (AAPT). It retrieves
    files from APK. It also mentioned a malware detection framework that used permissions
    and API calls as features. Yen et al. [[17](#CR17)] said about some basic knowledge
    of static analysis and also some approaches and techniques of it. Zero-day attacks
    and logic make the static method harder to do its job. Nowadays, most static malware
    detection techniques are based on content signatures. Call graphs, system calls,
    dendroid are some of the techniques. A. Saracino et al. [[18](#CR18)] mentioned
    a tool named Alterdroid that compares the differences in behavior between an original
    app. MADAM is the first system that aims at detecting and stopping at run-time
    any kind of malware, without focusing on a specific security threat, using a behavior-based
    and multi-level approach. Not only the accuracy of the runtime detection of MADAM
    is very high, but it also achieves low performance (1.4%) and energy overhead
    (4%). An API level of Android application security authentication mechanism (ASCAA),
    Drebin and a model based on API calls and the use of permissions available in
    various Android applications for capturing features related to malware behavior
    are mentioned in Zhao et al. [[20](#CR20)]. Wang et al. [[39](#CR39)] said about
    the two main techniques of static analysis named Data flow tracking and Decompiling
    and also discussed some static analysis tools such as Smali and Apktool.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Dynamic Analysis Approach
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At runtime, dynamic analysis will recognize application behavior and it is often
    performed in a sandbox environment.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic analysis is often progressively instructive since it just dissects code
    that basically executes. Dynamic analysis-based malware detection methods acquire
    high performance. As well but longer and resource-consuming than their static
    embodiment. However, dynamic analysis methods are simpler on the detection of
    the latest malware even as sorts of existing malware. Lopes et al. [[16](#CR16)]
    expressed con to static analysis, the dynamic analysis consists of the execution
    of a given application during a sandboxed environment, so on monitor its conduct.
    It’s being detected to unknown malware and also developed an android malware detection
    that uses the frequency of invoked system calls at runtime as features using dataset
    compromised malicious samples and benign samples in an emulator employing a tool
    named Monkey. Yene et al. [[17](#CR17)] said this sort of method picks out android
    malware executant the whole apk file, it requires some content to possess associated
    with the appliance, and await the trigger moment. Zhao et al. [[20](#CR20)] mentions
    that behavior-based detection technology is its superb achievement in dealing
    with code obfuscation encryption. The feature databases are small and don’t require
    frequent updates. Consequently it’s more wont to detect unknown applications almost
    like known behavior patterns.
  prefs: []
  type: TYPE_NORMAL
- en: The method of anomaly behavior and the use of device calls log is commonly used
    in the approach to dynamic analysis. The identification of patterns in a specific
    dataset that do not adhere to a deep-rooted lawful activity is based on anomaly
    behavior. Although this technique is capable of detecting unknown applications
    effectively, the false positive rate is high. System Call Log is a process where
    a software request is serviced from the kernel of the basic operating system.
    At the kernel level, malicious detection is conducted at high detection precision
    with few false positive rates.
  prefs: []
  type: TYPE_NORMAL
- en: 3 Methodology
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A methodology for completing the integrate technology has been used in this
    article. Initialization, preprocessing, Final Selected Manuscript, Extracting
    Details, Comparative Analysis, and Findings are six stages. Both of these are
    carried out step by step. This paper completed all operations smoothly and within
    a short time by following these measures. It also allows this analysis to gather
    and extract from the papers all the important material. This research work is
    also able to collect the data in a simple way through this technique and that
    will be secure.
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 Initialization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The keywords that are used to search for the necessary information were defined
    at the very first. The keywords identified for this study are Android malware
    detection, deep learning, and machine learning. Then the search process began
    on the basis of the keywords. This paper gathers 250 papers very quickly based
    on the keywords that are listed.
  prefs: []
  type: TYPE_NORMAL
- en: 3.2 Preprocessing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Irrelevant papers have been excluded from the 250 papers in preprocessing and
    the list is reduced by 210 as several papers have been replicated and out of the
    keywords and goals. Then, the recent publications were classified and the names
    were listed. Springer, IEEE, ACM, Elsevier, etc. are some of the famous publications
    that have been established in preprocessing. Finally, only the papers from 2015
    to 2020 focused on the identification of android malware with deep learning or
    machine learning are chosen and the paper numbers have again been reduced to 150.
  prefs: []
  type: TYPE_NORMAL
- en: 3.3 Final Selected Manuscript
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Consequently, android malware detection with deep learning and machine learning
    is focused on keywords after searching articles. Then the number of papers was
    reduced after recognizing common publications and deleting obsolete papers and
    even taking only papers from 2015 to 2020\. Therefore, the number of final manuscripts
    chosen is 150, which covers papers from 2015 to 2020.
  prefs: []
  type: TYPE_NORMAL
- en: Here goes the diagram of the methodology (Fig. [1](#Fig1))-![../images/507793_1_En_7_Chapter/507793_1_En_7_Fig1_HTML.png](../images/507793_1_En_7_Chapter/507793_1_En_7_Fig1_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 1
  prefs: []
  type: TYPE_NORMAL
- en: Diagram of the methodology
  prefs: []
  type: TYPE_NORMAL
- en: 3.4 Extract Information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this step, all the essential data are collected from all 150 papers. The
    collected essential data are publisher’s name, type of the paper, publication’s
    year, evaluation parameters, used datasets, used algorithms and main contribution.
    Thus, the publishers’ names for the 150 papers are mostly IEEE, Springer, ACM,
    and Elsevier. Three types of papers are found among all the papers named journals,
    conferences and book chapters. The papers from 2015 to 2020 have already been
    collected safely and arranged according to the year. According to the collected
    data, it proves that different papers have used different evaluation parameters.Some
    of the evaluation parameters are recall, accuracy, precision, f-measure, TPR,
    FPR, ROC etc. Some of the datasets are VirusTotal, Drebin, AMD, ImageNet, AndroZoo,
    etc. Those papers which used Deep learning algorithms and Machine learning algorithms
    are collected for this paper. Some deep learning algorithms that are used in the
    collected papers are Convolutional Neural Network (CNN), Deep Belief Network (DBN),
    Restricted Boltzmann Machine (RBM), Long short-term memory (LSTM), Deep Neural
    Nets (DNN), Recurrent Neural Network (RNN), Multimodal Neural Network (MNN), etc.
    And some machine learning algorithms are used called Support Vector Machine (SVM),
    K-nearest neighbors (K-NN), K-means, Random Forest(RF), Naïve Bayes (NB), Partial
    Decision Trees (PART), Neural Network Algorithm (NNA), Multilayer Perceptron (MLP),
    Decision Tree (DT), etc. This paper also extracted every paper’s additional techniques
    like Data Flow Graph, Control Flow Graph, N-grams, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 3.5 Comparative Analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Comparative analysis was conducted between them after collecting data from all
    the documents. For example, all the names of the algorithms and their kind have
    been specified (deep learning and machine learning). After analyzing the list,
    the outcome states that Support Vector Machine (SVM) is the most used algorithm
    in android malware detection and Machine Learning is the most used algorithm sort.
    Thus, it is obvious from the comparative study that Machine Learning is more used
    for the detection of Android malware than Deep Learning. For this research work,
    the assessment parameters of all papers have also been identified. And it means
    that the most used measurement parameter is accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: 3.6 Findings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This analysis would verify the results of the previous steps after completing
    all the previous steps. For this article, the names of publishers and types of
    papers were collected from 150 papers from 2015 to 2020\. From the previous steps,
    the algorithms and their forms and the ones that are most used have also been
    found. The dataset and evaluation parameters, along with the most used dataset
    and the most used evaluation matrix, are also in the list of results.
  prefs: []
  type: TYPE_NORMAL
- en: 4 Result and Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, this proper study was tried to provide comparative analysis
    based on a comparative study, and the results were finally given in this report.
    The aim of the study, this article is presented by analyzing various important
    terms that are currently relevant to the recognition or detection of android malware
    comprising more than 150 papers. Such pieces of information about our keywords
    consider’s articles available **https://doi.org/10.6084/m9.figshare.12520007.v2**.
    In this research paper, it showed that most researchers have used a Machine Learning
    Approach (ML) of the comparison study not only to detect Android Malware, but
    also to classify several forms of android dataset [[10](#CR10), [42](#CR42), [43](#CR43)]
    to find out android malware.
  prefs: []
  type: TYPE_NORMAL
- en: 4.1 The Most Applicable Technique
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: According to the comparative study, A great number of machine learning-based
    Android malware detection techniques have been proposed in the past few years
    and till now it has been proposed. Many researchers including [[2](#CR2), [6](#CR6),
    [13](#CR13)–[15](#CR15), [19](#CR19), [21](#CR21)–[23](#CR23), [25](#CR25)–[32](#CR32),
    [35](#CR35), [38](#CR38), [40](#CR40)] used machine learning approaches within
    2015-2020 which are covered during the study. Thus, this study found that machine
    learning techniques in android malware detection have significant contribution
    and which is increasing day by day.![../images/507793_1_En_7_Chapter/507793_1_En_7_Fig2_HTML.png](../images/507793_1_En_7_Chapter/507793_1_En_7_Fig2_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2
  prefs: []
  type: TYPE_NORMAL
- en: ML:-Machine Learning approaches; DL:-Deep Learning approaches
  prefs: []
  type: TYPE_NORMAL
- en: Machine-learning technique has several false positives applied to real-world
    data. Most researchers therefore investigated the use of malware machine learning
    methods [[33](#CR33)]. Figure [2](#Fig2) shows that many researchers have used
    machine learning (ML) techniques over many years to identify Android Malware and
    researchers expect this to continue in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 4.2 The Most Uses Evaluation Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As shown in Fig. [3](#Fig3) and Fig. [6](#Fig6), most researchers obtained results
    from the assessment parameters by defining the recall percentage in the assessment
    matrix. Overall, the model, algorithm and many methods perform very well as a
    consequence of the performance of the evaluation.![../images/507793_1_En_7_Chapter/507793_1_En_7_Fig3_HTML.png](../images/507793_1_En_7_Chapter/507793_1_En_7_Fig3_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 3
  prefs: []
  type: TYPE_NORMAL
- en: TPR:-True Positive Rate; TNR:-True Negative Rate; FPR:-False Positive Rate;
    FNR:-False Negative Rate; AUC:-Area Under the Curve; ROC:-Receiver operating characteristic
  prefs: []
  type: TYPE_NORMAL
- en: Based on a comparative analysis from 2015 to 2020, all researchers in the paper
    provided maximum enhancement among all evaluation matrices reached by the Recall
    to demonstrate and enhance their model or approaches. Alzaylaee et al. [[3](#CR3)]
    suggested one and more methods based on recall, consistency, accuracy, etc. to
    assess device performance. Since 2015–2020 from this evaluation have found Recall
    where it is most used to perform their proposed method to evaluate dataset and
    find out the performance of dataset to detect android malware.
  prefs: []
  type: TYPE_NORMAL
- en: 4.3 Analysis of Algorithms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Different researchers have used different types of algorithms at different times
    for detecting Android malware as shown in the below illustration Fig. [4](#Fig4).
    A search of Android malware detection-related papers from 2015 to 2020 found that
    most researchers gave SVM (Support Vector Machine) the highest priority in their
    paper. Secondly, they have given priority to RF (Random Forest) algorithm and
    they have used significantly NB (Naive Bayes), FNN (Feedforward Neural Network),
    DBN (Deep Belief Network), CNN (Convolutional Neural Network), DT (Decision Tree),
    MLP (Multiple- Path Learning), DNN (Deep Neural Network), NNA (Nearest Neighbour
    Algorithm). Researchers have used two methods for Android malware detection, one
    through machine learning and the other through deep learning. A search of Android
    malware detection related papers from 2015 to 2020 found that most researchers
    preferred machine learning algorithms for the purpose to detecting Android malware.![../images/507793_1_En_7_Chapter/507793_1_En_7_Fig4_HTML.png](../images/507793_1_En_7_Chapter/507793_1_En_7_Fig4_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 4
  prefs: []
  type: TYPE_NORMAL
- en: AM:-Android Malware; SVM:-Support Vector Machines; CNN:-Convolutional Neural
    Network; NB:-Naive Bayes; RF:-Random Forests; DBN:-Deep Belief Network; DNN:-Deep
    Neural Network; GAN:-Generative Adversarial Network; NNA:-Nearest Neighbour Algorithm;
    RBM:-Restricted Boltzmann Machine; MPL:-Multiple- Path Learning; RT:-Real Time;
    FNN:-Feedforward Neural Network; WANN:-Weight Agnostic Neural Networks; RNN:-Recurrent
    Neural Network; J-48:-Class of Decision Tree; BN:-Bayesian Network; IBK:-Class
    of k-nearest Neighbor Algorithm; DT:-Decision Tree; MLP:-Multilayer Perceptron;
    RR:-Round-Robin; INN:-Incremental Nearest Neighbor; SDG:-Stochastic Gradient Descent;
    NLP:-Natural Language Processing; RD:-Real Road Networking; BRF:-Balanced Random
    Forest
  prefs: []
  type: TYPE_NORMAL
- en: From the discussion of the stimulus at last this paper concludes that SVM is
    a widely used machine learning algorithm for Android malware detection.
  prefs: []
  type: TYPE_NORMAL
- en: 4.4 Publisher
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: According to the comparative analysis, it stands that IEEE, Elsevier, Springer,
    ACM, IOPScience, Arxiv, IET are the publishers for all those papers. Figure [5](#Fig5)
    showed that IEEE had published the highest number of papers among all prominent
    publishers. Between 2015 and 2020, 72% of papers were published in the IEEEE.
    Therefore other publishers had published a few papers. Thus, the comparative analysis
    shows that IEEE has published the highest number of papers on android malware
    detection based on deep learning and machine learning for the years 2015 to 2020.![../images/507793_1_En_7_Chapter/507793_1_En_7_Fig5_HTML.png](../images/507793_1_En_7_Chapter/507793_1_En_7_Fig5_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 5
  prefs: []
  type: TYPE_NORMAL
- en: A comparative analysis of different type of publication
  prefs: []
  type: TYPE_NORMAL
- en: 4.5 Dataset
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From this comparative analysis there have found many datasets where many researchers
    used different datasets for their purpose to detect intrusion android malware
    and also showed performance of dataset to how given perfect or accurate result
    to detect android malware As illustrated in Fig. [6](#Fig6) have analysed many
    paper since 2015 to 2020\. Among all 150 papers there have seen most of all used
    Drebin dataset to find out the malware and benign. Thus, now the trend goes to
    the Drebin dataset to detect malware or benign. The Drebin dataset has a lot information
    which helps to detect intrusion of android malware.![../images/507793_1_En_7_Chapter/507793_1_En_7_Fig6_HTML.png](../images/507793_1_En_7_Chapter/507793_1_En_7_Fig6_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 6
  prefs: []
  type: TYPE_NORMAL
- en: Classification on different dataset and dataset classes
  prefs: []
  type: TYPE_NORMAL
- en: Table 1
  prefs: []
  type: TYPE_NORMAL
- en: Statistics of most frequently used publishers, algorithms, data sets, classifiers,
    performance metrics and year-wise distribution of selected studies in Android
    malware detection.
  prefs: []
  type: TYPE_NORMAL
- en: '![../images/507793_1_En_7_Chapter/507793_1_En_7_Tab1_HTML.png](../images/507793_1_En_7_Chapter/507793_1_En_7_Tab1_HTML.png)'
  prefs: []
  type: TYPE_IMG
- en: Alazab et al. [[44](#CR44)] the book of Deep Learning Applications for Cyber
    Security in various chapters proposed the Drebin Dataset which contains maximum
    android applications and malwares using various deep learning applications. Apart
    from [[3](#CR3)–[5](#CR5)] used drebin dataset. Drebin is well-known for its scalable
    and explainable detection.
  prefs: []
  type: TYPE_NORMAL
- en: Table [1](#Tab1) Interpretation basically has been used by publishers, articles
    published by year, algorithms based on Classifiers, datasets, most used classifiers,
    and performance metrics of envisage studies by the years in 2015 to 2020\. This
    table data has been partially presented previously using several graphs in above.
    In this table, ‘Name’, ‘No’, and ‘%’ refer to the name of the component, the total
    number of the article those have used the component, and their percentage. Remember
    and note that all given information has been collected from **150** research articles
    in **2015–2020**. Firstly, Table [1](#Tab1) interprets the most used publisher
    android malware detection in research. **IEEE** is the top publisher based on
    this study among 150 papers almost 72 papers have found where android malware
    detection papers have been published and Elsevier, Springer respectably. For this
    study the title of this paper Android malware detection has found maximum in **2016**
    where total number of paper 37\. Secondly has found from 2017 and Thirdly 2015
    where have found 27 related papers for that comparative study. This paper based
    on machine learning and deep learning algorithms Table [1](#Tab1) interprets that
    the maximum number of algorithms have used **machine learning** for detected android
    malware where the percentage is 83.7% and second most usages deep learning algorithm
    where percentage is 15.2% respectively. After that, the list of most used data
    sets in android malware detection research has been presented. **Drebin** data
    sets are the most used datasets in android malware detection where considered
    among all the paper 33.0% used drebin dataset to detect android malware and google
    play (18.8%) is the second highest used dataset respectively. Next the most used
    classifiers in android malware detection research. **Suppose vector machine**
    (SVM) is the most used classifier in the field, it has been considered in 18.9%
    articles by the respective authors. Second and third used classifiers are Random
    Forest (12.9%) and Naive Bayes (12.6%) respectively. Finally the most used performance
    metric in the Android malware detection articles. Most three performance metrics
    are **Recall** (17.6%), Precision and F-Measure(16.1%) and Accuracy (15.5%) respectively.
    Moreover, this is the platform which has a huge scope to research android malware
    detection using machine learning and deep learning algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: 5 Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this paper, a comparative study of the Approaches, Datasets, Evaluation Parameters
    and the Trends of Android Malware has been conducted and also study on deep learning
    and machine learning approaches for intrusion detection. Specifically, this research
    work analyzed Seven deep learning approaches apart from this paper also analyzed
    Seven machine learning approaches. This paper has studied keeping a dataset including
    Drebin, virus total, virus share [www.​virusshare.​com](http://www.virusshare.com),
    Genome, Contagio and so on.
  prefs: []
  type: TYPE_NORMAL
- en: From this study and analysis Machine learning is the most uses technique to
    detect android malware on the other site Drebin is the most used dataset help
    for intrusion detection of android malware, for this reason, it can be said that
    the Drebin database and machine learning is the trend for now. As a result, most
    of the researcher’s nowadays used the Drebin dataset and machine learning method
    to collect malware samples with some important performance indicators, namely,
    recall, accuracy, precision, false alarm rate, detection rate and so on. Finally,
    it was found that maximum android malware detection related paper was published
    in IEEE publication.
  prefs: []
  type: TYPE_NORMAL
- en: For this purpose, researchers need to look at the creation of an improved mechanism
    in the field of machine learning by exploring more in-depth learning techniques
    in the detection of Android malware and training the algorithm with large Drebin
    datasets to fully exploit the model.
  prefs: []
  type: TYPE_NORMAL
