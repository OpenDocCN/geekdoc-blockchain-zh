- en: © Elad Elrom 2019Elad ElromThe Blockchain Developer[https://doi.org/10.1007/978-1-4842-4847-8_6](https://doi.org/10.1007/978-1-4842-4847-8_6)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © Elad Elrom 2019 Elad Elrom 区块链开发者 [https://doi.org/10.1007/978-1-4842-4847-8_6](https://doi.org/10.1007/978-1-4842-4847-8_6)
- en: 6. EOS.IO Wallets and Smart Contracts
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6. EOS.IO 钱包和智能合约
- en: Elad Elrom^([1](#Aff2) )(1)New York, NY, USA
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Elad Elrom^([1](#Aff2) )（1）纽约，纽约，美国
- en: In Chapter [2](475651_1_En_2_Chapter.xhtml), I introduced EOS.IO when I covered
    bitcoin, altcoins, and different consensus mechanisms. Specifically, I covered
    how EOS.IO is an example of altcoins that turn into tokens; you created an EOS
    block producer and were able to create a full node capable of mining EOS tokens.
    Ethereum was the beginning of your blockchain smart contract development, and
    you learned to use the Solidity language to write smart contracts and dapps. EOS.IO
    has created a more robust architecture than Ethereum for smart contract and dapp
    development.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在第[2](475651_1_En_2_Chapter.xhtml)章中，当我介绍比特币、山寨币和不同的共识机制时，我介绍了EOS.IO。具体来说，我讲述了EOS.IO是如何成为山寨币转为代币的例子；你创建了一个EOS区块生产者，并能够创建一个能够挖掘EOS代币的全节点。以太坊是你的区块链智能合约开发的开始，你学会了使用Solidity语言编写智能合约和dapp。EOS.IO为智能合约和dapp开发创造了比以太坊更健壮的架构。
- en: In this chapter, I will expand on the EOS.IO blockchain and show how to build
    a EOS.IO smart contract that can be used in decentralized applications (dapps).
    You will set up a local testnet environment and learn how to configure the EOS.IO
    tools and libraries. You will learn about EOS.IO wallets and how to create, delete,
    and back up wallets as well as perform operations such as opening, locking, and
    unlocking a wallet. I will cover the wallet’s key pairs and how to spin up and
    re-spin up a local testnet block producer. You will learn about permissions and
    single-signature and multisignature options.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将扩展EOS.IO区块链的介绍，并展示如何构建一个可用于去中心化应用（dapps）的EOS.IO智能合约。你将设置一个本地测试网环境，并学习如何配置EOS.IO工具和库。你将了解EOS.IO钱包以及如何创建、删除和备份钱包，以及执行诸如打开、锁定和解锁钱包等操作。我将涵盖钱包的关键对以及如何启动和重新启动本地测试网区块生产者。你将了解权限和单签名、多签名选项。
- en: To better understand EOS.IO smart contracts, you will create a “HelloWorld”
    smart contract and smart contract token. You will create accounts, write smart
    contract C++ code, compile code, and generate WebAssembly and ABI files as well
    as Ricardian contracts. You then will learn how to deploy your smart contracts
    and interact with them, as well as issue tokens and transfer tokens to another
    user.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解EOS.IO智能合约，你将创建一个“HelloWorld”智能合约和代币。你将创建账户，编写智能合约C++代码，编译代码，以及生成WebAssembly和ABI文件以及Ricardian合同。你还将学习如何部署你的智能合约并与之交互，以及发行代币和将代币转让给另一用户。
- en: Lastly, you will connect to a public testnet block producer for testing in a
    more realistic environment as well as connecting and publishing on a mainnet block
    producer.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你将连接到一个公共测试网区块生产者，以便在更真实的环境中进行测试，以及连接和发布在主网区块生产者上。
- en: Note
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: EOS is the native cryptocurrency (token) that powers the EOS.IO software. EOS.IO
    is an industrial-scale, fully customized blockchain architecture protocol that
    enables decentralized applications by providing access to the parts that make
    up the blockchain. Think of EOS.IO as a blockchain OS as it emulates a real computer
    and enables access to resources such as the CPU, GPU, RAM, and hard disk. EOS.IS
    does not charge transaction fees while performing millions of transactions per
    second. An EOS token is a utility token, and owning the token (staking) provides
    bandwidth and storage on the EOS.IO blockchain. You receive resources in proportion
    to the total stake you own to the total stake (owning 1 percent of EOS tokens
    gives usage up to 1 percent of total EOS.IO bandwidth).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: EOS是推动EOS.IO软件的原生加密货币（代币）。EOS.IO是一种工业级、完全定制的区块链架构协议，通过提供访问构成区块链的部分来使去中心化应用成为可能。把EOS.IO看作一个区块链操作系统，因为它模仿了一台真实的计算机，并提供了访问CPU、GPU、RAM和硬盘等资源的能力。EOS.IO在执行每秒数百万笔交易时不会收取交易费。EOS代币是一种实用代币，拥有代币（质押）提供了EOS.IO区块链上的带宽和存储。你按拥有的总质押比例获得资源（拥有EOS代币的1%可使用EOS.IO总带宽的1%）。
- en: '*“* *EOS.IO* *software introduces a new blockchain architecture designed to
    enable vertical and horizontal scaling of decentralized applications. This is
    achieved by creating an operating system-like construct upon which applications
    can be built. The software provides accounts, authentication, databases, asynchronous
    communication, and the scheduling of applications across many of CPU cores or
    clusters. The resulting technology is a blockchain architecture that may ultimately
    scale to millions of transactions per second, eliminates user fees, and allows
    for quick and easy deployment and maintenance of decentralized applications, in
    the context of a governed blockchain.”*'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“* *EOS.IO* *软件引入了一种新的区块链架构，旨在实现去中心化应用的垂直和水平扩展。这是通过在应用程序可以构建的类似于操作系统的结构上创建实现的。该软件提供账户、身份验证、数据库、异步通信以及跨许多CPU核心或集群的应用程序调度。
    resulting technology is a blockchain architecture that may ultimately scale to
    millions of transactions per second, eliminates user fees, and allows for quick
    and easy deployment and maintenance of decentralized applications, in the context
    of a governed blockchain.”*'
- en: ''
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —EOS.IO block.one white paper
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —EOS.IO block.one 白皮书
- en: As mentioned in Chapter [2](475651_1_En_2_Chapter.xhtml), EOS.IO is built on
    the delegated proof of stake (DPoS) consensus. EOS.IO is able to handle low latency
    and tens of millions of active users daily (bypassing Ethereum). This is achieved
    by the DPoS consensus as well as EOS.IO running as multithreaded (running on multiple
    computer cores) and acting as an OS.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如第[2](475651_1_En_2_Chapter.xhtml)章所述，EOS.IO基于委托权益证明（DPoS）共识机制构建。EOS.IO能够处理低延迟，并支持每天数百万活跃用户（绕过以太坊）。这得益于DPoS共识以及EOS.IO作为多线程（在多个计算机核心上运行）的操作系统的运作。
- en: 'This type of scalability can enable adoption of blockchain technology by large
    businesses. EOS.IO offers many additional features such as the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这种可扩展性可以使大型企业采用区块链技术。EOS.IO还提供许多其他功能，如下所示：
- en: Free rate-limited transactions
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 免费限速交易
- en: Low-latency transactions (such as 0.25 seconds broadcast time or 0.5 block time)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低延迟交易（如0.25秒的广播时间或0.5秒的区块时间）
- en: Recovery of stolen keys
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恢复被盗密钥
- en: Parallel execution of applications
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序的并行执行
- en: Atomic transactions with multiple accounts
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有多个账户的原子交易
- en: I encourage you to read the EOS.IO white paper and visit the GitHub page for
    a full list of features.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我鼓励您阅读EOS.IO白皮书并访问GitHub页面以获取完整功能列表。
- en: '[https://github.com/EOSIO/eos](https://github.com/EOSIO/eos)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/EOSIO/eos](https://github.com/EOSIO/eos)'
- en: '[https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md](https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md](https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md)'
- en: Financially speaking, EOS was developed by a private company called block.one
    and was able to raise an astonishing $4 billion in initial coin offering (ICO)
    via an ERC-20 tokens sale. At the time of writing, EOS’s price is selling around
    $2 to $8, and it has a total market capitalization of around $2 billion, which
    makes EOS the seventh largest cryptocurrency by market cap.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从财务角度来看，EOS由一家名为block.one的私人公司开发，并通过ERC-20代币销售筹集了惊人的40亿美元。在撰写本文时，EOS的价格约为2至8美元，总市值约为20亿美元，使EOS成为市值第七大的加密货币。
- en: 'EOS offers a few repositories to help with the development of EOS.IO contracts;
    they are listed at [https://github.com/EOSIO](https://github.com/EOSIO) and include
    the following: eos, eosio.cdt, eosjs, demux-js, and eosio.contracts. You will
    be installing the EOS and EOSIO.CDT libraries in this chapter. The EOS library
    is an open source smart contract platform, and the EOSIO.CDT library is a suite
    of tools for building EOS.IO contracts.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: EOS提供了一些代码库以帮助开发EOS.IO合约；这些代码库列在[https://github.com/EOSIO](https://github.com/EOSIO)上，包括以下内容：eos，eosio.cdt，eosjs，demux-js，和eosio.contracts。您将在本章安装EOS和EOSIO.CDT库。EOS库是一个开源智能合约平台，而EOSIO.CDT库是用于构建EOS.IO合约的工具集。
- en: At the time of writing, the EOS.IO platform has a steep learning curve. The
    code keeps changing, and the documentation and examples of EOS.IO are not being
    updated in timely manner, so it may feel like chasing a moving target at times.
    This results in code sometimes not compiling, commands not working, and documentation
    and examples containing code and commands that have been deprecated. It’s easy
    to find yourself stumped a few times while developing a contract; however, once
    you understand EOS.IO, it’s easy to overcome these obstacles.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 截至撰写本文时，EOS.IO 平台的学习曲线非常陡峭。代码在不断变化，而 EOS.IO 的文档和示例并没有及时更新，所以有时感觉就像是在追一个移动的目标。这导致代码有时无法编译，命令无法工作，文档和示例包含已经过时的代码和命令。在开发合同时，你可能会遇到几次难题；然而，一旦你理解了
    EOS.IO，这些障碍就很容易克服。
- en: Setting Up a Testnet Environment
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置测试网环境
- en: Before jumping into coding, let’s start by installing EOS.IO and EOSIO.CDT.
    You will build your EOS.IO version and set up a local testnet block producer.
    Then you will learn about the EOS.IO tools called cleos, keosd, and nodeos and
    how to configure them and create and manage a wallet with cleos. These tools and
    libraries are necessary for development.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编码之前，让我们先安装 EOS.IO 和 EOSIO.CDT。您将构建您的 EOS.IO 版本并设置一个本地测试网块生产者。然后，您将了解称为 cleos、keosd
    和 nodeos 的 EOS.IO 工具以及如何配置它们以及使用 cleos 创建和管理钱包。这些工具和库对于开发是必要的。
- en: Install EOS.IO
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 EOS.IO
- en: The easiest way to install EOS.IO  on macOS is with Brew.> brew tap eosio/eosio>
    brew install eosio
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 EOS.IO 最简单的方法是使用 Brew。> brew tap eosio/eos> brew install eosio
- en: The current EOS.IO is version 1.7.3\. I recommend checking the repo and issues
    section on GitHub ( [https://github.com/eosio/eos](https://github.com/eosio/eos)
    ) or doing a Google search in case you encounter errors when installing or building
    EOS.IO. Also see [https://github.com/EOSIO/eos/issues](https://github.com/EOSIO/eos/issues)
    .
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的 EOS.IO 版本是 1.7.3。我建议检查 GitHub 上的仓库和 issues 部分（ [https://github.com/eosio/eos](https://github.com/eosio/eos)
    ）或进行 Google 搜索，以防在安装或构建 EOS.IO 时遇到错误。还要参阅 [https://github.com/EOSIO/eos/issues](https://github.com/EOSIO/eos/issues)
    。
- en: Once the installation is complete, you will see the message in Figure [6-1](#Fig1)
    in Terminal.![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig1_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig1_HTML.jpg)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您将在终端中看到图 [6-1](#Fig1) 中的消息。![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig1_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig1_HTML.jpg)
- en: Figure 6-1
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6-1
- en: EOS.IO successfully built
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: EOS.IO 成功构建
- en: 'Next, add the EOS.IO binaries location to your environment, so you can run
    nodeos from anywhere.> export PATH=$PATH:/usr/local/eosio/binThis will set the
    path variable on this Terminal session, but you want to set the path environment
    variable permanently, so add it to your bash_profile file by opening the file
    with vim or your favorite text editor.> vim ~/.bash_profileNext, insert the following
    lines:# Setting PATH for EOSIOPATH="/usr/local/eosio/bin:${PATH}"Lastly, run bash_profile
    to commit the changes.> . ~/.bash_profileEOS.IO comes out of the box with built-in
    tools and programs; they are here: /usr/local/eosio/. Figure [6-2](#Fig2) shows
    an architecture diagram of these tools.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将 EOS.IO 二进制文件位置添加到您的环境变量中，这样您就可以从任何地方运行 nodeos。> export PATH=$PATH:/usr/local/eosio/bin这将在此终端会话中设置路径变量，但您希望永久设置路径环境变量，因此通过使用
    vim 或您喜欢的文本编辑器打开 bash_profile 文件并添加以下内容。> vim ~/.bash_profile接下来，插入以下行：# 为 EOSIO
    设置 PATHEOSIO_PATH="/usr/local/eosio/bin:${PATH}"最后，运行 bash_profile 以提交更改。> . ~/.bash_profileEOS.IO
    自带内置工具和程序；它们在这里：/usr/local/eosio/。图 [6-2](#Fig2) 展示了这些工具的架构图。
- en: 'nodeos: This is the core EOS.IO daemon that enables you to run a blockchain
    node component. nodeos can be configured with plugins. Additionally, nodeos can
    be configured to run a block producer in a local development environment or on
    dedicated endpoints. It interacts with a blockchain by creating blocks.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: nodeos：这是核心 EOS.IO 守护进程，使您能够运行区块链节点组件。nodeos 可以配置插件。此外，nodeos 可以配置为在本地开发环境或专用端点上运行块生产者。它通过创建区块与区块链交互。
- en: 'cleos: This is the main command-line tool for EOS.IO. It interfaces with the
    REST API exposed by nodeos. It can also access wallets as it interacts with keosd.
    For a list of cleos commands, just run the following:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: cleos：这是 EOS.IO 的主要命令行工具。它与 nodeos 暴露的 REST API 接口。它还可以访问钱包，因为它与 keosd 交互。要查看
    cleos 命令，只需运行以下命令：
- en: cleos
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: cleos
- en: 'keosd: This is the wallet daemon to load and manage the wallet’s keys. It does
    this by loading wallet-related plugins, such as the HTTP interface and the RPC
    API.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: keosd：这是用来加载和管理钱包密钥的钱包守护进程。它通过加载与钱包相关的插件（如HTTP接口和RPC API）来实现这一点。
- en: 'eosio-launcher: This tool will help you deploy a multinode blockchain network.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: eosio-launcher：这个工具将帮助你部署多节点区块链网络。
- en: '![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig2_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig2_HTML.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig2_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig2_HTML.jpg)'
- en: Figure 6-2
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-2
- en: 'Basic architecture of EOS. Photo credit: developers.eos.io.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: EOS的基本架构。图片来源于：developers.eos.io。
- en: Install EOSIO.CDT
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装EOSIO.CDT
- en: You installed EOS.IO. The other important library you need is EOSIO.CDT (CDT
    stands for “contract development toolkit”). EOSIO.CDT is the suite of tools used
    to build EOS.IO contracts. To get the library installed, you will be using Brew.>
    brew tap eosio/eosio.cdt> brew install eosio.cdtThe latest EOSIO.CDT at the time
    of writing is version 1.6.1\. Run brew update if you have an older version.> brew
    upgrade eosio.cdtTo ensure installation went well, run the eosio-cpp command with
    the help argument  .> eosio-cpp --help
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经安装了EOS.IO。你需要的另一个重要库是EOSIO.CDT（CDT代表“合同开发工具包”）。EOSIO.CDT是用于构建EOS.IO合同的工具套件。为了安装库，你将使用Brew。
- en: As you recall, you used Truffle and Remix to generate the Ethereum’s application
    binary interface (ABI) files. For EOS.IO smart contracts, you use eosio-cpp, which
    is a compiler that generates a WebAssembly (.wasm) file, which is the ABI that
    is needed to be uploaded to the blockchain for the smart contract. eosio-cpp also
    generates helper functions that serialize/deserialize the types defined in the
    ABI code for the smart contract development.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所回忆的，你使用了Truffle和Remix来生成以太坊的应用二进制接口（ABI）文件。对于EOS.IO智能合约，你使用eosio-cpp，这是一个生成WebAssembly
    (.wasm)文件的编译器，这是智能合约需要上传到区块链的ABI。eosio-cpp还生成了帮助函数，用于序列化/反序列化智能合约开发中定义在ABI代码中的类型。
- en: 'You can find more information about EOSIO.CDT on the GitHub page: [https://github.com/EOSIO/eosio.cdt](https://github.com/EOSIO/eosio.cdt)
    .'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在GitHub页面上找到关于EOSIO.CDT的更多信息：[https://github.com/EOSIO/eosio.cdt](https://github.com/EOSIO/eosio.cdt)
    。
- en: In the future, if you need to remove EOSIO and EOSIO.CDT, run the following
    commands:> brew remove eosio> brew remove eosio.cdt
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 将来，如果你需要删除EOSIO和EOSIO.CDT，请运行以下命令：
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: eosio-cpp is the replacement for eosiocpp, which has been deprecated. Originally
    eosiocpp was part of the EOS.IO installation, but now it’s part of CDT.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: eosio-cpp是已被弃用的eosiocpp的替代品。最初eosiocpp是EOS.IO安装的一部分，但现在它属于CDT。
- en: Build EOS.IO
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建EOS.IO
- en: A good way to visually understand EOS.IO and the tools associated with EOS.IO
    is to look at Figure [6-2](#Fig2).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 了解EOS.IO及其与EOS.IO相关的工具的一个很好的方法是查看图[6-2](#Fig2)。
- en: keosd and nodeos Configuration Files
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: keosd和nodeos配置文件
- en: 'The default ports for keosd and nodeos utilize the same port: 8888.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: keosd和nodeos默认端口使用相同的端口：8888。
- en: To configure nodeos, see this config file:> vim "/Users/[user]/Library/Application
    Support/eosio/nodeos/config/config.ini"
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置nodeos，请查看此配置文件：
- en: Inside the config.ini file, a notable variable to change is the plugins list
    that you load. You won’t make changes, but as you advance in your development,
    you may need to make changes.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在config.ini文件中，一个值得更改的变量是您加载的插件列表。你不会做更改，但随着你开发的进步，你可能需要做更改。
- en: Like with nodeos, you can configure keosd by editing this config file:> vim
    ~/eosio-wallet/config.ini
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与nodeos一样，你可以通过编辑此配置文件来配置keosd：
- en: Once you open the file, note that there is a variable named http-server-address
    that can be used to change from port 8888 in case you need that port for other
    software. Here let’s set it to any port you like.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你打开文件，请注意有一个名为http-server-address的变量，你可以用它来改变端口8888，以防你需要这个端口用于其他软件。这里让我们把它设置成你喜欢的任何端口。
- en: The variable is commented out. To set it to port 9000, change it from this:#
    http-server-address =to the following:http-server-address = http://127.0.0.1:9000
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 变量已被注释掉。要将其设置为端口9000，请将其从以下内容更改为：
- en: You could use the default port; however, it’s good to know how to configure
    EOS.IO.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用默认端口；然而，了解如何配置EOS.IO是有好处的。
- en: Create and Manage a Wallet with cleos
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用cleos创建和管理钱包
- en: In the previous section, I introduced some EOS.IO built-in programs and tools.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我介绍了一些EOS.IO内置程序和工具。
- en: 'As mentioned, cleos provides a REST API interface that is exposed by nodeos.
    The cleos reference guide can be found here: [https://developers.eos.io/eosio-cleos/reference](https://developers.eos.io/eosio-cleos/reference)
    .'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，cleos提供了一个由nodeos暴露的REST API接口。cleos参考指南可以在这里找到：[https://developers.eos.io/eosio-cleos/reference](https://developers.eos.io/eosio-cleos/reference)
    。
- en: To find the cleos --version number, run the --version client command. At the
    time of writing, you get to build d4ffb4eb.> cleos version clientd4ffb4ebAs mentioned,
    to get a list of commands, just type cleos. or cleos --help;.> cleos --helpIf
    you don’t remember a specific subcommand, type the command and get the subcommands
    list in the output; for instance, the get command outputs the subcommands list
    such as info for your block producer’s info.> cleos get> cleos get infoFailed
    to connect to nodeos at http://127.0.0.1:8888/; is nodeos running?
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到cleos --version号码，运行--version客户端命令。在撰写本文时，你可以构建d4ffb4eb。> cleos version client
- en: Notice that as you don’t have a node running, you get no results and an error
    message; however, later in this chapter, when you spin up nodeos, you will get
    information about your block producer.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，由于你没有运行节点，所以得不到任何结果和错误信息；然而，在本章后面，当你启动nodeos时，你将获得关于你的区块生产者的信息。
- en: EOS.IO Wallets
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: EOS.IO钱包
- en: The EOS.IO wallets use keys and offer a locked (encrypted) state and an unlocked
    (decrypted) state to protect the keys. The lock and unlock commands need the high
    entropy password that is provided to you once you create a wallet. The wallet’s
    keys can be associated with an account to provide permission to the account’s
    tokens, but it’s not necessary for the creation of a wallet.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: EOS.IO钱包使用密钥，并提供锁定（加密）状态和解锁（解密）状态以保护密钥。锁定和解锁命令需要你在创建钱包时提供的高熵密码。钱包的密钥可以与一个账户关联，为账户的代币提供权限，但创建钱包时并不必要。
- en: 'The wallet’s software uses cleos as the intermediary layer between keosd key
    retrieval operations and the nodeos blockchain actions. For instance, you can
    use cleos to access an account as it requires signatures to be generated from
    the keys. To create the default wallet, just run the create wallet command. Use
    the --to-console flag to get the master key (password).> cleos wallet create --to-consoleCreating
    wallet: defaultSave password to use in the future to unlock this wallet.Without
    password imported keys will not be retrievable."[ DEFAULT_MASTER_KEY]"Make sure
    you store the password. Now you can check that the wallet was created and run
    the wallet list command, and you will be able to see an array that lists the wallets
    and includes the default wallet you created.> cleos wallet listWallets:[  "default
    ∗"]'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 钱包的软件使用cleos作为keosd密钥检索操作和nodeos区块链操作之间的中介层。例如，你可以使用cleos访问一个账户，因为它需要从密钥中生成签名。要创建默认的钱包，只需运行创建钱包命令。使用--to-console标志来获取主密钥（密码）。>
    cleos wallet create --to-console
- en: Notice that once you create your default wallet, there is an asterisk next to
    the wallet’s name. The asterisk means that it’s unlocked. You’ll learn more about
    the lock and unlock states in the next section.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，一旦你创建了你的默认钱包，钱包名称旁边有一个星号。星号意味着它是解锁的。你将在下一节了解更多关于锁定和解锁状态的信息。
- en: Delete and Back Up Wallets
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除并备份钱包
- en: 'To remove the wallet you created, you need to remove the actual wallet’s file;
    it’s located here: ~/eosio-wallet.> rm -rf ~/eosio-walletRun the wallet list command,
    and you can see that the wallet array is empty.> cleos wallet list"/usr/local/eosio/bin/keosd"
    launchedWallets:[]'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除你创建的钱包，你需要删除实际钱包的文件；它位于这里：~/eosio-wallet。> rm -rf ~/eosio-wallet
- en: To back up the wallet, copy the wallet’s files and store them in a safe location.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要备份钱包，复制钱包的文件并将它们存储在安全的地方。
- en: EOS.IO Wallet with Custom Name
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 带有自定义名称的EOS.IO钱包
- en: 'So far, you created the default wallet. Now let’s say you want to create another
    wallet and name it mywallet. All you have to do is utilize the -n or --name flag.
    Choose a name and be careful about the strict name restrictions (a–z and 1–5 are
    allowed only, with a length of 12). I am choosing mywallet.> cleos wallet create
    -n mywallet --to-consoleCreating wallet: mywalletSave password to use in the future
    to unlock this wallet.Without password imported keys will not be retrievable."[DEFAULT_MASTER_KEY]"'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经创建了默认的钱包。现在假设你想要创建另一个钱包，并将其命名为mywallet。你只需要使用-n或--name标志。选择一个名字，并注意严格的命名限制（只允许a-z和1-5，长度为12）。我选择的是mywallet。>
    cleos wallet create -n mywallet --to-console
- en: 'EOS.IO: Open, Lock, and Unlock a Wallet'
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'EOS.IO: 打开、锁定和解锁钱包'
- en: 'When you created your wallet, you got a high entropy master key, which is your
    password. This password is used to encrypt (lock) and decrypt (unlock) your wallet
    file. To lock and unlock your wallet, use the following commands:> cleos wallet
    lock -n mywallet> cleos wallet unlock -n mywalletpassword: [DEFAULT_MASTER_KEY]password:
    Unlocked: mywallet'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建你的钱包时，你得到了一个高熵的主密钥，那就是你的密码。这个密码用来加密（锁定）和解密（解锁）你的钱包文件。要锁定和解锁你的钱包，请使用以下命令：>
    cleos wallet lock -n mywallet
- en: The lock and unlock commands enable your wallet to set a state of encryption
    and decryption that is protected by your password. What you are protecting are
    the wallet’s keys.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 锁定和解锁命令使你的钱包能够设置一个受密码保护的加密和解密状态。你所保护的是钱包的密钥。
- en: 'To unlock the default wallet, just run the following:> cleos wallet unlockAlso,
    to perform operations on your wallets, you need to first open the wallet. When
    keosd gets restarted, the wallet will be closed. Run the open command to open
    the wallet as needed.> cleos wallet openOpened: default'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要解锁默认的钱包，只需运行以下命令：> cleos wallet unlock
- en: Generating EOS.IO Keys
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成 EOS.IO 密钥
- en: 'Just as in other blockchains, EOS.IO stores keys in a wallet. You generate
    these keys and assign them to an EOS.IO account. There are multiple ways to create
    keys. You will be using cleos here. First let’s re-create the default wallet,
    in case you deleted it previously.> cleos wallet create --to-consoleCreating wallet:
    defaultSave password to use in the future to unlock this wallet.Without password
    imported keys will not be retrievable.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在其他区块链中一样，EOS.IO在钱包中存储密钥。你生成这些密钥并将它们分配给一个EOS.IO账户。有多种创建密钥的方法。你将在此使用cleos。首先让我们重新创建默认的钱包，以防你之前删除了它。>
    cleos wallet create --to-console
- en: '"[DEFAULT_MASTER_KEY]"'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '"[DEFAULT_MASTER_KEY]"'
- en: 'Running wallet list should show you two wallets.> cleos wallet listWallets:[  "default",  "mywallet
    ∗"]Next, to create two public/private key pairs, run the create key command.>
    cleos create key --to-consolePrivate key: [PRIVATE_KEY_1]Public key: [PUBLIC_KEY_1]>
    cleos create key --to-consolePrivate key: [PRIVATE_KEY_2]Public key: [PUBLIC_KEY_2]'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 运行钱包列表应该会显示两个钱包。> cleos wallet list
- en: 'As you noticed, you ran the create key command twice. This is not a typo; you
    need to have two keys: one for the active user and one for the owner. You’ll learn
    more about this concept once you create an account.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所注意到的，你两次运行了创建密钥命令。这不是错误；你需要两个密钥：一个用于活动用户，一个用于所有者。一旦你创建了账户，你会更多关于这个概念的了解。
- en: 'The command you ran output key pairs of public and private keys. Notice that
    the public key starts with the EOS keyword. These arbitrary key pairs are meaningless
    by themselves because they have no authority (they do not belong to any wallet
    or account). To assign these key pairs to a wallet, you can import these keys
    into your wallet.> cleos wallet import --private-key [PRIVATE_KEY_1]imported private
    key for:[PRIVATE_KEY_1]imported private key for: [key]> cleos wallet import --private-key
    [PRIVATE_KEY_2]imported private key for: [PRIVATE_KEY_2]In the output of your
    command, you received a confirmation message from the command line that the key
    pairs were added. However, you can also confirm that the key pairs were added
    by calling the wallet keys command  .> cleos wallet keys[PUBLIC_KEY_1, PUBLIC_KEY_2]Additionally,
    you can request to view the key pairs.> cleos wallet private_keys --password [DEFAULT_MASTER_KEY][[PUBLIC_KEY_1,
    PRIVATE_KEY_2],[ PUBLIC_KEY_1, PUBLIC_KEY_2]]'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您运行的命令输出了公钥和私钥的对。请注意，公钥以EOS关键词开头。这些任意的密钥对本身没有意义，因为它们没有权限（它们不属于任何钱包或账户）。要将这些密钥对分配给钱包，您可以将这些密钥导入您的钱包。>
    cleos wallet import --private-key [PRIVATE_KEY_1]导入的私钥用于：[PRIVATE_KEY_1]导入的私钥用于：[key]>
    cleos wallet import --private-key [PRIVATE_KEY_2]导入的私钥用于：[PRIVATE_KEY_2]在您的命令的输出中，您从命令行收到了一个确认消息，确认密钥对已添加。然而，您也可以通过调用钱包密钥命令来确认密钥对已添加。>
    cleos wallet keys[PUBLIC_KEY_1, PUBLIC_KEY_2]此外，您可以请求查看密钥对。> cleos wallet private_keys
    --password [DEFAULT_MASTER_KEY][[PUBLIC_KEY_1, PRIVATE_KEY_2],[ PUBLIC_KEY_1,
    PUBLIC_KEY_2]]
- en: In the previous command, you passed the --password argument instead of waiting
    for the command line to ask that you enter your master password.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个命令中，您传递了--password参数，而不是等待命令行提示您输入主密码。
- en: 'Lastly, you need to import a special EOS.IO parent account. This special parent
    account is used to bootstrap the EOS.IO nodes. Without this private key, you won’t
    be able to create your account. EOS.IO accounts need a parent account to create
    another account; that’s how EOS.IO allocates resources and protects against spam
    and hackers.> cleos wallet import --private-key 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3imported
    private key for: EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您需要导入一个特殊的EOS.IO母账户。这个特殊的母账户用于引导EOS.IO节点。没有这个私钥，您将无法创建您的账户。EOS.IO账户需要一个母账户来创建另一个账户；这就是EOS.IO分配资源和防止垃圾邮件及黑客的方法。>
    cleos wallet import --private-key 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3导入的私钥用于：EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV
- en: Note
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of writing, the parent wallet works; however, this can change, and
    you may need to find a parent wallet that can be used to bootstrap the EOS.IO
    wallet.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，母钱包是可用的；然而，情况可能会发生变化，您可能需要找到一个可以用来引导EOS.IO钱包的母钱包。
- en: Take a look at your output in case you would like to compare yours with mine;
    see Figure [6-3](#Fig3).![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig3_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig3_HTML.jpg)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 查看您的输出，以便您想比较您的输出和我的输出；请见图[6-3](#Fig3)！[../images/475651_1_En_6_Chapter/475651_1_En_6_Fig3_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig3_HTML.jpg)
- en: Figure 6-3
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-3
- en: Setting up EOS.IO wallet keys with a special parent account
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用特殊的母账户设置EOS.IO钱包密钥
- en: Spin Up a node with nodeos
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动一个带有nodeos的节点
- en: Transactions  are attached to a block, and you need a block producer to be able
    to pass these transactions to the network.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 交易附着在一个块上，你需要一个块生产者才能将这些交易传递到网络上。
- en: You can skip creating an EOS node (nodeos) if you connect directly to a public
    testnet or the mainnet; however, it’s better to first run your smart contracts
    on a local testnet network before committing your code to a public testnet or
    mainnet.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您直接连接到公共测试网或主网，您可以跳过创建EOS节点（nodeos）；然而，在将您的代码提交到公共测试网或主网之前，最好先在本地测试网网络上运行您的智能合约。
- en: At this point, you should be used to this process as you did the same thing
    when you developed a smart contract for Ethereum. Feel free to revisit Figure
    [6-2](#Fig2), where you can see the diagram of nodeos and the EOS.IO blockchain
    relationship.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该已经熟悉了这个过程，因为您在为以太坊开发智能合同时已经做过同样的事情。请随意参考图[6-2](#Fig2)，您可以看到nodeos和EOS.IO区块链关系的图表。
- en: To start your own single-node local blockchain block producer, in a separate
    terminal, run nodeos.> nodeos -e -p eosio --plugin eosio::chain_api_plugin --plugin
    eosio::history_api_plugin --contracts-consoleThis command starts the block producer
    and should display the process on the console.info  2019-04-28T19:03:34.776 thread-0  chain_plugin.cpp:333          plugin_initialize    ]
    initializing chain plugininfo  2019-04-28T19:03:34.811 thread-0  block_log.cpp:134          open                 ]
    Log is nonemptyinfo  2019-04-28T19:03:34.820 thread-0  block_log.cpp:161          open                 ]
    Index is nonemptyinfo  2019-04-28T19:03:34.878 thread-0  http_plugin.cpp:422          plugin_initialize    ]
    configured http to listen on 127.0.0.1:8888.........
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要在另一个终端启动你自己的单节点本地区块链块生产者，运行nodeos。> nodeos -e -p eosio --plugin eosio::chain_api_plugin
    --plugin eosio::history_api_plugin --contracts-console此命令启动块生产者，并在控制台上显示进程。info
    2019-04-28T19:03:34.776 thread-0 chain_plugin.cpp:333 plugin_initialize] 初始化链插件info
    2019-04-28T19:03:34.811 thread-0 block_log.cpp:134 open] 日志不为空info 2019-04-28T19:03:34.820
    thread-0 block_log.cpp:161 open] 索引不为空info 2019-04-28T19:03:34.878 thread-0 http_plugin.cpp:422
    plugin_initialize] 配置http以监听127.0.0.1:8888.........
- en: As you can see, the console shows that your local network starts producing blocks.
    Notice the command you used sets the plugins, and also you set the --contracts-console
    flag.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，控制台显示您的本地网络开始生产区块。注意您使用的命令设置了插件，而且还设置了--contracts-console标志。
- en: This flag is necessary to be able to see messages you print to the console while
    in development mode.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此标志是在开发模式下能够看到您打印到控制台的消息的必要条件。
- en: Note
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can also set the --contracts-console flag inside the config.ini file instead
    of passing this argument with nodeos every time.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在config.ini文件中设置--contracts-console标志，而不是每次都使用nodeos传递这个参数。
- en: 'As you recall, you previously were running the cleos get info command and getting
    no results, as you did not have a block producer running; now if you run the same
    command in a new Terminal, you can observe information about your blocks.> cleos
    get info{  "server_version": "d4ffb4eb",  "chain_id": "cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f",  "head_block_num":
    73699,  "last_irreversible_block_num": 73698,  "last_irreversible_block_id": "00011fe2a80bf11315396c85e70860122dddc24ac083911fba31f7ee2d64eb3e",  "head_block_id":
    "00011fe36fab1fc2d4885067e1391c72782895d43f14cf7970ac282ddef17d67",  "head_block_time":
    "2019-04-28T19:04:06.500",  "head_block_producer": "eosio",  "virtual_block_cpu_limit":
    200000000,  "virtual_block_net_limit": 1048576000,  "block_cpu_limit": 199900,  "block_net_limit":
    1048576,  "server_version_string": "v1.5.1-dirty"}'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '正如您所回忆的，您之前运行了cleos get info命令，但没有结果，因为您没有运行块生产者；现在如果您在一个新的终端中运行相同的命令，您可以观察到有关您区块的信息。>
    cleos get info{ "server_version": "d4ffb4eb", "chain_id": "cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f",
    "head_block_num": 73699, "last_irreversible_block_num": 73698, "last_irreversible_block_id":
    "00011fe2a80bf11315396c85e70860122dddc24ac083911fba31f7ee2d64eb3e", "head_block_id":
    "00011fe36fab1fc2d4885067e1391c72782895d43f14cf7970ac282ddef17d67", "head_block_time":
    "2019-04-28T19:04:06.500", "head_block_producer": "eosio", "virtual_block_cpu_limit":
    200000000, "virtual_block_net_limit": 1048576000, "block_cpu_limit": 199900, "block_net_limit":
    1048576, "server_version_string": "v1.5.1-dirty"}'
- en: Re-spin Up a Testnet Local node (nodeos)
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重新启动测试网络本地节点（nodeos）。
- en: If you want to clear the block producer’s history, delete all the blocks, and
    re-spin up your local testnet, you will use what is called a *hard replay* by
    using the following flags:--delete-all-blocks --delete-state-history --hard-replayThese
    arguments will clear the accounts on the local testnet as well as the blocks.
    The complete command will look as follows:> nodeos -e -p eosio --plugin eosio::chain_api_plugin
    --plugin eosio::history_api_plugin --delete-all-blocks --delete-state-history
    --hard-replay --contracts-console
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想清除块生产者的历史记录，删除所有区块，并重新启动您的本地测试网络，您将使用所谓的*硬重放*，使用以下标志：--delete-all-blocks
    --delete-state-history --hard-replay这些参数将清除本地测试网络上的账户以及区块。完整的命令将如下所示：> nodeos
    -e -p eosio --plugin eosio::chain_api_plugin --plugin eosio::history_api_plugin
    --delete-all-blocks --delete-state-history --hard-replay --contracts-console
- en: EOS.IO Accounts
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: EOS.IO账户
- en: EOS.IO accounts hold a human-readable name that is stored on the EOS.IO blockchain.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: EOS.IO账户持有的是存储在EOS.IO区块链上的人类可读名称。
- en: To create an account on the mainnet, someone with an EOS.IO account needs to
    create it for you. The reasons behind this regulated process are spam and hacker
    prevention and resource allocation. By default, the account holds two native names/permissions.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要在主网络上创建账户，需要一个EOS.IO账户的人为你创建。这种受监管的过程背后的原因是防止垃圾信息和黑客攻击以及资源分配。默认情况下，该账户持有两个本地名称/权限。
- en: 'Owner: This is used to recover other permissions, which is useful in the event
    that the permission has been compromised.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有者：这用于恢复其他权限，在权限被泄露的情况下非常有用。
- en: 'Active: This is used for high-level account changes such as transferring funds
    or voting for block producers.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 积极：这用于进行高级账户更改，例如转移资金或投票选举区块生产者。
- en: When you created your testnet account, you imported a special EOS.IO parent
    account key to bootstrap. Each permission name needs a “parent.” The parent authority
    is to be able to make changes to any of the permission settings for all of its
    children. EOS.IO provides a special account’s parent key for the local testnet
    that you imported in order to create your account. See Figure [6-4](#Fig4).![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig4_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig4_HTML.jpg)
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建您的测试网账户时，您导入了特殊的EOS.IO父账户密钥以启动。每个权限名称都需要一个“父”。父权限是为了能够更改其所有子权限设置中的任何权限。EOS.IO为本地测试网提供了特殊账户的父密钥，您导入以创建自己的账户。参见图[6-4](#Fig4)。![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig4_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig4_HTML.jpg)
- en: Figure 6-4
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-4
- en: 'Account high-level architecture and permission structure. Photo credit: hackernoon.com.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 账户高级架构和权限结构。图片来源：hackernoon.com。
- en: For a transaction to be valid and signed, each named permission needs conditions
    to be met such as a client with an unlocked wallet, and the wallet has to grant
    authority permission for the account. If you don’t meet these conditions, the
    transaction will fail.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使交易有效并签名，每个命名权限都需要满足条件，例如一个解锁的钱包客户端，并且钱包必须授予账户授权权限。如果您不满足这些条件，交易将失败。
- en: Now that you understand accounts, you are ready to create your own account.
    You already created a wallet and imported the parent key. To create an account,
    you run the following command’s syntax:> cleos create account eosio [ACCOUNT_NAME]
    [OWNER_PUBLIC_KEY] [ACTIVE_PUBLIC_KEY]
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 既然您已经理解了账户，您就准备好创建自己的账户了。您已经创建了一个钱包并导入了父密钥。要创建账户，您运行以下命令的语法：> cleos create account
    eosio [ACCOUNT_NAME] [OWNER_PUBLIC_KEY] [ACTIVE_PUBLIC_KEY]
- en: The OWNER_KEY value is the public key of the account owner authority, and the
    ACTIVE_KEY value is the public key of the account’s active authority.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: OWNER_KEY值是账户所有者权限的公钥，ACTIVE_KEY值是账户的积极权限公钥。
- en: In this example, let’s call the account myaccount and use the two keys you created.
    The command will look like so (see Figure [6-5](#Fig5) for the expected output):>
    cleos create account eosio myaccount [PUBLIC_KEY_1] [PUBLIC_KEY_2]![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig5_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig5_HTML.jpg)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将账户命名为myaccount，并使用您创建的两个密钥。命令如下所示（参见图[6-5](#Fig5)以获取预期的输出）：> cleos
    create account eosio myaccount [PUBLIC_KEY_1] [PUBLIC_KEY_2]![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig5_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig5_HTML.jpg)
- en: Figure 6-5
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-5
- en: Creating your first EOS.IO account called myaccount
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 创建您的第一个EOS.IO账户，名为myaccount
- en: You generated two keys, so it doesn’t matter which key you decide to use as
    your active and which one as an owner; just remember which key you used for which.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您生成了两个密钥，所以您决定将哪个密钥用作积极密钥，哪个用作所有者密钥都无关紧要；只需记住您用于哪个密钥即可。
- en: 'To see the list of the account, use this:> cleos get accounts [PUBLIC_KEY_1]{  "account_names":
    [    "myaccount"  ]}'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '要查看账户列表，使用这个：> cleos get accounts [PUBLIC_KEY_1]{  "account_names": [    "myaccount"  ]}'
- en: Note
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You may get an error message while trying to create the account if you missed
    any of the steps provided in this chapter. The error is “Error 3090003: provided
    keys, permissions, and delays do not satisfy declared authorizations.”'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您在尝试创建账户时遗漏了本章中提供的任何步骤，您可能会收到错误消息。错误是“Error 3090003: provided keys, permissions,
    and delays do not satisfy declared authorizations.”'
- en: 'Wallets, Keys, and Accounts: Complete Commands'
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 钱包、密钥和账户：完整命令
- en: 'To ensure you fully understand the process, here is a summary of how to create
    an account:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保您完全理解该过程，这里总结了创建账户的步骤：
- en: 1.Ensure nodeos is running in a separate Terminal window.> nodeos -e -p eosio
    --plugin eosio::chain_api_plugin --plugin eosio::history_api_plugin --delete-all-blocks
    --delete-state-history --hard-replay --contracts-console
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1.确保在另一个终端窗口中运行nodeos。> nodeos -e -p eosio --plugin eosio::chain_api_plugin
    --plugin eosio::history_api_plugin --delete-all-blocks --delete-state-history
    --hard-replay --contracts-console
- en: '2.'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: Ensure your wallet is unlocked. Run > cleos wallet list (check that there is
    an asterisk next to the wallet’s name).
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保您的钱包已解锁。运行> cleos wallet list（检查钱包名称旁边是否有星号）。
- en: '3.'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: The EOS.IO special account’s parent key (5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3)
    was imported to bootstrap the EOS.IO.
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: EOS.IO特殊账户的父密钥（5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3）已导入以启动EOS.IO。
- en: cleos wallet import --private-key 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cleos wallet import --private-key 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3
- en: '4.'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: Check the key’s list using > cleos wallet keys. It should output an array with
    the keys you imported.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用> cleos wallet keys检查密钥列表。它应该输出您导入的密钥的数组。
- en: To summarize what you have done so far or to redo the entire process of creating
    an account, here are the complete steps:> rm -rf ~/eosio-wallet> cleos wallet
    create --to-console> cleos wallet open> cleos wallet unlock --password [DEFAULT_MASTER_KEY]>
    cleos create key --to-console> cleos create key --to-console> cleos wallet import
    --private-key [PRIVATE_KEY_1]> cleos wallet import --private-key [PRIVATE_KEY_2]>
    cleos wallet import --private-key 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3>
    cleos wallet keys> cleos create account eosio myaccount [EOS∗ OWNER_KEY] [EOS∗
    ACTIVE_KEY]
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结你已经完成的工作或者重新整个创建账户的过程，以下是完整的步骤：> rm -rf ~/eosio-wallet> cleos wallet create
    --to-console> cleos wallet open> cleos wallet unlock --password [DEFAULT_MASTER_KEY]>
    cleos create key --to-console> cleos create key --to-console> cleos wallet import
    --private-key [PRIVATE_KEY_1]> cleos wallet import --private-key [PRIVATE_KEY_2]>
    cleos wallet import --private-key 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3>
    cleos wallet keys> cleos create account eosio myaccount [EOS∗ OWNER_KEY] [EOS∗
    ACTIVE_KEY]
- en: Custom, Single Signature (Single-Sig), and Multisignature (Multisig)
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义、单签名（单签）、和多重签名（多签）
- en: By default, you configured your account with a single signature (aka single-sig)
    because it’s authorized for actions with the default (active and owner) permissions.
    However, it’s possible to configure your accounts with a multisignature (aka multisig)
    or with custom permissions. For instance, you can configure your account with
    multiple keys to authorize specific owner actions and active actions. You could
    use this feature, for instance, to create a permission called “publish” and give
    this permission to an account to allow only published smart contracts without
    the ability to withdraw tokens.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，你配置你的账户具有单个签名（又称单签），因为它被授权具有默认（active和owner）权限。然而，你可以配置你的账户具有多重签名（又称多签）或自定义权限。例如，你可以配置你的账户具有多个密钥以授权特定的所有者操作和活跃操作。你可以使用这个功能，例如，创建一个名为“publish”的权限，并把这个权限给一个账户，允许只有发布智能合约而没有提取代币的能力。
- en: “HelloWorld” Smart Contract
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “HelloWorld”智能合约
- en: You will be writing a smart contract with the minimal code. You will call your
    smart contract “HelloWorld.”
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您将编写一个具有最小代码的智能合约。您将称您的智能合作为“HelloWorld”。
- en: “HelloWorld” Smart Contract Accounts
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: “HelloWorld”智能合约账户
- en: To get started, you will create two accounts for your smart contract, one to
    publish your smart contract and one for interacting with a user. See the output
    in Figure [6-6](#Fig6).> cleos create account eosio helloworld [PUBLIC_KEY]> cleos
    create account eosio john [PUBLIC_KEY]![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig6_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig6_HTML.jpg)
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，你将为你的智能合约创建两个账户，一个用于发布你的智能合约，一个用于与用户交互。请参阅图[6-6](#Fig6)中的输出。> cleos create
    account eosio helloworld [PUBLIC_KEY]> cleos create account eosio john [PUBLIC_KEY]![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig6_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig6_HTML.jpg)
- en: Figure 6-6
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-6
- en: Creating your accounts for the “HelloWorld” smart contract
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为“HelloWorld”智能合约创建账户
- en: “HelloWorld” C++ Code
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: “HelloWorld” C++代码
- en: EOS selected C++, which resulted in mixed reviews from the blockchain development
    community. C++ is a low-level language, and it allows better management of resources
    such as memory pointers and operator overloading. This can result in better performance;
    however, it comes with a cost of increased code effort, especially if you are
    not familiar with C++.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: EOS选择了C++，这导致了区块链开发社区的混合评论。C++是一种低级语言，它允许更好地管理资源，如内存指针和运算符重载。这可能导致更好的性能；然而，这也带来了增加代码工作量的代价，尤其是如果你不熟悉C++。
- en: The EOS.IO infrastructure is written in C++, so it should not be a surprise
    that C++ was selected by EOS.IO’s team. EOS.IO smart contracts are written in
    C++ saved as the CPP file format; then you compile the C++ code to WebAssembly
    that is then used for deployment.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: EOS.IO基础设施是用C++编写的，因此EOS.IO团队选择C++并不令人惊讶。EOS.IO智能合约是以C++保存为CPP文件格式编写的；然后你将C++代码编译成WebAssembly，然后用于部署。
- en: Note
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'EOS.IO smart contract source files can be broken into three: CPP, HPP, and
    Ricardian. The HPP file defines the smart contract class, actions, and tables.
    The CPP file is the C++ code, which implements the action logic. The Ricardian
    file is the digital document (more about this in the next section).'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: EOS.IO智能合约源文件可以分为三个：CPP、HPP和Ricardian。HPP文件定义了智能合约类、行为和表。CPP文件是C++代码，实现了行为逻辑。Ricardian文件是数字文档（关于这一点在下一节中有更多介绍）。
- en: 'Start by creating the helloworld contract  directory by navigating into the
    directory.> mkdir ~/Desktop/helloworld && cd $_Notice that you used your desktop
    but can use any directory you like. Next, paste the helloworld.cpp code with vim
    or your favorite text editor.> vim helloworld.cpp#include <eosiolib/eosio.hpp>using
    namespace eosio;class helloworld : public contract {  public:      using contract::contract;      [[eosio::action]]      void
    hello( name user ) {         print( "World: User: ", user);      }};EOSIO_DISPATCH(helloworld,
    (hello))'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '首先，通过导航进入目录创建helloworld合约目录。> mkdir ~/Desktop/helloworld && cd $_注意你使用了你的桌面，但可以使用你喜欢的任何目录。接下来，使用vim或你喜欢的文本编辑器粘贴helloworld.cpp代码。>
    vim helloworld.cpp#include <eosiolib/eosio.hpp>using namespace eosio;class helloworld
    : public contract {  public:      using contract::contract;      [[eosio::action]]      void
    hello( name user ) {         print( "World: User: ", user);      }};EOSIO_DISPATCH(helloworld,
    (hello))'
- en: The code imports EOS.IO libraries. The class HelloWorld is of type contract,
    and you create a method called hello. The method is your action; you pass the
    user and print the word *world* and the username. Once a user interacts with your
    contract and calls the hello action, they will get world with the user’s name.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 代码导入了EOS.IO库。HelloWorld类是契约类型，你创建了一个名为hello的方法，该方法是你的行为；你传递用户并打印出*world*和用户名。一旦用户与你的合约互动并调用hello行为，他们将得到带有用户名的world。
- en: Notice that in this example you included the eosio.hpp file. To debug the EOS.IO
    smart contract, you need to use old-fashioned caveman debugging.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在这个例子中你包含了eosio.hpp文件。为了调试EOS.IO智能合约，你需要使用老式的原始调试。
- en: Note
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Caveman debugging, aka printf() debugging, is nothing more than adding print
    statements around your code. The EOS.IO Print API supports the char array, 64-bit
    and 128-bit unsigned integer, and others. The print is done by wrapping the C++
    code printi, prints_l, printi128, and others in print.hpp, which includes the
    import eosio.hpp library statement.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 原始调试，也称为printf()调试，不过是在你的代码周围添加打印语句。EOS.IO打印API支持字符数组、64位和128位无符号整数等。打印是通过将C++代码printi、prints_l、printi128等包裹在print.hpp中的printi、prints_l、printi128等，并包括导入eosio.hpp库声明。
- en: Smart Contract IDE
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 智能合约IDE
- en: Using Terminal is perfectly acceptable, but as the code becomes more complex,
    using a professional IDE can be helpful for code completion, highlights, and readability.
    You can use the IDE of your liking. As you already used WebStorm, you can continue
    and import the project to WebStorm. WebStorm already includes a C++ plugin, so
    there’s no need to install any special plugin. Figure [6-7](#Fig7) shows HelloWorld
    project open in WebStorm.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用终端是可以接受的，但随着代码变得更加复杂，使用专业IDE可以帮助代码补全、高亮和可读性。你可以使用你喜欢的IDE。既然你已经使用了WebStorm，你可以继续将项目导入WebStorm。WebStorm已经包括了C++插件，所以无需安装任何特殊插件。图[6-7](#Fig7)显示了HelloWorld项目在WebStorm中打开。
- en: 'To import your project, select File ➤ Open and navigate to the project’s location:
    ~/Desktop/helloworld.![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig7_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig7_HTML.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要导入你的项目，选择文件➤打开，并导航到项目位置：~/Desktop/helloworld.*[../images/475651_1_En_6_Chapter/475651_1_En_6_Fig7_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig7_HTML.jpg)
- en: Figure 6-7
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 6-7
- en: HelloWorld project imported into WebStorm version 2018.2.4
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: HelloWorld项目已导入WebStorm版本2018.2.4
- en: Compile a Contract and Generate an ABI
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译合约并生成ABI
- en: As mentioned, the eosio-cpp tool takes C++ code and outputs WebAssembly and
    ABI. This is done by running the following command:> eosio-cpp -o helloworld.wasm
    helloworld.cpp --abigen
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，eosio-cpp工具接受C++代码并输出WebAssembly和ABI。这是通过运行以下命令完成的：> eosio-cpp -o helloworld.wasm
    helloworld.cpp --abigen
- en: 'Notice that in the command you specify the output file’s name, which is helloworld.wasm.
    After running this command, the compiler generates the following files: helloworld.wasm
    and helloworld.abi.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在命令中你指定了输出文件的名称，即helloworld.wasm。运行此命令后，编译器生成了以下文件：helloworld.wasm和helloworld.abi。
- en: To ensure the compiler worked as expected, you should be able to see these two
    files; see Figure [6-7](#Fig7).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保编译器如预期工作，你应该能够看到这两个文件；见图[6-7](#Fig7)。
- en: Ricardian Contracts
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ricardian Contracts
- en: Once you generate your WASM and ABI files, notice that you are getting more
    than 20 warnings. Among these warnings, you should find the following warnings
    in the output:Warning, empty ricardian clause fileWarning, empty ricardian clause
    fileWarning, action <hello> does not have a ricardian contract
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你生成了你的WASM和ABI文件，注意你收到了超过20个警告。在这些警告中，你应该在输出中找到以下警告：警告，空的ricardian条款文件警告，空的ricardian条款文件警告，动作<hello>没有ricardian合同。
- en: Note
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Ricardian contracts were invented by Ian Grigg in 1996 to help bridge the gap
    between software application and court of law. The Ricardian contracts file in
    EOS is a digital document in Markdown Language format (.md, .markdown) and defines
    the terms and conditions of the interaction between the parties. It is set as
    parameters but written as readable text. EOS uses cryptographically to sign and
    verify the Ricardian contracts.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Ricardian合同是由Ian Grigg在1996年发明的，以帮助弥合软件应用程序与法院之间的鸿沟。EOS中的Ricardian合同文件是格式为Markdown语言的数字文档（.md、.markdown），定义了双方之间的互动条款和条件。它被设定为参数，但以可读的文本形式编写。EOS使用加密技术来签署和验证Ricardian合同。
- en: 'To help generate the Ricardian contracts, you can copy a Python script and
    template from a contributor that generates the files automatically: [https://github.com/EOS-Mainnet/governance](https://github.com/EOS-Mainnet/governance)
    .'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助生成Ricardian合同，你可以复制一个贡献者提供的Python脚本和模板，该脚本和模板可以自动生成文件：[https://github.com/EOS-Mainnet/governance](https://github.com/EOS-Mainnet/governance)。
- en: As it’s just three files, instead of using clone, you can use wget to download
    these files.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这只有三个文件，而不是使用克隆，你可以使用wget来下载这些文件。
- en: Check that you have wget installed on your machine.> wget --helpIn case it’s
    not installed, install wget on macOS via Ruby and Brew.> ruby -e "$(curl -fsSL
    https://raw.githubusercontent.com/Homebrew/install/master/install)" < /dev/null
    2> /dev/null> brew install wget> brew upgrade wgetNext, inside your helloworld
    project, create the directory and download the files you need.> cd ~/desktop/helloworld>
    mkdir rc && cd $_> wget https://raw.githubusercontent.com/EOS-Mainnet/governance/master/scripts/abi_to_rc/abi_to_rc.py>
    wget https://raw.githubusercontent.com/EOS-Mainnet/governance/master/scripts/abi_to_rc/rc-action-template.md>
    wget https://raw.githubusercontent.com/EOS-Mainnet/governance/master/scripts/abi_to_rc/rc-overview-template.mdNext,
    run the Python script.> cd ../> python rc/abi_to_rc.py helloworld.abi
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 检查你的机器上是否安装了wget。> wget --help如果它没有安装，通过Ruby和Brew在macOS上安装wget。> ruby -e "$(curl
    -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" < /dev/null
    2> /dev/null> brew install wget> brew upgrade wget接下来，在你的helloworld项目中，创建目录并下载你需要的文件。>
    cd ~/desktop/helloworld> mkdir rc && cd $_> wget https://raw.githubusercontent.com/EOS-Mainnet/governance/master/scripts/abi_to_rc/abi_to_rc.py>
    wget https://raw.githubusercontent.com/EOS-Mainnet/governance/master/scripts/abi_to_rc/rc-action-template.md>
    wget https://raw.githubusercontent.com/EOS-Mainnet/governance/master/scripts/abi_to_rc/rc-overview-template.md接下来，运行Python脚本。>
    cd ../> python rc/abi_to_rc.py helloworld.abi
- en: The script generates for you automatically helloworld-rc.md and helloworld-hello-rc.md
    already formatted in the Markdown language. If you view these files, you will
    notice that the Python script used the templates you downloaded to generate your
    files, and you can fill in the terms and conditions about your smart contract.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本已经为您自动生成了helloworld-rc.md和helloworld-hello-rc.md，格式化为Markdown语言。如果你查看这些文件，你会注意到Python脚本使用了你下载的模板来生成你的文件，你可以填写关于你的智能合同的条款和条件。
- en: You can lay out the guidelines of what exactly your users are purchasing/exchanging
    and allow better trust between parties; it can include terms and conditions such
    as intent, warranty, remedies, force majeure, dispute resolution, governing law,
    and many others. Pay close attention to the terms you set as these can be enforced
    in a court of law. These terms allow skipping middlemen such as attorneys to have
    the smart contract set the terms and conditions that both parties agree to.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以设定用户正在购买/交换的具体指导方针，并允许双方建立更好的信任；它可以包括意图、保证、补救措施、不可抗力、争端解决、适用法律等内容。密切关注你设定的条款，因为这些可以在法院强制执行。这些条款可以跳过中间人，如律师，让智能合同设定双方同意的条款和条件。
- en: Deploy a Contract
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署合同
- en: To deploy your smart contract to your local testnet network, the set contract
    command is used to upload the contract. See Figure [6-8](#Fig8) for the expected
    output.> cleos set contract helloworld ~/Desktop/helloworld -p helloworld@active![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig8_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig8_HTML.jpg)
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署你的智能合约到你的本地测试网络，使用set contract命令上传合约。参见图[6-8](#Fig8)预期的输出。> cleos set contract
    helloworld ~/Desktop/helloworld -p helloworld@active![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig8_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig8_HTML.jpg)
- en: Figure 6-8
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-8
- en: Terminal output of deploying your smart contract
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 部署智能合约的终端输出
- en: Interact with a Smart Contract Action
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与智能合约动作交互
- en: Now that you have your smart contract deployed on your local blockchain, you
    can interact with the hello action you created. You will call the hello action  and
    pass your username to the user’s active key. See the output in Figure [6-9](#Fig9).>
    cleos push action helloworld hello '["john"]' -p john@active![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig9_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig9_HTML.jpg)
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经在你本地的区块链上部署了你的智能合约，你可以与你创建的hello动作交互。你将调用hello动作并传递你的用户名到用户的活动密钥。参见图[6-9](#Fig9)的输出。>
    cleos push action helloworld hello '["john"]' -p john@active![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig9_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig9_HTML.jpg)
- en: Figure 6-9
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-9
- en: Terminal output of push action on a smart contract
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约的终端推送动作输出
- en: 'You can download the entire smart contract project from here: [https://github.com/Apress/the-blockchain-developer/chapter6/helloworld/](https://github.com/Apress/the-blockchain-developer/chapter6/helloworld/)
    .'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从这里下载整个智能合约项目：[https://github.com/Apress/the-blockchain-developer/chapter6/helloworld/](https://github.com/Apress/the-blockchain-developer/chapter6/helloworld/)。
- en: Smart Contact Tokens
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 智能合约代币
- en: The EOS.IO GitHub project has a library of smart contracts as examples that
    can be used. One of these libraries is a smart contract called eosio.token . This
    contract enables developers to create other tokens as well as transfer a token.
    You will be using these libraries to create your own tokens. To get started, you
    will create a new smart contract project and call it eosio.token.**> mkdir ~/Desktop/eosio.token
    && cd $_**
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: EOS.IO GitHub项目有一个智能合约库作为示例可以使用。这些库中的一个称为eosio.token的智能合约。这个合约使开发者能够创建其他代币以及转移代币。你将使用这些库来创建你自己的代币。开始时，你将创建一个新的智能合约项目，并将其命名为eosio.token。**>
    mkdir ~/Desktop/eosio.token && cd $_**
- en: Create Accounts
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建账户
- en: Token gets issued by an “issuer” account. You will start off by creating the
    “issuer” account and an account called jane that you can use to transfer some
    tokens.> cleos create account eosio eosio.token [public key]> cleos create account
    eosio jane [public key]
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 代币由“发行者”账户发行。你将开始创建一个名为“发行者”的账户和一个名为jane的账户，你可以使用它来转移一些代币。> cleos create account
    eosio eosio.token [public key]> cleos create account eosio jane [public key]
- en: Compile wasm with the Latest eosio.token Code
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用最新的eosio.token代码编译wasm
- en: 'To issue eosio.token, you will be using the eosio.token.hpp file that defines
    the contract’s class, actions, and tables, as well as eosio.token.cpp that holds
    the logic and coding. You can find these files and the entire SmartContract project
    here: [https://github.com/Apress/the-blockchain-developer/chapter6/eosio.token/](https://github.com/Apress/the-blockchain-developer/chapter6/eosio.token/)
    .'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 要发行eosio.token，你将使用定义了合约类、动作和表的eosio.token.hpp文件，以及包含逻辑和编码的eosio.token.cpp。你可以在这里找到这些文件和整个SmartContract项目：[https://github.com/Apress/the-blockchain-developer/chapter6/eosio.token/](https://github.com/Apress/the-blockchain-developer/chapter6/eosio.token/)。
- en: Next, ensure you change the include statement in the CPP code to point to the
    HPP file you downloaded from GitHub using vim or your favorite text editor.> vim
    eosio.token.cppChange the eosio.token.cpp file on line 6 to point to the location
    of eosio.token.hpp file  ; in this case, it’s here:include "~/Desktop/eosio.token/eosio.token.hpp"
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，确保你更改CPP代码中的包含声明，使其指向你从GitHub下载的HPP文件，使用vim或你喜欢的文本编辑器。> vim eosio.token.cpp将eosio.token.cpp文件第6行更改为指向eosio.token.hpp文件的位置；在这个例子中，它在這裡：include
    "~/Desktop/eosio.token/eosio.token.hpp"
- en: Deploy eosio.token
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署eosio.token
- en: Equipped with eosio.token.hpp and eosio.token.cpp, you have all the files needed.
    You can compile the latest HPP and CPP files to generate the .wasm code with the
    eosio-cpp command, just as you did in the HelloWorld smart contract example.>
    eosio-cpp -o eosio.token.wasm eosio.token.cpp --abigenNext, deploy the eosio.token
    contract using the set contract command.> cleos wallet unlock --password [DEFAULT_MASTER_KEY]>
    cleos set contract eosio.token ~/Desktop/eosio.token --abi eosio.token.abi -p
    eosio.token@active
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 使用eosio.token.hpp和eosio.token.cpp，你已经拥有了所有需要的文件。你可以使用eosio-cpp命令编译最新的HPP和CPP文件以生成.wasm代码，就像你在HelloWorld智能合约示例中做的那样。>
    eosio-cpp -o eosio.token.wasm eosio.token.cpp --abigenNext，使用设置合约命令部署eosio.token合约。>
    cleos wallet unlock --password [DEFAULT_MASTER_KEY]> cleos set contract eosio.token
    ~/Desktop/eosio.token --abi eosio.token.abi -p eosio.token@active
- en: Create the EOS.IO Token
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建EOS.IO代币
- en: To create your new token, you utilize the create action. You will be passing
    the symbol_name type, which includes two parameters.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建你的新代币，你使用创建动作。你将传递symbol_name类型，其中包括两个参数。
- en: '*Maximum supply float*: In this example, you’ll set this to 20 million as your
    max tokens: 20000000.0000.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*最大供应浮动*：在这个例子中，你将设置这个值为2000万作为你的最大代币：20000000.0000。'
- en: '*Symbol*: For symbol_name, you need to pick a name. The name must be capital
    alpha characters only; in this example, select the name TOKEN  .'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*符号*：对于symbol_name，你需要选择一个名称。这个名字必须是只有大写字母字符；在这个例子中，选择名称TOKEN。'
- en: The “issuer” account has the authority to make a call issue action or any other
    actions such as recalling, freezing, and whitelisting owners.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: “发行人”账户有权执行发行动作或其他动作，例如召回、冻结和白名单所有者。
- en: To create a new token action, run the following command. See Figure [6-10](#Fig10)
    for the expected output.> cleos wallet unlock --password [DEFAULT_MASTER_KEY]>
    cleos push action eosio.token create '[ "eosio", "20000000.0000 TOKEN"]' -p eosio.token@active![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig10_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig10_HTML.jpg)
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的代币动作，运行以下命令。查看图[6-10](#Fig10)以获取预期输出。> cleos wallet unlock --password
    [DEFAULT_MASTER_KEY]> cleos push action eosio.token create '[ "eosio", "20000000.0000
    TOKEN"]' -p eosio.token@active![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig10_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig10_HTML.jpg)
- en: Figure 6-10
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-10
- en: Expected output for creating an eosio.token action
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 创建eosio.token动作的预期输出
- en: 'You can confirm the tokens were issued by calling the currency stats command.>
    cleos get currency stats eosio.token TOKEN{  "TOKEN": {    "supply": "0.0000 TOKEN",    "max_supply":
    "20000000.0000 TOKEN",    "issuer": "eosio"  }}'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '你可以通过调用货币统计命令来确认代币已发行。> cleos get currency stats eosio.token TOKEN{  "TOKEN":
    {    "supply": "0.0000 TOKEN",    "max_supply": "20000000.0000 TOKEN",    "issuer":
    "eosio"  }}'
- en: Issue Tokens
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发行代币
- en: Let’s create another account that you can use to send some of the tokens you
    issued. We’ll call this account jane.> cleos create account eosio jane [public
    key]Next, call the “issue” action to issue tokens. In this example, you will issue
    jane 500 tokens.> cleos push action eosio.token issue '[ "jane", "500.0000 TOKEN",
    "move tokens to Jane" ]' -p eosio@activeTo see the TOKEN balance in the jane account,
    you can use the get currency command  .> cleos get currency balance eosio.token
    jane TOKEN500.0000 TOKEN
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建另一个账户，你可以用来发送你发行的部分代币。我们称这个账户为jane。> cleos create account eosio jane [public
    key]接下来，调用“发行”动作以发行代币。在这个例子中，你将向jane发行500代币。> cleos push action eosio.token issue
    '[ "jane", "500.0000 TOKEN", "move tokens to Jane" ]' -p eosio@active要查看jane账户中的TOKEN余额，你可以使用get
    currency命令。> cleos get currency balance eosio.token jane TOKEN500.0000 TOKEN
- en: Transfer Tokens
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转移代币
- en: To transfer tokens, you run the transfer action. As an example, let’s transfer
    tokens from Jane’s account to John’s account.> cleos push action eosio.token transfer
    '[ "jane", "john", "100.0000 TOKEN", "transfer tokens" ]' -p jane@activeYou can
    confirm John’s account received the tokens by running the currency balance command
    on both accounts to ensure the math adds up.> cleos get currency balance eosio.token
    jane TOKEN  400.0000 TOKEN> cleos get currency balance eosio.token john TOKEN  100.0000
    TOKENFigure [6-11](#Fig11) shows the expected output.![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig11_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig11_HTML.jpg)
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 要转移代币，你运行转移动作。作为一个例子，让我们将代币从Jane的账户转移到John的账户。> cleos push action eosio.token
    transfer '[ "jane", "john", "100.0000 TOKEN", "transfer tokens" ]' -p jane@active你可以通过在两个账户上运行货币余额命令来确认John的账户收到了代币，确保数学加起来。>
    cleos get currency balance eosio.token jane TOKEN  400.0000 TOKEN> cleos get currency
    balance eosio.token john TOKEN  100.0000 TOKEN图[6-11](#Fig11)显示了预期输出。![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig11_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig11_HTML.jpg)
- en: Figure 6-11
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-11
- en: Expected output for creating, transferring, and balancing eosio.token actions
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 创建、转账和平衡eosio.token操作的预期输出
- en: Connecting to a Public Testnet Block Producer
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到公共测试网区块生产者
- en: At the time of writing, EOS.IO provides two public testnets so you can test
    in a more realistic environment before committing your code to mainnet.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，EOS.IO提供了两个公共测试网，这样你可以在将代码提交到主网之前在一个更现实的环境中进行测试。
- en: '*Jungle2.0*: [https://jungletestnet.io/](https://jungletestnet.io/)'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Jungle2.0*: [https://jungletestnet.io/](https://jungletestnet.io/)'
- en: '*Kylin*: [https://www.cryptokylin.io/](https://www.cryptokylin.io/)'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Kylin*: [https://www.cryptokylin.io/](https://www.cryptokylin.io/)'
- en: I chose Jungle2.0 for the public testnet in this example, but feel free to test
    both; it’s the same process just with different endpoints.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我选择了Jungle2.0作为公共测试网，但你可以随意测试两者；这个过程只是端点不同。
- en: 'To get started, visit the Jungle project’s GitHub page here: [https://github.com/CryptoLions/EOS-Jungle-Testnet](https://github.com/CryptoLions/EOS-Jungle-Testnet)
    .'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 开始之前，请访问Jungle项目的GitHub页面：[https://github.com/CryptoLions/EOS-Jungle-Testnet](https://github.com/CryptoLions/EOS-Jungle-Testnet)。
- en: The EOS Jungle testnet is almost identical to your local testnet. You just need
    to set up the Jungle API endpoint and generate EOS faucet tokens to pay for the
    account’s creation and RAM usage.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: EOS Jungle测试网与你的本地测试网几乎完全相同。你只需要设置Jungle API端点并生成EOS水龙头代币来支付账户创建和RAM使用费用。
- en: The testnet API endpoint is [https://jungle.eosio.cr:443](https://jungle.eosio.cr:443)
    ; just add the endpoint so your previous commands will work.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 测试网API端点是[https://jungle.eosio.cr:443](https://jungle.eosio.cr:443)；只需添加端点，让你的之前的命令正常工作。
- en: Note
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Always test on testnet before publishing your code to mainnet. In September
    2018 alone, $240,000 worth of EOS tokens were stolen from EOSBet’s smart contract
    accounts, and it was because of a smart contracts programming bug that was exploited
    by hackers and not bugs in the EOS.IO platform itself. You’ll learn more about
    security in Chapter [10](475651_1_En_10_Chapter.xhtml).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在将你的代码发布到主网之前，总是要在测试网上进行测试。仅2018年9月，就有价值24万美元的EOS代币从EOSBet的智能合约账户中被盗，这是因为一个被黑客利用的智能合约编程错误，而不是EOS.IO平台本身的错误。你将在第[10](475651_1_En_10_Chapter.xhtml)章了解更多关于安全性的内容。
- en: 'To create an account, you will generate the two default permissions: owner
    and active. You can do this at [https://nadejde.github.io/eos-token-sale/](https://nadejde.github.io/eos-token-sale/)
    or by running the same command line you used before twice.> cleos create key --to-consolePrivate
    key: [key]Public key: [key]'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建账户，你会生成两个默认权限：所有者和活跃。你可以通过访问[https://nadejde.github.io/eos-token-sale/](https://nadejde.github.io/eos-token-sale/)或者运行与你之前使用过的相同的命令行两次来完成这个操作。>
    cleos create key --to-console
- en: 'Next, you need to create an account. You can create an account by visiting
    the Jungle page and using the public keys you generated: [https://monitor.jungletestnet.io/#account](https://monitor.jungletestnet.io/%2523account)
    .'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要创建一个账户。你可以通过访问Jungle页面并使用你生成的公钥来创建账户：[https://monitor.jungletestnet.io/#account](https://monitor.jungletestnet.io/%2523account)。
- en: I picked a random name of liontestaa11, but feel free to use any name you want.
    Just be careful of the strict name restrictions (a–z and 1–5 are allowed only,
    with a length of 12). If you don’t comply with this strict name restriction, your
    account won’t get created. See Figure [6-12](#Fig12).![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig12_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig12_HTML.jpg)
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我随机选择了一个名字liontestaa11，但你可以使用任何你喜欢的名字。只要小心严格的名称限制（只允许a-z和1-5，长度为12）。如果你不遵守这种严格的名称限制，你的账户将无法创建。见图[6-12](#Fig12)。![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig12_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig12_HTML.jpg)
- en: Figure 6-12
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-12
- en: Jungle2.0’s  liontestaa11 account was created
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Jungle2.0的liontestaa11账户已创建
- en: Notice that you get the same warning as you got on your local testnet regarding
    the transaction being executed, but it’s not confirmed.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你会得到与你在本地测试网得到的相同的警告，关于交易将被执行，但它没有得到确认。
- en: To get information about the testnet, you can run the same get info command
    you ran for your local testnet. Just add the Jungle endpoint URL argument.> cleos
    --url https://jungle.eosio.cr:443 get infoAll the cleos commands need the URL
    endpoint argument; you can edit your bash file to point cleos to the URL you want.
    Edit the bash profile and point to the public testnet for the block producer,
    while still pointing to your local machine for the wallet.> vim ~/.bash_profileAdd
    the following line:alias cleos-testnet='cleos --url https://jungle.eosio.cr:443
    --wallet-url http://localhost:8888'You did not set the config.ini file here with
    a custom port, but you are changing the port to 8888\. Remember, to run the bash
    profile to commit the changes, run this:> . ~/.bash_profileNow you can run the
    all the commands with cleos-testnet.> cleos-testnet get info
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Buy Resource Allocation on the Public Testnet Block Producer
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now you will be publishing your “HelloWorld” smart contract you created in the
    previous section.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: If you were publishing your contract on mainnet, you would need to buy RAM and
    pay to create your account so you could publish your smart contract. EOS tokens
    are used to purchase resources. In the public testnet, you don’t need to spend
    actual money for your resources. You get fake faucet tokens that can be used for
    the Jungle block producer to purchase your resources.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'To get these tokens, all you need is your account name. Type your account name
    to get tokens from the Jungle faucet: [http://monitor.jungletestnet.io/#faucet](http://monitor.jungletestnet.io/%2523faucet)
    . See Figure [6-13](#Fig13).'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: I’ll explain resource allocation in more detail in the next section when you
    ready to publish to mainnet.![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig13_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig13_HTML.jpg)
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6-13
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Jungle2.0 gets tokens through the Jungle faucet
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: You can check the account balance with the get account command; see the output
    in Figure [6-14](#Fig14).> cleos --url https://jungle.eosio.cr:443 get account
    liontestaa11![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig14_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig14_HTML.jpg)
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6-14
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Jungle faucet account balance
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have EOS tokens, you can run the cleos system buyram command to
    purchase RAM so you can publish your smart contract.> cleos --url https://jungle.eosio.cr:443
    system buyram liontestaa11 liontestaa11 "10 EOS"
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Publish Your HelloWorld Contract on the Public Testnet
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you have tokens, you can publish your HelloWorld smart contract on
    the public testnet. Run the set contract command.> cleos --url https://jungle.eosio.cr:443
    set contract liontestaa11 ~/Desktop/helloworldYou can confirm the code was published
    using the get code command  . You can see the entire expected output in Figure
    [6-15](#Fig15).> cleos --url https://jungle.eosio.cr:443 get code liontestaa11![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig15_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig15_HTML.jpg)
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您有了代币，您可以将您的HelloWorld智能合约发布到公共测试网。运行设置合约命令。> cleos --url https://jungle.eosio.cr:443
    set contract liontestaa11 ~/Desktop/helloworld您可以使用获取代码命令确认代码已经发布。您可以在图[6-15](#Fig15)中看到整个预期输出。>
    cleos --url https://jungle.eosio.cr:443 get code liontestaa11![../images/475651_1_En_6_Chapter/475651_1_En_6_Fig15_HTML.jpg](../images/475651_1_En_6_Chapter/475651_1_En_6_Fig15_HTML.jpg)
- en: Figure 6-15
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-15
- en: Expected output when publishing contract on public testnet
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 发布合约到公共测试网时预期的输出
- en: Connecting to Mainnet
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到主网
- en: The EOS.IO  mainnet is almost the same as the testnet; you just need to use
    a different API endpoint and actually pay for the accounts and RAM with real EOS
    tokens.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: EOS.IO主网与测试网几乎相同；您只需要使用不同的API端点，并使用真实的EOS代币实际支付账户和RAM。
- en: 'There are three main ways to get EOS tokens:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 获取EOS代币主要有三种方式：
- en: '*Mine*: This creates a block producer and mines EOS.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*挖矿*：这创建了一个区块生产者并挖出了EOS。'
- en: '*Purchase EOS tokens*: They can be purchased on crypto exchanges.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*购买EOS代币*：它们可以在加密货币交易所购买。'
- en: '*Gift*: This gets an EOS as a gift from someone.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*赠送*：这是别人送给您一颗EOS。'
- en: As you saw in previous chapters, creating a block producer and getting selected
    by the EOS.IO network is not an easy process or guaranteed, and as you just need
    coins to buy RAM for opening an account and getting resources, you don’t need
    too many coins. At this point, it’s easy to just purchase these tokens.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前几章所看到的，创建一个区块生产者和被EOS.IO网络选中并不是一个简单的过程，也没有保证，而且您只需要硬币来购买RAM以开设账户和获取资源，所以您不需要太多硬币。在这个时候，仅仅购买这些代币是很容易的。
- en: You would need to first purchase bitcoin, Ethereum, or other coins on a fiat
    exchange such as Coinbase, CEX.io, or Coinmama. Then use exchanges such as Binance
    or Changelly to change your coins to EOS tokens. The reason is that there is no
    known exchange available at the time of writing that can directly change your
    fiat to EOS.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 您首先需要在法币交易所如Coinbase、CEX.io或Coinmama上购买比特币、以太坊或其他硬币。然后使用像Binance或Changelly这样的交易所将您的硬币换成EOS代币。原因是截至写作之时，还没有已知交易所可以直接将您的法币换成EOS。
- en: 'Next, you need an endpoint. The 21 selected block producers are able to provide
    you with an endpoint. You can find all the available block producers and other
    data regarding the blocks being mined here:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要一个端点。21个选定的区块生产者能够为您提供端点。您可以在以下链接找到所有可用的区块生产者和有关正在挖掘的区块的其他数据：
- en: '[http://eosnetworkmonitor.io/](http://eosnetworkmonitor.io/)'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://eosnetworkmonitor.io/](http://eosnetworkmonitor.io/)'
- en: '[https://eostracker.io/producers](https://eostracker.io/producers)'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://eostracker.io/producers](https://eostracker.io/producers)'
- en: 'Once you find a block producer you would like to use, you append /bp.json to
    the end of the URL to find the endpoint. Here’s an example: [https://api.eosnewyork.io/bp.json](https://api.eosnewyork.io/bp.json)
    .'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦找到您想要使用的区块生产者，您将URL的末尾加上/bp.json以找到端点。这是一个例子：[https://api.eosnewyork.io/bp.json](https://api.eosnewyork.io/bp.json)。
- en: The JASON output gives you the block producer’s information and ensures it’s
    ready for usage. To set the URL, just adjust the --url flag to the block producer
    you would like to connect to; the rest of the commands are all the same as the
    public testnet.> cleos --url https://api.eosnewyork.io:443 get infoAs before,
    you can edit the bash profile file as you did with the public testnet.alias cleos-mainnet='cleos
    --url https://api.eosnewyork.io:443 --wallet-url http://localhost:8888'Your bash
    profile should look like this:PATH="/usr/local/eosio/bin:${PATH}"alias cleos-testnet='cleos
    --url https://jungle.eosio.cr:443 --wallet-url http://localhost:8888'alias cleos-mainnet='cleos
    --url https://api.eosnewyork.io:443 --wallet-url http://localhost:8888'Confirm
    it works by running the get info command.> cleos-mainnet get info
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 该JASON输出提供了区块生产者的信息，并确保其可供使用。要设置URL，只需调整--url标志到您想要连接的区块生产者；其余命令与公共测试网完全相同。>
    cleos --url https://api.eosnewyork.io:443 get info与公共测试网一样，您可以像之前一样编辑bash配置文件。alias
    cleos-mainnet='cleos --url https://api.eosnewyork.io:443 --wallet-url http://localhost:8888'您的bash配置文件应如下所示：PATH="/usr/local/eosio/bin:${PATH}"alias
    cleos-testnet='cleos --url https://jungle.eosio.cr:443 --wallet-url http://localhost:8888'alias
    cleos-mainnet='cleos --url https://api.eosnewyork.io:443 --wallet-url http://localhost:8888'通过运行get
    info命令确认它是否正常工作。> cleos-mainnet get info
- en: I’ll spare you from repeating the same steps as in the public testnet section
    and spending actual tokens on the “HelloWorld” sample smart contract. However,
    I will cover resource allocation, as you need a good understanding of it to publish
    smart contracts on mainnet.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我会省略与公共测试网部分相同的步骤，以及花费实际代币在“HelloWorld”示例智能合约上的操作。然而，我会涵盖资源分配，因为了解资源分配对于在主网发布智能合约非常重要。
- en: Resource Allocation Explained
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 资源分配解释
- en: I spoke a bit about resource allocation when I covered testnets, as you needed
    to get EOS tokens to publish your smart contract on a public testnet.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 当我覆盖测试网时，我稍微提到了资源分配，因为您需要获得EOS代币才能在公共测试网上发布您的智能合约。
- en: For mainnet, you need actual EOS tokens to buy RAM and create your account.
    There are three types of resources consumed by EOS.IO accounts.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 对于主网，您需要使用实际的EOS代币来购买RAM并创建您的账户。EOS.IO账户消耗三种资源类型。
- en: '*Disk*: Bandwidth and log storage (disk)'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘：带宽和日志存储（磁盘）
- en: '*CPU*: Staking computation and computational backlog (CPU)'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算单元（CPU）：锁定计算资源和计算积压（CPU）
- en: '*Ram*: Staking state storage'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存（RAM）：锁定状态存储
- en: Buy RAM on Mainnet
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在主网上购买RAM
- en: 'To free up RAM, you need to delete data from the account state mechanism, and
    then the RAM can be sold on the RAM marketplace at the current RAM price. The
    RAM marketplace price can be found here: [https://www.feexplorer.io/EOS_RAM_price](https://www.feexplorer.io/EOS_RAM_price)
    .'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 为了释放RAM，你需要从账户状态机制中删除数据，然后RAM就可以按照当前的RAM价格在RAM市场上出售。RAM市场的价格可以在以下链接找到：[https://www.feexplorer.io/EOS_RAM_price](https://www.feexplorer.io/EOS_RAM_price)。
- en: Create an EOS.IO Account on Mainnet
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在主网上创建一个EOS.IO账户
- en: EOS.IO accounts are necessary, as they are needed to interact with the EOS.IO
    network and create an account. As I explained previously, someone who already
    has an account needs to vouch for creating new accounts. If you don’t have someone
    with an EOS account who can create your account, you can get an account created
    with third-party providers. The third-party providers normally charge you a fee.
    For instance, you can download EOS Lynx on your phone and pay $2 to create an
    EOS.IO account.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: EOS.IO账户是必要的，因为它们需要与EOS.IO网络交互并创建账户。如我之前解释的，已经有一个账户的人需要为创建新账户提供担保。如果您没有能为您创建账户的EOS账户，您可以使用第三方提供商来创建账户。第三方提供商通常会向您收取费用。例如，您可以在手机上下载EOS
    Lynx并支付2美元来创建一个EOS.IO账户。
- en: Change Your Account’s Public and Private Keys
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改账户的公钥和私钥
- en: Once you get a mainnet account, you are not done. You need to make sure you
    change your private key before funding your account, as the service that creates
    your account could just store your private keys and take your funds. You are already
    familiar with all these steps; the only new command here is remove_key, which
    removes the old key from your wallet. You create a new key, unlock your wallet,
    reset the permissions with the new key, and remove the old public key as well
    as import the new private key. Follow these steps:> cleos create key> cleos wallet
    unlock> cleos set account permission [ACCOUNT NAME] active [PUBLIC KEY] owner
    -p [ACCOUNT NAME]@owner> cleos set account permission MYACCOUNT owner [PUBLIC
    KEY] -p [ACCOUNT NAME]@owner> cleos wallet remove_key [OLD PUBLIC KEY]> cleos
    wallet import [PRIVATE KEY]
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你获得了一个主网账户，你就没有完成。你需要确保在向账户注资之前更改你的私钥，因为创建你账户的服务可能只是存储你的私钥并拿走你的资金。你对这些步骤已经很熟悉了；这里唯一的新命令是remove_key，它从你的钱包中删除旧的密钥。你创建一个新的密钥，解锁你的钱包，用新密钥重置权限，同时也删除旧的公钥并导入新的私钥。按照这些步骤操作：>
    cleos create key> cleos wallet unlock> cleos set account permission [ACCOUNT NAME]
    active [PUBLIC KEY] owner -p [ACCOUNT NAME]@owner> cleos set account permission
    MYACCOUNT owner [PUBLIC KEY] -p [ACCOUNT NAME]@owner> cleos wallet remove_key
    [OLD PUBLIC KEY]> cleos wallet import [PRIVATE KEY]
- en: CPU and Bandwidth Allocations
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CPU和带宽分配
- en: To get bandwidth and CPU, you need to allocate EOS tokens, and the resource
    will be available automatically for you proportional to the amount held in the
    staking contract period.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得带宽和CPU，你需要分配EOS代币，资源将在质押合同期间按照持有的金额自动为你提供。
- en: For instance, during the staking window, say you would like to consume 1 CPU
    unit. To do so, you would need to compete with other accounts so you have 0.1
    percent of all CPU-staked tokens under your account or have someone else delegate
    these tokens to your account.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在质押窗口期间，假设你想消耗1个CPU单元。为此，你需要与其他账户竞争，以便在你的账户下有0.1%的CPU质押代币，或者让其他人将这些代币委托给你的账户。
- en: After the staking period, the consumed resources free up, and you can reuse
    the same staked tokens, so there’s no need to keep purchasing more EOS tokens
    each time. The EOS tokens can be undelegated after you are done.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在质押期结束后，消耗的资源会释放，你可以重新使用相同的质押代币，因此每次都不需要继续购买更多的EOS代币。在你完成操作后，EOS代币可以被取消委托。
- en: Where to Go from Here
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从这里出发去哪里
- en: 'EOS.IO offers an online resource with links; see [https://developers.eos.io](https://developers.eos.io)
    . The developer resource provides valuable documentation as well as information
    about other tools I did not cover such as these:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: EOS.IO提供了一个在线资源，带有链接；请参阅[https://developers.eos.io](https://developers.eos.io)。该开发者资源提供了宝贵的文档以及其他我没有涵盖的工具的信息，例如这些：
- en: '*State handler*: demux-js'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态处理程序：demux-js
- en: '*JavaScript library:* eosjs'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript库：eosjs
- en: I also recommend exploring the EOS GitHub smart contracts examples, which can
    help you learn about all the functionally and what’s possible with EOS.IO.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我也建议探索EOS GitHub上的智能合约示例，这将帮助你了解EOS.IO的所有功能以及什么是可能的。
- en: Summary
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, I covered the EOS.IO blockchain in more detail. You set up
    a local testnet environment by installing the EOS.IO and EOSIO.CDT libraries and
    learned how to configure keosd and nodeos. You learned about EOS.IO wallets, including
    how to create, delete, and back up wallets as well as how to create a wallet with
    custom names and perform operations such as opening, locking, and unlocking a
    wallet.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我详细介绍了EOS.IO区块链。你通过安装EOS.IO和EOSIO.CDT库来设置本地测试网络环境，并学习了如何配置keosd和nodeos。你了解了EOS.IO钱包，包括如何创建、删除和备份钱包，以及如何创建具有自定义名称的钱包并进行操作，如打开、锁定和解锁钱包。
- en: Next, I covered a wallet’s key pairs and how to spin and re-spin up a local
    node (nodeos) to run a local block producer. You learned about active and owner
    permissions as well as single-signature (single-sig) and multisignature (multisig)
    are accounts.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我介绍了钱包的密钥对以及如何启动和重新启动本地节点（nodeos）以运行本地区块生产商。你还了解了活动权限和所有者权限以及单签名（single-sig）和多签名（multisig）账户。
- en: To understand EOS.IO smart contracts, you created a “HelloWorld” smart contract
    and tokens by first creating accounts and then writing C++ code. You then compiled
    and generated WebAssembly and ABI files as well as Ricardian contracts. You then
    learned how to deploy the contracts you created and interact with them. Once your
    tokens were generated, you were able to issue and transfer tokens between accounts.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解 EOS.IO 智能合约，你首先创建了账户，然后通过编写 C++ 代码创建了一个“HelloWorld”智能合约和代币。接着你编译并生成了 WebAssembly
    和 ABI 文件以及 Ricardian 合约。你然后学习了如何部署你创建的合约并与之交互。一旦你的代币生成，你就可以发行并在账户之间转移代币。
- en: You continued by connecting to a public testnet block producer to test your
    smart contracts in a more realistic environment, and lastly you learned how to
    connect and publish on mainnet and learned about resource allocations on an EOS.IO
    network.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 你继续通过连接到一个公共测试网区块生产者，在更现实的环境中测试你的智能合约，最后你学习了如何连接并发布到主网，并了解了 EOS.IO 网络上的资源分配。
- en: In the next chapter, I will cover NEO blockchain wallets and NEO smart contracts.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我将介绍 NEO 区块链钱包和 NEO 智能合约。
