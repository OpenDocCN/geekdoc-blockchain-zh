- en: '7'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A FRAMEWORK TO EVALUATE BLOCKCHAIN USE-CASES
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PHILLIP G. BRADFORD AND ROGER M. BENITES
  prefs: []
  type: TYPE_NORMAL
- en: 7.1\. ABSTRACT
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Predicting the impact of new technologies is challenging. It is difficult to
    know how technology will be harnessed and what technology enabled applications
    will prosper. Though predicting the future may be impossible; determining the
    suitability of current technology to various applications gives insight into its
    potential. Use-cases are one of the best tools for determining current technology
    suitability. Given a business problem, a use-case determines if a technology may
    help solve this problem. Use-cases do this by focusing on the functional attributes
    of a technology rather than the underlying implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchains are service-oriented and software-based technologies. Use-cases
    offer a lot for evaluating blockchains due to many ways they may contribute to
    business. Most new service-oriented technology enhances processes or services.
    Occasionally, new service-oriented technology offers novel processes or services.
    Infrequently, such new technologies create original business models. Creating
    original business models is one of the best business outcomes technologies offer.
    Use-cases will help us better understand blockchain applications enhancing business,
    understanding novel applications, or even driving new business models.
  prefs: []
  type: TYPE_NORMAL
- en: 7.2\. INTRODUCTION
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Modern history is replete with technology’s high impact on business. Blockchain
    technology is already having impact on many organizations. So it is important
    for businesses to be prepared for high impacts from blockchain technology. In
    most cases, preparing for the impact of a new technology equates to embracing
    the new technology. In appropriate situations, early adoption is important for
    the new technology. This ensures an organization’s management understands applications
    and potential of the technology. Early adoption also ensures an organization will
    grow proper talent to develop and maintain the technology.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain technology provides alternate ways to tackle a number of current
    business challenges. Having alternate ways to solve problems broadens an organization’s
    capabilities. These alternate methods may present both opportunities and threats
    to businesses. For example, blockchains offer alternate payment methods using
    cryptocurrencies. Electronic payment systems have been used for over 50 years.
    But, recently blockchains have helped those outside of the traditional banking
    system gain access to international payment systems. Of course, as these alternate
    payment systems mature it is possible they may compete directly against traditional
    payment systems. As usual, these alternate approaches have their own strengths
    and weaknesses. There are a number of substantial impediments blockchain payment
    systems must overcome to “scale up” and impose a threat to traditional banking
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain technology also enhances some business processes. Enhancing business
    processes may add value or reduce costs. For instance, validating certifications
    and school records is traditionally done manually. This is a slow and cumbersome
    process. Extra time and complexity may come about in determining if a certification
    was correctly granted. For instance, a certification may, in turn, depend on other
    independent certifications. Hence, validating all of these records is cumbersome
    and labor intensive. Blockchains are being implemented to validate and verify
    certifications, school records, courses and diplomas. These blockchains enhancement
    to a traditional manual task adds value and reduces costs.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain technology has potential to replace some business processes. Determining
    provenance of traded goods or art could take on a new form. Regulatory compliance
    costs and efforts could be optimized through the use of smart contracts. For example,
    financial firms’ implementation of the know-your-customer regulations may be implemented
    in new ways. “Know-your-customer” and other anti-money laundering provision are
    critical to banking industry and huge sanctions, amounting to billions of dollars
    are imposed for infractions. Currently, however, often the compliance processes
    are manual relying on the expertise of a few individuals. Automated solutions
    costing even 100 million dollars are welcome as the penalty of infraction is significant
    worldwide.
  prefs: []
  type: TYPE_NORMAL
- en: There are many recent cases of large penalties being imposed on international
    banks for their failure to comply with anti-money-laundering (AML) and know-your-customer
    (KYC) regulations. In 2017, Deutsche bank was fined $630 million for their failure
    to prevent money laundering. UBS AG, a Zurich-based bank, paid a fine of $4.2
    billion in 2019 for failure to comply with AML regulations. In 2019, Australian
    bank, Westpac was found to have failed to detect millions of suspected international
    transfers, the fine is expected to be in hundreds of millions of Australian dollars.
    Blockchain technology would help to increase transparency of funds, as well as
    traceability of fund transfers.
  prefs: []
  type: TYPE_NORMAL
- en: Another potential business model for blockchains is developing applications
    to trace the provenance or substantial transactions of autonomous agents. Provenance
    is important in areas ranging from the history of the purchase or sale of art
    to determining the origin of basic materials. Given that autonomous agents can
    perform transactions, it is useful to track these transactions. Blockchain gives
    a more secure and traceability method in the supply chain. Firms may create a
    digital passport or track log that proves authenticity of good and creates an
    auditable record of the products supply chain structure. This topic is discussed
    at length in a subsequent chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain technology has potential for creating new business models. Creating
    new business models is one of the highest points in economic evolution. Novel
    business models add value in undeveloped business sectors. These new business
    sectors represent major economic and social milestones. Smart contracts comprise
    an area where novel business models may appear. Smart contracts are software executed
    contracts and denote a formal agreement between autonomous parties. A blockchain
    network validates their terms and conditions. Such a validating blockchain network
    is most certainly made of many agnostic autonomous parties. This adds confidence
    to impartiality of the contract interpretation and their execution at an appropriate
    time.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain technology has been developing rapidly since 2018\. Introduced around
    2008, the early development of blockchain technology was driven by hobbyists,
    speculators and dark web users. From 2017 however, blockchains’ mature applications
    are moving to gaming, media and property registries and other high-value areas.
    In 2020 and beyond blockchain has the potential of becoming an important part
    of the digital sharing economy. Firms and governments have big stakes in asset
    transfers, smart contracts and new markets. Consequently, firms and governments
    have invested millions on blockchain research and development. For example, in
    2017, the Department of Homeland Security (DHS) granted about $2.5 million to
    blockchain start-up companies. This is a part of their Small Business Research
    Initiative. The companies specialized in multiple blockchain applications, analytics
    and decentralized key management. Another example is the Chinese government investing
    over $170 billion RMB ($24 billion) to develop technology districts specializing
    in blockchain technologies. The country has already created multiple blockchain
    industrial parks in cities such as Hangzhou, Chongqing and Suzhou to explore the
    technology for future applications.
  prefs: []
  type: TYPE_NORMAL
- en: 7.2.1\. Key Attributes of Blockchain
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The attributes of a blockchain are central for its business use-cases.[¹](#fn1)
    Use-cases are closely tied to functional requirements. In the case of agile business
    or systems development, detailed requirements are somewhat fluid. The main functionality
    is often clear, but detail and some functionality may be traded off along the
    way to a solution. Keeping the focus on the main functionality drives the intended
    solution and keeps the use-cases relevant.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchains are decentralized public ledgers that are updated frequently. These
    updates can be expected about every 10 minutes or less. These public ledgers record
    peer-to-peer transactions. Peer-to-peer transactions need to be independently
    validated and enforced, as these are not facilitated by a trusted third party,
    such as a financial intermediary.
  prefs: []
  type: TYPE_NORMAL
- en: The ledger records of these transactions are tamper resistant. Their validity
    is easily verified by anyone with the correct tools. Moreover, each periodic update
    of the ledger is verified by a network of autonomous agents. Enforcement is allowing
    the transaction to occur based on consensus.
  prefs: []
  type: TYPE_NORMAL
- en: The autonomous agents generating periodic updates are incentivized. These incentives
    come as compensation for transactions as well as participating in the validation
    and execution of the updates. Not all network participants are compensated. However,
    the possibility of that network participants may be compensated motivates autonomous
    agents to support the network.
  prefs: []
  type: TYPE_NORMAL
- en: Some blockchains focus on smart contracts. A smart contract is a computer program
    that a blockchain automatically and collectively executes when certain terms or
    conditions are met. The terms and conditions are not validated by a trusted third
    party; rather they are validated by the majority of blockchain network participants.
  prefs: []
  type: TYPE_NORMAL
- en: Real or digital assets may be tokenized. Tokenization is the unique digital
    representation of real or virtual resources. A key capability of blockchains is
    their ability to uniquely represent value. So, tokenization fits in well on blockchains.
    Tokenization helps in effectively applying smart contracts to virtual or real
    assets.
  prefs: []
  type: TYPE_NORMAL
- en: 7.2.2\. Idiosyncrasies of Blockchain
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The desirability of using blockchains may be diminished by certain blockchain
    attributes. In many blockchains, the periodic update speed is slow. This is crucial
    when it comes to large-scale transactions on any blockchain since it would delay
    the process of verification. These updates are aggregated in blocks during a given
    period of time. For example, the expected time between transaction blocks is targeted
    to be 10 minutes in Bitcoin’s case, as noted in [Chapter 2](CH002.html). Most
    blockchains have smaller expected times between blocks. The periodic updates are
    not precisely timed, but are typically within the targeted time ranges.
  prefs: []
  type: TYPE_NORMAL
- en: There is limited space in blockchains. Each block must be processed by nodes
    in the blockchain network so it makes sense to keep the blocks to a reasonable
    size. The cost of inserting information in a blockchain may vary. This is because
    transaction costs are often part of blockchain models. These transaction costs
    are priced in the associated cryptocurrencies which may be very volatile.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchains validate consensus of autonomous systems but they themselves are
    not substitute for database systems. Keeping records of consensuses in blockchains
    is the explicit purpose for blockchains, however, keeping more general records
    in blockchains is likely not desirable. In particular, it can be time consuming
    and costly to download entire blockchains. Space in blocks is also limited, costly
    and records are not alterable.
  prefs: []
  type: TYPE_NORMAL
- en: Establishing blockchain fit for business cases hinges on attributes blockchain
    offers. These attributes must be traded-off with any blockchain idiosyncrasies.
    In the remainder of this chapter, we start with a technical discussion on encryption.
    Our first use-case is for public key encryption systems. In Sections 7.4 and 7.5,
    we give a framework for evaluating use-cases for blockchain systems. We also develop
    a score card for evaluating blockchains and their use-cases. This framework applies
    blockchains from the bottom-up and the top-down in developing the score cards.
    Next, we discuss smart contracts in blockchains. We develop a number of use-cases
    in some depth. Finally, we give caveats and risks for blockchains before concluding
    with a brief summary.
  prefs: []
  type: TYPE_NORMAL
- en: 7.3\. TECHNICAL PRIMER ON CRYPTOGRAPHY AND ENCRYPTION
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cryptography is a highly technical and an applied discipline. WiFi services
    at home, at work or in local shops use cryptography. Anytime we order anything
    from the web, we are using cryptography. Cryptography is also required for putting
    documents in the cloud or retrieving document from the cloud. Another common use-case
    for applied cryptography is for wireless car keys. Given the breadth and depth
    of applied cryptography, it is not surprising that blockchains use cryptography.
    Indeed, blockchains are dependent on public key encryption. Therefore, the first
    example use-case diagram illustrates basic public key encryption.
  prefs: []
  type: TYPE_NORMAL
- en: Symmetric encryption systems have a single key. So, a single key both encrypts
    and decrypts the secret data. There is symmetry since there is one key that both
    encrypts and decrypts data. Most mechanical house keys are symmetric keys. This
    is because the same house key locks and unlocks the doors.
  prefs: []
  type: TYPE_NORMAL
- en: Public key systems are asymmetric encryption systems. These systems are asymmetric
    since a single key locks the data and another key unlocks the data. One of these
    keys is the public key and the other is the secret key. The public key may be
    public to all who may be interested. Given the public key, it is intractable to
    find the secret key.
  prefs: []
  type: TYPE_NORMAL
- en: For an asymmetric encryption system, let *E* be an encryption function and *D*
    be a decryption function. Suppose a public key *p* and a secret key *s* are generated
    for these encryption and decryption functions. A private message *M* may be encrypted
    as *c* ← *E[s]*[*M*] where *c* is the cypher text. The cypher text message may
    be decrypted as *M* ← *D[p]*[*c*].
  prefs: []
  type: TYPE_NORMAL
- en: Thinking broadly, let us compute *c*' ← *E[p]*[*M*]. That is, using the public
    key we may encrypt a private message *M*. Of course, if *c*' is easy to decrypt
    without the secret key *s*, but rather with a simple decryption mechanism *F*,
    then *F*[*c*'] ← *F*[*E[p]*[*M*]]. Now, since *F*[*c*'] = *M* so it must be that
    *c* ← *E[s]* and this must be easy to compute once we have *c*'. So, the encryption
    scheme would have been defeated.
  prefs: []
  type: TYPE_NORMAL
- en: So a secret message *M*, the public key *p* and secret key *s* are so that
  prefs: []
  type: TYPE_NORMAL
- en: '*M* = *E[p]*[*D[s]*[*M*]]'
  prefs: []
  type: TYPE_NORMAL
- en: '*M* = *D[s]*[*E[p]*[*M*]]'
  prefs: []
  type: TYPE_NORMAL
- en: In this use-case, Blue wants to send a secret message to Red. Red generates
    a public key *p* and a secret key *s*. The pubic key *p* may be publicly posted.
    Ideally, the public key is posted by a trusted party. The secret key *s* is kept
    private.
  prefs: []
  type: TYPE_NORMAL
- en: '[Fig. 7.1](#fig1) shows an example use-case diagram where Blue securely transmits
    a private message to Red. First Blue gets Red’s public key *p* from the trusted
    key repository Green. Next Blue encrypts their private message with Red’s public
    key *p* and sends the encrypted message to Red. Red decrypts the encrypted message
    with their secret key. In terms of encryption and decryption, Red’s secret key
    acts as an inverse to Red’s public key *p*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fig. 7.1:    Blue Sending a Secure Private Message to Red.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/C07-FIG1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 7.4\. FRAMEWORK TO EVALUATE USE-CASES
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The validity of blockchains rests on trust in the validity of the transactions
    in the blocks. In turn, the validity of the blocks depends on cryptographic security.
    This cryptographic dependency ensures trust in the validity of the blocks through
    their progression in the blockchains. In particular, trusting block 10 contains
    valid transactions, requires us to trust the validity of block 9, which requires
    us to trust the validity of block 8, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Much of blockchain cryptography will fail if quantum computing becomes a reality.
    This is because by Shor’s algorithm composite integer factorization may run effectively
    on quantum computers. So it should be clear that encryption plays a critical role
    in trust in blockchains. There are many other attributes of blockchains that make
    this technology attractive and these attributes are critical in vetting use-cases.
  prefs: []
  type: TYPE_NORMAL
- en: The definitions in [Table 7.1](#tab1) may be augmented with diagrams, annotations
    and alternate definitions. Such augmentation allows more stakeholders to gain
    a better footing for negotiation and discussion.
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 7.1:     Selected Use-Case Attribute Definitions.**'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Attribute** | **Definition** |'
  prefs: []
  type: TYPE_TB
- en: '| **Public ledger** | A public ledger is a publicly verifiable transaction
    record. The principles of the transaction may remain secret using encryption or
    they may be publicly identified. Nonetheless, the transaction itself is always
    public. |'
  prefs: []
  type: TYPE_TB
- en: '| **Peer-to-peer** blockchain | Transactions between two parties are verified
    by a blockchain network. These transactions are not enabled, brokered, approved
    or vetted by a third party. This means any mistaken or improper transactions must
    be accounted for by the two parties in the transaction. This is because there
    is no arbitration or dispute settlement. |'
  prefs: []
  type: TYPE_TB
- en: '| **Autonomous and incentivized** | Independent and autonomous machines are
    incentivized to enable and maintain blockchain networks. Autonomous machines have
    no interest in the contents of the transactions. Rather they are incentivized
    to enable the transactions. They may also be incentivized to execute smart contracts.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Tokenization** | Tokenization is the digital representation of a physical
    or abstract thing. In essence, an item may be symbolically represented as a digital
    token. Many similar items may be tokenized forming new markets. Important features
    of tokenization include non-replicability, user defined restrictions for ownership
    transfer, and market creation. |'
  prefs: []
  type: TYPE_TB
- en: '| **Smart contracts** | A smart contract is a computer program that is executed
    by a blockchain network. Smart contracts codify two or more peer-to-peer transactions.A
    smart contract’s terms and conditions are verified by the blockchain network and
    when the appropriate terms and conditions are met, the contract is executed. |'
  prefs: []
  type: TYPE_TB
- en: '| **Cost per transaction** | Each transaction includes incentives to support
    the network. In some cases, single small transactions may cost several dollars.Without
    financial incentives the autonomous machines will not play their role in enabling
    transactions and maintaining the network. |'
  prefs: []
  type: TYPE_TB
- en: There are many blockchains with their own specialized attributes. Once a blockchain
    *configuration* is agreed upon, then the importance of each blockchain attribute
    is scored for each business case. The sum of the scores for a use-case gives an
    overall blockchain score for a business case.
  prefs: []
  type: TYPE_NORMAL
- en: Tying the attribute symbols together with a diagram helps develop a score. A
    score of 100/100 indicates an attribute is critical for the use-case. Similarly,
    a low score, of say 25/100, indicates an attribute is unimportant for a use-case.
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 7.2:     An Example Use-Case Score Card.**'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Blockchain Attributes** | **Use-Case Score (0–100)** | **Symbol** |'
  prefs: []
  type: TYPE_TB
- en: '| Public ledger |  | ![image](../images/C07-TAB2-1.jpg) |'
  prefs: []
  type: TYPE_TB
- en: '| Peer-to-peer blockchain |  | ![image](../images/C07-TAB2-2.jpg) |'
  prefs: []
  type: TYPE_TB
- en: '| Autonomous and incentivized |  | ![image](../images/C07-TAB2-3.jpg) |'
  prefs: []
  type: TYPE_TB
- en: '| Tokenization |  | ![image](../images/C07-TAB2-4.jpg) |'
  prefs: []
  type: TYPE_TB
- en: '| Smart contracts |  | ![image](../images/C07-TAB2-5.jpg) |'
  prefs: []
  type: TYPE_TB
- en: '| Cost per transaction |  | **$/Tx** |'
  prefs: []
  type: TYPE_TB
- en: '| Total score |  |  |'
  prefs: []
  type: TYPE_TB
- en: '[Table 7.2](#tab2) shows attributes of blockchain technology. This table has
    both a score for the importance of each of the attributes as well as a symbol.
    The symbols are for use-case diagrams. The idea is to build use-case diagrams
    for different business problems using a common set of symbols. The semantics of
    these symbols should be well defined for all interested parties. This is best
    done in several ways since the stakeholders will have different backgrounds as
    well as different vocabularies. [Table 7.1](#tab1) gives use-case attribute definitions.'
  prefs: []
  type: TYPE_NORMAL
- en: 7.5\. APPLYING THE FRAMEWORK
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are two broad approaches to find effective applications of blockchain
    technology to business. The *top-down approach* is to start with a business challenge
    and determine if blockchain attributes may contribute to its solution. The *bottom-up
    approach* is to take key blockchain attributes and seek business challenges where
    blockchain is applicable. Both top-down and bottom-up approaches may work together
    as hybrid approaches to develop pertinent applications of blockchain. Hybrid approaches
    are often iterative top-down and bottom-up approaches to applying blockchains.
  prefs: []
  type: TYPE_NORMAL
- en: 7.5.1\. A Top-down Approach
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are a number of flowcharts for checking if blockchain may contribute to
    the solution of a business problem. The top-down approach starts, in such flowcharts,
    with a business problem. The objective is to determine if blockchains offer a
    good solution. The business needs are often dissected into chunks that may be
    solved using particular technology attributes. Sometimes these business attributes
    fit only particular blockchains. Other times, the business attributes are good
    for most blockchains.
  prefs: []
  type: TYPE_NORMAL
- en: 'The overriding question is about the role blockchain attributes play in solving
    the business challenges. This may define the particular blockchain of interest.
    In the end, this selection gives the next questions: Will any attribute enhance
    a current process, contribute to a novel solution of a process or create a new
    process?'
  prefs: []
  type: TYPE_NORMAL
- en: In the top-down approach, the blockchain attributes are fixed and the business
    issues are fitted to them. For example, consider a business challenge. Broadly
    there are two situations. In the first situation, there currently is a solution
    to the problem at hand. In these situations, the existing solution may be used
    as a guide for finding a blockchain-based solution. In the second situation, the
    problem is currently unsolved. Such problems may have good conventional solutions
    without blockchain. Such conventional solutions should be vetted first so there
    is a basis of comparison for blockchain and non-blockchain solutions. Blockchains
    should be carefully vetted and the reasoning that a blockchain is required for
    a solution should be carefully documented.
  prefs: []
  type: TYPE_NORMAL
- en: Steps for top-down vetting of blockchains for business challenges are as follows;
  prefs: []
  type: TYPE_NORMAL
- en: 'Break this challenge into a graph of sub-challenges:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: – Find suitable blockchains for this challenge and its sub-challenges.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: – The structure of this graph reflects the dependences in the challenge.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: – Determine dependences of the blockchains under consideration.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'List key blockchain attributes such as those in [Table 7.2](#tab2):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: – See which attributes contribute to solutions of the sub-challenges.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: – Determine if the dependency structure of the challenge matches the dependencies
    in blockchains.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Score each blockchain attribute for this problem. Sum the scores and analyze
    the total.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7.5.2\. A Bottom-up Approach
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This approach starts with attributes of blockchains. Initially, consider general
    blockchain attributes. There are a number of attributes common to all blockchains
    such as peer-to-peer transactions, smart contracts, tokenization, etc. Next specific
    blockchain attributes may be considered such as flexible smart contracts with
    average block generation under a specified time.
  prefs: []
  type: TYPE_NORMAL
- en: These technology attributes address complex business challenges. In addition,
    new or unexpected business challenges maybe sought, where these attributes will
    generate a previously untapped value. Once again, the goal is to determine if
    these blockchain attributes enhance, improve or create a new solution. In this
    case, first list all blockchain attributes of interest. [Table 7.2](#tab2) shows
    selected blockchain attributes. Next, focusing on properties of these attributes,
    run through all business processes that may be improved using any of these attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is famously called “a solution in search of a problem.” Many times, such
    a perspective may not offer quick results. Rather, this approach may help understand
    the blockchain landscape and the opportunities it offers for potential business
    challenges. Steps for bottom-up vetting of blockchains for business challenges
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: Determine if general blockchain attributes will be used or attributes of specific
    blockchains will be the focus.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Generate useful and relevant business challenges that may be enhanced with
    blockchain attributes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: – The business challenges should be broken into dependency graphs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: – Align the blockchain attributes along dependencies.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Focus on the graph components where blockchain attributes make a difference.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Score the blockchain(s) attributes in these cases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sum the scores and analyze the blockchain contributions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We advocate a formal approach to both bottom-up and top-down approaches to apply
    blockchains. Advantages include creating a structured thought process, understanding
    and documenting obstacles, a priori determination of viable solutions, etc. Of
    course, it is well worth saving what is learned for the future. Since later on,
    new business problems may appear. Having a keen understanding of the issues and
    applications will lead quickly to better outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: '7.6\. SMART CONTRACT: A DISTINCTIVE FEATURE'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: New technology is often not well understood. It is often complex and in early
    stages of development. Its technical attributes or benefits may not be clear.
    Early implementations may be unstable and they may fall short in a number of ways.
    Nonetheless, new technology is critical for growing the economy. But, new technology
    may be championed for any number of good or bad reasons.
  prefs: []
  type: TYPE_NORMAL
- en: A key question is what unique characteristics does blockchain offer for business?
    It is common for blockchain proposals to seem extraneous. One of the first things
    to look at is why can’t this business problem be solved using a relational or
    NoSQL database system?
  prefs: []
  type: TYPE_NORMAL
- en: There are proposals where blockchain offers new value. Today, these technologies
    or proposals usually center on public shared ledgers where the cost of maintaining
    the ledgers is paid by the peers involved in the transactions.
  prefs: []
  type: TYPE_NORMAL
- en: The use of smart contracts is also a key linchpin for blockchain applications.
    Smart contracts have been a key feature of early developments of blockchain. The
    inception of blockchain in the context of Bitcoin incorporated smart contracts.
    The feature of smart contracts were further developed and made more integral in
    the Ethereum’s domain. In Ethereum’s case, smart contracts are perhaps the most
    significant feature. There are a number of languages for writing smart contracts
    in Ethereum.
  prefs: []
  type: TYPE_NORMAL
- en: Traditional paper contracts are well-structured documents. The terms used in
    a contract are defined upfront for use throughout the contract. Contracts are
    divided into clauses. Each clause has a narrow focus. Each clause must not contradict
    law or regulations. Often subsequent clauses build on prior clauses and even prior
    contracts. The meaning of terms and conditions specified sometimes comes into
    question. In the worst case, questions regarding the meaning of terms and conditions
    may resort to case law, or rarely litigation.
  prefs: []
  type: TYPE_NORMAL
- en: Smart contracts are purely digital contracts. They are written in a programing
    language so they may be executed by the blockchain. Such contract programing languages
    are often object oriented. The object-oriented programing paradigm is a good fit
    for aspects of smart contracts. For example, each class may represent contract
    clause. Class containment may indicate clause dependencies. That is, if one main
    clause must have a sub-clause to be valid to execute the main clause, then this
    sub-clause can be contained in the main clause. For instance, to have a driver’s
    license, a driver may be required to have a vision correction form as well as
    an organ donor form. Both details of the vision correction as well as an organ
    donor form may be contained in the legal driver’s license document. Inheritance
    extends or captures already agreed upon details from other clauses. For example,
    a law encompassing all sales taxes may start by inheriting from a point-of-sale
    tax. The smart contract could be coded to automatically set money aside for sales
    tax as and when a sale is finalized.
  prefs: []
  type: TYPE_NORMAL
- en: Concerns with object-oriented contract languages include questions about polymorphism,
    dynamic scope and global pointer variables. In object-oriented languages, polymorphism
    sometimes occurs when the same operator or operation has different meanings in
    different contexts. This may be useful or this may add to confusion to the terms
    of the contract for human understanding. Similarly, a number of object-oriented
    languages have dynamic scope. Dynamic scope may lead to same expression to result
    in different values when executed in different contexts. Finally, global pointer
    references may lead to one value having two different meanings.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, good programing languages have very well-defined semantics.
    Indeed, many times programing language semantics are defined in formal mathematical
    terms. Therefore, we can prove theorems or significant facts about some programs
    in certain programing languages. These facts may include notions of correctness.
    This squeezes out a lot of potential for ambiguity. Further, some programing languages
    have built in theorem provers. For example, declarative programing languages are
    given facts and relations and derive results or solutions.
  prefs: []
  type: TYPE_NORMAL
- en: 7.7\. SAMPLE USE-CASES
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use-cases take many shapes and forms. Some of the use-cases are discussed in
    greater detail in subsequent chapters. The purpose here is to introduce some use-cases
    to illustrate how the blockchain technology fits business needs.[²](#fn2) We cover
    visual models in evaluating use-cases. The visualization often helps broaden the
    use-case discussion with all stakeholders. Two use-cases here are tokenization
    with smart contracts and E-notary provide the context for demonstrating key features
    of blockchain technology.
  prefs: []
  type: TYPE_NORMAL
- en: 7.7.1\. Tokenization with Smart Contracts
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Fig. 7.2:    Basic Tokenization with Smart Contracts Use-Case.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/C07-FIG2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The basic use-case for tokenizing a property in a blockchain is in the use-case
    diagram in [Fig. 7.2](#fig2). This shows the fundamental functions in this use-case.
    More details can be included in other use-case diagrams. For example, the process
    of getting meta-data from a property deed and using that for tokenization can
    itself require another use-case diagram. Property deeds fit in the blockchain
    model since they are high-value items. They do not continuously trade. Smart contracts
    fit well for property deeds since there are complex terms and conditions that
    have to be met.
  prefs: []
  type: TYPE_NORMAL
- en: A simple but popular illustration of tokenization is in the novel application
    of “cryptokitties.” Cryptokitties is a distributed application. This application
    has people breed digital cats. They also trade digital cats. Using clever tokenization
    and smart contracts each cat is unique and cannot be cloned. However, CryptoKittens
    are bred with pairs of male and female digital cats. There is even a notion of
    genetics in the system. Each cryptokittie has its own digitally encoded genome.
    In this case, the tokens represent the abstract digital cats including their looks
    and genome.
  prefs: []
  type: TYPE_NORMAL
- en: The genetics of a cryptokitty gives the kitty colors, stripes, smiles, etc.
    During mating, genetic algorithms (GAs) randomly combine strings of bits from
    the cryptokitties parents to generate new genetics representing new features.
    These new features are expressed in the new cryptokittie.
  prefs: []
  type: TYPE_NORMAL
- en: Breeding cryptokitties requires virtually siring. Virtual siring uses GAs to
    combine genetics of the two breeding cryptokitties. The newly created cryptokitties
    may later be auctioned. They may also be kept as additional virtual pets. Their
    value is based on their provenance and particularly on their interesting features.
    Generally, high-value cryptokitties breed high-value cryptokittens.
  prefs: []
  type: TYPE_NORMAL
- en: Cryptokitties is one of the early successful applications of blockchains. Blockchains
    have numerous applications, but distributed gaming like in cryptokitties is enabled
    by blockchains. Since cryptokitties have real value, cryptography plays an important
    role for preserving such value. The distributed and autonomous nature of blockchains
    also contribute to the effectiveness of such distributed applications.
  prefs: []
  type: TYPE_NORMAL
- en: 7.7.2\. E-Verification Platforms
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Blockchain e-identity and e-notary systems validate individual’s identities
    and their roles in organizations. E-identity is often peer-to-peer. In many cases,
    official roles in organizations is public knowledge so public ledgers fit here.
  prefs: []
  type: TYPE_NORMAL
- en: E-identity and e-notary systems add a solid foundation for smart contracts.
    There are a number of blockchain-based e-identity systems to help refugees, underserved,
    or poor populations. E-identity offers improvements to the traditional paper-based
    identity. Such improvements include a verified series of transactions which may
    be vetted with the identity holder.
  prefs: []
  type: TYPE_NORMAL
- en: E-notary systems are designed to enhance or replace traditional notary systems
    to identify individuals entering agreements or signing contracts. E-notary systems
    are important for smart contracts. E-notary systems ground smart contracts in
    the non-digital world.
  prefs: []
  type: TYPE_NORMAL
- en: '[Fig. 7.3](#fig3) shows the process of making an e-notary token. A person may
    take the biomarkers, such as fingerprints, passwords and other information such
    as birthplace, friends’ names, etc. Of course, these tokens should be locked down
    using cryptography. Otherwise, the identity could be copied. The E-notary then
    records the usual traditional signatures and paper records, such as driver’s license,
    passports and birth certificates on video. The video may be part of the token
    as well and it may reside in another location.[³](#fn3) Video does have the issue
    deep fakes that may hamper adoption of E-notaries.'
  prefs: []
  type: TYPE_NORMAL
- en: Putting credentials and diplomas on blockchains is becoming a reality. On demand
    courses and credentials is a reality today with the internet and related technology.
    This brings to question the transferability of courses and credentials. Having
    credentials and courses easily transferrable will add a great deal of value to
    them. This will also be a time and resource saver for the institutions, trainees
    and employers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fig. 7.3:    E-notary System.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/C07-FIG3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 7.7.3\. Stock Trading Back Office
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Today’s back office processing of a stock trading firm reflects the time when
    stock trading was paper based. These paper-based processes predate the modern
    computing era by hundreds of years. Back office processing for finance has a great
    deal of redundancy.[⁴](#fn4) Much of this redundancy is in reconciliation and
    verification. For example, validation is to determine that a trade was properly
    executed. Where reconciliation is getting all parties in a trade to agree to the
    trade and validate the details, such as the time of execution, quantity of shares
    and the valuation at the time.
  prefs: []
  type: TYPE_NORMAL
- en: Settling trades is the process where each party compares and verifies that their
    transactions are correctly recorded. There are a number of players that settle
    trades. The primary settling groups include the broker, the clearing house, and
    the custodians. These groups settle both sides of each trade. The seller side
    has all of these back office settlement partners. Similarly, the buying side has
    these settlement partners. All of these parties validate each other’s records.
    Their accounting is also audited. They are all very important to support a functional
    financial market. So they may also be audited by the Office of the Controller
    of the Currency and other Federal agencies.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fig. 7.4:    Parties Involved in Settling Trade of Company Stock.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/C07-FIG4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[Fig. 7.4](#fig4) gives a high-level view of back office functions. Brokerage
    houses usually keep most stock holdings in street name. Street name is a level
    of discretion that identifies the brokerage house as the keeper of shares. Of
    course, the brokerage account holders generally own the stock, though it is in
    the street name. In essence street name allows a brokerage house to represent
    their clients and keep their identities secure. Having all brokerage houses keeping
    all the shares in their names makes it easier for the clearing corporation to
    net out the total share ownership after each day of trading. The custodian holds
    the street name stock while tracking the actual brokerage account owners. Details
    of who owns which shares is critical for many reasons including who gets the dividends,
    share splits, new issues, etc. The dividend and transfer agents focus on these
    actions. These data are also reported to tax authorities and systems to allow
    share voting.'
  prefs: []
  type: TYPE_NORMAL
- en: In the past share certificates were printed, after each trade, with individual
    owner’s names on them. When shares were traded, the old paper certificates were
    destroyed and new paper certificates were printed with the new owner’s name on
    them, and so on. So having depositories, custodians, transfer agents was critical
    to find, store, move, print and destroy physical certificates.
  prefs: []
  type: TYPE_NORMAL
- en: Today most stock is represented in book-entry form. That is, computing systems
    represent shares and tie those shares to their owners. These representations are
    separate and redundant. Blockchains have a single point to represent consensus.
    These consensuses may represent trades as a single source of truth. These transactions
    are validated by autonomous machines and stored permanently. These permanent transaction
    stores also give provenance of the trades. Also, these single sources of truth
    can be used for audits.
  prefs: []
  type: TYPE_NORMAL
- en: There may be no need to hold share in street name. Rather, keeping anonymity
    of securities holdings may be done by not publicly divulging public keys identifying
    the securities owners. Aggregating out net shares per brokerage firm is no longer
    necessary as are many of the other intermediary functions. Therefore, adopting
    a blockchain solution to a traditional problem will generate efficiency and reduce
    overhead costs for the financial trading houses.
  prefs: []
  type: TYPE_NORMAL
- en: 7.7.4\. Insurance
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Insurance is based on pooling resources to cover rare adverse events. Traditionally
    underwriters syndicate insurance policies. Underwriters are organizations that
    get paid to assume the risk of adverse events defined in contracts. That is, if
    a covered adverse event occurs, then these underwriters make the payments to the
    victims. So, syndicated underwriting is the process of diversifying risk with
    a group of underwriters. This age-old practice could be recast as a peer-to-peer
    model. Individual items’ insurance policies may be tokenized in insurance smart
    contracts.
  prefs: []
  type: TYPE_NORMAL
- en: Smart insurance contracts have a number of interesting advantages over traditional
    insurance contracts. For example, validating terms and conditions through the
    internet are very appealing. For example, crop insurance may be based on the amount
    of rain. If the amount of rain is below a pre-determined threshold, then this
    generates an insurance adjustment. An instance adjustment is the payment for a
    validated insurance claim. Smart contracts like this may also reduce the time
    needed for insurance adjustments. Insurance claims adjustors validate some insurance
    claims. Claims adjusters may even be deployed by smart contracts. Images or other
    information can be loaded into smart contracts and validated.
  prefs: []
  type: TYPE_NORMAL
- en: Insurers often pool their liabilities and insure them using reinsurance. Reinsurance
    is insurance for the insurance firms. Reinsurance is heavily diversified in numerous
    ways. For example, it may be diversified geographically, it may be diversified
    by types of insurance, by numbers of policies, etc. An insurance smart contract
    may contain parameters of an insurance policy’s reinsurance. This will give clarity
    and transparency to policies so the insured can be clearer about the risks of
    a policy. Also object-oriented smart contract languages will be very suitable
    to this type of contract containment.
  prefs: []
  type: TYPE_NORMAL
- en: 7.8\. CAVEATS AND RISKS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Test networks are not customer facing functional requirements. However, they
    are critical for evaluating and implementing systems. As new blockchains are developed
    and implemented, having a robust testing of networks is critical.
  prefs: []
  type: TYPE_NORMAL
- en: Broad distribution of the support and control structure is needed for the blockchain
    network. This distribution is about control not about geography. Distributed control
    is a key tenet of blockchains. This is because a weakness of blockchain networks
    is from their consensus algorithms. Blockchain consensus algorithms determine
    validity by voting. The majority of network nodes determines whether a block or
    transaction is valid. Therefore, if many nodes fall under the control of one entity,
    then the blockchain is vulnerable. A 51% attack is when more than half of the
    participants in a blockchain consensus computation are compromised. That is, such
    a compromise can vote improperly giving the wrong consensus.
  prefs: []
  type: TYPE_NORMAL
- en: One of the important contributions of blockchains is their clever use of cryptography
    maintains previous transactions and locks in distributed consensus of disinterested
    parties. Quantum computing aside, 51% attacks do not compromise the cryptography.
    Rather, a 51% attack is a direct attack on the consensus mechanism. This means
    blockchains with few participants are more vulnerable than larger blockchains
    with large numbers of participants since small numbers of participants are easier
    to capture and control.
  prefs: []
  type: TYPE_NORMAL
- en: 7.9\. SUMMARY
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: New blockchain attributes may be driven by use-cases and use-cases may be validated
    by new blockchain attributes. Evaluating new use-cases for blockchain may be done
    using diagrams like the ones in this chapter. These visual representations bring
    different stakeholders together with a common symbology. Having scores tied to
    the images represented in these diagrams will help in their evaluation. New industries
    may be created by blockchain technologies. For example, distributed apps and smart
    contracts may capture newly discovered economic force. Use-cases will help expedite
    the validation of these new applications.
  prefs: []
  type: TYPE_NORMAL
- en: NOTES
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[1.](#ifn1) See Tasca and Tessone (2019).'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.](#ifn2) Further information on how [https://www.ivarjacobson.com/sites/default/files/field_iji_file/article/use-case_2_0_jan11.pdf](https://www.ivarjacobson.com/sites/default/files/field_iji_file/article/use-case_2_0_jan11.pdf).
    Also see Bittner and Spence (2003).'
  prefs: []
  type: TYPE_NORMAL
- en: '[3.](#ifn3) For further details, see Sward, Vecna, and Stonedahl (2018).'
  prefs: []
  type: TYPE_NORMAL
- en: '[4.](#ifn4) For greater detail on the current process at trading firms, see
    David M. Weiss (2006).'
  prefs: []
  type: TYPE_NORMAL
- en: CONTRIBUTOR CONTACT INFORMATION
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Dr. Phillip G. Bradford is the director of the computer science program at the
    University of Connecticut, Stamford, USA. Phil’s email addresses are [phillip.bradford@uconn.edu](mailto:phillip.bradford@uconn.edu)
    and [phillip.g.bradford@gmail.com](mailto:phillip.g.bradford@gmail.com).
  prefs: []
  type: TYPE_NORMAL
- en: Roger M. Benites can be reached at [Rbenites@blockhivetechnologies.com](mailto:Rbenites@blockhivetechnologies.com)
  prefs: []
  type: TYPE_NORMAL
