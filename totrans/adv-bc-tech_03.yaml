- en: © The Author(s), under exclusive license to Springer Nature Switzerland AG 2022Y.
    Maleh et al. (eds.)Advances in Blockchain Technology for Cyber Physical SystemsInternet
    of ThingsTechnology, Communications and Computing[https://doi.org/10.1007/978-3-030-93646-4_3](https://doi.org/10.1007/978-3-030-93646-4_3)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 作者(们)，在Springer Nature Switzerland AG 2022年以独家许可下授权Y. Maleh等人（主编）Advances
    in Blockchain Technology for Cyber Physical SystemsInternet of ThingsTechnology，Communications
    and Computing[https://doi.org/10.1007/978-3-030-93646-4_3](https://doi.org/10.1007/978-3-030-93646-4_3)
- en: Blockchain-Based Medical Records System
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于区块链的医疗记录系统
- en: 'Nisarg Soni^([1](#Aff7)), Saurav Tayal^([1](#Aff7)), Tarun Kumar Singh^([1](#Aff7))
    and Gourinath Banda^([1](#Aff7) [ ](#ContactOfAuthor4))(1)Indian Institute of
    Technology Indore, Simrol, Madhya Pradesh, IndiaGourinath Banda (Corresponding
    author)Email: [gourinath@iiti.ac.in](mailto:gourinath@iiti.ac.in)KeywordsElectronic
    medical recordsBlockchainIPFSEthereum'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Nisarg Soni^([1](#Aff7))，Saurav Tayal^([1](#Aff7))，Tarun Kumar Singh^([1](#Aff7))和Gourinath Banda^([1](#Aff7) [ ](#ContactOfAuthor4))(1)印度印度尔工业技术学院，Madhya
    Pradesh，Simrol，印度Gourinath Banda（通讯作者）电子邮件：[gourinath@iiti.ac.in](mailto:gourinath@iiti.ac.in)关键词电子医疗记录区块链IPFSEthereum
- en: 1 Introduction
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1 简介
- en: Medical record management is a problem as old as medicine itself. Transfer and
    sharing of data between all the involved entities have always been the crucial
    components of the medical industry. Each entity involved in this process relies
    on non-tampered and complete data for the complete system to work. Along with
    interoperability, there is a confidentiality concern associated with protecting
    individual records from data leaks as health is a compassionate and private aspect
    of life.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 医疗记录管理是一个与医学本身一样古老的问题。数据的传输和共享始终是医疗行业的关键组成部分。参与此过程的每个实体都依赖于未篡改和完整的数据，以使整个系统正常运行。除了互操作性之外，还存在保护个人记录免受数据泄露的机密性问题，因为健康是生活中令人同情和私密的一面。
- en: The onset of technology brought electronic solutions to traditional paper-based
    systems. However, these systems are based on a centralized architecture, that
    is, client-server architecture. In such systems, data and functionality is served
    by a single server to multiple clients via the internet. All the client data and
    logic reside on the server. These systems have associated drawbacks like a single
    point of attack and failure where any attack or failure on the server would compromise
    the entire system. There is also an issue of centralization of power where the
    entity in control over the server controls all data and access to it. A better
    solution to the drawbacks would be decentralization. Decentralized systems are
    more robust against failures and attacks, without the centralization of power
    over the system. Blockchain is a distributed ledger. It is a decentralized system,
    and it is useful in targeting the problems associated with centralization.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 技术的出现为传统的纸质系统带来了电子解决方案。然而，这些系统基于集中式架构，即客户端-服务器架构。在这种系统中，数据和功能由单个服务器通过互联网提供给多个客户端。所有客户端数据和逻辑都驻留在服务器上。这些系统存在与之相关的缺点，例如单点攻击和故障，其中服务器上的任何攻击或故障都会危及整个系统。还存在权力集中化的问题，控制服务器的实体控制所有数据及其访问。解决这些缺点的更好方法是去中心化。去中心化系统对故障和攻击更加强大，而不会集中控制系统。区块链是一个分布式账本。它是一个去中心化系统，对于解决与集中化相关的问题非常有用。
- en: This chapter proposes a system that allows the interoperable exchange of medical
    records with proper authorization. This system ensures that a user of the system
    must ask for a patient’s permission to view and upload their medical records.
    To achieve this, we deploy smart contracts on the blockchain network. Through
    the use of the deployed smart contract, a patient can grant read and write permissions
    to different entities, namely, hospitals and insurance agencies. The use of blockchain
    ensures that the authorization mechanism is tamper-proof.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章提出了一个系统，允许在适当授权的情况下交换医疗记录。该系统确保系统用户必须请求患者的许可才能查看和上传其医疗记录。为了实现这一点，我们在区块链网络上部署智能合约。通过使用部署的智能合约，患者可以向不同实体（即医院和保险机构）授予读取和写入权限。使用区块链确保授权机制不可篡改。
- en: This chapter is organized into eight sections. The first section describes the
    importance of medical records and how a blockchain-based decentralized approach
    is better than the current centralized ones for their storage. Section two explains
    the concepts used in the solution like blockchain, cryptographic techniques, InterPlanetary
    File System (IPFS), and the patient lifecycle for visiting the hospital. Section
    three discusses some related works done in the field. Section four describes the
    proposed solution architecture. Section five explains some key implementation
    details, and section six details the various read/write workflows. Finally, sections
    seven and eight discuss our proposed solution analysis and the conclusion and
    the future work, respectively.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章分为八个部分。第一部分描述了医疗记录的重要性，以及基于区块链的去中心化方法如何比当前的集中式方法更好地存储它们。第二部分解释了解决方案中使用的概念，如区块链、密码学技术、星际文件系统（IPFS）和患者在医院就诊的生命周期。第三部分讨论了该领域中的一些相关工作。第四部分描述了提出的解决方案架构。第五部分解释了一些关键实施细节，第六部分详细说明了各种读/写工作流程。最后，第七和第八部分讨论了我们提出的解决方案分析以及结论和未来工作。
- en: 2 Related Works
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2 相关工作
- en: Earlier attempts at electronic health records (EHRs) were based on centralized
    systems with a centralized access control mechanism where the patients had little
    to no say over access control of their data. Such systems first had an in-house
    centralized data storage like in the hospital or the clinic itself, which did
    not improve any security or privacy compared with earlier pen-and-paper systems.
    Over time, cloud-based storage took over and provided more security for the stored
    data. However, they still were centralized solutions and made the hospitals and
    the authorities the data owner instead of the patient, who should have been the
    actual owner of the data.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的电子健康记录（EHR）尝试基于集中式系统，具有集中式访问控制机制，患者对其数据的访问控制几乎没有发言权。这样的系统首先有了类似医院或诊所内的内部集中式数据存储，与早期的纸笔系统相比，这并没有改善任何安全性或隐私性。随着时间的推移，基于云的存储取代了这一点，并为存储的数据提供了更多的安全性。然而，它们仍然是集中化的解决方案，并使医院和当局成为数据所有者，而不是应该是数据的实际所有者的患者。
- en: Ying et al. [[1](#CR1)] proposed a policy preserving EHR systems based on CP-ABE
    to allow secure sharing of EHR data over the cloud. Though this allowed for more
    secure storage and health data sharing, it was still wholly a centralized solution.
    No kind of decentralization was explored in the solution.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Ying等人[[1](#CR1)]提出了一种基于CP-ABE的策略保留EHR系统，以允许在云上安全共享EHR数据。尽管这使得存储和健康数据共享更加安全，但仍然完全是一种集中化的解决方案。解决方案中未探讨任何形式的去中心化。
- en: Liang et al. [[2](#CR2)] used blockchain to maintain the health data’s integrity
    and allow secure access control. Their solution uses a cloud-based database to
    store health-related data, data requests from healthcare providers and insurance
    companies, data access records, and data access control policy. In their solution,
    the health data collected from the user’s wearable devices and the data obtained
    from healthcare providers is processed to create a hashed data entry which is
    then uploaded to the blockchain network. Also, a decentralized permission management
    protocol is used to process each data access request, for the user’s personal
    health data, from healthcare providers and health insurance companies. It is in
    the hands of the data owner to provide permission if they want. These access control
    policies ensure stability as they are stored on the blockchain in a decentralized
    manner. Besides that, every time an access request is made and any access activity
    is done, the blockchain, a distributed ledger, is used to record that activity.
    This record can be used for further auditing or investigation. In this case, though
    the blockchain provides security and integrity, the actual data is stored in a
    centralized database in the cloud, which brings a lot of problems, as already
    discussed.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Liang等人[[2](#CR2)]使用区块链来维护健康数据的完整性并允许安全访问控制。他们的解决方案使用基于云的数据库来存储与健康相关的数据、来自医疗提供者和保险公司的数据请求、数据访问记录和数据访问控制策略。在他们的解决方案中，从用户可穿戴设备收集的健康数据以及从医疗提供者获取的数据被处理以创建一个散列数据条目，然后上传到区块链网络。此外，使用去中心化的权限管理协议来处理来自医疗提供者和健康保险公司对用户个人健康数据的每个数据访问请求。数据所有者有权提供许可，如果他们愿意的话。这些访问控制策略确保了稳定性，因为它们以分散的方式存储在区块链上。除此之外，每次发出访问请求并进行任何访问活动时，都会使用区块链，即分布式分类帐，记录该活动。这条记录可以用于进一步审计或调查。在这种情况下，尽管区块链提供了安全性和完整性，但实际数据存储在云中心化数据库中，这带来了许多问题，如前所述。
- en: Vijayakumar et al. [[3](#CR3)] used hyperledger fabric blockchain to store all
    the health data in a decentralized manner. In their solution, the various nodes
    are connected to form the blockchain network such that the data is distributed
    among the nodes. This gives each node the responsibility and the opportunity to
    handle its data which makes the solution patient-centric and gives the control
    of the data in the user’s hands. The blockchain is a distributed ledger that allows
    organizations to store medical information. As the data is stored in the blockchain
    in a decentralized manner, it allows for trust to be created among the participants
    of this network. By integrating hyperledger fabric, all medical information is
    recorded in an untamperable manner and any medical organization that has added
    the details can be tracked easily. Every transaction is stored in the blockchain
    and all the medical details of an individual that have ever been recorded can
    be accessed using query tools. They have discussed the issues associated with
    centralized systems and tried to overcome them through their decentralized solution.
    This allows integrity and security of data, but their solution suffers from the
    issues of storing large amounts of data on the blockchain itself.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Vijayakumar等人[[3](#CR3)]使用超级账本区块链来以分散的方式存储所有健康数据。在他们的解决方案中，各个节点连接在一起形成区块链网络，使数据分布在节点之间。这使得每个节点有责任和机会处理其数据，从而使解决方案以患者为中心，并将数据控制在用户手中。区块链是一种分布式分类帐，允许组织存储医疗信息。由于数据以分散的方式存储在区块链中，因此允许在该网络的参与者之间建立信任。通过集成超级账本，所有医疗信息都以不可篡改的方式记录下来，并且可以轻松跟踪已添加详细信息的任何医疗组织。每笔交易都存储在区块链中，并且可以使用查询工具访问曾经记录的个人的所有医疗细节。他们已经讨论了与中心化系统相关的问题，并尝试通过他们的分散解决方案来克服这些问题。这允许数据的完整性和安全性，但他们的解决方案面临将大量数据存储在区块链本身的问题。
- en: Dubovitskaya et al. [[4](#CR4)] created a patient-centric blockchain-based EHR
    (electronic health record) data management system. They propose a permissioned
    blockchain-based system for EHR data sharing and integration. Their solution makes
    use of the hyperledger fabric blockchain. Each hospital acts as a node in the
    blockchain network with its integrated EHR system. These hospital nodes together
    form up the blockchain network. Patients and doctors are connected using a web-based
    interface. This interface is used to initiate transactions to share EHR. In this
    solution, a hybrid data management system is used. In this hybrid approach, only
    the management metadata is stored on the chain. An off-chain cloud-based storage,
    Health Insurance Portability and Accountability Act-compliant is used to store
    the EHR data. This data is also encrypted before storing. The shared EHR data
    is secured using digital signatures and public key infrastructure–based asymmetric
    encryption. In this solution, a distributed ledger is used as a shared immutable
    and transparent history of all the actions performed by the users; these actions
    include defining access control policies and sharing, accessing, and modifying
    the data, and though the data is stored in a secured manner using various encryption
    schemes, however, the storage is still a centralized one.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Dubovitskaya 等人 [[4](#CR4)] 创建了一个以患者为中心的基于区块链的电子健康记录（EHR）数据管理系统。他们提出了一种基于许可的基于区块链的
    EHR 数据共享和集成系统。他们的解决方案利用了超级账本区块链。每家医院在区块链网络中充当一个节点，并拥有其集成的 EHR 系统。这些医院节点共同组成了区块链网络。通过基于
    Web 的界面连接患者和医生。该界面用于启动共享 EHR 的交易。在这个解决方案中，使用了混合数据管理系统。在这种混合方法中，只有管理元数据存储在链上。符合《健康保险可移植性和责任法案》的云端存储用于存储
    EHR 数据。在存储之前，此数据也经过加密。共享的 EHR 数据使用数字签名和基于公钥基础设施的非对称加密进行了安全保护。在这个解决方案中，使用分布式账本作为用户执行的所有操作的共享不可变透明历史记录；这些操作包括定义访问控制策略以及共享、访问和修改数据，尽管数据使用各种加密方案以安全方式存储，但存储仍然是集中式的。
- en: Sun et al. [[5](#CR5)] discuss a blockchain-based framework for electronic medical
    records sharing with fine-grained access control. They have proposed a distributed
    electronic medical records system with a search feature to easily find the records
    using blockchain and smart contract technology. In this solution, firstly, the
    electronic medical data that is obtained undergoes a hash calculation. The corresponding
    hash value obtained is then stored on the blockchain. This is done to ensure the
    authenticity and integrity of data. Then, the InterPlanetary File System (IPFS)
    stores encrypted electronic medical record data. Then the Ethereum blockchain
    is used to store the encrypted keyword index information of the medical records.
    Besides that, keyword search is implemented using a smart contract deployed in
    the Ethereum blockchain.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 孙等人 [[5](#CR5)] 讨论了一个基于区块链的电子医疗记录共享框架，具有细粒度的访问控制。他们提出了一个具有搜索功能的分布式电子医疗记录系统，使用区块链和智能合约技术轻松查找记录。在这个解决方案中，首先，获得的电子医疗数据进行哈希计算。然后将得到的相应哈希值存储在区块链上。这样做是为了确保数据的真实性和完整性。然后，星际文件系统（IPFS）存储加密的电子医疗记录数据。接着，以太坊区块链用于存储医疗记录的加密关键字索引信息。此外，使用在以太坊区块链上部署的智能合约实现关键字搜索。
- en: Furthermore, they use an attribute-based encryption scheme to decrypt encrypted
    electronic medical records and access only by the attributes meeting the access
    policy. This solution uses blockchain and smart contracts to maintain security
    and integrity and IPFS for secure decentralized storage of data. This solution
    makes the storage and access control as decentralized as possible using IPFS,
    blockchain, and smart contracts. Still, the access control system is doctor-centric,
    wherein the doctor or the medical practitioner provides access control to various
    entities, even the patients themselves.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，他们使用基于属性的加密方案来解密加密的电子医疗记录，并且只能由符合访问策略的属性进行访问。此解决方案使用区块链和智能合约来维护安全性和完整性，使用
    IPFS 来进行数据的安全分散式存储。该解决方案通过使用 IPFS、区块链和智能合约使存储和访问控制尽可能分散。尽管如此，访问控制系统仍然是以医生为中心的，其中医生或医疗从业者为各种实体提供访问控制，甚至包括患者自己。
- en: Our solution makes use of Ethereum and smart contracts to allow secure access
    control and IPFS for secure data storage besides using various encryption schemes
    to encrypt the data before storage and sharing. But our solution is completely
    patient-centric. All the power of access control is in the patient’s hands, and
    no one can access any kind of data without the patient’s approval. All this access
    control is encoded into the smart contract and, once deployed, cannot be tampered
    with in any way.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的解决方案利用以太坊和智能合约来实现安全访问控制和IPFS以及使用各种加密方案在存储和共享之前对数据进行加密。但是我们的解决方案完全以患者为中心。所有的访问控制权都掌握在患者手中，没有人可以在没有患者批准的情况下访问任何类型的数据。所有这些访问控制都编码到智能合约中，一旦部署，就无法以任何方式篡改。
- en: 3 Concepts
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3个概念
- en: Blockchain
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 区块链
- en: 'Blockchain burst onto the scene when it was introduced in 2008 in a whitepaper
    by Satoshi Nakamoto, “Bitcoin: A Peer-to-Peer Electronic Cash System.” He introduced
    a revolutionary new cryptocurrency named Bitcoin, wherein blockchain formed the
    underlying decentralized technology of the newly introduced currency. Blockchain
    is essentially a data structure wherein blocks are added one after the other and
    every new block is linked to the previous block through its cryptographic hash,
    forming a blockchain chain.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链在2008年通过中本聪在一篇名为《比特币：一种点对点的电子现金系统》的白皮书中的介绍而引起轰动。他推出了一种名为比特币的革命性新加密货币，在其中区块链形成了新引入的货币的基础分散技术。区块链本质上是一个数据结构，其中块是一个接一个地添加的，每个新块都通过其加密哈希与前一个块链接起来，形成一个区块链。
- en: The top-most block on the blockchain defines the state of the blockchain at
    any given instance. Blockchain acts as a distributed ledger system. It consists
    of a connected peer-to-peer network of users. This distributed ledger is replicated
    over the whole network on every peer’s system. It consists of transactions that
    are stored together in a block. As more transactions are carried out, they are
    grouped in a new block which is then added to the blockchain. To add a block to
    the blockchain, it must be confirmed by the majority of the peers that form the
    network through what is called a consensus protocol. Every peer sees and confirms
    the current state of the blockchain, and the state that is confirmed by the majority
    is accepted. These peers act according to the consensus algorithm, which allows
    choosing a peer who then adds a block to the blockchain and thus modifies the
    state of the blockchain.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链中最顶层的区块定义了任何给定时刻的区块链状态。区块链充当分布式分类帐系统。它由连接的点对点用户网络组成。这个分布式分类帐在每个节点系统上都被复制。它由一起存储在一个块中的交易组成。随着更多交易的进行，它们被分组到一个新的块中，然后添加到区块链中。要将一个块添加到区块链中，它必须通过所谓的共识协议得到大多数节点的确认。每个节点都看到并确认区块链的当前状态，而被大多数节点确认的状态将被接受。这些节点根据共识算法行事，该算法允许选择一个节点，然后将一个块添加到区块链中，从而修改区块链的状态。
- en: The cryptographic linking of blocks ensures that the blockchain system is tamper-proof.
    To create a malicious transaction, a user would need to control the systems of
    more than half of the total peers connected to the network. Since a blockchain
    network can have millions of peers, it is practically impossible for a malicious
    entity to achieve its intentions. This makes sure that the blockchain cannot be
    corrupted.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链的密码链接确保了区块链系统是防篡改的。要创建恶意交易，用户需要控制连接到网络的总节点数的一半以上的系统。由于区块链网络可以有数百万个节点，对于恶意实体来说，实际上是不可能实现其意图的。这确保了区块链不会被破坏。
- en: Transactions are created by accounts owned by anonymous users on the network.
    Their account addresses identify these accounts. Two keys – a private key and
    a public key – are associated with each account. These keys can be stored and
    managed with a wallet [[6](#CR6)]. There are several types of hardware and software
    wallets available. Users can access their accounts using their private key. The
    private key and the public key help create asymmetrically encrypted messages that
    could be sent to the network and create verifiable transactions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 交易是由网络上匿名用户拥有的账户创建的。他们的账户地址标识这些账户。每个账户都与两个密钥 - 私钥和公钥 - 相关联。这些密钥可以使用钱包[[6](#CR6)]存储和管理。有几种类型的硬件和软件钱包可供选择。用户可以使用他们的私钥访问他们的账户。私钥和公钥帮助创建可以发送到网络并创建可验证交易的非对称加密消息。
- en: The data stored on a blockchain is visible to everyone but cannot be changed
    or tampered with in any way. The distributed nature of blockchain combined with
    cryptography’s power creates a resilient system against attacks while maintaining
    data privacy and sharing. Thus, the transparency, accountability, and immutability
    associated with the data stored on the blockchain solve the problems of data privacy
    and security related to centralized systems, and the sensitivity of medical records
    necessitate these traits. These traits make blockchain a suitable system for storing
    and managing electronic medical records.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在区块链上的数据对所有人都是可见的，但不能以任何方式更改或篡改。区块链的分布式特性与加密学的力量结合在一起，创建了一个抵御攻击的强大系统，同时保持数据隐私和共享。因此，存储在区块链上的数据的透明度、问责制和不可变性解决了与集中式系统相关的数据隐私和安全问题，医疗记录的敏感性需要这些特征。这些特征使区块链成为存储和管理电子医疗记录的合适系统。
- en: Early cryptocurrencies used blockchain only for recording transactions as a
    distributed ledger, but Ethereum [[7](#CR7)] took it a step further by introducing
    an application layer over the simple blockchain, allowing users to write and execute
    code. Ethereum thus not only stores transactions but can also run scripts, making
    it a distributed computation technology instead of just a ledger. This gave rise
    to the concepts of smart contracts and distributed apps that are at the forefront
    of decentralized technology trying to solve centralization problems and are discussed
    in more detail ahead in this section.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的加密货币仅使用区块链来记录交易作为分布式分类帐，但以太坊[[7](#CR7)]通过在简单区块链上引入应用层进一步发展，允许用户编写和执行代码。因此，以太坊不仅存储交易，还可以运行脚本，使其成为分布式计算技术而不仅仅是分类帐。这催生了智能合约和分布式应用程序的概念，它们处于试图解决中心化问题的去中心化技术的前沿，并且在本节后面将更详细地讨论。
- en: Cryptography Techniques
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加密技术
- en: This section discusses symmetric and asymmetric cryptography techniques, which
    form the basis of security in our system.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论了对称和非对称加密技术，这是我们系统安全的基础。
- en: Symmetric Cryptography
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对称加密
- en: Symmetric cryptography or private key encryption makes use of a single secret
    key which is used to encrypt and decrypt data. It ensures that the data cannot
    be decrypted using some other key. Advanced Encryption Standard (AES) is a widely
    used symmetric encryption technique. Good key management is important when using
    this technique.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对称加密或私钥加密使用单个秘密密钥来加密和解密数据。它确保数据不能使用其他密钥解密。高级加密标准（AES）是一种广泛使用的对称加密技术。在使用该技术时，良好的密钥管理非常重要。
- en: Asymmetric Cryptography
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 非对称加密
- en: In asymmetric cryptography or public key encryption, a pair of keys – public
    and private – are used. The public key is distributed, while the private key is
    only known to the encryption initiator and is kept secret. Data once encrypted
    with the public key can only be decrypted with the associated private key. Asymmetric
    cryptography is heavily used in blockchain technology. RSA is one such common
    cryptography technique. It is based on the computational complexity involved in
    factorizing a large integer obtained from two large prime integers. Elliptic curve
    cryptography (ECC) is also a public key encryption technique better than RSA as
    it offers faster computation times and more robust encryption.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在非对称加密或公钥加密中，使用一对密钥 - 公钥和私钥。公钥是公开的，而私钥只有加密发起者知道，并且保密。一旦使用公钥加密数据，则只能使用关联的私钥解密。非对称加密在区块链技术中被广泛使用。RSA是一种常见的加密技术。它基于从两个大质数获得的大整数的因子分解所涉及的计算复杂性。椭圆曲线加密（ECC）也是一种比RSA更好的公钥加密技术，因为它提供了更快的计算时间和更强大的加密。
- en: IPFS (InterPlanetary File System)
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[IPFS（星际文件系统）](https://ipfs.io)'
- en: IPFS [[8](#CR8)] is a peer-to-peer, content-addressed, version-controlled file
    system. This system is decentralized by nature; thus, no single entity has control
    over it. The files in IPFS are replicated over the network of IPFS nodes. Their
    content identifies the files in an IPFS. Instead of identifying data by their
    storage location, called location addressing as done by URLs in today’s internet,
    IPFS uses the content itself in the form of a hash to identify the files in the
    IPFS system; this is called content-based addressing. Thus, IPFS uses a content
    ID (CID) or hash of the content, which represents the content itself, to address
    that data or file over the network. This allows data and files to be stored and
    served from anywhere by anyone.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: IPFS [[8](#CR8)] 是一个点对点的、内容寻址的、版本控制的文件系统。这个系统天生是去中心化的；因此，没有任何单一实体控制它。在IPFS中的文件被复制到IPFS节点网络上。它们的内容用IPFS中的文件来标识。与今天互联网中的URL所做的位置寻址不同，IPFS使用内容本身的形式来标识数据，这称为基于内容的寻址。因此，IPFS使用内容ID（CID）或内容的哈希来寻址该数据或文件，这代表了内容本身，通过网络来访问该数据或文件。这使得数据和文件可以被任何人从任何地方存储和服务。
- en: It works by taking a file and cryptographically hashing it to obtain a small
    and reproducible representation of that file which ensures that every file has
    its unique hash, which can then be used to address the file. This CID is generated
    using Merkel-Tree Directed Acyclic Graphs (DAGs). Merkle DAGs allow distinctively
    identifying all content on IPFS as every data block part of the DAG has its unique
    hash, making the data tamper-proof as altering anything in the data would change
    the hash. Our solution uses IPFS to store all the medical records data.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过将文件进行加密哈希处理，得到一个小而可复制的文件表示，以确保每个文件都有其独特的哈希值，然后可以用于寻址该文件。这个CID是使用默克尔树有向无环图（DAGs）生成的。Merkle
    DAG允许区分地标识IPFS上的所有内容，因为DAG的每个数据块都有其唯一的哈希，使得数据防篡改，因为改变数据中的任何内容都会改变哈希。我们的解决方案使用IPFS存储所有医疗记录数据。
- en: Ethereum
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以太坊
- en: Ethereum is a blockchain technology that also provides smart contracts integration.
    Ethereum uses Ether (ETH) as its cryptocurrency for transactions. It is a capable
    and robust blockchain platform to implement a decentralized medical records system.
    In the provided solution, smart contracts are used for access control of data,
    and to store the encrypted content ID (CID) or hash of the user data stored on
    the IPFS network. This is a unique feature of Ethereum [[9](#CR9)] to create and
    run decentralized applications (dApps) and smart contracts [[10](#CR10)]. Smart
    contracts are programs that can be used to describe legal documents, assets, and
    agreements and other services between different parties without the involvement
    of a middleman. They are essentially the code running over a distributed network
    known as the Ethereum Virtual Machine. These contracts are tamper-proof, ensuring
    that all the data they hold cannot be manipulated by any parties involved. They
    are visible to anyone who is connected to the Ethereum network.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊是一种区块链技术，也提供智能合约集成。以太坊使用以太币（ETH）作为其加密货币进行交易。它是一个功能强大且健壮的区块链平台，可以实现去中心化的医疗记录系统。在提供的解决方案中，智能合约用于数据的访问控制，并存储在IPFS网络上存储的用户数据的加密内容ID（CID）或哈希。这是以太坊的一个独特特性，用于创建和运行去中心化应用程序（dApps）和智能合约[[10](#CR10)]。智能合约是可以用于描述法律文件、资产、协议和其他各种服务的程序，而不涉及中间人的参与。它们实质上是在称为以太坊虚拟机的分布式网络上运行的代码。这些合同是防篡改的，确保它们所持有的所有数据都不能被任何涉及的各方操纵。它们对连接到以太坊网络的任何人都是可见的。
- en: Patient’s Lifecycle
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 患者的生命周期
- en: In general, a visit to the hospital begins with the patient going to the hospital
    and the hospital requesting the patient to share their previous records, which
    the hospital then uses for diagnosis, treatment, etc.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，就医的过程从患者去医院开始，医院要求患者分享他们的以前的记录，然后医院用这些记录进行诊断、治疗等。
- en: After providing the treatment, the hospital generates new records for the patient,
    including test results, prescriptions, bills, etc. These records are shared with
    the patient, who is then required to store them safely along with the patient’s
    previous records, if any.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在提供治疗后，医院为患者生成新的记录，包括检查结果、处方、账单等。这些记录与患者共享，然后要求患者安全地存储它们，以及患者以前的记录（如果有）。
- en: Now, the patient is required to settle the insurance claim about the current
    visit. For this, the insurance company requests the patient to share their medical
    bills and settle claims after due processing. This completes the life cycle for
    a patient’s visit to the hospital.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，患者需要解决与当前就医有关的保险索赔。为此，保险公司请求患者分享他们的医疗账单，并在经过适当处理后解决索赔。这完成了患者就医到医院的生命周期。
- en: Every patient has numerous visits to the hospital, each involving all the functions
    described above, which make the process difficult and prone to issues. To solve
    these problems in a decentralized manner, we propose the solution described in
    the next section.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 每位患者都有多次就医经历，每次经历都涉及到上述所有功能，这使得流程复杂且容易出现问题。为了以分散的方式解决这些问题，我们提出了下一节中描述的解决方案。
- en: 4 Proposed Solution
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4 提出的解决方案
- en: The solution architecture (Fig. [1](#Fig1)) shows the various entities, namely,
    patients (P), hospitals (H), and insurance agencies (A) (on the left) and technologies
    (on the right) that come about to form the solution.![](../images/513458_1_En_3_Chapter/513458_1_En_3_Fig1_HTML.png)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案架构（图[1](#Fig1)）展示了形成解决方案的各种实体，即患者（P）、医院（H）和保险机构（A）（左侧），以及技术（右侧）！[](../images/513458_1_En_3_Chapter/513458_1_En_3_Fig1_HTML.png)
- en: Fig. 1
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图1
- en: Proposed solution architecture
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 提出的解决方案架构
- en: The technological tools used are blockchain [[11](#CR11)], IPFS [[12](#CR12)],
    and an application interface. This application interface connects directly to
    the Ethereum blockchain and the IPFS storage to implement a secure, private, and
    transparent system which is the main focal point of this solution.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的技术工具包括区块链[[11](#CR11)]、IPFS[[12](#CR12)]和一个应用界面。这个应用界面直接连接到以太坊区块链和 IPFS 存储，实现了一个安全、私密和透明的系统，这是该解决方案的主要焦点。
- en: The application interface allows the patients to control which entity can access
    their records. The patient is the most powerful entity in the entire solution
    architecture, which is one of the big unique selling points of this solution as
    it gives the power in the patient’s hands. The hospitals have the ability to add
    new records for the patients and to access their previous records. The insurance
    agencies have the functionality of being able to see the records and settle insurance
    claims. The patient controls these functionalities of hospitals and insurance
    agencies through an authorization mechanism implemented through blockchain transactions.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 应用界面允许患者控制哪些实体可以访问他们的记录。患者是整个解决方案架构中最强大的实体之一，这是该解决方案的重要独特卖点之一，因为它赋予了患者掌控权。医院有能力为患者添加新记录并访问他们的先前记录。保险机构具有查看记录并解决保险索赔的功能。患者通过区块链交易实现的授权机制控制这些医院和保险机构的功能。
- en: When authorized by a patient *P* [*i*] ∈ *P*, the hospital *H* [*j*] ∈ *H* stores
    the records generated for the patient’s current hospital visit (v) on the decentralized
    storage solution IPFS. The records stored on the IPFS are encrypted symmetrically
    with an identity number *k* [*Pi*] of the patient *P* [*i*]. After storage, the
    location or the hash of the record *q* [*v*] for the current hospital visit (v)
    is returned by the IPFS.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当由患者 *P* [*i*] ∈ *P* 授权时，医院 *H* [*j*] ∈ *H* 将生成的用于患者当前就医（v）的记录存储在分散存储解决方案 IPFS
    上。存储在 IPFS 上的记录使用患者 *P* [*i*] 的身份编号 *k* [*Pi*] 进行对称加密。存储后，IPFS 返回当前医院就医（v）的记录位置或哈希
    *q* [*v*]。
- en: Let *D* [*v*] be the record generated due to the patient’s current visit to
    the hospital, and AES be a symmetric cryptography function that takes data *D*
    [*k*] and a key *k* [*Pi*], and returns the encrypted data. Thus, the encrypted
    records are
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 设 *D* [*v*] 为由患者当前就医生成的记录，AES 为一种对称加密函数，它接受数据 *D* [*k*] 和密钥 *k* [*Pi*]，并返回加密数据。因此，加密记录为
- en: '!['
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '!['
- en: $$ {e}_v=\mathrm{AES}\left({D}_v, {k}_{Pi}\right) $$
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: $$ {e}_v=\mathrm{AES}\left({D}_v, {k}_{Pi}\right) $$
- en: '](../images/513458_1_En_3_Chapter/513458_1_En_3_Chapter_TeX_Equa.png)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](../images/513458_1_En_3_Chapter/513458_1_En_3_Chapter_TeX_Equa.png)'
- en: If *U* is a functionality provided by IPFS, which takes a piece of data, uploads
    it onto IPFS, and returns a hash or CID, then
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *U* 是 IPFS 提供的一个功能，它接受一段数据，将其上传到 IPFS，并返回一个哈希或 CID，则
- en: '!['
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '!['
- en: $$ {q}_v=U\ \left({e}_v\right) $$
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: $$ {q}_v=U\ \left({e}_v\right) $$
- en: '](../images/513458_1_En_3_Chapter/513458_1_En_3_Chapter_TeX_Equb.png)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '](../images/513458_1_En_3_Chapter/513458_1_En_3_Chapter_TeX_Equb.png)'
- en: This location or hash *q* [*v*] of records is then added to a file that contains
    details of every hospital visit for the patient in an object in JSON (JavaScript
    Object Notation) format hereafter referred to as the master file ![
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 记录的这个位置或哈希*q* [*v*]然后被添加到一个文件中，该文件包含患者在JSON(JavaScript对象表示)格式的每次医院访问的详细信息，此后称为主文件![
- en: $$ {M}_{Pi}^{\prime } $$
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: $$ {M}_{Pi}^{\prime } $$
- en: '](../images/513458_1_En_3_Chapter/513458_1_En_3_Chapter_TeX_IEq1.png) of the
    patient *P* [*i*]. An object *J* [*v*] is created for every hospital visit which
    contains an identifier (name) of hospital *H* [*j*], the date of visit *σ* [*v*],
    the insurance settlement status *δ* [*v*], and the content hash *q* [*v*] (also
    called location hash and content Id) of the stored record.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '](../images/513458_1_En_3_Chapter/513458_1_En_3_Chapter_TeX_IEq1.png)*P* [*i*]的患者。为每次医院访问创建一个对象*J*
    [*v*]，其中包含医院*H* [*j*]的标识符（名称），访问日期*σ* [*v*]，保险结算状态*δ* [*v*]和存储记录的内容哈希*q* [*v*]（也称为位置哈希和内容ID）。'
- en: '!['
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '!['
- en: $$ {J}_v=\left({H}_j,{\sigma}_v,{\delta}_v,{q}_v\right) $$
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: $$ {J}_v=\left({H}_j,{\sigma}_v,{\delta}_v,{q}_v\right) $$
- en: '](../images/513458_1_En_3_Chapter/513458_1_En_3_Chapter_TeX_Equc.png)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '](../images/513458_1_En_3_Chapter/513458_1_En_3_Chapter_TeX_Equc.png)'
- en: Let the current master file be a set of all such *J* [*k*], where *k* = 1*,*
    2*,* 3*,* …*, n* for *n* number of hospital visits,
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让当前的主文件是所有这样的*J* [*k*]的集合，其中*k* = 1*,* 2*,* 3*,* …*, n*代表*n*次医院访问，
- en: '!['
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '!['
- en: $$ {M}_{Pi}^{\prime }=\left\{{J}_1,{J}_2,{J}_3,\dots, {J}_n\right\} $$
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: $$ {M}_{Pi}^{\prime }=\left\{{J}_1,{J}_2,{J}_3,\dots, {J}_n\right\} $$
- en: '](../images/513458_1_En_3_Chapter/513458_1_En_3_Chapter_TeX_Equd.png)After
    adding the data *J* [*v*] to *M* [*Pi*], the new master file, *M* [*P*] ^(*t*),
    will be!['
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '](../images/513458_1_En_3_Chapter/513458_1_En_3_Chapter_TeX_Equd.png)在将数据*J*
    [*v*]添加到*M* [*Pi*]后，新的主文件*M* [*P*] ^(*t*)将被!['
- en: $$ {M}_{Pi}^{\prime }=\left\{{J}_1,{J}_2,{J}_3,\dots, {J}_n,{J}_v\right\} $$
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: $$ {M}_{Pi}^{\prime }=\left\{{J}_1,{J}_2,{J}_3,\dots, {J}_n,{J}_v\right\} $$
- en: '](../images/513458_1_En_3_Chapter/513458_1_En_3_Chapter_TeX_Eque.png)This newly
    generated master file !['
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](../images/513458_1_En_3_Chapter/513458_1_En_3_Chapter_TeX_Eque.png)这个新生成的主文件!['
- en: $$ {M}_{Pi}^{\prime } $$
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: $$ {M}_{Pi}^{\prime } $$
- en: '](../images/513458_1_En_3_Chapter/513458_1_En_3_Chapter_TeX_IEq2.png) is then
    stored on IPFS after symmetric encryption with the identity number *K* [*P*].
    This returns a new location for the master file itself.!['
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '](../images/513458_1_En_3_Chapter/513458_1_En_3_Chapter_TeX_IEq2.png)在使用身份号*K*
    [*P*]对称加密后，*K* [*P*]的身份号，然后将其存储在IPFS上。这返回主文件本身的新位置。!['
- en: $$ E=\mathrm{AES}\left({M}_{Pi}^{\prime }, {K}_{Pi}\right)\vspace*{-10pt} $$
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: $$ E=\mathrm{AES}\left({M}_{Pi}^{\prime }, {K}_{Pi}\right)\vspace*{-10pt} $$
- en: '](../images/513458_1_En_3_Chapter/513458_1_En_3_Chapter_TeX_Equf.png)!['
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '](../images/513458_1_En_3_Chapter/513458_1_En_3_Chapter_TeX_Equf.png)!['
- en: $$ Q=U\ (E) $$
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: $$ Q=U\ (E) $$
- en: '](../images/513458_1_En_3_Chapter/513458_1_En_3_Chapter_TeX_Equg.png)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](../images/513458_1_En_3_Chapter/513458_1_En_3_Chapter_TeX_Equg.png)'
- en: This location (*Q*) of the master file is then encrypted using asymmetric encryption
    (RSA) and the result (*L*) is stored onto the blockchain via a transaction. The
    various read/write access control functionalities are also managed through several
    blockchain transactions.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 主文件的此位置(*Q*)然后使用非对称加密(RSA)进行加密，结果(*L*)通过交易存储到区块链上。各种读/写访问控制功能也通过几个区块链交易进行管理。
- en: RSA takes a piece of data *Q* and a public key *α* [*Pi*] of the patient *P*
    [*i*] and returns an encrypted value.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: RSA接收数据*Q*和患者*P* [*i*]的公钥*α* [*Pi*]，并返回加密值。
- en: '!['
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '!['
- en: $$ L=\mathrm{RSA}\left(Q,\kern0.5em {\alpha}_{Pi}\right) $$
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: $$ L=\mathrm{RSA}\left(Q,\kern0.5em {\alpha}_{Pi}\right) $$
- en: '](../images/513458_1_En_3_Chapter/513458_1_En_3_Chapter_TeX_Equh.png)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '](../images/513458_1_En_3_Chapter/513458_1_En_3_Chapter_TeX_Equh.png)'
- en: This asymmetrically encrypted hash *L* can only be decoded by the secret private
    key of the patient, which is known only to the patient.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这种非对称加密的哈希值*L*只能由患者的秘密私钥解码，该私钥只有患者知道。
- en: The writing functionality is controlled through the patient’s authorization.
    It is limited to the hospital, wherein they can add new records for patients and
    the insurance company, which can settle insurance claims for the patient’s bill
    incurred at the hospital visit. The read functionality is for all the entities,
    but the authorization is again in the patient’s hands. Whenever an entity wishes
    to view the records, the application obtains the records through the blockchain
    and the IPFS, and then presents them on the user interface.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 写入功能通过患者的授权进行控制。它仅限于医院，在那里他们可以为患者添加新记录，并且可以解决患者在医院就诊产生的医疗费用的保险索赔的保险公司。读取功能适用于所有实体，但授权再次由患者掌握。每当实体希望查看记录时，应用程序通过区块链和IPFS获取记录，然后在用户界面上呈现它们。
- en: In each read operation, the encrypted location is first decoded by the patient
    using their private key and then shared with the reader entity by symmetrically
    encrypting the decrypted location again using the reader’s public key and sharing
    via the blockchain.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次读取操作中，患者首先使用他们的私钥解码加密位置，然后通过对解密后的位置再次使用读取器的公钥进行对称加密，并通过区块链分享给读取器实体。
- en: 5 Implementation Details
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5 实施细节
- en: 'The following section contains the details of the two major components of the
    system: a patient smart contract and the structure of a patient master file.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分包含系统的两个主要组件的详细信息：患者智能合约和患者主文件的结构。
- en: Smart Contract Solidity Implementation Pseudo Code
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 智能合约 Solidity 实现伪代码
- en: contract Medicaladdress private owner;string private medicalLocationHash;address
    public reader;address public writer;map(address => string) public readHash;map(address
    => bool) public canWrite;function RevokeRead(address memory readerAddress) publicreadHash[readerAddress]
    = "";function Read(address memory readerAddress) public viewreturns (string memory)return
    readHash[readerAddress];function Write(string memory locationHash,address memorywriterAddress)
    publicrequire(canWrite[writerAddress] == true,"You do not have write permission");medicalLocationHash
    = locationHash;canWrite[writerAddress] = false;function AcquireReadPermission(address
    memoryreaderAddress) publicreader = readerAddress;function AcquireWritePermission(address
    memorywriterAddress) publicwriter = writerAddress;reader = writerAddress;function
    GrantWritePermission(string memoryencryptedLocationHash) publicrequire(owner ==
    msg.sender, "You can not grantwrite permission");require(bytes(writer).length
    != 0, "No writer!");GrantReadPermission(encryptedLocationHash);canWrite[writer]
    = true;writer = "";function GrantReadPermission(string memoryencryptedLocationHash)
    publicrequire(owner == msg.sender, "You can not grantread permission");require(bytes(reader).length
    != 0, "No reader!");readHash[reader] = encryptedLocationHash;reader = "";function
    CheckWritePermission(address memorywriterAddress) public viewreturns (bool)return
    canWrite[writerAddress];function ViewLocationHash() public view returns (stringmemory)return
    medicalLocationHash;function ViewReader() public view returns (stringmemory)return
    reader;function ViewWriter() public view returns (stringmemory)return writer;
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 合同 Medicaladdress 私有所有者；字符串私有 medicalLocationHash；地址公共读取器；地址公共写入器；映射（地址= > 字符串）公共
    readHash；映射（地址= > 布尔值）公共可以写入；function RevokeRead（地址内存读取器地址）公共 readHash [readerAddress]
    = "";function Read（地址内存读取器地址）公共视图返回（字符串内存）返回 readHash [readerAddress]；function
    Write（字符串内存位置哈希，地址内存写入器地址）公共需要（canWrite [writerAddress] == true，“您没有写入权限”）；medicalLocationHash
    = locationHash；canWrite [writerAddress] = false；function AcquireReadPermission（地址内存读取器地址）公共读取器
    = 读取器地址；function AcquireWritePermission（地址内存写入器地址）公共写入器 = 写入器地址；读取器 = 写入器地址；function
    GrantWritePermission（字符串内存加密位置哈希）公共需要（所有者== msg.sender，“您不能授予写入权限”）；需要（字节（写入器）.length！=
    0，“无写入者！”）；GrantReadPermission（加密位置哈希）；canWrite [writer] = true；写入器 = "";function
    GrantReadPermission（字符串内存加密位置哈希）公共需要（所有者== msg.sender，“您不能授予读取权限”）；需要（字节（读取器）.length！=
    0，“无读取器！”）；readHash [读取器] = 加密位置哈希；读取器 = "";function CheckWritePermission（地址内存写入器地址）公共视图返回（布尔值）返回
    canWrite [writerAddress]；function ViewLocationHash（）公共视图返回（字符串内存）返回 medicalLocationHash；function
    ViewReader（）公共视图返回（字符串内存）返回 reader；function ViewWriter（）公共视图返回（字符串内存）返回 writer；
- en: Structure of the Patient Master File
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 患者主文件的结构
- en: '{patientName,patientDOB,patientSex,[visitOne : {hospitalName,dateOfVisit,claimSettlementStatus,dataOfVisit},visitTwo
    : {hospitalName,dateOfVisit,claimSettlementStatus,dataOfVisit} ...]}'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '{患者姓名，患者出生日期，患者性别，[就诊一：{医院名称，就诊日期，索赔结算状态，就诊数据}，就诊二：{医院名称，就诊日期，索赔结算状态，就诊数据}
    ...]}'
- en: 6 Workflows
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6 工作流程
- en: There are two main operations that the entities in the proposed system perform.
    These are reading the records and writing the records.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 提议系统中的实体执行的两个主要操作是读取记录和写入记录。
- en: Read Operation
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 读取操作
- en: The read operation is universal in the system which all the entities can perform.
    In it, various entities can search and access the records of a patient when authorized
    by the respective owner of the records. The read operation is a single-time process.
    When authorized, an entity can access the records only once and is required to
    obtain permission from the owner of the records every time they wish to access
    them again (Fig. [2](#Fig2)).![](../images/513458_1_En_3_Chapter/513458_1_En_3_Fig2_HTML.png)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 系统中的读操作是所有实体都可以执行的通用操作。在其中，各种实体可以在被授权的情况下搜索和访问患者的记录。读操作是一个单次过程。一旦获得授权，实体只能访问记录一次，并且每次再次访问时都需要获得记录所有者的许可（见图[2](#Fig2)）。![](../images/513458_1_En_3_Chapter/513458_1_En_3_Fig2_HTML.png)
- en: Fig. 2
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2
- en: Read operation
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 读取操作
- en: The read operation begins with the hospital (or insurance company) searching
    for the patient in the application user interface and requesting their permission
    to view their records. This action stores the address of the hospital in a variable
    in the smart contract. Now, the patient grants the read permission. This first
    fetches the CID (Content Id), stored in a variable in the smart contract, of the
    master file stored on the IPFS. This CID, which was encrypted with the patient’s
    public key can now be decrypted using their private key. This private key is never
    stored anywhere and is generated using a secret passphrase known only to the patient.
    Now, this decrypted CID of the master file is encrypted using the hospital’s public
    key. This newly encrypted CID is now stored in the smart contract by the patient,
    through a transaction, in the form of a mapping that associates the hospital’s
    public with this CID. This makes sure that now when the hospital goes on to access
    the records, only the hospital with the specific address which was granted permission
    by the patient can do so.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 读操作始于医院（或保险公司）在应用用户界面中搜索患者并请求其查看记录的权限。此操作将医院的地址存储在智能合约的一个变量中。现在，患者授予读取权限。首先获取存储在智能合约的主文件的CID（内容ID），然后使用患者的公钥加密的CID，现在可以使用其私钥解密。该私钥不会存储在任何地方，并且是使用仅患者知道的秘密密码生成的。现在，将主文件的此解密CID使用医院的公钥进行加密。然后，通过交易，患者将此新加密的CID以与医院的公钥相关联的映射形式存储在智能合约中。这确保了现在医院只能通过患者授权的特定地址访问记录。
- en: Now the hospital proceeds to view the patient’s records. This is done through
    a smart contract interaction wherein the mapping variable is read. This matches
    the hospital’s address and returns the CID stored in the mapping. This CID was
    encrypted using the hospital’s public key and thus now can only be decrypted using
    their private key. The hospital decrypts the CID by generating their private key
    using their secret passphrase. This decrypted CID is now used to fetch the master
    file from the IPFS. Any of the previous records can now be brought using their
    CID stored in the master file. The obtained records are decrypted further as they
    were encrypted using symmetric encryption using the patient’s unique ID number.
    So, the unique ID number is used to decrypt the records, and they are finally
    displayed on the application interface for the hospital/insurance company to view.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在医院继续查看患者的记录。这通过智能合约交互完成，其中读取映射变量。这会匹配医院的地址并返回存储在映射中的CID。该CID是使用医院的公钥加密的，因此现在只能使用其私钥解密。医院通过使用其秘密密码生成其私钥来解密CID。然后使用此解密的CID从IPFS获取主文件。现在可以使用其在主文件中存储的CID检索以前的任何记录。获取的记录进一步解密，因为它们是使用患者的唯一ID号进行对称加密的。因此，使用唯一的ID号解密记录，然后将它们显示在应用程序界面上供医院/保险公司查看。
- en: For the patients, read operation is quite simple as they have complete access
    control in their hands. A patient can see their records directly with a click
    in the application interface. The CID is obtained from the smart contract, which
    is owned and controlled by the patient and hence does not require any permission.
    The master file is then obtained from this CID from IPFS, and any record which
    the patient wishes to see is read from its CID stored in the master file.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于患者来说，读取操作非常简单，因为他们完全掌握了访问控制。患者可以通过在应用程序界面中点击来直接查看其记录。CID是从智能合约中获取的，该合约由患者拥有和控制，因此不需要任何权限。然后从IPFS获取主文件，并从中读取患者希望查看的任何记录的CID。
- en: Write Operation
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 写操作
- en: The write operation is wherein the hospital writes the records generated and
    the insurance company settles the bill generated at the patient’s visit to the
    hospital. The patient is not allowed to do any kind of write operation.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 医院的写操作是指医院记录生成并且保险公司结算在患者就诊时产生的账单。患者不被允许进行任何形式的写操作。
- en: For the write operation, the hospital first searches for the patient in the
    application interface and requests the patient to be allowed to add new records.
    This authorization mechanism is written into the blockchain smart contract and
    thus cannot be tampered with. When the hospital asks for the write permission,
    it sends its address as a parameter to the smart contract where a mapping is then
    stored between the username and a Boolean value of true or false, which indicates
    if the username is allowed to write to the smart contract or not. After the hospital
    makes the write request, the patient logs into their account and grants the write
    permission wherein a call to the smart contract is created, which updates the
    mapping of the hospital’s username to be true; this authorization can only be
    issued by the owner of the smart contract, that is, the patient. Now the hospital
    is ready to add new records for the patient (Fig. [3](#Fig3)).![](../images/513458_1_En_3_Chapter/513458_1_En_3_Fig3_HTML.png)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于写操作，医院首先在应用程序界面中搜索患者，并请求允许患者添加新记录。这个授权机制被写入区块链智能合约中，因此无法被篡改。当医院请求写权限时，它将其地址作为参数发送到智能合约，智能合约在其中存储了用户名和一个布尔值（true或false）之间的映射，指示用户名是否被允许向智能合约写入。在医院发出写请求后，患者登录他们的账户，并授予写权限，在此过程中创建了对智能合约的调用，更新了医院用户名的映射为true；此授权只能由智能合约的所有者，即患者，发出。现在医院已经准备好为患者添加新记录（图[3](#Fig3)）。
- en: Fig. 3
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图3
- en: Write operation for hospital
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 医院的写操作
- en: Once the permission is granted, the application interface on the hospital side
    redirects to a form wherein all details regarding the patient’s visit can be filled
    and any photos or documents can be attached. When the hospital submits the record,
    it is first encrypted with symmetric encryption using the patient’s unique ID
    number as the key and then stored on the IPFS, which returns the CID associated
    with this stored record. Now the master file is fetched from the IPFS. This CID
    of the stored record is added to the master file and other details like the date
    of visit and the hospital’s name and the insurance settlement status in a JavaScript
    object and the master file is in JSON format. Now, this master file is stored
    on IPFS and a CID is obtained. This CID of the master file is then encrypted using
    the patient’s public key and stored in the smart contract. This completes the
    write operation for the hospital. Note that a write operation permission grant
    comes with the permission to read records inherently.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '一旦授权被授予，医院端的应用程序界面会重定向到一个表单，在此表单中，可以填写关于患者就诊的所有细节，并附加任何照片或文件。当医院提交记录时，首先使用患者的唯一ID号作为密钥对记录进行对称加密，然后将其存储在IPFS上，并返回与此存储记录相关联的CID。现在从IPFS获取主文件。将存储记录的CID添加到主文件中，并将其他细节，如就诊日期、医院名称和保险结算状态，以JavaScript对象的形式添加到主文件中，并且主文件以JSON格式存储。现在，这个主文件存储在IPFS上，并且获得了一个CID。然后，使用患者的公钥加密主文件的CID，并将其存储在智能合约中。这完成了医院的写操作。请注意，写操作授权自然附带读取记录的权限。  '
- en: For the insurance company, the permission requesting and allowing procedure
    is similar to that of the hospital. The difference is that when allowed by the
    patient, the hospital is redirected to a record page wherein they can add a new
    record. In contrast, the insurance company is redirected to a settle claim page
    wherein they can simply view and settle the insurance claim for the patient. The
    insurance claim settlement status is saved as a mapping of true or false in the
    master file in an object pertaining to that visit. When the insurance company
    settles the claim, the mapping is made to be true and the claim is expected to
    have been settled. This changing of mapping generates a new CID when the changed
    master file is stored on IPFS. This new CID is stored in the smart contract, encrypted
    with the patient’s public key. This completes the write operation for the insurance
    company (Fig. [4](#Fig4)).![](../images/513458_1_En_3_Chapter/513458_1_En_3_Fig4_HTML.png)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于保险公司而言，请求和允许权限的过程与医院类似。区别在于，当患者允许时，医院会被重定向到一个记录页面，在那里他们可以添加一个新记录。相反，保险公司被重定向到一个理赔页面，在那里他们可以简单地查看和为患者的保险理赔结算。保险理赔结算状态被保存为一个与该次访问相关的对象中的真或假的映射，存储在主文件中。当保险公司结算了理赔时，映射被设为真，理赔被期望已经结算。这种映射的改变会在更改后的主文件存储在IPFS上时生成一个新的CID。这个新的CID被存储在智能合约中，并用患者的公钥加密。这完成了保险公司的写操作（图[4](#Fig4)）。![](../images/513458_1_En_3_Chapter/513458_1_En_3_Fig4_HTML.png)
- en: Fig. 4
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图4
- en: Write operation for insurance company
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 保险公司的写操作
- en: 7 Analysis
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7 分析
- en: Security and Accessibility
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全性和可访问性
- en: In our solution, we have used blockchain and IPFS for the storage of data, combined
    with various encryption schemes at every step. The blockchain allows secure, untameable
    recording of transactions and integrated with smart contract functionality. It
    produces one of the most efficient and secure systems to date. The system is more
    transparent due to the public ledger, more secure as it is a distributed system
    without any central point of failure, and more accessible and interoperable as
    it is always available, for anyone, anywhere around the world.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的解决方案中，我们使用了区块链和IPFS来存储数据，结合了各种加密方案。区块链允许安全、不可篡改的交易记录，并与智能合约功能集成。它产生了迄今为止最有效和安全的系统之一。由于公共账本的存在，该系统更加透明，由于没有任何中心故障点，所以更加安全，而由于始终可用，因此更加可访问和可互操作，任何人都可以在世界任何地方使用。
- en: IPFS as the storage solution, a distributed system like blockchain, provides
    similar accessibility and interoperability benefits. The content addressing feature
    of IPFS provides integrity and security to the system, ensuring that the data
    is not changed or tampered with.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 作为存储解决方案的IPFS，像区块链一样的分布式系统，提供了类似的可访问性和互操作性好处。IPFS的内容寻址功能为系统提供了完整性和安全性，确保数据不会被更改或篡改。
- en: Encryption schemes are used for secure storage and sharing of data. The patient
    data is symmetrically encrypted with a key known to the patient and the location
    of the data is again asymmetrically encrypted with a private key of the patient.
    And every time it is shared, it is encrypted such that only the person who has
    been allowed by the patient can decrypt and access the data.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 加密方案用于数据的安全存储和共享。患者数据使用患者已知的密钥进行对称加密，并且数据的位置再次使用患者的私钥进行非对称加密。每次数据共享时，都进行加密，以便只有患者允许的人才能解密和访问数据。
- en: The use of blockchain, IPFS, and encryption techniques at every step of data
    storage and sharing makes the data almost impossible to tamper with in any way
    and makes the system more secure, accessible, and interoperable.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据存储和共享的每一个步骤中使用区块链、IPFS和加密技术使得数据几乎不可能被任何方式篡改，并使得系统更加安全、可访问和可互操作。
- en: Privacy
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 隐私
- en: Our solution has privacy-aware access control with the patient at its center.
    From data generation, to storage and sharing, every step has access control in
    the hands of the patient. We have stored the data using a combination of symmetric
    and asymmetric encryption techniques with keys decided and owned by the patient,
    making the patient the real owner of their data. Giving the power of access control
    in the hands of patients, through untamperable smart contract code, makes our
    solution completely patient-centric. No one can access or use any kind of data
    belonging to a person without their explicit permission. To gain access to data,
    any entity needs the decrypted CID and the unique patient ID, which only resides
    with and can be managed by the patient. Thus, patient privacy and data ownership
    are the main USP of our solution and are ensured in the strictest ways possible.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的解决方案具有以患者为中心的隐私感知访问控制。从数据生成到存储和共享，每个步骤都由患者控制访问。我们使用对称和非对称加密技术的组合存储数据，并由患者决定和拥有密钥，使患者成为其数据的真正所有者。通过不可篡改的智能合约代码将访问控制权交给患者，使我们的解决方案完全以患者为中心。没有人可以在没有明确许可的情况下访问或使用属于某个人的任何类型的数据。要访问数据，任何实体都需要解密的CID和唯一的患者ID，这些只存储在并且由患者管理。因此，患者隐私和数据所有权是我们解决方案的主要卖点，并且以最严格的方式确保。
- en: 8 Conclusion and Future Work
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8 结论与未来工作
- en: Conclusion
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: This chapter examined and developed a system for applying blockchain technology
    in maintaining medical health records more securely and privately than the current
    systems permit. Blockchain is the technology at the forefront of the current decentralization
    revolution, which aims to provide more security and privacy to every field that
    uses technological solutions. Medical records is one field that is in dire need
    of such revolutionary solutions, given the sensitivity and importance of such
    records. Our solution of electronic medical records based on blockchain improves
    security, accessibility, and interoperability, over traditional records-keeping
    systems, all at the same time.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 本章研究并开发了一个系统，用于在维护医疗健康记录方面应用区块链技术，比当前系统允许的更安全、更私密。区块链是当前去中心化革命前沿的技术，旨在为使用技术解决方案的每个领域提供更多安全性和隐私性。医疗记录是一个迫切需要此类革命性解决方案的领域，考虑到此类记录的敏感性和重要性。我们基于区块链的电子医疗记录解决方案提高了安全性、可访问性和互操作性，同时超过传统记录保存系统。
- en: Future Work
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 未来工作
- en: The current version of the application uses Ethereum for blockchain purposes.
    The time and cost associated with each Ethereum transaction is very high due to
    the large network of nodes that come to a consensus over each transaction, and
    at the current growth of the technology, these costs and time are bound to increase
    more so in the future. This high cost reduces the feasibility of the current solution.
    A different blockchain technology that uses a different consensus algorithm might
    help reduce these costs. The balance between costs and decentralization needs
    to be assessed to find the most optimal solution for these other blockchain technologies.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的当前版本使用以太坊进行区块链目的。由于大量节点在每笔交易上达成共识，每笔以太坊交易的时间和成本非常高，而且随着技术的不断发展，这些成本和时间在未来肯定会增加。这种高昂的成本降低了当前解决方案的可行性。使用不同共识算法的不同区块链技术可能有助于降低这些成本。需要评估成本和去中心化之间的平衡，以找到这些其他区块链技术的最优解。
- en: Apart from that, the current solution uses asymmetric encryption based on RSA
    keys derived from a passphrase that needs to be remembered by the entity. Remembering
    the passphrase along with having strong passphrases is essential in keeping data
    secure in the application. However, remembering such passphrases becomes challenging,
    so encryption techniques like biometric encryption could improve the solution
    and make it easier to use. Effectiveness with different encryption techniques
    without compromising security needs to be assessed to reach the most optimal solution.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，当前解决方案使用基于RSA密钥的非对称加密，这些密钥是从需要被实体记住的密码短语中派生出来的。在应用程序中保持数据安全性，记住密码短语以及使用强密码短语都是必不可少的。然而，记住这样的密码短语变得具有挑战性，因此像生物特征加密这样的加密技术可以改进解决方案，并使其更易于使用。需要评估不同加密技术的有效性，同时又不会
    compromis 安全性，以找到最优解。
- en: Also, the current solution provides complete functional support for the previously
    listed entities, that is, patient, hospitals, and insurance agencies. However,
    this solution can be further extended to providing bulk data for research purposes
    and keeping patients in control of their data.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当前解决方案为先前列出的实体（即患者、医院和保险机构）提供了完整的功能支持。然而，该解决方案可以进一步扩展，以提供用于研究目的的批量数据，并让患者控制他们的数据。
