["```\npragma solidity ^0.4.16;\npragma solidity ^0.4.24;\n\nimport \"./Listing6_4_Ownable.sol\";\n\ncontract SimpleCoin is Ownable {                             *1*\n   mapping (address => uint256) public coinBalance;\n   mapping (address => mapping (address => uint256)) public allowance;\n   mapping (address => bool) public frozenAccount;\n\n   event Transfer(address indexed from, address indexed to, uint256 value);\n   event FrozenAccount(address target, bool frozen);\n\n   constructor(uint256 _initialSupply) public {\n      owner = msg.sender;\n\n      mint(owner, _initialSupply);\n   }\n\n   function transfer(address _to, uint256 _amount) public {\n     require(_to != 0x0); \n     require(coinBalance[msg.sender] > _amount);\n     require(coinBalance[_to] + _amount >= coinBalance[_to] );\n     coinBalance[msg.sender] -= _amount;  \n     coinBalance[_to] += _amount;   \n     emit Transfer(msg.sender, _to, _amount);  \n   }\n\n   function authorize(address _authorizedAccount, uint256 _allowance) \n     public returns (bool success) {\n     allowance[msg.sender][_authorizedAccount] = _allowance; \n     return true;\n   }\n\n   function transferFrom(address _from, address _to, uint256 _amount) \n     public returns (bool success) {\n     require(_to != 0x0);  \n     require(coinBalance[_from] > _amount); \n     require(coinBalance[_to] + _amount >= coinBalance[_to] ); \n     require(_amount <= allowance[_from][msg.sender]);  \n     coinBalance[_from] -= _amount; \n     coinBalance[_to] += _amount; \n     allowance[_from][msg.sender] -= _amount;\n     emit Transfer(_from, _to, _amount);\n     return true;\n   }\n\n   function mint(address _recipient, uint256  _mintedAmount) \n     onlyOwner public { \n\n     coinBalance[_recipient] += _mintedAmount; \n     emit Transfer(owner, _recipient, _mintedAmount); \n   }\n\n   function freezeAccount(address target, bool freeze) \n     onlyOwner public { \n\n     frozenAccount[target] = freeze;  \n     emit FrozenAccount(target, freeze);\n   }\n}\n```"]