["```\n// isValidator is a built-in function provided by Lity.\n// isValidator only takes one parameter, an address,\n// to check this address is a validator or not.\nisValidator(<address>) returns (bool returnValue);\n```", "```\ncontract BTCRelay {\n  uint[] BTCHeaders;\n  modifier ValidatorOnly() {\n      require(isValidator(msg.sender));\n      _;\n  }\n\n  function saveBTCHeader(uint blockHash) ValidatorOnly {\n    BTCHeaders.append(headerHash);\n  }\n\n  function getBTCHeader(uint blockNum) pure public returns (uint) {\n    return BTCHeaders[blockNum];\n  }\n}\n```", "```\npragma lity >=1.2.6;\n\ncontract RandDemo {\n  uint x;\n  function getRand () public returns (uint) {\n    x = rand();\n    return x;\n  }\n}\n```", "```\npragma lity >= 1.2.7;\n\ncontract FreeGasDemo {\n  int a;\n  function test (int input) public freegas returns (int) {\n    a = input;\n    return a;\n  }\n\n  function () public payable {}\n}\n```", "```\npragma solidity ^0.4.17;\n\ncontract HelloWorld  {\n\n    string helloMessage;\n    address public owner;\n\n    constructor () public {\n        helloMessage = \"Hello, World!\";\n        owner = msg.sender;\n    }\n\n    function updateMessage (string _new_msg) public {\n        helloMessage = _new_msg;\n    }\n\n    function sayHello () public constant returns (string) {\n        return helloMessage;\n    }\n function kill() public {\n        if (msg.sender == owner) selfdestruct(owner);\n    }\n}\n```", "```\npragma lity ^1.2.4;\ncontract ERC20Interface {\n  // mutability should be view, not pure\n  function totalSupply() public pure returns (uint);\n  function balanceOf(address owner) public view returns (uint);\n  function allowance(address owner, address spender)\n                               public view returns (uint);\n  function transfer(address to, uint tokens) public returns (bool);\n  function approve(address spender, uint tokens) public returns (bool);\n  function transferFrom(address from, address to,\n    uint tokens) public returns (bool);\n event Transfer(address indexed from, address indexed to, uint tokens);\n  event Approval(address indexed owner, address indexed spender, uint tokens);\n}\n```", "```\n$ lityc --contract-standard ERC20 wrong_mutability.sol\n\nwrong_mutability.sol:3:1: Info: Missing 'totalSupply' with\ntype signature 'function () view external returns\n(uint256)'. ERC20Interface is not compatible to ERC20.\ncontract ERC20Interface {\n^ (Relevant source part starts here and spans across multiple lines).\n```", "```\n$ lityc --abi StringReverse.sol\n\n======= StringReverse.sol:StringReverse =======\nContract JSON ABI\n[…]\n\nINFO:root:contract StringReverse.sol:StringReverse:\nINFO:oyente.symExec:    ============ Results ===========\nINFO:oyente.symExec:      EVM Code Coverage:                     29.8%\nINFO:oyente.symExec:      Parity Multisig Bug 2:                 False\nINFO:oyente.symExec:      Callstack Depth Attack Vulnerability:  False\nINFO:oyente.symExec:      Transaction-Ordering Dependence (TOD): False\nINFO:oyente.symExec:      Timestamp Dependency:                  False\nINFO:oyente.symExec:      Re-Entrancy Vulnerability:             False\nINFO:oyente.symExec:    ====== Analysis Completed ======\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <script>\n      window.addEventListener('load', function() {\n        var hello = web3.cmt.contract(...).at(\"...\");\n\n        var new_mesg = location.search.split('new_mesg=')[1];\n        if (new_mesg === undefined || new_mesg == null) {\n        } else {\n          new_mesg = decodeURIComponent(new_mesg.replace(/\\+/g, '%20'));\n\n          web3.cmt.getAccounts(function (error, address) {\n            if(!error) {\n              hello.updateMessage(new_mesg, {\n                  from: address.toString()\n              }, function(e, r){\n                if(!e)\n                  document.getElementById(\"status\").innerHTML =\n                    \"<b>Submitted to blockchain</b>. \" +\n                    \"New message will take a few seconds to show up! \" +\n                    \"<a href=\\\"helloworld_europa.html\\\">Reload page.</a>\";\n              });\n            }\n          });\n        }\n hello.sayHello(function(error, result){\n          if(!error)\n            document.getElementById(\"mesg\").innerHTML = result;\n        });\n      })\n    </script>\n  </head>\n\n  <body>\n  <h2>Hello World</h2>\n    <form method=GET>\n      New message:<br/><br/>\n      <input type=\"text\" name=\"new_mesg\"/><br/><br/>\n      <input type=\"submit\"/>\n      <p id=\"status\"/>\n    </form>\n    <p>The current message is: <span id=\"mesg\"/></p>\n  </body>\n</html>\n```", "```\ncontract Valentines {\n    struct Declaration {\n        string stmt;\n        address reply_from;\n        string reply_stmt;\n    }\n    mapping(address => Declaration) declarations;\n    mapping(address => address[]) replies;\n    function declare (string _stmt) public {\n        Declaration memory d = Declaration(_stmt, 0, \"\");\n        declarations[msg.sender] = d;\n    }\n    function reply (address _from, string _stmt) public {\n        declarations[_from].reply_from = msg.sender;\n        declarations[_from].reply_stmt = _stmt;\n        replies[msg.sender].push(_from);\n    }\n    function getDeclaration (address _from) public view returns (string,\n        address, string) {\n        return (declarations[_from].stmt, declarations[_from].reply_from,\n            declarations[_from].reply_stmt);\n    }\n    function getReplies (address _from) public view returns (address[]) {\n        return (replies[_from]);\n    }\n}\n```", "```\nvar getDeclaration = function () {\n    web3.cmt.getAccounts(function (e, address) {\n        if (e) {\n            // ...\n        } else {\n            userAddress = address.toString();\n            if (!targetAddress) {\n                targetAddress = userAddress;\n            }\n            contract = web3.cmt.contract(abi);\n            instance = contract.at(contract_address);\n            instance.getDeclaration (targetAddress, function (e, r) {\n                if (e) {\n                    // ...\n                } else {\n                    stmt = r[0];\n                    reply_from = r[1];\n                    reply_stmt = r[2];\n                    // show the UI based on the state\n                    // of this targetAddress’s declaration\n                }\n            });\n            instance.getReplies (userAddress, function (e, r) {\n                if (e) {\n                    // ...\n                } else {\n                    // show replies on UI\n                }\n            });\n        }\n    });\n}\n```", "```\nvar declare = function () {\n    var v = $(\"#declaration-field\").val();\n    if (v == null || v == '') {\n        // ...\n    }\n    $(\".main-button\").css(\"background-color\", \"#696969\");\n    $('#declaration-submit').text(lgb.wait);\n    $('#declaration-submit').removeAttr('onclick');\n    instance.declare(v, {\n        gas: '200000',\n        gasPrice: 2000000000\n    }, function (e, result) {\n        if (e) {\n            // ...\n        } else {\n            setTimeout(function () {\n                getDeclaration();\n            }, 20 * 1000);\n        }\n    });\n}\n```", "```\nvar reply = function () {\n    var v = $(\"#reply-field\").val();\n    if (v == null || v == '') {\n        // ...\n    }\n    $(\".main-button\").css(\"background-color\", \"#696969\");\n    $('#reply-submit').text(lgb.wait);\n    $('#reply-submit').removeAttr('onclick');\n    instance.reply(targetAddress, v, {\n        gas: '200000',\n        gasPrice: 2000000000\n    }, function (e, result) {\n if (e) {\n            // ...\n        } else {\n            setTimeout(function () {\n                getDeclaration();\n            }, 20 * 1000);\n        }\n    });\n}\n```", "```\ncontract BettingGame {\n\n    address public owner;\n\n    struct Bet {\n        int8 choice;\n        uint256 amount;\n        bool paid;\n        bool initialized;\n    }\n    mapping(address => Bet) bets;\n\n    string public game_desc;\n    int8 public number_of_choices;\n    uint256 public min_bet_amount;\n    bool public allow_user_bet_amount;\n    uint256 total_bet_amount;\n    int8 public total_bet_count;\n\n    mapping(int8 => uint256) choice_bet_amounts;\n\n    int8 public correct_choice;\n    string public correct_choice_txt;\n\n    int8 public game_status; // 0 not started; 1 running;\n                             //2 stopped; 3 ended; 4 cancelled\n\n    modifier onlyOwner() {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    constructor (string _game_desc, int8 _number_of_choices,\n          uint256 _min_bet_amount, bool _allow_user_bet_amount) public {\n        require(_number_of_choices > 0);\n        require(_min_bet_amount > 0);\n\n        owner = msg.sender;\n        game_status = 1;\n        game_desc = _game_desc;\n        number_of_choices = _number_of_choices;\n        min_bet_amount = _min_bet_amount;\n        allow_user_bet_amount = _allow_user_bet_amount;\n\n        total_bet_count = 0;\n        total_bet_amount = 0;\n        correct_choice = -1;\n        correct_choice_txt = \"\";\n    }\n function placeBet (int8 _choice) public payable {\n        // see later\n    }\n\n    function stopGame() external onlyOwner {\n        require (game_status == 1);\n        game_status = 2;\n    }\n\n    function resumeGame() external onlyOwner {\n        require (game_status == 2);\n        game_status = 1;\n    }\n\n    function endGame(int8 _correct_choice, string _correct_choice_txt)\n          external onlyOwner {\n        correct_choice = _correct_choice;\n        correct_choice_txt = _correct_choice_txt;\n        game_status = 3;\n    }\n\n    function cancelGame() public {\n        require (msg.sender == owner || isValidator(msg.sender));\n        game_status = 4;\n    }\n    function payMe () public {\n        // See later\n    }\n\n    function checkStatus (address _addr) public view returns (int8,\n          string, int8, uint256, uint256, bool, int8) {\n        // see later\n    }\n\n    function getBetInfo()public view returns(int8,string,int8,int8,uint256,bool){\n        return (game_status, game_desc, correct_choice, total_bet_count,\n          total_bet_amount, allow_user_bet_amount);\n    }\n\n    function getAnswer() public view returns (int8, string) {\n        return (correct_choice, correct_choice_txt);\n    }\n\n    function terminate() external onlyOwner {\n        selfdestruct(owner);\n    }\n}\n```", "```\nfunction checkStatus (address _addr) public view returns (int8, string,\n      int8, uint256, uint256, bool, int8) {\n    safeuint payout = 0;\n    if (game_status == 3 && bets[_addr].choice == correct_choice) {\n        payout = bets[_addr].amount * total_bet_amount / choice_bet_amounts[correct_choice];\n    } else if (game_status == 4) {\n        payout = bets[_addr].amount;\n    }\n    return (game_status, game_desc, bets[_addr].choice,\n      uint256(bets[_addr].amount), uint256(payout),\n      bets[_addr].paid, correct_choice);\n}\n```", "```\nfunction placeBet (int8 _choice) public payable {\n    require (game_status == 1); // game is running\n    require (_choice <= number_of_choices); // Valid choice\n    require (msg.value >= min_bet_amount); // Meet min bet amount\n    require (bets[msg.sender].initialized == false); // Only bet once\n\n    Bet memory newBet = Bet(_choice, msg.value, false, true);\n    bets[msg.sender] = newBet;\n\n    choice_bet_amounts[_choice] = choice_bet_amounts[_choice] + msg.value;\n    total_bet_amount = total_bet_amount + msg.value;\n    total_bet_count += 1;\n}\n```", "```\nfunction payMe () public {\n    require (bets[msg.sender].initialized); // Must have a bet\n    require (bets[msg.sender].amount > 0); // More than zero\n    require (bets[msg.sender].paid == false); // chose correctly\n\n    if (game_status == 3) {\n        // game ended normally\n        require (bets[msg.sender].choice == correct_choice);\n        uint256 payout = bets[msg.sender].amount * total_bet_amount /\n          choice_bet_amounts[correct_choice];\n        if (payout > 0) {\n            msg.sender.transfer(uint256(payout));\n            bets[msg.sender].paid = true; // cannot claim twice\n        }\n    } else if (game_status == 4) {\n        // Just refund the bet\n        msg.sender.transfer(uint256(bets[msg.sender].amount));\n        bets[msg.sender].paid = true; // cannot claim twice\n    } else {\n        require (false); // Just fail\n    }\n}\n```", "```\n$(function () {\n    webBrowser.openBrowser();\n    getAbi();\n    getBin();\n    initLanguage();\n    initUserAddress();\n    // ...\n});\n\nvar initUserAddress = function () {\n    var interval = setInterval(function () {\n        web3.cmt.getAccounts(function (e, address) {\n            if (address) {\n                userAddress = address.toString();\n                $(\"#userAddress\").val(address);\n                userAddress = address;\n                tip.closeLoad();\n                clearInterval(interval);\n            }\n        });\n    }, 300);\n}\n```", "```\nvar startGame = function () {\n    var inputs = document.getElementsByName(\"choice\");\n    var numChoices = 0;\n    var gameDesc = '';\n\n    for (var i = 0; i < inputs.length; i++) {\n        if (inputs[i].value != null && inputs[i].value != '') {\n            var inputValue = inputs[i].value\n            gameDesc += inputValue.trim() + \";\";\n            numChoices++;\n        }\n    }\n    var title = $(\"#title\").val();\n    var betMinAmount = $(\"#betMinAmount\").val();\n    var allowUserBet = $(\"#allowUserBetCheckbox\").val();\n    var allowUserBetAmount = false;\n    var minBetAmount = web3.toWei(betMinAmount, \"cmt\");\ngameDesc = gameDesc.replace(/(^;)|(;$)/g, \"\");\n    // deploy and start the game\n    var contract = web3.cmt.contract(betAbi);\n    var feeDate = '0x' + contract.new.getData(gameDesc, numChoices - 1,\n      minBetAmount, allowUserBetAmount, {data: betBin.object});\n    web3.cmt.estimateGas({data: feeDate}, function (e, returnGas) {\n        var gas = '1700000';\n        if (!e) {\n            gas = Number(returnGas * 2);\n        }\n        contract.new([gameDesc, numChoices - 1, minBetAmount,\n              allowUserBetAmount], {\n            from: userAddress.toString(),\n            data: feeDate,\n            gas: gas,\n            gasPrice: '2000000000'\n        }, function (e, instance) {\n            if (e) {\n                tip.close();\n                tip.error(lang.tip.createFailed);\n            } else {\n                contract_address = instance.address;\n                // ...\n                setTheContractAddressAndTurn(instance);\n            }\n        });\n    });\n};\n```", "```\nvar setTheContractAddressAndTurn = function (result) {\n    if (result != null && (result.contractAddress != 'undefined'\n          || result.address != 'undefined')) {\n        tip.right(lang.bet.betCreated);\n        setTimeout(function () {\n            var turnAddress = result.contractAddress;\n            if (turnAddress == 'undefined') {\n                turnAddress = result.address\n                saveLocalStorageBet(turnAddress);\n            }\n            console.log(turnAddress);\n            window.location.href = './join.html?contract=' + turnAddress;\n        }, 2000);\n    }\n};\n```", "```\nvar confirmOptionSubmit = function () {\n    var amount = $(\"#minBetAmount\").val();\n    var selectedValue = $(\"#selectedValue\").val();\n    // ... validate game status ...\n    var allowBet = $(\"#allowUserBetAmount\").val();\n    if (allowBet == 'true') {\n        var betAmount = $(\"#SubmitValue\").val();\n        betAmount = onlyNumber(betAmount);\n        if (betAmount <= 0 || betAmount < amount) {\n            tip.error(lgb.tip.moreThanZero);\n            return;\n        }\n        amount = betAmount;\n    }\n\n// change the submit button color and event\n\n    var feeData = instance.placeBet.getData(selectedValue + \"\");\n    var amountStr = String(web3.toWei(amount, \"cmt\"));\n    web3.cmt.estimateGas({\n        data: feeData,\n        to: contract_address,\n        value: amountStr\n    }, function (error, gas) {\n        var virtualGas = '20000000';\n        if (error) {\n            console.log(\"error estimating gas\");\n        } else {\n            virtualGas = gas;\n        }\n        instance.placeBet(selectedValue, {\n            value: web3.toWei(amount, \"cmt\"),\n            gas: virtualGas,\n            gasPrice: 2000000000\n        }, function (e, result) {\n            if (e) {\n                // ...\n            } else {\n                showUserChoice(gameStatus, userChoice, correctChoice);\n                $(\"#msg\").html(lgb.bet.pendingBet);\n                $('#msg').css('display', 'block');\n                getGameStatus('bet');\n            }\n        });\n    });\n}\n```", "```\nweb3.cmt.getAccounts(function (e, address) {\n    // ...\n    contract = web3.cmt.contract(betAbi, contract_address);\n    instance = contract.at(contract_address);\ninstance.checkStatus(userAddress, function (gameError, result) {\n// ...\n        instance.owner(function (e, owner) {\n            if (owner && owner.toLowerCase()==userAddress.toLowerCase()) {\n                if (gameStatus != 3) {\n                    showBetSetting(contentId, afterBtnName,\n                      lgb.bet.setting, betSetting);\n                }\n            }\n    });\n    });\n});\n\nvar showBetSetting = function (btnId, afterBtnName, buttonName, betFun) {\n    var showColor = \"#1976d2\";\n    if (!document.getElementById(btnId)) {\n        fun.addButton(btnId, afterBtnName, buttonName, showColor, betFun);\n    }\n}\n```", "```\nvar declareBetGame = function () {\n    var choiceValue = $(\"#declareValue\").val();\n    var dateTime = new Date();\n    var desc = \"This Bet Game stop at the Time : \" +\n        dateTime + \"and the correct choice is\" +\n        fun.getLetterByNum(choiceValue);\n    if (choiceValue <= 0) {\n        tip.error(lgb.tip.selectOption);\n        return;\n    }\n    var feeData = instance.endGame.getData(choiceValue, desc);\n\n    web3.cmt.estimateGas({\n        data: feeData,\n        to: contract_address\n    }, function (error, gas) {\n        var virtualGas = '20000000';\n        if (error) {\n            console.log(\"error getting gas\");\n        } else {\n            virtualGas = gas;\n        }\n instance.endGame(Number(choiceValue), desc, {\n            gas: virtualGas,\n            gasPrice: 2000000000\n        }, function (e, result) {\n            if (e) {\n                // ...\n            } else {\n                getGameStatus('declare');\n            }\n        });\n    });\n}\n```", "```\nvar showRightChoice = function (contentId, userChoice, correctChoice,\n          afterBtnName, withdrawButtonName, statusPaid, payoutAmount) {\n    if (userChoice > 0) {\n        if (correctChoice == userChoice) {\n            if (statusPaid) {\n                showWithdrawSuccess(contentId, payoutAmount);\n            } else {\n                showWithdraw(contentId, afterBtnName,\n                  withdrawButtonName, withdraw);\n            }\n        } else {\n            showFailed(contentId);\n        }\n    } else {\n        showNotJoin(contentId);\n    }\n}\n\nvar showWithdraw = function (contentId, afterBtnName, buttonName, betFun) {\n    var id = \"winner-div\";\n    var showColor = \"#1976d2\";\n    if (!document.getElementById(id)) {\n        fun.addButton(contentId, afterBtnName, buttonName, showColor, betFun);\n    }\n    var content = '<div class=\"winner-show\">...</div>';\n    fun.addDivInnerhtml(domType[0], [attrType[0]], appendType[1],\n      content, [id], contentId);\n}\n```", "```\nvar withdraw = function () {\n    instance.payMe(function (e, result) {\n        if (e != null) {\n            if (e.code == '1001') {\n                tip.error(lgb.withdraw.info + lgb.cancelled)\n            } else {\n                tip.error(lgb.withdraw.info + lgb.error)\n            }\n        } else {\n            console.log(result);\n            $(\"#msg\").html(lgb.bet.pendingWithdraw);\n            $('#msg').css('display', 'block');\n            document.getElementById(contentId).style.display = 'none';\n            getGameStatus('withdraw');\n        }\n    });\n}\n```", "```\nvar saveLocalStorageBet = function (contractAddress) {\n    if (window.localStorage) {\n        var storage = window.localStorage;\n        var item = {\"userAddress\": userAddress,\n                    \"contractAddress\": contractAddress};\n        storage.setItem(\"bets\", item);\n    }\n}\n```", "```\nvar requestListInfo = function (pageNo) {\n    var methodId = 'de2fd8ab,83bd72ba,3cc4c6ce,9c16667c,340190ec';\n    var url = 'https://api.cmttracking.io/api/v3/contractsByType?funcIds='\n      + methodId + \"&limit=\" + pageSize + \"&page=\" + pageNo\n    $.ajax({\n        url: url,\n        dataType: 'json',\n        type: 'GET',\n        async: true,\n        success: function (result) {\n            if (result && result.data && result.data.objects) {\n                $(\"#totalCount\").val(result.data.meta.total);\n                var totalPage = parseInt(\n                    result.data.meta.total / pageSize) + 1;\n                $(\"#totalPage\").val(totalPage);\n                var lastCount = result.data.meta.total % pageSize;\n                if (pageNo < totalPage) {\n                    lastCount = pageSize;\n                }\n                var id = \"listContent\";\n                divCount = 0;\n                if (result.data.objects.length <= 0) {\n                    tip.closeLoad();\n                    return;\n                }\n                console.log(result.data.objects);\n                for (var i = 0; i < result.data.objects.length; i++) {\n                    var obj = result.data.objects[i];\n                    appendChildList(obj.address, id,\n                                    lastCount, userAddress);\n                }\n            }\n        },\n        error: function (e) {\n            console.log(\"Get user contract address failed\" + e)\n        }\n    });\n}\n```", "```\nrule \"payPension\" when {\n  p: Person(age >= 65, eligible == true);\n  b: Budget(amount >= 10);\n} then {\n  p.addr.transfer(10);\n  p.eligible = false;\n  b.amount -= 10;\n}\n```", "```\ncontract AgePension {\n    struct Person {\n        int age;\n        bool eligible;\n        address addr;\n    }\n\n    struct Budget {\n        int amount;\n    }\n\n    mapping (address => uint256) addr2idx;\n    Person[] ps;\n    Budget;\n\n    constructor () public {\n        factInsert budget;\n        budget.amount = 100;\n    }\n\n    function addPerson(int age) public {\n        ps.push(Person(age, true, msg.sender));\n        addr2idx[msg.sender] = factInsert ps[ps.length-1];\n    }\n\n    function deletePerson() public {\n        factDelete addr2idx[msg.sender];\n    }\n\n    function pay() public {\n        fireAllRules;\n    }\n\n    function () public payable { }\n\n    rule \"payPension\" when {\n        p: Person(age >= 65, eligible == true);\n        b: Budget(amount >= 10);\n    } then {\n        p.addr.transfer(10);\n        p.eligible = false;\n        b.amount -= 10;\n    }\n}\n```", "```\ncontract C {\n    rule \"ruleName\"\n    // Rule attributes\n    when {\n        // Filter Statements\n    } then {\n        // Action Statements\n    }\n}\n```", "```\nrule \"test1\" salience 20 when {\n  p: Person(val >= 10);\n} then {\n  p.addr.send(1);\n  p.val--;\n  update p;\n}\n\nrule \"test2\" salience 30 when {\n  p: Person(val >= 20);\n} then {\n  p.addr.send(2);\n  p.val--;\n  update p;\n}\n```", "```\nrule \"test\" no_loop true when {\n  p: Person(age >= 20);\n} then {\n  p.age++;\n  p.addr.send(1);\n  update p;\n}\n```", "```\nrule \"test\" when {\n  p: Person(age >= 65, eligible == true);\n} then {\n  ... ...\n}\n```", "```\nrule \"test\" when {\n  p: Person(age >= 65, eligible == true);\n} then {\n  p.addr.transfer(10);\n  p.eligible = false;\n  update p;\n}\n```", "```\nrule \"test1\"\nwhen {\n    customer : Customer( age > 60 );\n} then {\n    customer.discount = 10;\n}\n```", "```\nrule \"test2\"\n    extends \"test1\"\nwhen {\n    car : Car ( ownerID == customer.id );\n} then {\n    car.freeParking = true ;\n}\n```", "```\ncontract C {\n  struct fact { int x; }\n  fact[] facts;\n  constructor() public {\n    facts.push(fact(0));\n    // insert the fact into working memory\n    factInsert facts[facts.length-1];\n  }\n}\n```", "```\nrule \"four hour fix amount\" when {\n    p: Person()\n    f: Flight(delay >= 4, id == p.flightID)\n} then {\n    p.claimAmount = max(100, p.claimAmount);\n}\n```", "```\nrule \"six hour limited amount\" when {\n    p: Person()\n    f: Flight(delay >= 6, id == p.flightID)\n} then {\n    p.claimAmount = max(min(p.delayExpense, 300), p.claimAmount);\n}\n```", "```\nrule \"first bracket\" when{\n    p: Person(income > 0)\n} then {\n    p.tax += min(9525, p.income) * 10 / 100;\n}\n```", "```\nrule \"second bracket\" when{\n    p: Person(income > 9525)\n} then {\n    p.tax += (min(38700, p.income) - 9525) * 12 / 100;\n}\n```", "```\nrule \"third bracket\" when{\n    p: Person(income > 38700)\n} then {\n    p.tax += (min(82500, p.income) - 38700) * 22 / 100;\n}\n\nrule \"fourth bracket\" when{\n    p: Person(income > 82500)\n} then {\n    p.tax += (min(157500, p.income) - 82500) * 24 / 100;\n}\n\nrule \"fifth bracket\" when{\n    p: Person(income > 157500)\n} then {\n    p.tax += (min(200000, p.income) - 157500) * 32 / 100;\n}\n\nrule \"sixth bracket\" when{\n    p: Person(income > 200000)\n} then {\n    p.tax += (min(500000, p.income) - 200000) * 35 / 100;\n}\n\nrule \"seventh bracket\" when{\n    p: Person(income > 500000)\n} then {\n    p.tax += (p.income - 500000) * 37 / 100;\n}\n```", "```\nrule \"Burger\"\n  salience 10\n  lock_on_active\nwhen{\n    b: Burger();\n    bl: Bill();\n} then {\n    bl.amount += 11;\n}\n\nrule \"Drink\"\n  salience 10\n  lock_on_active\nwhen{\n    d: Drink();\n    bl: Bill();\n} then {\n    bl.amount += 3;\n}\n```", "```\nrule \"Combo\" when{\n    b: Burger(combo==-1);\n    d: Drink(combo==-1);\n    bl: Bill();\n} then {\n    b.combo = bl.nCombo;\n    d.combo = bl.nCombo;\n    bl.nCombo++;\n    bl.amount -= 2;\n    update b;\n    update d;\n}\n```", "```\n$ git clone https://github.com/second-state/lity.git\n$ cd lity\n$ mkdir build\n$ cd build\n$ sudo apt-get install cmake libblkid-dev e2fslibs-dev\n    libboost-all-dev libaudit-dev\n$ cmake ..\n$ make\n... ...\n$ ./lityc/lityc --help\n```", "```\npragma solidity ^0.4.23;\n\ncontract ReverseContract {\n  function reverse(string input) public returns(string) {\n    string memory output = eni(\"reverse\", input);\n    return output;\n  }\n}\n```", "```\n$ ./lityc/lityc --bin Reverse.lity\n======= ./Reverse.lity:ReverseContract =======\nBinary:\n608060405234...\n\n$ ./lityc/lityc --abi Reverse.lity\n======= ./Reverse.lity:ReverseContract =======\nContract JSON ABI\n[{\"constant\":false,\"inputs\":[{\"name\":\"input\",\"type\":\"string\"}],\n\"name\":\"reverse\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\n\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n```", "```\n> personal.unlockAccount(cmt.accounts[0],'1234');\n> bytecode=\"0x608060...\"\n> abi = [{\"constant\":false,\"inputs\":[{\"name\":\"input\",\n\"type\":\"string\"}],\"name\":\"reverse\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\n\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n> contract = web3.cmt.contract(abi);\n> contractInstance = contract.new(\n  {\n    from: web3.cmt.accounts[0],\n    data: bytecode,\n    gas: \"4700000\"\n  },\n  function(e, contract) {\n    console.log(\"contract address: \" + contract.address);\n    console.log(\"transactionHash: \" + contract.transactionHash);\n  }\n );\n```", "```\n> contractInstance.reverse.call(\"hello\", {from: cmt.accounts[0]})\nolleh\n```", "```\npragma solidity ^0.4.0;\n\ncontract RSACrypto {\n    function encrypt(string pubkey, string plaintext)\n                        public pure returns (string) {\n        string memory ret;\n        ret = eni(\"rsa_encrypt\", pubkey, plaintext);\n        return ret;\n    }\n\n    function decrypt(string prikey, string ciphertext)\n                        public pure returns (string) {\n        string memory ret;\n        ret = eni(\"rsa_decrypt\", prikey, ciphertext);\n        return ret;\n    }\n}\n```", "```\n$ ./lityc/lityc --abi --bin -o output RSACrypto.lity\n$ cat output/RSACrypto.abi\n[{\"constant\":true,\"inputs\":...}]\n$ cat output/RSACrypto.bin\n608060405234801...\n```", "```\n> personal.unlockAccount(cmt.accounts[0],'1234');\n> bytecode=\"0x608060...\"\n> abi = [{\"constant\":false,\"inputs\":...}]\n> contract = web3.cmt.contract(abi);\n> c = contract.new(\n  {\n    from: web3.cmt.accounts[0],\n    data: bytecode,\n    gas: \"4700000\"\n  },\n  function(e, contract) {\n    console.log(\"contract address: \" + contract.address);\n    console.log(\"transactionHash: \" + contract.transactionHash);\n  }\n );\n```", "```\nprikey = \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEowIBAA...\";\npubkey = \"-----BEGIN PUBLIC KEY-----\\ +X\\nlNlozUy...\";\n\n# Encrypt\n> ciphertext = c.encrypt.call(pubkey, 'Hello World!',\n                                {from: cmt.accounts[0]})\n\"49d511a44a3d2a24...b258e70282a\"\n\n# Decrypt\n> c.decrypt.call(prikey, ciphertext, {from: cmt.accounts[0]})\n\"Hello World!\"\n```", "```\npragma solidity ^0.4.23;\n\ncontract DogecoinVerifier {\n\n  ...\n\n  function verifyBlock(uint version, string prev_block,\n        string merkle_root, uint timestamp, string bits, uint nonce)\n        pure public returns (bool) {\n    DogecoinBlockHeader memory block_header =\n        DogecoinBlockHeader(version, prev_block, merkle_root,\n                            timestamp, bits, nonce);\n    string memory block_header_hex = generateBlockHeader(block_header);\n    string memory pow_hash = reverseHex(eni(\"scrypt\", block_header_hex));\n    uint256 target = bitsToTarget(bits);\n    if (hexToUint(pow_hash) > target) {\n      return false;\n    }\n    return true;\n  }\n\n  ...\n}\n```", "```\n$ ./lityc/lityc --abi --bin -o output DogecoinVerifier.lity\n$ cat output/DogecoinVerifier.abi\n[{\"constant\":true,\"inputs\":...}]\n$ cat output/DogecoinVerifier.bin\n608060405234801561001057600080fd5b506111d5...\n```", "```\n> personal.unlockAccount(cmt.accounts[0],'1234');\n> bytecode=\"0x608060...\"\n> abi = [{\"constant\":false,\"inputs\":...}]\n> contract = web3.cmt.contract(abi);\n> contractInstance = contract.new(\n  {\n    from: web3.cmt.accounts[0],\n    data: bytecode,\n    gas: \"4700000\"\n  },\n  function(e, contract) {\n    console.log(\"contract address: \" + contract.address);\n    console.log(\"transactionHash: \" + contract.transactionHash);\n  }\n );\n```", "```\n# Block #2 of dogecoin\n> c.verifyBlock.call(1, \"82...\", \"3b...\", 1386474933, \"1e0ffff0\",\n                              3404207872, {from: cmt.accounts[0]})\ntrue\n\n# 1-bit of nonce changed\n> c.verifyBlock.call(1, \"82...\", \"3b...\", 1386474933, \"1e0ffff0\",\n                                3404207871, {from: cmt.accounts[0]})\nfalse\n```", "```\n#include <eni.h>\nclass Reverse : public eni::EniBase {\npublic:\n  Reverse(const std::string& pArgStr)\n    : eni::EniBase(pArgStr) { ... }\n  ~Reverse() { ... }\n\nprivate:\n  bool parse(const json::Array& pArgs) override { ... }\n  eni::Gas gas() const override { ... }\n\n  bool run(json::Array& pRetVal) override { ... }\n};\n```", "```\nclass Reverse : public eni::EniBase {\n\n  ...\nprivate:\n  bool parse(const json::Array& pArgs) override {\n    m_Str = pArgs[0].toString();\n    return true;\n  }\n\n  std::string m_Str;\n};\n```", "```\nclass Reverse : public eni::EniBase {\n\n  ...\nprivate:\n  eni::Gas gas() const override {\n    return m_Str.length();\n  }\n};\n```", "```\nclass Reverse : public eni::EniBase {\n  ...\nprivate:\n  bool run(json::Array& pRetVal) override {\n    std::string ret(m_Str.rbegin(), m_Str.rend());\n    pRetVal.emplace_back(ret);\n    return true;\n  }\n};\n```", "```\nENI_C_INTERFACE(reverse, Reverse)\n```", "```\nCPPFLAGS=-I${LIBENI_PATH}/include\nCXXFLAGS=-std=c++11 -fPIC\nLDFLAGS=-L${LIBENI_PATH}/lib\nLDADD=-leni\n\nall:\n  g++ ${CPPFLAGS} ${CXXFLAGS} ${LDFLAGS} -shared -oeni_reverse.so\n    eni_reverse.cpp ${LDADD}\n```", "```\n> personal.unlockAccount(cmt.accounts[0],'1234');\n> var payload = {\n  from: cmt.accounts[0],\n  name: \"reverse\",\n  version: \"v1.0.0\",\n  fileUrl:\n    '{\"ubuntu\":\"http://host/eni_reverse_ubuntu16.04.so\",\n      \"centos\":\"http://host/eni_reverse_centos7.so\"}',\n  md5:\n    '{\"ubuntu\":\"b44...906d\", \"centos\":\"04a...851\"}'\n}\n> web3.cmt.governance.proposeDeployLibEni(payload, (err, res) => {\n  if (!err) {\n    console.log(res)\n  } else {\n    console.log(err)\n  }\n})\n```", "```\n> personal.unlockAccount(cmt.accounts[0],'1234');\n> var payload = {\n  from: \"0x7eff122b94897ea5b0e2a9abf47b86337fafebdc\",\n  proposalId: \"JTUx+ODH0/OSdgfC0Sn66qjn2tX8LfvbiwnArzNpIus=\",\n  answer: \"Y\"\n}\n> web3.cmt.governance.vote(payload, (err, res) => {\n  if (!err) {\n    console.log(res)\n  } else {\n    console.log(err)\n  }\n})\n```"]