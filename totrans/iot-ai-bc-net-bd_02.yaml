- en: © Nishith Pathak and Anurag Bhandari 2018Nishith Pathak and Anurag BhandariIoT,
    AI, and Blockchain for .NET[https://doi.org/10.1007/978-1-4842-3709-0_2](A458845_1_En_2_Chapter.html)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 2018年 Nishith Pathak 和 Anurag Bhandari。Nishith Pathak 和 Anurag Bhandari 著。《.NET
    上的物联网、人工智能和区块链》。
- en: 2. Understanding the Internet of Things and Azure IoT Suite
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2. 理解物联网和 Azure IoT 套件。
- en: 'Nishith Pathak^(1 ) and Anurag Bhandari²(1)Kotdwara, Dist. Pauri Garhwal, India(2)Jalandhar,
    Punjab, IndiaA few years ago, Internet of Things (IoT) was an emerging trend.
    Today, it is part of modern arsenal of IT solutions. In the consumer space, IoT
    is generally perceived as smartwatches, fridges, TVs, etc.—age-old things that
    are now connected to the Internet. It is seen more as a convenience feature than
    a solution to an existing problem (smart thermostats and remote pet food dispensers,
    anyone?).At the enterprise level, IoT has been a boon, especially in automation.
    Take for instance an automobile factory set up with hundreds of machines working
    hard-to-manufacture cars. Each machine may have lots of moving parts, which are
    susceptible to wear and tear. There are several parameters that must be regularly
    checked to ensure a 100% safe and operational working environment at all times.
    Such monitoring is largely a manual process at typical factories, done by humans.
    Data is recorded digitally or on paper and analyzed later to identify machines
    (or specific parts) that need repair or replacement. This is a slow and expensive
    process. Monitoring of manufacturing equipment can be automated by retrofitting
    cheap IoT devices into these machines. IoT devices can be customized to have specialized
    sensors to monitory specific parameters for different machines. In a world where
    Cloud storage and Big Data analysis is cheap, the IoT devices can run 24x7 to
    record and store monitoring data. This large feed of data can then be automatically
    analyzed later or in real time to detect potential problems. Factory supervisors
    can then be automatically intimated through text and notification messages.What
    was the dominion of electrical and electronics engineers until a few years ago
    is now part of solution offerings at every major IT firm, making IoT a vital skill
    to have for computer and software engineers. To put it a little differently, what
    was a hardware and embedded software affair earlier is now writing normal software
    programs for tiny computers (IoT devices).In this chapter, you learn about:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Nishith Pathak^(1) 和 Anurag Bhandari²(1) 印度，帕里·加尔瓦尔县，科特瓦拉 (1) 印度旁遮普邦，贾兰达尔 (2)
    几年前，物联网 (IoT) 是一个新兴趋势。 今天，它是现代 IT 解决方案的一部分。 在消费者领域，物联网通常被认为是智能手表、冰箱、电视等——老旧物品，现在连接到互联网。
    它更多地被视为一种便利功能，而不是解决现有问题的方案（智能恒温器和远程宠物食品分配器，有人需要吗？）在企业级别，物联网一直是一个福音，特别是在自动化方面。
    以一个装有数百台机器的汽车工厂为例，这些机器正在努力制造汽车。 每台机器可能有许多活动部件，这些部件容易磨损。 必须定期检查几个参数，以确保始终保持 100%
    安全和可操作的工作环境。 在典型工厂中，这种监测很大程度上是一个手动过程，由人类完成。 数据以数字或纸质记录，稍后进行分析，以确定需要维修或更换的机器（或特定部件）。
    这是一个缓慢而昂贵的过程。 通过在这些机器上改装廉价的物联网设备，可以自动监控制造设备。 物联网设备可以定制为具有专用传感器，用于监控不同机器的特定参数。
    在一个云存储和大数据分析便宜的世界中，物联网设备可以全天候运行，记录和存储监控数据。 然后可以稍后自动分析此大量数据或实时分析以检测潜在问题。 然后可以通过短信和通知消息自动通知工厂监督员。直到几年前，这是电气和电子工程师的领地，现在已成为每个主要
    IT 公司解决方案提供的一部分，使得物联网成为计算机和软件工程师必备的技能。 简单地说，几年前是硬件和嵌入式软件的事情，现在是为微型计算机（物联网设备）编写普通软件程序。在本章中，您将学习以下内容：
- en: The history of IoT
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物联网的历史
- en: IoT devices, including enablers such as Raspberry Pi
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IoT 设备，包括树莓派等支持设备
- en: Network connectivity, including messaging and protocols
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络连接性，包括消息传递和协议
- en: Practical use cases
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际应用案例
- en: Configuring and deploying a single IoT device
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置和部署单个 IoT 设备
- en: Azure IoT Suite and its components
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure IoT Suite 及其组件
- en: Azure IoT Hub architecture
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure IoT Hub 架构
- en: Configuring and deploying multiple IoT devices at scale using the Azure IoT
    Hub
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Azure IoT Hub 在规模上配置和部署多个 IoT 设备
- en: The History of IoT
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 物联网的历史
- en: Like artificial intelligence, the central idea behind IoT is not new. The phrase
    “Internet of Things” was coined by Kevin Ashton in 1999, but the origin of the
    concept goes way back to early 80s. In 1982, a re-engineered Coke bottle dispensing
    machine—at Carnegie Mellon University’s computer science department—became the
    first appliance to be connected to the Internet (ARPANET, as it was called during
    its formative years). With the help of micro-switches and sensors, the Coke machine
    could continuously report its inventory status (number of bottles remaining, number
    of warm versus cold bottles, etc.). So instead of students visiting the machine
    and then being disappointed on finding no chilled bottles, students could log
    in to a website and check its status. The famed Coke machine is still connected
    to the Internet, and even has a page on CMU’s website to tell its own story.John
    Romkey, creator of TCP/IP stack for IBM PCs, created a toaster in 1990 that could
    be turned on or off over the Internet. In 1993, Quentin Stafford-Fraser connected
    a coffee pot to the Internet to monitor its pot levels.Mark Weiser’s popular article
    on ubiquitous computing, called “The Computer for the 21^(st) Century,” explored
    this idea in detail. So, you see, the idea was there but it did not get widespread
    attention as the Internet itself was in its infancy. It is said that when Kevin
    Ashton showed his presentation on a revolutionary new idea on RFIDs to his management
    at P&G, he called it the “Internet of Things” to in order to attract immediate
    interest, as the Internet was a red hot topic in those days.The RFID revolution
    indeed provided a thrust to the then future IoT revolution as we know it today.
    Digitally identifying real-world physical things using fingertip-small circuits
    was a powerful concept that enabled digital representations of these on the Internet.In
    the early 2000s, IoT as a term started getting traction. It was being mentioned
    in scientific journals, at conferences, and in magazines. It was not until 2009
    that it was officially born, when (according to Cisco) the number of devices that
    were connected to the Internet exceeded the number of people in the world. The
    release of Raspberry Pi in 2012 and the subsequent wave of tiny system on a chip
    (SoC) computers were major contributors to the IoT phenomenon. IoT started receiving
    widespread industry adoption starting in 2014; the trends have not looked back
    since.Figure [2-1](#Fig1) summarizes the timeline of IoT.![A458845_1_En_2_Fig1_HTML.png](A458845_1_En_2_Fig1_HTML.png)Figure
    2-1IoT timeline chart that summarizes the milestones
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 像人工智能一样，物联网背后的核心理念并不新。1999年，凯文·阿什顿（Kevin Ashton）创造了“物联网”一词，但这一概念的起源可以追溯到80年代初。1982年，在卡内基梅隆大学计算机科学系，一台重新设计的可口可乐瓶装机成为首台连接到互联网（当时称为ARPANET）的电器设备。借助微型开关和传感器，这台可口可乐机能够持续报告其库存状态（剩余瓶数、温瓶与冷瓶数等）。因此，学生们不必再亲自前往机器并失望地发现没有冷藏瓶，而是可以登录网站检查其状态。这台著名的可口可乐机仍然连接到互联网，并在卡内基梅隆大学的网站上有自己的页面来讲述它的故事。约翰·罗姆基（John
    Romkey），为IBM PC开发了TCP/IP协议栈，于1990年创造了一台可以通过互联网开关的烤面包机。1993年，昆汀·斯塔福德-弗雷泽（Quentin
    Stafford-Fraser）将一台咖啡壶连接到互联网以监控其水位。马克·韦瑟（Mark Weiser）在他关于泛在计算的知名文章《21世纪的计算机》中详细探讨了这一概念。所以，你看，这个想法确实存在，但由于互联网本身还处于萌芽阶段，并没有引起广泛关注。据说，当凯文·阿什顿向宝洁（P&G）的管理层展示了关于射频识别（RFID）的革新性新想法时，他将其称为“物联网”，以吸引立即的兴趣，因为当时互联网是一个炙手可热的话题。RFID革命确实为当今我们所知的物联网革命提供了推动力。使用指尖大小的电路来数字化识别现实世界中的物体是一个强大的概念，它使得这些物体的数字化表示能够在互联网上实现。在21世纪初，物联网作为一个术语开始引起关注。它在科学期刊、会议和杂志中被提及。直到2009年，根据思科的说法，连接到互联网的设备数量超过了世界上的人口数量，物联网正式诞生。2012年树莓派的发布及随后涌现的小型系统芯片（SoC）计算机浪潮是物联网现象的主要推动因素。物联网自2014年开始受到广泛的行业采纳；自那时以来，趋势一直在向前发展。图 [2-1](#Fig1)
    总结了物联网的时间线。![A458845_1_En_2_Fig1_HTML.png](A458845_1_En_2_Fig1_HTML.png)Figure
    2-1物联网里程碑时间线图
- en: IoT Devices
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 物联网设备
- en: 'There should be no confusion in the fact that “things,” devices, and IoT devices
    are all the same in an IoT network. As we saw at the start of this chapter, IoT
    devices can be thought of as being of two types—consumer and enterprise. In fact,
    there is a formal way of categorizing IoT itself:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: “物”，设备和物联网设备在物联网网络中都是相同的这一事实不应引起混淆。正如我们在本章开头看到的那样，物联网设备可以被认为是两种类型——消费者和企业。实际上，有一种正式的方式来对物联网本身进行分类：
- en: 'Consumer IoT : Consists of readymade devices for direct consumption by end
    users. Examples include smartwatches, smart TVs, and smart speakers. Devices are
    usually connected to each other or to the local network via Bluetooth or WiFi.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消费者物联网：包括供最终用户直接使用的现成设备。示例包括智能手表、智能电视和智能音箱。设备通常通过蓝牙或WiFi彼此连接，或者连接到本地网络。
- en: 'Industrial IoT : Consists of devices custom-made for specific enterprise and
    industrial scenarios. The car factory example we talked about earlier falls in
    this category. It is important to note that custom-made does not mean that all
    electronic components of a device are manufactured or even assembled. As you’ll
    see a little later, there are “boilerplate” enabler devices that can be customized
    or extended for creating large solutions. Devices are usually connected directly
    to the Internet via Ethernet or WiFi.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工业物联网：包括为特定企业和工业场景定制的设备。我们之前讨论过的汽车工厂示例属于这一类别。需要注意的是，定制并不意味着设备的所有电子组件都是制造或者甚至是组装的。正如稍后您将看到的那样，有一些“样板”启用设备可以定制或者扩展以创建大型解决方案。设备通常通过以太网或WiFi直接连接到互联网。
- en: NoteA trending term used in conjunction with IIoT is Industry 4.0 (or 4^(th)
    industrial revolution, 4IR). Every industrial revolution in history has been about
    automation—the first revolution was about mechanizing textile production, the
    second revolution revolved around steel and mass manufacturing (including assembly
    lines), and the third revolution was about digitizing manufacturing through the
    use of analytics and Cloud. Techniques such as Lean Manufacturing and Six Sigma
    were developed to improve efficiencies. Productivity gains were huge initially,
    but dipped substantially in recent years. There was a strong need to look to other
    ways to improve efficiencies.Industry 4.0 is about improving efficiencies through
    complete digital transformation using leading contemporary digital technologies—IIoT,
    Big Data, Cloud Computing, Augmented Reality, Robotics, etc. What started off
    with manufacturing now covers other industries such as healthcare, agriculture,
    logistics, and more. Benefits include decreased unplanned downtime, lower maintenance
    costs, reduced power consumption, and improved performance.It is easy to confuse
    the third industrial revolution with the fourth. The key differentiating factor
    is undoubtedly advancements in machine and deep learning, which gave rise to artificial
    intelligence, robotic process automation, and cognitive services as we know them
    today.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在与IIoT一起使用的热门术语是工业4.0（或第四次工业革命，4IR）。历史上的每一次工业革命都是关于自动化的——第一次革命是关于纺织品生产机械化，第二次革命围绕着钢铁和大规模制造（包括装配线），第三次革命是通过使用分析和云来数字化制造。诸如精益制造和六西格玛之类的技术被开发出来以提高效率。最初的生产率增长是巨大的，但近年来大幅下降。迫切需要寻找其他方法来提高效率。工业4.0是通过使用领先的当代数字技术——IIoT、大数据、云计算、增强现实、机器人技术等——实现完全数字化转型来提高效率的。最初是从制造业开始，现在覆盖了其他行业，如医疗保健、农业、物流等。其好处包括减少计划外停机时间、降低维护成本、减少能源消耗和提高性能。很容易将第三次工业革命与第四次混淆。关键的区别因素无疑是机器学习和深度学习的进步，这促成了我们今天所知道的人工智能、机器人流程自动化和认知服务。
- en: Sensors and Actuators
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传感器和执行器
- en: No discussion about IoT devices is complete without talking about their core
    building blocks—sensors and actuators.A sensor is a small electronic component
    that is designed to sense (detect) a specific parameter—sound, light, temperature,
    humidity, pressure, GPS coordinates, acceleration, etc. Our mobile phones come
    loaded with half a dozen sensors.An actuator is an electrical or mechanical device
    that performs an action or a movement (push, pull, or rotate). LEDs, motors, speakers,
    and vibrators are a couple of examples.An actuator is the logical opposite of
    sensor. How? Both sensors and actuators are transducers that convert one form
    of energy into another. A sensor converts a physical phenomenon into an electrical
    signal—a microphone converts sound vibrations into signals, a temperature sensor
    converts heat into its representative analogue or digital value. On the contrary,
    an actuator converts electrical signals into physical actions (rotation, light,
    sound, etc.).An IoT device is defined by the sensors and actuators it comes with.
    These may come either built into the device or as separate pluggable components.
    They can be controlled by the operating system of their IoT device. Because of
    this, sensors and actuators may work independently or in tandem.Figure [2-2](#Fig2)
    shows how an actuator complements a sensor on the same IoT device.![A458845_1_En_2_Fig2_HTML.jpg](A458845_1_En_2_Fig2_HTML.jpg)Figure
    2-2Workflow of an alarm going off on receiving a high temperature signal from
    sensor
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论物联网设备时，没有不谈论它们的核心构建模块——传感器和执行器的。传感器是一种小型电子元件，专门设计用于感知（检测）特定的参数——声音、光线、温度、湿度、压力、GPS
    坐标、加速度等。我们的手机装载了半打传感器。执行器是一种执行动作或运动（推、拉或旋转）的电气或机械设备。LED、电机、扬声器和振动器是其中的一些例子。执行器是传感器的逻辑相反。为什么？因为传感器和执行器都是将一种形式的能量转换成另一种形式的传感器。传感器将物理现象转换成电信号——麦克风将声音振动转换成信号，温度传感器将热量转换成其代表的模拟或数字值。相反，执行器将电信号转换成物理动作（旋转、光、声音等）。物联网设备的定义取决于其所配备的传感器和执行器。它们可能内置在设备中，也可能作为独立的可插拔组件。它们可以由物联网设备的操作系统控制。因此，传感器和执行器可能独立工作，也可能协同工作。图 [2-2](#Fig2)
    显示了在同一物联网设备上，执行器如何与传感器相辅相成。![A458845_1_En_2_Fig2_HTML.jpg](A458845_1_En_2_Fig2_HTML.jpg)图
    2-2 从传感器接收到高温信号时报警的工作流
- en: Enablers
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用器
- en: As noted earlier, for several years IoT was the dominion of electrical, electronics,
    and embedded engineers. In the early days of IoT revolution, network connectivity
    hardware was built into industrial machines and electronic products by manufacturers.
    Alternatively, custom or existing programmable microcontrollers were used as embedded
    devices on machines. Software for such systems were written either in assembly
    language or using specialized programming languages, often proprietary for the
    specific microcontroller. The release of Raspberry Pi in 2012 completely changed
    the status quo and virtually sparked off the modern IoT revolution.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面所指出的，多年来，物联网一直是电气、电子和嵌入式工程师的领域。在物联网革命的早期，网络连接硬件是由制造商内置到工业机器和电子产品中的。或者，定制或现有的可编程微控制器被用作嵌入式设备。这些系统的软件要么用汇编语言编写，要么使用专门的编程语言，通常是针对特定的微控制器而独有的。2012年发布的树莓派彻底改变了现状，几乎引发了现代物联网革命。
- en: Raspberry Pi
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 树莓派
- en: Raspberry Pi or RPi or just Pi is a system on a chip (SoC) device that has an
    ARM-based microprocessor, RAM, graphics processor, and various I/O and network
    connectivity options built on top of a single credit card-sized printed circuit
    board. In other words, it is a tiny general-purpose computer.Pi was launched as
    a cheap, affordable self-learning toolkit for school students and electronics
    enthusiasts by a not-for-profit organization based in the UK. It was complemented
    with a well-documented website containing tutorials for building all sorts of
    projects—from simple LED blinkers to full-blown theft prevention systems.Figure [2-3](#Fig3)
    shows a Raspberry Pi.![A458845_1_En_2_Fig3_HTML.jpg](A458845_1_En_2_Fig3_HTML.jpg)Figure
    2-3Raspberry Pi 2 Model BBeing a cheap (just $35) and sufficiently sophisticated
    SoC, Raspberry Pi offered limitless possibilities. At that price point, one can
    finally afford a general purpose computer rather than a single board microcontroller.
    Microcontrollers are similar to SoCs in that they have a CPU, small amount of
    memory, and some I/O. But they are less sophisticated than SoCs. While a microcontrollers
    are designed for embedded applications using specialized programming techniques/languages,
    a SoC has a microprocessor and a decent amount of RAM that allows it to run a
    full-blown operating system such as Linux and Windows, on which can be run general
    purpose computing applications written in all major high-level programming languages
    (Java, Python, C#, Perl, Ruby… you name it).As the Pi came with an Ethernet adapter
    and four USB ports to add more network adapters, such as Bluetooth and WiFi, it
    did not take much time for developers to leverage it as an IoT device. A question
    may pop in your mind at this point—IoT devices have sensors and/or actuators,
    so what about Raspberry Pi? To answer that question, look at Figure [2-4](#Fig4),
    which shows the schematics of a Pi.![A458845_1_En_2_Fig4_HTML.jpg](A458845_1_En_2_Fig4_HTML.jpg)Figure
    2-4The schematics of a Raspberry PiRaspberry Pi does not come with sensors and
    actuators of its own. But it does come with something called general purpose input-output
    (GPIO) pins. These pins are a bridge between the outside world and the internals
    of Pi. You can connect electronic components (sensors, actuators, and more)—such
    as LEDs, motors, buttons, or other boards and microcontrollers—with a Pi through
    its GPIO pins. Connected electronic components can then be controlled via software
    programs that run on top of the operating system installed on that Pi. Many popular
    programming languages provide easy APIs to interact with GPIO pins. Python is
    the most popular choice, and something used in code samples provided on RPi’s
    official documentation.A Pi can easily be fitted with sensors and store and run
    programs written to send data collected from sensors to a Cloud backend. With
    the hardware configuration that is has, a Pi can also be used in edge computing
    use cases. You will learn more about edge computing in the Network Connectivity
    section a bit later. Since a Pi is a tiny general-purpose computer, it can also
    be used without sensors or actuators, in use cases such as a web server or a media
    streaming platform.RPi comes in two major variants—the Raspberry Pi and the Raspberry
    Pi Zero, the former having four further variants and the latter having two (with
    and without WiFi). Price starts at $5 and goes up to $35.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派（Raspberry Pi 或 RPi 或简称 Pi）是一种系统芯片（SoC）设备，具有基于 ARM 的微处理器、内存、图形处理器以及各种 I/O
    和网络连接选项，全部构建在一个信用卡大小的印刷电路板上。换句话说，它是一台微型通用计算机。Pi 作为一种廉价、实惠的自学工具包，是由总部位于英国的非营利组织为学校学生和电子爱好者推出的。它配有一个文档完备的网站，其中包含各种项目的教程——从简单的
    LED 闪烁器到完整的防盗系统。图 [2-3](#Fig3) 展示了一个树莓派。![A458845_1_En_2_Fig3_HTML.jpg](A458845_1_En_2_Fig3_HTML.jpg)
    图 2-3 树莓派 2 Model B作为一款廉价（仅售 35 美元）且功能足够复杂的 SoC，树莓派提供了无限的可能性。在这个价格点上，人们终于可以负担得起一台通用计算机，而不是一块单板微控制器。微控制器与
    SoC 类似，它们都有一个 CPU、少量内存和一些 I/O。但它们比 SoC 不那么复杂。虽然微控制器是为了嵌入式应用而设计的，使用专门的编程技术/语言，但
    SoC 具有微处理器和足够多的 RAM，可以运行诸如 Linux 和 Windows 等完整的操作系统，在其上可以运行用所有主要高级编程语言编写的通用计算应用程序（Java、Python、C#、Perl、Ruby……）。由于
    Pi 配备了以太网适配器和四个 USB 端口，可以添加更多网络适配器，例如蓝牙和 WiFi，开发者很快就利用它作为 IoT 设备。这时你可能会想到一个问题——IoT
    设备有传感器和/或执行器，那树莓派呢？要回答这个问题，请看图 [2-4](#Fig4)，它展示了一个 Pi 的原理图。![A458845_1_En_2_Fig4_HTML.jpg](A458845_1_En_2_Fig4_HTML.jpg)
    图 2-4 树莓派的原理图树莓派本身不带有传感器和执行器。但它确实带有一种称为通用输入输出（GPIO）引脚的东西。这些引脚是外部世界和 Pi 内部之间的桥梁。通过它的
    GPIO 引脚，你可以连接电子元件（传感器、执行器等）——如 LED、电机、按钮或其他板子和微控制器——到一个 Pi。连接的电子元件然后可以通过安装在该 Pi
    上的操作系统上运行的软件程序来控制。许多流行的编程语言提供了与 GPIO 引脚交互的简单 API。Python 是最受欢迎的选择，在 RPi 官方文档提供的代码示例中也有所使用。可以很容易地为树莓派配备传感器，并编写程序来将从传感器收集的数据发送到云后端并运行。具有这种硬件配置，树莓派还可以用于边缘计算用例。稍后在网络连接部分你将了解更多关于边缘计算的内容。由于
    Pi 是一台微型通用计算机，因此它也可以在没有传感器或执行器的情况下使用，例如作为 Web 服务器或媒体流平台。RPi 有两种主要变体——树莓派和树莓派 Zero，前者有四种进一步的变体，后者有两种（带
    WiFi 和不带 WiFi）。价格从 5 美元起，最高达 35 美元。
- en: Arduino
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Arduino
- en: Arduino is one of the most popular single board microcontrollers. Unlike the
    Raspberry Pi, Arduino is not an SoC and does not have a microprocessor. It has
    a lower performance CPU and a few KBs of RAM. Due to this, it manages to be even
    cheaper than Raspberry Pi Zero. But even a low hardware configuration is mostly
    sufficient to allow it to be used as an IoT device that just has to capture sensor
    data and send it to a Cloud backend for storage and processing.Like the RPi, Arduino
    has digital input-output pins that can be connected with electronic components
    to extend it as an IoT device. It also comes with a USB port that can be used
    to power or program the board. It does not run an OS, so programs have to be uploaded
    from a regular computer (PC, laptop, etc.) through a USB cable. What makes Arduino
    stand out from other microcontrollers is its ability to be programmed without
    a separate hardware (programmer). Arduino provides an IDE software to write code
    and upload it onto the board.Figure [2-5](#Fig5) shows a diagrammatic representation
    of an Arduino UNO board.![A458845_1_En_2_Fig5_HTML.jpg](A458845_1_En_2_Fig5_HTML.jpg)Figure
    2-5Arduino UNOArduino is open source, meaning its blueprint and architecture have
    been openly made available online for any one to refer or even use to build their
    own Arduino boards. This is another reason behind Arduino’s popularity since now
    there are hundreds of small to medium-sized board makers that produce Arduinos
    globally.Arduino has dozens of official variants, the most popular one being Arduino
    UNO, which is well-suited to beginners who want to learn about the board.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino 是最受欢迎的单板微控制器之一。与树莓派不同，Arduino 不是 SoC，也没有微处理器。它拥有性能较低的 CPU 和几 KB 的 RAM。因此，它的价格甚至比树莓派
    Zero 还要便宜。但即使是较低的硬件配置也大多足以使其用作仅需捕获传感器数据并将其发送到云后端进行存储和处理的物联网设备。与 RPi 一样，Arduino
    有数字输入输出引脚，可以连接电子元件以将其扩展为物联网设备。它还配有一个 USB 端口，可用于为板子供电或编程。它不运行操作系统，因此程序必须通过 USB
    线从常规计算机（PC、笔记本电脑等）上传。Arduino 突出之处在于其无需单独硬件（编程器）即可编程的能力。Arduino 提供了一个 IDE 软件来编写代码并将其上传到板子上。图
    [2-5](#Fig5) 展示了 Arduino UNO 板的示意图。![A458845_1_En_2_Fig5_HTML.jpg](A458845_1_En_2_Fig5_HTML.jpg)图
    2-5 Arduino UNOArduino 是开源的，这意味着其蓝图和架构已经在网上公开供任何人参考，甚至用于构建他们自己的 Arduino 板。这是 Arduino
    受欢迎的另一个原因，因为现在全球有数百家小到中型的板卡制造商生产 Arduino。Arduino 有数十种官方变体，最受欢迎的是 Arduino UNO，非常适合想要了解该板的初学者。
- en: BLE Beacons
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: BLE Beacons
- en: Bluetooth low energy beacons or simply Beacons are a very different class of
    IoT enablers. A beacon is a dead-simple, battery-powered, thumb-sized device whose
    sole purpose is to transmit Bluetooth signals containing its universally unique
    identifier (UUID). Several beacons can be deployed in a hall or a building. A
    mobile app can then be designed to detect Bluetooth signals coming from all the
    beacons in range and perform a specific action based on the closest beacon.Perhaps
    beacons are best understood through its retail store use case. Imagine a retail
    store or a supermarket that is fitted with beacons—one at the entrance, one at
    checkout, and one each in every aisle. Each beacon regularly transmits its UUID.
    You walk into the store with the store’s official app installed on your phone.
    The app is designed to interact with the store’s beacons. The moment you enter,
    your app detects the beacon at the entrance. The app’s developers have programmed
    it to trigger a notification message on coming close to each beacon. On coming
    in proximity to the entrance beacon, you instantly get a notification that says
    something like, “Welcome to ABC Store. This is an excellent time to check in,
    as we have plenty of discounts. Check aisle 7 through 13 for maximum discounts.”
    The beacon didn’t send this message, your app did (there’s possibly an if-else
    logic for each beacon’s UUID). Similarly, when you pass through an aisle, you
    get an aisle-specific notification, “Hey, did you know that your favorite oats
    are 15% off?” In this way, retail store owners can make shopping more engaging,
    increasing their revenues in the process.Apart from being able to retrieve a beacon’s
    UUID, an app may also use its Bluetooth signal strength value to roughly calculate
    its distance (in meters) from the mobile device.Both iOS and Android offer native
    APIs to interact with beacons. Apple calls its API set iBeacon, while Google calls
    it EddyStone. AltBeacon is a popular open alternative, created by Radius Networks.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 低功耗蓝牙信标，或简称信标，是一类非常不同的物联网启用器。信标是一个简单、电池供电、拇指大小的设备，其唯一目的是发送包含其通用唯一标识符（UUID）的蓝牙信号。可以在大厅或建筑物中部署多个信标。然后可以设计一个移动应用程序来检测所有范围内信标发出的蓝牙信号，并根据最近的信标执行特定操作。也许通过其零售店使用案例最好理解信标。想象一家零售店或超市配备了信标——一个在入口处，一个在结账处，每个过道都有一个。每个信标定期发送其UUID。你带着商店官方应用程序安装在手机上进入商店。该应用程序旨在与商店的信标交互。当你进入时，你的应用程序会检测到入口处的信标。应用程序的开发人员已经将其编程为在接近每个信标时触发通知消息。当接近入口信标时，你立即收到一条通知消息，内容如“欢迎来到ABC商店。现在是一个很好的时间登记，因为我们有很多折扣。查看7到13号过道以获取最大折扣。”信标没有发送这条消息，是你的应用程序发送的（对于每个信标的UUID可能有一个if-else逻辑）。类似地，当你经过一个过道时，你会收到一个特定于过道的通知，“嘿，你知道你最喜欢的燕麦有15%的折扣吗？”通过这种方式，零售店业主可以使购物更具吸引力，从而增加其收入。除了能够检索信标的UUID外，应用程序还可以使用其蓝牙信号强度值来粗略计算其与移动设备的距离（以米为单位）。iOS和Android都提供了与信标交互的本机API。苹果称其API集为iBeacon，而谷歌称其为EddyStone。AltBeacon是一个由Radius
    Networks创建的受欢迎的开放式替代方案。
- en: Other Honorable Mentions
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 其他值得一提的产品
- en: Intel’s family of IoT devices—Edison, Joule, Arduino 101, Curie, and Galileo—all
    based on Intel processors. Edison and Joule are powerful but expensive alternatives
    to Raspberry Pi.BeagleBone—another worthy RPi alternative—comes with a large number
    of analog and digital I/O pins.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 英特尔的物联网设备系列—Edison、Joule、Arduino 101、Curie 和 Galileo，都基于英特尔处理器。Edison 和 Joule
    是功能强大但昂贵的 Raspberry Pi 替代品。BeagleBone—另一个值得一提的 RPi 替代品—具有大量模拟和数字 I/O 引脚。
- en: Products
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 产品
- en: 'By now you have learned about the building blocks of an IoT device—sensors,
    actuators, and IoT enabler devices. You have seen various options for building
    an IoT device of your own at home. Now let’s spend a quick minute or two to check
    another type of IoT devices: ones that are factory fitted by manufacturers into
    electronic items and home and electrical appliances. These are IoT devices whose
    hardware cannot be customized or extended, but which may allow software customizations
    through a companion mobile app.A popular category of IoT products is wearables.
    These are devices that can be worn, things such as:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经了解了物联网设备的构建基块——传感器、执行器和物联网启用设备。你已经看到了在家里构建物联网设备的各种选项。现在让我们花一两分钟时间快速了解另一种类型的物联网设备：那些由制造商预装到电子产品和家用电器中的设备。这些是那些硬件无法定制或扩展，但可以通过配套的移动应用进行软件定制的物联网设备。一种热门的物联网产品类别是可穿戴设备。这些是可以佩戴的设备，例如：
- en: 'Smartwatches—Monitor heart rate, distance run, altitude variations, sleep patterns,
    and more. Examples: Apple Watch, Moto 360, Samsung Galaxy Gear, Fossil SmartWatch.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能手表—监测心率、跑步距离、海拔变化、睡眠模式等等。例如：Apple Watch、Moto 360、Samsung Galaxy Gear、Fossil
    SmartWatch。
- en: 'Fitness bands—Similar to smartwatches, sans the clock aspect. Examples: Fitbit,
    Pebble, and Mi Band.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 健身手环—类似于智能手表，但不具备时钟功能。例如：Fitbit、Pebble 和 Mi Band。
- en: 'Smartglasses—Come with a camera and motion sensors, are often used with computer
    vision and augmented reality applications. Examples: Google Glass, PivotHead,
    Vuzix, and Microsoft HoloLens.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能眼镜—配备了摄像头和运动传感器，通常与计算机视觉和增强现实应用程序一起使用。例如：Google Glass、PivotHead、Vuzix 和 Microsoft
    HoloLens。
- en: 'Shoes—Come with various health tracking sensors. Examples: Nike+ and Under
    Armor Speedform.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鞋子—配备了各种健康追踪传感器。例如：Nike+ 和 Under Armor Speedform。
- en: Apart from wearables, other electronic and even simple home devices that may
    be IoT-enabled are TVs, speakers, washing machines, thermostats, door locks, switches,
    plugs, cameras, and light bulbs. Amazon’s Dash buttons also quality as IoT devices.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 除了可穿戴设备，其他电子设备甚至简单的家用设备也可能具有物联网功能，如电视、扬声器、洗衣机、恒温器、门锁、开关、插座、摄像头和灯泡。亚马逊的 Dash
    按钮也算是物联网设备。
- en: Network Connectivity
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络连接
- en: Their ability to connect to a network for sharing data is what sets IoT devices
    apart from regular electronic devices. However, contrary to the name “Internet”
    of Things, devices do not have to be connected to the Internet all the time to
    qualify as IoT devices. They may operate in offline mode most of the time and
    connect to the Internet only occasionally to sync data with their Cloud backend.
    Monitoring devices in a factory setup where real-time updates is not crucial may
    operate in this mode.Alternatively, IoT devices may be connected to each other
    locally without an active Internet connection. For example, consider a media streaming
    device connected to a TV and various stream sources (mobile, laptop, PC, etc.)
    on a local WiFi network.Depending on connectivity options available on the device,
    it may be connected to other devices or the Internet through Bluetooth or Ethernet.
    ZigBee  is another popular option for low-powered devices.Since IoT is all about
    transportation of data (from sensors or otherwise) from one device to others or
    to a Cloud backend, let’s take a quick glimpse at some popular messaging protocols
    used with IoT devices.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 与普通电子设备相比，物联网设备之所以与众不同，是因为它们能够连接到网络共享数据。然而，与“物联网”这个名字相反，设备并不必须始终连接到互联网才能算作物联网设备。它们可能大部分时间以离线模式运行，并偶尔与互联网连接以同步数据到其云后端。在不需要实时更新的工厂设置中监控设备可能以这种模式运行。另外，物联网设备也可以在没有主动互联网连接的情况下局域网内互相连接。例如，考虑一个连接到电视和各种流媒体源（手机、笔记本电脑、个人电脑等）的本地WiFi网络的媒体流设备。根据设备可用的连接选项，它可能通过蓝牙或以太网与其他设备或互联网连接。ZigBee是另一种流行的低功耗设备选项。由于物联网主要涉及数据的传输（来自传感器或其他方式）从一个设备到另一个设备或云后端，让我们快速了解一下与物联网设备一起使用的一些流行的消息传递协议。
- en: Messaging
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通讯
- en: 'Suppose yours is an IoT device with just one transducer  —a temperature sensor.
    The only job of your device is to continuously detect the temperature inside your
    room and send the reading to a Cloud backend after every minute. For sending data
    from device to Cloud, you probably wrote a RESTful API that could be called from
    the device. This API accepts just one parameter—temperature—and stores it in some
    sort of a database. This, perhaps, is the simplest use case imaginable for an
    IoT device. In the real world, however, things are more complicated.In a typical
    IoT setup, hundreds or thousands of IoT devices must simultaneously send their
    recorded data every second or few seconds to the Cloud. Many of these devices
    may have multiple sensors and, thus, as many data streams to send. In the room
    temperature device  example, sending data reliably wasn’t difficult. A very small
    amount of data had to be sent over the Internet after a considerable amount of
    time (one minute is comfortably long between API calls). There was negligible
    chance of data congestion and delivery failure.But when large amounts of data
    need to be sent, things get different. We must be ready for the following questions:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的是一个仅有一个传感器——温度传感器的物联网设备。你的设备唯一的工作是连续检测房间内的温度，并在每分钟后将读数发送到云后端。为了从设备发送数据到云端，你可能编写了一个可以从设备调用的RESTful
    API。这个API只接受一个参数——温度——并将其存储在某种数据库中。也许，这是一个对于物联网设备来说可以想象的最简单的用例。然而，在现实世界中，事情变得更加复杂。在典型的物联网设置中，成百上千的物联网设备必须同时每秒或几秒钟发送他们记录的数据到云端。其中许多设备可能有多个传感器，因此有许多数据流需要发送。在室温设备的例子中，可靠地发送数据并不困难。只需要在相当长的时间后（一分钟在API调用之间是舒适的长时间）通过互联网发送了极小量的数据。几乎没有数据拥塞和传递失败的可能性。但是当需要发送大量数据时，情况就不同了。我们必须准备好以下问题：
- en: How do we ensure all data is sent in the timely manner set for each device?
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何确保所有数据按照每个设备设置的及时方式发送？
- en: How do we ensure all data is sent by devices and received at the Cloud backend
    reliably (that is, no data message is dropped on the way)?
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何确保所有数据都由设备发送，并可靠地在途中被云端后端接收（也就是说，没有数据消息被丢弃）？
- en: How do we ensure large amount of data doesn’t congest the network connection?
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何确保大量数据不会拥塞网络连接？
- en: If you have worked with large-scale software, you know an efficient queuing
    technique  can address these questions. A suitable messaging, data queuing, and
    routing technique is all the more important in IoT to deal with large volumes
    of data to be transferred rapidly over the Internet. This is where messaging protocols  come
    to the rescue. More often than not, the protocols work with an existing or custom
    messaging middleware (broker) for desired results.Figure [2-6](#Fig6) shows how
    data flows from a device to the Cloud using proper messaging.![A458845_1_En_2_Fig6_HTML.png](A458845_1_En_2_Fig6_HTML.png)Figure
    2-6Example messaging flow using a protocol and a brokerAll protocols discussed
    next are neither new nor were they created specifically for IoT. They are application
    layer protocols for message-oriented communication. Their low power consumption
    and reliable messaging make them a suitable choice for data transfer in the case
    of IoT devices.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经从事过大规模软件开发，你就会知道一种高效的排队技术可以解决这些问题。在物联网中，选择合适的消息传递、数据排队和路由技术尤为重要，以应对需要在互联网上迅速传输的大量数据。这就是消息协议派上用场的地方。往往情况下，这些协议会与现有的或自定义的消息中间件（代理）一起工作，以达到预期的结果。图 [2-6](#Fig6)
    显示了如何使用适当的消息传递使数据从设备流向云端。![A458845_1_En_2_Fig6_HTML.png](A458845_1_En_2_Fig6_HTML.png)图
    2-6 示例消息流使用协议和代理下面讨论的所有协议都不是新的，也不是专门为物联网而创建的。它们都是用于面向消息的通信的应用层协议。它们的低功耗和可靠的消息传递使它们成为物联网设备数据传输的合适选择。
- en: AMQP
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: AMQP
- en: 'Advanced Message Queuing Protocol is perhaps the most popular choice for writing
    enterprise IoT applications. AMQP makes extensive use of queuing for reliably
    routing messages from source to destination. Routing is based on publish-and-subscribe
    model, and queuing is done using the store-and-forward technique. A publisher
    (source) generates a message and sends it to the exchange. The exchange redirects
    the message to one of several message queues. The message is stored in its queue
    until the subscriber (destination) is ready to receive it. At an appropriate time,
    the queue forwards the message to subscriber, thus completing its reliable delivery
    of the message.AMQP is known for its rich set of features, including restricting
    access to queues and other fine-grained controls over its components. A message
    can have properties and a header. It provides three message-delivery guarantees—at-most-once
    (fire and forget mode: message is delivered once or never), at-least-once (message
    is guaranteed to be delivered, but could be sent multiple times), and exactly-once
    (message is delivered certainly and only once). Because of these features, AMQP
    is an ideal choice for developing highly scalable enterprise applications where
    reliability and security are crucial.AMQP is a binary protocol. Data is transported
    in machine-readable binary format rather than human-readable text format (as in
    the case of HTTP, FTP, SMTP, etc.). Binary data has the benefit of being smaller
    in size as compared to plain-text data.It was developed between 2003-06 at JPMorgan
    Chase, one of world’s top investment banks. Its creator, John O’Hara, proposed
    it out of frustration he and his team faced in integrating front- and back-office
    processing systems each time a new solution was developed. The proprietary nature
    of available message-oriented middleware of those days made it hard to connect
    the two processing systems. AMQP was developed as an open alternative to proprietary
    middleware, and so interoperability was a major motivation. The protocol also
    addressed the issues of reliable delivery owing to the fact that in banking each
    message delayed or failed could have economic implications.JP Morgan still uses
    AMQP  to process a billion messages a day, and so do companies such as a NASA
    and Google. The world’s largest biometric and identity database—India’s UIDAI
    or Aadhaar project—also uses the protocol to serve 1.2 billion people.In sum,
    the defining features of AMQP are queuing, reliability, and security.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 高级消息队列协议（Advanced Message Queuing Protocol，AMQP）可能是撰写企业物联网应用程序的最流行选择。AMQP广泛使用排队来可靠地路由消息从源到目的地。路由基于发布-订阅模型，排队使用存储-转发技术完成。发布者（源）生成消息并将其发送到交换机。交换机将消息重定向到多个消息队列之一。消息存储在其队列中，直到订阅者（目的地）准备好接收它。在适当的时间，队列将消息转发给订阅者，从而完成了消息的可靠传递。AMQP以其丰富的功能而闻名，包括限制对队列和其他组件的访问以及对其组件的其他细粒度控制。消息可以具有属性和头部。它提供了三种消息传递保证：至多一次（发送并忘记模式：消息被发送一次或永远不会被送达）、至少一次（消息被保证被送达，但可能被发送多次）和恰好一次（消息肯定且仅被送达一次）。由于这些特性，AMQP是开发高度可扩展的企业应用程序的理想选择，可靠性和安全性至关重要。AMQP是一种二进制协议。数据以机器可读的二进制格式传输，而不是人类可读的文本格式（如HTTP、FTP、SMTP等的情况）。二进制数据比纯文本数据小的好处。它是在2003年至2006年间由世界顶级投资银行之一的摩根大通银行（JPMorgan
    Chase）开发的。它的创作者约翰·奥哈拉（John O’Hara）因为每次开发新解决方案时前端和后端处理系统集成时他和他的团队面临的挫折而提出了这个想法。那个时候可用的面向消息的中间件的专有性质使得连接两个处理系统变得困难。AMQP被开发为专有中间件的开放替代品，因此互操作性是一个主要动机。由于在银行业中，每个延迟或失败的消息都可能具有经济影响，该协议还解决了可靠传递的问题。摩根大通银行仍然使用AMQP每天处理十亿条消息，像NASA和谷歌等公司也是如此。世界上最大的生物特征和身份数据库——印度的UIDAI或Aadhaar项目——也使用该协议为12亿人服务。总之，AMQP的定义特征是排队、可靠性和安全性。
- en: MQTT
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: MQTT
- en: Message Queue Telemetry Transport protocol is simpler and more focused than
    AMQP. Like AMQP, it uses the publish-and-subscribe model for messaging, but unlike
    AMQP it does not use message queues (you read it right—no message queues, despite
    the name). MQTT is intentionally designed to have a low footprint. It is especially
    suited to low-powered, resource constrained devices operating over low-bandwidth,
    high-latency networks.MQTT is also a binary protocol, where messages are smaller
    due to compressed headers and the lack of message properties. It is ideally suited
    to IoT devices that send out simple data messages, such as temperature and humidity
    values, stock prices, mobile notifications, etc.Defining features are simplicity
    and a lower footprint.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 消息队列遥测传输协议比AMQP更简单，更专注。像AMQP一样，它使用发布-订阅模型进行消息传递，但与AMQP不同的是，它不使用消息队列（你没看错——没有消息队列，尽管名字上有）。MQTT被有意设计为具有低占用空间。它特别适用于在低带宽、高延迟网络上运行的低功耗、资源受限的设备。MQTT也是一种二进制协议，消息较小，因为头部被压缩，并且缺少消息属性。它非常适用于发送简单数据消息的物联网设备，例如温度和湿度值、股票价格、移动通知等。其定义特征是简单性和较低的占用空间。
- en: STOMP
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: STOMP
- en: Simple Text Oriented Message Protocol is a text-based protocol with simplicity
    and interoperability as key design goals. Unlike AMQL and MQTT, messages are transmitted
    in human-readable plaintext format. This makes communication between the server
    possible with a wide-range of clients (including telnet).STOMP does not use message
    queues, but the messages support AMQP-like properties and headers. The protocol
    is simple and easy to implement, as its design follows closely that of how HTTP
    works. The creators of STOMP claim that developers have been able to write a STOMP
    client program in a couple of hours.Defining features are simplicity and interoperability.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 简单文本定向消息协议是一个以简单性和互操作性为主要设计目标的文本协议。与AMQL和MQTT不同，消息以人类可读的纯文本格式传输。这使得服务器与各种客户端（包括telnet）之间的通信成为可能。STOMP不使用消息队列，但消息支持类似AMQP的属性和头部。该协议设计简单，易于实现，因为它的设计紧密遵循HTTP的工作原理。STOMP的创建者声称开发人员能够在几小时内编写一个STOMP客户端程序。其定义特征是简单性和互操作性。
- en: XMPP
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: XMPP
- en: Extensible Messaging and Presence Protocol is another text-based protocol suited
    to applications that require real-time exchange of structured information. Messages
    are transmitted in XML format, allowing for extensive interoperability since XML
    is understood by a wide variety of systems and programming languages. XMPP is
    a secure protocol that allows for authentication mechanisms and end-to-end encryption
    of communication. Also known as Jabber (after the open source community that originally
    developed it), XMPP is widely used in instant messaging applications including
    Google Talk. It also facilitates the exchange  of presence information (online,
    offline, busy, away, etc.) across contact-based IM applications.Defining features
    are structured messaging (via XML) and real-time communication.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展消息与状态协议（Extensible Messaging and Presence Protocol，XMPP）是另一种适用于需要实时交换结构化信息的应用程序的基于文本的协议。
    消息以 XML 格式传输，这样可以实现广泛的互操作性，因为 XML 被广泛的系统和编程语言所理解。 XMPP 是一个安全的协议，允许进行身份验证机制和端到端的通信加密。
    也被称为 Jabber（在最初开发它的开源社区之后），XMPP 在包括 Google Talk 在内的即时通讯应用程序中被广泛使用。 它还促进了基于联系人的即时通讯应用程序之间的在线、离线、忙碌、离开等状态信息的交换。
    其主要特点是结构化消息（通过 XML）和实时通信。
- en: Edge Computing
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 边缘计算
- en: 'In an IoT network, things that form the network are often pretty low configuration
    devices whose sole purpose is to capture data and send it over to a powerful Cloud
    backend for storage, processing, and analysis. Such devices do not have computational
    power or memory to do analytics on their own. With the explosion of IoT enabler
    devices, things are changing rapidly.The new breed of IoT devices come with decent
    compute power at a low cost. The $5 Raspberry Pi Zero comes with 1GHz single core
    processor (same as Model B+) and 512MB RAM. Compare this with the original Raspberry
    Pi (Model B gen 1)—launched in 2012 at $35—that came with 700MHz single-core processor
    and the same amount of RAM!By utilizing this increased compute power and memory
    clubbed with modern machine learning techniques, basic analysis of captured data
    can be performed on the device itself. In an IoT network, devices are connected
    to the Cloud backend via gateways, routers, and servers. While Cloud backend sits
    at the center, devices form the “edge” of the network. So, pushing data storage
    and analysis to the logical extremes of a network is called edge computing. Edge
    devices may be connected to a source of data (motor, turbine, pump, or another
    machine part) or may itself be the source of data. Results obtained from edge
    computing may later be synced with a Cloud backend for permanent storage and further
    analysis. As you might instantly imagine, performing computation at or near source
    of data has several benefits:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在物联网网络中，组成网络的设备通常是配置相当低的设备，其唯一目的是捕获数据并将其发送到功能强大的云后端进行存储、处理和分析。这些设备没有计算能力或内存来进行自己的分析。随着物联网使能设备的爆发，事物正在迅速变化。新一代物联网设备以低成本提供了相当不错的计算能力。售价5美元的树莓派Zero配备了1GHz单核处理器（与Model
    B+相同）和512MB RAM。将其与原始的树莓派（Model B第1代）相比较——2012年以35美元推出，配备了700MHz单核处理器和相同数量的RAM！通过利用增加的计算能力和内存，再加上现代机器学习技术，可以在设备上执行捕获数据的基本分析。在物联网网络中，设备通过网关、路由器和服务器连接到云后端。虽然云后端位于中心位置，但设备构成网络的“边缘”。因此，将数据存储和分析推向网络的逻辑极限称为边缘计算。边缘设备可以连接到数据源（电机、涡轮、泵或另一个机器部件），也可以是数据源本身。从边缘计算获得的结果可能会稍后与云后端同步，进行永久存储和进一步分析。正如你可能立即想象的那样，在数据源或附近执行计算具有多个好处：
- en: 'Instant action : Since a device can perform basic analysis by itself and doesn’t
    have to wait for data to upload and Cloud backend to respond, it can take immediate
    actions based on calculated decisions. For example, calling off an alarm proactively
    when detecting a particular temperature predictive trend. The ability to perform
    instant actions is a godsend in cases where network connectivity is slow.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 瞬时行动：由于设备可以自行进行基本分析，无需等待数据上传和云后端响应，因此可以根据计算出的决策立即采取行动。例如，当检测到特定温度预测趋势时主动关闭警报。在网络连接速度较慢的情况下，执行即时操作的能力是一种及时雨。
- en: 'Reduced network usage : The Cloud backend does not have to be updated as frequently
    as in normal scenarios. Results obtained through edge computing may be stored
    on the devices and synced with Cloud every few hours or minutes rather than seconds.
    In this way, a lot of network bandwidth (and, thus, costs) may be saved, especially
    in setups involving hundreds or thousands of devices.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少网络使用量：与正常情况下相比，云后端不必频繁更新。通过边缘计算获得的结果可以存储在设备上，并每隔几个小时或几分钟与云进行同步，而不是每秒钟。通过这种方式，可以节省大量的网络带宽（因此也节省成本），特别是在涉及数百或数千个设备的设置中。
- en: 'Ability to work offline : In certain scenarios, edge computing may allow devices
    to work completely offline without the need to connect with a Cloud backend. This
    might not require sufficiently powerful IoT devices, depending on the use case.
    Autonomous vehicles, such as self-driving cars, are a good use case.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 离线工作能力：在某些情况下，边缘计算可以使设备完全离线工作，无需连接到云后端。这可能不需要足够强大的物联网设备，这取决于使用情况。自动驾驶车辆，例如自动驾驶汽车，是一个很好的用例。
- en: 'Security and compliance : Sometimes security constraints of organizations,
    such as banks and government agencies, mandate data to be stored only on the intranet
    and not cross over to Internet Cloud servers. This is to make it harder for hackers
    to penetrate their data. Edge computing can fill in for the lack of a Cloud backend.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性和合规性：有时，组织的安全约束，如银行和政府机构，要求数据仅存储在内部网络上，不得跨越到互联网云服务器。这是为了使黑客更难渗透他们的数据。边缘计算可以弥补云后端的缺失。
- en: NoteFog computing is a conceptually similar term, sometimes (incorrectly) used
    interchangeably with edge computing. In both cases, data processing happens near
    the source of data. The difference is exactly where on the edge. In the case of
    edge computing, processing happens on the device itself. On the other hand, in
    fog computing processing happens on IoT gateways. A gateway is a powerful, server-like
    routing and compute device that connects several IoT devices to the Internet or
    rest of the network. So, data processing happens nearer the source of data in
    the case of edge computing.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：雾计算是一个在概念上类似的术语，有时（不正确地）与边缘计算交替使用。在这两种情况下，数据处理发生在数据源附近。不同之处在于边缘计算的具体位置。在边缘计算的情况下，处理发生在设备本身上。另一方面，在雾计算中，处理发生在物联网网关上。网关是一种功能强大的、类似服务器的路由和计算设备，将多个物联网设备连接到互联网或网络的其余部分。因此，在边缘计算的情况下，数据处理更接近数据源。
- en: Practical Use Cases
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实际用例
- en: By now, you probably already have a very good idea about where and how IoT can
    be useful. We still want to introduce you to four very different use cases in
    the hopes that they prove thought-provoking and instigate in you a motivation
    to build something of your own.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您可能已经对物联网在何处以及如何有用有了一个很好的理解。我们仍然希望向您介绍四个非常不同的用例，希望它们能引起您的思考，并激发您建立自己东西的动力。
- en: 'Use Case 1: Home Automation'
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用例1：家庭自动化
- en: 'There are various aspects of a home that can be automated. Whether it is a
    physical disability that prevents one from manually accessing parts of a home
    or just sheer convenience, automation can be really useful in those crucial moments.A
    visitor sounds the doorbell. A camera mounted strategically at the door is triggered
    to record a photo/video of the visitor. The camera, which is connected to the
    Internet, sends the recorded media over to a Cloud backend for face recognition.
    If the face matches one in the “friends and family” database, the door unlocks
    automatically. In the meantime, a notification is sent to the home owner’s phone
    about the visitor. The visitor identification system can be programmed to not
    unlock the door if no one is at home. This idea can be extended to allow only
    those people to automatically enter who have an appointment with the home owner
    during that time as per their online calendar.A home intrusion system can be built
    on similar lines. A high-priority notification can be sent to the owner and local
    police authorities if someone unknown tries to trespass.The weather is melting
    hot. The home owner is on this way from office to home. Fifteen minutes before
    her estimated time of arrival (perhaps as per the navigation system on car or
    mobile), a message is sent to the bedroom’s air conditioner to turn on to make
    the room temperature comfortable once the owner is home.We are sure that you can
    think of a dozen more such convenient use cases. The idea of home automation can
    also be extended to create a connected home, a place where appliances talk to
    each other and all connected appliances are accessible to the owner via a mobile
    app: smartwatch asking the room lights to turn off when the wearer falls asleep,
    home owner activating the pet feeder remotely using mobile app, and so on.For
    a person suffering from a severe physical disability, such as in the case of ALS
    or quadriplegia, the ability to control the home is a necessity rather than a
    convenience. Imagine such a person, wearing a smartglass, and being able to switch
    the lights on and off just by blinking and double-blinking their eyes.Since such
    a person would be home-bound most of the time, it would make great sense to notify
    their caretaker who is out at work. If the patient’s vitals, being monitored by
    a fitness band, come to a critical level, the caretaker automatically receives
    a pre-recorded urgent call to pull them out of their work.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'Use Case 2: Indoor Navigation'
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用例 2：室内导航
- en: GPS is a cool technology to navigate us from one place to another. While it
    works great outside, GPS fails indoors owing to the fact that its signals find
    it difficult to penetrate the concrete and other construction materials used in
    building our homes and offices. For going from one place to another inside a building,
    we need another technology.We learned earlier that signals received from beacons
    not only tell their UUID but also their rough distance from the phone receiving
    those signals. This information, when clubbed with pedestrian dead reckoning (PDS)
    algorithms, can be used to precisely estimate a person’s location as they walk
    through a building. Beacons serve as checkpoints, whereas PDS provides the route
    information to navigate from one checkpoint to another.Indoor navigation is especially
    useful to people suffering from vision impairment.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: GPS 是一项很酷的技术，可以将我们从一个地方导航到另一个地方。虽然在室外表现出色，但由于其信号难以穿透混凝土和其他建筑材料，GPS 在室内使用时会失效。为了在建筑物内部从一个地方到另一个地方，我们需要另一种技术。我们之前了解到，从信标接收到的信号不仅可以告诉它们的
    UUID，还可以告诉它们与接收这些信号的手机的大致距离。当这些信息与步行航位推算（PDS）算法相结合时，可以用于准确估算一个人在建筑物内行走时的位置。信标充当检查点，而
    PDS 提供路由信息以从一个检查点导航到另一个检查点。室内导航对于视力受损的人尤其有用。
- en: 'Use Case 3: Pet Monitoring'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用例 3：宠物监控
- en: An IoT device (microcontroller, RFID tag, or beacon) attached to a pet can check
    on its various health parameters. It can also constantly monitor the pet’s position
    and immediately sound an alarm when they cross the house’s boundary. This use
    case can be extended to farm animals, where it is easy for them to go astray and
    difficult for the farm owner to manually keep track of all the livestock. A simple
    location monitoring device may keep an animal safe from being run over by a vehicle
    or eaten by a larger wild animal.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 附在宠物身上的物联网设备（微控制器、RFID 标签或信标）可以检查宠物的各种健康参数。它还可以不断监测宠物的位置，并在它们越过房屋边界时立即发出警报。这种用例可以扩展到农场动物，因为它们很容易迷失，而农场主手动跟踪所有牲畜则很困难。一个简单的位置监测设备可以防止动物被车辆碾压或被较大的野生动物吃掉。
- en: 'Use Case 4: Process Optimization'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用例 4：流程优化
- en: Have you ever been to a large kitchen, the kind where meals are produced in
    very large quantities to be served to the general public? If you have then you
    know that a good amount of food is wasted every time. Such kitchens use huge containers
    to cook food in bulk quantities. It’s not unusual for a container’s food to overcook
    due to a miscalculation on the cook’s part. Food waste is a big problem, especially
    for NGOs working to provide free mid-day meals to thousands of needy people. The
    cost of wasted food can easily accumulate to thousands of dollars per month.IoT
    devices can be installed inside these food containers to sense temperature and
    other parameters. Sensing overcooking, alerts may be sounded. Through this approach,
    waste can be diminished and food quality made consistent.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有去过一个大厨房，那种生产大量食物以供大众食用的厨房？如果你去过，你就会知道每次都会浪费大量食物。这样的厨房使用大型容器来大量烹饪食物。由于厨师的错误估算，容器中的食物过熟并不罕见。食物浪费是一个很大的问题，特别是对于致力于为成千上万有需要的人提供免费午餐的非政府组织来说。浪费食物的成本很容易累积到每个月数千美元。物联网设备可以安装在这些食物容器内，以感知温度和其他参数。一旦感知到食物过熟，就会发出警报。通过这种方法，可以减少浪费，提高食物质量的一致性。
- en: Configuring and Deploying a Single IoT Device
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置和部署单个物联网设备
- en: In the “IoT Devices” section earlier, you learned about some popular enabler
    devices. The three important ones we discussed were Raspberry Pi, Arduino, and
    beacons. The process of deploying code varies from device to device.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的“物联网设备”部分，你了解了一些流行的启用设备。我们讨论过的三个重要设备是树莓派、Arduino 和信标。部署代码的过程因设备而异。
- en: Raspberry Pi
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 树莓派
- en: Rpi, being an SoC, offers a PC-like hardware configuration. It can ably run
    a regular operating system, such as Windows or Linux. As a result, running code
    and programs on a Pi is similar to doing so on a regular computer. People can
    connect their Pis to their TVs or monitors, plug a keyboard into one of the USB
    ports, and start coding. Sensors and actuators can be installed via the RPi’s
    GPIO interface, whose pins can be controlled directly through code.A Pi’s operating
    system may be run in headless mode, meaning without the OS’s graphical interface.
    Headless mode is useful because of two reasons—the GUI consumes precious memory
    and computing resources, which may otherwise be used to speed up data analysis
    on the device and the environments where IoT devices are deployed usually do not
    have a need for a TV/monitor screen. Even without a GUI, a developer may log into
    their Pi through SSH or a similar technology. This is also the standard industry
    practice. While logged in via SSH, it is easy to write and update code, calibrate
    sensors, and configure and optimize the device.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Rpi作为一款SoC，提供了类似PC的硬件配置。它可以轻松运行常规操作系统，如Windows或Linux。因此，在Pi上运行代码和程序类似于在普通计算机上进行操作。人们可以将他们的Pi连接到电视或显示器上，插入键盘到其中一个USB端口，并开始编码。传感器和执行器可以通过RPi的GPIO接口安装，其引脚可以通过代码直接控制。Pi的操作系统可以在无头模式下运行，即没有OS的图形界面。无头模式很有用，因为有两个原因——GUI消耗宝贵的内存和计算资源，否则可以用于加快设备上的数据分析，以及部署IoT设备的环境通常不需要电视/监视器屏幕。即使没有GUI，开发人员也可以通过SSH或类似技术登录到他们的Pi。这也是标准的行业做法。通过SSH登录，可以轻松编写和更新代码，校准传感器，以及配置和优化设备。
- en: Arduino
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Arduino
- en: An Arduino connects via a USB cable to a regular computer, where the developer
    uses Arduino IDE to write code and upload it to and run it on the device. Electronic
    components can be attached through its digital I/O pins. Since Arduinos cannot
    run operating systems, it is not possible to write code by “logging in”.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino通过USB电缆连接到普通计算机，在那里开发者使用Arduino IDE编写代码并将其上传到设备并运行。电子组件可以连接到其数字I/O引脚上。由于Arduino无法运行操作系统，因此不可能通过“登录”来编写代码。
- en: Beacons
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Beacon
- en: Beacons are the simplest of IoT devices. They neither have a processor nor memory.
    The code to interact with them is installed on a mobile device. How the app uses
    the Bluetooth signals emanated by one or more beacons is totally up to the app.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Beacon是最简单的IoT设备。它们既没有处理器也没有内存。与它们互动的代码安装在移动设备上。应用程序如何使用一个或多个Beacon发出的蓝牙信号完全取决于应用程序。
- en: What About Deploying Code to Multiple IoT Devices at Once?
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何一次部署代码到多个IoT设备？
- en: 'Dealing with IoT devices can be simple and fun as long as you are doing that
    with one or two devices, maximum. Things start getting frustratingly complicated
    and laborious when you have to deal with hundreds of similar or even different
    devices (think Pis and Arduinos). In an enterprise scenario, the following must
    be addressed:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 处理物联网设备只有在您只处理一个或两个设备时才会简单而有趣。但当您不得不处理成百上千甚至不同的设备时（想想树莓派和Arduino），事情开始变得令人沮丧和费力。在企业场景中，必须解决以下问题：
- en: Managing network connectivity for all devices
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理所有设备的网络连接
- en: Continuous monitoring of all devices
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对所有设备进行持续监控
- en: Deploying code updates on all devices
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在所有设备上部署代码更新
- en: Adding new devices to the network
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新设备到网络
- en: Security and identity management
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全和身份管理
- en: Azure IoT Suite
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure物联网套件
- en: 'We have said it half a dozen times before and we’ll say it again, “IoT is centered
    on data. Data is the fuel of an IoT network, its most valuable asset.” Through
    its Azure Cloud services, Microsoft has been targeting data for some time now.
    Its data storage, processing, and analytics services are stable and evolved. It
    was natural, then, that with the onset of the IIoT revolution Microsoft would
    be one of the first to offer a well-tested set of services to manage large-scale
    enterprise IoT solutions.The Azure IoT Suite is a set of new and existing Cloud
    services to comprehensively cover all IIoT needs. While machine learning, PowerBI,
    and Notification Hubs are veteran services that were reused in the suite, IoT
    Hub and Stream Analytics are new additions specially created for enterprise IoT.It
    is important to note that the Azure IoT Suite is about managing IoT devices at
    scale: not one or two or a dozen devices, but hundreds or thousands or millions
    of them. You can, of course, use the services with fewer devices but the real
    cost benefit is seen with a large set of devices.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经说过至少半打次了，现在我们再说一遍，“物联网的核心是数据。数据是物联网网络的燃料，也是其最宝贵的资产。” 通过其Azure云服务，微软一直在瞄准数据。其数据存储、处理和分析服务稳定而成熟。因此，随着工业物联网革命的来临，微软成为首批提供经过充分测试的服务以管理大规模企业物联网解决方案的公司之一是自然而然的。Azure物联网套件是一套新的和现有的云服务，全面涵盖所有工业物联网需求。虽然机器学习、PowerBI和通知中心是该套件中重复使用的老牌服务，但物联网中心和流分析是专门为企业物联网而新增的服务。需要注意的是，Azure物联网套件涉及大规模管理物联网设备：不是一个或两个或十几个设备，而是成百上千甚至数百万个设备。当然，您可以使用较少数量的设备使用这些服务，但真正的成本效益是在大量设备中得到体现。
- en: IoT Solution Architecture
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 物联网解决方案架构
- en: Before going into the details of each service, let’s look at the architecture
    of a typical IoT solution. Figure [2-7](#Fig7) shows the key components of an
    IoT solution architecture.![A458845_1_En_2_Fig7_HTML.jpg](A458845_1_En_2_Fig7_HTML.jpg)Figure
    2-7IoT solution architectureFigure [2-7](#Fig7) shows how data flows within a
    solution. Data originates at the IoT devices, gets routed through a Cloud gateway
    over to a Cloud backend (IoT solution backend), and after the data has been processed
    in the backend, it is presented in human-readable format as graphs and charts.
    At all stages of this workflow, there is something that is facilitating data flow,
    as can be seen at the top of the diagram.Device connectivity is fully managed
    by IoT Hub. It is responsible for connecting, authenticating, configuring, updating,
    and deploying millions of IoT devices.Data processing and analytics is done using
    the machine learning and Stream Analytics services. It helps in extracting meaningful
    insights and making predictions that are relevant to optimizing or growing business.Presentation
    is facilitated by PowerBI, which can generate elegant and easy-to-understand dashboards
    using raw data insights produced by ML and Stream Analytics services. Decision-makers
    in an organization can refer to the dashboards, rather than being bogged down
    by Excel sheets, to quickly make decisions.At each stage in the workflow, it may
    be required to notify stakeholders and users of that stage of important events,
    such as device malfunction, security breach, completion of analytics, etc. Notification
    Hubs is a multi-platform push-notification engine that can send notification messages
    at scale to mobile devices, including iOS, Android, and Windows devices.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解每个服务的细节之前，让我们先来看一下典型物联网解决方案的架构。图[2-7](#Fig7)展示了物联网解决方案架构的关键组件。![A458845_1_En_2_Fig7_HTML.jpg](A458845_1_En_2_Fig7_HTML.jpg)图2-7物联网解决方案架构图[2-7](#Fig7)展示了解决方案中的数据流动方式。数据源自物联网设备，经由云网关路由到云后端（物联网解决方案后端），在后端处理数据后，以图表和图形的形式呈现给人类可读的格式。在此工作流的各个阶段，都有一些东西在促进数据流动，如图中顶部所示。设备连接由IoT
    Hub全面管理。它负责连接、验证、配置、更新和部署数百万个物联网设备。数据处理和分析使用机器学习和流分析服务完成。它有助于提取有意义的见解，并做出与优化或扩展业务相关的预测。演示由PowerBI完成，它可以利用ML和流分析服务产生的原始数据见解生成优雅且易于理解的仪表板。组织中的决策者可以参考这些仪表板，而不是被Excel表格所困扰，以便快速做出决策。在工作流的每个阶段，可能需要通知相关利益相关者和用户重要事件，如设备故障、安全漏洞、分析完成等。通知中心是一个多平台推送通知引擎，可以向移动设备发送大规模的通知消息，包括iOS、Android和Windows设备。
- en: Preconfigured Solutions
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 预配置解决方案
- en: The Azure IoT Suite provides a set of three preconfigured end-to-end solutions
    that cover the most common real-world use cases. So, instead of starting from
    scratch, one can use a preconfigured solution either directly (if it fulfills
    are business requirements) or as base template that will undergo customizations.
    Deploying a preconfigured solution takes only a few minutes and is supported by
    Azure’s Resource Manager deployment model.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Azure IoT Suite提供了一套三种预配置的端到端解决方案，涵盖了最常见的真实用例。因此，可以直接使用预配置的解决方案（如果符合业务要求）或作为基础模板进行定制，而不是从头开始。部署预配置的解决方案只需几分钟，由Azure的资源管理器部署模型支持。
- en: Remote Monitoring
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 远程监控
- en: 'This preconfigured solution targets a scenario where various assets of a workshop,
    factory, office, or other similar establishments produce telemetry data that must
    be constantly monitored to keep track of critical events.For simplicity’s sake,
    take for instance a workshop that has a furnace, an engine, and a lathe machine.
    All three produce data for various telemetry parameters: furnace (temperature,
    humidity, pressure), engine (fuel level, vibration), and lathe machine (rotations
    per minute, temperature). Using the remote monitoring solution, it’s easy to set
    up alarms for events such as when:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此预配置解决方案针对场景，即车间、工厂、办公室或其他类似设施的各种资产产生必须被持续监测以跟踪关键事件的遥测数据。为了简单起见，举个例子，这样一个车间有一个炉子、一个发动机和一个车床机。所有三个设备都产生各种遥测参数的数据：炉子（温度、湿度、压力）、发动机（油量、振动）和车床机（每分钟转数、温度）。使用远程监控解决方案，可以轻松设置针对事件的警报，比如：
- en: Pressure inside the furnace is greater than 220 psi
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 炉内压力大于220 psi
- en: Fuel level of the engine is less than five liters
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发动机油量少于五升
- en: Temperature of the lathe machine is more than 50 degrees Celsius
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 车床机温度超过50摄氏度
- en: Predictive Maintenance
  id: totrans-96
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 预测性维护
- en: This solution is helpful in predicting maintenance needs of machines well ahead
    of their imminent failure.Consider a factory with hundreds of machines with moving
    parts. Each machine is susceptible to fail at some point due to wear and tear.
    Each time a machine fails, part of the production halts until it is fixed or replaced.
    Such delays due to unplanned downtimes result in monetary losses to the factory.
    The predictive maintenance solution can regularly highlight machines that will
    fail in the near future, and, thus, help them save costs by doing fewer planned
    maintenances rather than several unplanned ones.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 该解决方案有助于提前预测机器的维护需求，避免即将发生的故障。想象一下一个拥有数百台有运动部件的机器的工厂。每台机器都可能因磨损而在某个时刻出现故障。每次机器故障，生产都会中断一部分，直到修复或更换。由于未经计划的停机造成的延误导致工厂经济损失。预测性维护解决方案可以定期找出即将故障的机器，因此可以减少计划维护次数而不是进行多次未经计划的维护，从而帮助节省成本。
- en: Connected Factory
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 连接工厂
- en: 'This solution is similar to remote monitoring one, except automated actions
    can be taken in addition to raising alarms. The solution can help in:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此解决方案与远程监视解决方案类似，但除了引发报警外，还可以采取自动化行动。该解决方案可以帮助：
- en: Monitoring assets and generating key performance indicator (KPI) values
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控资产并生成关键绩效指标（KPI）值
- en: Using the Azure Time Series Insights service to analyze telemetry data
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Azure 时间序列洞察服务来分析遥测数据
- en: Taking actions to fix issues based on alarms by sending commands to devices
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据报警采取行动来修复问题，通过向设备发送命令
- en: 'For each solution, a predefined set of Azure services gets activated. In the
    case of remote monitoring:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个解决方案，会激活一组预定义的 Azure 服务。在远程监视的情况下：
- en: IoT Hub (device connectivity and maintenance)
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IoT Hub（设备连接和维护）
- en: Container services (hosts and manages microservices)
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器服务（托管和管理微服务）
- en: Web apps (host custom application code)
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web 应用程序（托管自定义应用程序代码）
- en: Cosmos DB (data storage)
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cosmos DB（数据存储）
- en: 'For this connected factory  , the following two services get activated in addition
    to the ones in the case of remote monitoring:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个连接的工厂，除了远程监视的情况下的服务外，还会激活以下两项服务：
- en: Time Series Insights (analyze and display telemetry data)
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间序列洞察（分析和显示遥测数据）
- en: Azure Tables (store NoSQL data)
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 表格（存储 NoSQL 数据）
- en: Azure IoT Hub
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Azure IoT Hub
- en: IoT Hub is a fully managed service that enables reliable and secure two-way
    communications between a large number of IoT devices and a solution backend. It
    is the answer to our earlier question about connecting and deploying code to multiple
    IoT devices at once.Figure [2-8](#Fig8) shows the architecture diagram of IoT
    Hub. It is a focused and more detailed version of the IoT solution architecture
    we saw earlier.![A458845_1_En_2_Fig8_HTML.jpg](A458845_1_En_2_Fig8_HTML.jpg)Figure
    2-8Azure IoT Hub architectureIn Figure [2-8](#Fig8), IoT Hub is the interface
    between devices and backend. We saw earlier how connectivity options vary across
    devices. In order to standardize connectivity to the solution backend, IoT Hub
    provides device SDKs for C, Python, Node.js, Java, and .NET.IoT Hub natively understands
    only three protocols—MQTT, AMQP, and HTTPS. For devices that use different messaging
    protocols, IoT Hub provides a protocol gateway to translate messages from their
    protocol to one it understands.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: IoT Hub 是一项完全托管的服务，可实现大量物联网设备与解决方案后端之间可靠安全的双向通信。这是我们之前关于如何将代码连接并部署到多个物联网设备的问题的答案。图
    [2-8](#Fig8) 展示了 IoT Hub 的架构图。它是我们之前看到的物联网解决方案架构的一个关注重点和更详细的版本。![A458845_1_En_2_Fig8_HTML.jpg](A458845_1_En_2_Fig8_HTML.jpg)图
    2-8 Azure IoT Hub 架构在图 [2-8](#Fig8) 中，IoT Hub 是设备与后端之间的接口。我们之前看到了连接选项如何因设备而异。为了标准化与解决方案后端的连接，IoT
    Hub 提供了 C、Python、Node.js、Java 和 .NET 的设备 SDK。IoT Hub 本地只理解三种协议 —— MQTT、AMQP 和
    HTTPS。对于使用不同消息传递协议的设备，IoT Hub 提供了协议网关来将其协议的消息转换为其理解的消息。
- en: Configuring and Deploying Multiple IoT Devices at Scale
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置和部署多个 IoT 设备以适应规模
- en: 'IoT Hub is designed to manage millions of devices simultaneously. It provides
    secure bidirectional communication between devices and the solution backend. Devices
    can send their telemetry data to the backend. Conversely, the backend can send
    commands to stop/restart a device, turn actuators on or off, and so on.Security
    is the utmost, the number one consideration in IoT Hub’s design. Hub ensures that
    all communications in the solution are secure. It maintains an identity registry
    that has a record of each trusted device’s identity. Unauthorized devices cannot
    join the network.IoT Hub maintains a device twin for each device. A device twin
    is a JSON document that stores device state information such as metadata, configurations,
    and conditions. When the backend needs to send an instruction to a device, it
    sets the device’s twin’s desired properties (request). The corresponding device
    performs the requested operation and updates its twin’s reported properties (response).IoT
    Hub provides device-to-Cloud and Cloud-to-device communication options.Device-to-Cloud
    data includes:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: IoT Hub 设计用于同时管理数百万台设备。它为设备和解决方案后端提供安全的双向通信。设备可以将其遥测数据发送到后端。反之，后端可以发送命令来停止 /
    重新启动设备，打开或关闭执行器等。安全性是 IoT Hub 设计中至关重要的，首要考虑的因素。Hub 确保解决方案中的所有通信都是安全的。它维护一个身份注册表，记录每个受信任设备的身份。未经授权的设备无法加入网络。IoT
    Hub 为每个设备维护一个设备镜像。设备镜像是一个存储设备状态信息的 JSON 文档，例如元数据、配置和条件。当后端需要向设备发送指令时，它设置设备镜像的所需属性（请求）。相应的设备执行所请求的操作，并更新其镜像的报告属性（响应）。IoT
    Hub 提供设备到云和云到设备的通信选项。设备到云数据包括：
- en: Sensor telemetry data
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传感器遥测数据
- en: Device twin’s reported properties
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设备镜像的报告属性
- en: File uploads
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件上传
- en: 'Cloud-to-device data includes:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 云到设备的数据包括：
- en: Direct methods, such as interactive control of devices through a request-response
    mechanism (e.g., turning a motor off)
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接方法，例如通过请求 - 响应机制对设备进行交互式控制（例如，关闭电机）
- en: Device twin’s desired properties
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设备镜像的所需属性
- en: One-way notifications to the device app
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向设备应用程序发送的单向通知
- en: Recap
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you learned about IoT and devices (or things) in detail. You
    also had a glimpse of the Azure IoT Suite and its components and saw how it can
    help manage massive IoT solutions. The chapter included:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您详细了解了物联网和设备（或物品）。您还初步了解了 Azure IoT 套件及其组件，并了解了它如何帮助管理庞大的物联网解决方案。本章包括：
- en: 'An introduction to IoT: its meaning, history, and practical use cases'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物联网简介：其含义、历史和实际用例
- en: 'A quick discourse on IoT devices: building blocks, types, and deployment methods'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物联网设备简要介绍：构建模块、类型和部署方法
- en: A discussion of network connectivity options with IoT devices
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与物联网设备的网络连接选项讨论
- en: A discussion of Azure IoT Suite components and architecture
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure IoT 套件组件和架构讨论
- en: In the next chapter, you use the Azure IoT Suite to create and manage your own
    IoT solution.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将使用 Azure IoT 套件创建和管理自己的物联网解决方案。
