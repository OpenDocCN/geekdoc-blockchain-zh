- en: © Nishith Pathak and Anurag Bhandari 2018Nishith Pathak and Anurag BhandariIoT,
    AI, and Blockchain for .NET[https://doi.org/10.1007/978-1-4842-3709-0_2](A458845_1_En_2_Chapter.html)
  prefs: []
  type: TYPE_NORMAL
- en: 2. Understanding the Internet of Things and Azure IoT Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nishith Pathak^(1 ) and Anurag Bhandari²(1)Kotdwara, Dist. Pauri Garhwal, India(2)Jalandhar,
    Punjab, IndiaA few years ago, Internet of Things (IoT) was an emerging trend.
    Today, it is part of modern arsenal of IT solutions. In the consumer space, IoT
    is generally perceived as smartwatches, fridges, TVs, etc.—age-old things that
    are now connected to the Internet. It is seen more as a convenience feature than
    a solution to an existing problem (smart thermostats and remote pet food dispensers,
    anyone?).At the enterprise level, IoT has been a boon, especially in automation.
    Take for instance an automobile factory set up with hundreds of machines working
    hard-to-manufacture cars. Each machine may have lots of moving parts, which are
    susceptible to wear and tear. There are several parameters that must be regularly
    checked to ensure a 100% safe and operational working environment at all times.
    Such monitoring is largely a manual process at typical factories, done by humans.
    Data is recorded digitally or on paper and analyzed later to identify machines
    (or specific parts) that need repair or replacement. This is a slow and expensive
    process. Monitoring of manufacturing equipment can be automated by retrofitting
    cheap IoT devices into these machines. IoT devices can be customized to have specialized
    sensors to monitory specific parameters for different machines. In a world where
    Cloud storage and Big Data analysis is cheap, the IoT devices can run 24x7 to
    record and store monitoring data. This large feed of data can then be automatically
    analyzed later or in real time to detect potential problems. Factory supervisors
    can then be automatically intimated through text and notification messages.What
    was the dominion of electrical and electronics engineers until a few years ago
    is now part of solution offerings at every major IT firm, making IoT a vital skill
    to have for computer and software engineers. To put it a little differently, what
    was a hardware and embedded software affair earlier is now writing normal software
    programs for tiny computers (IoT devices).In this chapter, you learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: The history of IoT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IoT devices, including enablers such as Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network connectivity, including messaging and protocols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practical use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring and deploying a single IoT device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure IoT Suite and its components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure IoT Hub architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring and deploying multiple IoT devices at scale using the Azure IoT
    Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The History of IoT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like artificial intelligence, the central idea behind IoT is not new. The phrase
    “Internet of Things” was coined by Kevin Ashton in 1999, but the origin of the
    concept goes way back to early 80s. In 1982, a re-engineered Coke bottle dispensing
    machine—at Carnegie Mellon University’s computer science department—became the
    first appliance to be connected to the Internet (ARPANET, as it was called during
    its formative years). With the help of micro-switches and sensors, the Coke machine
    could continuously report its inventory status (number of bottles remaining, number
    of warm versus cold bottles, etc.). So instead of students visiting the machine
    and then being disappointed on finding no chilled bottles, students could log
    in to a website and check its status. The famed Coke machine is still connected
    to the Internet, and even has a page on CMU’s website to tell its own story.John
    Romkey, creator of TCP/IP stack for IBM PCs, created a toaster in 1990 that could
    be turned on or off over the Internet. In 1993, Quentin Stafford-Fraser connected
    a coffee pot to the Internet to monitor its pot levels.Mark Weiser’s popular article
    on ubiquitous computing, called “The Computer for the 21^(st) Century,” explored
    this idea in detail. So, you see, the idea was there but it did not get widespread
    attention as the Internet itself was in its infancy. It is said that when Kevin
    Ashton showed his presentation on a revolutionary new idea on RFIDs to his management
    at P&G, he called it the “Internet of Things” to in order to attract immediate
    interest, as the Internet was a red hot topic in those days.The RFID revolution
    indeed provided a thrust to the then future IoT revolution as we know it today.
    Digitally identifying real-world physical things using fingertip-small circuits
    was a powerful concept that enabled digital representations of these on the Internet.In
    the early 2000s, IoT as a term started getting traction. It was being mentioned
    in scientific journals, at conferences, and in magazines. It was not until 2009
    that it was officially born, when (according to Cisco) the number of devices that
    were connected to the Internet exceeded the number of people in the world. The
    release of Raspberry Pi in 2012 and the subsequent wave of tiny system on a chip
    (SoC) computers were major contributors to the IoT phenomenon. IoT started receiving
    widespread industry adoption starting in 2014; the trends have not looked back
    since.Figure [2-1](#Fig1) summarizes the timeline of IoT.![A458845_1_En_2_Fig1_HTML.png](A458845_1_En_2_Fig1_HTML.png)Figure
    2-1IoT timeline chart that summarizes the milestones
  prefs: []
  type: TYPE_NORMAL
- en: IoT Devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There should be no confusion in the fact that “things,” devices, and IoT devices
    are all the same in an IoT network. As we saw at the start of this chapter, IoT
    devices can be thought of as being of two types—consumer and enterprise. In fact,
    there is a formal way of categorizing IoT itself:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consumer IoT : Consists of readymade devices for direct consumption by end
    users. Examples include smartwatches, smart TVs, and smart speakers. Devices are
    usually connected to each other or to the local network via Bluetooth or WiFi.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Industrial IoT : Consists of devices custom-made for specific enterprise and
    industrial scenarios. The car factory example we talked about earlier falls in
    this category. It is important to note that custom-made does not mean that all
    electronic components of a device are manufactured or even assembled. As you’ll
    see a little later, there are “boilerplate” enabler devices that can be customized
    or extended for creating large solutions. Devices are usually connected directly
    to the Internet via Ethernet or WiFi.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NoteA trending term used in conjunction with IIoT is Industry 4.0 (or 4^(th)
    industrial revolution, 4IR). Every industrial revolution in history has been about
    automation—the first revolution was about mechanizing textile production, the
    second revolution revolved around steel and mass manufacturing (including assembly
    lines), and the third revolution was about digitizing manufacturing through the
    use of analytics and Cloud. Techniques such as Lean Manufacturing and Six Sigma
    were developed to improve efficiencies. Productivity gains were huge initially,
    but dipped substantially in recent years. There was a strong need to look to other
    ways to improve efficiencies.Industry 4.0 is about improving efficiencies through
    complete digital transformation using leading contemporary digital technologies—IIoT,
    Big Data, Cloud Computing, Augmented Reality, Robotics, etc. What started off
    with manufacturing now covers other industries such as healthcare, agriculture,
    logistics, and more. Benefits include decreased unplanned downtime, lower maintenance
    costs, reduced power consumption, and improved performance.It is easy to confuse
    the third industrial revolution with the fourth. The key differentiating factor
    is undoubtedly advancements in machine and deep learning, which gave rise to artificial
    intelligence, robotic process automation, and cognitive services as we know them
    today.
  prefs: []
  type: TYPE_NORMAL
- en: Sensors and Actuators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No discussion about IoT devices is complete without talking about their core
    building blocks—sensors and actuators.A sensor is a small electronic component
    that is designed to sense (detect) a specific parameter—sound, light, temperature,
    humidity, pressure, GPS coordinates, acceleration, etc. Our mobile phones come
    loaded with half a dozen sensors.An actuator is an electrical or mechanical device
    that performs an action or a movement (push, pull, or rotate). LEDs, motors, speakers,
    and vibrators are a couple of examples.An actuator is the logical opposite of
    sensor. How? Both sensors and actuators are transducers that convert one form
    of energy into another. A sensor converts a physical phenomenon into an electrical
    signal—a microphone converts sound vibrations into signals, a temperature sensor
    converts heat into its representative analogue or digital value. On the contrary,
    an actuator converts electrical signals into physical actions (rotation, light,
    sound, etc.).An IoT device is defined by the sensors and actuators it comes with.
    These may come either built into the device or as separate pluggable components.
    They can be controlled by the operating system of their IoT device. Because of
    this, sensors and actuators may work independently or in tandem.Figure [2-2](#Fig2)
    shows how an actuator complements a sensor on the same IoT device.![A458845_1_En_2_Fig2_HTML.jpg](A458845_1_En_2_Fig2_HTML.jpg)Figure
    2-2Workflow of an alarm going off on receiving a high temperature signal from
    sensor
  prefs: []
  type: TYPE_NORMAL
- en: Enablers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As noted earlier, for several years IoT was the dominion of electrical, electronics,
    and embedded engineers. In the early days of IoT revolution, network connectivity
    hardware was built into industrial machines and electronic products by manufacturers.
    Alternatively, custom or existing programmable microcontrollers were used as embedded
    devices on machines. Software for such systems were written either in assembly
    language or using specialized programming languages, often proprietary for the
    specific microcontroller. The release of Raspberry Pi in 2012 completely changed
    the status quo and virtually sparked off the modern IoT revolution.
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Raspberry Pi or RPi or just Pi is a system on a chip (SoC) device that has an
    ARM-based microprocessor, RAM, graphics processor, and various I/O and network
    connectivity options built on top of a single credit card-sized printed circuit
    board. In other words, it is a tiny general-purpose computer.Pi was launched as
    a cheap, affordable self-learning toolkit for school students and electronics
    enthusiasts by a not-for-profit organization based in the UK. It was complemented
    with a well-documented website containing tutorials for building all sorts of
    projects—from simple LED blinkers to full-blown theft prevention systems.Figure [2-3](#Fig3)
    shows a Raspberry Pi.![A458845_1_En_2_Fig3_HTML.jpg](A458845_1_En_2_Fig3_HTML.jpg)Figure
    2-3Raspberry Pi 2 Model BBeing a cheap (just $35) and sufficiently sophisticated
    SoC, Raspberry Pi offered limitless possibilities. At that price point, one can
    finally afford a general purpose computer rather than a single board microcontroller.
    Microcontrollers are similar to SoCs in that they have a CPU, small amount of
    memory, and some I/O. But they are less sophisticated than SoCs. While a microcontrollers
    are designed for embedded applications using specialized programming techniques/languages,
    a SoC has a microprocessor and a decent amount of RAM that allows it to run a
    full-blown operating system such as Linux and Windows, on which can be run general
    purpose computing applications written in all major high-level programming languages
    (Java, Python, C#, Perl, Ruby… you name it).As the Pi came with an Ethernet adapter
    and four USB ports to add more network adapters, such as Bluetooth and WiFi, it
    did not take much time for developers to leverage it as an IoT device. A question
    may pop in your mind at this point—IoT devices have sensors and/or actuators,
    so what about Raspberry Pi? To answer that question, look at Figure [2-4](#Fig4),
    which shows the schematics of a Pi.![A458845_1_En_2_Fig4_HTML.jpg](A458845_1_En_2_Fig4_HTML.jpg)Figure
    2-4The schematics of a Raspberry PiRaspberry Pi does not come with sensors and
    actuators of its own. But it does come with something called general purpose input-output
    (GPIO) pins. These pins are a bridge between the outside world and the internals
    of Pi. You can connect electronic components (sensors, actuators, and more)—such
    as LEDs, motors, buttons, or other boards and microcontrollers—with a Pi through
    its GPIO pins. Connected electronic components can then be controlled via software
    programs that run on top of the operating system installed on that Pi. Many popular
    programming languages provide easy APIs to interact with GPIO pins. Python is
    the most popular choice, and something used in code samples provided on RPi’s
    official documentation.A Pi can easily be fitted with sensors and store and run
    programs written to send data collected from sensors to a Cloud backend. With
    the hardware configuration that is has, a Pi can also be used in edge computing
    use cases. You will learn more about edge computing in the Network Connectivity
    section a bit later. Since a Pi is a tiny general-purpose computer, it can also
    be used without sensors or actuators, in use cases such as a web server or a media
    streaming platform.RPi comes in two major variants—the Raspberry Pi and the Raspberry
    Pi Zero, the former having four further variants and the latter having two (with
    and without WiFi). Price starts at $5 and goes up to $35.
  prefs: []
  type: TYPE_NORMAL
- en: Arduino
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Arduino is one of the most popular single board microcontrollers. Unlike the
    Raspberry Pi, Arduino is not an SoC and does not have a microprocessor. It has
    a lower performance CPU and a few KBs of RAM. Due to this, it manages to be even
    cheaper than Raspberry Pi Zero. But even a low hardware configuration is mostly
    sufficient to allow it to be used as an IoT device that just has to capture sensor
    data and send it to a Cloud backend for storage and processing.Like the RPi, Arduino
    has digital input-output pins that can be connected with electronic components
    to extend it as an IoT device. It also comes with a USB port that can be used
    to power or program the board. It does not run an OS, so programs have to be uploaded
    from a regular computer (PC, laptop, etc.) through a USB cable. What makes Arduino
    stand out from other microcontrollers is its ability to be programmed without
    a separate hardware (programmer). Arduino provides an IDE software to write code
    and upload it onto the board.Figure [2-5](#Fig5) shows a diagrammatic representation
    of an Arduino UNO board.![A458845_1_En_2_Fig5_HTML.jpg](A458845_1_En_2_Fig5_HTML.jpg)Figure
    2-5Arduino UNOArduino is open source, meaning its blueprint and architecture have
    been openly made available online for any one to refer or even use to build their
    own Arduino boards. This is another reason behind Arduino’s popularity since now
    there are hundreds of small to medium-sized board makers that produce Arduinos
    globally.Arduino has dozens of official variants, the most popular one being Arduino
    UNO, which is well-suited to beginners who want to learn about the board.
  prefs: []
  type: TYPE_NORMAL
- en: BLE Beacons
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Bluetooth low energy beacons or simply Beacons are a very different class of
    IoT enablers. A beacon is a dead-simple, battery-powered, thumb-sized device whose
    sole purpose is to transmit Bluetooth signals containing its universally unique
    identifier (UUID). Several beacons can be deployed in a hall or a building. A
    mobile app can then be designed to detect Bluetooth signals coming from all the
    beacons in range and perform a specific action based on the closest beacon.Perhaps
    beacons are best understood through its retail store use case. Imagine a retail
    store or a supermarket that is fitted with beacons—one at the entrance, one at
    checkout, and one each in every aisle. Each beacon regularly transmits its UUID.
    You walk into the store with the store’s official app installed on your phone.
    The app is designed to interact with the store’s beacons. The moment you enter,
    your app detects the beacon at the entrance. The app’s developers have programmed
    it to trigger a notification message on coming close to each beacon. On coming
    in proximity to the entrance beacon, you instantly get a notification that says
    something like, “Welcome to ABC Store. This is an excellent time to check in,
    as we have plenty of discounts. Check aisle 7 through 13 for maximum discounts.”
    The beacon didn’t send this message, your app did (there’s possibly an if-else
    logic for each beacon’s UUID). Similarly, when you pass through an aisle, you
    get an aisle-specific notification, “Hey, did you know that your favorite oats
    are 15% off?” In this way, retail store owners can make shopping more engaging,
    increasing their revenues in the process.Apart from being able to retrieve a beacon’s
    UUID, an app may also use its Bluetooth signal strength value to roughly calculate
    its distance (in meters) from the mobile device.Both iOS and Android offer native
    APIs to interact with beacons. Apple calls its API set iBeacon, while Google calls
    it EddyStone. AltBeacon is a popular open alternative, created by Radius Networks.
  prefs: []
  type: TYPE_NORMAL
- en: Other Honorable Mentions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Intel’s family of IoT devices—Edison, Joule, Arduino 101, Curie, and Galileo—all
    based on Intel processors. Edison and Joule are powerful but expensive alternatives
    to Raspberry Pi.BeagleBone—another worthy RPi alternative—comes with a large number
    of analog and digital I/O pins.
  prefs: []
  type: TYPE_NORMAL
- en: Products
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By now you have learned about the building blocks of an IoT device—sensors,
    actuators, and IoT enabler devices. You have seen various options for building
    an IoT device of your own at home. Now let’s spend a quick minute or two to check
    another type of IoT devices: ones that are factory fitted by manufacturers into
    electronic items and home and electrical appliances. These are IoT devices whose
    hardware cannot be customized or extended, but which may allow software customizations
    through a companion mobile app.A popular category of IoT products is wearables.
    These are devices that can be worn, things such as:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Smartwatches—Monitor heart rate, distance run, altitude variations, sleep patterns,
    and more. Examples: Apple Watch, Moto 360, Samsung Galaxy Gear, Fossil SmartWatch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fitness bands—Similar to smartwatches, sans the clock aspect. Examples: Fitbit,
    Pebble, and Mi Band.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Smartglasses—Come with a camera and motion sensors, are often used with computer
    vision and augmented reality applications. Examples: Google Glass, PivotHead,
    Vuzix, and Microsoft HoloLens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Shoes—Come with various health tracking sensors. Examples: Nike+ and Under
    Armor Speedform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apart from wearables, other electronic and even simple home devices that may
    be IoT-enabled are TVs, speakers, washing machines, thermostats, door locks, switches,
    plugs, cameras, and light bulbs. Amazon’s Dash buttons also quality as IoT devices.
  prefs: []
  type: TYPE_NORMAL
- en: Network Connectivity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Their ability to connect to a network for sharing data is what sets IoT devices
    apart from regular electronic devices. However, contrary to the name “Internet”
    of Things, devices do not have to be connected to the Internet all the time to
    qualify as IoT devices. They may operate in offline mode most of the time and
    connect to the Internet only occasionally to sync data with their Cloud backend.
    Monitoring devices in a factory setup where real-time updates is not crucial may
    operate in this mode.Alternatively, IoT devices may be connected to each other
    locally without an active Internet connection. For example, consider a media streaming
    device connected to a TV and various stream sources (mobile, laptop, PC, etc.)
    on a local WiFi network.Depending on connectivity options available on the device,
    it may be connected to other devices or the Internet through Bluetooth or Ethernet.
    ZigBee  is another popular option for low-powered devices.Since IoT is all about
    transportation of data (from sensors or otherwise) from one device to others or
    to a Cloud backend, let’s take a quick glimpse at some popular messaging protocols
    used with IoT devices.
  prefs: []
  type: TYPE_NORMAL
- en: Messaging
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Suppose yours is an IoT device with just one transducer  —a temperature sensor.
    The only job of your device is to continuously detect the temperature inside your
    room and send the reading to a Cloud backend after every minute. For sending data
    from device to Cloud, you probably wrote a RESTful API that could be called from
    the device. This API accepts just one parameter—temperature—and stores it in some
    sort of a database. This, perhaps, is the simplest use case imaginable for an
    IoT device. In the real world, however, things are more complicated.In a typical
    IoT setup, hundreds or thousands of IoT devices must simultaneously send their
    recorded data every second or few seconds to the Cloud. Many of these devices
    may have multiple sensors and, thus, as many data streams to send. In the room
    temperature device  example, sending data reliably wasn’t difficult. A very small
    amount of data had to be sent over the Internet after a considerable amount of
    time (one minute is comfortably long between API calls). There was negligible
    chance of data congestion and delivery failure.But when large amounts of data
    need to be sent, things get different. We must be ready for the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: How do we ensure all data is sent in the timely manner set for each device?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do we ensure all data is sent by devices and received at the Cloud backend
    reliably (that is, no data message is dropped on the way)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do we ensure large amount of data doesn’t congest the network connection?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have worked with large-scale software, you know an efficient queuing
    technique  can address these questions. A suitable messaging, data queuing, and
    routing technique is all the more important in IoT to deal with large volumes
    of data to be transferred rapidly over the Internet. This is where messaging protocols  come
    to the rescue. More often than not, the protocols work with an existing or custom
    messaging middleware (broker) for desired results.Figure [2-6](#Fig6) shows how
    data flows from a device to the Cloud using proper messaging.![A458845_1_En_2_Fig6_HTML.png](A458845_1_En_2_Fig6_HTML.png)Figure
    2-6Example messaging flow using a protocol and a brokerAll protocols discussed
    next are neither new nor were they created specifically for IoT. They are application
    layer protocols for message-oriented communication. Their low power consumption
    and reliable messaging make them a suitable choice for data transfer in the case
    of IoT devices.
  prefs: []
  type: TYPE_NORMAL
- en: AMQP
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Advanced Message Queuing Protocol is perhaps the most popular choice for writing
    enterprise IoT applications. AMQP makes extensive use of queuing for reliably
    routing messages from source to destination. Routing is based on publish-and-subscribe
    model, and queuing is done using the store-and-forward technique. A publisher
    (source) generates a message and sends it to the exchange. The exchange redirects
    the message to one of several message queues. The message is stored in its queue
    until the subscriber (destination) is ready to receive it. At an appropriate time,
    the queue forwards the message to subscriber, thus completing its reliable delivery
    of the message.AMQP is known for its rich set of features, including restricting
    access to queues and other fine-grained controls over its components. A message
    can have properties and a header. It provides three message-delivery guarantees—at-most-once
    (fire and forget mode: message is delivered once or never), at-least-once (message
    is guaranteed to be delivered, but could be sent multiple times), and exactly-once
    (message is delivered certainly and only once). Because of these features, AMQP
    is an ideal choice for developing highly scalable enterprise applications where
    reliability and security are crucial.AMQP is a binary protocol. Data is transported
    in machine-readable binary format rather than human-readable text format (as in
    the case of HTTP, FTP, SMTP, etc.). Binary data has the benefit of being smaller
    in size as compared to plain-text data.It was developed between 2003-06 at JPMorgan
    Chase, one of world’s top investment banks. Its creator, John O’Hara, proposed
    it out of frustration he and his team faced in integrating front- and back-office
    processing systems each time a new solution was developed. The proprietary nature
    of available message-oriented middleware of those days made it hard to connect
    the two processing systems. AMQP was developed as an open alternative to proprietary
    middleware, and so interoperability was a major motivation. The protocol also
    addressed the issues of reliable delivery owing to the fact that in banking each
    message delayed or failed could have economic implications.JP Morgan still uses
    AMQP  to process a billion messages a day, and so do companies such as a NASA
    and Google. The world’s largest biometric and identity database—India’s UIDAI
    or Aadhaar project—also uses the protocol to serve 1.2 billion people.In sum,
    the defining features of AMQP are queuing, reliability, and security.'
  prefs: []
  type: TYPE_NORMAL
- en: MQTT
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Message Queue Telemetry Transport protocol is simpler and more focused than
    AMQP. Like AMQP, it uses the publish-and-subscribe model for messaging, but unlike
    AMQP it does not use message queues (you read it right—no message queues, despite
    the name). MQTT is intentionally designed to have a low footprint. It is especially
    suited to low-powered, resource constrained devices operating over low-bandwidth,
    high-latency networks.MQTT is also a binary protocol, where messages are smaller
    due to compressed headers and the lack of message properties. It is ideally suited
    to IoT devices that send out simple data messages, such as temperature and humidity
    values, stock prices, mobile notifications, etc.Defining features are simplicity
    and a lower footprint.
  prefs: []
  type: TYPE_NORMAL
- en: STOMP
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Simple Text Oriented Message Protocol is a text-based protocol with simplicity
    and interoperability as key design goals. Unlike AMQL and MQTT, messages are transmitted
    in human-readable plaintext format. This makes communication between the server
    possible with a wide-range of clients (including telnet).STOMP does not use message
    queues, but the messages support AMQP-like properties and headers. The protocol
    is simple and easy to implement, as its design follows closely that of how HTTP
    works. The creators of STOMP claim that developers have been able to write a STOMP
    client program in a couple of hours.Defining features are simplicity and interoperability.
  prefs: []
  type: TYPE_NORMAL
- en: XMPP
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Extensible Messaging and Presence Protocol is another text-based protocol suited
    to applications that require real-time exchange of structured information. Messages
    are transmitted in XML format, allowing for extensive interoperability since XML
    is understood by a wide variety of systems and programming languages. XMPP is
    a secure protocol that allows for authentication mechanisms and end-to-end encryption
    of communication. Also known as Jabber (after the open source community that originally
    developed it), XMPP is widely used in instant messaging applications including
    Google Talk. It also facilitates the exchange  of presence information (online,
    offline, busy, away, etc.) across contact-based IM applications.Defining features
    are structured messaging (via XML) and real-time communication.
  prefs: []
  type: TYPE_NORMAL
- en: Edge Computing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In an IoT network, things that form the network are often pretty low configuration
    devices whose sole purpose is to capture data and send it over to a powerful Cloud
    backend for storage, processing, and analysis. Such devices do not have computational
    power or memory to do analytics on their own. With the explosion of IoT enabler
    devices, things are changing rapidly.The new breed of IoT devices come with decent
    compute power at a low cost. The $5 Raspberry Pi Zero comes with 1GHz single core
    processor (same as Model B+) and 512MB RAM. Compare this with the original Raspberry
    Pi (Model B gen 1)—launched in 2012 at $35—that came with 700MHz single-core processor
    and the same amount of RAM!By utilizing this increased compute power and memory
    clubbed with modern machine learning techniques, basic analysis of captured data
    can be performed on the device itself. In an IoT network, devices are connected
    to the Cloud backend via gateways, routers, and servers. While Cloud backend sits
    at the center, devices form the “edge” of the network. So, pushing data storage
    and analysis to the logical extremes of a network is called edge computing. Edge
    devices may be connected to a source of data (motor, turbine, pump, or another
    machine part) or may itself be the source of data. Results obtained from edge
    computing may later be synced with a Cloud backend for permanent storage and further
    analysis. As you might instantly imagine, performing computation at or near source
    of data has several benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Instant action : Since a device can perform basic analysis by itself and doesn’t
    have to wait for data to upload and Cloud backend to respond, it can take immediate
    actions based on calculated decisions. For example, calling off an alarm proactively
    when detecting a particular temperature predictive trend. The ability to perform
    instant actions is a godsend in cases where network connectivity is slow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Reduced network usage : The Cloud backend does not have to be updated as frequently
    as in normal scenarios. Results obtained through edge computing may be stored
    on the devices and synced with Cloud every few hours or minutes rather than seconds.
    In this way, a lot of network bandwidth (and, thus, costs) may be saved, especially
    in setups involving hundreds or thousands of devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ability to work offline : In certain scenarios, edge computing may allow devices
    to work completely offline without the need to connect with a Cloud backend. This
    might not require sufficiently powerful IoT devices, depending on the use case.
    Autonomous vehicles, such as self-driving cars, are a good use case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Security and compliance : Sometimes security constraints of organizations,
    such as banks and government agencies, mandate data to be stored only on the intranet
    and not cross over to Internet Cloud servers. This is to make it harder for hackers
    to penetrate their data. Edge computing can fill in for the lack of a Cloud backend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NoteFog computing is a conceptually similar term, sometimes (incorrectly) used
    interchangeably with edge computing. In both cases, data processing happens near
    the source of data. The difference is exactly where on the edge. In the case of
    edge computing, processing happens on the device itself. On the other hand, in
    fog computing processing happens on IoT gateways. A gateway is a powerful, server-like
    routing and compute device that connects several IoT devices to the Internet or
    rest of the network. So, data processing happens nearer the source of data in
    the case of edge computing.
  prefs: []
  type: TYPE_NORMAL
- en: Practical Use Cases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By now, you probably already have a very good idea about where and how IoT can
    be useful. We still want to introduce you to four very different use cases in
    the hopes that they prove thought-provoking and instigate in you a motivation
    to build something of your own.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use Case 1: Home Automation'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are various aspects of a home that can be automated. Whether it is a
    physical disability that prevents one from manually accessing parts of a home
    or just sheer convenience, automation can be really useful in those crucial moments.A
    visitor sounds the doorbell. A camera mounted strategically at the door is triggered
    to record a photo/video of the visitor. The camera, which is connected to the
    Internet, sends the recorded media over to a Cloud backend for face recognition.
    If the face matches one in the “friends and family” database, the door unlocks
    automatically. In the meantime, a notification is sent to the home owner’s phone
    about the visitor. The visitor identification system can be programmed to not
    unlock the door if no one is at home. This idea can be extended to allow only
    those people to automatically enter who have an appointment with the home owner
    during that time as per their online calendar.A home intrusion system can be built
    on similar lines. A high-priority notification can be sent to the owner and local
    police authorities if someone unknown tries to trespass.The weather is melting
    hot. The home owner is on this way from office to home. Fifteen minutes before
    her estimated time of arrival (perhaps as per the navigation system on car or
    mobile), a message is sent to the bedroom’s air conditioner to turn on to make
    the room temperature comfortable once the owner is home.We are sure that you can
    think of a dozen more such convenient use cases. The idea of home automation can
    also be extended to create a connected home, a place where appliances talk to
    each other and all connected appliances are accessible to the owner via a mobile
    app: smartwatch asking the room lights to turn off when the wearer falls asleep,
    home owner activating the pet feeder remotely using mobile app, and so on.For
    a person suffering from a severe physical disability, such as in the case of ALS
    or quadriplegia, the ability to control the home is a necessity rather than a
    convenience. Imagine such a person, wearing a smartglass, and being able to switch
    the lights on and off just by blinking and double-blinking their eyes.Since such
    a person would be home-bound most of the time, it would make great sense to notify
    their caretaker who is out at work. If the patient’s vitals, being monitored by
    a fitness band, come to a critical level, the caretaker automatically receives
    a pre-recorded urgent call to pull them out of their work.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use Case 2: Indoor Navigation'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: GPS is a cool technology to navigate us from one place to another. While it
    works great outside, GPS fails indoors owing to the fact that its signals find
    it difficult to penetrate the concrete and other construction materials used in
    building our homes and offices. For going from one place to another inside a building,
    we need another technology.We learned earlier that signals received from beacons
    not only tell their UUID but also their rough distance from the phone receiving
    those signals. This information, when clubbed with pedestrian dead reckoning (PDS)
    algorithms, can be used to precisely estimate a person’s location as they walk
    through a building. Beacons serve as checkpoints, whereas PDS provides the route
    information to navigate from one checkpoint to another.Indoor navigation is especially
    useful to people suffering from vision impairment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use Case 3: Pet Monitoring'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An IoT device (microcontroller, RFID tag, or beacon) attached to a pet can check
    on its various health parameters. It can also constantly monitor the pet’s position
    and immediately sound an alarm when they cross the house’s boundary. This use
    case can be extended to farm animals, where it is easy for them to go astray and
    difficult for the farm owner to manually keep track of all the livestock. A simple
    location monitoring device may keep an animal safe from being run over by a vehicle
    or eaten by a larger wild animal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use Case 4: Process Optimization'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Have you ever been to a large kitchen, the kind where meals are produced in
    very large quantities to be served to the general public? If you have then you
    know that a good amount of food is wasted every time. Such kitchens use huge containers
    to cook food in bulk quantities. It’s not unusual for a container’s food to overcook
    due to a miscalculation on the cook’s part. Food waste is a big problem, especially
    for NGOs working to provide free mid-day meals to thousands of needy people. The
    cost of wasted food can easily accumulate to thousands of dollars per month.IoT
    devices can be installed inside these food containers to sense temperature and
    other parameters. Sensing overcooking, alerts may be sounded. Through this approach,
    waste can be diminished and food quality made consistent.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring and Deploying a Single IoT Device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the “IoT Devices” section earlier, you learned about some popular enabler
    devices. The three important ones we discussed were Raspberry Pi, Arduino, and
    beacons. The process of deploying code varies from device to device.
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Rpi, being an SoC, offers a PC-like hardware configuration. It can ably run
    a regular operating system, such as Windows or Linux. As a result, running code
    and programs on a Pi is similar to doing so on a regular computer. People can
    connect their Pis to their TVs or monitors, plug a keyboard into one of the USB
    ports, and start coding. Sensors and actuators can be installed via the RPi’s
    GPIO interface, whose pins can be controlled directly through code.A Pi’s operating
    system may be run in headless mode, meaning without the OS’s graphical interface.
    Headless mode is useful because of two reasons—the GUI consumes precious memory
    and computing resources, which may otherwise be used to speed up data analysis
    on the device and the environments where IoT devices are deployed usually do not
    have a need for a TV/monitor screen. Even without a GUI, a developer may log into
    their Pi through SSH or a similar technology. This is also the standard industry
    practice. While logged in via SSH, it is easy to write and update code, calibrate
    sensors, and configure and optimize the device.
  prefs: []
  type: TYPE_NORMAL
- en: Arduino
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An Arduino connects via a USB cable to a regular computer, where the developer
    uses Arduino IDE to write code and upload it to and run it on the device. Electronic
    components can be attached through its digital I/O pins. Since Arduinos cannot
    run operating systems, it is not possible to write code by “logging in”.
  prefs: []
  type: TYPE_NORMAL
- en: Beacons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Beacons are the simplest of IoT devices. They neither have a processor nor memory.
    The code to interact with them is installed on a mobile device. How the app uses
    the Bluetooth signals emanated by one or more beacons is totally up to the app.
  prefs: []
  type: TYPE_NORMAL
- en: What About Deploying Code to Multiple IoT Devices at Once?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Dealing with IoT devices can be simple and fun as long as you are doing that
    with one or two devices, maximum. Things start getting frustratingly complicated
    and laborious when you have to deal with hundreds of similar or even different
    devices (think Pis and Arduinos). In an enterprise scenario, the following must
    be addressed:'
  prefs: []
  type: TYPE_NORMAL
- en: Managing network connectivity for all devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous monitoring of all devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying code updates on all devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new devices to the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security and identity management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure IoT Suite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have said it half a dozen times before and we’ll say it again, “IoT is centered
    on data. Data is the fuel of an IoT network, its most valuable asset.” Through
    its Azure Cloud services, Microsoft has been targeting data for some time now.
    Its data storage, processing, and analytics services are stable and evolved. It
    was natural, then, that with the onset of the IIoT revolution Microsoft would
    be one of the first to offer a well-tested set of services to manage large-scale
    enterprise IoT solutions.The Azure IoT Suite is a set of new and existing Cloud
    services to comprehensively cover all IIoT needs. While machine learning, PowerBI,
    and Notification Hubs are veteran services that were reused in the suite, IoT
    Hub and Stream Analytics are new additions specially created for enterprise IoT.It
    is important to note that the Azure IoT Suite is about managing IoT devices at
    scale: not one or two or a dozen devices, but hundreds or thousands or millions
    of them. You can, of course, use the services with fewer devices but the real
    cost benefit is seen with a large set of devices.'
  prefs: []
  type: TYPE_NORMAL
- en: IoT Solution Architecture
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before going into the details of each service, let’s look at the architecture
    of a typical IoT solution. Figure [2-7](#Fig7) shows the key components of an
    IoT solution architecture.![A458845_1_En_2_Fig7_HTML.jpg](A458845_1_En_2_Fig7_HTML.jpg)Figure
    2-7IoT solution architectureFigure [2-7](#Fig7) shows how data flows within a
    solution. Data originates at the IoT devices, gets routed through a Cloud gateway
    over to a Cloud backend (IoT solution backend), and after the data has been processed
    in the backend, it is presented in human-readable format as graphs and charts.
    At all stages of this workflow, there is something that is facilitating data flow,
    as can be seen at the top of the diagram.Device connectivity is fully managed
    by IoT Hub. It is responsible for connecting, authenticating, configuring, updating,
    and deploying millions of IoT devices.Data processing and analytics is done using
    the machine learning and Stream Analytics services. It helps in extracting meaningful
    insights and making predictions that are relevant to optimizing or growing business.Presentation
    is facilitated by PowerBI, which can generate elegant and easy-to-understand dashboards
    using raw data insights produced by ML and Stream Analytics services. Decision-makers
    in an organization can refer to the dashboards, rather than being bogged down
    by Excel sheets, to quickly make decisions.At each stage in the workflow, it may
    be required to notify stakeholders and users of that stage of important events,
    such as device malfunction, security breach, completion of analytics, etc. Notification
    Hubs is a multi-platform push-notification engine that can send notification messages
    at scale to mobile devices, including iOS, Android, and Windows devices.
  prefs: []
  type: TYPE_NORMAL
- en: Preconfigured Solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Azure IoT Suite provides a set of three preconfigured end-to-end solutions
    that cover the most common real-world use cases. So, instead of starting from
    scratch, one can use a preconfigured solution either directly (if it fulfills
    are business requirements) or as base template that will undergo customizations.
    Deploying a preconfigured solution takes only a few minutes and is supported by
    Azure’s Resource Manager deployment model.
  prefs: []
  type: TYPE_NORMAL
- en: Remote Monitoring
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This preconfigured solution targets a scenario where various assets of a workshop,
    factory, office, or other similar establishments produce telemetry data that must
    be constantly monitored to keep track of critical events.For simplicity’s sake,
    take for instance a workshop that has a furnace, an engine, and a lathe machine.
    All three produce data for various telemetry parameters: furnace (temperature,
    humidity, pressure), engine (fuel level, vibration), and lathe machine (rotations
    per minute, temperature). Using the remote monitoring solution, it’s easy to set
    up alarms for events such as when:'
  prefs: []
  type: TYPE_NORMAL
- en: Pressure inside the furnace is greater than 220 psi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fuel level of the engine is less than five liters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Temperature of the lathe machine is more than 50 degrees Celsius
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Predictive Maintenance
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This solution is helpful in predicting maintenance needs of machines well ahead
    of their imminent failure.Consider a factory with hundreds of machines with moving
    parts. Each machine is susceptible to fail at some point due to wear and tear.
    Each time a machine fails, part of the production halts until it is fixed or replaced.
    Such delays due to unplanned downtimes result in monetary losses to the factory.
    The predictive maintenance solution can regularly highlight machines that will
    fail in the near future, and, thus, help them save costs by doing fewer planned
    maintenances rather than several unplanned ones.
  prefs: []
  type: TYPE_NORMAL
- en: Connected Factory
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This solution is similar to remote monitoring one, except automated actions
    can be taken in addition to raising alarms. The solution can help in:'
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring assets and generating key performance indicator (KPI) values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Azure Time Series Insights service to analyze telemetry data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking actions to fix issues based on alarms by sending commands to devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For each solution, a predefined set of Azure services gets activated. In the
    case of remote monitoring:'
  prefs: []
  type: TYPE_NORMAL
- en: IoT Hub (device connectivity and maintenance)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container services (hosts and manages microservices)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web apps (host custom application code)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cosmos DB (data storage)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For this connected factory  , the following two services get activated in addition
    to the ones in the case of remote monitoring:'
  prefs: []
  type: TYPE_NORMAL
- en: Time Series Insights (analyze and display telemetry data)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Tables (store NoSQL data)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure IoT Hub
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: IoT Hub is a fully managed service that enables reliable and secure two-way
    communications between a large number of IoT devices and a solution backend. It
    is the answer to our earlier question about connecting and deploying code to multiple
    IoT devices at once.Figure [2-8](#Fig8) shows the architecture diagram of IoT
    Hub. It is a focused and more detailed version of the IoT solution architecture
    we saw earlier.![A458845_1_En_2_Fig8_HTML.jpg](A458845_1_En_2_Fig8_HTML.jpg)Figure
    2-8Azure IoT Hub architectureIn Figure [2-8](#Fig8), IoT Hub is the interface
    between devices and backend. We saw earlier how connectivity options vary across
    devices. In order to standardize connectivity to the solution backend, IoT Hub
    provides device SDKs for C, Python, Node.js, Java, and .NET.IoT Hub natively understands
    only three protocols—MQTT, AMQP, and HTTPS. For devices that use different messaging
    protocols, IoT Hub provides a protocol gateway to translate messages from their
    protocol to one it understands.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring and Deploying Multiple IoT Devices at Scale
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'IoT Hub is designed to manage millions of devices simultaneously. It provides
    secure bidirectional communication between devices and the solution backend. Devices
    can send their telemetry data to the backend. Conversely, the backend can send
    commands to stop/restart a device, turn actuators on or off, and so on.Security
    is the utmost, the number one consideration in IoT Hub’s design. Hub ensures that
    all communications in the solution are secure. It maintains an identity registry
    that has a record of each trusted device’s identity. Unauthorized devices cannot
    join the network.IoT Hub maintains a device twin for each device. A device twin
    is a JSON document that stores device state information such as metadata, configurations,
    and conditions. When the backend needs to send an instruction to a device, it
    sets the device’s twin’s desired properties (request). The corresponding device
    performs the requested operation and updates its twin’s reported properties (response).IoT
    Hub provides device-to-Cloud and Cloud-to-device communication options.Device-to-Cloud
    data includes:'
  prefs: []
  type: TYPE_NORMAL
- en: Sensor telemetry data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device twin’s reported properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File uploads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cloud-to-device data includes:'
  prefs: []
  type: TYPE_NORMAL
- en: Direct methods, such as interactive control of devices through a request-response
    mechanism (e.g., turning a motor off)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device twin’s desired properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One-way notifications to the device app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter, you learned about IoT and devices (or things) in detail. You
    also had a glimpse of the Azure IoT Suite and its components and saw how it can
    help manage massive IoT solutions. The chapter included:'
  prefs: []
  type: TYPE_NORMAL
- en: 'An introduction to IoT: its meaning, history, and practical use cases'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A quick discourse on IoT devices: building blocks, types, and deployment methods'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A discussion of network connectivity options with IoT devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A discussion of Azure IoT Suite components and architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, you use the Azure IoT Suite to create and manage your own
    IoT solution.
  prefs: []
  type: TYPE_NORMAL
