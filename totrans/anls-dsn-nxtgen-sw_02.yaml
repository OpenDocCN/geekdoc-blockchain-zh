- en: © Springer Nature Switzerland AG 2020A. M. LangerAnalysis and Design of Next-Generation
    Software Architectures[https://doi.org/10.1007/978-3-030-36899-9_2](https://doi.org/10.1007/978-3-030-36899-9_2)
  prefs: []
  type: TYPE_NORMAL
- en: 2. Merging Internal Users and Consumer Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Arthur M. Langer^([1](#Aff2) [ ](#ContactOfAuthor2))(1)Center for Technology
    Management, Columbia University, New York, NY, USAArthur M. LangerEmail: [al261@columbia.edu](mailto:al261@columbia.edu)'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter seeks to provide analysts with a path to transforming legacy systems
    into the new mobile-based paradigm of analysis and design. In order to best understand
    this journey I must first clearly define what has been accomplished in the past;
    to do so provides today’s analyst with a better understanding of why applications
    perform the way they were designed and the reasons why they are not capable of
    being used as we go forward with the new paradigm of advanced technologies in
    a mobile based global economy. Reviewing these methods also provides two other
    values, (1) it allows analysts to continue to support legacy applications and
    make enhancements to them until they are completely re-architected (which could
    take decades); and (2) not all the legacy analysis and design techniques should
    be eliminated, rather expanded to meet the needs of new digital based technologies.
  prefs: []
  type: TYPE_NORMAL
- en: So, the first part of this chapter will review existing methods and then expanding
    them for the newer generations of systems. The first aspect of understanding business
    requirements is the Tiers of Software Development.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 The Tiers of Software Development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As stated, software development continues to evolve, particularly with the proliferation
    of internet-based wireless software products. The need to change the lifecycle
    of development certainly changes the way analysis and design is conducted. Unfortunately,
    many software products are created without thorough analysis and design, because
    it is easier just to create an “app” and then release it for consumer evaluation.
    Although this is an important development these advances in software development
    are overshadowing the importance of creating a parallel analysis and design paradigm.
  prefs: []
  type: TYPE_NORMAL
- en: As the software industry focuses on integrated software solutions through robust
    mobile-based capabilities, it is important for the analyst to use the appropriate
    sequence of tiers to arrive at user and consumer requirements. Developers cannot
    expect good results from taking shortcuts, tempting as it may be to do so. The
    recommended sequence of tiers is outlined below.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1.1 User/Consumer Interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Notwithstanding the type of software applications being developed, applications
    cannot be effectively designed without a user/consumer interface. The user/consumer
    interface tier acts as the base layer for any application because it drives the
    requirements of the product. Unfortunately, the user/consumer-interface is often
    bypassed because of pressures to issue product quickly. The *traditional SDLC*
    was most effective and often used during three fundamental phases:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Requirements analysis
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Data Modeling
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Normalization .
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: During requirements analysis, the development and design team conduct interviews
    in order to capture all the business needs as related to the proposed system.
    Data modeling involves the design of the logical data model which will eventually
    be transformed into a physical database. Normalization is conducted to reduce
    the existence of redundant data. Below is a more specific depiction of the Development,
    Testing, and Production cycles of the SDLC.
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Development
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Development life cycle consists of all the necessary steps to accomplish
    the creation of the application. The four components are feasibility, analysis,
    design, and the actual coding. The feasibility process helps determine whether
    the application is realistic and has an acceptable return-on-investment (ROI).
    ROI usually has complex financial models that calculate whether the investment
    will provide an acceptable rate of return to the business. ROI should not solely
    use monetary returns as the only method; there are a number of reasons why companies
    develop software solutions that are not based on monetary returns (Langer [2011a](#CR4),
    [b](#CR5)). Feasibility reports typically contain ranges of best and worst cases.
    Feasibility also addresses whether the business feels can deliver on time and
    on budget.
  prefs: []
  type: TYPE_NORMAL
- en: Analysis is the phase that delivers a logical requirements document. Indeed,
    the analyst creates the blueprint for programmers and database developers. Analysis,
    as an architectural responsibility is very much based on a mathematical progression
    of predictable steps. These steps are quite iterative in nature, which requires
    practitioners to understand the gradual nature of completion of this vital step
    in Development. Another aspect of the mathematics of analysis is decomposition.
    Decomposition as we will see establishes the creation of the smaller components
    that make-up the whole. It is like the components of a human body that when put
    together makes up the actual person that we physically see. Once a system is decomposed,
    the analyst can be confident that the “parts” that comprise the whole is identified
    and can be reused throughout the system as necessary. These decomposed parts are
    called “objects” and comprises the study and application of object-oriented analysis
    and design. This traditional approach, actually is the key to moving forward to
    providing reusable mobile-based applications. Therefore, the basis of an effective
    path is whether the legacy system has been decomposed to the object level. Unfortunately,
    most major legacy systems are not yet in this state. So the first step in a transition
    is to move them into reusable parts, just like those found in an automobile—tires
    that can fit many different vehicles.
  prefs: []
  type: TYPE_NORMAL
- en: The design step while less logical is much more a more creative phase. Design
    requires the analyst to make the physical decisions about the system, from what
    programming language to use, which vendor database to select (Oracle, Sybase,
    DB2 for example), to how screens and reports will be identified. The design phase
    can also include decisions about hardware and network communications or the *topology*.
    Unlike analysis, design requires less of a mathematical and engineering focus,
    to one that actually serves the user or consumer view. The design is often more
    iterative, which could require multiple sessions with users and consumers using
    a trial and error approach until the correct user interface and product selection
    has been completed. We will see that the new paradigm requires much more design
    and physical trials than getting it right just in analysis. While this sounds
    a bit strange, we will see that many applications are developed, tested as well
    as they can, but then once put into consumers use, they often need a lot of changes.
    This is where the consumer interface has significantly changed the way we work
    on the SDLC.
  prefs: []
  type: TYPE_NORMAL
- en: Actual coding represents another architectural as well as mathematical approach.
    However, while early programming languages were very close to the machine, they
    are now several layers back or what we call abstractions of what the actual code
    that the machine understands. That is, software is the physical abstraction that
    allows us to talk with the hardware machine. Coding then is the best way to actually
    develop the structure of the program. Much has been written about coding styles
    and formats. The best known is called “structured” programming. Structured programming
    was originally developed so that programmers would create code that would be cohesive,
    that is, would be self-reliant. Self-reliance in coding means that the program
    is self-contained because all of the logic relating to its tasks is within the
    program. The opposite of cohesion is coupling. Coupling is the logic of programs
    that are reliant on each other, meaning that a change to one program necessitates
    a change in another program. Coupling is viewed as being dangerous from a maintenance
    and quality perspective simply because changes cause problems in other reliant
    or “coupled” systems. The relationship to coding to analysis can be critical given
    that the decision on what code will comprise a module may be determined during
    analysis as opposed to coding. Today, software programming languages allow less
    “technically” trained people to use them, and this has allowed for a larger and
    growing number of professionals that are developing products.
  prefs: []
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Testing can have a number of components. The first form of testing is called
    program debugging. Debugging is the process where a programmer ensures the application
    executes. For this reason, we consider debugging part of the programmer’s responsibility.
    This is very different than a formal testing or quality assurance group of staff.
    The challenge is always who does what and when is a program ready for the quality
    assurance group to ensure that the program delivers the behavior and outputs originated
    from the requirements document. Programmer’s then should never pass a program
    to quality assurance that does not execute, or at least executing properly under
    all conditions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The formal process should be that a “debugged” program should be forwarded
    to a formal quality assurance group for validation. Most IT organizations have
    developed formal QA departments that are comprised of non-programmers. These QA
    groups focus on testing the correctness and accuracy of programs. Quality assurance
    organizations typically accomplish this by designing what is known as Acceptance
    Test Planning. Acceptance Test Plans are designed from the original requirements,
    which allow quality assurance personnel to develop assurance testing based on
    the user’s original requirements as opposed to what might have been interpreted.
    For this reason, Acceptance Test Planning is typically implemented during the
    analysis and design phases of the life cycle but executed during the Testing phase.
    Acceptance Test Planning also includes system type testing activities such as
    stress and load checking that ensures that the application can handle larger demands
    of data, consistent access or number of users on the system simultaneously. It
    also addresses compatibility testing, such as ensuring that applications operate
    on types of browsers or computer systems. QA of course is an iterative process
    that can often create iterations of redesign and programming. The acceptance testing
    has two distinct components: (1) the design of the test plans, and (2), the execution
    of those acceptance plans. In the “mobile age” of software development, it is
    necessary to have the programming and testing process be happening more simultaneously.
    This can occur because of the ability to make changes quicker and identify problems
    because of the decomposition of the smaller program functions.'
  prefs: []
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Production
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Production is really the “going-live’ phases. Ultimately, Production needs to
    ensure the successful execution of all aspects of a system. During Production,
    there is the need to establish how problems will be serviced, what support staff
    will be available and when and how inquiries will be responded to and scheduled
    for fixing. This component of Production may initiate new Development and Testing
    cycles because of redesign needs (or misinterpreted user needs). This means that
    the original requirements were not properly translated into system realities.
    However, today’s systems are more like living organisms that are always evolving,
    always providing new capabilities, always in testing, and always going into product.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are other aspects of Production as a Life Cycle includes that have not
    changed:'
  prefs: []
  type: TYPE_NORMAL
- en: Backup, recovery, and archival;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change control;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance fine-tuning and statistics;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audit and new requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.1.2 Tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Software systems require that analysts have the appropriate tools to do their
    job, just like an architect. Many new techniques are needed both in the short-term
    and the long-term of the analyst profession. Furthermore, and an even more significant
    challenge, is understanding which of the many available tools to use at any given
    point. Analyst tools are often designed for specialized use rather than for general
    application, and using the wrong tool can potentially cause significant damage.
    Finally, the sequence of use for each specialized tool is also critical to success.
    Indeed, the order of operation, as well as the relationship among specialized
    analysis tools, must be mastered to ensure success. The newer tools discussed
    herein will obviously need to target the wireless and mobile needs of consumers.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1.3 Productivity Through Automation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Having the appropriate tools and knowing how and when to use them is only part
    of the formula for success. Analysts must also be productive—and productivity
    can be accomplished only through the use of automation. Automation is implemented
    using integrated various automated products or what was once defined as Computer
    Aided Software Engineering or CASE. These products provide the analyst with an
    automated and integrated toolsets that are centralized through a core automated
    system and repository of data definitions to be used by all products in the info-systems
    of an enterprise.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1.4 Object Orientation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Perhaps the most important tool for the wireless generation of software products
    is the concept of object orientation (OO). Whether or not software systems are
    OO compliant, analyzing systems using the object method builds is essential for
    created functional primitive objects that can be disseminated across IoT devices.
    OO developed software creates better systems that are more cohesive, reusable,
    and maintainable. Such code is more maintainable and the foundation of the development
    of reusable components that can be integrated across architectures and combined
    dynamically into larger applications. Without an OO design philosophy, systems
    tend to have parts in many applications that are re-coded and virtually impossible
    to maintain. Welcome to the legacy challenge! With the advent of mobile-based
    architectures it is vital to convert all legacy software into an object library
    repository. The question that this book addresses is, how?
  prefs: []
  type: TYPE_NORMAL
- en: 2.1.5 Client/Server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In many ways a large portion of legacy software is still governed by the concept
    of client/server processing. Client/server design was born out of a master/slave
    philosophy, where the server contained the major code and the databases, and the
    client had local needs, mostly to help with performance. Client/server is now
    outdated and must be replaced with a network strategy of linked components that
    may, or may not need a master server, rather a more flattened linkages of parts.
    Thus, client/server software development was originally designed to solve a network
    performance problem, but 5G and future quantum type hardware will simply continue
    to make that architecture obsolete. with network hardware strategy. While client/server
    hardware topology is an important issue in itself, it has little to do with the
    process of deciding how software modules should interact across the network and
    where such modules should be placed. Such decisions must be driven by issues that
    arise during the process of analysis. Client/server software processing, in its
    true implementation, involves the interaction of objects and defining the way
    in which they will communicate with each other across IoT devices. The network
    will simply act as connection points. Thus, analysts must first be versed in the
    laws governing OO if they are to understand how to design mobile-based IoT solutions.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1.6 Internet/Intranet to Mobility
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The movement to cyber communication across the internet with web-based technologies,
    was initially coined Internet/Intranet processing. It resulted in the introduction
    of a new breed of software applications. These new applications certainly brought
    new challenges to analysts and designers. Increasingly, analysts themselves had
    to work directly with commercial advertisers and marketing departments to create
    a new “look and feel” that were demanded by consumers using the internet to access
    products. These web-based systems, inserted the analyst into a new part of the
    development process, no longer just limited to gathering requirements. The analyst
    now in the wireless IoT era is now the critical integrator to transform the systems.
    We have seen less and less distribution of development teams, with the coming
    of cloud companies that can develop object modules easier and store them for distribution
    across complex networks that feed IoT devices, that is, companies will find more
    and more outsourced solutions to fill their needs. So, the term Internet/Intranet
    is no longer relevant—it is now Mobility!
  prefs: []
  type: TYPE_NORMAL
- en: Mobile-based processing requires that analysts to have mastered the client/server
    paradigm more as a distributed network of parts. Indeed, many professionals will
    dub mobility development as “client/server grown-up.” This may not be the best
    definition of architectural agility, but it functionally supports the tier concept
    of dynamic and connected parts.
  prefs: []
  type: TYPE_NORMAL
- en: So the new Tiers of Software Development that I developed in 2011 is now mobile
    IoT. I call each of these “tiers” because of their dependence on the previous
    phase as a building-block nature and their inevitable dependence on each other.
    I insist that effective analysts must master these tiers to ensure success at
    the next phase. I present these tiers in Table [2.1](#Tab1).Table 2.1
  prefs: []
  type: TYPE_NORMAL
- en: Tiers of analysis and software application development
  prefs: []
  type: TYPE_NORMAL
- en: '| Tier | Analyst application |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | Mobility and IoT |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Distributed networks—breaking down applications |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | Object orientation—selection of objects and classes |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | CASE—automation and productivity of Tier 2 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Structured tools—Use cases, DFD, PFD, ERD, STD, process specification,
    data repository |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | User/Consumer interface—interviewing skills, Marketing, Risk Analysis
    |'
  prefs: []
  type: TYPE_TB
- en: The table graphically shows how each tier must be dependent on the other. There
    is a profound message in this diagram which suggests that no tier can be developed
    or exist without the previous one. To ensure success on a project, everyone involved
    in the design and development of application software must fully understand the
    interdependent nature of these tiers. Analysts must be able to convey to their
    colleagues that to go mobile and IoT, organizations must first have excellent
    user/consumer interfaces, mastery of a structured toolset, a vehicle for automation
    so that the process will be productive, an understanding of the concept of objects,
    and a way to deploy these objects in a distributed outsourced cloud environment.
  prefs: []
  type: TYPE_NORMAL
- en: The following sections provide a step-by-step process of gathering the data
    that you need to create a *traditional* requirements document.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Establishing Internal User Interfaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The success factors in analysis start with the established interfaces from
    day one. What does this mean? You must start the process by meeting with the right
    people in the organization. In the best projects, the process is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Executive Interface: There needs to be an executive-level supporter of the
    project. Without such a supporter, you risk not being able to keep the project
    on schedule. Most important, you need a supporter for the political issues that
    you may need to handle during the project (discussed in detail later). The executive
    supporter, sometimes known as a Sponsor should provide a preliminary schedule
    advising the organization of what is expected and the objectives of the project.
    The executive supporter should attach a letter to the preliminary schedule and
    send it to the project team members. The letter must put the importance of the
    project into perspective. Therefore, it is strongly recommended that you draft
    this letter yourself or at least have influence over its content, since doing
    so can ensure that the message is delivered appropriately. The executive supporter
    should also establish regular reviews with the analyst and the user community
    to ensure that objectives are being met.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Department Head or Line Manager Interface: If appropriate, the Department Head
    should provide guidance about which individuals should represent the department
    needs. If there are several people involved, the analyst should consider a JAD-like
    approach. Depending on the size of the organization, the Department Head might
    also establish review sessions to ensure compliance.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.Functional User Interface: Perhaps the most important people are the ones
    who can provide the step-by-step needs of the system. Figure [2.1](#Fig1) shows
    a typical organization interface structure.![../images/480347_1_En_2_Chapter/480347_1_En_2_Fig1_HTML.png](../images/480347_1_En_2_Chapter/480347_1_En_2_Fig1_HTML.png)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fig. 2.1
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Established interface layers
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2.3 Forming an Interview Approach
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The primary mission of an Analyst or Systems Designer is to extract the physical
    requirements of the users and convert each to its Logical Equivalent. The most
    critical step in this mission is the actual interview, in which you must establish
    a rapport with the user(s) that will facilitate your obtaining the information
    you need. Your approach will dramatically change based on the level and category
    of the individual being interviewed. Therefore, prior to meeting with any user,
    it is critical to understand the culture of the company, its past experiences
    with automation and most important its organization structure.
  prefs: []
  type: TYPE_NORMAL
- en: The following five-step procedure will help guide you more smoothly through
    the interview process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1—Get The Organization Chart:'
  prefs: []
  type: TYPE_NORMAL
- en: There are few things that are more useful in understanding the chain of command
    and areas of responsibility. Depending on the size of the enterprise, and the
    scope of the project, the Organization Chart should start at the Executive Supporter
    level and work down to the Operational Users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2—Understand Everyone’s Role in the Organization Chart:'
  prefs: []
  type: TYPE_NORMAL
- en: If there are any individuals not involved in the project (who should be, given
    their position in the organization), first ask why, then make a notation for yourself
    that they are not to be included. Management may assume an individual or role
    should not be included and may often overlook their importance. Do not be afraid
    to ask why a person is not deemed necessary for the analysis of the system, and
    determine if you are satisfied with the reasons for their exclusion. Remember,
    you can still control and change the approach at this point, and management will
    probably respect you for doing so.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3—Assume the Situation is Political:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Be sure you understand the personalities that you will have to deal with. In
    almost any implementation, politics among people becomes part of the process.
    To ignore its existence—and the constraints it is likely to impose—is to invite
    failure. The question is how to obtain information about internal politics. The
    best approach is to start as high up in the organization as possible, typically
    at the executive supporter level. You might be surprised at the amount of information
    they have. Of course, you should not ask explicitly about the politics, but rather
    phrase your question as follows: “Can you give me some perspective on potential
    department and personnel conflicts that may occur during the interview cycle and
    that I should be aware of?” You may not always get the answer you need, but if
    you keep asking the question during every interview, you will discover a great
    deal about the way the organization functions. And remember, only people make
    projects complex!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4—Obtain Information about User Skill Sets:'
  prefs: []
  type: TYPE_NORMAL
- en: To start an interview without knowledge of the user’s technical skills puts
    the analyst at a huge disadvantage. Having this information will allow you to
    formulate a plan of questions and to determine the best approach to the interview.
    If the user has no knowledge, the questions should be tailored to include a minimum
    of technical content. The following guidelines for preparing for interviews reflect
    a common-sense approach, yet it is amazing how many analysts fail even to consider
    such strategies!
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gather information before the session to allow the user—as well as yourself—to
    be prepared and to give you both a much clearer understanding of what will be
    covered during the interview.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Develop a questionnaire. Technical questions should be phrased differently depending
    on the level of knowledge possessed by the user.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Determine whether the interview will provide enough input to obtain the necessary
    information. This is not always the case; however, it happens more often than
    you might think. Understanding user capabilities before the interview may change
    not only the scope of the meeting, but may also suggest who, in addition to the
    user, may need to be in attendance at the interview.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Step 5: Arrange for a Pre-meeting with the User:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A pre-meeting may not always be possible, and in any case it must be a short
    meeting, perhaps half an hour. The session should be designed to be high-level
    and provide a general idea of what will be covered during the actual interview.
    But more important, it will allow you to get a snap-shot of the user. You might
    say you are obtaining a “comfort level” (or “discomfort level”) for that user,
    and such meetings can provide you with an idea of what to expect and how to finalize
    your approach. What do you look for? Here is some direction:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The pre-meeting should give you enough feedback to place or confirm the user’s
    technical level.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look at everything in the user’s office or their environment. Is it sloppy?
    Is it tidy and organized? The state of the user’s environment will often be consistent
    with the way they provide information. The insight you gain from observing the
    environment should give you guidance about the types of questions to ask this
    individual.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for signs of attitude. The user’s level of interest should be evident.
    Do they view the upcoming session as a waste of time, or are they excited about
    the meeting?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The information gleaned in the pre-meeting can provide you with helpful hints
    about what to expect from the interview and from the user in general.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2.4 Dealing with Political Factions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The importance of internal politics at the user’s site should never be underestimated.
    Perhaps the most common question raised by both professionals and student analysts
    is how to provide quality analysis when office politics get in the way. Here are
    some guidelines:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, assess whether you are in the No-Win Scenario. Many of us hate to admit
    that the No-Win Scenario does indeed exist in many environments, but you should
    be on the lookout for the signs. If your manager will not support you, if the
    company is underpaying you, if the users hate you, if there are no automated tools
    to do the analysis, and if upper management doesn’t care, then you are in a difficult
    position. If you cannot change the situation, you must inform management that
    the results of your analysis will be significantly impaired by the lack of support
    and tools to complete the project properly. The techniques offered in this book
    assume that all parties are interested in providing the best solution possible,
    not in providing a system that is barely adequate.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the other hand, do not be too quick to assume that you are in the No-Win
    Scenario. Most politically hampered projects need some strategy to get them on
    course, and most problems can be overcome if you know how to approach them. Here
    is a typical example of such a problem and some ideas you can apply to solve it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Problem*:'
  prefs: []
  type: TYPE_NORMAL
- en: The Users who currently operate the system won’t talk to me. They are afraid
    either that the new system might replace them or that their jobs will significantly
    change. In short, they fear change.
  prefs: []
  type: TYPE_NORMAL
- en: '*Recommended Solution*:'
  prefs: []
  type: TYPE_NORMAL
- en: Most operational users are managed by a Supervisor or “In-Charge.” Sometimes
    even a Line Manager can be directly responsible for production workers. In any
    event, you must determine who is responsible and meet with that person. The purpose
    of the meeting is to gain their support. This support is significant since you
    might find that the Supervisor was once in operations and will be able to understand
    the problems you may encounter. If the meeting is successful, the Supervisor may
    be able to offer a strategy. This strategy can vary from a general meeting with
    the users, to individual discipline, to escalation to upper management. Whatever
    you do, do not allow such a situation to continue and do not accept abuse; to
    do so will ultimately reflect on you and your abilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Obviously, if the Supervisor is also a problem, then you have no choice but
    to go to upper management. However, this option is not a desirable one from the
    analyst’s viewpoint. Upper management’s reaction may not be helpful, and it could
    be damaging. For example, they might be indifferent to your problem and instruct
    you to deal with it yourself, or they might simply send the Supervisor a letter.
    In some cases you may be fortunate and the Supervisor’s responsibilities regarding
    the system will be given to another manager. Consider, though, how unpleasant
    the consequences may be if you appeal to upper management and get no support:
    you may be left working with an already-unhelpful Supervisor who has been made
    even more so by your complaint. It is important to remember that once you go to
    upper management, the line has been drawn. Supervisors typically are responsible
    for the day-to-day operation. They usually know more about the entire operation
    than anyone else, and therefore you are well advised to find a way to get them
    on your side. A supportive Supervisor can be invaluable in helping you overcome
    problems, as long as you are not shy about suggesting ways to get the users comfortable.'
  prefs: []
  type: TYPE_NORMAL
- en: 2.5 Categories and Levels of Internal Users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Establishing user interfaces represents the vehicle to formulate much of the
    interview approach. It is necessary; however, to go further into the characteristics
    of the people particularly with respect to the *category* and *level* they have
    within the organization. Figure [2.1](#Fig1) established the three general categories,
    called executive, department head or line manager, or functional. It is important
    to explore their characteristics. In order that we better understand each category,
    I have always asked the following question: *What would be their interest in the
    success of the project, that is, what would make them happy with the new system?*
    Let’s apply this question for each user category.'
  prefs: []
  type: TYPE_NORMAL
- en: '1.*Executive users*: individuals at this layer are most interested in the concept
    of return-on-investment (ROI). ROI basically focuses on whether an investment
    will provide a financial return that makes the effort worthwhile to the organization.
    While there are many comprehensive formulas that are often applied to the study
    of ROI, our context pertains to the short- and long-term benefits of investing
    in building new software. There are generally five reasons why executives agree
    to fund software development. They are listed in order of significance to the
    investor.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Monetary return*: simply put this means that the software will generate dollar
    revenue. An example might be the Internet software that supports on-line ordering
    systems such as Amazon has for book shipments. Their system not only provides
    the functionality to handle shipments, but provides a web interface that can be
    directly associated with revenues provided by book orders through the Internet.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: b.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Increased productivity*: many software systems are unable to demonstrate direct
    monetary benefits; however, many of them are developed to increase productivity.
    This means that the system will allow organizations to actually produce and deliver
    more. Thus, the system allows the organization to derive higher revenues through
    increased productivity of its resources.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: c.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Reducing costs*: software projects are approved so that organizations can
    reduce their existing overhead costs. This typically relates to the replacement
    of manual activities with computer ones. While reducing costs appears to be similar
    in nature to increasing productivity, they are often implemented for different
    reasons. Increased productivity usually relates to organizations that are growing
    and are looking for ways to improve output because of very high demand. Reducing
    costs, on the other hand, can represent a defensive measure, where an organization
    is seeking to find ways to cut costs because of a shrinking market.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: d.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Competition*: software systems are created because the competition has done
    so. Therefore, competitive reasons for producing software is a defensive measure
    against someone else who has demonstrated its value. An example of this is in
    the banking sector. Citibank was one of the first banks to introduce automated
    teller machines (ATM). Other banks soon followed because of the success that Citibank
    had with proliferating ATMs throughout New York State. This does not imply; however,
    that competitive systems are always defense mechanisms, indeed, many commercial
    web sites are being introduced based simply on market forecasts for their potential
    to increase business.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: e.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '*For the sake of technology*: while not the most popular, some organizations
    will invest in new systems because they think it’s time to do so or they are concerned
    that their technology is getting old. This way of supporting new systems development
    is rare, as it suggests the spending of money without a clear understanding of
    its benefits.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Therefore, the executive category of users is one that is interested in the
    value of the investment. These users have a global view of needs as opposed to
    the details. in fact, they may know little about how things are really done. The
    value of the executive interface is to provide the scope and objectives of the
    project against their perceived value they intend to get from the software. Another
    popular phrase for this is called the *domain* of the system. Domain often refers
    to *boundaries*. Ultimately, what makes them happy is a system that delivers what
    was promised or the expected ROI.
  prefs: []
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Department head or line manager users*: these users represent two main areas
    of user input. First they are responsible for the day-to-day productivity of their
    respective departments. Thus, they understand the importance of meeting the objectives
    of the organization as set forth by the executives. Indeed, they often report
    the executives. On the other hand, department heads and line managers are responsible
    to their staff. They must deal with the functional users and prescribe ways to
    improve both their output and their job satisfaction. These users perhaps provide
    what I call *the best bang for the buck*, a phrase that usually means that for
    the time, you get the most. One can see that the department heads and line managers
    are responsible for most of what happens every day in an organization. Another
    phrase that can be used to describe them is your *Most Valuable Players* (*MVPs*).
    However, beware, MVPs are the hardest to find and get for the interviews. What
    makes department heads and line managers happy is the most complex. They want
    a systems that produces the output that they are expected to provide and they
    need a system that makes keeps their staff happy and productive.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Functional users*: also known as the users in the trenches, these people essentially
    do the operational activities. While they know a lot about their processes, they
    usually care little about the productivity and expected ROI. I often see these
    users as people who want little pain, and just want to work the hours they need
    to. Thus, fancy systems are of little interest to them unless they provide no
    pain—and no pain derives to a system that makes their job easier.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next area to understand about users is their level. By level, I mean their
    understanding of computers. There are three levels of users:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Knowledgeable*: the determination of knowledge can be tricky and certainly
    based on someone’s opinion. I define knowledge in reference to experience. An
    experienced user can be defined as a person who “has been through it before.”
    A user who has been through the development of a new system can therefore be defined
    as “knowledgeable” within this context.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Amateur*: the definition of an amateur is based not so much on experience,
    but rather to the type of experience the user has. Amateurs can be thought of
    as hobbyists who enjoy working with computers at home, but have no professional
    experience in developing software in an organization. In this perspective, I believe
    the meaning an amateur is globally defined as one who does not get paid for the
    work.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Novice*: these users have no experience with computers. While there are fewer
    of such users than 10 years ago, they still exist. A better way of perceiving
    a novice user is to relate to my definition of knowledgeable. In this context,
    a novice user is one that has never been part of the implementation of a new system
    in a professional environment.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Perhaps the most problematic of the above levels is the amateur. I have found
    that users who are knowledgeable provide benefit to projects. They, in many ways,
    act as a checkpoint for the analyst in that they can ask good questions and particularly
    remember historical problems that actually can help the development process. Novice
    users add little value and also add few problems. They tend to do what you ask
    of them. Amateurs, on the other hand, tend to know enough to be dangerous. They
    also tend to have a profound interest in the topic that they often get-off on
    tangents about the technology as opposed to concentrating on the particulars of
    the project.
  prefs: []
  type: TYPE_NORMAL
- en: What is most important is the mapping of these categories and levels. An analyst
    might interview a knowledgeable executive, or a novice functional user. Each permutation
    can affect the way interviews are conducted. For example, an interview with a
    group of amateurs would focus the analyst on ensuring that the agenda is very
    specific, otherwise, discussions could easily get-off track. Therefore, the understanding
    about user levels and categories can only assist in the development of effective
    interview approaches.
  prefs: []
  type: TYPE_NORMAL
- en: 2.6 Requirements Without Users and Without Input
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Could it be possible to develop requirements for a system without user input
    or even consumer opinions? Could this be accomplished?
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps we need to take a step back historically and think about trends that
    have changed the competitive landscape. Digital transformation is may indeed be
    the most powerful agent of change in the history of business.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have seen large companies lose their edge. IBM’s fall as the leading technology
    firm in the 1990s is an excellent example, when Microsoft overtook them into that
    position. Yet Google was able to take the lead away from Microsoft in the area
    of consumer computing. And what about the comeback of Apple with its new array
    of products? The question is: Why and how does this happen so quickly?'
  prefs: []
  type: TYPE_NORMAL
- en: Technology continues to generate change, or as it is now referred to as “disruption.”
    The reality is that it is getting increasingly difficult to predict what consumers
    want and need—if they even know! The challenge then is how can we forecast the
    changes that are brought about by technology disruptions? So the digital transformation
    is more about predicting consumer behavior and providing new products and services,
    which we hope consumers will use. This is a significant challenge for the analyst
    of course, given that the profession was built on the notion that good specifications
    accurately depicted what users wanted. Langer ([1997](#CR3)) originally defined
    this a the “Concept of the Logical Equivalent.” So we may have created an oxymoron—how
    do we develop systems that the user cannot specify? Furthermore, specifications
    that depict consumer behavior is now further complicated by the globalization
    of business. Which consumer behavior are we attempting to satisfy and across what
    cultural norms?
  prefs: []
  type: TYPE_NORMAL
- en: So the reality is that new applications will need more generic and be built
    with a certain amount of risk and uncertainty. That is business rules may be more
    questionable, risks will need to be evaluated and consistent with those practiced
    by the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Let me state a case for my argument of designing systems for uncertainty and
    change.
  prefs: []
  type: TYPE_NORMAL
- en: If we look at the successful application in the 1980s with the advent of the
    personal computer, a standout is the electronic spreadsheet. The electronic spreadsheet
    was first introduced by a company called Visicorp and named the product VisiCalc.
    It was designed for the Apple II and eventually the IBM PC microcomputer. The
    electronic spreadsheet was not built off of consumer needs, rather perceived needs.
    The electronic spreadsheet was designed as a generic calculator and mathematical
    worksheet. Visicorp took a risk by providing a product to the market and hoped
    that market would find it useful. Of course history shows that it was a very good
    risk. The electronic spreadsheet, which is now dominated by the Microsoft Excel
    product have gone through multiple generations. The inventors had a vision and
    the market then matured its many uses. Thus Visicorp was correct, but not 100%
    accurate with what consumers would want and continue to need. For example, the
    additional feature of a database interface; three-dimensional spreadsheets to
    support budgeting; and forward referencing are all examples of responses from
    consumers that generated new enhancements to electronic spreadsheets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another useful approach to dealing with consumer preferences is Porter’s Five
    Forces Framework. Porters framework consists of the following five components:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Competitors*: what is the number of competitors in the market and what is
    the organization’s position within the market?'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*New Entrants*: what companies can come into the organization’s space and provide
    competition?'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Substitutes*: what products or services can replace what you do?'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Buyers*: what alternatives do buyers have? How close and tight is the relationship
    between the buyer and seller?'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Suppliers*: What is the number of suppliers that are available which can affect
    the relationship with the buyer and also determine price levels?'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Porter’s framework is graphically depicted in Fig. [2.2](#Fig2) (Table [2.2](#Tab2)).![../images/480347_1_En_2_Chapter/480347_1_En_2_Fig2_HTML.png](../images/480347_1_En_2_Chapter/480347_1_En_2_Fig2_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.2
  prefs: []
  type: TYPE_NORMAL
- en: Porter’s five forces framework
  prefs: []
  type: TYPE_NORMAL
- en: Table 2.2
  prefs: []
  type: TYPE_NORMAL
- en: Langer’s analysis consumer methods
  prefs: []
  type: TYPE_NORMAL
- en: '| Porter’s five forces | Cadel et al.’s approach | Langer’s sources of input
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Industry competitors | How strong is your market share | Third party market
    studies |'
  prefs: []
  type: TYPE_TB
- en: '| New entrants | New threats | Third party market studies |'
  prefs: []
  type: TYPE_TB
- en: '|   |   | Surveys and focus groups |'
  prefs: []
  type: TYPE_TB
- en: '| Suppliers | Price sensitivity and closeness of relationship | Consumer support
    and end user departments |'
  prefs: []
  type: TYPE_TB
- en: '| Buyers | Alternative choices and brand equity | Sales/Marketing team |'
  prefs: []
  type: TYPE_TB
- en: '| Substitutes | Consumer alternatives | surveys and focus groups |'
  prefs: []
  type: TYPE_TB
- en: '|   |   | Sales and marketing team |'
  prefs: []
  type: TYPE_TB
- en: '|   |   | Third party studies |'
  prefs: []
  type: TYPE_TB
- en: 2.6.1 Concepts of the S-Curve and Digital Transformation Analysis and Design
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Digital transformation will also be associated with the behavior of the S-Curve.
    The S-Curve has been a long-standing economic graph that depicts the life cycle
    of a product or service. The S-Curve is just that as shown below in Fig. [2.3](#Fig3).![../images/480347_1_En_2_Chapter/480347_1_En_2_Fig3_HTML.png](../images/480347_1_En_2_Chapter/480347_1_En_2_Fig3_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.3
  prefs: []
  type: TYPE_NORMAL
- en: The S-Curve
  prefs: []
  type: TYPE_NORMAL
- en: At the left lower portion of the S-Curve represents a growing market opportunity
    that is likely volatile and where demand exceeds supply. Therefore, the market
    opportunity is large with high prices for the product. Thus, businesses attempt
    to capture as much of the market at this time, which in turn requires risk-taking
    with associated rewards, especially in increasing market share. The shape of the
    S-Curve suggests the life of the opportunity.
  prefs: []
  type: TYPE_NORMAL
- en: As the market approaches the middle of the center of the S, demand begins to
    equal supply, prices start to drop and the market, in general, becomes less volatile
    and more predictable. The drop in price reflects the presence of more competitors.
    As a product or service approaches the top of the S, supply begins to exceed demand.
    Prices begin to fall and the market is said to have reached maturity. The uniqueness
    of the product or service is now approaching commodity. Typically, suppliers will
    attempt to produce new versions to extend the life of the curve as shown Fig. [2.4](#Fig4).![../images/480347_1_En_2_Chapter/480347_1_En_2_Fig4_HTML.png](../images/480347_1_En_2_Chapter/480347_1_En_2_Fig4_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.4
  prefs: []
  type: TYPE_NORMAL
- en: Extended S-Curve
  prefs: []
  type: TYPE_NORMAL
- en: Establishing a new S-Curve then extends the competitive life of the product
    or service. Once the top of the S-Curve is reached, the product or service has
    reached the commodity level, where supply is much greater than demand. Here, the
    product or service has likely reached the end of its useful competitive life and
    should either be replaced with a new solution or considered for outsourcing to
    a third-party.
  prefs: []
  type: TYPE_NORMAL
- en: Langer’s Driver/Supporter depicts the life cycle of any application product
    as shown in Fig. [2.5](#Fig5).![../images/480347_1_En_2_Chapter/480347_1_En_2_Fig5_HTML.png](../images/480347_1_En_2_Chapter/480347_1_En_2_Fig5_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.5
  prefs: []
  type: TYPE_NORMAL
- en: Langer’s drive/supporter life cycle
  prefs: []
  type: TYPE_NORMAL
- en: 2.7 Analysis and Design and the S-Curve
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When designing a new application or system, the status of that product’s S-Curve
    should be carefully correlated to the source of the requirements. Table [2.3](#Tab3)
    reflects the corresponding market sources and associated risk factors relating
    to the dependability of requirements based on state of the consumer’s market.Table 2.3
  prefs: []
  type: TYPE_NORMAL
- en: S-Curve, application requirement sources, and risk
  prefs: []
  type: TYPE_NORMAL
- en: '| S-Curve Status | Analysis input source | Risk factor |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Early S-Curve | Consumer | High, market volatility and uncertainty |'
  prefs: []
  type: TYPE_TB
- en: '| High S-Curve | Consumer | Lower, market is less uncertain as product becomes
    more mature |'
  prefs: []
  type: TYPE_TB
- en: '|   | End users | Medium, business users have experience with consumers and
    can provide reasonable requirements |'
  prefs: []
  type: TYPE_TB
- en: '| Crest of the S-Curve | End users | Low, business users have more experience
    as product becomes mature |'
  prefs: []
  type: TYPE_TB
- en: '|   | Consumer | High, might consider new features and functions to keep product
    more competitive. Attempt to establish new S-Curve |'
  prefs: []
  type: TYPE_TB
- en: '| End of S-Curve | End user | None, seek to replace product or consider third-party
    product to replace what is now a legacy application. Also think of outsourcing
    application |'
  prefs: []
  type: TYPE_TB
- en: 2.8 Communities of Practice
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another technique that can be used to obtain more accurate information in the
    digital economy is called Communities of Practice (COP). COP has been traditionally
    used as a method of bringing together people in organizations with similar talents,
    responsibilities and/or interests. Such communities can be effectively used to
    obtain valuable information about the way things work and what is required to
    run business operations. Much of this information is typically implicit knowledge
    that exists undocumented in the organization. Getting such information strongly
    correlates to the challenges of obtaining dependable information from the consumer
    market. I discussed the use of surveys and focus groups earlier in this section,
    but COP is an alternative approach to bringing together similar types of consumers
    grouped by their interests and needs. Communities of practice are based on the
    assumption that learning starts with engagement in social practice and that this
    practice is the fundamental construct by which individuals learn (Wenger [1998](#CR12)).
    Thus, COPs are formed to get things done by using a shared way of pursuing interests
    from common users. For analysts this means another way of obtaining requirements
    by engaging in, and contributing to, the practices of specific consumer communities.
    This means that working with COP is another way of developing relations with consumers
    to better understand their needs. Using this approach inside an organization provides
    a means of better learning about issues by using a sustained method of remaining
    interconnected with specific business user groups, which can define what the organization
    really knows and contributes to the business that is typically not documented.
    The notion of COP supports the idea that learning is an “inevitable part of participating
    in social life and practice” (Elkjaer [1999](#CR1): 75). Thus, analysts need to
    become engaged in learning if they are to truly understand what is needed to develop
    more effective and accurate software applications. Communities-of-practice also
    includes assisting members of the community, with the particular focus on improving
    their skills. This is also known as “situated learning.” Thus, communities-of-practice
    is very much a social learning theory as opposed to one that is based solely on
    the individual. Communities-of-practice has been called learning-in-working where
    learning is an inevitable part of working together in a social setting. Much of
    this concept implies that learning in some form or other will occur and that it
    is accomplished within a framework of social participation, not solely or simply
    in the individual mind. In a world that is changing significantly due to technological
    innovations, we should recognize the need for organizations, communities, and
    individuals to embrace the complexities of being interconnected at an accelerated
    pace.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is much that is useful in communities-of-practice theory and that justifies
    its use in the analysis and design process. While so much of learning technology
    is event-driven and individually learned, it would be short-sited to believe that
    it is the only way learning can occur in an organization. Furthermore, the enormity
    and complexity of technology requires a community focus. This would be especially
    useful within the confines of specific departments that are in need of understanding
    how to deal with technological dynamism. That is, preparation for using new technologies
    cannot be accomplished by waiting for an event to occur, instead, preparation
    can be accomplished by creating a community that can assess technologies as a
    part of the organization’s normal activities. Specifically this means that through
    the infrastructure of a community, individuals can determine how they will organize
    themselves to operate with emerging technologies, what education they will need,
    and what potential strategic integration they will need to prepare for changes
    brought on by technology. Action in this context can be viewed as a continuous
    process, much in the same way that I have presented technology as an ongoing accelerating
    variable. However, Elkjaer ([1999](#CR1)) argues that the continuous process cannot
    exist without individual interaction. As he states:'
  prefs: []
  type: TYPE_NORMAL
- en: Both individual and collective activities are grounded in the past, the present,
    and the future. Actions and interactions take place between and among group members
    and should not be viewed merely as the actions and interactions of individuals
    (p. 82).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Based on this perspective, technology can be handled by the actions (community)
    and consumers (individuals) as shown in Fig. [2.6](#Fig6).![../images/480347_1_En_2_Chapter/480347_1_En_2_Fig6_HTML.png](../images/480347_1_En_2_Chapter/480347_1_En_2_Fig6_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.6
  prefs: []
  type: TYPE_NORMAL
- en: Community and consumer actions
  prefs: []
  type: TYPE_NORMAL
- en: It seems logical that COP can provide the mechanism to assist analysts with
    an understanding of how business users and consumers behave and interact. Indeed,
    the analyst can target the behavior of the community and its need to consider
    what new organizational structures can better support emerging technologies. I
    have in many ways already established and presented the what should be called
    the “community of IT Analyst practice” and its need to understand how to restructure
    in order to meet the needs of the digital economy. This new era does not lend
    itself to the traditional approaches to analysis, but rather to a more community-based
    process that can deal with the realignment of business operations integrated with
    different consumer relationships.
  prefs: []
  type: TYPE_NORMAL
- en: Essentially, “communities of IT Analyst practice” must allow for the continuous
    evolution of risk-based analysis and design based on emergent uncertain strategies.
    Emergent uncertain strategies acknowledge unplanned actions and evolutions in
    consumer behavior, which have been historically defined as patterns that develop
    in the absence of intentions (Mintzberg and Waters [1985](#CR8)). Emergent uncertain
    strategies can be used to gather groups that can focus on issues not based on
    previous plans. These strategies can be thought of as creative approaches to pro-active
    actions. Indeed, a frustrating aspect of digital transformation is its accelerated
    change. Ideas and concepts borrowed from communities-of-practice can help businesses
    deal with the evolutionary aspects of consumer uncertainty.
  prefs: []
  type: TYPE_NORMAL
- en: The relationship then between communities of practice and analysis and design
    is significant, given that future IT applications will heavily rely on informal
    inputs. While there may be attempts to computerize knowledge using predictive
    analytics software and big data, it will not be able to provide all of the risk
    associated behaviors of users and consumers. That is, a “structured” approach
    to creating predictive behavior reporting is typically difficult to establish
    and maintain. Ultimately the dynamism from digital transformations creates too
    many uncertainties to be handled by sophisticated automated applications on how
    organizations will react to digital change variables. So, COP along with these
    predictive analytics applications provides a more thorough umbrella of how to
    deal with the ongoing and unpredictable interactions established by emerging digital
    technologies.
  prefs: []
  type: TYPE_NORMAL
- en: Support for the above position is found in the fact that technology requires
    accumulative collective learning that needs to be tied to social practices; this
    way, project plans can be based on learning as a participatory act. One of the
    major advantages of communities-of-practice is that it can integrate key competencies
    into the very fabric of the organization (Lesser et al. [2000](#CR6)). IT’s typical
    disadvantage is that its staff needs to serve multiple organizational structures
    simultaneously. This requires that priorities be set by the organization. Unfortunately,
    it is difficult if not impossible for IT departments to establish such priorities
    without engaging in communities-of-practice concepts that allow for a more integrated
    process of negotiation and determination. Much of the process of COP would be
    initiated by digital disruptions and result in many behavioral changes—that is,
    the process of implementing communities-of-practice will necessitate changes in
    the analysis and design approach and fundamental organization processes as outlined
    in this book.
  prefs: []
  type: TYPE_NORMAL
- en: As stated above, communities-of-practice activities can be very significant
    in the analysis and design of transitioning requirements from a transitioning
    digital culture. According to Lesser et al. ([2000](#CR6)), a knowledge strategy
    based on communities-of-practice consists of seven basic steps as shown in Table [2.4](#Tab4).Table 2.4
  prefs: []
  type: TYPE_NORMAL
- en: Extended seven steps of community of practice strategy in analysis and design
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Communities-of-practice step | Analysis extension |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Understanding strategic knowledge needs: what knowledge is critical to
    success | Understanding how technology affects strategic knowledge and what specific
    technological knowledge is critical to success |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Engaging practice domains: where people form communities of practice
    to engage in and identify with | Technology identifies groups based on business-related
    benefits. Requiring domains to work together towards measurable results |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | Developing communities: how to help key communities reach their full
    potential | Technologies have life cycles that require communities to continue.
    Treating the life cycle as a supporter for attaining maturation and full potential
    |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | Working the boundaries: how to link communities to form broader learning
    systems | Technology life cycles require new boundaries to be formed. This will
    link other communities that were previously outside of discussions and thus expands
    input into technology innovations |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Fostering a sense of belonging: how to engage people’s identities and
    sense of belonging | The process of integrating communities: IT and other organizational
    units will create new evolving cultures which foster belonging as well as new
    social identities |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | Running the business: how to integrate communities of practice into running
    the business of the organization | Digital transformation provides new organizational
    structures that are necessary to operate communities of practice and to support
    new technological innovations |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | Applying, Assessing, Reflecting, Renewing: how to deploy knowledge strategy
    through waves of organizational transformation | The active process of dealing
    with multiple new technologies that accelerates the deployment of knowledge strategy.
    Emerging technologies increase the need for organizational transformation |'
  prefs: []
  type: TYPE_TB
- en: 'Lesser et al. ([2000](#CR6)) suggest that communities of practice are heavily
    reliant on innovation. “Some strategies rely more on innovation than others for
    their success… once dependence on innovation needs have been clarified, you can
    work to create new knowledge where innovation matters” (8). Indeed, electronic
    communities of practice are different than physical communities. Digital disruptions
    provide another dimension to how technology affects organizational learning. It
    does so by creating new ways in which communities of practice operate. In the
    complexity of ways that it affects us, technology has a dichotomous relationship
    with communities of practice. That is, there is a two-sided issue: (1) the need
    for communities of practice to implement IT projects and integrate them better
    into what consumers want, and (2) the expansion of electronic communities of practice
    invoked by technology, which can in turn assist expansion of the business consumer
    base, globally and culturally.'
  prefs: []
  type: TYPE_NORMAL
- en: The latter issue establishes the fact that a consumer can now readily be a member
    of many electronic communities and in many different capacities. Electronic communities
    are different in that they can have memberships that are short-lived and transient,
    forming and reforming according to interest, particular tasks, or commonality
    of issue. Communities of practice themselves are utilizing technologies to form
    multiple and simultaneous relationships. Furthermore, the growth of international
    communities resulting from ever-expanding global economies has created further
    complexities and dilemmas.
  prefs: []
  type: TYPE_NORMAL
- en: Thus far I have presented communities of practice as an infrastructure that
    can foster improved ways to create requirements based on consumer behavior and
    trends. Most of what I have presented impacts the ways analysis and design needs
    to be approached in today’s changing world. Communities of practice through the
    advent technology innovations have expanded to include electronic communities.
    While technology can provide organizations with vast electronic libraries that
    end up as storehouses of information, they are only valuable if it they are allowed
    to be shared within the community. Although IT has led many companies to imagine
    a new world of leveraged knowledge, communities have discovered that just storing
    information does not provide for effective and efficient use of knowledge. As
    a result, many companies have created these “electronic” communities so that knowledge
    can be leveraged, especially across cultures and geographic boundaries. These
    electronic communities are predictably more dynamic as a result of what technology
    provides to them. Below are examples of what these communities provide to organizations.
  prefs: []
  type: TYPE_NORMAL
- en: Transcending boundaries and exchanging knowledge with internal and external
    communities. In this circumstance, communities are not only extending across business
    units, but into communities among various clients—as we see developing in advanced
    e-business strategies. Using Internet and Intranets, communities can foster dynamic
    integration of the client, an important participant in competitive advantage.
    However, the expansion of an external community, due to emergent electronics,
    creates yet another need for the implementation of a more dynamic analysis approach
    to ascertaining requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting social and workplace communities through sophisticated networks.
    This issue links well to the entire expansion of issues surrounding organizational
    learning, in particular learning organization formation. It enfolds both the process
    and the social dialectic issues so important to creating well-balanced communities
    of practice that deal with organizational-level and individual development.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating teleworkers and non-teleworkers, including the study of gender and
    cultural differences. The growth of distance workers will most likely increase
    with the maturation of technological connectivity. Video conferencing and improved
    media interaction through expanded broadband will support further developments
    in virtual workplaces. Gender and culture will continue to become important issues
    in the expansion of existing models that are currently limited to specific types
    of workplace issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assisting in computer-mediated communities. Such mediation allows for the management
    of interaction among communities, of who mediates their communications criteria,
    and of who is ultimately responsible for the mediation of issues. Mature communities
    of practice will pursue self-mediation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating “flame” communities. A “flame” is defined as a lengthy, often personally
    insulting, debate in an electronic community, which provides both positive and
    negative consequences. Difference can be linked to strengthening the identification
    of common values within a community, but requires organizational maturation that
    relies more on computerized communication to improve interpersonal and social
    factors to avoid miscommunications (Franco et al. [2000](#CR2)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Storing collective requirements in large-scale libraries and databases. As
    Einstein stated: “Knowledge is experience. Everything else is just information.”
    Repositories of information are not knowledge, and they often inhibit organizations
    from sharing important knowledge building-blocks that affect technical, social,
    managerial, and personal developments that are critical for learning organizations
    (McDermott [2000](#CR7)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ultimately the above communities of practice are forming new social networks,
    which have established the cornerstone of “global connectivity, virtual communities,
    and computer-supported cooperative work” (Wellman et al. [2000](#CR11), p. 179).
    These social networks are then creating new sources of trends, changing the very
    nature of the way organizations deal with and use technology to change how knowledge
    develops and is used via communities of practice. It is not, therefore, that communities
    of practice are new infrastructures or social forces, but rather the difference
    is in the way they communicate. Digital transformation forces new networks of
    communication to occur and the cultural adaptation component allows these communities
    of practice to focus on how they will use new emerging technologies to change
    their business and social lives.
  prefs: []
  type: TYPE_NORMAL
- en: 2.8.1 Model-Driven AI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Model-driven AI captures knowledge and drives decisions via real representations
    and rules. In a model-driven AI, rules govern the definition of things and how
    they relate to others. The rules engine consists of defining relationship of the
    data and its related transaction capabilities. If an animal does not walk on two
    legs, then it has specific restrictions for those that use four legs for example.
    Most model driven AI is restricted where decision trees can determine specific
    rules that lead to certain paths of process. A perfect example of this limited
    type of AI was originally known as “Expert Systems” in which based on rules specific
    application paths were determined. A product that fits Expert Systems is tax returns,
    which are dictated by decision trees off of rule-based decisions, shown below
    in Fig. [2.7](#Fig7).![../images/480347_1_En_2_Chapter/480347_1_En_2_Fig7_HTML.png](../images/480347_1_En_2_Chapter/480347_1_En_2_Fig7_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2.7
  prefs: []
  type: TYPE_NORMAL
- en: Expert system rule-based decisions
  prefs: []
  type: TYPE_NORMAL
- en: Once the individual makes a decision on status, the rules change based on the
    answer. Obviously one can see that the decision trees can become very complex,
    and may change. Indeed, tax programs have changes every year—so depending on the
    year selected, the product would perform differently. So the data (s versus m
    in this case) dictates the execution of the actual programs to be executed each
    time. If there are changes to the rules, per se, like a new tax law, then by changing
    the rule file, one can avoid making coding change.
  prefs: []
  type: TYPE_NORMAL
- en: Rule based inference engine products are part of the AI family, but they do
    not represent all of them. Those that use mathematical models and regression are
    beyond the scope of the analyst.
  prefs: []
  type: TYPE_NORMAL
- en: 2.9 The Analyst in the Digital Transformation Era
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we discuss the digital world and its multitude of effects on how business
    is conducted and how the social world interacts, one must ask how this impacts
    the profession of analysis and design. This section attempts to address the perceived
    evolution of the role.
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The analyst must become more innovative. While the business has the problem
    of keeping up with changes in their markets, the analyst needs to provide more
    solutions. Many of these solutions will not be absolute and likely will have short
    shelf lives. Risk is fundamental. As a result, analysts must truly become “business”
    analysts by exploring new ideas from the outside and continually considering how
    to implement the needs of the company’s consumers. As a result, the business analyst
    will emerge as an idea broker (Robertson and Robertson [2012](#CR10)) by constantly
    pursuing external ideas and transforming them into automated and competitive solutions.
    These ideas will have a failure rate, which means that companies will need to
    produce more applications than they will inevitable implement. This will certainly
    require organizations to spend more on software development.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Quality requirements will be even more complex. In order to keep in equilibrium
    with the S-Curve the balance between quality and production will be a constant
    negotiation. Because applications will have shorter life cycles and the pressure
    to provide competitive solutions, products will need to sense market need and
    respond to them quicker. As a result, fixes and enhancements to applications will
    be become more inherent in the development cycle after products go live in the
    market. Thus, the object paradigm will become even more fundamental to better
    software development because it provides more readily tested reusable applications
    and routines.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dynamic interaction among users and business teams will require the creation
    of multiple layers of communities of practice. Organizations involved in this
    dynamic process must have autonomy and purpose (Narayan [2015](#CR9)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Application analysis, design, and development must be treated and managed as
    a living process, that is, it never ends until the product is obsolete. So products
    must continually develop to maturity.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Organizations should never outsource a new and competitive-advantage technology
    until it reaches commoditization.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2.10 Problems and Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the relationship between digital transformation and analysis and design?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the benefits of obtaining an organization chart prior to conducting
    interviews with users?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does politics affect the role of the analyst and his/her approach to the
    information-gathering function of the interviews?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why does understanding user skills provide the analyst with an advantage during
    interviews
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the six (6) sources of consumer analysis?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '6.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is meant by requirements without users and without input?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '7.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Describe the relationship between technology and changes in the market. How
    does innovation play a pivotal role?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '8.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Describe Porter’s Five Forces Framework.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '9.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compare Porter’s Five Forces with Langer’s Sources of Consumer Analysis.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '10.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the S-Curve?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '11.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain the effect of digital transformation on the S-Curve.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '12.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is an extended S-Curve?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '13.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How has risk factors related to digital transformation?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '14.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How has IoT and wireless affected the internet era?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '15.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a mini-loop in the context of a technology driver?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '16.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain the organization of a community of practice? Why is it important to
    the analyst in the digital age?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '17.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is an Expert System? Explain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '18.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is meant by model-driven AI?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
