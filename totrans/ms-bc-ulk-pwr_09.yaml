- en: Chapter 9\. Other Blockchains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The success of Bitcoin and Ethereum has provided the genesis for many developers
    to begin working on blockchain technology. As previous chapters have shown, the
    decentralized nature of both networks leads to some interesting use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Businesses must secure and protect corporate and user data, and blockchains
    are a novel technical idea for how to do so. Blockchain technology could be put
    to many uses within organizations. However, in practice this often requires rethinking
    the way that Bitcoin, Ethereum, and other open consensus networks operate in order
    to conform with data security, regulatory, and other requirements businesses must
    comply with.
  prefs: []
  type: TYPE_NORMAL
- en: What Are Blockchains Good For?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For open blockchains like Bitcoin and Ethereum, the main use cases thus far
    have been mostly speculative—the coverage of markets, dapps, and DeFi in this
    book have made that clear, we hope. But for businesses and other organizations,
    blockchain has some other interesting uses, and there are many trials occurring
    in this area.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look once again at the basics of what blockchain is useful for besides
    cryptocurrencies and speculation. Here are the core technologies that are put
    together to create what is known as blockchain today:'
  prefs: []
  type: TYPE_NORMAL
- en: Consensus
  prefs: []
  type: TYPE_NORMAL
- en: Validates new records to prevent corruption
  prefs: []
  type: TYPE_NORMAL
- en: Hashing
  prefs: []
  type: TYPE_NORMAL
- en: Solidifies records to retain an audit trail
  prefs: []
  type: TYPE_NORMAL
- en: Encryption
  prefs: []
  type: TYPE_NORMAL
- en: Secures the transfer of digital data
  prefs: []
  type: TYPE_NORMAL
- en: Distribution
  prefs: []
  type: TYPE_NORMAL
- en: Enables sharing of public ledger records
  prefs: []
  type: TYPE_NORMAL
- en: 'What are the specific properties derived from blockchain technology? On a basic
    level, a blockchain does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Self-organizes (consensus)
  prefs: []
  type: TYPE_NORMAL
- en: A blockchain, without prompting, is capable of processing data at a consistent
    increment of time—generally whatever the block generation interval happens to
    be.
  prefs: []
  type: TYPE_NORMAL
- en: Permanently records (hashing)
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain technology makes it very hard for any party to alter records that
    have already been placed into a block.
  prefs: []
  type: TYPE_NORMAL
- en: Transfers assets (encryption)
  prefs: []
  type: TYPE_NORMAL
- en: The first use case for blockchain was to transfer an asset without the involvement
    of a third party. That began with units of cryptocurrency.
  prefs: []
  type: TYPE_NORMAL
- en: Shares data (distribution)
  prefs: []
  type: TYPE_NORMAL
- en: Multiple parties that don’t necessarily trust one another can use blockchain
    to collaborate on various data structures.
  prefs: []
  type: TYPE_NORMAL
- en: Many who are interested in blockchain are looking for reasons to use it to solve
    problems that existing technology hasn’t solved. Open blockchains provided a way
    to make a payment to someone without a third party’s involvement, but the main
    use for them today has become speculation. Unfortunately, speculation is not a
    use case that’s relevant or attractive to organizations with technology issues.
  prefs: []
  type: TYPE_NORMAL
- en: So what are some use cases for businesses? Consider databases. Securing and
    sharing databases is a challenge for many organizations, and it has been made
    even more complex by the advent of technologies like cloud and mobile, which open
    up new security vulnerabilities. Blockchain could finally provide a way for organizations
    to coordinate information that needs to be secured yet shared by multiple parties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Companies can ask questions like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Is blockchain a transactional mechanism counterparties can agree on?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can parties agree on what kind of data is to be written using blockchain?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can problems be solved with this technology?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The answer is definitely yes in each case.
  prefs: []
  type: TYPE_NORMAL
- en: Databases and Ledgers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A database is a structured set of information stored inside a computer system.
    Databases are key to storing information, and can often be accessed in several
    different ways depending on the data’s use. *Database management systems* (DBMSs)
    are interfaces end users can use to categorize and retrieve data. These users
    are often critical components of an organization, working in areas such as communications,
    payroll, and human resources, among others. The most popular databases today are
    *relational* databases, which use tables to arrange information. The data is organized
    in such a way that it does not repeat across columns.
  prefs: []
  type: TYPE_NORMAL
- en: '*Replication systems* are used with databases to make them distributed. Replication
    involves storing data in multiple places in a way that allows it to be easily
    updated or synchronized. This increases the availability of the data. Database
    systems must balance high availability with efficiency, and replication also allows
    users to work with various datasets in parallel. Replication systems must continuously
    work to update data in order to make sure everyone is working on the same set
    of information. There are various replication models that keep data up-to-date.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Ledger* is a term used to describe a record-keeping system. The term *permissionless
    ledger* is sometimes used to describe cryptocurrency-based blockchains. This includes
    Bitcoin, Ethereum, various forks, and most altcoins. These networks are called
    permissionless because anyone can join in and participate; there is no central
    authority that grants or denies permission.'
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain in the permissionless world is a distributed computing system with
    accounts and payments built in. However, some organizations don’t particularly
    see the benefit of this. Permissionless systems need accounts, payments, and cryptocurrencies
    to properly incentivize users, but that may not necessarily be the case for *permissioned*
    ledgers. In the permissioned world, providing infrastructure for payments and
    accounts is optional.
  prefs: []
  type: TYPE_NORMAL
- en: '*Distributed ledger technology* (DLT) is enterprise terminology that describes
    a more blockchain-type ledger database. Database structures generally follow specific
    schemas that allow developers to read, write, and query them. DLT brings a new
    schema to database infrastructure, enabling reading and querying to occur in real
    time (writing in a consensus-based system is not always done in real time, and
    akin to following a clock).'
  prefs: []
  type: TYPE_NORMAL
- en: Databases are centralized portals. In organizations, an administrator usually
    controls access to the entire system. Using a ledger system can allow multiple
    parties to access information without requiring one single gatekeeper.
  prefs: []
  type: TYPE_NORMAL
- en: There’s nothing wrong with centralized databases. However, blockchain technology
    enables the sharing of information through consensus incentives instead of centralized
    rent-seeking (e.g., targeted advertising on social networks or taking a fee like
    online marketplaces do).
  prefs: []
  type: TYPE_NORMAL
- en: Decentralization Versus Centralization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Early cryptocurrency proponents embraced decentralization as a core part of
    the technology. However, many other blockchain platforms—particularly those being
    developed for organizations—are much more centralized. Let’s take a look at some
    of the differences.
  prefs: []
  type: TYPE_NORMAL
- en: Participants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In open blockchains like Bitcoin, anyone with mining equipment can join the
    network and begin hashing. With private blockchains, such as for business use,
    there is a need to control who participates. In fact, centralized control is a
    key component that makes the system work. “Composition is more important than
    consensus” is an axiom used to express this. While having a way to agree upon
    transactions or data that is published in a block is important, it’s more important
    to ensure that only authorized participants are involved. This is a big difference
    between decentralized and centralized blockchains.
  prefs: []
  type: TYPE_NORMAL
- en: Key Properties of Distributed Verifiable Ledgers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ben Laurie, founder of the Apache Foundation and a cryptographer working at
    Google Research, has laid out a [Framework for Distributed Verifiable Ledgers](https://oreil.ly/5Kta5)
    that outlines characteristics that are desirable in blockchains that are not of
    the open permissionless variety.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re calling these *other blockchains* in this chapter because there is a
    good amount of variety between the different implementations. However, in all
    these systems it is important to consider the following aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: Admission control
  prefs: []
  type: TYPE_NORMAL
- en: There must be some definition of what is permitted in the ledger, and how it
    should be formatted. Admission control is common in IT systems; it is a key element
    in system security.
  prefs: []
  type: TYPE_NORMAL
- en: Consensus
  prefs: []
  type: TYPE_NORMAL
- en: Consensus means agreeing on the validity of information published on a chain
    or ledger. This could be achieved via proof-of-work, majority rule, union, or
    some other method. Bitcoin and Ethereum use the longest chain rule to resolve
    forks.
  prefs: []
  type: TYPE_NORMAL
- en: Verification
  prefs: []
  type: TYPE_NORMAL
- en: Verification ensures that behavior on the network is correct and as intended.
    Admission control, consensus, and ledger reviews—some method of examination—are
    all components of this.
  prefs: []
  type: TYPE_NORMAL
- en: Enforcement
  prefs: []
  type: TYPE_NORMAL
- en: Some form of enforcement is required to keep order. Blockchains such as Bitcoin
    provide enforcement by adding checkpoints corresponding to certain blocks that
    everyone on the network agrees were on the longest chain. At each fork, the new
    “longest chain” must contain all these checkpoints.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum-Based Privacy Implementations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Public blockchains and cryptocurrency networks don’t make good implementations
    for businesses. This is because many organizations need to keep control of their
    information for competitive reasons, compliance, or other factors. However, blockchain
    technology potentially has many uses if the privacy concerns can be worked out.
    One option some enterprises have pursued is to fork the Ethereum blockchain and
    create a custom implementation including the privacy features they require.
  prefs: []
  type: TYPE_NORMAL
- en: Nightfall
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Nightfall](https://oreil.ly/FSkNE) is an implementation of Ethereum by the
    accounting firm EY. It adds privacy features to the network’s smart contract technology,
    enabling ERC-20 and ERC-721 tokens to be transacted on the Blockchain privately.
    Nightfall accomplishes this by using zk-SNARKs, generating proof via ZoKrates.
    This provides Nightfall with readable proofs that come from computation. There
    is a Java wrapper for ZoKrates functions.'
  prefs: []
  type: TYPE_NORMAL
- en: Quorum
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Developed by investment bank JPMorgan, [Quorum](https://oreil.ly/GKAUV) is an
    Ethereum-based blockchain that supports private transactions and private contracts.
    It’s compatible with development tools that Ethereum engineers are familiar with.
    Quorum uses Zether, which is an encrypted value tracking system. It “attaches”
    to ERC-20 contracts, creating Zether accounts that are private. This is done by
    using ElGamal ciphertext to encrypt each account balance under a public key.
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise Implementations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are also groups working on more specific proprietary blockchains. Many
    of these groups started with Ethereum and then decided to build their own solution
    from the ground up for specific use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Hyperledger](https://www.hyperledger.org) is an open source platform for blockchain
    development hosted by the Linux Foundation. The most well-known Hyperledger project
    is [Fabric](https://oreil.ly/BPLlZ), a ledger technology that uses the programming
    language Go. There are other implementations, including a C++ implementation called
    Iroha and Sawtooth, which is multilanguage. Hyperledger Fabric offers support
    for smart contracts, transactions, and consensus, similar to Ethereum. Many enterprise
    blockchain projects, including those by IBM and Oracle, are based on this framework.'
  prefs: []
  type: TYPE_NORMAL
- en: Corda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Developed by the consortium R3, [Corda](https://github.com/corda/corda) focuses
    on institutions seeking privacy. The platform is based on the Java Virtual Machine
    (JVM), familiar to the existing base of developers in the finance industry. There
    is no global blockchain or representation of state. Instead, Corda uses a ledger
    system that replicates to relational databases for easy querying. Its smart contracts
    are basic legal terms instead of code.
  prefs: []
  type: TYPE_NORMAL
- en: How Corda works
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Corda is designed to make transactions between businesses more trustworthy and
    efficient, as illustrated in [Figure 9-1](#corda_enables_collaboration_while_prese).
    Without Corda, the databases of the two companies are siloed. With Corda, the
    companies can safely collaborate to manage transactions.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mabc_0901.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-1\. Corda enables collaboration while preserving privacy
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Usually, when two separate entities perform transactions they each maintain
    a ledger, and at intervals they reconcile them. For example, a toy manufacturer
    receives constant shipments of parts from its supplier. Each company keeps track
    of those shipments using its own software and processes. Every month the two companies
    reconcile their ledgers when the supplier sends an invoice, and the manufacturer
    checks the invoice to confirm that the numbers are the same in its system.
  prefs: []
  type: TYPE_NORMAL
- en: Every business has multiple relationships like this. The more partnerships a
    company has, the more effort and resources are required to keep track of them.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two main attributes of public blockchains that businesses can benefit
    from:'
  prefs: []
  type: TYPE_NORMAL
- en: Transaction immutability
  prefs: []
  type: TYPE_NORMAL
- en: Once a transaction has been added to the ledger, it cannot be modified or removed.
  prefs: []
  type: TYPE_NORMAL
- en: Peer validation
  prefs: []
  type: TYPE_NORMAL
- en: Before a transaction can be added to the ledger, other network participants
    check whether the transaction is valid or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there are also several attributes that are not attractive to businesses:'
  prefs: []
  type: TYPE_NORMAL
- en: Transaction transparency
  prefs: []
  type: TYPE_NORMAL
- en: When businesses complete a transaction, they may not want everyone else in the
    network to know about it. Only the participants involved in the transaction should
    know the details.
  prefs: []
  type: TYPE_NORMAL
- en: Limited scalability
  prefs: []
  type: TYPE_NORMAL
- en: Centralized databases can process millions of transactions per second, whereas
    public blockchains at most can process a few hundred per second.
  prefs: []
  type: TYPE_NORMAL
- en: New programming languages and concepts
  prefs: []
  type: TYPE_NORMAL
- en: Dapps that run on top of public blockchains are mostly written in new languages,
    like Solidity and Vyper, and require developers to learn new skills.
  prefs: []
  type: TYPE_NORMAL
- en: Permissionless
  prefs: []
  type: TYPE_NORMAL
- en: Public blockchains allow anyone to participate in the network, but businesses
    want to control who can transact with them.
  prefs: []
  type: TYPE_NORMAL
- en: Hidden identities
  prefs: []
  type: TYPE_NORMAL
- en: Participants on public blockchains are identified by their blockchain address,
    which can make many participants essentially pseudo-anonymous. Businesses want
    to know who they are transacting with.
  prefs: []
  type: TYPE_NORMAL
- en: The Corda protocol was built to satisfy all those business requirements.
  prefs: []
  type: TYPE_NORMAL
- en: The Corda network
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A Corda network is a peer-to-peer network of nodes. Each node represents a legal
    entity, and each runs an instance of Corda with one or more Corda applications.
    [Figure 9-2](#example_of_a_corda_network) illustrates.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mabc_0902.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-2\. Example of a Corda network
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Anyone can start their own Corda network, but every node in the network must
    receive permission by the network operator to join, and must also be identified
    to all participants in the network. Every node in the network communicates directly
    and in private with every other node in the network through Transport Layer Security
    (TLS).
  prefs: []
  type: TYPE_NORMAL
- en: Corda ledger
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each node in the network hosts its own centralized database, and all transactions
    are performed peer-to-peer. Two or more nodes can perform a transaction. After
    multiple nodes complete a transaction, the nodes each store the transaction in
    their own database. Only the nodes involved in the transaction or nodes that are
    given access have visibility into the transaction, as illustrated in [Figure 9-3](#example_of_a_corda_network_showing_whic).
    Transactions are tamper-resistant and include digital signatures by some of the
    parties involved.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mabc_0903.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-3\. Example of a Corda network showing which nodes have visibility
    into transactions
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In [Figure 9-3](#example_of_a_corda_network_showing_whic), Bob has performed
    transactions #1 and #7 with Alice, and performed transactions #5 and #6 with Carl.
    Bob can see all four transactions, but Alice can only see transactions #1 and
    #7.'
  prefs: []
  type: TYPE_NORMAL
- en: Corda consensus
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order for a transaction to be included on the ledger, it must pass the following
    two checks:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Validity consensus*. All nodes involved check to make sure the following are
    true:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All signatures that are required in the transaction are valid.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The transaction satisfies all of the constraints that are defined in the associated
    smart contracts.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Uniqueness consensus*. Corda follows a UTXO accounting model, similar to Bitcoin.
    Uniqueness checks prevent a double spend, confirming that inputs included in the
    transaction have not already been spent.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Corda language
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The skills required by engineers to build a Corda solution for enterprise are
    well known and widely used in the tech industry, making it easy to find and train
    qualified engineers. Corda dapps are written in Java and can work with enterprise
    databases Azure SQL, SQL Server, Oracle, and PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: DAML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Developed by a company called Digital Asset, [DAML](https://github.com/digital-asset/daml)
    is a blockchain-agnostic smart contract language for distributed applications.
    It supports all of the previously mentioned blockchain platforms. Developers work
    on DAML contracts on a layer separate from its blockchain. The focus on smart
    contract development depends on the business use cases. It is thus easier to shift
    ledgers or storage models after a contract has been created.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain as a Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The concept of *Blockchain as a Service* (BaaS), where vendors provide easy-to-implement
    solutions that can be customized, is likely to grow as use cases for the technology
    increase. Similar to Software as a Service (SaaS) and cloud offerings, these blockchain
    products provide elements such as centralized management of users and distribution
    of nodes. Here are a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Quantum Ledger
  prefs: []
  type: TYPE_NORMAL
- en: Part of Amazon Web Services, the Quantum Ledger Database (QLDB) is a ledger
    that is secured by cryptography and uses the Ethereum and Hyperledger Fabric frameworks.
    However, the system is centralized, because node-based distributed blockchains
    are harder to set up. Its strong point is that it offers users the ability to
    set up an immutable and cryptographically secure ledger.
  prefs: []
  type: TYPE_NORMAL
- en: Azure
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft’s Azure cloud platform offers a distributed model, allowing developers
    the ability to deploy different blockchains like Quorum and Corda. Because of
    the blockchains used, Azure supports smart contract development. Developers can
    also set up validators inside their blockchain implementations. The Azure framework
    makes it easy to export blockchain information to databases that allow for more
    complex querying.
  prefs: []
  type: TYPE_NORMAL
- en: VmWare
  prefs: []
  type: TYPE_NORMAL
- en: With support for the EVM, DAML, and Hyperledger, VmWare Blockchain is a multiblockchain
    platform. Developers are also able to use VmWare’s cloud technology to set up
    various types of infrastructure implementations, including the option of hybrid
    cloud capabilities to increase security and privacy. It also uses a Byzantine
    fault-tolerant consensus engine to provide features of decentralization.
  prefs: []
  type: TYPE_NORMAL
- en: Oracle
  prefs: []
  type: TYPE_NORMAL
- en: Oracle’s Blockchain Platform is built on Hyperledger Fabric and supports multicloud
    implementations—hybrid, on-premise, or a mix of the two for greater flexibility.
    The purpose is to be able to configure specific environments depending on regulatory
    requirements. Oracle also supports tamper-resistant blockchain tables within its
    existing enterprise database offerings to provide fraud protection; examples include
    chain of custody, escrow, and audit log capabilities within databases.
  prefs: []
  type: TYPE_NORMAL
- en: IBM
  prefs: []
  type: TYPE_NORMAL
- en: IBM provides a toolset that offers support for Hyperledger Fabric as the core
    technology. The toolset provides Visual Studio Code extensions for enterprise
    development, with smart contract programming capabilities available in Node.js,
    Go, Java, and Solidity, among others. Hosting options are flexible using IBM Cloud
    on-premise, remote, or hybrid offerings, with deployment via Red Hat’s OpenShift
    container platform, which is managed with Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: SAP
  prefs: []
  type: TYPE_NORMAL
- en: The company supports Hyperledger Fabric and Ethereum mainnet with deployment
    and services provided via its Cloud Platform. SAP Blockchain Business Services
    protects documents and data from tampering. SAP also allows external blockchains
    and nodes to plug into its various systems, including SAP “landscapes,” which
    are its various server architectures, and SAP HANA, its custom data platform.
  prefs: []
  type: TYPE_NORMAL
- en: Banking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Large financial institutions and central banks have been looking at blockchain
    implementations in a search for ways to circumvent what may be outdated, inefficient,
    or otherwise expensive processes. Not all of these fully work yet, but experimentation
    in this sector is a sign of blockchain progress.
  prefs: []
  type: TYPE_NORMAL
- en: The Royal Mint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Royal Mint, which produces coins in the United Kingdom, partnered with the
    Chicago Mercantile Exchange (CME) to create a blockchain-based asset tied to gold.
    The cryptocurrency company BitGo was brought in to provide wallet and KYC technology
    for the project. However, the effort was shelved in late 2018 after CME dropped
    out, leaving questions about where the asset would be traded.
  prefs: []
  type: TYPE_NORMAL
- en: Banque de France
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The central bank of France was early in exploring ways to utilize blockchain.
    In 2016, it ran a trial based on digital identity for euro payments. The bank
    has been calling for global regulations within the blockchain industry. Most recently,
    it has published job postings looking for blockchain experts familiar with both
    crypto-economics and the Hyperledger, Corda, and Quorum platforms.
  prefs: []
  type: TYPE_NORMAL
- en: China
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In 2019, president Xi Jinping announced an acceleration of development in blockchain
    for the country. China is moving toward central bank cryptocurrency, and a digital
    yuan is expected to use blockchain tech. The plan is for the system to be two-tiered,
    offering some degree of features similar to cash as well as an offline feature
    for mobile transactions.
  prefs: []
  type: TYPE_NORMAL
- en: US Federal Reserve
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The United States’ central bank has been observing cryptocurrencies over the
    years. In 2019, the Boston Federal Reserve published a [paper](https://oreil.ly/QW7ut)
    describing Ethereum- and Hyperledger-based blockchain tests that it had run ([Figure 9-4](#design_for_the_boston_fed_testem_dashin)).
    It used wallets representing various banks and smart contracts to reconcile payments
    made to the Federal Reserve, which the Boston branch is in charge of.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mabc_0904.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-4\. Design for the Boston Fed test—in Hyperledger, “chaincode” is a
    smart contract
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: JPMorgan
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Investment bank JPMorgan has developed Quorum as its own blockchain based on
    Ethereum. It has also created its own stablecoin, JPC Coin. The cryptocurrency
    will be used as a method of making cross-border payments, which can be expensive
    and inefficient, via the Quorum blockchain. Users will be able to deposit fiat
    with the bank, be issued JPM Coin, and redeem it for fiat payment elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: Permissioned Ledger Uses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The use cases for permissioned systems are often very different from those of
    open blockchains. As we’ve pointed out, open blockchains can be good for speculation,
    tokenization, and storing digital value, but enterprises have other requirements.
    These include speed, privacy, and development capabilities. These requirements
    have led to the development of an array of new use cases for blockchain, after
    extensive testing of permissioned platforms.
  prefs: []
  type: TYPE_NORMAL
- en: IT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Security is an ever-present component of enterprise IT systems. Digital Asset’s
    DAML SDK supports editing in Visual Studio, which is popular in many companies.
    Smart contracts tied to ledgers can help verify the validity of data critical
    for systems. This arrangement can include network management, database monitoring,
    and service desks. An example could be to use a contract to validate a software
    package or a Docker image.
  prefs: []
  type: TYPE_NORMAL
- en: Banking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned earlier, from securitization to settlement to rethinking fiat money,
    banks and central banks alike have increasingly been looking at blockchain technology.
    Banks must operate with a number of other organizations, and blockchain could
    serve as a trustless intermediary that disparate groups can all agree upon. One
    example that has gained traction and exemplifies this is *digital bonds*, which
    the bank Santander has issued. Custodians, issuers, and investors use tokens in
    this process, illustrated in [Figure 9-5](#how_a_blockchain-issued_bond_by_santand).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mabc_0905.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-5\. How a blockchain-issued bond by Santander is devised
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Central Bank Digital Currencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Central bank digital currencies (CBDCs) are digital forms of a country’s fiat
    currency. Instead of requiring intermediaries or third parties like banks, CBDCs
    could enable real-time payments directly between parties. While CBDCs may use
    existing databases for implementation, there is consideration of deploying blockchain
    or distributed ledger technologies. China, the US, Sweden, and the United Kingdom
    are among the countries considering or testing CDBC concepts.
  prefs: []
  type: TYPE_NORMAL
- en: Legal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The legal industry is by its nature adversarial. It involves opposing parties
    making claims while a neutral judiciary makes decisions. Blockchain, as an immutable
    technical innovation, can help to verify information during legal proceedings.
    In addition, technology to automate a number of legal processes is advancing;
    using concepts from smart contract development could be helpful. The law firm
    BakerHostetler, for example, is [using smart contracts for freight agreements](https://oreil.ly/_aeAI).
  prefs: []
  type: TYPE_NORMAL
- en: Gaming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Anyone who has played video games understands the value of items like virtual
    weapons, power-ups, or clothing. In-game these items often have tremendous value,
    but they are normally locked into one particular game or ecosystem. The concept
    of items connected to a digital asset to signify uniqueness is gaining popularity,
    thanks in part to the Ethereum-based CryptoKitties.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain technology can also be used to combat cheating. On-chain chess, illustrated
    in [Figure 9-6](#a_schematic_for_technical_university_of), is a project conducted
    by the Technical University of Berlin using Ethereum smart contracts. Players
    knew the game could not be cheated because of the public contract code.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mabc_0906.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-6\. A schematic for Technical University of Berlin’s on-chain chess
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Health Care
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The health-care industry generates a lot of data, and much of that data is scattered
    around. Patients go to general practitioners, specialists, hospitals, outpatient
    care clinics, and other locations for health needs. All of these visits generate
    data. Regulations are coming into place that will require that health-care providers
    enable patients to access all of their digital data. Google is working on something
    called a *verifiable data audit*, a ledger-based system that will cryptographically
    verify data records.
  prefs: []
  type: TYPE_NORMAL
- en: Internet of Things
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Billions of smart devices, from power strips to light bulbs, can run more efficiently
    when cooperating with a larger network. To date, businesses are still struggling
    with ways to pay for all of these devices to connect into the Internet of Things
    (IoT) and provide verifiable information. Blockchain, with accounts and even payments
    in a controlled infrastructure, may be part of the solution. IBM’s artificial
    intelligence platform Watson interacts with IoT devices and securely stores data
    with the IBM Blockchain Platform, which is based on Hyperledger Fabric.
  prefs: []
  type: TYPE_NORMAL
- en: Payments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is a role for blockchain-based payments, but open blockchains have struggled
    to compete with the likes of existing networks such as Visa.  Still, many still
    see an opportunity to use blockchain for specific payments use cases, such as
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Corporate payments
  prefs: []
  type: TYPE_NORMAL
- en: The administrative costs involved when large organizations make payments are
    immense. An example would be ensuring that a check for an invoice matches a purchase
    order as stipulated in a contract. Also, making payments to various countries
    is complex. Some processes involved could be automated and verified with blockchain
    technology. Visa started working on this problem in 2016, and it launched a service
    in 2019 called B2B Connect that uses Hyperledger.
  prefs: []
  type: TYPE_NORMAL
- en: Interbank payments
  prefs: []
  type: TYPE_NORMAL
- en: Large banks also have problems making cross-border payments. Some of these problems
    involve a lack of information about a payment when sending it to banks around
    the world. JPMorgan, with its JPM Coin, has developed something called the Interbank
    Information Network (IIN). This is a Quorum-based system that sends along interbank
    payment information. IIN now has more than 320 members using the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Person-to-person payments
  prefs: []
  type: TYPE_NORMAL
- en: There’s a lot of interest in the idea of using blockchain ledgers to make payments
    cheaper and faster, which has been problematic on public blockchains. In 2019,
    PayPal invested in a company called Cambridge Blockchain for its identity technology,
    which has also been a challenge. Facebook, which possesses lots of information
    about its users, may have already solved that problem, as outlined in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Libra
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most enterprise blockchain experiments are focused on behind-the-scenes business
    processes. However, there is an opportunity for companies to use cryptocurrency
    and blockchain fundamentals to offer new features to users and customers. It’s
    early in this game, but consumer-focused companies like Facebook want to bring
    blockchain to everyone, particularly in terms of making payments on the internet.
    *Libra* is the name of the effort being spearheaded by the company.
  prefs: []
  type: TYPE_NORMAL
- en: The Libra Association
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With its billions of users, Facebook has been exploring blockchain implementations
    for some time. The company’s Libra Association is a consortium of organizations
    that have come together to implement an entirely new blockchain system called
    Libra. The following are some of the companies involved, and their roles:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Payments*: PayU'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Technology*: Facebook, FarFetch, Lyft, Spotify, Uber'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Telecom*: Iliad'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Blockchain*: Anchorage, BisonTrails, Coinbase, Xapo'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Venture capital*: Andreessen Horowitz, Breakthrough Initiatives, Union Square
    Ventures, Ribbit Capital, Thrive Capital'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Nonprofits*: Creative Destruction Lab, Kiva, Mercy Corps, Women’s World Banking'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Borrowing from Existing Blockchains
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Libra Association intends to create an entirely new payments system on the
    internet by using a proof-of-stake consensus Byzantine fault-tolerant algorithm
    developed by VMware, known as HotStuff. The association’s members will be the
    validators of the system.
  prefs: []
  type: TYPE_NORMAL
- en: HotStuff uses a lead validator. It accepts transactions from the clients and
    uses a voting mechanism for validation. It is fault tolerant because the other
    validators can take the lead’s place in case of error or downtime. Byzantine fault
    tolerance is used in other blockchain systems, most notably on some smaller open
    networks utilizing proof-of-stake. [Figure 9-7](#consensus_mechanism_for_libra)
    illustrates Libra’s consensus mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mabc_0907.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-7\. Consensus mechanism for Libra
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The Libra cryptocurrency is expected to hold a stable value, backed by a basket
    of assets that will include fiat currencies and treasuries. Unlike most stablecoins,
    it does not plan to peg to the US dollar and will instead exist as a digital currency
    with its own valuation against fiat.
  prefs: []
  type: TYPE_NORMAL
- en: Libra is expected to support the use of smart contracts by third-party developers
    to create applications. This will be accomplished through a new programming language
    called Move. This language will allow programmers to create contracts and even
    update the state of the Libra blockchain. Move is being labeled as a language
    “with programmable resources.” With vetted validators and specific resource types,
    Libra’s smart contracts will likely be more limited in scope than those of open
    blockchains such as Ethereum.
  prefs: []
  type: TYPE_NORMAL
- en: Novi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Facebook itself will develop its own wallet, known as Novi, to facilitate transactions.
    The impact of the Novi wallet could be large given Facebook’s billions of users
    across its many platforms, including Messenger, Instagram, WhatsApp, and Oculus
    VR.
  prefs: []
  type: TYPE_NORMAL
- en: Libra will also support a number of third-party wallet implementations. The
    network itself is expected to be open, with wallets being the gateways for financial
    services. KYC/AML will need to be a component of Novi, and this is something Facebook
    can easily implement into its products since it already has a trove of user data
    at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How the Libra Protocol Works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Libra’s network contains two types of nodes: *validator nodes* and *full nodes*.
    Validator nodes are permissioned and are made up of organizations in the Libra
    Association. These nodes manage governance of the network and process Libra transactions
    using the LBFT consensus protocol.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Full nodes can be run by anyone and serve two purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: They act as real-time broadcasters of the current state of the Libra blockchain.
    Full nodes maintain a full copy of the blockchain and answer client requests to
    read from the blockchain.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They revalidate transactions that have been processed by validators.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Full nodes make Libra more scalable by removing the burden of validator nodes
    servicing read requests. This also protects validator nodes from potential DDoS
    attacks.
  prefs: []
  type: TYPE_NORMAL
- en: When a client application—for example, a Libra mobile wallet—wants to interact
    with the network, it reads data from full nodes and sends transaction requests
    to validator nodes.
  prefs: []
  type: TYPE_NORMAL
- en: The LBFT protocol is a set of rules that define how transactions and governance
    are performed on the Libra blockchain. Even though all validator nodes on the
    network are identified and trust each other, there is still a risk that at some
    point one or many of them could become a bad actor and try to include invalid
    transactions on the network. One example is if hackers compromise a couple of
    validator nodes. The hackers could then try to process transactions that send
    funds from other accounts to their own.
  prefs: []
  type: TYPE_NORMAL
- en: Blocks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each block of transactions added to the blockchain in LBFT is proposed by the
    leader of a round. Validators rotate as the leader, each taking a turn. Unlike
    in proof-of-work consensus, no energy or time is spent deciding which node gets
    the right to generate a block. This makes LBFT fast and scalable. Libra is anticipating
    a speed of one thousand transactions per second—compare that to Bitcoin’s seven
    transactions per second.
  prefs: []
  type: TYPE_NORMAL
- en: After a leader proposes a new block of transactions, all network validators
    vote on whether the block is valid or not. If more than 2*f* + 1 validators agree
    that the block is valid, a Quorum Certificate is generated. This Quorum Certificate
    is attached to the next block, cryptographically connecting every block to its
    parent block.
  prefs: []
  type: TYPE_NORMAL
- en: A block can only be committed to the Libra blockchain when it has three consecutive
    child blocks that all have Quorum Certificates as well. Until this point, the
    block could possibly become an orphaned block. [Figure 9-8](#block_hashonezerozero_is_not_committed)
    illustrates.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mabc_0908.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-8\. Block #100 is not committed to the blockchain until block #103
    is proposed to the network, provided that block includes the Quorum Certificate
    for block #102'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Transactions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Transactions in Libra are structured in a similar fashion to Ethereum. Libra
    follows an account model, as opposed to a UTXO model like Bitcoin, so there are
    no inputs or outputs. The structure of a Libra transaction is illustrated in [Table 9-1](#structure_of_a_libra_transaction).
  prefs: []
  type: TYPE_NORMAL
- en: Table 9-1\. Structure of a Libra transaction
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Sender address | The account address of the sender of the transaction. |'
  prefs: []
  type: TYPE_TB
- en: '| Sender public key | The public key that corresponds to the private key used
    to sign the transaction. |'
  prefs: []
  type: TYPE_TB
- en: '| Program | The program is comprised of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The bytecode from the Move transaction script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An optional list of inputs to the script. For a peer-to-peer transaction, the
    inputs contain information about the recipient and the amount transferred to the
    recipient.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An optional list of Move bytecode modules to publish.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Gas price (in microlibra/gas units) | The amount the sender is willing to
    pay per unit of [gas](https://oreil.ly/1RktS) to execute the transaction. Gas
    is a way to pay for computation and storage. A gas unit is an abstract measurement
    of computation with no inherent real-world value. 1 microlibra = 0.000001 LBR
    (10^−6). |'
  prefs: []
  type: TYPE_TB
- en: '| Maximum gas amount | The maximum units of gas the transaction is allowed
    to consume. |'
  prefs: []
  type: TYPE_TB
- en: '| Sequence number | An unsigned integer that must be equal to the sequence
    number stored under the sender’s account. |'
  prefs: []
  type: TYPE_TB
- en: '| Expiration time | The time after which the transaction ceases to be valid.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Signature | The digital signature of the sender. |'
  prefs: []
  type: TYPE_TB
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some businesses want totally private blockchains, and for them an R3 Corda implementation
    might be useful. Some want a usable network for the general public. That’s the
    kind of role the Libra project is trying to fill.
  prefs: []
  type: TYPE_NORMAL
- en: No one knows yet which service will become the Amazon of the blockchain business.
    AWS is so easy to deploy and develop on that, while it does have its competitors,
    it reigns supreme in cloud computing. No one reigns supreme in these other blockchain
    systems—at least, not yet.
  prefs: []
  type: TYPE_NORMAL
- en: Open networks like Bitcoin and Ethereum created the world of blockchain. Now
    businesses have taken blockchain concepts and are using them to improve many aspects
    of their operations.
  prefs: []
  type: TYPE_NORMAL
- en: This is just the beginning. There will be continued experimentation in the future—the
    subject of the next chapter.
  prefs: []
  type: TYPE_NORMAL
