- en: 3 Distributed ledgers and internet of things
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integration of distributed ledger technology and the Internet of Things is fundamental
    for many applications and use cases beyond decentralized finance (DeFi) applications.
    The application domains include, among others, smart cities, smart robotics, smart
    industry and logistics, mobility, and energy or waste management. Some of these
    application domains are discussed in more detail in Section 4.
  prefs: []
  type: TYPE_NORMAL
- en: A basic cloud-centric IoT architecture is depicted in [Fig. 3.1](#b_9783110681130-003_fig_001).
    The perception layer comprises sensors, actuators, and embedded devices that are
    integrated into things. The perception layer interacts with the real world, enables
    basic signal and data processing, and assures some form of connectivity (personal-area
    with Bluetooth or wired connections, local-area with WiFi, or wide-area with,
    e.g., Narrow-band IoT (NB-IoT)). The embedded device can thus attach directly
    or via a communication gateway to the communication layer, which is a public (Internet)
    or private IP network. The platform and the application layer are two sets of
    cloud-based services that enable the collection, storage, data processing, and
    the development of applications based on IoT data. Integration of IoT and DLT
    has long been seen as a remedy for the fundamental challenges of IoT architectures.
    The challenges, such as centralized ecosystems, cost of the connectivity, disrupted
    business models, security and trust, and lack of functional values, need to be
    addressed to continue with successful practical IoT deployments.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../graphic/converted/b_9783110681130-003_fig_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig. 3.1: Basic IoT architecture.'
  prefs: []
  type: TYPE_NORMAL
- en: The great expectation imposed on the distributed ledger technology originated
    from the distributed and decentralized nature of DLT. For example, a decentralized
    approach to IoT networking was expected to solve many of the issues mentioned
    above. “*Blockchain technology is the missing link to cope with some of the future
    challenges in the IoT*” [[46](9783110681123_008192.xhtml#b_9783110681130-005_ref_046)],
    which can reduce costs, build trust, accelerate transactions, provide scalability,
    remove single points of failure, keep an immutable record of the history of smart
    devices, enable machine-to-machine transactions, micropayments, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, many of these expectations were based on a simplified understanding
    of the technological and business-related scope of distributed ledger technology
    and unrealistic presumptions. For example, distributed ledger technology does
    not solve scalability problems of IoT. On the contrary, all relevant DLT deployments
    struggle to meet even a fraction of the capabilities (in terms of transactions
    per second and latency) of the current cloud-based IoT backend platforms. However,
    if the real benefits of the distributed ledger technology are understood, IoT
    DApps can be properly designed and carved, and the technology can be applied to
    situations where it can disrupt business operations. DLT opens vast opportunities
    for innovation and paradigm shifts in IoT [[47](9783110681123_008192.xhtml#b_9783110681130-005_ref_047)].
    Currently, we have production-grade systems capable of reliable IoT data collection
    or secure processing of tens of thousands of financial transactions. In most cases,
    the DLT struggles to meet the performance of centralized systems and is far from
    superseding them. Similarly, a single point of failure of a cloud application
    is merely a consequence of poor design and implementation. Cloud-based architectures
    leveraged by content distribution networks, platform virtualization, and application
    balancing and scaling can provide extremely reliable services. In 5 G networks,
    mechanisms for new service architectures are foreseen. A combination of cloud,
    edge, and mobile computing enables distributed (but not decentralized!) service
    deployment. Along with network-intrinsic resource assurance through network slices,
    they can support energy-efficient, massive, or time-sensitive IoT applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'We see a meaningful role for DLT in IoT, not in alleviating the known IoT bottlenecks
    but in, predominantly, providing new features such as improved trust, full autonomy
    in device operation and business, seamless M2M transactions, and trusted operation
    through smart contracts, trustworthy DApps, data provenance, and fairness through
    financial incentives. Apart from the autonomous M2M communications via DApps,
    we see two other fundamental IoT and DLT integration concepts: data collection,
    and IoT device authentication, authorization, and (update) management. Both are
    presented in more detail further in this section.'
  prefs: []
  type: TYPE_NORMAL
- en: Distributed ledger technology based IoT applications can be seen as a special
    case of DApps, where some additional requirements and limitations apply due to
    the nature of the IoT systems. These specifics are DL network performance, smart
    contract and end-device security (e.g., device access to the DL accounts), or
    implementation of the off-chain applications in constrained IoT devices. IoT solutions
    frequently impose industry-grade requirements on the underlying DL networks (see
    Section 2.3.2) and on the development and support ecosystems (see Section 2.7).
  prefs: []
  type: TYPE_NORMAL
- en: For the future successful decentralization of IoT, we need the integration of
    DL, IoT, and the underlying communication networks. In the traditional IoT architecture
    ([Fig. 3.1](#b_9783110681130-003_fig_001)), the IoT is considered merely an overlay
    on the communication infrastructure. The recent trends in 4 G already anticipate
    fog-/edge-based approaches, where some of the application and data logic is moved
    from the cloud into or closer to the IoT end-devices. In 5 G architectures, additional
    mechanisms (e.g., slicing) are foreseen to support the QoS or security in such
    a network architecture. Therefore, the next step in integration should be the
    organization and deployment of the appropriate DL network and DApp architecture
    to the fog, edge, and cloud-based communication infrastructure. Unlike DeFi applications,
    many of the IoT-related DApps do not require public or permissionless DL networks.
    This opens possibilities for novel DL network architectures, combining private,
    consortium, and public DL networks (see Section 2.3.1.1) implemented in the network
    edge or overlay services, and integrated by cross-chain swaps (Section 2.3.3.3).
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 Distributed ledgers for IoT security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Distributed ledger technology and blockchains, to a great degree, rely on advanced
    cybersecurity mechanisms and uniquely combine them to assure the trust expected
    from DLT systems. However, DLT does not simply improve all aspects of confidentiality,
    integrity, and availability of DL networks, systems, and applications. It does
    not come without its security risks (Table 3.1).
  prefs: []
  type: TYPE_NORMAL
- en: Confidentiality is not the key security feature that DLT was designed for. Sharing
    a common decentralized ledger among all network participants is essential to build
    decentralized trust. Unless very specific mechanisms and DL network architectures
    are applied, DL data is transparent, and DL network users are at most pseudo-anonymous.
  prefs: []
  type: TYPE_NORMAL
- en: Integrity is a security feature that DLT was invented for. It refers to the
    immutability of transactions, tamper-proof deployment, and execution of smart
    contract code. However, these same features open new privacy and security risks,
    even leading to unprecedented legal or ethical issues in the use of DLT applications
    and systems.
  prefs: []
  type: TYPE_NORMAL
- en: Availability of a system tends to improve if the system is distributed and decentralized.
    Despite no single central point to be attacked in a DL network, DLT systems are
    not immune to denial of service or other attacks that impact availability. The
    attacks target the DL network services, consensus processes, or decentralized
    applications. The denial might affect only selected network nodes or network participants.
    Besides the DL network, there are few decentralized entities in the system that
    are prone to traditional distributed denial of service (DDoS) attacks. These attacks
    limit the availability of, for example, oracles and API servers or off-chain and
    auxiliary services such as crypto exchanges and mining pools.
  prefs: []
  type: TYPE_NORMAL
- en: Various vectors frequently converge onto one attack area. The first objective
    is to gain control over the network, a part of the network, or individual nodes,
    and then exploit this control to manipulate transactions and impact integrity.
    Some of the attack vectors might be extremely hard and costly to execute. In a
    truly decentralized DL network, they might almost be practically infeasible. However,
    in more centralized, private or consensus networks, the risks remain real.
  prefs: []
  type: TYPE_NORMAL
- en: Tab. 3.1:Confidentiality, integrity, and availability aspects of blockchain
    technologies for IoT.
  prefs: []
  type: TYPE_NORMAL
- en: '|  | Aspects |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Confidentiality** |'
  prefs: []
  type: TYPE_TB
- en: Blockchain data is not confidential, by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pseudo anonymity in public networks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private and consortium networks improve confidentiality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zero-knowledge mechanisms for privacy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Integrity** |'
  prefs: []
  type: TYPE_TB
- en: Integrity is where DLT shines.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yet, risks are present. Transaction tampering usually occurs after a node or
    network participant has been denied trusted access to DL network services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The immutability of DLT transactions and smart contracts imposes relevant new
    security and privacy risks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Availability** |'
  prefs: []
  type: TYPE_TB
- en: Distributed nature of DLT increases the availability of the on-chain data and
    services, compared to consolidated solutions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New attack vectors can impair network availability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Despite some security limitations highlighted in this section, the trusted nature
    of distributed ledger technology systems enables further security enhancements
    in IoT systems [[47](9783110681123_008192.xhtml#b_9783110681130-005_ref_047)].
    These range from data management and integrity to confidentiality and PKI management,
    with a decentralized backend and decentralized methods for authentication and
    authorization of IoT devices and users.
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.1 Confidentiality and privacy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A shared ledger is a common truth that assures trust in the distributed ledger
    technology system. In public blockchain networks, access to the ledger is not
    at all limited. Anyone can access, read, and redistribute the content of the ledger,
    including all transactions. Everyone can analyze every detail of each past transaction
    in a blockchain network. In public networks, users do not have to present any
    personal identity to create a new blockchain account. This keeps them private
    as persons, but the account activities, including the cryptocurrency balance,
    are public. Public DL networks are, therefore, pseudo-anonymous. Frequently, for
    regulatory reasons, personal identity must be verified when users create an account
    in crypto exchanges. This links their personal identity to their public blockchain
    accounts and discards their anonymity and privacy.
  prefs: []
  type: TYPE_NORMAL
- en: In permissioned networks, only the authenticated nodes have access to the ledger.
    Access to the ledger is not public anymore, but is limited to known network participants.
    This is very favorable for business-related blockchain systems, for example, industrial
    IoT, smart grid, etc. Apart from this, there is usually no other leger access
    control. Permissioned networks enhance the privacy of interactions by excluding
    anonymous public, but still do not enable confidentiality and privacy that are
    known in a traditional online application.
  prefs: []
  type: TYPE_NORMAL
- en: User content in transactions (e.g., data filed in an Ethereum transaction) can
    be encrypted. This can be end-to-end encryption, which is not an intrinsic feature
    of the DL network protocols, but implemented in off-chain applications. In this
    case, the blockchain transactions are utilized as a transport mechanism for encrypted
    content and decrypted out-of-chain. This approach enhances the confidentiality
    of user data in transactions but limits the use of user data in smart contracts.
  prefs: []
  type: TYPE_NORMAL
- en: Besides, information about users and usage patterns can be disclosed from blockchain
    transaction traffic too. We can carry out big data analysis of the publicly available
    chain data to reveal important account and DApp usage patterns. These approaches
    are being used to analyze transaction linkability, transaction mixing, crypto
    laundering, and smart contract use, impacting user privacy.
  prefs: []
  type: TYPE_NORMAL
- en: One direction of blockchain research [[48](9783110681123_008192.xhtml#b_9783110681130-005_ref_048)]
    aims to provide zero-knowledge proofs, which reveal nothing about a transaction,
    except that it is valid, to increase privacy in blockchains. Through complex cryptographic
    methods, zero-knowledge proof can prove something is true without having to reveal
    what exactly it is proving. One of the first examples was ZK-SNARK, used in Zcash.
    Apart from zero-knowledge proofs, zero-knowledge methods have been used as a baseline
    to enable privacy preservation in blockchain, including secure multi-party computation,
    commitment schemes, ZK-SNARK, ZK-STARK, ring signatures, and homomorphic hiding.
    ZK-SNARKs require a trusted party or parties to set up the zero-knowledge proof
    system, initially. These trusted parties can violate the privacy of the entire
    system. ZK-STARKs improve upon this technology by removing the need for a trusted
    setup. Integration of ZK-STARK is being considered as one of the possible features
    in Ethereum 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.2 Availability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Distributed ledger network attacks are usually the basis for further attacks
    that impact integrity. They target the governance or operation of a DL network,
    with the objective of taking control of most nodes and thus, the entire ledger
    (e.g., 51% attack). Network attacks might also try to partition the DL network
    into several separate and inconsistent partitions or isolate a selected node from
    the remaining trusted nodes (Eclipse attack, Sybil).
  prefs: []
  type: TYPE_NORMAL
- en: This is then followed by presenting the node under attack with a deceptive state
    of the ledger, often by manipulating the node’s time perception under attack (e.g.,
    Timejacking, Delay attack).
  prefs: []
  type: TYPE_NORMAL
- en: Mining nodes and consensus mechanisms are vulnerable too. A mining node can
    be dishonest and behave selfishly and withhold some of the already mined blocks
    (e.g., Selfish mining, Block withholding). In this manner, miners attempt to increase
    their share of the reward. Effective countermeasures include the application of
    block timers or increasing the randomness of the miner pool assignments.
  prefs: []
  type: TYPE_NORMAL
- en: 3.2 Data management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although blockchains are distributed databases, public blockchain networks cannot
    directly meet the back-end database replacement requirements in IoT systems. The
    transaction structure is optimized for blockchain operation. With distributed
    consensus, new entries are added to storage to assure the distributed nature,
    immutability, and the absence of central authorities. However, it cannot meet
    the high throughput, low latency, rich permissioning, or query capabilities of
    traditional or distributed databases [[47](9783110681123_008192.xhtml#b_9783110681130-005_ref_047)].
  prefs: []
  type: TYPE_NORMAL
- en: Some of the blockchain protocols facilitate the placement of additional data
    in a transaction. These can be parameters in a smart contract call or even arbitrary
    data, for example, a JSON input filed in an Ethereum transaction. However, extensive
    data included in transactions would result in extensive chain data and costs for
    storing data in the chain.
  prefs: []
  type: TYPE_NORMAL
- en: IoT applications generate large volumes of traffic and are often latency-sensitive.
    Therefore, it is not surprising that most blockchain-based IoT data management
    approaches such as IPFS, FairAccess, ENIGMA, or BigchainDB, take a hybrid approach.
    These combine off-chain storage and blockchain capabilities with management functions
    assigned to the blockchain to ensure integrity and transparency, in applications
    that require auditable records. Only smaller pieces of information are stored
    in the chain, such as hash values of the off-chain data or access control information.
    Despite off-loading a large part of traffic from the blockchain networks, these
    approaches still need to provide lower latency and higher throughput record-keeping
    than public blockchain networks; so, private or consortium blockchains are used.
  prefs: []
  type: TYPE_NORMAL
- en: BigchainDB,[^(59)](footnotes.xhtml#fn_59) for example, starts with a big data
    distributed database and then adds blockchain characteristics such as decentralized
    control via a federation of voting, immutability, and transfer of digital assets.
    Once stored, data cannot be changed or deleted. At the same time, it facilitates
    any MongoDB query to search the contents of all stored transactions, assets, metadata,
    and blocks.
  prefs: []
  type: TYPE_NORMAL
- en: As shown in [Fig. 3.2](#b_9783110681130-003_fig_002), BigchainDB can be seamlessly
    integrated into the traditional application stack as a blockchain database for
    decentralized timestamping, certificates, smart contracts, and transactions. At
    the same time, it can be part of a fully decentralized application, where processing
    and file storage are decentralized.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../graphic/converted/b_9783110681130-003_fig_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig. 3.2: Reference stack for the BigchainDB applications – traditional and
    decentralized application stacks.'
  prefs: []
  type: TYPE_NORMAL
- en: They took a hybrid approach in an integrated IoT blockchain platform for sensing
    data integrity [[49](9783110681123_008192.xhtml#b_9783110681130-005_ref_049)],
    where large files are stored in separate off-chain databases. The system utilizes
    a private permissioned Hyperledger Fabric blockchain network, along with a dedicated
    IoT server, for key device and user services. Application logic in the system
    is thus partly implemented with traditional approaches and partly as smart contracts.
    The system enables users’ registration and device enrolment, where certificates
    are granted to the communicating entities to authenticate their transactions.
    It provides an immutable log of device data and allows easy access to the deployed
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: 3.3 Authentication and authorization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Authentication and authorization are two fundamental steps in any ICT system
    to manage access by various entities such as the users, devices, and services.
    They are based on unique entity identifiers, sets of mechanisms to authenticate
    the identity of a particular entity, and rules to authorize the collection of
    predefined rights and services in the system.
  prefs: []
  type: TYPE_NORMAL
- en: In the IoT, the common identification, authentication, and authorization approaches
    need to be adapted to avoid single-point failures in complex and large-scale IoT
    network infrastructures and simplify enrolment and authentication for constrained,
    unmanned devices.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain technologies can contribute to device identification, for example,
    by granting unique blockchain addresses to devices for authentication and authorization.
    Based on smart contract capabilities in the blockchain, the latter verifies their
    identity and grants the appropriate rights. An additional benefit of the blockchain-based
    approach is the transparent and immutable history of authentication and authorization
    actions.
  prefs: []
  type: TYPE_NORMAL
- en: 3.3.1 Identification and device enrolment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For authentication and authorization, users, devices, and services in any ICT
    system need unique and distinguishable identities. For devices, this can be in
    the form of a hardware address assigned by the manufacturer (e.g., Media Access-Control
    address for Ethernet or Bluetooth devices and IMEI for mobile devices) or an identifier
    that is granted to the device during the enrolment procedure, for example, an
    account address, token or a blockchain account. Some of the novel identification
    techniques rely on device fingerprinting. In this approach, a device does not
    possess an explicit identifier. Instead, devices’ communication patterns are monitored
    and analyzed to identify a device uniquely.
  prefs: []
  type: TYPE_NORMAL
- en: In the IoT, the enrolment phase for new devices can be rather challenging. It
    has to be reliable, secure, and yet minimize or even eliminate any human intervention
    during the enrolment. This is especially critical, for example, in massive deployments
    of unmanned devices. The backend for the enrolment may or may not rely on blockchain
    technology. In IoT systems that are not based on hardware identifiers, the device
    owner usually executes the enrolment. If, for example, a blockchain address is
    used to identify a device, it is assigned manually. Often, details about wallet
    control in the device are not clearly explained. This can lead to relevant hardware
    security risks, similar to those related to PKI private key management. It is,
    therefore, not surprising that many blockchain-based IoT systems predominantly
    focus on authentication and authorization of users and services.
  prefs: []
  type: TYPE_NORMAL
- en: An approach toward a simplified and, to a large extent, automated enrolment
    of IoT devices, where a device is granted a unique blockchain-based address for
    identification, could mimic, for example, the Easy Connect approach to manage
    network access in WPA3\. It simplifies device configuration by using QR codes,
    NFC tags, downloaded device information from the cloud, or a user-chosen configurator
    such as a smartphone. A result of a blockchain-based adaption of this onboarding
    procedure would be a unique blockchain address registered in the backend system
    and assigned to the device for consequent authorization.
  prefs: []
  type: TYPE_NORMAL
- en: 'For users and services, known identification principles can be adapted to leverage
    blockchain technology in the backend. Self-sovereign identity (SSI) is an emerging
    approach for establishing digital identity based on decentralized technologies.
    Unlike the centralized identity paradigm where some central trusted issuer provides
    identities, SSI users control the scope and use of their verifiable information.
    SSI is user-centric and privacy-aware, and reduces the unintended sharing of personal
    data. In an SSI system, entities are identified by decentralized identifiers (DID).
    The trust and management of DIDs are assured by blockchain technology, and DIDs
    can be decoupled from centralized registries, identity providers, and certificate
    authorities. Although the initial motivation for SSI was to increase the security
    and privacy of digital citizens, the same framework can be adapted for non-person
    subjects and, thus, for IoT [[50](9783110681123_008192.xhtml#b_9783110681130-005_ref_050)]
    too. Anything can be a DID subject: a person, group, an organization, a material
    thing, a digital thing, a logical thing, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: 3.3.2 Authentication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a unique blockchain address has been assigned and used to identify devices,
    the authenticity can be verified for every transaction created by a particular
    device. If a device has access to the blockchain account associated with the given
    blockchain address, it can create valid transactions. A verifiable transaction
    origin is the basic trust feature of a blockchain system. So, if a transaction
    originates from a correct device address and the transaction is valid (not rejected
    during block creation), we can assume that it was created by the authentic device
    and not by some other device claiming the same identity.
  prefs: []
  type: TYPE_NORMAL
- en: If authentication is needed to access some on-chain smart contract capabilities,
    the access authorization can rely solely on such authentication. In Ethereum smart
    contracts, for example, there is a tx.origin global variable in Solidity that
    returns the account’s address that sent the transaction. However, the authentication
    based on tx.origin can be exposed to a transaction origin attack, a form of a
    phishing attack. Therefore, tx.origin authentication in smart contracts is usually
    combined with the msg.sender variable, which identifies the sending smart contract
    and not the originating account. For details, see Section 2.4.4.2.4.
  prefs: []
  type: TYPE_NORMAL
- en: A blockchain system can also be used only as an underlying technology to authenticate
    and authorize devices for access control in an off-chain service. In this case,
    the purpose of the decentralized application is to securely grant a device, a
    user, or a backend system, the appropriate identification and authentication information,
    such as a token, one-time password, IP address, or a certificate. This information
    is then used to authenticate a given entity and to manage the service access.
    Apart from identification and authentication information, in this way, we can
    issue the entities some initial authorization data or credentials too. Here, blockchain-based
    identification and authentication of devices are primarily not about access to
    the smart contract method, but about access to other entities in the IoT architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Strict access control requires the authentic identity of the communicating devices.
    In IoT, a dedicated gateway frequently manages the identities, which are then
    used when authenticating with others [[51](9783110681123_008192.xhtml#b_9783110681130-005_ref_051)].
    The forms of these identities are very diverse, including, for example, unique
    virtual IPv6 addresses, one-time passwords, unforgeable tokens, or other credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 3.3.3 Authorization and access control
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Traditional access control technologies govern the ability of users and devices
    to access capabilities and services made available by entities of the same kind.
    The OM-AM reference model can help us define the organizational security and access
    control policy in a heterogeneous environment. This is a four-layer model, where
    each layer is designed separately. Horizontally, within each layer, we can compare
    the alternative access control aspects. Vertically, we compare and combine different
    access control policies. The reference model is depicted in [Fig. 3.3](#b_9783110681130-003_fig_003).
    OM-AM stands for Objective, Model, Architecture, and Mechanism. The objective
    and model (OM) layers articulate what the security objectives are and what should
    be achieved, while the architecture and mechanism (AM) layers address how to meet
    those requirements [[52](9783110681123_008192.xhtml#b_9783110681130-005_ref_052)].
  prefs: []
  type: TYPE_NORMAL
- en: '![](../graphic/converted/b_9783110681130-003_fig_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig. 3.3: Authorization reference model for IoT.'
  prefs: []
  type: TYPE_NORMAL
- en: 3.3.3.1 Authorization models
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The possible access control models differ in many aspects, including granularity,
    flexibility, centralization, and interoperability. They are, therefore, not equally
    appropriate for implementation in IoT systems. In [Sections 3.3.1](#b_9783110681130-003_s_003_s_003_s_001)
    and [3.3.2](#b_9783110681130-003_s_003_s_003_s_002), we highlight some possible
    approaches for identifying and authentication IoT devices with DLT. Nevertheless,
    the decentralized approach is merely one option and device identification can
    be managed in the traditional (centralized) way. Similarly, access control can
    utilize centralized or decentralized approaches.
  prefs: []
  type: TYPE_NORMAL
- en: Identity-based access control (IBAC) is a type of security that focuses on access
    to digital information or services based on the authenticated identity of an entity.
    Discretionary access control (DAC) considers the authenticated identity and the
    groups to which the entities belong. In DAC, subjects can transfer access controls
    among each other. Therefore, the name is discretionary. With a huge number of
    devices, IBAC and DAC become unsuitable for IoT because it is almost impossible
    to manage the appropriate access control lists for everyone in the system.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, in mandatory access control (MAC), the security policy is
    centrally controlled by a security policy administrator. Users cannot override
    or modify this policy – therefore, mandatory. A risk with MAC is high centralization
    and a single-point failure in the controller. IoT devices at diverse locations
    or with different functions may belong to various management organizations. This
    imposes another relevant problem for the centralized mandatory access control
    model, which does not fit IoT systems.
  prefs: []
  type: TYPE_NORMAL
- en: We can simultaneously implement MAC and DAC, where DAC refers to one category
    of access controls that entities can transfer among each other. MAC refers to
    the second category of access controls that imposes constraints upon the first.
  prefs: []
  type: TYPE_NORMAL
- en: Role-based access control (RBAC) employs pre-defined roles that carry a specific
    set of privileges. It can enforce MAC and DAC access control models too. Despite
    being used to manage access control in large organizations with hundreds of users
    and thousands of permissions, RBAC might not be flexible and scalable enough for
    IoT.
  prefs: []
  type: TYPE_NORMAL
- en: Attribute-based access control (ABAC), also known as policy-based access control,
    is more flexible and scalable, dynamic, and can provide a more fine-grained access
    control that is needed in IoT. There are no access lists or roles in the system.
    Instead, attributes are assigned to every device, and only those with enough attributes
    that match the access policy are allowed. The policies can express a complex Boolean
    rule set and can evaluate many different attributes. In several examples, DLT
    was applied to record the distribution of attributes in ABAC. In [[51](9783110681123_008192.xhtml#b_9783110681130-005_ref_051)],
    a simplified DLT-based access control protocol suitable for IoT is proposed.
  prefs: []
  type: TYPE_NORMAL
- en: Most traditional access control models face a common problem –a credible center
    is needed to ensure trust. Besides, in [[52](9783110681123_008192.xhtml#b_9783110681130-005_ref_052)],
    they presented an extensive review of various access control schemes for IoT.
    The conclusion is that traditional access control mechanisms may not be completely
    appropriate for resource-constrained environments.
  prefs: []
  type: TYPE_NORMAL
- en: 3.3.3.2 OAuth authorization architecture
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The OAuth 2.0 [[53](9783110681123_008192.xhtml#b_9783110681130-005_ref_053)]
    is a commonly applied authorization framework, which introduces an authorization
    layer and separates the role of the client from that of the resource owner. This
    standardized protocol provides specific authorization flows ([Fig. 3.4](#b_9783110681130-003_fig_004))
    for web or desktop applications, mobile devices, applications, or IoT, and simplifies
    the overall authorization architecture and client development. In OAuth, the client
    requests access to resources controlled by the resource owner and hosted by the
    resource server, and is issued a set of credentials different from those of the
    resource owner.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../graphic/converted/b_9783110681130-003_fig_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig. 3.4: OAuth authorization flow.'
  prefs: []
  type: TYPE_NORMAL
- en: Instead of using the resource owner’s credentials to access protected resources,
    the client obtains an access token – a string denoting a specific scope, lifetime,
    and other access attributes. Access tokens are issued to third-party clients by
    an authorization server with the approval of the resource owner. OAuth does not
    pass authentication data between clients and resource providers, but instead acts
    as an authorization token. The client uses the access token to access the protected
    resources hosted by the resource server. However, [[54](9783110681123_008192.xhtml#b_9783110681130-005_ref_054)]
    showed that to run all OAuth logic in a resource-constrained device might be impossible
    because of its high communication and computation overheads.
  prefs: []
  type: TYPE_NORMAL
- en: 3.3.3.3 Decentralized authorization examples
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: FairAccess [[55](9783110681123_008192.xhtml#b_9783110681130-005_ref_055)] was
    an early attempt at a decentralized authorization management framework for IoT
    using blockchain. As one of the first, it pointed out the need for granularity,
    privacy, transparency, and sovereignty in identification and authentication. The
    implementation reflects the infant times of blockchain technologies. In FairAccess,
    they use the UTXO model of blockchain and BTC‐like addresses to identify all interacting
    entities. The underlying blockchain network supported no smart contracts as we
    know them today. It uses new types of transactions to grant, get, delegate, or
    revoke access to users. Scripting language to express fine‐grained and contextual
    access control policies is enveloped inside these transactions. An access token
    is required to obtain access to a protected resource. A transaction does not deliver
    the access token until the requester fulfills all access control conditions already
    described with the model and included in the transaction. As a proof of concept
    of this idea, two access control models (identity and permissioned access control
    models) have been used in the implementation.
  prefs: []
  type: TYPE_NORMAL
- en: As OAuth is dependent on a trusted third-party authentication provider, which
    has total control over user data, an authentication server could block certain
    applications and thus deny the services provided by the application. DAuth [[56](9783110681123_008192.xhtml#b_9783110681130-005_ref_056)]
    provides an OAuth-like authentication service based on the Ethereum blockchain.
    A decentralized approach provides trustless architecture, and enhances transparency
    and user control. In DAuth, resource owners (users) are registered with their
    blockchain addresses in the authentication smart contract. For authorization,
    the backend application requests the user’s blockchain address from the smart
    contract and, at the same time, asks the user to sign an authentication request
    message with the same blockchain account credentials. It then compares the signatures
    of the user and the smart contract. If they match, the application provides resources
    to the user.
  prefs: []
  type: TYPE_NORMAL
- en: VaultPoint [[57](9783110681123_008192.xhtml#b_9783110681130-005_ref_057)] is
    a new blockchain-based self-sovereign identity management model that complies
    with the popular and mature standard of OAuth 2.0\. It follows the authorization
    code grant type of OAuth, which comprises the client authorization, user authentication,
    and issuance of access tokens. The proposed model could make Web or mobile development
    easy and reduce users’ burden of learning new authentication and authorization
    processes, because they are already familiar with OAuth. Using blockchain, the
    proposed model provides decentralization and integrity of the user and client
    information, and guarantees the reliability of the authentication and authorization
    processes. The system is based on the Ethereum blockchain. Three types of smart
    contracts are used – identification, notification, and client management contract.
    The proposed model not only solves the information centralization and the privacy
    issue of the existing federated ID management models governed by major companies,
    but it also provides users with secure accessibility to and sovereignty over their
    information.
  prefs: []
  type: TYPE_NORMAL
- en: 3.4 Monetization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Distributed ledger technology can successfully keep trusted records of monetary
    transactions. If this aspect of distributed ledger technology is integrated with
    IoT, it enables development of new business models. IoT ecosystems can be extremely
    heterogeneous in their applications, technologies, and involved stakeholders.
    A decentralized ecosystem business model, for example, in a smart city, can prioritize
    the overall benefits of the entire community and the greater ecosystem objectives,
    instead of maximizing fragmented values such as the profit of the involved individual
    participants [[58](9783110681123_008192.xhtml#b_9783110681130-005_ref_058)].
  prefs: []
  type: TYPE_NORMAL
- en: The IoT business market is multi-faceted. Different entities involved in the
    ecosystem can serve multiple sides of the market and play various roles in the
    business model. Multi-faced roles of the participants not only affect the business
    model, they directly impose authentication and authorization in the system, supported
    by the decentralized approaches. Refer [Section 3.3](#b_9783110681130-003_s_003_s_003).
    In an illustrative example in [Section 3.6](#b_9783110681130-003_s_003_s_006),
    we demonstrate, to some extent, such a multi-faced stakeholder environment. For
    example, each participating autonomous machine can act as a service provider or
    a service consumer.
  prefs: []
  type: TYPE_NORMAL
- en: Several vendors are involved in IoT ecosystem provisioning, including software
    and hardware vendors, communication and information service providers, and solution
    providers. They need compensation for their investments into IoT infrastructures,
    as well as for service provisioning. Monetization of data plays a key role in
    the IoT ecosystem, in data ownership and sharing. The data generated by the IoT
    devices are usually accompanied by rich contextual information, which can be monetized,
    too. However, this requires efficient and granular control over data. Two business
    models are prominent in data monetization. First, where the data owner offers
    their data in exchange for services provided by a third-party provider, and second,
    where the owner pays to keep his data protected while using the same services.
  prefs: []
  type: TYPE_NORMAL
- en: Monetary and non-monetary aspects of the distributed ledger technology can be
    combined in the same decentralized IoT solution. However, this opens new issues
    related to the DL network architectures and their interoperability for diverse
    application requirements. Networks with seemingly similar technological backgrounds
    may strongly differ in practical implementation, governance, and performance.
    In decentralized monetization of IoT, one enforces a public, permissionless network
    for user interfaces. In the other, a permissioned consortium network meets the
    machine interfaces’ performance requirements and reduces the transaction costs.
  prefs: []
  type: TYPE_NORMAL
- en: 3.5 Integration schemes of internet of things and the distributed ledger
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Embedded IoT devices are often characterized by low power consumption for prolonged
    battery autonomy and are prone to stringent production cost containment because
    of their mass scale. This limits the computation and storage capabilities of IoT
    devices and their cryptographic capabilities. For energy efficiency in IoT, WAN
    (e.g., LoRaWAN, NB-IoT) or PAN (e.g., Bluetooth), wireless communication technologies
    are optimized for low power operation too. IoT devices are, therefore, not used
    as full blockchain nodes, because the computation and communication overheads
    do not justify the potential benefits or because a full blockchain node is simply
    impossible to be implemented in a constrained device [[47](9783110681123_008192.xhtml#b_9783110681130-005_ref_047)].
  prefs: []
  type: TYPE_NORMAL
- en: The processing power of a constrained device impedes the use of advanced encryption
    protocols and limits the blockchain functions that a constrained device can execute.
    Limited storage makes it impossible to keep the entire chain data or even all
    block headers in an IoT device.
  prefs: []
  type: TYPE_NORMAL
- en: The communication traffic of a blockchain network node consists of a continuous
    traffic needed for synchronization with the blockchain network and a sporadic
    traffic due to transaction submission and event notification. The continuous traffic
    results from the DL network operation and is not affected by the DApp design and
    implementation. The only way to alleviate continuous traffic from the IoT device
    is to withdraw blockchain synchronization protocols and allocate them to a more
    capable edge gateway. The sporadic traffic is application dependent and can be,
    at least to some extent, limited by appropriate DApp workflow design. It occurs
    only when the device-machine interface (MI) submits a new transaction to the network
    for confirmation or when a device receives an event notification for MI applications
    in the device, to react to state changes in smart contracts.
  prefs: []
  type: TYPE_NORMAL
- en: Limited user interactions with IoT devices, for example, in unmanned devices
    without user interfaces, inhibit flexible and secure management of blockchain
    credentials needed for security and identification. This impacts device enrolment
    and authentication procedures.
  prefs: []
  type: TYPE_NORMAL
- en: Absolute decentralization in IoT is, therefore, problematic. We may adjust blockchain
    network architectures and protocols and the designs of IoT DApps and IoT machine
    interfaces to cope with the IoT device constraints, and assure the needed network
    performance and latency.
  prefs: []
  type: TYPE_NORMAL
- en: 3.5.1 Distributed ledger networks for internet of things
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Distributed ledger networks are discussed in detail in Section 2.3\. In IoT,
    we try to attune performance, scalability, network costs, and privacy. The requirement
    imposed by IoT devices on a DL network might be different from that of a DeFi
    application. If such divergent application aspects need to be combined in the
    same decentralized application, both the public and consortium networks (Section
    2.3.3.3) can be applied and cross-chained (Section 2.3.3.3). In public networks,
    other consensus algorithms from PoW can be used such as PoS or PoA (Section 2.3.2.1)
    to reduce transaction costs and improve performance. In private or consortium
    networks for IoT, a simplified version of the PoW consensus can be found. However,
    this reduces the decentralization and the inherent trust. Some of the distributed
    ledger technologies try to combine the financial and IoT performance (and privacy)
    aspects in one network (e.g., IOTA).
  prefs: []
  type: TYPE_NORMAL
- en: 3.5.2 Internet of things device architectures for DApps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Table 3.2](#b_9783110681130-003_tab_002) summarizes the levels of involvement
    in the blockchain protocol execution of various entities, that is, network nodes
    and IoT devices. IoT devices usually act as transaction issuers or requesters.
    The full or light nodes are not IoT end-devices but dedicated entities that provide
    blockchain network capabilities. We can split blockchain functions (e.g., chain
    synchronization, event filtering, transaction creation, validation, or key-store
    management) between the IoT devices, edge gateways, and full blockchain network
    nodes. Then, we adapt the off-chain application logic to IoT device, accordingly
    [[25](9783110681123_008192.xhtml#b_9783110681130-005_ref_025)]. A common approach
    is that the IoT device only creates and signs its transactions; the gateway performs
    all other blockchain operations, which serves as a light network node and manages
    the entire communication with the blockchain network. Even a less demanding option
    is an IoT device without any capabilities, and a gateway, which runs all blockchain
    functions, including transaction creation and signing.'
  prefs: []
  type: TYPE_NORMAL
- en: Tab. 3.2:Types of IoT blockchain entities.
  prefs: []
  type: TYPE_NORMAL
- en: '|  | Storage | Validator | Account keys |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Full Node** | Full chain data | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| **Light Node** | Block headers | No | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| **Transaction Issuer** | None | No | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| **Transaction Requester** | None | No | No |'
  prefs: []
  type: TYPE_TB
- en: An IoT device that is a transaction issuer is capable of building and signing
    a valid blockchain transaction. The issuer has a valid blockchain identity. It
    needs access to the key-store to properly sign the issued transaction. Access
    to the key store requires reliable authentication in the device and can impose
    hardware security risks. After a transaction is built, it is submitted to the
    blockchain network via an API in one of the network nodes.
  prefs: []
  type: TYPE_NORMAL
- en: In the architecture of a constrained Ethereum-based IoT device, depicted in
    [Fig. 3.5](#b_9783110681130-003_fig_005), we see the approach where the blockchain
    client is installed on a separate, unconstrained edge gateway. This gateway is
    capable of running all blockchain protocols as a full or as a light client. The
    device is attached to the DL client API to avail the DL functions provided by
    the gateway. The architecture in this figure assumes that the device can securely
    keep its key-store. The device is also capable enough to build and sign transactions
    and communicate through the DL client API with the DL edge gateway/node.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../graphic/converted/b_9783110681130-003_fig_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig. 3.5: IoT transaction issuer device and edge gateway Ethereum node.'
  prefs: []
  type: TYPE_NORMAL
- en: A transaction requester is a pure IoT device. It runs only the traditional IoT
    protocols and has no access to the blockchain key-store. It cannot directly take
    any of the blockchain-specific actions and runs no blockchain protocols. A transaction
    requester only assembles data for submission, communicates it with a network node,
    which then issues the transaction on its behalf. Thus, the transaction requester
    relies on a gateway device, which integrates the traditional IoT protocol principles
    with a blockchain operation.
  prefs: []
  type: TYPE_NORMAL
- en: In [Fig. 3.6](#b_9783110681130-003_fig_006), the IoT device’s off-chain logic
    communicates with the edge gateway through a proprietary communication interface,
    which is in no way related to DL. The device also possesses no DL-related credentials.
    All functions, including the DL transaction creation, are done in the application
    logic of the edge gateway, where the key-store is also kept. This can vastly reduce
    the requirements imposed on the device. However, the IoT device does not directly
    benefit now from any decentralized trust enhancements and must fully trust the
    edge gateway.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../graphic/converted/b_9783110681130-003_fig_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig. 3.6: IoT transaction requester device and edge gateway Ethereum node.'
  prefs: []
  type: TYPE_NORMAL
- en: These architectural arrangements help us in coping with the IoT device communication
    and computation constraints and are often the only viable approaches to include
    a constrained IoT device in decentralized applications. However, we need to be
    aware that this reduces the decentralization of the system. Therefore, a possible
    unfavorable impact on overall trust may not be neglected.
  prefs: []
  type: TYPE_NORMAL
- en: 3.6 Example of an industrial internet of things DApp
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Tetramax technology transfer experiment CORONA[^(60)](footnotes.xhtml#fn_60)
    combines distributed ledger technology with collaborative robotics. This proof
    of concept enables innovative IoT machine autonomy use cases in manufacturing
    environments, such as servitization and robotics-as-a-service. As an illustrative
    example, a 3-D printer can offer its printing capabilities to other actors in
    the system. Machines or other actors can place an order for such a service. The
    service negotiation is then autonomously conducted through blockchain transactions
    and smart contracts. The printing machine records the process of production. This
    is used as a confirmation of the work done and is recorded in the blockchain.
    The basic use case diagram is depicted in [Fig. 3.7](#b_9783110681130-003_fig_007).
  prefs: []
  type: TYPE_NORMAL
- en: The actors have unique blockchain accounts and are identified by blockchain
    addresses. The business logic for the activities in the use cases is implemented
    in smart contracts and executed through machine and user interfaces. The machines
    interface the blockchain system through the applications in single-board computers.
    Trusted machines are oracles that provide data to smart contracts from the external
    world.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../graphic/converted/b_9783110681130-003_fig_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig. 3.7: Use-case diagram of a decentralized collaborative robotic system.'
  prefs: []
  type: TYPE_NORMAL
- en: The entire communication between the machines includes placing, confirming,
    and executing an order. If the task is finalized on time and the required proof
    of execution is provided, the order is completed. A key message exchange in the
    system for placing and executing an order is shown in [Fig. 3.8](#b_9783110681130-003_fig_008).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../graphic/converted/b_9783110681130-003_fig_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig. 3.8: Message sequence for placing and executing an order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The data and event model is based on a UML class diagram, modified to include
    the smart contract methods and parameters, and the events thrown up during operation.
    Therefore, the required system data was split into three categories: obligatory,
    auxiliary, and large or binary objects. The key items are implemented as smart
    contract parameters. These are the obligatory parameters for minimum system functionality;
    for example, order IDs or machine addresses. Some additional parameters are placed
    in the transaction data field as a JSON string. They, too, are kept in the blockchain,
    but their structure can be adapted without directly affecting the smart contract
    code. This allows for some flexibility; for example, adding new parameter fields
    to a description of a machine or a user. The large or binary objects, for example,
    printer configuration files, image and video proofs of manufacturing, etc., are
    not kept in the blockchain because of their size. Instead, they are placed on
    the off-chain storage servers, and only their hash values are set in the chain.'
  prefs: []
  type: TYPE_NORMAL
- en: The solution is a decentralized application, which is based on Ethereum technology.
    A Proof of Authority consortium-based blockchain network was set up to overcome
    some of the performance and cost limitations of blockchain and IoT. Block time
    was set to 3 s, which is substantially less than in, for example, a public Ethereum
    network. This allows for better transaction throughput and lower latency. Besides,
    the PoA mechanism provides very predictable block times and is not energy-consuming.
    The network runs the smart contract platform. The UI and MI access the blockchain
    capabilities through the access nodes that are HTTP RPC enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Smart contract platform enables back-end logic for registering new machines
    and machine owners, selecting the appropriate service providers, and placing and
    managing the orders. All interactions with the smart contract are role-based,
    and a role is defined for a selected blockchain account. This enables secure execution
    of the entire smart contract functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The user interface enables the configuration and monitoring of the system. It
    is used to register and configure details about machine owners, register new machines,
    and monitor events related to the order execution. The general Web technologies
    (HTML, JavaScript, Vue) and interfaces hide the blockchain specifics and details
    from the user. However, the UI Web application is blockchain aware and only operates
    if the user has the required access credentials and is authenticated by the appropriate
    blockchain account.
  prefs: []
  type: TYPE_NORMAL
