- en: © Elad Elrom 2019Elad ElromThe Blockchain Developer[https://doi.org/10.1007/978-1-4842-4847-8_9](https://doi.org/10.1007/978-1-4842-4847-8_9)
  prefs: []
  type: TYPE_NORMAL
- en: '9. Build Dapps with Angular: Part I'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Elad Elrom^([1](#Aff2) )(1)New York, NY, USA
  prefs: []
  type: TYPE_NORMAL
- en: 'In previous chapters, I covered different blockchains, and you learned how
    to create smart contracts that can interact with a blockchain. You created smart
    contracts in Ethereum, NEO, EOS, and Hyperledger. In Chapter [1](475651_1_En_1_Chapter.xhtml),
    I broke down the process into five layers: consensus layer, miner or booking layer,
    propagation layer, semantic layer, and application layer. Smart contracts are
    part of the application layer in the development cycle; however, the application
    layer is incomplete without having a front-end interface that enables an end user
    to interact with the blockchain.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many times you will hear decentralized applications (dapps) referred to as smart
    contracts. Smart contracts are self-executing contracts. Dapps use smart contracts
    but run on a P2P network and not on a single system.
  prefs: []
  type: TYPE_NORMAL
- en: Developers and more savvy users can interact with the smart contracts you created
    via the command-line interface and tools mentioned in previous chapters, but developing
    a front-end application that is able to interact with a blockchain is essential
    for all other users. You do this by creating a decentralized application (dapp  ).
    In this chapter and the next, you will be creating a decentralized application
    with the help of Angular so that users can interact with a smart contract using
    a friendly and intuitive user interface (UI). I broke down the process into two
    parts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part I, covered in this chapter, contains the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Developing the dapp, including its benefits and classification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Angular, including its architecture, benefits, prerequisites, and creating
    an Angular skeleton app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and styling Angular custom components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Part II, covered in Chapter [10](475651_1_En_10_Chapter.xhtml), contains the
    following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the dapp’s smart contract with Truffle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating the smart contract with the dapp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linking and connecting your dapp to the Ethereum network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: What Is a Dapp?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A *decentralized application* (shortened as ÐApp, dapp, Dapp, dApp, or DApp
    and pronounced as “dee-app”) is a web application that is able to interact with
    a smart contract. Dapps run on the blockchain and utilize the distributed ledger.
    The Ethereum blockchain is currently the most popular platform to run dapps; however,
    other distributed ledger technologies (DLTs) you have seen also provide the ability
    to create dapps. I covered NEO, EOS, and Hyperledger in previous chapters; others
    include ICON, Cardano, and Hashgraph (Hedera).
  prefs: []
  type: TYPE_NORMAL
- en: '*“Everything that can be decentralized will be decentralized.”*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —David Johnston, CEO of the DApp Fund [https://github.com/DavidJohnstonCEO/DecentralizedApplications](https://github.com/DavidJohnstonCEO/DecentralizedApplications)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you have ever developed a standard desktop, web, or mobile application, you
    will find that dapps are similar but also very different.
  prefs: []
  type: TYPE_NORMAL
- en: 'A dapp is built using the same tools and languages you use to build any other
    app, but for an app to be categorized as a dapp, it needs to meet the following
    criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Open source*: Its code is published as open source and should not be governed
    by one entity (centralized). Keep in mind that the application may adapt its own
    protocol in response to proposed improvements and market feedback; however, the
    consensus of its users drives all changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Decentralized*: Dapps utilize a blockchain or a P2P network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Incentive*: Dapps use digital assets for funding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Algorithm/protocol*: Dapps often generate tokens and include a consensus mechanism
    such as PoW, PoS, or even their own.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These criteria ensure dapps don’t have downtime like other apps you download
    from marketplaces such as iTunes or Google Play; dapps also give control to a
    community instead of one entity. These criteria can be significant. For instance,
    Apple and Google often reject apps for not meeting their arbitrary or monetary-based
    policies. These policies do not always make sense and are not always in the best
    interest of the end user; they often are there to block usage of a competitor
    or for monetary gain.
  prefs: []
  type: TYPE_NORMAL
- en: Dapps that are based on open source code implemented on decentralized blockchains
    and funded by tokens generated using a specific consensus mechanism are believed
    by many to be the future of all businesses. Only time will tell.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, open source software is an advantage because it allows users to
    view the source code and potentially contribute. Decentralizing using a blockchain
    harnesses the advantages of blockchain as DLT and serves as a replacement to the
    traditional one-server database.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, adding records/transactions to ledgers is usually done utilizing tokens,
    and the consensus mechanism of a token is also an agreement between all the users
    of the dapp.
  prefs: []
  type: TYPE_NORMAL
- en: Dapp Classification
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In addition to the previous criteria, dapps can be categorized. The classification
    is based on the infrastructure the dapp is utilizing and can be broken down to
    these three categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Dedicated blockchain dapps*: These are dapps that use a dedicated blockchain
    directly; examples are bitcoin, Ethereum, EOS, and NEO.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Dapps relying on another blockchain*: For instance, the Omni Layer Protocol
    (formerly called Mastercoin) is a digital currency and communications protocol
    that is built on top of the bitcoin blockchain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Dapps relying on another protocol that built on top of another blockchain*:
    These dapps use a protocol that is built on top of another blockchain. An example
    is the safe network using the Omni Layer Protocol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A good example to help understand the classification concept is the USDT (Tether)
    token. This token was issued twice based on two blockchains: bitcoin and Ethereum.
    In this case, there are two types of USDT. The original, which is based on bitcoin,
    is done by using the Omni Layer Protocol to generate the token, and the Ethereum-based
    USDT is compatible with the Ethereum’s ERC20 standard. Take a look at Figure [9-1](#Fig1).![../images/475651_1_En_9_Chapter/475651_1_En_9_Fig1_HTML.jpg](../images/475651_1_En_9_Chapter/475651_1_En_9_Fig1_HTML.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9-1
  prefs: []
  type: TYPE_NORMAL
- en: Representation of clasisification for USDT
  prefs: []
  type: TYPE_NORMAL
- en: Dapp Projects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most dapps are built directly on top of the Ethereum blockchain or use a blockchain
    for their tokens. However, there are some dapps that even build their own dedicated
    blockchain. Take a look at Table [9-1](#Tab1) for a sample of different dapps
    and their classifications.Table 9-1
  prefs: []
  type: TYPE_NORMAL
- en: Example of Dapps and Classifications
  prefs: []
  type: TYPE_NORMAL
- en: '| **Dapp** | **Description** | **Classification** | **Token** | **Blockchain**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Ethlance | Marketplace for job postings and hiring freelancers. 0 percent
    fees. | Uses Ethereum directly | No token | Ethereum blockchain |'
  prefs: []
  type: TYPE_TB
- en: '| Golem | Global market for idle computer power. | Token based on Ethereum
    | GNT | Ethereum blockchain |'
  prefs: []
  type: TYPE_TB
- en: '| The SAFE Network | Data storage and communications network. | Implementation
    relying on another protocol (Omni protocol) that is built on top of another blockchain
    (bitcoin) | SFE | Bitcoin |'
  prefs: []
  type: TYPE_TB
- en: 'In addition to the information in Table [9-1](#Tab1), there are many resources
    to find more dapps; these two web sites provide a list of dapps that you can check:
    [https://dapps.ethercasts.com/](https://dapps.ethercasts.com/) and [https://coinsutra.com](https://coinsutra.com)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: How Do You Create Your Own Dapp?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The success of bitcoin and blockchain have brought an explosion of dapps. Developers
    and business owners have created a basic process to follow for developing dapps.
    You don’t need to follow this exactly, and it may change by the time of writing;
    however, many of the published dapps out there have followed this process. The
    process consists of these five steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a white paper.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch an initial coin offering (ICO).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Develop the dapp.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch your dapp.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Market your dapp.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let’s review these steps.
  prefs: []
  type: TYPE_NORMAL
- en: Write a White Paper
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The white paper is similar to a company’s business plan aimed at investors.
    However, it targets more than just investors; it’s the technical blueprint. The
    white paper is the technical document as well as the business plan and should
    explain the problem being solved and the concept, features, and technical aspects
    of the dapp.
  prefs: []
  type: TYPE_NORMAL
- en: Just like in a business plan, it’s a good idea to include your unique selling
    proposition (USP), road map, members’ résumés, capabilities, and history to help
    establish credibility.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The unique selling proposition (USP) is the problem your dapp is aiming to solve.
  prefs: []
  type: TYPE_NORMAL
- en: Once the white paper is published, it is good to get feedback from peers and
    the community in the early stages and prior to development. Social media, forms,
    and publications are often used to promote dapps and help create credibility.
  prefs: []
  type: TYPE_NORMAL
- en: Launch an Initial Coin Offering
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Once the white paper is published, the next step is to launch an ICO and sell
    coins  or tokens to fund and support your dapp. The coin should have a reason
    for existence, rather than be the same as another coin/token out there, so you
    should explain how and why your dapp needs its own token or coin.
  prefs: []
  type: TYPE_NORMAL
- en: 'You also need to decide on the type of classification for your dapp, which
    will determine whether you will need any or all of the following: 1) issue token
    2) set usage fees. 3) have a dedicated blockchain. 4) have a mining mechanism
    5) set the allocation of fees 6) rewards investors 7) allocate fees to pay for
    different departments of your business: support, development, marketing, and business.'
  prefs: []
  type: TYPE_NORMAL
- en: Develop the Dapp
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Development should be open source, and GitHub is usually used for repos for
    the development effort. On every release, it’s a good idea to let investors and
    others know of a release to build users and a developer community around your
    project. Many dapps have tried to get funds and delivered no usable products;
    set yourself apart and avoid potential problems with regulators. (I will cover
    regulators in Chapter [11](475651_1_En_11_Chapter.xhtml).)
  prefs: []
  type: TYPE_NORMAL
- en: Launch Your Dapp
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Launch your dapp and include your release notes, documentation, road map, and
    maintenance plan. It’s crucial to meet the promised launch date.
  prefs: []
  type: TYPE_NORMAL
- en: Market Your Dapp
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The last step is marketing. In addition to traditional marketing, dapps often
    hire or work with prompters during early phases or after release to get the word
    out. Another unique marketing aspect for a dapp is to get the coin/token listed
    on exchanges. This is the final stamp of recognition. Some exchanges have a voting
    system put in place to select the next coin/token to be listed. Some exchanges
    have been abusing this process and charging hefty fees to list a token or coin.
    For instance, a utility token listing on Binance exchange can cost from $0.5 million
    to $3 million.
  prefs: []
  type: TYPE_NORMAL
- en: Many early investors including dapp owners have been able to “cash out” if a
    token is listed on major exchanges as its price often goes up high because of
    the listing; however, it has become more and more difficult for a dapp to be listed,
    and it needs to provide real value. Fraudsters are often exposed, and coins/tokens
    get de-listed as quickly as they are listed.
  prefs: []
  type: TYPE_NORMAL
- en: Why Angular?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With dapps, just like with any traditional app, you can write your application
    natively to the device you publish your app to (in the supported language of your
    device such as Xcode for iOS); however, it has been proven that using a framework
    can speed up development. For instance, if you want to utilize the same code and
    deploy your application on multiple devices with different screen sizes, that
    can become a challenge for a small team. Angular helps you build cross-platform
    modern applications for web, mobile, and desktop at the same time. The Angular
    CLI and Component Dev Kit (CDK) can help accelerate the development of apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Angular can be beneficial because of the following factors:'
  prefs: []
  type: TYPE_NORMAL
- en: Large community support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise architecture and scaling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-platform support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular is a structural framework and enables you to create front-end client-side
    applications. The pieces are loosely coupled and structured in a modular fashion,
    resulting in less code to write, added flexibility, easier-to-read code, and quicker
    development time.
  prefs: []
  type: TYPE_NORMAL
- en: Angular allows the developer to put together a toolset for building a framework
    that will fit your exact application’s needs. You can use HTML as your template
    language and extend HTML’s syntax so the application’s components can be read
    easily. Other than HTML, the coding is done with TypeScript, which turns JavaScript
    into an object-oriented programming language and gives you an enterprise-level
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, Angular is well structured and built to be fully accessible, in
    accordance with accessible rich Internet applications (ARIAs), so your app or
    site can be built correctly for people with disabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Angular also gets along well with other JavaScript libraries so you can install
    libraries such as the Ethereum JavaScript API web3.js with npm manager. Lastly,
    Angular’s features can be easily modified or replaced to fit your exact needs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The word *angular* means having multiple angles or measured by an angle. Angular
    is a structural framework and enables you to create front-end client-side applications
    for the Web, mobile, and desktop. It is an open source, front-end framework for
    dynamic app development.
  prefs: []
  type: TYPE_NORMAL
- en: Angular’s most significant features are data binding and dependency injection.
    These can help decrease code. Also, Angular has been around for years; it’s on
    its seventh release.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Dependency injection is a design pattern technique. As the name suggests, it
    means using one object as a dependency to another object by injecting the code.
  prefs: []
  type: TYPE_NORMAL
- en: Angular 2 was a complete rewrite of AngularJS and offered a major change; however,
    there are no major differences between Angular 2 up to version 8.
  prefs: []
  type: TYPE_NORMAL
- en: 'The latest release version of Angular at the time of writing is 7.3.1, and
    in this version, a few features were added such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Dependencies*: The dependencies were upgraded, and support for Typescript
    3.1, RxJS 6.3, and Node 10 was added.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bundle budget*: You can set a warning for the size of the application to ensure
    you don’t exceed the limit (the default is 2 MB).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Angular CLI* : By running the CLI wizard, you can add components such as routing
    and decide on the format of the CSS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Component Dev Kit (CDK)* *of Angular Material*: Add new features such as out-of-the-box
    virtual scrolling, drag and drop, and “mat-form-field” support for native select
    fields. (I’ll cover Material later in this chapter.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular 8 is at release candidate 2 (rc.2), and the features expected are mostly
    to improve performance. It will include an improved view engine called Angular
    Ivy, improved upload of JavaScript for modern browsers that support ES2015+, support
    for web workers to use hardware for heavy lifting, support for TypeScript, a benchmarks
    tool, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I selected Angular, but Angular is not the only framework that can help expedite
    development. You can use other frameworks such as React ( [https://reactjs.org](https://reactjs.org)
    ) and achieve similar benefits. This decision is really a matter of personal taste
    and your team’s skill set. You could easily convert this project to a React project
    mostly by copying your project’s files over to the React project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Angular Dapp
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, you will be creating an actual dapp that will connect to the
    Ethereum network  and transfer funds from one account to another. This is often
    the core feature of any dapp out there. For instance, you can build a dapp that
    sells products, provides services, or pays users to take quizzes, and all these
    types would need to have a mechanism in place to transfer coins/tokens. In this
    section of this chapter, you will be creating a dapp utilizing Angular.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of environment and deployment, you will be using the Truffle web framework
    you used in Chapter [5](475651_1_En_5_Chapter.xhtml), as it offers benefits for
    quickly creating a smart contract. Truffle is able to do more than just help compile
    your smart contract; it does everything you need to inject your smart contract
    into a web app and can run the test suite. You are also going to utilize MetaMask
    again to get a secure blockchain account in the browser. Lastly, you will use
    and run Ganache to create a local blockchain RPC server to test and develop against.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Most of what you need is already installed. Angular needs Node and npm manager  ,
    which you have installed previously. Confirm the correct version is installed
    by running the libraries with the v flag, just as you have done in previous chapters.>
    node -v> npm -vIn case you do not have npm and node, just run the following command:>
    brew install nodeGive npm ownership for your user so you won’t need to use sudo
    to install libraries.> sudo chown -R $USER:$GROUP ~/.npm> sudo chown -R $USER:$GROUP
    ~/.configIt’s recommended that you upgrade npm to ensure you are using the latest
    version; at the time of writing, it’s 6.9.0.> [sudo] npm install -g npm+npm@6.9.0
  prefs: []
  type: TYPE_NORMAL
- en: Angular CLI
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Next, you need to install the Angular command-line interface (CLI). For Angular
    CLI, it’s recommended (but not required) to install Angular CLI with sudo and
    allow-root and ensure Angular CLI will have the correct privileges. You will be
    installing version 7.3.9, which is the latest stable release version of Angular.>
    sudo npm install -g @angular/cli@7.3.9 --unsafe-perm=true --allow-root+ @angular/cli@7.3.9added
    363 packages from 197 contributors in 13.691sYou could also install the latest
    version of Angular but your example code may break, with newer versions of Angular.>
    sudo npm install -g @angular/cli --unsafe-perm=true --allow-rootTo verify installation
    went well, run the version flag, and you should see version 7.3.9; Figure [9-2](#Fig2)
    shows the expected output.> ng version![../images/475651_1_En_9_Chapter/475651_1_En_9_Fig2_HTML.jpg](../images/475651_1_En_9_Chapter/475651_1_En_9_Fig2_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9-2
  prefs: []
  type: TYPE_NORMAL
- en: Angular CLI installation verification
  prefs: []
  type: TYPE_NORMAL
- en: Create an Angular Project
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you have the main tools  and libraries installed, you can proceed and
    create your project from scratch by downloading other needed libraries, test libraries,
    and build scripts, as well as make your own folder structure; however, to expedite
    this process, you can use the Angular seed project that includes a skeleton project
    to quickly bootstrap your project.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Angular seed project can help you start development quickly and efficiently,
    following Angular's best practices. There are pros and cons of using boilerplate
    skeleton code. You can decide on your own if you want to use this skeleton for
    future projects, but for this demo app, it is ideal.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many ways you can create your project using the Angular seed skeleton.
    I will be showing you two options here: using the Angular CLI and using WebStorm.'
  prefs: []
  type: TYPE_NORMAL
- en: The ng new command  will run a script that will create your app. You can run
    the CLI new command and give the name ethdapp as your app name.> cd ~/desktop>
    ng new ethdappWould you like to add Angular routing? (y/N) yWhich stylesheet format
    would you like to use? CSS
  prefs: []
  type: TYPE_NORMAL
- en: Notice that I added routing here and decided to use CSS for styles. I will get
    more into these later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Once installation is complete, it will output all the files that are created.CREATE
    ethdapp/README.md (1024 bytes)CREATE ethdapp/angular.json (3557 bytes)CREATE ethdapp/package.json
    (1313 bytes)...Change directories to the newly created folder and confirm you
    have the initial files and directories.> cd ethdappRunning the following command
    will analyze your package.json config file with recommendations:> ng updateYou
    can run the following command to follow the recommendations:> ng update --allNext,
    install Bower globally. Bower is a package manager that is used often with Angular.
    At the time of writing, it’s at version 1.8.8.> npm install -g bower> bower -v1.8.8Let’s
    do a walk-through of what was created in a workspace and the starter project files
    (see Figure [9-3](#Fig3)).![../images/475651_1_En_9_Chapter/475651_1_En_9_Fig3_HTML.jpg](../images/475651_1_En_9_Chapter/475651_1_En_9_Fig3_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9-3
  prefs: []
  type: TYPE_NORMAL
- en: Ethdapp files created by Angular CLI
  prefs: []
  type: TYPE_NORMAL
- en: '*A new workspace*: This is the root folder named ethdapp.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*e2e folder*: This contains an end-to-end test project, located here: ethdapp/e2e.
    The testing folder includes the Jasmin library’s JSON configuration file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*src folder*: This is your project folder, which includes all the files of
    your project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An initial skeleton app project, located here: ethdapp/src/app'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The assets folder with the entry file index.html
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Other configuration files
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*.gitignore*: Here you list any files and folders that you would like to ignore
    when you upload your project to Git.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*angular.json*: This is your project configuration file and includes information
    about your project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*package.json*: This is the npm manager configuration file and includes all
    the libraries you will be using in your project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*README.MD*: This is documentation about your project; this will be the “home
    page” document of your project and the first file developers will read to get
    instructions on how to get the project running.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*tsconfig.json*: This is the TypeScript config file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*tslint.json*: This is the Lint config file used to set your best-practice
    formatting, spacing, and the like.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serve the Application
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'To see your actual dapps, you will be using the ng serve command  , which builds
    the app, starts the development server, watches the source files, and rebuilds
    the app as you make changes to those files. The --open flag opens the app in a
    browser on port 4200 here: http://localhost:4200/. Run the ng serve command with
    the open flag.> ng serve --openYou should see the dapp running in your browser,
    as shown in Figure [9-4](#Fig4).![../images/475651_1_En_9_Chapter/475651_1_En_9_Fig4_HTML.jpg](../images/475651_1_En_9_Chapter/475651_1_En_9_Fig4_HTML.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9-4
  prefs: []
  type: TYPE_NORMAL
- en: Angular seed app running in the browser
  prefs: []
  type: TYPE_NORMAL
- en: The skeleton app includes links to a tour, documentation, and an Angular blog.
    By going through the “Tour of Heroes” and the CLI documentation, you can get a
    good understanding of how Angular works, and bookmarking the Angular blog can
    give you updates on future releases and announcements.
  prefs: []
  type: TYPE_NORMAL
- en: To stop the application from serving, press Command+C in Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Project with WebStorm
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Another option for firing up the Angular seed project is utilizing the WebStorm
    IDE, which you have been using in previous chapters. WebStorm allows you to either
    import the seed project you created or create a new seed project.
  prefs: []
  type: TYPE_NORMAL
- en: To import the ethdapp project you created with the Angular CLI ng new command,
    open WebStorm, select File ➤ Open, and navigate to the ethdapp directory. That’s
    it; WebStorm will automatically import the project.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, to start a new Angular seed project in WebStorm, select File
    ➤ New ➤ Project from the top menu. Next, select Angular CLI and name your project
    **ethdapp**. Use the drop-down menu to select the version of the Angular CLI,
    as shown in Figure [9-5](#Fig5).![../images/475651_1_En_9_Chapter/475651_1_En_9_Fig5_HTML.jpg](../images/475651_1_En_9_Chapter/475651_1_En_9_Fig5_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9-5
  prefs: []
  type: TYPE_NORMAL
- en: Generating the Angular seed project in WebStorm
  prefs: []
  type: TYPE_NORMAL
- en: Now that the project is created, you can run the same command, utilizing the
    Terminal tab in the bottom menu of WebStorm, as shown in Figure [9-6](#Fig6).>
    ng serve –open![../images/475651_1_En_9_Chapter/475651_1_En_9_Fig6_HTML.jpg](../images/475651_1_En_9_Chapter/475651_1_En_9_Fig6_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9-6
  prefs: []
  type: TYPE_NORMAL
- en: Serving ethdapp in WebStorm’s Terminal
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the skeleton application from the book repository: [https://github.com/Apress/the-blockchain-developer/chapter9/step1.zip](https://www.scala-sbt.org/1.x/docs/Installing-sbt-on-Windows.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: When you download your steps, make sure you run npm install because I stripped
    out the node module to decrease the size of the project.> npm install
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I excluded node_modules, which holds all the project’s dependencies, from the
    project. It’s common not to include it with a project because of its size; you
    can install it with the npm install command.
  prefs: []
  type: TYPE_NORMAL
- en: Ensure No Mismatch with Angular CLI Version
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You can create your Angular seed project either with WebStorm or through the
    ng command, and you need to check that there is no mismatch of the global Angular
    CLI with the local project Angular CLI. This can happen when setting files pointing
    to a previous version, or you may have used Angular in the past with an older
    version. What happens is that your local project Angular shows an older version
    than the global Angular installed on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'To ensure this is not the case, run any ng command, and if this issue exists,
    you will see the following error message:> ngYour global Angular CLI version (7.3.9)
    is greater than your localversion (6.2.9). The local Angular CLI version is used.If
    you continue with these settings, you will be running version 6.x instead of 7.x.
    To fix this, what you need to do is uninstall the Angular CLI from your dev environment
    and then install version 7.x.> npm uninstall --save-dev angular-cli> npm install
    --save-dev @angular/cli@7.3.9Notice that you use the --save-dev flag so the new
    version will be saved in your package.json project file. Now if you run the version
    command again, you should see the correct version with no warning messages.> ng
    --versionAngular CLI: 7.3.2'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have ensured you are running the correct version of Angular CLI,
    you are ready to continue development and make changes to the seed starter app.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Components
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: An Angular best practice is to use a Model View Controller (MVC)–style architecture.
    Angular supports coding with a separation of concerns just like any other mature
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Angular MVC includes the following three elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Model*: This contains the application’s data and Angular data binding, which
    allows reflection of data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: reflection in relation to data binding, elements bound to a data and any data
    change is automatically reflected. For instance, you bind price change to multiple
    view elements and once the price change data is updated all the view elements
    are updated automatically.
  prefs: []
  type: TYPE_NORMAL
- en: '*View*: This contains the HTML or a template and directives.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Controller*: This is the glue holding the model and the view together. The
    controller takes the data, applies business logic, and sends the results to the
    view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you probably recall, Angular’s welcome page opened when you were running
    the serve command. The welcome component is the application shell. The shell is
    controlled by an Angular component named AppComponent.
  prefs: []
  type: TYPE_NORMAL
- en: Components are the fundamental building blocks of an Angular application. They
    display data on the screen, listen for user input, and take action based on that
    input.
  prefs: []
  type: TYPE_NORMAL
- en: You will be creating a component called transfer that you will be using to transfer
    coins to another address. To create the transfer component, run the ng generate
    component command.> ng g c components/transfer
  prefs: []
  type: TYPE_NORMAL
- en: Notice that you used the shortcuts g and c that stand for “generate” and “component,”
    respectively, but you can also use the full name instead of the abbreviation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ng command generated the four following files for you:'
  prefs: []
  type: TYPE_NORMAL
- en: 'transfer.component.css: Component’s specific CSS styles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'transfer.component.html: Component template, written in HTML'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'transfer.component.spec.ts: Testing file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'transfer.component.ts: Component class code, written in TypeScript'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These four files together act as the implementation of the transfer component.
    You can see the folder structure in Figure [9-7](#Fig7).![../images/475651_1_En_9_Chapter/475651_1_En_9_Fig7_HTML.jpg](../images/475651_1_En_9_Chapter/475651_1_En_9_Fig7_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9-7
  prefs: []
  type: TYPE_NORMAL
- en: Transfer component file structure
  prefs: []
  type: TYPE_NORMAL
- en: An application’s structure is usually created with a header, a footer, and a
    navigation menu so you can navigate to different partial views.
  prefs: []
  type: TYPE_NORMAL
- en: Using this architecture of header and footer components can help you create
    different views and split the page view into separate files. Think of each piece
    as a stand-alone reusable UI module. Angular Seed promotes this type of architecture
    and comes with the welcome component already created. Let’s create a start component,
    a header, and footer components.> ng g c components/start> ng g c components/header>
    ng g c components/footerYou can see in the output that each component generated
    the following files:CREATE src/app/components/[component-name]/[component-name].component.cssCREATE
    src/app/components/[component-name]/[component-name].component.htmlCREATE src/app/components/[component-name]/[component-name].component.spec.tsCREATE
    src/app/components/[component-name]/[component-name].component.ts
  prefs: []
  type: TYPE_NORMAL
- en: In addition to these files, you can open ethdapp/src/app/app.module.ts and notice
    that the app.module.ts file was modified every time you created a component. The
    app.module.ts file is one of the most important files in Angular; it’s the app
    controller written in TypeScript. The controller is a global file that will tie
    your components together, so every component you want to use in your app needs
    to be defined in that file. If you did not use the ng script, you will need to
    modify app.module.ts yourself to link to the new component.
  prefs: []
  type: TYPE_NORMAL
- en: Since you used the CLI, these imports are included automatically for you:*import*
    { TransferComponent } *from* './components/transfer/transfer.component';*import*
    { StartComponent } *from* './components/start/start.component';*import* { HeaderComponent
    } *from* './components/header/header.component';*import* { FooterComponent } *from*
    './components/footer/footer.component';
  prefs: []
  type: TYPE_NORMAL
- en: Routing Module
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Another important file and a good practice to create is an app-routing module.
    This file acts as a controller to instruct Angular how to navigate to different
    views in your app.
  prefs: []
  type: TYPE_NORMAL
- en: Normally to generate a route for your app, you do not need to manually do so,
    since during the creation of your app, you decided to create the routing file
    called app-routing.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to create the app-routing file, you can run the following the module
    command:> ng generate module app-routing --flat --module=appCREATE src/app/app-routing.module.tsUPDATE
    src/app/app.module.ts
  prefs: []
  type: TYPE_NORMAL
- en: Notice that this time in your command you are using the full name generate module
    instead of just the first letters of g and m. Both options work the same way.
  prefs: []
  type: TYPE_NORMAL
- en: 'The generate module command creates the initial code shown in Listing [9-1](#PC24)
    for src/app/app-routing.module.ts.*import* { NgModule } *from* ''@angular/core'';*import*
    { Routes, RouterModule } *from* ''@angular/router'';*const* routes: Routes = [];@NgModule({  imports:
    [RouterModule.forRoot(routes)],  exports: [RouterModule]})*export class* AppRoutingModule
    { }Listing 9-1'
  prefs: []
  type: TYPE_NORMAL
- en: app-routing Initial Startup Code
  prefs: []
  type: TYPE_NORMAL
- en: 'The initial code includes an import statement  to Angular code and module tag.
    Next, replace the pre-populated code of app-routing.module.ts file with the code
    in Listing [9-2](#PC25).import { NgModule } from ''@angular/core'';import { CommonModule
    } from ''@angular/common'';import { RouterModule, Routes } from ''@angular/router'';import
    { StartComponent } from ''./components/start/start.component'';import { TransferComponent
    } from ''./components/transfer/transfer.component'';const routes: Routes = [  {
    path: '''', redirectTo: ''/start'', pathMatch: ''full'' },  { path: ''start'',
    component: StartComponent },  { path: ''transfer'', component: TransferComponent
    }];@NgModule({  declarations: [],  imports: [ RouterModule.forRoot(routes), CommonModule
    ],  exports: [ RouterModule ]})export class AppRoutingModule { }Listing 9-2'
  prefs: []
  type: TYPE_NORMAL
- en: app-routing Code to Route Views
  prefs: []
  type: TYPE_NORMAL
- en: In Listing [9-2](#PC24), you imported the view components you will be using;
    these are start and transfer. They will act as web pages on a web site or partial
    views on a mobile app. The route tells your app what view to match with what keyword,
    and lastly you set import statements to tell Angular who can access this module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the routing is set, you can get the footer, header, and body of the
    page to display. All you have to do is open src/app/app.component.html and update
    from the welcome page’s HTML code to the following three lines:<app-header></app-header><router-outlet></router-outlet><app-footer></app-footer>To
    test the changes you made to your application, you don’t need to publish your
    app again or run any scripts; just save the files and run the same serve command  you
    ran before in Terminal.> ng serve⌈wdm⌋: Compiled successfully.'
  prefs: []
  type: TYPE_NORMAL
- en: The serve script includes scripts to watch for changes in files and update your
    app automatically, so all you have to do when you make a change to your files
    is go back to the browser. Most of the time you won’t even need to refresh your
    web page; the changes will be there automatically. Navigate to http://localhost:4200
    to see the changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to go directly to the transfer page, all you have to do is
    add the keyword you selected at the end of the URL as you set up the routing mechanism:
    http://localhost:4200/transfer. See Figure [9-8](#Fig8).![../images/475651_1_En_9_Chapter/475651_1_En_9_Fig8_HTML.jpg](../images/475651_1_En_9_Chapter/475651_1_En_9_Fig8_HTML.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9-8
  prefs: []
  type: TYPE_NORMAL
- en: Ethdapp header, footer, and transfer page
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download this step here: [https://github.com/Apress/the-blockchain-developer/chapter9/step2.zip](https://www.scala-sbt.org/1.x/docs/Installing-sbt-on-Windows.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Styling an Angular App
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your app at this point is not styled and only shows text with a header, the
    page, and a footer; however, before you start styling, it’s helpful to understand
    the Angular style architecture to ensure you don’t end up with a Cascading Style
    Sheets (CSS) file that is too big to manage. You can style your app on a global
    level with styles that you need across your entire app as well as a specific style
    unique to only one component.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, it would be neat to sprint from zero to a styled app quickly.
    This can be done with Angular Material. Angular Material gives you a shortcut
    to get a consistent “look” to your app without all the hassle of thinking about
    cross-browser, cross-device programming. Let’s take a look.
  prefs: []
  type: TYPE_NORMAL
- en: Angular-Style Architecture
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Angular  is set up to have a global CSS file. That CSS file is called style.css,
    and you can find it in the root of the project. src/style.css holds the styles
    that you want to use for your entire app, such as fonts, themes, styles for all
    the components, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: As you have seen, each component also includes a private CSS file. The specific
    component CSS file is where you put styles that are unique and used only for that
    component.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, /src/app/components/footer/footer.component.css holds the styles
    specific for the footer component.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Material
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Right now, your starter application is fast because it includes minimal code;
    however, there is a potential performance issue as you add more and more components,
    assets, and style to your app. You can get your app bloated easily, and every
    millisecond dealy counts.
  prefs: []
  type: TYPE_NORMAL
- en: The other potential issue is testing. All the different browsers, versions of
    browsers, screen sizes, and devices need to be tested, and creating your pages
    from scratch will require rigid testing and a quality assurance (QA) team to ensure
    it works consistency across devices.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Material solves all these issues plus provides accessibility and internationalization.
    That is because Angular Material is optimized for Angular and built by the Angular
    team, so it integrates seamlessly with Angular. It has already passed all these
    compatibility tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information, check the Angular Material getting started page: [https://material.angular.io/guide/getting-started](https://material.angular.io/guide/getting-started)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Install Angular Material
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are a few ways to install Material. Because you have installed the Angular
    DevKit, you are able to just run the ng add command to get the Angular Material
    library. You need to first install cdk because it’s a dependency.> ng add @angular/cdkNext,
    install Material.> ng add @angular/materialNotice that the output asks you which
    theme color you would like with links. I will cover themes in the next section
    of this chapter, but for now, select the first or any color you prefer.? Choose
    a prebuilt theme name, or "custom" for a custom theme: (Use arrow keys)□ Indigo/Pink       [
    Preview: https://material.angular.io?theme=indigo-pink ]  Deep Purple/Amber  [
    Preview: https://material.angular.io?theme=deeppurple-amber ]  Pink/Blue Grey     [
    Preview: https://material.angular.io?theme=pink-bluegrey ]  Purple/Green       [
    Preview: https://material.angular.io?theme=purple-green ]You can also set up gesture
    recognitions and animations.? Set up HammerJS for gesture recognition? Yes? Set
    up browser animations for Angular Material? YesThe expected output should be showing
    the files that were updated:UPDATE package.jsonUPDATE angular.jsonUPDATE src/app/app.module.tsUPDATE
    src/index.htmlUPDATE src/styles.css'
  prefs: []
  type: TYPE_NORMAL
- en: Import Angular Material Modules
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Next, you want to modify your app to have Angular Material include animations,
    Material icons, gesture support, and component modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your project, you will only be using component modules and not all the features
    that Angular Material has to offer; what you need to do is import NgModule for
    each component you want to use. Open src/app/app.module.ts and add the import
    statements.import {  MatButtonModule,  MatCheckboxModule,  MatInputModule,  MatSelectModule,  MatDatepickerModule,  MatNativeDateModule}
    from ''@angular/material'';Next, update the import statements of @NgModule to
    include the Material modules you imported.imports: [    BrowserModule,    AppRoutingModule,    BrowserAnimationsModule,    MatButtonModule,    MatInputModule,    MatDatepickerModule,    MatNativeDateModule,    MatCheckboxModule,    MatSelectModule  ]'
  prefs: []
  type: TYPE_NORMAL
- en: That’s it. You can now have access to the Angular Material components you included.
  prefs: []
  type: TYPE_NORMAL
- en: Theme Your Angular Material App
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you have access to the Angular Material components, you can use themes
    to style them. A *theme* is a set of colors that will be used on your Angular
    Material components.
  prefs: []
  type: TYPE_NORMAL
- en: In Angular Material, a theme is created by creating multiple palettes.
  prefs: []
  type: TYPE_NORMAL
- en: '*Primary palette*: These are the colors most used across all screens and components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Accent palette*: These are the colors used for the button and interactive
    elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Warn palette*: These are the colors for errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Foreground palette*: These are the colors for text and icons.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Background palette*: These are the colors for an element’s backgrounds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Angular Material, all theme styles are generated statically at build time
    to avoid slowing the app on startup.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Material comes prepackaged with several prebuilt theme CSS files. As
    you probably recall, you had an option of selecting a theme to use when you installed
    Material.
  prefs: []
  type: TYPE_NORMAL
- en: These theme files also include all of the styles for the core (styles common
    to all components), so you have to include only a single CSS file for Angular
    Material in your app. You can include a theme file directly into your application
    from @angular/material/prebuilt-themes.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the available prebuilt themes:'
  prefs: []
  type: TYPE_NORMAL
- en: deeppurple-amber.css
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: indigo-pink.css
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pink-bluegrey.css
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: purple-green.css
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You are using Angular CLI here, so you can simply include the style you want
    in the global src/styles.css file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Originally it has this initial precode:html, body { height: 100%; }body { margin:
    0; font-family: ''Roboto'', sans-serif; }Add the following import statement at
    the top of the document:@import "~@angular/material/prebuilt-themes/indigo-pink.css";While
    you have the src/style.css file open, you can also create a style for a container,
    a paragraph, and a button that you can use across your app for your pages.p {  padding-left:
    20px;  font-size: 12px;}.container {  margin-right: auto;  margin-left: auto;  padding:
    20px 15px 30px;  width: 750px;}button {  color: #ffffff;  background-color: #611BBD;  border-color:
    #130269;  display: inline-block;  margin-bottom: 0;  font-weight: normal;  text-align:
    center;  vertical-align: middle;  touch-action: manipulation;  cursor: pointer;  white-space:
    nowrap;  padding: 6px 12px;  font-size: 12px;  line-height: 1.42857143;  border-radius:
    4px;  -webkit-user-select: none;  -moz-user-select: none;  -ms-user-select: none;  user-select:
    none;}'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can compare your files with mine: [https://github.com/Apress/the-blockchain-developer/chapter9/step3.zip](https://www.scala-sbt.org/1.x/docs/Installing-sbt-on-Windows.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Creating Content
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a skeleton app with a header, body, and footer. The
    body can be switched between your start page and transfer page by changing the
    URL in the browser. You also imported and injected Material modules and set up
    global styles for your app. The next step is to create actual content to replace
    the temporary text message you placed in your header, footer, and start components.
  prefs: []
  type: TYPE_NORMAL
- en: Footer Component
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For the footer component, you will just replace the message for your company
    copyright. To do so, all you need to do is open src/app/components/footer/footer.component.html
    and replace the default code.<p>  footer works!</p>Replace the code by creating
    a div container with the style you added to the global CSS file.<div class="ng-scope">  <div
    class="container">    <p>Copyright (c) 2019 Company Name. All Rights Reserved.</p>  </div></div>You
    are also going to create a specific style for the footer component, so every time
    you use the p tag, your font will be size 12px with no padding on the left. Open
    src/app/components/footer/footer.component.css and insert the following:p {  padding-left:
    0;  font-size: 11px;}'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that you defined the <p> tag twice, once in the global CSS file and one
    at the component level. What’s going to happen is that the global <p> tag will
    be overwritten by the component <p>, so you can use the <p> tag for your footer
    and a different <p> tag  for other components such as the start and transfer pages
    while keeping your HTML code free of CSS code.
  prefs: []
  type: TYPE_NORMAL
- en: Header Component
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For the header component, you will create a navigation menu to be able to switch
    between the start page and the transfer page. For styles specific to the header
    component, open src/app/components/header/header.component.css and add the nav
    list styles..nav {  margin-bottom: 0;  padding-left: 0;  list-style: none;}li
    {  display: block;  float: left;  width: 100px;  height: 25px;  padding: 5px;}.nav>li>a
    {  margin-bottom: 0;  padding-left: 0;  font-weight: 500;  font-size: 12px;  text-transform:
    uppercase;  position: relative;}For src/app/components/header/header.component.html,
    you create a container and a list of the two links to the pages start and transfer.
    To do so replace the initial code:<p>  header works!</p>with the following;<div
    class="ng-scope">  <div class="container">    <ul class="nav">      <li>        <a
    routerLink=''/start''>home</a>      </li>      <li>        <a routerLink=''/transfer''>transfer</a>      </li>    </ul>  </div></div>The
    working dapp now includes basic styling and functional navigation, as shown in
    Figure [9-9](#Fig9).![../images/475651_1_En_9_Chapter/475651_1_En_9_Fig9_HTML.jpg](../images/475651_1_En_9_Chapter/475651_1_En_9_Fig9_HTML.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9-9
  prefs: []
  type: TYPE_NORMAL
- en: Ethdapp with basic styling and working navigation
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download this step here: [https://github.com/Apress/the-blockchain-developer/chapter9/step4.zip](https://www.scala-sbt.org/1.x/docs/Installing-sbt-on-Windows.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Transfer Component
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The transfer component  will hold a form that you will submit to transfer Ethereum
    coins from one account address to another. You will be using the forms module
    to expedite creating your form. To do so, you need to include the Material FormsModule
    and ReactiveFormsModule form modules in app.module.ts just as you did with other
    Material modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open src/app/app.module.ts and add the following import statement:import {
    FormsModule, ReactiveFormsModule } from ''@angular/forms'';You also want to update
    the import statement  .  imports: [    FormsModule,    ReactiveFormsModule,    ..]'
  prefs: []
  type: TYPE_NORMAL
- en: You will be using the <mat-form-field> tag, which represents a component that
    wraps several Angular Material components together and applies common text field
    styles such as the underline, floating label, and hint messages. This will expedite
    development as you won’t need to implement all of these and test them on multiple
    devices/browsers.
  prefs: []
  type: TYPE_NORMAL
- en: The form field is the wrapper component named <mat-form-field>. You can use
    any of the form field controls (such as input, textarea, list, etc.).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find information about mat-forms here: [https://material.angular.io/components/form-field/overview](https://material.angular.io/components/form-field/overview)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'For src/app/components/transfer/transfer.component.ts, you will update the
    initial code. First you need to import the components you will be using; in this
    case, you need to initialize the class and use form, form control, and validators.import
    {FormBuilder, FormControl, FormGroup, Validators} from ''@angular/forms'';Then
    you need to update the component definition to implement the OnInit method  .export
    class TransferComponent implements OnInit {You will be using a flag to indicate
    whether the form was submitted and to create an instance of a form group, as well
    as an object called user, to hold the user’s information.  formSubmitted: Boolean
    = false;  userForm: FormGroup;  user: any;To validate your form, you will define
    the messages in case the form is not filled in correctly. Each form control needs
    to be defined with the required fields and messages.  account_validation_messages
    = {    ''transferAddress'': [      { type: ''required'', message: ''Transfer Address
    is required'' },      { type: ''minLength'', message: ''Transfer Address must
    be 42 characters long'' },      { type: ''maxLength'', message: ''Transfer Address
    must be 42 characters long'' }    ],    ''amount'': [      { type: ''required'',
    message: ''Amount is required'' },      { type: ''pattern'', message: ''Amount
    must be a positive number'' }    ],    ''remarks'': [      { type: ''required'',
    message: ''Remarks are required'' }    ]  };When you create the constructor, you
    need to include the FormBuilder component  to be able to generate the form.  constructor(private
    fb: FormBuilder) { }When your component gets init, you will set the formSubmitted
    flag to false and set default values for the user’s information. You then will
    call a method to go fetch the user’s account and balance, which you will implement
    later. Lastly, you will call the createForms method that will generate the form.  ngOnInit()
    {    this.formSubmitted = false;    this.user = {address: '''', transferAddress:
    '''', balance: '''', amount: '''', remarks: ''''};    this.getAccountAndBalance();    this.createForms();  }The
    createForms method will generate the form controls by passing the validators and
    data.  createForms() {    this.userForm = this.fb.group({      transferAddress:
    new FormControl(this.user.transferAddress, Validators.compose([        Validators.required,        Validators.minLength(42),        Validators.maxLength(42)      ])),      amount:
    new FormControl(this.user.amount, Validators.compose([        Validators.required,        Validators.pattern(''^[+]?([.]\\d+|\\d+[.]?\\d*)$'')      ])),      remarks:
    new FormControl(this.user.remarks, Validators.compose([        Validators.required      ]))    });  }The
    getAccountAndBalance method  will set the user account’s address and balance;
    for now you are using dummy data, but you will implement the actual service later
    in this chapter.  getAccountAndBalance = () => {    const that = this;    that.user.address
    = ''0xd8d0101f83e79fb4e8d21134f5325e64816bd6a0'';    that.user.balance = 0;    //
    TODO: fetch data  }Lastly, once you submit your form, you need a method to handle
    the data and call the service. submitForm will be used by checking whether the
    form is valid, and then later you will call the service component you will create.  submitForm()
    {    if (this.userForm.invalid) {      alert(''transfer.components :: submitForm
    :: Form invalid'');      return;    } else {      console.log(''transfer.components
    :: submitForm :: this.userForm.value'');      console.log(this.userForm.value);      //
    TODO: service call    }  }}For transfer.component.html, you will set the form
    tag to call the submitForm method once the form is submitted.<form [formGroup]="userForm"
    (ngSubmit)="submitForm()"      novalidate autocomplete="off">Next, you will create
    the wrapping divs and use data binding to display the user’s account address and
    balance.  <div class="container">    <div class="transfer-container">      <div>        Address:
    {{user.address}} <br/>        Balance: {{user.balance}} Eth      </div>'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that you have used the transfer-container style  , which you have not
    yet defined; you will define it in your CSS file, and it will be used to format
    your form.
  prefs: []
  type: TYPE_NORMAL
- en: 'For form controls, you need input boxes for the account you are transferring
    the funds to, the amount, and a message. You also need to set up your validations.      <mat-form-field>        <input
    matInput placeholder="Transfer Address" name="transferAddress" formControlName="transferAddress"               maxlength="42"
    minlength="42" required>        <mat-error *ngFor="let validation of account_validation_messages.transferAddress">          <mat-error
    *ngIf="userForm.get(''transferAddress'').hasError(validation.type) && (userForm.get(''transferAddress'').dirty
    || userForm.get(''transferAddress'').touched)">{{validation.message}}</mat-error>        </mat-error>      </mat-form-field>      <mat-form-field>        <input
    matInput placeholder="Amount" name="amount" formControlName="amount" required>        <mat-error
    *ngFor="let validation of account_validation_messages.amount">          <mat-error
    *ngIf="userForm.get(''amount'').hasError(validation.type) && (userForm.get(''amount'').dirty
    || userForm.get(''amount'').touched)">{{validation.message}}</mat-error>        </mat-error>      </mat-form-field>      <mat-form-field>        <input
    matInput placeholder="Remarks" name="remarks" formControlName="remarks"               maxlength="42"
    required>        <mat-error *ngFor="let validation of account_validation_messages.remarks">          <mat-error
    *ngIf="userForm.get(''remarks'').hasError(validation.type) && (userForm.get(''remarks'').dirty
    || userForm.get(''remarks'').touched)">{{validation.message}}</mat-error>        </mat-error>      </mat-form-field>Lastly,
    remember to close the divs and form, as well as include a submit button.      <div
    style="width: 100px">        <button type="submit">Transfer Ether</button>      </div>    </div>  </div></form>For
    transfer.component.css, you will be using the transfer-container div to format
    your form horizontally..transfer-container {  display: flex;  flex-direction:
    column;}.transfer-container > * {  width: 100%;}That’s it. Now you can check your
    dapp in the browser, and you should be able to see the user’s default data, test
    the form, validate it, and submit the form. See Figure [9-10](#Fig10).![../images/475651_1_En_9_Chapter/475651_1_En_9_Fig10_HTML.jpg](../images/475651_1_En_9_Chapter/475651_1_En_9_Fig10_HTML.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9-10
  prefs: []
  type: TYPE_NORMAL
- en: Ethdapp transfer page including user’s info, validators, and submit button
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download this step here: [https://github.com/Apress/the-blockchain-developer/chapter9/step5.zip](https://github.com/Apress/the-blockchain-developer/chapter9/step5.zip)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Angular Directives
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Creating directives in Angular gives you the ability to create your own custom
    HTML tags with just a few lines of code, just as you saw in the Material form.
    You were able to include custom tags that wrap many components. At a high level,
    directives are markers on a DOM element.
  prefs: []
  type: TYPE_NORMAL
- en: These markers can point to any DOM component, from an attribute to an element
    name or even a comment or CSS class. These markers then tell the AngularJS's HTML
    compiler to attach a specified behavior or to transform the entire DOM element
    and its children based on specific logic.
  prefs: []
  type: TYPE_NORMAL
- en: Angular comes with many of these directives built-in. However, during development,
    it’s a good chance you will be creating your own directives. Your dapp is simple
    now, so you don’t need to create any directive, and it’s beyond the scope of this
    chapter to explain this. When you do need to generate a skeleton directive, use
    the Angular CLI just as you generated other components.> ng generate directive
    {directive-name}
  prefs: []
  type: TYPE_NORMAL
- en: Although you are not creating a directive in your app, I wanted to introduce
    you to the concept as it’s an integral part of creating an Angular project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter, you took a deep dive into what a dapp is and looked at dapp
    classifications and projects. You learned how to start your own dapp project by
    breaking the process into five steps: writing a white paper, launching an ICO,
    developing the dapp, launching it, and marketing your dapp.'
  prefs: []
  type: TYPE_NORMAL
- en: You then looked at why to use Angular. Next, you created an Angular dapp, first
    ensuring the prerequisites were installed and installing the Angular CLI. Then
    you created an Angular project and served the application.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you learned how to import your Angular project to WebStorm or create a
    new project. You looked at the pieces that make Angular such as components, modules,
    and directives. You also learned how to style the dapp by understanding Angular-style
    architecture and working with Angular Material.
  prefs: []
  type: TYPE_NORMAL
- en: You started building components and created content; you split your app into
    a footer, header, and body and created a custom component called transfer that
    includes a form to be able to later transfer tokens.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will create a transfer smart contract and a Truffle
    development project as well as connect to the Ganache development network. You
    will learn how to work with the Ethereum network via Truffle and test your smart
    contract. You also will link your dapp with the Ethereum Network’s web3 library
    and connect via MetaMask.
  prefs: []
  type: TYPE_NORMAL
