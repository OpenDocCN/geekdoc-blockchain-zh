- en: © Elad Elrom 2019Elad ElromThe Blockchain Developer[https://doi.org/10.1007/978-1-4842-4847-8_10](https://doi.org/10.1007/978-1-4842-4847-8_10)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © Elad Elrom 2019Elad ElromThe Blockchain Developer[https://doi.org/10.1007/978-1-4842-4847-8_10](https://doi.org/10.1007/978-1-4842-4847-8_10)
- en: '10. Build Dapps with Angular: Part II'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10. 使用Angular构建Dapp：第II部分
- en: Elad Elrom^([1](#Aff2) )(1)New York, NY, USA
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Elad Elrom^([1](#Aff2) )(1)New York, NY, USA
- en: In the previous chapter, you started developing your dapp. Specifically, you
    learned about dapp classifications and projects and that you can break your own
    dapp project into five steps. You then looked at why to use Angular and its benefits.
    Next, you created an Angular project, first ensuring the prerequisites were installed
    and then installing the Angular CLI. You looked at the pieces that make up Angular
    such as components, modules, and directives. You also learned how to style a dapp
    by understanding Angular-style architecture and working with Angular Material.
    You started building your own custom components and creating content; you split
    your app into a footer, header, and body and created a custom transfer component
    that you will be using in this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你开始开发你的dapp。具体来说，你了解了dapp的分类和项目，以及你可以将你的dapp项目分为五个步骤。然后你查看了为什么要使用Angular以及它的好处。接下来，你创建了一个Angular项目，首先确保预先安装了必备条件，然后安装了Angular
    CLI。你了解了组成Angular的部分，如组件、模块和指令。你还学会了如何通过理解Angular风格架构和工作于Angular Material来样式化dapp。你开始构建自己的自定义组件和创建内容；你将你的应用分为页脚、页头和正文，并创建了一个自定义的传输组件，你将在本章中使用它。
- en: 'In this chapter, I will cover the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将介绍以下内容：
- en: Creating the dapp’s smart contract with Truffle
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Truffle创建dapp的智能合约
- en: Integrating a smart contract in your dapp’s Angular project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的dapp的Angular项目中集成智能合约
- en: Linking and connecting your dapp to the Ethereum network
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的dapp连接到以太坊网络
- en: 'You will be utilizing the tools I have been covering so far: the Angular CLI,
    Truffle, ganache-cli, and MetaMask. You will create a smart contract that you
    will use for your dapp with Truffle, and then you’ll use the web3 library to connect
    to the Ethereum local network and call the smart contract’s functions and events.
    MetaMask will be used to manage and connect to your account.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你将利用我到目前为止介绍的工具：Angular CLI、Truffle、ganache-cli和MetaMask。你将使用Truffle创建一个智能合约，用于你的dapp，然后你将使用web3库连接到以太坊本地网络，并调用智能合约的功能和事件。MetaMask将用于管理和连接到你的账户。
- en: Tip
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It’s recommended that you complete the previous chapter and Chapter [5](475651_1_En_5_Chapter.xhtml)
    prior to going through this chapter in order to fully understand the examples
    here, which build on the concepts, tools, and installed libraries from Chapters
    [9](475651_1_En_9_Chapter.xhtml) and [5](475651_1_En_5_Chapter.xhtml).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 建议你在学习本章之前完成上一章和第[5](475651_1_En_5_Chapter.xhtml)章，以便完全理解这里的示例，这些示例基于第[9](475651_1_En_9_Chapter.xhtml)章和第[5](475651_1_En_5_Chapter.xhtml)章中介绍的概念、工具和已安装的库。
- en: Transfer a Smart Contract
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传输智能合约
- en: You already have the front-end logic to transfer tokens in your app from the
    previous chapter; however, you don’t have a smart contract to interact with the
    blockchain. Smart contracts can be created before the front-end portion, after,
    or in parallel (if you work with a team of developers).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经在上一章中为你的应用创建了前端逻辑，用于传输代币；然而，你还没有一个智能合约与区块链交互。智能合约可以在前端部分之前、之后或同时创建（如果你与开发团队一起工作）。
- en: You already created an Ethereum smart contract in Chapter [5](475651_1_En_5_Chapter.xhtml),
    so the steps in this section should be familiar to you. Feel free to revisit Chapter
    [5](475651_1_En_5_Chapter.xhtml) to refresh your memory, as I won’t go into much
    detail regarding the tools and commands used in this chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经在第[5](475651_1_En_5_Chapter.xhtml)章中创建了一个以太坊智能合约，所以本节中的步骤应该对你来说很熟悉。随意复习第[5](475651_1_En_5_Chapter.xhtml)章以刷新你的记忆，因为我在本章中不会详细介绍使用的工具和命令。
- en: 'To get started, you will create a new folder in your ethdapp project to hold
    the Truffle project. You can download the latest step, where you left off from,
    here: [https://github.com/Apress/the-blockchain-developer/chapter9/step5.zip](https://github.com/Apress/the-blockchain-developer/chapter9/step5.zip)
    .'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 开始之前，你将在你的ethdapp项目中创建一个新文件夹，以保存Truffle项目。你可以从这里下载最新的步骤，继续你上次的进度：[https://github.com/Apress/the-blockchain-developer/chapter9/step5.zip](https://github.com/Apress/the-blockchain-developer/chapter9/step5.zip)
    。
- en: In real-life projects with multiple developers, the smart contract could be
    a separate project. For simplicity, you will be including it in your project so
    you can utilize the WebStorm Terminal window’s bottom tab to run commands.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在具有多个开发者的实际项目中，智能合约可能是一个单独的项目。为了简化，你将将其包含在你的项目中，这样你就可以利用WebStorm终端窗口的底部标签来运行命令。
- en: Start by creating a folder called truffle inside your project and initialize
    Truffle to create the project. You can see the expected output in Figure [10-1](#Fig1).>
    mkdir ethdapp/truffle> cd truffle> truffle init![../images/475651_1_En_10_Chapter/475651_1_En_10_Fig1_HTML.jpg](../images/475651_1_En_10_Chapter/475651_1_En_10_Fig1_HTML.jpg)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先在你的项目中创建一个名为truffle的文件夹，并初始化Truffle以创建项目。你可以在图[10-1](#Fig1)中看到预期的输出。
- en: Figure 10-1
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-1
- en: Output of creating a Truffle project
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Truffle项目的输出
- en: Tip
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'If you get errors such as “Error: Truffle Box,” uninstall Truffle, and then
    re-install it and try again.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你遇到错误，如“Error: Truffle Box”，则卸载Truffle，然后重新安装并再次尝试。'
- en: To re-install truffle in case of error messages, remove truffle globally and
    install it again.> npm uninstall -g truffleIf you do not have Truffle installed
    or need to re-install Truffle globally, run the install command  .> npm install
    -g truffleAfter re-installing or performing a fresh install, run the truffle init
    command again and make sure you run the test in a new Terminal window to ensure
    the changes were applied.> truffle compile> truffle migrate> truffle testYou can
    compare your results with mine, shown in Figure [10-2](#Fig2).![../images/475651_1_En_10_Chapter/475651_1_En_10_Fig2_HTML.jpg](../images/475651_1_En_10_Chapter/475651_1_En_10_Fig2_HTML.jpg)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现错误消息需要重新安装truffle，请先卸载truffle全局，然后再次安装。
- en: Figure 10-2
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-2
- en: Truffle compiling, migrating, and testing your project
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Truffle编译、迁移和测试你的项目
- en: Create a Smart Contract
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建智能合约
- en: 'You’ll create a smart contract and call it Transfer.sol; put it here: truffle/contracts/Transfer.sol.
    The contract will allow you to transfer funds from one account to another. First
    navigate to the location of the contracts in Truffle and use an editor to create
    a new file.>  cd ethapp/truffle/contracts> vim Transfer.solThe complete Transfer.sol
    code  is listed here:pragma solidity ^0.5.0;contract Transfer {  address payable
    from;  address payable to;  constructor() public {    from = msg.sender;  }  event
    Pay(address _to, address _from, uint amt);  function pay( address payable _to
    ) public payable returns (bool) {      to = _to;      to.transfer(msg.value);      emit
    Pay(to, from, msg.value);      return true;  }}Let’s walk through the code. First
    you need to define the solidity version  you will be using and the contract name.pragma
    solidity ^0.5.0;contract Transfer {Next, define the from and to addresses and
    the constructor.  address payable from;  address payable to;  constructor() public
    {    from = msg.sender;  }You will be using a Pay event  that will be dispatched
    once the pay function is used.  event Pay(address _to, address _from, uint amt);The
    pay function uses the Pay event to interact with the network and do the actual
    transfer.  function pay( address payable _to ) public payable returns (bool) {      to
    = _to;      to.transfer(msg.value);      emit Pay(to, from, msg.value);      return
    true;  }}'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你将创建一个智能合约，并将其命名为Transfer.sol；将其放在这里：truffle/contracts/Transfer.sol。该合约允许你将资金从一个账户转移到另一个账户。首先导航到Truffle中合约的位置，并使用编辑器创建一个新文件。
- en: 'That’s it. You kept it basic and simple with only one event and one function.
    You can download this step from here: [https://github.com/Apress/the-blockchain-developer/chapter10/step1.zip](https://github.com/Apress/the-blockchain-developer/chapter10/step1.zip)
    .'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这些。你只保留了一个事件和一个函数，使得一切简单明了。你可以从这里下载这个步骤：[https://github.com/Apress/the-blockchain-developer/chapter10/step1.zip](https://github.com/Apress/the-blockchain-developer/chapter10/step1.zip)
    .
- en: Create the Truffle Development Network
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Truffle开发网络
- en: 'The next step is to replace the truffle/truffle-config.js file with the following
    configuration:module.exports = {  networks: {    development: {      host: "127.0.0.1",      port:
    8545,      network_id: "*",      gas: 5000000,      gasPrice: 100000000000    }  }};'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '下一步是替换truffle/truffle-config.js文件，用以下配置：module.exports = {  networks: {    development:
    {      host: "127.0.0.1",      port: 8545,      network_id: "*",      gas: 5000000,      gasPrice:
    100000000000    }  }};'
- en: Notice that you point to port 8545, which will help you when you run MetaMask
    later in this chapter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意你指向了端口8545，这将在本章稍后当你运行MetaMask时帮助你。
- en: Deploy the Smart Contract
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署智能合同
- en: The other configuration file you need is the deploy contract file. Create a
    deployment file and call it truffle/migrations/2_deploy_contracts.js. In this
    config file all you do is point to the Transfer smart contract SOL code you created.var
    Transfer = artifacts.require("./Transfer.sol");module.exports = function(deployer)
    {  deployer.deploy(Transfer);};Now you are ready to create your network on port
    8545 with Ganache, so navigate to the Truffle project, and run this command:>
    cd ethdapp/truffle> ganache-cli -p 8545
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要另一个配置文件，即部署合同文件。创建一个部署文件，命名为truffle/migrations/2_deploy_contracts.js。在这个配置文件中，你只需指向你创建的Transfer智能合同SOL代码。var
    Transfer = artifacts.require("./Transfer.sol");module.exports = function(deployer)
    {  deployer.deploy(Transfer);};现在你准备好使用Ganache在端口8545上创建你的网络，所以请导航到Truffle项目，并运行此命令：>
    cd ethdapp/truffle> ganache-cli -p 8545
- en: Tip
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you get any errors such as “NODE_MODULE_VERSION mismatch,” uninstall and
    re-install ganache-cli. Then open a new Terminal window and ensure it’s running
    correctly.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到任何错误，例如“NODE_MODULE_VERSION不匹配”，请卸载并重新安装ganache-cli。然后打开一个新的终端窗口，确保它正在正确运行。
- en: To re-install ganache-cli if needed, run this:> npm uninstall -g ganache-cli>
    npm install -g ganache-cliTo ensure it’s running correctly, run this:> ganache-cli
    helpNext, in a new Terminal window, let’s compile and deploy your contract while
    ganache  is still running.> truffle compileThe compile output should provide success,
    creating your contract in the Contract folder.Compiling ./contracts/Transfer.sol...Writing
    artifacts to ./build/contractsThe file that was created is Transfer.json, which
    you will be using in your dapp to interact with the network. Next, you will deploy
    your contract with the migrate command  .> truffle migrate --network developmentThe
    output should confirm the contract was migrated to the network, as shown in Figure
    [10-3](#Fig3).![../images/475651_1_En_10_Chapter/475651_1_En_10_Fig3_HTML.jpg](../images/475651_1_En_10_Chapter/475651_1_En_10_Fig3_HTML.jpg)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要重新安装ganache-cli，请运行此命令：> npm uninstall -g ganache-cli> npm install -g ganache-cli为确保其正确运行，请运行此命令：>
    ganache-cli help接下来，在另一个终端窗口中，当ganache仍在运行时，让我们编译并部署你的合同。> truffle compile编译输出应该提供成功，在Contract文件夹中创建你的合同。编译./contracts/Transfer.sol...将工件写入./build/contracts创建的文件是Transfer.json，你将在dapp中使用它来与网络交互。接下来，你将使用migrate命令部署你的合同。>
    truffle migrate --network development输出应确认合同已迁移到网络，如图[10-3](#Fig3)所示。![../images/475651_1_En_10_Chapter/475651_1_En_10_Fig3_HTML.jpg](../images/475651_1_En_10_Chapter/475651_1_En_10_Fig3_HTML.jpg)
- en: Figure 10-3
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-3
- en: Truffle migrate project
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Truffle 迁移项目
- en: The output summary should also show that the deployment went well and a charge.Summary=======>
    Total deployments:   2> Final cost:          0.0525573 ETH
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 输出摘要还应显示部署顺利进行并且有收费。摘要=======> 总部署：      2> 最终费用：          0.0525573 ETH
- en: Truffle Console
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Truffle 控制台
- en: Now that you have the contract compiled and deployed, to interact with the network,
    start a console, as shown here:> truffle console --network development
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经将合同编译并部署，要与网络交互，请启动一个控制台，如下所示：> truffle console --network development
- en: 'A good resource for the commands you can run against the Truffle CLI is at
    the Ethereum JavaScript API wiki page here: [https://github.com/ethereum/wiki/wiki/JavaScript-API](https://github.com/ethereum/wiki/wiki/JavaScript-API)
    .'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '你可以针对Truffle CLI运行的命令的好资源是在Ethereum JavaScript API维基页面 here: [https://github.com/ethereum/wiki/wiki/JavaScript-API](https://github.com/ethereum/wiki/wiki/JavaScript-API)
    .'
- en: Accounts
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 账户
- en: If you run getAccounts, you’ll get a list of accounts associated with your wallet.truffle(development)>
    web3.eth.getAccounts()[ '0x1eFf25A40C82EA65BC88E45d02368897EC922FEf',  '0xC135058b33d5df78636Cf14b74F281f95c4a407c',  '0xe682300Ef633F7d4f0d8Cb07c1bAD5d9B4eaE974'....]You
    can then define address1 and address2 as the first and second accounts.truffle(development)>
    web3.eth.getAccounts().then( function(a){address1=a[0]})undefinedtruffle(development)>
    web3.eth.getAccounts().then( function(a){address2=a[1]})undefinedNow that they
    are defined, you can call them and get the first and second accounts in the output.truffle(development)>
    address1'0x1eFf25A40C82EA65BC88E45d02368897EC922FEf'truffle(development)> address2'0xC135058b33d5df78636Cf14b74F281f95c4a407c'You
    can also use getBalance to get the balance you have in these addresses.truffle(development)>
    web3.eth.getBalance(address1)'99942134400000000000'truffle(development)> web3.eth.getBalance(address2)'100000000000000000000'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行getAccounts，你会得到与你钱包关联的账户列表。truffle(development)> web3.eth.getAccounts()[
    '0x1eFf25A40C82EA65BC88E45d02368897EC922FEf', '0xC135058b33d5df78636Cf14b74F281f95c4a407c',
    '0xe682300Ef633F7d4f0d8Cb07c1bAD5d9B4eaE974'...]。然后你可以定义address1和address2为第一个和第二个账户。truffle(development)>
    web3.eth.getAccounts().then(function(a){address1=a[0]})undefinedtruffle(development)>
    web3.eth.getAccounts().then(function(a){address2=a[1]})undefined现在它们已经被定义了，你可以在输出中调用它们并获取第一个和第二个账户。truffle(development)>
    address1'0x1eFf25A40C82EA65BC88E45d02368897EC922FEf'truffle(development)> address2'0xC135058b33d5df78636Cf14b74F281f95c4a407c'你也可以使用getBalance获取这些地址的余额。truffle(development)>
    web3.eth.getBalance(address1)'99942134400000000000'truffle(development)> web3.eth.getBalance(address2)'100000000000000000000'
- en: Test the Transfer of a Smart Contract
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试智能合约的转移
- en: 'Now that you have defined two addresses and you know the balance in these accounts,
    you can define your contract and pass some funds between the accounts. To do so,
    first define the contract and call it transferSmartContract.truffle(development)>
    Transfer.deployed().then(function(instance){transferSmartContract = instance;})undefinedNext,
    run the transferSmartContract variable you defined to ensure it worked and show
    the object value.> transferSmartContractNow you can transfer funds with your smart
    contract between the two accounts. Account 2 holds a nice round number, so you
    will transfer 5 eth.> transferSmartContract.pay(address2, {from: address1, value:
    5});The command output shows information about the transaction and mining. Now
    you are able to see the balance updated.> web3.eth.getBalance(address1);''99942134399999999995''>
    web3.eth.getBalance(address2);''100000000000000000005'''
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '既然你已经定义了两个地址并知道这些账户的余额，你可以定义你的合约并在账户之间转移一些资金。为此，首先定义合约并将其称为transferSmartContract。truffle(development)>
    Transfer.deployed().then(function(instance){transferSmartContract = instance;})undefined接下来，运行你定义的transferSmartContract变量以确保它工作正常并显示对象值。>
    transferSmartContract现在你可以用你的智能合约在两个账户之间转移资金。账户2有一个很圆润的数字，所以你会转移5 eth。> transferSmartContract.pay(address2,
    {from: address1, value: 5});命令输出显示有关交易和采矿的信息。现在你能够看到余额更新了。> web3.eth.getBalance(address1);''99942134399999999995''>
    web3.eth.getBalance(address2);''100000000000000000005'''
- en: As you can see, the balance changed, and you were able to transfer tokens between
    two addresses.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，余额发生了变化，你能够在两个地址之间转移代币。
- en: Link with the Ethereum Network
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与以太坊网络的链接
- en: You got your contract working in Terminal; the next step is for your dapp to
    interact with the contract. This is done via web3.js, which is a collection of
    libraries allowing you to interact with a local or remote Ethereum node using
    an HTTP or IPC connection. First navigate back into your Angular project folder
    and then install web3.js with the flag --save to save the library you are installing.>
    cd ethdapp/> npm install web3 –save+ web3@1.0.0-beta.55
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经在终端中让你的合约运行；下一步是你 的dapp与合约交互。这是通过web3.js完成的，web3.js是一组库，允许你使用HTTP或IPC连接与本地或远程以太坊节点交互。首先回到你的Angular项目文件夹，然后使用--save标志安装web3.js以保存你安装的库。>
    cd ethdapp/> npm install web3 –save+ web3@1.0.0-beta.55
- en: If installation went well, you will see in the output that the version did install.
    At the time of writing, web3 is at version 1.0.0-beta55.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果安装成功，你将在输出中看到版本确实已经安装。在撰写本文时，web3版本为1.0.0-beta55。
- en: You also need to install truffle-contract, which provides wrapper code that
    makes interaction with your contract easier. At the time of writing, the latest
    is version 4.0.7 but will probably change by the time you are reading this book.>  npm
    install truffle-contract –save+ truffle-contract@4.0.15
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要安装truffle-contract，它提供了封装代码，使与你的合约交互变得更容易。在撰写本文时，最新版本是4.0.7，但到你读到这本书时可能已经变了。>
    npm install truffle-contract –save+ truffle-contract@4.0.15
- en: Tip
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: web3 version 1.0.0 beta and truffle-contract version 4.0.15 are the latest versions
    and compatible with Angular 7.3.x. However, this can change, so watch the version
    you are installing to ensure it’s compatible and to avoid errors. Re-install with
    exact @[version], for instance @4.0.15, if you run into compatibility issues.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: web3版本1.0.0测试版和truffle-contract版本4.0.15是最新版本，与Angular 7.3.x兼容。然而，这可能会发生变化，所以要注意你正在安装的版本，以确保其兼容并避免错误。如果你遇到兼容性问题，可以重新安装确切的@[版本]，例如@4.0.15。
- en: Transfer Service
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转账服务
- en: 'Now that you have your libraries installed, you can continue. In this section,
    you will create and write a service class. A service class is going to be your
    front-end middle layer to interact with web3. To get started, you can utilize
    the ng s flag, which stands for “service.”> ng g s services/transfer --module=app.moduleCREATE
    src/app/services/transfer.service.spec.tsCREATE src/app/services/ transfer.service.tsYou
    will replace the service class’s initial code with logic to interact with web3.
    First you will define the libraries you will be using, which are the Angular core
    and the truffle-contract and web3 libraries you installed.import { Injectable
    } from ''@angular/core'';const Web3 = require(''web3'');import * as TruffleContract
    from ''truffle-contract'';Next, you will define three variables you will be using
    later: require, window, and tokenAbi. Notice that tokenAbi points to the ABI file
    you compiled from the contract SOL file.declare let require: any;declare let window:
    any;const tokenAbi = require(''../../../truffle/build/contracts/Transfer.json'');You
    need access to root to interact with web3, so you need to inject it into your
    project.@Injectable({  providedIn: ''root''})Next, define the class definition,
    the account and web3 variables, and init web3  .export class TransferService {  private
    _account: any = null;  private readonly _web3: any;  constructor() {    if (typeof
    window.web3 !== ''undefined'') {      this._web3 = window.web3.currentProvider;    }
    else {      this._web3 = new Web3.providers.HttpProvider(''http://localhost:8545'');    }    window.web3
    = new Web3(this._web3);    console.log(''transfer.service :: this._web3'');    console.log(this._web3);  }'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经安装了你的库，你可以继续操作。在本节中，你将创建并编写一个服务类。服务类将作为你前端的中间层与web3进行交互。开始时，你可以使用ng s标志，它代表“服务”。
- en: Notice that you wrapped console.log messages around the code so you can see
    the messages in the browser console messages section under developer tool mode
    to help you understand what’s happening. To do so open the browser in a developer
    tool mode. For Chrome, select View Developer View ➤ Developer ➤ Developer Tools.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意你将代码包裹在console.log信息中，这样你可以在开发者工具模式下的浏览器控制台消息部分看到这些信息，以帮助你理解正在发生的事情。为此，请以开发者工具模式打开浏览器。对于Chrome，选择查看开发者视图➤开发者➤开发者工具。
- en: 'You need an async method  to get the account address and balance, so you can
    use a promise function. If your account was not retrieved previously, you’ll call
    web3.eth.getAccounts just as you did in Terminal to retrieve the data. You also
    need error code if something goes wrong.private async getAccount(): Promise<any>
    {    console.log(''transfer.service :: getAccount :: start'');    if (this._account
    == null) {      this._account = await new Promise((resolve, reject) => {        console.log(''transfer.service
    :: getAccount :: eth'');        console.log(window.web3.eth);        window.web3.eth.getAccounts((err,
    retAccount) => {          console.log(''transfer.service :: getAccount: retAccount'');          console.log(retAccount);          if
    (retAccount.length > 0) {            this._account = retAccount[0];            resolve(this._account);          }
    else {            alert(''transfer.service :: getAccount :: no accounts found.'');            reject(''No
    accounts found.'');          }          if (err != null) {            alert(''transfer.service
    :: getAccount :: error retrieving account'');            reject(''Error retrieving
    account'');          }        });      }) as Promise<any>;    }    return Promise.resolve(this._account);  }Similarly,
    you need a service method to interact with and get the balance of the account.
    You use web3.eth.getBalance just as you did in Terminal and wrap some error checking.
    You also set this as a promise. The reason you need a promise is that these calls
    are async  , and JavaScript is not.  public async getUserBalance(): Promise<any>
    {    const account = await this.getAccount();    console.log(''transfer.service
    :: getUserBalance :: account'');    console.log(account);    return new Promise((resolve,
    reject) => {      window.web3.eth.getBalance(account, function(err, balance) {        console.log(''transfer.service
    :: getUserBalance :: getBalance'');        console.log(balance);        if (!err)
    {          const retVal = {account: account, balance: balance};          console.log(''transfer.service
    :: getUserBalance :: getBalance :: retVal'');          console.log(retVal);          resolve(retVal);        }
    else {          reject({account: ''error'', balance: 0});        }      });    })
    as Promise<any>;  }Last, you need a method to pass the values from your form and
    transfer payment from one account to another. Use the contract pay method  and
    wrap some error checking.  transferEther(value) {    const that = this;    console.log(''transfer.service
    :: transferEther to: '' + value.transferAddress + '', from: '' + that._account
    + '', amount: '' + value.amount);    return new Promise((resolve, reject) => {      console.log(''transfer.service
    :: transferEther :: tokenAbi'');      console.log(tokenAbi);      const transferContract
    = TruffleContract(tokenAbi);      transferContract.setProvider(that._web3);      console.log(''transfer.service
    :: transferEther :: transferContract'');      console.log(transferContract);      transferContract.deployed().then(function(instance)
    {        return instance.pay(          value.transferAddress,          {            from:
    that._account,            value: value.amount          });      }).then(function(status)
    {        if (status) {          return resolve({status: true});        }      }).catch(function(error)
    {        console.log(error);        return reject(''transfer.service error'');      });    });  }}'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '你需要一个异步方法来获取账户地址和余额，所以你可以使用一个承诺函数。如果你之前没有检索到账户，你将像在终端中一样调用web3.eth.getAccounts来获取数据。如果你遇到问题，你还需要错误代码。private
    async getAccount(): Promise<any> {    console.log(''transfer.service :: getAccount
    :: start'');    if (this._account == null) {        this._account = await new
    Promise((resolve, reject) => {            console.log(''transfer.service :: getAccount
    :: eth'');            console.log(window.web3.eth);            window.web3.eth.getAccounts((err,
    retAccount) => {                console.log(''transfer.service :: getAccount:
    retAccount'');                console.log(retAccount);                if (retAccount.length
    > 0) {                    this._account = retAccount[0];                    resolve(this._account);                }
    else {                    alert(''transfer.service :: getAccount :: no accounts
    found.'');                    reject(''No accounts found.'');                }                if
    (err != null) {                    alert(''transfer.service :: getAccount :: error
    retrieving account'');                    reject(''Error retrieving account'');                }            });        })
    as Promise<any>;    }    return Promise.resolve(this._account);  }同样，你需要一个服务方法来与账户交互并获取其余额。你像在终端中一样调用web3.eth.getBalance，并包裹一些错误检查。你还将此设置为一个承诺。你需要承诺的原因是这些调用是异步的，而JavaScript不是。  public
    async getUserBalance(): Promise<any> {    const account = await this.getAccount();    console.log(''transfer.service
    :: getUserBalance :: account'');    console.log(account);    return new Promise((resolve,
    reject) => {        window.web3.eth.getBalance(account, function(err, balance)
    {            console.log(''transfer.service :: getUserBalance :: getBalance'');            console.log(balance);            if
    (!err) {                const retVal = {account: account, balance: balance};                console.log(''transfer.service
    :: getUserBalance :: getBalance :: retVal'');                console.log(retVal);                resolve(retVal);            }
    else {                reject({account: ''error'', balance: 0});            }        });    })
    as Promise<any>;  }最后，你需要一个方法来传递表单中的值并将支付从一个账户转移到另一个账户。使用合约支付方法，并包裹一些错误检查。  transferEther(value)
    {    const that = this;    console.log(''transfer.service :: transferEther to:
    '' + value.transferAddress + '', from: '' + that._account + '', amount: '' + value.amount);    return
    new Promise((resolve, reject) => {        console.log(''transfer.service :: transferEther
    :: tokenAbi'');        console.log(tokenAbi);        const transferContract =
    TruffleContract(tokenAbi);        transferContract.setProvider(that._web3);        console.log(''transfer.service
    :: transferEther :: transferContract'');        console.log(transferContract);        transferContract.deployed().then(function(instance)
    {            return instance.pay(            value.transferAddress,            {                from:
    that._account,                value: value.amount            });        }).then(function(status)
    {            if (status) {                return resolve({status: true});            }        }).catch(function(error)
    {            console.log(error);            return reject(''transfer.service error'');        });    });  }}'
- en: Now that you have the transfer service complete, you can connect transfer.component
    to get the user’s account address and balance and be able to transfer funds once
    the form is filled in.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经完成了转账服务，那么你可以连接转账.组件以获取用户的账户地址和余额，在表单填写完成后就可以进行资金转账了。
- en: 'First you need to define the service component you created. Open src/app/component/transfer/transfer.component.ts
    and add the import statement at the top of the document.import {TransferService}
    from ''../../services/transfer.service'';For the component definition, add TransferService
    as a provider.@Component({..  providers: [TransferService]})Also, add TransferService
    to the constructor so you can use it in your class.constructor(private fb: FormBuilder,              private
    transferService: TransferService) { }Next, update the getAccountAndBalance method  to
    include a call to the service class and retrieve the user actual account and balance.  getAccountAndBalance
    = () => {    const that = this;    this.transferService.getUserBalance().then(function(retAccount:
    any) {      that.user.address = retAccount.account;      that.user.balance = retAccount.balance;      console.log(''transfer.components
    :: getAccountAndBalance :: that.user'');      console.log(that.user);    }).catch(function(error)
    {      console.log(error);    });  }Lastly, update submitForm to call transferEther
    to transfer and pay. Replace the submitForm TODO comments shown here with the
    call to the service calls:// TODO: service callThen pass the data the user submitted:this.transferService.transferEther(this.userForm.value).then(function()
    {      }).catch(function(error) {        console.log(error);      });});'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要定义你创建的服务组件。打开`src/app/component/transfer/transfer.component.ts`文件，在文档顶部添加导入声明。```typescript
- en: 'You can download the complete step from here: [https://github.com/Apress/the-blockchain-developer/chapter10/step2.zip](https://github.com/Apress/the-blockchain-developer/chapter10/step2.zip)
    .'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从这里下载完整的步骤：[https://github.com/Apress/the-blockchain-developer/chapter10/step2.zip](https://github.com/Apress/the-blockchain-developer/chapter10/step2.zip)
    。
- en: Connect to MetaMask
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到MetaMask
- en: At this point, your dapp code is complete. However, if you test your dapp now,
    web3 won’t be able to connect to an account. What you need to do is connect to
    MetaMask. There is a privacy issue related to dapps where malicious web sites
    are able to inject code to view users’ activities and Ethereum addresses and then
    find the balance, transaction history, and personal information.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，你的dapp代码已经完成。然而，如果你现在测试你的dapp，web3将无法连接到一个账户。你需要做的是连接到MetaMask。与dapps相关的隐私问题是，恶意网站能够注入代码来查看用户的活动和以太坊地址，然后找到余额、交易历史和个人信息。
- en: These malicious sites are then able to initiate unwanted transactions on a user’s
    behalf, and the user accidentally may approve an unauthorized transaction and
    lose funds.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这些恶意网站随后能够代表用户发起不受欢迎的交易，而用户可能不小心批准了未经授权的交易并损失了资金。
- en: To avoid these issues and to connect your Angular service, you will connect
    the browser to the network via MetaMask.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这些问题并连接你的Angular服务，你将通过MetaMask将浏览器连接到网络。
- en: You have already used MetaMask, so you should have it installed.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经使用了MetaMask，所以你应该已经安装了它。
- en: Let’s back up for a second. As you’ll recall, you started a network via ganache-cli
    on port 8545.> ganache-cli -p 8545And you connected Truffle to the network.> truffle
    migrate --network development
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们退一步。正如你所回忆的，你通过ganache-cli在8545端口上启动了一个网络。```bash
- en: Then you were able to connect on port 8545 and run commands in Terminal.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你能够在8545端口上连接，并在终端中运行命令。
- en: You can now connect MetaMask in a browser. To connect, select MetaMask and select
    Localhost 8545 in the drop-down menu. See Figure [10-4](#Fig4).![../images/475651_1_En_10_Chapter/475651_1_En_10_Fig4_HTML.jpg](../images/475651_1_En_10_Chapter/475651_1_En_10_Fig4_HTML.jpg)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10-4
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Connecting MetaMask to a private network on port 8545
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Notice that you picked port 8545 earlier in this chapter. It’s the default port
    on MetaMask, so it’s easy to connect to on your private network by selecting the
    drop-down menu item instead of pointing to a custom port.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: However, when you check the list of accounts, you don’t see any accounts. The
    reason you don’t see accounts is that every time you start your network, you need
    to update the accounts. There are two ways to update MetaMask with the list of
    accounts.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '*Option 1*: When you run Ganache, use the m flag to pass the mnemonic that
    represents the private keys you had in Ganache. For instance, the command will
    look like this:> ganache-cli -p 8545 -m ''journey badge medal slender behind junk
    develop produce spy enemy transfer room''*Option 2*: When you run ganache-cli,
    you will see the list of accounts, private keys, and mnemonics.> ganache-cli -p
    8545Look for this output and copy the mnemonic.HD Wallet==================Mnemonic:
    journey badge medal slender behind junk develop produce spy enemy transfer roomBase
    HD Path:  m/44''/60''/0''/0/{account_index}Then, log out of MetaMask and paste
    the mnemonic manually. Click the right button and select “Log out,” as shown in
    Figure [10-5](#Fig5).![../images/475651_1_En_10_Chapter/475651_1_En_10_Fig5_HTML.jpg](../images/475651_1_En_10_Chapter/475651_1_En_10_Fig5_HTML.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10-5
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: MetaMask logout of account
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: After logging out, the welcome screen comes back with a link under it that says,
    “Import using account seed phrase.” Click that link, as shown in Figure [10-6](#Fig6).![../images/475651_1_En_10_Chapter/475651_1_En_10_Fig6_HTML.jpg](../images/475651_1_En_10_Chapter/475651_1_En_10_Fig6_HTML.jpg)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10-6
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: MetaMask welcome page
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Now you can paste the mnemonic by selecting a password and clicking Restore,
    as shown in Figure [10-7](#Fig7).![../images/475651_1_En_10_Chapter/475651_1_En_10_Fig7_HTML.jpg](../images/475651_1_En_10_Chapter/475651_1_En_10_Fig7_HTML.jpg)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10-7
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Restoring MetaMask account using a mnemonic
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Test Your Dapp Functionality
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now you are finally ready to test your dapp. Once the browser gets refreshed,
    you will see the address and balance.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Next, fill in the form and initialize a transfer. Notice that MetaMask opens
    to confirm the transfer. This is an extra measurement of security to ensure only
    authorized transfers get approved.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: See Figure [10-8](#Fig8).![../images/475651_1_En_10_Chapter/475651_1_En_10_Fig8_HTML.jpg](../images/475651_1_En_10_Chapter/475651_1_En_10_Fig8_HTML.jpg)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10-8
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: MetaMask notification to complete a transfer
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Where to Go from Here
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Continue working and improving the dapp you created. For instance, you could
    do the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Create a user service class and a shared service class to hold users’ information
    and shared information
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个用户服务类和一个共享服务类来保存用户的信息和共享信息
- en: Create a login/logout service
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个登录/登出服务
- en: Create an option to switch between accounts
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个切换账户的选项
- en: Create a side menu to better navigate the app
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个侧边菜单以便更好地导航应用
- en: Update the smart contract and add more methods and events
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新智能合约并且添加更多的方法和事件
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you created a transfer smart contract and Truffle development
    project as well as connected to the Ganache local development network. You learned
    how to work with the Ethereum network via Truffle and how to test your smart contract.
    You test the transfer of funds using your smart contract via the command line.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章，你创建了一个转账智能合约以及Truffle开发项目并且连接到了Ganache本地开发网络。你学习了如何通过Truffle与以太坊网络交互以及如何测试你的智能合约。你通过命令行使用你的智能合约进行了资金转移的测试。
- en: Lastly, you linked your dapp with the Ethereum network using an Angular TransferService
    component that you created. Using the web3 library, you made some service calls.
    Lastly, you connected to MetaMask to manage your accounts.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你使用你创建的Angular TransferService组件将你的dapp与以太坊网络链接起来。运用web3库，你进行了某些服务调用。最后，你连接到MetaMask以管理你的账户。
- en: In the next chapter, you will learn about blockchain security and compliance.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将学习关于区块链安全和合规性。
