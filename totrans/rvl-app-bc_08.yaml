- en: Chapter 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blockchain-Based Food Supply Chain Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dhana Srinithi Srinivasan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PSG College of Technology, India
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Karpagam Manavalan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![Orcid Image](i/orcid.svg) https://orcid.org/0000-0002-0015-200X](https://orcid.org/0000-0002-0015-200X)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: PSG College of Technology, India
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Soundarya R.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PSG College of Technology, India
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Thamizhi S. I.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PSG College of Technology, India
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ABSTRACT
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain is an emerging technology that is based on the concept of distributed
    ledgers. It allows for pervasive transactions among different parties and eliminates
    the need for third-party intermediaries. Several of blockchain’s characteristics
    make it suitable for use in the agriculture sector. Some of the potential applications
    of blockchain include efficient management of the food supply chain and value-based
    payment mechanisms. The products of agriculture are usually the inputs for a multi-actor
    distributed supply chain, in which case the consumer is usually the final client.
    The food chain involves several actors including farmers, shipping companies,
    distributors, and groceries. This makes the entire system to be distributed with
    multiple actors playing different roles throughout the chain. This currently used
    system is inefficient and unreliable in various aspects. This project aims to
    leverage blockchain technology to solve and address discrepancies involved in
    food supply chains.
  prefs: []
  type: TYPE_NORMAL
- en: CASE STUDY
  prefs: []
  type: TYPE_NORMAL
- en: The food industry plays a vital role in providing necessities that support the
    growth of various human activities. Once harvested or produced, it undergoes various
    stages like processing, transportation, distribution, storage and delivery. Reports
    say that about one-third of the produced food has either been abandoned or wasted
    every year (approximately 1.3 billion tons). Two-third of the wasted food (about
    1 billion tons) occurs during phases in the supply chain like harvesting, shipping
    and storage. Perishable goods including fruits and vegetables were wasted by 492
    million tons worldwide in 2011 due to inefficient and ineffective food supply
    chain management.
  prefs: []
  type: TYPE_NORMAL
- en: Food supply chain management differs from other supply chains such as furniture
    logistics in that, the importance reflected by factors like food quality, safety,
    and freshness within a limited time, which makes the underlying supply chain more
    complex and difficult to manage. This gets more complex when it comes to perishable
    products where their traversal time through the food supply chain, which includes
    the use of warehouses or buffers, needs to be quite limited.
  prefs: []
  type: TYPE_NORMAL
- en: One of the major difficulties faced by farmers is the need for middlemen to
    sell their agricultural goods. In certain cases, the farmers are forced to sell
    their goods at a price quoted by these so-called middlemen. In countries like
    India, poor infrastructure in crop-producing regions enables these middlemen to
    deceive farmers as to the true value of the produce they are selling. Most of
    the warehouses are near the cities, which increases post-harvest losses due to
    rotting.
  prefs: []
  type: TYPE_NORMAL
- en: A report from Label Insight and the Food Marketing Institute (FMI) revealed
    that shoppers are increasingly demanding transparency and a closer connection
    to their food so much so that 75% say they will switch to a brand that provides
    more in-depth product information, beyond what is provided on the physical label.
    These factors emphasize the need for a more transparent food supply chain that
    alleviates the toil faced by the farmers at least up to an extent and ensures
    that the information regarding the origin of a product is made available for the
    end-users.
  prefs: []
  type: TYPE_NORMAL
- en: LITERATURE REVIEW
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of this survey is to place each work in the context of its contribution
    to understanding the research problem being studied. It defines data sources that
    other researchers have used. Literature review helps in viewing what came before,
    what did and did not work for other researchers. It also provides evidence to
    support our findings.
  prefs: []
  type: TYPE_NORMAL
- en: Features of Blockchain
  prefs: []
  type: TYPE_NORMAL
- en: In 2016, Yuan, Y. Wang conducted a preliminary study of the Blockchain-based
    Intelligent Transportation System. The study outlines an Intelligent Transportation
    System oriented, a seven-layer conceptual model for blockchain and presents a
    case study for blockchain-based real-time ride-sharing services. The study talks
    in brief about the pros and cons of blockchain technology. Once a new block is
    validated and added into the chain, this addition is permanent and can’t be tampered
    or removed and this feature of blockchain is known as immutable. This feature
    of blockchain leads to increased security in the network and is the easiest accountability
    of the network. In 2017, Zibin Zheng et al. presented a comprehensive overview
    on blockchain technology and blockchain architecture comparing some typical consensus
    algorithms used in different blockchains and also analysing the technical challenges
    of blockchain and recent advances.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain is described as “a revolutionary picture which has generated thousands
    of clones across computer networks” (Zibin Zheng et al., 2017). Bitcoin, Ethereum
    blockchains and smart contract implementations form the core of the development
    of cryptocurrencies. Dr.Gavin Wood (2014) discussed various features of the Ethereum
    blockchain by outlining how blockchain technology is implemented in a generalized
    manner in this framework and provided deep explanations about the design, implementation,
    issues encountered during implementation of blockchain, the various opportunities
    it provides and the future hurdles in the framework. In 2018, Dejan Vujičić et
    al. focused on providing a brief introduction into several aspects and evolutions
    in the field of Blockchain, also elaborating outlines about Bitcoin, Ethereum
    blockchains and smart contract implementations.
  prefs: []
  type: TYPE_NORMAL
- en: Applications of Blockchain
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain has a wide range of applications in various sectors like cryptocurrency,
    healthcare, advertising, insurance, copyright protection, energy, societal applications
    to list a few. Wubing Chen et al. (2013) surveyed several blockchain applications
    throughout the years in different domains. The purpose of this survey was to motivate
    the creation of more blockchain-based applications.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain technology can empower various paths of Big Data areas with novel
    solutions (E.Karafiloski,2017). When searching for the best way to deal with Big
    Data to store, organize and process the data, the Blockchain technology comes
    in as a significant choice of input. Its proposed solutions about decentralized
    management of private data, digital property resolution, IoT communication and
    public institutions' reforms are having significant impact on how Big Data may
    evolve (see Blockchain Solutions for Big Data Challenges,2017, for more).
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain in Food Supply Chain Management
  prefs: []
  type: TYPE_NORMAL
- en: A food supply chain involves several actors including, farmers, shipping companies,
    distributors, and groceries. This makes the supply chain management system to
    be distributed with multiple actors playing different roles throughout the supply
    chain. Nir Kshetri (2018) examined how blockchain will impact supply chain management
    objectives by focusing on linking the objectives of food supply chain management
    to the features of blockchain such as transparency and accountability. IoT can
    play a major role when incorporated into blockchain-based food supply chain management
    (see, Blockchain’s roles in meeting key supply chain management objectives,2018,
    for more).
  prefs: []
  type: TYPE_NORMAL
- en: In 2018, Miguel Pincheira Caro et al. presented a fully decentralized, blockchain-based
    traceability solution for Agri-Food supply chain management. Miguel Pincheira
    Caro et al. provided two blockchain implementations, using Ethereum and Hyperledger
    Sawtooth. The performance of both of these deployments was then compared.
  prefs: []
  type: TYPE_NORMAL
- en: Food security is the situation when “all people, at all times, have physical,
    social and economic access to sufficient, safe and nutritious food that meets
    their dietary needs and food preferences for an active and healthy life” (Food
    and Agriculture Organization (FAO)). Attaining such an objective is not an easy
    task, especially during times of crises, natural calamities and violent political
    climate. In such situations, blockchain could turn out to be an indispensable
    resource in ensuring the transparent delivery of international aid, removing intermediaries
    from the delivery process, making authentic resources accessible and responding
    more rapidly and efficiently in the wake of emergencies.
  prefs: []
  type: TYPE_NORMAL
- en: Food safety involves processing, managing and storing food in hygienic ways.
    Illnesses caused due to food contamination are a prevalent issue in today’s world.
    Blockchain would most certainly be an efficient solution because of its ability
    to ensure transparency at every level in the food supply chain, hence improving
    the traceability of food regarding its safety. Tian (2017) proposed a system that
    facilitates the integration of blockchain with Internet of Things for real-time
    monitoring of physical data and tracing based on the HACCP system has recently.
    This system will be critically important for the maintenance of cold-chain in
    the distribution logistics of spoilable food products. ZetoChain is a system which
    focuses on environmental monitoring in each and every link of the cold chain,
    based on IoT devices (Zeto, 2018). Problem identification and reporting are done
    rapidly in order to take immediate measures to control the damage. A mobile application
    is suggested for usage by consumers to scan Zeto labels on products in order to
    locate the product’s history.
  prefs: []
  type: TYPE_NORMAL
- en: Food integrity is about a reliable exchange of food within the supply chain.
    Each actor has the responsibility to deliver complete details about goods, right
    from the origin to production. By means of blockchain, food companies can mitigate
    food fraud by quickly Identifying and linking outbreaks back to their specific
    sources is an essential step in assuaging fraud by rapid identification and resolving
    of outbreaks. This system is being adopted by several organizations and institutions.
  prefs: []
  type: TYPE_NORMAL
- en: TERMS AND TERMINOLOGIES
  prefs: []
  type: TYPE_NORMAL
- en: • Blockchain - A blockchain is a data structure that holds transactional records
    and ensures security, transparency and decentralization. It is like a chain of
    records stored in the form of blocks which are not controlled by any central authority.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Public blockchain - A public blockchain is a globally open network where anyone
    can participate in transactions and execute consensus protocol to determine which
    blocks get added to the chain and maintain a shared ledger.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Private blockchain - Private blockchain is a closed network where the participants
    require a verification process. There may be a limit to the number of participants
    in a private blockchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Distributed Ledger - A database that is consensually distributed and ownership
    is shared across multiple parties. The data is replicated and stored synchronously
    on every node across the system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Transaction - Transaction refers to the transfer of cryptocurrency or data
    between different nodes. Every transaction in a blockchain generates a hash.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Ethereum - A public blockchain network and a decentralized software platform
    upon which developers build and run their applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Cryptocurrency - A digital currency that is based on mathematical function
    and uses cryptographic encryption techniques to regulate the creation of units
    of currency. It also verifies the transfer of funds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Gas - In Ethereum, Gas measures how much work an action takes to perform.
    It is a measure of the computational steps required for a transaction on the Ethereum
    network which is then equated to a fee for the users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Gas limit - A limit set for each transaction which states the maximum amount
    of Gas that can be consumed by that particular transaction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Ether - Ether is the native currency of the Ethereum blockchain network. It
    functions as a fuel of the entire Ethereum ecosystem by behaving as the medium
    of incentive and form of payment for different nodes or participants to execute
    essential operations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Block - A collection of transactions on a blockchain network is gathered onto
    a set called a block which is hashed and added to the blockchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Genesis block - The initial block within a blockchain system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Cryptographic Hash function - A function that returns a unique fixed-length
    string for every unique input. It creates a digital identification or a digital
    thumbprint.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Hash - Hash is the output of a cryptographic hash function. It is also known
    as a digital fingerprint. Hashes confirm transactions on a blockchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Smart Contract - A self-executing contract with the terms of agreement written
    into the code. They are automated actions that can be coded and executed once
    a set of conditions is met.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Solidity - Solidity is a contract-oriented programming language which is used
    for writing smart contracts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Token - A representation of a digital asset that is built on an existing blockchain
    system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Bitcoin - It is the first cryptocurrency based on Proof of Work blockchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Proof of Work - A protocol for establishing consensus across a system that
    ties mining capacity to computing power. Hashing a block requires each miner to
    solve for a difficult variable known as a set, which results in a competition
    among the miners to solve for a set. For each hashed block, the process of hashing
    would have taken an amount of time and computational effort. This hashed block
    is considered Proof of Work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Consensus - When a majority of participants of a blockchain network agree
    on the validity of a transaction that happens within the blockchain system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Authentication - The process of recognizing a user’s identity by associating
    an incoming request with a set of identifying credentials.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Digital trust - It is the participant’s confidence in a blockchain network’s
    ability to protect and secure data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Threat - A threat is any incident that can cause damage to a system by creating
    a loss of confidentiality, availability or integrity. It can be accidental or
    deliberate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Vulnerability - Vulnerability is a latent weakness in a system which can be
    exposed by a threat.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Attack - An attack is a deliberate unauthorized action on a system. It could
    be active or passive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Spoofing - A spoofing attack is an event in which a malicious user or a program
    successfully identifies as another by falsifying its identity to gain illegitimate
    access or advantage. In the blockchain technology, spoofing refers to the ability
    of the attacker to masquerade as another on the blockchain network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Tampering - Tampering attack refers to deliberately modifying data through
    unauthorized channels in order to violate the integrity of the data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Repudiation - A repudiation attack is an event when a system does not adopt
    controls to efficiently track and log the actions of the nodes or users and thereby
    allowing illegitimate manipulation or forging the identification of new actions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Information Disclosure - Information disclosure attack is aimed at acquiring
    specific information from a system by an illegitimate user. This information will
    most likely be classified as sensitive. Breaches of confidentiality fall under
    information disclosure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Elevated privileges - Elevated privileges attack is when a user manages to
    get unauthorized levels of control over the system. The user may be an authenticated
    user who is denied access to sensitive information of the system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Blockchain network - A blockchain network is the underlying network that the
    nodes use to communicate. The network defines the protocol that states how communication
    occurs within the blockchain ecosystem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Node - Any computer which is connected to the blockchain network is called
    a node. It is a copy of the ledger which is operated by a legitimate user on the
    blockchain system. A full node is a computer which can fully validate transactions
    and download the entire data of a specific blockchain. A lightweight node does
    not download the entire data and uses different validation mechanisms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Encryption - A process that combines plaintext with a shorter string of data
    known as key to produce a ciphertext. The ciphertext can be decrypted into the
    original plaintext by someone who has the key.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Nonce - A number used only once in a cryptographic communication process.
    It often includes a timestamp.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • DDoS Attack - A cyber-attack in which the attacker tries to make a machine
    or a network resource unavailable to legitimate users by temporarily or indefinitely
    disrupting the services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • 51% attack - A situation in which a majority of miners in a blockchain system
    launch an attack on the rest of the nodes which allows for double-spending.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Double spending - The event during which someone in a blockchain system tries
    to send a specific transaction to two different recipients at the same time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Big data - Big data is the compilation of massive datasets. It is the field
    that treats ways to analyze and extract information from datasets that are too
    complex to be dealt with traditional data processing techniques.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • IoT - Internet of Things refers to a network of connected devices that are
    capable of collecting and exchanging data with one another.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PROPERTIES OF BLOCKCHAIN
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain offers several properties that make it a widely sought and suitable
    technology for several use cases and business solutions. Every blockchain has
    a chain of blocks that store information. Each block holds information about transactions
    and the values appertaining to these transactions are hashed and stored in the
    blocks. This elemental working of blockchain institutes several properties that
    ensure integrity, confidentiality and transparency of the data pertaining to the
    various transactions. Listed below are the properties of a blockchain that makes
    it suitable for several use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Immutability
  prefs: []
  type: TYPE_NORMAL
- en: Immutability means something that cannot be changed or altered. Each block of
    information, such as facts or transaction details, proceeds using a cryptographic
    principle or a hash value. That hash value consists of an alphanumeric string
    generated by each block separately. Every block not only contains a hash or digital
    signature for itself but also for the previous one. This ensures that blocks are
    retroactively coupled together and unmodified. This functionality of blockchain
    technology ensures that no one can intrude upon the system. This feature also
    ensures that the network will be intact and unaltered throughout.
  prefs: []
  type: TYPE_NORMAL
- en: Every block in a blockchain has the hash of the previous block. Hence, tampering
    of data in a particular block requires strenuous efforts and is almost impossible
    to succeed. Changing the value of a block changes its hash value and therefore
    the ‘previous block’s hash value’ of the next block. Since this hashing is quite
    complex, it is impossible to reverse it. This property of blockchain ensures the
    integrity of data.
  prefs: []
  type: TYPE_NORMAL
- en: Decentralization
  prefs: []
  type: TYPE_NORMAL
- en: The entire blockchain network is decentralized in that, a group of nodes maintains
    the network and there is no centralized governing authority involved. Due to the
    absence of a governing authority, anybody can access the network and deposit their
    assets in it. Every user will have their own private key with which they can directly
    access the data stored that they stored. This feature offers several advantages.
  prefs: []
  type: TYPE_NORMAL
- en: No Single Point Failure
  prefs: []
  type: TYPE_NORMAL
- en: Since the data is stored in several nodes and because of the absence of a centralized
    authority, there will be no single point failure
  prefs: []
  type: TYPE_NORMAL
- en: Expensive to Attack
  prefs: []
  type: TYPE_NORMAL
- en: Attacking the network will be an expensive task as it involves attending to
    more than one node.
  prefs: []
  type: TYPE_NORMAL
- en: No Third Parties
  prefs: []
  type: TYPE_NORMAL
- en: Users can have direct access to their assets without having to approach any
    third parties.
  prefs: []
  type: TYPE_NORMAL
- en: User Control
  prefs: []
  type: TYPE_NORMAL
- en: With decentralization, users have complete control over their properties. They
    do not have to rely on any third party to maintain their assets.
  prefs: []
  type: TYPE_NORMAL
- en: Distributed Ledger
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain is a decentralized as well as an open ledger. Ledger is a record
    or log of the transactions done. Since it is visible to everyone in the blockchain
    system, it is called an open ledger. No individual or any institution is in charge
    of the transactions. Each and every node in the blockchain network has the same
    copy of the ledger. This feature offers several advantages.
  prefs: []
  type: TYPE_NORMAL
- en: No Malicious Modifications
  prefs: []
  type: TYPE_NORMAL
- en: Since Blockchain is a distributed ledger, it responds really well to any suspicious
    activity or tamper. As no one can change the ledger and everything updates real
    fast, tracking what’s happening in the ledger is quite easy with all these nodes.
    Since it is an open ledger, blockchain ensures that any change made is visible
    to everyone on the network, making it too risky and hard for the hackers to make
    modifications.
  prefs: []
  type: TYPE_NORMAL
- en: Ownership of Verification
  prefs: []
  type: TYPE_NORMAL
- en: In a blockchain system, each node acts as a verifier of the ledger. If a user
    wants to add a new block, others would have to verify the transaction first and
    then give an approval. This makes each user a fair and safe participant.
  prefs: []
  type: TYPE_NORMAL
- en: Equal Privileges
  prefs: []
  type: TYPE_NORMAL
- en: No one on the network can get any special favors from the network. Everyone
    has to go through the usual channels and then add their blocks. There is no hierarchy
    of privileges in a blockchain system. The decentralization property of a blockchain
    makes the blockchain network a peer to peer network. This property allows the
    blockchain to involve only two parties, the sender and receiver, thereby totally
    eliminating a third-party authorization. Every node in the network can authorize
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: Transparency
  prefs: []
  type: TYPE_NORMAL
- en: The decentralized nature of the blockchain technology ensures a high degree
    of transparency. A transparent profile is created for every participant. Every
    change on the blockchain is viewable and is ultimately established more concretely.
    Every transaction made is recorded and is viewable by every participant in the
    network. This underlying nature of blockchain ensures that the changes are concrete
    and makes it a good fit for applications encompassing the need for making storages
    and transactions visible to all stakeholders. In a public blockchain, everyone
    in the blockchain network can see the transactions, so it is super transparent.
    On the other hand, a private or federated blockchain could be the best choice
    for enterprises who want to remain transparent among staff and protect their sensitive
    information along the way from public view.
  prefs: []
  type: TYPE_NORMAL
- en: Consensus
  prefs: []
  type: TYPE_NORMAL
- en: A consensus mechanism/algorithm is crucial when multiple participants need to
    validate a transaction taking place in the network, especially in public blockchains
    that operate as decentralized, self-regulating systems working on a very large
    scale without any single authority. They involve contributions from a vast number
    of participants who work on verification and authentication of transactions occurring
    on the blockchain. The architecture is cleverly designed and consensus algorithms
    are at the core of this architecture. Every blockchain has a consensus to help
    the network make decisions. A consensus ensures that all the transactions occurring
    in the chain are legitimate and all of the stakeholders agree upon the state of
    the distributed ledger.
  prefs: []
  type: TYPE_NORMAL
- en: Security
  prefs: []
  type: TYPE_NORMAL
- en: The records on a blockchain are secured through cryptographic algorithms, including
    hashing techniques, which is a cardinal aspect of the blockchain technology. Each
    participant holds a unique private key that they can use to access their assets
    and hence acts as a personal digital signature. If a record is altered, the hash
    will become invalid and the peer network will know right away about the discrepancies.
    This ensures that once the transaction blocks get added on the ledger, no one
    can just go back and change it. Thus, any user on the network won’t be able to
    edit, delete or update it. The risks in a supply chain management system may arise
    from attacks by external or internal entities. One of the big advantages of using
    blockchain for supply chain management is that it promises to eliminate intermediaries
    or any third party authentication, instead, it enables peer-to-peer interaction
    and exchange of data. This quality of a blockchain makes the network a steady
    and secure environment.
  prefs: []
  type: TYPE_NORMAL
- en: MATHEMATICAL MODEL
  prefs: []
  type: TYPE_NORMAL
- en: 'The underlying mathematical model of blockchain technology involves a cryptographic
    concept called the Elliptic Key Cryptography (ECC). It is a type of asymmetric
    cryptography that is widely used in the implementation of Blockchains, especially
    to validate transactions and to ensure that the transactions are authorized to
    execute. There are two main ways ECC in which ECC can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: • Elliptic Curve Digital Signature Algorithm (ECDSA)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Elliptic Curve Diffie-Hellman key exchange (ECDH)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ECDSA is used to generate signatures for transactions, whereas ECDH is used
    to encrypt the message that needs to be transacted. Blockchain and its applications
    including Bitcoins, widely use the ECDSA to validate and authorize transactions.
    ECC relies on mathematics to ensure that a transaction is secure.
  prefs: []
  type: TYPE_NORMAL
- en: An elliptic curve is a plane curve defined by an equation of the form,
  prefs: []
  type: TYPE_NORMAL
- en: y² = x³ + ax + b
  prefs: []
  type: TYPE_NORMAL
- en: The values of a and b determine the shape of the elliptic curve and different
    values a and b result in different elliptic curves. Elliptic curves have numerous
    properties, one such property is that when a nonvertical line intersects two non-tangent
    points in the curve, it will always intersect a third point on the curve.
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 1\. Elliptic Curve Digital Signature Algorithm Graph |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch007.f01](i/ch007.f01.png) |'
  prefs: []
  type: TYPE_TB
- en: '| *Note. P and Q are two distinct points on an elliptic curve, and P is not
    -Q. To add the points P and Q, a line is drawn through the two points. This line
    intersects the elliptic curve in exactly one more point, R`. The point R` is reflected
    in the x-axis to point R. The law for addition in an elliptic curve group is P
    + Q = R. From https://medium.com/dataseries/explaining-the-math-behind-blockchain-algorithms-98d06e06c2e3*
    |'
  prefs: []
  type: TYPE_TB
- en: The points P and Q on the curve, as seen in Figure 1, are added to find the
    corresponding third point R. For instance, consider two points, P(x[1], y[1])
    and Q(x[2,] y[2]). To find the sum of the points P and Q, define,
  prefs: []
  type: TYPE_NORMAL
- en: λ = (y[2] - y[1])/(x[2] - x[1]) mod M
  prefs: []
  type: TYPE_NORMAL
- en: Then the sum R(x[3], y[3]) = P(x[1], y[1]) + Q(x[2,] y[2]) is given by,
  prefs: []
  type: TYPE_NORMAL
- en: x[3] = λ - x[1] - x[2] mod M
  prefs: []
  type: TYPE_NORMAL
- en: y[3] = λ (x[3] - x[1]) + y[1] mod M
  prefs: []
  type: TYPE_NORMAL
- en: This is the concept with which blockchains are implemented. In practical real-world
    scenarios, M is chosen to be a prime non-zero integer. Then, a base point (x[1],
    y[1]) is chosen such that the number of times the point (x[1], y[1]) can be added
    to itself before it fails due to division by zero is a prime number, this is called
    order, and a value that is as large as M. A private key (k[1]) is then set. To
    obtain the public key (x[3], y[3]),
  prefs: []
  type: TYPE_NORMAL
- en: (x[3], y[3]) = k[1] * (x[1], y[1])
  prefs: []
  type: TYPE_NORMAL
- en: Now, to construct a digital signature S(x[4], y[4]) of the data using the private
    and public keys, choose a value for k[2], such that k[2] lies between 0 and the
    value of the order. The digital signature is then defined as,
  prefs: []
  type: TYPE_NORMAL
- en: (x[4], y[4]) = k[2] * (x[1], y[1])
  prefs: []
  type: TYPE_NORMAL
- en: Now, let Z be the data, then,
  prefs: []
  type: TYPE_NORMAL
- en: y[4] = (Z + x[4] * k[1]) / k[2] mod n, where n is the order
  prefs: []
  type: TYPE_NORMAL
- en: For a person to verify the legitimacy of the transaction, let,
  prefs: []
  type: TYPE_NORMAL
- en: s[1] = y[4] – 1 mod n
  prefs: []
  type: TYPE_NORMAL
- en: s[2] = Z * s[1] mod n
  prefs: []
  type: TYPE_NORMAL
- en: s[3] = x[4] * s[1] mod n
  prefs: []
  type: TYPE_NORMAL
- en: (t[1],t[2]) = s[1] * (x[1], y[1]) + s[3] * (x[3], y[3]) * 5
  prefs: []
  type: TYPE_NORMAL
- en: Finally, verifying if t[1] is equal to x[4] will yield the result of the verification
    of the transaction’s legitimacy.
  prefs: []
  type: TYPE_NORMAL
- en: CONTEXT OF RESEARCH
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 2\. Context of Research |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch007.f02](i/ch007.f02.png) |'
  prefs: []
  type: TYPE_TB
- en: '| *Note. Various options available for the implementation of blockchain systems
    and the chosen methodologies are highlighted.* |'
  prefs: []
  type: TYPE_TB
- en: Food Supply Chain Management can be implemented by leveraging several technologies
    and tools. The chosen ones are highlighted in Figure 2.
  prefs: []
  type: TYPE_NORMAL
- en: Based on the conclusions drawn from the literature survey, the software technologies
    and platforms for implementing different functionalities of the proposed system
    have been selected. The major considerations for the selection process include
    ease of usability, maintaining efficiency and ensuring transparency.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain Technology
  prefs: []
  type: TYPE_NORMAL
- en: There are certain key features that are expected out of a Food Supply Chain
    Management system especially when the products involve perishable goods. Each
    participant in the Supply Chain is responsible for delivering a consumable product
    to the final end customer. For such use cases, immutability, transparency and
    traceability become indispensable factors. Blockchain Technology is used in this
    system because of its ability to support and provide such features.
  prefs: []
  type: TYPE_NORMAL
- en: Why Not Artificial Intelligence or Machine Learning?
  prefs: []
  type: TYPE_NORMAL
- en: By definition, Artificial Intelligence represents the ability of a digital computer
    or computer-controlled robot to perform tasks commonly associated with intelligent
    beings. Machine learning is an application of AI-based around the idea that machines
    should be given access to data and let them learn for themselves. However advanced,
    no technology is ideal. One incorrect prediction by an Artificial Intelligent
    robot, for example, prediction of the health of a food product in a food supply
    chain management, will lead to health as well as business concerns. Additionally,
    Artificial Intelligence involves automation rather than the manual entry of data.
    This requires the developer to have deep knowledge about factors that will determine
    the spoilage of food and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum Platform is an Open Source, distributed public blockchain network which
    has its own cryptocurrency called Ether. Each transaction in an Ethereum Blockchain
    requires Gas and a Gas Limit can be set, which is the maximum amount of Gas that
    can be consumed by a transaction. The data and details about a transaction are
    stored in blocks and each block is uniquely identified by using a hash value.
    Ethereum also provides its own Virtual Machine called the Ethereum Virtual Machine
    (EVM) which can be used to run the smart contracts.
  prefs: []
  type: TYPE_NORMAL
- en: Why Not Hyperledger?
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Fabric is a modular blockchain framework that acts as a foundation
    for developing blockchain-based products, solutions, and applications using plug-and-play
    components that are aimed for use within private enterprises. There are no significant
    disadvantages to be discussed about Hyperledger. Although, Ethereum has significant
    advantages over Hyperledger for Supply chain management. Ethereum is transparent
    which is necessary for a supply chain management system. It has a built-in cryptocurrency
    called Ether, unlike Hyperledger. Ethereum runs smart contracts with the purpose
    of being decentralized and for mass consumption. While Hyperledger leverages blockchain
    technology for business with high confidentiality. Hence, with this proper supporting
    evidence, it is obvious that Ethereum is more suitable for supply chain management
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Truffle Framework
  prefs: []
  type: TYPE_NORMAL
- en: The Truffle Framework provides an entire suite of tools for building and testing
    a blockchain. It provides features for compiling, linking and deploying smart
    contracts and all of these are in-built within the framework. Additionally, it
    uses Node Package Manager or Ethereum Package Manager for package installation,
    version management, and dependency management. The Truffle Framework consists
    of three primary development frameworks for Ethereum smart contracts and decentralized
    application development called Truffle, Ganache, and Drizzle. Hence, it was chosen
    for the development of this prototype.
  prefs: []
  type: TYPE_NORMAL
- en: Truffle
  prefs: []
  type: TYPE_NORMAL
- en: Truffle is made for building dApps using the Ethereum Virtual Machine (EVM)
    by providing a development environment, testing framework
  prefs: []
  type: TYPE_NORMAL
- en: Ganache
  prefs: []
  type: TYPE_NORMAL
- en: Ganache is a personal blockchain that allows developers to create smart contracts,
    dApps, and test software that is available as a desktop application and command-line
    tool
  prefs: []
  type: TYPE_NORMAL
- en: Drizzle
  prefs: []
  type: TYPE_NORMAL
- en: Drizzle is a JavaScript-based front-end development library that is capable
    of automatically synchronizing contract and transaction data
  prefs: []
  type: TYPE_NORMAL
- en: PROPOSED SYSTEM
  prefs: []
  type: TYPE_NORMAL
- en: The architecture adopted in this system is the Layered Architecture. Each of
    the components within the system is organized into horizontal layers, with each
    layer performing a specific function within the application. Each layer has a
    specific responsibility which contributes to the proper functioning of the system.
  prefs: []
  type: TYPE_NORMAL
- en: The Application Layer, Interface Layer, Transaction Layer, Blockchain Layer
    and Physical Layer interact with each other in an orderly fashion and form their
    own abstraction around the work that needs to be done in order to satisfy a request.
  prefs: []
  type: TYPE_NORMAL
- en: Layered Architecture improves the maintainability, scalability and flexibility
    of the entire system as each layer is concerned with only a particular task and
    thereby makes a contribution in satisfying a request.
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 3\. Conceptual Architecture |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch007.f03](i/ch007.f03.png) |'
  prefs: []
  type: TYPE_TB
- en: '| *Note. The various layers considered for the Food Supply Chain using Blockchain
    is shown.* |'
  prefs: []
  type: TYPE_TB
- en: The conceptual architecture visually describes, at a high level, the particulars
    of the Food Supply Chain Management System. The purpose of this Conceptual Architecture
    is to provide information that cannot be easily conveyed through words. The architecture
    considered for implementing Food Supply Chain using Blockchain is layered.
  prefs: []
  type: TYPE_NORMAL
- en: Application Layer
  prefs: []
  type: TYPE_NORMAL
- en: The topmost layer of the Architecture, as shown in Figure 3, is the Application
    Layer which emphasizes the deployment of the Smart Contracts and provides the
    entire Food Supply Chain Management as a Service to the users. In this layer,
    the smart contracts are brought into action by deploying them onto the underlying
    blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Interface Layer
  prefs: []
  type: TYPE_NORMAL
- en: The Interface Layer focuses on three major aspects. Each aspect satisfying the
    different functionalities of the system. The various stakeholders including the
    farmer, distributor, retailer and customer are registered within the system using
    the interfaces in this Layer. Additionally, interfaces for the traceback option
    provided to a registered customer. The various participants enter details specific
    to their role including factors such as humidity, temperature, price and so on.
    Additionally, the interface also provides a provision for removing stakeholders
    from the system.
  prefs: []
  type: TYPE_NORMAL
- en: Transaction Layer
  prefs: []
  type: TYPE_NORMAL
- en: This layer shows various levels of users involved in the transaction. A 20-byte
    address represents the account or stakeholder that initiates the transaction.
    Gas Limit is the maximum amount of Gas a user is willing to pay for a transaction.
    A typical simple transaction usually requires a gas limit of 21000\. A value should
    be assigned to each gas which is basically the value a user is willing to pay
    for each gas unit.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain Layer
  prefs: []
  type: TYPE_NORMAL
- en: This layer is where the blocks are created and managed. Each block stores information
    about a transaction, the various participants involved in a transaction, the gas
    used up to perform the transaction and the data exchanged between the participants.
    Each block has a hash value that uniquely identifies the block. The blocks connect
    with one another by referring to the hash value of the previous block.
  prefs: []
  type: TYPE_NORMAL
- en: Physical Layer
  prefs: []
  type: TYPE_NORMAL
- en: The last layer, as shown in Figure 3, is the Physical Layer. The blocks created
    in the previous step are stored in Databases in the Physical Layer. In Ethereum,
    a block can hold up to 20 to 30 kb of data.
  prefs: []
  type: TYPE_NORMAL
- en: REQUIREMENTS
  prefs: []
  type: TYPE_NORMAL
- en: This section attempts to highlight the functional and non-functional requirements
    that are generally expected out of a Food Supply Chain Management system. Functional
    requirements explain the various elements that constitute a basic workflow of
    a supply chain management system, whereas non-functional requirements highlight
    the abstract and implicit factors that are inherently expected out of such systems.
  prefs: []
  type: TYPE_NORMAL
- en: Functional Requirements
  prefs: []
  type: TYPE_NORMAL
- en: User Accounts
  prefs: []
  type: TYPE_NORMAL
- en: Truffle provides us 10 different user accounts with some permissible amount
    of composition levels. These accounts are used by the different kinds of users
    like farmers, distributors, retailers, processors for making transactions and
    appending them to the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Appending the Details at Each Phase
  prefs: []
  type: TYPE_NORMAL
- en: A farmer saves details of grown-up crops like origination, type of crop, the
    procedure used for sowing, storage info and so on using the mobile app. The information
    stored by farmers can be accessible by all involved stakeholders within the system.
    Once the crops are ready, the farmers distribute them to the food processing companies
    or refineries for further processing. After receiving food items from the farmers,
    refineries or food processing companies start processing and store the information
    related to the refining of crops on the public blockchain. After processing the
    food items, processing companies transport the processed food to the wholesalers
    and update transportation details on the blockchain. The wholesaler hires logistic
    service providers to distribute the items to different retailers. Transporting
    processed food through IoT-enabled vehicles or trucks help to keep the food items
    safe under controlled environments. The sensors built in the IoT vehicles send
    information related to the temperature of food items and real-time location to
    the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Traceback
  prefs: []
  type: TYPE_NORMAL
- en: Information stored on the blockchain helps retailers or consumers verify if
    the food has been appropriately processed or not. From source to destination,
    the information such as farm origination details, batch numbers, transportation
    details, storage temperature, expiration details, are linked digitally to the
    food items within the supply chain blockchain. An end-consumer backtracks the
    food supply chain blockchain and ensures if the food is safe or not.
  prefs: []
  type: TYPE_NORMAL
- en: Non-Functional Requirements
  prefs: []
  type: TYPE_NORMAL
- en: Usability
  prefs: []
  type: TYPE_NORMAL
- en: The application is designed with a simple user interface along with needed instructions
    to ensure that the user has a comfortable experience. The internal working of
    the blockchain are totally abstracted from the user to make it completely user
    friendly.
  prefs: []
  type: TYPE_NORMAL
- en: Integrity
  prefs: []
  type: TYPE_NORMAL
- en: The data regarding the goods are stored in a blockchain thus making it tamper-proof.
    The information regarding the supply of the goods is also stored in the blockchain
    thus those records become immutable. This prevents the denial of purchase by the
    distributors or denial of supply by the farmers.
  prefs: []
  type: TYPE_NORMAL
- en: Confidentiality
  prefs: []
  type: TYPE_NORMAL
- en: This feature is about a reliable exchange of food within the supply chain without
    interference from unsolicited third parties. Each actor has the responsibility
    to deliver complete details about goods, right from the origin to production.
    By means of blockchain, food companies can mitigate food fraud by quickly identifying
    and linking outbreaks back to their specific sources is an essential step in assuaging
    fraud by rapid identification and resolving of outbreaks. This system is being
    adopted by several organizations and institutions for fraud prevention.
  prefs: []
  type: TYPE_NORMAL
- en: SETUP
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs: []
  type: TYPE_NORMAL
- en: As discussed in the Context of Research, for this application, the Truffle Framework
    is used for developing and compiling smart contracts and for deploying it in the
    Ethereum blockchain. Setting up this framework involves installing and configuring
    a set of tools and frameworks both as a dependency and for ease of usage as the
    development phase begins. Truffle Framework requires NodeJS and an operating system
    which is one among Windows, Linux or Mac OS X. NodeJS comes with its own package
    manager called Node Package Manager(NPM) which can be used for installing and
    managing packages. The installation and basic setup of the Truffle Framework,
    in a Windows machine, is explained in detail in the following subsection.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Install NodeJS for the respective operating system. This can be done by
    downloading the executable file from https://nodejs.org/en/ or using software
    management automation software like Chocolatey.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2\. Setup NPM on the computer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3\. Install Truffle using the Node Package Manager by typing the following command
    in the terminal,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: npm install -g truffle
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Once, Truffle is successfully installed, a new project needs to be created.
    This can be done in two ways,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a. Create an empty project using the command,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: truffle init
  prefs: []
  type: TYPE_NORMAL
- en: b. Create a project with existing code using the command,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: truffle unbox metacoin
  prefs: []
  type: TYPE_NORMAL
- en: Metacoin is a Truffle Box which acts as a boilerplate code to ease out the process
    of getting started with Truffle. Several such boxes are available in the Truffle
    website that helps focus on specific needs and applications.
  prefs: []
  type: TYPE_NORMAL
- en: Structure of a Project in Truffle
  prefs: []
  type: TYPE_NORMAL
- en: Truffle offers a wide range of functionalities to deal with compiling, testing,
    deploying and accessing smart contracts for a wide range of applications that
    use the Ethereum Blockchain. Truffle also provisions for several packages for
    easy building of a user interface and allows for interaction with the smart contracts
    in a simplified manner, both in terms of development and usage. A folder created
    for a Truffle project contains a number of subfolders including Contracts, Migrations
    and Test. It also consists of a configuration file. Each of these files and folders
    plays a role starting from the development of smart contracts up to its deployment
    and also for building a user interface for the distributed application. The functionalities
    of each of them are listed below.
  prefs: []
  type: TYPE_NORMAL
- en: Contracts Folder
  prefs: []
  type: TYPE_NORMAL
- en: The Contracts folder is where all the smart contracts required by the dApp are
    stored. In addition to the user-specific smart contracts, it also holds one called
    Migration.sol. The primary purpose of this contract is to keep track of all the
    migrations that take place in the network. It basically acts as as an interface
    to manage the deployments
  prefs: []
  type: TYPE_NORMAL
- en: Migrations Folder
  prefs: []
  type: TYPE_NORMAL
- en: Migrations involve deploying contracts to the Ethereum network. As the project
    changes and scales up as the development furthers, new migration scripts need
    to be created. The Migration folder holds JavaScript files that deploy Migrations.sol
    to the blockchain. As more number of migrations are incorporated, the Javascript
    files in the Migrations folder increases by count.
  prefs: []
  type: TYPE_NORMAL
- en: Test Folder
  prefs: []
  type: TYPE_NORMAL
- en: Truffle has a built-in automated testing framework that can be leveraged to
    test smart contracts. When running tests against Ethereum clients like Ganache
    or Truffle Develop, Truffle ensures that the various test files do not share state
    with each other. Test codes can either be written in Solidity or JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Running Smart Contracts
  prefs: []
  type: TYPE_NORMAL
- en: In Solidity, a contract is basically a set of code and data that is stored at
    a particular address on the Ethereum blockchain. The steps to run a smart contract
    are listed below.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling Smart Contract
  prefs: []
  type: TYPE_NORMAL
- en: The first step in running a smart contract is compilation. To compile a Truffle
    project, change to the root of the directory where the project is located. For
    compiling smart contracts, the following command needs to be used,
  prefs: []
  type: TYPE_NORMAL
- en: truffle compile
  prefs: []
  type: TYPE_NORMAL
- en: During the first run, all contracts will be compiled. During subsequent runs,
    Truffle will compile only the contracts that have been changed since the last
    compile. To override this behavior, the following command needs to be used,
  prefs: []
  type: TYPE_NORMAL
- en: truffle compile --all
  prefs: []
  type: TYPE_NORMAL
- en: Artifacts. Artifacts of the compilation will be placed in the build/contracts/
    directory, relative to your project root.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dependencies. Contract dependencies can be declared via the import command
    in 2 ways:'
  prefs: []
  type: TYPE_NORMAL
- en: • Importing dependencies via file name,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: import “./importContract.sol”
  prefs: []
  type: TYPE_NORMAL
- en: • Importing contracts from an external package,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: import “externalpackage/externalContract.sol”
  prefs: []
  type: TYPE_NORMAL
- en: Running Migration
  prefs: []
  type: TYPE_NORMAL
- en: Migrations are JavaScript files that help in deploying contracts to the Ethereum
    network. These files are responsible for staging the deployment tasks, and they're
    written under the assumption that the deployment needs will change over time.
    The command to run the migration is as follows,
  prefs: []
  type: TYPE_NORMAL
- en: truffle migrate
  prefs: []
  type: TYPE_NORMAL
- en: This will run all migrations located within the project's migrations directory.
    This command will start execution from the last migration that was run, running
    only newly created migrations. If no new migrations exist, it won't perform any
    action at all. To run all the migrations from the beginning, the following command
    needs to be executed,
  prefs: []
  type: TYPE_NORMAL
- en: truffle migrate --reset
  prefs: []
  type: TYPE_NORMAL
- en: Structure of a Migration File
  prefs: []
  type: TYPE_NORMAL
- en: • artifacts.require(). To tell Truffle which contracts to interact with. The
    specified name should match the contract definition name inside that source file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • module.exports(). All migrations must export a function via the module.exports
    syntax. The first parameter of the function exported by each migration should
    be a deployer object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Deployer. Deployer is used by a migration file to stage deployment tasks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing Contracts
  prefs: []
  type: TYPE_NORMAL
- en: Truffle has a standard automated testing framework. This framework allows writing
    simple and manageable tests in two different ways.
  prefs: []
  type: TYPE_NORMAL
- en: • In Javascript and TypeScript, for exercising the contracts from an external
    application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • In Solidity, for exercising the contracts in advanced, bare-to-the-metal scenarios.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the test files should be present in the ./test directory. Additionally,
    it is also possible to mention the path of the test file next to the command.
    The command to run a test is as follows,
  prefs: []
  type: TYPE_NORMAL
- en: truffle test
  prefs: []
  type: TYPE_NORMAL
- en: A stack trace is a list of method and function calls made by an application
    while an exception was thrown. Solidity stack traces can be obtained for failed
    or reverted transactions with,
  prefs: []
  type: TYPE_NORMAL
- en: truffle test --stacktrace
  prefs: []
  type: TYPE_NORMAL
- en: Executing this command will produce stack traces for transactions and deployments
    made via Truffle Contract during the tests if one of them reverts and thereby
    causes the test to fail. This option is still experimental, and stack traces are
    not currently supported for calls or gas estimates.
  prefs: []
  type: TYPE_NORMAL
- en: Writing Tests in Solidity
  prefs: []
  type: TYPE_NORMAL
- en: Solidity test contracts are saved as .sol files. When truffle tests are run,
    they will be included as a separate test suite per test contract. These contracts
    provide a clean-room environment per test suite, direct access to the deployed
    contracts and the ability to import any contract dependency.
  prefs: []
  type: TYPE_NORMAL
- en: Solidity Test Structure
  prefs: []
  type: TYPE_NORMAL
- en: The structure for the solidity test contract contains several parts each of
    which has a special functionality. By using these test contracts, the working
    of each function within the smart contract can be tested in terms of several parameters.
    The various components that make up a test contract are discussed below.
  prefs: []
  type: TYPE_NORMAL
- en: • Assertions. Assertion functions can be from a default assertion library like
    Assert.equal() or can be created.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Deployed Addresses. The addresses of contracts that were deployed as part
    of the migrations are available through the truffle/DeployedAddresses.sol library.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Test Contract Names. All test contracts must start with Test, using an uppercase
    T.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Test Function Names. All test functions must start with test, t lowercase.
    Each test function is executed as a single transaction, in order of appearance
    in the test file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Before/After Hooks. These hooks can be used to perform setup and teardown
    actions before and after each test, or before and after each suite is run.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum Clients
  prefs: []
  type: TYPE_NORMAL
- en: An integral tool required for building a dApp in Truffle is the Ethereum client.
    There are many Ethereum clients available. Suitable clients can be chosen depending
    on whether the purpose is developing or deploying.
  prefs: []
  type: TYPE_NORMAL
- en: Ganache
  prefs: []
  type: TYPE_NORMAL
- en: Ganache is a personal blockchain for Ethereum development that runs on a local
    desktop. Ganache is part of the Truffle Suite. It simplifies dApp development
    by placing the contracts and transactions front and center. Ganache helps the
    developer to quickly see how the application interacts with the blockchain, and
    introspect details like accounts, balances, creations of contracts and gas costs.
    Ganache, when launched, runs on http://127.0.0.1:7545\. It will display the first
    10 accounts and the mnemonic used to create those accounts. Mnemonics can also
    be inputted by the developer.
  prefs: []
  type: TYPE_NORMAL
- en: Truffle Develop
  prefs: []
  type: TYPE_NORMAL
- en: Truffle Develop helps in setting up an integrated blockchain environment with
    a single command,
  prefs: []
  type: TYPE_NORMAL
- en: truffle develop
  prefs: []
  type: TYPE_NORMAL
- en: Execution of this command runs the client on http://127.0.0.1:9545\. It will
    display the first 10 accounts and the mnemonic used to create those accounts.
    The difference from Ganache is that the mnemonic will persist across restarts
    of Ganache, whereas in Truffle Develop it will generate a random mnemonic that
    will persist for that user account alone, that is, unique to the particular user
    account.
  prefs: []
  type: TYPE_NORMAL
- en: Once Truffle Develop is launched, it will provide you with a console you can
    use to run all available Truffle commands. These commands are input by omitting
    the truffle prefix. For example, to compile the smart contracts, instead of typing,
  prefs: []
  type: TYPE_NORMAL
- en: truffle compile
  prefs: []
  type: TYPE_NORMAL
- en: you need to only type,
  prefs: []
  type: TYPE_NORMAL
- en: compile
  prefs: []
  type: TYPE_NORMAL
- en: Ganache CLI
  prefs: []
  type: TYPE_NORMAL
- en: Ganache has a command-line interface which is a great choice for automated testing
    and continuous integration environments. Ganache CLI runs headless and can be
    configured to serve all the development needs. Ganache CLI can be used to test
    if code works quickly as it processes transactions instantly instead of waiting
    for the default block time. It also tells immediately when the smart contracts
    run into errors, and integrates directly with Truffle to reduce test runtime up
    to 90% compared to other clients.
  prefs: []
  type: TYPE_NORMAL
- en: Drizzle
  prefs: []
  type: TYPE_NORMAL
- en: Drizzle automatically syncs chain data to a Redux store minimizing the effort
    required from the developers’ side. Drizzle can be configured to either sync chain
    data on each and every block or only when there are changes to contract data the
    end application is listening to. It covers contract state, events and transactions.
  prefs: []
  type: TYPE_NORMAL
- en: A Truffle Box is available for Drizzle that combines a Create React App setup
    with Drizzle and Drizzle React Components package. The Truffle Box can be downloaded
    by this command,
  prefs: []
  type: TYPE_NORMAL
- en: truffle unbox drizzle
  prefs: []
  type: TYPE_NORMAL
- en: This automatically sets up the required folders and contracts required for user
    interface development and integration with the underlying architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Remix IDE
  prefs: []
  type: TYPE_NORMAL
- en: Remix provides an integrated environment that can be used to write, compile
    and debug Solidity code. Remix IDE can be accessed using the online version via
    a web browser, from a locally installed copy or via Mist, am Ethereum Distributed
    applications browser. It provides various options for injecting a blockchain instance
    into the browser. Out of the different options, JavaScript Virtual Machine has
    certain perks in that, it ignores gas limits, it gives the user an unlimited amount
    of ether to play with, and it offers tools to speed up the entire debugging process.
    The current version (v-0.10.1) provides 15 different accounts with 100 ethers
    allotted for each of the 15 accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Why Remix?
  prefs: []
  type: TYPE_NORMAL
- en: • Remix IDE is a good tool for the initial development and testing of smart
    contracts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • It cannot create real user accounts and transfer funds between them, thus
    making it one of the most preferred tools for beginners to play around with.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• The online version does not require any special installation and can be accessed
    directly by making use of a web browser. The following URL can be employed to
    access the IDE: https://remix.ethereum.org/ .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • It gives a complete set of IDE with separate panels for compiling, running
    and debugging the smart contracts along with a code editor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • To facilitate the execution of transactions, Remix provides several environments
    like the JavaScript Virtual Machine. It allows for the emulation of a blockchain
    for which new instances will be created whenever the page is reloaded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Additionally, Remix IDE comes with a number of plugins. Solidity unit testing
    is one such plugin that can be used for writing contracts for testing purposes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Remixd is a NodeJS tool that allows Remix IDE to access the local file system
    of a computer. It can be made available by using the following command in npm,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: npm install -g remixd
  prefs: []
  type: TYPE_NORMAL
- en: PROTOTYPE IMPLEMENTATION
  prefs: []
  type: TYPE_NORMAL
- en: A prototype of the proposed system is implemented to check for the feasibility
    of the design, in terms of implementation. The actual flow of the system is made
    transparent so that we could discern the complete purpose and structure of the
    system. It will improve the quality of requirements and specifications so that
    early determination of what the end-user really wants can be made which can result
    in faster and less expensive software. The flow of the Food Supply Chain Management
    system along with the pseudocode of the various modules is described below.
  prefs: []
  type: TYPE_NORMAL
- en: Registration
  prefs: []
  type: TYPE_NORMAL
- en: '• register_user: Adds the user to the list of authorized users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Figure 4\. Registration of the user |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch007.f04](i/ch007.f04.png) |'
  prefs: []
  type: TYPE_TB
- en: The input for this module is the category of the user which could be customer,
    farmer, supplier or distributor. This module checks if the user account already
    exists. If the account does not exist already, the user is added to the list of
    authorized users and the registration is successful. If the user is already registered
    then the registration is declared to be unsuccessful. Figure 4 describes the flow
    of this module.
  prefs: []
  type: TYPE_NORMAL
- en: '• register_product: Registers the product and assigns an ID'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Figure 5\. Registration of the product |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch007.f05](i/ch007.f05.png) |'
  prefs: []
  type: TYPE_TB
- en: As depicted in Figure 5, this module takes the details of the product as the
    input along with a key. It checks the account which initiated this action and
    ensures if it is the product owner. If the product owner has initiated, then the
    registration of the product is successful. If any other user who is not the owner
    of the product has initiated the action, then the registration is unsuccessful.
    This condition makes sure that only the product owner can register a product.
    Registration of a product is usually done by its initial owner, i.e. the farmer.
  prefs: []
  type: TYPE_NORMAL
- en: Changing Ownership
  prefs: []
  type: TYPE_NORMAL
- en: '• change_ownership: Transfers the owner of the product from the current owner
    to the next user in the supply chain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Figure 6\. Change of the ownership |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch007.f06](i/ch007.f06.png) |'
  prefs: []
  type: TYPE_TB
- en: '| *Note. The current owner of the product attempts an action for changing the
    ownership to the destined receiver.* |'
  prefs: []
  type: TYPE_TB
- en: This module receives Product ID, Receiver ID and selling details such as date
    and time of purchase as input. It checks the account which initiated this action
    and ensures if it is the product owner. If it is not the product owner, the transaction
    is unsuccessful and is terminated. If the product owner initiated the transaction,
    then the Receiver id is checked whether the receiving party is a registered user.
    If the receiving party is registered, the transaction ends successfully after
    the transaction details are appended. If the receiving party is not registered,
    the transaction is unsuccessful since the receiving party cannot be an illegitimate
    user and requires prior registration. Figure 6 shows the flow of this module.
  prefs: []
  type: TYPE_NORMAL
- en: Attain Ownership
  prefs: []
  type: TYPE_NORMAL
- en: '• attain_ownership: Ownership of the product is transferred here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Figure 7\. Attainment of ownership |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch007.f07](i/ch007.f07.png) |'
  prefs: []
  type: TYPE_TB
- en: '| *Note. The ownership is actually being changed here on certain conditions
    listed.* |'
  prefs: []
  type: TYPE_TB
- en: This module takes Product ID and Purchase Details as input along with a key.
    In Figure 7, the module initially checks if the user initiating the action is
    the intended receiver. If the user is not the actual receiver of the product,
    then the transaction is terminated and the ownership of the products still remains
    with the sender. If the user initiating the action is the intended receiver of
    the product, then the module checks if the key and the purchase details match.
    If it matches, the owner of the product is assigned, in this case, the receiver
    and the transaction is declared to be successful. If the details do not match,
    then the transaction is unsuccessful.
  prefs: []
  type: TYPE_NORMAL
- en: Traceback Details
  prefs: []
  type: TYPE_NORMAL
- en: '• get_details: Customers check the history of a transaction along with the
    product details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Figure 8\. Traceback details |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch007.f08](i/ch007.f08.png) |'
  prefs: []
  type: TYPE_TB
- en: '| *Note. The details of the product are traced back by the consumer.* |'
  prefs: []
  type: TYPE_TB
- en: Figure 8 shows how customers can trace back the details of a purchased product.
    This module takes Product ID as input and checks if the customer initiating the
    action is a registered user. If the user is not registered as a customer, then
    the action is unsuccessful. If the customer is a registered user, then the module
    checks if the customer initiating the traceback action is the intended receiver
    of the product. If the customer has purchased the product, then the customer can
    see the entire product details. Otherwise, the action is set to be unsuccessful.
  prefs: []
  type: TYPE_NORMAL
- en: THREAT MODELLING
  prefs: []
  type: TYPE_NORMAL
- en: Security Analysis
  prefs: []
  type: TYPE_NORMAL
- en: The popularity of blockchain makes new demands on security and privacy protection
    on data storage, transmission and applications, and puts forward new challenges
    to existing security solutions, authentication mechanisms, data protection, privacy
    protection and information regulation. The risks in this project may arise from
    attacks by external or internal entities. One of the key benefits of using blockchain
    for supply chain management is that it promises to eliminate intermediaries, instead
    of enabling peer-to-peer interaction and exchange of data.
  prefs: []
  type: TYPE_NORMAL
- en: Threat Modeling
  prefs: []
  type: TYPE_NORMAL
- en: The principle of Threat Modeling is to classify, communicate and understand
    threats and mitigation to the organization’s stakeholders as early as possible.
    Documentation from this method provides system analysts and defenders with a broad
    analysis of probable attackers profile, the most likely attack vectors, and the
    assets most desired by the attacker. Threats can be anything that can take advantage
    of a vulnerability to breach security and negatively change, erase and damage
    objects of interest.
  prefs: []
  type: TYPE_NORMAL
- en: Table 1 lists various threats faced by the project at each layer of blockchain
    on a broad level. Spoofing refers to the ability of the attacker to masquerade
    as an authenticated entity on the system. Tampering attacks violate the integrity
    of the data stored on the protected system. Breaches of confidentiality fall under
    information disclosure. If a user manages to gain unauthorized levels of control
    over the system, this is a privilege escalation attack. The system is developed
    in such a way to reduce the attacks as much as possible. Privilege escalation
    is reduced using product keys, entered during the registration which can be done
    only by the farmers. The transfer ownership once done can't be reversed and the
    old owner will lose the corresponding privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Cryptographic primitives represent the hash functions and public-key cryptography
    used to ensure data integrity and provide user authentication. The security issues
    of centralized nodes include the exchanges which involve digital currency transactions
    and manage large amounts of funds. These nodes are at any point of failure of
    the entire blockchain network, and the attack yield is high and the cost is low,
    which is the preferred target of the attackers.
  prefs: []
  type: TYPE_NORMAL
- en: Another attack is Unauthorized Access Attack and it happens in a Smart Contract.
    A smart contract responds to the message it receives, it can store the received
    value, and it can send out information and value. This attack is due to the failure
    to make explicit function visibility or failure to do sufficient permission checks,
    which can cause an attacker to access or modify a function or a variable that
    should not be accessed. These attacks are avoided as much as possible in this
    system by performing the authorization of all stages of users and restricting
    their capabilities. For example, while transferring ownership, double-check is
    made from the senders’ as well as the receivers’ side.
  prefs: []
  type: TYPE_NORMAL
- en: Another important attack includes malicious information attacks where the attacker
    writes malicious information in the blockchain. With the data undelete feature
    of the blockchain, information is difficult to delete after it is written in the
    blockchain. If malicious information appears in the blockchain, it will be subjected
    to many problems.
  prefs: []
  type: TYPE_NORMAL
- en: The basic blockchain technology can be extended by systems built either on top
    of it or through connections to external systems via APIs. These are the Blockchain
    extensions.
  prefs: []
  type: TYPE_NORMAL
- en: Table 1\. Threat Model
  prefs: []
  type: TYPE_NORMAL
- en: '|  | Spoofing | Tampering | Information Disclosure | Denial of Service | Elevated
    Privileges |'
  prefs: []
  type: TYPE_TB
- en: '| Cryptographic primitives | Private key |  | Private key |  | Private key
    |'
  prefs: []
  type: TYPE_TB
- en: '| Nodes | Malware | Malware | Malware | Failure to update malware |  |'
  prefs: []
  type: TYPE_TB
- en: '| Networks |  | Network design | Network design | Network design | Network
    design |'
  prefs: []
  type: TYPE_TB
- en: '| Smart contracts |  | Arithmetic Bad Randomness'
  prefs: []
  type: TYPE_NORMAL
- en: Short
  prefs: []
  type: TYPE_NORMAL
- en: Addresses
  prefs: []
  type: TYPE_NORMAL
- en: Timestamp
  prefs: []
  type: TYPE_NORMAL
- en: Unchecked Returns |  | Access control out of gas | Access control |
  prefs: []
  type: TYPE_NORMAL
- en: '| Blockchain Extension | Insecure APIs |  |  |  | Insecure APIs |'
  prefs: []
  type: TYPE_TB
- en: Note. Classification of each attack vector based upon its potential effects
    is done at various levels of the blockchain ecosystem. Each cell shows the different
    attacks that can occur at a given level of the blockchain ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: This blockchain threat model presented in Table 1 represents the classification
    of the currently known attack vectors against blockchain systems and is designed
    to be a constant work in progress as no system can be fully secure and blockchain,
    like any other systems, has new attack vectors being discovered.
  prefs: []
  type: TYPE_NORMAL
- en: 51% Attack - Analysis
  prefs: []
  type: TYPE_NORMAL
- en: One of the major attacks that blockchain systems in supply chain management
    could face is the 51% attack. The 51% attack is an attack against blockchain which
    occurs when an attacker is in possession or control of 51% of the hashing power.
    This attack is initiated by creating a chain of blocks privately, that is fully
    isolated from the original version of the chain. Later on, the isolated chain
    is added to the network to be established as a genuine chain. This is what enables
    the double-spending attack. Since the blockchain policy complies with the longest
    chain rule, if attackers are able to get 51% of the hashing power or more, they
    will be in a position to drive the longest chain by persuading the network nodes
    to follow their chain.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing the nature of the attack and focusing on identifying the vulnerability
    before it occurs, the best techniques to mitigate 51% attack is the Penalty system
    for delayed block submission. The penalty system, being a research prototype,
    proposes increasing the attacking cost extensively so that the potential advantage
    of gaining 51% attack cannot be achieved towards exploitation. A penalty is applied
    based on the amount of time an isolated block is hidden from the blockchain network.
    The time is calculated considering the interval duration between blocks. This
    security protection technique notifies all the parties including the farmer, the
    retailer, the distributor etc., about the continuous fork, and during that period,
    the transactions are restricted from performing fraudulent transactions until
    the delay is lifted. The prime advantage of this method is the penalty makes the
    attack much more costly to perform. The delayed block approach sets the attacker
    to mine a large number of blocks in a sequence before joining the legit chain.
    This method helps to identify the vulnerability before the genuine chain adopts
    it.
  prefs: []
  type: TYPE_NORMAL
- en: DISCUSSION AND CONCLUSION
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain technology can be used in food supply chain management in order to
    set a global standard and to provide quality assurance in food enterprise ecosystems.
    Introducing blockchain into the food supply chain ensures traceability which is
    indispensable for tracking back to the source and performing root-cause analysis
    in case of any contamination in food products. A blockchain environment ensures
    that each player securely shares data to create an accountable and traceable system.
    Additionally, a traditional food supply chain system relies on the subjective
    inputs of individual players when it comes to pricing. Adapting blockchain in
    the food supply chain system guarantees that the information provided by every
    player in the value chain is taken into account before quoting a price for a food
    product, hence making the entire process holistic. Summing up, blockchain’s unique
    properties pave the way for a transparent and decentralized system to warrant
    verified practices and products in a food supply chain.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain is, undoubtedly, one of the most promising technologies towards a
    transparent food supply chain, although many barriers and challenges still persist,
    which hinder its wider popularity among farmers and food supply systems. The near
    future will show if and how these challenges could be addressed by governmental
    and private efforts, in order to establish blockchain technology as a secure,
    reliable and transparent way to ensure food safety and integrity.
  prefs: []
  type: TYPE_NORMAL
- en: To reduce barriers of use, governments should invest more in research and innovation,
    as well as in education and training, in order to produce and demonstrate evidence
    for the potential benefits of this technology. From a law and order perspective,
    various actions and policies can be taken, such as motivating the growth of blockchain-based
    ecosystems in agri-food chains, supporting blockchain technology as part of the
    broader goals of optimizing the competitiveness and ensuring the sustainability
    of the agri-food supply chain and also designing a clear regulatory framework
    for implementation of blockchain systems. This system can serve as a foundation
    for any supply chain management and any number of users or intermediaries can
    be added or removed based on the scenario.
  prefs: []
  type: TYPE_NORMAL
- en: REFERENCES
  prefs: []
  type: TYPE_NORMAL
- en: 'Caro, Ali, Vecchio, & Giaffreda. (2018, June 7). Blockchain-based traceability
    in Agri-Food supply chain management: A practical implementation. 10.1109/IOT-TUSCANY.2018.8373021'
  prefs: []
  type: TYPE_NORMAL
- en: Chen, Xu, Shi, Zhao, & Zhao. (2018, December 10). A Survey of Blockchain Applications
    in Different Domains. .10.1145/3301403.3301407
  prefs: []
  type: TYPE_NORMAL
- en: Divakar, Archana, & Sushma. (2018, May). IoT technology in Smart Farming. International
    Research Journal of Engineering and Technology, 5.
  prefs: []
  type: TYPE_NORMAL
- en: Esmaeilian, B., Sarkis, J., Lewis, K., & Behdad, S. (2020). Blockchain for the
    future of sustainable supply chain management in Industry 4.0, Resources, Conservation
    and Recycling. 10.1016/j.resconrec.2020.105064
  prefs: []
  type: TYPE_NORMAL
- en: Gayatri, M. K., & Jayasakthi, J. (2015). Providing Agriculture Solution to Farmers
    for Better Yielding using IoT. International conference on global trends in signal
    processing, Chennai, India.
  prefs: []
  type: TYPE_NORMAL
- en: Hongal, A., Jyothi, M. P., & Prathibha, S. R. (2017). IoT Based Monitoring System
    In Smart Agriculture. International conference on global trends in Signal Processing,
    Bangalore, India.
  prefs: []
  type: TYPE_NORMAL
- en: 'Karafiloski & Mishev. (2017, July 1). Blockchain solutions for big data challenges:
    A literature review. .10.1109/EUROCON.2017.8011213'
  prefs: []
  type: TYPE_NORMAL
- en: Kshetri. (2017). Blockchain’s roles in meeting key supply chain management objectives.
    10.1016/j.ijinfomgt.2017.12.005
  prefs: []
  type: TYPE_NORMAL
- en: Nikesh, G. & Kowitkar, R.S. (2016, June 6). IoT Based Smart Agriculture. International
    Journal of Advance Research in Computer and Communication Engineering, 5.
  prefs: []
  type: TYPE_NORMAL
- en: Patil, K. A., & Kale, N. R. (2016). A Model For Smart Agriculture Using IoT.
    International conference on global trends in signal processing, Jalgaon, India.
    10.1109/ICGTSPICC.2016.7955360
  prefs: []
  type: TYPE_NORMAL
- en: 'Queiroz, M. M., Telles, R., & Bonilla, S. H. (2019). Blockchain and supply
    chain management integration: A systematic review of the literature . Supply Chain
    Management , 25(2), 241–254\. doi:10.1108/SCM-03-2018-0143'
  prefs: []
  type: TYPE_NORMAL
- en: Saberi, Kouhizadeh, Sarkis, & Shen. (2018, October 17). Blockchain technology
    and its relationships to sustainable supply chain management. 10.1080/00207543.2018.1533261
  prefs: []
  type: TYPE_NORMAL
- en: Shakhbulatov, D., Medina, J., Dong, Z., & Rojas-Cessa, R. (2020). TheBlockchain
    Enhances Supply Chain Management. A Survey . IEEE Open Journal of the Computer
    Society , 1, 230–249\. doi:10.1109/OJCS.2020.3025313
  prefs: []
  type: TYPE_NORMAL
- en: 'Sunny, J., Undralla, N., & Pillai, V. M. (2020, December). Supply chain transparency
    through blockchain-based traceability: An overview with demonstration. Computers
    & Industrial Engineering, 150. 10.1016/j.cie.2020.106895'
  prefs: []
  type: TYPE_NORMAL
- en: Tian, F. (2017). A supply chain traceability system for food safety based on
    HACCP, Blockchain & Internet of Things . IEEE. doi:10.1109/ICSSSM.2017.7996119
  prefs: []
  type: TYPE_NORMAL
- en: 'Verhoeven, P., Sinn, F., & Herden, T. T. (2018). Examples from Blockchain Implementations
    in Logistics and Supply Chain Management: Exploring the Mindful Use of a New Technology.
    Logistics , 2018(2), 20\. doi:10.3390/logistics2030020'
  prefs: []
  type: TYPE_NORMAL
- en: 'Vujičić, Jagodić, & Ranđić. (2018, April 26). Blockchain technology, bitcoin,
    and Ethereum: A brief overview. .10.1109/INFOTEH.2018.8345547'
  prefs: []
  type: TYPE_NORMAL
- en: 'Wood. (2014). Ethereum: A Secure Decentralized Generalised Transaction Ledger.
    EIP-150 REVISION. (a04ea02 - 2017-09-30)'
  prefs: []
  type: TYPE_NORMAL
- en: Wüst, K., & Gervais, A. (2018). Do you need a Blockchain? IEEE Zug. doi:10.1109/CVCBT.2018.00011
  prefs: []
  type: TYPE_NORMAL
- en: YuanY.WangF.-Y. (2016). Towards blockchain-based intelligent transportation
    systems. 10.1109/ITSC.2016.7795984
  prefs: []
  type: TYPE_NORMAL
- en: 'Zheng, Xie, Dai, Chen, & Wang. (2017, September 11). An Overview of Blockchain
    Technology: Architecture, Consensus, and Future Trends. .10.1109/BigDataCongress.2017.85'
  prefs: []
  type: TYPE_NORMAL
