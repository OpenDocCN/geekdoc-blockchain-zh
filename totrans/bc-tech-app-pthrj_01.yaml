- en: '[Chapter 2](contents.xhtml#re_chapter2)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Blockchain Components and Concept](contents.xhtml#re_chapter2)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: M. R. Manu, Namya Musthafa, B. Balamurugan, and Rahul Chauhan
  prefs: []
  type: TYPE_NORMAL
- en: Contents
  prefs: []
  type: TYPE_NORMAL
- en: '[2.1 Evolution of Blockchain](chapter2.xhtml#ch-2-sec-1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.1.1 Architecture of Blockchain](chapter2.xhtml#ch-2-sec-2)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.1.2 Blocks in Blockchain](chapter2.xhtml#ch-2-sec-3)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.2 Types of Blockchain](chapter2.xhtml#ch-2-sec-4)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.2.1 Public Blockchain](chapter2.xhtml#ch-2-sec-5)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.2.2 Private Blockchain](chapter2.xhtml#ch-2-sec-6)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.2.3 Consortium or Federated Blockchain](chapter2.xhtml#ch-2-sec-7)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.3 The Logical Components of Blockchain](chapter2.xhtml#ch-2-sec-8)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.4 Core Components of Blockchain Architecture](chapter2.xhtml#ch-2-sec-9)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.4.1 Ledger Management](chapter2.xhtml#ch-2-sec-10)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.5 Smart Contracts and Their Applications](chapter2.xhtml#ch-2-sec-11)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.6 Applications of Smart Contracts](chapter2.xhtml#ch-2-sec-12)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.6.1 Financial Services and Insurance](chapter2.xhtml#ch-2-sec-13)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.6.2 Mortgage Transactions](chapter2.xhtml#ch-2-sec-14)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.6.3 Supply Chain Transparency](chapter2.xhtml#ch-2-sec-15)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.6.4 Medical Research](chapter2.xhtml#ch-2-sec-16)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.6.5 Digital Identity and Records Management](chapter2.xhtml#ch-2-sec-17)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.6.5.1 Peer Network and Membership Management](chapter2.xhtml#ch-2-sec-18)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.6.5.2 Inviting and Removing Members in a Peer Network](chapter2.xhtml#ch-2-sec-19)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.7 Applications and Implementation of Blockchain](chapter2.xhtml#ch-2-sec-20)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.7.1 Blockchain Technology in Finance](chapter2.xhtml#ch-2-sec-21)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.7.2 What Can Blockchain Do for the Financial and Banking Industries?](chapter2.xhtml#ch-2-sec-22)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.7.2.1 Fraud Detection](chapter2.xhtml#ch-2-sec-23)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.7.2.2 Know Your Customer (KYC)](chapter2.xhtml#ch-2-sec-24)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.7.2.3 Payments](chapter2.xhtml#ch-2-sec-25)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.7.3 Problems in Implementing Blockchain in Financial Services](chapter2.xhtml#ch-2-sec-26)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.8 Blockchain Security in Online Voting](chapter2.xhtml#ch-2-sec-27)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.8.1 Challenges in E-Voting Applications for Blockchain](chapter2.xhtml#ch-2-sec-28)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.8.1.1 Blockchain-Based Certification](chapter2.xhtml#ch-2-sec-29)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.8.1.2 Working Insight](chapter2.xhtml#ch-2-sec-30)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.8.1.3 How to Verify Documents on a Blockchain](chapter2.xhtml#ch-2-sec-31)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.9 Building a Blockchain](chapter2.xhtml#ch-2-sec-32)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.9.1 Generations of Hashes](chapter2.xhtml#ch-2-sec-33)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.9.2 Let Us See How You Make Your Own Hash Function in Python](chapter2.xhtml#ch-2-sec-34)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.10 API Creation for Blockchain](chapter2.xhtml#ch-2-sec-35)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.10.1 So, What Is API?](chapter2.xhtml#ch-2-sec-36)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.10.2 How to Integrate Blockchain APIs in a Website](chapter2.xhtml#ch-2-sec-37)'
  prefs: []
  type: TYPE_NORMAL
- en: '[References](chapter2.xhtml#b-9781000175257-bib2)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.1 Evolution of Blockchain](chapter2.xhtml#re_ch-2-sec-1)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The blockchain has evolved since 1991, starting with Stuart Haber and W Scott
    Stornetta’s work on cryptographically secure chain of blocks, the first work on
    a cryptographically secured block chain where no one tampered with time stamp
    of document. Then in 1992, the system was upgraded with the Merkle tree approach,
    which optimized and combined all tasks into a single one. In the year 2008 blockchain
    gained relevance due to a group of people named Satoshi Nakamoto. Satoshi Nakamoto
    is the accredited brain behind the digital ledger technology. The new concepts
    and approaches evolved into the blockchain mechanism for transformation towards
    digital data utilization in the year 2009\. In the beginning it was developed
    to support Bitcoin. Decentralized data using a decentralized database are the
    core components of blockchain. The need for Bitcoin increased drastically so blockchain
    made immediate changes to the Internet. The Russian-Canadian transferred money
    in form of Bitcoin scripting language.
  prefs: []
  type: TYPE_NORMAL
- en: The decentralized nature of the blockchain mechanism can make any language readable
    by computer rather than third party, which will generate smart contracts. The
    Ethereum projects are useful in efficient transaction management systems. The
    security of transaction through the blockchain methodology produces different
    digital transaction systems such as Bitcoin, cryptocurrency, Ethereum, and light
    coin ripple which can handle huge numbers of transaction per second.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the years 2013–2015 the system developed to Ethereum development with version
    blockchain 2.0\. It provides for the recording of books as well as contracts.
    This can develop the decentralized application efficiently. In the year 2018 a
    new version of blockchain evolved: blockchain 3.0\. It supports the leveraging
    capabilities of blockchain. The new blockchain application is called NEO, which
    is an open source platform first developed in China. For further upgrades with
    the Internet of Things, IOTA was developed. It supports the Internet of Things
    ecosystem for digital transactions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.1.1 Architecture of Blockchain](chapter2.xhtml#re_ch-2-sec-2)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The blockchain provides a peer-to-peer distributed ledger mechanism for transaction
    management in a secure manner. Each ledger is a block which is interlinked to
    other blocks in the structure. The databases are shared among each other in a
    distributed way. There is a timestamp server for controlling the databases and
    each block is associated with a reference to the previous block. This reference
    is also managed by a hashing mechanism for security ([Figures 2.1](chapter2.xhtml#fig2.1)
    and [2.2](chapter2.xhtml#fig2.2)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig2.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 Evolution of blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig2.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 Structure of blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.1.2 Blocks in Blockchain](chapter2.xhtml#re_ch-2-sec-3)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Blocks are the basic units of the blockchain. A block is a basic data structure
    for transaction distributed to other monetary control. The blocks contain a block
    header which verifies the validity of the block. It contains metadata which describe
    the block. The metadata information of a block are mentioned below:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a) Version filed: Which describes the current version of the block.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'b) Previous block header hash: References the previous block’s parent block.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'c) Merkle root: Cryptographic hash of all transactions involved in this block.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'd) Nonce and nbits: The number of times the process repeated so that it becomes
    a complex task'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[2.2 Types of Blockchain](chapter2.xhtml#re_ch-2-sec-4)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The concept of cryptocurrencies (Bitcoin) introduced the idea of blockchain
    into the spotlight; it is a database that protects the data from tampering and
    analysis. The blockchain is still a rising technology, so it is difficult for
    us to understand its working without getting into its code and details. Blockchain
    is a new and more secure connected network as compared to others.
  prefs: []
  type: TYPE_NORMAL
- en: 'Blockchain is an encrypted repository of digital information. A blockchain
    has a decentralized and distributed style of network of computers. Hence its hosting
    on a distributed network of systems allows secure transactions to occur across
    a blockchain with little possibility of fraudulent activities. A blockchain allows
    users to track assets across individuals. To accommodate all kinds of users there
    are three major types of blockchains. The three types of blockchains are:'
  prefs: []
  type: TYPE_NORMAL
- en: Public blockchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private blockchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consortium or federated blockchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: The consortium or federated blockchain is a hybrid of the public and
    private blockchain. It is partly decentralized. The consensus process is controlled
    by a pre-selected set of nodes, for instance, financial institutions ([Figure
    2.3](chapter2.xhtml#fig2.3)).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig2.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 Types of blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.2.1 Public Blockchain](chapter2.xhtml#re_ch-2-sec-5)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As the name indicates the public blockchain is the blockchain for and of the
    public. There is no one in charge, and anyone can take part in the processes like
    reading/writing/auditing the blockchain. These types of blockchain are open and
    transparent, meaning anyone can review anything at any given instance on a public
    blockchain. This idea will raise the question that if no one is in charge of anything
    here then how are the decisions taken on these types of the blockchain? It is
    done by any of a variety of decentralized consensus mechanisms. Here are some
    of examples for decentralized consensus mechanisms:'
  prefs: []
  type: TYPE_NORMAL
- en: Proof of work (PoW)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proof of stake (PoS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are three things we have to be aware of, that make a public blockchain
    really public. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The code to operate a public blockchain is openly available so that anyone can
    download the code and start running a public node on their local device, validating
    transactions in the network and participating in the consensus process. This gives
    anyone the right to participate in the process that determines which blocks get
    added to the chain and what the current shape and size of the blockchain is.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anyone can be part of transactions in the network. Hence the transactions should
    go through as long as they are valid.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anyone can access and read transactions using a block explorer. Transactions
    are transparent but anonymous ([Figure 2.4](chapter2.xhtml#fig2.4)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../images/fig2.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 Public blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: From the figure we can understand that anyone can participate in a public blockchain,
    without permission.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of public blockchains include Bitcoin, Ethereum, Monero, Dash, and
    Litecoin, among others.
  prefs: []
  type: TYPE_NORMAL
- en: On Bitcoin and Litecoin blockchain networks
  prefs: []
  type: TYPE_NORMAL
- en: Anyone can run BTC/LTC full node and start mining.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anyone can make transactions on the BTC/LTC chain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anyone can review/audit the blockchain in a blockchain explorer ([Table 2.1](chapter2.xhtml#T2.1)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table 2.1 Public vs. Private vs. Consortium Blockchain
  prefs: []
  type: TYPE_NORMAL
- en: '| Public Blockchain | Private Blockchain | Consortium or Federated Blockchain
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Anyone can run BTC/LTC full node | Not everyone can run a full node | Selected
    members of the consortium can run a full node |'
  prefs: []
  type: TYPE_TB
- en: '| Anyone can make transactions | Not everyone can make transactions | Selected
    members of the consortium can make transactions |'
  prefs: []
  type: TYPE_TB
- en: '| Anyone can review/audit the blockchain | Not everyone can review/audit the
    blockchain | Selected members of the consortium can review/audit the blockchain
    |'
  prefs: []
  type: TYPE_TB
- en: '| Examples: Bitcoin, Litecoin, etc. | Example: Bankchain | Examples: r3, EWF
    |'
  prefs: []
  type: TYPE_TB
- en: The nature of the public blockchain leads to two major implications.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Everyone can potentially shatter current business models through the reduction
    in the use of intermediaries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2\. By using a blockchain, we do not necessarily have to maintain servers or
    have system administrators. Hence we can minimize the cost of creating and running
    decentralized applications or DApps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[2.2.2 Private Blockchain](chapter2.xhtml#re_ch-2-sec-6)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A private blockchain as its name indicates is a private asset of an individual
    or an organization. Unlike a public blockchain, a private blockchain has an in-charge
    who monitors important tasks such as read/write or whom to selectively give access
    to read or vice versa. A private blockchain is also known as a permissioned blockchain
    as it has restrictions on who can access it and also who can participate in transaction
    and validation. Only previously chosen entities have permissions to access the
    blockchain. How are these entities are chosen? It is done by the respective authority
    and are given permission by the chain developers while building the blockchain
    application. An important consensus is achieved on the whim of the central in-charge
    who can give mining rights to anyone or not give them at all. Suppose there is
    a need to grant permissions to new users or revoke permissions from an existing
    user, then it can be taken care of by the network administrator ([Figure 2.5](chapter2.xhtml#fig2.5)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig2.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 Private blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Private blockchains are mostly used in database management and auditing, among
    other fields. Their uses are internal to a single company, and so the companies
    will not want the data to be accessible to the public. They use blockchain technology
    by setting up groups and participants who can verify transactions internally.
  prefs: []
  type: TYPE_NORMAL
- en: However, private blockchains may scale better and comply better with the security
    and privacy regulations of governmental data. A private blockchain runs the risk
    of security breaches just like in a centralized system. Thus, they have certain
    security advantages, and other security disadvantages, like a coin has two sides.
    Blockchain is still in the emerging stages, so it is conjecture how this ground-breaking
    technology will evolve and be adopted. Some examples of private blockchains include
    MONAX and Multichain.
  prefs: []
  type: TYPE_NORMAL
- en: The important advantages of private blockchains are minimal transaction costs
    and data redundancies as well as easier data-handling and more automated compliance
    functionalities. That’s what makes it centralized again where various rights are
    exercised and vested in a central trusted party but yet it is cryptographically
    secured from the company’s point of view and more cost-effective for them. But
    it is still debatable if such a private thing can be called a ‘blockchain’ because
    it fundamentally defeats the whole purpose of blockchain that Bitcoin introduced
    to us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Bankchain'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In such types of blockchain:'
  prefs: []
  type: TYPE_NORMAL
- en: Not everyone can run a full node and start mining.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not everyone can make transactions on the chain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not everyone can review/audit the blockchain in a blockchain explorer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly as we observed for public blockchains, here also we can encounter
    some key implications of the implicit nature and characteristics of private blockchains.
  prefs: []
  type: TYPE_NORMAL
- en: Reduction in transaction costs and data redundancies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplified data-handling and more automated compliance mechanisms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.2.3 Consortium or Federated Blockchain](chapter2.xhtml#re_ch-2-sec-7)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A consortium blockchain is like a hybrid of public and private blockchains.
    In this type of blockchain, some nodes control the consensus process, and some
    other nodes may be allowed to participate in the transactions. In other words,
    this type of blockchain can be used when organizations are ready to share the
    blockchain, but restrict data access to them, and keep it secure from public access.
    That is, it possesses the characteristics of a public blockchain as the blockchain
    is being shared by different nodes, and also it behaves like a private blockchain
    by restricting the access to the blockchain from the different nodes. Therefore,
    it is partly public and partly private.
  prefs: []
  type: TYPE_NORMAL
- en: 'A consortium blockchain consists of two types of users. They are:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The users who have control over the blockchain and decide who should have
    permission to access the blockchain
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2\. The users who can access the blockchain
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here instead of a single authority in charge, you have more than one in charge.
    Basically, you have a group of companies or representative individuals coming
    together and making decisions for the benefit of the whole network. Such groups
    are also called consortiums or a federation, hence the name consortium or federated
    blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let’s suppose you have a consortium of the world’s top 20 financial
    institutes; you have decided in the code that only if a transaction or a block
    or decision is voted/verified by more than 15 institutes then it should get added
    to the blockchain. So it is a way of achieving things much faster, and you also
    have more than one single point of failures which in a way protects the whole
    ecosystem against a single point of failure ([Figure 2.6](chapter2.xhtml#fig2.6)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig2.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 Federated blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: r3, EWF'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In such a blockchain:'
  prefs: []
  type: TYPE_NORMAL
- en: Members of the consortium can run a full node and start mining.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Members of the consortium can make transactions/decisions on the chain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Members of the consortium can review/audit the blockchain in a blockchain explorer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.3 The Logical Components of Blockchain](chapter2.xhtml#re_ch-2-sec-8)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cryptocurrencies are the technology that is built on blockchain to enable a
    shared distributed tamper-proof ledger to be viewed by anyone with the corresponding
    software. Unleashing blockchain technology from its application to cryptocurrencies
    is very important in understanding the broader implications and applications of
    blockchain technology. Differentiating the two will be helpful in understanding
    why there is such excitement about blockchain-inspired ruptures. Bioinformatics,
    governance, banking, trading, society, politics, and even the very structure of
    the Internet itself are suited for disruption. Generally, blockchain technology
    will bring disintermediation among everything.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand blockchain technology applications deeply it is necessary to
    understand the logical components of a blockchain ecosystem and the duties of
    each component. The four main components of any blockchain ecosystem are given
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: A node application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A shared ledger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A consensus algorithm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1\. Node Application
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Each computer inter-connected through the Internet needs to install and run
    a computer application specific to the ecosystem they desire to participate in.
    For example using the case of Bitcoin as an ecosystem, each computer must be running
    the Bitcoin wallet application. In some blockchain applications, like Bankchain,
    participation is restricted and requires special permissions to join (referred
    to as permissioned blockchains). Bankchain only permits banks to run the node
    application. But in the Bitcoin ecosystem anyone can download and install the
    node application and also participate in the ecosystem.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 2\. Shared Ledger
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The distributed ledger is a data structure managed inside the node application.
    Once you have the node application running, you can view the respective ledger
    (or blockchain) contents for that ecosystem. Interaction is done according to
    the rules of the ecosystem in which it resides. You can run as many node applications
    as you like and are permitted to use, and each will participate in their respective
    blockchain ecosystems. It is important to note that the number of ecosystems you
    are a participant in doesn’t matter as you will only have one shared ledger for
    each ecosystem.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 3\. Consensus Algorithm
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The consensus algorithm is implemented as a portion of the node application,
    by providing the ‘rules of the game’ for how the ecosystem will arrive at a single
    view of the ledger. Different ecosystems have different methods for attaining
    consensus depending on the desired features of the ecosystem. Participation in
    the consensus-building process, the method for determining the ‘world state’ of
    the ecosystem, can be vested in a number of different schemes: proof-of-work,
    proof-of-stake, proof-of-elapsed-time; each method qualifies nodes as honest in
    a different way before participation in the consensus-building process.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 4\. Virtual Machine
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A virtual machine is a representation of a machine (real or imaginary) created
    by a computer program and operated with instructions embodied in a language. It
    is an abstraction of a machine, held inside a machine. To some degree we are already
    are accustomed to the abstraction of real-world objects and entities as virtual
    objects in a computer. Think of a button in a graphical user interface of an application.
    You press the button on the screen and the state of the program inside the computer
    changes. Another example might be your driver’s license as it is represented in
    a government computer. It is an abstraction of your real-world legal authorization
    to operate a motor vehicle, and it is largely what counts these days, rather than
    the real-world physical printed driver’s license.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[2.4 Core Components of Blockchain Architecture](chapter2.xhtml#re_ch-2-sec-9)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Node – user or computer within the blockchain architecture (each has an independent
    copy of the whole blockchain ledger)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transaction – smallest building block of a blockchain system (records, information,
    etc.) that serves as the purpose of the blockchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Block – a data structure used for keeping a set of transactions which is distributed
    to all nodes in the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chain – a sequence of blocks in a specific order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miners – specific nodes which perform the block verification process before
    adding anything to the blockchain structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consensus (consensus protocol) – a set of rules and arrangements to carry out
    blockchain operations ([Figure 2.7](chapter2.xhtml#fig2.5))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../images/fig2.7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 Blockchain applications.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.4.1 Ledger Management](chapter2.xhtml#re_ch-2-sec-10)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The blockchain is the underlying technology behind technology like Bitcoin.
    A distributed ledger is essential as it is a list of all events and transactions
    entered onto it and is held simultaneously by each node in the network. Whenever
    a new event or transaction is added to the ledger, encryption is done to everything;
    by adding to the ledger, the task becomes complex. The ledger is both visible
    to everyone in the network and also secured so that people can’t tamper with it.
    Every new piece of information added to this ledger is added as a ‘block’. This
    block is mathematically encrypted and is approved to be added to the ledger according
    to a series of consensus protocols, that is, ways of approving additions and protecting
    against fraud or double spending without the need for a centralized authority
    ([Figure 2.8](chapter2.xhtml#fig2.6)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig2.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 Ledger management with consensus.
  prefs: []
  type: TYPE_NORMAL
- en: A distributed ledger is a database that is decentralized as it is distributed
    across several distinct computers or nodes. Here every node will maintain the
    ledger, and if any data changes happen, the ledger will get updated. The updating
    takes place independently at each node. Through the ledger along with a little
    of computer code, you can create ‘smart contracts’. These are a series of clauses
    which are added to the ledger and powered by computer code. When the clause in
    the ledger is met, the computer code activates and the next step of the contract
    is triggered.
  prefs: []
  type: TYPE_NORMAL
- en: All the nodes are equal in terms of authority. There is no central authority
    or server managing the database that makes the technology transparent. Every node
    can update the ledger, and other nodes will verify its existence. This property
    of distributed ledgers makes them an attractive technology for the financial industry
    or any other industry looking for more transparent technology and those who need
    technology which is far from central authority.
  prefs: []
  type: TYPE_NORMAL
- en: By using distributed ledgers, there is no need for centralized authority. It
    is a network of ledgers or contracts that is maintained by nodes. The nodes that
    can be merged into blocks which make it even easier to maintain larger distributed
    network ledgers. Even without a central authority, all the information stays secure.
    To enable the distributed network, technology such as cryptography is required
    to assign the data with cryptographic signatures and keys for use. Anything that
    is stored on the distributed ledger is immutable. Immutability makes it even harder
    for hackers to try to hack distributed ledger networks such as Bitcoin. Additionally
    the absence of a central authority means that it is also free from any intentional
    change as well ([Figure 2.9](chapter2.xhtml#fig2.7)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig2.9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 Ledger management in distributed network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Three major steps are involved:'
  prefs: []
  type: TYPE_NORMAL
- en: To initiate a payment, entity A digitally signs a proposed update to the shared
    ledger with cryptographic tools, to transfer funds from its account on the ledger
    to entity B’s account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upon receiving the transfer request, other nodes authenticate entity A’s identity
    and validate the transaction by checking to make sure that entity A has the necessary
    cryptographic credentials to make an update to the record in question. Validation
    would include, among other things, verifying that entity A has sufficient funds
    to make the payment. Nodes also take part in the consensus process to agree on
    the payments that should be included in the next update to the state of the ledger.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the update has been accepted by the nodes, the properties of the asset
    are modified such that all future transactions regarding the asset must be initiated
    using the cryptographic credentials of entity B.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.5 Smart Contracts and Their Applications](chapter2.xhtml#re_ch-2-sec-11)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Smart contracts are translations of an agreement consisting of terms and conditions
    into a computational code, which is script. The developers write the script in
    a programming language like Java, C++, etc. in such a way that it lacks ambiguity
    and does not lead to interpretation. It is a mechanism that involves digital assets
    and two or more parties. And here some or all of the parties deposit assets into
    the smart contract, and the assets automatically get redistributed among those
    parties according to a formula based on certain data, and it is not known at the
    time of initializing a contract.
  prefs: []
  type: TYPE_NORMAL
- en: A smart contract is a set of lines of code that is uploaded and stored to check
    a contract’s validity and containing a set of rules under which the parties who
    share the smart contract agree to interact with each other. It is automatically
    executed when previously determined and defined terms and conditions are met.
    The smart contract code facilitates, verifies, and enforces the conference or
    performance of an agreement or transaction. It is the simplest form of decentralized
    automation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The smart contract is defined and executed inside a distributed blockchain.
    And also every transaction and contract execution should happen inside the blockchain.
    There are certain steps to enable smart contract execution:'
  prefs: []
  type: TYPE_NORMAL
- en: During the coding procedure, blockchain developers write the smart contract
    as a script using a programming language, and also implement the logic behind
    the contract so that when a given action or transaction occurs, the script enables
    the following step.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the contract is coded completely, the script is sent out to the blockchain.
    Execution of the code is done by a distributed network. Typically those computers
    that are already made available for computation can execute the contract, and
    the output of this execution should be the same for identical input regardless
    of the computer where it is executed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several conditions can be coded, and final smart contract users may choose the
    conditions that are needed for their smart contract.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execution of contract is run in a peer-to-peer manner; it is relatively similar
    to decentralization. Simple users connected to the Internet may act as clients;
    hence, they have to install the client in the computer. We refer to this principle
    as mining, and the computers used to run the program are called nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main difference between a smart contract and a traditional contract is
    that the former doesn’t rely on a third party; cryptographic code enforces it.
    At the initial level, these are programs that run according to how the developers
    have set them up to run. For an example we can consider a vending machine where
    we are going to implement a smart contract mechanically. It verifies the following
    characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: No third-party involvement in the transaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When a coin is inserted into the machine and a product is selected, it delivers
    the product directly to us as long as the terms and conditions are met; here the
    condition is: Our coin has the same or higher value than the product that we want
    to purchase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits of smart contracts
  prefs: []
  type: TYPE_NORMAL
- en: The benefits of smart contracts go hand-in-hand with blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Speed and accuracy: Smart contracts are digital and automated, so you won’t
    have to spend time processing paperwork or reconciling and correcting the errors
    that are often written into documents that have been filled manually. Computer
    code is also more exact than the legalese that traditional contracts are written
    in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Trust: Smart contracts automatically execute transactions following predetermined
    rules, and the encrypted records of those transactions are shared across participants.
    Thus, nobody has to question whether information has been altered for personal
    benefit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Security: Blockchain transaction records are encrypted, and that makes them
    very hard to hack. Because each individual record is connected to previous and
    subsequent records on a distributed ledger, the whole chain would need to be altered
    to change a single record.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Savings: Smart contracts remove the need for intermediaries because participants
    can trust the visible data and the technology to properly execute the transaction.
    There is no need for an extra person to validate and verify the terms of an agreement
    because it is built into the code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: The cost is minimized by removing intermediaries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contract execution time is reduced; every action is executed automatically according
    to coded rules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Automatic process: A third party is not involved to enable contract.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By removing intermediaries, the cost of money transfers can be lowered.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It uses a transparent system: Anyone can have access to the blockchain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protects data and transaction from fraud. It is impossible to change or update
    the data inside a blockchain and still maintain a coherent chain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The decentralization aspect prevents the system from collapse which is the case
    when a centralized system is down.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.6 Applications of Smart Contracts](chapter2.xhtml#re_ch-2-sec-12)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Smart contracts also allow for more complex transactions to be carried out between
    two anonymous parties without the need for a central authority, enforcement system,
    or legal guidance. This means a smart contract can be programmed to enable a wide
    variety of actions. Smart contracts can be used to allow an entire world of new
    applications designed to solve many real-world problems.
  prefs: []
  type: TYPE_NORMAL
- en: Consider an example of a poet who allows journalists and content creators to
    control and manage their digital rights. This means they maintain the ability
    to offer up their content on an open marketplace for a fee, or enter into agreements
    with clients and be paid as work is completed. No escrow service, lawyers, or
    agencies are required.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can imagine, there are many industries that can benefit from this kind
    of technology, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Intellectual property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The legal industry (contracts, negotiations, etc.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shipping and logistics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finance/banking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real estate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2.6.1 Financial Services and Insurance](chapter2.xhtml#re_ch-2-sec-13)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the important challenges facing the insurance industry regularly is fraudulent
    activities. For insurance companies to overcome this problem there needs to be
    an administrative team that looks into claims and ensures their validity. Smart
    contracts regulate the impact of this major challenge because both the insurer
    and insured can show a bond with each other by an agreement without the use of
    notaries, lawyers, and other intermediaries. This cost-saving opportunity would
    ultimately be passed down to the end consumer. While this doesn’t inherently prevent
    fraud, it can help prevent arguments in court. However, a blockchain acting as
    a public ledger and system of record combined with the benefits of a smart contract
    would make it much more difficult to slip under the radar.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.6.2 Mortgage Transactions](chapter2.xhtml#re_ch-2-sec-14)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another important application of smart contracts is in the mortgage industry.
    Blockchain technology can allow for buyers and sellers to be automatically connected
    together in a friction-less, hassle-free process. Construct a smart contract governing
    all terms and conditions – evade the need for lawyers, realtors, and other professionals.
    This saves both time and money for both sides of the transaction while also minimizing
    any potential errors or costs that could otherwise come from doing things manually.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.6.3 Supply Chain Transparency](chapter2.xhtml#re_ch-2-sec-15)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tracking packages as they move around the world is a difficult task, but smart
    contracts can simplify it. From the moment a product leaves the factory floor
    to when it arrives on store shelves, the transparent nature of this technology
    can make the entire process more simple; it clearly shows where exactly every
    package is along with where in the supply chain potential errors take place. For
    example, in the case of a contaminated shipment, management will be able to see
    exactly where each individual product came from and isolate the contaminated goods
    without throwing away an entire shipment. Not only does this help organizations
    save costs, but also it keeps buyers safer.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.6.4 Medical Research](chapter2.xhtml#re_ch-2-sec-16)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As researchers in the medical field conduct clinical trials and research potential
    cures to diseases such as cancer, effectively sharing data amongst the various
    institutions freely and openly is something smart contracts can facilitate. Data
    can be freely exchanged without compromising the privacy and data security of
    the patients and subjects involved. A smart contract consists of various if–then
    scenarios that work well in this particular use case.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.6.5 Digital Identity and Records Management](chapter2.xhtml#re_ch-2-sec-17)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although in the current era, huge technical companies get away with mining our
    data and personal information, in the future this could change severely with the
    use of smart contracts. Individuals can own and control their own digital identity,
    including passwords, data, digital assets, records, and other details. This would
    be really different from our current situation, where often dozens of different
    institutions, organizations, and parties all have their own individual copies
    of our personal information – an obvious security risk. Instead, all these details
    can be consolidated and owned by an individual who chooses with whom to share
    this information with smart contracts.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.6.5.1 Peer Network and Membership Management](chapter2.xhtml#re_ch-2-sec-18)'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A blockchain network is in the style of a peer-to-peer network which is running
    a decentralized blockchain framework. As we know a network includes one or more
    members, who have unique identities in the network. For example, a member might
    be an individual or an organization in a consortium of banks. Each member runs
    a single or multiple blockchain peer nodes to run chain-code, endorse transactions,
    and store a local copy of the ledger.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the case of Amazon Managed Blockchain, that creates and manages these
    components for each and every member in a network, and also creates components
    that are shared by all members in a network, such as the Hyperledger Fabric ordering
    service and the general networking configuration. The user can choose different
    editions of Amazon Managed Blockchain according their wishes and requirements.
    This edition determines the capacity and capabilities of the network.
  prefs: []
  type: TYPE_NORMAL
- en: The creator also necessary should create the first Managed Blockchain network
    member. Additional members are added through a proposal and voting process. There
    is no need to pay for the network establishment, but each member pays an hourly
    rate (billed per second) for their network membership. Charges in each network
    vary depending on the edition of the network. Each member also pays for peer nodes,
    peer node storage, and the amount of data that the member writes to the network.
  prefs: []
  type: TYPE_NORMAL
- en: The blockchain network remains active as long as there are members participating
    in it, and the network is deleted only when the last member deletes itself from
    the network. No member or AWS account, even the creator’s AWS account, can delete
    the network until they are the last member and delete themselves.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.6.5.2 Inviting and Removing Members in a Peer Network](chapter2.xhtml#re_ch-2-sec-19)'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Initially an AWS account creates a Managed Blockchain network, but surprisingly
    this network is not owned by that AWS account, or any other AWS account. Hence
    a Managed Blockchain network is decentralized. To alter the configurations of
    the network, members make proposals that all other members in the network vote
    on. If another AWS account desires to join the network, an existing member creates
    a proposal to invite the account. Other members can vote Yes or No on the proposal.
    If the proposal is approved by gaining Yes as majority an invitation is sent to
    the AWS account. The account then accepts the invitation and creates a member
    to join the network. Similarly when a member in a different AWS account is required
    to be removed a proposal for removal is submitted. A principal in an AWS account
    with sufficient permissions can remove a member that the account owns at any time
    by deleting that member directly, without submitting a proposal for voting.
  prefs: []
  type: TYPE_NORMAL
- en: The voting policy for the network is defined by the network creator when they
    create the network. This voting policy determines the basic rules, such as the
    percentage of votes required to pass the proposal, and the duration before the
    vote expires, etc., for all proposals voting on the network.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever a new member joins the network, one of the first things they must do
    is create at least one peer node in the membership. Blockchain networks contain
    a distributed, cryptographically secure ledger that maintains a history of transactions
    in the network that is immutable—it can’t be changed. Each peer node stores a
    local copy of the ledger in a distributed manner. Each peer node also holds the
    global state of the network for the channels in which they participate, that gets
    updated with each new transaction performed in the network. The peer nodes also
    interact with each other to create and endorse the transactions that are proposed
    on the network. Based on their business logic and the blockchain framework being
    used members can define the rules in the endorsement. In this way, every member
    can independently verify the transaction history without a centralized authority.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.7 Applications and Implementation of Blockchain](chapter2.xhtml#re_ch-2-sec-20)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By now, we all know the working of blockchain. Blockchain creates a ledger of
    transactions which is secure, tamper-proof, and can be easily accessible. Like
    the Internet, blockchain has no central authority, instead it is a network of
    transactions shared over a vast network of users. It is made up of a chain of
    blocks, where each block holds data, the hash code of the block, and the hash
    of the previous block. If data on any block are changed, then its hash code changes
    due to which the next block no longer points to the previous block.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are six basic steps of blockchain where each step represents different
    aspects of blockchain:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, a transaction of some sort is defined. The transaction can be a literal
    transaction, such as a user wanting to send money to another user, or can be less
    literal, such as a user trying to pass a secure token for identification.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2\. Second, this transaction is codified into a block, which is then added to
    the network for processing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 3\. Third, the block is presented to all distributed members, and is compared
    amongst them for integrity and, in some cases, against previous records of ledgers
    to prove authoritatively whether or not it is valid.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 4\. Fourth, the members within the blockchain either deny or approve the block
    itself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 5\. Fifth, the block is either denied or approved and if approved, the block
    is added to the chain of records.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 6\. In the sixth and final step, the transaction is approved and carried out.
    In the case of a financial transaction, the money changes hands; in this case,
    it is like a token; the token generated is then verified by network and trusted
    throughout the network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Due to these features, blockchain has a huge number of applications. Some of
    the important applications of blockchain are discussed.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.7.1 Blockchain Technology in Finance](chapter2.xhtml#re_ch-2-sec-21)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Blockchain for finance is not a very new concept. But the idea of blockchain
    became famous when Satoshi Nakamoto used the concept of blockchain in his idea
    which he called Bitcoin. Bitcoin is a perfect example of blockchain for finance.
  prefs: []
  type: TYPE_NORMAL
- en: There is no arguing that blockchain got its recognition after Bitcoin. Many
    other currencies came into the market when Bitcoin start getting famous. We called
    these currencies cryptocurrencies because they use cryptographic functions such
    as hash 256, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a good example of what a single cryptocurrency block may look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/inline2.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The blockchain is a very efficient and fail-proof method of verifying a transaction.
    It is virtually impossible to fake a transaction in cryptocurrencies like Bitcoin.
  prefs: []
  type: TYPE_NORMAL
- en: To fake a transaction in Bitcoin, one has to alter all the blocks on a blockchain
    on every copy of the blockchain. Blockchain also uses a concept called proof of
    work. Due to the concept of proof of work, a user has to solve a problem which
    requires a high amount of processing power, and only that person who solves the
    problem first is allowed to add a new block in the blockchain. The amount of cost
    and labor it saves for the global financial market is so appealing that many of
    the famous and major financial institutions have already started to invest millions
    of resources to research how best to implement it.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.7.2 What Can Blockchain Do for the Financial and Banking Industries?](chapter2.xhtml#re_ch-2-sec-22)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Blockchain has the potential to fully change the financial services that we
    are using today. Some of the top factors that blockchain can change in finance
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.7.2.1 Fraud Detection](chapter2.xhtml#re_ch-2-sec-23)'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Blockchain is getting bigger because it can handle fraud detection in a way
    that our normal banking system can’t. Most of the banking system nowadays is a
    centralized system. There is one server that holds records of all the transactions.
    But these systems are vulnerable to cyberattacks. If any hacker breaches the system,
    then he has full access to make any fraud. The blockchain is essentially a distributed
    ledger. In the blockchain, each block contains a timestamp and holds some batches
    of individual transactions. These records also contain a link to a previous block.
    It is believed that this technology has the power to eliminate some of the current
    crimes that are being committed online today against our financial institutions.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.7.2.2 Know Your Customer (KYC)](chapter2.xhtml#re_ch-2-sec-24)'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: According to Thomson Reuters Survey, financial companies spend anywhere between
    $60 million to $500 million to keep up with know your customer (KYC) and customer
    due diligence regulations. Blockchain would allow the autonomous confirmation
    of one client by allowing one organization to be reached by other companies so
    the KYC process wouldn’t have to start over again.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.7.2.3 Payments](chapter2.xhtml#re_ch-2-sec-25)'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Blockchain division could be highly transformative in the payments process.
    Blockchain will give higher security and lower costs to organizations like banks
    to process payments between companies and their buyers and even between banks
    themselves. In the current reality, there are a lot of intermediaries in the payment
    processing system, but blockchain would reduce the need for a lot of them.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.7.3 Problems in Implementing Blockchain in Financial Services](chapter2.xhtml#re_ch-2-sec-26)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Blockchain provides huge numbers of opportunities to improve our financial services
    but before implementing this there are some hurdles which we need to clear first.
  prefs: []
  type: TYPE_NORMAL
- en: The blockchains that would be used by financial institutions would need to comply
    with privacy laws of today and the future and need to ensure the safety of the
    data. There are many questions regarding regulatory oversight for this new technology
    that need to be sorted out. And any blockchain used in this sector would need
    to handle an extraordinarily large data set, therefore scalability is incredibly
    important.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.8 Blockchain Security in Online Voting](chapter2.xhtml#re_ch-2-sec-27)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another application for blockchain technology is in e-voting systems. We all
    know the importance of fair elections in a democratic country where altering votes
    is a serious crime. There are many tools for fair elections such as electronic
    voting machines (EVM), but cyberhackers have already proved that they are vulnerable.
    In a world of rapidly increasing technological progress, old technology such as
    EVM can no longer provide 100% insurance against changes in votes. Blockchain
    is fool-proof technology and what is once written is not easy to change forcefully.
    This feature of blockchain makes it perfect for voting. By casting votes as transactions,
    we can create a blockchain which keeps track of the tallies of the votes. This
    way, everyone can agree on the final count because they can count the votes themselves,
    and because of the blockchain audit trail, they can verify that no votes were
    changed or removed, and no illegitimate votes were added. A similar blockchain-based
    mobile voting system had been scheduled to be used in the U.S. state of West Virginia’s
    midterm elections, Cointelegraph reported September 27\. Following the early November
    elections, the state’s Secretary of State noted that 144 military personnel stationed
    overseas from 24 counties were able to successfully cast their ballots on a mobile,
    blockchain-based platform called Voatz.
  prefs: []
  type: TYPE_NORMAL
- en: In May, Cointelegraph released an analysis of the potential usage of blockchain
    technology for elections.
  prefs: []
  type: TYPE_NORMAL
- en: This year, several countries worldwide have announced the consideration of blockchain-based
    systems for voting, such as Ukraine, Catalonia, and the Japanese city of Tsukuba.
    Back in June, the Swiss city of Zug, commonly known as ‘Crypto Valley’, conducted
    a blockchain-powered trial municipal vote, as Cointelegraph wrote June 9.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain systems not only have higher security than traditional voting systems
    but also open the doors to online voting or e-voting. We all know that blockchain
    cannot be altered; there is already some research going on in which people are
    trying to perfect e-voting systems.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.8.1 Challenges in E-Voting Applications for Blockchain](chapter2.xhtml#re_ch-2-sec-28)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The challenge in this sector is not security or the money required to change
    the current system; the main reason we are still using old system is that a resilient
    and inclusive voting system should be something a citizen or group of citizens
    can understand and replace by pen and paper if it fails. Not everyone is on the
    Internet; it is true that many still struggle to vote though EVM, and these technologies
    are still new for a huge number of people in developing countries like India.
    The system must remain backward-compatible and have realistic fallback options,
    for something so sensitive
  prefs: []
  type: TYPE_NORMAL
- en: '[2.8.1.1 Blockchain-Based Certification](chapter2.xhtml#re_ch-2-sec-29)'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Blockchain can also be used in creating authentic certificates or to verify
    the authenticity of certificates. Counterfeiting in certificates has been a longstanding
    issue. Not until the Massachusetts Institute of Technology Media Lab released
    their project of Blockcerts, a technique which is mainly implemented by conflating
    the hash value of local files to the blockchain, did an effective technological
    approach protecting authentic credential certification and reputation appear,
    but there remain numerous issues.
  prefs: []
  type: TYPE_NORMAL
- en: Based on Blockcerts, a series of cryptographic solutions have been proposed
    to resolve the issues above, including utilizing a multi-signature scheme to ameliorate
    the authentication of certificates exerting a safe revocation mechanism to improve
    the reliability of certificates revocation establishing a secure federated identification
    to confirm the identity of the issuing institution.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.8.1.2 Working Insight](chapter2.xhtml#re_ch-2-sec-30)'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When a user presents a document, the technology converts or encodes the document
    into a cryptographic digest or cryptographic hash. Satoshi Nakamoto’s white paper
    on Bitcoin carries a permanent hash of
  prefs: []
  type: TYPE_NORMAL
- en: Submitting the same document more than once, for verification, will have the
    hash and the transaction markers match each time. If the document contains any
    changes, the markers won’t match. The user will also have the power to allow or
    disallow said organization or individual from viewing the document.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.8.1.3 How to Verify Documents on a Blockchain](chapter2.xhtml#re_ch-2-sec-31)'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Currently, there are multiple ways in which one can verify the existence of
    a document on the blockchain. The easiest of them is to re-upload the document
    to verify its existence. Upon re-uploading of the document, the proof of its existence
    is verified, as the cryptographic digest and the marker for the transaction are
    also verified. The other ways are to check the transaction record of the Bitcoin
    blockchain to verify the existence of a time-stamped document. Returning to the
    verification page of the original time-stamped document also verifies its existence.
    Thus, the existence of a time-stamped document on a prior date is proven.
  prefs: []
  type: TYPE_NORMAL
- en: This will help banks, educational institutions, and healthcare industries verify
    documents with much less time, cost, and effort.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.9 Building a Blockchain](chapter2.xhtml#re_ch-2-sec-32)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before starting, remember that a blockchain is an immutable, sequential chain
    of records called blocks. They can contain transactions, files, or any data you
    like, really. But the important thing is that they’re chained together using hashes.
  prefs: []
  type: TYPE_NORMAL
- en: Building a blockchain is not something for which you require a degree; anyone
    with basic programming knowledge can create their own blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.9.1 Generations of Hashes](chapter2.xhtml#re_ch-2-sec-33)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By now you may know that each block of a blockchain contains a hash value, which
    is changed if someone tries to change a single work in of the page. Each block
    also contains a hash of the previous block and the next block, So, if someone
    tries to change any value, he/she has to change the hash on every block on the
    blockchain. The hash is what makes the blockchain foolproof.
  prefs: []
  type: TYPE_NORMAL
- en: Before starting to build blockchain, we need to get some basic knowledge of
    what hashing is in cryptography.
  prefs: []
  type: TYPE_NORMAL
- en: Hashing is generating a value or values from a string of text using a mathematical
    function.
  prefs: []
  type: TYPE_NORMAL
- en: In simple words, hashing means taking a string of variable size and converting
    it into an output of fixed length. Cryptocurrencies like Bitcoin use Secure Hashing
    Algorithm 256, also known as SHA-256.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how the hashing process works. We are going to put in certain inputs.
    For this exercise, we are going to use the SHA-256.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/inline2.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the image, hashing can take input of any length and generate
    fixed output (256-bit output in SHA-256).
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that a particular string always generates the same hash
    output. This hashing method is also used in storing passwords; instead of storing
    the passwords of a user in a database, companies store the hash of the password
    and whenever the user inputs their password, they compare the hash generated from
    the user’s entered text and the hash stored in the database; if both hashes match,
    the user is logged in.
  prefs: []
  type: TYPE_NORMAL
- en: Another important thing about hashes is that hashing is a one-way function.
    That means if anyone has the hash key of a string, it is impossible to generate
    that string back from its hash value.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.9.2 Let Us See How You Make Your Own Hash Function in Python](chapter2.xhtml#re_ch-2-sec-34)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let us see an example by creating your own hash function in Python. I am assuming
    you already know how to install and use Python on your system.
  prefs: []
  type: TYPE_NORMAL
- en: First, open Python on your system. You can do this by going to terminal and
    typing Python.
  prefs: []
  type: TYPE_NORMAL
- en: This command will put you into the Python REPL, an environment where you can
    try out Python commands directly as opposed to writing a program in a separate
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Then, type the following. Don’t ignore the tab.
  prefs: []
  type: TYPE_NORMAL
- en: import  hashlib
  prefs: []
  type: TYPE_NORMAL
- en: def
  prefs: []
  type: TYPE_NORMAL
- en: 'hash(mystring):'
  prefs: []
  type: TYPE_NORMAL
- en: hash_object = hashlib.md5(mystring.encode())
  prefs: []
  type: TYPE_NORMAL
- en: print(hash_object.hexdigest())
  prefs: []
  type: TYPE_NORMAL
- en: 'You have now created a function, hash(), which will calculate and print out
    the hash value for a given string using the MD5 hashing algorithm. To run it,
    put a string in between the parentheses in quotation marks, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: hash(“AnyString”)
  prefs: []
  type: TYPE_NORMAL
- en: After that, press ENTER to see the hash digest of that string.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see that calling the hash function on the same string will always
    generate the same hash, but adding or changing one character will generate a completely
    different hash value:'
  prefs: []
  type: TYPE_NORMAL
- en: hash(“AnyString”) =>
  prefs: []
  type: TYPE_NORMAL
- en: 7ae26e64679abd1e66cfe1e9b93a9e85 hash(“AnyString!”) => 6b1f6fde5ae60b2fe1bfe50677434c88
  prefs: []
  type: TYPE_NORMAL
- en: In the Bitcoin protocol, the hash functions are a major part of the block hashing
    algorithm which is used to write new transactions into the blockchain through
    the mining process.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.10 API Creation for Blockchain](chapter2.xhtml#re_ch-2-sec-35)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the best elements of the blockchain is the fact it is driven entirely
    by the concept of trust. Each interaction on the blockchain trusts and verifies
    the transaction, and depends on the consensus of all nodes to track what is an
    otherwise untrackable, decentralized activity. The API community is likewise driven
    by trust as a key concept – and this is why the blockchain is an amazing element
    of connectivity in the API stack.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.10.1 So, What Is API?](chapter2.xhtml#re_ch-2-sec-36)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: API stands for application programming interface. It is a way for software to
    exchange functionalities between each other. API is a software intermediary that
    allows two applications to talk to each other ([Figure 2.10](chapter2.xhtml#fig2.8)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig2.10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 API creation of blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: '[2.10.2 How to Integrate Blockchain APIs in a Website](chapter2.xhtml#re_ch-2-sec-37)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are hundreds of different APIs available on the Internet which give huge
    functionalities to us. In this guide, we shall consider one of the simplest applications
    for setting up a blockchain API. An API allows Bitcoin payments to be accepted
    on a website. The process depends on Receive Payments API V2 of blockchain to
    generate new unused addresses to receive payments for a specific extended public
    key (xPub):'
  prefs: []
  type: TYPE_NORMAL
- en: First, to make a request for an API key, users must set up a wallet at [www.blockchain.info](http://www.blockchain.info)
    and request an API key at [https://api.blockchain.info/v2/apikey/request/](https://api.blockchain.info).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next step is to generate an extended public key which is also called xPub.
    If you generate a wallet from the address given above, the xPub can be found in:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we generate a unique address for each customer. The basic URL for creating
    a new request for every customer is: [https://api.blockchain.info/v2/receive?xpub=](https://api.blockchain.info)$xpub&callback=$callback_url
    &key=$key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is an API key which contains three parameters. These parameters are as
    follows
  prefs: []
  type: TYPE_NORMAL
- en: 1\. xpub – your xPub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2\. callback_url – a callback URL which is to be notified when a payment is
    received.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 3\. key – your blockchain.info API key which you have created in step 1\. Please
    note that every call to the server will increment the index by one to avoid showing
    the same address to different customers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[References](chapter2.xhtml#re_b-9781000175257-bib2)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'W. Akins, J. L. Chapman, and J. M. Gordon, “A whole new world: Income tax considerations
    of the bitcoin economy,” 2013\. [Online]. Available: [https://ssrn.com/abstract=2394738](https://ssrn.com).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. Biryukov, D. Khovratovich, and I. Pustogarov, “Deanonymisation of clients
    in bitcoin p2p network,” In Proceedings of the 2014 ACM SIGSAC Conference on Computer
    and Communications Security, New York, NY, USA, 2014, pp. 15–29.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Blockchain Wikipedia . Available: [https://en.wikipedia.org/wiki/Blockchain](https://en.wikipedia.org)
    2: Bitcoin Wikipedia. Available: [https://en.wikipedia.org/wiki/Bitcoin](https://en.wikipedia.org).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'I. Eyal and E. G. Sirer, “Majority is not enough: Bitcoin mining is vulnerable,”
    In Proceedings of International Conference on Financial Cryptography and Data
    Security, Berlin, Heidelberg, 2014, pp. 436–454.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Follow my vote. Available: [https://followmyvote.com/online-voting-technology/blockchain-technology/](https://followmyvote.com)
    5: cointelegraph.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: G. Foroglou and A.-L. Tsilidou, “Further applications of the blockchain,” In
    12th Student Conference on Managerial Science and Technology. 2015.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'G. Hileman. “State of blockchain q1 2016: Blockchain funding overtakes bitcoin,”
    Coindesk, 2016\. [Online]. Available: [http://www.coindesk.com/state-of-blockchain-q1-2016/](http://www.coindesk.com).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A. Kosba, A. Miller, E. Shi, Z. Wen, and C. Papamanthou, “Hawk: The blockchain
    model of cryptography and privacy-preserving smart contracts,” In Proceedings
    of IEEE Symposium on Security and Privacy (SP), San Jose, CA, USA, 2016, pp. 839–858.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” 2008\. [Online].
    Available: [https://bitcoin.org/bitcoin.pdf](https://bitcoin.org).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'C. Noyes, “Bitav: Fast anti-malware by distributed blockchain consensus and
    feedforward scanning,” arXiv preprint arXiv:1601.01405, 2016.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'B. Marr . “Practical examples of how blockchains are used in banking and the
    financial services sector,” Forbes, 2017\. Available: [https://www.forbes.com/sites/bernardmarr/2017/08/10/practical-examples-of-how-blockch](https://www.forbes.com)ains-are-used-in-banking-and-the-financial-services-sector/#23adfc4c1a11.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'G. W. Peters, E. Panayi, and A. Chapelle, “Trends in crypto-currencies and
    blockchain technologies: A monetary theory and regulation perspective,” 2015\.
    [Online]. Available: [http://dx.doi.org/10.2139/ssrn](http://dx.doi.org). 2646618
    563.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'T. K. Sharma, “Documentation verification using blockchain” Blockchain Council,
    2017\. Available: [https://www.blockchain-council.org/blockchain/document-verification-system-using-bloc](https://www.blockchain-council.org)kchain/.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'M. Sharples and J. Domingue, “The blockchain and kudos: A distributed system
    for educational record, reputation and reward,” In Proceedings of 11th European
    Conference on Technology Enhanced Learning (EC-TEL 2015), Lyon, France, 2015,
    pp. 490–496.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'M. Yakubowski . “South Korean government to test blockchain use for e-voting
    system,” CoinTelegraph, 2018\. Available: [https://cointelegraph.com/news/south-korean-government-to-test-blockchain-use-for-e-voting-system](https://cointelegraph.com).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Y. Zhang and J. Wen, “An iot electric business model based on the protocol of
    bitcoin,” In Proceedings of 18th International Conference on Intelligence in Next
    Generation Networks (ICIN), Paris, France, 2015, pp. 184–191.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
