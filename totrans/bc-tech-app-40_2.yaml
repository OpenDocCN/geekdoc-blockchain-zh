- en: 2 Decentralized applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2 去中心化应用
- en: Decentralized applications (DApps) are application paradigms that combine on-chain
    application logic executed in the DL network with traditional application engineering
    approaches. The DL network assures trusted execution of the on-chain logic (i.e.,
    smart contracts) while Web, mobile, server-side, or embedded applications provide
    user and machine interfaces for the DApps.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 去中心化应用（DApps）是一种应用范例，它结合了在分布式账本（DL）网络中执行的链上应用逻辑和传统应用工程方法。DL网络确保链上逻辑（即智能合约）的可靠执行，而Web、移动、服务器端或嵌入式应用为DApps提供用户和机器接口。
- en: DL networks differ in the applied technologies, as also in their organization
    and governance. These factors jointly contribute to the trust, performance, and
    scalability of a DL network. Smart contracts and off-chain applications adopt
    some of the known software engineering approaches. At the same time, a decentralized
    environment and immutable ledgers require certain adaptations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: DL网络在应用的技术，以及它们的组织和管理方面各不相同。这些因素共同有助于DL网络的信任、性能和可扩展性。智能合约和离线应用采用了一些已知的软件工程方法。与此同时，去中心化环境和不可变账本需要某些适应性。
- en: Apart from the key services provided by a DL network, DL ecosystems often accommodate
    additional distributed and support services, too. These services facilitate, for
    example, bulk decentralized and distributed storage, a combination of smart contracts
    and off-chain data sources, user-friendly naming of decentralized resources, or
    monitoring of a running DL network.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 除了DL网络提供的关键服务外，DL生态系统通常还容纳其他分布式和支持服务。这些服务例如，大规模去中心化和分布式存储、智能合约与离线数据源的组合、对去中心化资源友好命名，或监控运行中的DL网络。
- en: Decentralized application architects and developers rely on DL technologies
    and support services. However, for DApps productization, they require business-grade
    development and support ecosystems and third-party services in order to focus
    on application development. Productization of decentralized applications is a
    significant step towards broader adoption of these, still relatively novel, technologies
    and solutions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 去中心化应用架构师和开发者依赖于DL技术和支持服务。然而，对于DApps的产品化，他们需要企业级的开发和支持生态系统以及第三方服务，以便能够专注于应用开发。去中心化应用的产品化是朝着更广泛采用这些相对新颖的技术和解决方案的重要一步。
- en: 2.1 Decentralized trust - distribution vs. decentralization
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.1 去中心化信任 - 分布对比去中心化
- en: 'Two related characteristics are required and contribute to decentralized trust
    in distributed ledger systems. These are:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 两个相关特性是必需的，并且有助于分布式账本系统中的去中心化信任。这些是：
- en: The distributed nature of ledgers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 账本的分布式特性
- en: Their decentralized control
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们的去中心化控制
- en: Let us consider a simple database system that is installed on a computer. It
    is united/consolidated in a single instance and is thus not distributed. The system
    control is centralized in the hands of the system proprietor, who manages access
    rights for all the system users. Note that the proprietors can appoint another
    user to manage the system on their behalf. However, even in this case, they keep
    the right to override any of the users’ actions and still fully control the system.
    For performance or other reasons, the database system can be scaled over several
    computers. A distributed system topology enables many essential benefits, including
    redundancy, eliminating single points of failure, resilience to failures, or performance
    scalability. Modern cloud and network virtualization systems allow the highly
    efficient and scalable distribution of systems. However, the control of the entire
    system would remain centralized with the proprietor, and the access policies would
    remain very similar to the one in the consolidated implementation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个安装在计算机上的简单数据库系统。它集中在一个单一实例中，因此不是分布式的。系统控制集中在系统所有者手中，所有者管理所有系统用户的访问权限。请注意，所有者可以指定另一用户代表他们管理系统。然而，即便在这种情况下，他们仍保留撤销任何用户行为和完全控制系统的权利。出于性能或其他原因，数据库系统可以在多台计算机上进行扩展。分布式系统拓扑
    enable许多关键优势，包括冗余、消除单点故障、恢复能力或性能可扩展性。现代云和网络虚拟化系统允许高效和可扩展的系统分配。然而，整个系统的控制将仍然集中在所有者手中，访问策略将仍然与集中实现非常相似。
- en: To disperse the administration (governance) of the system so that there is no
    single entity having control over the system, we need a different approach, that
    is, decentralization of control. Such a system has to be distributed as many instances
    are building the system. Unlike in the distributed and centralized database example,
    each instance is controlled by a different entity in a decentralized system. These
    can be, for example, users who install and run blockchain nodes or consortium
    partners who agree to commonly run a DL network and, therefore, all set up their
    node instances. De/centralization in DLs is, thus, more organizational in nature
    and not technical. However, the underlying technology has to provide a distributed
    system, which is a prerequisite for its decentralized governance. The actions
    in the system cannot be based on an arbitrary decision of a single proprietor
    but are based on a mutual consensus. The same consensus mechanism is implemented
    in every node instance. These mechanisms assure that all the actions can be conducted
    only in the pre-agreed way, even if some of the system participants act maliciously.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了分散系统的管理（治理），使得没有单一实体能够控制整个系统，我们需要一种不同的方法，那就是控制去中心化。这样的系统必须作为许多实例来构建。与分布式和中心化数据库的例子不同，去中心化系统中的每个实例都由不同的实体控制。这些可以是，例如，安装和运行区块链节点的用户或同意共同运行DL网络的联盟伙伴，因此，他们都设置了自己的节点实例。在DL中，去/中心化在本质上更多的是组织性的，而不是技术性的。然而，底层技术必须提供一个分布式系统，这是其去中心化治理的前提。系统中的行动不能基于单一所有者的任意决策，而是基于相互共识。在每一个节点实例中都实施相同的共识机制。这些机制确保了所有行动只能以预先约定的方式进行，即使系统中的一些参与者行为恶意。
- en: A DL system is distributed, by nature. If, in addition, we implement it in a
    way that facilitates decentralized governance, we get a decentralized trusted
    system. Unlike in centralized trusted systems, where we need to trust the system
    proprietor (e.g., a bank, holding a database with client account and balance information),
    in decentralized trusted systems, there is no central entity we would have to
    trust. The trust is assured by DL protocols, which are commonly open source and,
    hence, available for verification to anyone.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: DL系统本质上是分布式的。如果我们以促进去中心化治理的方式来实现它，我们就能得到一个去中心化可信系统。与中心化可信系统不同，在那里我们需要信任系统所有者（例如，一家银行，持有包含客户账户和平衡信息的数据库），在去中心化可信系统中，没有我们必须要信任的中心实体。信任是由DL协议保证的，这些协议通常是开源的，因此，任何人都可以进行验证。
- en: '[Table 2.1](#b_9783110681130-002_tab_001) shows that a consolidated topology,
    where the governance can only be centralized, provides only centralized trust.
    In distributed systems with centralized governance, no decentralized trust can
    be assured either. Only those systems, which are distributed and decentralized,
    can provide decentralized trust.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 2.1](#b_9783110681130-002_tab_001) 显示，一个集中的拓扑结构，其中治理只能集中，只提供集中的信任。在具有集中治理的分布式系统中，也无法保证去中心化的信任。只有那些分布化和去中心化的系统才能提供去中心化的信任。'
- en: 'Tab. 2.1:Decentralized trust: relations between topology and governance of
    a communication system.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.1：去中心化信任：通信系统拓扑与治理之间的关系。
- en: '|  |  | Governance |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '|  |  | 治理 |'
- en: '| --- | --- | --- |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|  |  | Decentralized | Centralized |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '|  |  | 去中心化 | 中心化 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Topology | Consolidated | Not applicable | Centralized trust |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 拓扑 | 集中 | 不适用 | 集中信任 |'
- en: '| Distributed | Decentralized trust | Centralized trust |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 分布式 | 去中心化信任 | 中心化信任 |'
- en: The decentralized trust in DLs is the fundament for the trusted exchange of
    transactions among system participants. Transactions are validated and immutably
    and non-refutably stored in a ledger as a part of a new chain block or a related
    data structure in other ledger architectures (see Section 1 for details). Trusted
    exchange of transactions is essential for cryptocurrencies and, hence, the immense
    proliferation of distributed ledger technology. However, modern DL platforms,
    apart from the trusted exchange of transactions, also enable trusted execution
    of programming code–smart contracts. Smart contracts are one of the key elements
    of decentralized applications, discussed in Section 2.4.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式账本（DLs）中的去中心化信任是系统参与者之间进行可信交易交换的基础。交易被验证并作为新区块的一部分或其他账本架构中的相关数据结构永久且不可反驳地存储在账本中（具体见第1节）。可信交易交换对于加密货币至关重要，因此分布式账本技术的广泛传播也得益于它。然而，除了可信交易交换之外，现代DL平台还允许编程代码——智能合同的可信执行。智能合同是去中心化应用（DApp）的关键要素之一，在第2.4节中讨论。
- en: 2.2 DApp triplet
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.2 DApp 三元组
- en: 'The term decentralized application is not precisely defined. Despite being
    present for more than a decade now, DLs and blockchains are still evolving concepts
    and technologies, so terminology, too, is maturing along with the research, practical
    developments, new DL-based application domains, and use cases. In this book, we
    refer to DApps [[16](9783110681123_008192.xhtml#b_9783110681130-005_ref_016)]
    as decentralized software systems with three components. We call these three components,
    the DApp triplet (see [Fig. 2.1](#b_9783110681130-002_fig_001)):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: “去中心化应用”这个术语并没有被精确定义。尽管分布式账本和区块链技术已经存在了十多年，但它们仍然是在发展中的概念和技术，因此相关术语也在随着研究、实际发展、新的基于DL的应用领域和使用案例一起成熟。在这本书中，我们将DApps[[16](9783110681123_008192.xhtml#b_9783110681130-005_ref_016)]称为具有三个组件的去中心化软件系统。我们称这三个组件为DApp三元组（见[图2.1](#b_9783110681130-002_fig_001)）：
- en: A decentralized overlay distributed ledger network for trusted exchange of transactions
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于可信交易交换的分布式叠加账本网络
- en: The on-chain application logic that is executed in a trusted way in the overlay
    network
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在叠加网络中以可信方式执行的链上应用逻辑
- en: The off-chain application logic implemented outside of the overlay network that
    can utilize both the trusted exchange of transactions and the trusted execution
    of the on-chain application logic
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链外应用逻辑是在叠加网络之外实现的，能够利用可信的交易交换和链上应用逻辑的可信执行。
- en: '![](../graphic/converted/b_9783110681130-002_fig_001.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../graphic/converted/b_9783110681130-002_fig_001.jpg)'
- en: 'Fig. 2.1: DApp triplet: DL network, smart contracts, and off-chain applications.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1：DApp三元组：DL网络、智能合同和链外应用。
- en: At a very high level, DApp architecture can be compared to modern Web applications,
    which comprise backend and frontend, and require a communication network that
    interconnects the two. In the backend, the application logic that requires, for
    example, big data storage or complex computations is usually implemented. The
    frontend part of the application is oriented more towards the client user interfaces
    or logic in the embedded systems in IoT. Backend exposes an application programming
    interface (API), for example REST API, to exchange JSON structured content between
    backend and frontend. Communication connectivity is assured via the Internet protocol
    (IP) networks.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在非常高的层面上，DApp架构可以与现代Web应用相比较，后者包括后端和前端，并需要一个连接两者的通信网络。在后端，需要例如大数据存储或复杂计算的应用逻辑通常被实现。应用程序的前端部分更侧重于客户端用户界面或物联网中嵌入式系统的逻辑。后端暴露了一个应用程序编程接口（API），例如REST
    API，用于在后端和前端之间交换JSON格式的内容。通信连接通过互联网协议（IP）网络来确保。
- en: In DApps, the backend is assured by the smart contracts, the application logic
    running on the DL network. It is therefore called the on-chain logic/application
    part, too. Frontend applications in DApp are Web, mobile, or embedded applications.
    They do not run on the DL network (thus the off-chain application part) but access
    the backend services through the APIs exposed by the DL network nodes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在DApp中，后端由智能合同保证，这些合同是在DL网络上运行的应用逻辑。因此，它也被称为链上逻辑/应用部分。DApp的前端应用程序是Web、移动或嵌入式应用程序。它们不在DL网络上运行（因此属于链外应用部分），而是通过DL网络节点暴露的API访问后端服务。
- en: 2.3 DL networks
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.3 DL 网络
- en: 'A DL network is an incarnation of a particular DL technology. The DL technology
    (DLT) is implemented in a network node, and interconnected nodes build the network.
    There can be many different networks based on the same DLT. [Figure 2.2](#b_9783110681130-002_fig_002)
    shows that the DL operation is a set of application layer protocols that resides
    on a traditional TCP/IP stack and builds an overlay network. Similar communication
    topology is found in, for example, peer-to-peer (P2P) content distribution systems.
    For example, some of the communication principles in Ethereum have been directly
    adopted from the existing P2P systems. Unlike in the client-server communication
    topology, there are no central entities in a distributed DL network. All the nodes/clients
    have equal roles in providing communication capabilities. Peer nodes make the
    topology resilient and scalable. A node is thus a piece of software. Other denominations
    for a node are possible, too. A DL node is frequently referred to as a client.
    A node runs the DL protocols such as:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式账本网络是特定分布式账本技术（DLT）的体现。分布式账本技术（DLT）在网络节点上实施，互联的节点构建网络。基于同一DLT可以有多个不同的网络。图2.2显示，分布式账本操作是一组位于传统TCP/IP堆栈上的应用层协议，并构建一个覆盖网络。类似的通信拓扑在例如P2P内容分发系统中也可以找到。例如，以太坊中的一些通信原则直接从现有的P2P系统中采纳。与客户端-服务器通信拓扑不同，分布式账本网络中没有中心实体。所有节点/客户端在提供通信能力方面具有平等的角色。对等节点使拓扑结构具有弹性且可扩展。因此，节点是一种软件。节点还有其他可能的称呼。分布式账本节点通常被称为客户端。节点运行分布式账本协议，例如：
- en: Low-level P2P network protocols for node discovery, network formation, flow
    control, or encryption of the traffic
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于节点发现、网络形成、流量控制或加密通信的低级P2P网络协议
- en: High-level P2P communication protocols for node identity, session management,
    and data exchange between the nodes
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级P2P通信协议，用于节点身份识别、会话管理以及节点间的数据交换
- en: Upper layer protocols for exchanging data for synchronizing the chain among
    the nodes, for example, block headers, and for exchanging transactions
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于在节点间同步链路的数据交换协议，例如，区块头信息，以及交易交换
- en: Protocols for building transactions, including hashing and message serialization
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建交易协议，包括哈希和消息序列化
- en: Consensus protocols for mining nodes
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挖矿节点的共识协议
- en: Various node, network management, and service utilization protocols and APIs
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种节点、网络管理和服务利用协议及API
- en: '![](../graphic/converted/b_9783110681130-002_fig_002.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../graphic/converted/b_9783110681130-002_fig_002.jpg)'
- en: 'Fig. 2.2: DL network reference model.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2：分布式账本网络参考模型。
- en: 'Based on the scope of activated capabilities, the nodes in a DL network can
    be divided roughly into three categories:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 根据激活能力的范围，分布式账本网络中的节点可以大致分为三类：
- en: 'The full nodes: each node keeps a copy of the entire ledger and synchronizes
    it continuously. These nodes are essential for the distribution of the network.
    They assure the validity of the ledger and the security of the DL system. Maintaining
    a copy of the entire ledger (every block, every transaction, and all the meta-data
    for the ledger structure) might result in extensive storage requirements.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整节点：每个节点都保存着整个账本的副本，并持续地进行同步。这些节点对于网络的分布式至关重要。它们确保了账本的有效性以及分布式账本系统（DL）的安全性。保存整个账本的副本（每一个区块、每一笔交易以及账本结构的所有元数据）可能会导致庞大的存储需求。
- en: 'The light nodes: do not keep a copy of the entire ledger. They may have just
    the last part of it or partial information, e.g., block headers but not the block
    content. Light nodes impose modest system requirements and enable faster ledger
    synchronization, if the nodes’ connectivity is intermittent.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻量级节点：不保存整个账本的副本。它们可能只拥有账本的一部分，例如，区块头信息，但没有区块内容。轻量级节点对系统资源的要求较低，如果节点的连接是间歇性的，它们还可以实现更快的账本同步。
- en: 'The mining nodes: can be full or light nodes. Their key characteristic is running
    the ledger consensus protocols (see Section 1 and 1.2.1 for more details) to participate
    in the ledger building process. Mining is not a mandatory function of every DL
    node. However, it is frequently implemented in the standard node software and
    can be arbitrarily enabled.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挖矿节点：可以是完整节点或轻量级节点。它们的主要特征是运行账本共识协议（更多细节请参见第1节和1.2.1节）以参与账本的构建过程。并非每个分布式账本（DL）节点都必须具备挖矿功能。然而，它通常被集成到标准节点软件中，并且可以被任意启用。
- en: 'The access nodes: can be full or light nodes. They expose APIs for off-chain
    applications to interact with the DL network (see Section 2.5.2 for more details).
    As in mining, exposing the API is not a mandatory function, either.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接入节点：可以是完整节点或轻量级节点。它们为离链应用程序提供与DL网络交互的API（更多详情请参见2.5.2节）。与挖矿类似，暴露API并不是一个强制性的功能。
- en: But our interest in DL networks reaches beyond the technical aspects. It also
    includes the network governance, performance, and all the settings, tweaks, and
    new developments to adapt the DLTs for new, challenging use cases.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们对DL网络的关注超出了技术层面。它还包括网络治理、性能，以及所有设置、调整和新发展，以适应DLTs的新、具有挑战性的用例。
- en: 2.3.1 Network organization and governance
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.3.1 网络组织与治理
- en: 'Network governance covers various elements of the control of network nodes
    and, in this way, the control over the entire network and its services. The governance
    is as important as the DL technology for two essential qualities of DL networks:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 网络治理涵盖了网络节点控制的各个方面，从而控制整个网络及其服务。治理与DL技术对DL网络的两个基本特性同样重要：
- en: Performance
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能
- en: Security or trust
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性或信任
- en: 'In the governance of the network operation and the use of its services, two
    aspects need to be distinguished:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络运营治理及其服务使用方面，需要区分两个方面：
- en: Control of the network nodes and, thus, the control of the consensus process
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制网络节点，进而控制共识过程
- en: User access to the network services, for example, creating accounts, transactions,
    or transferring funds to another account.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户访问网络服务，例如创建账户、交易，或向另一个账户转帐资金。
- en: 'In a DL network, the governance approaches for the two aspects need not be
    the same. For example, network services might be available freely without special
    access control. In contrast, in the same network, the management of the existing
    nodes and installation of additional mining nodes might strictly be limited to
    the network proprietor only. This might cause a wrong impression in uninformed
    users about the network’s actual levels of trust and security. If the network
    control is centralized, we can trust the network only if we fully trust the network
    proprietor (just as in a traditional database example, given in [Section 2.1](#b_9783110681130-002_s_002_s_001)).
    No (un)restricted service access or claims about network distribution can eliminate
    the need for trust in a central entity. A valid question, in this case, would
    be: "*Do we really need a DL in this case?*"'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在DL网络中，这两方面的治理方法可以不同。例如，网络服务可能免费提供，而不需要特殊的访问控制。相比之下，在同一网络中，现有节点的管理和额外挖矿节点的安装可能严格限制仅限于网络所有者。这可能会让不知情的用户对网络的实际信任和安全级别产生错误的印象。如果网络控制是集中的，我们只能在完全信任网络所有者的情况下信任网络（就像在【2.1节】中给出的传统数据库示例一样）。没有任何（无）限制的服务访问或关于网络分布的声明可以消除对中心实体的信任需求。在这种情况下，一个有效的问题将是：“*我们真的需要DL在这种情况下吗？*”
- en: 2.3.1.1 Public, private, and consortium networks
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.3.1.1 公共、私有和联盟网络
- en: '[Section 2.1](#b_9783110681130-002_s_002_s_001) clarified that the distribution
    of entities in a DL network is the prerequisite for decentralized trust. A distributed
    system can be decentralized or not. The approach to decentralization in the network
    defines the level of trust one can have in such a network. Well-known public blockchain
    networks such as the Bitcoin and Ethereum networks (see Section 1.2) are highly
    distributed. At the same time, they impose no limitations on who can add new nodes
    to the network, create accounts and transactions, or participate in the mining
    process. Hence, they are decentralized, too.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 【2.1节】阐明，在DL网络中实体的分布是去中心化信任的前提。一个分布式系统可以是去中心化的或不是。网络的去中心化方法定义了人们对这样一个网络可以拥有的信任程度。比特币和以太坊网络（参见1.2节）等知名公共区块链网络是高度分布式的。同时，它们对谁可以向网络添加新节点、创建账户和交易，或参与挖矿过程没有任何限制。因此，它们也是去中心化的。
- en: For illustration, there were an estimated 7,000-8,000 nodes in public Ethereum
    mainnet in 2021 [[17](9783110681123_008192.xhtml#b_9783110681130-005_ref_017),
    [18](9783110681123_008192.xhtml#b_9783110681130-005_ref_018)] and about 10,000
    publicly listed full nodes in the Bitcoin network [[19](9783110681123_008192.xhtml#b_9783110681130-005_ref_019)].
    It is difficult to estimate the number of miners, as they are mainly organized
    into mining pools. Besides, to participate in mining, a node does not have to
    be a full node, and most miners are not. Another estimate states that around 100,000
    separate mining nodes in Bitcoin were organized in mining pools in 2021\. A similar
    number was reported for the Ethereum mainnet, too.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，2021年公有以太坊主网大约有7,000到8,000个节点[[17](9783110681123_008192.xhtml#b_9783110681130-005_ref_017),
    [18](9783110681123_008192.xhtml#b_9783110681130-005_ref_018)]，比特币网络中大约有10,000个公开列出的完整节点[[19](9783110681123_008192.xhtml#b_9783110681130-005_ref_019)】。估算矿工的数量很困难，因为他们主要组织成矿池。此外，参与挖矿的节点不必是完整节点，大多数矿工也不是。另一项估计指出，2021年大约有100,000个独立的比特币挖矿节点组织在矿池中。以太坊主网也有相似的报道。
- en: A public DL network relies solely on the high level of decentralization and
    implemented security algorithms to ensure the consensus among the honest majority
    of nodes. This provides security to the network and excludes malicious nodes from
    the network. In public DL networks, both the network control and service access
    are unrestricted. Such a network is a prerequisite to set up trusted decentralized
    cryptocurrencies, which was the first motivation of many of the DLTs. There are
    many prominent examples of public DL networks, for example, Bitcoin and Ethereum.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 公有DL网络完全依赖于高度的去中心化和实施的加密算法来确保大多数诚实节点的共识。这为网络提供了安全性，并将恶意节点排除在网络之外。在公有DL网络中，网络控制和服务访问都是不受限制的。这样的网络是建立可信的分布式加密货币的前提，这也是许多DLT（分布式账本技术）的最初动机。有许多著名的公有DL网络实例，比如比特币和以太坊。
- en: A private DL network is distributed, but the governance of the nodes and network
    is centralized to a single system proprietor. It, therefore, does not provide
    any decentralized trust. Limited or unlimited user service access cannot compensate
    for this lack of decentralization. Sometimes, the privately controlled networks
    tend to be presented as being public, primarily to gain the trust in the cryptocurrencies
    they provide. In the current version 1.0 of the IOTA network, for example, they
    only become genuinely valid when the network Coordinator node confirms them. All
    Coordinator nodes are operated and controlled by the IOTA Foundation, which has,
    in the past, already utilized this to modify the transaction ledger.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 私有DL网络是分布式的，但节点和网络的治理是集中在一个单一的系统所有者手中。因此，它不提供任何去中心化的信任。有限或无限制的用户服务访问无法弥补这种去中心化的缺失。有时，受私人控制的网络倾向于被描绘成是公共的，主要是为了获得它们提供的加密货币的信任。例如，在IOTA网络的当前1.0版本中，节点只有在其网络协调员节点确认后才真正有效。所有协调员节点都由IOTA基金会运营和控制，它过去已经利用这一点来修改交易账本。
- en: In a private DL network, we can apply the same technology and even the same
    initial setting as a public network. For example, we can use the same network
    node software (e.g., the Geth client for Ethereum), select the same consensus
    algorithm, and apply the same chain genesis settings as in the private Ethereum
    mainnet. We would probably have a much lower number of nodes in our network, but
    the operation of both networks would be very similar. There would be, of course,
    a difference in the chain data, but this would be due to different service usage
    patterns and not different network operations. The key difference between the
    public and or private network would thus be in their governance, apart from the
    use, of course.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在私有分布式账本（DL）网络中，我们可以应用与公有网络相同的技术，甚至可以使用相同的初始设置。例如，我们可以使用相同的网络节点软件（例如，以太坊的Geth客户端），选择相同的共识算法，并应用与私有以太坊主网相同的链创世设置。我们的网络可能节点数量要少得多，但两个网络的运作非常相似。链数据当然会有所不同，但这是由于不同的服务使用模式，而非不同的网络运作方式。公有与私有网络之间的关键区别，除了用途之外，在于它们的治理方式。
- en: Nevertheless, in private DL networks, we usually do not try to mimic the existent
    public ones. Instead, we apply different chain genesis settings or even changed
    DL protocols to improve network performance, vastly. The key benefit of a private
    DL network is that we can trim it for performance.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，在私有的DL网络中，我们通常不试图模仿现有的公共网络。相反，我们应用不同的链起始设置，甚至是更改DL协议，以大幅提高网络性能。私有DL网络的关键好处是我们可以对其进行性能优化。
- en: The challenge of centralized governance in public networks can, to a large extent,
    be limited in the consortium DL networks. Here, the network control is still not
    public, but it is also not limited to a single central entity. Usually, a consortium
    of partners is built, having a common objective – for example, a DApp that interconnects
    distributed energy resource prosumers, who do not necessarily trust each other
    but are interested in collaboration. Every consortium partner can set up nodes
    and participate in consensus decisions, so the control is now, to some extent,
    decentralized. It is still not as decentralized as in the public networks, but
    this might even not be needed. In a consortium network, we do not have anonymous
    participants in the network, so the outlaw can be penalized in other ways, for
    example, with exclusion from the partnership or with legal measures. Consortium-based
    DL network governance is widespread in financial or IoT business applications.
    Some of the prominent public DL networks have consortium-based network control
    and not a pubic one, as, for example, the Hedera public network (see [Section
    2.7.1.3](#b_9783110681130-002_s_002_s_007_s_001_s_003) for details).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在公共网络中集中治理的挑战，在很大程度上可以被联盟分布式账本网络（DL网络）所限制。在这里，网络控制仍然不是公开的，但也不局限于单一的中心实体。通常会建立一个合作伙伴联盟，拥有共同的目标——例如，一个连接分布式能源资源生产者（prosumers）的DApp，他们之间不一定互信但愿意合作。联盟中的每一个合作伙伴都可以建立节点并参与共识决策，所以控制现在在一定程度上是去中心化的。它仍然不如公共网络那样去中心化，但这可能甚至不是必需的。在联盟网络中，我们网络中没有匿名参与者，所以违法者可以通过其他方式受到惩罚，例如，被排除在合作伙伴之外或通过法律措施进行惩罚。基于联盟的DL网络治理在金融或物联网业务应用中很普遍。一些著名的公共DL网络是基于联盟的网络控制而非公开控制，例如Hedera公共网络（具体见[2.7.1.3节](#b_9783110681130-002_s_002_s_007_s_001_s_003)）。
- en: 2.3.1.2 Permissioned and permissionless networks
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.3.1.2 许可与非许可网络
- en: 'The public or private nature of a DL network is based on the mode of network
    access. It can be:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式账本网络（DL网络）的公共或私有性质取决于网络访问模式。它可以是：
- en: Permissioned
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许可
- en: Permissionless
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非许可
- en: In public networks, access to the network services is permissionless. This means
    that a new network user (usually a person) does not have to possess any dedicated
    rights to create new accounts, build and submit transactions, or even add new
    nodes to the network, including mining nodes. The participant thus remains anonymous
    and is identified only by his randomly created DL network addresses. The relation
    between the real users and their DL addresses does not have to be disclosed to
    participate in the network or utilize its services.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在公共网络中，网络服务的访问是无需许可的。这意味着新的网络用户（通常是个人）不必拥有任何专用权利来创建新账户、构建和提交交易，甚至向网络（包括挖矿节点）添加新节点。参与者因此保持匿名，仅通过其随机创建的DL网络地址来识别。真实用户与他们DL地址之间的关系不必披露即可参与网络或使用其服务。
- en: In a permissioned system, users are authorized to access the network services
    or participate in the network control. There are several benefits of permissioning
    in DL. Permissioned network control can enable better network performance and
    is easier to be managed. A permissioned network also does not require a cryptocurrency
    to incentivize the mining process, which positively affects transaction costs.
    All these benefits of permissioned network control reflect in the network services
    provided to the user. Besides, permissioned DL systems can facilitate compliance
    with regulations like GPRD.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在许可系统中，用户被授权访问网络服务或参与网络控制。在DL中许可有几个好处。许可网络控制可以实现更好的网络性能，并且更容易管理。许可网络也不需要加密货币来激励挖矿过程，这有助于降低交易成本。所有这些许可网络控制的好处都体现在用户所使用的网络服务上。此外，许可DL系统还可以帮助遵守GPRD等法规。
- en: The terms public and permissionless are often seen as synonymous. The public
    is then understood as having no formal identity (vs. permissioned, with identity).
    This might be true for many of the public DL networks, including Bitcoin and Ethereum.
    Nevertheless, a private or consortium-controlled network might provide permissionless
    public network services, too ([Fig. 2.3](#b_9783110681130-002_fig_003)). Operation
    of the network and user access to network services are two distinct aspects of
    network governance and do not have to apply different governance and permission
    principles. Thus, some of the DLT taxonomies [[20](9783110681123_008192.xhtml#b_9783110681130-005_ref_020)]
    discuss public-permissioned systems, where the best features of public, private,
    and permissioned are combined. An example of such a network is Corda.[¹](footnotes.xhtml#fn_1)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 公共和无权限这两个术语经常被认为是同义的。公共在这里被理解为没有正式身份（与受权限的，有身份的相比）。对于许多公共DL网络来说，这可能是真的，包括比特币和以太坊。尽管如此，私有或联盟控制的网络也可能提供无权限的公共网络服务，
    too ([图2.3](#b_9783110681130-002_fig_003)). 网络运行和用户对网络服务的访问是网络治理的两个不同方面，不必适用不同的治理和权限原则。因此，一些DLT分类法[[20](9783110681123_008192.xhtml#b_9783110681130-005_ref_020)]讨论了公共-受权限系统，其中结合了公共、私有和受权限的最佳特性。此类网络的一个例子是Corda。[¹](footnotes.xhtml#fn_1)
- en: '![](../graphic/converted/b_9783110681130-002_fig_003.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../graphic/converted/b_9783110681130-002_fig_003.jpg)'
- en: 'Fig. 2.3: DL network taxonomy.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3：DL网络分类。
- en: Let us consider some analogies to illustrate various combinations of governance
    and permissions in controlling a network and access to services. Please note that
    all the following are examples of centralized systems where we need to trust,
    for example, the mobile operator that it does not, for example, intercept our
    communications. Such a trust cannot be assumed, so there are strict regulations
    and legislation for the mobile operators and service providers to assure neutrality,
    privacy, and quality of service.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一些类比，以说明在控制网络和访问服务中治理和权限的各种组合。请注意，以下所有例子都是集中式系统，我们需要信任例如移动运营商，它不会，例如，拦截我们的通信。这种信任不能假设，因此对移动运营商和服务提供商有严格的规定和法律，以确保中立性、隐私和服务质量。
- en: 'Mobile networks:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 移动网络：
- en: 'Network control: private – by the mobile operator; permissioned – only the
    mobile network operator manages and controls the network.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络控制：私有 – 由移动运营商拥有；受权限控制 – 只有移动网络运营商管理和控制网络。
- en: 'Service access: public – anyone can become a mobile network user. The access
    is non-discriminatory, even though it is not free.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务访问：公共 – 任何人都可以成为移动网络用户。尽管服务不是免费的，但访问是非歧视性的。
- en: 'Service access permission: permissioned – if a user has a subscription, that
    is, a post-paid plan.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务访问权限：受权限控制 – 如果用户有订阅，即后付费计划。
- en: 'Service access permission: permissionless – if a user has no subscription,
    pre-paid.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务访问权限：非受权限控制 – 如果用户没有订阅，即预付费。
- en: 'Open public WLAN:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 开放公共WLAN：
- en: 'Network control: private – by the WLAN provider; permissioned – the provider
    usually restricts access to the WLAN management system.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络控制：私有 – 由WLAN提供商拥有；受权限控制 – 提供商通常限制对WLAN管理系统访问。
- en: 'Service access: public.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务访问：公共。
- en: 'Service access permission: permissionless – no user credentials are needed.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务访问权限：非受权限控制 – 无需用户提供凭证。
- en: 'Airport public WLAN:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 机场公共WLAN：
- en: 'Network control: private – by the WLAN provider, permissioned.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络控制：私有 – 由WLAN提供商拥有，受权限控制。
- en: 'Service access: public – anyone can register and then use the service.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务访问：公共 – 任何人都可以注册然后使用服务。
- en: 'Service access permission: permissioned – users need some prior registration,
    for example, through a web page.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务访问权限：受权限控制 – 用户需要先注册，例如，通过一个网页。
- en: 'Company private WLAN:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 公司私有WLAN：
- en: 'Network control: private – by the company running the WLAN, permissioned.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络控制：私有 – 由运营WLAN的公司拥有，受权限控制。
- en: 'Service access: private – only registered company employees can use the service.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务访问：私有 – 只有注册的公司员工可以使用服务。
- en: 'Service access permission: permissioned – users need a WLAN account provided
    by the WLAN administrators.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务访问权限：受权限控制 – 用户需要由WLAN管理员提供的WLAN账户。
- en: Tab. 2.2:Permissioning approaches in public, consortium, and private DL networks.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Tab. 2.2：公共、联盟和私有DL网络中的授权方法。
- en: '|  | Public | Consortium | Private |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '|  | 公共 | 联盟 | 私有 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| **Network control and operation** |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| **网络控制与运行** |'
- en: '| Adding network nodes | Permissionless | Permissioned or limited to consortium
    members | Permissioned |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 添加网络节点 | 无权限 | 受权限或仅限于联盟成员 | 受权限 |'
- en: '| Mining and consensus | Permissionless | Limited to consortium members | Not
    possible |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 挖矿与共识 | 无权限 | 仅限于联盟成员 | 不可能 |'
- en: '| **DL service access** |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| **DL服务访问** |'
- en: '| Accounts and transactions | Permissionless | Permissioned or permissionless
    | Permissioned or permissionless |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 账户与交易 | 无权限 | 受权限或无权限 | 受权限或无权限 |'
- en: '| Node API | Permissionless | Permissioned or permissionless | Permissioned
    or permissionless |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 节点API | 无权限 | 受权限或无权限 | 受权限或无权限 |'
- en: Various permission levels can be applied in a network (Table 2.2). Some of the
    activities might require registration and an appropriate permission level (e.g.,
    adding new full nodes). Some might be prohibited entirely (e.g., the mining).
    The others might require no special permissions by the user (e.g., creating accounts
    and issuing transactions).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络中可以应用各种权限级别（表2.2）。一些活动可能需要注册并获得适当的权限级别（例如，添加新的完整节点）。一些活动可能会完全被禁止（例如，挖矿）。其他的可能不需要用户特别权限（例如，创建账户和发出交易）。
- en: 2.3.1.3 User and data privacy in DL networks
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.3.1.3 分布式账本网络中的用户与数据隐私
- en: 'Privacy is another challenging concept when DL networks and services are scrutinized.
    The permissionless nature of many known public DL networks might lead to the idea
    that anonymity and privacy are intrinsic features of (all) DL systems. We have
    to distinguish between [[21](9783110681123_008192.xhtml#b_9783110681130-005_ref_021)]:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 隐私是当分布式账本（DL）网络和服务受到严格审查时的另一个挑战性概念。许多已知公共DL网络的无权限性质可能会导致认为匿名和隐私是（所有）DL系统的固有特征。我们必须区分如下[[21](9783110681123_008192.xhtml#b_9783110681130-005_ref_021)]：
- en: User privacy; and
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户隐私；
- en: Data privacy
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据隐私
- en: In permissionless public networks, user privacy is assured. Anyone can create
    a new account in such a network and send and receive transactions from it. The
    network does not require any mapping between the user’s personal identity and
    the DL network account/address. Unless the user himself discloses the ownership
    of a particular account, this remains private and anonymous. This is frequently
    done when users register with an online crypto exchange to buy and sell cryptocurrencies
    for established fiat money, such as EUR or USD, and then conduct DL transactions
    to their other DL accounts.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在无权限的公共网络中，用户隐私得到保证。任何人都可以在这样的网络中创建新账户，并从其中发送和接收交易。该网络不需要将用户个人身份与DL网络账户/地址之间进行任何映射。除非用户自己透露特定账户的所有权，否则该账户保持私密和匿名。当用户在在线加密货币交易所注册以用欧元（EUR）或美元（USD）等法定货币购买和出售加密货币，然后进行DL交易到他们的其他DL账户时，经常会这样做。
- en: However, the data about all the transactions related to these accounts is entirely
    transparent. A copy of the ledger and thus the entire content of the blocks and
    transactions are publically available, as this is the fundament for distribution
    and decentralization of the DL system. In such a network, data is not private
    at all. Anyone can follow all the incoming and outgoing transactions for any account
    or calculate the account balance.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，与这些账户相关的所有交易数据都是完全透明的。账本的一个副本及其整个区块和交易内容是公开可用的，因为这是DL系统分布式和去中心化的基础。在这样的网络中，数据根本不是私有的。任何人都可以追踪任何账户的所有入账和出账，或计算账户余额。
- en: The same limitations to data privacy apply in private and consortium-based networks,
    just that the access to data is not fully public but reduced to those in control
    of the network. Data privacy in DL networks can be assured, but appropriate techniques
    have to be adapted. One of them is zero-knowledge proof. See Section 3.1.1 for
    ZK-SNARK and other privacy-related approaches in DLT-based IoT solutions. Even
    with the transaction-related privacy that is enabled, transaction auditing is
    possible to comply with anti-money laundering or tax regulations, where disclosure
    is under the user’s control.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在私有和基于联盟的网络中，对数据隐私的限制是一样的，只是数据的访问不是完全公开的，而是限制为网络的控制者。在DL网络中可以保证数据隐私，但必须采用适当的技术。其中之一是零知识证明。有关在基于DLT的物联网解决方案中的ZK-SNARK和其他与隐私相关的做法，请参见第3.1.1节。即使启用了与交易相关的隐私，也可以进行交易审计以遵守反洗钱或税收法规，其中披露是在用户控制之下的。
- en: 2.3.2 Network performance
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.3.2 网络性能
- en: It is challenging to be address DL performance systematically and in an ordinary
    way because it intertwines many divergent technologies, network implementation,
    performance criteria, or use-related expectations.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 系统性地并以普通方式解决分布式账本性能问题具有挑战性，因为它交织了许多相异的技术、网络实施、性能标准或与使用相关的期望。
- en: Transaction throughput (number of transactions per second, tps) and transaction
    confirmation latency (delay) are the two most straightforward performance metrics.
    However, it is difficult to compare even these two metrics among different DLTs
    or networks. Transaction throughput and latency of current DL systems cannot be
    compared to the figures of the centralized or traditional distributed database
    services [[22](9783110681123_008192.xhtml#b_9783110681130-005_ref_022)]. Often,
    much of the bad user experience can be related to misconceived perspectives or
    insufficient understanding of the underlying technology, or inappropriately chosen
    use cases for the DLT. Besides, it is impossible and unfair to judge the performance
    of a DLT based on (only) one network implementation. For example, the Ethereum
    technology performance cannot be estimated only on the quantitative experience
    (measurements), for example, the Ethereum mainnet. The same technology (same software)
    can be implemented in a private or consortium network. Different network sizes
    or settings assure dramatically different performance in terms of transaction
    throughput or latency. This is true for all DLT architectures, where different
    deployments are allowed.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 交易吞吐量（每秒交易数，tps）和交易确认延迟（延迟）是最直观的两种性能指标。然而，即使是这两种指标，在不同分布式账本技术或网络之间也比较起来也是困难的。当前分布式账本系统的交易吞吐量和延迟无法与集中式或传统分布式数据库服务的数据相提并论[[22](9783110681123_008192.xhtml#b_9783110681130-005_ref_022)]。通常，用户体验不佳的很大一部分可以归因于对技术的误解或理解不足，或者选择了不适合分布式账本技术的用例。此外，仅根据（仅）一个网络实施情况来判断分布式账本技术的性能是不可能且不公平的。例如，不能仅根据定量经验（测量）来估算以太坊技术的表现，例如以太坊主网。相同的技术（相同的软件）可以实现在私有或联盟网络中。不同的网络规模或设置在交易吞吐量或延迟方面会带来显著不同的性能。这对所有分布式账本架构都是正确的，其中允许不同的部署。
- en: It is often hard to obtain relevant and comparable performance results. Theoretical
    limits can be calculated. But realistic performance stress tests in live public
    networks are difficult to be executed, for example, due to transaction costs.
    Analyses of smaller private networks with the same DLT cannot fully mimic large
    distributed ones. Furthermore, some DLT and network providers are approaching
    performance aspects of their systems systematically and backed by research (Hyperledger
    Fabric [[23](9783110681123_008192.xhtml#b_9783110681130-005_ref_023)]) and tools
    (Caliper) ([Fig. 2.4](#b_9783110681130-002_fig_004)). Others provide transparent
    and detailed statistics about the network (see [Section 2.6.4](#b_9783110681130-002_s_002_s_006_s_004)).
    Some merely present impressive figures that cannot be replicated and lack transparent
    methodology.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通常很难获得相关且可比较的性能结果。理论极限可以计算出来。但是，由于交易成本等原因，在公共网络中进行现实性能压力测试是难以执行的。使用相同分布式账本技术的小型私有网络分析不能完全模仿大型分布式网络。此外，一些分布式账本和网络提供商正在系统地研究其系统的性能方面，并得到了研究支持（例如，Hyperledger
    Fabric [[23](9783110681123_008192.xhtml#b_9783110681130-005_ref_023)])和工具（Caliper）([图2.4](#b_9783110681130-002_fig_004))。其他人提供了关于网络的透明且详细统计数据（参见[2.6.4节](#b_9783110681130-002_s_002_s_006_s_004)）。还有一些人仅仅提出了令人印象深刻但无法复制的数字，并且缺乏透明的方法论。
- en: '![](../graphic/converted/b_9783110681130-002_fig_004.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](../graphic/converted/b_9783110681130-002_fig_004.jpg)'
- en: 'Fig. 2.4: System for DL network performance evaluation.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 'Fig. 2.4: 分布式账本网络性能评估系统。'
- en: Apart from transaction throughput and latency, several other metrics become
    important with real-world network deployments and DApps. These include DL network
    energy consumption, resource requirements put on nodes (e.g., storage for the
    chain data) and off-chain clients (e.g., transaction generation-related encryption
    in constrained IoT devices), or transaction costs.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 除了交易吞吐量与延迟之外，在现实世界的网络部署和DApps中，还有其他几个度量标准变得很重要。这些包括分布式账本网络的能量消耗、对节点（例如，链数据存储）和离链客户端（例如，在受限的IoT设备中与交易生成相关的加密）施加的资源要求，或者交易成本。
- en: 2.3.2.1 Transaction throughput and latency
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.3.2.1 交易吞吐量与延迟
- en: Transaction throughput is the number of committed transactions in a given time
    interval. However, not every unit of the work process counts as a transaction,
    in this case. Only transactions that result in a state change should be considered.
    Examples of such transactions are transferring funds from one account to another
    in Bitcoin (BTC) or invoking a smart contract call via the transaction in Ethereum.
    The smart contract read requests are not executed with state-changing transactions,
    so they should be excluded from this metric. This is also true for the pass-through
    transactions, where the same transaction is passed among various smart contracts.
    It should be therefore counted as one. Invalid transactions rejected by the validating
    node and, thus, do not qualify for inclusion in the ledger should be excluded,
    too. This might seem obvious, but there are network performance reports where
    it is impossible to determine what actions were counted and what were not.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 吞吐量是指在给定时间间隔内提交的事务数量。然而，并不是工作过程中的每一个单位都算作一个事务，在这种情况下。只有导致状态变化的事务才应该被考虑。例如，在比特币（BTC）中从一个账户向另一个账户转移资金，或者通过以太坊的交易调用智能合约。智能合约的读取请求不会与状态变化的事务一起执行，因此它们应该被排除在这个指标之外。这对于穿透式交易也成立，即同一笔交易在各种智能合约之间传递。因此，它应该被计算为一次。被验证节点拒绝的无效交易，因此，不符合被记录在账本中的资格，也应该被排除。这可能看起来很显然，但是有一些网络性能报告，其中无法确定哪些操作被计算在内，哪些没有。
- en: 'The overall transaction latency depends on times needed for:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 总体事务延迟取决于以下时间：
- en: transaction generation, that is composing the data structure, calculating hashes
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事务生成，即编写数据结构，计算哈希值
- en: submission through an access node
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过接入节点提交
- en: propagation over the P2P network and validation of the transaction in the miner
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在P2P网络中传播并在矿工处验证交易
- en: block creation and the consensus in the network
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 区块创建和网络中的共识。
- en: extra time to reach a sufficient level of finality.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要额外的时间来达到足够的最终确定性水平。
- en: The first two factors reflect the off-chain factors, such as the resources of
    the end device that is generating a transaction. The remaining factors reflect
    the network performance.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个因素反映了链下因素，例如生成交易的终端设备的资源。剩下的因素反映了网络性能。
- en: The theoretical limit for transaction throughput can be calculated from the
    average block time and the average number of transactions in a block. Block time
    distributions depend on the consensus algorithm. In PoW, the block time is a consequence
    of the current block difficulty and the overall hashing power of the network.
    The difficulty is automatically adapted to the changes in hashing power, but the
    jitter in block times is always present in PoW. The Proof of Authority (PoA),
    on the other hand, can provide very consistent block times because the target
    block times a setting in the PoA network genesis. Blocks in a blockchain carry
    a limited number of transactions. In the BTC network, the maximum block size is
    1 MB. With an average size of 500 B, the maximum number of transactions is about
    2,000 per block. A new block is produced about once every 10 min. This results
    in an average BTC network throughput of 3 tps. In Ethereum, the sum of gas (see
    [Section 2.3.2.3](#b_9783110681130-002_s_002_s_003_s_002_s_003) for gas and transaction
    costs) of all transactions in a block has to be less than the maximum gas (per
    block). In the Ethereum mainnet, with the maximum block size of 10,000,000 and
    minimum gas per transaction of 21,000 (or average gas 72,000), there can be up
    to 476 (138 for average size) transactions in a block. A new block is generated,
    on average, in 13 s. The maximum transaction throughput of the Ethereum mainnet
    is about 37 tps (10 tps for average size).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 交易吞吐量理论上的极限可以通过平均区块时间和每个区块中的平均交易数来计算。区块时间分布取决于共识算法。在PoW中，区块时间是当前区块难度和网络总体哈希能力的后果。难度会自动适应哈希能力的变化，但PoW中的区块时间波动总是存在。另一方面，Proof
    of Authority (PoA)可以提供非常一致的区块时间，因为在PoA网络创世时设置了目标区块时间。区块链中的区块承载的交易数量有限。在BTC网络中，最大区块大小为1 MB。平均大小为500 B，每个区块的最大交易数约为2,000。大约每10分钟产生一个新块。这导致BTC网络的平均吞吐量约为3 tps。在以太坊中，区块中所有交易的气体（见[第2.3.2.3节](#b_9783110681130-002_s_002_s_003_s_002_s_003)关于气体和交易成本）之和必须小于最大气体（每块）。在以太坊主网上，最大区块大小为10,000,000，每笔交易的最小气体为21,000（或平均气体为72,000），一个区块中可以有高达476笔（对于平均大小为138笔）交易。平均而言，每13秒产生一个新块。以太坊主网的最大交易吞吐量约为37 tps（对于平均大小的10 tps）。
- en: The block time cannot be simply reduced for better performance (both higher
    throughput and lower latency) without jeopardizing network convergence. If the
    consensus algorithms require broadcasting block creation information through the
    network (e.g., in PoW), the propagation delay depends on network size. Extensive
    network size is needed for high distribution and decentralization. If the block
    time were reduced close to or under the network propagation time, this would lead
    to constant forking at the end of the chain and, possibly, to network divergence.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 区块时间不能简单地减少以提高性能（包括更高的吞吐量或更低的延迟），因为这可能会危及网络收敛。如果共识算法需要通过网络广播区块创建信息（例如，在PoW中），那么传播延迟取决于网络大小。为了实现高分布和去中心化，需要大规模的网络。如果区块时间减少到接近或低于网络传播时间，这将在链的末端导致持续的分叉，可能导致网络分歧。
- en: The network transaction latency is the time needed for the state change caused
    by the transaction to be reflected across the network – the time difference between
    submitting a newly created transaction and confirming inclusion in the ledger.
    Two events have to be distinguished in the transaction lifecycle. A transaction
    is first confirmed by a miner when it is included in a newly mined block. However,
    it is not guaranteed that the block will become a part of the chain until the
    information is propagated and accepted by the network. This is when the transaction
    is finalized. In a network with only one mining node, confirmation and finalization
    occur at the same time. The network transaction latency is calculated per transaction,
    but we mainly provide statistics over several transactions, such as the average,
    maximum, minimum, and standard deviations.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 网络交易延迟是交易引起的状态变化在网络中反映所需的时间——提交新创建的交易和确认记录中包含的交易之间的时间差。在交易生命周期中有两个事件需要区分。当交易包含在一个新挖出的区块中时，矿工首先确认该交易。然而，直到信息被传播并被网络接受，不能保证该区块将成为链的一部分。这时交易被最终确定。在只有一个挖矿节点的网络中，确认和最终化同时发生。网络交易延迟按交易计算，但我们主要提供几笔交易的统计数据，例如平均值、最大值、最小值和标准差。
- en: Finality assures that the transactions cannot be arbitrarily changed or reversed
    after being validated and included in blocks. In DL networks with probabilistic
    finality (BTC, Ethereum), we cannot reach a 100% finality. Instead, the time for
    a transaction to be considered as finalized is the amount of time one has to wait
    for an appropriate guarantee. For sufficient finality, we, therefore, wait for
    confirmation of additional blocks (usually 2–10) to be appended after the one
    with our transaction. In DLT architectures with absolute (or deterministic) finality,
    once the block is confirmed, all transactions in a block are immediately considered
    finalized. For networks in which not every block is finalized, a useful metric
    is a delay between the latest finalized block and the current latest block. This
    number shows how much validators are lagging behind, agreeing on the correct chain
    [[24](9783110681123_008192.xhtml#b_9783110681130-005_ref_024)].
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最终性确保在验证并包含在区块之后，交易不能被任意改变或撤销。在具有概率最终性的分布式账本网络（如BTC、以太坊）中，我们无法达到100%的最终性。相反，交易被视为最终完成的等待时间是保证的适当时间。为了获得足够的最终性，我们必须等待附加额外区块（通常是2-10个）的确认，这些区块在我们交易的区块之后。在具有绝对（或确定性）最终性的分布式账本架构中，一旦区块得到确认，一个区块中的所有交易立即被视为最终完成。对于不是每个区块都最终化的网络，一个有用的指标是最新最终化区块和当前最新区块之间的延迟时间。这个数字显示验证者落后于多少，同意正确的链[[24](9783110681123_008192.xhtml#b_9783110681130-005_ref_024)]。
- en: Public DL networks rely on different network topologies, which influence the
    network performance. Often, this is at the cost of decentralization and security.
    BTC and Ethereum are both highly distributed networks, with thousands of mining
    nodes, where network propagation is relevant for the consensus and performance.
    To reduce the effects of network propagation times and thus increase the odds
    for successful mining, mining pools apply more efficient protocols for information
    propagation within the pool. In Hedera Hashgraph, only ten mainnet nodes execute
    a form of virtual voting to reach a consensus on both the validity and the timestamp
    of every transaction. The voting selects a single miner to choose the next block.
    The community of nodes running Hashgraph then comes to an agreement, as a collective,
    on which transactions to add to the ledger. In the EOS[²](footnotes.xhtml#fn_2)
    blockchain network, the number of block producers is low, too. There are 21, which
    take turns in producing blocks in a round-robin fashion. Anyone can start his/her
    EOS node and, if voted for by the community, can become a block producer. To select
    these 21 block producers, users vote on a list of candidates (Delegated Proof
    of Stake (DPoS)).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 公共分布式账本网络（DL）依赖于不同的网络拓扑结构，这些结构影响网络性能。通常，这是以去中心化和安全性为代价的。比特币（BTC）和以太坊都是高度分布式网络，拥有成千上万的矿工节点，网络传播对共识和性能是相关的。为了减少网络传播时间的影响，提高挖矿成功率，挖矿池应用更有效的协议来在池内传播信息。在Hedera
    Hashgraph中，只有十个主网络节点执行一种虚拟投票形式来达成对每笔交易的效力和时间戳的共识。投票选择一个矿工来选择下一个区块。运行Hashgraph的节点社区作为一个集体，达成一致，决定将哪些交易添加到账本中。在EOS区块链网络中，区块生产者的数量也很少。有21个，他们轮流以循环方式生产区块。任何人都可以启动他的EOS节点，如果得到社区的投票，可以成为区块生产者。用户在一个候选人名单上对这21个区块生产者进行投票（委托权益证明（DPoS））。
- en: 2.3.2.2 Resource consumption
  id: totrans-127
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.3.2.2 资源消耗
- en: Running and using a DL network can mandate significant resource requirements,
    including computation, storage, and energy.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 运行和使用分布式账本网络可能需要 significant resource requirements, including computation, storage,
    and energy.
- en: The PoW consensus mechanisms are known to be highly energy inefficient (see
    Section 1.2 for details). The hashing power provided by the mining nodes requires
    high computational capabilities (CPU, GPU, or dedicated hardware). The annualized
    energy consumption[³](footnotes.xhtml#fn_3) needed to run the BTC network is comparable
    to a mid-sized developed country. Therefore, it is not surprising that energy
    efficiency is one of the critical objectives of alternate consensus mechanisms.
    This is especially true for private and consensus governed networks, where the
    mining process is not monetarily incentivized or compensated.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 工作量证明（PoW）共识机制被认为是非常能源低效的（详细情况见第1.2节）。矿工节点提供的哈希能力需要高性能的计算能力（CPU、GPU或专用硬件）。运行比特币网络所需的年度能源消耗与一个中型发达国家相当。因此，能源效率是替代共识机制的关键目标之一，这在对私人和共识治理的网络中尤为如此，在这些网络中，挖矿过程没有货币激励或补偿。
- en: The chain data size in BTC and Ethereum is hundreds of GB and is constantly
    growing. In a P2P file-sharing system, a network participant can keep and share
    only a small portion of the content, for example, only a specific version of the
    installation file for a popular Linux distribution. The participant does not have
    to share the entire content (all the installation files available) to be a meaningful
    member of the distributed network. In DL networks, on the other hand, one has
    to keep and share the entire distributed ledger because this is the only way to
    assure decentralization and trust in the system. This requires substantial dedicated
    storage for a full node. Large storage requirements deter many enthusiastic net
    citizens from setting up a reliable full public DL network node and contributing
    to the system’s decentralization. Large chain size also increases the bootstrap
    time needed for a new node to synchronize with the chain.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币和以太坊的链数据大小数百GB，并且不断增长。在一个P2P文件共享系统中，网络参与者可以保留和分享内容的只有很小的一部分，例如，一个流行Linux发行版特定版本的安装文件。参与者无需分享全部内容（所有可用的安装文件）就可以成为分布式网络中有意义的成员。而在DL网络中，另一方面，必须保留和分享整个分布式账本，因为这是确保系统去中心化和信任的唯一方式。这需要一个完整节点有大量的专用存储空间。大的存储需求使许多热情的网民望而却步，不愿意建立一个可靠的公共DL网络节点，为系统的去中心化做出贡献。大的链大小也增加了新节点同步链所需的引导时间。
- en: Communication requirements for a non-mining and mining node are rather diametric.
    The chain synchronization requires reliable but modest bitrate network connectivity
    for a network node. The average data for the regular synchronization of new blocks
    in the Ethereum is about 18 kB/s and about 10 kB/s in download [[25](9783110681123_008192.xhtml#b_9783110681130-005_ref_025)].
    Intermittent connectivity is essential for the off-chain applications, which may
    cease to run or run properly, with the chain unsynchronized due to temporary connectivity
    problems.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 非挖矿节点和挖矿节点的通信需求相当矛盾。链同步需要网络节点有可靠但适中的比特率网络连接。以太坊常规同步新块的平均数据大约为18 kB/s，下载数据大约为10
    kB/s [[25](9783110681123_008192.xhtml#b_9783110681130-005_ref_025)]。间歇性连接对于离链应用是至关重要的，因为链未同步可能会由于暂时性的连接问题而导致应用停止或无法正常运行。
- en: For overall network performance, the rapid dissemination of block-related information
    between the mining nodes is essential. Block propagation time can become the critical
    performance bottleneck in truly distributed networks with many participating mining
    nodes. Distributed communication protocols applied for this propagation are not
    the most efficient and are sensitive to any low-level communication-related propagation
    delay. Therefore, a capable, low-delay communication is recommended to interconnect
    the mining nodes. Many of the mining pools apply dedicated communication approaches
    to speed up the dissemination of mining information within the pool and, in this
    way, gain some advantage for the miners of their pool.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 对于整体网络性能来说，矿工节点之间块相关信息的快速传播是至关重要的。在真正分布式的、有许多参与挖矿节点的网络中，块传播时间可能成为关键的性能瓶颈。应用于这种传播的分布式通信协议并不是最有效的，并且对任何低级别的通信相关的传播延迟都非常敏感。因此，建议用有能力、低延迟的通信来互联矿工节点。许多挖矿池采用专用的通信方法来加速池内挖矿信息的传播，并通过这种方式为池内矿工获得一些优势。
- en: Other computer resource demands, for instance, memory and CPU power needed to
    run non-mining full network nodes or network access clients, are usually not very
    restrictive if we set these nodes on regular computers. However, with IoT devices,
    which are often constrained in computation and communication resources, this quickly
    becomes a problem. We review the details of the blockchain and IoT in Section
    3.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，运行非挖矿全网络节点或网络访问客户端所需的内存和CPU功率，如果我们将这些节点设置在普通计算机上，通常并不会非常受限。然而，对于计算和通信资源常常受限的IoT设备来说，这很快就会成为一个问题。我们在第3节回顾了区块链和IoT的详细信息。
- en: At this point, we would like to explain the gas, which is used to evaluate the
    resource consumption of smart contracts and transactions in Ethereum. Gas reflects
    both the size of a transaction (in bytes) and the complexity of the calculations
    during the smart contract execution. However, gas reflects only the complexity
    of state updates and smart contract execution. It does not reflect all the resources
    needed, for example, for validating a transaction and is thus unsuitable as an
    exact indicator of the overall network performance [[26](9783110681123_008192.xhtml#b_9783110681130-005_ref_026)].
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在此时，我们想解释一下以太坊中用于评估智能合约和交易资源消耗的gas。gas反映了交易的规模（以字节为单位）和智能合约执行期间的计算复杂性。然而，gas只反映了状态更新和智能合约执行的复杂性。它并不反映所有所需的资源，例如，验证交易所需的资源，因此不适用于作为整体网络性能的精确指标
    [[26](9783110681123_008192.xhtml#b_9783110681130-005_ref_026)].
- en: 2.3.2.3 Transaction costs
  id: totrans-135
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.3.2.3 交易成本
- en: 'DL networks adopt wildly divergent approaches to compensate the capital expenditures
    and operational costs (Table 2.3):'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式账本网络采用广泛不同的方法来补偿资本支出和运营成本（表2.3）：
- en: Compensation as a reward for successful mining. This approach is the key compensation
    principle in large distributed public networks, e.g., BTC and Ethereum. Due to
    the immense costs of energy, financial rewards for miners are necessary. For a
    successfully created block, which is appended to the ledger, the miners newly
    create the agreed amount of cryptocurrency and register it to their accounts.
    Mining rewards are gradually decreased. This is a built-in function of the DL
    protocols.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挖矿成功的奖励。这是大型分布式公共网络中，例如BTC和以太坊，关键的补偿原则。由于能源成本巨大，对矿工的财务奖励是必要的。对于成功创建的区块，即附加到账本上，矿工们会创造出约定数量的加密货币并将其注册到他们的账户中。挖矿奖励逐渐减少。这是分布式账本技术（DL）协议的内置功能。
- en: Compensation through transaction fees. In DL networks with public cryptocurrencies,
    the transaction fee is charged to the transaction sender. This is additional charge
    to the bounties for successful mining. For a long time, the mining rewards were
    higher than the transaction fees for a block. However, in Ethereum, the transaction
    fees for a block have already matched the mining reward. Various principles exist
    to determine the actual fee.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过交易费用进行补偿。在具有公共加密货币的分布式账本网络中，交易费由交易发送者支付。这是成功挖矿的赏金之外的额外收费。长期以来，区块的交易费用高于挖矿奖励。然而，在以太坊，区块的交易费用已经与挖矿奖励持平。存在多种原则来确定实际费用。
- en: Participation in transaction validation. In some DLTs (e.g., IOTA), the transaction
    submitter must validate one or more transactions from other submitters. In this
    way, the load and the costs related to transactions are distributed directly to
    the senders.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参与交易验证。在一些分布式账本技术（例如，IOTA）中，交易提交者必须验证其他提交者的一个或多个交易。这种方式直接将交易负载和成本分配给发送者。
- en: No compensation through the DL network. This is convenient for private or consortium
    networks with a low distribution of the network nodes where the overall costs
    are not very high. The network providers seek other means for income, for example,
    charging other services based on the DL network or contributions from the consortium
    partners. In this approach, the transaction senders pay no fees.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不通过分布式账本网络进行补偿。这对于节点分布较低的私人或联盟网络来说很方便，因为这种网络的总成本不是很高。网络提供商寻求其他收入来源，例如，基于分布式账本网络或其他服务收费，或来自联盟伙伴的贡献。在这种方法中，交易发送者不支付任何费用。
- en: There is no absolute value of acceptable transaction costs, as this varies from
    use case to use case. In decentralized finance (DeFi), application costs of several
    EUR or USD might be acceptable. On the other hand, in micropayments and microtransactions,
    even a fraction of a cent may be disputable and limiting for a successful use
    case. Apart from the absolute value, the volatility of the fees can be a problem.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: acceptable transaction costs没有绝对的价值，因为这取决于不同的用例。在去中心化金融（DeFi）中，几欧元或几美元的应用成本可能是可以接受的。另一方面，在微支付和微交易中，即使是几分之一美分也可能是有争议的，对成功用例有限制。除了绝对值之外，费用的波动性也可能是一个问题。
- en: Tab. 2.3:Transaction costs in various public DL networks.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 表2.3：各种公共分布式账本网络的交易成本。
- en: '|  | Type of cost compensation | Key characteristics |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '|  | 成本补偿类型 | 关键特征 |'
- en: '| --- | --- | --- |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| **Bitcoin** | Transaction fees based on transaction size in bytes | Fee depends
    on the fluctuations of cryptocurrency value |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '**比特币** | 基于交易大小的字节数来计算交易费用 | 费用取决于加密货币价值的变化 |'
- en: '| **Ethereum** | Transaction fees based on gas | Fee depends on fluctuations
    of cryptocurrency value |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '**以太坊** | 以燃料（Gas）为基础的交易费用 | 费用取决于加密货币价值的变化 |'
- en: '| **Hedera** | Fees for network services API calls | Predefined rates set in
    fiat |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '**Hedera** | 网络服务API调用的费用 | 以法定货币设置的预定义费率 |'
- en: '| **Corda** | Annual participation + transactions fees | Predefined rates set
    in fiat |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '**Corda** | 年度参与费+交易费用 | 以法定货币设置的预定义费率 |'
- en: '| **IOTA** | Participation in the validation process | The sender has to do
    the PoW for two previously unconfirmed transactions. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '**IOTA** | 参与验证过程 | 发送者必须为两个之前未确认的交易进行工作量证明（PoW）。 |'
- en: Transaction fees in BTC need to reflect the transaction size in bytes. As the
    BTC block size is limited, miners may prefer smaller to large transactions. They
    are, therefore, motivated to prioritize the smaller ones. On the other hand, a
    transaction sender can prioritize a transaction with a higher fee. Many crypto
    wallets have already come up with built-in fee calculators.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币的交易费用需要反映交易的大小（以字节为单位）。由于比特币块的大小是有限的，矿工可能更喜欢小交易而不是大交易。因此，他们有动机优先处理小交易。另一方面，交易发送者可以优先处理费用较高的交易。许多加密钱包已经推出了内置的费用计算器。
- en: The transaction fee in Ethereum is determined through gas and gas prices. Gas
    reflects resource consumption and, thus, the costs of processing a transaction.
    A transaction sender selects the gas price (value in Ether). The gas is multiplied
    by the gas price to calculate the fee of a particular transaction. It is more
    likely that miners will consider a transaction with a higher fee while building
    the next block.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊的交易费用是通过燃料（Gas）和燃料价格来确定的。燃料反映了资源消耗，因此，处理交易的费用。交易发送者会选择一个燃料价格（以太币的价值）。燃料乘以燃料价格来计算特定交易的费用。矿工在构建下一个区块时更有可能考虑费用较高的交易。
- en: As all the Hedera Hashgraph network services are available only through APIs,
    users cannot directly create and submit transactions. They would rather pay for
    the API calls instead of paying fees for transactions. The API pricing is transparent,[⁴](footnotes.xhtml#fn_4)
    and the fees are set in fiat. They vary according to the type of API call. The
    crypto transfer API call was priced in 2021 at 0.0001 USD, allowing micro-transactions
    (<0.01 USD) to be economically and technologically practical. A smart contract
    call or a creation of a file in the Hedera DL costs 0.05 USD.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Hedera Hashgraph网络服务的所有接口都只能通过API访问，用户无法直接创建和提交交易。用户更愿意为API调用付费，而不是为交易付费。API定价是透明的，[⁴](footnotes.xhtml#fn_4)
    费用以法定货币设定。它们根据API调用的类型而变化。2021年，加密传输API调用的价格为0.0001美元，这使得微交易（<0.01美元）在经济和技术上变得可行。在Hedera
    DL中调用智能合约或创建文件的成本为0.05美元。
- en: 'A separate entity called Corda Network Foundation was set up to govern the
    development and networks in Corda. In Corda, the networks are semi-private and
    permissioned. A node must obtain a certificate from the network operator to join
    a network. A network operator would charge reasonable costs for providing network
    and administration services, which is paid by the Foundation. In Corda, the participants
    pay an annual participation fee and transaction fees. Transaction fees are charged
    for notarization provided by Corda Network notary and are structured in two different
    models: Pay-As-You-Go and Up-front package. The total fees depend on the number
    of transactions, but Corda provides a very transparent and predictable transaction
    pricing.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为Corda Network Foundation的独立实体被设立来管理Corda的发展和网络。在Corda中，网络是半私有的和受许可的。一个节点必须从网络运营商那里获得证书才能加入一个网络。网络运营商会为提供网络和管理服务收取合理的费用，这笔费用由基金会支付。在Corda中，参与者支付年度参与费和交易费用。交易费用是为Corda
    Network notary提供的身份验证服务而收取的，并且分为两种不同的模式：按需付费和预付费包。总费用取决于交易数量，但Corda提供了非常透明和可预测的交易定价。
- en: IOTA replaces transaction fees paid in terms of MIOTA (or another digital asset,
    or fiat) with transaction fees paid in terms of hash power.[⁵](footnotes.xhtml#fn_5)
    The sender of a transaction has to establish the PoW for two previously unconfirmed
    transactions. This way, mining is distributed among transaction senders and not
    among dedicated mining nodes. In IOTA, transactions are then reinforced when other
    transactions reference them. Currently, transactions only become truly valid (finalized)
    when the network Coordinator, a special node operated by the IOTA Foundation,
    confirms them.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: IOTA用基于哈希权力的交易费用取代了以MIOTA（或其他数字资产，或法定货币）支付的交易费用。[⑤](footnotes.xhtml#fn_5) 交易的发送者必须为两个之前未确认的交易建立PoW。这样，挖矿就在交易发送者之间而不是在专用挖矿节点之间分布。在IOTA中，当其他交易引用它们时，交易得到加强。目前，交易只有在网络协调员（由IOTA基金会运营的特殊节点）确认它们时，才真正有效（最终化）。
- en: 2.3.3 Scalability
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.3.3 可扩展性
- en: 'We need to investigate the scalability in the context of two additional blockchain
    properties, all three together known as the blockchain scalability trilemma. This
    trilemma points out three essential properties of DL systems: decentralization,
    security, and scalability. Decentralization (see [Section 2.1](#b_9783110681130-002_s_002_s_001)
    for more details) refers to the diversification in ownership and control in the
    DL system. The degree of decentralization is not a binary attribute, and practical
    network implementations provide some level of decentralization between fully decentralized
    and (fully) centralized systems. Security includes network operation aspects that
    make the network robust and resilient to attacks (e.g., 51%, DoS). Scalability
    is about expanding the network in terms of additional nodes, and more importantly,
    increasing its performance.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在两个额外的区块链属性背景下研究可扩展性，这三个属性一起被称为区块链可扩展性三元悖论。这个三元悖论指出了DL系统的三个基本属性：去中心化、安全和可扩展性。去中心化（更多详情请参见[第2.1节](#b_9783110681130-002_s_002_s_001)）指的是DL系统中所有权和控制的多样化。去中心化的程度不是一个二进制属性，实际网络实施提供了一些在完全去中心化和（完全）集中系统之间的去中心化水平。安全性包括使网络对攻击（例如，51%，DoS）具有韧性和弹性的网络操作方面。可扩展性是关于在额外节点方面扩大网络，更重要的是，提高其性能。
- en: Decentralization, security, and scalability aspects cannot easily co-exist,
    so balancing them is needed ([Fig. 2.5](#b_9783110681130-002_fig_005)). For example,
    in an extensive public network, increased distribution and decentralization provide
    a higher level of trust but increase security risks from anonymous and possibly
    malicious network participants. Similarly, more centralized governance in a consortium-based
    network can be favorable to scale the network performance, but it reduces the
    (decentralized) trust.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 去中心化、安全性和可扩展性方面不容易共存，因此需要平衡它们。（[图2.5](#b_9783110681130-002_fig_005)）例如，在一个庞大的公共网络中，增加分布和去中心化可以提供一个更高水平的信任，但会增加来自匿名且可能具有恶意网络参与者的安全风险。同样，在基于联盟的网络中，更加集中的治理可以有利于扩展网络性能，但会减少（去中心化）信任。
- en: '![](../graphic/converted/b_9783110681130-002_fig_005.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](../graphic/converted/b_9783110681130-002_fig_005.jpg)'
- en: 'Fig. 2.5: The scalability trilemma in the blockchain.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5：区块链中的可扩展性三元悖论。
- en: 'With the extensive increase of users, performance and scalability issues of
    major PoW-based public blockchains has arisen. This has led to the research of
    novel DLTs and affected the development of the existing ones. Several approaches
    can be taken to facilitate scalability in blockchain systems. We discuss three
    scaling principles, which are being implemented in various forms and for different
    existing blockchain technologies:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 随着用户的广泛增加，主要基于PoW的公共区块链的性能和可扩展性问题已经出现。这导致了新型DLT的研究，并影响了现有技术的发展。可以采取几种方法来促进区块链系统的可扩展性。我们讨论了三个可扩展性原则，这些原则正在以各种形式实施，用于不同的现有区块链技术：
- en: On-chain scaling solutions include modifications in the ledger (block size and
    structure, block times), consensus mechanism (see Section 1), or sharding of the
    network.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链上可扩展性解决方案包括对账本（块大小和结构，块时间）的修改、共识机制（参见第1节）或网络分片。
- en: Off-chain scaling solutions attempt to facilitate transaction off-loading, that
    is, a trusted transaction exchange out of the main ledger, for example, with the
    state channels and oracles.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链下可扩展性解决方案试图促进交易卸载，即在主账本之外的受信交易交换，例如，使用状态通道和预言机。
- en: Cross-chain scaling solutions where multiple DL networks are interconnected
    via gateways/relays to exchange transactions among various systems. Cross-chain
    solutions are a very novel research area. They not only contribute to the scalability
    of DL networks but are also crucial for DL interoperability.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨链扩展解决方案，其中多个分布式账本网络通过网关/中继器互联，以便在各种系统中交换交易。跨链解决方案是一个非常新颖的研究领域。它们不仅有助于分布式账本网络的可扩展性，而且对于分布式账本网络的互操作性至关重要。
- en: 2.3.3.1 Sharding
  id: totrans-164
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.3.3.1 分片
- en: 'Sharding is an on-chain method, where the DL network topology is divided into
    several smaller networks, called shards. Each shard contains a part of the network
    nodes. Different shards process transactions in the network. This reduces the
    number of transactions that have to be processed by each node and has two positive
    consequences:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 分片是一种链上方法，其中分布式账本网络拓扑被划分为几个更小的网络，称为分片。每个分片包含网络节点的一部分。不同的分片处理网络中的交易。这减少了每个节点必须处理的交易数量，并产生了两个积极的结果：
- en: State sharding – nodes keep only data of their shard. This reduces the nodes’
    system requirements and reduces the bootstrap time.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态分片——节点只保留其分片的数据。这降低了节点的系统要求并减少了引导时间。
- en: Transaction sharding – transactions are distributed among different shards;
    they can be processed and verified in parallel. This increases the transaction
    throughput of the entire network. A reduced number of nodes in a shard accelerates
    the block propagation, too.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易分片——交易分布在不同的分片之间；它们可以并行处理和验证。这增加了整个网络的交易吞吐量。分片中节点数量减少也加速了区块传播。
- en: But such a change of network topology has several difficulties. For the performance
    increase obtained with sharding, we sacrifice decentralization and thus the trust
    in the system. Distribution is also reduced, so common DL network security risks
    (51% attack) become emphasized. Another problem is that of transactions originating
    in one and destined to another shard. These cross-shard transactions are more
    difficult to be processed. They require more communication and dedicated mechanisms
    to propagate between the shards. Therefore, the efficiency of sharing is strongly
    dependent on the statistical properties of the transactions and, thus, on a particular
    use case.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，网络拓扑的这种变化有几个困难。我们为了通过分片获得的性能提升而牺牲了去中心化，从而降低了系统信任。分布也减少了，因此常见的分布式账本网络安全风险（51%攻击）变得更加突出。另一个问题是起源于一个分片且目的地为另一个分片的交易。处理这些跨分片交易更加困难，它们需要在分片之间传播，需要更多的通信和专用机制。因此，共享效率强烈依赖于交易的统计特性，因此也取决于特定的用例。
- en: A modified sharding approach consists of the main chain (network) and multiple
    shard chains. Each shard periodically commits its state to the main chain. In
    this way, the trust in the shard data can be verified. The cross-shard transactions
    are processed via the main chain. The efficiency of this approach suffers enormously,
    if the number of cross-shard transactions increases and the main network becomes
    a bottleneck.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一种修改后的分片方法包括主链（网络）和多个分片链。每个分片定期将其状态提交给主链。这样，分片数据的信任就可以得到验证。跨分片交易通过主链处理。如果跨分片交易数量增加且主网络成为瓶颈，这种方法的效率将大大降低。
- en: Research on sharding investigates how to allocate nodes into shards efficiently
    and how to protect decentralization and security. Most of the sharding development
    and implementation focuses on public DL networks, often, those with PoW consensus.
    In private or consortium networks, performance is increased, instead, by trimming
    the main network operation.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 分片研究探讨了如何高效地将节点分配到分片以及如何保护去中心化和安全性。大多数分片开发和实施集中在公共分布式账本网络上，通常采用工作量证明（PoW）共识。在私有或联盟网络中，通常通过精简主网络操作来提高性能。
- en: 2.3.3.2 Off-chain state channels
  id: totrans-171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.3.3.2 离链状态通道
- en: State channels are a complementary off-chain method that temporarily off-loads
    the transactions between two DL accounts from the DL network into a dedicated
    channel. State channels are also known as payment channels, if the transactions
    predominantly exchange value between accounts and not tokens or smart contract
    calls. They reduce the load of the main chain and thus improve the performance
    of the overall system. A channel is established, managed, and cleared through
    a smart contract in the main DL network, which serves as an arbiter. It can be
    established directly between the two accounts. A channel can have several hops
    through the state channel network in a dedicated off-chain network of state channel
    nodes, which build a layer on top of the DL network. As the transactions in the
    channel are not built into blocks, there is no latency due to block creation,
    and no transaction fees apply.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 状态通道是一种补充的离线方法，它暂时将两个分布式账本（DL）账户之间的交易从DL网络转移到一个专门的通道。如果交易主要是账户之间的价值交换，而不是代币或智能合约调用，状态通道也被称为支付通道。它们减轻了主链的负载，从而提高了整个系统的性能。通过主DL网络中的智能合约建立、管理和清结算通道，该智能合约充当调解人。通道可以直接建立在两个账户之间。通道可以通过状态通道网络中的状态通道节点在专门的离线网络中进行多跳，这些节点在DL网络之上构建了一层。由于通道中的交易不是构建在区块中，因此没有区块创建的延迟，也不收取交易费用。
- en: Two prominent examples of state channels are the Lightning Network[⁶](footnotes.xhtml#fn_6)
    for BTC and Raiden Network[⁷](footnotes.xhtml#fn_7) for Ethereum. The Lightning
    network is limited to BTC transactions. Apart from regular transactions, the Raiden
    network supports ERC20 tokens, too.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 两个著名的状态通道例子分别是用于BTC的Lightning Network[⁶](footnotes.xhtml#fn_6)和用于Ethereum的Raiden
    Network[⁷](footnotes.xhtml#fn_7)。Lightning网络仅限于BTC交易。除了常规交易外，Raiden网络还支持ERC20代币。
- en: 2.3.3.3 Cross-chain swaps
  id: totrans-174
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.3.3.3 跨链交换
- en: 'Cross-chain techniques, also known as the atomic swap, or cross-chain atomic
    swap, have a twofold role in DL network topology and operation:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 跨链技术，也称为原子交换或跨链原子交换，在分布式网络拓扑和操作中扮演着双重角色：
- en: Scalability – they separate transaction exchange from a single common DL network
    into a set of interconnected networks. As the transactions are distributed into
    several networks, they can be processed in parallel. This increases the transaction
    throughput of the entire system.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展性——它们将交易交换从单一的共同DL网络分离成一组互联的网络。由于交易分布在多个网络上，它们可以并行处理。这增加了整个系统的交易吞吐量。
- en: Interoperability – unlike in sharding, cross-chain swapping can integrate networks
    based on different DLTs, so that the DL applications are no longer confined to
    their chains.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互操作性——与分片不同，跨链交易可以整合基于不同分布式账本技术（DLT）的网络，因此分布式账本应用（DL应用）不再局限于单一链上。
- en: Its interoperability is even more disruptive than the contribution to scalability,
    as it is opening a range of new DL use cases. In this way, we will be able to
    assure protocol and semantic interoperability between BTC, Ethereum, and other
    DLT-based networks. Similarly, we could integrate, for example, a private and
    a public DL network into a hybrid topology. Through the cross-chain swap, the
    smart contract service flows in the private and in the public network remain synchronized,
    as if the entire platform were implemented in one network. Still, with two (or
    more) network types, we can now support different performance, security, and scalability
    requirements of the overall business logic.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 其互操作性甚至比贡献可扩展性更具颠覆性，因为它正在开启一系列新的分布式账本（DL）用例。通过这种方式，我们能够确保BTC、以太坊以及其他基于DLT的网络之间的协议和语义互操作性。同样，我们可以整合例如私有和公共DL网络形成混合拓扑。通过跨链交换，私有和公共网络中的智能合约服务流保持同步，就好像整个平台实现在一个网络中。然而，有了两种（或更多）网络类型，我们现在可以支持整体业务逻辑的不同性能、安全和可扩展性要求。
- en: Cross-chain swaps are assured through elements called relays, bridges, and hubs,
    usually along with a dedicated DL for relaying. COSMOS[⁸](footnotes.xhtml#fn_8)
    is an ecosystem of connected blockchains. It utilizes a DL network based on the
    Tendermint Core with the Cosmos consensus mechanism. The Inter-Blockchain Communication
    (IBC) protocol is used to connect to other DL networks and applications. Polkadot,[⁹](footnotes.xhtml#fn_9)
    too, is a relaying blockchain. With a set of validators, it assures the security
    of the relaying chain, which links together various independent parachains. Collators
    are network elements that link to already running DL networks, including Ethereum.
    They package the parachain blocks and pass them to validators for verification.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 跨链交易通过称为中继、桥梁和枢纽的元素来保证，通常与专用的分布式账本（DL）一起使用。COSMOS[⁸](footnotes.xhtml#fn_8) 是一个由连接的区块链组成的生态系统。它使用基于
    Tendermint Core 的 DL 网络和 Cosmos 共识机制。跨链通信协议（IBC）用于连接其他 DL 网络和应用程序。Polkadot,[⁹](footnotes.xhtml#fn_9)
    也是一个中继区块链。它通过一组验证者确保中继链的安全，该链将各种独立的平行链链接在一起。聚合器是连接到已经运行的 DL 网络的网络元素，包括以太坊。他们将平行链块打包并传递给验证者进行验证。
- en: 2.4 Smart contracts
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.4 智能合约
- en: 'Smart contracts are the second cornerstone of the DApp triplet (see [Section
    2.2](#b_9783110681130-002_s_002_s_002) for details). The term smart contract was
    coined in 1996, long before the appearance of the first blockchain networks, by
    Nick Szabo [[27](9783110681123_008192.xhtml#b_9783110681130-005_ref_027)]. He
    regards smart contracts as contractual closes, which are implemented in hardware
    and software in such a way as to make a breach of a contract prohibitively expensive.
    He pointed out vending machines and traditional payment or banking transaction
    systems as forerunners of modern DApps and smart contracts. Interestingly, from
    the principles in law, economic theory, and contractual conditions often found
    in practice, he outlined four basic objectives of the contract design [[27](9783110681123_008192.xhtml#b_9783110681130-005_ref_027)]:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约是 DApp 三位一体的第二个基石（具体见[第 2.2 节](#b_9783110681130-002_s_002_s_002)）。智能合约这个术语是在
    1996 年由 Nick Szabo 创造的，这是在第一个区块链网络出现之前很久。他将智能合约视为合同关闭，这种关闭通过硬件和软件的方式使得违反合同的成本过高。他指出自动售货机和传统的支付或银行交易系统是现代
    DApps 和智能合约的先驱。有趣的是，他从法律原则、经济理论和实践中常见的合同条件中概述了合同设计的四个基本目标[[27](9783110681123_008192.xhtml#b_9783110681130-005_ref_027)]：
- en: Observability – the ability to prove one’s or to observe other’s performance
    of the contract
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可观测性 – 证明自己或观察他人履行合同的能力
- en: Verifiability – proving to an arbitrator that a contract has been performed
    or breached
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可验证性 – 向仲裁者证明合同已经履行或违约
- en: Privity – minimizing the vulnerability to third parties and excluding them from
    the knowledge and control over the content and performance of the contract (privacy
    and confidentiality)
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三方性 – 最小化对第三方的脆弱性，将他们排除在合同内容和执行的知识和控制之外（隐私和保密）
- en: Enforceability – minimizing the effort for enforcement, including self-enforcing
    protocols
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可执行性 – 最小化执行努力，包括自我执行协议
- en: Szabo so well anticipated many of the findings, which, several years later,
    implemented his ideas in the BTC protocol and network that he is considered as
    one of the candidates for the real BTC inventor. The real inventor remains unknown
    and is still known only by the pseudonym Satoshi Nakamoto. At least to some extent,
    the four mentioned objectives are met in most of the current DLTs and networks
    that reach beyond the simple value transactions and enable DApp development (Ethereum,
    Hedera Hashgraph, and Hyperledger).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Szabo 对许多发现进行了很好的预测，几年后，他在 BTC 协议和网络中实施了这些想法，因此他被认为是真正的 BTC 发明者之一。真正的发明者仍然未知，仍然只以化名中本聪（Satoshi
    Nakamoto）为人所知。在某种程度上，提到的四个目标在大多数当前的分布式账本技术（DLTs）和网络中得到满足，这些网络超越了简单的价值交易，并支持 DApp
    开发（例如以太坊、Hedera Hashgraph 和 Hyperledger）。
- en: Smart contracts are neither smart nor binding in the sense of legal obligations.
    However, in business collaborations, they are typically used to enforce some type
    of agreement, so that all participants can be certain of the outcome, without
    an intermediary’s involvement [[28](9783110681123_008192.xhtml#b_9783110681130-005_ref_028)].
    Such an agreement, coded in the smart contract on-chain logic, has no central
    point of failure, can perform operations, hold value, and unlock it only if specific
    conditions are met [[29](9783110681123_008192.xhtml#b_9783110681130-005_ref_029),
    [30](9783110681123_008192.xhtml#b_9783110681130-005_ref_030)].
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约在法律义务的意义上既不智能也不是具有约束力的。然而，在商业合作中，它们通常被用来执行某种类型的协议，这样所有参与者都可以确信结果，而不需要中介的参与
    [[28](9783110681123_008192.xhtml#b_9783110681130-005_ref_028)]. 这样的协议，编码在智能合约的链上逻辑中，没有失败的中心点，可以执行操作，持有价值，并且只有在满足特定条件时才能解锁
    [[29](9783110681123_008192.xhtml#b_9783110681130-005_ref_029), [30](9783110681123_008192.xhtml#b_9783110681130-005_ref_030)].
- en: 2.4.1 Virtual machine
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.4.1 虚拟机
- en: The execution environment for the smart contract code can be compared to a virtual
    machine, which is provided by the DL network. In fact, in Ethereum, this environment
    is called the Ethereum Virtual Machine (EVM).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约代码的执行环境可以类比为一种由分布式账本网络提供的虚拟机，实际上，在以太坊中，这个环境被称为以太坊虚拟机（EVM）。
- en: Different virtual machines exist for the currently available DLTs. EVM is among
    the most popular ones. Some of the non-Ethereum DLTs adopted the EVM, too, despite
    having completely different ledger and consensus technologies from Ethereum. For
    example, Hedera provides an adaptation of EVM implementation for the Hedera Smart
    Contract Service. Sawtooth,[^(10)](footnotes.xhtml#fn_10) one of many Hyperledger
    projects, with its built-in Hyperledger Burrow,[^(11)](footnotes.xhtml#fn_11)
    can run Solidity smart contracts in the EVM for Hyperledger. This not just facilitates
    the reuse of smart contracts developed for Ethereum; using the same smart contract
    programming language and relying on a familiar smart contract execution environment
    can also be very favorable for the developer. They can rely on their preceding
    software and security engineering experience and reuse their existing codebase,
    making the development faster and more secure.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 为当前可用的分布式账本技术（DLTs）存在不同的虚拟机。EVM 是其中最受欢迎的之一。一些非以太坊的分布式账本技术也采用了 EVM，尽管它们与以太坊有着完全不同的账本和共识技术。例如，Hedera
    为 Hedera Smart Contract Service 提供了一个 EVM 实现的适应版本。Sawtooth，是众多 Hyperledger 项目之一，其内置的
    Hyperledger Burrow，可以运行在 EVM 中的 Solidity 智能合约以支持 Hyperledger。这不仅促进了为以太坊开发的智能合约的重复使用；使用相同的智能合约编程语言，并依赖熟悉的智能合约执行环境，对开发者来说也非常有利。他们可以依赖其先前的软件和安全性工程经验，并重复使用他们的现有代码库，使得开发更加快速和安全的。
- en: Other DL virtual machines take different approaches and use different smart
    contract programming languages. The smart contract code in Corda, for example,
    is written using Kotlin, a programming language from JetBrains that targets the
    Java Virtual Machine (JVM) and JavaScript. The virtual machine for contract execution
    and validation is an augmented and radically more restrictive version of the JVM,
    which enforces security requirements and deterministic execution. Smart contracts
    in EOS run WebAssembly, meaning that a wide variety of languages is supported.
    The chaincode in Hyperledger can be written in any programming language and is
    executed in containers. Currently, Golang, JavaScript (in NodeJS), and Java chaincode
    are supported. With the provided support for EVM, Hyperledger can also run Solidity
    smart contracts.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 其他分布式账本的虚拟机采取了不同的方法，并使用了不同的智能合约编程语言。例如，Corda 中的智能合约代码是用 Kotlin 编写的，Kotlin 是由
    JetBrains 开发的一种编程语言，针对 Java 虚拟机（JVM）和 JavaScript。合同的执行和验证虚拟机是 JVM 的增强版，并且更加严格，它强制执行安全要求和确定性执行。EOS
    中的智能合约运行 WebAssembly，这意味着支持广泛的编程语言。Hyperledger 中的链码可以用任何编程语言编写，并在容器中执行。目前，支持的编程语言包括
    Golang、NodeJS 中的 JavaScript 和 Java 链码。借助对 EVM 的支持，Hyperledger 也可以运行 Solidity 智能合约。
- en: The distribution of a DL system does not scale the performance of a VM. Each
    node in the DL network (not just miners) executes the smart contract code. This
    ensures the consensus and, thus, trust in the results of the smart contract execution.
    All DL nodes repeat the same operation coded in a smart contract, and thus all
    run the same copy of the virtual machine. Smart contract processing capabilities
    of the whole network, therefore, remain limited to the capabilities of a particular
    node.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式账本系统（DL系统）的分布式并不会提高虚拟机（VM）的性能。分布式账本网络中的每个节点（不仅仅是矿工）都会执行智能合约代码。这确保了共识，从而确保了智能合约执行结果的可靠性。所有分布式账本网络节点都会重复智能合约中编写的相同操作，因此它们都运行着相同的虚拟机副本。因此，整个网络的智能合约处理能力受限于特定节点的处理能力。
- en: 2.4.2 Lifecycle
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.4.2 生命周期
- en: A smart contract is a software product. Its lifecycle is being designed and
    developed, compiled, and deployed to the DL network. Finally, it is used as a
    part of a DApp. This is similar to any other software product. However, smart
    contract execution in the DL network imposes several specifics and limitations
    in smart contract software engineering related to development, performance, and
    security. We will discuss these in the following sections. The smart contract
    lifecycle is outlined in [Fig. 2.6](#b_9783110681130-002_fig_006). It is indicated
    in the figure that the management and several phases can be found in the lifecycle,
    too. However, these are not necessarily present, if the smart contract is very
    simple or software engineering is taken lightly. Omitting the verification and
    thoroughly planned and implemented management of smart contracts can have devastating
    security consequences. The figure refers to the lifecycle that is typical for
    the Ethereum-based DApps. Smart contracts in other DL platforms might have slightly
    different lifecycles. For example, in Hyperledger Fabric, no compilation of smart
    contract source code into BC native executable bytecode is needed, as the smart
    contracts are installed and run in containers.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约是一种软件产品。它的生命周期包括设计、开发、编译和部署到分布式账本网络中。最后，作为DApp的一部分使用。这与任何其他软件产品类似。然而，在分布式账本网络上执行智能合约对软件工程提出了几个特定的限制，包括开发、性能和安全方面。我们将在接下来的章节中讨论这些内容。智能合约的生命周期概述如图2.6所示。图中指出，在生命周期中可以找到管理和几个阶段。然而，如果智能合约非常简单或对软件工程不够重视，这些阶段不一定都存在。省略验证和经过周密计划实施的智能合约管理可能会带来灾难性的安全后果。该图指的是典型的基于以太坊的DApps的生命周期。其他分布式账本平台上的智能合约可能具有稍有不同的生命周期。例如，在Hyperledger
    Fabric中，不需要将智能合约源代码编译成BC本地可执行字节码，因为智能合约是在容器中安装并运行的。
- en: '![](../graphic/converted/b_9783110681130-002_fig_006.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](../graphic/converted/b_9783110681130-002_fig_006.jpg)'
- en: 'Fig. 2.6: Smart contract lifecycle in Ethereum.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6：以太坊中的智能合约生命周期。
- en: Design, development, and source code verification produce the source code of
    a smart contract. In Ethereum, source code is usually coded in the Solidity language
    (see [Section 2.4.3](#b_9783110681130-002_s_002_s_004_s_003) for details on smart
    contract tools and languages). During the design and programming of the source
    code, different formal and runtime methods can be taken to verify the correctness
    of the smart contract code and minimize possible security flaws in the specification
    and code implementation.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 设计、开发和源代码验证产生了智能合约的源代码。在以太坊中，源代码通常是用Solidity语言编写的（具体工具和语言见[2.4.3节](#b_9783110681130-002_s_002_s_004_s_003)）。在设计和编程源代码时，可以采用不同的形式和运行时方法来验证智能合约代码的正确性，并在规范和代码实现中尽量减少可能的安全漏洞。
- en: The source code is then compiled to a version that can be deployed and executed
    in the DL system. In Ethereum, this is an Ethereum-specific binary format, called
    the EVM bytecode.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，源代码被编译成可以在分布式账本系统（DL系统）中部署和执行的版本。在以太坊中，这是特定于以太坊的二进制格式，称为EVM字节码。
- en: In Ethereum, the use of a deployed smart contract is defined by an Application
    Binary Interface (ABI) specification [[31](9783110681123_008192.xhtml#b_9783110681130-005_ref_031)].
    An ABI is an interface between external program modules and the smart contract
    bytecode. The bytecode and the ABI file are then sent off to the blockchain with
    a contract creation transaction. This special transaction is sent to an empty
    receiver BC address, with the EVM bytecode as data. The transaction sender is
    a valid Ethereum account. This account becomes the owner of the smart contract.
    Once the smart contract deployment transaction is added to the chain by validating
    nodes in the BC, the smart contract obtains a unique smart contract address. Now,
    transactions can be destined to the address of the newly deployed smart contract.
    A smart contract has its balance, some code, and some persistent storage to execute
    its operations. Another level of verification can be added after the deployment.
    We can now check for possible compilation flaws at the bytecode level or ensure
    that the deployed bytecode logic matches the source code.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊中，已部署智能合约的使用由应用程序二进制接口（ABI）规范定义[[31](9783110681123_008192.xhtml#b_9783110681130-005_ref_031)]。ABI是外部程序模块与智能合约字节码之间的接口。然后，字节码和ABI文件随合同创建交易发送到区块链。这个特殊的交易发送到一个空接收者区块链地址，以EVM字节码作为数据。交易发送者是一个有效的以太坊账户。这个账户成为智能合约的所有者。一旦智能合约部署交易被区块链中的验证节点添加，智能合约获得唯一的智能合约地址。现在，交易可以被定向到新部署智能合约的地址。智能合约有其余额、一些代码和一些持久存储来执行其操作。在部署后可以添加另一层验证。我们现在可以在字节码级别检查可能的编译错误，或确保部署的字节码逻辑与源代码一致。
- en: In the Ethereum BC, the ABI stipulates the de facto mechanism for encoding/decoding
    data into/out of a smart contract, that is, how we call functions in a contract
    or pass and get data back. Slightly different approaches are taken in other distributed
    ledger architectures, for example, Hyperledger [[32](9783110681123_008192.xhtml#b_9783110681130-005_ref_032)].
    Other smart contracts in the network and the external (off-chain) applications
    call smart contract methods to read the smart contract parameters or send BC transactions
    to the smart contract to change its state. A smart contract can emit events filtered
    by the DL network nodes and can be passed to the external applications by a node.
    Different smart contracts in the same network reside within the same virtual machine.
    Their communication is straightforward and limited only by the access rights encoded
    in a smart contract. Off-chain applications need to have access to a valid DL
    account and an API to communicate with the DL node. For the Ethereum off-chain
    applications, several frontend JavaScript APIs are provided, including frontend
    programming libraries. An example is the Web3.js – Ethereum JavaScript API,[^(12)](footnotes.xhtml#fn_12)
    a collection of libraries that allows interacting with a local or remote Ethereum
    node using HTTP, IPC, or WebSocket.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊BC中，ABI规定了实际的数据编码/解码机制，即我们如何调用合约中的函数或传递并获取数据回来。在其他分布式账本架构中采取了略有不同的方法，例如，超级账本Hyperledger[[32](9783110681123_008192.xhtml#b_9783110681130-005_ref_032)]。网络中的其他智能合约和外部（离线）应用程序调用智能合约方法以读取智能合约参数或发送BC交易以改变其状态。智能合约可以由DL网络节点过滤事件并传递给外部应用程序。同一网络中的不同智能合约位于同一虚拟机中。它们的通信简单，仅受智能合约中编码的访问权限限制。离线应用程序需要访问一个有效的DL账户和一个API与DL节点通信。对于以太坊离线应用程序，提供了几个前端JavaScript
    API，包括前端编程库。一个例子是Web3.js – 以太坊JavaScript API,[^(12)](footnotes.xhtml#fn_12) 一组允许使用HTTP、IPC或WebSocket与本地或远程以太坊节点交互的库。
- en: It is very common for the traditional Web applications to access various resources
    on the Internet, using various protocols, for example, HTTP, HTTPS, WebSockets,
    WebRTC, RPC, and others. On the other hand, the smart contract execution environment
    limits the scope of the smart contract execution to the DL network. A smart contract
    can only call other smart contracts in the network but cannot access resources
    out of the DL.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 传统Web应用非常常见地通过各种协议访问互联网上的各种资源，例如HTTP、HTTPS、WebSockets、WebRTC、RPC等。另一方面，智能合约执行环境将智能合约执行的范围限制在分布式账本网络中。智能合约只能调用网络中的其他智能合约，但不能访问DL之外的资源。
- en: The smart contract methods can be accessed in two ways by the DL network participants.
    Suppose an off-chain application or another smart contract requires, for example,
    a simple read of a smart contract parameter. In that case, this is done with a
    local invocation (occurring only in the local DL node) of the smart contract method.
    On the other hand, when a DL network participant needs to modify some state in
    the smart contract, the call must be initialized through a transaction sent to
    the smart contract address. This transaction can include a cryptocurrency for
    the smart contract and additional input parameters for the method call. Transactions
    have to be validated and included in the chain in the same way as non-smart contract
    transactions. Upon inclusion, the smart contract is executed, and the state (of
    the contract and the entire ledger) is updated accordingly. The smart contract’s
    bytecode, of course, remains unchanged. Any code changes of the deployed bytecode
    are impossible due to the DL’s immutable nature.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约方法可以通过分布式账本网络参与者两种方式访问。假设一个离线应用程序或另一个智能合约需要，例如，简单读取智能合约参数。在这种情况下，通过智能合约方法的本地调用（仅在本地分布式账本节点中发生）来完成。另一方面，当分布式账本网络参与者需要修改智能合约中的某些状态时，必须通过发送到智能合约地址的交易来初始化调用。此交易可以为智能合约包含加密货币，并为方法调用提供附加输入参数。交易必须经过验证并包含在链中，与非智能合约交易的方式相同。包含后，智能合约执行，并根据需要更新合约及其整个账本的状态。当然，智能合约的字节码保持不变。由于分布式账本的不可变性，部署的字节码的任何代码更改都是不可能的。
- en: '[Figure 2.7](#b_9783110681130-002_fig_007) shows a class diagram of a simple
    single-contract solution, which provides two methods, the promoteToAdmin, and
    poeCreate. The first expects a parameter hopefulAdmin with a value corresponding
    to the Ethereum address of the new administrator. The poeCreate method receives
    a hash value and contextual data about this hash. These methods are executed with
    the given parameters. If encoded conditions are met, the poeCreate method emits
    an event called poeCreated, which is intercepted by all the nodes in the blockchain
    network, and notifications are given to the off-chain applications that are subscribed
    to these events. The hash in the poeCreated event is indexed, so subscribers can
    request to be notified only of poeCreated events with a specific hash. The smart
    contract also includes a number variable called eventCount, which is publicly
    readable.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2.7](#b_9783110681130-002_fig_007) 展示了一个简单单合约解决方案的类图，该方案提供了两个方法：promoteToAdmin
    和 poeCreate。第一个方法期望一个名为 hopefulAdmin 的参数，其值对应于新管理员的以太坊地址。poeCreate 方法接收一个哈希值及其上下文数据。这些方法使用给定参数执行。如果编码条件满足，poeCreate
    方法将发出一个名为 poeCreated 的事件，该事件被区块链网络中的所有节点拦截，并通知订阅这些事件的离线应用程序。poeCreated 事件中的哈希值被索引，因此订阅者可以请求只接收具有特定哈希的
    poeCreated 事件。智能合约还包括一个名为 eventCount 的变量，该变量是公开可读的。'
- en: '![](../graphic/converted/b_9783110681130-002_fig_007.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](../graphic/converted/b_9783110681130-002_fig_007.jpg)'
- en: 'Fig. 2.7: Class diagram of a simple single-contract smart contract solution.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7：简单单合约智能合约解决方案的类图。
- en: 2.4.3 Smart contract programming
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.4.3 智能合约编程
- en: Most of the DL smart contract execution environments, including Ethereum, Hashgraph,
    and BTC, follow state machine replication on the *order-execute* principle. The
    consensus mechanism of these DLTs assures a clear order of the smart contract-invoking
    transactions before their execution. The ordered transactions are then executed
    sequentially on all peers, reflecting in the common change of the ledger/smart
    contract state. For this to happen, the execution of smart contracts (processing
    of all transactions address to a smart contract by the smart contract’s code)
    needs to be deterministic.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 包括以太坊、Hashgraph 和 BTC 在内的大多数分布式账本智能合约执行环境遵循基于 *order-execute* 原则的状态机复制。这些分布式账本共识机制确保在执行之前，对智能合约调用交易有一个清晰的顺序。然后按顺序在所有对等节点上执行这些有序交易，反映在账本/智能合约状态的公共更改。为了实现这一点，智能合约的执行（智能合约的代码处理所有交易地址）必须是确定性的。
- en: The requirement for deterministic execution places a strong limitation on what
    a smart contract can do. For example, using date or time functions, generating
    random values, or retrieving data from off-chain resources (e.g., external API
    calls) prevents deterministic execution. It is, therefore, very common that these
    DLTs use special smart contract programming languages to enforce the determinism
    even at the level of programming language. Suppose the deterministic scripting
    language used by the VM is Turing-complete. In that case, this essentially means
    that the types of smart contracts that the developers can design are limited only
    by their programming skills and creativity.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 对确定性执行的要求对智能合约能做什么施加了严格的限制。例如，使用日期或时间函数、生成随机值或从链下资源（例如，外部API调用）检索数据都会阻止确定性执行。因此，分布式账本技术（DLT）通常使用特殊的智能合约编程语言来强制确定性，甚至是在编程语言层面。假设虚拟机使用的确定性脚本语言是图灵完备的。这意味着开发者可以设计的智能合约类型仅受他们的编程技能和创造力的限制。
- en: However, not all DL smart contract execution environments follow the order-execute
    principle. Hyperledger applies a different transaction lifecycle and, therefore,
    different smart contract execution and validation principle. It is called execute-order-validate
    [33]. The name indicates that a smart contract call, invoked by a transaction
    destined to a smart contract address, is first executed. The transactions to smart
    contracts can therefore be executed in any order, possibly, in parallel. A transaction
    need not be executed by every node in the network. After a transaction is executed,
    endorsement policies define which nodes need to agree on the result of a transaction,
    and then it is added to the ledger. This is the phase where transaction ordering
    occurs. The transaction validation, which happens last, is separated from the
    execution. During validation, each node has an ordered list of already executed
    transactions and can check if any of them is invalid, for example, due to double-spending.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并非所有分布式账本（DL）的智能合约执行环境都遵循顺序执行原则。Hyperledger采用不同的交易生命周期，因此也采用不同的智能合约执行和验证原则，这被称为执行-排序-验证[33]。这个名字表明，首先执行由交易调用智能合约地址的交易发起的智能合约调用。因此，针对智能合约的交易可以以任何顺序执行，甚至可能是并行执行。交易不必在网络中的每个节点执行。交易执行后，背书策略定义哪些节点需要对交易的执行结果达成一致，然后将其添加到账本中。这是交易排序的阶段。交易验证是最后发生的，与执行分离。在验证期间，每个节点都有一个已执行交易的有序列表，可以检查其中是否有任何交易因双重花费而无效。
- en: The execute-order-validate approach has several relevant benefits. These are
    increased performance (not every node executes every smart contract), smart contract
    code privacy (only the endorsement nodes need to know the smart contract code),
    and the possibility of using general-purpose programming languages for smart contract
    development.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 执行-排序-验证方法有几个相关的优点。其中包括提高性能（不是每个节点都执行每个智能合约）、智能合约代码隐私（只有背书节点需要知道智能合约代码）以及使用通用编程语言进行智能合约开发的可能性。
- en: 2.4.3.1 Languages
  id: totrans-211
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.4.3.1 编程语言
- en: Various programming languages are applied to develop smart contracts, depending
    on the VM in the selected network. Some VMs support diverse programming languages
    for smart contracts and others stick to one.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 各种编程语言被应用于开发智能合约，这取决于所选网络中的虚拟机（VM）。一些虚拟机支持多种编程语言用于智能合约，而其他的则坚持使用一种。
- en: Ethereum uses deterministic programming languages Solidity (prevalent) and Vyper
    for smart contracts. Solidity, the most popular language[^(13)](footnotes.xhtml#fn_13)
    on Ethereum, was inspired by C++, Python, and JavaScript, and Vyper is based on
    Python. One can build smart contracts in JavaScript, C++, or Python. Still, because
    of the order-execute constraints and contexts related to the EVM, it is easier
    to have a language specifically for the task.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊使用确定性编程语言Solidity（常用）和Vyper来编写智能合约。Solidity是以太坊上最受欢迎的编程语言[^(13)](footnotes.xhtml#fn_13)，其灵感来源于C++、Python和JavaScript，而Vyper则是基于Python的。人们可以用JavaScript、C++或Python来构建智能合约。然而，由于与EVM相关的顺序执行和上下文约束，使用专门为这一任务设计的语言会更容易。
- en: EOS[^(14)](footnotes.xhtml#fn_14) blockchain network supports WebAssembly (WASM)
    for smart contract programming, despite being an order-execute DL, too. WASM is
    not deterministic, so it is up to the programmer not to use any non-deterministic
    input like the time of a day or random number generator.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: EOS[^(14)](footnotes.xhtml#fn_14) 区块链网络支持 WebAssembly (WASM) 用于智能合约编程，尽管它也是一个按序执行的分布式账本。WASM
    不是确定性的，因此是否使用如一天的时间或随机数生成器等非确定性输入取决于程序员。
- en: Hyperledger Fabric is the first blockchain system that runs smart contracts
    written in general-purpose programming languages, such as Go, Java, Node.js. The
    smart contract code is executed in containers.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric 是第一个能够运行用如 Go、Java、Node.js 等通用编程语言编写的智能合约的区块链系统。智能合约代码在容器中执行。
- en: 2.4.3.2 Tools and libraries
  id: totrans-216
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.4.3.2 工具和库
- en: At the beginning of the DApp era, only a basic set of tools with limited functionality
    was available for the developers. Most of the tools were related to Ethereum and
    Solidity – the cornerstones of the pioneering DLT for DApps. The development tools
    were mostly desktop or online code editors, with added Solidity code highlighting
    and syntax checking. Some were linked to the Solidity compiler, while others left
    the compilation to other tools. Debugging was manual, and there were no or only
    very basic security validations available.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DApp 时代的开始，只有具备有限功能的 basic 工具集可供开发者使用。大多数工具与以太坊和 Solidity 有关——这是 DApp 先驱的分布式账本技术的基石。开发工具大多是桌面或在线代码编辑器，带有
    Solidity 代码高亮和语法检查。一些与 Solidity 编译器相连，而其他的则将编译留给其他工具。调试是手工的，而且没有或只有非常基础的安全性验证可用。
- en: With the maturing of DApp ecosystems, new tools and frameworks appeared more
    integrated and provided broader functional scope. These tools support the development,
    validation and testing, and deployment of smart contracts. We are now approaching
    the development environments with similar maturity as those for, for example,
    long-established Web application development.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 DApp 生态系统的成熟，出现了更多集成度更高、功能范围更广泛的新工具和框架。这些工具支持智能合约的开发、验证、测试和部署。我们现在正在接近与例如长期建立的
    Web 应用开发具有相似成熟度的开发环境。
- en: For Ethereum, dedicated frameworks (Truffle) and integrated development environments
    (IDE) (e.g., Remix) exist. Popular multi-purpose development environments (e.g.,
    VS Code) support coding, compilation, and security validation of Solidity code,
    too. These tools and frameworks can be integrated with code validators (MythX)
    or emulators (Ganache) for preliminary testing in emulated blockchain networks.
    The same tools can be used for smart contract development for Hedera Hashgraph
    because it implements Ethereum’s EVM and uses the Solidity for smart contract
    programming. The EOS ecosystem, too, sustains a broad set of development and testing
    tools[^(15)](footnotes.xhtml#fn_15) for their smart contacts. Integrated with
    various tools required for EOS in a unified graphical application, EOS Studio,
    for example, provides a powerful and easy-to-use environment for DApp development.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 对于以太坊，有专门的框架（Truffle）和集成开发环境（IDE）（例如，Remix）。流行的多功能开发环境（例如，VS Code）也支持 Solidity
    代码的编码、编译和安全性验证。这些工具和框架可以与代码验证器（MythX）或模拟器（Ganache）集成，用于在模拟的区块链网络上进行初步测试。同样的工具也可以用于
    Hedera Hashgraph 的智能合约开发，因为它实现了以太坊的 EVM 并使用 Solidity 进行智能合约编程。EOS 生态系统也为智能合约维持了一组广泛的开发和测试工具[^(15)](footnotes.xhtml#fn_15)。例如，与
    EOS 所需的多种工具集成的统一图形应用程序 EOS Studio 提供了强大的且易于使用的 DApp 开发环境。
- en: 'Besides, Solidity has some inbuilt libraries, which enhance the security or
    implement some of the common functionality frequently used by many smart contract
    developers in a systematic and proven way. This speeds up the development process
    and enhances security. However, the application of external libraries might contradict
    the desired simplicity of the smart contract code and introduce possible new risks
    with additional code in the library. Some of the libraries are:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Solidity 有一些内建库，这些库增强了安全性或以系统化和经过验证的方式实现许多智能合约开发者经常使用的常见功能。这加快了开发过程并增强了安全性。然而，外部库的应用可能会与智能合约代码期望的简洁性相冲突，并引入库中额外代码可能带来新的风险。一些库包括：
- en: 'Modular network: includes many modular libraries like ArrayUtils, Token, CrowdSale,
    Vesting, StringUtils, LinkedList, Wallet, and so on'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块化网络：包括许多模块化库，如 ArrayUtils、Token、CrowdSale、Vesting、StringUtils、LinkedList、Wallet
    等。
- en: OpenZeppelin:[^(16)](footnotes.xhtml#fn_16) provides role-based access control
    (library called Roles) and secure mathematical library (SafeMath) as well as other
    security-related libraries for smart contract programming for Ethereum (MerkleProof,
    ECDSA, Address, SafeERC20, Arrays)
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenZeppelin:[^(16)](footnotes.xhtml#fn_16) 提供了基于角色的访问控制（库名为Roles）和安全的数学库（SafeMath），以及为以太坊智能合约编程提供的其他安全相关库（MerkleProof、ECDSA、Address、SafeERC20、Arrays）。
- en: 'DApp-bin: was created by Ethereum and included libraries like DoublyLinkedList,
    StringUtils, IterableMapping, and so on'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'DApp-bin: 是由以太坊创建的，并包含了诸如DoublyLinkedList、StringUtils、IterableMapping等库。'
- en: Various levels of code testing are essential for efficient and secure (see [Section
    2.4.4](#b_9783110681130-002_s_002_s_004_s_004) for more details) smart contracts.
    Several projects aim to formal verification of smart contracts, and a comprehensive
    list is being maintained [34]. Some of these tools operate at the source code
    level (i.e., the Solidity), whereas others operate at the compiled bytecode level.
    MythX[^(17)](footnotes.xhtml#fn_17) is a cloud-based smart contract security service.
    It performs security analysis remotely, accepting jobs and returning results via
    an API. It currently detects most weaknesses found in the SWC Registry. It, thus,
    covers assertions and property checking, byte-code safety, authorization controls,
    control flow, the correctness of ERC standard implementations, and various coding
    best practices for Solidity [35]. The analysis types include symbolic analysis,
    fuzzing (bytecode), Solidity code analysis, taint analysis, and static analysis.
    The MythX API has been integrated into many development frameworks, including
    Brownie, Truffle, Remix, and VC Studio. OYENTE [36] is another tool to analyze
    the Ethereum smart contracts code, based on symbolic execution. OYENTE takes two
    inputs, the Ethereum smart contract bytecode and Ethereum global state. It checks
    a contract against several known software weaknesses. Although the majority of
    the testing tools aim toward Ethereum and Solidity, other DL technology ecosystems
    address this issue, too. Chaincode scanner [37] is a static security checker for
    Hyperledger Fabric smart contracts. It takes a chaincode written in Go as input
    and checks it for nine vulnerability patterns.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 对智能合约进行不同层次的代码测试对于提高效率和安全性是必不可少的（更多细节请参见[第2.4.4节](#b_9783110681130-002_s_002_s_004_s_004)）。一些项目旨在对智能合约进行形式化验证，并且有一个全面的列表正在维护[34]。其中一些工具在源代码级别（即Solidity）操作，而其他工具在编译后的字节码级别操作。MythX[^(17)](footnotes.xhtml#fn_17)
    是一个基于云的智能合约安全服务。它远程执行安全分析，通过API接收作业并返回结果。它目前检测到了SWC注册表中找到的大部分弱点。因此，它涵盖了断言和属性检查、字节码安全、授权控制、控制流、ERC标准实现的正确性以及Solidity的各种编码最佳实践[35]。分析类型包括符号分析、模糊测试（字节码）、Solidity代码分析、污点分析以及静态分析。MythX
    API已经集成到了许多开发框架中，包括Brownie、Truffle、Remix和VC Studio。OYENTE [36] 是基于符号执行的另一种分析以太坊智能合约代码的工具。OYENTE接受两个输入，以太坊智能合约的字节码和以太坊全局状态。它将合同与几个已知的软件弱点进行对比。尽管大多数测试工具都是针对以太坊和Solidity的，但其他分布式账本技术生态系统也解决这个问题。Chaincode
    scanner [37] 是Hyperledger Fabric智能合约的静态安全检查器。它接受用Go编写的链码作为输入，并检查九个漏洞模式。
- en: Other tools can facilitate the development and monitoring of the deployed smart
    contracts. Chain and block explorers are presented in [Section 2.6.4](#b_9783110681130-002_s_002_s_006_s_004).
    A valuable tool is the Hyperledger Caliper,[^(18)](footnotes.xhtml#fn_18) which
    is a part of the Hyperledger endeavors. The Hyperledger Caliper is a benchmarking
    tool, which allows users to measure the performance of a blockchain implementation
    with a set of predefined use cases. The Hyperledger Caliper produces reports containing
    several performance indicators, including resource utilization, transaction latency,
    and transactions per second (tps). Besides several Hyperledger DLTs, the Caliper
    benchmarks Ethereum-based networks, too.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 其他工具可以促进已部署智能合约的开发和监控。链和区块浏览器在[第2.6.4节](#b_9783110681130-002_s_002_s_006_s_004)中介绍。一个有价值的工具是Hyperledger
    Caliper,[^(18)](footnotes.xhtml#fn_18) 这是Hyperledger项目的一部分。Hyperledger Caliper是一个基准测试工具，允许用户使用一组预定义用例来衡量区块链实现的性能。Hyperledger
    Caliper生成的报告包含几个性能指标，包括资源利用率、交易延迟和每秒交易数（tps）。除了几个Hyperledger分布式账本技术（DLT）外，Caliper还对基于以太坊的网络进行基准测试。
- en: The Hyperledger DL ecosystem (see [Section 2.7.1.2](#b_9783110681130-002_s_002_s_007_s_001_s_002))
    develops and promotes several business blockchain libraries. For example, Hyperledger
    Ursa[^(19)](footnotes.xhtml#fn_19) is a shared cryptographic library, which enables
    implementations to avoid duplicating other cryptographic work and increases security
    in the process.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 超级账本分布式账本技术（DLT）生态系统（参见[第2.7.1.2节](#b_9783110681130-002_s_002_s_007_s_001_s_002)）开发和推广了多个企业级区块链库。例如，Hyperledger
    Ursa[^(19)](footnotes.xhtml#fn_19)是一个共享的加密库，它使得实现者可以避免复制其他加密工作，并在过程中提高安全性。
- en: 2.4.4 Smart contract security
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.4.4 智能合约安全
- en: Smart contract security and the security of the related DApps are parts of a
    broader cybersecurity landscape ([Fig. 2.8](#b_9783110681130-002_fig_008)). They,
    therefore, share many known risks and vulnerabilities commonly found in other
    ICT systems and applications, too. Such common attack vectors are, for instance,
    attacks on the application clients, attacks on user-wallet credentials through
    phishing, dictionary attacks, or by exploiting bugs in hardware wallets. The same
    holds for the exploits of digital signatures, hash functions, or address vulnerabilities.
    Distributed denial of service (DDoS) attacks can target the DLT and DApp infrastructure,
    for example, the off-chain application parts or the auxiliary services, such as
    crypto exchanges and mining pools.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约的安全性与相关DApps的安全性是更广泛网络安全景观的一部分（参见[图2.8](#b_9783110681130-002_fig_008)）。因此，它们也共享许多在其他ICT系统和应用中常见的已知风险和漏洞。这些常见的攻击载体，例如，攻击应用客户端，通过钓鱼攻击、字典攻击或利用硬件钱包中的漏洞攻击用户钱包凭据。数字签名、哈希函数或地址漏洞的利用也是一样。分布式拒绝服务（DDoS）攻击可以针对DLT和DApp的基础设施，例如，离线应用部分或辅助服务，如加密货币交易所和挖矿池。
- en: '![](../graphic/converted/b_9783110681130-002_fig_008.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](../graphic/converted/b_9783110681130-002_fig_008.jpg)'
- en: 'Fig. 2.8: Smart contract security and cybersecurity.'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.8：智能合约安全和网络安全。
- en: However, in addition to the common cyber risks and vulnerabilities that affect
    DApps due to the decentralized and distributed nature of DLT, unknown, specific
    vulnerabilities and risks appear or become severely augmented. Possible attacks
    and new attack vectors comprise the governance and operation of the DL network,
    mining and consensus, tampering of transactions, and attacks on smart contracts.
    Various vectors are frequently combined into one attack area to gain control over
    the network, a part of the network, or individual nodes and then exploit this
    control to manipulate transactions. Some of the attack vectors might be extremely
    difficult and costly to execute. In truly decentralized DL networks, they might
    be practically almost infeasible. However, in more centralized (private) networks,
    the risks remain real. Many of the attack vectors are protocol- and implementation-specific
    and are not present in every variant of DLT, so the actual implementation of a
    DL network may mitigate or prevent some of the risks with, for instance, high
    decentralization, authorized nodes instead of anonymous ones, consensus mechanisms
    other than traditional PoW, and so on.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，除了因DLT的去中心化和分布式特性影响DApps的常见网络风险和漏洞外，未知或特定的漏洞和风险也会出现或加剧。可能的攻击和新攻击载体包括分布式账本网络的治理和运营、挖矿和共识机制、交易篡改以及智能合约攻击等。这些攻击载体经常组合成单一的攻击领域，以控制网络、网络的一部分或个别节点，并利用这种控制来操纵交易。其中一些攻击载体可能执行起来极其困难且成本高昂。在真正去中心化的DL网络上，它们可能实际上几乎是不可能的。然而，在更加中心化（私有）的网络中，风险仍然存在。许多攻击载体是协议和实现特定的，并不存在于DLT的每个变体中，因此，DL网络的实际实现可能通过高去中心化、授权节点代替匿名节点、传统PoW之外的共识机制等方式减轻或预防一些风险。
- en: While some of the defense mechanisms and mitigation techniques are already available
    in other ICT domains and readily available in modern software development lifecycles,
    others need to be newly developed or adapted to the DLT. This is not surprising.
    Most of the DLT platforms, tools, and smart contract programming languages are
    still in their infancy, often, fast-evolving and constantly changing the features.
    Hence, design flaws might exist in the DL platforms or smart contract languages.
    Along with DLT ecosystems, security approaches mature, too.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然一些防御机制和缓解技术在其他ICT领域中已经存在，并且在现代软件开发生命周期中易于获得，但其他技术需要重新开发或适应到区块链技术中。这并不令人惊讶。大多数区块链平台、工具和智能合约编程语言仍处于起步阶段，通常它们发展迅速，不断更新特性。因此，区块链平台或智能合约语言中可能存在设计缺陷。随着区块链生态系统的成熟，安全方法也在进步。
- en: The immutable nature of a previously deployed smart contract code exposes vulnerabilities
    that could be easily mitigated in traditional software systems but can present
    severe risks in decentralized applications. As with any source code, even a thoroughly
    tested and validated smart contract might have bugs. Design flaws may exist in
    blockchain platforms or smart contract languages. Common Software Security Weaknesses
    (CWE) [38] may be amplified on blockchain platforms and in the related smart contract
    security [39]. Such weaknesses include improper behavioral workflow, access control
    or initialization, incorrect calculation and insufficiently random values, the
    inclusion of untrusted external functionalities (e.g., external libraries, smart
    contracts deployed by others), and improper exception handling and cryptographic
    understanding.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 先前部署的智能合约代码的不可变性质暴露了在传统软件系统中容易缓解但在去中心化应用中可能带来严重风险的漏洞。与任何源代码一样，即使经过彻底测试和验证的智能合约也可能存在缺陷。区块链平台或智能合约语言中可能存在设计缺陷。常见的软件安全弱点（CWE）[38]可能会在区块链平台和相关智能合约安全[39]上放大。这些弱点包括不适当的行为工作流程、访问控制或初始化、计算错误和随机性不足、包含未经验证的外部功能（例如，外部库、由他人部署的智能合约），以及不正确的异常处理和对加密的理解不足。
- en: Key smart contract vulnerabilities stem from logical flows, bugs in the smart
    contract code, and under-optimized code patterns. Logical flows in the implementation
    of the contract, where, for example, a smart contract does not refund the initial
    deposit, lack of cryptography for user inputs to ensure fairness, or incentive
    misalignments [40], can be deliberate or caused by a misunderstanding of distributed
    ledger properties. In public DL networks, where cryptocurrencies and miner awards
    are part of the DApp execution, there is a risk of under-optimized smart contract
    code patterns that lead to unnecessary gas consumption [41]. Their research states
    that the two main reasons for this are useless code-related and loop-related patterns.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 关键的智能合约漏洞源于逻辑流程、智能合约代码中的错误以及未优化的代码模式。在合约实施的逻辑流程中，例如智能合约没有退还初始存款、缺乏确保用户输入公平的加密、或激励错位[40]，可能是故意的或由于对分布式账本属性的误解造成的。在公共区块链网络上，其中加密货币和矿工奖励是DApp执行的一部分，存在因未优化的智能合约代码模式而导致不必要的气体消耗[41]的风险。他们的研究表明，这主要是由于无用的代码相关和循环相关模式造成的。
- en: 'In Ethereum, smart contract vulnerabilities arise from the Solidity language,
    the Ethereum or EVM blockchain platform, and a misunderstanding of common practices.
    In Hyperledger Fabric chaincode, vulnerabilities arise from almost identical points:
    the Go language, the blockchain platform, and a misunderstanding of common practices.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊中，智能合约漏洞源于Solidity编程语言、以太坊或EVM区块链平台以及对常见实践的误解。在Hyperledger Fabric链码中，漏洞源于几乎相同的原因：Go编程语言、区块链平台和对常见实践的误解。
- en: 2.4.4.1 Smart contract weakness classification
  id: totrans-236
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.4.4.1 智能合约弱点分类
- en: The Smart Contract Weakness Classification and Test Cases Registry (SWC Registry)
    [39] is a comprehensive list of key security flaws in the Solidity smart contract
    code. It provides a checklist for smart contract programmers and many of the smart
    contract vulnerability detection tools. Possible vulnerabilities are labeled as
    SWC *x*, where *x* is the vulnerability index, for example, SWC 107.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约弱点分类和测试用例注册表（SWC注册表）[39]是Solidity智能合约代码中关键安全缺陷的全面列表。它为智能合约程序员提供了检查清单，许多智能合约漏洞检测工具也使用该清单。可能的漏洞被标记为SWC
    *x*，其中*x*是漏洞的索引号，例如，SWC 107。
- en: Some common Solidity smart contract vulnerabilities include transaction-ordering
    dependence, timestamp dependence, mishandled exceptions, and reentrancy. Transaction-ordering
    dependence (SWC114) can be a problem if users have no control over the order of
    transaction execution. The order is up to miners. If there is more than one transaction
    that invoked the same contract, the order of those transactions can affect the
    new state of the blockchain. Timestamp dependence (SWC116) is related to smart
    contracts and includes conditions that are triggered by the block timestamp. Block
    timestamps are set by miners based on their local system time and can be unreliable
    or manipulated by an adversary. Mishandled exceptions (SWC104) target the contract
    that calls another contract. If any exception occurs in the called contract, it
    terminates and returns false, but it may not notify the caller contract. Reentrancy
    vulnerability (SWC107) is present when a contract calls another contract, and
    the current contract execution waits until the called contract finishes. This
    provides an opportunity for the adversary to exploit the intermediary state of
    the caller contract and call its methods, several times. Authorization through
    tx.origin (SWC115) could make a contract vulnerable if an authorized account calls
    into a malicious contract. A call could be made to the vulnerable contract that
    passes the authorization check since tx.origin returns the original sender of
    the transaction, the authorized account.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的 Solidity 智能合约漏洞包括交易顺序依赖、时间戳依赖、异常处理不当和重入。交易顺序依赖（SWC114）如果用户无法控制交易执行的顺序，可能会出现问题。顺序取决于矿工。如果有多个交易调用了同一个合约，这些交易的顺序可能会影响区块链的新状态。时间戳依赖（SWC116）与智能合约有关，包括由区块时间戳触发的条件。区块时间戳由矿工根据其本地系统时间设置，可能不可靠或被对手操纵。异常处理不当（SWC104）针对调用另一个合约的合约。如果在被调用合约中发生任何异常，它将终止并返回
    false，但它可能不会通知调用者合约。重入漏洞（SWC107）存在于一个合约调用另一个合约的情况下，当前合约执行等待直到被调用合约完成。这为对手利用调用者合约的中间状态并多次调用其方法提供了机会。通过
    tx.origin 授权（SWC115）可能会使合约如果一个授权账户调用恶意合约而变得脆弱。可以调用脆弱合约，因为它通过了授权检查，因为 tx.origin
    返回事务的原始发送者，即授权账户。
- en: 2.4.4.2 Steps to securing smart contracts
  id: totrans-239
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.4.4.2  securing smart contracts 的步骤
- en: We can take two types of security measures to secure smart contracts – passive
    and active smart contract security. Both subsets are not exclusive or replacing
    one another but have to be seen as two independent cornerstones of smart contract
    security. Passive security measures entail smart contract architectures, software
    engineering techniques specific to the smart contract environment, or code reviews
    and verification (see [Section 2.4.3.2](#b_9783110681130-002_s_002_s_004_s_003_s_002)
    for tools and libraries for smart contract programming). Active measures occur
    during smart contract execution and refer to smart contract and method access
    control, active monitoring of the incoming smart contract transactions, and authorizing
    their actions.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以采取两种类型的安全措施来保护智能合约——被动和主动智能合约安全。这两个子集并非互斥或相互替代，而应被视为智能合约安全的两个独立基石。被动安全措施包括智能合约架构、适用于智能合约环境的软件工程技术或代码审查和验证（有关智能合约编程的工具和库，请参见[2.4.3.2节](#b_9783110681130-002_s_002_s_004_s_003_s_002)）。主动措施发生在智能合约执行期间，指的是智能合约和方法访问控制、对传入智能合约交易的主动监控以及授权其操作。
- en: 2.4.4.2.1 Updating and upgrading
  id: totrans-241
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 2.4.4.2.1 更新和升级
- en: As discussed at the beginning of [Section 2.4.4](#b_9783110681130-002_s_002_s_004_s_004),
    the immutable nature of a previously deployed smart contract prevents the simple
    replacement of the existing code with an updated or upgraded version. Of course,
    we can always deploy the new version to the blockchain network. However, the original
    smart contract has to be rendered unusable, usually by disabling any transactions
    addressed to it. Consensys highlights several Ethereum Smart Contract Best Practices.
    To assure an effective upgrade path for bug fixes and improvements, they advise
    mechanisms to pause, freeze, or delay smart contract actions and mechanisms to
    migrate and transfer data and funds to the updated version of the smart contract.
    Two software engineering techniques[^(20)](footnotes.xhtml#fn_20) can be applied
    in case of an emergency, if relevant flaws are found after the deployment. Circuit
    Breakers pause or stop smart contract execution if certain conditions are met.
    They can be useful when new errors are discovered after the deployment. Most contract
    functionality may be therefore suspended, and the only action now active, is a
    withdrawal. We can either give certain trusted parties the ability to trigger
    the circuit breaker or have programmatic rules that automatically trigger certain
    breakers when certain conditions are met. Speed bumps delay or slow down contract
    actions, so that if malicious activities occur, there is time to recover.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 正如[2.4.4节](#b_9783110681130-002_s_002_s_004_s_004)开头所讨论的，先前部署的智能合约的不可变性质阻止了简单地用更新或升级版本替换现有代码。当然，我们总是可以将新版本部署到区块链网络上。然而，原始的智能合约必须变得无法使用，通常是通过禁用对其的所有交易。Consensys强调了以太坊智能合约的几个最佳实践。为了确保可以有效地对修复和改进进行升级，他们建议暂停、冻结或延迟智能合约操作的机制，以及迁移和将数据和资金转移到智能合约更新版本的动力机制。在部署后发现相关缺陷的情况下，可以应用两种软件工程技术[^(20)](footnotes.xhtml#fn_20)。断路器（Circuit
    Breakers）在满足某些条件时暂停或停止智能合约的执行。它们在新错误在部署后被发现时可能很有用。因此，大多数合约功能可能被暂停，现在唯一活跃的操作是提现。我们可以赋予某些可信方触发断路器的能力，或者拥有在满足某些条件时自动触发某些断路器的程序化规则。速度减缓器（Speed
    bumps）延迟或减缓合约操作，这样如果发生恶意活动，就有时间恢复。
- en: 2.4.4.2.2 Modularization
  id: totrans-243
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 2.4.4.2.2 模块化
- en: In modern software engineering, source code is usually split into modules. These
    modules are easier to handle and navigate than all of the lines of code contained
    in a single file. Modularization makes the management of software easier, including
    updates and upgrades. The code is reusable, and functions are separated. The bigger
    the code base gets, the more sense it makes to have a multi-contract architecture
    and the greater the security benefits to the service become.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代软件工程中，源代码通常被分成模块。这些模块比包含在单个文件中的所有代码行更容易处理和导航。模块化使软件管理更容易，包括更新和升级。代码可重用，功能分离。代码库变得越大，采用多合约架构越有意义，服务的安全性好处也越大。
- en: However, modularization is not a common practice in smart contract development.
    Smart contract usage patterns in a large set of Ethereum-based DApps indicate
    that about 75% of Ethereum-based DApps apply very simple single contract architecture,
    meaning that the on-chain application logic consists of only one smart contract.
    The remaining DApps are multi-contract, on average comprising three smart contracts.
    Therefore, the efficient reuse is very limited, and the smart contract source
    code is mostly simply duplicated among different implementations. Single contract
    solutions may meet the functional demands of the users but often result in unmanageable
    decentralized applications when the requirements for updates arise.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在智能合约开发中，模块化并不是一个常见的做法。基于大量以太坊的DApps的智能合约使用模式表明，约75%基于以太坊的DApps采用非常简单的单合约架构，这意味着链上应用逻辑只由一个智能合约组成。其余的DApps是多合约的，平均包含三个智能合约。因此，有效复用非常有限，智能合约源代码在不同的实现中大多是简单地重复。单合约解决方案可能满足用户的功能需求，但在更新需求出现时，往往导致无法管理的去中心化应用程序。
- en: The Diamond approach to upgradeable modular contracts has been proposed as the
    Ethereum Improvement Proposal (EIP) 2535.[^(21)](footnotes.xhtml#fn_21) This draft
    document proposes a proxy contract that supports using multiple logic contracts.
    These delegate contracts are called facets, and each facet supplies one or more
    functions. A dedicated function enables adding, replacing, or removing functions.
    Events are emitted upon changes in diamond functions, and a user can verify what
    version of the function is called. With this design approach, one can develop
    and incrementally improve the smart contract logic of a DApp over time. However,
    the design of smart contracts ownership, authentication, and authorization is
    not a part of this draft.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 钻石方法可升级模块化合同已作为以太坊改进提案（EIP）2535提出。[^(21)](footnotes.xhtml#fn_21)这份草案文件提出一个支持使用多个逻辑合同的代理合同。这些委派合同被称为面（facet），每个面提供一项或多项功能。一个专用函数可以实现功能的添加、替换或移除。在钻石函数变化时发出事件，用户可以验证调用的是哪个版本的函数。采用这种设计方法，可以随着时间的推移开发并逐步改进DApp的智能合同逻辑。然而，智能合同的所有权、认证和授权设计并不包括在此草案中。
- en: Modular contracts can be upgraded in a controlled manner. Several approaches
    can be taken, or auxiliary services can be used to do this, for example, a registry
    contract, delegate calls, or Ethereum Name Service (see [Section 2.6.3](#b_9783110681130-002_s_002_s_006_s_003)
    for name services).
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化合同可以以受控的方式进行升级。可以采取几种方法，也可以使用辅助服务来完成，例如，注册合同、委派调用或以太坊名称服务（见[2.6.3节](#b_9783110681130-002_s_002_s_006_s_003)关于名称服务）。
- en: 2.4.4.2.3 Example of modularized smart contract architecture for DApps
  id: totrans-248
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 2.4.4.2.3 模块化智能合同架构示例
- en: Modular smart contract architecture requires a set of smart contracts to work
    together as the on-chain part of a decentralized application. Therefore, the security
    and access policy for the contract methods has to be carefully designed and planned.
    It makes sense to have a dedicated smart contract that handles access control
    and interaction permissions for all smart contracts in a decentralized application.
    This means that all security is centralized and offers a better overview than
    having access and security policies defined in every smart contract in the multi-contract
    architecture.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化智能合同架构需要一组智能合同协同工作，作为去中心化应用的链上部分。因此，合同方法的安全和访问策略必须仔细设计和规划。拥有一个专门处理去中心化应用中所有智能合同的访问控制和交互权限的智能合同是有意义的。这意味着所有的安全都是集中的，比在多合同架构中的每个智能合同中定义访问和安全策略提供更好的概览。
- en: We can now separate the service-specific and service-agnostic functions into
    separate modules. Service-agnostic modules provide key platform functionalities
    required in any multi-contract solution. A directory module can serve as the single
    access point, that is, the only interface for the external users. It automates
    the dissemination of the addresses in other smart contract modules. If one of
    the contracts in the deployed system is upgraded and replaced, the directory reflects
    this change and transparently directs the remaining contracts to the updated address.
    An administration module provides common access control for all the smart contracts
    and methods in the solution.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以将服务特定和服务无关的功能分离成不同的模块。服务无关模块提供在多合同解决方案中必需的关键平台功能。一个目录模块可以作为单一访问点，即外部用户的唯一接口。它自动化地将其他智能合同模块的地址分散到其他模块中。如果在部署的系统中其中一个合同被升级和替换，目录反映这种变化，并透明地将剩余合同引导到更新后的地址。一个管理模块为解决方案中的所有智能合同和提供常见访问控制。
- en: Service-specific modules depend on the DApp objective and provide unique functions
    for service operation, for example, in the management of distributed energy resources
    (see Section 4.3.3.1) or car park reservation (see Section 4.2.2), or decentralized
    collaboration between robots (see Section 3.6).
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 服务特定模块依赖于DApp目标，并为服务运营提供独特功能，例如，在分布式能源资源管理（见4.3.3.1节）或停车场预订（见4.2.2节），或者机器人之间的去中心化协作（见3.6节）。
- en: Auxiliary modules provide additional functions relevant to service provisioning.
    However, their functions, such as loyalty tokens, asset tokenization, escrow service,
    or value collection, are common and relevant for other application verticals,
    too. Therefore, auxiliary modules can be provided system-wide and reused in various
    decentralized applications.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 辅助模块提供了与服务提供相关的额外功能。然而，它们的功能，如忠诚度代币、资产代币化、托管服务或价值收集，也是其他应用垂直领域所共通和相关的。因此，辅助模块可以系统性地提供并重复用于各种去中心化应用。
- en: Modular architecture with a separate access administration module allows us
    the definition of various tenants. Although they all interact with multiple modules
    using the interface smart contract, they are only allowed to call some methods,
    while the other methods are restricted. Typically, the tenants in a decentralized
    application would be, for example, application owners, administrators, service
    providers, and service users.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 具有独立访问管理模块的模块化架构使我们能够定义各种租户。尽管它们都通过接口智能合约与多个模块互动，但只允许调用某些方法，而其他方法则受到限制。通常，去中心化应用中的租户可能是，例如，应用所有者、管理员、服务提供商和服务用户。
- en: 2.4.4.2.4 Secure multi-contract interactions
  id: totrans-254
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 2.4.4.2.4 安全的多合约交互
- en: 'The Diamond standard (see [Section 2.4.4.2.1](#b_9783110681130-002_s_002_s_004_s_004_s_002_s_001))
    proposes an upgradeable multi smart contract environment, but it does not include
    any security mechanics that would provide secure and reliable inter-smart contract
    interactions. We can extend this basic modularization with secure smart contract
    tunnels (SCT) [42]. Smart contract tunneling introduces twofold access control:
    per module (only registered modules can interact) and per user. The administrator
    tenant sets up the tunnels in the directory and administration modules. With the
    directory module, we can always assure that the method call was passed through
    an authorized module and that it originated from an authorized smart contract
    account. We use both the tx.origin value to verify that a transaction originated
    from an authorized source and msg.sender value to verify that the transaction
    was forwarded from an authorized source.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 钻石标准（参见[第2.4.4.2.1节](#b_9783110681130-002_s_002_s_004_s_004_s_002_s_001)）提出了一个可升级的多智能合约环境，但它不包括任何提供安全可靠智能合约间交互的安全机制。我们可以用安全的智能合约隧道（SCT）[42]扩展这种基本的模块化。智能合约隧道引入了两重访问控制：按模块（只有注册的模块可以互动）和按用户。管理员租户在目录和管理模块中设置隧道。使用目录模块，我们总能确保方法调用是通过一个授权模块传递的，并且它来源于一个授权的智能合约账户。我们使用tx.origin值来验证交易是否来自一个授权源，以及msg.sender值来验证交易是否来自一个授权源。
- en: '[Figure 2.9](#b_9783110681130-002_fig_009) depicts a tunnel set up between
    the interface contract and subsequent target smart contract. Only smart contracts,
    which are properly registered in the directory and authorized in the administration
    module, can access the target smart contract in our multi-contract solution. In
    addition, the transaction origin address in both interface and target smart contract
    can be checked to limit the access to the particular method, according to the
    tenant roles of a specific user. The unregistered smart contract cannot send transactions
    to the target.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9（参见[图2.9](#b_9783110681130-002_fig_009)）展示了接口合约与后续目标智能合约之间建立的隧道。只有在我们多合约解决方案中适当注册并在管理模块中授权的智能合约才能访问目标智能合约。此外，接口和目标智能合约中的交易源地址可以检查，以根据特定用户的租户角色限制对特定方法的访问。未注册的智能合约不能向目标合约发送交易。
- en: '![](../graphic/converted/b_9783110681130-002_fig_009.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![](../graphic/converted/b_9783110681130-002_fig_009.jpg)'
- en: 'Fig. 2.9: Smart contract tunneling for smart contract module access control.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9：智能合约隧道用于智能合约模块访问控制。
- en: 2.5 Off-chain applications
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.5 离链应用
- en: In the decentralized application triplet (see [Section 2.2](#b_9783110681130-002_s_002_s_002)),
    DL network nodes assure all the blockchain-specific protocols for network operation
    and functions for interaction with other nodes in the network and on-chain smart
    contract execution. The Web, mobile, server-side, or embedded off-chain applications
    need to interface with these nodes to utilize the blockchain-specific features
    and services provided by the DL network.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在去中心化应用三明治（参见[第2.2节](#b_9783110681130-002_s_002_s_002)）中，分布式账本网络节点确保所有区块链特定的网络操作协议与其他网络节点及链上智能合约执行的功能。Web、移动、服务器端或嵌入式离链应用需要与这些节点接口以利用分布式账本网络提供的区块链特定功能和服务。
- en: Therefore, some of the network nodes expose blockchain APIs – usually JSON-RPC
    or REST interfaces – for software applications to interact with the DL network.
    We can enable the API for blockchain service access as an option on our node in
    a public permissionless network. Alternatively, we can rely on third-party APIs
    for public DL networks, provided as a service (see [Section 2.7.2.2](#b_9783110681130-002_s_002_s_007_s_002_s_002))
    for more efficient productization of decentralized applications. In permissioned
    networks adding nodes might be more restricted and limited to authorized users.
    The restrictions are motivated by network security and ledger data privacy, with
    some DL networks not allowing any nodes to be added at all. In these cases, the
    APIs are the only mechanism for external entities to participate or interact with
    the network. For example, to access Hedera services (see [Section 2.7.1.3](#b_9783110681130-002_s_002_s_007_s_001_s_003)
    and Section 1.4.), mirror nodes are used. One cannot run a mirror node in Hedera,
    but Hedera and community mirror nodes are available, with APIs for Hedera services.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一些网络节点暴露区块链API——通常是JSON-RPC或REST接口——供软件应用与DL网络交互。我们可以在公共无权限网络的节点上，将区块链服务访问API作为一个选项启用。或者，我们可以依赖第三方API，为公共DL网络提供服务（参见[第2.7.2.2节](#b_9783110681130-002_s_002_s_007_s_002_s_002)），以更有效地产品化去中心化应用。在受权限的网络中，添加节点可能会更加受限，仅限于授权用户。这些限制是由网络安全和账本数据隐私驱动的，一些DL网络甚至不允许添加任何节点。在这些情况下，API是外部实体参与或与网络交互的唯一机制。例如，为了访问Hedera服务（参见[第2.7.1.3节](#b_9783110681130-002_s_002_s_007_s_001_s_003)和第1.4节），使用了镜像节点。您不能在Hedera中运行镜像节点，但Hedera和社区镜像节点可以使用，并提供Hedera服务的API。
- en: The API endpoints in public networks commonly impose no access control to the
    off-chain applications. Lack of access control might seem surprising if we compare
    it to the API access in many other Web-based applications. Nevertheless, since
    the ledger is shared and available to all involved parties, there is no need to
    protect access to it. Blockchain account-related operations, which can lead to
    severe security vulnerabilities, are performed in the off-chain application parts.
    If we establish some access control for the node API, it is mainly to protect
    the node’s computing resources.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 公共网络中的API端点通常对离链应用不施加访问控制。如果没有访问控制，这可能会让人感到惊讶，但如果我们将其与许多其他基于Web的应用的API访问进行比较，就会明白，由于账本对所有参与方都是共享和可用的，因此无需保护对其的访问。区块链账户相关的操作，可能会导致严重的安全漏洞，是在离链应用部分执行的。如果我们为节点API建立一些访问控制，主要是为了保护节点的计算资源。
- en: 2.5.1 Off-chain application examples
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.5.1 离链应用示例
- en: Off-chain applications utilize the established Web, mobile, server-side, or
    embedded applications technologies to provide user and machine interfaces for
    the DApps.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 离链应用利用现有的Web、移动、服务器端或嵌入式应用技术，为DApps提供用户和机器接口。
- en: Apart from the node APIs, blockchain ecosystems usually provide off-chain client
    libraries for different programming languages. These convenience libraries abstract
    much of the complexity of interacting with blockchain node APIs.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 除了节点API，区块链生态系统通常还为不同的编程语言提供离链客户端库。这些便利的库抽象了与区块链节点API交互的大部分复杂性。
- en: Despite a remarkable resemblance between traditional and blockchain-enabled
    Web user interfaces, the blockchain backend introduces several usability problems.
    They are mostly related to the BC transaction latency. Therefore, users cannot
    always count on refresh rates and response times expected in traditional Web applications.
    Consequently, it is a good user interface design principle to notify the user
    when we await a longer response than expected due to the DL network interaction.
    For example, we can temporarily redirect a user to chain explorer (see [Section
    2.6.4](#b_9783110681130-002_s_002_s_006_s_004)) for live tracking of his transactions
    during that period.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管传统和区块链启用的Web用户界面之间有惊人的相似之处，但区块链后端引入了几种可用性问题。它们大多数与BC交易延迟有关。因此，用户不能总是依赖传统Web应用程序期望的刷新率和响应时间。结果，当由于DL网络交互而等待比预期更长的响应时，通知用户是一个好的用户界面设计原则。例如，我们可以在期间暂时将用户重定向到链浏览器（参见[第2.6.4节](#b_9783110681130-002_s_002_s_006_s_004)），实时跟踪他的交易。
- en: Another blockchain backend effect on off-chain Web, server, or embedded applications
    arises from blockchain node API queries. We cannot form the node API requests
    as efficiently as in, for example, relational databases. Therefore, the number
    of requests to a remote API might become substantial, if the client application
    design does not consider this possibility. This can result in increased node-resource
    consumption and unnecessary communication load between the client-side application
    and the API. The latter might be especially challenging in communication-constrained
    embedded IoT blockchain applications.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种区块链后端对离链Web、服务器或嵌入式应用程序的影响源于区块链节点API的查询。我们无法像在关系型数据库中那样高效地形成节点API请求。因此，如果客户端应用程序设计没有考虑到这种可能性，对远程API的请求可能会变得很大。这可能会导致节点资源消耗增加和客户端应用程序与API之间不必要的通信负载。在通信受限的嵌入式物联网区块链应用程序中，后者可能尤其具有挑战性。
- en: 2.5.1.1 Client-side web applications
  id: totrans-268
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.5.1.1 客户端Web应用程序
- en: Client-side Web applications run in browsers. Apart from the execution of client-side
    application logic, the browser must include a key wallet. A wallet enables the
    management of blockchain keys and identifications. It can be an integral part
    of a browser (e.g., Brave[^(22)](footnotes.xhtml#fn_22)) or a browser extension.
    Metamask[^(23)](footnotes.xhtml#fn_23) is a popular wallet extension for Ethereum-based
    networks. [Figure 2.10](#b_9783110681130-002_fig_010) shows the Metamask menu,
    where we can toggle between available Ethereum networks, including the Mainnet
    and various public test networks. With Metamask, we can also attach our browser
    to an Ethereum node running on the local computer or specify a URL to an arbitrary
    JSON-RPC node API. In this way, we can access, for example, private or consortium
    networks with the Ethereum DLT.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端Web应用程序在浏览器中运行。除了执行客户端应用程序逻辑外，浏览器必须包含一个密钥钱包。钱包使得管理区块链密钥和身份成为可能。它可以是浏览器的一个组成部分（例如，Brave[^(22)](footnotes.xhtml#fn_22)）或浏览器扩展。MetaMask[^(23)](footnotes.xhtml#fn_23)
    是以太坊网络中流行的钱包扩展。图2.10[#b_9783110681130-002_fig_010]展示了MetaMask菜单，我们可以在这里切换可用的以太坊网络，包括主网和各种公共测试网络。使用MetaMask，我们还可以将浏览器连接到本地计算机上运行的以太坊节点，或者指定一个URL到任意的JSON-RPC节点API。这样，我们可以访问，例如，具有以太坊分布式账本技术的私人或联盟网络。
- en: '![](../graphic/converted/b_9783110681130-002_fig_010.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![](../graphic/converted/b_9783110681130-002_fig_010.jpg)'
- en: 'Fig. 2.10: Metamask wallet extension in a Web browser.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 'Fig. 2.10: 在Web浏览器中的MetaMask钱包扩展。'
- en: A common convention in the Ethereum Web application ecosystem is for key management
    software to expose their API via a JavaScript object in the Web page. The EIP
    1193[^(24)](footnotes.xhtml#fn_24) formalizes an Ethereum Provider API to promote
    wallet interoperability. The API is designed to be minimal, event-driven, and
    agnostic of connectivity and RPC protocols. Its functionality can be extended
    by defining new RPC methods and message event types.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊Web应用程序生态系统中的一个常见约定是，密钥管理软件通过在Web页面中的JavaScript对象暴露其API。EIP 1193[^(24)](footnotes.xhtml#fn_24)
    正式化了一个以太坊提供者API，以促进钱包互操作性。该API被设计为最小化、事件驱动且与连接性和RPC协议无关。其功能可以通过定义新的RPC方法和消息事件类型来扩展。
- en: In the client-side application, developers apply client libraries for BC node
    API interactions, for example, Web3.js[^(25)](footnotes.xhtml#fn_25) for Ethereum
    Web applications, and create their application-specific programming logic. Web3.js
    is a collection of libraries that allows us to interact with a local or remote
    Ethereum node using HTTP, IPC, or WebSocket.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端应用程序中，开发者会应用客户端库来处理BC节点API交互，例如，对于以太坊Web应用程序使用Web3.js[^(25)](footnotes.xhtml#fn_25)，并创建他们特定的应用程序编程逻辑。Web3.js是一组库，允许我们使用HTTP、IPC或WebSocket与本地或远程以太坊节点进行交互。
- en: In this way, we can use all the available Web-interface technologies (HTML5,
    CSS, and JavaScript) or frontend frameworks to create rich, interactive, and modern
    Web user interfaces that utilize blockchain features. These user interfaces interact
    with live blockchain networks.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们可以利用所有的Web界面技术（HTML5、CSS和JavaScript）或前端框架来创建丰富、互动且现代化的Web用户界面，并利用区块链特性。这些用户界面与实时的区块链网络进行交互。
- en: 2.5.1.2 Web-server or embedded application parts
  id: totrans-275
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.5.1.2 Web服务器或嵌入式应用程序部分
- en: We must arrange the blockchain key management differently, if the software running
    in a server or an IoT device needs to interact with a blockchain node API. No
    human will toggle among the available blockchain networks or provide the wallet-access
    authorization credentials. Still, we might need a key store in such an application.
    Still, we usually set the DL network and the account information only during the
    initial configuration of the server-side application.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行在服务器或IoT设备上的软件需要与区块链节点API交互，我们必须为区块链密钥管理安排不同的方式。没有人会在不同的区块链网络之间切换，或者提供钱包访问授权凭据。尽管如此，在这样一个应用程序中我们可能仍需要一个密钥库。尽管如此，我们通常只在服务器端应用程序的初始配置中设置DL网络和账户信息。
- en: On the other hand, the interactions with the BC node API are very similar to
    the ones in client-side Web applications. If we develop, for example, a Node.js
    backend application or IoT device software, we include the same Web3.js library
    (see [Section 2.5.1.1](#b_9783110681130-002_s_002_s_005_s_001_s_001)) for Ethereum
    Web applications. Off-chain application development for Ethereum is not limited
    to JavaScript. Web3.py[^(26)](footnotes.xhtml#fn_26) is a Python library for interacting
    with Ethereum. Originally, it was derived from Web3.js but has since evolved toward
    the needs of Python developers.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，与BC节点API的交互与客户端Web应用程序中的交互非常相似。例如，如果我们开发一个Node.js后端应用程序或IoT设备软件，我们包含相同的Web3.js库（参见[第2.5.1.1节](#b_9783110681130-002_s_002_s_005_s_001_s_001)）用于以太坊Web应用程序。以太坊的离线应用程序开发不仅限于JavaScript。Web3.py[^(26)](footnotes.xhtml#fn_26)
    是一个用于与以太坊交互的Python库。最初，它是从Web3.js派生出来的，但此后已经演变为满足Python开发者的需求。
- en: 2.5.1.3 Mobile applications
  id: totrans-278
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.5.1.3 移动应用程序
- en: A very similar approach is taken in mobile platforms, too. There are mobile
    Web browsers and mobile browser wallet plug-ins available. Metamask, for example,
    runs on Android and iOS, too. This facilitates access to the same Web-based blockchain
    application as for the desktop browsers.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动平台上也采取了非常相似的方法。也有移动Web浏览器和移动浏览器钱包插件可用。例如，MetaMask也运行在Android和iOS上。这使得可以访问基于Web的区块链应用程序，就像桌面浏览器一样。
- en: Web3j.io[^(27)](footnotes.xhtml#fn_27) is a lightweight, reactive, type-safe
    library for Java, Android, Kotlin, and Scala, if we develop mobile applications
    that do not rely on browser functionality.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们开发不依赖于浏览器功能的移动应用程序，Web3j.io[^(27)](footnotes.xhtml#fn_27) 是一个轻量级、反应式、类型安全的库，适用于Java、Android、Kotlin和Scala。
- en: 2.5.2 Distributed ledger node APIs
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.5.2 分布式账本节点API
- en: Blockchain node APIs range from pure REST APIs (e.g., Hyperledger Fabric) to
    JSON-RPC (e.g., Ethereum) with the usual connectivity methods including HTTP,
    WebSocket, and IPC. Not all of them are necessarily present in all DLTs or even
    in different node implementations for the same DL network. Approaches also differ
    in the set of features provided through the API. But they commonly offer information
    about the node client, blockchain network, blocks, and transactions, provide account
    management, and enable the creation and submission of new transactions.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链节点API从纯粹的REST API（例如，Hyperledger Fabric）到JSON-RPC（例如，Ethereum），常见的连接方法包括HTTP、WebSocket和IPC。并非所有它们都必然存在于所有DLT中，甚至存在于同一DL网络的不同节点实现中。提供通过API的功能集也各不相同。但它们通常提供有关节点客户端、区块链网络、区块和交易的信息，提供账户管理，并允许创建和提交新交易。
- en: 2.5.2.1 Ethereum JSON-RPC API
  id: totrans-283
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.5.2.1 以太坊JSON-RPC API
- en: Ethereum JSON-RPC API[^(28)](footnotes.xhtml#fn_28) is the API for Ethereum
    node implementations. Not all the implementations assure the same feature set.
    In [Tab. 2.4](#b_9783110681130-002_tab_004), we provide a brief comparison of
    connectivity methods in some of the dominant nodes. The combination of JSON-RPC
    and HTTP is common for all of them. IPC and WebSockets are supported only in some
    cases. Suppose we design a decentralized application, which specifically relies
    on, for example, a WebSocket connection, we must account for the possibility that
    not all network nodes will be configured for DL network access or that adaptations
    will be needed to migrate from one blockchain network to another.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊JSON-RPC API[^(28)](footnotes.xhtml#fn_28) 是用于以太坊节点实现的API。并非所有实现都保证具有相同的功能集。在[表2.4](#b_9783110681130-002_tab_004)中，我们提供了一些主导节点连接方法的基本比较。它们的组合JSON-RPC和HTTP是共同的。IPC和WebSockets仅在某些情况下得到支持。假设我们设计一个去中心化应用程序，该程序特别依赖于例如WebSocket连接，我们必须考虑到不是所有的网络节点都将配置为DL网络访问的可能性，或者需要进行适配以从一条区块链网络迁移到另一条。
- en: Tab. 2.4:JSON-RPC support in various Ethereum node implementations.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 表2.4：各种以太坊节点实现中的JSON-RPC支持。
- en: '|  | Cpp-ETH | Go-ETH | Py-ETH | Parity | HL Besu |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '|  | Cpp-ETH | Go-ETH | Py-ETH | Parity | HL Besu |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| **JSON-RPC 1.0** | + |  |  |  |  |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| **JSON-RPC 1.0** | + |  |  |  |  |'
- en: '| **JSON-RPC 2.0** | + | + | + | + | + |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| **JSON-RPC 2.0** | + | + | + | + | + |'
- en: '| **HTTP** | + | + | + | + | + |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| **HTTP** | + | + | + | + | + |'
- en: '| **IPC** | + | + |  | + |  |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| **IPC** | + | + |  | + |  |'
- en: '| **WebSocket** |  | + |  | + | + |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| **WebSocket** |  | + |  | + | + |'
- en: Ethereum JSON-RPC API has a single endpoint, for example, [http://localhost:8545](http://localhost:8545).
    The API method, along with the corresponding parameters, is embedded in a JSON
    structure submitted to this endpoint. The Ethereum JSON-RPC API enables selecting
    features and gives detailed information about network status, including number
    and details about the connected peers. Account management returns a list of addresses
    owned by the client. These accounts must be enabled when we start the node. The
    API provides detailed information about ledger synchronization, including block
    and transaction details. We can create, sign and send new transactions to the
    network. We could set and manage event filters used to track interactions with
    smart contracts in the network through the API, or manage the mining if it was
    enabled in the node.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: Ethereum JSON-RPC API具有单个端点，例如，[http://localhost:8545](http://localhost:8545)。API方法以及相应的参数嵌入到提交到这个端点的JSON结构中。Ethereum
    JSON-RPC API允许选择特性并详细提供网络状态信息，包括连接对等点的数量和详细信息。账户管理返回客户端拥有的地址列表。这些账户在启动节点时必须启用。API提供了关于账本同步的详细信息，包括区块和交易详情。我们可以创建、签名并发送新交易到网络。如果我们启用了节点，可以通过API设置和管理事件过滤器，跟踪网络中与智能合约的交互，或者管理挖矿。
- en: 2.5.2.2 Hyperledger Fabric REST API
  id: totrans-294
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.5.2.2 Hyperledger Fabric REST API
- en: Hyperledger Fabric nodes facilitate a RESTful API service. The CoreAPI[^(29)](footnotes.xhtml#fn_29)
    is composed of several endpoints, which reflect the APIs functionality. We select
    the appropriate HTTP method to choose between creating, reading, and deleting
    the selected resources.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric节点提供RESTful API服务。CoreAPI[^(29)](footnotes.xhtml#fn_29)由几个端点组成，反映了API的功能。我们选择适当的HTTP方法来选择创建、读取和删除选定资源。
- en: The root endpoints are /block, /chain, /chaincode, /network, /registrar, and/transactions.
    We use /block API to retrieve the contents of various blocks from the blockchain
    and the /chain API for the current state of the network. The /chaincode endpoint
    is used to deploy, invoke, and query a target chaincode, that is, the Hyperledger
    Fabric smart contracts. It implements the JSON RPC 2.0 specification and must
    have the required fields supplied within the payload. The /network gives information
    about the network of peer nodes comprising the blockchain network. As the HLF
    networks are permissioned, the /registrar manages end-user registrations. We can
    use the /transactions/{UUID} endpoint to retrieve an individual transaction matching
    the UUID from the blockchain.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 根端点包括/block、/chain、/chaincode、/network、/registrar和/transactions。我们使用/block API从区块链获取各种块的内容，使用/chain
    API获取网络的当前状态。/chaincode端点用于部署、调用和查询目标链码，即Hyperledger Fabric智能合约。它实现了JSON RPC 2.0规范，必须在有效负载中提供所需字段。/network提供了构成区块链网络的对等节点网络信息。由于HLF网络是受权限控制的，/registrar管理终端用户注册。我们可以使用/transactions/{UUID}端点从区块链检索与UUID匹配的单个交易。
- en: 2.5.2.3 Hyperledger Sawtooth REST API
  id: totrans-297
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.5.2.3 Hyperledger Sawtooth REST API
- en: Hyperledger Sawtooth API[^(30)](footnotes.xhtml#fn_30) also relies on the proven
    RESTful service approach. It systematically utilizes HTTP status codes to provide
    detailed feedback about the execution of a particular API call.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Sawtooth API[^(30)](footnotes.xhtml#fn_30)也依赖于经过验证的RESTful服务方法。它系统地使用HTTP状态码提供关于特定API调用执行的详细反馈。
- en: 2.6 Distributed and support services
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.6 分布式和支持服务
- en: Several services extend the functions of the core DLT and its on-chain logic
    in smart contracts. These services are not mandatory for DL network and DApp operation
    but make it easier, provide more control, and facilitate architectural refinements,
    welcome by the users.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 一些服务扩展了核心分布式账本技术（DLT）及其智能合约中的链上逻辑功能。这些服务对于分布式网络和DApp运行不是强制性的，但使操作变得更容易，提供更多控制，并促进架构优化，受到用户的欢迎。
- en: Decentralized blockchain storage facilitates large quantities of data that would
    be unsuitable or impractical for the storage limitations of a regular blockchain.
    Name services add an additional layer of addressing or naming in DLT. They abstract
    the immutable DL network addresses and enable user-friendly naming. These names
    can be remapped to new DL network addresses if, for example, a smart contract
    address has changed. For smart contracts to interact with off-chain external data
    sources, special trusted gateways called oracles are needed. Moreover, chain explorers
    help us examine and analyze the content of the distributed ledger in a live blockchain
    network. They aggregate and display data from network nodes in a human-readable
    and user-friendly way.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 去中心化的区块链存储可以处理大量数据，这些数据不适合或不适合常规区块链的存储限制。名称服务在分布式账本技术（DLT）中增加了额外的寻址或命名层。它们抽象了不可变的DL网络地址，并使地址对用户友好。如果智能合约地址发生变化，这些名称可以重新映射到新的DL网络地址。为了让智能合约与链下外部数据源互动，需要特殊的可信网关，称为预言机。此外，链浏览器帮助我们检查和分析在活区块链网络中的分布式账本内容。它们以人类可读和用户友好的方式聚合并显示来自网络节点的数据。
- en: 2.6.1 DL-based storage
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.6.1 基于DL的存储
- en: The core application of blockchain technologies, a distributed ledger, is just
    distributed, safe, and trustworthy data storage. As we discussed, this has many
    different uses in a variety of applications. However, many other applications
    require bulk data storage or file storage. This data cannot be written directly
    to the blockchain because it would greatly inflate the size of the ledger itself,
    hurting the performance of the chain in the long term.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链技术的核心应用之一，分布式账本，仅仅是分布式、安全、可信赖的数据存储。正如我们讨论的，这在各种应用中有许多不同的用途。然而，许多其他应用需要大量数据存储或文件存储。这些数据不能直接写入区块链，因为这将大大增加账本本身的体积，长期来看会伤害链的性能。
- en: There are several distributed blockchain-based storage solutions available,
    each with its characteristics [43]. Some core concepts are shared between them.
    These concepts are storage methods, replication, and incentives for hosts. Data
    is stored in a very similar way. Each file is split up into small pieces called
    shards. Each shard is encrypted before being stored on a machine that is part
    of the storage network (not the actual blockchain network). Only the locations
    and hashes of these shards are then stored on the blockchain network. Having relatively
    small and uniform pieces of data also helps improve storage and transmission efficiency.
    The machines that these shards are stored on eventually have many shards of data
    of identical size.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有几种基于分布式区块链的存储解决方案可供选择，每个都有其特点[43]。它们之间有一些核心概念是共享的。这些概念包括存储方法、复制和对主机的激励。数据的存储方式非常相似。每个文件都被分割成小的片段，称为碎片。在存储在存储网络（不是实际区块链网络）的一台机器上之前，每个碎片都进行加密。然后，只将这些碎片的存储位置和散列值存储在区块链网络上。数据相对较小且均匀，也有助于提高存储和传输效率。最终，存储这些碎片的机器上有许多大小相同的碎片数据。
- en: Another shared concept is data replication. The data needs to be protected in
    the case of network failures. This means all shards need to be replicated across
    several machines. The exact number of replicas varies, but 3 is, generally, the
    minimum used. Since the shards do not have an easily identifiable connection between
    them, there must be a mechanism to ensure that the data is sufficiently replicated
    across the network.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个共有的概念是数据复制。在网络故障的情况下，需要保护数据。这意味着所有碎片需要在多台机器之间进行复制。复制的确切数量因技术而异，但通常3是使用的最小值。由于碎片之间没有容易识别的联系，必须有一种机制确保数据在网络上得到充分复制。
- en: In traditional cloud storage infrastructure, files are stored with a company
    that can charge for the services provided. Public distributed systems are composed
    of many different small hosts and have no single entity to carry out actions like
    issuing invoices. Therefore, each distributed data storage system needs to have
    a way of rewarding the hosts of files. This varies from technology to technology,
    but some examples reward the owners with tokens or cryptocurrency that have value
    or give them more power to vote on the system.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的云存储基础设施中，文件是存储在可以提供服务收费的公司那里。公共分布式系统由许多不同的小型主机组成，没有单一实体来执行发行发票等行动。因此，每个分布式数据存储系统都需要有一种奖励文件主的方法。这因技术而异，但一些示例通过代币或具有价值的加密货币奖励主人，或者给他们更多在系统上投票的权力。
- en: Swarm[^(31)](footnotes.xhtml#fn_31) is Ethereum’s answer to blockchain-based
    storage and is designed to work in the Web3 ecosystem. Shards (called chunks in
    Swarm) of files are stored across multiple Swarm nodes, with a manifest stored
    in the main Ethereum blockchain network. Swarm nodes are just Ethereum nodes with
    an extra enabled mode of operation. They keep shards of files and make sure the
    shards are securely stored and accessible.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: Swarm[^(31)](footnotes.xhtml#fn_31) 是以太坊对基于区块链的存储的回应，并旨在与Web3生态系统一起工作。文件的分片（在Swarm中称为块）存储在多个Swarm节点上，而清单存储在以太坊主网络区块链上。Swarm节点只是启用了额外操作模式的以太坊节点。它们保留文件的片段并确保片段安全地存储和可访问。
- en: Files in the system can never actually be changed or deleted by the user. Instead,
    the user uploads a new file and changes the ENS reference to point to the new
    file. Swarm uses Ethereum’s cryptocurrency to charge users for storage and reward
    hosts.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 系统中的文件实际上永远无法被用户更改或删除。相反，用户上传新文件并更改ENS引用以指向新文件。Swarm使用以太坊的加密货币向用户收费并奖励主机。
- en: IPFS[^(32)](footnotes.xhtml#fn_32) or Interplanetary File System is a more general
    distributed file system. It can be used together with various blockchain networks
    or can be even standalone. To access IPFS, a user must install an IPFS client.
    Once installed, users and applications can interact with IPFS with HTTP requests
    sent to this client. Protocol Labs, the organization behind IPFS, is also working
    on Filecoin, designed to be the incentivization layer, providing nodes with an
    economic incentive to host data reliably.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: IPFS[^(32)](footnotes.xhtml#fn_32) 或星际文件系统是一个更通用的分布式文件系统。它可以与各种区块链网络一起使用，甚至可以独立使用。要访问IPFS，用户必须安装一个IPFS客户端。安装后，用户和应用程序可以通过发送HTTP请求与IPFS进行交互。IPFS背后的组织协议实验室还在开发Filecoin，旨在成为激励层，为可靠地托管数据提供经济激励。
- en: Storj[^(33)](footnotes.xhtml#fn_33) is designed to look and perform like object
    storage from traditional cloud providers, but with a decentralized backend. Applications
    generally interact with it via its S3-compatible API. It uses its blockchain-based
    system with STORJ tokens as an incentivization method.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: Storj[^(33)](footnotes.xhtml#fn_33) 设计得看起来和表现起来像传统云提供商的对象存储，但拥有去中心化的后端。应用程序通常通过其与S3兼容的API进行交互。它使用基于区块链的系统，以STORJ代币作为激励方法。
- en: 2.6.2 Oracles
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.6.2 预言机
- en: The deterministic smart contract code is executed in a blockchain virtual machine.
    The execution is isolated from external, real-world environments, and the contract
    state is maintained and determined by actors inside the blockchain systems [44].
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 确定性的智能合约代码在区块链虚拟机中执行。执行与外部、现实世界环境隔离，合约状态由区块链系统内部的行为者维护和确定[44]。
- en: Despite the decentralized and trustless architectures of the blockchain systems,
    smart contracts on their own cannot access data from the external world. Oracles
    are needed to integrate smart contracts with the real world, if the non-deterministic
    smart contract code requires external information to make decisions. The real
    world, in this case, implies external software, hardware, or human actors and
    inputs they are providing to be used in the on-chain application parts. Software
    resources can be, for example, Web APIs from a weather data provider or real-time
    or historic price-pairs for financial applications. Hardware resources could be
    an IoT sensor device, contributing sensory inputs, or physical device identifiers,
    for example, RFID tag values, for a supply chain or a manufacturing management
    DApp. Human actors can provide inputs in the form of an answer to questions, their
    voting decisions, and the like.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管区块链系统的去中心化和无需信任的架构，智能合约本身无法访问来自外部世界的数据。如果非确定性的智能合约代码需要外部信息来做出决策，那么就需要预言机将智能合约与现实世界相结合。在这里，现实世界指的是外部软件、硬件或人类行为者及其为链上应用部分提供的输入。软件资源可以是例如天气数据提供商的Web
    API或金融应用的实时或历史价格对。硬件资源可能是一个IoT传感器设备，提供感知输入，或者是物理设备标识符，例如，供应链或制造管理DApp的RFID标签值。人类行为者可以通过回答问题、他们的投票决策等方式提供输入。
- en: Oracles collect and provide data feeds and input to smart contracts. On the
    blockchain, oracles are represented by smart contracts that serve data requests
    from other smart contracts. Oracles assure data attestation for these diverse
    off-chain sources and bring external data into the blockchain system in a trusted,
    verifiable way.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 预言机收集并给智能合约提供数据馈送和输入。在区块链上，预言机由服务其他智能合约数据请求的智能合约表示。预言机为这些多样的链下来源保证数据证实，并以可信、可验证的方式将外部数据带入区块链系统。
- en: '[Figure 2.11](#b_9783110681130-002_fig_011) depicts the high-level oracle architecture.
    Decentralized application (see [Section 2.2](#b_9783110681130-002_s_002_s_002))
    comprises a blockchain network with a smart contract execution environment, blockchain-aware
    user interfaces, and DApp smart contracts. Oracle is an intermediary between the
    smart contract environment and external resources. It can request data from external
    sources, receive external data feeds, or keep historical records data values.
    It assures the validity of these data and serves it to the DApp smart contracts
    when needed.'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 图[2.11](#b_9783110681130-002_fig_011)展示了高级预言机架构。去中心化应用程序（参见[第2.2节](#b_9783110681130-002_s_002_s_002)）包括一个具有智能合约执行环境的区块链网络、区块链感知用户界面以及DApp智能合约。预言机是智能合约环境与外部资源之间的中介。它可以从外部来源请求数据，接收外部数据馈送，或保持历史记录数据值。它保证这些数据的有效性，并在需要时将其提供给DApp智能合约。
- en: '![](../graphic/converted/b_9783110681130-002_fig_011.jpg)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![](../graphic/converted/b_9783110681130-002_fig_011.jpg)'
- en: 'Fig. 2.11: High-level oracle architecture.'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.11：高级预言机架构。
- en: There are two key trust models available to verify and validate the external
    data. In the centralized oracle trust model, only one node is used by the oracle
    solution to get data into a smart contract. Therefore, this node needs to be trusted.
    This model is appropriate for data in the external world that cannot be independently
    validated by multiple distributed parties, for instance, because the data has
    restricted access or is transient sensor data. Examples of centralized validations
    in oracles are, authenticity proofs (TLSNotary) for software oracles and trusted
    execution environments (TEE) for hardware oracles. The alternative is the decentralized
    oracle trust model. Here, the methods such as decentralized reputation, voting,
    or consensus-based decisions assure a common agreement about the external data
    source. Both models are used in practical oracle implementations to meet the distinguishing
    features of various external sources.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 存在两种关键的信任模型可用于验证和确认外部数据。在集中式预言机信任模型中，预言机解决方案仅通过一个节点将数据输入智能合约。因此，这个节点需要被信任。这种模型适用于外部世界中的数据，这些数据不能被多个分布式方独立验证，例如，数据访问受限或为短暂传感器数据的情况。集中式验证的例子有，软件预言机的真实性证明（TLSNotary）和硬件预言机的可信执行环境（TEE）。另一种是去中心化预言机信任模型。在这里，去中心化声誉、投票或基于共识的决策确保了对外部数据源的共同协议。这两种模型都用于实际预言机实现，以满足各种外部来源的区别特征。
- en: In any case, oracles are off-chain architecture components that could be points
    of failure in whole blockchain-based systems. Even if the DL network and the on-chain
    smart contract application are highly reliable and trustworthy, there is always
    a risk of oracles providing corrupt, malicious, or inaccurate data. Oracle security
    is, therefore, an emerging research area. Several oracle solutions have been proposed
    and implemented.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何情况下，预言机都是基于区块链系统的链下架构组件，可能是整个系统中的故障点。即使分布式账本网络和链上智能合约应用非常可靠和值得信赖，预言机提供不正确、恶意或腐败数据的风险总是存在。因此，预言机安全是一个新兴的研究领域。已经提出了许多预言机解决方案并得到实施。
- en: Provable[^(34)](footnotes.xhtml#fn_34) is a blockchain agnostic oracle service
    for smart contracts and blockchain applications. It has been integrated with platforms
    like Ethereum, Rootstock, R3 Corda, Hyperledger Fabric, and EOS. It provides feeds
    to smart contracts from sources that include arbitrary URLs (any webpage or HTTP
    API endpoint), random results coming from external TEE compliant hardware, computation
    results from the Wolfram Alpha computational engine, or file content on the IPFS
    network. External data is delivered in a certified process, where authenticity
    proofs give transparency to the execution, and external audits verify that Provable
    code does what it should do.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: Provable[^(34)](footnotes.xhtml#fn_34)是一个适用于智能合约和区块链应用的区块链中立预言服务。它已经与以太坊、Rootstock、R3
    Corda、Hyperledger Fabric和EOS等平台集成。它从包括任意URL（任何网页或HTTP API端点）、来自外部TEE兼容硬件的随机结果、Wolfram
    Alpha计算引擎的计算结果，或IPFS网络上的文件内容等来源为智能合约提供数据。外部数据通过一个经过认证的过程进行交付，其中真实性证明提供了执行的透明度，外部审计验证Provable代码是否按预期执行。
- en: To implement the Provable service, DApp developers and the users of such applications
    do not have to trust Provable. It acts as an untrusted intermediary. Optionally,
    a request to Provable can specify authenticity proof. Data providers do not have
    to modify their services to be compatible with blockchain protocols. Through Provable,
    smart contracts can access data from the existing Web sites or APIs.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现Provable服务，DApp开发者和此类应用的用户不必信任Provable。它作为一个不可信的第三方中介。可选地，向Provable发起的请求可以指定真实性证明。数据提供商不必修改其服务以与区块链协议兼容。通过Provable，智能合约可以访问来自现有网站或API的数据。
- en: Town Crier[^(35)](footnotes.xhtml#fn_35) system leverages trusted hardware (Intel
    SGX) to provide a strong guarantee that data comes from an existing, trustworthy
    source. Town Crier (TC) obtains data from target websites specified in queries
    from application contracts and uses SGX to achieve its authenticity. If we trust
    SGX, data delivered by TC from a website to an application contract is guaranteed
    to be free from tampering. If we can trust the execution environment, we can trust
    that data delivered by TC from a website to an application smart contract is free
    from tampering.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: Town Crier[^(35)](footnotes.xhtml#fn_35)系统利用可信硬件（Intel SGX）来提供数据来自一个现有、值得信赖来源的强有力保证。Town
    Crier（TC）从应用合约中指定的目标网站上获取数据，并使用SGX来实现其真实性。如果我们信任SGX，那么从TC从一个网站到应用合约传递的数据保证没有遭到篡改。如果我们能信任执行环境，我们就可以信任TC从一个网站到应用智能合约传递的数据没有遭到篡改。
- en: Augur[^(36)](footnotes.xhtml#fn_36) is a P2P protocol for blockchain-based prediction
    markets, in which users receive payouts when they predict a winning outcome. The
    technology is predominantly used for betting applications. However, Augur acts
    as a decentralized oracle,[^(37)](footnotes.xhtml#fn_37) too. After the betting
    event has occurred, the outcome of the event is determined by Augur’s oracle.
    Results are determined by Augur’s oracle, which consists of profit-motivated reporters
    who report the actual, real-world outcome of the event. Reporters use a staking
    token (REP or reputation) to clarify disputes on outcomes of the prediction. Anyone
    who owns REP may participate in the reporting and disputing of outcomes. Users
    lock REP tokens in escrow, thereby staking them to assert the outcome of a particular
    created market. A specific incentive structure is incorporated in Augur’s platform
    that rewards reporting on correct outcomes and penalizes reporting on incorrect
    outcomes. This builds trust in the oracle data.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: Augur[^(36)](footnotes.xhtml#fn_36)是一个基于区块链的预测市场的P2P协议，用户在预测正确结果时会收到支付。这项技术主要应用于赌博应用。然而，Augur也充当去中心化的预言者[^(37)](footnotes.xhtml#fn_37)。在赌博事件发生后，事件的结果由Augur的预言者确定。结果由Augur的预言者确定，该预言者由追求利润的记者组成，他们报告事件的实际、现实世界结果。记者使用一个质押代币（REP或声誉）来澄清关于预测结果的争议。任何拥有REP的人都可以参与对特定创建市场的结果进行报告和争议。用户将REP代币锁定在托管中，从而质押它们以断言特定创建市场的结果。Augur平台内嵌有一个特定的激励结构，奖励正确结果的报告，并对错误结果的报告进行惩罚。这建立了对预言者数据的信任。
- en: Chainlink[^(38)](footnotes.xhtml#fn_38) enables smart contracts on any blockchain
    to leverage extensive off-chain resources, such as tamperproof price data, verifiable
    randomness, external APIs, and much more. Various decentralized Chainlink oracle
    networks guarantee the authenticity of external input data and the resulting output
    events. The Chainlink network, for example, provides tamper-resistant and high-quality
    price feeds, furthering the growth of DeFi.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: Chainlink[^(38)](footnotes.xhtml#fn_38) 使任何区块链上的智能合约能够利用广泛的链下资源，例如防篡改的价格数据、可验证的随机性、外部
    API 等等。各种去中心化的 Chainlink 预言机网络保证了外部输入数据及其产生的输出事件的真实性。例如，Chainlink 网络提供防篡改且高质量的价格Feed，进一步促进了
    DeFi 的发展。
- en: 2.6.3 Name services
  id: totrans-325
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.6.3 名称服务
- en: Given the immutable nature of blockchain technologies, accounts, data, and code
    cannot be changed or deleted. This means that whenever developers want to update
    a smart contract on a blockchain or a site hosted on Ethereum Swarm, they have
    to create a new one, which, of course, has a new unique identifier, that is, the
    Ethereum address. On the user side, the latest versions of a website or smart
    contract need to be always available at the same name, and this is preferred to
    be human-readable. Traditional systems use DNS to solve this issue, binding human-readable
    names to IP addresses and simplifying back-end migrations, load balancing, and
    geographical optimizations.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于区块链技术的不可变性质，账户、数据和代码无法更改或删除。这意味着每当开发者想要在区块链上更新智能合约或托管在以太坊 Swarm 上的网站时，他们都必须创建一个新的合约，当然，这个合约有一个新的唯一标识符，即以太坊地址。从用户的角度来看，网站或智能合约的最新版本需要始终以相同的名称可用，而且最好是可读的。传统系统使用
    DNS 来解决这个问题，将人类可读的名称绑定到 IP 地址上，简化后端迁移、负载均衡和地理优化。
- en: Ethereum Name Service (ENS) fulfills many of the equivalent needs present in
    the Ethereum ecosystem. It binds human-readable names to hashes like Ethereum
    addresses and Swarm file identifiers. This is a key part of making DApps more
    accessible for regular users. ENS is a system of smart contracts, each responsible
    for its own subdomain. Several top-level smart contracts in the system (as for
    .eth and .test) that further smart contracts are registered as resolvers. A resolver
    could be registered with the .eth top-level smart contract with the name ethereum.eth,
    so any queries for it would first go to the .eth smart contract and then get directed
    to the ethereum.eth smart contract. This can be arbitrarily chained for ENS names
    like wallet.ethereum.eth. All interactions with the top-level domains in ENS are
    done strictly through the smart contracts and the methods they provide. This provides
    a high degree of transparency and trust. The cost of a .eth domain in 2021 was
    5 USD in ETH per year for 5-character names and longer, 160 USD for 4-character
    names, and 640 USD for 3-character names.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: Ethereum Name Service (ENS) 满足了以太坊生态系统中许多等效的需求。它将人类可读的名称绑定到像以太坊地址和 Swarm 文件标识符这样的散列值上。这是使
    DApps 对普通用户更加易于访问的关键部分。ENS 是一个智能合约系统，每个合约都负责自己的子域。系统中的几个顶级智能合约（如 .eth 和 .test）进一步作为解析器注册。一个解析器可以用名为
    ethereum.eth 的顶级智能合约注册，所以任何对其的查询都会首先发送到 .eth 智能合约，然后被引导到 ethereum.eth 智能合约。这可以任意地链用于像
    wallet.ethereum.eth 这样的 ENS 名称。ENS 中所有与顶级域的交互都是严格通过智能合约及其提供的方法完成的。这提供了高度的透明度和信任度。2021
    年 .eth 域名的成本为每年 5 美元的 ETH 对于 5 个或更多字符的长域名，4 个字符的域名 160 美元，3 个字符的域名 640 美元。
- en: The process of registering a name on ENS takes five days and requires multiple
    time-sensitive transactions. When we want to register a name, a public auction
    is opened instead of the name simply being purchased. The name itself is hashed,
    so only people who know the name can participate in the auction. The auction lasts
    for 72 h and is followed by a reveal phase in which bidders must reveal their
    bids. If they do not, their funds are lost. The winner must pay an amount equivalent
    to the second-highest bid on top of their bid to get the name. Losers get their
    bids back.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ENS 上注册名称的过程需要五天，并需要多次时间敏感的交易。当我们想要注册一个名称时，并不是简单地购买该名称，而是开启一个公开拍卖。名称本身被散列，所以只有知道名称的人才能参与拍卖。拍卖会持续
    72 小时，之后是揭示阶段，竞拍者必须揭示他们的出价。如果他们不这么做，他们的资金就会丢失。获胜者必须支付相当于第二高出价的金额以及自己的出价才能获得该名称。输家可以拿回他们的出价。
- en: The relation between the registry and resolvers is depicted in [Fig. 2.12](#b_9783110681130-002_fig_012).
    ENS can be queried[^(39)](footnotes.xhtml#fn_39) through the Etherscan chain explorer.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 注册表和解析器之间的关系如图[2.12](#b_9783110681130-002_fig_012)所示。可以通过Etherscan链式浏览器查询ENS[^(39)](footnotes.xhtml#fn_39)。
- en: '![](../graphic/converted/b_9783110681130-002_fig_012.jpg)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![](../graphic/converted/b_9783110681130-002_fig_012.jpg)'
- en: 'Fig. 2.12: Ethereum Name System registry and resolvers.'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.12：以太坊名称系统注册表和解析器。
- en: Apart from ENS, which names smart contracts, several DNS-like registrars are
    based on decentralized applications. These systems are completely independent
    of the traditional DNS and ICANN. Registration is managed directly by users, and
    name resolution is generally made through a browser extension. Unstoppable domains[^(40)](footnotes.xhtml#fn_40)
    manages the .crypto and .zil domains and are based on Ethereum technology. Namecoin[^(41)](footnotes.xhtml#fn_41)
    is a fork of BTC that focuses on storing and managing key-value pairs distributed
    securely. The key is a human-readable name and a value that is an address. It
    provides a DNS-like service for the .bit domain.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 除了命名智能合约的ENS，还有几个类似DNS的注册商基于去中心化应用程序。这些系统完全独立于传统的DNS和ICANN。注册是由用户直接管理，名称解析通常是通过浏览器扩展完成的。Unstoppable
    Domains[^(40)](footnotes.xhtml#fn_40) 管理.crypto和.zil域名，基于Ethereum技术。Namecoin[^(41)](footnotes.xhtml#fn_41)
    是一个专注于安全存储和管理分布式键值对的BTC分叉币。键是一个人类可读的名称和一个地址值。它为.bit域名提供了一种类似DNS的服务。
- en: 2.6.4 Chain explorers
  id: totrans-333
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.6.4 链式浏览器
- en: Chain explorers are tools used to examine and analyze the DL in a blockchain
    network. They aggregate and display data from network nodes in a human-readable
    and user-friendly way.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链网络中的链式浏览器是用来检查和分析分布式账本的工具。它们从网络节点聚合并展示数据，以一种人类可读和用户友好的方式呈现。
- en: Given the application architecture considerations associated with chain explorers,
    these are generally Web applications with separate pages for viewing assets like
    accounts, transactions, and smart contracts. They also show important network
    statistics as well as an up-to-date feed of blocks and transactions.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到链式浏览器应用程序的架构，这些通常是具有单独页面来查看账户、交易和智能合约等资产的网页应用程序。它们还显示重要的网络统计信息，以及最新的区块和交易信息。
- en: Several similar tools are often available for the same network, mainly provided
    by a trusted first party, like the network operators, or by an unconnected third
    party, like an open-source project group. This is a great example of the openness
    of public blockchain-based DL networks.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 对于同一网络，通常会有多个类似的工具可供选择，主要是由值得信赖的第一方提供，比如网络运营商，或者不相关的第三方，比如一个开源项目组。这是公共基于区块链的分布式账本网络开放性的一个很好的例子。
- en: Either way, they are useful as a second opinion into the state of the chain.
    The DApp will often provide links to these tools to give users a way to independently
    verify that the transactions did occur the way the application showed, providing
    an extra layer of trust. Since these DApps use a blockchain-based backend, chain
    explorers are, often, key in identifying and fixing issues.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 不管怎样，它们都是了解链状态的第二意见。DApp通常会提供这些工具的链接，使用户能够独立验证交易是否如应用程序显示的那样发生，提供了一层额外的信任。由于这些DApp使用基于区块链的后端，链式浏览器在识别和修复问题上是关键的。
- en: Etherscan[^(42)](footnotes.xhtml#fn_42) is the most popular chain explorer for
    Ethereum. A snapshot of the user interface is given in [Fig. 2.13](#b_9783110681130-002_fig_013).
    A similar tool called Hyperledger Explorer[^(43)](footnotes.xhtml#fn_43) also
    exists for Hyperledger Fabric.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: Etherscan[^(42)](footnotes.xhtml#fn_42) 是Ethereum最受欢迎的链式浏览器。用户界面的快照在[图2.13](#b_9783110681130-002_fig_013)中给出。一个名为Hyperledger
    Explorer[^(43)](footnotes.xhtml#fn_43)的类似工具也适用于Hyperledger Fabric。
- en: '![](../graphic/converted/b_9783110681130-002_fig_013.jpg)'
  id: totrans-339
  prefs: []
  type: TYPE_IMG
  zh: '![](../graphic/converted/b_9783110681130-002_fig_013.jpg)'
- en: 'Fig. 2.13: Etherscan – chain explorer for Ethereum.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.13：Etherscan – Ethereum的链式浏览器。
- en: 2.7 Productization of DApps
  id: totrans-341
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.7 DApps的产品化
- en: When an enterprise considers adopting decentralized technologies in digitalization
    or aims to provide new DLT products or services to the market, selecting the underlying
    DLT platform is a strategic decision. During this adoption, investments in the
    ICT infrastructure and services might occur; acquisition and training of skillful
    personnel are needed, as are considerable investments in the DApp development.
    Therefore, the enterprises seek long-term and sustainable solutions and partnerships.
    For the appropriate strategical decision, one needs to evaluate and compare particular
    DLT products or technological platforms and the entire ecosystem. The apt choice
    can lead to faster adoption of technical solutions, decreased initial development
    and long-term progression expenditures, and reduced support costs. This then results
    in technological and business advantages and the generation of new sources of
    revenue.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个企业考虑在数字化中采用去中心化技术，或者旨在向市场提供新的DLT产品或服务时，选择底层DLT平台是一个战略决策。在采用过程中，可能会发生对信息通信技术（ICT）基础设施和服务的需求投资；需要招聘和培训熟练人员，还需要对去中心化应用（DApp）开发进行大量投资。因此，企业寻求长期和可持续的解决方案和合作伙伴。为了做出适当的战略决策，需要评估和比较特定的DLT产品或技术平台以及整个生态系统。恰当的选择可以加快技术解决方案的采用，降低初始开发和长期进步支出，以及减少支持成本。这会导致技术和商业优势以及新收入来源的产生。
- en: Technological platform characteristics are, of course, vital. The characteristics
    of DL networks, for example, performance, governance, and scalability, depend
    on technical differences of the DL and details of network implementation (see
    [Section 2.3](#b_9783110681130-002_s_002_s_003)). Smart contract environments
    (see [Section 2.4](#b_9783110681130-002_s_002_s_004)) decisively define DApp design
    and functionalities. However, many additional aspects, apart from the platform,
    represent a DLT ecosystem.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，技术平台特征至关重要。例如，分布式账本网络（DL网络）的特征，如性能、治理和可扩展性，取决于DL的技术差异和网络实施的细节（参见[第2.3节](#b_9783110681130-002_s_002_s_003)）。智能合约环境（参见[第2.4节](#b_9783110681130-002_s_002_s_004)）决定DApp设计和功能。然而，除了平台之外，许多其他方面也代表了一个DLT生态系统。
- en: A set of libraries and tools is expected for the development, facilitating the
    development and testing, monitoring networks, and validating the solutions. Developers
    need documentation and efficient support, both formal and informal. Some DLT ecosystems
    provide systematic training programs and certification.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 一套库和工具是期望在开发中使用的，以促进开发和测试、监控网络，并验证解决方案。开发者需要文档和有效的支持，无论是正式的还是非正式的。一些分布式账本技术（DLT）生态系统提供了系统的培训计划和认证。
- en: A demonstrated ability to keep with a clear roadmap is a good guarantee that
    the DApp and the selected underlying DLT platform, tools, and libraries will improve,
    evolve and receive support in the future. It might also be relevant if a DLT ecosystem
    clearly anticipates steps, which make its operation green and energy-efficient.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 具备清晰路线图并跟进的能力是确保DApp和所选的底层DLT平台、工具和库将来会改进、演变并得到支持的一个良好保证。如果一个DLT生态系统明确预见了使其运营绿色和节能的步骤，这也可能是有关系的。
- en: A key decision factor should be the community gathered in the ecosystem. A successful
    ecosystem attracts and actively supports users and developers. A large, active
    community shows that the ecosystem encourages an open, collaborative culture.
    A community with a large global footprint also indicates the level of acceptance
    of the platform among users and developers. The communities should not be seen
    only as users or customers of the ecosystem but rather as the external innovators.
    This attitude proved to be successful, for example, in many open source projects.
    Therefore, some of the DLT ecosystems have clearly defined mechanisms for collaboration
    with academia and enterprises.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 一个关键的决策因素应该是生态系统中聚集的社区。一个成功的生态系统吸引并积极支持用户和开发者。一个庞大而活跃的社区表明该生态系统鼓励开放、协作的文化。拥有广泛全球足迹的社区也表明了用户和开发者对平台的接受程度。社区不应仅被视为生态系统的用户或客户，而应被视为外部的创新者。这种态度在许多开源项目中已被证明是成功的。因此，一些DLT生态系统有明确定义的与学术界和企业合作的机制。
- en: Finally, the number and scope of prominent use cases are other good indicators
    of what we can expect from a DLT ecosystem.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，突出用例的数量和范围也是我们可以期待一个DLT生态系统的另一个好指标。
- en: 2.7.1 DLT and DApp ecosystems
  id: totrans-348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.7.1 分布式账本技术（DLT）与DApp生态系统
- en: Here, we present a brief overview of some of the available DLT ecosystems. This
    is, by no means, a comprehensive study. There are many other ecosystems. Besides,
    many forks of the DLT platforms do not bring completely new and independent technological
    approaches but modify the existing protocols to achieve some improvements. Others
    might potentially bring interesting platform solutions in the future but are,
    at the moment, more at a level of concept proofing rather than business-grade
    DLT platforms. The selected ones are, in our opinion, relevant DLT ecosystems,
    which should always be considered as relevant alternatives for DLT selection.
    Bitcoin is not included in these comparisons. Despite being a DLT pioneer and
    the basis for a public DL network with the largest market capitalization cryptocurrency,
    it is not applicable for DApps.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们简要概述了某些可用的分布式账本技术生态系统。这绝不是一项全面的研究。还有许多其他生态系统。此外，许多分布式账本平台的分叉并不完全带来新的、独立的技术方法，而是修改现有协议以实现一些改进。其他人可能会在未来带来有趣的平台解决方案，但目前更多地处于概念验证阶段，而不是商业级的分布式账本平台。我们认为所选的是相关的分布式账本技术生态系统，应该始终作为选择分布式账本的相关替代方案。比特币未包含在这些比较中。尽管作为分布式账本技术的先驱和市值最大的公共分布式账本网络的基础，但它不适用于DApps。
- en: '[Table 2.5](#b_9783110681130-002_tab_005) summarizes some of the key features
    of the selected DLT ecosystems. It can serve readers as the starting point to
    match the needs of their anticipated DApp with the matching DLT.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '[表2.5](#b_9783110681130-002_tab_005)总结了所选分布式账本技术生态系统的一些关键特性。这可以为读者作为匹配预期DApp需求与相应DLT的起点。'
- en: Tab. 2.5:Comparison of selected DLT ecosystems.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: Tab. 2.5:精选的分布式账本技术生态系统比较。
- en: '|  | Ethereum | Hyperledger | Hashgraph | Corda | IOTA |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '|  | 以太坊 | 超账本 | Hashgraph |  Corda | IOTA |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| **Managed by** | The Ethereum Foundation | The Linux Foundation | Hedera
    Governing Council | R3 | IOTA Foundation |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '| **管理** | 以太坊基金会 |  Linux基金会 | Hedera治理委员会 | R3 | IOTA基金会 |'
- en: '| **Type** | Open community | Curated open community | Limited public input
    | Limited public input | Limited public input |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| **类型** | 开放社区 | 精选开放社区 | 有限公众参与 | 有限公众参与 | 有限公众参与 |'
- en: '| **Public networks** |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| **公共网络** |'
- en: '| **Cryptocurrency** | ETH | / | HBAE | / | MIOTA |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '| **加密货币** | ETH | / | HBAE | / | MIOTA |'
- en: '| **Governance** | Public | / | Centralized | Consortium | Centralized |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
  zh: '| **治理** | 公共 | / | 集中式 | 联盟 | 集中式 |'
- en: '| **Distribution** | Very high | / | Low | (not clear) | Unknown |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
  zh: '| **分布** | 非常高 | / | 低 | （不明确） | 未知 |'
- en: '| **Private networks** |'
  id: totrans-360
  prefs: []
  type: TYPE_TB
  zh: '| **私有网络** |'
- en: '| **Possible** | Yes | Yes | Yes | Yes | Yes |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
  zh: '| **可行** | 是 | 是 | 是 | 是 | 是 |'
- en: '| **DApp development** |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
  zh: '| **DApp开发** |'
- en: '| **DApp** **development** | Very good | Very good | Good | Good | Not applicable
    in v1.0 |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
  zh: '| **DApp开发** | 非常好 | 非常好 | 良好 | 良好 | v1.0不适用 |'
- en: '| **User and developer communities** |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| **用户和开发者社区** |'
- en: '| **Community** | Very large | Large | Relatively small | Financial institutions
    | Relatively small |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
  zh: '| **社区** | 非常大 | 大 | 相对较小 | 金融机构 | 相对较小 |'
- en: 2.7.1.1 Ethereum ecosystem
  id: totrans-366
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.7.1.1 以太坊生态系统
- en: Ethereum is an open-source chain-based DL ecosystem maintained by the Ethereum
    Foundation. In 2021, it continues to implement a well-thought roadmap towards
    Ethereum 2.0\. It includes important changes in DL protocols, such as moving from
    PoW to energy-efficient PoS consensus and addressing scalability problems of Ethereum
    public networks.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊是一个由以太坊基金会维护的开源链式分布式账本生态系统。2021年，它继续实施经过深思熟虑的路线图，向以太坊2.0迈进。这包括在分布式账本协议中的重要变化，如从PoW转移到节能的PoS共识，并解决以太坊公共网络的可扩展性问题。
- en: The Ethereum blockchain technology is deployed in a large and highly decentralized
    public network, called the mainnet. Anyone can add nodes, including mining nodes,
    to this network. In 2021, there were about 7,000–8,000 nodes in the mainnet. A
    major cryptocurrency is available in the Ethereum public network, making it appropriate
    for DeFi and IoT or other DApps. Private and consortium networks are possible
    with the Ethereum technology. They are often used to improve performance and privacy
    compared to the public network.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊区块链技术部署在大型、高度去中心化的公共网络上，称为主网。任何人都可以向这个网络添加节点，包括挖矿节点。2021年，主网约有7,000-8,000个节点。以太坊公共网络中有一种主要加密货币，使其适用于DeFi和IoT或其他DApps。使用以太坊技术可以实现私有和联盟网络。它们通常用于与公共网络相比提高性能和隐私。
- en: Ethereum smart contracts are generally written in Solidity, but Vyper and Flint
    are also supported. A rich set of libraries, tools, development IDEs, and security
    validation tools exist for Ethereum decentralized application development. It
    has the largest developer community. Ethereum is the most popular platform for
    DApps, including IoT DL applications, with numerous convincing use cases.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: Ethereum智能合约通常用Solidity编写，但Vyper和Flint也得到支持。对于以太坊去中心化应用开发，存在一套丰富的库、工具、开发IDE和安全验证工具。它拥有最大的开发者社区。Ethereum是DApps最受欢迎的平台，包括IoT
    DL应用，有众多令人信服的用例。
- en: 2.7.1.2 Hyperledger ecosystem
  id: totrans-370
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.7.1.2 Hyperledger生态系统
- en: The Hyperledger ecosystem represents a suite of stable open-source frameworks,
    tools, and libraries for enterprise-grade blockchain deployments. It involves
    more than 250 teams and companies and is hosted by the Linux Foundation. The work
    is organized into projects, which develop different ledger technologies, comprehensive
    tools, and supporting libraries. The maturity of projects is clearly indicated,
    as well as their codependence.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger生态系统代表了一组稳定、开源的企业级区块链部署框架、工具和库。它涉及250多个团队和公司，并由Linux Foundation托管。工作组织成项目，这些项目开发不同的账本技术、全面的工具和支持库。项目的成熟度清晰地表示出来，以及它们之间的相互依赖关系。
- en: Hyperledger’s DLs (Burrow, Fabric, Indy, Iroha, Sawtooth) primarily target private
    and consortium networks. Therefore, there are no public Hyperledger networks,
    and consequently, no public cryptocurrencies. Only the Hyperledger Besu, a Java-based
    Ethereum client implementation, can be attached to Ethereum networks. Since Hyperledger
    networks are meant to support the operations of various organizations, they are
    private or consortium-based. While multiple organizations might access the same
    ledger or even multiple ledgers having part of the data exposed to the public,
    these networks are still considered private. Different approaches to smart contract
    development are taken in HL, which depend on the selected ledger technology. Hyperledger
    supports various smart contract programming languages and engines. The most prominent
    and widely used programming languages are Solidity and Go. Extensive open-source
    documentation is available for all projects.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger的分布式账本（Burrow、Fabric、Indy、Iroha、Sawtooth）主要面向私有和联盟网络。因此，并不存在公共的Hyperledger网络，进而也没有公共的加密货币。只有Hyperledger
    Besu，一个基于Java的以太坊客户端实现，能够连接到以太坊网络。由于Hyperledger网络旨在支持各种组织的运作，所以它们是基于私有或联盟的。尽管多个组织可能访问同一个账本，甚至多个账本中的一部分数据对公众开放，但这些网络仍被视为私有的。在HL中，根据选定的账本技术，采取了不同的智能合约开发方法。Hyperledger支持各种智能合约编程语言和引擎。最突出且广泛使用的编程语言是Solidity和Go。所有项目都有广泛的开放源代码文档可供使用。
- en: Each project has its team of collaborating organizations that vary from world-renowned
    ICT companies to small teams dedicated to the Hyperledger project development.
    Prominent Hyperledger use cases include logistics projects, financial projects,
    humanitarian and philanthropic projects.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 每个项目都有其合作组织的团队，这些组织从世界知名的ICT公司到致力于Hyperledger项目开发的小团队不等。Hyperledger突出的用例包括物流项目、金融项目、人道主义和慈善项目。
- en: 2.7.1.3 Hedera Hashgraph ecosystem
  id: totrans-374
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.7.1.3 Hedera Hashgraph生态系统
- en: Hashgraph is a patented DLT maintained by the Hedera Governing Council. The
    Hedera Governing Council consists of up to 39 term-limited and highly diversified
    organizations and enterprises. They reflect up to 11 unique industries, academia,
    and non-profits, globally. Council members are committed to governing software
    changes, while bringing stability and continued decentralization to the public
    network.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: Hashgraph是一种由Hedera Governing Council维护的专利DLT。Hedera Governing Council由最多39个任期有限且高度多样化的组织和企业组成。他们代表全球多达11个独特的行业、学术界和非营利组织。理事会成员致力于管理软件变更，同时为公共网络带来稳定和持续的去中心化。
- en: The Hedera public network is built on the Hashgraph distributed consensus algorithm.
    It allows for creating or exchanging value, proving identity, or verifying and
    authenticating important data. The public cryptocurrency HBAE is available. The
    cost of a cryptocurrency transaction can remain stable and low, allowing micro-transactions
    to be economically and technologically practical on Hedera. There are ten mainnet
    network nodes. Mirror nodes are used to access Hedera services. One cannot run
    a mirror node on Hedera, but there are Hedera and community mirror nodes available,
    with APIs for Hedera services. The Hedera network is managed by the Hedera Council
    and is thus not really decentralized. Hedera smart contracts are not immutable
    as, for example, in Ethereum. They can be changed if several parties designed
    by a smart contract developer agree.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: Hedera 公共网络基于 Hashgraph 分布式共识算法构建。它允许创建或交换价值、证明身份或验证和认证重要数据。公共加密货币 HBAE 可用。加密货币交易的费用可以保持稳定和低廉，使微交易在
    Hedera 上从经济和技术上变得可行。有十个主网网络节点。镜像节点用于访问 Hedera 服务。一个人不能在 Hedera 上运行镜像节点，但可以使用 Hedera
    和社区镜像节点，并具有 Hedera 服务的 API。Hedera 网络由 Hedera 理事会管理，因此并不是真正去中心化的。Hedera 智能合约与例如以太坊中的智能合约不同，不是不可变的。如果智能合约开发者设计的几方同意，它们可以被更改。
- en: From the application developers’ point of view, Hedera can be seen as a consortium-based
    service, exposing decentralized transaction capabilities through APIs rather than
    a truly decentralized ecosystem.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 从应用程序开发者的角度来看，Hedera 可以被视为一个基于财团的服务的集合，通过 API 暴露去中心化交易能力，而不是一个真正去中心化的生态系统。
- en: Prominent Hedera use cases include payments, tokenized assets, and managing
    credentials.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: Hedera 的显著用例包括支付、代币化资产和管理凭证。
- en: 2.7.1.4 Corda ecosystem
  id: totrans-379
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.7.1.4 Corba 生态系统
- en: Corda is an open-source DLT developed and maintained by the R3, a technology
    company that gained prominence in 2015 when a consortium of banks joined the initiative.
    A separate entity called the Corda Network Foundation was set up, using a not-for-profit
    legal entity type known as a Stichting to govern development and networks. This
    type is suited for governance activities and is able to act commercially, with
    limited liability but no shareholders, capital, or dividends.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 是由在 2015 年一个银行财团加入该计划时崭露头角的技术公司 R3 开发和维护的开源 DLT。一个名为 Corda Network Foundation
    的独立实体被设立，使用在治理活动和商业行为中适用的非营利法律实体类型 Stichting 来管理发展和网络。这种类型适合于治理活动，能够在有限的责任但没有股东、资本或股息的情况下进行商业行为。
- en: Corda networks are private or consortium-based. Therefore, the decentralization
    depends on a particular case. A Corda network is a permissioned, publicly available
    P2P network of nodes. Each node represents a legal entity and runs the Corda software.
    A node must obtain a certificate from the network operator to join a network.
    This certificate maps a well-known node identity to a real-world legal identity
    and the corresponding public key. There is no public cryptocurrency in (public)
    Corda networks.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: Corba 网络是私有的或基于财团模式的。因此，去中心化取决于特定案例。Corba 网络是一个受许可的、公开的 P2P 节点网络。每个节点代表一个法律实体并在运行
    Corba 软件。每个节点必须从网络运营商那里获得证书才能加入网络。该证书将众所周知的节点身份映射到现实世界的法律身份及其相应的公钥。在（公开的）Corba
    网络中没有公共加密货币。
- en: Smart contracts in Corda are agreements whose execution is both automatable
    by computer code working with human input and control, and whose rights and obligations,
    as expressed in legal prose, are legally enforceable. The smart contract code
    in Corda is written using Kotlin, and the virtual machine for contract execution
    and validation is an augmented and radically more restrictive version of the JVM.
    Rich, up-to-date, and well-structured documentation, including code examples,
    is available to the developers. A rich set of development and monitoring tools
    is available.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Corda 中，智能合约是可以通过计算机代码与人类输入和控制相结合来执行的协议，其权利和义务，如用法律散文表达，是可以通过法律强制执行的。Corda
    中的智能合约代码使用 Kotlin 编写，合约执行和验证的虚拟机是 JVM 的增强和更为严格的版本。为开发者提供了丰富、更新及时、结构良好的文档，包括代码示例。还提供了一组丰富的开发和监控工具。
- en: The Corda Enterprise is proven to meet the security, scalability, and support
    requirements of complex organizations and is now the de facto standard in financial
    services.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: Corda Enterprise 被证明能满足复杂组织的网络安全、可扩展性和支持要求，并已成为金融服务中的事实标准。
- en: 2.7.1.5 IOTA ecosystem
  id: totrans-384
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.7.1.5 IOTA 生态系统
- en: IOTA is an open-sourced DLT developed by the IOTA Foundation. The Foundation
    has announced an ambitious roadmap towards the IOTA 2.0\. It will be a challenge
    to keep with it. The roadmap envisages a new DL network protocol suite, new wallet,
    and new library suite and is a major shift compared to version 1.0\. Version 2.0
    should remove the need for (centralized) Coordinator nodes, add smart contract
    protocol, and secure messaging and disposable self-identities. IOTA plans to standardize
    the key DL protocols and has announced collaboration with IEEE and OMG.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: IOTA是由IOTA基金会开发的开源分布式账本技术。基金会宣布了通往IOTA 2.0的雄心勃勃的路线路线图。跟上它将是一个挑战。路线图设想了一套新的分布式账本网络协议、新的钱包和新的库套装，与版本1.0相比是一个重大转变。版本2.0应该消除了对（中心化的）协调员节点的需要，增加了智能合约协议，以及安全的消息传递和一次性自身份识别。IOTA计划标准化关键的分布式账本协议，并宣布与IEEE和OMG合作。
- en: In the current version 1.0 of the IOTA network, the transactions are reinforced
    when other transactions reference them. However, they only become truly valid
    when the network Coordinator, a special node operated by the IOTA Foundation,
    confirms them. Due to IOTA’s unique ledger style, it has some unique properties.
    Theoretically, the transaction throughput increases, and the latency decreases
    as the number of nodes and users increases. The IOTA ledger is distributed, but
    the network is not decentralized because of the consensus, requiring Coordinator
    nodes.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 在IOTA网络的当前版本1.0中，当其他交易引用它们时，交易会得到加强。然而，它们只有在网络协调员（由IOTA基金会运营的特殊节点）确认后，才真正有效。由于IOTA独特的账本风格，它有一些独特的属性。理论上，随着节点和用户数量的增加，交易吞吐量会增加，延迟会降低。IOTA账本是分布式的，但由于共识机制，网络并不是去中心化的，需要协调员节点。
- en: There is a public main network and a public test network. IOTA networks use
    a public cryptocurrency, MIOTA. Transactions are essentially free, but the transaction
    sender must submit proof of work.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个公共主网络和一个公共测试网络。IOTA网络使用一种公共加密货币MIOTA。交易基本上是免费的，但交易发送者必须提交工作量证明。
- en: Support for smart contracts is in the alpha stage for v2.0 but is not available
    in current v1.0, which means that IOTA can only store and transmit data but not
    process it. This makes it, for the moment, not usable for building DApps. Therefore,
    IOTA has not attracted a large developer community. Developers would appreciate
    systematic documentation and clear guidance on how to participate in the IOTA
    network. Version 2.0 promises relevant improvements but takes immense effort to
    be finalized and brought to production grade.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 对智能合约的支持在v2.0版本中处于alpha阶段，但在当前的v1.0版本中不可用，这意味着IOTA只能存储和传输数据，但不能处理它。这使得它目前无法用于构建DApps。因此，IOTA没有吸引大量的开发者社区。开发者们会欣赏系统化的文档和关于如何参与IOTA网络的明确指导。版本2.0承诺会有相关的改进，但要最终确定并达到生产级别需要巨大的努力。
- en: 2.7.2 Deploying and accessing blockchain networks
  id: totrans-389
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.7.2 部署和访问区块链网络
- en: DApps require an underlying DL network (see [Sections 2.2](#b_9783110681130-002_s_002_s_002).
    and [2.3](#b_9783110681130-002_s_002_s_003)) for their operation. This can be
    a new, dedicated private or consortium network that we customize to our needs
    and construct from scratch. Nevertheless, it could also be an existing prominent
    public network, where we would like just to attach a couple of additional nodes
    to participate in blockchain network operations.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: DApps需要一个底层分布式账本网络（参见[2.2节](#b_9783110681130-002_s_002_s_002)和[2.3节](#b_9783110681130-002_s_002_s_003)）。这可以是一个新的、专用的私有或联盟网络，我们根据需要进行定制并从头开始构建。然而，它也可以是一个现有的著名公共网络，我们只是想附加几个额外的节点来参与区块链网络操作。
- en: A scalable self-provisioned blockchain network is complex to set up and hard
    to manage. Each node operator needs to manually provision hardware, install software,
    create and manage certificates for access control, and configure networking components.
    This can be done as very basic editing of node configuration files, for example,
    the genesis file. Some manual tasks can be done instead with a CLI wizard, for
    example, Puppeth, which aids in creating a new Ethereum network. Lately, tools
    like Hyperledger Cello[^(44)](footnotes.xhtml#fn_44) – a blockchain provision
    and operation system – help use and manage blockchains more efficiently. It supports
    various infrastructures like bare-metal, virtual-machine platforms, and container
    cloud (e.g., Swarm, Kubernetes).
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可扩展的自行配置的区块链网络搭建起来复杂，管理起来困难。每个节点运营商都需要手动配置硬件、安装软件、创建和管理访问控制的证书以及配置网络组件。这可以通过对节点配置文件的基本编辑完成，例如创世文件。一些手动任务可以通过命令行界面（CLI）向导完成，例如Puppeth，它有助于创建一个新的以太坊网络。最近，像Hyperledger
    Cello[^(44)](footnotes.xhtml#fn_44) – 一个区块链配置和操作系统 – 帮助更高效地使用和管理区块链。它支持各种基础设施，如裸机、虚拟机平台和容器云（例如Swarm、Kubernetes）。
- en: Once the blockchain network is running, one needs to monitor the infrastructure
    and adapt to change, continuously. Apart from self-hosted nodes, various Blockchain-as-a-Service
    (BaaS) providers facilitate efficient blockchain network node deployment and management.
    Most of the key players in cloud service provisioning, for example, Amazon, Microsoft,
    Alibaba, and IBM, provide some form of BaaS.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦区块链网络运行起来，就需要不断监控基础设施并适应变化。除了自托管节点，各种区块链即服务（BaaS）提供商促进了区块链网络节点的高效部署和管理。大多数云服务提供商的关键参与者，例如Amazon、Microsoft、Alibaba和IBM，都提供某种形式的BaaS。
- en: The off-chain DApp parts need to access the DL network node’s APIs ([Section
    2.2](#b_9783110681130-002_s_002_s_002) and [2.4.2](#b_9783110681130-002_s_002_s_004_s_002)).
    These APIs can be exposed in the nodes under our supervision or obtained from
    a dedicated service provider, for example, Infura. The latter assures reliable
    infrastructure connecting a user to the Ethereum public network. This is essential
    for the instant operation of the machine and user interfaces in the DApps. Relying
    on hosted APIs disengages the application developers completely from the DL network
    provisioning.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 离链DApp部分需要访问DL网络节点的API（[2.2节](#b_9783110681130-002_s_002_s_002)和[2.4.2](#b_9783110681130-002_s_002_s_004_s_002)）。这些API可以在我们监督下的节点暴露或从专用服务提供商那里获得，例如Infura。后者确保了一个可靠的基础设施，将用户连接到以太坊公共网络。这对于DApp中的机器和用户界面的即时运行至关重要。依赖托管API使应用程序开发人员完全脱离了DL网络配置。
- en: The content of a public ledger can always be obtained through network nodes.
    However, this might not be the most efficient structure for queries needed in
    the advanced DL data analyses. Therefore, public datasets of historical data from
    various DL networks placed in big data platforms make the analysis more efficient.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 公共账本的内容总是可以通过网络节点获得。然而，对于先进DL数据分析所需的查询来说，这可能不是最高效的结构。因此，将各种DL网络的历史数据放置在大数据平台上的公共数据集使分析更加高效。
- en: 2.7.2.1 Blockchain-as-a-service
  id: totrans-395
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.7.2.1 区块链即服务（BaaS）
- en: BaaS provides blockchain services in the cloud or edge computing environments,
    such as node and network deployment, system monitoring, and smart contracts analysis
    and testing. BaaS implementation outsources a major technical and operational
    overhead for deploying and accessing the BC network to the cloud service provider.
    BaaS providers offer adjusted pricing and instance types optimized to fit different
    blockchain use cases.[^(45)](footnotes.xhtml#fn_45) Based on these services, the
    developers can focus on the business code to explore how to apply the blockchain
    technology more appropriately to their business scenarios, without the bother
    of having to maintain and monitor the blockchain platform [45]. BaaS is improving
    the productivity of DApp development and initiates a broad adoption of blockchain
    technologies.[^(46)](footnotes.xhtml#fn_46)
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链即服务（BaaS）在云或边缘计算环境中提供区块链服务，例如节点和网络部署、系统监控以及智能合约分析和测试。BaaS实施将部署和访问BC网络的技术和运营负担主要外包给云服务提供商。BaaS提供商提供调整后的定价和优化以适应不同区块链用例的实例类型。[^(45)](footnotes.xhtml#fn_45)基于这些服务，开发者可以专注于业务代码，探索如何更恰当地将区块链技术应用于他们的业务场景，而无需担心维护和监控区块链平台[45]。BaaS正在提高DApp开发的生产力，并促进了区块链技术的广泛采用。[^(46)](footnotes.xhtml#fn_46)
- en: '[Table 2.6](#b_9783110681130-002_tab_006) summarizes the supported DLTs of
    some of the major BaaS providers. There are two dominant technologies – Hyperledger
    (Fabric) and Quorum. This is not surprising, since both are predominantly meant
    for private or consortium-based blockchain networks. Unlike the public networks,
    these networks are newly deployed, so we have to set up and manage all the network
    nodes. Hyperledger ecosystem is described in [Section 2.7.1.2](#b_9783110681130-002_s_002_s_007_s_001_s_002).'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 2.6](#b_9783110681130-002_tab_006) 总结了一些主要 BaaS 提供商支持的分布式账本技术。主导的技术有两种——超级账本（Fabric）和
    Quorum。这并不令人惊讶，因为两者都是为了私有或基于联盟的区块链网络而设计的。与公共网络不同，这些网络是新建的，因此我们必须建立和管理所有网络节点。超级账本生态系统在[第
    2.7.1.2 节](#b_9783110681130-002_s_002_s_007_s_001_s_002)中有描述。'
- en: Tab. 2.6:Supported DLTs of some BaaS providers.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.6：一些 BaaS 提供商支持的分布式账本技术。
- en: '| BaaS providers | Supported DLT |'
  id: totrans-399
  prefs: []
  type: TYPE_TB
  zh: '| BaaS 提供者 | 支持的分布式账本技术 |'
- en: '| --- | --- |'
  id: totrans-400
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Amazon Managed Blockchain** | Ethereum, Hyperledger Fabric |'
  id: totrans-401
  prefs: []
  type: TYPE_TB
  zh: '| **亚马逊托管区块链** | 以太坊，超级账本 Fabric |'
- en: '| **IBM Blockchain Platform** | Hyperledger Fabric |'
  id: totrans-402
  prefs: []
  type: TYPE_TB
  zh: '| **IBM 区块链平台** | 超级账本 Fabric |'
- en: '| **Microsoft Azure BaaS** | Quorum^(47) |'
  id: totrans-403
  prefs: []
  type: TYPE_TB
  zh: '| **微软 Azure BaaS** | Quorum^(47) |'
- en: '| **Alibaba Cloud BaaS** | Ant, Hyperledger Fabric, Quorum |'
  id: totrans-404
  prefs: []
  type: TYPE_TB
  zh: '| **阿里云 BaaS** | 安特，超级账本 Fabric，Quorum |'
- en: '| **Oracle Blockchain Platform** | Hyperledger Fabric |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
  zh: '| **Oracle 区块链平台** | 超级账本 Fabric |'
- en: Quorum is an implementation of Ethereum tailored to permissioned enterprise
    blockchain networks. Therefore, it facilitates DApp development with Ethereum’s
    familiar tools and thus benefits from Ethereum’s ecosystem (see [Section 2.7.1.1](#b_9783110681130-002_s_002_s_007_s_001_s_001)).
    A Quorum node is derived from the public Ethereum client (Hyperledger Besu – the
    Ethereum compatible client, see [Section 2.7.1.2](#b_9783110681130-002_s_002_s_007_s_001_s_002)).
    It supports a set of additional consensus mechanisms designed with network performance
    (transaction latency and tps) in mind and enhanced with enterprise features for
    privacy.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum 是一个针对受许可的企业区块链网络的以太坊实现。因此，它使用熟悉的以太坊工具来简化 DApp 开发，并从以太坊生态系统中受益（见[第 2.7.1.1
    节](#b_9783110681130-002_s_002_s_007_s_001_s_001)）。Quorum 节点源自公共以太坊客户端（Hyperledger
    Besu —— 一个与以太坊兼容的客户端，见[第 2.7.1.2 节](#b_9783110681130-002_s_002_s_007_s_001_s_002)）。它支持一组为网络性能（交易延迟和
    TPS）设计的额外共识机制，并增加了企业特性以保障隐私。
- en: 2.7.2.1.1 Amazon Managed Blockchain
  id: totrans-407
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 2.7.2.1.1 亚马逊托管区块链
- en: Amazon Managed Blockchain[^(47)](footnotes.xhtml#fn_47) is a fully managed service
    that makes it easy to join public networks or create and manage scalable private
    networks using the popular open-source frameworks Hyperledger Fabric and Ethereum.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊托管区块链[^(47)](footnotes.xhtml#fn_47) 是一个完全托管的服务，使用流行的开源框架超级账本 Fabric 和以太坊，让加入公共网络或创建和管理可扩展的私有网络变得容易。
- en: Amazon Managed Blockchain allows us to join public networks (e.g., public Ethereum
    mainnet) or set up and manage scalable, permissioned private or consortium networks.
    The service eliminates the overhead required to create the network or join a public
    network and automatically scales up to meet the demands of thousands of applications
    running millions of transactions. Once our network is up and running, Managed
    Blockchain makes it easy to manage and maintain it. It manages authorization certificates
    and lets us easily invite new authorized members to join the network. This effectively
    transforms a private blockchain network into a consortium-based one. Managed Blockchain
    also monitors the network and automatically replaces poorly performing nodes.
    There are pre-built templates and a BaaS API available for quick node creation.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊托管区块链允许我们加入公共网络（例如，公共以太坊主网）或创建和管理可扩展的、受许可的私有或联盟网络。该服务消除了创建网络或加入公共网络所需的复杂性，并自动扩展以满足运行数百万交易的数千个应用程序的需求。一旦我们的网络运行起来，托管区块链使管理和维护变得容易。它管理授权证书，并让我们能轻松邀请新的授权成员加入网络。这有效地将私有区块链网络转变为基于联盟的网络。托管区块链还监控网络，并自动替换表现不佳的节点。还有预建的模板和
    BaaS API 可用于快速创建节点。
- en: 2.7.2.1.2 IBM blockchain platform
  id: totrans-410
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 2.7.2.1.2 IBM 区块链平台
- en: IBM is a founding member of the Linux Foundation Hyperledger Project, collaborating
    to develop Hyperledger Fabric, so the focus on Hyperledger in IBM Blockchain Platform[^(48)](footnotes.xhtml#fn_48)
    is not surprising. IBM Blockchain Platform is a commercial distribution of Hyperledger
    Fabric and comes with SLAs and full-time support.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: IBM是Linux基金会Hyperledger项目的创始成员，合作开发Hyperledger Fabric，因此IBM区块链平台对Hyperledger的关注[^(48)](footnotes.xhtml#fn_48)并不令人意外。IBM区块链平台是Hyperledger
    Fabric的商业发行版，并带有服务级别协议和全天候支持。
- en: Enterprises can connect to nodes running in any environment (on-premises, public,
    or hybrid clouds) and easily connect a single peer to multiple industry networks.
    They can deploy only the blockchain components they need (Peer, Ordering Service,
    Certificate Authority) and manage all network components through a single console,
    no matter where they are deployed. There is no vendor lock-in, so companies maintain
    complete control of our identities, ledger, and smart contracts.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 企业可以连接到在任何环境（本地、公共或混合云）中运行的节点，并轻松地将单个对等体连接到多个行业网络。它们可以部署仅需要的区块链组件（Peer、Ordering
    Service、Certificate Authority），并通过单一控制台管理所有网络组件，无论它们部署在何处。没有供应商锁定，因此公司对我们身份、账本和智能合约保持完全控制。
- en: IBM Blockchain Platform is working together with the Hedera Consensus Service
    to increase interoperability, with the latter providing public consensus while
    a private blockchain network is based on Hyperledger Fabric. The leading use cases
    based on the IBM Blockchain platform are banking and financial markets, supply
    chain, health care, insurance, media, advertising, and government.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: IBM区块链平台与Hedera共识服务合作，以提高互操作性，后者提供公共共识，而私有区块链网络基于Hyperledger Fabric。基于IBM区块链平台的领先用例包括银行和金融市场、供应链、医疗保健、保险、媒体、广告和政府。
- en: 2.7.2.1.3 Microsoft Azure BaaS
  id: totrans-414
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 2.7.2.1.3 微软Azure BaaS
- en: Microsoft Azure BaaS[^(49)](footnotes.xhtml#fn_49) lets us create and configure
    consortium blockchain infrastructure and rapidly deploy fully managed blockchain
    networks. It facilitates the Quorum ledger using the Istanbul Byzantine Fault
    Tolerance (IBFT) consensus mechanism and will eventually support multiple blockchain
    platforms like Ethereum, Hyperledger Fabric, Corda, and Chaincode.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 微软Azure BaaS[^(49)](footnotes.xhtml#fn_49)让我们能够创建和配置联盟区块链基础设施，并快速部署完全托管的区块链网络。它使用伊斯坦布尔拜占庭容错（IBFT）共识机制来简化Quorum账本，并最终支持多个区块链平台，如以太坊、Hyperledger
    Fabric、Corda和Chaincode。
- en: The service is comprised of three sets of products. Azure Blockchain Workbench
    is the foundation for building, governing and deploying fully managed blockchain
    networks and applications at scale. Azure Blockchain Service is a starting point
    for easy prototyping and simplified development with prebuilt networks and infrastructure.
    Azure Blockchain Development Kit is a comprehensive GitHub repository of developer
    blockchain content, including code samples and accelerators. Modular controls
    provide built-in governance for easy member onboarding, consortia management and
    codeless permissioning, and simplified policy enforcement. Blockchain data manager
    enables flexible, reliable, and scalable data streaming and application integration.
    In this way, users can monitor their smart contracts, react to transactions and
    events, and stream on-chain data to off-chain data stores to build the desired
    end-to-end solutions.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务由三套产品组成。Azure区块链工作台是构建、管理和部署大规模完全托管区块链网络和应用程序的基础。Azure区块链服务是简化开发和原型设计的起点，具有预建网络和基础设施。Azure区块链开发工具是一个全面的GitHub存储库，包含开发者区块链内容，包括代码示例和加速器。模块化控制提供内置治理，方便成员加入、联盟管理和无代码权限设置，简化策略执行。区块链数据管理器可实现灵活、可靠和可扩展的数据流和应用集成。这样，用户可以监控他们的智能合约，对交易和事件做出反应，并将链上数据流式传输到链下数据存储，以构建所需的端到端解决方案。
- en: 2.7.2.1.4 Alibaba Cloud BaaS
  id: totrans-417
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 2.7.2.1.4 阿里云BaaS
- en: Alibaba Cloud BaaS[^(50)](footnotes.xhtml#fn_50) supports Hyperledger Fabric,
    Ant Blockchain technologies, and Quorum. It provides out-of-the-box services,
    including enhanced administrative functions to help us build an enterprise-ready
    blockchain network environment with ease and without concerns of complex configuration.
    It includes management of the smart contracts (chaincode) in the organization
    and the business, including the period of overwriting installation, creating instances,
    and updating. The platform allows us to create consortia, invite, and approve
    the participant involved in the business to join the consortium, and manage the
    business.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 阿里云BaaS[^(50)](footnotes.xhtml#fn_50)支持Hyperledger Fabric、蚂蚁区块链技术和Quorum。它提供开箱即用的服务，包括增强的管理功能，以帮助轻松构建企业级的区块链网络环境，而无需担心复杂的配置问题。它包括管理组织内外的智能合约（链码）和企业业务，包括覆盖安装期、创建实例和更新。该平台允许我们创建联盟，邀请并批准参与业务的参与者加入联盟，并管理业务。
- en: Alibaba Cloud BaaS integrates Alibaba Cloud Internet of Things (IoT) and anti-counterfeiting
    technologies to provide blockchain solutions for product traceability. Other notable
    use cases stem from supply chain finance, data assets sharing, and digital content
    ownership.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 阿里云BaaS集成了阿里云物联网（IoT）和防伪技术，为产品追溯提供区块链解决方案。其他显著的用例源于供应链金融、数据资产共享和数字内容所有权。
- en: 2.7.2.1.5 Oracle blockchain platform
  id: totrans-420
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 2.7.2.1.5 Oracle区块链平台
- en: 'Oracle Blockchain Platform[^(51)](footnotes.xhtml#fn_51) is a preassembled
    PaaS, which includes all the dependencies required to support a blockchain network:
    computing, storage, containers, identity services, event services, and management
    services. The blockchain network console supports integrated operations.'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle区块链平台[^(51)](footnotes.xhtml#fn_51)是一个预集成的PaaS，包括支持区块链网络所需的所有依赖项：计算、存储、容器、身份服务、事件服务和管理服务。区块链网络控制台支持集成操作。
- en: It is based on the Hyperledger Fabric project from the Linux Foundation, but
    it extends the open-source version in many ways to meet the needs of enterprise
    environments. These include, for example, preassembled template-based provisioning,
    operations monitoring and zero-downtime managed patching and updates, enhanced
    security and identity management functions, and a set of HL Fabric APIs through
    REST calls for simpler transaction integration.[^(52)](footnotes.xhtml#fn_52)
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 它基于Linux基金会项目的Hyperledger Fabric，但它以多种方式扩展了开源版本，以满足企业环境的需求。这些包括，例如，预集成的基于模板的配置、操作监控和零停机管理补丁和更新、增强的安全和身份管理功能，以及通过REST调用的一套HL
    Fabric API，以简化事务集成。[^(52)](footnotes.xhtml#fn_52)
- en: Their use cases include large supply chains and trading networks, food safety,
    retail loyalty rewarding, and identity and voting applications.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的用例包括大型供应链和贸易网络、食品安全、零售忠诚度奖励以及身份和投票应用程序。
- en: 2.7.2.2 APIs interfacing public DL networks
  id: totrans-424
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.7.2.2 API接口公共分布式账本网络
- en: BaaS ([Section 2.7.2.1](#b_9783110681130-002_s_002_s_007_s_002_s_001)) enables
    node deployments and display APIs for the off-chain applications to utilize the
    blockchain services. However, BaaS is predominantly meant for private blockchain
    networks. On the other hand, many uses solely rely on public blockchains, where
    the network infrastructure is already available. In such a case, reliable remote
    node services are crucial for user experience in any blockchain-enabled mobile
    application, blockchain-compatible browsers, and plug-ins for Web applications
    or blockchain development tools. The developers of these products can completely
    eliminate the need to install, run, and manage their network nodes for a user
    to access the public network.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: BaaS ([第2.7.2.1节](#b_9783110681130-002_s_002_s_007_s_002_s_001))允许节点部署并展示API，使离线应用程序能够利用区块链服务。然而，BaaS主要适用于私有区块链网络。另一方面，许多应用完全依赖于公共区块链，那里网络基础架构已经可用。在这种情况下，可靠的远程节点服务对于任何区块链增强的移动应用程序、区块链兼容的浏览器以及Web应用程序或区块链开发工具的插件的用户体验至关重要。这些产品的开发者可以完全消除用户访问公共网络时安装、运行和管理他们网络节点的需要。
- en: Infura[^(53)](footnotes.xhtml#fn_53) focuses on instant, reliable infrastructure
    connecting us to Ethereum (mainnet and various test networks), Filecoin, and IPFS.
    Off-chain applications can connect to Ethereum and IPFS via JSON-RPC over HTTPS
    and WebSocket, where request–response times are up to 20 times faster than other
    services and self-hosted solutions. Infura network nodes are running on the latest
    network upgrades with a minimum 99.9% uptime guarantee. The service is provided
    with per request or subscription-based connections and has full-time access to
    expert support teams.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: Infura[^(53)](footnotes.xhtml#fn_53)专注于即时、可靠的基础设施，连接到以太坊（主网和各种测试网络）、Filecoin和IPFS。离线应用程序可以通过HTTPS和WebSocket上的JSON-RPC连接到以太坊和IPFS，其中请求-响应时间比其他服务和自托管解决方案快20倍。Infura网络节点运行在最新的网络升级上，保证最低99.9%的在线时间。该服务提供按请求或基于订阅的连接，并拥有全职访问专家支持团队。
- en: A dashboard gives direct insights into the app’s performance and API usage.
    This can be used to drill down into specific request methods or most active usage
    times to optimize the applications and better understand users.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板直接提供了应用程序性能和API使用的洞察。这可以用来深入具体请求方法或最活跃使用时间，以优化应用程序，更好地了解用户。
- en: Many leading blockchain-enabled products rely on Infura’s services, for example,
    mobile applications (Coinbase Wallet), blockchain-compatible browsers and plug-ins
    (Brave, Metamask, Opera), and blockchain tools (OpenZeppelin, Truffle).
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 许多领先的区块链赋能产品依赖Infura的服务，例如，移动应用（Coinbase Wallet）、与区块链兼容的浏览器和插件（Brave、Metamask、Opera）以及区块链工具（OpenZeppelin、Truffle）。
- en: Infura is dominant, but a few alternate providers are active in this service
    area. ZMOK[^(54)](footnotes.xhtml#fn_54) provides fast Ethereum nodes accessible
    through JSON-RPC API. A similar service for the Ethereum network and the IPFS
    is available with the Cloudflare Distributed Web Gateway.[^(55)](footnotes.xhtml#fn_55)
    QuikNode[^(56)](footnotes.xhtml#fn_56) serves elastic APIs and dedicated nodes.
    Apart from Ethereum, their API endpoints include BSC, Optimism, Bitcoin, xDAI,
    and Polygon. Pocket Network[^(57)](footnotes.xhtml#fn_57) is an inclusive relay
    network for API requests to major blockchains with a crypto-economic model. The
    requests are routed to available nodes pseudo-randomly, making them very redundant.
    Compared to single-service providers, Pocket Network is organized as a decentralized
    autonomous organization (DAO). Its mission is to ensure the sustainable decentralization
    of blockchain infrastructure.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: Infura占据主导地位，但在这个服务领域还有一些替代提供商。ZMOK[^(54)](footnotes.xhtml#fn_54)通过JSON-RPC
    API提供快速以太坊节点。为以太坊网络和IPFS提供类似服务的还有Cloudflare分布式网络网关。[^(55)](footnotes.xhtml#fn_55)
    QuikNode[^(56)](footnotes.xhtml#fn_56)提供弹性API和专用节点。除了以太坊，他们的API端点还包括BSC、Optimism、比特币、xDAI和Polygon。Pocket
    Network[^(57)](footnotes.xhtml#fn_57)是一个包容性的 relay 网络，用于向主要区块链的API请求，具有加密经济模型。请求被伪随机地路由到可用节点，使它们非常冗余。与单一服务提供商相比，Pocket
    Network组织为去中心化自治组织（DAO）。其使命是确保区块链基础设施的持续去中心化。
- en: 2.7.2.3 Public datasets for advanced blockchain data analytics
  id: totrans-430
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.7.2.3 高级区块链数据分析的公共数据集
- en: Ledger data derived directly from the network nodes might not have the most
    efficient structure for queries needed in the advanced BC data analyses, utilization
    of big data, machine learning, or business intelligence mechanisms. For this purpose,
    Google BigQuery, for example, provides public datasets to access the historical
    data from various BC networks, including access to the on-chain transaction data
    and entire block history. The data is, therefore, immediately available in all
    the analysis methods and visualization tools in BigQuery. In 2021, there were
    nearly 50 public datasets[^(58)](footnotes.xhtml#fn_58) available in the Google
    Cloud Platform marketplace. They include most key public blockchain networks,
    for example, BTC, Ethereum, Ethereum Classic, Litecoin, Dash, Zcash, Monero, Cardano,
    NEO, etc. This data can be immediately applied in Google Cloud’s AI services and
    data analytics or simply structured and queried with SQL.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 直接从网络节点获取的账本数据可能不适用于高级区块链（BC）数据分析所需的查询，大数据利用，机器学习或商业智能机制。为此，例如Google BigQuery提供了公共数据集，以访问来自各种BC网络的历史数据，包括对链上交易数据和整个区块历史的访问。因此，数据可以立即在BigQuery的所有分析方法和可视化工具中使用。2021年，Google
    Cloud Platform市场上有近50个公共数据集[^(58)](footnotes.xhtml#fn_58)。它们包括大多数关键的公共区块链网络，例如BTC、以太坊、以太坊经典、莱特币、达世币、门罗币、卡尔达诺、NEO等。这些数据可以立即应用于Google
    Cloud的AI服务及数据分析，或者简单地用SQL进行结构化和查询。
- en: The analysis can, for instance, reveal the most popular collectibles (ERC721
    contracts) or tokens (ERC20 contracts), find zero-fee transactions, calculate
    balances of blockchain addresses, and so on.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，分析可以揭示最受欢迎的收藏品（ERC721合约）或代币（ERC20合约），找到零费用交易，计算区块链地址的余额等等。
