- en: Chapter 8\. Deploying Hyperledger Fabric on the Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章。在云上部署 Hyperledger Fabric
- en: In [Chapter 7](ch07.xhtml#building_supply_chain_dapps_with_hyperl), you built
    an end-to-end blockchain supply chain with Hyperledger Fabric by applying all
    the concepts from [Part III](part03.xhtml#developing_smart_contracts_with_hyperle),
    where you learned how to build, deploy, test, invoke, and maintain Fabric smart
    contracts. This chapter builds on top of what you learned in Parts III and IV;
    you’ll put all of your Fabric skills into practice by creating and deploying Fabric
    applications on the Amazon, IBM, and Oracle cloud platforms. As such, this chapter
    covers highly practical steps for those interested in moving their Fabric application
    from the pilot step to production.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 7 章](ch07.xhtml#building_supply_chain_dapps_with_hyperl)中，您通过应用[第 III 部分](part03.xhtml#developing_smart_contracts_with_hyperle)中的所有概念来构建了一个端到端的
    Hyperledger Fabric 区块链供应链，您学会了如何构建、部署、测试、调用和维护 Fabric 智能合约。本章建立在您在第 III 部分和第 IV
    部分学到的基础上；您将把所有的 Fabric 技能付诸实践，通过在 Amazon、IBM 和 Oracle 云平台上创建和部署 Fabric 应用程序来实现这一目标。因此，本章涵盖了对于那些希望将其
    Fabric 应用程序从试点阶段转移到生产阶段的人来说非常实用的步骤。
- en: 'This chapter will help you achieve the following practical goals:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助您实现以下实际目标：
- en: Setting up Amazon Managed Blockchain for Fabric applications
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Amazon 托管的 Fabric 应用程序的区块链
- en: Creating and deploying a Fabric application on AWS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 AWS 上创建和部署 Fabric 应用程序
- en: Reviewing the IBM Cloud platform for building blockchain applications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾用于构建区块链应用程序的 IBM 云平台
- en: Creating and joining a Fabric network on the IBM Cloud platform
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 IBM 云平台上创建和加入 Fabric 网络
- en: Reviewing Oracle Blockchain Platform and its offerings
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾 Oracle 区块链平台及其提供的服务
- en: Building and running a Fabric application on Oracle Blockchain Platform
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Oracle 区块链平台上构建和运行 Fabric 应用程序
- en: We start by reviewing features of AWS, followed by IBM and Oracle cloud platforms,
    which are essential for building and deploying Hyperledger Fabric. Each platform
    has its own requirements, considerations, and features necessary for successfully
    deploying and managing Fabric applications. We follow a concise yet holistic approach,
    covering practical steps from the ground up—from setting up a network through
    installing and instantiating the chaincode.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先回顾了 AWS 的特性，然后是 IBM 和 Oracle 云平台，这对于构建和部署 Hyperledger Fabric 是必不可少的。每个平台都有自己的要求、考虑因素和必要特性，以成功部署和管理
    Fabric 应用程序。我们采用了简洁而全面的方法，从零开始覆盖了实践步骤——从建立网络到安装和实例化链代码。
- en: Deploying Hyperledger Fabric on Amazon Blockchain Services
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Amazon 区块链服务上部署 Hyperledger Fabric
- en: Amazon offers a variety of cloud services for deploying and managing both centralized
    and decentralized applications. For the sake of brevity, this section focuses
    on only the Amazon Managed Blockchain service and how to deploy and manage Hyperledger
    Fabric on it. Amazon Web Services (AWS) has an active community with practitioners
    ranging from system architects to developers and engineers.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊提供了各种云服务，用于部署和管理集中式和分布式应用程序。为了简洁起见，本节仅关注亚马逊托管区块链服务及其上如何部署和管理 Hyperledger
    Fabric。亚马逊网络服务（AWS）拥有一支积极的社区，从系统架构师到开发人员和工程师都有。
- en: 'AWS provides the following three ways to create blockchain services:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 提供以下三种方式创建区块链服务：
- en: Amazon Quantum Ledger Database (QLDB)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊量子分类账数据库（QLDB）
- en: This fully managed NoSQL (Semi-SQL and Semi-NoSQL) immutable and transparent
    ledger database is powered by blockchain. The append-only ledger data provides
    a cryptographically verifiable transaction history with an audit log owned by
    a central trusted authority. AWS QLDB automatically scales when applications need
    more capacity for read and write limits.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个完全托管的半 SQL 和半 NoSQL 不可变和透明的分类账数据库由区块链驱动。追加模式的分类账数据提供了一个由中央可信任机构拥有的具有密码学验证的交易历史和审计日志。AWS
    QLDB 在应用程序需要更多读写限制容量时会自动扩展。
- en: AWS Blockchain Templates
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 区块链模板
- en: 'These templates provide you with a fast and easy way to create and deploy blockchain
    projects on the network, and test applications on the AWS platform. Building users’
    preset blockchain frameworks through AWS CloudFormation stacks helps developers
    focus on building blockchain applications and spend less time setting up a blockchain
    network. AWS currently provides two types of blockchain templates: Ethereum and
    Hyperledger Fabric.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模板为您提供了在网络上快速、简单创建和部署区块链项目，并在 AWS 平台上测试应用程序的方式。通过 AWS CloudFormation 栈构建用户预设的区块链框架，帮助开发人员专注于构建区块链应用程序，减少设置区块链网络的时间。AWS
    目前提供两种类型的区块链模板：以太坊和 Hyperledger Fabric。
- en: AWS CloudFormation loads AWS Blockchain Templates and deploys the blockchain
    framework as containers on an Amazon Elastic Container Service (ECS) cluster or
    directly on an Amazon Elastic Compute Cloud (EC2) instance running Docker. The
    network runs inside your own Amazon virtual private cloud (VPC). A VPC is a virtual
    datacenter in the cloud that provides a completely separate environment to host
    your machine in a custom way. A subnet is a logical subdivision of an IP network;
    a network inside a VPC subnet makes networks more efficient. With VPC subnets
    and network ACLs in Amazon, you can control how clients can access the AWS blockchain
    network. You can define a permission policy using AWS Identity and Access Management
    (IAM) to restrict which resources an Amazon ECS cluster or Amazon EC2 instance
    can access.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CloudFormation 加载 AWS 区块链模板，并将区块链框架部署为 Amazon 弹性容器服务（ECS）集群上的容器或直接部署在运行
    Docker 的 Amazon 弹性计算云（EC2）实例上。该网络运行在您自己的 Amazon 虚拟专用云（VPC）内。VPC 是云中的虚拟数据中心，提供完全隔离的环境，以自定义方式托管您的机器。子网是
    IP 网络的逻辑子分区；VPC 子网使网络更加高效。通过 Amazon 的 VPC 子网和网络 ACL，您可以控制客户端如何访问 AWS 区块链网络。您可以使用
    AWS 身份和访问管理（IAM）定义权限策略，限制 Amazon ECS 集群或 Amazon EC2 实例可以访问的资源。
- en: Amazon Managed Blockchain
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon 托管区块链
- en: This fully managed service provides a production-level blockchain network. It
    can easily be scaled to support thousands of applications running millions of
    transactions. You can use AWS Management Console, the AWS Command Line Interface
    (CLI), or the Managed Blockchain software development kit (SDK) to set up a managed
    blockchain application quickly.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这项完全托管的服务提供了生产级别的区块链网络。它可以轻松扩展，支持运行数千个应用程序并处理数百万笔交易。您可以使用 AWS 管理控制台、AWS 命令行界面（CLI）或托管区块链软件开发工具包（SDK）快速设置托管区块链应用。
- en: Managed Blockchain manages your certificates; the participants can transact
    with peer nodes without having to know or trust each other.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 托管区块链管理您的证书；参与者可以与对等节点交易，而无需了解或信任彼此。
- en: This section covers how to use Amazon Managed Blockchain to create and work
    with a Hyperledger Fabric blockchain network.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon 托管区块链服务用于创建和操作超级账本（Hyperledger Fabric）区块链网络。
- en: Set Up Amazon Managed Blockchain with Prerequisites
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作：设置 Amazon 托管区块链
- en: We can set up Amazon Managed Blockchain in multiple ways, as we discussed earlier.
    While setting up a Managed Blockchain application, we will use AWS Management
    Console to create a blockchain network and a member. Then, we’ll create a VPC
    and security policy, and assign the policy to IAM roles. We will also create and
    configure an EC2 instance to run AWS CLI to interact with Amazon Managed Blockchain.
    The EC2 instance will be the primary node that runs the blockchain network. With
    AWS Management Console, we will create a peer node to join the network. Finally,
    we will create a channel in the network and then install and run chaincode.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以以多种方式设置Amazon托管的区块链，如前面讨论的那样。在设置托管的区块链应用程序时，我们将使用AWS管理控制台创建区块链网络和成员。然后，我们将创建一个VPC和安全策略，并将策略分配给IAM角色。我们还将创建和配置一个EC2实例来运行AWS
    CLI以与Amazon托管的区块链进行交互。EC2实例将是运行区块链网络的主节点。通过AWS管理控制台，我们将创建一个对等节点以加入网络。最后，我们将在网络中创建一个通道，然后安装和运行链代码。
- en: 'To deploy Fabric on AWS Managed Blockchain, you need to have already created
    the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要在AWS托管的区块链上部署Fabric，您需要已经创建了以下内容：
- en: An AWS account.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个AWS账户。
- en: VPC and subnet—name it `**HF-VPC**`.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VPC和子网-将其命名为`**HF-VPC**`。
- en: The AWS EC2 security group—name it `**HF-SG**`. The Hyperledger Fabric client
    Amazon EC2 instance must have an inbound rule that allows SSH traffic (port 22)
    from trusted SSH clients.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS EC2安全组-将其命名为`**HF-SG**`。Hyperledger Fabric客户端Amazon EC2实例必须具有允许来自受信任SSH客户端的SSH流量（端口22）的入站规则。
- en: An EC2 instance (as a bastion host); we use Amazon Linux 2 AMI (HVM) as an Amazon
    Machine Image (AMI), a `t2.micro` AWS free usage instance type for this setup.
    Name the EC2 instance `**HF-Node**` by entering the tag. Associate `HF-SG` with
    the `HF-Node` EC2 instance.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为堡垒主机的EC2实例；我们使用Amazon Linux 2 AMI（HVM）作为Amazon Machine Image（AMI），使用`t2.micro`
    AWS免费使用的实例类型进行此设置。通过输入标记，将EC2实例命名为`**HF-Node**`。将`HF-SG`与`HF-Node` EC2实例关联。
- en: Elastic IP addresses allocated to the `HF-Node` EC2 instance.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配给`HF-Node` EC2实例的弹性IP地址。
- en: 'AWS IAM policy with the following policy statement—name it `**HyperledgerFabricClientAccess**`,
    replace `*youraccountId*` with your actual AWS account ID, and replace `*us-east-1*`
    with the appropriate Region. Then attach to an IAM role for an `HF-Node` EC2 instance:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有以下策略语句的AWS IAM策略-将其命名为`**HyperledgerFabricClientAccess**`，将`*youraccountId*`替换为您的实际AWS账户ID，并将`*us-east-1*`替换为适当的区域。然后附加到`HF-Node`
    EC2实例的IAM角色：
- en: '[PRE0]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: An AWS IAM role called `**ServiceRoleForHyperledgerFabricClient**`. Select the
    previously created policy, *ServiceRoleForHyperledgerFabricClient*, and attach
    this role with the `HF-Node` EC2 instance.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名为`**ServiceRoleForHyperledgerFabricClient**`的AWS IAM角色。选择先前创建的策略*ServiceRoleForHyperledgerFabricClient*，并将此角色与`HF-Node`
    EC2实例关联。
- en: We now have completed all of the prerequisites for setting up the Hyperledger
    Fabric network using the AWS Managed Blockchain console. We will start to set
    up a blockchain network in the next section.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了使用AWS托管的区块链控制台设置Hyperledger Fabric网络的所有先决条件。我们将在下一节开始设置区块链网络。
- en: Set Up the Hyperledger Fabric Network
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Hyperledger Fabric 网络
- en: 'In this section, we will start to set up our HF network and run a Fabric application
    on it. Currently, AWS Managed Blockchain supports only version 1.4 of Hyperledger
    Fabric. Follow these steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将开始设置我们的 HF 网络并在其上运行一个 Fabric 应用程序。目前，AWS Managed Blockchain 仅支持 Hyperledger
    Fabric 的 1.4 版本。请按照以下步骤操作：
- en: Open the Managed Blockchain console and click “Create a network” and then enter
    a network name. You can keep most of the default settings.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Managed Blockchain 控制台，点击“创建网络”，然后输入一个网络名称。你可以保持大部分默认设置。
- en: On the Create Member page, create a member by entering `**member1**` as a member
    name.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建成员页面上，通过输入 `**member1**` 作为成员名称来创建一个成员。
- en: Under Hyperledger Fabric Certificate Authority (CA) configuration, specify an
    Admin username and password to be used by the administrator on the Hyperledger
    Fabric CA.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Hyperledger Fabric 证书颁发机构（CA）配置下，指定管理员在 Hyperledger Fabric CA 上使用的管理员用户名和密码。
- en: Create the network and members.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建网络和成员。
- en: Creating your first network will take several minutes. Once the network is created,
    you will see its summary. AWS Managed Blockchain creates a network and assigns
    a network ID and a member ID to our `member1`. Write down these two important
    pieces of information, as we will use them in a later setup step.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建你的第一个网络需要几分钟的时间。一旦网络创建完成，你将看到它的摘要。AWS Managed Blockchain 创建了一个网络并为我们的 `member1`
    分配了一个网络 ID 和一个成员 ID。记下这两个重要的信息，因为我们将在后续的设置步骤中使用它们。
- en: We need to associate `HF-VPC`, which we created earlier, with the first network
    by creating a VPC endpoint. On the first network summary screen, click “Create
    VPC endpoint” and then select `HF-VPC` as the VPC. Select the `HF-SG EC2` security
    group to create the VPC endpoint.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要通过创建一个 VPC 端点将我们之前创建的 `HF-VPC` 关联到第一个网络上。在第一个网络摘要屏幕上，点击“创建 VPC 端点”，然后选择
    `HF-VPC` 作为 VPC。选择 `HF-SG EC2` 安全组来创建 VPC 端点。
- en: Set Up the Hyperledger Fabric Client
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Hyperledger Fabric 客户端
- en: Now we will install our Fabric client and join a peer node. But first, we need
    to set up all necessary packages and samples in the `HF-Node` EC2 client node
    so you can run a Managed Blockchain command to build our Fabric network and chaincode.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将安装我们的 Fabric 客户端并加入一个对等节点。但首先，我们需要在 `HF-Node` EC2 客户端节点上设置所有必要的包和示例，这样你就可以运行
    Managed Blockchain 命令来构建我们的 Fabric 网络和链码。
- en: 'You’ll start by using `ssh` to access the `HF-Node` EC2 instance. You can use
    this command to connect to your instance, or you can use another SSH client tool
    to log in:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你将首先使用 `ssh` 访问 `HF-Node` EC2 实例。你可以使用此命令连接到你的实例，或者你可以使用另一个 SSH 客户端工具登录：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once you access your EC2 instance, check the AWS version by entering `**AWS
    –version**`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你访问到你的 EC2 实例，通过输入 `**AWS –version**` 来检查 AWS 版本。
- en: This EC2 instance must have version 1.16.149 or later of the AWS CLI installed.
    Earlier versions of the AWS CLI do not have the Managed Blockchain command. We
    assume you have installed Go, Docker, Docker Compose, and the other utilities
    that are prerequisites for installing and using Hyperledger tools (refer to [Chapter 4](ch04.xhtml#smart_contract_development)).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此 EC2 实例必须安装了 AWS CLI 的版本为 1.16.149 或更高版本。AWS CLI 的早期版本不包含 Managed Blockchain
    命令。我们假设您已安装了用于安装和使用 Hyperledger 工具的先决条件，如 Go、Docker、Docker Compose 和其他实用程序（参见[第四章](ch04.xhtml#smart_contract_development)）。
- en: Let’s set up the Hyperledger Fabric CA client next. In this step, you will verify
    that you can connect to the Hyperledger Fabric CA by using the VPC endpoint you
    configured previously. You’ll then install the Hyperledger Fabric CA client, which
    issues certificates to administrators and network peers.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来让我们设置 Hyperledger Fabric CA 客户端。在此步骤中，您将通过使用之前配置的 VPC 端点验证您是否可以连接到 Hyperledger
    Fabric CA。然后，您将安装 Hyperledger Fabric CA 客户端，该客户端向管理员和网络对等方发放证书。
- en: 'To verify connectivity to the Hyperledger Fabric CA, you need the `CAEndpoint`.
    Run the following AWS `managedblockchain get-member` command by passing the `network-id`
    and `member-id`. You can get these two IDs from the AWS Managed Blockchain console:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证与 Hyperledger Fabric CA 的连接，请获取 `CAEndpoint`。通过传递 `network-id` 和 `member-id`
    运行以下 AWS `managedblockchain get-member` 命令。您可以从 AWS 托管的 Blockchain 控制台获取这两个 ID：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Use cURL or Telnet to verify that the `CAEndpoint` resolves. Replace the `CAEndpoint`
    with the `CAEndpoint` returned by the `get-member` command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 cURL 或 Telnet 验证 `CAEndpoint` 是否能解析。将 `CAEndpoint` 替换为 `get-member` 命令返回的
    `CAEndpoint`：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The command should return output similar to the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 命令应返回类似以下内容的输出：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Alternatively, you can connect to the Fabric CA by using Telnet:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用 Telnet 连接到 Fabric CA：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The command should return output similar to the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 命令应返回类似以下内容的输出：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now that you have verified that you can connect to the Hyperledger Fabric CA,
    run the following commands to configure the CA client:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经验证了可以连接到 Hyperledger Fabric CA，运行以下命令配置 CA 客户端：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Clone the Samples Repository
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克隆样本库
- en: 'We will use *fabric-samples* as an example HF application in AWS Managed Blockchain.
    Let’s clone the Git code in the EC2 instance by running the following command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 AWS 托管的 Blockchain 中使用 *fabric-samples* 作为 HF 应用的示例。通过在 EC2 实例上运行以下命令来克隆
    Git 代码：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Enroll an administrative user
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注册管理员用户
- en: 'Because only admin identities can install, instantiate, and query chaincode
    in Fabric, we need to register and issue certificate files for an administrative
    user. We first need to create the certificate file by running the following command
    to copy the *managedblockchain-tls-chain.pem* file to the */home/ec2-user* directory.
    Replace `*us-east-1*` with the AWS Region you are using:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因为只有管理员身份可以在 Fabric 中安装、实例化和查询链码，所以我们需要为管理员用户注册并发放证书文件。我们首先需要通过运行以下命令将 *managedblockchain-tls-chain.pem*
    文件复制到 */home/ec2-user* 目录中创建证书文件。将 `*us-east-1*` 替换为您正在使用的 AWS 区域：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Run the following command to test that you correctly copied the contents to
    the file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令来测试您是否已正确将内容复制到文件中：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The command should return the contents of the certificate in a human-readable
    format. Once the certificate file is created, we need to enroll the member administrator.
    Run the `fabric-ca-client enroll` command to enroll the member administrator by
    providing the CA endpoint, administrator profile, and certificate file:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令应返回证书内容的人类可读格式。一旦证书文件创建完成，我们需要注册成员管理员。通过运行 `fabric-ca-client enroll` 命令来注册成员管理员，需要提供
    CA 端点、管理员配置文件和证书文件：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In Fabric, the MSP identifies which root CAs and intermediate CAs are permitted
    to define the members of a trust domain. In our setup, we will store certificates
    for the administrator’s MSP in */home/ec2-user/admin-msp*. Let’s copy certificates
    for the MSP by running this command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Fabric 中，MSP 标识允许定义信任域成员的根 CA 和中间 CA。在我们的设置中，我们将通过运行此命令为管理员的 MSP 复制证书，存储在
    */home/ec2-user/admin-msp*。
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Create a peer node in your membership
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在您的成员身份中创建一个对等节点。
- en: Fabric peer nodes perform the validation and updates to the ledger data. They
    keep a local copy of the shared ledger. A typical Fabric network will have more
    than one peer node in the network. In our setup, we will create a peer node in
    the HF network.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric 对等节点执行账本数据的验证和更新。它们保留共享账本的本地副本。一个典型的 Fabric 网络将在网络中有多个对等节点。在我们的设置中，我们将在
    HF 网络中创建一个对等节点。
- en: To create a peer node using AWS Management Console, open the Managed Blockchain
    console at [*https://console.aws.amazon.com/managedblockchain/*](https://console.aws.amazon.com/managedblockchain/).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 AWS 管理控制台创建对等节点，请在 Managed Blockchain 控制台上打开 [*https://console.aws.amazon.com/managedblockchain/*](https://console.aws.amazon.com/managedblockchain/)。
- en: Choose Networks, select the network from the list, and then choose View Details.
    Next, select a Member from the list and click “Create peer node.” Choose configuration
    parameters for your peer node. We can leave all default settings in this setup.
    Then choose “Create peer node.” Once a peer node is created, you can get all peer
    node information from the member page by clicking the peer node ID. We will use
    a peer endpoint in our later setup.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 Networks，从列表中选择网络，然后选择查看详细信息。接下来，从列表中选择一个成员，然后点击“创建对等节点”。选择对等节点的配置参数。在这个设置中，我们可以保留所有默认设置。然后选择“创建对等节点”。一旦对等节点创建完成，您可以通过点击对等节点
    ID 在成员页面获取所有对等节点信息。我们将在后续设置中使用一个对等节点端点。
- en: Run the Hyperledger Fabric Application
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行 Hyperledger Fabric 应用程序。
- en: After bringing up peer nodes in the previous step, in this section we will finally
    start to configure and run the Hyperledger Fabric application. Let’s first start
    the Hyperledger Fabric CLI.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一步中启动对等节点后，在本节中我们将最终开始配置和运行 Hyperledger Fabric 应用程序。让我们首先启动 Hyperledger Fabric
    CLI。
- en: Configure and run Docker Compose to start the Hyperledger Fabric CLI
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置和运行 Docker Compose 以启动 Hyperledger Fabric CLI。
- en: 'Create a Docker Compose configuration file *docker-compose-cli.yaml* in the
    */home/ec2-user* directory:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在 */home/ec2-user* 目录下创建一个名为 *docker-compose-cli.yaml* 的 Docker Compose 配置文件：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You will configure this file to run the Hyperledger Fabric CLI. Let’s open
    *docker-compose-cli.yaml*. Copy the following contents into the file and replace
    the `MyMemberID` and `*MyPeerNodeEndpoint*` values. You can find the member ID
    and peer node ID from AWS Managed Blockchain console’s Member page:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你将配置这个文件以运行 Hyperledger Fabric CLI。让我们打开 *docker-compose-cli.yaml*。将以下内容复制到文件中，并替换
    `MyMemberID` 和 `*MyPeerNodeEndpoint*` 的值。你可以从 AWS 托管的区块链控制台的成员页面找到成员 ID 和对等节点
    ID：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Run `docker-compose` to start the Hyperledger Fabric CLI:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `docker-compose` 启动 Hyperledger Fabric CLI：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Once Hyperledger Fabric CLI Docker Compose is up, you can start creating the
    Hyperledger Fabric channel as usual.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Hyperledger Fabric CLI Docker Compose 启动，你就可以像往常一样开始创建 Hyperledger Fabric
    通道。
- en: Create configtx for the Hyperledger Fabric channel creation
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 Hyperledger Fabric 通道创建 configtx
- en: The *configtx.yaml* file contains details of the channel configuration. For
    more information, see [Chapter 4](ch04.xhtml#smart_contract_development).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*configtx.yaml* 文件包含通道配置的详细信息。更多信息请参阅[第 4 章](ch04.xhtml#smart_contract_development)。'
- en: Create a *configtx.yaml* file under the */home/ec2-user* directory by using
    vi.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 vi 在 */home/ec2-user* 目录下创建一个名为 *configtx.yaml* 的文件。
- en: Replace `*MemberID*` with your own member ID.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `*MemberID*` 替换为你自己的成员 ID。
- en: 'The `MSPDir` is set to the same directory location, */opt/home/admin-msp*,
    that you established using the `CORE_PEER_MSPCONFIGPATH` environment variable
    in the Docker container for the Hyperledger Fabric CLI in *docker-compose-cli.yaml*:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`MSPDir` 设置为相同的目录位置 */opt/home/admin-msp*，这个目录是你在 *docker-compose-cli.yaml*
    中为 Hyperledger Fabric CLI Docker 容器使用 `CORE_PEER_MSPCONFIGPATH` 环境变量所建立的：'
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After the configuration is completed, run this Docker command to generate the
    channel *configtx*:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完成后，运行此 Docker 命令生成通道的 *configtx*：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Set environment variables for the orderer
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 orderer 设置环境变量
- en: Set the `$ORDERER` environment variable for convenience by editing *.bash_profile*.
    Replace the `ORDERER` value with your own ordering service endpoint. You can find
    the endpoint on the Managed Blockchain console.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编辑 *.bash_profile* 设置 `$ORDERER` 环境变量以方便使用。将 `ORDERER` 值替换为你自己的排序服务端点。你可以在托管的区块链控制台上找到该端点。
- en: 'After updating *.bash_profile*, apply the changes by running the `source` command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 *.bash_profile* 后，通过运行 `source` 命令应用更改：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the next step, we will start creating the channel. Run the following command
    to read a genesis block from *channel.tx* that will create the channel:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们将开始创建通道。运行以下命令从 *channel.tx* 中读取一个创世区块，该区块将创建通道：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After the channel is created, join the peer node to the channel by running
    this Docker command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通道创建完成后，通过运行以下 Docker 命令将对等节点加入通道：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'With the successful creation of *mychannel*, we can install the sample chaincode
    in our network. Run the following command to install the example chaincode on
    the peer node:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 成功创建 *mychannel* 后，我们可以在网络中安装示例链码。运行以下命令在对等节点上安装示例链码：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now we need to instantiate the chaincode::'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要实例化链码：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'It may take a minute to get a result; you can use the following command to
    verify the instantiation result:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 获取结果可能需要一分钟；您可以使用以下命令验证实例化结果：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'At this stage, we can interact with chaincode in the HF network. Let’s start
    querying the chaincode. Run this command to query a value:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，我们可以与 HF 网络中的链码进行交互。让我们开始查询链码。运行此命令查询一个值：
- en: '[PRE24]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Since we initialized variable `a` and have set its value to `100`, the command
    should return a value of 100\. You should see a result similar to this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们初始化了变量 `a` 并将其值设置为 `100`，所以命令应该返回一个值为 `100`。您应该看到类似于以下的结果：
- en: '[PRE25]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the previous command, we instantiated and queried a value of 100\. Use the
    `invoke` command to subtract 10 from that initial value:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个命令中，我们实例化并查询了一个值为 100 的变量 `a`。使用 `invoke` 命令从初始值中减去 10：
- en: '[PRE26]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Query again using the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 重新使用以下命令查询：
- en: '[PRE27]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'It should return the new value 90, as shown in the following output:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 应返回新值 90，如以下输出所示：
- en: '[PRE28]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[This](https://www.youtube.com/watch?v=x-AjS-WuF2Q) [video](https://www.youtube.com/watch?v=x-AjS-WuF2Q)
    “Build a Blockchain Track-and-Trace Application” by Carl Youngblood provides a
    demo of setting up a Fabric network in AWS by using the Blockchain service offering.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[此](https://www.youtube.com/watch?v=x-AjS-WuF2Q) [视频](https://www.youtube.com/watch?v=x-AjS-WuF2Q)
    由 Carl Youngblood 提供的 “构建区块链溯源应用程序” 演示了如何通过使用区块链服务提供的 AWS 中搭建 Fabric 网络。'
- en: Using IBM Cloud for Blockchain Applications
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 IBM Cloud 进行区块链应用程序开发
- en: As one of the major contributors to the Hyperledger Fabric project, IBM offers
    a complete and intuitive platform, IBM Blockchain Platform, for building a Fabric
    network and deploying Fabric applications. IBM Cloud allows users to fully manage
    their deployments, certificates, and private keys. It provides a simplified UI
    that allows developers to easily deploy Fabric components into a Kubernetes/Red
    Hat OpenShift cluster.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 Hyperledger Fabric 项目的主要贡献者之一，IBM 提供了一个完整而直观的平台，IBM Blockchain Platform，用于构建
    Fabric 网络和部署 Fabric 应用程序。IBM Cloud 允许用户完全管理其部署、证书和私钥。它提供了一个简化的用户界面，允许开发人员将 Fabric
    组件轻松部署到 Kubernetes/Red Hat OpenShift 集群中。
- en: Understand the Platform Features
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解平台功能
- en: 'In a nutshell, IBM Blockchain Platform features can be divided into three areas:
    development, operation, and scalability.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，IBM Blockchain Platform 的功能可以分为三个领域：开发、运营和可伸缩性。
- en: Development
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发
- en: 'While developing Fabric applications, IBM offers a set of developer tools that
    simplifies the job of development and deployment. In particular, you can do the
    following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发 Fabric 应用程序时，IBM 提供了一套开发工具，简化了开发和部署工作。具体而言，您可以执行以下操作：
- en: Use Ansible Playbooks or Red Hat Marketplace to deploy networks faster
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Ansible Playbooks 或 Red Hat Marketplace 更快地部署网络
- en: Go from proof of concept to production in a single environment by increasing
    Kubernetes resources
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过增加 Kubernetes 资源，将概念验证快速转化为生产环境
- en: Leverage IBM Blockchain Platform developer tools to easily code
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用 IBM 区块链平台开发人员工具轻松编码
- en: Operation
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操作
- en: 'While running a Fabric application on IBM Cloud, you can take advantage of
    these great features:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IBM 云上运行 Fabric 应用时，您可以利用以下优秀功能：
- en: Ability to deploy peers to multiple channels on multiple clouds, or to permit
    other members to join your consortium.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够将对等点部署到多个通道上的多个云，或允许其他成员加入您的联盟。
- en: The Unified Codebase feature allows you to run your components on any environment
    backed by IBM Cloud and third-party, public clouds.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 统一的代码库功能允许您在任何由 IBM 云和第三方公共云支持的环境上运行您的组件。
- en: The Dynamic Signature Collection feature facilitates collaborative governance
    over channel configurations.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态签名集合功能促进了对通道配置的协作治理。
- en: Removal of Docker-in-Docker for chaincodes makes chaincode pods run more securely,
    without peers requesting privileged access.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了 Docker-in-Docker 对链码的影响，使链码 Pod 更安全地运行，而不需要对等方请求特权访问。
- en: Ability to easily upgrade nodes running on older Fabric versions to the latest
    version of Fabric. Upon upgrade, the capabilities of your channels and network
    will also be increased accordingly.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够轻松将运行在较旧 Fabric 版本上的节点升级到最新版本的 Fabric。升级后，您的通道和网络的功能也将相应增加。
- en: Integration of Logging and Monitoring tools leveraging IBM Cloud services like
    IBM Log Analysis; IBM Cloud Monitoring is helpful for managing the blockchain
    network.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成日志记录和监控工具，利用 IBM 云服务如 IBM Log Analysis；IBM Cloud 监控有助于管理区块链网络。
- en: Scalability
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可伸缩性
- en: 'As a prominent performance factor, scalability plays a vital role in the growth
    of Fabric applications. IBM Cloud gives you the following capabilities for scalability:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个显著的性能因素，可伸缩性在 Fabric 应用的增长中扮演着重要角色。IBM 云为您提供以下可伸缩性能力：
- en: Flexibility on the amount of compute power being utilized in your network by
    setting the amount of CPU, memory, and storage you wish to provision in your Kubernetes
    cluster
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过设置您希望在 Kubernetes 集群中预配的 CPU、内存和存储的数量，灵活地利用网络中被利用的计算能力
- en: Ability to adjust the amount of resources being utilized in your network by
    easily scaling up and down the resources in your Kubernetes cluster
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过轻松扩展 Kubernetes 集群中的资源来调整网络中被利用的资源量
- en: Ability to replicate your Kubernetes deployment among multiple regions or zones
    to ensure high availability of your components as well as disaster recovery
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在多个区域或区域之间复制您的 Kubernetes 部署，以确保您的组件具有高可用性以及灾难恢复能力
- en: 'Further, using the IBM Blockchain Platform console, you can easily create and
    manage blockchain applications. Specifically, once a blockchain service instance
    is provisioned on IBM Cloud, you can link it to your Kubernetes cluster, after
    which you can create and manage your blockchain components like CA, peer, and
    ordering service images through the console. However, before using the console,
    you should know that you will be responsible for the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用 IBM 区块链平台控制台，您可以轻松创建和管理区块链应用程序。具体而言，一旦在 IBM 云上预配了区块链服务实例，您就可以将其链接到您的 Kubernetes
    集群，之后您可以通过控制台创建和管理您的区块链组件，如 CA、对等体和排序服务镜像。但是，在使用控制台之前，您需要知道您将负责以下事项：
- en: Monitoring the health, security, and logging of Kubernetes clusters.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控 Kubernetes 集群的健康、安全性和日志记录。
- en: Managing and securing your certificates and private keys. IBM does not save
    your certificates in the Kubernetes cluster.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理和保护您的证书和私钥。IBM 不会在 Kubernetes 集群中保存您的证书。
- en: For an additional list of considerations or requirements for using the IBM Blockchain
    Platform, see the [IBM Cloud](https://cloud.ibm.com/docs/blockchain-multicloud?topic=blockchain-hyperledger-fabric)
    documentation.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 关于使用 IBM 区块链平台的其他注意事项或要求，请参阅[IBM 云](https://cloud.ibm.com/docs/blockchain-multicloud?topic=blockchain-hyperledger-fabric)文档。
- en: Create an IBM Cloud Account
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 IBM 云账户
- en: Before proceeding with our discussion on creating and managing a Fabric network
    on IBM Cloud, you need to create or have an IBM Cloud account. For new user registration,
    visit the IBM Cloud site and follow the instructions.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论如何在 IBM 云上创建和管理 Fabric 网络之前，您需要创建或拥有一个 IBM 云账户。对于新用户注册，请访问 IBM 云站点并按照说明操作。
- en: Once you have an IBM Cloud account, you can add IBM Blockchain Platform from
    either the IBM Cloud Catalog or the Red Hat Marketplace. See the IBM documentation
    for more details. Note that if you want to use a hardware security module (HSM)
    to generate and save the private key for your peer and orderer nodes, you should
    configure the HSM prior to deploying your platform. For more details on HSM implementation
    on IBM Cloud and other considerations, visit the IBM documentation page.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您拥有 IBM 云账户，您可以从 IBM 云目录或 Red Hat Marketplace 中添加 IBM 区块链平台。有关更多详细信息，请参阅 IBM
    文档。请注意，如果您希望使用硬件安全模块（HSM）为您的对等体和排序者节点生成和保存私钥，您应在部署平台之前配置 HSM。有关 IBM 云上的 HSM 实施和其他注意事项的更多详细信息，请访问
    IBM 文档页面。
- en: Note
  id: totrans-149
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The Storage Manage permissions are required for all users who link the service
    to the Kubernetes cluster. Just go to the dashboard, choose Manage ® Access (IAM),
    select Users, and click the user who will connect the service to the Kubernetes
    cluster. Click the Classic infrastructure tab, expand the Services part, and choose
    Storage Manage. Click Apply to give the permission to the user.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 所有链接服务到 Kubernetes 集群的用户都需要存储管理权限。只需转到仪表板，选择管理 ® 访问（IAM），选择用户，然后单击将连接服务到 Kubernetes
    集群的用户。单击经典基础设施选项卡，展开服务部分，然后选择存储管理。单击“应用”以授予用户权限。
- en: Decide the Structure of the Blockchain Network
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 决定区块链网络的结构
- en: As you know, the various parties of a business have to agree to be part of a
    blockchain network. The type of participants and transactions of the blockchain
    network plays a crucial role in deciding its structure. As a first step, you need
    to decide the number of blockchain participants, number of organizations, number
    of peers in each organization, certificate authorities, and so on as per the business
    requirements. Once the blockchain network components are finalized, you can proceed
    further to set up the network.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所知，一个企业的各方必须同意成为区块链网络的一部分。区块链网络的参与者类型和交易对其结构的决定起着至关重要的作用。作为第一步，根据业务需求，您需要确定区块链参与者的数量、组织的数量、每个组织中的对等体数量、证书颁发机构等等。一旦确定了区块链网络的组件，您就可以进一步设置网络。
- en: 'As an example, let’s say our Fabric network includes the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设我们的 Fabric 网络包括以下内容：
- en: Two CAs
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个CAs
- en: Two MSPs
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个MSPs
- en: One peer
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个对等体
- en: One orderer
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个排序方
- en: One channel that includes one peer organization and one orderer organization
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个通道，包括一个对等方组织和一个排序方组织
- en: This sample network structure is good for learning purposes, but we would need
    to add more peers and organizations for it to look like an actual blockchain network.
    The following sections will walk you through step-by-step instructions for creating
    the sample Fabric network on IBM Cloud, and then you’ll add Fabric components
    like peer, orderer, and channel to it.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例网络结构适用于学习目的，但我们需要添加更多的对等体和组织，使其看起来像一个真正的区块链网络。接下来的章节将逐步向您介绍如何在 IBM Cloud
    上创建样本 Fabric 网络，然后您将向其中添加 Fabric 组件，如对等方、排序方和通道。
- en: Create and Join the Fabric Network
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建并加入 Fabric 网络
- en: The blockchain service on IBM Cloud that allows you to set up a Fabric network
    is called IBM Blockchain Platform and is considered a blockchain-as-a-service
    system.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IBM Cloud 上允许您设置 Fabric 网络的区块链服务称为 IBM 区块链平台，被视为区块链即服务系统。
- en: Start by logging in to IBM Cloud. This will take you to the IBM Cloud dashboard,
    which lists resources (applications, storage services, clusters, etc.) created
    (if any) for your account. The list of all available services on IBM Cloud can
    be found on the Catalog tab.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 首先登录 IBM Cloud。这将带您到 IBM Cloud 仪表板，列出了您账户创建的资源（应用程序、存储服务、集群等）（如果有的话）。您可以在“目录”选项卡上找到
    IBM Cloud 上所有可用服务的列表。
- en: To create a new service instance, click the Catalog tab and search for `**Blockchain**`.
    Then, click the service tile IBM Blockchain Platform. This will redirect you to
    the blockchain service instance creation.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新的服务实例，请单击“目录”选项卡，然后搜索`**Blockchain**`。然后，单击服务瓷砖 IBM 区块链平台。这将重定向您到区块链服务实例创建。
- en: First, select a location. The location specifies the region in the various geographical
    areas like Asia-Pacific, North America, Europe, and so on. Then, select the pricing
    plan. Next, provide a service name. This can be any name you choose. After this,
    select the resource group. A resource group is a way to organize resources in
    your cloud account. The `default` resource group will be created by default in
    your cloud account. If you want to create a new resource group, choose Manage
    ® Account ® Account resources ® Resource groups ® Create.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，选择一个位置。位置指定了各种地理区域（如亚太地区、北美、欧洲等）。然后，选择定价计划。接下来，提供一个服务名称。这可以是您选择的任何名称。然后，选择资源组。资源组是组织云账户中资源的一种方式。在您的云账户中，默认将创建一个“默认”资源组。如果您想创建一个新的资源组，请选择“管理”®“账户”®“账户资源”®“资源组”®“创建”。
- en: After providing all the required values, click Create to create an instance
    of the blockchain service. This service instance acts as a placeholder for your
    Fabric network; the network has not been created yet. The service creation will
    take you to the welcome page to set up your network step by step. The welcome
    page shows you the required steps to manage your blockchain service. As you know,
    Hyperledger Fabric uses containers to build the network, so you can use either
    IBM Cloud Kubernetes cluster or Red Hat OpenShift on IBM Cloud to deploy blockchain
    network components. The next step is to create a new cluster and link the existing
    cluster to the setup network.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 提供所有必需的值后，点击“创建”以创建区块链服务的实例。此服务实例充当您的 Fabric 网络的占位符；网络尚未创建。服务创建将带您进入欢迎页面，逐步设置您的网络。欢迎页面显示了管理区块链服务所需的步骤。正如您所知，Hyperledger
    Fabric 使用容器构建网络，因此您可以使用 IBM 云 Kubernetes 集群或 Red Hat OpenShift on IBM 云来部署区块链网络组件。下一步是创建新的集群并将现有集群链接到设置网络。
- en: Make a note that if a cluster exists in your Cloud account (i.e., you have created
    a cluster already), skip this step. You do not need to create a new cluster again.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您的云账户中存在一个集群（即，您已经创建了一个集群），则跳过此步骤。您无需再次创建新的集群。
- en: If you create a new cluster on IBM Cloud through the Manage Service page, it
    lists the cluster requirements, so first refer to those and decide the appropriate
    size (number of worker nodes, vCPUs, RAM size, single zone or multizone).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您通过“管理服务”页面在 IBM 云上创建一个新的集群，它会列出集群的要求，因此首先参考这些要求并决定适当的大小（工作节点数量、虚拟 CPU、RAM
    大小、单区域或多区域）。
- en: While creating a Kubernetes/Red Hat OpenShift cluster, you will be asked to
    provide the cluster name, location, size, etc. Each has its own pricing plan.
    Once you create the cluster, setting it up will take some time. Wait until the
    cluster is completely deployed.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 Kubernetes/Red Hat OpenShift 集群时，将要求您提供集群名称、位置、大小等。每个都有自己的定价计划。创建集群后，设置集群将需要一些时间。等待直到集群完全部署。
- en: Next is to link your cluster with this blockchain service. Click that option,
    and it provides you a list of all available clusters in your account. Choose the
    cluster that you want to use for your blockchain network. It will associate the
    cluster to your blockchain service. Now you are ready to launch the service console.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是将您的集群与此区块链服务关联起来。单击该选项，它会为您提供帐户中所有可用集群的列表。选择您想要用于区块链网络的集群。它将把集群与您的区块链服务关联起来。现在，您已经准备好启动服务控制台。
- en: You can launch the IBM Blockchain Platform console by successfully linking your
    blockchain service with the cluster. It will take you to the IBM Blockchain Platform
    page, where you will start creating your actual network components.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过成功将您的区块链服务与集群关联来启动 IBM 区块链平台控制台。它会带您转到 IBM 区块链平台页面，您将在那里开始创建您的实际网络组件。
- en: Build the Blockchain Network
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建区块链网络
- en: The concept of CA, MSP, peer, orderer, organization, channel, and more have
    been explained in [Chapter 3](ch03.xhtml#hyperledger_fabric_architecture_and_com);
    refer to that chapter for more details. This section focuses on setting up the
    Fabric network on IBM Cloud, using the IBM Blockchain Platform.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: CA、MSP、节点、排序服务、组织、通道等概念已在[第三章](ch03.xhtml#hyperledger_fabric_architecture_and_com)中有所解释；请参考该章节以获取更多详情。本节重点介绍在
    IBM 云上设置 Fabric 网络，使用 IBM 区块链平台。
- en: We will detail the steps to set up the sample network—an ordering service, a
    single peer organization, and a peer on a single channel—as explained in [“Decide
    the Structure of the Blockchain Network”](#decide_the_structure_of_the_blockchain).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细介绍设置示例网络的步骤——一个排序服务、一个单个节点组织和一个单个通道，正如[“决定区块链网络的结构”](#decide_the_structure_of_the_blockchain)中所解释的那样。
- en: The IBM Blockchain Platform console provides an interface to work with nodes
    (peers, CAs, ordering service), channels, smart contracts, wallet, organizations,
    and users. Let’s get started.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: IBM 区块链平台控制台提供了一个界面，用于处理节点（节点、CA、排序服务）、通道、智能合约、钱包、组织和用户。让我们开始吧。
- en: Add a certificate authority
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加证书颁发机构
- en: To deploy peers, you first need to create their organizations. This requires
    an MSP definition of your organization, which in turn requires an organization
    admin user identity. A CA is the one that creates identities for all network participants.
    Therefore, as a first step to setting up the blockchain network, you need to create
    the CA for the organization.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署节点，您首先需要创建它们的组织。这需要您的组织的 MSP 定义，而 MSP 定义又需要组织管理员用户身份。 CA 是为所有网络参与者创建身份的实体。因此，在设置区块链网络的第一步中，您需要为组织创建
    CA。
- en: 'From the IBM Blockchain Platform console, choose Nodes ® Add Certificate Authority.
    To create a new CA, provide the following values:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 从 IBM 区块链平台控制台中，选择节点 ® 添加证书颁发机构。要创建一个新的 CA，请提供以下值：
- en: CA Display name (for example, `Org1CA`)
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CA 显示名称（例如，`Org1CA`）
- en: CA Administrator Enroll ID
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CA 管理员注册 ID
- en: CA Administrator Enroll Secret
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CA 管理员注册密码
- en: The advanced deployment options, like creating a high-available CA, multizone
    CA, and HSM are also available. Refer to IBM documentation for more details.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还提供了高级部署选项，比如创建高可用 CA、多区域 CA 和 HSM。有关更多详细信息，请参考 IBM 文档。
- en: You can use your own CA as well. If you have your own CA, you need to import
    it by using a JSON file. The CA has to fulfill certain specifications, such as
    the format of the issued certificates. You can refer to the IBM docs for specifications.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用自己的 CA。如果你有自己的 CA，你需要通过使用 JSON 文件导入它。CA 必须满足某些规范，比如发行证书的格式。你可以参考 IBM 文档了解规范。
- en: Associate the admin identity
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关联管理员身份
- en: After deploying the CA, you need to associate an admin identity. This identity
    will allow you to work with the CA and will be used to create the organization’s
    MSP, register users, and add peers in the network.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 CA 后，你需要关联一个管理员身份。这个身份将允许你与 CA 进行交互，并用于创建组织的 MSP、注册用户和将对等节点添加到网络中。
- en: From the IBM Blockchain Platform console, choose Nodes ® [CA node] ® Associate
    Identity.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 从 IBM 区块链平台控制台中选择节点 ® [CA 节点] ® 关联身份。
- en: Provide the CA Administrator Enroll ID and the Enroll Secret that you provided
    in the previous step. On clicking “Associate identity,” the CA admin identity
    becomes associated with the CA node and is added into the wallet. You can check
    the wallet by going to the IBM Blockchain Platform console and selecting Wallet.
    This admin identity will be used to register new users and generate certificates.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 CA 管理员注册 ID 和上一步中提供的注册密码。点击“关联身份”后，CA 管理员身份将与 CA 节点关联，并添加到钱包中。你可以通过转到 IBM
    区块链平台控制台并选择钱包来查看钱包。这个管理员身份将用于注册新用户和生成证书。
- en: Register users
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注册用户
- en: 'As previously noted, every node requires a certificate and a private key to
    participate in the blockchain network. So using the CA admin identity of the organization,
    you need to register the two following identities:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 正如先前所述，每个节点在区块链网络中参与都需要一个证书和一个私钥。因此，使用组织的 CA 管理员身份，你需要注册以下两个身份：
- en: An identity that will work as an admin of the organization
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个将作为组织管理员的身份
- en: The identity of the peer itself, which will be used for signing the peer’s action
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对等节点本身的身份，将用于签署对等节点的操作
- en: Make a note that if an organization has more than one peer, one admin identity
    is sufficient, but you need to create a peer identity for each peer.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果一个组织拥有多个对等节点，一个管理员身份就足够了，但你需要为每个对等节点创建一个对等节点身份。
- en: 'To proceed with identity registration, go to IBM Blockchain Platform console
    and choose Nodes ® [CA node] ® Register User. If this is the first time you are
    registering the admin for your organization, use the following steps:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要继续进行身份注册，请转到 IBM 区块链平台控制台，并选择节点 ® [CA 节点] ® 注册用户。如果这是您为组织注册管理员的第一次，使用以下步骤：
- en: Note
  id: totrans-193
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Except for step 1, these steps are for more advanced users. Refer to the IBM
    documentation for further details.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 除了第一步之外，这些步骤适用于更高级的用户。有关更多详细信息，请参考 IBM 文档。
- en: Provide the Enroll ID and Enroll Secret for the organization administrator and
    select Admin for the Type.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为组织管理员提供注册 ID 和注册密码，然后选择类型为 Admin。
- en: For the affiliation needed for role-based access control, keep the default selection.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于基于角色的访问控制所需的从属关系，请保留默认选择。
- en: For the optional Maximum Enrollments field, keep the default value, which is
    blank.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于可选的最大注册字段，请保留默认值，即空白。
- en: Create key-value pairs if you wish to set up attribute-based access control.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您希望设置基于属性的访问控制，请创建键值对。
- en: Now that the admin user is registered, we can proceed with registering the peer
    identity. To do that, repeat step 1 by selecting Peer for Type instead of Admin.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在管理员用户已注册，我们可以继续注册节点身份。为此，请选择类型为 Peer 而不是 Admin，重复第 1 步。
- en: Check the wallet to view these identities. You might think that these identities
    are not available in the wallet yet. That’s correct!
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 检查钱包以查看这些身份。您可能会认为这些身份尚未在钱包中可用。这是正确的！
- en: You have registered the identities but not yet enrolled them. Once an identity
    gets enrolled, its certificates will be generated, and the identity can be viewed
    in the wallet. In the upcoming sections, you will learn about enrolling these
    identities.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 您已注册了身份，但尚未注册。一旦身份注册，其证书将生成，并且可以在钱包中查看身份。在接下来的部分中，您将学习如何注册这些身份。
- en: Create the peer organization’s MSP definition
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建节点组织的 MSP 定义
- en: 'Now we will create the MSP, a formal definition of the peer’s organization.
    To do that, go to IBM Blockchain Platform console and choose Organizations ® Create
    MSP definition. Provide the required values as listed here:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建 MSP，这是节点组织的正式定义。为此，请转到 IBM 区块链平台控制台，然后选择组织 ® 创建 MSP 定义。根据以下列出的要求提供所需的值：
- en: MSP name (for example, `Org1MSP`) and its ID
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MSP 名称（例如，`Org1MSP`）及其 ID
- en: The Root CA details, like the root CA that was used to create nodes and identities
    for the organization
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根 CA 的详细信息，例如用于为组织创建节点和身份的根 CA
- en: Admin Certificate, like the ID and secret of the user that you registered with
    the admin identity in the previous section
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员证书，如您在上一节中使用管理员身份注册的用户的 ID 和密钥
- en: The certificates of the admin identity are generated in this step, while this
    identity gets exported to the wallet. Likewise, you can manage the certificates
    by exporting the admin certificates and saving them into your filesystem.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中生成了管理员身份的证书，同时此身份被导出到钱包。同样，您可以通过导出管理员证书并将其保存到您的文件系统来管理证书。
- en: For the next step, we create an MSP definition, with which you can add peers
    in the organization.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步，我们创建一个 MSP 定义，您可以使用它在组织中添加节点。
- en: Create the peer node
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建节点
- en: 'Peers are the nodes that host smart contracts and maintain the ledger. To create
    a peer node, go to IBM Blockchain Platform console and choose Nodes ® Add Peer.
    Creating a peer node requires the following details:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 节点是托管智能合约并维护账本的节点。要创建一个节点，请转到 IBM 区块链平台控制台，然后选择节点 ® 添加节点。创建节点需要以下详细信息：
- en: A name for the peer node (for example, `peer1`)
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对等节点的名称（例如，`peer1`）
- en: CA details—use the CA that you used to create the organization’s MSP
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CA详细信息——使用您用于创建组织MSP的CA
- en: The user ID and secret, which was registered as a Peer type
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户ID和密码，注册为对等节点类型
- en: Select the Organization MSP
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择组织MSP
- en: Associate the peer admin identity. This will act as the administrator of your
    peer. You can make the organization admin the same as the peer admin; however,
    you can register and enroll a different identity with the organization CA to make
    that the admin of your peer.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关联对等节点管理员身份。这将作为你的对等节点的管理员。你可以将组织管理员设置为对等节点管理员；但是，你可以注册和注册一个不同的身份，使组织CA成为你的对等节点的管理员。
- en: With all this information, you’ve created the peer node. Advanced deployment
    options are also available—for example, if you want to use your own CA, state
    database, or HSM, refer to the IBM documentation for more information.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 有了所有这些信息，你已经创建了对等节点。还有高级部署选项可用——例如，如果你想使用自己的CA、状态数据库或HSM，可以参考IBM文档了解更多信息。
- en: Note
  id: totrans-217
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: To add more peers to the same organization, you need to register a new user
    with the Peer identity and repeat the steps as mentioned.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 要向同一组织添加更多对等节点，你需要注册一个新用户，具有对等节点的身份，并重复提到的步骤。
- en: Create the ordering service
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建订购服务
- en: The ordering service is a node or a cluster of nodes. You can create one node
    ordering service (sufficient for testing purposes) or a crash fault-tolerant ordering
    service using multiple nodes. Refer to the IBM documentation for more information.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 订购服务是一个节点或节点集群。你可以创建一个节点的订购服务（足以用于测试目的）或一个具有多个节点的崩溃容错订购服务。有关更多信息，请参考IBM文档。
- en: 'To create an ordering service node, we need to follow the same steps as for
    the peer node. As before, you must create a CA, create new identities using that
    CA, and create an organization definition; similarly, you need to perform the
    same steps given next before creating an ordering service:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个订购服务节点，我们需要按照同等步骤进行操作，就像创建对等节点一样。与之前一样，你必须创建一个CA，使用该CA创建新的身份，并创建一个组织定义；同样地，在创建订购服务之前，你需要执行接下来的相同步骤：
- en: Create a CA for the ordering service organization (say, `OrdererCA`). Follow
    the same steps as in [“Add a certificate authority”](#add_a_certificate_authority).
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为订购服务组织创建一个CA（比如，`OrdererCA`）。按照[“添加证书颁发机构”](#add_a_certificate_authority)中的相同步骤进行操作。
- en: Associate the CA admin identity by following the same steps as in [“Associate
    the admin identity”](#associate_the_admin_identity).
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按照[“关联管理员身份”](#associate_the_admin_identity)中的相同步骤来关联CA管理员身份。
- en: Register new identities. You need to register two identities, one admin identity
    as type Admin and another node identity as type Orderer. Repeat the same steps
    as given in [“Register users”](#register_users).
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册新的身份。你需要注册两个身份，一个管理员身份作为Admin类型，另一个节点身份作为Orderer类型。重复[“注册用户”](#register_users)中给出的相同步骤。
- en: Create an MSP for the ordering service organization (for example, `OrdererMSP`)
    in the same way as in [“Create the peer organization’s MSP definition”](#create_the_peer_organizationapostrophes).
    Make sure in this step that you use the identities related to the ordering service
    appropriately.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以与[“创建对等方组织的 MSP 定义”](#create_the_peer_organizationapostrophes)相同的方式为排序服务组织创建一个
    MSP（例如，`OrdererMSP`）。在此步骤中，请确保您适当地使用与排序服务相关的身份。
- en: Create the ordering service node from the IBM Blockchain Platform console by
    choosing Nodes ® Add Ordering Service.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择节点 ® 添加排序服务，从 IBM 区块链平台控制台创建排序服务节点。
- en: While creating an ordering service node, you need to enter the ordering service
    name, number of ordering nodes, and details of the ordering service CA, the user
    with the orderer identity, and MSP. At the end, associate the identity from your
    wallet, which will act as an admin of your ordering service. You can choose the
    Ordering Service MSP admin for this or create a new identity.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建排序服务节点时，您需要输入排序服务名称、排序节点数量以及排序服务 CA 的详细信息，具有排序者身份的用户以及 MSP。最后，关联您钱包中的身份，该身份将充当您的排序服务的管理员。您可以选择
    Orderer 服务 MSP 管理员进行此操作，或者创建一个新的身份。
- en: Add the organization as a consortium member
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将组织添加为联盟成员
- en: Now that you have created peer(s), its organizations, and the ordering service,
    the ordering service should know about the organizations before creating a channel
    in the blockchain network. Hence you need to add organizations as known to the
    ordering service. This process is called *joining the consortium*.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经创建了对等节点、其组织以及排序服务，排序服务在创建区块链网络中的通道之前应该知道这些组织。因此，在创建通道之前，您需要将组织添加为已知于排序服务。这个过程称为*加入联盟*。
- en: From the IBM Blockchain Platform console, in the Consortium Members section,
    choose Nodes ® [Ordering Service Node] ® Add Organization. Choose the organization
    from all the available organizations and click Add Organization. Repeat the same
    step for all of the organizations that will be part of the consortium.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 从 IBM 区块链平台控制台，在联盟成员部分，选择节点 ® [Ordering Service Node] ® 添加组织。从所有可用的组织中选择组织，然后点击添加组织。为将成为联盟一部分的所有组织重复相同的步骤。
- en: After completing this step, the organizations can create or join a channel hosted
    on the ordering service in the blockchain network.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此步骤后，组织可以在区块链网络中托管在排序服务上创建或加入通道。
- en: Create a channel
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个通道
- en: 'The channels act as a messaging medium among peers through the ordering service.
    Before creating the channel, make sure you have deployed an ordering service and
    peer organization, and that the organization has joined the consortium. To create
    a channel, go to the IBM Blockchain Platform console and choose Channels ® Create
    Channel. Then complete the following steps:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 通道充当对等方通过排序服务之间的消息传递介质。在创建通道之前，请确保您已部署了排序服务和对等组织，并且该组织已加入联盟。要创建一个通道，请转到 IBM
    区块链平台控制台，然后选择通道 ® 创建通道。然后完成以下步骤：
- en: Provide the channel name and choose the ordering service.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供频道名称并选择排序服务。
- en: Add the organization’s MSP as a channel member along with its permissions as
    operator, reader, or writer. Each channel must have at least one organization
    with Operator permission.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将组织的 MSP 添加为频道成员，并附带其操作员、读取器或写入器权限。每个频道必须至少有一个具有操作员权限的组织。
- en: The channel update policy specifies the number of organizations that need to
    approve the updates to the channel configuration whenever required. If you have
    one organization in your network, the policy will be “1 out of 1.”
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 频道更新策略指定每当需要时，需要批准频道配置更新的组织数量。如果您的网络中有一个组织，则策略将是“1 个中的 1 个”。
- en: Next, select the channel creator organization and its admin identity. This specifies
    which organization is creating the channel.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择频道创建者组织及其管理员身份。这指定了哪个组织正在创建频道。
- en: After creating the channel, the next step is to join a channel.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 创建频道后，下一步是加入频道。
- en: Join the channel
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加入频道
- en: After the peer joins the channel, the setup of the sample blockchain network
    is completed. To join the channel, go to the IBM Blockchain Platform console and
    choose Channels.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Peer 加入频道后，示例区块链网络的设置完成。要加入频道，请转到 IBM 区块链平台控制台并选择频道。
- en: The channel created in the previous step has no peer that has joined yet and
    shows the status as “Pending – add peer.” Clicking this will give you the available
    peers list, from which you can choose the peer.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一步创建的频道中，还没有加入的对等方，并显示状态为“待定 - 添加对等方”。单击此选项将为您提供可用的对等方列表，您可以从中选择对等方。
- en: Alternatively, you can go to the IBM Blockchain Platform console and choose
    Channels ® Join Channel. You then need to choose the ordering service associated
    with your channel and provide the channel name. Then you’ll see the available
    peers list, from which you can choose the peer.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以转到 IBM 区块链平台控制台并选择频道 ® 加入频道。然后，您需要选择与您的频道关联的排序服务并提供频道名称。然后，您将看到可用的对等方列表，您可以从中选择对等方。
- en: After the selection of peers, you’ll see an option to make your peer an anchor
    peer. For more information on anchor peers, refer to [Chapter 3](ch03.xhtml#hyperledger_fabric_architecture_and_com).
    You can have one anchor peer or many/all peers as anchors. Make your peer an anchor
    peer and proceed with joining the channel.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择对等方后，您将看到使您的对等方成为锚定对等方的选项。有关锚定对等方的更多信息，请参阅[第 3 章](ch03.xhtml#hyperledger_fabric_architecture_and_com)。您可以将一个对等方或许多/全部对等方作为锚定对等方。使您的对等方成为锚定对等方并继续加入频道。
- en: Now the setup of your blockchain network is completed, and with this, you have
    a fully functional blockchain network. As a next step, you can start deploying
    your smart contract on the channel and start transacting in the network.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的区块链网络设置已完成，这样，您就拥有了一个完全功能的区块链网络。作为下一步，您可以在频道上开始部署您的智能合约并开始在网络中进行交易。
- en: Deploy the Smart Contract
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署智能合约
- en: Through the IBM Blockchain Platform console, you can manage the deployment of
    the smart contract, but not its development. The smart contract should be packaged
    as *.cds* (for older Fabric versions) or *.tgz* or *.tar.gz* before installing
    it on the Fabric network.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 IBM 区块链平台控制台，您可以管理智能合约的部署，但无法管理其开发。智能合约在安装到 Fabric 网络之前应打包为 *.cds*（对于较旧的
    Fabric 版本）或 *.tgz* 或 *.tar.gz*。
- en: For older versions of Fabric (< 2.*x*) go to the IBM Blockchain Platform console
    and choose Smart Contracts ® Install Smart Contract.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 对于较旧版本的 Fabric（< 2.*x*），请转到 IBM 区块链平台控制台，然后选择 Smart Contracts ® Install Smart
    Contract。
- en: Provide the packaged (*.cds*) smart contract, and it will be installed on all
    peers. Once it’s installed, you have the option to instantiate the smart contract.
    During this process, you set the endorsement policy, function name, and its required
    arguments to initialize the contract. On successful instantiation, the contract
    can be viewed under Instantiated Smart Contracts.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 提供已打包的（*.cds*）智能合约，它将被安装在所有对等节点上。一旦安装完成，您可以选择实例化智能合约。在此过程中，您需要设置认可策略、函数名称及其初始化合约所需的参数。成功实例化后，合约可在已实例化的智能合约下查看。
- en: 'For current Fabric versions (> 2.*x*), smart contracts are managed differently.
    You need to take the following three steps:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 对于当前的 Fabric 版本（> 2.*x*），智能合约的管理方式有所不同。您需要执行以下三个步骤：
- en: Propose the smart contract.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提出智能合约。
- en: From the IBM Blockchain Platform console, choose Channels ® [*Your channel node*]
    ® Propose smart contract definition. Then provide the peer admin identity, smart
    contract name and its version, and endorsement policy. Then click Propose. This
    will install the packaged smart contract on the selected peer’s node and propose
    the smart contract to the channel. Proposing the smart contract to the channel
    means it will notify the channel members for their approval.
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 IBM 区块链平台控制台中选择 Channels ® [*Your channel node*] ® Propose smart contract
    definition。然后提供对等节点管理员身份、智能合约名称及其版本以及认可策略。然后单击提议。这将在所选对等节点上安装已打包的智能合约，并将智能合约提议给通道。将智能合约提议给通道意味着它将通知通道成员以获取他们的批准。
- en: Assign members to the smart contract.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为智能合约指定成员。
- en: The channel members can view this proposed smart contract under Channels on
    the console. Select your organization and associated peer admin identity to proceed
    with your approval/rejection for the proposal.
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通道成员可以在控制台的 Channels 下查看此提议的智能合约。选择您的组织和关联的对等节点管理员身份以进行您的批准/拒绝操作。
- en: Commit the smart contract to the channel.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将智能合约提交到通道。
- en: Once all the required approvals are in place, you commit the smart contract.
    This process is similar to smart contract instantiation. Any channel member can
    commit the smart contract on the channel. Select your organization, provide the
    peer admin identity, and commit the smart contract.
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦所有必需的批准都已到位，您就可以提交智能合约。此过程与智能合约实例化类似。任何通道成员都可以在通道上提交智能合约。选择您的组织，提供对等节点管理员身份，并提交智能合约。
- en: Once the smart contract is instantiated, or committed to the channel, your network
    is ready to accept the transactions.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦智能合约被实例化，或者提交到通道，你的网络就准备好接受交易了。
- en: Create the Application
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建应用程序
- en: Once the blockchain network is successfully created, and the smart contract
    has been committed in a channel of your network, you can start writing your client
    application to transact in the network. An application can interact with the Fabric
    network by using Fabric SDKs. Fabric provides several SDKs for various programming
    languages. The SDK uses the connection profile to connect to your network. The
    connection profile contains the endpoint information of the peers, CA, and organization
    MSP.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦成功创建了区块链网络，并且智能合约已经在你的网络的某个通道中提交，你就可以开始编写客户端应用程序来在网络中进行交易。应用程序可以使用 Fabric
    SDK 与 Fabric 网络进行交互。Fabric 为各种编程语言提供了几种 SDK。SDK 使用连接配置文件连接到你的网络。连接配置文件包含对等体、CA
    和组织 MSP 的端点信息。
- en: To download the connection profile, go to IBM Blockchain Platform console and
    choose Organizations ® [*Organization Name*] ® Create connection profile. Then
    select the peer and download the connection profile.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载连接配置文件，请转到 IBM 区块链平台控制台，选择 Organizations ® [*Organization Name*] ® Create
    connection profile。然后选择对等体并下载连接配置文件。
- en: The next step is to connect to your blockchain network from your application
    by using the SDK and connection profile and then perform transactions to create,
    update, or transfer the assets in your network.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用SDK和连接配置文件从你的应用程序连接到你的区块链网络，然后执行交易以创建、更新或转移你的网络中的资产。
- en: Oracle Blockchain Platform Overview
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Oracle 区块链平台概述
- en: In this section, we dive into Oracle’s platform for blockchain and its offerings.
    This is followed by complete coverage of a blockchain use case designed and deployed
    on Oracle.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们深入探讨了 Oracle 区块链平台及其提供的内容。接下来将全面介绍设计并部署在 Oracle 上的区块链使用案例。
- en: '*Oracle Blockchain Platform* (*OBP*) is a preassembled platform that offers
    the ease of building and running chaincodes and maintaining an immutable distributed
    ledger. Before we delve into OBP, it’s important to understand that the blockchain
    platform uses the Oracle Cloud Infrastructure (OCI) VM to deploy and run the blockchain
    network and other supporting services including object storage (product and related
    binaries and logs), identity services (user, role, authentication, security),
    and load balancers.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '*Oracle 区块链平台* (*OBP*) 是一个预装平台，提供了构建和运行链代码以及维护不可变分布式账本的便利性。在我们深入了解 OBP 之前，重要的是要了解，区块链平台使用
    Oracle 云基础设施（OCI）虚拟机来部署和运行区块链网络以及其他支持服务，包括对象存储（产品和相关二进制文件和日志）、身份服务（用户、角色、认证、安全性）和负载均衡器。'
- en: A typical blockchain network on OBP will consist of nodes that validate transactions
    and respond to queries by executing the chaincode. External applications can use
    the SDK or REST APIs to invoke transactions on the blockchain network. One or
    more endorsing peers digitally sign (endorse) the chaincode execution results,
    which are further verified by the ordering service. Upon reaching a consensus,
    transactions are ordered, grouped, and sent to peer nodes for validation before
    being appended to the ledger.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: OBP 上的典型区块链网络将包括验证交易并通过执行链码来响应查询的节点。外部应用程序可以使用 SDK 或 REST API 在区块链网络上调用交易。一个或多个背书对等体对链码执行结果进行数字签名（背书），然后由排序服务进一步验证。达成共识后，交易将被排序、分组，并发送到对等节点进行验证，然后追加到分类帐中。
- en: The console allows administrators to configure a blockchain network and monitor
    its operations, check logs, and more. While configuring a blockchain network,
    you complete a few simple instance creation steps, and then Oracle takes care
    of service management, patching, backup and restoration, and other service life-cycle
    tasks. You start by creating a blockchain instance that includes all that you
    need to build, deploy, run, and monitor a production-grade permissioned blockchain
    ledger powered by Fabric.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台允许管理员配置区块链网络并监视其操作，检查日志等。在配置区块链网络时，您需要完成一些简单的实例创建步骤，然后 Oracle 负责服务管理、打补丁、备份和恢复以及其他服务生命周期任务。您首先要创建一个区块链实例，其中包含构建、部署、运行和监视由
    Fabric 提供支持的生产级权限区块链分类帐所需的一切。
- en: 'In this section, you’ll use Oracle Blockchain Platform Cloud Service to build
    a sample use case that demonstrates OBP. Oracle offers the following blockchain
    products:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，您将使用 Oracle 区块链平台云服务构建一个演示 OBP 的示例用例。Oracle 提供以下区块链产品：
- en: Oracle Blockchain Platform Cloud Service
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 区块链平台云服务
- en: This cloud service includes a preassembled platform as a service (PaaS) with
    template-based provisioning. It leverages OCI, which takes care of dependencies
    like containers, virtual machines, identity management, and block and object storage.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这个云服务包括一个基于模板的预装平台即服务（PaaS）。它利用了 OCI，处理依赖项如容器、虚拟机、身份管理以及块和对象存储。
- en: Oracle Blockchain Platform Enterprise edition
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 区块链平台企业版
- en: This is designed for customers who need greater data privacy or prefer to manage
    their data on premises. This edition offers a preassembled, on-premises blockchain,
    which can be deployed on your datacenter. It has feature parity with the cloud-based
    Oracle Blockchain Platform and offers the same APIs and portability of applications.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为需要更高数据隐私或更喜欢在本地管理其数据的客户而设计的。这个版本提供了一个预装的、本地部署的区块链，可以部署在您的数据中心上。它具有与基于云的 Oracle
    区块链平台相同的功能对等性，并提供相同的 API 和应用程序的可移植性。
- en: Prebuilt solution
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 预构建解决方案
- en: This prebuilt option offers pre-integrated, quickly deployable blockchain solutions.
    These solutions can seamlessly connect with SaaS applications like supply chain
    management. For example, Intelligent Track and Trace is a pre-integrated blockchain
    solution to achieve end-to-end supply chain visibility.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 这个预构建选项提供了预集成的、快速部署的区块链解决方案。这些解决方案可以与供应链管理等 SaaS 应用无缝连接。例如，Intelligent Track
    and Trace 是一个预集成的区块链解决方案，用于实现端到端的供应链可见性。
- en: Tamper-resistant blockchain tables in Oracle Database
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 数据库中的防篡改区块链表
- en: This solution is designed for an enterprise that needs immutable storage for
    use cases such as tamper-resistant transaction logs, audit trails, compliance
    data, financial ledgers, or legal hold data. It is a tamper-resistant option in
    Oracle Database that allows only insert operations. Each row contains the previous
    row’s hash, thus chaining the rows. Nonrepudiation is guaranteed as users sign
    the content of the rows with a PKI-based signature.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案设计用于企业需要不可变存储的用例，比如防篡改的交易日志、审计跟踪、合规数据、财务分类账或法律保留数据。这是 Oracle 数据库中的一个防篡改选项，只允许插入操作。每一行包含上一行的哈希值，从而将这些行链接在一起。不可否认性是有保障的，因为用户用基于
    PKI 的签名对行的内容进行签名。
- en: '[Figure 8-1](#oracle_blockchain_platform_architecture) shows the high-level
    architecture of OBP. This permissioned blockchain offers a closed ecosystem in
    which the founder organization invites other participating organizations. It follows
    a three-step consensus process: endorsement, ordering, and validation. The platform
    itself is a managed service with zero-downtime managed patching, upgrades, and
    backups of ledger and configurations.'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 8-1](#oracle_blockchain_platform_architecture) 展示了 OBP 的高层架构。这个许可的区块链提供了一个封闭的生态系统，在这个生态系统中，创始组织邀请其他参与组织。它遵循一个三步共识流程：认可、排序和验证。该平台本身是一个托管服务，具有零停机的托管补丁、升级和账本及配置的备份。'
- en: '![Oracle Blockchain Platform architecture](Images/HLF_0801.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![Oracle 区块链平台架构](Images/HLF_0801.png)'
- en: Figure 8-1\. Oracle Blockchain Platform architecture
  id: totrans-277
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8-1\. Oracle 区块链平台架构
- en: Based on the OCI infrastructure tenancy model, this architecture helps isolate
    the organization’s data and offers enhanced security and in-transit and at-rest
    data encryptions. It offers a web application firewall (WAF) to protect against
    attacks. The identity management cloud service offers user and role management.
    It also provides a simplified ecosystem to form consortiums, ease participant
    onboarding to the blockchain network, and provide authentication of the CA, REST
    proxy, and platform console.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 OCI 基础架构租户模型，这个架构有助于隔离组织的数据，并提供了增强的安全性和在传输和静态数据加密方面的保护。它提供了 Web 应用程序防火墙 (WAF)
    来防御攻击。身份管理云服务提供了用户和角色管理。它还提供了一个简化的生态系统，用于组建联盟、简化参与者加入区块链网络以及对 CA、REST 代理和平台控制台进行身份验证。
- en: Each organization’s instance uses managed VMs and containers per node. To avoid
    outages, the *orderers*, *console*, REST proxy, and *fabric-ca* nodes are replicated.
    A separate VM is provisioned for the chaincode execution container. And to withstand
    datacenter outages, object stores are automatically replicated across OCI availability
    domains (ADs).
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 每个组织的实例使用每个节点的托管 VM 和容器。为了避免中断，*排序者*、*控制台*、REST 代理和 *fabric-ca* 节点进行了复制。为链代码执行容器预配了单独的
    VM。为了抵御数据中心中断，对象存储自动在 OCI 可用性域（AD）之间进行了复制。
- en: Now that we have covered various offerings and OBP architecture, let’s focus
    on Oracle Blockchain Platform by starting with a sample use case.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了各种服务和 OBP 架构，让我们专注于 Oracle 区块链平台，从一个示例用例开始。
- en: Oracle Blockchain Platform Use Case
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Oracle 区块链平台用例
- en: 'In this section, we set up and deploy a Fabric application on OBP by going
    through four steps sequentially: explore, engage, experiment, and experience.
    Specifically, we start the Explore step by defining the use case. Then we follow
    the Engage step by reviewing transactions, channels, digital assets, and other
    relevant artifacts for our use case. At the Experiment step, we configure the
    Fabric network and the transaction infrastructure on OBP. Finally, at the Experience
    step, we add the “smartness” to our Fabric network by deploying and instantiating
    our chaincode.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们通过四个步骤顺序设置和部署 Fabric 应用于 OBP：探索、参与、实验和体验。具体来说，我们通过定义用例开始“探索”步骤。然后我们按照“参与”步骤来审查交易、通道、数字资产和其他与我们用例相关的工件。在“实验”步骤中，我们在
    OBP 上配置 Fabric 网络和交易基础设施。最后，在“体验”步骤中，我们通过部署和实例化我们的链代码为我们的 Fabric 网络添加“智能”。
- en: Explore the Use Case
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索用例
- en: Before we begin any work, we need to assess the use case to determine whether
    it is a fit for a blockchain-based solution and identify the type of network that
    will help set up the business case.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始任何工作之前，我们需要评估用例，确定是否适合基于区块链的解决方案，并确定可以帮助建立业务案例的网络类型。
- en: This section briefly describes our use case. In this example, a university uses
    Fabric to manage the authenticity of its students’ credentials. Along the way,
    you’ll learn how to solve a business problem with Fabric as well as how to deploy
    solutions on OBP.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 本节简要描述了我们的用例。在本示例中，一所大学使用 Fabric 管理其学生凭证的真实性。在此过程中，您将学习如何使用 Fabric 解决业务问题以及如何在
    OBP 上部署解决方案。
- en: Like other industries, universities and other higher education institutions
    are investing in and adopting digital solutions to enhance students’ efficiency
    and experiences. Higher-education institutions are preparing the future workforce,
    and that workforce is already tech-savvy. They need a thriving ecosystem, efficient
    anytime-anywhere learning capabilities, and tamper-proof credential storage to
    showcase their skills to future employers. In general, the education industry
    faces key challenges in building this ecosystem, such as legacy technology, data
    silos, low collaboration with peer universities, credential verification, paper-based
    degrees and certificates, tracking and protecting IPs, and seamless and fair allocation
    of grants to the bright and needy.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他行业一样，大学和其他高等教育机构正在投资并采用数字解决方案，以提高学生的效率和体验。高等教育机构正在为未来的劳动力做准备，而这一劳动力已经精通技术。他们需要一个蓬勃发展的生态系统，高效的随时随地学习能力，以及防篡改的证书存储，以向未来雇主展示他们的技能。总的来说，教育行业在构建这一生态系统方面面临着关键挑战，如传统技术、数据孤岛、与同行大学的低合作、证书验证、纸质学位和证书、IP的跟踪和保护，以及对有才能和有需要的人公平分配资助等。
- en: Our use case targets credential verification. Many will agree that credential
    verification is slow and mostly a manual process. Fake certificates and degrees
    can tarnish universities and harm employers in many ways.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的用例针对证书验证。很多人都会同意，证书验证是缓慢的，主要是手工操作。假证书和学位可以在很多方面损害大学并伤害雇主。
- en: 'This use case deals with issuing certificates by a CA and allowing a certificate
    owner (student/learner), employers, and other institutions to verify a tamper-proof
    credential of the certificate owner. This example includes the following stakeholders:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 这个用例涉及由CA发放证书，并允许证书所有者（学生/学习者）、雇主和其他机构验证证书所有者的防篡改证书。这个示例包括以下利益相关者：
- en: Certificate viewer/verifiers (CVs)
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 证书查看器/验证器（CVs）
- en: Student, employer, other universities
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 学生、雇主、其他大学
- en: Oracle Business School (OBS)
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 商学院（OBS）
- en: Certificate creator (school of studies)
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 证书创建者（学习院）
- en: Oracle Global University (OGU)
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 全球大学（OGU）
- en: Certificate approver and issuer (university)
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 证书审核者和发放者（大学）
- en: Engage with the Solution
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参与解决方案
- en: To begin, we need to define the holistic design of the solution, shown in [Figure 8-2](#solution_components),
    to ensure synchronicity among the process flows, use cases, and technology. This
    stage focuses on defining a blockchain-based business network and its components,
    such as business topology, access control, digital assets, transactions, events,
    and channels. Finally, it ends with defining the solution architecture.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们需要定义解决方案的整体设计，如[图 8-2](#solution_components)所示，以确保流程、用例和技术之间的同步性。这个阶段侧重于定义基于区块链的业务网络及其组件，如业务拓扑、访问控制、数字资产、交易、事件和通道。最后，它以定义解决方案架构告终。
- en: '![Solution components](Images/HLF_0802.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![解决方案组件](Images/HLF_0802.png)'
- en: Figure 8-2\. Solution components
  id: totrans-298
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8-2\. 解决方案组件
- en: Business topology
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 业务拓扑
- en: 'Our use case has three stakeholders. Oracle Global University (OGU) is the
    governing body with several affiliated business schools such as Oracle Business
    School (OBS). Learners are enrolled in OBS, and OBS submits their credentials
    to OGU, which issues a digital certificate to the learner. The following are the
    stakeholders:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的用例有三个利益相关者。Oracle 全球大学（OGU）是主管机构，拥有几个附属商学院，如 Oracle 商学院（OBS）。学习者被录取到 OBS，OBS
    将他们的凭据提交给 OGU，后者向学习者颁发数字证书。以下是利益相关者：
- en: Oracle Global University (OGU)
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 全球大学（OGU）
- en: This is the certificate authority (digital asset), acting as approver and issuer
    of the certificates. It is also the founder of the network.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 这是证书机构（数字资产），充当证书的批准者和发行者。它也是网络的创建者。
- en: Oracle Business School (OBS)
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 商学院（OBS）
- en: The certificate (digital asset) creator and requestor.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 证书（数字资产）的创建者和请求者。
- en: Digital certificate verifier (CVs)
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 数字证书验证者（CVs）
- en: Potential employers, other certificate providers (for example, Pearson VUE),
    universities, and other authorities. It also includes the certificate owner, which
    is the learner.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 潜在雇主、其他证书提供者（例如 Pearson VUE）、大学和其他权威机构。它还包括证书所有者，即学习者。
- en: Access control
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问控制
- en: Different stakeholders have different permissions for accessing and managing
    the network. Such permissions are set via access rights, like read or write privileges
    assigned to each stakeholder, as listed in [Table 8-1](#network_participant_access_control_list).
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的利益相关者对于访问和管理网络具有不同的权限。这些权限是通过访问权限设置的，比如赋予每个利益相关者的读或写权限，如 [表8-1](#network_participant_access_control_list)
    中所列。
- en: Table 8-1\. Network participant access-control list
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 表8-1\. 网络参与者访问控制列表
- en: '| Organization | Entity type | Access type |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| 组织 | 实体类型 | 访问类型 |'
- en: '| --- | --- | --- |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| OGU | Founder | Read/write |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| OGU | 创始人 | 读/写 |'
- en: '| OBS | Endorsing participant | Read/write |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| OBS | 认可参与者 | 读/写 |'
- en: '| CVs | Participant | Read |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| CVs | 参与者 | 读 |'
- en: Channel
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通道
- en: In our founder-initiated business network, participating stakeholders (like
    OBS and CVs) will communicate over a blockchain channel. In addition, all the
    stakeholders are dealing with the same digital asset; participants need to be
    on the same channel with appropriate access rights. Hence, we will have one channel,
    defined by the founder, and other participants will join the channel.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的创始者发起的业务网络中，参与利益相关者（如 OBS 和 CVs）将通过区块链通道进行通信。此外，所有利益相关者都在处理相同的数字资产；参与者需要在具有适当访问权限的同一通道上。因此，我们将有一个通道，由创始者定义，其他参与者将加入该通道。
- en: Digital asset
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数字资产
- en: 'Once the stakeholders and network topology are defined, you need to focus on
    defining the digital asset(s) that will be stored in the ledger. For this use
    case, we will have two digital assets: the learner (certificate owner) information
    and the digital certificate data.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确定了利益相关者和网络拓扑，您需要专注于定义将存储在账本中的数字资产。对于这个用例，我们将有两个数字资产：学习者（证书所有者）信息和数字证书数据。
- en: Transactions
  id: totrans-319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 交易
- en: While designing the solution for a use case, we recommend charting the transactions
    and events. During the life cycle of the digital asset, stakeholders will perform
    the transactions listed in [Table 8-2](#transactions_and_events).
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计用例的解决方案时，我们建议绘制交易和事件。在数字资产的生命周期中，利益相关者将执行 [表 8-2](#transactions_and_events)
    中列出的交易。
- en: Table 8-2\. Transactions and events
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 表 8-2\. 交易和事件
- en: '| Transaction | Stakeholders | Milestone | Description |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| 交易 | 利益相关者 | 里程碑 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `CreateReceiver` | OBS | Receiver created | Creates a new receiver or student
    |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| `CreateReceiver` | OBS | 创建接收者 | 创建新的接收者或学生 |'
- en: '| `AddCertificate` | OBS | Certificate added | Inserts a certificate for a
    receiver |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| `AddCertificate` | OBS | 添加证书 | 为接收者插入证书 |'
- en: '| `ApproveCertificate` | OGU | Certificate approved | Approves a certificate
    |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| `ApproveCertificate` | OGU | 证书已批准 | 批准证书 |'
- en: '| **Search operation** |  |  |  |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| **搜索操作** |  |  |  |'
- en: '| `QueryByCert_id` | All | N/A | Queries a certificate |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| `QueryByCert_id` | 所有 | N/A | 查询证书 |'
- en: '| `QueryByRecev_id` | All | N/A | Queries a receiver by ID |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| `QueryByRecev_id` | 所有 | N/A | 按 ID 查询接收者 |'
- en: '| `GetCertificateHistory` | OGU/OBS/receiver | N/A | Queries history of one
    key for the record |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| `GetCertificateHistory` | OGU/OBS/接收者 | N/A | 查询记录中一个键的历史 |'
- en: '| `QueryAllCerts` | OGU/OBS | N/A | Queries all certificates of all students
    |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| `QueryAllCerts` | OGU/OBS | N/A | 查询所有学生的所有证书 |'
- en: Solution architecture
  id: totrans-332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案架构
- en: 'Let’s examine the high-level solution architecture for the use case. Several
    components interact and integrate at various levels by working in tandem to realize
    the solution:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查用例的高层解决方案架构。几个组件以不同的方式相互交互和集成，通过协作以实现解决方案：
- en: OBP dashboard
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: OBP 仪表板
- en: This is the console that provides authorized participants to perform various
    tasks. For example, OGU users can create compartments (Oracle infrastructure logical
    partitions), define blockchain networks, create channels, and allow other participants
    to collaborate on the channel.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为授权参与者提供执行各种任务的控制台。例如，OGU 用户可以创建隔间（Oracle 基础架构逻辑分区），定义区块链网络，创建通道，并允许其他参与者在通道上合作。
- en: Client UI
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端 UI
- en: 'Various participants and certificate viewers can use the client application
    UI to perform tasks, such as these:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的参与者和证书查看者可以使用客户端应用程序 UI 执行以下任务，例如：
- en: Users with OBS access control can search for certificate data for a given learner.
    They can also create a learner entry, request for certificate approval, and insert
    certificate data for the student on the ledger.
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有 OBS 访问控制权限的用户可以搜索特定学习者的证书数据。他们还可以创建学习者条目，请求证书批准，并在账本上为学生插入证书数据。
- en: Users with OGU access control can search for certificate data for a given learner
    and can also approve or reject a learner’s certificate data.
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有 OGU 访问控制权限的用户可以搜索特定学习者的证书数据，还可以批准或拒绝学习者的证书数据。
- en: Certificate verifiers (CVs) include learners and viewers. Learners (the certificate
    owner) can use client applications to view their certificate data and its approval
    state, and to generate a token to share with other certificate verifiers to validate
    their credentials. Viewers are users who can verify a learner’s credentials by
    using the token.
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 证书验证器（CVs）包括学习者和查看者。学习者（证书所有者）可以使用客户端应用程序查看其证书数据及其批准状态，并生成一个令牌与其他证书验证者共享以验证其凭据。查看者是可以使用令牌验证学习者凭据的用户。
- en: Experiment with Oracle Blockchain Platform
  id: totrans-341
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 体验Oracle Blockchain Platform
- en: Now that we’ve defined the key components, we can start using OBP to create
    network stakeholders with OBP instances, configure the OBP network infrastructure,
    and configure the OBP transaction infrastructure. [Figure 8-3](#workflow_of_tasks_and_subtasks)
    shows the major tasks and subtasks in this section. Adding Smartness will be covered
    in [“Experience the Solution”](#experience_the_solution).
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了关键组件，我们可以开始使用OBP创建具有OBP实例的网络利益相关者，配置OBP网络基础设施，并配置OBP交易基础设施。[图8-3](#workflow_of_tasks_and_subtasks)展示了本节中的主要任务和子任务。添加智能将在[“体验解决方案”](#experience_the_solution)中进行讨论。
- en: '![Workflow of tasks and subtasks](Images/HLF_0803.png)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![任务和子任务的工作流程](Images/HLF_0803.png)'
- en: Figure 8-3\. Workflow of tasks and subtasks
  id: totrans-344
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8-3\. 任务和子任务的工作流程
- en: Configure the Oracle Cloud infrastructure
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置Oracle Cloud基础设施
- en: Before you dive into creating a blockchain network and run transactions, you
    will start with OCI configurations. The tasks that need to be performed are signing
    in or signing up, planning for blockchain edition, and creating a compartment.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在您深入创建区块链网络和运行交易之前，您将从OCI配置开始。需要执行的任务包括登录或注册，规划区块链版本，以及创建一个隔离区。
- en: Signing in or signing up
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 登录或注册
- en: To start, you need an Oracle Cloud account. You can sign up for a free Oracle
    cloud promotion or place an order for OBP. Your Oracle Cloud account will include
    Oracle Identity and Access Management (IAM) and Identity Cloud Service (IDCS).
    With IAM, you can control who can access which cloud resources. As a cloud admin,
    you use IDCS to add users, assign roles, and manage access to the blockchain platform.
    Roles are mapped against IAM.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，您需要一个Oracle Cloud账户。您可以注册一个免费的Oracle云促销活动，或者下订单购买OBP。您的Oracle Cloud账户将包括Oracle身份和访问管理（IAM）和身份云服务（IDCS）。使用IAM，您可以控制谁可以访问哪些云资源。作为云管理员，您使用IDCS添加用户，分配角色，并管理对区块链平台的访问。角色与IAM进行映射。
- en: Planning for blockchain edition
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 规划区块链版本
- en: 'OBP is available in many regions, including Europe, North America, and APAC—and
    its popularity is growing. Before you set up a blockchain network, you need to
    plan for using any specific blockchain platform edition. OBP Cloud Service offers
    two editions: Standard edition with two CPUs, 50 GB storage, and two peers; and
    Enterprise edition, which can range from 4 to 32 CPUs, 150 GB storage, and two
    to six peers, depending on the size (small, medium, large, or XL). You can scale
    (up or down) the enterprise shape as per your load. For the sake of simplicity,
    we will create an instance with the Standard edition.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: OBP 在包括欧洲、北美和 APAC 在内的许多地区都可用，并且其受欢迎程度正在增长。在您设置区块链网络之前，您需要计划使用任何特定的区块链平台版本。OBP
    云服务提供两个版本：标准版包括两个 CPU、50 GB 存储和两个对等节点；企业版根据规模（小、中、大或 XL）提供从 4 到 32 个 CPU、150 GB
    存储和两到六个对等节点不等。您可以根据负载需求调整企业版的规模（扩展或缩小）。为了简单起见，我们将创建一个标准版实例。
- en: Creating a compartment
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个隔间
- en: We recommend that you create a separate compartment for a blockchain network.
    When you first log in to OCI, Oracle autocreates a root compartment in your tenancy.
    As an OCI admin, you can create additional compartments under the root compartment
    for the blockchain network.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议您为区块链网络创建一个单独的隔间。当您首次登录 OCI 时，Oracle 会自动为您的租户创建一个根隔间。作为 OCI 管理员，您可以在根隔间下创建额外的隔间，用于区块链网络。
- en: Log in as an admin user, navigate to the blockchain platform, and choose the
    appropriate compartment. We have created a separate compartment, `OracleBlockchainCompartment`,
    for this use case.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 以管理员用户身份登录，转到区块链平台，并选择适当的隔间。我们已为此用例创建了一个单独的隔间，即 `OracleBlockchainCompartment`。
- en: Create OBP instances
  id: totrans-354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 OBP 实例
- en: 'As per the business topology, you will create three blockchain instances: one
    for the founder (OGU) and one for each participant (OBS and CV). Following are
    the subtasks for this section:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 根据业务拓扑，您将创建三个区块链实例：一个用于创始人（OGU），一个用于每个参与者（OBS 和 CV）。以下是本节的子任务：
- en: Create the founder blockchain instance for OGU.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 OGU 创建创始人区块链实例。
- en: Create the participant blockchain instance for OBS.
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 OBS 创建参与者区块链实例。
- en: Create the participant blockchain instance for the CVs.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 CVs 创建参与者区块链实例。
- en: 'The steps are as follows:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤如下：
- en: Sign in to your Oracle Cloud Infrastructure account as a federated Oracle Identity
    Cloud Service admin user.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以联合 Oracle Identity Cloud 服务管理员用户的身份登录到您的 Oracle 云基础架构帐户。
- en: At the console, click the Navigation menu in the top-left corner and select
    Blockchain Platform.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台中，单击左上角的导航菜单，然后选择区块链平台。
- en: From the list of compartments, select the compartment (`OracleBlockchainCompartment`)
    in which you want to create the service.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从隔间列表中选择要创建服务的隔间（`OracleBlockchainCompartment`）。
- en: Enter the founder’s blockchain instance display name, `**OGUInstance**`, and
    a description.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入创始人区块链实例显示名称 `**OGUInstance**` 和描述。
- en: Choose “Create a new network” as a platform role, because this is a founder
    instance.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“创建新网络”作为平台角色，因为这是一个创始者实例。
- en: Choose the Standard edition, which will offer two CPUs, 50 GB storage, and two
    peers.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择标准版，该版本将提供两个 CPU、50 GB 存储和两个对等节点。
- en: Click Create Instance.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建实例。
- en: The instance goes to Creating status. Provisioning the blockchain instance takes
    a few minutes. Once the instance is created, the state changes to Active.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例转到创建状态。配置区块链实例需要几分钟时间。一旦实例创建完成，状态将变为活动。
- en: Click the service console to navigate to the founder’s blockchain instance.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击服务控制台以导航至创始者的区块链实例。
- en: 'At the blockchain instance dashboard, navigate to the Nodes tab. This tab lists
    all the nodes, as follows:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在区块链实例仪表板上，导航至节点选项卡。该选项卡列出所有节点，如下所示：
- en: With Standard edition, you will receive two peer nodes (`peer0` and `peer1`),
    three orderer nodes, one CA, and one proxy node. Also there will be a console
    node.
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用标准版，您将收到两个对等节点（`peer0` 和 `peer1`）、三个 Orderer 节点、一个 CA 和一个代理节点。还将有一个控制台节点。
- en: You will also get a `default` channel.
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还将获得一个 `default` 通道。
- en: Similarly, create other participant instances. However, while creating a participant
    instance, choose “Join a network” as the participant role.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，创建其他参与者实例。但是，在创建参与者实例时，请选择“加入网络”作为参与者角色。
- en: Create a blockchain network
  id: totrans-373
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个区块链网络
- en: Once the stakeholder instances are established, we will create a blockchain
    transaction network for blockchain instances, which will establish connectivity
    among blockchain instances and enable an underlying shared ledger infrastructure
    between them. To proceed, the initial task is to export the participant(s) organization
    certificate, and then import the participant(s) certificate to the founder organization.
    In the next step, export the Orderer setting from the founder, followed by importing
    the Orderer setting into the participant(s).
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦利益相关方实例建立完成，我们将为区块链实例创建区块链事务网络，这将在区块链实例之间建立连接，并在它们之间启用底层共享账本基础设施。要继续，初始任务是导出参与者组织证书，然后将参与者证书导入创始人组织。下一步是从创始人处导出
    Orderer 设置，然后将 Orderer 设置导入参与者处。
- en: Export participant(s) organization certificate
  id: totrans-375
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导出参与者组织证书
- en: 'A participant certificate contains keys for admin, CA, and TLS, along with
    its signature. It’s a JSON file. Follow these steps:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 参与者证书包含管理员、CA 和 TLS 的密钥，以及其签名。它是一个 JSON 文件。请按照以下步骤操作：
- en: Navigate to a participant(s) blockchain instance and go to their dashboard.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至参与者的区块链实例并转至他们的仪表板。
- en: Navigate to the Network tab.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至网络选项卡。
- en: Click the export certificate at one of the participants.
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其中一个参与者处点击导出证书。
- en: Repeat steps 1 to 3 for all other participants.
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对所有其他参与者重复步骤 1 到 3。
- en: Import participant(s) certificate to founder organization
  id: totrans-381
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将参与者证书导入创始人组织
- en: 'In this section, we will import participant certificates into the founder organization.
    Here are the steps:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将把参与者的证书导入创始人组织。以下是步骤：
- en: Go to the founder blockchain dashboard.
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到创始人区块链仪表板。
- en: Navigate to the Network tab.
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到“网络”选项卡。
- en: Click Add Organization.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加组织”。
- en: At the Add Organization dialog, browse the exported certificate’s JSON file
    and click Add.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加组织”对话框中，浏览导出的证书的 JSON 文件，然后点击“添加”。
- en: Once the file is added successfully, click Finish.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功添加文件后，点击“完成”。
- en: Export orderer setting from founder
  id: totrans-388
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从创始人导出 orderer 设置
- en: Next we will export the orderer configuration from the founder to the participant.
    Orderers are associated with founders, and to ensure that the same orderers validate
    the transaction submitted by participants, we recommend exporting the orderer
    setting from the founder and importing into participants.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将从创始人导出 orderer 配置到参与者。Orderers 与创始人关联，为了确保相同的 orderers 验证参与者提交的交易，我们建议将
    orderer 设置从创始人导出并导入到参与者。
- en: 'Orderer settings contain the founder’s certificate, signatures, and orderer
    endpoints, so follow these steps:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: Orderer 设置包含创始人的证书、签名和 orderer 终端点，因此请按照以下步骤进行：
- en: Go to the founder blockchain instance’s dashboard.
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到创始人区块链实例的仪表板。
- en: Navigate to the Network tab.
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到“网络”选项卡。
- en: Click Export Ordering Settings.
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“导出订单设置”。
- en: Download the JSON file, which will be imported at the participants.
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 JSON 文件，将在参与者处导入。
- en: Import orderer setting to participants
  id: totrans-395
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 orderer 设置导入到参与者
- en: 'Now we will import the orderer configuration to participants by following these
    steps:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将按照以下步骤将 orderer 配置导入到参与者：
- en: Go to the participant blockchain instance’s dashboard.
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到参与者区块链实例的仪表板。
- en: Navigate to the Network tab.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到“网络”选项卡。
- en: Click the Orderer setting.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 Orderer 设置。
- en: Choose the Import option.
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“导入”选项。
- en: Browse the founder’s orderer setting JSON file.
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览创始人的 orderer 设置 JSON 文件。
- en: Click Submit to import the orderer settings.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“提交”以导入 orderer 设置。
- en: Create the transaction infrastructure
  id: totrans-403
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建交易基础设施
- en: Once a blockchain network and instances are created and the orderer information
    is exchanged between the founder and participants, you can create the blockchain
    transaction infrastructure. Essentially, this step will define a shared ledger
    and the associated transacting blockchain instances to read or read/write to the
    shared ledger.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了区块链网络和实例，并且创始人与参与者之间交换了 orderer 信息，您就可以创建区块链交易基础设施。基本上，此步骤将定义一个共享账本和相关的用于读取或读/写到共享账本的交易区块链实例。
- en: Create a channel at the founder
  id: totrans-405
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在创始人处创建一个频道
- en: 'In this section, we will create channels. Channels include peers, the shared
    ledger, instantiated chaincode, and one or more orderers. Channels allow stakeholders
    (blockchain instances) to share data via a shared ledger. Follow these steps to
    create the channel:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建频道。频道包括对等方、共享账本、实例化的链代码以及一个或多个 orderers。频道允许利益相关者（区块链实例）通过共享账本共享数据。按照以下步骤创建频道：
- en: Go to the founder’s dashboard.
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到创始人的仪表板。
- en: Navigate to the Channels tab.
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到“频道”选项卡。
- en: Click Create a New Channel.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建新频道”。
- en: 'Enter the name of the channel: `**verifyed**` (lowercase).'
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入通道的名称：`**verifyed**`（小写）。
- en: Select one or more participant organizations.
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个或多个参与者组织。
- en: Choose the participant’s access control as per the access control defined in
    the preceding section.
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据前面定义的访问控制，选择参与者的访问控制。
- en: For each participant, select one or more peers to join the channel. We have
    selected `peer0` for both participants.
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个参与者，选择一个或多个对等体加入通道。我们为两个参与者选择了`peer0`。
- en: Click Submit to create the channel.
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击提交以创建通道。
- en: Add the participant’s peer node to the channel
  id: totrans-415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将参与者的对等节点添加到通道
- en: 'Once a channel is created at the founder instance, we will add a participant’s
    peer to the same channel. This ensures that transactions performed by client applications
    on the blockchain network are handled by the defined peer nodes. These peer node(s)
    will validate and execute chaincode and will perform RWSet (ReadWriteSet) creation.
    These RWSets are later submitted to orderer nodes for sequencing and adding to
    the ledger. Follow these steps to add a participant to the channel:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在创始人实例上创建了通道，我们将向相同通道添加参与者的对等节点。这确保了由客户端应用程序在区块链网络上执行的交易由定义的对等节点处理。这些对等节点将验证和执行链代码，并执行
    RWSet（ReadWriteSet）的创建。这些 RWSets 稍后会提交给排序节点进行排序并添加到分类帐中。按照以下步骤将参与者添加到通道：
- en: Go to the participants dashboard.
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到参与者仪表板。
- en: Click Nodes.
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击节点。
- en: Find the peer (`peer0`).
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到对等体（`peer0`）。
- en: Select “Join new channel.”
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“加入新通道”。
- en: Choose the channel `verifyed`.
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择通道`verifyed`。
- en: Click Submit.
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击提交。
- en: These steps will add the OBS and CV participant’s `peer0` to the channel.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤将向通道添加 OBS 和 CV 参与者的`peer0`。
- en: Tip
  id: totrans-424
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: You can check the blockchain platform and Hyperledger Fabric version by going
    to the Oracle Blockchain Platform console. Then locate your login username and
    click About. This displays the version number of the blockchain platform and the
    Hyperledger version number as well.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过访问 Oracle 区块链平台控制台来查看区块链平台和 Hyperledger Fabric 版本。然后找到你的登录用户名，点击“关于”。这会显示区块链平台和
    Hyperledger 版本号。
- en: Experience the Solution
  id: totrans-426
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 体验解决方案
- en: Now that we’ve defined the OBP instance, configured the OBP network infrastructure,
    and configured the OBP transaction infrastructure, we can focus on developing
    chaincode and verifying it. Let’s proceed with the final step of *adding the smartness*
    to our Fabric network by deploying and instantiating our Fabric chaincode.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了 OBP 实例，配置了 OBP 网络基础设施和 OBP 交易基础设施，我们可以专注于开发链代码并对其进行验证了。让我们继续通过将智能性添加到我们的
    Fabric 网络来部署和实例化我们的 Fabric 链代码的最后一步。
- en: Develop chaincode
  id: totrans-428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发链代码
- en: Chaincode can be developed in various languages like Go, Node.js, and Java.
    All chaincode needs to be packaged into a ZIP file for deployment. But if your
    chaincode is a single *.go* file, you can directly deploy and instantiate the
    chaincode on OBP without packaging it. For our use case, you can find the source
    code file *verifyed.go* at [*https://myhsts.org/hyperledger-fabric-book/*](https://myhsts.org/hyperledger-fabric-book/).
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 链码可以用各种语言编写，如 Go、Node.js 和 Java。所有链码都需要打包成 ZIP 文件进行部署。但如果你的链码是一个单独的 *.go* 文件，你可以直接在
    OBP 上部署和实例化链码，而不需要打包它。对于我们的用例，你可以在 [*https://myhsts.org/hyperledger-fabric-book/*](https://myhsts.org/hyperledger-fabric-book/)
    找到源代码文件 *verifyed.go*。
- en: Use OBP’s app builder
  id: totrans-430
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 OBP 的应用程序构建器
- en: OBP offers blockchain app builders to simplify and ease the process of chaincode
    development. OBP injects speed and agility to chaincode development. Platform
    autogenerates CRUD methods that can be used directly via REST APIs or can be invoked
    from custom functions. It supports various types of assets, including embedded
    assets (modular and nested asset structure) and user-controlled chaincode versioning.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: OBP 为区块链应用程序构建者提供了简化和简化链码开发过程的功能。OBP 为链码开发注入了速度和灵活性。平台自动生成 CRUD 方法，可通过 REST
    API 直接使用或从自定义函数中调用。它支持各种类型的资产，包括嵌入式资产（模块化和嵌套的资产结构）和用户控制的链码版本管理。
- en: 'OBP allows you to generate chaincode from a specification file, where you can
    specify assets in TypeScript (for Node.js chaincode) or Go (for Go chaincode).
    The specification file allows you to define multiple assets, their data mode,
    behaviors, and validation rules. It facilitates quick chaincode generation that
    can be tested on a local machine or on a preconfigured blockchain instance inside
    the blockchain app builder or by deploying on OBP network (cloud or on-premises
    edition). The platform includes two interfaces: CLI (command line) for CI/CD automation,
    and a Visual Studio Code extension for IDE-based interactive development.'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: OBP 允许您从规范文件生成链码，您可以在其中为 TypeScript（用于 Node.js 链码）或 Go（用于 Go 链码）指定资产。规范文件允许您定义多个资产、它们的数据模式、行为和验证规则。它促进了快速的链码生成，可以在本地机器上进行测试，或者通过在区块链应用程序构建器内的预配置区块链实例上部署到
    OBP 网络（云或本地版本）。该平台包括两个接口：用于 CI/CD 自动化的 CLI（命令行）和用于基于 IDE 的交互式开发的 Visual Studio
    Code 扩展。
- en: Deploy and instantiate the chaincode
  id: totrans-433
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署和实例化链码
- en: 'OBP offers two deployment options: quick and advanced. The quick deployment
    option can be used for testing and developing PoC. The advanced option is used
    for selected peers and the endorsement policy; thus, the steps for the advanced
    option are as follows:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: OBP 提供了两种部署选项：快速和高级。快速部署选项可用于测试和开发 PoC。高级选项用于选定的对等节点和背书策略；因此，高级选项的步骤如下：
- en: Go to the founder dashboard.
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到创始人仪表板。
- en: Navigate to the Chaincodes tab.
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至链码选项卡。
- en: Click Deploy a New Chaincode and then choose the Advanced option.
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击部署新链码，然后选择高级选项。
- en: In the Advanced Option dialog, enter the chain code name (`**verifyed**`) and
    chaincode version (v1). Choose the peer node (`peer0`) and select the chaincode
    source, which will be a single (dot) Go file.
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在高级选项对话框中，输入链码名称（`**verifyed**`）和链码版本（v1）。选择对等节点（`peer0`）并选择链码源，它将是一个单一（点）Go
    文件。
- en: Click Next to install (deploy) the chaincode.
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“下一步”以安装（部署）链码。
- en: After successful chaincode installation, the Advance Deployment dialog will
    jump to instantiate the chaincode option. Enter the channel name (`**verifyed**`).
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功安装链码后，高级部署对话框将跳转到实例化链码选项。输入频道名称（`**verifyed**`）。
- en: Select the peer (`peer0`) that will participate in the transactions and opt
    for the other default values.
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要参与交易的节点（`peer0`），并选择其他默认值。
- en: Click Next.
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“下一步”。
- en: REST proxies are enabled by default. The REST proxy for the founder and other
    participants is listed on the dashboard’s Node tab.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: REST 代理默认启用。创始人和其他参与者的 REST 代理列在仪表板的节点选项卡上。
- en: Deploy chaincode at participants
  id: totrans-444
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在参与者处部署链码
- en: Once the chaincode is deployed and instantiated at the founder node, you can
    navigate to the participant’s dashboard and go to the Chaincodes tab to deploy
    the same version of chaincode at all the participants since you don’t need to
    instantiate the chaincode. Once instantiated at the founder, the chaincode stays
    instantiated for all the participants because instantiation is specific to the
    channel, not to the organization or peer.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在创始人节点部署和实例化了链码，您可以导航到参与者的仪表板，然后转到链码选项卡，以在所有参与者处部署相同版本的链码，因为您不需要实例化链码。一旦在创始人处实例化，链码将保持实例化状态，因为实例化是特定于通道的，而不是特定于组织或对等方。
- en: Test the chaincode
  id: totrans-446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试链码
- en: Once chaincode is deployed and instantiated, you can invoke it via the REST
    proxy or by using a mock shim. OBP offers a REST proxy to connect to chaincode
    via REST endpoints. Post instantiation, the ledger is empty, so let’s proceed
    with running a test.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 链码部署和实例化后，您可以通过 REST 代理或使用模拟的 shim 来调用它。OBP 提供了一个 REST 代理，通过 REST 端点连接到链码。在实例化后，分类帐是空的，因此让我们继续进行测试。
- en: 'First, navigate to the founder or participant’s dashboard and go to the Nodes
    tab. The `RESTPROXY` node is enabled. Copy this URL for the REST proxy:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导航到创始人或参与者的仪表板，然后转到节点选项卡。启用了 `RESTPROXY` 节点。复制此 URL 以用于 REST 代理：
- en: '*https://<blockchain instance name>-<tenancy>-region.blockchain.ocp.oraclecloud.com:port/restproxy*'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '*https://<blockchain instance name>-<tenancy>-region.blockchain.ocp.oraclecloud.com:port/restproxy*'
- en: 'Next, send a request for the `restproxy` endpoints, which are in JSON format
    and contain channel and chaincode information. Because you can configure multiple
    chaincodes in a single REST proxy, channel and chaincode information helps in
    dispatching the request to the correct chaincode. Every call should contain authorization
    and content type. Also, the REST proxy offers two target endpoints: *transaction/invocation*
    and *transaction/query*. You can use any REST testing tool like Postman or ReadyAPI
    to test the rest endpoint. The header has the following three parts:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，发送对`restproxy`端点的请求，它们以JSON格式并包含通道和链码信息。因为您可以在单个REST代理中配置多个链码，通道和链码信息有助于将请求发送到正确的链码。每次调用都应包含授权和内容类型。另外，REST代理提供两个目标端点：*transaction/invocation*和*transaction/query*。您可以使用像Postman或ReadyAPI这样的任何REST测试工具来测试REST端点。标头有以下三个部分：
- en: Authorization
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 授权
- en: Use your Oracle cloud username and password.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您的Oracle云用户名和密码。
- en: Content-Type
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 内容类型
- en: Use *application/json*.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*application/json*。
- en: Target Endpoint
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 目标端点
- en: 'Use this format: *https://<blockchaininstancename>-<tenancy>-region.blockchain.ocp.oraclecloud.com:port/restproxy/bcsgw/rest/v1/transaction/invocation*'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此格式：*https://<blockchaininstancename>-<tenancy>-region.blockchain.ocp.oraclecloud.com:port/restproxy/bcsgw/rest/v1/transaction/invocation*
- en: 'Once the testing step is completed, you can perform an invocation to insert
    the certificate receiver information. Set the target endpoint to `/invocation`
    and the target method to `insertReceiver`. Also, set `Input JSON` as shown here:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦测试步骤完成，您可以执行调用以插入证书接收者信息。将目标端点设置为`/invocation`，目标方法设置为`insertReceiver`。另外，设置`Input
    JSON`如下所示：
- en: '[PRE29]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'For the final step, we query the endpoint. Similarly to querying a certificate
    owner (receiver), you can query it by its ID, using the query endpoint with three
    parameters: the target endpoint (`/query`), the target method (`queryReceiverById`),
    and `Input JSON`:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最后一步，我们查询端点。与查询证书所有者（接收者）类似，您可以通过其ID查询它，使用具有三个参数的查询端点：目标端点（`/query`），目标方法（`queryReceiverById`）和`Input
    JSON`：
- en: '[PRE30]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Verify transactions at the ledger
  id: totrans-461
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证分类账上的交易。
- en: 'Each channel has only one ledger, which is shared by the founder and participating
    organizations. OBP offers the option to view transaction blocks on the shared
    ledger for a given channel. Follow these steps to access the ledger and view transactions:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '每个通道只有一个分类账，由创始人和参与组织共享。OBP提供了在给定通道上查看共享分类账上的交易块的选项。按照以下步骤访问分类账并查看交易： '
- en: Go to the founder dashboard.
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到创始人仪表板。
- en: Navigate to the channel.
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至通道。
- en: Choose the channel `verifyed`.
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择通道`verifyed`。
- en: Click the ledger.
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击分类账。
- en: This lists all the blocks on the ledger. You can find blocks from the genesis
    to the latest blocks. It also segregates user transactions from system and genesis
    blocks. It is evident that each block stores various information such as transaction
    ID, status, chaincode name, method name, arguments, results, initiator, and endorser.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 这列出了分类账上的所有区块。您可以从创世区块到最新区块找到区块。它还将用户交易与系统和创世区块分开。很明显，每个区块都存储了诸如交易ID、状态、链码名称、方法名称、参数、结果、发起者和背书者等各种信息。
- en: Summary
  id: totrans-468
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to deploy Fabric on AWS, IBM, and Oracle cloud
    platforms. We started out with a discussion on the Amazon cloud platform. You
    learned to set up Amazon Managed Blockchain services, a Fabric network, and a
    Fabric client to run and manage chaincodes. We completed our AWS journey by configuring
    and running the Fabric application.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何在 AWS、IBM 和 Oracle 云平台上部署 Fabric。我们从讨论 Amazon 云平台开始。您学会了设置 Amazon
    托管的区块链服务、一个 Fabric 网络和一个 Fabric 客户端来运行和管理链码。通过配置和运行 Fabric 应用程序，我们完成了 AWS 之旅。
- en: Next we explained the features, considerations, and capabilities of the IBM
    cloud platform for building Fabric applications. Specifically, we showed you how
    to create and join a Fabric network on IBM Cloud, including how to build a Fabric
    network and create an orderer or a channel. We concluded our IBM section by going
    over smart contract deployment on IBM Cloud.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们解释了 IBM 云平台用于构建 Fabric 应用程序的特性、注意事项和能力。具体来说，我们向您展示了如何在 IBM 云上创建和加入 Fabric
    网络，包括如何构建一个 Fabric 网络和创建一个排序器或通道。通过在 IBM 云上部署智能合约，我们结束了 IBM 部分。
- en: Finally, we explored the Oracle Blockchain Platform, its offerings, and architecture.
    We delved into defining business topology, access control, partitions, assets,
    and transactions. In addition, you experimented with Oracle Blockchain Platform
    to experience the ease of setting up a Fabric network and deploying and testing
    chaincodes.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们探讨了 Oracle 区块链平台、其提供的服务和架构。我们深入探讨了定义业务拓扑、访问控制、分区、资产和交易。此外，您还通过实验了解了 Oracle
    区块链平台，体验了在其中设置 Fabric 网络、部署和测试链码的简便性。
- en: The next chapter covers the new features of Hyperledger Fabric v2, such as new
    chaincode application patterns and an external chaincode launcher. We also discuss
    how to update Fabric components as well as the capability level of a channel.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章介绍了 Hyperledger Fabric v2 的新特性，例如新的链码应用模式和外部链码启动器。我们还讨论了如何更新 Fabric 组件以及通道的能力级别。
