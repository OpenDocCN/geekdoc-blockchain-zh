- en: '[Chapter 1](contents.xhtml#re_chapter1)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[第1章](contents.xhtml#re_chapter1)'
- en: '[Distributed Computing and/or Distributed Database Systems](contents.xhtml#re_chapter1)'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[分布式计算与/或分布式数据库系统](contents.xhtml#re_chapter1)'
- en: K. P. Arjun, N. M. Sreenarayanan, K. Sampath Kumar, and R. Viswanathan
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: K. P. Arjun, N. M. Sreenarayanan, K. Sampath Kumar, and R. Viswanathan
- en: Contents
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Contents
- en: '[1.1 Introduction to Computing](chapter1.xhtml#ch-1-sec-1)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.1 计算导论](chapter1.xhtml#ch-1-sec-1)'
- en: '[1.2 Evolution of Distributed Computing](chapter1.xhtml#ch-1-sec-2)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.2 分布式计算的演变](chapter1.xhtml#ch-1-sec-2)'
- en: '[1.2.1 Centralized Computing](chapter1.xhtml#ch-1-sec-3)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.2.1 中心化计算](chapter1.xhtml#ch-1-sec-3)'
- en: '[1.2.2 Decentralized Computing](chapter1.xhtml#ch-1-sec-4)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.2.2 去中心化计算](chapter1.xhtml#ch-1-sec-4)'
- en: '[1.2.3 Parallel Computing](chapter1.xhtml#ch-1-sec-5)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.2.3 并行计算](chapter1.xhtml#ch-1-sec-5)'
- en: '[1.3 High-Performance Distributed and Parallel Computing](chapter1.xhtml#ch-1-sec-6)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.3 高性能分布式和并行计算](chapter1.xhtml#ch-1-sec-6)'
- en: '[1.3.1 Parallel Computing](chapter1.xhtml#ch-1-sec-7)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.3.1 并行计算](chapter1.xhtml#ch-1-sec-7)'
- en: '[1.3.1.1 Bit-Level, Instruction-Level and Task-Level Parallel Computing](chapter1.xhtml#ch-1-sec-8)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.3.1.1 比特级、指令级和任务级并行计算](chapter1.xhtml#ch-1-sec-8)'
- en: '[1.3.2 Distributed Computing](chapter1.xhtml#ch-1-sec-9)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.3.2 分布式计算](chapter1.xhtml#ch-1-sec-9)'
- en: '[1.3.3 Architecture of Distributed Computing](chapter1.xhtml#ch-1-sec-10)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.3.3 分布式计算架构](chapter1.xhtml#ch-1-sec-10)'
- en: '[1.3.3.1 Physical Architecture of Distributed Computing](chapter1.xhtml#ch-1-sec-11)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.3.3.1 分布式计算的物理架构](chapter1.xhtml#ch-1-sec-11)'
- en: '[1.3.3.2 Software Architecture of Distributed Computing](chapter1.xhtml#ch-1-sec-12)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.3.3.2 分布式计算的软件架构](chapter1.xhtml#ch-1-sec-12)'
- en: '[1.4 Comparison of Distributed Computing with State of the Art](chapter1.xhtml#ch-1-sec-17)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.4 分布式计算与前沿技术的比较](chapter1.xhtml#ch-1-sec-17)'
- en: '[1.4.1 Distributed Computing versus Parallel Computing](chapter1.xhtml#ch-1-sec-18)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.4.1 分布式计算与并行计算的比较](chapter1.xhtml#ch-1-sec-18)'
- en: '[1.4.2 Distributed Database Systems](chapter1.xhtml#ch-1-sec-19)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.4.2 分布式数据库系统](chapter1.xhtml#ch-1-sec-19)'
- en: '[1.4.3 Traditional versus Distributed Databases](chapter1.xhtml#ch-1-sec-20)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.4.3 传统数据库与分布式数据库的比较](chapter1.xhtml#ch-1-sec-20)'
- en: '[1.4.4 Distributed Computing and Blockchain](chapter1.xhtml#ch-1-sec-21)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.4.4 分布式计算与区块链](chapter1.xhtml#ch-1-sec-21)'
- en: '[1.5 Distributed Computing Environment of Blockchain](chapter1.xhtml#ch-1-sec-22)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.5 区块链的分布式计算环境](chapter1.xhtml#ch-1-sec-22)'
- en: '[1.5.2 Distributed Computing Architecture](chapter1.xhtml#ch-1-sec-23)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.5.2 分布式计算架构](chapter1.xhtml#ch-1-sec-23)'
- en: '[1.5.2.1 Client–Server Architecture](chapter1.xhtml#ch-1-sec-24)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.5.2.1 客户端-服务器架构](chapter1.xhtml#ch-1-sec-24)'
- en: '[1.5.2.2 Peer-to-Peer Architecture](chapter1.xhtml#ch-1-sec-25)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.5.2.2 对等网络架构](chapter1.xhtml#ch-1-sec-25)'
- en: '[1.6 Distributed Ledger in Blockchain](chapter1.xhtml#ch-1-sec-26)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.6 区块链中的分布式账本](chapter1.xhtml#ch-1-sec-26)'
- en: '[1.6.1 Computing Power and Breakthroughs in Cryptography](chapter1.xhtml#ch-1-sec-27)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.6.1 密码学计算能力和突破](chapter1.xhtml#ch-1-sec-27)'
- en: '[1.6.2 Public and Private Blockchain](chapter1.xhtml#ch-1-sec-28)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.6.2 公有链与私有链](chapter1.xhtml#ch-1-sec-28)'
- en: '[1.7 Conclusion](chapter1.xhtml#ch-1-sec-29)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.7 结论](chapter1.xhtml#ch-1-sec-29)'
- en: '[References](chapter1.xhtml#b-9781000175257-bib1)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[References](chapter1.xhtml#b-9781000175257-bib1)'
- en: '[1.1 Introduction to Computing](chapter1.xhtml#re_ch-1-sec-1)'
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[1.1 计算导论](chapter1.xhtml#re_ch-1-sec-1)'
- en: Computing involves process-oriented step-by-step tasks to complete a goal-oriented
    computation. A goal is not a simple or single rather there may be more than one
    goal. Normally we can say that a goal is a complex operation that is processed
    using a computer. A normal computer contains hardware and software; and computing
    can also involve more than one computing environment in hardware like workstations,
    servers, clients and other intermediate nodes and software like a workstation
    Operating System, server operating system and other computing software. The computing
    in our daily life includes sending emails, playing games or making phone calls;
    these are different kinds of computing examples at different contextual levels.
    Depending on the processing speed and size, computers are categorized into different
    types like supercomputers, mainframes, minicomputers and microcomputers. The computing
    power of a device is directly proportional to its data-storing capacity.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 计算涉及以过程为导向的逐步任务来实现目标导向的计算。一个目标不是一个简单或单一的目标，而可能会有多个目标。我们通常可以说，一个目标是计算机处理的复杂操作。一台普通的计算机包含硬件和软件；计算也可能涉及硬件中的多个计算环境，如工作站、服务器、客户端和其他中间节点，以及软件如工作站操作系统、服务器操作系统和其他计算软件。我们日常生活中的计算包括发送电子邮件、玩游戏或打电话；这些是在不同上下文级别上的不同类型的计算示例。根据处理速度和大小，计算机被分为不同类型，如超级计算机、大型计算机、迷你计算机和微型计算机。设备的计算能力与其数据存储容量成正比。
- en: All software is developed in a sequential way which means that before developing
    software to solve a large problem, we split the problem into smaller sub problems.
    These sub problems broken down step by step or in a flowchart are called algorithms.
    These algorithms are executed by the central processing unit (CPU). We can call
    this serial computing, as the main task is divided into a number of small instructions,
    then these instructions are executed one by one. But in the main, this serial
    communication is a huge waste of the hardware other than the CPU. The CPU is continuously
    taking instructions and processing those instructions. The hardware contributing
    to processing that specific hardware is used for that particular time only, and
    for the remaining time that hardware is idle.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所有软件都是按顺序开发的，这意味着在开发解决大型问题的软件之前，我们将问题分解成更小的子问题。这些逐步或用流程图分解的子问题被称为算法。这些算法由中央处理单元（CPU）执行。我们可以称这为串行计算，因为主要任务被分成许多小指令，然后这些指令逐一执行。但总的来说，这种串行通信是对除CPU之外的其他硬件的巨大浪费。CPU持续地接收指令并处理这些指令。用于处理特定硬件的硬件仅在该特定时间使用，而剩余时间该硬件是空闲的。
- en: So to overcome the deficiencies in resource utilization and improve the computing
    power we moved into another era of computing called parallel computing and distributed
    computing. The insight of distributed computing is in solving more complex and
    larger computational problems with the help of more than one computational system.
    The computational problem is divided into many tasks, each of which is executed
    in different computational systems that are located in different regions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了克服资源利用的不足并提高计算能力，我们进入了另一时代的计算，称为并行计算和分布式计算。分布式计算的洞察力是利用多个计算系统解决更复杂、更大的计算问题。计算问题被分成许多任务，每个任务都在位于不同地区的不同计算系统中执行。
- en: '[1.2 Evolution of Distributed Computing](chapter1.xhtml#re_ch-1-sec-2)'
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[1.2 分布式计算的演变](chapter1.xhtml#re_ch-1-sec-2)'
- en: Distributed computing [[1](#re_TNF-CH001_CIT00001)] is concurrent processing
    of multiple processes at the same time. Distributed computing works on various
    very important concepts like multiprogramming and multitask programming. Finally
    distributed computing has been included in the branch of computer science and
    engineering since the 1970s. Since then many international conferences like the
    Symposium on Principles of Distributed Computing (PODC), International Symposium
    on Distributed Computing (DISC), etc. and international workshops like the International
    Workshop on Distributed Algorithms [[2](#re_TNF-CH001_CIT00002)] on Graphs have
    been conducted.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式计算[[1](#re_TNF-CH001_CIT00001)]是同时处理多个进程的并发处理。分布式计算基于多程序设计和多任务编程等非常重要的概念。自20世纪70年代以来，分布式计算已被纳入计算机科学与工程专业。从那时起，举行了诸如分布式计算原理研讨会（PODC）、国际分布式计算研讨会（DISC）等许多国际会议，以及关于图的分布式算法国际研讨会[[2](#re_TNF-CH001_CIT00002)]等国际研讨会。
- en: '[1.2.1 Centralized Computing](chapter1.xhtml#re_ch-1-sec-3)'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[1.2.1 集中计算](chapter1.xhtml#re_ch-1-sec-3)'
- en: The name “centralized computing” refers to computing that occurs in a central
    situated machine. The specifications of the central computing server machine include
    high computing capabilities and sophisticated software. All other computers are
    attached to the central situated machine and communicate through terminals. The
    centralized machine [[3](#re_TNF-CH001_CIT00003)] itself controls and manages
    the peripherals, some of which are physically connected and some of which are
    attached via terminals.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: “集中计算”这个名称指的是在位于中心的机器上进行的计算。中心计算服务器的机器规格包括高计算能力和复杂的软件。其他所有计算机都连接到中心机器，并通过终端进行通信。中心机器[[3](#re_TNF-CH001_CIT00003)]本身控制和管理外围设备，其中一些是物理连接的，一些则是通过终端连接的。
- en: The main advantage of centralized system is greater security compared to other
    types of computing because the processing is only done at the centrally located
    machine. All the connected machines can access the centralized processing machine
    and start processing their own task by using terminals. If one terminal goes down,
    then the user can use another terminal and log in again. All the user-related
    files are still available with that particular user login. The user can resume
    their session and complete the task.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 集中系统的主要优点是与其他类型的计算相比安全性更高，因为处理只在位于中心的机器上进行。所有连接的计算机可以通过终端访问中心处理机器并开始处理自己的任务。如果一个终端出现问题，用户可以使用另一个终端重新登录。所有与用户相关的文件在用户登录时仍然可用。用户可以恢复他们的会话并完成任务。
- en: The main and most important disadvantage of the centralized computing system
    is that all computing and storage is done at centrally located machine. If the
    machine fails or crashes the entire system will go down. It affects the performance
    evaluation on unavailability of service.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 集中计算系统的最主要缺点是所有的计算和存储都集中在位于中心的机器上完成。如果这台机器发生故障或崩溃，整个系统将会瘫痪。它影响了服务不可用性的性能评估。
- en: '[Figure 1.1](chapter1.xhtml#fig1.1) shows a block diagram of centralized computing.
    Centralized systems are somewhat related to client–server programming [[5](#re_TNF-CH001_CIT00005)].
    The client has minimum computing power, but for advanced and high-level computing,
    client requests for the server. The server computes the request received from
    the client and sends the response back to the client.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 显示了集中计算的块图。集中系统与客户端-服务器编程[[5](#re_TNF-CH001_CIT00005)]有一定的关系。客户端具有最小的计算能力，但对于高级和高层次的计算，客户端请求服务器。服务器计算来自客户端的请求并将响应发送回客户端。
- en: '![](../images/fig1.1.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig1.1.jpg)'
- en: Figure 1.1 Centralized computing.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 集中计算。
- en: '[1.2.2 Decentralized Computing](chapter1.xhtml#re_ch-1-sec-4)'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[1.2.2 分布式计算](chapter1.xhtml#re_ch-1-sec-4)'
- en: In centralized computing, a centrally located powerful system provides computing
    services to all other nodes connected. The disadvantage is that all processing
    power is located at one entity. Alternatively, the burden at the central level
    can be shared by the nodes connected on the network. In decentralized computing
    [[6](#re_TNF-CH001_CIT00006)] a single server is not responsible for the whole
    task. The whole workload is distributed to the computing nodes so that each computing
    node has equal processing power.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在集中计算中，一个位于中心的强大系统为所有其他连接的节点提供计算服务。缺点是所有的处理能力都集中在单一实体上。作为替代，网络上的节点可以共享中心级别的负担。在分布式计算[[6](#re_TNF-CH001_CIT00006)]中，单个服务器不负责整个任务。整个工作负载分布到计算节点上，以便每个计算节点具有相等的处理能力。
- en: '[1.2.3 Parallel Computing](chapter1.xhtml#re_ch-1-sec-5)'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[1.2.3 并行计算](chapter1.xhtml#re_ch-1-sec-5)'
- en: To overcoming the deficiencies in resource utilization and improve the computing
    power we moved into another era of computing called parallel computing. The name
    “parallel” means that more than one instruction can be executed simultaneously.
    It requires the configuration of a number of computing engines (normally called
    “processors”) and related hardware and also software configuration.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服资源利用的不足并提高计算能力，我们进入了另一时代的计算，称为并行计算。“并行”意味着可以同时执行多个指令。这需要配置多个计算引擎（通常称为“处理器”）和相关硬件，以及软件配置。
- en: '[1.3 High-Performance Distributed and Parallel Computing](chapter1.xhtml#re_ch-1-sec-6)'
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[1.3 高性能分布式和并行计算](chapter1.xhtml#re_ch-1-sec-6)'
- en: '[1.3.1 Parallel Computing](chapter1.xhtml#re_ch-1-sec-7)'
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[1.3.1 并行计算](chapter1.xhtml#re_ch-1-sec-7)'
- en: In a CPU, a main task is divided into a number of small instructions, and then
    these instructions are executed one by one. The main problem with the serial communication
    is wastage of large amount of resources in terms of hardware and software resources.
    CPU continuously receives instructions and process them. The hardware involved
    in serial processing remains idle in case there are no instructions to be processed.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在CPU中，一个主要任务被划分为多个小指令，然后逐一执行这些指令。串行通信的主要问题是，在硬件和软件资源方面浪费了大量资源。CPU持续接收指令并处理它们。在串行处理中涉及的硬件在没有指令需要处理时会闲置。
- en: To overcome the deficiencies in resource utilization and to improve the computing
    power we moved into another era of computing called parallel computing [[7](#re_TNF-CH001_CIT00007)].
    The name “parallel” means that more than one instruction can be executed simultaneously.
    It requires the configuration of a number of computing engines (normally called
    “processors”) and related hardware and also software configuration. [Figure 1.2](chapter1.xhtml#fig1.2)
    shows the levels of parallel computing.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服资源利用的不足并提高计算能力，我们进入了被称为并行计算的另一个计算时代[[7](#re_TNF-CH001_CIT00007)]。"并行"这个名字意味着可以同时执行多个指令。它需要配置多个计算引擎（通常称为“处理器”）和相关硬件，同时也需要软件配置。图1.2展示了并行计算的不同级别。
- en: '![](../images/fig1.2.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig1.2.jpg)'
- en: Figure 1.2 Different levels of parallel computing.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 不同级别的并行计算。
- en: '[1.3.1.1 Bit-Level, Instruction-Level and Task-Level Parallel Computing](chapter1.xhtml#re_ch-1-sec-8)'
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[1.3.1.1 位级、指令级和任务级并行计算](chapter1.xhtml#re_ch-1-sec-8)'
- en: '[Figure 1.1](chapter1.xhtml#fig1.1) depicts the parallel computing at various
    levels. The levels are bit-level, instruction-level and task-level. It is a complex
    type of computing because here we are adding more than one processor and the processors
    are supporting hardware and software. So in serial we deal with only one instruction
    and processor, but the challenges split the whole work into small pieces, and
    these small tasks are given to different computational machines. Every computation
    machine is independent and concurrently processing with the help of the others.
    Each machine deals with its own task and finally collaborates with the others
    as a single unit. Parallel computing added over all coordination of the execution
    engines [[8](#re_TNF-CH001_CIT00008)] is one of the multifaceted problems. Parallel
    computing can be utilized to convert real-world scenarios to more convenient formats.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[图1.1](chapter1.xhtml#fig1.1)展示了不同级别的并行计算。这些级别包括位级、指令级和任务级。这是一种复杂的计算类型，因为在这里我们添加了多个处理器，并且这些处理器支持硬件和软件。所以在串行中，我们只处理一个指令和一个处理器，但挑战是将整个工作分成小块，这些小块任务被分配给不同的计算机器。每一台计算机器都是独立的，并在其他机器的帮助下并发地处理。每台机器处理自己的任务，最后与其他机器协作作为一个单一实体。并行计算增加了执行引擎的整体协调[[8](#re_TNF-CH001_CIT00008)]，这是多方面问题之一。并行计算可以用来将现实世界的场景转换成更方便的格式。'
- en: The main utility of parallel computing is in solving real-world problem-as more
    complex, independent and unrelated events will occur at the same time, for example,
    galaxy formation, planetary movements, climate changes, road traffic, weather,
    etc.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 并行计算的主要用途在于解决现实世界问题，因为更复杂、独立且不相关的事件会同时发生，例如，星系形成、行星运动、气候变化、道路交通、天气等。
- en: The advantage of fast computing is helpful in various high-end applications,
    for example, faster networks, high speed data transfer, distributed systems and
    multi-processor computing [[10](#re_TNF-CH001_CIT00010)], etc.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 快速计算的优点在高档应用中很有帮助，例如，更快的网络、高速数据传输、分布式系统和多处理器计算[[10](#re_TNF-CH001_CIT00010)]等。
- en: '[1.3.2 Distributed Computing](chapter1.xhtml#re_ch-1-sec-9)'
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[1.3.2 分布式计算](chapter1.xhtml#re_ch-1-sec-9)'
- en: The distributed computing insight lies in solving more complex and larger computational
    problems with the help of more than one computational system. The computational
    problem is divided into many tasks, each of which is executed in different computational
    systems that are located in different regions. Different computational systems
    located at different places communicate through strong base network communication
    technology. There are many communication mechanisms that have been adopted for
    strong and secure communications like message passing, RPC and HTTP mechanisms,
    etc.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式计算的洞察力在于利用多个计算系统来解决更复杂、更大的计算问题。计算问题被分成许多任务，每个任务都在不同地理位置的不同计算系统中执行。位于不同地点的不同计算系统通过强大的基础网络通信技术进行通信。已经采用了多种通信机制来实现强大而安全的通信，如消息传递、RPC
    和 HTTP 机制等。
- en: Another way we can describe distributed computing is as different computational
    engines which are all autonomous, physically present in different geographical
    areas, and communicating with the help of a computer network. Each computational
    engine is called an autonomous system. Each autonomous system has its own hardware
    and software. Actually they will not share their hardware or software with another
    system that is located in another region. But they are continuously communicating
    by using the message-passing mechanism.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用另一种方式来描述分布式计算，即所有都是自主的、物理上位于不同地理区域的计算引擎，并通过计算机网络进行通信。每个计算引擎称为自主系统。每个自主系统都有自己的硬件和软件。实际上，他们不会将与位于另一个区域的另一个系统共享硬件或软件。但他们持续使用消息传递机制进行通信。
- en: The main idea behind distributed computing is overcoming the limitations of
    computing like low processing power, speed and memory. Each computer is connected
    by using a single network. The duties of each computing engine are to do the assigned
    jobs and communicate to peer computers that are connected in the network.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式计算背后的主要思想是克服计算的限制，如处理能力低、速度慢和内存小。每台计算机都通过一个网络连接起来。每个计算引擎的职责是执行分配的任务并与网络中连接的
    peer 计算机进行通信。
- en: A feature of the connected nodes or computers is that each one has its own hardware
    including memory, processor and IO devices, and software like operating systems
    and distributed software.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 连接节点或计算机的一个特性是，每个都有自己的硬件，包括内存、处理器和 I/O 设备，以及像操作系统和分布式软件这样的软件。
- en: The entirety of communication happens through the message-passing mechanism.
    [Figure 1.3](chapter1.xhtml#fig1.3) represents the message-passing mechanism.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的通信都是通过消息传递机制进行的。[图 1.3](chapter1.xhtml#fig1.3) 表示消息传递机制。
- en: '![](../images/fig1.3.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig1.3.jpg)'
- en: Figure 1.3 Message-passing method.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 消息传递方法。
- en: '[1.3.3 Architecture of Distributed Computing](chapter1.xhtml#re_ch-1-sec-10)'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[1.3.3 分布式计算的架构](chapter1.xhtml#re_ch-1-sec-10)'
- en: '[1.3.3.1 Physical Architecture of Distributed Computing](chapter1.xhtml#re_ch-1-sec-11)'
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[1.3.3.1 分布式计算的物理架构](chapter1.xhtml#re_ch-1-sec-11)'
- en: Distributed computing has much architecture related to the application and complexity
    of algorithms proposed at the software and hardware levels. At the high model,
    interconnection of running state of the processes on the connected CPUs in the
    network. [Figure 1.4](chapter1.xhtml#fig1.4) shows a physical representation of
    distributed computing.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式计算有很多与应用程序和提出的软件和硬件级别算法复杂性相关的架构。在高级模型中，是网络中连接 CPU 的运行状态的过程的互联。图 1.4（[图 1.4](chapter1.xhtml#fig1.4)）展示了分布式计算的物理表示。
- en: '![](../images/fig1.4.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig1.4.jpg)'
- en: Figure 1.4 Physical block diagram of distributed computing.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 分布式计算的物理块图。
- en: All distributed computing uses one of the architecture types listed below. Each
    architecture type is slightly different from the others depending on the basis
    of the computing.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 所有分布式计算都使用以下列出的架构类型中的一种。每种架构类型在计算基础上与其他类型略有不同。
- en: There are mainly two type of architecture; we can normally say that one is tightly
    coupled or loosely coupled. The name “tightly coupled distributed architecture”
    means that all nodes or machines are connected through a highly integrated network.
    It seems like all the computing engines work as a single machine. This architecture
    creates an illusion of a single machine but in the background different machines
    are connected via a fast network and memory is shared through distributed shared
    memory (DSM) without using the message-passing technology. Distributed shared
    memory (DSM) creates an illusion in this architecture of sharing memory in a network
    of connected nodes. Actually sharing memory is a big challenge because we have
    to consider the traffic across the network. The next architecture, “loosely coupled”,
    does not share any hardware like memory processing power. The nodes just communicate
    together.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 架构主要有两种类型；我们通常可以说一种是紧耦合或松耦合。 “紧耦合分布式架构”的名称意味着所有节点或机器通过一个高度集成的网络连接在一起。似乎所有的计算引擎都作为一台单一的机器工作。这种架构创造了一个单一机器的幻觉，但在后台，不同的机器通过快速的网络连接，并通过分布式共享内存（DSM）共享内存，而不使用消息传递技术。分布式共享内存（DSM）在这架构中创造了在连接节点的网络中共享内存的幻觉。实际上共享内存是一个很大的挑战，因为我们必须考虑网络上的流量。下一个架构，“松耦合”，不共享任何硬件，如内存、处理能力。节点只是相互通信。
- en: Other variations of architecture are client–server, three-tier, n-tier and peer-to-peer.
    The first one, client–server architecture, involves normal communication between
    the client and server. The client requests data from the server and then formats
    and displays it to the user. The second type is normally used for web application
    development. The result of this architecture simplifies the web application development.
    The third type is n-tier architecture, which is also used for enterprise web application
    development. This type of architecture is highly responsible for the success of
    the software framework for creating web applications. The last type, peer-to-peer
    architecture, includes any specific system or one system that provides services
    or manages network resources. All the work is equally divided among all the machines
    and each machine will serve that particular responsibility assigned only for that
    machine, which is called a peer. It acts as both server and client.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 其他的架构变体包括客户端-服务器、三层、n层和对等网络。第一种，客户端-服务器架构涉及客户端和服务器之间的正常通信。客户端从服务器请求数据，然后对其进行格式化并显示给用户。第二种通常用于Web应用程序开发。这种架构简化了Web应用程序开发。第三种是n层架构，也用于企业Web应用程序开发。这种架构对于软件框架创建Web应用程序的成功负有很大的责任。最后一种，对等网络架构包括任何特定的系统或一个提供服务或管理网络资源的系统。所有的工作平均分配给所有的机器，每台机器将服务于分配给该机器的特定责任，这称为一个对等体。它充当服务器和客户端的角色。
- en: '[1.3.3.2 Software Architecture of Distributed Computing](chapter1.xhtml#re_ch-1-sec-12)'
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[1.3.3.2 分布式计算的软件架构](chapter1.xhtml#re_ch-1-sec-12)'
- en: <h---5 class="H3" id="ch-1-sec-13">1.3.3.2.1 Layered Architectures</h---5>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <h---5 class="H3" id="ch-1-sec-13">1.3.3.2.1 分层架构</h---5>
- en: Layered architectures involve the division of responsibilities among software
    components and the placement of components at different locations in computers.
    Layered architectures divide the whole task into different levels, and each level
    communicates with the others and gives services to both upper layers and lower
    layers. The OSI model is a well-known example of layered architecture. The communication
    between each layer to adjacent layers, either the upper layer or lower layer,
    is in sequential order. So the communication request follows in the bottom to
    top order, and the response follows from top to bottom order. [Figure 1.5](chapter1.xhtml#fig1.5)
    shows the layered architecture of distributed computing.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 分层架构涉及在软件组件之间分配职责，以及在计算机中将组件放置在不同的位置。分层架构将整个任务划分为不同的层次，每个层次与其它层次进行通信，并向上下层次提供服务。OSI模型是分层架构的一个著名例子。每层与相邻层（无论是上层还是下层）之间的通信是按顺序进行的。因此，通信请求从下到上顺序进行，响应则从上到下顺序进行。[图1.5](chapter1.xhtml#fig1.5)展示了分布式计算的分层架构。
- en: '![](../images/fig1.5.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig1.5.jpg)'
- en: Figure 1.5 Layered architecture of distributed computing.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5 分布式计算的分层架构。
- en: The advantage of this architecture is that there is a sequential order for request
    and response. Each layer has its already predefined duty so there is no confusion
    about processing the request. We can easily update or replace each layer according
    to our application without affecting the entire architecture. [Figure 1.6](chapter1.xhtml#fig1.6)
    represents the basic architecture style of a distributed system.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构的优点是请求和响应有一个顺序顺序。每一层都有其预定义的职责，所以处理请求不会有任何混淆。我们可以根据应用程序轻松地更新或替换每一层，而不会影响整个架构。[图1.6](chapter1.xhtml#fig1.6)
    代表分布式系统的基本架构风格。
- en: '![](../images/fig1.6.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig1.6.jpg)'
- en: Figure 1.6 Object-based architecture of distributed computing.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6 分布式计算的对象基础架构。
- en: <h---5 class="H3" id="ch-1-sec-14">1.3.3.2.2 Object-Based Architectures</h---5>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: <h5 class="H3" id="ch-1-sec-14">1.3.3.2.2 基于对象的建筑</h5>
- en: This style of architecture is used for loosely coupled arrangements of systems.
    This loosely coupled system [[12](#re_TNF-CH001_CIT00012)] cannot follow the sequential
    order architecture like layered. In this architecture each component is referred
    to as an object; each object in a system communicates with other objects through
    an interface.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构风格用于松耦合的系统安排。这种松耦合系统[如文献[12](#re_TNF-CH001_CIT00012)]无法遵循像分层那样的顺序架构。在这种架构中，每个组件都被称为一个对象；系统中的每个对象都通过接口与其他对象进行通信。
- en: Objects are the incorporation of data and methods into a single unit. Communication
    flows from one object of a system A to an object in a system B through remote
    procedure call. Examples of this method are CORBA, DCOM, .Net Remoting and Java
    RMI. It is the one of most important architecture types in large software systems.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对象是将数据和方法集成到一个单一单元的组合。通信从一个系统A的对象流向系统B的对象，通过远程过程调用。这种方法的例子有CORBA、DCOM、.Net Remoting和Java
    RMI。这是大型软件系统中最重要的架构类型之一。
- en: <h---5 class="H3" id="ch-1-sec-15">1.3.3.2.3 Event-Based Architectures</h---5>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <h5 class="H3" id="ch-1-sec-15">1.3.3.2.3 基于事件的架构</h5>
- en: Nodes or components communicate on the basis of the proliferation of events.
    Components are connected through an event bus. An event bus carries the published
    and subscribed events from other components. The main advantage of this architecture
    is decoupled space. There is no need for the communicating components to explicitly
    refer to each other. Another important aspect is that it is coupled in time which
    means components can communicate at the same time. [Figure 1.7](chapter1.xhtml#fig1.7)
    represents event-based architecture of distributed computing.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 节点或组件基于事件的传播进行通信。组件通过事件总线连接。事件总线携带其他组件发布的和订阅的事件。这种架构的主要优点是解耦空间。无需明确地相互引用通信的组件。另一个重要方面是它在时间上耦合，这意味着组件可以在同一时间进行通信。[图1.7](chapter1.xhtml#fig1.7)
    代表分布式计算的事件基础架构。
- en: '![](../images/fig1.7.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig1.7.jpg)'
- en: Figure 1.7 Event-based architecture of distributed computing.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 分布式计算的事件基础架构。
- en: <h---5 class="H3" id="ch-1-sec-16">1.3.3.2.4 Shared Data Space Architectures</h---5>
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: <h5 class="H3" id="ch-1-sec-16">1.3.3.2.4 共享数据空间架构</h5>
- en: This is also called data-centered architecture. Here a common repository is
    shared between all the components that are connected in the network. This common
    repository has two states, either active or passive. The repository is like a
    database. Information from all nodes is persistently stored. The shared repository
    contains persistent data. The main idea is that subscribed components can send
    and receive data accordingly. [Figure 1.8](chapter1.xhtml#fig1.8) represents shared
    data space architecture of distributed computing.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这也被称为数据中心架构。在这里，所有连接在网络中的组件共享一个公共存储库。这个公共存储库有两个状态，要么是活动状态，要么是被动状态。存储库就像一个数据库。所有节点的信息都得到持久存储。共享存储库包含持久数据。主要思想是订阅的组件可以相应地发送和接收数据。[图1.8](chapter1.xhtml#fig1.8)
    代表分布式计算的共享数据空间架构。
- en: '![](../images/fig1.8.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig1.8.jpg)'
- en: Figure 1.8 Shared data space architecture of distributed computing.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8 分布式计算的共享数据空间架构。
- en: '[1.4 Comparison of Distributed Computing with State of the Art](chapter1.xhtml#re_ch-1-sec-17)'
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[1.4 分布式计算与最先进技术的比较](chapter1.xhtml#re_ch-1-sec-17)'
- en: '[1.4.1 Distributed Computing versus Parallel Computing](chapter1.xhtml#re_ch-1-sec-18)'
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[1.4.1 分布式计算与并行计算的比较](chapter1.xhtml#re_ch-1-sec-18)'
- en: The results of distributed computing and parallel computing are same in the
    aspect of efficiency ant performance because both of them are interrelated apart
    from differences in the the placement of the hardware. In a distributed system,
    the computers are placed in different locations and communicate through a network.
    But in parallel computing all the computing hardware is combined to make a single
    device. In parallel computing a huge single memory is shared between computing
    engines, i.e. processors. Each computing station utilizes that memory with efficient
    synchronization. Here each processor works independently of the others. In distributed
    computing, each computing node has its own processor and memory like single autonomous
    computing nodes. The advantages of parallel and distributed computing are high-performance
    parallel computation [[13](#re_TNF-CH001_CIT00013)] by using shared-memory multiprocessors
    and the use of parallel computing algorithms, while the coordination of a large-scale
    distributed system uses distributed algorithms.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式计算和并行计算在效率和性能方面结果相同，因为除了硬件位置上的差异外，两者都是相互关联的。在分布式系统中，计算机位于不同位置并通过网络进行通信。但在并行计算中，所有计算硬件都组合成一个单一设备。在并行计算中，巨大的单一内存被计算引擎（即处理器）共享。每个计算站都高效地使用这份内存进行同步。在这里，每个处理器都是独立于其他处理器工作的。在分布式计算中，每个计算节点都有自己的处理器和内存，就像单个自主计算节点一样。并行和分布式计算的优势在于使用共享内存多处理器进行高性能并行计算[[13](#re_TNF-CH001_CIT00013)]，以及使用并行计算算法，而大规模分布式系统的协调则使用分布式算法。
- en: '[1.4.2 Distributed Database Systems](chapter1.xhtml#re_ch-1-sec-19)'
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[1.4.2 分布式数据库系统](chapter1.xhtml#re_ch-1-sec-19)'
- en: In the above we discussed distributed computing and its features. In all computing
    methods the data are stored in a centralized fashion and computing is done in
    a distributed fashion. A distributed database management systems (DDBMS) is a
    collaboration of multiple databases that are located in different physical locations
    and connected through a network. These distributed databases are locally interlinked
    or part of a whole database system. The distributed database systems are widely
    used in data warehousing. Distributed databases are mainly used to manage data
    in networks, data confidentiality and data integrity.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的讨论中，我们提到了分布式计算及其特点。在所有计算方法中，数据都是以集中方式存储，而计算则是以分布式方式进行。分布式数据库管理系统（DDBMS）是位于不同物理位置并通过网络连接的多个数据库的协作。这些分布式数据库可以是本地互联或整个数据库系统的一部分。分布式数据库系统广泛应用于数据仓库。分布式数据库主要用于网络中管理数据、数据保密和数据完整性。
- en: '[1.4.3 Traditional versus Distributed Databases](chapter1.xhtml#re_ch-1-sec-20)'
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[1.4.3 传统数据库与分布式数据库](chapter1.xhtml#re_ch-1-sec-20)'
- en: Database systems are the collection of data, storage of data, management of
    data and finally distribution of the data to various related applications. In
    the past, punch cards were used for data storage. The first database was designed
    by Charles W. Bachman in 1960\. Next the well-known company IBM implemented their
    own DBMS called IMS. Likewise many other companies released their own paid and
    unpaid software in the market, and different types of DBMS are also available.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库系统是数据的集合、数据的存储、数据的管理，最后将数据分布到各种相关应用中。过去，打孔卡片被用于数据存储。第一个数据库是查尔斯·W·巴奇曼在1960年设计的。接下来，著名的IBM公司实施了自己的数据库管理系统IMS。同样，许多其他公司也发布了他们自己的有偿和无偿软件到市场上，还有各种类型的数据库管理系统可供选择。
- en: The difference between the traditional DBMS and distributed DBMS is that distributed
    DBMS are the modified or latest updated version of traditional DBMS. In each development
    of DBMS, introduced new features were introduced that were very useful for the
    users as well. Nowadays many database products are available in the market. The
    main difference is that the traditional database management systems used only
    a single machine and a single software instant can access the database. These
    problems are addressed by distributed computing, as databases are available in
    different machines connected through a network. Any device can access the distributed
    database [[14](#re_TNF-CH001_CIT00014)] within the network software. All types
    of queries can be generated from different machines connected in the network,
    and the distributed database system can execute the query and return back the
    result.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 传统数据库管理系统（DBMS）与分布式数据库管理系统的区别在于，分布式DBMS是传统DBMS的修改版或最新更新版。在DBMS的每次发展中，都引入了新的特性，这些特性对用户非常有用。如今市场上有很多数据库产品。主要区别在于，传统数据库管理系统仅使用单一机器，单一软件实例可以访问数据库。这些问题通过分布式计算得到了解决，因为通过网络连接的不同机器上的数据库都可以访问。任何设备都可以通过网络软件访问分布式数据库[[14](#re_TNF-CH001_CIT00014)]。网络中连接的不同机器可以生成各种查询，分布式数据库系统可以执行这些查询并返回结果。
- en: '[1.4.4 Distributed Computing and Blockchain](chapter1.xhtml#re_ch-1-sec-21)'
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[1.4.4 分布式计算与区块链](chapter1.xhtml#re_ch-1-sec-21)'
- en: Distributed computing methods are one of the basic computing principles that
    drive the blockchain mechanism. Generally now everyone has a basic idea of a blockchain
    as a large network of computers which can authenticate and verify huge transactions.
    However, the internal mechanism of distributed computing can lead to a better
    base for blockchain technology. It can also help to make more information by focusing
    on working scenarios of distributed computing technologies.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式计算方法是推动区块链机制的基本计算原则之一。现在，大多数人已经对区块链有了基本认识，它是一个由计算机组成的庞大网络，可以验证和认证大量的交易。然而，分布式计算的内部机制可以为区块链技术提供更好的基础。它还可以通过关注分布式计算技术的工作场景来生成更多信息。
- en: '[1.5 Distributed Computing Environment of Blockchain](chapter1.xhtml#re_ch-1-sec-22)'
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[1.5 区块链的分布式计算环境](chapter1.xhtml#re_ch-1-sec-22)'
- en: Generally, distributed computing methods are like a network of computers working
    together as a single system. The systems can be located close to one another and
    with a wired network as part of a single local network. Other networks such as
    blockchains widely use geographically dispersed computers networks.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，分布式计算方法就像一组计算机网络在一起作为一个单一系统工作。这些系统可以相互靠近，并通过有线网络作为单一局域网的一部分。其他网络，如区块链，广泛使用地理位置分散的计算机网络。
- en: Distributed computing has been used for far longer than blockchain mechanisms.
    The use of computers in education and research grew very early, requiring computers
    to connect to one another, sharing hardware such as memory and printers. In the
    1970s the first local area networks were established with many systems. The first
    distributed computing machines were local area networks such as Ethernet, a group
    of networking hardware technologies developed by Xerox. Now it is widely distributed
    and everyone make use of it. Each time you join a new Wi-Fi connection, you are
    entering into a new computer network scenario.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式计算比区块链机制的使用时间要长得多。计算机在教育和研究中的应用非常早，这就需要计算机相互连接，共享硬件，如内存和打印机。20世纪70年代，第一个局域网建立，许多系统都参与其中。第一个分布式计算机机器是局域网，如以太网，是一组由施乐公司开发的网络硬件技术。现在它已经广泛分布，每个人都利用它。每次你加入一个新的Wi-Fi连接，你都在进入一个新的计算机网络场景。
- en: In 21st century, the usage of distributed systems and distributed computing
    technologies has vital roles in solving real-world problems. Each unit of problem
    phases is connected to the others and finally derive appropriate solutions ([Figure
    1.9](chapter1.xhtml#fig1.9)).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在21世纪，分布式系统和分布式计算技术在解决现实世界问题中扮演了至关重要的角色。每个问题阶段的单元都与其他单元相连，最终导出合适的解决方案([图1.9](chapter1.xhtml#fig1.9))。
- en: '![](../images/fig1.9.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig1.9.jpg)'
- en: Figure 1.9 Ethernet connections.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.9 以太网连接。
- en: A blockchain is a peer-to-peer (P2P) network, which is a slightly different
    kind of distributed system [[15](#re_TNF-CH001_CIT00015)] than that illustrated
    in the example. Now distributed systems are groups of independent nodes connected
    with others in a specified manner in order to produce a common result, and they
    are strictly structured in such a way that these groups appear to be a single
    well-defined system for the end user.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链是一种对等网络（P2P），它与示例中描述的分布式系统略有不同[[15](#re_TNF-CH001_CIT00015)]。现在分布式系统是由通过特定方式连接在一起的独立节点组成的群组，旨在产生共同的结果，并且它们以严格的方式结构化，使得这些群组对最终用户来说看起来像是一个定义良好的单一系统。
- en: Through these networks, each system can communicate with the others by messages
    and responses. The main advantage is that communication between each system provides
    synchronization as well as an error-free environment. Most of the distributed
    systems are effectively bounded with synchronous messaging channels.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些网络，每个系统可以通过消息和响应与其他系统进行通信。主要优点是系统之间的通信提供了同步以及无错误的环境。大多数分布式系统有效地与同步消息通道绑定。
- en: 'By analyzing each node, the following can be found:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 通过分析每个节点，可以发现以下内容：
- en: The nodes are largely programmable, autonomous, asynchronous and failure-free.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点大多是可编程的、自主的、异步的且不会失败。
- en: Each node has its own storage and computing processor. They have shared memory
    and can operate concurrently.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个节点都有自己的存储和计算处理器。它们共享内存并且可以并发运行。
- en: The nodes are interconnected with others to offer services, and share or store
    data (e.g. blockchain).
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点通过与其他节点相连来提供服务，并共享或存储数据（例如，区块链）。
- en: All nodes communicate with others by using messages.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有节点都通过消息与其他节点进行通信。
- en: Every node in the distributed system is capable of sending and receiving messages
    to and from the others.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式系统中的每个节点都具备与其他节点发送和接收消息的能力。
- en: '[1.5.2 Distributed Computing Architecture](chapter1.xhtml#re_ch-1-sec-23)'
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[1.5.2 分布式计算架构](chapter1.xhtml#re_ch-1-sec-23)'
- en: 'There are mainly two types of architecture:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 主要有两种类型的架构：
- en: 1\. Client–server architecture
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1. 客户端-服务器架构
- en: 2\. Peer–peer architecture
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2. 对等网络架构
- en: '[1.5.2.1 Client–Server Architecture](chapter1.xhtml#re_ch-1-sec-24)'
  id: totrans-120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[1.5.2.1 客户端-服务器架构](chapter1.xhtml#re_ch-1-sec-24)'
- en: 'In client–server architecture, the main entities are:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端-服务器架构中，主要实体包括：
- en: 1\. Server
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1. 服务器
- en: 2\. Clients
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2. 客户端
- en: 'Server: An entity that is purely responsible for offering services to the client;
    servers provide services like storage, data processing, deploying applications,
    etc.'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器：一个纯粹负责向客户端提供服务的实体；服务器提供如存储、数据处理、部署应用程序等服务。
- en: 'Client: A client is an entity that communicates with the server in order to
    complete its local task. They are normally connected to the server on the Internet
    ([Figure 1.10](chapter1.xhtml#fig1.10)).'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端：客户端是一个与服务器通信以完成其本地任务的实体。它们通常通过互联网连接到服务器（[图1.10](chapter1.xhtml#fig1.10)）。
- en: '![](../images/fig1.10.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig1.10.jpg)'
- en: Figure 1.10 Client–server architecture.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.10 客户端-服务器架构。
- en: This architecture is a good example of a service-oriented system.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构是服务导向系统的一个好例子。
- en: The biggest disadvantage of this type of architecture is that the complete system
    is dependent on the central single point (server). If the server goes down, then
    the whole system stops.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构的最大缺点是整个系统都依赖于中心单一节点（服务器）。如果服务器出现问题，那么整个系统就会停止运行。
- en: In this architecture, there is different layered architecture [[16](#re_TNF-CH001_CIT00016)]
    in which, according to the purpose, several layers can be added on the client
    side as well the server side in order to accomplish the system requirements, security
    and complexity. Commonly used layered architecture types include two-tier and
    three-tier architecture. Each architecture type has its own characteristics to
    provide maximum security to participants.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在此架构中，有不同的分层架构[[16](#re_TNF-CH001_CIT00016)]，根据目的，可以在客户端和服务器端添加几层以完成系统要求、安全性和复杂性。常用的分层架构类型包括两层和三层架构。每种架构类型都有其自身的特点，为参与者提供最大的安全性。
- en: '[1.5.2.2 Peer-to-Peer Architecture](chapter1.xhtml#re_ch-1-sec-25)'
  id: totrans-131
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[1.5.2.2 对等网络架构](chapter1.xhtml#re_ch-1-sec-25)'
- en: P2P architecture is a network of inter-connected systems in which they are capable
    of sharing resources and information. Every system connected to the network is
    referred to as a node or “peer”. This type of architecture can be used in blockchain
    technology, transportation services, education, e-commerce, banking and finance,
    etc.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 点对点(P2P)架构是由相互连接的系统组成的网络，它们有能力共享资源和信息。连接到网络的每个系统被称为节点或“对等体”。这种类型的架构可以用于区块链技术、交通服务、教育、电子商务、银行和金融等。
- en: 'Advantages of P2P architecture are:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: P2P架构的优势有：
- en: 1\. It can be easily configured.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1. 它可以很容易地进行配置。
- en: 2\. It is easy to install.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2. 安装起来非常容易。
- en: 3\. All the nodes are capable of sharing resources with other nodes and can
    communicate with other nodes present in the network.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3. 所有节点都有与其他节点共享资源的能力，并能与网络中存在的其他节点进行通信。
- en: 4\. If any single node goes down it will not affect the complete system.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4. 任何单个节点发生故障都不会影响整个系统。
- en: 5\. Maintaining such architecture is comparatively cost-effective ([Figure 1.11](chapter1.xhtml#fig1.11)).
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 5. 维护此类架构相对具有成本效益([图1.11](chapter1.xhtml#fig1.11))。
- en: '![](../images/fig1.11.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig1.11.jpg)'
- en: Figure 1.11 Peer-to-peer architecture.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.11 点对点架构。
- en: Blockchain technology works on the principle of peer-to-peer architecture; it
    helps the technology to be more powerful, secure and efficient. Blockchain can
    be used for many industrial purposes but it is most commonly used in “cryptocurrencies”.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链技术基于点对点架构原理运行；这有助于技术更具威力、更安全、更高效。区块链可用于许多工业用途，但最常见的是用于“加密货币”。
- en: A peer-to-peer network is centric when it comes to managing transactions within
    a blockchain. All the nodes can communicate with others and transact with the
    others in the blockchain. All peer-to-peer networks are decentralized, and a blockchain
    is also a decentralized application. This characteristic makes the blockchain
    technology more secure than other technologies and very hard to hack or break
    into. But the most complicated part is that backups and security must be provided
    to each node individually, and there is no centralized entity to manage all the
    nodes in the architecture.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 点对点网络在管理区块链内的交易时是中心化的。所有节点可以与其他节点通信，并在区块链上与其他节点进行交易。所有点对点网络都是去中心化的，区块链也是一个去中心化应用。这一特性使区块链技术比其他技术更安全，且非常难以黑客攻击或入侵。但最复杂的部分是，必须为每个节点提供单独的备份和安全，而在该架构中没有中心化的实体来管理所有节点。
- en: '[1.6 Distributed Ledger in Blockchain](chapter1.xhtml#re_ch-1-sec-26)'
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[1.6 区块链中的分布式账本](chapter1.xhtml#re_ch-1-sec-26)'
- en: A distributed ledger is like a database that is manually shared and synchronized
    across multiple nodes, sites, institutions or geographies. It will provide transactions
    with public witnesses, by making a cyber-attack even more difficult. The objects
    at each node of the network can access the data shared across that distributed
    network and have an identical copy of them. Any changes made to ledgers are reflected
    to all other nodes in fractions of time.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式账本就像一个数据库，它通过手动方式在多个节点、站点、机构或地理位置之间共享和同步。它通过使网络攻击更加困难，为交易提供公共见证。网络中每个节点的对象可以访问跨越该分布式网络共享的数据，并拥有它们的相同副本。对账本所做的任何更改都会在几分之一的时间内反映到所有其他节点。
- en: '[1.6.1 Computing Power and Breakthroughs in Cryptography](chapter1.xhtml#re_ch-1-sec-27)'
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[1.6.1 计算能力与密码学的突破](chapter1.xhtml#re_ch-1-sec-27)'
- en: A distributed ledger of any transactions or contracts is established in decentralized
    form across different locations and people, eliminating the need for a single
    central authority to keep a barrier against manipulations. All the data on it
    are stored securely using cryptographic techniques. Once the data/information
    are stored, it becomes an immutable database, which is one of the basic rules
    of the network.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式账本记录了各种交易或合同，以去中心化的形式在不同地点和人员之间建立，消除了需要一个单一中央权威来防止操纵的需要。所有数据都使用加密技术安全地存储。一旦数据/信息被存储，它就变成了一个不可变的数据库，这是网络的基本规则之一。
- en: The abstraction at the center of blockchain systems is the notion of a ledger,
    an invention of the Italian Renaissance developed to support the double-way-entry
    book-keeping system, a distant precursor of modern cryptocurrencies [[16](#re_TNF-CH001_CIT00016)].
    A ledger is just an indelible, append-only-log of transactions between various
    parties ([Figures 1.12](chapter1.xhtml#fig1.12) and [1.13](chapter1.xhtml#fig1.13)).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链系统核心概念是账本，这是意大利文艺复兴时期的发明，旨在支持双向记账系统，是现代加密货币的遥远前身 [[16](#re_TNF-CH001_CIT00016)]。账本只是一个不可更改的、只追加交易的各方之间的日志
    ([图 1.12](chapter1.xhtml#fig1.12) 和 [1.13](chapter1.xhtml#fig1.13))。
- en: '![](../images/fig1.12.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig1.12.jpg)'
- en: Figure 1.12 Centralized ledger.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.12 中心化账本。
- en: '![](../images/fig1.13.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig1.13.jpg)'
- en: Figure 1.13 Distributed ledger.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13 分布式账本。
- en: 'Real-world examples of distributed ledgers:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式账本的现实世界示例：
- en: Government procedures
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 政府程序
- en: Institutions
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机构
- en: Corporate work
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业工作
- en: Issuance of passports
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 护照发行
- en: Licenses
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许可证
- en: Voting procedures
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 投票程序
- en: Finance
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金融
- en: Agreements
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协议
- en: Identity cards
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份证
- en: While the distributed-ledger technology has more advantages, it’s at an early
    stage and is still being explored. The future of centuries-old ledgers is the
    decentralized ledger.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然分布式账本技术具有更多优势，但它仍处于初级阶段，并且仍在被探索。几个世纪以来的账本未来的去中心化账本。
- en: '[1.6.2 Public and Private Blockchain](chapter1.xhtml#re_ch-1-sec-28)'
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[1.6.2 公有与私有区块链](chapter1.xhtml#re_ch-1-sec-28)'
- en: The difference between private (permissioned) blockchain systems, where objects
    have reliable and authorized identities and only strictly vetted parties can participate,
    and public (permissionless) blockchain systems, where objects cannot be reliably
    identified and anyone can participate, is critical for making sense of the blockchain
    landscape.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 私有（受许可）区块链系统与公共（无许可）区块链系统之间的区别是关键的，前者中对象具有可靠和认证的身份，只有经过严格审查的各方才能参与，而后者中对象无法可靠地识别，任何人都可以参与。
- en: Private blockchains [[17](#re_TNF-CH001_CIT00017)] are better for business applications,
    particularly in regulated industries, like finance, subject to know-your-customer
    and anti-money-laundering regulations. Moreover, private blockchains also tend
    to be better at governance. Most prior working methods on distributed algorithms
    have focused on system participants having reliable identities.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 私有区块链 [[17](#re_TNF-CH001_CIT00017)] 对商业应用更为合适，特别是在受监管的行业中，如金融，需要遵守了解你的客户和反洗钱规定。此外，私有区块链在治理方面也往往更胜一筹。大多数先前的分布式算法工作方法都集中在系统参与者具有可靠身份上。
- en: Public blockchains are better for applications such as Bitcoin [[18](#re_TNF-CH001_CIT00018)–[19](#re_TNF-CH001_CIT00019)],
    which guarantee that nobody can decide or control who can participate in the scenario,
    and participants may or may not be eager to have their identities known. Each
    node can act as an independent workstation along with computing systems.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 公共区块链对于比特币等应用更为合适 [[18](#re_TNF-CH001_CIT00018)–[19](#re_TNF-CH001_CIT00019)]，这些应用确保没有人能决定或控制谁可以参与场景，参与者可能愿意也可能不愿意透露自己的身份。每个节点可以作为一个独立的工作站，配备计算系统。
- en: '[1.7 Conclusion](chapter1.xhtml#re_ch-1-sec-29)'
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[1.7 结论](chapter1.xhtml#re_ch-1-sec-29)'
- en: 'The application of the blockchain mechanism is enhanced day by day with different
    mechanisms and computing techniques. Many of the internet-based methodologies
    are now using the advantages of distributed systems as well as the blockchain
    mechanism. Once submitted any data in the system will be safe forever, which enables
    many applications in the field of finance and other related sectors. Some of the
    areas are the following:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链机制的应用随着不同的机制和计算技术的发展而日益增强。许多基于互联网的方法现在也在使用分布式系统的优势以及区块链机制。一旦系统中的数据被提交，它将永远安全，这使得许多金融领域及其他相关行业的应用成为可能。以下是一些领域：
- en: VeChain is a blockchain platform which aims to enhance business operations by
    improving the tracking of products and processes. BitGold is a 2005 proposal that
    resembles Bitcoin’s consensus system and incorporates hashes. A cryptocurrency
    can be defined as a digital or virtual currency that uses cryptography. A cryptocurrency
    is very difficult to counterfeit because of this security feature. Digital copy
    is a duplicate record of every Bitcoin transaction that has taken place over a
    peer-to-peer network.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: VeChain是一个旨在通过改进产品和流程的跟踪来提高业务运营的区块链平台。BitGold是一个类似于比特币共识系统的2005年提案，并集成了散列。加密货币可以定义为使用密码学的一种数字或虚拟货币。由于这个安全特性，加密货币非常难以伪造。数字副本是对通过点对点网络发生的每一笔比特币交易的复制记录。
- en: '[References](chapter1.xhtml#re_b-9781000175257-bib1)'
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[参考文献](chapter1.xhtml#re_b-9781000175257-bib1)'
- en: '[1](#TNF-CH001_CIT00001). Nagasubramanian, Gayathri, Rakesh Kumar Sakthivel,
    Rizwan Patan, Amir H. Gandomi, Muthuramalingam Sankayya, and Balamurugan Balusamy
    . “Securing e-health records using keyless signature infrastructure blockchain
    technology in the cloud.” Neural Computing and Applications (2018): 1–9.'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[1](#TNF-CH001_CIT00001). Nagasubramanian, Gayathri, Rakesh Kumar Sakthivel,
    Rizwan Patan, Amir H. Gandomi, Muthuramalingam Sankayya, 和 Balamurugan Balusamy.
    “利用云中的键less签名基础设施区块链技术保护电子健康记录.” 神经计算与应用 (2018): 1–9.'
- en: '[2](#TNF-CH001_CIT00002). Westerlund, Magnus, and Nane Kratzke . “Towards distributed
    clouds: a review about the evolution of centralized cloud computing, distributed
    ledger technologies, and a foresight on unifying opportunities and security implications.”
    In 2018 International Conference on High Performance Computing & Simulation (HPCS),
    pp. 655–663\. IEEE, 2018.'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[2](#TNF-CH001_CIT00002). Westerlund, Magnus, 和 Nane Kratzke. “迈向分布式云：关于集中式云计算、分布式账本技术的演变以及统一机遇和安全影响的预测.”
    在2018年国际高性能计算与仿真会议(HPCS)上, 第655–663页. IEEE, 2018.'
- en: '[3](#TNF-CH001_CIT00003). Archer, Charles J., Michael A. Blocksome, James E.
    Carey, and Philip J. Sanders . “Administering virtual machines in a distributed
    computing environment.” U.S. Patent 10,255,098, issued April 9, 2019.'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[3](#TNF-CH001_CIT00003). Archer, Charles J., Michael A. Blocksome, James E.
    Carey, and Philip J. Sanders. “在分布式计算环境中管理虚拟机.” 美国专利 10,255,098, 2019年4月9日发布.'
- en: 4\. Meng, Gang. “Stable data-processing in a distributed computing environment.”
    U.S. Patent 10,044,505, issued August 7, 2018.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4. 孟刚. “在分布式计算环境中的稳定数据处理.” 美国专利 10,044,505, 2018年8月7日发布.
- en: '[5](#TNF-CH001_CIT00005). Wong, Wai Ming, and Michael C. Hui. “Method and system
    for modeling and analyzing computing resource requirements of software applications
    in a shared and distributed computing environment.” U.S. Patent Application 10/216,545,
    filed February 26, 2019.'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[5](#TNF-CH001_CIT00005). Wong, Wai Ming, 和 Michael C. Hui. “在共享和分布式计算环境中建模和分析软件应用程序的计算资源要求的方法和系统.”
    美国专利申请 10/216,545, 2019年2月26日提交.'
- en: '[6](#TNF-CH001_CIT00006). Cairns, Douglas Allan. “Efficient computations and
    network communications in a distributed computing environment.” U.S. Patent 10,248,476,
    issued April 2, 2019.'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[6](#TNF-CH001_CIT00006). Cairns, Douglas Allan. “在分布式计算环境中的高效计算和网络通信.” 美国专利
    10,248,476, 2019年4月2日发布.'
- en: '[7](#TNF-CH001_CIT00007). Archer, Charles J., Michael A. Blocksome, James E.
    Carey, and Philip J. Sanders . “Administering virtual machines in a distributed
    computing environment.” U.S. Patent 10,255,098, issued April 9, 2019.'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[7](#TNF-CH001_CIT00007). Archer, Charles J., Michael A. Blocksome, James E.
    Carey, 和 Philip J. Sanders. “在分布式计算环境中管理虚拟机.” 美国专利 10,255,098, 2019年4月9日发布.'
- en: '[8](#TNF-CH001_CIT00008). Dillenberger, Donna Eng, and Gong Su . “Parallel
    execution of blockchain transactions.” U.S. Patent 10,255,108, issued April 9,
    2019.'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[8](#TNF-CH001_CIT00008). Dillenberger, Donna Eng, 和 Gong Su. “并行执行区块链交易.”
    美国专利 10,255,108, 2019年4月9日发布.'
- en: '9\. Li, Keqin. “Scheduling parallel tasks with energy and time constraints
    on multiple manycore processors in a cloud computing environment.” Future Generation
    Computer Systems 82 (2018): 591–605.'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '9. 李克勤. “在云计算环境中具有能源和时间约束的多多核处理器上并行任务调度.” 未来生成计算机系统 82 (2018): 591–605.'
- en: '[10](#TNF-CH001_CIT00010). Chen, Zhen, Pei Zhao, Fuyi Li, André Leier, Tatiana
    T. Marquez-Lago, Yanan Wang, Geoffrey I. Webb et al. “iFeature: a python package
    and web server for features extraction and selection from protein and peptide
    sequences.” Bioinformatics 34, no. 14 (2018): 2499–2502.'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[10](#TNF-CH001_CIT00010). 陈振, 赵培, 李富毅, 安德烈·莱尔, 塔蒂亚娜·T·马奎兹-拉戈, 王亚南,  Geoffrey
    I. Webb 等. “iFeature: 一个用于从蛋白质和肽序列中提取和选择特征的Python包和网络服务器.” 生物信息学 34, no. 14 (2018):
    2499–2502.'
- en: '11\. Wei, Leyi, Shasha Luan, Luis Augusto Eijy Nagai, Ran Su, and Quan Zou
    . “Exploring sequence-based features for the improved prediction of DNA N4-methylcytosine
    sites in multiple species.” Bioinformatics 35, no. 8 (2018): 1326–1333.'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '11. Wei, Leyi, Shasha Luan, Luis Augusto Eijy Nagai, Ran Su, 和 Quan Zou. “探索基于序列的特征以改进多种物种DNA
    N4-甲基胞嘧啶位点的预测.” Bioinformatics 35, no. 8 (2018): 1326–1333.'
- en: '[12](#TNF-CH001_CIT00012). Salloum, Said A., Mostafa Al-Emran, Azza Abdel Monem,
    and Khaled Shaalan . “Using text mining techniques for extracting information
    from research articles.” In Intelligent Natural Language Processing: Trends and
    Applications, pp. 373–397\. Springer, Cham, 2018.'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[12](#TNF-CH001_CIT00012). Salloum, Said A., Mostafa Al-Emran, Azza Abdel Monem,
    和 Khaled Shaalan. “使用文本挖掘技术从研究文章中提取信息.” 在Intelligent Natural Language Processing:
    Trends and Applications, 页码373–397. Springer, Cham, 2018.'
- en: '[13](#TNF-CH001_CIT00013). Shae, Zonyin, and Jeffrey Tsai . “Transform blockchain
    into distributed parallel computing architecture for precision medicine.” In 2018
    IEEE 38th International Conference on Distributed Computing Systems (ICDCS), pp.
    1290–1299\. IEEE, 2018.'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[13](#TNF-CH001_CIT00013). Shae, Zonyin, 和 Jeffrey Tsai. “将区块链转化为分布式并行计算架构以支持精准医学.”
    在2018 IEEE 38th International Conference on Distributed Computing Systems (ICDCS),
    页码1290–1299. IEEE, 2018.'
- en: '[14](#TNF-CH001_CIT00014). Xiong, Zehui, Yang Zhang, Dusit Niyato, Ping Wang,
    and Zhu Han . “When mobile blockchain meets edge computing.” IEEE Communications
    Magazine 56, no. 8 (2018): 33–39.'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[14](#TNF-CH001_CIT00014). Xiong, Zehui, Yang Zhang, Dusit Niyato, Ping Wang,
    和 Zhu Han. “当移动区块链遇到边缘计算.” IEEE Communications Magazine 56, no. 8 (2018): 33–39.'
- en: '[15](#TNF-CH001_CIT00015). Puthal, Deepak, Nisha Malik, Saraju P. Mohanty,
    Elias Kougianos, and Chi Yang . “The blockchain as a decentralized security framework
    [future directions].” IEEE Consumer Electronics Magazine 7, no. 2 (2018): 18–21.'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[15](#TNF-CH001_CIT00015). Puthal, Deepak, Nisha Malik, Saraju P. Mohanty,
    Elias Kougianos, 和 Chi Yang. “区块链作为去中心化安全框架[未来方向].” IEEE Consumer Electronics
    Magazine 7, no. 2 (2018): 18–21.'
- en: '[16](#TNF-CH001_CIT00016). Liu, Hong, Yan Zhang, and Tao Yang . “Blockchain-enabled
    security in electric vehicles cloud and edge computing.” IEEE Network 32, no.
    3 (2018): 78–83.'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[16](#TNF-CH001_CIT00016). Liu, Hong, Yan Zhang, 和 Tao Yang. “区块链支持的电动汽车云和边缘计算安全.”
    IEEE Network 32, no. 3 (2018): 78–83.'
- en: '[17](#TNF-CH001_CIT00017). Hughes, Alex, Andrew Park, Jan Kietzmann, and Chris
    Archer-Brown . “Beyond Bitcoin: what blockchain and distributed ledger technologies
    mean for firms.” Business Horizons 62, no. 3 (2019): 273–281.'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[17](#TNF-CH001_CIT00017). Hughes, Alex, Andrew Park, Jan Kietzmann, 和 Chris
    Archer-Brown. “超越比特币：区块链和分布式账本技术对企业意味着什么.” Business Horizons 62, no. 3 (2019):
    273–281.'
- en: '[18](#TNF-CH001_CIT00018). Dr. Kavita . “A future’s dominant technology blockchain:
    digital transformation.” In IEEE International Conference on Computing, Power
    and Communication Technologies 2018 (GUCON 2018) organized by Galgotias University,
    Greater Noida, 28–29 September, 2018.'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[18](#TNF-CH001_CIT00018). Dr. Kavita. “未来主导技术区块链：数字转型.” 在IEEE International
    Conference on Computing, Power and Communication Technologies 2018 (GUCON 2018)由Galgotias
    University, Greater Noida, 28–29 September, 2018组织.'
- en: '[19](#TNF-CH001_CIT00019). Casado-Vara, Roberto, and Juan Corchado . “Distributed
    e-health wide-world accounting ledger via blockchain.” Journal of Intelligent
    & Fuzzy Systems 36, no. 3 (2019): 2381–2386.'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[19](#TNF-CH001_CIT00019). Casado-Vara, Roberto, 和 Juan Corchado. “通过区块链实现分布式e-健康广泛世界会计账本.”
    Journal of Intelligent & Fuzzy Systems 36, no. 3 (2019): 2381–2386.'
- en: '20\. Pop, Claudia, Tudor Cioara, Marcel Antal, Ionut Anghel, Ioan Salomie,
    and Massimo Bertoncini . “Blockchain based decentralized management of demand
    response programs in smart energy grids.” Sensors 18, no. 1 (2018): 162.'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '20. Pop, Claudia, Tudor Cioara, Marcel Antal, Ionut Anghel, Ioan Salomie, 和
    Massimo Bertoncini. “基于区块链的智能电网中需求响应计划的去中心化管理.” Sensors 18, no. 1 (2018): 162.'
- en: '21\. Saugata Dutta, and Dr Kavita . “Evolution of blockchain technology in
    business applications.” Journal of Emerging Technologies and Innovative Research
    (JETIR) 6, no. 9: 240–244, JETIR May 2019.'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '21. Saugata Dutta, 和 Dr Kavita. “区块链技术在商业应用中的演变.” Journal of Emerging Technologies
    and Innovative Research (JETIR) 6, no. 9: 240–244, JETIR May 2019.'
