- en: '[Chapter 1](contents.xhtml#re_chapter1)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Distributed Computing and/or Distributed Database Systems](contents.xhtml#re_chapter1)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: K. P. Arjun, N. M. Sreenarayanan, K. Sampath Kumar, and R. Viswanathan
  prefs: []
  type: TYPE_NORMAL
- en: Contents
  prefs: []
  type: TYPE_NORMAL
- en: '[1.1 Introduction to Computing](chapter1.xhtml#ch-1-sec-1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.2 Evolution of Distributed Computing](chapter1.xhtml#ch-1-sec-2)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.2.1 Centralized Computing](chapter1.xhtml#ch-1-sec-3)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.2.2 Decentralized Computing](chapter1.xhtml#ch-1-sec-4)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.2.3 Parallel Computing](chapter1.xhtml#ch-1-sec-5)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.3 High-Performance Distributed and Parallel Computing](chapter1.xhtml#ch-1-sec-6)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.3.1 Parallel Computing](chapter1.xhtml#ch-1-sec-7)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.3.1.1 Bit-Level, Instruction-Level and Task-Level Parallel Computing](chapter1.xhtml#ch-1-sec-8)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.3.2 Distributed Computing](chapter1.xhtml#ch-1-sec-9)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.3.3 Architecture of Distributed Computing](chapter1.xhtml#ch-1-sec-10)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.3.3.1 Physical Architecture of Distributed Computing](chapter1.xhtml#ch-1-sec-11)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.3.3.2 Software Architecture of Distributed Computing](chapter1.xhtml#ch-1-sec-12)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.4 Comparison of Distributed Computing with State of the Art](chapter1.xhtml#ch-1-sec-17)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.4.1 Distributed Computing versus Parallel Computing](chapter1.xhtml#ch-1-sec-18)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.4.2 Distributed Database Systems](chapter1.xhtml#ch-1-sec-19)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.4.3 Traditional versus Distributed Databases](chapter1.xhtml#ch-1-sec-20)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.4.4 Distributed Computing and Blockchain](chapter1.xhtml#ch-1-sec-21)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.5 Distributed Computing Environment of Blockchain](chapter1.xhtml#ch-1-sec-22)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.5.2 Distributed Computing Architecture](chapter1.xhtml#ch-1-sec-23)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.5.2.1 Client–Server Architecture](chapter1.xhtml#ch-1-sec-24)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.5.2.2 Peer-to-Peer Architecture](chapter1.xhtml#ch-1-sec-25)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.6 Distributed Ledger in Blockchain](chapter1.xhtml#ch-1-sec-26)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.6.1 Computing Power and Breakthroughs in Cryptography](chapter1.xhtml#ch-1-sec-27)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.6.2 Public and Private Blockchain](chapter1.xhtml#ch-1-sec-28)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.7 Conclusion](chapter1.xhtml#ch-1-sec-29)'
  prefs: []
  type: TYPE_NORMAL
- en: '[References](chapter1.xhtml#b-9781000175257-bib1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.1 Introduction to Computing](chapter1.xhtml#re_ch-1-sec-1)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Computing involves process-oriented step-by-step tasks to complete a goal-oriented
    computation. A goal is not a simple or single rather there may be more than one
    goal. Normally we can say that a goal is a complex operation that is processed
    using a computer. A normal computer contains hardware and software; and computing
    can also involve more than one computing environment in hardware like workstations,
    servers, clients and other intermediate nodes and software like a workstation
    Operating System, server operating system and other computing software. The computing
    in our daily life includes sending emails, playing games or making phone calls;
    these are different kinds of computing examples at different contextual levels.
    Depending on the processing speed and size, computers are categorized into different
    types like supercomputers, mainframes, minicomputers and microcomputers. The computing
    power of a device is directly proportional to its data-storing capacity.
  prefs: []
  type: TYPE_NORMAL
- en: All software is developed in a sequential way which means that before developing
    software to solve a large problem, we split the problem into smaller sub problems.
    These sub problems broken down step by step or in a flowchart are called algorithms.
    These algorithms are executed by the central processing unit (CPU). We can call
    this serial computing, as the main task is divided into a number of small instructions,
    then these instructions are executed one by one. But in the main, this serial
    communication is a huge waste of the hardware other than the CPU. The CPU is continuously
    taking instructions and processing those instructions. The hardware contributing
    to processing that specific hardware is used for that particular time only, and
    for the remaining time that hardware is idle.
  prefs: []
  type: TYPE_NORMAL
- en: So to overcome the deficiencies in resource utilization and improve the computing
    power we moved into another era of computing called parallel computing and distributed
    computing. The insight of distributed computing is in solving more complex and
    larger computational problems with the help of more than one computational system.
    The computational problem is divided into many tasks, each of which is executed
    in different computational systems that are located in different regions.
  prefs: []
  type: TYPE_NORMAL
- en: '[1.2 Evolution of Distributed Computing](chapter1.xhtml#re_ch-1-sec-2)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Distributed computing [[1](#re_TNF-CH001_CIT00001)] is concurrent processing
    of multiple processes at the same time. Distributed computing works on various
    very important concepts like multiprogramming and multitask programming. Finally
    distributed computing has been included in the branch of computer science and
    engineering since the 1970s. Since then many international conferences like the
    Symposium on Principles of Distributed Computing (PODC), International Symposium
    on Distributed Computing (DISC), etc. and international workshops like the International
    Workshop on Distributed Algorithms [[2](#re_TNF-CH001_CIT00002)] on Graphs have
    been conducted.
  prefs: []
  type: TYPE_NORMAL
- en: '[1.2.1 Centralized Computing](chapter1.xhtml#re_ch-1-sec-3)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The name “centralized computing” refers to computing that occurs in a central
    situated machine. The specifications of the central computing server machine include
    high computing capabilities and sophisticated software. All other computers are
    attached to the central situated machine and communicate through terminals. The
    centralized machine [[3](#re_TNF-CH001_CIT00003)] itself controls and manages
    the peripherals, some of which are physically connected and some of which are
    attached via terminals.
  prefs: []
  type: TYPE_NORMAL
- en: The main advantage of centralized system is greater security compared to other
    types of computing because the processing is only done at the centrally located
    machine. All the connected machines can access the centralized processing machine
    and start processing their own task by using terminals. If one terminal goes down,
    then the user can use another terminal and log in again. All the user-related
    files are still available with that particular user login. The user can resume
    their session and complete the task.
  prefs: []
  type: TYPE_NORMAL
- en: The main and most important disadvantage of the centralized computing system
    is that all computing and storage is done at centrally located machine. If the
    machine fails or crashes the entire system will go down. It affects the performance
    evaluation on unavailability of service.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 1.1](chapter1.xhtml#fig1.1) shows a block diagram of centralized computing.
    Centralized systems are somewhat related to client–server programming [[5](#re_TNF-CH001_CIT00005)].
    The client has minimum computing power, but for advanced and high-level computing,
    client requests for the server. The server computes the request received from
    the client and sends the response back to the client.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig1.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 Centralized computing.
  prefs: []
  type: TYPE_NORMAL
- en: '[1.2.2 Decentralized Computing](chapter1.xhtml#re_ch-1-sec-4)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In centralized computing, a centrally located powerful system provides computing
    services to all other nodes connected. The disadvantage is that all processing
    power is located at one entity. Alternatively, the burden at the central level
    can be shared by the nodes connected on the network. In decentralized computing
    [[6](#re_TNF-CH001_CIT00006)] a single server is not responsible for the whole
    task. The whole workload is distributed to the computing nodes so that each computing
    node has equal processing power.
  prefs: []
  type: TYPE_NORMAL
- en: '[1.2.3 Parallel Computing](chapter1.xhtml#re_ch-1-sec-5)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To overcoming the deficiencies in resource utilization and improve the computing
    power we moved into another era of computing called parallel computing. The name
    “parallel” means that more than one instruction can be executed simultaneously.
    It requires the configuration of a number of computing engines (normally called
    “processors”) and related hardware and also software configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '[1.3 High-Performance Distributed and Parallel Computing](chapter1.xhtml#re_ch-1-sec-6)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1.3.1 Parallel Computing](chapter1.xhtml#re_ch-1-sec-7)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a CPU, a main task is divided into a number of small instructions, and then
    these instructions are executed one by one. The main problem with the serial communication
    is wastage of large amount of resources in terms of hardware and software resources.
    CPU continuously receives instructions and process them. The hardware involved
    in serial processing remains idle in case there are no instructions to be processed.
  prefs: []
  type: TYPE_NORMAL
- en: To overcome the deficiencies in resource utilization and to improve the computing
    power we moved into another era of computing called parallel computing [[7](#re_TNF-CH001_CIT00007)].
    The name “parallel” means that more than one instruction can be executed simultaneously.
    It requires the configuration of a number of computing engines (normally called
    “processors”) and related hardware and also software configuration. [Figure 1.2](chapter1.xhtml#fig1.2)
    shows the levels of parallel computing.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig1.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 Different levels of parallel computing.
  prefs: []
  type: TYPE_NORMAL
- en: '[1.3.1.1 Bit-Level, Instruction-Level and Task-Level Parallel Computing](chapter1.xhtml#re_ch-1-sec-8)'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Figure 1.1](chapter1.xhtml#fig1.1) depicts the parallel computing at various
    levels. The levels are bit-level, instruction-level and task-level. It is a complex
    type of computing because here we are adding more than one processor and the processors
    are supporting hardware and software. So in serial we deal with only one instruction
    and processor, but the challenges split the whole work into small pieces, and
    these small tasks are given to different computational machines. Every computation
    machine is independent and concurrently processing with the help of the others.
    Each machine deals with its own task and finally collaborates with the others
    as a single unit. Parallel computing added over all coordination of the execution
    engines [[8](#re_TNF-CH001_CIT00008)] is one of the multifaceted problems. Parallel
    computing can be utilized to convert real-world scenarios to more convenient formats.'
  prefs: []
  type: TYPE_NORMAL
- en: The main utility of parallel computing is in solving real-world problem-as more
    complex, independent and unrelated events will occur at the same time, for example,
    galaxy formation, planetary movements, climate changes, road traffic, weather,
    etc.
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of fast computing is helpful in various high-end applications,
    for example, faster networks, high speed data transfer, distributed systems and
    multi-processor computing [[10](#re_TNF-CH001_CIT00010)], etc.
  prefs: []
  type: TYPE_NORMAL
- en: '[1.3.2 Distributed Computing](chapter1.xhtml#re_ch-1-sec-9)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The distributed computing insight lies in solving more complex and larger computational
    problems with the help of more than one computational system. The computational
    problem is divided into many tasks, each of which is executed in different computational
    systems that are located in different regions. Different computational systems
    located at different places communicate through strong base network communication
    technology. There are many communication mechanisms that have been adopted for
    strong and secure communications like message passing, RPC and HTTP mechanisms,
    etc.
  prefs: []
  type: TYPE_NORMAL
- en: Another way we can describe distributed computing is as different computational
    engines which are all autonomous, physically present in different geographical
    areas, and communicating with the help of a computer network. Each computational
    engine is called an autonomous system. Each autonomous system has its own hardware
    and software. Actually they will not share their hardware or software with another
    system that is located in another region. But they are continuously communicating
    by using the message-passing mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: The main idea behind distributed computing is overcoming the limitations of
    computing like low processing power, speed and memory. Each computer is connected
    by using a single network. The duties of each computing engine are to do the assigned
    jobs and communicate to peer computers that are connected in the network.
  prefs: []
  type: TYPE_NORMAL
- en: A feature of the connected nodes or computers is that each one has its own hardware
    including memory, processor and IO devices, and software like operating systems
    and distributed software.
  prefs: []
  type: TYPE_NORMAL
- en: The entirety of communication happens through the message-passing mechanism.
    [Figure 1.3](chapter1.xhtml#fig1.3) represents the message-passing mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig1.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 Message-passing method.
  prefs: []
  type: TYPE_NORMAL
- en: '[1.3.3 Architecture of Distributed Computing](chapter1.xhtml#re_ch-1-sec-10)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[1.3.3.1 Physical Architecture of Distributed Computing](chapter1.xhtml#re_ch-1-sec-11)'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Distributed computing has much architecture related to the application and complexity
    of algorithms proposed at the software and hardware levels. At the high model,
    interconnection of running state of the processes on the connected CPUs in the
    network. [Figure 1.4](chapter1.xhtml#fig1.4) shows a physical representation of
    distributed computing.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig1.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 Physical block diagram of distributed computing.
  prefs: []
  type: TYPE_NORMAL
- en: All distributed computing uses one of the architecture types listed below. Each
    architecture type is slightly different from the others depending on the basis
    of the computing.
  prefs: []
  type: TYPE_NORMAL
- en: There are mainly two type of architecture; we can normally say that one is tightly
    coupled or loosely coupled. The name “tightly coupled distributed architecture”
    means that all nodes or machines are connected through a highly integrated network.
    It seems like all the computing engines work as a single machine. This architecture
    creates an illusion of a single machine but in the background different machines
    are connected via a fast network and memory is shared through distributed shared
    memory (DSM) without using the message-passing technology. Distributed shared
    memory (DSM) creates an illusion in this architecture of sharing memory in a network
    of connected nodes. Actually sharing memory is a big challenge because we have
    to consider the traffic across the network. The next architecture, “loosely coupled”,
    does not share any hardware like memory processing power. The nodes just communicate
    together.
  prefs: []
  type: TYPE_NORMAL
- en: Other variations of architecture are client–server, three-tier, n-tier and peer-to-peer.
    The first one, client–server architecture, involves normal communication between
    the client and server. The client requests data from the server and then formats
    and displays it to the user. The second type is normally used for web application
    development. The result of this architecture simplifies the web application development.
    The third type is n-tier architecture, which is also used for enterprise web application
    development. This type of architecture is highly responsible for the success of
    the software framework for creating web applications. The last type, peer-to-peer
    architecture, includes any specific system or one system that provides services
    or manages network resources. All the work is equally divided among all the machines
    and each machine will serve that particular responsibility assigned only for that
    machine, which is called a peer. It acts as both server and client.
  prefs: []
  type: TYPE_NORMAL
- en: '[1.3.3.2 Software Architecture of Distributed Computing](chapter1.xhtml#re_ch-1-sec-12)'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: <h---5 class="H3" id="ch-1-sec-13">1.3.3.2.1 Layered Architectures</h---5>
  prefs: []
  type: TYPE_NORMAL
- en: Layered architectures involve the division of responsibilities among software
    components and the placement of components at different locations in computers.
    Layered architectures divide the whole task into different levels, and each level
    communicates with the others and gives services to both upper layers and lower
    layers. The OSI model is a well-known example of layered architecture. The communication
    between each layer to adjacent layers, either the upper layer or lower layer,
    is in sequential order. So the communication request follows in the bottom to
    top order, and the response follows from top to bottom order. [Figure 1.5](chapter1.xhtml#fig1.5)
    shows the layered architecture of distributed computing.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig1.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 Layered architecture of distributed computing.
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of this architecture is that there is a sequential order for request
    and response. Each layer has its already predefined duty so there is no confusion
    about processing the request. We can easily update or replace each layer according
    to our application without affecting the entire architecture. [Figure 1.6](chapter1.xhtml#fig1.6)
    represents the basic architecture style of a distributed system.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig1.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 Object-based architecture of distributed computing.
  prefs: []
  type: TYPE_NORMAL
- en: <h---5 class="H3" id="ch-1-sec-14">1.3.3.2.2 Object-Based Architectures</h---5>
  prefs: []
  type: TYPE_NORMAL
- en: This style of architecture is used for loosely coupled arrangements of systems.
    This loosely coupled system [[12](#re_TNF-CH001_CIT00012)] cannot follow the sequential
    order architecture like layered. In this architecture each component is referred
    to as an object; each object in a system communicates with other objects through
    an interface.
  prefs: []
  type: TYPE_NORMAL
- en: Objects are the incorporation of data and methods into a single unit. Communication
    flows from one object of a system A to an object in a system B through remote
    procedure call. Examples of this method are CORBA, DCOM, .Net Remoting and Java
    RMI. It is the one of most important architecture types in large software systems.
  prefs: []
  type: TYPE_NORMAL
- en: <h---5 class="H3" id="ch-1-sec-15">1.3.3.2.3 Event-Based Architectures</h---5>
  prefs: []
  type: TYPE_NORMAL
- en: Nodes or components communicate on the basis of the proliferation of events.
    Components are connected through an event bus. An event bus carries the published
    and subscribed events from other components. The main advantage of this architecture
    is decoupled space. There is no need for the communicating components to explicitly
    refer to each other. Another important aspect is that it is coupled in time which
    means components can communicate at the same time. [Figure 1.7](chapter1.xhtml#fig1.7)
    represents event-based architecture of distributed computing.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig1.7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 Event-based architecture of distributed computing.
  prefs: []
  type: TYPE_NORMAL
- en: <h---5 class="H3" id="ch-1-sec-16">1.3.3.2.4 Shared Data Space Architectures</h---5>
  prefs: []
  type: TYPE_NORMAL
- en: This is also called data-centered architecture. Here a common repository is
    shared between all the components that are connected in the network. This common
    repository has two states, either active or passive. The repository is like a
    database. Information from all nodes is persistently stored. The shared repository
    contains persistent data. The main idea is that subscribed components can send
    and receive data accordingly. [Figure 1.8](chapter1.xhtml#fig1.8) represents shared
    data space architecture of distributed computing.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig1.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 Shared data space architecture of distributed computing.
  prefs: []
  type: TYPE_NORMAL
- en: '[1.4 Comparison of Distributed Computing with State of the Art](chapter1.xhtml#re_ch-1-sec-17)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1.4.1 Distributed Computing versus Parallel Computing](chapter1.xhtml#re_ch-1-sec-18)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The results of distributed computing and parallel computing are same in the
    aspect of efficiency ant performance because both of them are interrelated apart
    from differences in the the placement of the hardware. In a distributed system,
    the computers are placed in different locations and communicate through a network.
    But in parallel computing all the computing hardware is combined to make a single
    device. In parallel computing a huge single memory is shared between computing
    engines, i.e. processors. Each computing station utilizes that memory with efficient
    synchronization. Here each processor works independently of the others. In distributed
    computing, each computing node has its own processor and memory like single autonomous
    computing nodes. The advantages of parallel and distributed computing are high-performance
    parallel computation [[13](#re_TNF-CH001_CIT00013)] by using shared-memory multiprocessors
    and the use of parallel computing algorithms, while the coordination of a large-scale
    distributed system uses distributed algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: '[1.4.2 Distributed Database Systems](chapter1.xhtml#re_ch-1-sec-19)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the above we discussed distributed computing and its features. In all computing
    methods the data are stored in a centralized fashion and computing is done in
    a distributed fashion. A distributed database management systems (DDBMS) is a
    collaboration of multiple databases that are located in different physical locations
    and connected through a network. These distributed databases are locally interlinked
    or part of a whole database system. The distributed database systems are widely
    used in data warehousing. Distributed databases are mainly used to manage data
    in networks, data confidentiality and data integrity.
  prefs: []
  type: TYPE_NORMAL
- en: '[1.4.3 Traditional versus Distributed Databases](chapter1.xhtml#re_ch-1-sec-20)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Database systems are the collection of data, storage of data, management of
    data and finally distribution of the data to various related applications. In
    the past, punch cards were used for data storage. The first database was designed
    by Charles W. Bachman in 1960\. Next the well-known company IBM implemented their
    own DBMS called IMS. Likewise many other companies released their own paid and
    unpaid software in the market, and different types of DBMS are also available.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between the traditional DBMS and distributed DBMS is that distributed
    DBMS are the modified or latest updated version of traditional DBMS. In each development
    of DBMS, introduced new features were introduced that were very useful for the
    users as well. Nowadays many database products are available in the market. The
    main difference is that the traditional database management systems used only
    a single machine and a single software instant can access the database. These
    problems are addressed by distributed computing, as databases are available in
    different machines connected through a network. Any device can access the distributed
    database [[14](#re_TNF-CH001_CIT00014)] within the network software. All types
    of queries can be generated from different machines connected in the network,
    and the distributed database system can execute the query and return back the
    result.
  prefs: []
  type: TYPE_NORMAL
- en: '[1.4.4 Distributed Computing and Blockchain](chapter1.xhtml#re_ch-1-sec-21)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Distributed computing methods are one of the basic computing principles that
    drive the blockchain mechanism. Generally now everyone has a basic idea of a blockchain
    as a large network of computers which can authenticate and verify huge transactions.
    However, the internal mechanism of distributed computing can lead to a better
    base for blockchain technology. It can also help to make more information by focusing
    on working scenarios of distributed computing technologies.
  prefs: []
  type: TYPE_NORMAL
- en: '[1.5 Distributed Computing Environment of Blockchain](chapter1.xhtml#re_ch-1-sec-22)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Generally, distributed computing methods are like a network of computers working
    together as a single system. The systems can be located close to one another and
    with a wired network as part of a single local network. Other networks such as
    blockchains widely use geographically dispersed computers networks.
  prefs: []
  type: TYPE_NORMAL
- en: Distributed computing has been used for far longer than blockchain mechanisms.
    The use of computers in education and research grew very early, requiring computers
    to connect to one another, sharing hardware such as memory and printers. In the
    1970s the first local area networks were established with many systems. The first
    distributed computing machines were local area networks such as Ethernet, a group
    of networking hardware technologies developed by Xerox. Now it is widely distributed
    and everyone make use of it. Each time you join a new Wi-Fi connection, you are
    entering into a new computer network scenario.
  prefs: []
  type: TYPE_NORMAL
- en: In 21st century, the usage of distributed systems and distributed computing
    technologies has vital roles in solving real-world problems. Each unit of problem
    phases is connected to the others and finally derive appropriate solutions ([Figure
    1.9](chapter1.xhtml#fig1.9)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig1.9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.9 Ethernet connections.
  prefs: []
  type: TYPE_NORMAL
- en: A blockchain is a peer-to-peer (P2P) network, which is a slightly different
    kind of distributed system [[15](#re_TNF-CH001_CIT00015)] than that illustrated
    in the example. Now distributed systems are groups of independent nodes connected
    with others in a specified manner in order to produce a common result, and they
    are strictly structured in such a way that these groups appear to be a single
    well-defined system for the end user.
  prefs: []
  type: TYPE_NORMAL
- en: Through these networks, each system can communicate with the others by messages
    and responses. The main advantage is that communication between each system provides
    synchronization as well as an error-free environment. Most of the distributed
    systems are effectively bounded with synchronous messaging channels.
  prefs: []
  type: TYPE_NORMAL
- en: 'By analyzing each node, the following can be found:'
  prefs: []
  type: TYPE_NORMAL
- en: The nodes are largely programmable, autonomous, asynchronous and failure-free.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each node has its own storage and computing processor. They have shared memory
    and can operate concurrently.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The nodes are interconnected with others to offer services, and share or store
    data (e.g. blockchain).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All nodes communicate with others by using messages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every node in the distributed system is capable of sending and receiving messages
    to and from the others.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[1.5.2 Distributed Computing Architecture](chapter1.xhtml#re_ch-1-sec-23)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are mainly two types of architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Client–server architecture
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2\. Peer–peer architecture
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[1.5.2.1 Client–Server Architecture](chapter1.xhtml#re_ch-1-sec-24)'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In client–server architecture, the main entities are:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2\. Clients
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Server: An entity that is purely responsible for offering services to the client;
    servers provide services like storage, data processing, deploying applications,
    etc.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Client: A client is an entity that communicates with the server in order to
    complete its local task. They are normally connected to the server on the Internet
    ([Figure 1.10](chapter1.xhtml#fig1.10)).'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/fig1.10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.10 Client–server architecture.
  prefs: []
  type: TYPE_NORMAL
- en: This architecture is a good example of a service-oriented system.
  prefs: []
  type: TYPE_NORMAL
- en: The biggest disadvantage of this type of architecture is that the complete system
    is dependent on the central single point (server). If the server goes down, then
    the whole system stops.
  prefs: []
  type: TYPE_NORMAL
- en: In this architecture, there is different layered architecture [[16](#re_TNF-CH001_CIT00016)]
    in which, according to the purpose, several layers can be added on the client
    side as well the server side in order to accomplish the system requirements, security
    and complexity. Commonly used layered architecture types include two-tier and
    three-tier architecture. Each architecture type has its own characteristics to
    provide maximum security to participants.
  prefs: []
  type: TYPE_NORMAL
- en: '[1.5.2.2 Peer-to-Peer Architecture](chapter1.xhtml#re_ch-1-sec-25)'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: P2P architecture is a network of inter-connected systems in which they are capable
    of sharing resources and information. Every system connected to the network is
    referred to as a node or “peer”. This type of architecture can be used in blockchain
    technology, transportation services, education, e-commerce, banking and finance,
    etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'Advantages of P2P architecture are:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. It can be easily configured.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2\. It is easy to install.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 3\. All the nodes are capable of sharing resources with other nodes and can
    communicate with other nodes present in the network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 4\. If any single node goes down it will not affect the complete system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 5\. Maintaining such architecture is comparatively cost-effective ([Figure 1.11](chapter1.xhtml#fig1.11)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/fig1.11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.11 Peer-to-peer architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain technology works on the principle of peer-to-peer architecture; it
    helps the technology to be more powerful, secure and efficient. Blockchain can
    be used for many industrial purposes but it is most commonly used in “cryptocurrencies”.
  prefs: []
  type: TYPE_NORMAL
- en: A peer-to-peer network is centric when it comes to managing transactions within
    a blockchain. All the nodes can communicate with others and transact with the
    others in the blockchain. All peer-to-peer networks are decentralized, and a blockchain
    is also a decentralized application. This characteristic makes the blockchain
    technology more secure than other technologies and very hard to hack or break
    into. But the most complicated part is that backups and security must be provided
    to each node individually, and there is no centralized entity to manage all the
    nodes in the architecture.
  prefs: []
  type: TYPE_NORMAL
- en: '[1.6 Distributed Ledger in Blockchain](chapter1.xhtml#re_ch-1-sec-26)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A distributed ledger is like a database that is manually shared and synchronized
    across multiple nodes, sites, institutions or geographies. It will provide transactions
    with public witnesses, by making a cyber-attack even more difficult. The objects
    at each node of the network can access the data shared across that distributed
    network and have an identical copy of them. Any changes made to ledgers are reflected
    to all other nodes in fractions of time.
  prefs: []
  type: TYPE_NORMAL
- en: '[1.6.1 Computing Power and Breakthroughs in Cryptography](chapter1.xhtml#re_ch-1-sec-27)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A distributed ledger of any transactions or contracts is established in decentralized
    form across different locations and people, eliminating the need for a single
    central authority to keep a barrier against manipulations. All the data on it
    are stored securely using cryptographic techniques. Once the data/information
    are stored, it becomes an immutable database, which is one of the basic rules
    of the network.
  prefs: []
  type: TYPE_NORMAL
- en: The abstraction at the center of blockchain systems is the notion of a ledger,
    an invention of the Italian Renaissance developed to support the double-way-entry
    book-keeping system, a distant precursor of modern cryptocurrencies [[16](#re_TNF-CH001_CIT00016)].
    A ledger is just an indelible, append-only-log of transactions between various
    parties ([Figures 1.12](chapter1.xhtml#fig1.12) and [1.13](chapter1.xhtml#fig1.13)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig1.12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.12 Centralized ledger.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig1.13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.13 Distributed ledger.
  prefs: []
  type: TYPE_NORMAL
- en: 'Real-world examples of distributed ledgers:'
  prefs: []
  type: TYPE_NORMAL
- en: Government procedures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Institutions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corporate work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Issuance of passports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Licenses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Voting procedures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agreements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identity cards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While the distributed-ledger technology has more advantages, it’s at an early
    stage and is still being explored. The future of centuries-old ledgers is the
    decentralized ledger.
  prefs: []
  type: TYPE_NORMAL
- en: '[1.6.2 Public and Private Blockchain](chapter1.xhtml#re_ch-1-sec-28)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The difference between private (permissioned) blockchain systems, where objects
    have reliable and authorized identities and only strictly vetted parties can participate,
    and public (permissionless) blockchain systems, where objects cannot be reliably
    identified and anyone can participate, is critical for making sense of the blockchain
    landscape.
  prefs: []
  type: TYPE_NORMAL
- en: Private blockchains [[17](#re_TNF-CH001_CIT00017)] are better for business applications,
    particularly in regulated industries, like finance, subject to know-your-customer
    and anti-money-laundering regulations. Moreover, private blockchains also tend
    to be better at governance. Most prior working methods on distributed algorithms
    have focused on system participants having reliable identities.
  prefs: []
  type: TYPE_NORMAL
- en: Public blockchains are better for applications such as Bitcoin [[18](#re_TNF-CH001_CIT00018)–[19](#re_TNF-CH001_CIT00019)],
    which guarantee that nobody can decide or control who can participate in the scenario,
    and participants may or may not be eager to have their identities known. Each
    node can act as an independent workstation along with computing systems.
  prefs: []
  type: TYPE_NORMAL
- en: '[1.7 Conclusion](chapter1.xhtml#re_ch-1-sec-29)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The application of the blockchain mechanism is enhanced day by day with different
    mechanisms and computing techniques. Many of the internet-based methodologies
    are now using the advantages of distributed systems as well as the blockchain
    mechanism. Once submitted any data in the system will be safe forever, which enables
    many applications in the field of finance and other related sectors. Some of the
    areas are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: VeChain is a blockchain platform which aims to enhance business operations by
    improving the tracking of products and processes. BitGold is a 2005 proposal that
    resembles Bitcoin’s consensus system and incorporates hashes. A cryptocurrency
    can be defined as a digital or virtual currency that uses cryptography. A cryptocurrency
    is very difficult to counterfeit because of this security feature. Digital copy
    is a duplicate record of every Bitcoin transaction that has taken place over a
    peer-to-peer network.
  prefs: []
  type: TYPE_NORMAL
- en: '[References](chapter1.xhtml#re_b-9781000175257-bib1)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1](#TNF-CH001_CIT00001). Nagasubramanian, Gayathri, Rakesh Kumar Sakthivel,
    Rizwan Patan, Amir H. Gandomi, Muthuramalingam Sankayya, and Balamurugan Balusamy
    . “Securing e-health records using keyless signature infrastructure blockchain
    technology in the cloud.” Neural Computing and Applications (2018): 1–9.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[2](#TNF-CH001_CIT00002). Westerlund, Magnus, and Nane Kratzke . “Towards distributed
    clouds: a review about the evolution of centralized cloud computing, distributed
    ledger technologies, and a foresight on unifying opportunities and security implications.”
    In 2018 International Conference on High Performance Computing & Simulation (HPCS),
    pp. 655–663\. IEEE, 2018.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[3](#TNF-CH001_CIT00003). Archer, Charles J., Michael A. Blocksome, James E.
    Carey, and Philip J. Sanders . “Administering virtual machines in a distributed
    computing environment.” U.S. Patent 10,255,098, issued April 9, 2019.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 4\. Meng, Gang. “Stable data-processing in a distributed computing environment.”
    U.S. Patent 10,044,505, issued August 7, 2018.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[5](#TNF-CH001_CIT00005). Wong, Wai Ming, and Michael C. Hui. “Method and system
    for modeling and analyzing computing resource requirements of software applications
    in a shared and distributed computing environment.” U.S. Patent Application 10/216,545,
    filed February 26, 2019.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[6](#TNF-CH001_CIT00006). Cairns, Douglas Allan. “Efficient computations and
    network communications in a distributed computing environment.” U.S. Patent 10,248,476,
    issued April 2, 2019.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[7](#TNF-CH001_CIT00007). Archer, Charles J., Michael A. Blocksome, James E.
    Carey, and Philip J. Sanders . “Administering virtual machines in a distributed
    computing environment.” U.S. Patent 10,255,098, issued April 9, 2019.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[8](#TNF-CH001_CIT00008). Dillenberger, Donna Eng, and Gong Su . “Parallel
    execution of blockchain transactions.” U.S. Patent 10,255,108, issued April 9,
    2019.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '9\. Li, Keqin. “Scheduling parallel tasks with energy and time constraints
    on multiple manycore processors in a cloud computing environment.” Future Generation
    Computer Systems 82 (2018): 591–605.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[10](#TNF-CH001_CIT00010). Chen, Zhen, Pei Zhao, Fuyi Li, André Leier, Tatiana
    T. Marquez-Lago, Yanan Wang, Geoffrey I. Webb et al. “iFeature: a python package
    and web server for features extraction and selection from protein and peptide
    sequences.” Bioinformatics 34, no. 14 (2018): 2499–2502.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '11\. Wei, Leyi, Shasha Luan, Luis Augusto Eijy Nagai, Ran Su, and Quan Zou
    . “Exploring sequence-based features for the improved prediction of DNA N4-methylcytosine
    sites in multiple species.” Bioinformatics 35, no. 8 (2018): 1326–1333.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[12](#TNF-CH001_CIT00012). Salloum, Said A., Mostafa Al-Emran, Azza Abdel Monem,
    and Khaled Shaalan . “Using text mining techniques for extracting information
    from research articles.” In Intelligent Natural Language Processing: Trends and
    Applications, pp. 373–397\. Springer, Cham, 2018.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[13](#TNF-CH001_CIT00013). Shae, Zonyin, and Jeffrey Tsai . “Transform blockchain
    into distributed parallel computing architecture for precision medicine.” In 2018
    IEEE 38th International Conference on Distributed Computing Systems (ICDCS), pp.
    1290–1299\. IEEE, 2018.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[14](#TNF-CH001_CIT00014). Xiong, Zehui, Yang Zhang, Dusit Niyato, Ping Wang,
    and Zhu Han . “When mobile blockchain meets edge computing.” IEEE Communications
    Magazine 56, no. 8 (2018): 33–39.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[15](#TNF-CH001_CIT00015). Puthal, Deepak, Nisha Malik, Saraju P. Mohanty,
    Elias Kougianos, and Chi Yang . “The blockchain as a decentralized security framework
    [future directions].” IEEE Consumer Electronics Magazine 7, no. 2 (2018): 18–21.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[16](#TNF-CH001_CIT00016). Liu, Hong, Yan Zhang, and Tao Yang . “Blockchain-enabled
    security in electric vehicles cloud and edge computing.” IEEE Network 32, no.
    3 (2018): 78–83.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[17](#TNF-CH001_CIT00017). Hughes, Alex, Andrew Park, Jan Kietzmann, and Chris
    Archer-Brown . “Beyond Bitcoin: what blockchain and distributed ledger technologies
    mean for firms.” Business Horizons 62, no. 3 (2019): 273–281.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[18](#TNF-CH001_CIT00018). Dr. Kavita . “A future’s dominant technology blockchain:
    digital transformation.” In IEEE International Conference on Computing, Power
    and Communication Technologies 2018 (GUCON 2018) organized by Galgotias University,
    Greater Noida, 28–29 September, 2018.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[19](#TNF-CH001_CIT00019). Casado-Vara, Roberto, and Juan Corchado . “Distributed
    e-health wide-world accounting ledger via blockchain.” Journal of Intelligent
    & Fuzzy Systems 36, no. 3 (2019): 2381–2386.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '20\. Pop, Claudia, Tudor Cioara, Marcel Antal, Ionut Anghel, Ioan Salomie,
    and Massimo Bertoncini . “Blockchain based decentralized management of demand
    response programs in smart energy grids.” Sensors 18, no. 1 (2018): 162.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '21\. Saugata Dutta, and Dr Kavita . “Evolution of blockchain technology in
    business applications.” Journal of Emerging Technologies and Innovative Research
    (JETIR) 6, no. 9: 240–244, JETIR May 2019.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
