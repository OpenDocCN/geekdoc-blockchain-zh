- en: © The Author(s), under exclusive license to Springer Nature Switzerland AG 2022Y.
    Maleh et al. (eds.)Advances in Blockchain Technology for Cyber Physical SystemsInternet
    of ThingsTechnology, Communications and Computing[https://doi.org/10.1007/978-3-030-93646-4_6](https://doi.org/10.1007/978-3-030-93646-4_6)
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain for Smart Transport Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Palak Bagga^([1](#Aff7) [ ](#ContactOfAuthor1)) and Ashok Kumar Das^([1](#Aff7) [ ](#ContactOfAuthor2))(1)Center
    for Security, Theory and Algorithmic Research, International Institute of Information
    Technology, Hyderabad, IndiaPalak BaggaEmail: [palak.bagga@research.iiit.ac.in](mailto:palak.bagga@research.iiit.ac.in)Ashok Kumar Das (Corresponding
    author)Email: [ashok.das@iiit.ac.in](mailto:ashok.das@iiit.ac.in)KeywordsSmart
    transportInternet of VehiclesBlockchainAuthenticationSecurity'
  prefs: []
  type: TYPE_NORMAL
- en: 1 Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The world has witnessed immense evolution in transportation, in the last couple
    of decades. Not only has there been a devastating increase in several vehicles
    in the last few years, but also technology has turned traditional vehicles into
    smart vehicles, capable of sharing and collecting data. The smart vehicles are
    assigned with IP addresses to connect to Internet and the fellow vehicles on the
    fly. Also, many IoT sensors are installed within vehicles to gather information.
    Moreover, the rapid growth in the usage of vehicles, IoT devices, has increased
    the need for vehicle-to-vehicle communication and upgraded vehicle to infrastructure,
    vehicle to Internet, vehicle to pedestrian, vehicle to personal devices, and intra
    vehicular communications.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, normal transportation has undergone an intense innovation and got
    transformed into smart transportation framework called Internet of Vehicles (IoV).
    IoV is a network of different entities, such as vehicles, pedestrians, roads,
    parking lots, and city infrastructure, allowing the entities to communicate by
    sending messages over open channels. The message contains information flown regarding
    the road conditions or the drivers’ travel information. It might include some
    private details of the driver or the passenger, such as identity or biometrics,
    which might question privacy. Each node uses the information from neighboring
    nodes to provide services related to traffic management, road conditions, lost
    and found vehicle locating, speed control, etc.
  prefs: []
  type: TYPE_NORMAL
- en: A smart transportation system comprises intelligent vehicles, equipped with
    smart devices, sharpened processing capabilities, heightened communication technologies,
    creating an intelligent scenario to support extended services for large applications.
    IoV-enabled smart transportation is combined with HWSN (Heterogeneous Wireless
    Sensor Network) technology to assist vehicles in performing data compilation and
    transferring information easily and seamlessly. IoV uses 802.11p protocol and
    DSRC (Dedicated Short-Range Communications) [[1](#CR1)] to support enhanced communication
    and handoff schemes, making the network highly secured and providing end-to-end
    authentication simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: IoV-enabled smart transportation [[2](#CR2)] manages traffic; improves transportation,
    energy consumption, and efficiency; saves cost and time of customers; and reduces
    fatal occurrences saving lives. Vehicles upload traffic-related information in
    the data center for traffic analysis. Vehicles can even fetch information from
    the data center via *RSU* to take traffic-related decisions. Wrong information
    might lead to loss of life, time, and economy. Therefore, the authenticity of
    vehicles and *RSU*s is important to ensure the correctness of the information
    stored and preserve the customers’ privacy.
  prefs: []
  type: TYPE_NORMAL
- en: Many authentication Schemes [[3](#CR3)–[9](#CR9)] have been suggested to ensure
    privacy, integrity, unlinkability, along with secure communication in an open
    channel. But the schemes face many issues, like central registration authority,
    privacy issues, long certificate mechanism, fabricated hardware problems, excess
    storage overheads, and large computation and communication costs. These issues
    make the applications of such schemes in real-time smart transportation difficult
    and impossible as they may lead to errors, consequences, and threats. For this
    reason, various blockchain-based solutions are provided recently which mitigate
    all the issues faced by traditional authentication mechanism and makes it efficient
    for smart transportation. This chapter focuses on efficient blockchain-based authentication
    protocols and has less computation and communication costs with extra security
    and functionality features.
  prefs: []
  type: TYPE_NORMAL
- en: The Architecture of IoV-Enabled Smart Transport System
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Figure [1](#Fig1) represents the architecture of the IoV-enabled smart transportation
    system. Smart or Intelligent Transportation System (ITS) consists of many vehicles
    (*V* [*i*], *i* = 1, 2, 3,…, *n*) and roadside units (*RSU* [*j*], *j* = 1, 2,
    3,…, *n* [*r*]). Vehicles collect sensitive information about their surroundings
    via installed multiple sensors. IoT devices like mass airflow sensor, engine speed
    sensor, oxygen sensor, spark knock sensor, coolant sensor, Global Positioning
    System (GPS), forward and rear sensors, speed sensor, smart card device, and fingerprint
    device collect information via *onboard unit (OBU)* which is placed in the vehicle.
    The collected information is stored in the vehicle’s *tamper-proof device (TPD)*.![](../images/513458_1_En_6_Chapter/513458_1_En_6_Fig1_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 1
  prefs: []
  type: TYPE_NORMAL
- en: IoV-enabled smart transport system
  prefs: []
  type: TYPE_NORMAL
- en: The *RSU*s are installed at fixed places and are responsible for managing instantaneous
    vehicles in their scope. They also regulate the flow of information among the
    entities within their zones. A smart transportation system also has a trusted
    authority (*TA*), which is fully trusted and is used to register vehicles and
    *RSUs*. Some architectures might also deploy many *TAs* to decrease the latency
    and load of one TA. With multi *TA* architecture, a cross *TA* authentication
    problem occurs, when a vehicle goes from one *TA* zone to another [[10](#CR10)].
    *RSU* and *TA* generally have dedicated connections that are secured. Still, the
    communication between the vehicles and *RSU* happens over vulnerable, open channels
    using the IEEE 802.11p protocol and Dedicated Short-Range Communications (DSRC)
    [[1](#CR1)].
  prefs: []
  type: TYPE_NORMAL
- en: The new advancements allowed intelligent vehicles to communicate with other
    vehicles and collaborated vehicles with infrastructure and the Internet by exchanging
    messages. With the increased population and boost in number of vehicles, IoV has
    become one of the most stretched incentives in today’s world [[11](#CR11)].
  prefs: []
  type: TYPE_NORMAL
- en: A smart transportation system allows vehicles to communicate to other entities
    via many communication systems, as shown in Fig. [1](#Fig1) [[12](#CR12)].
  prefs: []
  type: TYPE_NORMAL
- en: '*Intra-Vehicle system*: Intra-vehicle communication allows a vehicle to communicate
    with pre-installed IoT devices and sensors like camera, smart card reader, and
    fuel sensor. A vehicle collects the information from within and uses that to broadcast
    it to other vehicles or *RSU*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Vehicle-to-Vehicle (V2V) system*: Under V2V system, every vehicle is allowed
    to communicate with other fellow vehicles in its communication range. This data
    is used to form clusters or give traffic updates to *RSU*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Vehicle-to-Infrastructure (V2I) system*: Smart transportation comprises infrastructure
    capable of communicating with vehicles. The communication between a vehicle and
    infrastructure (e.g., Parking station, fuel station, police station roadside units
    (RSUs)) is performed under V2I communication system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Vehicle-to-Cloud (V2C) system*: The V2C system allows vehicles to interact
    with the cloud directly. This might help vehicles to store and retrieve sensitive
    data securely.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Vehicle-to-Sensor (V2S) system*: The V2S system provides access to the data
    gathered from the sensors installed in the vehicles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Vehicle-to-Human (V2H) system*: The V2H system allows the users like drivers,
    pedestrians, traffic policeman, cab customers, and cyclists to communicate with
    vehicles. This increases the awareness and spontaneity of the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applications of IoV-Enabled Smart Transport System
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the rapid increase in the number of vehicles, urban cities and roads are
    scummed under the pressure of the growing population. As a result, managing and
    controlling traffic is one of the biggest and vital applications of ITS. Smart
    transportation has improved the quality of transportation and has added luxury
    to the on-road experience. It provides various services to the users on the road
    and meanwhile, it also promotes safety applications to take care of users’ (drivers
    and customers) safety and privacy [[13](#CR13)–[16](#CR16)].
  prefs: []
  type: TYPE_NORMAL
- en: '*Safety applications:* Accident-prone areas notification, alert turn notification,
    pedestrian crossing notification, overtaking vehicle notification, collision avoidance
    application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Real-time applications of smart transportation:* Some real-time applications
    are automatic road administration, emergency vehicle notification, notification
    when the wrong way is taken, condition of the traffic on the road, notification
    on breaking a signal, alerts on the speed limit, collection of tolls digitally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Driver assistance applications:* Fuel limit warnings, mileage notification,
    door and window open signaling, seat belt sign, general Internet access, parking
    management, GPS navigation signaling, nearby fuel station information, pre-crash
    systems to avoid hazardous crashes on the road [[17](#CR17)], brakes monitoring,
    proximity with objects warnings, merging road warnings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Passenger services:* Video streaming, sharing multimedia, general Internet
    access, locating Automated Teller Machine (ATM), hotels, restaurants on the way,
    availability of cabs, etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Cost-effective services:* Better use of resources, accident prevention mechanism,
    minimum energy consumption, inexpensive public transit, saving fuel cost, road
    maintenance [[18](#CR18)], etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter Motivation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Smart transportation has lots of benefits and various real-time applications.
    However, various vulnerabilities need strong consideration while designing the
    security schemes. The communications among these entities (e.g., vehicles, pedestrians,
    fleet management systems, and roadside infrastructure) occur via open channels.
    The adversary can target an insecure communication to eavesdrop, modify, insert
    fabricated (or malicious) messages, or delete data in transit, resulting in replay,
    impersonation, man-in-the-middle, or privileged-insider attacks, among others.
    Therefore, strong security solutions or authentication protocols are required
    that fulfill the security and functionality aspects. It is also important for
    the security solution to be cost-effective and time-efficient. Recently, blockchain
    technology has come out as a flying color to provide security solutions in managing
    smart transportation. Blockchain technology is decentralized, immutable, and transparent,
    making it appropriate to use as a security solution. In this chapter, we mainly
    focus on blockchain-based security protocols for smart transportation. The main
    objective of this chapter is to provide a brief introduction to the latest blockchain
    technology and its implementation to provide security solutions for smart transportation.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter Contributions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The main contributions of this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We provide a brief explanation of blockchain and its types. Further, we elaborate
    on various consensus algorithms that can be implemented in smart transportation.
    We also state the advantages of blockchain implementation in smart transportations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We emphasize various security and privacy issues in the smart transport system.
    The section describes security aspects and functionality requirements on Internet
    of Vehicles-enabled smart transportation. We also list several attacks that can
    be performed and threats on smart transportation, due to the vulnerability of
    open communications between the entities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A detailed description of recent schemes that have provided security solutions
    for blockchain-based smart transportation systems is provided. To ease the understanding,
    we summarize their advantages, limitations, and other characteristics in a table.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also provide a detailed performance comparison of the schemes. We compare
    and analyze the schemes based on their computation cost, communication cost, and
    other security functionality features.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter Organization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The organization of this chapter is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In Sect. [2](#Sec7), we briefly explain blockchain and its types and elaborate
    on various consensus algorithms implemented in smart transportation. We also state
    the advantages of blockchain implementation in smart transportations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section (Sect. [3](#Sec11)), we provide security aspects, functionality
    requirements, attacks, and threats in Internet of Vehicles-enabled smart transportation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further in Sect. [4](#Sec15) we describe recent schemes that have provided security
    solutions for the blockchain-based smart transportation system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Later in Sect. [5](#Sec16), we provide a detailed performance comparison of
    the schemes described in Sect. [4](#Sec15).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Section [6](#Sec19) concludes this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2 Blockchain Technology and Its Evolution in IoV-Enabled Smart Transport System
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Intelligent Transportation System (ITS)-based IoV consists of entities that
    do not trust each other and communicate over an open channel. The lack of trust
    and open communication forms an insecure channel, making it easy and approachable
    for an adversary to launch various security attacks. Not only this, but in a real-time
    application like IoV, an attacker can even trace the users’ messages and identities,
    and might hamper the privacy of the customers and drivers, which can be life-threatening.
    Therefore, blockchain-based solutions are one of the most optimal approaches to
    providing security in an IoV-enabled smart transport system. It also maintains
    functionality features like traceability and anonymity.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain is distributed database whose copy exists in parallel on different
    nodes in the network. The blocks are added one after the other in a chain such
    that each block is linked to the previous block’s hash value. The root block in
    the blockchain is known as the genesis block. Every blockchain block consists
    of a version of the block, the previous block’s hash value, timestamp value, a
    random nonce value, and number of transactions within the block. After the block
    is formed, every node validates the block and the validated block is added to
    the blockchain and is linked to the previous block by the parent hash value. Therefore,
    any block added in the chain is impossible to tamper with, and no block can be
    added between two already added blocks. This way, the records stored in the block
    are simultaneously open and secure.
  prefs: []
  type: TYPE_NORMAL
- en: Types of Blockchain
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Blockchain technology can be categorized into three types: public blockchain,
    private blockchain, and consortium blockchain.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Public blockchain*: Public blockchain, also known as a permissionless blockchain,
    works in an open environment like Ethereum and Bitcoin where anyone can join and
    write the shared blocks. Every participant in the public blockchain is given equal
    privilege in drawing a consensus in the consensus mechanism. Public blockchains
    abide entirely by the properties like non-repudiation, transparency, and traceability.
    Scalability is an issue in such blockchains as the rate of validation of blocks
    increases with an increase in the number of nodes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Private blockchain*: Private blockchain [[19](#CR19)] like Hyperledger, multichain
    fabric works in a closed environment where all the participants allowed in the
    process are well known. A private blockchain is also known as a business blockchain
    [[20](#CR20)]. Public and private blockchains differ in enabling users to access,
    store, modify, send, and receive transactions. Public blockchains are open to
    all; anybody can access the blockchain, whereas only trusted entities are allowed
    to access the blockchain in private blockchain, thus forming a trusted network.
    In a private blockchain, only the authoritative entity assigns specific tasks
    to the trusted entities to perform. Private blockchains are more scalable than
    public as a centralized group monitors the users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Consortium blockchain*: A hybrid approach combining public and private blockchain
    to reach consensus in a peer-to-peer network is called consortium blockchain.
    The access in consortium blockchain is given to a predefined set of nodes. Any
    new node that wishes to join the network should be authenticated and authorized.
    Private and consortium blockchain are known as permissioned blockchain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consensus Mechanism
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Blockchain technology does not rely on a third party for validation and verification.
    Therefore, a mechanism is followed to validate the information and add the transactions
    to the block and the blockchain. The mechanism is called a *consensus mechanism*
    [[21](#CR21)]. Consensus means a process to agree with a decentralized or distributed
    network platform where the nodes cannot trust each other. A consensus mechanism
    is a procedure like a state machine running on every node in the network so that
    every individual concludes on the same output. A consensus mechanism is an algorithm
    that helps the miners validate a transaction and decide to add or drop a block
    in the blockchain. It ensures a tamper-free environment where one version of the
    truth should be agreed upon. It solves the problem of trust in blockchain, as
    all the non-trusted miners participating in the process undergo a similar algorithm
    to agree on the block’s validity. The consensus algorithm also mitigates the effect
    of the presence of faulty nodes in the network. All the nodes must reach an agreement
    about the state of the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: 'A consensus mechanism should have the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Consistency*: The result of a consensus algorithm is that all nodes should
    agree on the same block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Validity*: The agreed block should be the block that receives the majority
    consensus.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Liveliness*: Eventually, the algorithm should terminate; the nodes should
    decide on some block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Choosing an appropriate consensus algorithm is the most important part of the
    implementation of an effective blockchain solution. The choice of the consensus
    algorithm is based on various factors like type of blockchain: public, private,
    or consortium, scalability of the network, tolerance to withstand attack or failures
    like node failures, partition failure, or byzantine failure. The consensus mechanism
    should produce high throughput and incur low latency. IoV is a real-time application
    with many vulnerabilities; therefore, a consensus mechanism should be less complex
    and should consume low bandwidth with minimum energy consumption [[22](#CR22)].'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consensus algorithm basically can be classified into two types: (1) Proof based.'
  prefs: []
  type: TYPE_NORMAL
- en: '(2) Voting based. In *a proof-based consensus algorithm*, the nodes with the
    highest computational power are given the right to append the block to the blockchain.
    Proof-based consensus is used in public blockchains. *Voting-based algorithms*
    are preferred in private blockchains, where a block can be added to the blockchain
    only after a threshold number of nodes have agreed on it. Any node that wishes
    to append a block needs vote of its peer nodes to get the consensus to add it
    [[23](#CR23)]. Some effective consensus algorithms are briefed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Byzantine Fault Tolerance (BFT)* [[24](#CR24), [25](#CR25)] algorithm helps
    a group of nodes within a closed network to reach a consensus even in the presence
    of faulty nodes. The algorithm runs in pre-prepare, prepare, and commit phases.
    Once the message sent in the pre-prepare phase is accepted by (2f + 1) nodes where
    f: number of faulty nodes, the message is accepted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Practical Byzantine Fault Tolerance (PBFT)* [[26](#CR26)] algorithm is a variant
    of BFT and it reaches to consensus with (3f + 1) accepting nodes. The consensus
    is reached in pre-prepare, prepare, and commit phases. PBFT has low scalability.
    Other variants of Byzantine Fault Tolerance algorithms are “Delegated Byzantine
    Fault Tolerance (DBFT)” and “Federated Byzantine Agreement (FBA)” [[27](#CR27),
    [28](#CR28)].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ripple protocol* consensus algorithm is another voting-based consensus algorithm.
    All participating nodes maintain a list of trusted nodes called as “Unique node
    list.” Participant nodes receive the transaction constantly throughout the process.
    If the transaction is valid, it is added to the candidate set. All the participating
    nodes exchange their candidate sets with each other as proposals. The transaction
    is checked for validity on receiving the proposal, only if it comes from the trusted
    neighboring node. A transaction that gets more than 80 percent of votes is added
    to the block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In *Proof of Work* [[29](#CR29)], the miner has to do some heavy computational
    work to calculate a nonce value based on the previous block’s hash value to add
    the block to the blockchain. The work to add/tamper the block is based on all
    the blocks in the blockchain, and should be heavy and not be possible to be performed
    in generic environment to discourage an attacker. PoW requires heavy energy consumption
    which makes it infeasible to apply in IoT environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Proof of Stake (PoS)* [[30](#CR30), [31](#CR31)] mechanism chooses the miner
    based on economic stake or bitcoins that it holds. Adversaries can increase the
    number of transactions to increase stake, which might also lead to unfair method
    of choosing a leader.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Proof of Vote (PoV)* [[32](#CR32)] consensus mechanism is proposed for consortium
    blockchains. The network nodes are categorized into four categories: (1) Butler,
    (2) Butler candidate, (3) Commissioner, and (4) Ordinary user. Several enterprises
    form a consortium network and commissioners are the members of the league. A butler
    is a node that can create a block like miners in PoW. A butler is chosen out of
    the butler candidates by a commissioner unlike PoW where they have to prove their
    power. A node can willingly become a candidate by registration and recommendations.
    A block is added to the blockchain based on the votes of commissioners. An ordinary
    user can only distribute the message but cannot take part in the block formation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advantages of Blockchain Implementation in Smart Transportation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Recent schemes use blockchain as the security solution in smart transportation
    because of the following advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Transparency*: Any user can participate in adding or validating the block
    in the blockchain for a public blockchain. Similar to this, any transaction or
    block added to the blockchain is accessible to all the users. In a private blockchain,
    the data is only open to the private authorized users. Also, it is easy to track
    the transactions made by an entity even when its real identity is secured.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Immutability*: It means that once a block is inserted into public or private
    blockchain, it is impossible to modify or tamper it later. As the blocks consist
    of the previous block’s hash value, any change of the value in a block would affect
    the validity of all the consecutive blocks. Moreover, the copy of blockchain is
    present with every network user, so copies could easily be identified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Traceability*: The data is stored in blocks that are added to the blockchain.
    Verifying/tracing the data stored in blockchain is possible due to the presence
    of nonce and also the fact that the data is mapped to the timestamped value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Interoperability*: Applications like IoV, Internet of Things (IoT), Internet
    of Drones (IoD), smart grids, and smart framings consist of heterogeneous devices.
    These applications face one major challenge to interoperate with each other. Blockchain
    allows various IoT systems and devices to communicate among themselves by exchanging
    data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Reliability*: The data stored within the blockchain blocks is valid and can
    be trusted. Various cryptographic techniques like hashing and encryptions form
    the underlying basis for storing data in the blockchains.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Decentralization*: Traditional database systems were dependent on any third
    party or agency for validation. Blockchain technology is unique and works independently
    using a distributed ledger that validates the nodes’ transactions without consulting
    or requiring a third party. Using decentralized blockchain reduces the overall
    communication overheads and properly uses the shared resources within the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Non-repudiation*: When a transaction is added to the block, it is digitally
    signed using the private key of the miner, which the public key can only verify.
    So, no node can deny the digitally signed transaction added by it into the block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain technology reduces time, cost, dependency on the third party, and
    security of the data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Due to the above-stated advantages, blockchain is implemented in applications
    like supply chains, financial administrations, medicinal services, governments
    and numerous different ventures, trailblazers, energy, health and medical care,
    Internet of Things, Internet of Vehicles, smart cities, digital asset trading,
    property right protection, and education. The recent schemes like Internet of
    Vehicles (IoV) [[33](#CR33)], Intelligent Transportation Systems (ITS) [[34](#CR34)],
    Internet of Intelligent Things (IoIT) [[35](#CR35)], Software Defined Networks
    (SDN) [[36](#CR36)], supply chains [[37](#CR37)–[39](#CR39)], smart grids [[40](#CR40)],
    healthcare applications [[41](#CR41)–[44](#CR44)], Internet of Everything (IoE)
    [[45](#CR45)], Internet of Drones (IoD) [[46](#CR46)], smart farming [[47](#CR47),
    [48](#CR48)], IoT and industrial IoT [[49](#CR49), [50](#CR50)], and military
    applications [[51](#CR51)] have implemented blockchain in order to increase their
    security features.
  prefs: []
  type: TYPE_NORMAL
- en: Figure [2](#Fig2) summarizes various applications that have implemented blockchain
    to enhance their security and functionality features.![](../images/513458_1_En_6_Chapter/513458_1_En_6_Fig2_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2
  prefs: []
  type: TYPE_NORMAL
- en: Applications of blockchain technology
  prefs: []
  type: TYPE_NORMAL
- en: 3 Security and Privacy Issues in Smart Transport System
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Security Requirements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The security requirements in smart transport applications are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Integrity:* One of the basic requirements of a smart transportation network
    is integrity. The integrity of the network is maintained, by ensuring that the
    data flown in the network is not manipulated or deformed. To be precise, the data
    received by the receiver should exactly be similar to what was sent by the sender.
    Possible attacks that might question the integrity of the network are malware
    attacks, gray and black hole attacks, message tampering, or fabrication attacks,
    etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Authentication:* Authentication is one of the most important aspects of a
    successful smart transport network. The authentication of nodes like vehicles
    and *RSUs* in the IoV network ensures that no malicious vehicle can claim to be
    another true authenticated existing vehicle. A user is validated of who he/she
    claims to be before allowing him/her to send any message in the network. The authentication
    procedure also prohibits spoofing the receiver by the false sender of the data.
    It easily recognizes the fake crooked vehicles from the valid authorized ones.
    Sybil attack; Global Positioning System (GPS) spoofing; black, gray, and wormhole
    attack; fabrication attack; and replay attack are some of the attacks hampering
    the authenticity of messages or nodes in the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Confidentiality:* In an IoV-enabled smart transportation, certain information
    like the driver’s identity and location or speed of the vehicle needs to be public.
    Therefore, it becomes important to safeguard the privacy of the customers or the
    business involved in IoV. So, a successful transportation network should hide
    delicate data so that it is not exposed to the adversary by using various cryptographic
    techniques like encryption or hashing. Having stated that, it is also important
    to trace the identity of the vehicles that act fictitiously. So, conditional privacy
    or confidentiality should be maintained to avoid attacks like eavesdropping, ID
    disclosure, and traffic analysis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Non-repudiation:* In real-time and vulnerable applications like smart transportation,
    fatal conditions like accidents, forgery, and thefts are prone to occur. Therefore,
    if any vehicle that falls in the range of accident or fatal condition sends any
    message in the network should not deny being the sender of the message. This would
    help the *T A* to identify the real offender of the situation easily.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Availability:* In the past few decades, the production of vehicles, and their
    users like drivers and customers are expanding. So, the smart transportation network
    needs to be available all time to all authenticated and authorized users. An attacker
    can attack a network via a denial of service (DoS) attack by sending numerous
    false illegal requests to congest or break down the network and make it unavailable
    for authenticated users [[52](#CR52)]. Other possible attacks on the availability
    of the network are spamming, blackhole, grayhole, jamming, and malware attacks
    [[53](#CR53)].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Scalability:* Scalability is an important security requirement of a smart
    transport network. Scalability as a security feature ensures the expansion of
    the vehicular network. An increase in the number of nodes or users in the network
    should not create or amplify other security issues [[54](#CR54)].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Time constraint or freshness:* IoV-enabled smart transportation network is
    a real-time application where the messages like traffic updates, road conditions,
    accident warnings, and emergency warnings and signals should not reach with any
    delay to the intended user. Also, the attacker should not be able to use the rotten
    message to misuse the services provided by the network. Other requirements like
    authentication and confidentiality should be performed instantly without any delay
    to maintain the freshness of the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Forward secrecy:* Vehicles in smart transportation network constantly change
    their position within the network. The membership of a vehicle under a fixed *RSU*
    or *T A* changes continuously. Thus, to maintain the privacy of the messages,
    the network needs to be refreshed on every entry or exit of a vehicle. Forward
    secrecy ensures that the messages flowing in the network are not exposed to the
    vehicle once it has left the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Backward secrecy:* By backward secrecy, we ensure that the old messages flown
    before the entry of the new vehicle in the network should not be disclosed to
    the vehicle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threats and Attacks on Smart Transportation Network
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: IoV-enabled smart transportation network is a vulnerable network that is prone
    to numerous active or passive attacks. Few potential attacks and threats are represented
    in Fig. [3](#Fig3) and are also listed below [[52](#CR52), [55](#CR55), [56](#CR56)].![](../images/513458_1_En_6_Chapter/513458_1_En_6_Fig3_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 3
  prefs: []
  type: TYPE_NORMAL
- en: Various possible potential attacks and their solutions
  prefs: []
  type: TYPE_NORMAL
- en: '*Flow of false message:* An attack on the message integrity, where an adversary
    creates a fake and false environment by sending bogus, rotten message to mislead
    the authenticated user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Message injection attack:* A message injection attack is an attack on authentication,
    where an adversary tries to get access over the network by inducing an authorized
    message into the network. Further, the attacker uses the gained access to send
    tricky dangerous messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Replay attack:* An attack on authentication, where an attacker recapitulates
    an old rotten message already flown in the network to approach and access a network’s
    services and resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Cookie theft attack:* Cookie theft attack is similar to a replay attack. A
    malicious user saves the earlier used authorized cookies (credentials like user
    name and password) to illegally access and consume the network resources in the
    future [[57](#CR57)].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Sybil attack:* Sybil attack is one of the famous attacks on authentication.
    An adversary intentionally creates a vague environment by creating fake vehicles
    in the range of the targeted vehicle. The illusion of fake vehicles is created
    by using multiple false identities for a single vehicle. This creates an essence
    of a jam and triggers a fake jam signal even when the road is empty and compels
    the driver to change his/her route.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Impersonation attack:* An adversary removes an authorized user from the network
    and uses its credentials to illegally connect with innocent vehicles. After successful
    connection, an attacker can send hazardous misleading messages to existing authenticated
    vehicles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Masquerading attack:* Masquerading attack is like an impersonation attack,
    where an attacker uses the real identity of an existing authenticated user within
    the network. This attack confuses the users of the network by creating two different
    senders with same identity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Eavesdropping attack:* Eavesdropping attack is a passive attack on the confidentiality
    of the network. An adversary tries to fetch some confidential data illegally,
    by listening to the conversation of entities. An attacker uses this data in future,
    against their privacy without even letting them know.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Man-in-middle attack:* Man-in-middle attack is a combination of eavesdropping
    and impersonation attack where an adversary locates himself between the sender
    and the receiver (without letting them know) to either eavesdrop or impersonate
    one of them. By this, an attacker receives and can even fabricate all the messages
    from the sender before it reaches the receiver.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Denial-of-Service (DoS) attack:* The DoS attack attacks the network’s availability
    work where an attacker intentionally throws multiple request messages to create
    a heavy legal message load on a particular communication channel more than its
    handling capacity to create congestion. This does not let the authorized user
    leverage the resources and services of the network. DoS attack does not require
    an attacker to know the network. In a smart transportation network like IoV, DoS
    attack can be performed on *RSUs* to refrain from the legal working of the network
    [[58](#CR58)].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Wormhole attack:* A wormhole attack is also a tunneling attack, where an adversary
    advertises its wrong location to the targeted node to attract all the messages.
    The targeted node exposes all the messages to the attacker by sending them to
    the attacker node, assuming it to be a nearer node.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Message holding/manipulation/deletion attack:* Under this attack, an active
    insider node starts acting maliciously by intentionally holding back the received
    message or changing the message instead of sending it identically to the dedicated
    receiver. In other scenarios, the malicious node can even delete the message to
    halt the successful execution of services in the network. This can severely affect
    the network’s security if the message contains some emergency warnings or signals
    [[52](#CR52)].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Malware attack:* A malware attack is an attack on integrity. An adversary
    injects files in the network system containing worms or viruses that affect the
    functioning of the network [[59](#CR59)].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Guessing attacks:* IoV is an open communication application. So, during the
    communication, an adversary might guess private credentials of the user like password
    or biometrics by intercepting or eavesdropping on messages. Lost/stolen OBU or
    smart card stolen attacks might form a basis for guessing attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Data manipulation/falsification attack:* The message flown in the IoV network
    contains the data or information regarding traffic/road/network conditions. So,
    data manipulation/falsification attacks integrity that changes the content of
    the message or data to create fake signals like congestion or jams.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functionality Requirements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following are the functional requirements that are needed in smart transport
    network:'
  prefs: []
  type: TYPE_NORMAL
- en: A scheme should be able to deploy new nodes in the network. As an IoV is a network
    of heterogeneous entities, it should be able to deploy, add new nodes (vehicles
    or *RSU*) within the network whenever required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The entities or the device connected in an IoV network should mutually authenticate
    each other.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There should be high connectivity within the nodes of network such that it should
    be easy for the nodes to derive a secret pair-wise session key to have secure
    communication.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The scheme should inculcate low storage overhead on the entities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To implement a scheme in a practical environment, the number of messages flown
    in the network to mutually authenticate and establish a pair-wise session key
    should be minimal. Hence, an efficient scheme should have low communication overheads.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mutual authentication between the nodes followed by pair-wise key establishment
    should involve low computational overhead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IoV or smart transport network is growing as new nodes or devices are added
    to the network. So, no matter how many nodes are added and the network grows large,
    the communication and computation cost should remain low.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To resist the attack by an adversary, a scheme should abide by anonymity and
    untraceability, which means that if an adversary gets exposed to the messages
    flown in the network, he should not be able to know about the real sender of the
    message by the content of the message data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It might be an instant, that the driver/passenger of the network/nodes/end devices
    lose their password or their password is known to an adversary. So due to security
    reasons, the entities should be able to change their password independently at
    any time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4 Security Solutions for Blockchain-Based Smart Transportation System
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many researchers have implemented blockchain technology to provide security
    solutions for IoV-enabled smart transportation systems. The basic blockchain-based
    IoV-enabled smart transportation system model is represented in Fig. [4](#Fig4).
    It consists of the following entities:![](../images/513458_1_En_6_Chapter/513458_1_En_6_Fig4_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 4
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain-based smart transportation system model
  prefs: []
  type: TYPE_NORMAL
- en: '*Trusted authority:* A smart transportation system has a trusted authority
    (*TA*), which is a fully trusted entity and is responsible for managing the vehicles
    and *RSUs* in its area. *TAs* are assumed to have sufficient resources to perform
    intense computations. It also has large storage space. It registers all vehicles,
    RSUs before their deployment and provides them with certificates (in certificate-based
    schemes), and other credentials like public key and pseudo identities. TAs are
    the only entities that save the real identities of the entities, so they are also
    responsible for tracing the identity of the malicious vehicle on receiving any
    suspicious message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Vehicles:* A smart city has many vehicles (*V* [*i*], *i* = 1,2,3…*n*), forming
    clusters while on road. The clusters formed on the fly are dynamic as the vehicles
    are mobile nodes. A cluster consists of vehicles moving with similar speed, in
    the same direction and following the same path for quite a long time. Vehicles
    receive the certificates from the *TAs* during registration and use them in future
    communications. Vehicles collect sensitive information about the surroundings
    via installing multiple sensors. All smart vehicles are equipped with *on board
    unit (OBU)* that performs various computations throughout the authentication procedure.
    The collected sensitive information is stored in the vehicle’s *tamper-proof device
    (TPD)*, which cannot be fabricated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Roadside unit: RSU*s are installed at fixed places and are responsible for
    managing instantaneous clusters in their scope. They also regulate the flow of
    information among the entities within their zones. *RSUs* interact with vehicles
    over IEEE 802.11p protocol and Dedicated Short-Range Communications (DSRC) [[1](#CR1)]
    and with *TAs* over secured wired channel. They are used to verify the authenticity
    of traffic update messages flown in the network. In blockchain-based schemes,
    *RSUs* form transactions containing the traffic events and other details and forward
    them to edge servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Edge server:* A smart transportation is a heavy data-driven application. So,
    an architecture also embeds an edge computing layer consisting of edge servers
    whose functionality is abstracted from Internet of Things (IoT). An additional
    edge computing layer in the architecture increases the efficiency as the data
    collected from the vehicles is processed here before reaching the blockchain center.
    Edge servers form partial blocks packaging the transactions received from *RSUs*
    and sending them to cloud servers. Anonymous privacy protection is added to the
    edge computing layers. The decentralization due to the edge computing layer, lowers
    the computation cost, increases scalability, and boosts the application’s performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Cloud servers:* The cloud servers in the blockchain center layers receive
    the partially verified mined blocks from the edge computing layers or *RSU* (depending
    on the architecture), and are responsible for executing a consensus algorithm
    to mine and add a verified block the blockchain. Verified blocks, when added to
    blockchains, become accessible and immutable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access control and authentication are two important security services to secure
    different networking environments, like IoT, IoD, Internet of Vehicles (IoV),
    Wireless Sensor Networks (WSNs), cyber-physical systems, smart grids, and healthcare
    services [[60](#CR60)–[76](#CR76)]. The following describes the blockchain-based
    solutions for authentication and access control schemes based on the above-described
    model.
  prefs: []
  type: TYPE_NORMAL
- en: In smart cities, multiple TAs that manage the vehicles in their domain, avoiding
    bottleneck problems that could occur in one *TA* architecture. With multi *TA*
    architecture, cross *TA* authentication problem occurs when a vehicle goes from
    one *TA* zone to another. To support the decentralized nature of IoV and solve
    the above problems, Xu et al. proposed a blockchain-based roadside unit-assisted
    authentication and key agreement protocol for Internet of Vehicles [[10](#CR10)].
    Vehicle nodes (VNs) are equipped with onboard units (OBUs) which communicate with
    *RSU*s over open channel. System administrator initializes the system parameters
    used to register VNs before their deployment. VNs register themselves to their
    nearest TA. The registration information about VNs is stored in data center (DC).
    DC broadcasts the pointer/ block identifier and other information to TAs. TAs
    are the miners to construct private blockchain containing information about registration
    and encrypted traffic-related data. All TAs store the pointers to vehicle information
    in a block linked to the previous block and add a blockchain or distributed ledger
    based on the Proof of Stake consensus mechanism [[30](#CR30), [31](#CR31)]. During
    the authentication phase, VN sends an authentication request to *RSU* in its communication
    range. *RSU* forwards the request message to TA. *TA* checks for the presence
    of pointer to the vehicle in its blockchain and sends the authentication parameters
    of VN retrieved from DC to *RSU*. *RSU* authenticates *TA* and VN and sends the
    updated parameters to *TA* and VN. Next, *TA* authenticates *RSU* and vehicles
    authenticate *TA* simultaneously. *TA* updates the data center and sends an acknowledgment
    signal to *RSU*. Finally, both *TA* and VN agree on a session key for future communication.
    The scheme preserves anonymity and untraceability and is resistant to eavesdropping,
    impersonation, and replay attacks. The proposed scheme is efficient, as *RSU*s
    assist *TAs* during authentication to avoid bottleneck problems, also TAs maintain
    a common distributed ledger to store data to diminish cross-domain authentication
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: Tan and Chung [[77](#CR77)] proposed a mutual authentication and group key management
    scheme under cloud computing and edge computing layers for *RSU*s. The scheme
    does not use certificates; instead, it implements cloud-assisted infrastructure
    that improves the overall efficiency. The architecture of this certificate-less
    scheme is designed in three layers. *TA* a fully trusted entity and resides in
    the cloud layer of the architecture. It registers *RSU* and vehicles via offline
    registration and assigns them a unique identity and partial secret. Following
    this is the edge layer that contains *RSUs* dedicated to forming edge clusters
    for decentralization. Finally, the lowest layer is the user layer that contains
    the vehicles. Following this, *RSU* and vehicle compute a temporary session ID
    using the assigned unique ID and timestamp values. RSU and vehicles use the temporary
    session ID to communicate in the future. To initiate communication, *RSU* issues
    a public certificate. The cloud server acts as a database that saves all important
    information related to vehicles and *RSU*. Vehicles verify the *RSU*’s certificate
    and compute its signature to form a request. A batch verification is performed
    on the received signatures by *RSU*. Cloud servers perform the second step of
    verification. To upgrade the efficient communication, a group of vehicles (V2V)
    independently establish a group key via consortium blockchain and Chinese remainder
    theorem (CRT) between them and the nearest *RSU* an allocated channel.
  prefs: []
  type: TYPE_NORMAL
- en: Another blockchain-based solution for smart transportation system scheme proposed
    by [[33](#CR33)] is a blockchain-based batch authentication protocol for IoV deployment
    (BBAS-IoV). The system model consists of TA, vehicles, *RSU*, fog servers, and
    cloud servers. Initially, the *TA* sets up the system parameters and registers
    vehicles and *RSU*s before their deployment. Before initiating the communication,
    the scheme performs a signing and two independent authentication phases, one between
    vehicles (V2V), and other between vehicles and *RSU*. In the signing phase, a
    vehicle broadcasts a hello message and signature to fellow vehicles and the nearest
    *RSU*. In V2V authentication, the hello message and the signature of the sender
    vehicle are verified by other vehicles of the same cluster. And finally, *RSU*
    authenticates the signatures of all the vehicles in the cluster in a batch to
    increase efficiency. At the end, a group key is established among the vehicles
    and *RSU* in their cluster for future communications. After successful authentication,
    *RSU* starts receiving and collecting traffic-related information from its vehicles
    securely and forms several transactions. The fog server partially forms the transactions
    and then forwarded to the blockchain center containing cloud servers. A Practical
    Byzantine Fault Tolerance (PBFT) [[26](#CR26)] consensus algorithm is employed
    for block verification and addition in the blockchain. IoV produces huge data
    every day, so big data analytics and Artificial Intelligence (AI)/Machine Learning
    (ML) are also implemented to add security.
  prefs: []
  type: TYPE_NORMAL
- en: The development and increase in the production of vehicles in recent years have
    increased the probability of accidents on roads leading to fatal injuries to drivers
    and passengers and even deaths. In 2020, Vangala et al. designed an authentication
    scheme called blockchain-enabled certificate-based authentication for vehicle
    accident detection and notification in ITS environment (BCAS-VADN) [[34](#CR34)].
    The system model consists of a trusted registration authority (RA), vehicles flying
    in clusters, *RSUs*, edge servers, and a blockchain center containing cloud servers.
    RA sets up the system parameters and enrolls all the vehicles, *RSUs*, edge servers,
    and cloud servers and loads the credentials in their storage. Next, mutual authentication
    and key establishment phase occur between vehicle and their corresponding cluster
    head (CH) and between CH and *RSU*. The key established during the authentication
    phase ensures secure future communication. Vehicles are pre-installed with sensors
    that are capable of detecting accidents. On the occurrence of an accident, a message
    containing notification including the details of the accident like time, place,
    location, the ID of the vehicle in accident, ID of sender vehicle, level of accident,
    severity of the passengers, and its cause are signed and sent to the *RSU* via
    cluster head using the established session key. *RSUs* forward the verified details
    and transactions to the edge servers. Edge servers in the edge computing layer
    form the partial block and forward to the cloud servers present in the blockchain
    center. Cloud servers complete the block and form a peer-to-peer network to run
    the consensus algorithm to verify and add the block to the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Zheng et al. [[78](#CR78)] proposed a decentralized blockchain-based access
    authentication system with privacy preservation in VANETs. The scheme provides
    a trusted communication environment for Internet of Vehicles framework with a
    distributed cloud ledger. The system model consists of a certificate authority
    (CA), vehicles, *RSU*, and cloud server. CA is assumed to have enough space and
    issues the certificate containing a pseudo-identity, public/private key for the
    authenticated vehicle. It also maintains the data set to store the pseudo-identity
    with its corresponding real identity to track malicious vehicle computing hash
    value. A hash of pseudo-identity and the public key is also sent to the cloud
    server, which is used to verify the legality of vehicles in the future. *RSUs*
    form a peer-to-peer network to implement a consensus algorithm to form a blockchain.
    To begin with, the communication, when a vehicle comes in a range of *RSU* it
    sends an authentication request using its pseudo-identity. *RSU* checks the authenticity
    of the vehicle by verifying the request from the cloud server. The cloud server
    manages the pseudonyms issued by CA and saves traffic updates and messages flown
    by the vehicles in its database. To accomplish secure communication in the future,
    an integer negotiation process is implemented between *RSU* and a vehicle. A random
    number chosen by *RSU* is encrypted using vehicle’s public key is sent to the
    vehicle. To confirm if the correct random number is received by the vehicle, a
    vehicle chooses another number, calculates a hash, and sends it to *RSU* along
    with its signature. The encrypted random number is decrypted by vehicle and used
    to send traffic updates and during future communication. Finally, when *RSU* hears
    any message update from vehicle, it forms a block containing the transaction,
    including pseudo-identity, the public key of the vehicle, traffic announcements
    by vehicles, hash value of the event transaction, and timestamp. The announced
    traffic update is notified to other vehicles by *RSU*. The vehicles make timely
    decisions after verifying the transaction details from the cloud server.
  prefs: []
  type: TYPE_NORMAL
- en: Lin et al. [[79](#CR79)] proposed a blockchain-based conditional privacy-preserving
    authentication (BCPPA) protocol. During the system initialization phase, a key
    derivation algorithm is invoked to mitigate the risk and enhance security. According
    to the algorithm, a vehicle chooses a private root key and a chain code that derives
    a fresh private key for every communication. The corresponding root public key
    and chain code is sent to certificate authorities (CA), which can be used to generate
    certificates for every communication (corresponding to the private key derived).
    Although the scheme is based on a public key infrastructure model, it still incurs
    less storage cost as the public key certificates are not transmitted but are pre-recorded
    in the blockchain by CA. CA embeds certificates into a transaction using Ethereum
    (a public blockchain) and maps them to transactions using smart contracts. To
    send a traffic update to other vehicles, a vehicle first retrieves the transaction
    id of its certificate. Finally, a signing algorithm is triggered through which
    the sender vehicle signs the message, timestamp, and transaction id using the
    derived private key. Next, the receiving vehicle verifies the message by running
    a message verification algorithm. It fetches the certificate from the blockchain
    corresponding to the transaction id received in the message. The justified verification
    of the message signature via public key ensures the message’s validity and authenticity
    of the sender vehicle (Table [1](#Tab1)).Table 1
  prefs: []
  type: TYPE_NORMAL
- en: Summary of characteristics of blockchain-based security protocols
  prefs: []
  type: TYPE_NORMAL
- en: '| Scheme | Techniques | Network model entities | Phases or steps | Benefits
    and limitations |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Xu et al. [[10](#CR10)] | ECCOne-way hash function | DatacenterVehicle nodesTrusted
    authorityRoadside units | Initializations phaseRegistration phaseAuthentication
    phase | The proposed scheme is efficient, as *RSU*s assist TAs during authentication
    to avoid bottleneck problem, also TAs maintain a common distributed ledger to
    store data to diminish cross-domain authentication problemsThe authentication
    phase exchanges four communication messages. Thus, the scheme incurs some communication
    overheads |'
  prefs: []
  type: TYPE_TB
- en: '| Tan and Chung [[77](#CR77)] | ECCModular exponentiationBilinear pairingHash
    functionsChinese remainder theorem | Access pointsTARSUVehicles | Offline registration
    phaseAuthentication phaseV2V group key managementDynamic key updating | It is
    a lightweight certificate-less scheme that is unforged against chosen message
    attackThe proposed scheme exhibits decentralization but does not support dynamic
    node additionExpensive in communication and computationThe scheme suffers insider
    attack, and the session key is not secure under CK-adversary model |'
  prefs: []
  type: TYPE_TB
- en: '| Bagga et al. [[33](#CR33)] | ECCBilinear pairingHash functions | TARSUVehicleFog
    serverCloud server | Initial setup phaseVehicle and *RSU* registrationMessage
    signing and batch authentication phaseGroup key management phaseBlockchain formation
    phaseAI-based secure big data analytics phaseDynamic nodes addition phase | The
    scheme implements both V2V and batch authenticationsThe use of big data analytics,
    AI/ML algorithms, and blockchain made the proposed BBAS-IoV efficient and smarter
    to work effectively in smart citiesThe scheme also supports the dynamic node addition
    phase |'
  prefs: []
  type: TYPE_TB
- en: '| Vangala et al. [[34](#CR34)] | ECCHash functions | RA*RSU*VehicleEdge serverCloud
    server | System initialization phaseEnrollment phaseAuthentication phaseBlockchain
    verification and addition phaseDynamic node addition phase | The scheme based
    on certificatesAccomplishes mutual authentication between vehicle and vehicle
    and vehicle and *RSU* to establish secure communicationThe emergency information
    detailing on accident is shared usingAn established key |'
  prefs: []
  type: TYPE_TB
- en: '| Lin et al. [[79](#CR79)] | Digital signatures (ECDSA) | CAVehicle*RSU*Blockchain
    network | System initialization phaseMessage signing phaseMessage verification
    phase | A PKI-based authentication scheme that implements public blockchain to
    store certificatesThe scheme has low storage, computation, and communication costThe
    scheme proposes a dynamic key derivation algorithm that maintains the freshness
    of the keys |'
  prefs: []
  type: TYPE_TB
- en: '| Zheng et al. [[78](#CR78)] | ECCPublic key infrastructureHash functions |
    TA*RSU*VehicleFog serverCloud server | System initializationVehicle registrationVehicle
    authenticationVehicle announcementForwarding of message | A secure and anonymous
    authentication scheme that also provides privacy preservationBlockchain decentralizes
    the scenario and forbids the distribution of the malicious messageThe scheme does
    not add dynamic nodes during the process |'
  prefs: []
  type: TYPE_TB
- en: 5 Performance Comparison
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The efficiency of any authentication scheme is measured in terms of communication
    and computational costs. The computational cost of a system is calculated as the
    total execution time of various cryptographic operations such as “elliptic curve
    point multiplication,” “elliptic curve point addition,” “map-to-point function,”
    “bilinear pairing operation,” “modular exponentiation,” “one-way hash function,”
    “symmetric key encryption/decryption,” and “signature generation using the elliptic
    curve signature generation algorithm (ECDSA)”.
  prefs: []
  type: TYPE_NORMAL
- en: The communication cost is defined as the total amount of data in bits transmitted
    via number of messages exchanged throughout the scheme.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we analyze the performance of the schemes Xu et al. [[10](#CR10)],
    Tan and Chung [[77](#CR77)], Bagga et al. [[33](#CR33)], Vangala et al. [[34](#CR34)],
    Lin et al. [[79](#CR79)], Zheng et al. [[78](#CR78)] (discussed in Sect. [4](#Sec15))
    in terms of communication, computational, and security features.
  prefs: []
  type: TYPE_NORMAL
- en: Communication and Computational Costs Comparison
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The actual execution time of the scheme or the actual computational cost is
    computed by considering individual execution time taken by operations. For that,
    we have assumed that elliptic curve point multiplication, elliptic curve point
    addition denoted by *T* [ecm] and *T* [epa] takes 17.10 ms [[80](#CR80)], 4.4 ms
    [[81](#CR81)] to execute, respectively. A map-to-point function denoted by *T*
    [mtp] takes 44.06 ms [[82](#CR82)]. *T* [bp], *T* [exp] represent bilinear pairing
    operation and modular exponentiation operation and they take 42.11 ms and 19.2 ms
    [[80](#CR80)], respectively. A one-way hash function denoted by *T* [*h*] and
    symmetric key encryption/decryption abbreviated as *T* [enc dec] takes 0.32 ms
    [[81](#CR81)] each. Lin et al. [[79](#CR79)] implement elliptic curve cryptography
    signature and verification denoted by *T* [ecc sig] and *T* [ecc ver] where, *T*
    [ecc sig] = *T* [ec] + *T* [h] *,* which comes as 17.42 ms, and *T* [ecc ver] = 2*T*
    [ecm] + *T* [eca] + *T* [h*,*] which is 38.92 ms approximately. Table [2](#Tab2)
    summarizes the detailed computation cost calculation of each scheme.Table 2
  prefs: []
  type: TYPE_NORMAL
- en: Comparative computational costs analysis
  prefs: []
  type: TYPE_NORMAL
- en: '| Scheme | Total cost | Estimated time (in milliseconds) |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Xu et al. [[10](#CR10)] | 19*Th* | ≈6.08 ms |'
  prefs: []
  type: TYPE_TB
- en: '| Tan and Chung [[77](#CR77)] | 12*Th* + 12*T* [ecm] + 2*T* [eca] + 2*T* [b
    p] + 2*T* [ex p] | ≈340.46 ms |'
  prefs: []
  type: TYPE_TB
- en: '| Bagga et al. [[33](#CR33)] | 6*Th* + 7*T* [ecm] + 7*T* [eca] + 3*T* [b p]
    | ≈278.75 ms |'
  prefs: []
  type: TYPE_TB
- en: '| Vangala et al. [[34](#CR34)] | 10*Th* + 12*T* [ecm] + 4*T* [eca] | ≈226 ms
    |'
  prefs: []
  type: TYPE_TB
- en: '| Lin et al. [[79](#CR79)] | *T* [ecm] + *T* [ecc] − *sig* + *T* [ecc] − *ver*
    | ≈73.44 ms |'
  prefs: []
  type: TYPE_TB
- en: '| Zheng et al. [[78](#CR78)] | ⁴ *Th* ^(+ 2*T*) *enc*/*dec* + *T* [ecc] − *sig*
    + *T* [ecc] − *ver* | ≈58.26 ms |'
  prefs: []
  type: TYPE_TB
- en: For calculating the communication cost, we calculate the lengths of the messages
    flown in bits by considering some assumed values such as the output of hash function
    such as SHA-1 is taken as 160 bits. ECC-based messages are assumed to be 160 bits.
    An elliptic curve point*P* = (*P* [*x*], *P* [*y*]) is (160 + 160) = 320 *bits*.
  prefs: []
  type: TYPE_NORMAL
- en: Where *P* [*x*] and *P* [*y*] are the *x* and *y* coordinates of the point *P*.
    The identities of the entities are assumed to be 160 bits. The random nonces and
    timestamp values used in all schemes are 160 and 32 bits, respectively. Also,
    for symmetric encryption or decryption, we assume the size of plain text/ciphertext
    to be 128 bits. Table [3](#Tab3) summarizes the detailed communication cost calculation
    of each scheme.Table 3
  prefs: []
  type: TYPE_NORMAL
- en: Comparative communication costs analysis
  prefs: []
  type: TYPE_NORMAL
- en: '| Scheme | Number of messages | Number of bits |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Xu et al. [[10](#CR10)] | 4 | 4448 |'
  prefs: []
  type: TYPE_TB
- en: '| Tan and Chung [[77](#CR77)] | 2*n* + 1 | 992 + 1344*n* |'
  prefs: []
  type: TYPE_TB
- en: '| Bagga et al. [[33](#CR33)] | 1 | 2912 |'
  prefs: []
  type: TYPE_TB
- en: '| Vangala et al. [[34](#CR34)] | 2 | 1856 |'
  prefs: []
  type: TYPE_TB
- en: '| Lin et al. [[79](#CR79)] | 4 | 640 |'
  prefs: []
  type: TYPE_TB
- en: '| Zheng et al. [[78](#CR78)] | 3 | 928 |'
  prefs: []
  type: TYPE_TB
- en: To ease the understanding of our comparative analysis, we have used the notations
    like *High* for the schemes with high/very high computational and communication
    costs, *Medium* for the schemes with average or medium computational and communication
    costs, *Low* for the schemes with low computational and communication costs. If
    the communication cost of more than 4000 bits is considered high, and less than
    2000 bits is considered low. For the computational cost, the schemes that are
    based on heavy cryptographic operations like bilinear pairings and elliptic curves
    are stated High. The others with less time-consuming cryptographic operations
    are marked Low.
  prefs: []
  type: TYPE_NORMAL
- en: The computational and communication costs of the scheme are calculated and represented
    in Table [4](#Tab4).Table 4
  prefs: []
  type: TYPE_NORMAL
- en: Communication and computational costs comparison
  prefs: []
  type: TYPE_NORMAL
- en: '| Scheme | Communication cost | Computational cost |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Xu et al. [[10](#CR10)] | High | Low |'
  prefs: []
  type: TYPE_TB
- en: '| Tan and Chung [[77](#CR77)] | Medium | High |'
  prefs: []
  type: TYPE_TB
- en: '| Bagga et al. [[33](#CR33)] | Medium | High |'
  prefs: []
  type: TYPE_TB
- en: '| Vangala et al. [[34](#CR34)] | Low | Medium |'
  prefs: []
  type: TYPE_TB
- en: '| Lin et al. [[79](#CR79)] | Low | Low |'
  prefs: []
  type: TYPE_TB
- en: '| Zheng et al. [[78](#CR78)] | Low | Low |'
  prefs: []
  type: TYPE_TB
- en: Security and Functionality Features Comparison
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we have compared security and functionality features of the
    schemes presented by Xu et al. [[10](#CR10)], Tan and Chung [[77](#CR77)], Bagga
    et al. [[33](#CR33)], Vangala et al. [[34](#CR34)], Lin et al. [[79](#CR79)],
    and Zheng et al. [[78](#CR78)]. Security and functionality features include various
    security aspects and other attacks discussed in Sect. [3](#Sec11). Xu et al. [[10](#CR10)]
    resist various known attacks like eavesdropping, impersonation, and replay attacks.
    It also preserves anonymity, forward and backward secrecy, and untraceability.
    On the other hand, Tan and Chung’s Scheme [[77](#CR77)] and Vangala et al.’s [[34](#CR34)]
    scheme resist various attacks and preserve anonymity and untraceability but do
    not support cross TA authentication. The scheme proposed by Bagga et al. in [[33](#CR33)]
    is quite efficient as it also supports batch authentication, where multiple vehicles
    are authenticated simultaneously via *RSU*. It ensures conditional privacy preservation
    also resists man-in-the-middle attacks. Lin et al. [[79](#CR79)] and Zheng et
    al. [[78](#CR78)] provide unlinkability, authenticity, and integrity but do not
    agree on the session key for secure communication. Zheng et al.’s scheme does
    not even resist impersonation attacks.
  prefs: []
  type: TYPE_NORMAL
- en: The security features among the existing schemes are compared in Table [5](#Tab5).Table
    5
  prefs: []
  type: TYPE_NORMAL
- en: Comparative study on security features
  prefs: []
  type: TYPE_NORMAL
- en: '| Features | [[10](#CR10)] | [[77](#CR77)] | [[33](#CR33)] | [[34](#CR34)]
    | [[79](#CR79)] | [[78](#CR78)] |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Privacy preservation | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Integrity | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Authenticity | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Non-repudiation | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Traceability or unlinkability | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Cross *T A* authentication | ✓ | × | × | × | × | × |'
  prefs: []
  type: TYPE_TB
- en: '| Key agreement | ✓ | ✓ | ✓ | ✓ | × | × |'
  prefs: []
  type: TYPE_TB
- en: '| Replay attack | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Man-in-the-middle attack | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Impersonation attack | ✓ | ✓ | ✓ | ✓ | ✓ | × |'
  prefs: []
  type: TYPE_TB
- en: '*Note*: ✓: a scheme resists an attack or supports a feature; ×: a scheme does
    not resist an attack or does not support a feature'
  prefs: []
  type: TYPE_NORMAL
- en: 6 Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we focused on studying smart transportation that manages huge
    traffic in smart cities, making it luxurious and safe. We introduced blockchain
    and its types. Further, we described various consensus algorithms that can be
    implemented in smart transportation. We also listed some advantages of blockchain
    implementation in smart transportation. Next, we outlined security aspects, privacy
    issues along with several attacks and threats on smart transportation. Later in
    this chapter, a detailed description of recent schemes that have provided security
    solutions for blockchain-based smart transportation systems is provided. We compared
    the performance of the schemes based on their computational cost, communication
    cost, and other security functionality features. Few schemes have high computation
    and communication costs because of heavy cryptographic operations and huge message
    content, while others have average or low computation and communication costs.
    The schemes are also analyzed on various features, like privacy preservation,
    integrity, authenticity, non-repudiation, traceability or unlinkability, cross
    *TA* authentication and key agreement, replay, man-in-the-middle, and impersonation
    attacks.
  prefs: []
  type: TYPE_NORMAL
