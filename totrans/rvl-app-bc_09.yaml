- en: Chapter 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blockchain and PUF-Based Secure Transaction Procedure for Bitcoin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sivasankari Narasimhan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mepco Schlenk Engineering College, India
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ABSTRACT
  prefs: []
  type: TYPE_NORMAL
- en: In the blockchain, the transaction hashes are implemented through public-key
    cryptography and hash functions. Hence, there is a possibility for the two users
    to choose the same private key knowingly or unknowingly. Even the intruders can
    follow the particular user’s bitcoin transaction, and they can masquerade as that
    user by generating the private and public key pairs of him. If it happens, the
    user may lose his transaction. Generally, bitcoin technology uses random numbers
    from 1 to 2256\. It is a wide range, but for a greater number of users, there
    should be one another solution. There is a possibility of digital prototyping
    which leads to the loss of more accounts. This chapter provides the device-specific
    fingerprint technology known as physical unclonable function (PUF) to be employed
    for authentication in a blockchain-based bitcoin environment. The random unique
    response from PUF ensures correct transaction. In this chapter, a new tetrahedral
    oscillator PUF has been introduced intrinsically. All the blockchain operations
    are carried out and verified with PUF response.
  prefs: []
  type: TYPE_NORMAL
- en: INTRODUCTION
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin technology appeared 11 years ago; the decentralized ledger used in Bitcoin
    is implemented through blockchain technology. The blockchain technique has been
    proposed in October 2008 by Satoshi Nakamoto (Nakamoto, 2008). Bitcoin technique
    requires, some cryptographical techniques to control the transactions of Bitcoin
    among the persons who are involved in it, some hardware instruments to run the
    software, and the miners who are involved in maintaining the transaction ledgers.
  prefs: []
  type: TYPE_NORMAL
- en: Security issues have become the most challenging problem in Bitcoin, in the
    sender’s point of view. Bitcoin software issues some software challenges to the
    miners which should be solved within a particular time interval. This challenge
    makes the miners to find the Nonces for the specified block. The race to solve
    the challenge starts after the software releases the challenge. After a particular
    time, this will be closed. Within a stipulated time, who correctly solve the challenge
    will be rewarded. Other miners validate the answer. The transaction will be added
    to the blockchain. Most of the threats and blockchain concepts were discussed
    by Saraju et.al in reference (Mohanty et al., n.d.).
  prefs: []
  type: TYPE_NORMAL
- en: The design of security protocols is complicated due to the problem of creating
    software challenges and nonces creation. The security of Bitcoin lies in the software
    challenge; this must be resistant to power analysis attack physical and any side-channel
    attack. In addition to that, they must be unimaginable by anyone. Moreover, they
    must be computationally secured and reasonable to produce. The power and memory
    resources of the bitcoin chain should be less. In this chapter, PUF based blockchain
    architecture for bitcoin security is presented. Moreover, the enrolment and authentication
    protocols for the PUF assisted hardware in a blockchain network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many types of PUFs have been proposed. It can be categorized mainly into two
    types: Extrinsic PUFs and Intrinsic PUFs. Both are having its advantages and disadvantages.
    Based on coating materials, metal components, and memristors, extrinsic PUFs are
    manufactured. Based on delay properties, in simple logic gates, Intrinsic PUFs
    are generated. One new category of PUF is introduced in this article to produce
    the identity of that person. A tetrahedral oscillator (Muthukumar et al., 2019)
    PUF is proposed in this paper which is used as intrinsic PUF that can be used
    for the implementation of PUF based blockchain. In some places, PUF is used in
    place of Hashing operations which avoid more software computation of cryptographic
    hashes. Elliptic Curve generating module is additionally added with PUF structure
    to generate public keys. In the case of Proof of PUF-enabled authentication (PoP),
    the PUF module is responsible for generating the device’s unique identification.'
  prefs: []
  type: TYPE_NORMAL
- en: Since the response of the PUF element is only known by the device manufacturer
    and the PUF holder, the behaviors are known only by them. Hence the probability
    of response duplication and counterfeiting becomes very less. The way that how
    the intruder is cheating the verifying device lies in the uniqueness and reliability
    of the underlying device. But in the presence of a PUF device, they can't meet
    the required conditions expected by the transaction proof chain.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. RELATED WORKS
  prefs: []
  type: TYPE_NORMAL
- en: A blockchain network hierarchy with Design Authority, contract manufacturer,
    Distributors, and end-users is described in reference by Cui et al. (Cui et al.,
    2019). Attack analysis at various levels is described. They suggest PUF as a solution
    to avoid FPGA cloning. For Decentralized authentication of IoT devices, PUF is
    used with blockchain. The Trust score has been calculated according to the device
    performance and the values are stored in the database. If the trust value is greater
    than or equal to the acceptable level, then the devices start to communicate without
    expecting the third-party to start. Sensor-based wearable PUFs with blockchain
    proposed by Rahim et al. (Rahim et al., 2018) are utilized for deciding to accept
    or reject the person to access a particular device, while the owner is not present
    in the home. For blockchain environments, PUF acts as a deciding authority. The
    challenge Response verification procedure has been implemented with hash and MAC
    algorithms. The design has been implemented in Blockpro by Javid et al. (Javaid
    et al., 2018). Here one PUF based authentication methodology is proposed along
    with biometrics. A high-level authentication is proposed for vehicle authentication.
    The derivation of PUF keys is called Keyless signature technology. The public
    key can be derived from any of the public key cryptosystems as described in the
    reference (Intrinsic ID, n.d.). In Key management for blockchain technology Blockchain
    wallet are discussed in reference Om Pal et al. (Pal et al., n.d.), PUF is used
    to identify the IoT device. PUF is a function that uses the physical property
    of the device for generating the desired output. Using generated desired output
    from the physical property of the IoT device, a unique private/public key pair
    is generated and the generated pair is used in Blockchain infrastructure. Therefore,
    IoT nodes are not fully dependent on the nonces. In reference (Patil, n.d.) the
    attack analysis of blockchain has been exposed and they explain blockchain with
    PUF and hash algorithm as a solution for some attacks Delgodo et al. (Prada-Delgado
    et al., 2020) used PUF as a key generator for cryptographic operations. The paper
    explained digital trust as a physical trust given by PUF.
  prefs: []
  type: TYPE_NORMAL
- en: The remaining section of this paper is organized as follows. In Section 3, PUF
    based wallets, Bitcoin addresses, and transaction methods are proposed. In Section
    4, intrinsic PUF architecture and design were described. The experimental results
    are presented in section 5, followed by some conclusions.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. BITCOIN CONCEPTS PROPOSED USING PUF
  prefs: []
  type: TYPE_NORMAL
- en: 3.1\. Bitcoin Wallets With PUFs
  prefs: []
  type: TYPE_NORMAL
- en: Generally, a Bitcoin wallet consists of secret keys owned by the user. Private
    keys are generated randomly. Now the secret keys can be generated with PUF response.
    PUF can be utilized for creating Master Key. By using simple logic circuits consisting
    of Linear Feedback Shift Registers and Galois field primitives, Child keys can
    be derived from the Master key. Grandchild keys can also be produced by using
    simple logic from Child keys. The hierarchy of keys generated from the seed value
    of PUF is shown in figure 1 (a). The child keys are generated from the Master
    key, Time Stamp, and Secret information.
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 1\. (a) Bitcoin Wallet Keys generated from PUF master key; (b) Key
    derivation from previous Master key |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch008.f01](i/ch008.f01.png) |'
  prefs: []
  type: TYPE_TB
- en: The response for the master key which is kept as a secret is treated as a challenge
    and the response act as the private key (α). The public key is calculated from
    this private key, from the private key, the public key is calculated as β= αxG.
    In the subsequent levels, private and public key pairs are generated in the same
    way. There may be a problem of two responses from the normal private-public key
    generation may be the same, but in PUF responses there is no chance for the generation
    of two responses is the same. It seems to be higher like the number of sands in
    grain
  prefs: []
  type: TYPE_NORMAL
- en: 3.2\. PUF Bitcoin Addresses
  prefs: []
  type: TYPE_NORMAL
- en: PUF Bitcoin holder has to generate Bitcoin addresses to send money to everyone.
    Actually, PUF concept works in the truth of manufacturing variations in one device
    is not equal to the manufacturing variation in another device even though the
    same input is applied. This kind of integrated circuit manufacturing variations
    can’t be cloned. PUF-Hashing is a cryptographic algorithm, which produces an entirely
    different digest even for a single bit variation of input. Moreover, the Hash
    function is an irreversible one-way function and the process of getting the input
    from output is generally a tough task. Hence the device-specific PUF module and
    input specific hash function would make an avalanche effect to distinguish each
    PUF-Bitcoin chain. Since the hardware module of PUF reduces many complex software
    execution units, processing time, power consumption, and area are minimized. Collectively,
    when the same challenge is applied for two PUF devices, the responses from those
    devices are different. Hence the keys generated from the PUF also different.
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 2\. PUF Bitcoin Address Generation |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch008.f02](i/ch008.f02.png) |'
  prefs: []
  type: TYPE_TB
- en: Particular challenge (Challenge may be claimed identity of a person) is applied
    to the PUF circuit; the response generated from the PUF is termed as the private
    key of the user (K[Pr]). The elliptic curve scalar multiplication process is applied
    to private key K[Pr] to generate the public key (K[Pu]= K[Pr]xG). This public
    key generation process should exhibit one-way property; (i.e) calculation of K[Pu]
    from K[Pr] should be easy and reverse calculation of K[Pr] from K[Pu] is a tough
    task.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then Public key Bitcoin address is derived from the public key by the following
    rules:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First the public key is double hashed by the Extrinsic and Intrinsic PUF
    hashing algorithm.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2\. Then Base58Check encoding operation is done to produce the encoded Public
    key hash.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The same thing can be provided in QR code form also. Actually, three one-way
    properties are created at this point. (1) PUF challenge to response (Device Specific
    level) (2) Private Key to Public key (Public key cryptographical way) (3) Public
    key to public key address (Hashing level). Hence even a small change in the transaction
    will cause a complete change in the subsequent transaction hash. Each Transaction
    hash uniquely identifies the details. The overall process that every PUF should
    do for the PUF bitcoin address is shown in figure 2\. Instead of the software
    hash function, PUF itself acts as the one-way function. A shown in Figure 2, the
    challenges are used for the derivation of private keys. Then by using the multiplication
    algorithm, the public key has been calculated. Then External and Internal PUFs
    are used as hashing elements instead of a conventional hash.
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 3\. PUF Private key to Bitcoin Addresses |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch008.f03](i/ch008.f03.png) |'
  prefs: []
  type: TYPE_TB
- en: The one-way property of any user address is depicted in Figure 3.
  prefs: []
  type: TYPE_NORMAL
- en: 3.3\. Bitcoin Transactions
  prefs: []
  type: TYPE_NORMAL
- en: External PUF is considered so strong when compared with Intrinsic PUFs. All
    the Bitcoin entries are logged into ledgers. Every transaction is used for the
    creation of the next transaction. The verification is done by all the nodes in
    the network. Hence the problem of cheating and double spending of Bitcoin money
    will be avoided. Like the bank transaction, the amount reductions and increments
    are stored in the form of hashes in Bitcoin ledgers implemented with blockchain.
    The successive transactions method is shown in Figure 4.
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 4\. Blockchain Transaction |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch008.f04](i/ch008.f04.png) |'
  prefs: []
  type: TYPE_TB
- en: 3.4\. Bitcoin Transaction Lock With PUF Digital Sign
  prefs: []
  type: TYPE_NORMAL
- en: The transaction hash is generated mainly with four elements (1) The amount for
    the transaction (2) The recipient address as output (3) the Locking script included
    with recipient address (3) Timestamp. All the things are hashed together. This
    is locked by the Digital Signature of the sender’s private key. Now in the proposed
    PUF blockchain technology, the transaction lock is performed by PUF response.
    Signature is dependent on the transaction. In the Digital Signature creation process,
    the transaction type and PUF response private key are involved. In the Digital
    Signature verification process, everyone else in the mining process can participate.
    The intended receiver only can claim for the transaction. Since nobody can replicate
    the PUF response.
  prefs: []
  type: TYPE_NORMAL
- en: 3.5 Bitcoin Ledgers With PUF
  prefs: []
  type: TYPE_NORMAL
- en: All these transactions are maintained in one Bitcoin ledger as a form of hash
    codes. If Alice gets money from Jack and Bob, they are indicated in different
    hashes. Each transaction is maintained in the Bitcoin ledger ((JACK to Alice →)1021ab3582939214221
    and (Bob to Alice→) ab3582939211231) as hash functions. The hash functions are
    unique, case sensitive and punctuations sensitive. For example, if Bob sent the
    amount 5 Bitcoins (BTC) to Alice then it is recorded in the form-encoded hash
    form like “1021ab3582939214221” in the Bitcoin ledger. As already mentioned, Bitcoin
    is a decentralized ledger, anybody can mine the transaction between the users.
    The mining process is happened by additional locking and unlocking procedure.
    In the locking procedure, with the recipient address, one mathematical puzzle
    is incorporated as LOCKING SCRIPT. This script is based on the Digital Signature
    Algorithm. The mathematical answer for the puzzle is UNLOCKING SCRIPT the puzzle.
    The miner who correctly solves the puzzle can claim for this transaction. The
    sender has to pay the incentive (0.00180736 BTC) to process this transaction.
    Miner’s task is to collect new transactions on the network and to assemble these
    transactions in a particular order into a transaction block. They have to mine
    for new blocks and update the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. TETRA HEDRAL OSCILLATOR AS INTRINSIC PUF
  prefs: []
  type: TYPE_NORMAL
- en: Two kinds of PUF structures have been mentioned in this chapter for Bitcoin
    address creation. In this chapter, Intrinsic PUF structure only concentrated.
  prefs: []
  type: TYPE_NORMAL
- en: 4.1\. Tetra Loop Architecture and Behavior
  prefs: []
  type: TYPE_NORMAL
- en: 'The proposed Intrinsic PUF is named as tetrahedral oscillator PUF. The tetrahedral
    oscillator is used as the racing path of logic gates elements. The random and
    unique pattern creation for one person may utilize different frequencies for each
    person. The tetrahedral oscillator also utilizes the varying frequency as the
    person varying phenomenon. The same kind of PUF is used at two different situations
    of Bitcoin address generation but with different frequencies. The tetraloop is
    composed of three loops: all loops are made up of simple NOT gates. The first
    loop consists of four NOT gates and the remaining two loops contain two NOT gates.
    The oscillatory metastability of logic gates can be utilized for random number
    generation. In this article, the signal path propagation creates the metastability
    as well as the unique behavior. Figure 5 shows the loops of the tetrahedral oscillator
    structure with three loops made up of 8 inverters.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 5\. Tetra hedral oscillator PUF |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch008.f05](i/ch008.f05.png) |'
  prefs: []
  type: TYPE_TB
- en: The metastability condition (three loops signal) causes transitory oscillations
    in the full circuit. This includes jitter conditions in the loop. The traditional
    ring oscillator loop contains several cascaded inverters. But in the tetrahedral
    oscillator structure proposed by D.Liu et.al (Liu et al., 2016) contains, nested
    NOT gate loops with each other, which makes the circuit full of wired-OR logic
    and signal competitions, resulting in a logic mess and bringing about metastability.
    Second, the perturbation of noise makes the oscillation to be aroused easier.
    Furthermore, due to the conflicts among diverse loops, large jitter can be achieved
    to enhance the randomness of output bits. As illustrated in Figure 5, the number
    of oscillations is not specific. Also, the final logic levels can differ, (‘0’
    or ‘1’), which introduces unpredictability.
  prefs: []
  type: TYPE_NORMAL
- en: 4.2\. Tetrahedral Oscillator PUF
  prefs: []
  type: TYPE_NORMAL
- en: The way, how this tetrahedral oscillator is modified to create the PUF structure
    is shown in Figure 6\. The switch with a particular frequency for a person is
    running to decide whether upper or lower oscillator binary bits have to be accumulated
    in the output of this module. Claimed identity from the user decides that, which
    oscillator has to give the output at the respective time. Switch with timer operates
    with 8 ms, to the flow of 8 bits at a time. This design depends on the user’s
    choice.
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 6\. Tetrahedral oscillator PUF |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch008.f06](i/ch008.f06.png) |'
  prefs: []
  type: TYPE_TB
- en: 5\. RESULTS AND DISCUSSION
  prefs: []
  type: TYPE_NORMAL
- en: This chapter considers SRAM PUF as extrinsic PUF and tetrahedral oscillator
    PUF. The concepts are mainly focusing on the newly introduced tetrahedral oscillator
    PUF. On the implementation side, for Blockchain implementations, the concepts
    from the reference (Block Chain Demo, n.d.) have been taken as a model. Instead
    of Nonce, the PUF response has been taken. Both distributed and single blockchain-based
    models have been developed. SHA-256 hash function is used. Base56Encoding scheme
    is utilized in this work.
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 7\. Single blockchain address generation |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch008.f07](i/ch008.f07.png) |'
  prefs: []
  type: TYPE_TB
- en: For this work, a simple PUF prototype has been generated with the external PUF
    and intrinsic PUF circuits. Combinedly the random numbers from the package have
    been taken and given in place of a random number generator to generate the bitcoin
    address. PUF modules are developed with 128 bits length.
  prefs: []
  type: TYPE_NORMAL
- en: Individually, tetrahedral oscillator PUF response is constructed from two tetrahedral
    oscillators. The individual oscillator output is shown in figure 8\. The upper
    and lower oscillators are just differing in some time duration. The random oscillated
    waveform is originally a sine wave. Sine waveform is converted to square waveform
    first, then it is encoded to a binary number. It can be extended, by increasing
    the binary accumulator size and encoding size. 64 bits challenge is given to get
    the response. After collecting a sufficient number of binary numbers, PUF performance
    metrics have been analyzed. The details about the PUF structure is given in Table
    1.
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 8\. Upper and Lower Oscillator outputs |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch008.f08](i/ch008.f08.png) |'
  prefs: []
  type: TYPE_TB
- en: Table 1\. PUF performance details
  prefs: []
  type: TYPE_NORMAL
- en: '| PUF Metrics and Details | Calculated Values |'
  prefs: []
  type: TYPE_TB
- en: '| PUF type | Intrinsic Tetrahedral Oscillator PUF |'
  prefs: []
  type: TYPE_TB
- en: '| Number of oscillators | 2 with each 3 meshes |'
  prefs: []
  type: TYPE_TB
- en: '| No of Response bits generated | 128 |'
  prefs: []
  type: TYPE_TB
- en: '| No of Challenge bits | 64 |'
  prefs: []
  type: TYPE_TB
- en: '| Uniqueness | 51.07% |'
  prefs: []
  type: TYPE_TB
- en: '| Reliability | 99% |'
  prefs: []
  type: TYPE_TB
- en: '| Randomness | 83% |'
  prefs: []
  type: TYPE_TB
- en: Uniqueness is a measure that every PUF should possesses its characteristics
    which are explained by Maiti et al. (Maiti et al., 2010) . It is different from
    other board PUF responses.
  prefs: []
  type: TYPE_NORMAL
- en: '![Mathtype978-1-7998-7589-5.ch008.m01](i/ch008.m01.svg) (1)'
  prefs: []
  type: TYPE_IMG
- en: It is an estimate of the inter-chip variation in terms of the PUF responses.
    In this work 9 FPGA boards were taken, hence k=9 here.
  prefs: []
  type: TYPE_NORMAL
- en: Reliability is a measure that how efficiently the chip is reproducing the same
    response under different environmental situations (Different temperatures, Different
    voltages, etc.). For doing this, the PUF response (Ri) under normal temperature
    is determined. At different temperatures, the same instance PUF response (Ri’)
    is calculated up to m times. Hamming distance between the responses is calculated
    using the formula
  prefs: []
  type: TYPE_NORMAL
- en: '![Mathtype978-1-7998-7589-5.ch008.m02](i/ch008.m02.svg) (2)'
  prefs: []
  type: TYPE_IMG
- en: Then the reliability is calculated by
  prefs: []
  type: TYPE_NORMAL
- en: Reliability =100% - HD[INTRA] . (3)
  prefs: []
  type: TYPE_NORMAL
- en: HD [INTRA] indicates the average number of unreliable/noisy PUF response bits.
    The value of HD[INTRA] should be low, and the value of reliability should be high
    for a particular instance of the chip. In addition to that, PUF responses should
    be easy to find, and difficult to predict the challenge and the way to prove the
    device. The probability of binary 1’s and 0’s should be equally distributed. The
    histogram metrics are found out by the methods given in (Hori et al., 2010) for
    this tetrahedral oscillator PUF is calculated and shown in figure 9,10,11.
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 9\. Randomness of the produced binary bits |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch008.f09](i/ch008.f09.png) |'
  prefs: []
  type: TYPE_TB
- en: '| Figure 10\. Histogram of Probability of binary ones to the total bits |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch008.f10](i/ch008.f10.png) |'
  prefs: []
  type: TYPE_TB
- en: '| Figure 11\. Histogram of Steadiness of the particular bit |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch008.f11](i/ch008.f11.png) |'
  prefs: []
  type: TYPE_TB
- en: By introducing two Intrinsic PUF circuits and one external PUF circuit, the
    correct claimed identities and imposter identities are classified separately with
    a large distance. There is less chance for collision with True Positives. Figure
    12 shows the separation of genuine and imposter distributions.
  prefs: []
  type: TYPE_NORMAL
- en: '| Figure 12\. Genuine and imposter distribution graph |'
  prefs: []
  type: TYPE_TB
- en: '| ![Figure978-1-7998-7589-5.ch008.f12](i/ch008.f12.png) |'
  prefs: []
  type: TYPE_TB
- en: 6\. CONCLUSION
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain becomes the most applicable area for decentralized ledger-based transactions.
    In IoT and sensitive money transactions conditions, Proof of Device authentication
    can be claimed by this kind of PUF based hash generating functionalities. This
    hardware-based Bitcoin address generation gives accurate device authentication
    and respective person authentication. Proof of Work for a particular person can
    also be done. PUF generated numbers were tough for machine learning attacks. Hence
    it is stronger against side-channel attacks. In the future, for practical applications,
    specific timing constraints have to be developed for particular applications.
  prefs: []
  type: TYPE_NORMAL
- en: REFERENCES
  prefs: []
  type: TYPE_NORMAL
- en: '15Block Chain Demo. (n.d.). Anders Brown. Retrieved from: https://andersbrownworth.com/blockchain/block'
  prefs: []
  type: TYPE_NORMAL
- en: '7Cui, P., Dixon, J., Guin, U., & Dimase, D. (2019). A Blockchain-Based Framework
    for Supply Chain Provenance. IEEE Access: Practical Innovations, Open Solutions
    , 7, 157113–157125\. doi:10.1109/ACCESS.2019.2949951'
  prefs: []
  type: TYPE_NORMAL
- en: 6Hori, Y., Yoshida, T., Katashita, T., & Satoh, A. (2010). Quantitative and
    Statistical Performance Evaluation of Arbiter Physical Unclonable Functions on
    FPGAs . ReConFig , 2010, 298–303\. doi:10.1109/ReConFig.2010.24
  prefs: []
  type: TYPE_NORMAL
- en: 11Intrinsic ID. (n.d.). https://www.intrinsic-id.com/wp-content/uploads/2017/05/gt_KSI-PUF-web-1611.pdf
  prefs: []
  type: TYPE_NORMAL
- en: '10JavaidU.AmanM. N.SikdarB. (2018). Blockpro: Blockchain based data provenance
    and integrity for secure IOT environments. In Proceedings of the 1^(st) Workshop
    on Blockchain-enabled Networked Sensor Systems (pp. 13-18). 10.1145/3282278.3282281'
  prefs: []
  type: TYPE_NORMAL
- en: 4Liu, D., Liu, Z., Li, L., & Zou, X. (2016). A Low-Cost Low-Power Ring Oscillator-Based
    Truly Random Number Generator for Hash on Smart Cards . IEEE Transactions on Circuits
    and Wystems. II, Express Briefs , 63(6), 608–612\. doi:10.1109/TCSII.2016.2530800
  prefs: []
  type: TYPE_NORMAL
- en: 5Maiti, A., Casarona, J., McHale, L., & Schaumont, P. (2010). A large scale
    characterization of RO-PUF. Hardware-Oriented Security and Trust (HOST), IEEE
    International Symposium, 94–99.
  prefs: []
  type: TYPE_NORMAL
- en: '3Mohanty, Yanambaka, Kougianos, & Puthal. (n.d.). PUFchain: Hardware-Assisted
    Blockchain for Sustainable Simultaneous Device and Data Security in the Internet
    of Everything (IoE). IEEE Consumer Electronics Magazine, 9(2), 8-16.'
  prefs: []
  type: TYPE_NORMAL
- en: 2Muthukumar, Sivasankari, & Rampriya. (2019). Anti-aging controllable true random
    number generator for secured AES-based crypto system. International Journal of
    Systems, Control and Communications, 10(4), 338 – 355.
  prefs: []
  type: TYPE_NORMAL
- en: '1Nakamoto, S. (2008). Bitcoin: A Peer-to-Peer Electronic Cash System. White
    paper.'
  prefs: []
  type: TYPE_NORMAL
- en: 12Pal, Alam, Thakur, & Singh. (n.d.). Key management for blockchain technology.
    ICT Express.
  prefs: []
  type: TYPE_NORMAL
- en: 13Patil. (n.d.). Efficient privacy-preserving authentication protocol using
    PUFs with blockchain smart contracts. Academic Press.
  prefs: []
  type: TYPE_NORMAL
- en: 14Prada-Delgado, M. Á., Baturone, I., Dittmann, G., Jelitto, J., & Kind, A.
    (2020). PUF-derived IoT identities in a zero-knowledge protocol for blockchain.
    Internet of Things, 9.
  prefs: []
  type: TYPE_NORMAL
- en: 9RahimK.TahirH.IkramN. (2018). Sensor based puf iot authentication model for
    a smart home with private blockchain. In 2018 International Conference on Applied
    and Engineering Mathematics (ICAEM) (pp. 102-108). IEEE. 10.1109/ICAEM.2018.8536295
  prefs: []
  type: TYPE_NORMAL
- en: 8Venkatesan, Srivastava, & Shukla. (n.d.). Decentralized authentication of IoT
    devices using blockchain. Academic Press.
  prefs: []
  type: TYPE_NORMAL
