- en: © Springer Nature Switzerland AG 2020A. M. LangerAnalysis and Design of Next-Generation
    Software Architectures[https://doi.org/10.1007/978-3-030-36899-9_6](https://doi.org/10.1007/978-3-030-36899-9_6)
  prefs: []
  type: TYPE_NORMAL
- en: 6. The Internet of Things
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Arthur M. Langer^([1](#Aff2) [ ](#ContactOfAuthor2))(1)Center for Technology
    Management, Columbia University, New York, NY, USAArthur M. LangerEmail: [al261@columbia.edu](mailto:al261@columbia.edu)While
    5G is the initiator of possibilities to bring forth the next generation of computing,
    the Internet of Things (IoT) represents the actual devices that will be the vehicle
    for its success. For it is IoT that represents the physical components that will
    make a technology feasible by placing intermediate smart hardware in every place
    imaginable around the globe. The objective then of IoT is to allow 5G to become
    a reality by reducing its operational costs while increasing network reliability
    for consumers and businesses. The identity of IoT is to increase the uptime and
    real time processing of an agile architecture and to eliminate any notion of an
    unscheduled network failure. Thus, IoT must catch problems before they occur and
    provide a train that has alternative tracks should a disturbance occur during
    the any process. Ultimately IoT must ensure no single point of failure in any
    supply chain process. In order to accomplish this challenge, IoT devices must
    contain four components:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Hardware: Sensors, stress devices, friction measurements, and strain indicators.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Applications: Rules engine, modification of software functions, remote cooling
    or lubrication.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Analytics: AI and ML to predict failure based on assumptions and prior historical
    data. Handling of change capacities to avoid future failures.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Network: A large network or system that offers dynamic connections and alternative
    paths or “tracks.”'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'IoT must accomplish five key tasks, reactive, preventive, proactive, predictive,
    and prescriptive. So, any analysist should start this design by ensuring that
    these five objectives are addressed in every process. IoT then needs multiple
    use cases and transforming them into a connected system that fully integrates
    physical devices, sensors, data extraction, secured communication, gateways, cloud
    servers, analytics, and real time dash boards. The following analysis and design
    considerations and principles must be adhered to:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Interoperability: all IoT eventually requires sensor machines, equipment and
    physical sites to communicate with, and the ability to exchange data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Information Transparency: IoT must have a continuous bridge between the physical
    and digital world. In other words, physical processes should be recorded and stored
    virtually which creates a digital twin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Technical Assistance: provide and display data that helps people to make better
    operational decisions and solve problems better and faster. IoT must especially
    help people to complete laborious tasks to improve productivity as well as safety.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Decentralized Decisions: Help make decisions and execute requirements according
    to its defined logic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IoT simulation is a significant part of being able to design complex IoT interface
    systems. Market products must provide digital prototypes to visualize how to connect
    devices, edge and cloud services, web, and mobile applications. All of these components
    make up the IoT architecture and must interact based on multiple simulation runs.
    IoT analytics includes dashboard and alert systems that are typically dependent
    on valid data sources. Consequently, IoT analysis and design must use a lean and
    agile approach. It must incorporate design thinking, that is, people, technology,
    and business all integrated in product design decisions. IoT must also be consumer
    centric and likely will need iterations of how business needs and consumer needs
    can be integrated into one requirements document. The relationship between what
    consumers and business need from 5G is consistent with what IoT must deliver,
    so the objective and relationship between these two forces must be very closely
    aligned.
  prefs: []
  type: TYPE_NORMAL
- en: IoT requires analysts to become more proficient with device-level application
    programming interfaces or APIs. These IoT APIs expose data that enables devices
    to transmit data to applications, so it is the data gateway. The APIs can also
    act as a way for an application to instruct a device, serving as a way to enact
    certain functions as shown in Fig. [6.1](#Fig1).![../images/480347_1_En_6_Chapter/480347_1_En_6_Fig1_HTML.png](../images/480347_1_En_6_Chapter/480347_1_En_6_Fig1_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 6.1
  prefs: []
  type: TYPE_NORMAL
- en: API data transmission data flow
  prefs: []
  type: TYPE_NORMAL
- en: Figure [6.1](#Fig1) shows a new data element from the cloud that gets transformed
    by process A who sends to IoT device B. The transformed data is forwarded by device
    B to either a direct user or by another device/machine interface. The second example
    shown in Fig. [6.2](#Fig2) reflects the data as a value used to instruct the IoT
    device B to do something based on that value—say a “1” value might mean to process
    a certain way.![../images/480347_1_En_6_Chapter/480347_1_En_6_Fig2_HTML.png](../images/480347_1_En_6_Chapter/480347_1_En_6_Fig2_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 6.2
  prefs: []
  type: TYPE_NORMAL
- en: API value transmission data flow
  prefs: []
  type: TYPE_NORMAL
- en: Because so many IoT vendors might supply open source APIs, analysts will need
    to examine whether they need to develop the API as a requirements document or
    use it from a library source offered by a vendor. There is also a third possibility;
    use a third-party open source and modify it to work with the specific requirements
    of the system. In other words, there is no reason to “reinvent the wheel.” There
    actually is nothing new about this approach in analysis. For example, functional
    macro libraries of routines have been available in almost every legacy architecture
    dating back to the mainframe. No one would think of designing a new program to
    calculate the square root of a number; the code exists in many libraries and it
    can be embedded easily in another application!
  prefs: []
  type: TYPE_NORMAL
- en: 6.1 Logical Design of IoT and Communication Models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'According to Mishra ([2019](#CR2)), logical design of IoT consists of three
    terminologies:'
  prefs: []
  type: TYPE_NORMAL
- en: '1'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IoT Functional Blocks
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IoT Communication Models
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IoT Communication APIs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This section will map Mishra’s concept to the role of the analyst.
  prefs: []
  type: TYPE_NORMAL
- en: 6.1.1 IoT Functional Blocks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Functional blocks consist 6 integrated parts; Applications, Management, Services,
    Communication, Security, and Device as shown in Fig. [6.3](#Fig3).![../images/480347_1_En_6_Chapter/480347_1_En_6_Fig3_HTML.png](../images/480347_1_En_6_Chapter/480347_1_En_6_Fig3_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 6.3
  prefs: []
  type: TYPE_NORMAL
- en: Functional block architecture. *Source* Mishra ([2019](#CR2))
  prefs: []
  type: TYPE_NORMAL
- en: The analyst must define each of the blocks of a device in Fig. [6.3](#Fig3).
    First, the analyst has to do the necessary use cases of each block, defining the
    needed data, applications, and performance requirements. As discussed earlier,
    many devices like sensors have software that may provide many of the services
    needed by a developer. However, if such APIs are not available the analyst must
    provide the requirements to be programmed internally. We shall see later in this
    book that this decision may also come under the auspices of build versus buy,
    especially if a third-party API is deemed too expensive or does not contain enough
    of the necessary feature functions to satisfy the requirements. Such a decision
    may also involve determining which device best fits the needs.
  prefs: []
  type: TYPE_NORMAL
- en: 6.2 IoT Communication Alternatives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are four different types of communication alternative architectures. Multiple
    alternatives of course can exist across complex network systems that engage various
    types of IoT devices.
  prefs: []
  type: TYPE_NORMAL
- en: 6.2.1 Request-Response Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This model resembles the traditional client/server architecture discussed in
    Chap. [4](480347_1_En_4_Chapter.xhtml). Although the 5G enhanced agile architecture
    is more distributed and less hierarchical, the client/server model is still applicable
    within certain device designs. As shown in Fig. [6.4](#Fig4) the web browser or
    smartphone will likely be the client in this case and the application on a device
    will act as the server.![../images/480347_1_En_6_Chapter/480347_1_En_6_Fig4_HTML.png](../images/480347_1_En_6_Chapter/480347_1_En_6_Fig4_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 6.4
  prefs: []
  type: TYPE_NORMAL
- en: Request-response model. *Source* Mishra ([2019](#CR2))
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible for IoT devices to integrate with multiple tiers of client/server
    architecture. Figure [6.5](#Fig5) shows an IoT devices that exists as a middle
    tier and providing both client and server activities depending on the requestor.
    In this example the dedicated server would be a cloud database likely residing
    on a separate physical hardware server.![../images/480347_1_En_6_Chapter/480347_1_En_6_Fig5_HTML.png](../images/480347_1_En_6_Chapter/480347_1_En_6_Fig5_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 6.5
  prefs: []
  type: TYPE_NORMAL
- en: IoT Device as a Client and Server. *Source* Mishra ([2019](#CR2))
  prefs: []
  type: TYPE_NORMAL
- en: 6.2.2 Publish-Subscribe Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The publish-subscribe model involves three components: Publishers, Brokers,
    and Consumers. A Publisher sends out data to intermediates called Brokers. Brokers
    then can make the data available to a specific Consumer as the ultimate client
    or subscriber of the information as shown in Fig. [6.6](#Fig6).![../images/480347_1_En_6_Chapter/480347_1_En_6_Fig6_HTML.png](../images/480347_1_En_6_Chapter/480347_1_En_6_Fig6_HTML.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 6.6
  prefs: []
  type: TYPE_NORMAL
- en: Publisher-subscribe model. *Source* Mishra ([2019](#CR2))
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, the Publisher-Subscribe model is common among data providers who
    work through intermediate organizations that then have some membership of users
    that they manage.
  prefs: []
  type: TYPE_NORMAL
- en: 6.2.3 Push-Pull Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This model eliminates the intermediary broker and thus consumers are getting
    data access directly from the Publisher (Fig. [6.7](#Fig7)). However, the Publisher
    does not know who is accessing the information. The broker is somewhat replaced
    by a queue, where data is stored and made available. The publisher updates the
    queue at various intervals. In this design the publisher has no need for a broker
    since there is no interest to know the consumer. This model does alleviate the
    dilemma of consumers who need more timely data from the publisher. Simply put,
    the queue defines what is available to the consumer at any given time. The analyst
    will need to address the update frequency during the requirements gathering phase
    of the SDLC .![../images/480347_1_En_6_Chapter/480347_1_En_6_Fig7_HTML.png](../images/480347_1_En_6_Chapter/480347_1_En_6_Fig7_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 6.7
  prefs: []
  type: TYPE_NORMAL
- en: Push-pull model. *Source* Mishra ([2019](#CR2))
  prefs: []
  type: TYPE_NORMAL
- en: 6.2.4 Exclusive Pair Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This model is bi-directional or full-duplex with an ongoing open two-way communication
    between a client and server (Fig. [6.8](#Fig8)). The server is aware of all connections
    from clients. The connections remain open until a client send a message to close
    the connection. The analyst needs to provide definitions of the messages and how
    the client and the server response, that is, what the messages carry and processes
    they enact based on the message value.![../images/480347_1_En_6_Chapter/480347_1_En_6_Fig8_HTML.png](../images/480347_1_En_6_Chapter/480347_1_En_6_Fig8_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 6.8
  prefs: []
  type: TYPE_NORMAL
- en: Exclusive pair communication model. *Source* Mishra ([2019](#CR2))
  prefs: []
  type: TYPE_NORMAL
- en: 6.3 IoT as an Inversion of Traditional Analysis and Design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As previously discussed throughout this book thus far, digital transformation’s
    major impact on analysis and design is the shift from designing systems that are
    product focused on performing specific user needs to one that is based more on
    what consumers want! Bernardi et al. ([2017](#CR1)) states “the global economy
    is rapidly shifting from an economy of products to a “what if” economy” (p. 6).
    The authors define this shift as an “inversion paradigm” that transforms systems
    thinking from a product-first to a needs-first perspective. So the question that
    needs to be asked is, “How can technology help us reimagine and fill a need?”
  prefs: []
  type: TYPE_NORMAL
- en: While many IT professionals have historically supported this perspective, especially
    will agile and object design, it is the proliferation of IoT supported by 5G performance
    improvements that has made the world of possibilities feasible. In other words,
    IoT is at the center of the next wave of digital disruption and transformation
    as shown in Fig. [6.9](#Fig9).![../images/480347_1_En_6_Chapter/480347_1_En_6_Fig9_HTML.png](../images/480347_1_En_6_Chapter/480347_1_En_6_Fig9_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 6.9
  prefs: []
  type: TYPE_NORMAL
- en: IoT at the center
  prefs: []
  type: TYPE_NORMAL
- en: Now that I have laid the foundation and architectural models for IoT, it is
    critical to focus on the new roles and responsibilities of the analyst in the
    IoT world. This will require further transformation from a product/user perspective
    to one that is more functional and predictive. This is particularly evident in
    IoT because a device can perform many functions and cater to various consumer
    and machine requests. Indeed, IoT analyst must design smart objects that can integrate
    what is real and digital can co-exist (Bernardi et al. [2017](#CR1)).
  prefs: []
  type: TYPE_NORMAL
- en: 6.4 Sensors, Actuators, and Computation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The IoT digital devices contain three major components and functions: sensors,
    actuators, and computation.'
  prefs: []
  type: TYPE_NORMAL
- en: 6.4.1 Sensors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Analysts must provide or identify APIs in a sensor that can measure the physical
    world and logically convert the information into digital data. Sensors essentially
    capture information, do some types of measurement, record activity and then perform
    applications that transform the data.
  prefs: []
  type: TYPE_NORMAL
- en: 6.4.2 Actuators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Actuators actually does the reverse function of a sensor, that is, it uses digital
    logic on the sensor and sends messages to a physical device. An example would
    be to send a message to shut down a device like an oven. Analysts must define
    the algorithms which provide a change in a state on a device and its response
    to the change. The response would typically be a machine-to-machine or machine-to-consumer
    message.
  prefs: []
  type: TYPE_NORMAL
- en: 6.4.3 Computation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Computation represents the computer logic that determines the behavior between
    sensors and actuators. This logic results from a device sensing a situation and
    then applying an algorithm that instructs the sensor to send a message to the
    actuator to perform a function. It’s like the instruction that results from pressing
    the ignition button on your car. The sensor receives a message and then checks
    the system to see if the engine in the car can safely engaged. The analyst would
    need to provide the data flow (Fig. [6.10](#Fig10)) and also define the logic
    of the steps to take before engaging the engine. This logic likely would check
    the automatic transmission to ensure it is in the “Park” state before allowing
    the engine to be started. This algorithm would be part of the process specification
    of a use case.![../images/480347_1_En_6_Chapter/480347_1_En_6_Fig10_HTML.png](../images/480347_1_En_6_Chapter/480347_1_En_6_Fig10_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 6.10
  prefs: []
  type: TYPE_NORMAL
- en: Data flow diagram represented the computation to start a car engine
  prefs: []
  type: TYPE_NORMAL
- en: 6.5 Connectivity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The analyst must also provide definitions for IoT devices that are always connected.
    Such devices are always operating and initiate messages when a state changes.
    For example, if the temperature drops below 50% it might require the sensor to
    send a message to the heat device to start the heat unit. Of course, the internet
    provides the digital highway that allows these types of activities to occur over
    distances. Once again, we see how state transition diagrams can be an effective
    flow tool for defining logic for constant operating IoT devices.
  prefs: []
  type: TYPE_NORMAL
- en: 6.6 Composability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another interesting capability with IoT devices is their ability to communicate
    with each other directly thru the internet. Device to Device connectivity allows
    users to monitor their own systems and use a monitoring device to directly tell
    another device to do something. Smartphones are great examples of a monitoring
    device. Installing software to monitor the temperature in your house remotely
    for example. Composability also allows users to mix multiple monitoring communications
    without asking for the developer or company to make a modification. Your smartphone
    device can actually communicate with multiple other devices and in cases with
    open source can combine commands—increase temperature and also lower lights and
    put on music for instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The analysis of connectivity and composability are dependent on two types of
    architectures: mediation and API.'
  prefs: []
  type: TYPE_NORMAL
- en: Mediation
  prefs: []
  type: TYPE_NORMAL
- en: While having devices talk to other devices seems attractive, it does have disadvantages.
    Having separate machine-to-machine (M2M) capabilities can cause conflict among
    devices and can affect the overall performance in the network. Therefore, having
    a “mediator” device residing in the cloud is actually a preferable solution. The
    mediator approach is similar to a star topology where the mediator is in the center
    and each device is a “spoke” as shown in Fig. [6.11](#Fig11).![../images/480347_1_En_6_Chapter/480347_1_En_6_Fig11_HTML.png](../images/480347_1_En_6_Chapter/480347_1_En_6_Fig11_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 6.11
  prefs: []
  type: TYPE_NORMAL
- en: IoT star topology using a mediator
  prefs: []
  type: TYPE_NORMAL
- en: Another benefit of a mediator is the simplification it brings when adding new
    devices or updating existing ones. This allows the mediator to act as a centralized
    hub that can coordinate all new software updates by tracking all devices across
    the network. The analyst may need to design a mediator or obtain a third-party
    product.
  prefs: []
  type: TYPE_NORMAL
- en: Suitable APIs
  prefs: []
  type: TYPE_NORMAL
- en: The design of the API is significant as it is the controlling software that
    holds the architecture of IoT together. The analyst should consider accumulating
    all the features and functions needed and then designing an inventory of APIs
    which would be stored in the mediator. The mediator, in effect, becomes the shopping
    outlet of all applications needed across the network. The other advantage of this
    design approach relates to the need to add new applications to the system. The
    mediator can simply be updated and used to distribute the new program to the relevant
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: 6.7 Recruitability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The idea of recruitability is closely aligned with reusability and polymorphism.
    Simply put it allows devices to be used for different applications. For example,
    a device that turns on an engine in a car, could be “recruited” by another operation
    that could initiate different types of operation that replicate the logic of turning
    on an engine. This supports functional decomposition, object-oriented analysis,
    and common API libraries. This also requires documentation of the functional primitive
    in the form of a process specification. Furthermore, the documentation should
    also include the routines abilities to be reused in other contexts. Finally, there
    are instances where a group of primitives can be combined to create functional
    and reusable sensors, actuators, and communication devices. This is a tradeoff
    decision as it establishes devices with very focused capabilities but with higher
    reusability.
  prefs: []
  type: TYPE_NORMAL
- en: 6.8 A Word About IoT Security and Privacy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The analyst must of course be concerned with the security and privacy of any
    IoT device used on the network. The analyst in these circumstances must consider
    all the possible functions of the device and determined and its level of security
    exposure. I will cover much more on this topic in Chap. [9](480347_1_En_9_Chapter.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: 6.9 Immersion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Immersion is a device’s ability to be shared. Indeed, devices can share its
    processes with other requestors if the device is available. Thus, immersion is
    a form of recruitment and is very useful when the original intended device is
    too distant in the network or is malfunctioning. The most important factor in
    immersion is the ability to discover available resources or devices. This can
    be associated with a smartphone when you “pair” it using Bluetooth technology.
    The analyst needs to define the context of a device’s requests so that a receiving
    device can determine its ability to be recruited. This involves some level of
    intelligent messaging capability among a family of devices that can be joined
    under a common communication protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given the power of immersion the analyst must address several complexities:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Discoverability*: not all devices can be accessed without considering certain
    levels of authorization. These are called static devices which essentially require
    both linked devices going through acceptance setup or what is typically known
    as a handshake. These handshakes ordinarily have two pieces, compatibility of
    the sharing; and identification check. Dynamic devices, on the other hand, can
    be linked automatically without agreement. Security in these devices, however,
    can also require some levels of authorization to gain access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Context*: this requires definitions of “what else” a device needs to communicate.
    For example, if a car device is linked to a toll booth it might also want to communicate
    more things about the environment, like direction, speed, license plate, time
    of day, date, etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Orchestration*: this is typically a program that tracks all activity among
    the devices connected to the system. In many ways, orchestration can be compared
    to mediation in that it is a central repository of behavior among the devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Recruitment of Non*-*Digital Objects*: not all objects are digital-based.
    As a result, non-digital objects like food need an indirect method to track and
    communicate with them. Typical indirect objects include RFID tagging, barcodes,
    and digital watermarks (that uses shades of color).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Predictive Maintenance*: another unique feature of smart IoT devices is their
    ability to self-test and communicate conditions that require levels of maintenance.
    Using the network, devices can provide valuable feedback regarding their operating
    status so that various kinds of maintenance can be accomplished in a timely manner.
    These preventive maintenance capabilities all need to be part of the process specification
    which links hardware behavior and conditions with software intelligence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should be obvious that the IoT analyst must be fully equipped to deal with
    the myriad of details that are not only limited to traditional software design,
    but deeply extended to include behaviors of intelligent hardware devices.
  prefs: []
  type: TYPE_NORMAL
- en: 6.10 The IoT SDLC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many and certainly all existing organizations will need to determine how best
    to move forward in assimilating IoT. This will, in addition to many organizational
    changes, require an SDLC that addresses many of the needs discussed in this chapter.
    Thus, the need to modify or establish a lifecycle that managers and staff can
    follow.
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go through Object-Orientation and create functional primitives to API specifications.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move or create Process Specifications.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify new and existing data elements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update (2) and (3) with any new functions based on existing and/or possible
    consumer experiences.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Design API equivalents.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '6.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add available third-party APIs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '7.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Map to IoT devices.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '8.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select IoT configurations and interfaces based on type of device (sensor, actuator,
    computation).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '9.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Determine AI and ML functions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '10.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select type of I/O device communication functions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '11.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Design communication APIs or use third-party libraries.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '12.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add/modify data element definitions to be added to data dictionary including
    dependencies.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '13.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Consider connections to non-digital products using indirect connections (RFID).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '14.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Determine needed API and data on the Fog or Edge.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 6.11 Transitioning to IoT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The way most businesses will ultimately implement IoT is through what Sinclair
    ([2017](#CR3)) coined the “IoT Business Model Continuum.” This model suggests
    that most companies cannot just overhaul their entire systems, rather they must
    start with their core and established business model and add the value of IoT
    over a period of time as shown in Fig. [6.12](#Fig12). The continuum eventually
    leads to the most important objective: business outcomes. Figure [6.12](#Fig12)
    example defines maximum business outcomes as the highest “per surgical profit”
    attainable. It accomplishes this maximized business outcomes by a gradual movement
    to efficiency by improving product-service, then service in general, to service-outcomes,
    before finally reaching per unit profits.![../images/480347_1_En_6_Chapter/480347_1_En_6_Fig12_HTML.png](../images/480347_1_En_6_Chapter/480347_1_En_6_Fig12_HTML.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 6.12
  prefs: []
  type: TYPE_NORMAL
- en: Example of IoT Business Model Continuum. *Source* Sinclair ([2017](#CR3))
  prefs: []
  type: TYPE_NORMAL
- en: 6.11.1 Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The challenge with Sinclair’s model is that time may not be as available as
    companies think. We have experienced what digital disruption can do in an accelerated
    timeframe. Companies in the past that have delayed efforts to go digital have
    failed. The list us getting long in fact: Toys-R-Us, Nokia, and Sears certainly
    come to mind. CEOs and Boards must pay attention to what has occurred in the retail
    industry, which historically spent only 2% of their gross revenues on information
    technology. What is even more serious is what recently happened at GE. GE invested
    in a division of the company called GE-Digital which was designed to provide new
    types of digital services to its customers. Their initial effort has failed because
    the established business units used the new digital division to support its legacy
    needs. Bottom line GE never generated the forecasted revenues from new business.
    The message here is to be careful with the existing and dominant core businesses;
    it appears historically such units tend to unconsciously do everything they can
    to preserve the old way of doing things! Remember that many people feel that the
    majority of IoT products will be developed without a plan!'
  prefs: []
  type: TYPE_NORMAL
- en: Next we need to understand Blockchain analysis and design and its contribution
    to security!
  prefs: []
  type: TYPE_NORMAL
