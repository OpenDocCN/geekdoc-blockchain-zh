- en: 'Chapter 4: JavaScript and JQueryLet’s go through some of JavaScript’s most
    important features to give you a better idea of how it works. The first feature
    is Variables. Variables are like storage containers for values. Data can be placed
    in these containers and then you can refer to it by naming the container. Every
    worthwhile programming task needs a variable. If values were unable to change,
    your webpage would be less interactive. You must declare your variable before
    you can use it in a JavaScript program. The keyword for variable (as seen in Chapter
    One) is var.<script type= “text/javascript”>​<! --​var age;​var race;​// -- ></script>You
    can also declare different variables with the same keyword. It would look like
    this:<script type= “text/javascript”>​<! --​var age, race;​// -- ></script>  (JavaScript
    - Syntax, n.d.)Variable initialization happens when we store a value in a variable.
    You can add values at any point in time. We have created a variable called race,
    so we can add the value ‘black’ to it at a later point and we can add the value
    for age at the time of initialization. It would look like this:<script type= “text/javascript”>​<!
    --​var age = “39”var race;race= black;​// -- ></script>  (JavaScript - Syntax,
    n.d.)The var keyword only needs to be used once, at the time of initialization.A
    variable’s scope is the area of your program where it is defined. In JavaScript,
    there are only two:●     Global Variables–Can be defined anywhere in your JavaScript
    code.● Local Variables–Is only visible within the scope of the function in which
    it is defined.Local variables take precedence over global variables with the same
    name within the body of a function. When a local variable or a function parameter
    has the same name as a global variable, the global variable is effectively hidden.
    For example:<html>​<body onload = checkscope();>​<script type = “text/javascript”>​
    <! --​var myVar = “global”; // Global variable​function checkscope( ) {​var myVar
    = “local”; // Local variable​document.write(myVar);​}​// —-></script><body><html>  (JavaScript
    - Syntax, n.d.)There are rules to naming your variables. The names of your variables
    are case sensitive, so race and Race are two different variables. Variable names
    cannot start with a number. They either have to start with a letter or an underscore.
    If your variable was named 345age, it would be invalid. But if it was named _345age
    it would be valid.There is a list of JavaScript reserved keywords that cannot
    be used as a variable name. The list is as follows:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章：JavaScript和JQuery让我们学习 JavaScript 最重要的一些特性，以便更好地理解它是如何工作的。第一个特性是变量。变量就像值的存储容器。数据可以放入这些容器中，然后您可以通过给容器命名来引用它。每个值得编程任务都需要一个变量。如果值不能改变，您的网页将不够交互。在
    JavaScript 程序中使用变量之前必须声明变量。在 JavaScript 中，变量的关键字（如第一章所示）是 var。<script type= “text/javascript”>​<!
    --​var age;​var race;​// -- ></script>您还可以使用相同的关键字声明不同的变量。看起来是这样的：<script type=
    “text/javascript”>​<! --​var age, race;​// -- ></script>（JavaScript - 语法，n.d.）变量初始化发生在我们将值存储在变量中时。您可以在任何时候添加值。我们创建了一个名为
    race 的变量，因此我们可以在以后的时间点为其添加值“black”，并且可以在初始化时添加年龄的值。看起来是这样的：<script type= “text/javascript”>​<!
    --​var age = “39”var race;race= black;​// -- ></script>（JavaScript - 语法，n.d.）var
    关键字只需要在初始化时使用一次。变量的作用域是定义变量的程序区域。在 JavaScript 中，只有两种：●     全局变量 - 可以在 JavaScript
    代码的任何地方定义。● 局部变量 - 仅在定义它的函数的范围内可见。局部变量优先于函数体内同名的全局变量。当局部变量或函数参数与全局变量同名时，全局变量实际上被隐藏。例如：<html>​<body
    onload = checkscope();>​<script type = “text/javascript”>​ <! --​var myVar = “global”;
    // 全局变量​function checkscope( ) {​var myVar = “local”; // 局部变量​document.write(myVar);​}​//
    —-></script><body><html>（JavaScript - 语法，n.d.）有关命名变量的规则。您变量的名称区分大小写，因此 race 和
    Race 是两个不同的变量。变量名不能以数字开头。它们必须以字母或下划线开头。如果您的变量名为 345age，那么它将无效。但如果它被命名为 _345age，它将有效。有一些
    JavaScript 保留关键字不能用作变量名。列表如下：
- en: '| abstract | boolean | break | byte | case | catch |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '| abstract | boolean | break | byte | case | catch |'
- en: '| char | class | const | continue | debugger | default |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '| char | class | const | continue | debugger | default |'
- en: '| delete | do | double | else | enum | export |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| delete | do | double | else | enum | export |'
- en: '| extends | false | final | finally | float | for |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| extends | false | final | finally | float | for | '
- en: '| function | goto | if | implements | import | in |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| function | goto | if | implements | import | in |'
- en: '| instanceof | int | interface | long | native | new |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| instanceof | int | interface | long | native | new |'
- en: '| null | package | private | protected | public | return |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| null | package | private | protected | public | return |'
- en: '| short | static | super | switch | synchronized | this |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| short | static | super | switch | synchronized | this |'
- en: '| throw | throws | transient | true | try | typeof |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| throw | throws | transient | true | try | typeof |'
- en: '| var | void | volatile | while | with |  |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| var | void | volatile | while | with |  |'
- en: '(JavaScript - Syntax, n.d.)The lion’s share of applications work because of
    an interaction between a client and a remote server. A client refers to the end
    user device. The client requests data from the server, the server receives and
    processes the request and then the client gets the data back in a readable format.
    For the most part, we do need the client server model, but with JavaScript we
    can avoid it completely. JavaScript helps to reduce the traffic by validating
    forms without input from the server.The JavaScript Engine is a program that translates
    source code into a language the computer understands. All browsers today come
    with a JavaScript engine and each engine has two components: A MemoryHeap and
    a Call Stack. A Memory Heap is where memory is allocated at any given time. A
    Call Stack processes information added to it from the script.JavaScript FrameworksFrameworks
    for JavaScript enable the language to perform at its best with minimal setup.
    They give developers the building blocks they need to create JavaScript applications.
    The building blocks are a set of code libraries. The libraries generate code that
    evokes specialized functionality for the sort of app being developed. The framework
    establishes the structure of the whole application. There are several JavaScript
    frameworks out there, but the most popular ones are :'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: (JavaScript - Syntax, n.d.)大部分应用程序正常工作是因为客户端和远程服务器之间的交互。客户端指的是最终用户设备。客户端向服务器请求数据，服务器接收并处理请求，然后客户端以可读格式获取数据。在大多数情况下，我们确实需要客户端服务器模型，但使用JavaScript可以完全避免它。JavaScript有助于通过在不需要服务器输入的情况下验证表单来减少流量。JavaScript引擎是将源代码转换为计算机可以理解的语言的程序。所有现代浏览器都带有JavaScript引擎，每个引擎都有两个组件：MemoryHeap和Call
    Stack。MemoryHeap是在任何给定时间分配内存的地方。Call Stack处理从脚本中添加到它的信息。JavaScript框架JavaScript的框架使语言能够在最小的设置下表现最佳。它们为开发人员提供了创建JavaScript应用程序所需的构建块。这些构建块是一组代码库。这些库会生成代码，调用特定功能，用于开发的应用程序类型。框架建立了整个应用程序的结构。有几个JavaScript框架，但最流行的是：
- en: '| Node.js | Node.js is a cross platform, open-source, back-end JavaScript runtime
    environment that makes use of the V8 engine to execute JavaScript code outside
    of a web browser. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| Node.js | Node.js是一个跨平台、开源的后端JavaScript运行环境，它利用V8引擎在Web浏览器之外执行JavaScript代码。
    |'
- en: '| Vue.js | Vue.js is an open-source JavaScript framework that creates user
    interfaces and single page apps. It uses a model-view viewmodel (MVVM) architectural
    pattern. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| Vue.js | Vue.js是一个开源的JavaScript框架，用于创建用户界面和单页应用。它使用模型-视图-视图模型（MVVM）架构模式。
    |'
- en: '| AngularJS | AngularJS was an open-source, front-end framework for constructing
    single-page apps based on JavaScript. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| AngularJS | AngularJS是一个基于JavaScript构建单页应用的开源前端框架。 |'
- en: '| Ember.js | Ember.js is an open-source, JavaScript client-side framework for
    constructing web apps. It enables the development of client-side applications
    by offering a comprehensive solution that includes data management and application
    flow. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| Ember.js | Ember.js是一个用于构建Web应用的开源JavaScript客户端框架。它通过提供包括数据管理和应用程序流程在内的综合解决方案，使客户端应用程序的开发成为可能。
    |'
- en: '| React | React is a front-end JavaScript toolkit for creating user interfaces
    using UI components. React can be used as a foundation to create single-page or
    mobile apps. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| React | React是一个前端JavaScript工具包，用于使用UI组件创建用户界面。React可用作创建单页或移动应用的基础。 |'
- en: '(JavaScript - Syntax, n.d.)Features of JQueryHTML ManipulationElements in an
    HTML document can be manipulated because JQuery allows the user access to the
    DOM.DOM ManipulationJQuery gives you access to the DOM’s API so that you can make
    any necessary changes to your HTML document. You can add and subtract and rearrange
    elements as you please. By doing this, your web page can display updated information
    without you having to refresh the page a number of times.CSS ManipulationThe JQuery
    library has lines of code that can be used to control and change elements of CSS
    and DOM.Effects and AnimationJQuery has an animate function that makes it easier
    to add different effects and animations to your web page. It also lets you animate
    your HTML elements by manipulating the CSS. Examples of these effects include:
    show, hide, fade in, fade out and slide.AjaxAjax stands for Asynchronous JavaScript
    and XML. It lets you put content from a server or a database onto your website
    without having to refresh the site every time. If you are visiting a website that
    is constantly receiving data, it would be really inconvenient to have to refresh
    the page each time.UtilitiesUtilities are software programs that optimize a computer’s
    performance. Some utility programs are good for keeping your computer virus free
    and others just make your desktop look good.JQuery can be considered legacy code
    because it was introduced in 2006\. It has stood the test of time and can be used
    in most applications that exist today. JQuery is used on most, if not all wordpress
    sites. There are a whopping 455 million of them as of 2022\. It teaches you a
    lot about JavaScript and is the easiest coding library to use.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: (JavaScript - 语法，无日期)JQuery的特性HTML 操作JQuery允许用户访问DOM，因此可以操作HTML文档中的元素。DOM 操作JQuery提供对DOM的API访问，以便对HTML文档进行任何必要的更改。您可以随意添加、删除和重新排列元素。通过这样做，您的网页可以显示更新的信息，而无需多次刷新页面。CSS
    操作JQuery库具有可以用于控制和更改CSS和DOM元素的代码行。效果和动画JQuery有一个使添加不同效果和动画更容易的动画函数。它还允许您通过操作CSS来对HTML元素进行动画处理。这些效果的示例包括：显示、隐藏、淡入、淡出和滑动。AjaxAjax代表异步JavaScript和XML。它让您可以将来自服务器或数据库的内容放到您的网站上，而无需每次刷新网站。如果您正在访问一个不断接收数据的网站，每次都需要刷新页面将会非常不方便。实用程序实用程序是优化计算机性能的软件程序。一些实用程序非常适合保持计算机无病毒，而其他实用程序则只是让桌面看起来不错。JQuery可以被认为是传统的代码，因为它是在2006年引入的。它经受了时间的考验，并可用于今天存在的大多数应用程序中。JQuery在大多数Wordpress站点上都被使用，如果没有则全部。截至2022年，有整整45.5亿个站点在使用。它可以教会您很多关于JavaScript，并且是最容易使用的编码库。
