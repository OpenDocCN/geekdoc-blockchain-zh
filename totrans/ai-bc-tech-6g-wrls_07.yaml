- en: © The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2022M.
    Dutta Borah et al. (eds.)AI and Blockchain Technology in 6G Wireless NetworkBlockchain
    Technologies[https://doi.org/10.1007/978-981-19-2868-0_7](https://doi.org/10.1007/978-981-19-2868-0_7)
  prefs: []
  type: TYPE_NORMAL
- en: Computation Time Estimation of Switches and Controllers Process on 6G-Based
    SDN-Cyber Security Forensics Architecture in the Blockchain-Based IoT Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Deepashika J. Rathnayake^([1](#Aff7) [ ](#ContactOfAuthor1)) and Malka Halgamuge^([2](#Aff8) [ ](#ContactOfAuthor2))(1)Charles
    Sturt University, Melbourne, VIC, Australia(2)Department of Electrical and Electronic
    Engineering, The University of Melbourne, Parkville, VIC, AustraliaDeepashika J. Rathnayake (Corresponding
    author)Email: [deepashika.r@gmail.com](mailto:deepashika.r@gmail.com)Malka HalgamugeEmail:
    [malka.nisha@unimelb.edu.au](mailto:malka.nisha@unimelb.edu.au)'
  prefs: []
  type: TYPE_NORMAL
- en: Abstract
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Improving the security of blockchain-based Software-Defined Networking (SDN)
    is discussed in recent studies. The blockchain is utilized on the SDN-based Internet
    of Things to meet some security provisioning challenges, data integrity, and evidence
    alternation in digital forensics in cybersecurity. Finding a computation time
    estimation solution is prominent to overcome the computational time complexity
    of the 6G-based SDN-forensic architecture in a blockchain-based IoT environment.
    Functionalities of Software-Defined Networking dynamically control the network
    flow on the 6G-based SDN-forensic architecture. We develop a model to estimate
    the computational time on the SDN-cyber forensics architecture that works in a
    blockchain-based IoT environment in the 6G network. Our results demonstrate the
    total time consumption on the SDN-forensic network is high regardless of the number
    of IoT devices. We show the time consumption of controllers is higher than the
    time consumption on switches. Additionally, we observe the impact of the number
    of IoT devices on time consumption in switches and controllers. Basic sense, forensic-based
    processing delay affects the total network progress in the SDN-forensic network.
    The lower scalability of the 6G-based forensic network is not able to perform
    securely, as the traffic provided is less. As a result, it can have a significant
    impact on the final productivity. The low scalable forensic network continuously
    engages in a wasteful activity and thus is unable to fully benefit as a result
    of latency and scalability concerns. Therefore, it has the potential to significantly
    affect final throughput. In conclusion, this chapter presents a comprehensive
    analysis of computation time for future research to find ways to overcome the
    time complexity of blockchain-based Software-Defined Networking in the 6G environment.
  prefs: []
  type: TYPE_NORMAL
- en: KeywordsBlockchain6GCybersecurityLatency Software-Defined NetworkingSDN-forensic
    architectureSwitchesControllersComputational timeThroughput
  prefs: []
  type: TYPE_NORMAL
- en: 1 Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The network management system in 6G is evolving toward integration, distribution,
    diversity, and intelligence as information technology advances. The 6G will enable
    revolutionary applications by merging sensing, imaging, and precise timing with
    mobility and truly leveraging artificial intelligence and intelligent networks
    such as forensic software-defined networks. The 6G-based forensic network system
    will improve 5G in terms of performance and user Quality of Service (QoS) while
    also adding some fascinating new features in the SDN-forensic network. It will
    protect the forensic system and user information. It will offer convenient services.
    The SDN is also seen as a key technology for the 6G network. One of the most significant
    criteria for a 6G network architecture is flexibility, as well as the improvement
    of 6G network performance, which SDN technology can achieve. There is a novel
    network management approach which has a massive network with heterogeneous devices.
    By decoupling the control plane from the data plan in the 6G network, SDN can
    overcome the vertical integration.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain is the solution for SDN that can audit forensically unchanged logs.
    Blockchain is the leading software platform globally that helps for security enhancement
    and the quality control perspective of digital forensics. Private key cryptography,
    shared ledger distributed network, and network service transaction incentives
    are the three technologies that keep blockchain records securely [[1](#CR1)].
    In previous studies, secure automation is discussed. However, it is becoming increasingly
    difficult to ignore controllers’ computation time and switches in 6G SDN-cyber
    forensics architecture in cybersecurity in the blockchain-based IoT environment.
    The computation time of switches and controllers plays a vital role in SDN-forensics
    architecture in cybersecurity. Usually, a large number of IoT devices connect
    with blockchain networks through a gateway.
  prefs: []
  type: TYPE_NORMAL
- en: Estimating computation time allows identifying the time consumption of switches
    in the data plane and controllers in the control plane. Furthermore, we study
    the effect of security in signature verification and the digital signature providing
    secure control ownership. The purpose of this chapter is to review the recent
    estimation of computation time during the SDN-forensics lifecycle in cybersecurity
    of the blockchain-based IoT environment. A novel blockchain-based distributed
    cloud architecture with software defined networking enables controller fog nodes
    at the edge of the network to meet the required design principles [[1](#CR1),
    [2](#CR2)]. Cyber Forensics users are validated by using the hash algorithm in
    the control plane, and data is secured by homomorphic encryption with high privacy
    in a decentralized model. It protects non-authorized modifications, authenticity,
    and non-repudiation. The novel blockchain-based architecture provides low-cost,
    secure, and on-demand access and addresses high availability, real-time data delivery,
    scalability, security, resilience, and low latency.
  prefs: []
  type: TYPE_NORMAL
- en: An electric vehicle power trading model based on blockchain and smart contract
    dramatically improves energy efficiency and cost-effectiveness, achieving efficient
    operation [[4](#CR4)]. The SDN-based energy internet is a distributed architecture
    supported by blockchain that achieves a good match of the transaction object protection
    [[5](#CR5)]. So far, there has been little discussion about the security and privacy
    of blockchain and SDN. We have found a computational time estimation model on
    the 6G-based SDN-forensics architecture in a cybersecurity blockchain-based IoT
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 Motivation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The time estimation of SDN-forensic architecture in a blockchain-based IoT environment
    is the prominent solution to overcome the computation complexity of blockchain-based
    6G SDN. Most of the previous work focused on security issues, network complexity,
    and latency issues of Software-Defined Networking. To address these security issues,
    blockchain technology is used. However, there is no systematic model to estimate
    the computational time on SDN-forensics architecture in a cybersecurity blockchain-based
    6G IoT environment. Therefore, our motivation is to propose a model to estimate
    total time consumption to overcome the high-level complexity of computational
    time.
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 Main Contribution of the Chapter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The computational time estimation model proposed in this study analyzes the
    time consumption of switches and controllers on 6G-based SDN-forensic architecture
    in a cybersecurity blockchain-based 6G IoT environment. Therefore:'
  prefs: []
  type: TYPE_NORMAL
- en: We propose a model to estimate the total time consumption on SDN-forensic architecture
    in cybersecurity for switches and controllers on SDN-cyber forensic architecture
    in a blockchain-based IoT environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We observe the time consumption for switches and controllers with the increment
    of the number of IoT devices and the amount of data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The rest of this chapter is organized as follows: Sect. [2](#Sec2) begins by
    laying out the materials and methodology of the research, and Sect. [3](#Sec3)
    illustrates the significant achievements of the proposed work, along with the
    results obtained. Finally, Sect. [4](#Sec4) concludes this chapter by outlining
    future directions.'
  prefs: []
  type: TYPE_NORMAL
- en: 2 Materials and Methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The digital signature is the critical control in forensic SDN. The forensic
    network uses a mathematical algorithm to provide authenticity of the data and
    protection against forgery. Blockchain allows multiple signatures. Blockchain
    adds the most value in the concept of consensus; transactions cannot be edited
    or deleted, which significantly secures transactions and signature technologies.
    Hence, the security issues related to the blockchain are essential in conditions
    for cybersecurity. In this sense, security experts need to fully understand the
    scope and impact of security and privacy challenges related to the blockchain
    before predicting potential harm from an attack and checking if current technology
    can withstand constant hacking attempts. There is a threat from hackers that they
    use many different ways to infiltrate a cyber-forensic network, this could be
    a phishing attack in which hackers mimic a Wi-Fi network or program and urge employees
    of an organization to log in and give them their credentials. The hash key is
    utilized for integrity checking as it is the digital signature. When considering
    SDN controller forensics architecture in cybersecurity, it develops an algorithm
    to verify the user. Each user signature validates before getting permission to
    the data logs, and then it becomes authentic and legitimate. Blockchain is utilized
    in the control plane, and y has made significant contributions to cybersecurity
    due to its immutability, traceability, decentralization, and transparency. Encryption
    and verification are two of the essential parts of a cybersecurity network, and
    blockchain offers both. In cyber-forensic architecture, the algorithm is running
    in a blockchain network. Block 1, block 2, block 3, and block 4 are the secondary
    evidence databases, and each block contains *block_header, block_body, hash, previous_block_hash,
    time_stamp, forensic_data_set, consensus_algorithm, nonce, version,* and *evidence
    source*. Once the evidence reaches from the IoT device, its destination is signed.
    The signature is created using a private key and securely stored by the signer.
    No matter about any kind of cyber-attack, we use a decentralized database in the
    forensic network as the blockchain is decentralized by nature, which means there
    is no single point of penetration for hackers to invade. Also, it mitigates the
    risk that comes from any single node being compromised. The blockchain is also
    operating on a multi-signature authentication model, which avoids usernames and
    passwords in favor of user authentication by confirming that they have access
    to multiple devices. This is a more secure way to grant network access, ultimately
    reducing the ease and frequency of breaches and better protecting forensic data
    (Fig. [1](#Fig1)).
  prefs: []
  type: TYPE_NORMAL
- en: 3 Computation Time Estimation on SDN-Forensic Architecture in Blockchain-IoT
    Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Blockchain technology is utilized in the cyber forensics environment to facilitate
    modern digital cyber forensics. The Internet of Things is incorporated with digital
    cyber forensics introducing complexity to cyberspace. Records generated by IoT
    devices can assist with event reconstruction. The ubiquitous deployment of IoT
    devices enhances connectivity and communication through the 6G network. Its integrity
    and thus, its acceptability can only be achieved if the chain of custody (CoC)
    is maintained as its blockchain within the broader context of the ongoing digital
    investigation. Therefore, the blockchain acts as a controller of lacking data
    and server compromise of service quality in the digital forensics’ environment
    with cybersecurity 6G network.
  prefs: []
  type: TYPE_NORMAL
- en: Figure [2](#Fig2) demonstrates the total Time Computation Estimation for 6G
    SDN-forensic architecture in the blockchain-IoT environment:![](../images/517376_1_En_7_Chapter/517376_1_En_7_Fig1_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Figure presents the relationship between the Signing process, Verification Process,
    and blockchain network.
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 1
  prefs: []
  type: TYPE_NORMAL
- en: Digital signature works in SDN-forensic architecture in the blockchain-based
    IoT environment with secure access for the evidence database. The forensic user
    enters the digital signature on an electronic document that is encrypted. After
    the verification process, the user obtains a block of evidence for the blockchain
    network
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/517376_1_En_7_Chapter/517376_1_En_7_Fig2_HTML.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure presents the relationship between the Signing process, Verification Process,
    and blockchain network.
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 2
  prefs: []
  type: TYPE_NORMAL
- en: Total computation time estimation for SDN-forensic architecture in the blockchain-IoT
    environment. Step 1 to Step 5 is used to obtain the total time consumption on
    switches in data plane as Section A. Step 6 to Step 13 is run in the data plane
    as Section B. Finally, combining Section A and Section B, the total computational
    time of SDN-forensic architecture in the blockchain-IoT environment can be estimated
    (Fig. [3](#Fig3) corresponds to Fig. [2](#Fig2))
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1**: there are n number of IoT devices that come from the device plane
    and start the IoT device initialization at the data plane.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 2** identifying network traffic of each data packet allows traffic types
    of VoIP, HTTP, and FTP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 3** the endpoint of logical connection in the 6G SDN-forensic network
    that is used for specialized services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 4**: priority scheduling engages with traffic processing; generally,
    the packet priority is used only when the service requires consistent high performance,
    which is extremely important.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 5**: flow entries verification typically updates the switch with new
    flow entries while receiving new packet patterns, whereas the switch can handle
    it locally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 6**: time consumption for packet identification, in the blockchain network,
    which is done by the packet parser, dynamically monitors the packets which are
    coming from the devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 7**: OpenFlow controllers in manipulating flow tables allow for the
    control of switching rules because OpenFlow is a control protocol that communicates
    policies and traffic management information between switches and controllers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 8**: the creation of binary backups is essential to store binary images
    of forensic evidence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 9**: a new block is added into the forensic network with a hash key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 10**: the feature analysis is used to extract packet features that arrived
    from the data plane. All packet features are not extracted at this stage, except
    for specific features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 11**: signature validation phase-in, authenticates the blockchain which
    is running to complete the validation process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 12**: packet classification is always done after the feature extraction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 13**: controllers store evidence records to data logs with the hash
    keys for secure access after the packet classification. Then time consumption
    on switches (*T*[*S*]), controllers (*T*[*C*]), and the total time consumption
    on SDN-forensic architecture in the blockchain-based IoT environment (*T*[*FSDN*])
    are represented in Fig.  [2](#Fig2).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Figure [3](#Fig3) corresponds to Fig. [2](#Fig2) and is explained as follows.
    Equation ([1](#Equ1)) shows the data plane with appropriate steps from Step 1
    to Step 5 and Eq. ([2](#Equ2)) shows the control plane with respective steps from
    Step 6 to Step 13 on SDN-forensic architecture (Fig. [3](#Fig3)). There are four
    separate layers in the SDN-forensic network, including IoT device plane, data
    plane, control plane, and application plane. An IoT gateway maintains the communication
    gap between the IoT device plane and the data plane. We assume IoT devices offer
    local processing and storage solutions when systematically connected with the
    data plane. Each block contains an OpenFlow controller to support 6G SDN. The
    northbound interface is the connection between the controller and the forensic
    network's applications, and the southbound interface is the connection between
    the controllers. Blockchain is set for transaction verification where it has become
    an emerging technology with decentralized, transparent, and immutable features.
    Clusters of computers manage and distribute a time-stamped series of records of
    evidence in the 6G SDN-forensic network, which is used by the blockchain network.
    Forensic users carry out every write operation, and these operations are validated
    through consensus checks, where the entire network should agree to make the changes.
    The software-defined network is protected from attacks that provide automatic
    and programmable rules. The flexibility and resilience of the forensic network
    can be improved by a distributed control plane. The OpenFlow controllers take
    routing decisions allowed by OpenFlow switches, push forwarding rules, and security
    rules on switches to control the network switches. This would help manage traffic
    in the forensic network. The control plane automatically stores evidence in a
    forensic database that can be modified according to forensic purposes and can
    create binary backups. However, the primary evidence database is the main database
    that stores binary images of evidence. We present Algorithm 1 for the time estimation
    process and Eq. ([3](#Equ3)) for time calculation.![](../images/517376_1_En_7_Chapter/517376_1_En_7_Fig3_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: Flow chart presents the relationship of the application plane, intrusion detection,
    security enhancement, firewall, data planes and IoT nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 3
  prefs: []
  type: TYPE_NORMAL
- en: Switches and controllers’ behavior in SDN-forensic architecture in blockchain-IoT
    environment. IoT devices send packets to the data plane, then start the operation
    with the IoT device initialization. After traffic processing is completed, validate
    the port numbers. Packets reach the switches after the priority scheduling, start
    flow entries verification process, then packets migrate to the next available
    switch when the switch is overloaded. Step 1 to Step 5 are in the data plane.
    After the process of the data plane, packets reach the control plane. Step 6 to
    Step 13 is explained as follows. Once the packet identification is made, the controllers
    manipulate the flow tables. Next, create binary backups to store binary images,
    feature extraction, which is completed by feature analyzer, and validate the signature
    of the forensic user for authentication purposes. When packet classification is
    completed, evidence records are stored in the blockchain with the hash key
  prefs: []
  type: TYPE_NORMAL
- en: Time estimation is based on the IoT environment due to IoT generating vast amounts
    of forensic data and delivers large amounts of data in real-time. Developing a
    computation model on SDN is that separating the control plane from the data plane
    and the network is centrally managed and programmable. Although the Network Function
    Virtualization (NFV) is a function of 6G SDN, there are some limitations not to
    use in the forensic deployment computation model. Because NFV environments are
    more dynamic and might require scaling up with additional features to cope. We
    are also not supposed to develop the computation model on any SDN-based architecture,
    and security issues come with routers and switches. Also, the computation model
    we proposed is unique, and the steps of the forensic network steps are not similar
    to any SDN/NFV architecture based on 6G (Fig. [4](#Fig4)).![](../images/517376_1_En_7_Chapter/517376_1_En_7_Fig4_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: There are two mind maps. The first mind map represents the process of data plane
    from the beginning. The second mind map represents the process of control plane
    till the end.
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 4
  prefs: []
  type: TYPE_NORMAL
- en: Flowchart for switch and controller operations in the SDN-forensic architecture
    in blockchain-based IoT environment
  prefs: []
  type: TYPE_NORMAL
- en: 'Algorithm 1: Computation time on data plane, and blockchain network plane of
    the 6G SDN-forensic architecture in blockchain-based IoT environment.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/517376_1_En_7_Chapter/517376_1_En_7_Figa_HTML.png)'
  prefs: []
  type: TYPE_IMG
- en: An image depicts the algorithm for computation time on the data plane and blockchain
    network plane of 6 G S D N-forensic architecture. The algorithm begins with starting
    the process, Establishing a connection, and Initializing I o T devices. Then,
    the loop starts; if the status is equal to true, then verify IoT Device, and malicious
    traffic is true, allow I o T Device to access the network. If malicious traffic
    is false, discard I o T Device access.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/517376_1_En_7_Chapter/517376_1_En_7_Figb_HTML.png)'
  prefs: []
  type: TYPE_IMG
- en: An image exhibits the continuation of the Algorithm. It ends for I o T devices
    initialization, process traffic loop starts to grant and deny access for network
    traffics, validate the port numbers to accept or discard the user, schedule the
    priority by verifying the entries flow to accept or migrate the data packets,
    Identify the packet status - regular or irregular, Manipulate flow tables on switches
    add, update, and delete, create binary backups, add the block, analyze the features,
    validate the signature to authenticate or block the user, classify packet, and
    store forensic records.
  prefs: []
  type: TYPE_NORMAL
- en: Algorithm 1 describes the complete process of SDN-forensic architecture in the
    blockchain-based IoT environment of the 6G network. If device status is true at
    the initial stage, it is malicious traffic and allows access to the network otherwise,
    discards the IoT device. Port numbers belong to *VoIP*, *FTP*, and *HTTP*. At
    the port number validation phase, the users are accepted who have valid port numbers.
    Packet prioritization is done using basic scheduling, First Come First Serve-Push
    Out (FCFS-PO), or First Come First Serve-Push Out-Priority (FCFS-PO-P) scheduling.
    The maximum size of flow entries is identified at the flow entry verification
    phase. Both regular and irregular packets are identified using a packet parser,
    then manipulated flow tables in the next stage. After creating binary backups,
    a new block is added to the blockchain with a timestamp. Thereafter, the packet
    features are analyzed. At the signature validation, the valid and invalid user
    access is identified. The packets are classified according to packet features
    at the next stage and finally stored in the evidence records after the modification.
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 Computation Time of Data Plane in Which IoT Devices Work
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Attacks targeting southbound API and data plane components are included in the
    SDN-forensic network. We identify device attacks, protocol attacks, and slide
    channel attacks. The most common attack in the forensic network is a device attack.
    A vast number of devices reach the data plane. Therefore, a device attack is a
    major threat to the 6G-based SDN-forensic network because it refers to all attacks.
    The device attack targets software or hardware vulnerabilities of switches to
    compromise the SDN data plan. In the simple term of cybersecurity, an attacker
    may target forwarding devices’ software bugs or hardware features. OpenFlow allows
    direct access to the infrastructure or redirection level of a cybersecurity forensic
    network with software to allow manipulation and control of its operation. With
    OpenFlow, provide control of all elements, including switches and other devices
    at the infrastructure level. There are some forwarding policies that are associated
    with the data plane, and they are dependent upon the type of device. These devices
    can be either collocated or dislocated. At the same time, both types of devices
    might reach the forensic data plane. The collocated devices can be either physical
    or virtual, and these devices use distributed control planes. The dislocated devices
    distribute across multiple elements that are centrally controlled. OpenFlow enables
    the control plane to define the required forwarding behavior of the data plane
    in a centralized manner. The specified network control policies are reflected
    by traffic forwarding decisions and are translated by controllers into actual
    packet-forwarding rules which are in flow tables of OpenFlow switches.
  prefs: []
  type: TYPE_NORMAL
- en: In more specific terms, a flow table and an OpenFlow secure channel consist
    of OpenFlow switches for external OpenFlow controllers. Flow entries are maintained
    by forwarding tables, and each flow entry compromises match fields containing
    header values. The switch processes all incoming packets compared against flow
    tables that match the entries with packets based on priority order which the controller
    specifies. If a matching entry was found, increasing the flow counter and the
    procedures associated with entering a specific flow entry are performed on an
    incoming package that belongs to the flow counter. According to the Open flow
    specification, there are several actions including forwarding a packet out on
    a specific port, dropping the packet, removing, or updating packet headers. The
    SDN-forensic network links the advantages including flexibility and innovation
    to network management. There are some issues such as scalability and performances
    that mainly all forensic network intelligence and control the logic to OpenFlow
    controllers, hence restricting the OpenFlow task to dumb execution of redirect
    actions. DevoFlow, which is an OpenFlow rule, claims to reduce switch interactions
    to the controller by introducing new control mechanisms inside the switches. In
    this way, local control decisions can be taken by switches while dealing with
    recurring events, without engaging controllers whose primary tasks will be limited
    to maintaining centralized control over a much smaller number of important events
    that require network-wide visibility. The forensic network uses OpenFlow switches
    using additional state tables to reduce reliance on remote controllers for applications
    involving local states such as MAC learning processes and port knocking on firewalls.
  prefs: []
  type: TYPE_NORMAL
- en: The OpenFlow protocol is the core of the 6G-based SDN technology, SDN with OpenFlow
    key promises flexibility and the forensic network's rapid configuration. It is
    important to note that the forensic network has a dynamic environment that continually
    changes its evidence and decision-making process. Therefore, OpenFlow protocol
    is the programmable protocol that is used by the forensic network as it separates
    the programming of network devices from the underlying hardware and offers a standardized
    way of delivering a centralized, programmable network that can quickly adapt to
    changing network requirements. Therefore, the OpenFlow switch enables data to
    communicate over the OpenFlow channel to an external controller. The packet lookup
    and forwarding are performed following one or more flow tables and a group table.
    The SDN-forensic architecture in the 6G network has functioned with three essential
    elements that are flow tables installed on switches, a controller, and a proprietary
    OpenFlow protocol for the controller to talk securely with switches. Controllers
    impose policies on flows through switches and paths designed by controllers on
    OpenFlow switches to provide traffic management consistency. Enabling OpenFlow
    on physical keys and migrating to an OpenFlow key is something that most clients
    are working toward. We assume that the 100 GB switch supports OpenFlow 1.3, which
    OpenFlow switches in the 6G-based SDN-forensic networking environment. The packet-forwarding
    plane is disaggregated from the control plane, and switching decisions are made
    by the forwarding plane. OpenFlow aims to enable an open-source network architecture.
    There are some benefits due to the decoupling of the data plane from the control
    plane, including improvement of traffic management capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '***(1) Time for Initializing IoT Devices (t***[***ID***]***).***'
  prefs: []
  type: TYPE_NORMAL
- en: IoT device initialization is the process of identifying devices on the software-defined
    network. The Internet of Things (IoT) is becoming an increasingly attractive target
    for cybercriminals. Furthermore, IoT devices are not high-power devices that have
    minimal embedded security solutions. Therefore, IoT devices gain access to the
    forensic network after providing identities appropriately and accurately. These
    device identifiers are closely related to its features, either hardware or software.
    However, the IoT plane does not reside in the middle of the SDN-forensic architecture
    of the 6G network as it is the initial point of the network that the entire forensic
    network depends on the IoT device plane. IoT devices work individually and independently
    in the forensic network. Many illegitimate device attempts are neglected by themselves.
    Alongside, IoT devices fail to handle vast amounts of attacks at the same time
    due to a lack of computing capabilities to handle these attacks. IoT devices use
    network scanning for particular attacks because certain IoT ports open all the
    time. Each IoT device in the forensic network can consist of a sensor, actuator,
    and communication infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: As we mentioned before, some more devices are identified by using explicit identities,
    including IP address, MAC address, and other network identities. In the SDN-forensic
    network, IoT devices are classified as resource-constrained devices that have
    the processing power, communication capability, memory, and energy when there
    are some complex cryptography algorithms used for the security of device identity.
    We identify two phases in IoT device initialization. IoT devices that are connected
    to the forensic network are first authenticated. These IoT devices use a lightweight
    authentication protocol, as the IoT devices are resource-constrained. The sharp
    rise in the use of Internet of Things (IoT) devices has imposed new challenges
    in device identification due to a variety of devices, protocols, and control interfaces.
    Also, all devices are heterogeneous with different operating systems and connectivity
    capabilities. In the second phase, the forensic network determines that service
    requests from authenticated IoT devices are authorized.
  prefs: []
  type: TYPE_NORMAL
- en: Connectivity, interoperability, and dynamic composability to facilitate communication,
    data flow, device management, system customization, and service personalization
    are offered by the IoT device platform. Also, it integrates with all other layers;
    data plane, control plane, and application plane to streamline infrastructure
    management and support security at multiple points across the IoT stack. Then
    data packets are forwarded to the switches, and the algorithm is executed in a
    loop until all n number of IoT devices are identified. An increase of malware-loaded
    IoT devices is a threat for the Software-Defined Network and filters malicious
    traffic by IoT device initializing.
  prefs: []
  type: TYPE_NORMAL
- en: '***(2) Time for Traffic Processing (t***[***TP***]***).***'
  prefs: []
  type: TYPE_NORMAL
- en: In the traffic processing stage, forensic data is moving across the network.
    The important component for network traffic measurement, control, and simulation
    is network traffic. Certain flow rules are used by switches that are present on
    the data plane that are generated based on the type of traffic, protocol, and
    port numbers. Traffic is classified with a more advanced monitoring approach following
    flow’s importance. Traffic types can be identified as VoIP, FTP, and HTTP in the
    forensic architecture and generated on switches in the data plane. The IoT devices
    are allowed only with these traffic types and unnecessary illegitimate network
    traffic is ignored. Network traffic processing is one part of security analysis
    and it is a critical element in the 6G forensic network as it detects network
    threats earlier. More advanced monitoring approaches try to classify traffic according
    to the flow’s importance. Then it takes time for this process. There is specific
    maximum traffic for each traffic type and when exceeds the size of relevant traffic,
    which is suspected.
  prefs: []
  type: TYPE_NORMAL
- en: '***(3) Time for Port Number Validation (t***[***PN***]***).***'
  prefs: []
  type: TYPE_NORMAL
- en: Network ports are standardized connected devices, and each port is assigned
    a number. Most ports are reserved for certain protocols, and messages go to the
    relevant port. A port number is always associated with an IP address of a host,
    and the type of transport protocol used for communication and specific port numbers
    are reserved to identify specific services. The ports are closed when required
    transactions are completed. This provides another layer of security by not leaving
    these ports open for attack. The flow rules are majorly defined from the port
    numbers for each traffic. There are different Internet-based apps such as email,
    web browser, and cloud storage drivers connected with the forensic network. Each
    of these applications has one or more port numbers. The forensic network allows
    VoIP, HTTP, and FTP, respective port numbers are 5060, 80, and 21 and they are
    unique identifiers over a forensic network by specifying both the host and the
    service. Generally, a port number is associated with an IP address of a network
    host and the type of transport protocol used for communication in the forensic
    network.
  prefs: []
  type: TYPE_NORMAL
- en: Port numbers provide firewall security by stipulating the destination of forensic
    information on the network. We assume that IoT devices within both the internet
    and the internet access the forensic network through IoT device users’ web servers
    via 6G, by the way, a firewall can be set for network security purposes and then
    prohibit other packets destined to port 5060,80, and 21 from passing through switches.
    In the port number validation, reserved specific port numbers to identify specific
    services. Then an arriving forensic data packet can be easily forwarded to a running
    application. We suppose that the algorithm runs for each traffic type, then discards
    the illegitimate users. In simple terms, if any software requires communication
    with a forensic network system, it will expose a port for the particular software.
    Allowed port numbers are already identified in the forensic network system, and
    they are well-known port numbers. Running an algorithm of port number validation
    for each traffic takes time to proceed and cannot be ignored.
  prefs: []
  type: TYPE_NORMAL
- en: '***(4) Time for Priority Scheduling with Multiple Switches (t***[***PS***]***).***'
  prefs: []
  type: TYPE_NORMAL
- en: We assume that there is at least one flow table in an OpenFlow switch. The first
    flow table matches the incoming packets. The next step is done following the current
    stage and forms the basic structure. The next scheduling method is FCFS-PO. If
    the buffer is full when a packet reaches the buffer, it is put at the tail of
    the queue while the packet at the head is pushed out. Then all the packets move
    forward in one position. The number of waiting packets decided the position of
    a packet in the buffer. The last scheduling method is FCFS-PO-P and the process
    of both arrival and incoming packets are the same as the previous scheduling method.
    The newly incoming packet has the highest priority, and it will be put in the
    front position to get service first. Packet prioritization depends on an algorithm
    that shows log end-to-end data transmission delay, high energy consumption, and
    deprivation of high priority real-time data packets. Improper allocation of data
    packets to the queue is the result of this process. The algorithm is static for
    every priority scheduling method that does not matter on the forensic network's
    changing requirements.
  prefs: []
  type: TYPE_NORMAL
- en: In simple terms, the purpose of packet scheduling is to select which packet
    to be dropped or serviced. Therefore, forensic users ensure that the forensic
    data packet is delivered based on priority and fairness with minimum latency.
    Also, it ensures the Quality of Service (QoS) of forensic data which in turn increases
    the transmission rate. There are several network parameters in the 6G-based SDN-forensic
    network such as bandwidth, packet arrival rate, packet deadline, and packet size.
    The data packet servicing and dropping are based on these parameters. Therefore,
    packet scheduling time is based on these parameters. However, time needs to be
    considered based on which schedule is selected. Therefore, priority scheduling
    is a long process, together with these three scheduling types.
  prefs: []
  type: TYPE_NORMAL
- en: '***(5) Time for Flow Entries Verification (t***[***Fe***]***).***'
  prefs: []
  type: TYPE_NORMAL
- en: Flexible routing control is enabled by transferring packets according to the
    flow inputs on the switch. There are a specific number of flow entries for every
    switch; meanwhile, the verifier chooses the switch's maximum size of flow entries.
    When packets arrive at a switch during network operation, the arrival packet flow
    is compared to the flow entries in the flow table. If no match is found, the switch
    will contact the controller to update the flow table with entries that allow the
    packet to reach its destination. In the forensic network, medium access control
    source and destination address, ethernet type, Internet protocol source–destination
    address are packet meta information, and matching fields are used to match this
    information. In the flow entry verification, flow entry installation is the critical
    role, and time for flow entry verification is considered based on every task relative
    flow entry verification. Then there are two modes of flow entries installation
    as reactive and proactive mode. In case, the occurrences of failure or change
    of flow table rules, the flow table is to be updated. Then old flow entries need
    to be deleted, and new flow entries need to be installed. Apart from that, the
    flow entry update operation is complicated and takes a long delay due to the flow
    table reaching its highest capacity. Initially, the primary flow table stores
    flow entries with timeout calculated by the controller using flow entry knowledge.
    The secure cyber-forensic SDN environment is maintained through flow entry verification
    in a forensic 6G SDN. We assume that the running time of flow entries can vary.
    The flow table is relatively small when compared with the number of required flow
    rules. There are some performance and security issues in the flow tables, and
    majorly attackers may overwhelm the flow table with multiple Denial of Service
    (DoS) attacks. Also, legitimate flow entries will be refused by manipulating the
    controller.
  prefs: []
  type: TYPE_NORMAL
- en: Time consumption on switches of SDN is given by![$$T_S \, = \,n(t_{ID} \, +
    \,t_{TP} \, + \,t_{PN} \, + \,t_{PS} \, + \,t_{Fe} )$$](../images/517376_1_En_7_Chapter/517376_1_En_7_Chapter_TeX_Equ1.png)(1)
  prefs: []
  type: TYPE_NORMAL
- en: 3.2 Computation Time of Blockchain Network Layer Which SDN Controllers Work
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The SDN-forensic architecture does not specify the SDN controller's internal
    implementation, and it is the strategic control point in the 6G SDN-forensic network.
    The most fundamental building entity in the 6G-based SDN-forensic architecture,
    the control plane contains distributed software controllers which handle the communication
    through forensic network devices and application via open interfaces. SDN controllers
    play a significant role in the forensic network as clients of the blockchain,
    demonstrating excellent network scalability. Once SDN controllers install the
    flow in switches, associating network states are recorded. SDN controllers manage
    flow control to switches via southbound APIs and the application plane via northbound
    APIs. The SDN controller receives instructions and requirements from the SDN application
    layers as it is the logical entity of the SDN-forensic network and relays them
    to the networking components. The controller extracts forensic information once
    received from hardware devices and communication back to the SDN application plane,
    which contains virtual services including statistics and events. In the specific
    term, application layer requirements are translated by SDN controllers which underline
    data plane elements and provide necessary forensic information up to SDN applications.
    The network control logic is supported, and the application layer abstracted view
    is provided by the SDN control layer, which is referred to as the Network Operating
    System (NOS). Apart from that, it contains enough information to specify policies
    while hiding the implementation details of the forensic network architecture.
    The forensic network's infrastructure layer is associated with IoT devices with
    basic network functionality for handling and forwarding data packets based on
    decisions given by the SDN controller.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain technology solves the problems of consensus and synchronization of
    multiple distributed SDN controllers in the SDN-forensic network. Each controller
    gathers OpenFlow commands, and forensic messages are digitally signed with an
    authentication code to ensure integrity and authentication. Later, it issues a
    consensus to the third-party blockchain system. The access of validated and unvalidated
    blocks is verified by controllers and forwarded to blocks to the remaining controllers.
    There is a heavy workload in the forensic network, as many actions will be carried
    out at the same time. Therefore, forensic SDN controllers help to simplify network
    management and reduce the workload of configuration. However, controllers must
    make sure the information it receives is trustworthy. The SDN controller uses
    OpenFlow protocols to communicate with switches. The main purpose of the controller
    is for path calculation. Further individual users are submitting the messages,
    and controllers are identifying the packets at the initial stage. The message
    is formed as packet =  < *sourceIP, destinationIP, sourcePort, destinationPort,
    protocol* > in the absence of an existing flow rule. Controllers are responsible
    for managing the resources with fine-grained access by encrypting each resource
    with a set of related attributes. The data packets will reach the controller through
    switches and gateway. For each forensic data stored in the forensic database server,
    the SDN controller creates a block, distributes it over the blockchain network,
    and supports evidence collection. SDN implementations allow users to access network
    resources, deploy new rules, and manipulate network behavior by interacting with
    a control plane. There may be some abnormal behavior flowing between blockchain
    nodes and controllers. Then, it immediately blocks the attacking node, such as
    IoT devices with malicious traffic.
  prefs: []
  type: TYPE_NORMAL
- en: The SDN controller efficiently works and controls both physical and virtual
    switching in forensic architecture, as well as provides comprehensive network
    monitoring. However, the control plane is logically centralized and implemented
    as a physically distributed system. There are two types of controllers that can
    be used in software-defined networking, such as centralized and distributed. When
    distributed controllers are compared to centralized controllers, there are some
    advantages of centralized controllers such as scalability and high performance
    during the increment of demand requests. As the key component of a software-defined
    network is the control plane, it ensures smooth management and operation of the
    entire forensic network. The SDN single centralized controller offers network
    resilience and availability; however, it is likely to cause single-point failure.
    Therefore, distributed controllers are recommended for the forensic network rather
    than ensuring network resilience and availability. We consider that control logic
    solves the specific networking issues and adjusts the network policy's particular
    network policy and provides a facility to change the configuration on the SDN-forensic
    network. Multiple controllers are enabled in the forensic system's blockchain
    control network to communicate with each other and exchange forensic data over
    the network, and it is the distributed control configuration. Despite numerous
    attempts to standardize SDN protocols, there has not yet been any East–West API
    standard that remains every controller vendor's property. Additional protocols
    are not required at the datastore level of the SDN-forensic network; however,
    communication happens there. Therefore, the standardized communication interface
    provides more comprehensive interoperability between controllers in the SDN-forensic
    network. Simple high-level policies are allowed by the SDN-forensic network to
    modify the forensic network as the device level dependency is eliminated to some
    extent. The controller is designed as a single software console as it facilitates
    viewing the entire forensic network globally. The forensic SDN controllers introduce
    new functionality or programs. Nevertheless, it just places them in the centralized
    controller. There are various controllers with their pros and cons. In the 6G-based
    SDN-forensic network, we develop a model based on distributed controllers as it
    brings fruitful results for the forensic requirements. On the other hand, the
    control plane contains the server as it is the distributed SDN, and it performs
    the controller's task.
  prefs: []
  type: TYPE_NORMAL
- en: Logical functionalities are implemented on controllers as it is the brain of
    the SDN-forensic network architecture. Forensic SDN controllers perform various
    tasks that are really based on forensic investigation. They build flow entries
    inside the routing devices and keep track of forensic data packets. The flow table
    is similar to the routing table as flow entries are stored in the SDN controller
    flow tables. Matching rules, action, and counter are three portions of the flow
    table. Matching rules include the set of various fields of header portions such
    as source IP and destination IP. Then, action compromises of operations that perform
    on the packet processing include packet forwarding to its destination port, packet
    dropping, and more. Each packet's default action is forward to the controller
    as the switch does not contain the entry for the relevant flow. Therefore, packets
    are passed toward the controller. Then controllers begin the packet processing
    task once it is done and send them back to the switches along with the flow entries.
    The forensic information which is passed through the network can be grouped based
    on flow, table, port basis. The controller decided to flow rules in the switch
    forwarding table. As previously mentioned OpenFlow is the most widely deployed
    southbound standard from the open-source community. The event-based messages are
    generated by the OpenFlow controller when it is needed.
  prefs: []
  type: TYPE_NORMAL
- en: '***(1) Time for Packet Identification (t***[***PP***]***).***'
  prefs: []
  type: TYPE_NORMAL
- en: 'The controller''s first step is packet identification, which dynamically monitors
    the packets from devices by packet parser as the forensic data is transmitted
    along with the network as packets. At the same time, several packets reach the
    control plane, and controllers will look at the destination address in the header
    and compare it to their lookup table to find out where to send the packet. There
    are two phases in jacket identification: identifying fragmented packets and identifying
    when the sender transmits individual packets. The Control plane combines the identification
    with the source address to identify a packet uniquely and uses these unique identifiers
    to reassemble data from packets. However, the IP ID value is specific to each
    packet, not specific for the entire forensic network. Although data packets get
    fragmented for packet identification, the IP ID number is the same for all. It
    is easy to identify switching loops in the forensic network due to the same IP
    IDs’ in the same packet capture.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fragmentations travel to their destination and where they are reassembled.
    The packet identification is a 16-bit value used to identify all fragments of
    a data packet, allowing the destination host to perform packet reassembly. However,
    In the packet transmission, some packets were dropped, and the IP packet identification
    numbers facilitated the identification of which packet was dropped. Each packet
    contains the same attributes: header, payload, and trailer. The packet includes
    Flow_Mod, Packet_In, Stats_Reply, and other necessary packet features, and we
    assume that many packets with various sizes are exchanged in the SDN-cyber-forensic
    network, and the running time varies depending on the packet length.'
  prefs: []
  type: TYPE_NORMAL
- en: '***(2) Time for Manipulating Flow Tables of the Switch (t***[***MF***]***).***'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is essential to manipulate the flow table at the SDN switch effectively.
    Flow information is stored and managed by the flow entry unit in the flow table.
    OpenFlow switches have flow tables and packet-forwarding information that they
    obtain from a controller, and the controller in software-defined networking manipulates
    these flow tables. There are two types of flow tables that are used in switches
    as hash-based flow tables and wildcard-based flow tables. The hash-based flow
    table requires a large memory capacity while the wildcard-based flow table utilizes
    wildcards to store large amounts of flow information in small memory. Although
    the flow entry search speed is fast in hash-based flow, entry searching speed
    is slow in wildcard-based flow tables. Therefore, each type of flow table has
    its own processing time and processing speed to manipulate in its own way. The
    controller is responsible for maintaining the cybersecurity forensic network state
    in real time. Typically, a flow table is populated with rules or policies ex:
    quality of service (QoS), access control lists (ACLs), and IP route tables for
    fast-forwarding. We can identify the two various occurrences where this operation
    is done. The first one is reactive as the controller receives a packet from the
    switch, and the second one is proactive according to the implementation of the
    OpenFlow controller. Manipulating flow tables is compulsory because it writes
    legitimate flow entries.'
  prefs: []
  type: TYPE_NORMAL
- en: '***(3) Time for Creating Binary Backups (t***[***CB***]***).***'
  prefs: []
  type: TYPE_NORMAL
- en: Original data considered as binary backups, therefore, are not used in the analysis
    phase, whereas secondary data is used. In the software-defined forensic network,
    binary backups create guesswork and complication in the process. The binary images
    are used due to the reason that they are the replica of the original data. SDN-forensic
    network consults the backup controller only when there is a suspicious attack
    on its primary controller. There is a possibility of missing important data in
    standard backups, and hence binary backups are used to avoid this issue. Backup
    data stores ensure that each master controller has a view of the whole network.
    These data stores can save the forensic network state during the failure time.
    The backup controllers guarantee the resilience of the control plane with minimum
    cost. Software-defined backups automate backup and restore while enabling the
    ability to perform restore independently and on-demand. We consider the software-defined
    backup environment as it requires individual deployment, configuration, monitoring,
    and provisioning. We assume that the time is different for each backup due to
    the size of the original data file. It takes a very long time for and restoring
    backups for a large database and that could make forensic backups useless.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a possibility that the backup path may fail before the primary path
    due to dynamic network updates. Therefore, when the link fails, the proactively
    configured route will not be available to route packets on the alternate path.
    Furthermore, the binary backups may fail earlier than the binary images. As a
    result of this, the performance is affected, because the incoming data packets
    are matched with the flow rules, because of the redundancy of backup flow entries.
    Apart from that, the Backup algorithm is running and uses fewer processing cycles
    on dedicated controllers, and more parallel backups can be taken, more often.
    Creating binary backups is not a simple task. Some steps need to be followed to
    complete the creating binary backups: configure forensic data file, configure
    sender processes, configure authentication, and create backups. As we see, the
    whole process of creating binary backups is more complicated.'
  prefs: []
  type: TYPE_NORMAL
- en: '***(4) Time for Adding Block (t***[***AB***]***).***'
  prefs: []
  type: TYPE_NORMAL
- en: All nodes in the forensic blockchain network are involved in the verification
    of freshly mined blocks. In simple terms, block time is a measure of the time
    it takes to produce a new blockchain network block. Similarly, new forensic data
    needs to be added into the 6G-based SDN-forensic blockchain for the investigation
    decision process as new forensic information is found in a timely manner. It's
    basically the amount of time it takes a blockchain miner to find a hash solution,
    which is a random string of characters associated with a block. However, the exact
    time to mine the next block is unknown. The actual amount of time it takes to
    create the block varies depending on the difficulty of hashing. Thus, block time
    is the average time it takes a miner to solve a math puzzle and build a blockchain
    block. Therefore, a newly mined block is added to the forensic blockchain based
    on a consensus algorithm, and it becomes publicly available for anyone to view.
    The new transaction means a new block that contains transactions and miners validate
    new transactions. The last block is mined every 10 min, thus adding these transactions
    to the blockchain. Then transactions become part of a block. Thereby new blocks
    allow the new owners, and the blocks are considered as confirmed.
  prefs: []
  type: TYPE_NORMAL
- en: Any new transaction added to the blockchain will change the state of the ledger.
    New transactions are constantly processed by the miners in new blocks added to
    the end of the chain. However, each block contains its current time. We identify
    seven steps for adding new blocks into the blockchain as transaction data, chaining
    the blocks, creating hash signatures, and deciding whether a person can sign the
    block once the signature is qualified, making the blockchain immutable, governing
    blockchain, and determining rules. The time is considered based on all the steps.
    In simple terms, whenever any new block is added to the blockchain, numerous nodes
    within the same blockchain implementation are required to execute algorithms to
    evaluate, verify, and process the blockchain block's history. It's common for
    any blockchain network to include SDN-forensic blockchain. If most of the nodes
    authenticate the blockchain record and signature, the new block of blockchain
    transactions will be accepted into the ledger, and the new block containing the
    data is added to the blockchain. Each blockchain block consists of certain forensic
    data in the forensic network, the block hash, and the hash from the previous block.
  prefs: []
  type: TYPE_NORMAL
- en: From a cybersecurity perspective, there is an additional level of assurance
    that the forensic data block is authentic and has not been tampered with. Then,
    the time for adding blocks increases with the number of IoT devices. The validity
    of the blocks plays a major role in the cybersecurity forensic network. All the
    forensic network nodes will check the mined block and add them to the blockchain
    if it follows the rules stated by the consensus mechanism. The SDN-forensic network
    simply rejects an invalid block. During the normal operation of the SDN-forensic
    network, authorized users pay attention to the data logs and periodically check
    the forensic data blocks’ status to ensure the performance of the blockchain network.
    A blockchain-based log system confirms the forensic network's security as it avoids
    log tampering by sealing the forensic logs cryptographically. Thus, adding the
    data logs to a hierarchical ledger, hence, provides an immutable platform for
    data log storage.
  prefs: []
  type: TYPE_NORMAL
- en: '***(5) Time for Feature Analyzing (t***[***FA***]***).***'
  prefs: []
  type: TYPE_NORMAL
- en: Forensic data packets are used in forensic investigations after being captured,
    stored, and processed efficiently and provide admissible evidence against a suspect
    in a court case. In the SDN-forensic network, packet analysis is a primary traceback
    technique. It provides sufficiently detailed packet details and playback even
    the entire network traffic for a particular point in time. The purposes of feature
    analysis in the forensic network are finding traces of nefarious online behavior,
    unauthorized user access, data breaches, malware infection, intrusion attempts,
    reconstructing forensic data files, etc. Network devices communicate using protocols.
    These protocols establish connections, and format rules and conventions for data
    transfer in the forensic network. Packet analyzers do packet feature analysis.
    These software tools intercept and log network traffic over a digital network
    or part of a network through packet capture. The utilization of packet feature
    analysis to its full potential relies on full packet capture,
  prefs: []
  type: TYPE_NORMAL
- en: We identify the message features such as *source_port_number, source_IP, destination_port_number,
    destination_IP, header_length, protocol, time_to_live,* and *service_type.* Each
    packet feature is analyzed with proper evidence, and the feature analysis of messages
    is performed by running the algorithm providing the final output. In practice,
    time consumption may not be performed by an individual feature, where all features
    need to get the total duration of feature extraction.
  prefs: []
  type: TYPE_NORMAL
- en: Features are extracted by a feature analyzer and therefore, no difference between
    feature extraction and feature analyzing. A feature extraction algorithm does
    feature analysis. We identify two stages of feature extraction as primary feature
    extraction and secondary feature extraction. In the primary stage, the subset
    of features is extracted from the dataset having the highest percentage of the
    target population. Features that can differentiate the target and nested classes
    are added to the subset of features in the secondary stage. Similarly, feature
    extraction is an essential component in the forensic network's anomaly detection,
    summarizing network behavior from a packet stream. Forensic data gathering in
    high-speed links is a complex process, and therefore existing techniques analyze
    a small number of packet features and limit their effectiveness. More forensic
    information is available once the feature extraction is done at the packet level.
    Besides, a single packet does not offer much information at the packet payload.
  prefs: []
  type: TYPE_NORMAL
- en: '***(6) Time for Signature Validation (t***[***SV***]***).***'
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm is running for signature validation and for the computation of
    network paths and slices. The algorithm runs linearly making all steps to submit
    at each entry. If user input matches with the system, the signature becomes valid
    and allows the user. The logger needs to have a keypair as the private key is
    used to encrypt the forensic data, and the public key is used for decryption.
    There are several steps in the signature validation phase, such as creating digital
    signatures, signing forensic messages with private keys, and verifying the forensic
    message with a public key. These steps took a considerable amount of time to proceed.
    At this stage, the cryptographic value of the signature is checked using signature
    verification data. Signature validity is determined by validating the authenticity
    of the signature's digital ID certificate status and document integrity.
  prefs: []
  type: TYPE_NORMAL
- en: Authenticity verification confirms that the signer's certificate or its original
    certificates are in the validator's trusted identities list. Thus, it confirms
    the signing document's validity based on the user's Acrobat and Reader configuration.
    The document integrity check confirms whether the signed content has changed after
    it was signed. If the content changes, a document integrity check confirms whether
    the content has changed in the way the signer allows. There is a signature panel
    that displays information about each digital signature in the forensic document.
    Each digital signature contains an icon to identify the verification status. Verification
    details are listed in each signature and can be viewed by expanding the signature.
    The signature panel provides information about the signed time and the signer's
    details. Similarly, a digital signature verifies the integrity of a forensic data
    file, and it is non-repudiation. The reason is to use the digital signature in
    the 6G-based SDN-forensic network as it can well adapt to its characteristics
    in the blockchain system. It will be more secure, applicable, and has the potential
    to increase value.
  prefs: []
  type: TYPE_NORMAL
- en: '***(7) Time for Packet Classification (t***[***PC***]***).***'
  prefs: []
  type: TYPE_NORMAL
- en: Packet classification is the process of categorizing packets into flows. In
    the SDN-forensic network, all packets go to the same destination equally. Packets
    are classified based on their headers, and they are classified into flows that
    are searched in flow tables. However, providing premium services to different
    users based on their quality requirements has become an issue that requires more
    requirements. All packets belonging to the same flow obey predefined rules and
    are similarly processed by the switch. For this, routers should be capable of
    distinguishing and isolating traffic belonging to different flows. This ability
    to determine packet flow is called packet classification. The forensic network
    uses an algorithmic solution for packet classification as it provides a deterministic
    performance, support for dynamic updates, and added flexibility for the forensic
    network as it takes advantage of the availability of cheap.
  prefs: []
  type: TYPE_NORMAL
- en: 'The forensic network''s key task is to run an algorithm for packet classification
    and handle large databases of classification rules. The primary task of routers
    is to forward packets from the input links to the appropriate output links. As
    packet classification arose out of the router''s need to classify traffic into
    various streams, the longest-running prefix matching techniques used in routing
    lookup tables formed the origin of packet classification techniques. The packet
    classification searches in a rules table for the highest priority rule or set
    of rules that match the packet. Packet classification is necessary to facilitate
    packet filtering for security reasons - firewall, packet delivery within specified
    delay limits (QoS), enabling premium services, policy-based routing, traffic and
    policing rate limitation, traffic shaping, and billing. Also, packet classification
    supports high network throughput in the forensic network. Packets are discriminated
    against, and many differentiated functionalities are enabled by packet classification.
    There are five tuples from packet headers used for classification: the protocol,
    destination and source ports, and source and destination addresses. There are
    two main metrics for packet classification that are speed in-memory access and
    memory. Packets are classified by source, destination ports, address, and protocol
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: Usually, packet classification is applied in the forwarding plane; however,
    we assume this process is applied in the controller plane due to its complexity,
    and blockchain is running on the controller network. At this stage, the context
    of the packets is identified, and important actions are performed. Some actions
    identified at this phase are dropping unauthorized packets, scoping, scheduling,
    prioritizing, and encrypting secure packets. We identify packet classification
    attributes such as user-identity, *devise_source_IP, destination_IP, time, location,*
    and *action*. The controller enables the communication of user authentication.
    However, the device which produces fake identity misleads the network resulting
    in the high-level packet feature complexity. Changes in packet attributes can
    cause a significant amount of time consumption.
  prefs: []
  type: TYPE_NORMAL
- en: '***(8) Time for Storing Records (t***[***R***]***).***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Record storing and report generating are an essential part of the forensic
    software-defined network. All forensic records should be considered the evidence
    and should be fully accountable in the chain of custody. Likewise, documenting
    samples is vital, from the first point of entry into the investigation. Once the
    investigation agent uses the forensic data for his decision-making process, then
    transfer the updated forensic information and generate a report at this stage.
    Once forensic users do the modification for investigation purposes, the evidence
    is sent to either database or generated reports. In this stage, some objectives
    need to be achieved: ensure confidentiality and integrity of forensic evidence
    during its modification and storage time, ensure the evidence is collected from
    a secure system, and compute a non-repudiated proof of the existence of the forensic
    evidence.'
  prefs: []
  type: TYPE_NORMAL
- en: Each record takes a specific time period for its own processing. The logger
    generates evidence log events and at the time, newly updated evidence materials
    with forensic results being inserted into the data log. The final output of the
    6G-based SDN-forensic network is producing forensic reports, and we consider them
    as data or evidence logs. The time complexity of report generation is high when
    volumes of data increase with more complex requests. The total computation time
    on the controllers during the forensic cycle is given by:![$$T_C \, = \,n{\text{
    }}(t_{PP} \, + \,t_{MF} \, + \,t_{CB} \, + \,t_{AB} \, + \,t_{FA} \, + \,t_{SV}
    \, + \,t_{PC} \, + \,t_R )$$](../images/517376_1_En_7_Chapter/517376_1_En_7_Chapter_TeX_Equ2.png)(2)We
    estimate the computational time of controllers and switches considered to be the
    best method to adopt in this investigation. Equations ([1](#Equ1)) and ([2](#Equ2))
    are obtained at processing times, where the total time consumption on the switch
    is *T*[*S*], and the total time consumption of controllers is *T*[*C*]. Therefore,
    the total computation time on SDN-forensics architecture in a cybersecurity blockchain
    6G-based IoT environment, *T*[*FSDN*] = *CT*[*S*] + C*T*[*C,*] is given by.![$$\begin{gathered}
    T_{FSDN} \, = \,n{\text{ }}(t_{ID} \, + \,t_{TP} \, + \,t_{PN} \, + \,t_{PS} \,
    + \,t_{Fe} )_ + \hfill \\ n{\text{ }}(t_{PP} \, + \,t_{MF} \, + \,t_{AB} \, +
    \,t_{CB} \, + \,t_{FA} \, + \,t_{SV} \, + \,t_{PC} \, + \,t_R ) \hfill \\ \end{gathered}$$](../images/517376_1_En_7_Chapter/517376_1_En_7_Chapter_TeX_Equ3.png)(3)
  prefs: []
  type: TYPE_NORMAL
- en: 4 Simulation Results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 4.1 Simulation Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A detailed comparative study is presented on the following metrics: computation
    time on the data plane, computation time on the control plane associated with
    blockchain, and total time consumption in the forensic network. These parameters
    are significant for validating the achievements of the SDN-forensics in the cybersecurity
    blockchain-based IoT environment.'
  prefs: []
  type: TYPE_NORMAL
- en: All parameter values used in our time estimation (for both simulation and the
    analysis) are listed in Table [1](#Tab1). Since our results are based on IoT device
    parameters, they are expected to estimate the real computational time on SDN-forensic
    architecture in a cybersecurity blockchain-based IoT environment. In our simulation,
    we consider the SDN-forensic network with *n* = 500 number of IoT devices. Consider
    our developed model as the square {(0,110), (100,115), (200,117), (300,118), (400,119),
    (450,120)} as in [[6](#CR6)]. We generate 500 random setups. Initially, OpenFlow
    switches are randomly placed to provide consistency in traffic management and
    engineering, by making the control function independent of the hardware it’s intended
    to control. The FS.COM switch product line consists of 100GbE switch (100G L2/L3
    Switch Loaded with ICOS, 48*25GbE ports + 6*100GbE ports) and supports OpenFlow
    1.3, which can be used as OpenFlow switches in the open networking environment.
    We generate 500 random setups, each with the following simulation setting. Therefore,
    each simulation data point is obtained by averaging over 500 random setups. We
    assume that the total number of nodes in the entire network ***n*** is 500, and
    each node reports data once every millisecond.
  prefs: []
  type: TYPE_NORMAL
- en: The results and analysis in this study are performed using MATLAB (MathWorks
    Inc., Natick, MA, USA) R20202b on a computer with macOS High Catalina with Processor
    2 GHz Quad-Core Intel Core i5 and RAM (Random Access Memory) 16 GB 3733 MHz LPDDR4X.
  prefs: []
  type: TYPE_NORMAL
- en: Table 1
  prefs: []
  type: TYPE_NORMAL
- en: Simulation parameter values
  prefs: []
  type: TYPE_NORMAL
- en: '| Symbol | Description | Value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| *T*[*S*] | Total time consumption of switches | – |'
  prefs: []
  type: TYPE_TB
- en: '| *t*[*ID*] | Time for IoT device initialization | 0.02 ms [[2](#CR2)] |'
  prefs: []
  type: TYPE_TB
- en: '| *t*[*TP*] | Time for traffic processing | 4 ms [[6](#CR6)] |'
  prefs: []
  type: TYPE_TB
- en: '| *t*[*PN*] | Time for port number validation | 2 ms |'
  prefs: []
  type: TYPE_TB
- en: '| *t*[*PS*] | Time for packet priority scheduling | 3 ms [[7](#CR7)] |'
  prefs: []
  type: TYPE_TB
- en: '| *t*[*Fe*] | Time for flow entries verification | 0.5 ms [[8](#CR8)] |'
  prefs: []
  type: TYPE_TB
- en: '| *T*[*c*] | Total time consumption of controllers | – |'
  prefs: []
  type: TYPE_TB
- en: '| *t*[*PP*] | Time for packet identification | 0.135 ms [[9](#CR9)] |'
  prefs: []
  type: TYPE_TB
- en: '| *t*[*MF*] | Time for manipulating flow tables | 0.4 ms [[10](#CR10)] |'
  prefs: []
  type: TYPE_TB
- en: '| *t*[*CB*] | Time for creating backups | 1 ms [[11](#CR11)] |'
  prefs: []
  type: TYPE_TB
- en: '| *t*[*AB*] | Time for adding up block | 2.85 ms |'
  prefs: []
  type: TYPE_TB
- en: '| *t*[*SV*] | Time for signature validation | 100 ms [[12](#CR12)] |'
  prefs: []
  type: TYPE_TB
- en: '| *t*[*PC*] | Time for packet classification | 0.0004 ms [[1](#CR1)] |'
  prefs: []
  type: TYPE_TB
- en: '| *t*[*R*] | Time for storing records | 0.02 ms |'
  prefs: []
  type: TYPE_TB
- en: We assume that ***t***[***ID***] is not a constant value because each device
    has its own capabilities. There are four major categories of capabilities including
    transducer capabilities, data capabilities, interface capabilities, and supporting
    capabilities. Transducer capabilities include sensing, actuating, and data capabilities
    include data processing, data storing, application capabilities include application
    interface, human user interface, network interface, supporting capabilities, device
    management, cybersecurity capabilities, privacy capabilities. However, the initial
    stage of the SDN-forensic network is the device initialization. Therefore, total
    time consumption corresponds to IoT devices. The time consumption on switches
    is based on the IoT device initialization and traffic processing because IoT devices
    contain unique identifiers that provide fast access to the network. However, artificial
    intelligence and machine learning of IoT devices are making the process easier
    and more dynamic. A firewall is configured not to allow devices with unwanted
    traffic except ***T***[***V***], ***T***[***f***], and ***T***[***h***], and time
    for traffic processing increases in the natural order to the number of IoT devices.
    In the switches, the ***t***[***TP***], ***t***[***PN***], and ***t***[***Fe***]
    have a mutual connection. Therefore, the time consumption of port number validation
    and flow entry verification is high in accordance with IoT device initialization.
  prefs: []
  type: TYPE_NORMAL
- en: We consider the time consumption of packet identification is usually high due
    to the variation of packet size. Every packet needs to be monitored to filter
    the malicious traffic at the beginning. While processing a packet, switches may
    check for bit-level errors in the packet that occurred during transmission and
    determine where the packet's next destination is. When the packet identification
    time is high, the time consumption of packet processing is high. Thus, we identify
    the packet processing delay as a constant delay that faces the source and destination.
    The turnaround time of flow table manipulation is related to the speed at which
    the controller handles packet in, we assume it takes a considerable amount of
    time to proceed. In order, ***t***[***CB***], ***t***[***AB***], ***t***[***FA***],
    ***t***[***SV***], ***t***[***PC***], and ***t***[***R***] increases in accordance
    with ***t***[***PP***]. Further analysis of Fig. [5](#Fig5) shows that regardless
    of the number of IoT devices, the total time consumption on the SDN-forensic network
    of 6G environment is high when the time consumption of controllers increases in
    the natural order to time consumption of switches. Therefore, it is interesting
    to note that *CT*[*S*] < C*T*[*C*] and ***T***[***FSDN***] are high (Table [2](#Tab2)).![](../images/517376_1_En_7_Chapter/517376_1_En_7_Fig5_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: A graph is drawn where the x-axis represents the number of IoT devices, whereas
    the y-axis represents time consumption (ms). Switches are on the blue line, and
    controllers are on a green line. The Red line gives the total.
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 5
  prefs: []
  type: TYPE_NORMAL
- en: The total time consumption corresponding to the number of IoT devices on SDN-forensic
    architecture. Here we consider n=500 number of IoT devices. This shows the time
    difference between the switches operation and controllers operation has a significant
    effect on the SDN-forensic networks total computation time
  prefs: []
  type: TYPE_NORMAL
- en: Table 2
  prefs: []
  type: TYPE_NORMAL
- en: Time consumption in ms
  prefs: []
  type: TYPE_NORMAL
- en: '| Number ofIoT devices | Switches(ms) | Controllers(ms) | Total(ms) |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 7.7 | 102 | 109 |'
  prefs: []
  type: TYPE_TB
- en: '| 50 | 395.8 | 5180 | 5576 |'
  prefs: []
  type: TYPE_TB
- en: '| 100 | 786.4 | 10,264 | 11,051 |'
  prefs: []
  type: TYPE_TB
- en: '| 150 | 1206.7 | 15,347 | 16,554 |'
  prefs: []
  type: TYPE_TB
- en: '| 200 | 1654.0 | 20,430 | 22,084 |'
  prefs: []
  type: TYPE_TB
- en: '| 250 | 2211.9 | 25,518 | 27,729 |'
  prefs: []
  type: TYPE_TB
- en: '| 300 | 2697.2 | 30,602 | 33,299 |'
  prefs: []
  type: TYPE_TB
- en: '| 350 | 3162.6 | 35,715 | 38,878 |'
  prefs: []
  type: TYPE_TB
- en: '| 400 | 3754.3 | 40,805 | 44,559 |'
  prefs: []
  type: TYPE_TB
- en: '| 450 | 4287.6 | 45,902 | 50,189 |'
  prefs: []
  type: TYPE_TB
- en: For our simulation, we consider the increase in the number of IoT devices. Note
    that we should examine controllers because the amount of data transmitted to controllers
    increases and then, it is a challenge in the IoT environment. The time consumption
    on switches slowly increases, and therefore, we do not consider switches. As in
    our simulation, the time consumption increment of controllers is high. As a result
    of this, expanding the network then impacts the latency. Network latency is referred
    to as block time, and this is the most crucial factor affecting the overall performance
    of the 6G-based SDN-forensic network. Latency is a big issue in the real world.
    The reason is latency drives the responsiveness of the network. Therefore, in
    the forensic network, latency becomes a particular problem.
  prefs: []
  type: TYPE_NORMAL
- en: Network latency, scalability, bandwidth, and throughput are all interrelated
    components of the SDN-forensic network. However, they all measure different things.
    There are many IoT devices that need to reach a consensus for a transaction to
    be verified. The forensic network does not allow any number of data packets at
    the same time. It has a maximum amount of data that can pass through the network
    in the given time. It is the way bandwidth integrates with the 6G-based SDN-forensic
    network. Thus, there is an average amount of data that passes through over the
    network, and it's the throughput of the forensic network. According to our results,
    throughput is not equivalent to bandwidth, because latency affects it. Each node
    requires access to the entire forensic blockchain. Therefore, it takes a long
    time for a data packet to be sent to the forensic network's destination. Therefore,
    it has a high latency network connection. In the data packet transmission, time
    is the major constraint that causes latency. When data packets get delayed traveling
    to their destination, the entire network process gets delayed. Latency and scalability
    are the primary aspects of the SDN-forensic architecture of the 6G network. Network
    latency impacts the forensic network's scalability, and therefore, controllers
    are unable to grab many packets. Thus, poor scalability can result in poor network
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: This latency is a specifically sensitive issue. However, the forensic network
    will lead to poor quality, if not handled properly. Network latency heavily influences
    the SDN-forensic network. Also, controllers find it hard to tolerate several IoT
    devices and amounts of data. Therefore, forensic network processing time is increased.
    In simple terms, in the SDN-forensic-based processing delay impacts the entire
    network progress. Less scalability of the forensic network is not capable of performing
    gracefully, as the offered traffic decreases. The poor scalable forensic network
    repeatedly engages in a wasteful activity, and therefore, it cannot fully take
    advantage due to latency and scalability issues. In consequence, it can have a
    huge impact on final throughput.
  prefs: []
  type: TYPE_NORMAL
- en: Providing access to the entire blockchain network to hundreds of nodes also
    increases the computation time. We cannot ignore computation time as it has an
    insignificant high-level time consumption. However, in the 6G SDN-forensic network
    computation time is quite large, especially where controllers are performing complex
    encryption algorithms. In the controller's process, data packets are examined
    for their security which can cause substantial delays in some other steps in the
    controllers’ process. Another point of view, although the switches process has
    less time consumption than controllers, we cannot decide that the switches process
    does not have a delay. OpenFlow switches in the forensic network perform network
    address translation, and there are higher than average processing delays due to
    switches examining and modifying both incoming and outgoing packets. The forensic
    network's scalability issue will be the major drawback of the SDN-forensic network
    as the scalability has a growing demand, which is crucial to the long-term success
    of the forensic network.
  prefs: []
  type: TYPE_NORMAL
- en: We can apply the observation of this analysis in a real-world scenario. The
    IoT applications such as vehicular ad-hoc networks and SDN-based 6G network models,
    where the computation time estimation is essential. These systems require reliable
    data transmission. Therefore, computation time estimation is a crucial part of
    these systems, ensuring the time complexity to improve the throughput. Finally,
    the topic of interest may benefit the vital topic of SDN-based IoT as well as
    blockchain. Integrating a blockchain with fog computing and IoT to store and compute
    data at the edge hubs, associated with the off-chain system, may answer scalability
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: To a certain extent, sharding is a prominent solution [[13](#CR13)–[16](#CR16)]
    for making transaction verification in parallel rather than linearly.
  prefs: []
  type: TYPE_NORMAL
- en: 5 Future Directions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: However, more research on this topic needs to be undertaken before the association
    between switches and controllers is more clearly understood.
  prefs: []
  type: TYPE_NORMAL
- en: '***Enhancing for forwarding plane***'
  prefs: []
  type: TYPE_NORMAL
- en: As the SDN is improved, the control plane becomes more flexible and scalable
    with new Open-Flow apps. The processing power of software-based controllers can
    be improved through parallel processing or installing a powerful server's controller.
  prefs: []
  type: TYPE_NORMAL
- en: '***Improving manageability***'
  prefs: []
  type: TYPE_NORMAL
- en: Improving network management using software-defined networks explores the advantage
    of the software-defined network, simplifying network policy management, in high-
    evel language, that provides expression and flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: '***Languages for Software-Defined Network***'
  prefs: []
  type: TYPE_NORMAL
- en: High-level abstractions investigate the high-level programming abstractions
    that need to simplify the creation of SDN applications.
  prefs: []
  type: TYPE_NORMAL
- en: '***SDN Platform for Cloud Network Services***'
  prefs: []
  type: TYPE_NORMAL
- en: The SDN platform explores the SDN application to enable application-level abstractions
    to communicate in cloud environments.
  prefs: []
  type: TYPE_NORMAL
- en: '***Routing and service convergence using SDN***'
  prefs: []
  type: TYPE_NORMAL
- en: The major challenges for operators in the near future pertain to providing convergent,
    dynamic, and adaptive networks in the context of a multi-services, multi-protocols,
    and multi-technology environment.
  prefs: []
  type: TYPE_NORMAL
- en: '***Prototype testbed to implement SDN features***'
  prefs: []
  type: TYPE_NORMAL
- en: The 6G-based SDN's various features, such as a controller node provides responsibility
    for collecting routing information and making routing decisions centrally. The
    SDN data plane will be the hypervisor (compute node) in the prototype model and
    the Software-Defined Networking functionality in a private cloud built using OpenStack.
  prefs: []
  type: TYPE_NORMAL
- en: '***Energy-efficient edge computing model***'
  prefs: []
  type: TYPE_NORMAL
- en: Develop an energy-efficient edge computing model using SDN, NFV, and blockchain
    technology to mitigate or prevent end-to-end delay, network bandwidth, other network
    vulnerabilities, and various passive and active network attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 6 Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We developed a model to estimate the computational time on the SDN-forensics
    architecture with cybersecurity through a 6G network that works in the blockchain-based
    IoT environment. Our study presented results to demonstrate the effectiveness
    of the model. We modeled the computation process and time estimation. We have
    concluded that the total time consumption on the 6G SDN-forensic network increases
    with the time consumption of controllers and the time consumption on switches
    regardless of the number of IoT devices used. On the other hand, time consumption
    is higher in controllers than switches, and time consumption increment is higher
    in controllers than switches. Therefore, our study enhanced the understanding
    of the computational time on 6G-based SDN-forensic architecture in a blockchain-based
    IoT environment. However, the current study was not specifically designed to evaluate
    the computational time estimation on SDN for each application. The current findings
    substantially add to our understanding of signature validation's time duration,
    which is not a standard step in all applications. This chapter also provided a
    time estimation for achieving efficient results, with all the essential factors
    that influence the life expectancy on SDN-forensics architecture in the cybersecurity
    blockchain-based IoT environment.
  prefs: []
  type: TYPE_NORMAL
