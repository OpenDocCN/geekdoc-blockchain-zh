- en: © The Author(s), under exclusive license to Springer Nature Switzerland AG 2021Y.
    Maleh et al. (eds.)Artificial Intelligence and Blockchain for Future Cybersecurity
    ApplicationsStudies in Big Data90[https://doi.org/10.1007/978-3-030-74575-2_8](https://doi.org/10.1007/978-3-030-74575-2_8)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 作者（根据 Springer Nature Switzerland AG 2021 授予的独家许可）Y. Maleh 等人（编）未来网络安全应用的人工智能和区块链大数据研究90[https://doi.org/10.1007/978-3-030-74575-2_8](https://doi.org/10.1007/978-3-030-74575-2_8)
- en: 'IFIFDroid: Important Features Identification Framework in Android Malware Detection'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IFIFDroid：Android 恶意软件检测中的重要特征识别框架
- en: 'Takia Islam^([1](#Aff7), [2](#Aff8), [3](#Aff9) [ ](#ContactOfAuthor1)), Sheikh Shah Mohammad Motiur Rahman^([2](#Aff8),
    [3](#Aff9) [ ](#ContactOfAuthor2)) and Md. Ismail Jabiullah^([1](#Aff7) [ ](#ContactOfAuthor3))(1)Department
    of Computer Science and Engineering, Daffodil International University, Dhaka,
    Bangladesh(2)Department of Software Engineering, Daffodil International University,
    Dhaka, Bangladesh(3)nFuture Research Lab, Dhaka, BangladeshTakia Islam (Corresponding
    author)Email: [takia35-1014@diu.edu.bd](mailto:takia35-1014@diu.edu.bd)Sheikh Shah Mohammad Motiur Rahman (Corresponding
    author)Email: [motiur.swe@diu.edu.bd](mailto:motiur.swe@diu.edu.bd)Md. Ismail JabiullahEmail:
    [drismail.cse@diu.edu.bd](mailto:drismail.cse@diu.edu.bd)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Takia Islam^([1](#Aff7)，[2](#Aff8)，[3](#Aff9) [ ](#ContactOfAuthor1))，Sheikh
    Shah Mohammad Motiur Rahman^([2](#Aff8)，[3](#Aff9) [ ](#ContactOfAuthor2)) 和 Md.
    Ismail Jabiullah^([1](#Aff7) [ ](#ContactOfAuthor3))（1）达福德国际大学计算机科学与工程系，孟加拉国达卡（2）达福德国际大学软件工程系，孟加拉国达卡（3）未来研究实验室，孟加拉国达卡Takia
    Islam（通讯作者）邮箱：[takia35-1014@diu.edu.bd](mailto:takia35-1014@diu.edu.bd)Sheikh
    Shah Mohammad Motiur Rahman（通讯作者）邮箱：[motiur.swe@diu.edu.bd](mailto:motiur.swe@diu.edu.bd)Md.
    Ismail Jabiullah 邮箱：[drismail.cse@diu.edu.bd](mailto:drismail.cse@diu.edu.bd)
- en: Abstract
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: Android Malware has grown dramatically day by day because of the rising trends
    of android operating based smartphones. It has become the main attraction point
    by attackers now-a-days. Thus, android malware detection has become a major field
    of investigation among the researchers and academicians who are working with in
    the field of cyber security. As there are lots of research works have done already,
    it is still major matter of concern to improve the anti-malware tools. In addition,
    during the development of anti-malware framework the features of android malware
    plays the major role. During this study, an important features identification
    and selection technique has been proposed named IFIFDroid and evaluated which
    is based on wrapper method. However, the proposed approach can minimize the number
    of features which helps to machine learning (ML) techniques to learn from less
    features but perform better. It’s found that IFIFDroid can ranking features based
    on the capacity of individual ML algorithms and comparatively provide better result
    than existing wrapper method. IFIFDroid proves that there is still way to improve
    the features selection scheme and provide a strong basement of minimizing the
    power, execution time during the training by ML algorithms. Though if there is
    less features to fit without losing accuracy then it will minimize the processing
    resources as well.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Android 恶意软件由于基于安卓操作系统的智能手机日益增长的趋势，已经急剧增长。它已成为攻击者现如今的主要吸引点。因此，Android 恶意软件检测已成为研究人员和学者关注的主要领域，他们致力于网络安全领域的研究。尽管已经有大量的研究工作，但改进防恶意软件工具仍然是一个主要关注点。此外，在开发反恶意软件框架期间，Android
    恶意软件的特征起着重要作用。在这项研究中，提出了一种名为 IFIFDroid 的重要特征识别和选择技术，并进行了评估，该技术基于包装方法。然而，所提出的方法可以减少特征数量，有助于机器学习（ML）技术从更少的特征中学习但表现更好。发现
    IFIFDroid 可以根据各个 ML 算法的能力对特征进行排名，并且相对于现有的包装方法提供更好的结果。IFIFDroid 证明了仍然有改进特征选择方案的方法，并且通过
    ML 算法的训练来最小化功耗、执行时间提供了强有力的基础。尽管如果有更少的特征可以适应而不损失准确性，那么它也会减少处理资源。
- en: KeywordsAndroid malware detectionFeatures ranking schemeAndroid malware analysisStatic
    analysis
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 关键词Android 恶意软件检测特征排名方案Android 恶意软件分析静态分析
- en: 1 Introduction
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1 引言
- en: The usage of mobile devices has been rapidly increasing day by day which is
    also getting attracted in terms of basic need for its end-user. One report mentioned
    that android which is a Linux kernel-based operating system (OS) developed by
    Google, was in the leading position with 82% of total mobile OS in 2016 [[1](#CR1)].
    Besides that, Android is dominating the mobile market with 85% of the share and
    has become top positioned in smartphone platforms in 2017 [[2](#CR2), [3](#CR3)]
    whereas 74% of the universal mobile OS market share is in August 2020 according
    to StatCounter [[4](#CR4)]. Even, Google play contains around 3 million applications
    that have more than 65 billion downloads [[5](#CR5)]. However, because of the
    vast popularity of android devices, they are being targeted by attackers. In some
    cases, android devices allow the installation of third-party apps from unknown
    sources which is also a possible risk to get attacked. In 2016, the rate of attacks
    in android increased to 40% of total attacks by attackers [[1](#CR1)]. In 2017,
    there was one claim that a total of 316 weaknesses they found on only android
    operating systems [[6](#CR6)]. The statistics from literature and various reports
    are clearly shown that the popularity of Android OS is growing to customers as
    well as to the attackers. Attackers are targeting android devices by spreading
    malware to users. Because of the peak trends of spreading android malwares, it’s
    been a gigantic area of concern among the information security researchers to
    detect and prevent the malwares in android devices.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备的使用量日益增长，对终端用户的基本需求也越来越受到关注。一份报告提到，安卓是一个由谷歌开发的基于 Linux 内核的操作系统（OS），在 2016
    年占据了总移动操作系统的 82% 的领先地位 [[1](#CR1)]。除此之外，安卓在移动市场占据着 85% 的份额，并且在 2017 年成为智能手机平台的首选
    [[2](#CR2), [3](#CR3)]，而根据 StatCounter 的数据，2020 年 8 月，全球移动操作系统市场份额达到了 74% [[4](#CR4)]。此外，谷歌商店包含了大约
    300 万款应用，下载量超过 650 亿次 [[5](#CR5)]。然而，由于安卓设备的广泛流行，它们成为了攻击者的目标。在某些情况下，安卓设备允许从未知来源安装第三方应用程序，这也是遭受攻击的可能风险之一。2016
    年，攻击者对安卓的攻击率占总攻击的 40% [[1](#CR1)]。2017 年，有一项报告称他们发现了仅仅在安卓操作系统上存在 316 个弱点 [[6](#CR6)]。从文献和各种报告中可以清楚地看出，安卓操作系统的普及度不仅对用户有吸引力，也对攻击者有吸引力。攻击者通过向用户传播恶意软件来攻击安卓设备。由于安卓恶意软件传播的高峰趋势，信息安全研究人员对检测和预防安卓设备中的恶意软件表示了巨大的关注。
- en: 'To perform a particular task on the device, for instance, sending a text message,
    each application has to request permission from the user during the installation.
    However, the majority number of users tend to blindly grant permissions to exotic
    applications and thereby undermine the purpose of the verification system. As
    a consequence, malicious applications are hardly enforced by the Android permission
    system in practice. Android malware detection technology can be divided into three
    categories: static detection, dynamic detection, and hybrid detection which are
    found from the state-of-art. Static detection is found on the analysis of defendant
    code without running the android application. That can obtain high system coverage
    but faces several countermeasures like code obfuscation and dynamic code loading.
    As an alternative, dynamic detection contains the analysis of the Android application
    by running the code. Those can prove compromises that are not easy to explore
    by static analysis, but the computational assets and time cost of dynamic disclosure
    are almost high. Hybrid detection is the approach that connects static detection
    and dynamic detection to obtain an equal between detection effectiveness and efficiency.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在设备上执行特定任务，例如发送短信，每个应用程序在安装过程中都必须向用户请求权限。然而，大多数用户倾向于盲目地授予外来应用程序权限，从而削弱了验证系统的目的。因此，恶意应用程序在实践中很难受到安卓权限系统的限制。安卓恶意软件检测技术可以分为三类：静态检测、动态检测和混合检测，这些都是从最新技术中发现的。静态检测是对未运行安卓应用程序的代码进行分析。这可以获得高系统覆盖率，但面临着诸如代码混淆和动态代码加载等多种对策。作为替代方案，动态检测包含了运行代码对安卓应用程序进行分析。这些可以证明通过静态分析难以探索的妥协，但动态披露的计算资源和时间成本几乎很高。混合检测是连接静态检测和动态检测的方法，以获得检测效果和效率的平衡。
- en: Machine learning concept is extensively applied in the detection of Android
    malware, even based on static, dynamic, or hybrid analysis approaches. The malware
    detection method which is based on reverse engineering means a classification
    of general static detection technology. The approach of reverses the implementation
    based on the semantic features of malicious applications. To decide whether the
    sample to be detected is a malicious application, it pairs by the specific properties
    of the recognized malicious applications.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习概念广泛应用于检测Android恶意软件，甚至基于静态、动态或混合分析方法。基于逆向工程的恶意软件检测方法意味着对一般静态检测技术的分类。该方法基于恶意应用程序的语义特征来逆向实现。要决定待检测样本是否是恶意应用程序，它需要与已识别的恶意应用程序的特定属性配对。
- en: 'Android malicious applications can execute similar malicious behaviour it called
    by the APIs [[7](#CR7)–[9](#CR9)]. It’s been identified that there are lots of
    research works have already done by world renowned researchers but with different
    features set where different features had influence on the learning base of different
    machine learning techniques. Thus, the following research questions are considered
    during this study:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Android恶意应用程序可以执行类似的恶意行为，称之为APIs [[7](#CR7)–[9](#CR9)]。已经发现世界知名研究人员已经进行了大量研究，但使用了不同的特征集，其中不同的特征对不同机器学习技术的学习基础产生了影响。因此，在本研究中考虑了以下研究问题：
- en: How can be identified the important features set from an android application
    for every specific machine learning technique?
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何从安卓应用程序中识别出对每种特定的机器学习技术都很重要的特征集？
- en: How much influence the features set has on any specific machine learning algorithms?
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特征集对任何特定机器学习算法有多大影响？
- en: How can make a uniform framework for identifying the features set in a random
    state as it has changed its ranking on every training phase for randomly picking
    the train set?
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何制定一个统一的框架来识别特征集中的特征，在每个训练阶段都会随机选择训练集，因此其排名会发生变化？
- en: 'However, the major contribution of this research project is proposed a uniform
    framework to identify important features set before training with machine learning
    techniques. The framework will help researchers or anti-malware system developers
    to obtain minimum set of features with maximum detection accuracy. The contributions
    also include the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这项研究项目的主要贡献是提出了一个统一的框架，在应用机器学习技术进行训练之前识别重要的特征集。该框架将帮助研究人员或反恶意软件系统开发人员获得最小的特征集和最大的检测准确度。贡献还包括以下内容：
- en: It’s been found that it is possible to minimize the features set to reach maximum
    accuracy of any model with minimum features training.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已经发现可以通过最小化特征集来使任何模型达到最大准确度，并且只需最少的特征进行训练。
- en: For producing or generating a model with machine learning algorithms needed
    more execution time and processing power. Thus, it also can be claimed that as
    the feature set is less than the learning will take less time and power.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了生成或生成一个具有机器学习算法的模型，需要更多的执行时间和处理能力。因此，也可以声称由于特征集少了，学习所需的时间和能力也会减少。
- en: The structure of this chapter is organized as follows. The background and related
    works are broadly described at Sect. [2](#Sec2). Section [3](#Sec3) represents
    the proposed framework and research methodology in details. In Sect. [4](#Sec11),
    evaluation parameters and the Machine Learning (ML) techniques which are used
    during the implementation and assessment are described. Experimental results and
    discussion of proposed approach are described with the evaluation of the proposed
    framework in Sect. [5](#Sec14). Finally, Sect. [6](#Sec15) concludes the chapter
    with and future directions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的结构如下所示。背景和相关工作在第[2](#Sec2)节中进行了广泛描述。第[3](#Sec3)节详细描述了所提出的框架和研究方法。在第[4](#Sec11)节中描述了评估参数和实施和评估过程中使用的机器学习（ML）技术。在第[5](#Sec14)节中描述了所提出方法的实验结果和讨论，评估了所提出框架的效果。最后，在第[6](#Sec15)节中总结了本章，并展望了未来的方向。
- en: 2 Background Study
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2 背景研究
- en: In this chapter, background study and related works will be discussed and broadly
    debated.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将讨论和广泛辩论背景研究和相关工作。
- en: Alzaylaee [[9](#CR9)] proposed a framework based on the deep learning algorithm
    named DL-Droid. They considered both dynamic and static features for developing
    their approach. The experiments with more than 30,000 android applications have
    been performed by them. They also used InfoGain feature ranking algorithm for
    selecting the important features. Their approach outperformed the combination
    of dynamic and static features (99.6% accuracy) whereas only the dynamic features
    provide 97.8% of accuracy. It is mentioned that they performed dynamic analysis
    using stateful input generation.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Alzaylaee [[9](#CR9)] 提出了一个基于深度学习算法 DL-Droid 的框架。他们考虑了动态和静态特征来开发他们的方法。他们对超过
    30,000 个安卓应用进行了实验。他们还使用了 InfoGain 特征排序算法来选择重要特征。他们的方法表现优于动态和静态特征的组合（准确率达到 99.6%），而仅使用动态特征的准确率为
    97.8%。据称，他们使用有状态输入生成进行了动态分析。
- en: Four malware detection methods based on entropy (PDME) and the FalDroid algorithms
    by using Hamming distance to find similarities between samples proposed by Tehari
    [[10](#CR10)]. They considered their experiments in a different type of features
    such as API, intent, and permission features on these three datasets. Based on
    three datasets, including benign and malware Android apps like Drebin, Contagio,
    and Genome have performed their experiments. The experiment outcomes ensure that
    their verification accuracy rates of proposed algorithms are more than 90% whereas
    in some cases, accuracy rates are above 99%.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Tehari 提出了基于熵（PDME）和 FalDroid 算法的四种恶意软件检测方法，使用汉明距离来找到样本之间的相似性。他们考虑了在三个数据集上对不同类型特征的实验，例如
    API、意图和权限特征。他们的实验基于包括 Drebin、Contagio 和 Genome 在内的三个数据集，这些数据集包含良性和恶意的安卓应用。实验结果确保了他们提出的算法的验证准确率超过
    90%，在某些情况下，准确率高达 99%以上 [[10](#CR10)]。
- en: Ma proposes a combination method for Android malware detection based on the
    machine learning algorithm and constructed by three detection models for Android
    malware detection concerning API calls, API frequency, and API sequence. They
    compared the accuracy and stability of their detection models through a large
    number of examinations and their experiment’s outcome acquired that high accuracy
    and clearness rate is 98.98% [[11](#CR11)].
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Ma 提出了一种基于机器学习算法的 Android 恶意软件检测的组合方法，并构建了三个检测模型，分别关注 API 调用、API 频率和 API 序列。他们通过大量检查比较了检测模型的准确性和稳定性，实验结果表明，高准确性和清晰度率达到了
    98.98% [[11](#CR11)]。
- en: An anti-malware system that uses customized learning models proposed by Amin
    which is based on End-to-End deep learning architectures. On that system, operational
    codes extracted from application attributes of android malware. They have selected
    to work with independent deep learning models leveraging sequence specialists
    like recurrent neural networks, Long Short-Term Memory networks, and its Bidirectional
    variation for static malware analysis on Android. A large number of datasets over
    1.8 million android applications show their report an accuracy of 0.999 and F1-score
    of 0.996 on whereas it can lead to better design of malware detectors [[12](#CR12)].
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Amin 提出了一种使用定制学习模型的反恶意软件系统，该系统基于端到端的深度学习架构。在该系统上，从安卓恶意软件的应用属性中提取了操作码。他们选择使用独立的深度学习模型，利用像循环神经网络、长短期记忆网络及其双向变体等序列专家进行安卓静态恶意软件分析。超过
    180 万个安卓应用的大量数据集显示，他们的报告准确率达到了 0.999，F1 分数达到了 0.996，可以带来更好的恶意软件检测器设计 [[12](#CR12)]。
- en: Another android malware detection tool is proposed by McLaughlin using the deep
    convolutional neural network (CNN) technique. The raw operational code sequences
    have been extracted from reverse engineering and counted as features during their
    study. They performed static analysis during the feature’s extraction. Though
    their primary goal was to scan numerous files quickly, they claimed their model
    to perform on large data with better accuracy [[13](#CR13)].
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: McLaughlin 使用深度卷积神经网络（CNN）技术提出了另一种安卓恶意软件检测工具。他们从反向工程中提取原始操作码序列，并在研究过程中将其计算为特征。他们在特征提取过程中进行了静态分析。尽管他们的主要目标是快速扫描大量文件，但他们声称他们的模型在大数据上具有更好的准确性
    [[13](#CR13)]。
- en: Li introduce Significant Permission IDentification (SigPID), a malware detection
    system that stands on permission usage analysis to survive the rapidly growing
    number of Android malware. They proposed three levels of permission data to identify
    the most significant permissions. Finally, their evaluation finds that their assessment
    that only 22 permissions are significant and compared another performance of their
    approach, using only 22 permissions, against a baseline approach that examines
    all permissions. It is mentioned that they achieve over 90% precision, recall,
    accuracy, and F-measure, and the analysis times are 4–32 times less than those
    of using all permissions [[2](#CR2)].
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Li介绍了一种称为显著权限识别（SigPID）的恶意软件检测系统，该系统依靠权限使用分析来抵御Android恶意软件数量的迅速增长。他们提出了三个级别的权限数据，以识别最重要的权限。最后，他们的评估发现，他们的评估认为只有22个权限是重要的，并且与另一种方法的性能进行了比较，该方法仅检查了所有权限。提到他们实现了超过90%的精确度、召回率、准确度和F-度量，并且分析时间比使用所有权限的时间少4-32倍[[2](#CR2)]。
- en: MalDozer, a family attribution framework that depends on a sequence classification
    and automatic Android malware detection using deep learning techniques proposed
    by Karbab. Based on deep learning techniques they select various malware datasets
    ranging from 1,000 to 33,000 malware application, and 38,000 benign apps by MalDozer.
    The solution mentioned that MalDozer accurately detects malware with a false positive
    rate of 0.06–2, under their all evaluation with multiple datasets, and attributes
    them to their real families with the F1-Score of 96–99 in percentage [[14](#CR14)].
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Karbab提出了一种基于序列分类和深度学习技术的自动Android恶意软件检测的家族归因框架MalDozer。基于深度学习技术，他们选择了各种恶意软件数据集，范围从1000到33000个恶意应用程序，以及由MalDozer提供的38000个良性应用程序。该解决方案提到，MalDozer能够在多个数据集的所有评估中准确检测到恶意软件，并且将它们归因于其真实家族，F1-Score为96-99％[[14](#CR14)]。
- en: Kim proposes a novel framework for Android malware detection and uses various
    kinds of features. Those features are clarified using their existence-based extraction
    method for successful feature representation on malware detection. As a malware
    detection model, they worked as a multi-modal deep learning technique. Besides,
    to estimate the performance, they execute several experiments based on 41,260
    samples and then compare the accuracy of their model with other deep neural network
    models. They also evaluated their approach in various aspects between their feature
    representation method and the usefulness of several features’ efficiency in model
    updates [[15](#CR15)].
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Kim提出了一种新颖的Android恶意软件检测框架，并使用各种特征。这些特征是通过存在性提取方法明确解释的，用于成功的恶意软件检测特征表示。作为恶意软件检测模型，他们采用了多模态深度学习技术。此外，为了评估性能，他们执行了基于41260个样本的多个实验，然后将其模型的准确性与其他深度神经网络模型进行了比较。他们还在他们的特征表示方法和几个特征的效率在模型更新中的有用性之间的各个方面对他们的方法进行了评估[[15](#CR15)]。
- en: Based on deep learning algorithms, Ren proposed two end-to-end methods for Android
    malware detection which have the advantage of their continuous learning activity.
    They claimed that their proposed methods have the benefit of their continuous
    learning activity and they evaluated by comparing with some existing detection
    methods. A dataset containing 8,000 benign and the same number of malicious applications
    in total 16000 applications used to evaluate their performed. They achieved the
    detection validity of 93.4 and 95.8 in percentage [[16](#CR16)].
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Ren基于深度学习算法，提出了两种Android恶意软件检测的端到端方法，这些方法具有连续学习活动的优势。他们声称，他们提出的方法具有连续学习活动的好处，并且通过与一些现有检测方法进行比较来进行评估。用于评估他们的性能的数据集包含8000个良性应用程序和同样数量的恶意应用程序，共计16000个应用程序。他们的检测有效性达到了93.4和95.8％[[16](#CR16)]。
- en: Wu introduced an Android malicious application detection structured name called
    multiview information integration technology (MVIIDroid). On the other hand, their
    approach extracts applications’ multiple components, transforms them into embedding
    feature vectors and trains a multiple Kernel learning model as the classifier.
    To describe the effectiveness of their representation, they assess MVIIDroid on
    two Android malware datasets of 6820 benign applications and 6820 malwares. Besides
    separating malware from benign applications that they have to achieve superior
    classification performances [[17](#CR17)].
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Wu介绍了一种名为多视图信息集成技术（MVIIDroid）的Android恶意应用程序检测结构化名称。另一方面，他们的方法提取了应用程序的多个组件，将它们转换为嵌入式特征向量，并训练多核学习模型作为分类器。为了描述他们的表示的有效性，他们对6820个良性应用程序和6820个恶意软件的两个Android恶意软件数据集进行了评估。除了将恶意软件与良性应用程序分开，他们还必须实现更高的分类性能
    [[17](#CR17)]。
- en: Hou illustrated the Android applications, concerned APIs, and their rich connections
    as a structured heterogeneous information network (HIN). Instead of using Application
    Programming Interface (API) calls only, it detects Android malware and further
    examines it shows that the several connections between them, and create higher-level
    semantics that requires more effort for attackers to evade the detection. It performed
    their experimental results to exhibit that their developed system HinDroid outperforms
    other replacements for Android malware detection techniques [[18](#CR18)].
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Hou将Android应用程序、相关API以及它们丰富的连接描述为结构化的异构信息网络（HIN）。它不仅仅使用应用程序编程接口（API）调用，而且检测到Android恶意软件，并进一步检查显示它们之间的几个连接，并创建更高级的语义，需要攻击者付出更多的努力来规避检测。他们展示了他们的实验结果，证明了他们开发的系统HinDroid优于其他替代Android恶意软件检测技术
    [[18](#CR18)]。
- en: Innovative detection models, proposed by Arora named PermPair, establish and
    contrast the graphs for malware. Besides extracting a standard sample with the
    permission pairs from the manifest file of an application. They analyze mainly
    the pairs of permissions that can be dangerous. It mentioned that they implemented
    an efficient edge elimination algorithm that was 41% from the normal graph and
    removed 7% of the useless edges from the malware graph. In addition, the 28% number
    of decreases in the detection time and shows minimum space utility [[19](#CR19)].
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由Arora提出的创新检测模型PermPair建立并对恶意软件进行图形对比。除了从应用程序的清单文件中提取具有权限对的标准样本外。他们主要分析可能危险的权限对。他们提到，他们实施了一种高效的边缘消除算法，从常规图中减少了41%，并从恶意软件图中删除了7%的无用边缘。此外，检测时间减少了28%，并显示最小的空间利用率
    [[19](#CR19)]。
- en: Xu performed a detection of DroidEvolver that evaluated on a dataset of 34,722
    malicious applications developed over six years and 33,294 benign applications.
    Based on using the online learning technique, it evolves with feature sets and
    pseudo label that DroidEvolver makes necessary and lightweight updates. DroidEvolver
    obtains high detection feature measure (95.27%), which only declines by 1.06%
    on average per year by the next five years for classifying 57,539 newly presented
    applications. Their performance ability of DroidEvolver is 28.58 times higher
    than MAMADROID by malware detection and then compared with the state-of-the-art
    extra time malware detection method MAMADROID. Finally, the F-measure of DroidEvolver
    is 2.19 times higher on average [[20](#CR20)].
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Xu进行了对DroidEvolver的检测，该检测评估了六年内开发的34,722个恶意应用程序和33,294个良性应用程序的数据集。基于使用在线学习技术，它随着特征集和伪标签的演变而进行必要的轻量级更新。DroidEvolver获得了高的检测特征度量（95.27%），在未来五年中，每年平均下降1.06%，用于对57,539个新提出的应用程序进行分类。DroidEvolver的性能能力比MAMADROID高出28.58倍，并与最先进的额外时间恶意软件检测方法MAMADROID进行了比较。最后，DroidEvolver的F度量平均高出2.19倍
    [[20](#CR20)]。
- en: A hybrid model based on deep autoencoder (DAE) proposed by Wang where convolutional
    neural network (CNN) is used. They recreate the high-dimensional features of Android
    applications and employ multiple CNN to detect Android malware. They analyzed
    13,000 malicious applications and 10,000 benign applications. It mentioned that
    the accuracy with the CNN-S model is improved by 5%, compared with SVM, while
    the training time using the DAE-CNN model is reduced by 83% compared with the
    CNN-S model [[21](#CR21)].
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 王提出了一个基于深度自动编码器（DAE）的混合模型，其中使用了卷积神经网络（CNN）。他们重新创建了Android应用程序的高维特征，并采用多个CNN来检测Android恶意软件。他们分析了13000个恶意应用程序和10000个良性应用程序。与SVM相比，使用CNN-S模型的准确率提高了5%，而使用DAE-CNN模型的训练时间减少了83%[[21](#CR21)]。
- en: Rana assessed four tree-based machine learning algorithms for detecting Android
    malware in conjunction with a substring-based feature selection approach for the
    classifiers. For research, they contain 5,560 malware samples where they used
    the DREBIN dataset with 11,120 applications. Based on machine learning algorithms,
    they established their performed results While being the Random Forest classifier
    outperforms the best previously reported solutions. It provides a strong basis
    for building efficient tools for Android malware detection [[22](#CR22)].
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Rana评估了四种基于树的机器学习算法，用于检测Android恶意软件，并结合了基于子字符串的特征选择方法用于分类器。对于研究，他们包含了5560个恶意样本，其中使用了包含11120个应用程序的DREBIN数据集。基于机器学习算法，他们建立了自己的执行结果，而随机森林分类器表现出色，超过了以前报道的最佳解决方案。这为构建高效的Android恶意软件检测工具提供了坚实的基础[[22](#CR22)]。
- en: Rahman performed a multi-level architecture using stacking concept StackDroid
    and evaluate which minimizes the error rate. They used the Stacked Generalization
    process. They used machine learning algorithms and Extreme Gradient Boosting used
    in level 2 as the final predictor. It mentioned that 97% detection accuracy on
    the DREBIN dataset and provides an energetic basement for the development of an
    android malware scanner whichever they obtained 99% of AUC (Area Under Curve),
    1.67% of FPR (False Positive Rate) [[23](#CR23)].
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Rahman使用堆叠概念StackDroid执行了一个多级架构，并评估了能够将错误率最小化的模型。他们使用了堆叠泛化过程。他们使用了机器学习算法和用于最终预测器的极端梯度提升在第2级中使用。它提到，在DREBIN数据集上的97%的检测准确率，并提供了开发Android恶意软件扫描器的积极基础，他们获得了99%的AUC（曲线下面积），1.67%的FPR（误报率）[[23](#CR23)]。
- en: Russel determined the pattern that is used by attackers to distract malware.
    They proposed python scripts to extract the pattern of Application (App) components
    from an obfuscated android malware dataset. Based on the App component pattern,
    they initiated a matrix form that amassed in a Comma Separated Values (CSV) file.
    It will conduct to the primary basis of detecting the obfuscated malware [[24](#CR24)].
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Russel确定了攻击者用来转移恶意软件注意力的模式。他们提出了Python脚本，从一个混淆的安卓恶意软件数据集中提取了应用程序（App）组件的模式。基于应用程序组件模式，他们启动了一个矩阵形式，该矩阵形式在一个逗号分隔值（CSV）文件中聚集。这将导致检测混淆的恶意软件的主要基础[[24](#CR24)]。
- en: A simulation-based investigation of permissions in obfuscated android malware
    that was proposed. Based on python scripts to extract the pattern of permissions
    from an obfuscated malware dataset named Android PRAGuard Dataset. The experimented
    result shows that the patterns in a matrix form have been found and reserved in
    a Comma Separated Values (CSV) file which will lead to the fundamental basis of
    detecting the obfuscated malware [[25](#CR25)].
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一项基于仿真的研究提出了关于混淆的安卓恶意软件中权限的调查。基于Python脚本从名为Android PRAGuard数据集的混淆恶意软件数据集中提取权限模式。实验结果表明，已经找到了矩阵形式的模式，并保存在一个逗号分隔值（CSV）文件中，这将导致检测混淆恶意软件的基本依据[[25](#CR25)]。
- en: Islam classified the effectiveness of unigram, bigram, and trigram with stacked
    generalization and unigram provide more than 97% accuracy which is the highest
    detection rate against bigram and trigram. It mentioned that they were used as
    a final predictor and meta estimator eXtreme Gradient Boosting (XGBoost). They
    proved an active foundation to use n-gram techniques in developing android malware
    detection has been determined from this experiment [[26](#CR26)].
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Islam对单字、双字和三字的有效性进行了分类，采用了堆叠泛化，并且单字提供了超过97%的准确率，这是对双字和三字的最高检测率。它提到它们被用作最终预测器和元估计器eXtreme
    Gradient Boosting（XGBoost）。他们从这个实验中证明了使用n-gram技术来开发Android恶意软件检测的积极基础已经确定[[26](#CR26)]。
- en: Learning-based Android malware detection methods (TLAMD) for IoT Devices was
    a testing framework proposed by Liu. The proposed framework used on Machine learning
    techniques. It can perform black-box testing on the system and the evaluation
    framework can develop adversarial samples for the IoT Android application with
    a profit rate of nearly 100% [[27](#CR27)].
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 刘提出了用于 IoT 设备的基于学习的 Android 恶意软件检测方法（TLAMD）测试框架。所提出的框架采用了机器学习技术。它可以对系统进行黑盒测试，评估框架可以为
    IoT Android 应用程序开发对抗性样本，利润率接近 100% [[27](#CR27)]。
- en: Millar establish three contributions also experimentally exhibit strong against
    a selection of four prevalent and real-world obfuscation techniques. They propose
    DANdroid, an innovative Android malware detection that using a deep learning Discriminative
    Adversarial Network (DAN). It categorizes both obfuscated and unobfuscated applications
    as each of two malicious or benign. It mentioned that they used three feature
    sets such as raw opcodes, permissions, and API calls, that are combined in a multi-view
    deep learning architecture to rise this obfuscation resilience. They performed
    the dataset of 68,880 obfuscated and unobfuscated malicious and benign samples
    and multi-view DAN model obtains an F-score of 0.973 and contrast enthusiastically
    with the state-of-the-art, despite being exposed to the selected obfuscation approach
    tested both individually and in combination [[28](#CR28)].Table 1
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Millar 还建立了三个贡献，并在实验中针对四种流行的真实混淆技术展现了强大的抵抗力。他们提出了 DANdroid，一种使用深度学习判别对抗网络（DAN）的创新型
    Android 恶意软件检测方法。它将混淆和非混淆应用程序分为两种恶意或良性。他们提到使用了三种特征集，如原始操作码、权限和 API 调用，在多视图深度学习架构中结合起来提高了这种混淆鲁棒性。他们对包含
    68,880 个混淆和非混淆的恶意和良性样本的数据集进行了实验，多视图 DAN 模型获得了 0.973 的 F 分数，并与最先进技术进行了积极对比，尽管暴露于经过选择的混淆方法的测试中，无论是单独还是组合
    [[28](#CR28)]。表 1
- en: Used features in literature
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 文献中使用的特征
- en: '| S/L | Reference | Used features |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| S/L | 参考 | 使用的特征 |'
- en: '| --- | --- | --- |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 1 | [[28](#CR28)] | Raw opcodes, permissions and API calls |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 1 | [[28](#CR28)] | 原始操作码、权限和 API 调用 |'
- en: '| 2 | [[29](#CR29)] | Applications behaviors in event level |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 2 | [[29](#CR29)] | 应用程序在事件级别的行为 |'
- en: '| 3 | [[30](#CR30)] | Static features, dynamic features, and hybrid features
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 3 | [[30](#CR30)] | 静态特征、动态特征和混合特征 |'
- en: '| 4 | [[31](#CR31)] | API call graph embedding |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 4 | [[31](#CR31)] | API 调用图嵌入 |'
- en: '| 5 | [[32](#CR32)] | URL feature mining |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 5 | [[32](#CR32)] | URL 特征挖掘 |'
- en: '| 6 | [[33](#CR33)] | Content-based features, runtime API sequences |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 6 | [[33](#CR33)] | 基于内容的特征、运行时 API 序列 |'
- en: '| 7 | [[34](#CR34)] | System call sequences |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 7 | [[34](#CR34)] | 系统调用序列 |'
- en: '| 8 | [[35](#CR35)] | Manifest properties, API calls, opcode sequences |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 8 | [[35](#CR35)] | 清单属性、API 调用、操作码序列 |'
- en: '| 9 | [[36](#CR36)] | Discussed about various features of static analysis including
    opcode |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 9 | [[36](#CR36)] | 讨论了静态分析的各种特征，包括操作码 |'
- en: '| 10 | [[37](#CR37)] | Permissions, API calls, intents, network traffic, Java
    classes, and inter-process communication |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 10 | [[37](#CR37)] | 权限、API 调用、意图、网络流量、Java 类和进程间通信 |'
- en: '| 11 | [[38](#CR38)] | Call graphs |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 11 | [[38](#CR38)] | 调用图 |'
- en: '| 12 | [[39](#CR39)] | Network flows and API calls |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 12 | [[39](#CR39)] | 网络流和 API 调用 |'
- en: '| 13 | [[40](#CR40)] | n-gram features from App’s smali code |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 13 | [[40](#CR40)] | 来自 App 的 smali 代码的 n-gram 特征 |'
- en: '| 14 | [[41](#CR41)] | Permissions, API calls, Network Address and so on |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 14 | [[41](#CR41)] | 权限、API 调用、网络地址等 |'
- en: '| 15 | [[42](#CR42)] | Static features, API package call features and Dynamic
    Features |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 15 | [[42](#CR42)] | 静态特征、API 包调用特征和动态特征 |'
- en: '| 16 | [[43](#CR43)] | Dangerous permissions and components |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 16 | [[43](#CR43)] | 危险权限和组件 |'
- en: '| 17 | [[44](#CR44)] | Opcode sequences |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 17 | [[44](#CR44)] | 操作码序列 |'
- en: '| 18 | [[45](#CR45)] | System call |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 18 | [[45](#CR45)] | 系统调用 |'
- en: '| 19 | [[46](#CR46)] | Discuss about permission, intent, uses-feature, application
    and API including kernel level features |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 19 | [[46](#CR46)] | 讨论了权限、意图、uses-feature、应用程序和 API，包括内核级特征 |'
- en: '| 20 | [[47](#CR47)] | Permission requests and API calls |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 20 | [[47](#CR47)] | 权限请求和 API 调用 |'
- en: EveDroid, a scalable and event-aware Android malware detection system, utilizes
    the behavioral patterns in several cases to effectively detect recent malware
    based on the observation proposed by Lei. Their events can also reflect apps’
    possible running activities. On the other hand, they also mention using event
    groups to describe apps’ behaviors at the event level, which can capture a higher
    level of semantics than in API level and their approaches using API calls as features
    directly. The performance was based on a dataset that was 14 956 benign and 28
    848 malicious Android applications [[29](#CR29)].
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: EveDroid，一个可扩展的、事件感知的安卓恶意软件检测系统，利用了几种情况下的行为模式，根据雷的观察有效地检测最近的恶意软件。他们的事件还可以反映应用程序可能的运行活动。另一方面，他们还提到使用事件组来描述应用程序在事件级别上的行为，这可以捕获比
    API 级别更高级的语义，并且他们的方法直接使用 API 调用作为特征。性能基于一个数据集，其中有 14,956 个良性应用程序和 28,848 个恶意安卓应用程序[[29](#CR29)]。
- en: The used features in the literature are tabulated in Table [1](#Tab1) which
    prove that the features have significant influence on android malware detection.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 文献中使用的特征在表 [1](#Tab1) 中列出，证明这些特征对安卓恶意软件检测具有显著影响。
- en: '3 IFIFDroid: The Proposed Approach'
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '3 IFIFDroid: 提议的方法'
- en: The Proposed Framework or proposed methodology will be described step by step
    in details in this section.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 提议的框架或提议的方法将在本节中详细逐步描述。
- en: 3.1 Dataset Description
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.1 数据集描述
- en: There are lots of public datasets [[52](#CR52)–[59](#CR59)] available publicly
    to conduct or experiment during research works. ‘DREBIN’ dataset is one of the
    most used datasets among them which is used during the validation or test of the
    proposed framework. This dataset consists of 123,453 real android applications
    including 5,560 malware applications with 179 malware families. From early days
    of android malware analysis, this dataset performed as a strong basement to study
    different types of malwares as those malware samples were collected from August
    2010 to October 2012 [[7](#CR7), [8](#CR8)].
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多公开数据集[[52](#CR52)–[59](#CR59)]可供在研究工作中进行实验或实验。‘DREBIN’ 数据集是其中最常用的数据集之一，它在验证或测试提议的框架时使用。该数据集包括
    123,453 个真实的安卓应用程序，包括 5,560 个恶意应用程序，涵盖了 179 个恶意软件家族。从安卓恶意软件分析的早期阶段开始，这个数据集就成为研究不同类型恶意软件的强大基础，因为这些恶意软件样本是从
    2010 年 8 月到 2012 年 10 月收集的[[7](#CR7), [8](#CR8)]。
- en: 3.2 Test Bed Setup
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.2 测试床设置
- en: The test bed setup is about an experimental environment which includes a Processor
    of Intel(R) Core (TM) i5-6500 CPU @ 3.20 GHz, 64-bit PC with 16 GB RAM. Linux
    Mint 18.3 Sylvia was the operating system. Scikit-learn, NumPy, panda and so on
    which are the packages of python have been used during this study where Python
    was the programming language.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 测试床设置是关于一个实验环境的描述，其中包括一个英特尔(R)酷睿(TM) i5-6500 CPU @ 3.20 GHz的处理器，64位PC，内存为16 GB。操作系统是
    Linux Mint 18.3 Sylvia。在这项研究中使用了 Scikit-learn、NumPy、panda 等包，它们是 Python 的包，Python
    是编程语言。
- en: 3.3 Pre-processing
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.3 预处理
- en: It has been mentioned that the dataset has an imbalance in the number of data
    where only 5560 are malware. Thus, it is necessary to make it balance where there
    will be equal numbers of malware and benign applications. In this stage, balance
    operation has been performed using the following formula:![$$ f(dataset)= \sigma
    {\left\{ \begin{array}{ll} \frac{n}{,}&amp;{} \text {if } count(malware) = count(benign)\\
    0, &amp;{} \text {otherwise} \end{array}\right. } $$](../images/507793_1_En_8_Chapter/507793_1_En_8_Chapter_TeX_Equ1.png)After
    preprocess final dataset has selected based on the equal number of malware and
    benign. Where (Fig. [1](#Fig1)),![$$\begin{aligned} \sigma = Select, \qquad \qquad
    \qquad \\ 0...\mathrm{n} = \text {All samples,} \qquad \qquad \\ \text {count
    }= \text { Calculate number of sample.} \end{aligned}$$](../images/507793_1_En_8_Chapter/507793_1_En_8_Chapter_TeX_Equ2.png)![../images/507793_1_En_8_Chapter/507793_1_En_8_Fig1_HTML.png](../images/507793_1_En_8_Chapter/507793_1_En_8_Fig1_HTML.png)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 已经提到数据集中数据数量不平衡，只有 5560 个是恶意软件。因此，有必要使其平衡，使恶意应用程序和良性应用程序数量相等。在此阶段，使用以下公式进行平衡操作：![$$
    f(dataset)= \sigma {\left\{ \begin{array}{ll} \frac{n}{,}&amp;{} \text {if } count(malware)
    = count(benign)\\ 0, &amp;{} \text {otherwise} \end{array}\right. } $$](../images/507793_1_En_8_Chapter/507793_1_En_8_Chapter_TeX_Equ1.png)预处理后，根据相同数量的恶意软件和良性软件选择了最终数据集。其中
    (图 [1](#Fig1)),![$$\begin{aligned} \sigma = 选择, \qquad \qquad \qquad \\ 0...\mathrm{n}
    = \text {所有样本,} \qquad \qquad \\ \text {计数 }= \text { 计算样本数.} \end{aligned}$$](../images/507793_1_En_8_Chapter/507793_1_En_8_Chapter_TeX_Equ2.png)![../images/507793_1_En_8_Chapter/507793_1_En_8_Fig1_HTML.png](../images/507793_1_En_8_Chapter/507793_1_En_8_Fig1_HTML.png)
- en: Fig. 1
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1
- en: Proposed framework
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 提议的框架
- en: 3.4 Features Extraction
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.4 特征提取
- en: 'Reverse engineering has been performed to extract the features from the APK
    file in this stage using Androguard Reverse Engineering Tools [[60](#CR60)]. There
    are two major parts from which the features can be extracted based on the dataset:
    one is the Manifest.xml (all the permissions are listed there) file and another
    is the classes.dex (the main source of codes to execute) file. Based on the used
    dataset, there are total eight features set from those sources depicted in Fig. [2](#Fig2)
    explained below:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段使用 Androguard 反向工程工具对 APK 文件进行了反向工程以提取特征[[60](#CR60)]。根据数据集，有两个主要部分可以从中提取特征：一个是
    Manifest.xml（所有权限都在那里列出）文件，另一个是 classes.dex（执行代码的主要来源）文件。根据所使用的数据集，从这些来源中提取了总共八个特征集，如下图 [2](#Fig2)
    所示：
- en: '**Hardware Components (HC):** Android HC also supports VideoCamera, GPS, 3d-accelerometer,
    compass and provides rich APIs for location and map related functions as well
    as users can flexibly access, control and process the free Google map. Hardware
    components implement location based mobile service at low rate cost in mobile
    systems.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**硬件组件（HC）：** Android HC 还支持 VideoCamera、GPS、3D 加速计、指南针，并为位置和地图相关功能提供丰富的 API，用户可以灵活地访问、控制和处理免费的
    Google 地图。硬件组件在移动系统中实现基于位置的移动服务的低成本。'
- en: '**Requested Permissions (RP):** The list of Android permissions which are asked
    to get permitted from users. Android permissions play an important role in the
    security mechanism allowed by users the installation of an application. Each Malicious
    Application has run Android 6.0 to request dangerous permission by which it can
    get access to essential information. For Example: Request CAMERA access permission
    which is a hardware related permission, for instance Google Play store assumes
    that the underlying hardware features are required by user’s application and filters
    the application from devices that do not offer it.![../images/507793_1_En_8_Chapter/507793_1_En_8_Fig2_HTML.png](../images/507793_1_En_8_Chapter/507793_1_En_8_Fig2_HTML.png)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**请求的权限（RP）：** 请求用户许可的 Android 权限列表。Android 权限在用户允许安装应用程序的安全机制中起着重要作用。每个恶意应用程序都必须运行
    Android 6.0 来请求危险权限，以便访问重要信息。例如：请求相机访问权限，这是一个与硬件相关的权限，例如 Google Play 商店假定用户应用程序需要底层硬件功能，并将应用程序从不提供该功能的设备中过滤掉。![../images/507793_1_En_8_Chapter/507793_1_En_8_Fig2_HTML.png](../images/507793_1_En_8_Chapter/507793_1_En_8_Fig2_HTML.png)'
- en: Fig. 2
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图2
- en: Reverse engineering process
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 反向工程过程
- en: '**App Components (AC):** Android app has an app component it is the essential
    building block. Every component is an entry point through which the system or
    a user can enter an application. App components are 4 types of such as services,
    activities, broadcast receivers and content providers.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**应用组件（AC）：** Android 应用程序有一个应用组件，它是基本的构建块。每个组件都是系统或用户进入应用程序的入口点。应用组件有 4 种类型，如服务、活动、广播接收器和内容提供者。'
- en: '**Filtered Intents (FI):** An Intent is a messaging object user can use to
    request an action from another app component and during inter process and intra
    process communication in android, intents are performed. Number of malicious applications
    or malicious activities after rebooting the android phone using BOOT_COMPLETED.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**过滤的意图（FI）：** 意图是用户可以用来请求另一个应用组件执行操作的消息对象，在 Android 中进行进程间和进程内通信时，执行意图。重新启动
    Android 手机后，使用 BOOT_COMPLETED 的恶意应用程序或恶意活动的数量。'
- en: '**Restricted API Calls (RAC):** RAC is performed depend on the allowed permissions
    of android during the application installation. Malicious activities such as root
    exploits are indicated by the usage of RAC where the permissions in manifest.xml
    file aren’t requested.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**受限 API 调用（RAC）：** 在应用程序安装期间，RAC 是依赖于 Android 允许的权限执行的。诸如 root 漏洞利用之类的恶意活动通过在
    manifest.xml 文件中未请求权限来指示。'
- en: '**Used Permissions (UP):** Whether any application directed to malicious activities
    or not, it can be identified initially from UP and RAC. Android can define new
    permissions that are distinct from the pre-installed system permissions and are
    used to regulate access its.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**已使用权限（UP）：** 无论应用程序是否针对恶意活动，都可以从 UP 和 RAC 初步识别。Android 可以定义与预装系统权限不同的新权限，并用于调整其访问权限。'
- en: '**Suspicious API Calls (SAC):** Suspicious API calls means getDeviceId(), Cipher.getInstance(),
    Runtime.exec() and so on which allows to get access sensitive information about
    device related to malicious API calls and some of those are used for obfuscation.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**可疑的 API 调用（SAC）：** 可疑的 API 调用意味着 getDeviceId()、Cipher.getInstance()、Runtime.exec()
    等，这些调用允许获取与恶意 API 调用相关的设备的敏感信息，其中一些用于混淆。'
- en: '**Network Addresses (NA):** Network addresses which are regularly used by malware
    to execute external commands or pass data and it minimizes the amount of personal
    or sensitive data that anyone can transmit over the network.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络地址（NA）：** 网络地址经常被恶意软件用于执行外部命令或传递数据，它最小化了任何人可以通过网络传输的个人或敏感数据的数量。'
- en: 3.5 Feature Ranking
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.5 特征排序
- en: In this stage, from the rankings list of the features, a high ranked features
    set has been selected to train a machine learning model and test. The number of
    high ranked features set such as 1, 2, 3, 4, 5, 6, 7 and 8 features set has been
    selected sequentially. Initially, Features ranking calculate by CART algorithm
    and based on coefficient value of each features during training the machine learning
    techniques. Then, calculate that score for every features 100 times to get more
    stable scoring from making an average score.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，从特征的排名列表中选择一个高排名的特征集来训练和测试一个机器学习模型。选择的高排名特征集的数量，例如 1、2、3、4、5、6、7 和 8 个特征集，是依次选择的。首先，通过
    CART 算法计算特征排名，并根据训练机器学习技术期间每个特征的系数值计算。然后，对每个特征进行 100 次计分，以获得更稳定的评分，从而得到平均分数。
- en: 3.6 Features Performance Checking
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.6 功能性能检查
- en: In this stage, the performance of the selected features with respective machine
    learning techniques will be evaluated. It’s been noticed that here also the machine
    learning techniques are providing different results for every simulation as the
    test train was random. To make it reasonable, 100 times loop have been applied
    and from that the average accuracy for every features set has been calculated.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，将评估选定特征与相应机器学习技术的性能。注意到这里也是机器学习技术为每次模拟提供不同结果的地方，因为测试训练是随机的。为了使其合理，已经应用了
    100 次循环，从中计算出每个特征集的平均准确性。
- en: 3.7 Final Selection Based on Performance
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.7 基于性能的最终选择
- en: From the feature performance, it can be easily selected for which machine learning
    techniques which features influenced more during the training of that model which
    will lead a strong basement to develop anti-malware tools.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 从功能性能来看，可以很容易地选择在训练该模型期间哪些特征对机器学习技术产生了更大的影响，这将为开发反恶意软件工具奠定坚实的基础。
- en: It’s been mentioned that for feature ranking and for training, same ML techniques
    are applied and evaluated.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 已经提到，对于特征排名和训练，应用并评估了相同的 ML 技术。
- en: 4 Evaluation Parameters and Used Machine Learning Techniques
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4 评估参数和使用的机器学习技术
- en: 4.1 Evaluation Matrices
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.1 评估矩阵
- en: 'Binary classification such as the data as either negative or positive labels
    has been performed during this study labeled as malware or benign. The decision
    of this classification has been represented by a structure. Confusion matrix is
    that structure by which the decision of classifiers can be evaluated [[48](#CR48)]
    Townsend. It consists of with 4 attributes: True positives (TP), True negatives
    (TN), False positives (FP) and False Negative (FN). True positives (TP) mean correctly
    identified the benign applications as benign. Identified the malware as benign
    is defined as False positives (FP). To identify malware as malware correctly referred
    to True negatives (TN). False negatives (FN) mean the benign one is identified
    as malware Davis [[49](#CR49)]. F1-Score, Precision, Recall, ROC curve, Precision-Recall
    Curve, Confusion Matrix, False Positive Rate and AUC Sokolova and Boyd. [[50](#CR50),
    [51](#CR51)] are used during this study to evaluate the effectiveness of IFIFDroid.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本研究中进行了二元分类，将数据标记为恶意软件或良性，并在此研究中进行了负面或正面标签的二元分类。这种分类的决策已由一个结构表示。混淆矩阵就是这个结构，通过它可以评估分类器的决策[[48](#CR48)]
    Townsend。它由 4 个属性组成：真正例（TP）、真负例（TN）、假正例（FP）和假负例（FN）。真正例（TP）意味着将良性应用正确地识别为良性。将恶意软件识别为良性被定义为假正例（FP）。将恶意软件正确识别为恶意软件称为真负例（TN）。假负例（FN）意味着将良性的标识为恶意软件
    Davis[[49](#CR49)]。F1 分数、精确度、召回率、ROC 曲线、精确度-召回率曲线、混淆矩阵、假阳率和 AUC Sokolova 和 Boyd[[50](#CR50),
    [51](#CR51)] 在本研究中用于评估 IFIFDroid 的有效性。
- en: '**ROC Curve:** A curve with two plots where False Positive Rate is on the x-axis
    and True Positive Rate in on the y-axis. The ratio of malware or the fraction
    of negative values those get wrongly classified as benign or positive is False
    Positive Rate - FPR. Whereas, TPR - True Positive Rate is the opposite of FPR.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**ROC 曲线：**一条具有两个绘图的曲线，其中 False Positive Rate 在 x 轴上，True Positive Rate 在 y
    轴上。将恶意软件的比例或将负值错误分类为良性或正值的分数称为 False Positive Rate - FPR。而 True Positive Rate
    - TPR 是 FPR 的相反。'
- en: '**Precision-Recall Curve:** A curve with two plots where recall is on the x-axis
    and precision in on the y-axis. Recall is exactly same as TPR. The rate of correctly
    identified the true value as true is referred to precision.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**精确度-召回率曲线：**一条具有两个绘图的曲线，其中召回率在 x 轴上，精确度在 y 轴上。召回率与 TPR 完全相同。正确识别真值为真的速率被称为精确度。'
- en: '**Accuracy:** The ratio of correctly identified data according to the total
    amount of data is known as accuracy defined as follows.![$$\begin{aligned} \text
    {Accuracy} = (\mathrm{TP} + \mathrm{TN}) / (\mathrm{TP} + \mathrm{TN} + \mathrm{FP}
    + \mathrm{FN}) \end{aligned}$$](../images/507793_1_En_8_Chapter/507793_1_En_8_Chapter_TeX_Equ3.png)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**准确度：**根据总数据量正确识别数据的比率称为准确度，定义如下.![$$\begin{aligned} \text {Accuracy} = (\mathrm{TP}
    + \mathrm{TN}) / (\mathrm{TP} + \mathrm{TN} + \mathrm{FP} + \mathrm{FN}) \end{aligned}$$](../images/507793_1_En_8_Chapter/507793_1_En_8_Chapter_TeX_Equ3.png)'
- en: 4.2 Machine Learning Algorithms
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.2 机器学习算法
- en: 'Machine learning can be defined as a ponder of making machines obtain modern
    information, unused abilities, reorganize current information. It is utilized
    in an awfully common way and it alludes to common strategies to extrapolate patterns
    from large sets or to the capacity to create predictions on new records primarily
    based on what is learned with the aid of inspecting accessible recognized data.
    Machine learning techniques can be generally partitioned into two classes: supervised
    and unsupervised learning. The following are some of the algorithms used for machine
    learning during this study as followed:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习可以被定义为使机器获得现代信息、未使用的能力、重新组织当前信息的思考过程。它被广泛应用，并指的是从大型数据集中推断模式或基于通过分析可用已知数据所学到的内容创建新记录的预测能力的常用方法。机器学习技术通常可以分为两类：有监督学习和无监督学习。以下是本研究中使用的一些机器学习算法：
- en: Extremely Randomized Tree – Extra Tree (ET)
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 极端随机树 - Extra Tree（ET）
- en: Random Forest (RF)
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机森林（RF）
- en: Decision Tree (DT)
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决策树（DT）
- en: Ada Boost (ADA)
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ada 提升（ADA）
- en: Gradient Boost (GB)
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 梯度提升（GB）
- en: 'These algorithms have different categories including: Machine Learning, Ensemble
    (Bagging Classifiers) and Boosting tree which are used during this study.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这些算法有不同的类别，包括：机器学习、集成（装袋分类器）和提升树，这些在本研究中被使用。
- en: 5 Experimental Results Analysis and Discussion
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5 实验结果分析与讨论
- en: In this section, the result obtained from the implementation and assessment
    of the proposed approach will be described and evaluated briefly. For making the
    clear representation, the features are labeled as Table [2](#Tab2).Table 2
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，将描述和简要评估提出方法的实施和评估结果。为了清晰地表示，特征被标记为表 [2](#Tab2)。表 2
- en: Representation of features set
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 特征集的表示
- en: '| S/L | Feature set name | Short form | Set format |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| S/L | 特征集名称 | 简称 | 设置格式 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 1 | Hardware components | HC | {HC[1], HC[2],............, HC[n]} |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 硬件组件 | HC | {HC[1], HC[2],............, HC[n]} |'
- en: '| 2 | Requested permissions | RP | {RP[1], RP[2],............., RP[n]} |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 请求的权限 | RP | {RP[1], RP[2],............., RP[n]} |'
- en: '| 3 | App components | AC | {AC[1], AC[2],............., AC[n]} |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 应用组件 | AC | {AC[1], AC[2],............., AC[n]} |'
- en: '| 4 | Filtered intents | FI | {FI[1], FI[2],................, FI[n]} |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 过滤的意图 | FI | {FI[1], FI[2],................, FI[n]} |'
- en: '| 5 | Restricted API calls | RAC | {RAC[1], RAC[2],........., RAC[n]} |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 限制的 API 调用 | RAC | {RAC[1], RAC[2],........., RAC[n]} |'
- en: '| 6 | Used permissions | UP | {UP[1], UP[2],.............., UP[n]} |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 已使用权限 | UP | {UP[1], UP[2],.............., UP[n]} |'
- en: '| 7 | Suspicious API calls | SAC | {SAC[1], SAC[2],..........., SAC[n]} |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 可疑的 API 调用 | SAC | {SAC[1], SAC[2],..........., SAC[n]} |'
- en: '| 8 | Network addresses | NA | {NA[1], NA[2],............., NA[n]} |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 网络地址 | NA | {NA[1], NA[2],............., NA[n]} |'
- en: Table [2](#Tab2) represents the features labeling with short form of all features
    set and the constructions of features in a set. For instance, hardware components
    may be a set of multiple components like {GPS, camera,.....,touchscreen}. The
    representation of this set in the dataset is {1, 0, ......, 1} where 1 represents
    that the components are used in that application if not used then labeled as 0.![../images/507793_1_En_8_Chapter/507793_1_En_8_Fig3_HTML.png](../images/507793_1_En_8_Chapter/507793_1_En_8_Fig3_HTML.png)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 表 [2](#Tab2) 表示了所有特征集的简称及特征集的构造。例如，硬件组件可能是一组多个组件，如 {GPS，相机，......，触摸屏}。该数据集中对此集合的表示为
    {1，0，......，1}，其中 1 表示这些组件在应用程序中被使用，如果未使用则标记为 0。
- en: Fig. 3
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3
- en: Comparison of features set in average ranking of all implemented ML techniques
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 所有已实施的机器学习技术的特征集平均排名的比较
- en: In comparison of all algorithms it’s been found that 7 features set on an average
    from total 8 features set provide maximum accuracy. The top most influenced number
    of features and accuracy of different machine learning techniques are depicted
    in Figs. [3](#Fig3) and [4](#Fig4) respectively.![../images/507793_1_En_8_Chapter/507793_1_En_8_Fig4_HTML.png](../images/507793_1_En_8_Chapter/507793_1_En_8_Fig4_HTML.png)
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有算法的比较发现，从总共 8 个特征集中选取的 7 个特征集提供了最大的准确性。不同机器学习技术的最有影响的特征数和准确性分别在图 [3](#Fig3)
    和 [4](#Fig4) 中描述。
- en: Fig. 4
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4
- en: Comparison of accuracy based on features ranking of all implemented ML techniques
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 所有已实施的机器学习技术基于特征排序的准确性比较
- en: Table 3
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 表 3
- en: Features ranking by each machine learning technique
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 每种机器学习技术的特征排序
- en: '| Feature set | ET | RF | DT | GB | ADA | Average ranking |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 特征集 | ET | RF | DT | GB | ADA | 平均排名 |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: '| RP | 1 | 1 | 1 | 1 | 1 | 1 |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| RP | 1 | 1 | 1 | 1 | 1 | 1 |'
- en: '| NA | 2 | 2 | 2 | 2 | 4 | 2.4 |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| NA | 2 | 2 | 2 | 2 | 4 | 2.4 |'
- en: '| HC | 4 | 6 | 5 | 5 | 7 | 5.4 |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| HC | 4 | 6 | 5 | 5 | 7 | 5.4 |'
- en: '| AC | 5 | 3 | 3 | 4 | 5 | 4 |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| AC | 5 | 3 | 3 | 4 | 5 | 4 |'
- en: '| SAC | 3 | 5 | 4 | 3 | 2 | 3.4 |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| SAC | 3 | 5 | 4 | 3 | 2 | 3.4 |'
- en: '| RAC | 7 | 7 | 7 | 6 | 3 | 6 |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| RAC | 7 | 7 | 7 | 6 | 3 | 6 |'
- en: '| UP | 8 | 8 | 8 | 8 | 8 | 8 |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| UP | 8 | 8 | 8 | 8 | 8 | 8 |'
- en: '| FI | 6 | 4 | 6 | 7 | 6 | 5.8 |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| FI | 6 | 4 | 6 | 7 | 6 | 5.8 |'
- en: It’s been claimed that UP has lower influence on an average for all classifiers
    from Table [3](#Tab3). On the other hand, RP which is also a set of permissions
    stand in the first position as a feature set to detect android malwares. Furthermore,
    RAC only get third position with ADA boost algorithm ranking whereas SAC has fluctuation
    of ranking by each algorithm. In sum, the feature set of RP, NA, SAC, AC, HC,
    FI and RAC are the most influenced feature set and top ranked. Finally, traditional
    wrapper method has been implemented to validate the proposed model and found that
    proposed approach can improve the accuracy of detection rather than the traditional
    wrapper method. It’s been also obtained that the accuracy difference is not that
    much compare to the traditional wrapper method. However, this model indicates
    that it is possible to improve the traditional wrapper method. The overall comparison
    of proposed method with traditional wrapper method has been tabulated in Table [4](#Tab4).Table
    4
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 据表 [3](#Tab3) 表明，对于所有分类器，UP 的平均影响较低。另一方面，RP 也是一组权限，作为检测安卓恶意软件的特征集，位于第一位置。此外，RAC
    仅在 ADA 提升算法排名中获得第三位置，而 SAC 则在每种算法中的排名波动较大。总之，RP、NA、SAC、AC、HC、FI 和 RAC 的特征集是最有影响力和排名最高的。最后，已实施传统包装法以验证提出的模型，并发现提出的方法可以提高检测的准确性，而不是传统包装法。还发现，与传统包装法相比，准确性差异并不大。但是，该模型表明可以改进传统的包装法。提出的方法与传统包装法的总体比较已在表
    [4](#Tab4) 中列出。
- en: Comparison between the performance of proposed approach and wrapper method
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 提出方法与包装法的性能比较
- en: '| ML techniques | Wrapper method - accuracy | Proposed method - accuracy |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| 机器学习技术 | 包装法 - 准确性 | 提出的方法 - 准确性 |'
- en: '| --- | --- | --- |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| ET | 92.87% | 93% with 7 feature set |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| ET | 92.87% | 93%，使用 7 个特征集 |'
- en: '| RF | 92.15% | 92.73% with 7 features set |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| RF | 92.15% | 92.73%，使用 7 个特征集 |'
- en: '| DT | 90.12% | 90.49% with 6 features set |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| DT | 90.12% | 90.49%，使用 6 个特征集 |'
- en: '| GB | 88.43% | 88.73% with 7 features set |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| GB | 88.43% | 88.73%，使用 7 个特征集 |'
- en: '| ADA | 84.56% | 84.68% with 7 feature set |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| ADA | 84.56% | 84.68%，使用 7 个特征集 |'
- en: 6 Conclusion
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: A feature selection framework named IFIFDroid is proposed and which performed
    by machine learning methods with multiple algorithms such as Decision Tree, Random
    Forest, Extremely Randomized Tree, and Gradient Tree Boosting to detect malware
    on Android by performing static analysis on the DREBIN dataset. Whereas, a static
    analysis of Android malware applications has been performed considering the features
    including permission, API call, Intent filter, App component, and System call
    features are analyzed. In this paper, only eight types of features set are considered.
    However, there are more features set which will be examined and evaluated with
    IFIFDroid. There is also a major point to mention that the difference with the
    accuracy still not significant with existing wrapper method and in future the
    framework will be improve by changing some parameters to gain more accuracy in
    feature ranking, selection and then detection.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 提出了一种名为 IFIFDroid 的特征选择框架，并通过多种算法（如决策树、随机森林、极端随机树和梯度树提升）由机器学习方法执行，在 DREBIN 数据集上执行静态分析以检测
    Android 上的恶意软件。然而，已经对 Android 恶意软件应用程序进行了静态分析，考虑了包括权限、API 调用、意图过滤器、应用组件和系统调用特征在内的特征。在本文中，只考虑了八种类型的特征集。然而，还有更多的特征集将通过
    IFIFDroid 进行检查和评估。还有一个重要的要点要提到，与现有的包装方法相比，准确性的差异仍然不显著，并且在未来，通过更改一些参数来提高特征排序、选择然后检测的准确性，框架将得到改进。
