- en: © The Author(s), under exclusive license to Springer Nature Switzerland AG 2022Y.
    Maleh et al. (eds.)Advances in Blockchain Technology for Cyber Physical SystemsInternet
    of ThingsTechnology, Communications and Computing[https://doi.org/10.1007/978-3-030-93646-4_12](https://doi.org/10.1007/978-3-030-93646-4_12)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 作者（们），独家许可给 Springer Nature Switzerland AG 2022Y。 Maleh 等人（编）《区块链技术在物联网技术、通信和计算中的应用》[https://doi.org/10.1007/978-3-030-93646-4_12](https://doi.org/10.1007/978-3-030-93646-4_12)
- en: Developing Instrument for Investigation of Blockchain Technology
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块链技术研究工具的开发
- en: Dmitry Kushnir^([1](#Aff7)  ), Maxim Kovtsur^([1](#Aff7)), Ammar Muthanna^([1](#Aff7)),
    Anastasiia Kistruga^([1](#Aff7)), Mark Akilov^([1](#Aff7)) and Anton Batalov^([1](#Aff7))(1)M.
    A. Bonch-Bruevich Saint Petersburg State University of Telecommunications, Saint
    Petersburg, RussiaKeywordsBlockchainDistributed databaseHash functionMerkle rootNoncePrivate
    keyPublic keyConsensusProof of workCPS
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Dmitry Kushnir^([1](#Aff7)  ), Maxim Kovtsur^([1](#Aff7)), Ammar Muthanna^([1](#Aff7)),
    Anastasiia Kistruga^([1](#Aff7)), Mark Akilov^([1](#Aff7)) 和 Anton Batalov^([1](#Aff7))(1)M.
    A. Bonch-Bruevich 圣彼得堡国立电信大学, 圣彼得堡, 俄罗斯关键词区块链分布式数据库哈希函数默克尔根Nonce私钥公钥共识工作证明CPS
- en: 1 Introduction
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1 引言
- en: Blockchain originally appeared as a distributed registry of the Bitcoin system
    [[1](#CR1)]. Such a register allowed to solve the problem of double spending of
    cryptocurrency. One of the key features of the blockchain is the immutability
    of the distributed registry. This property allows for the exchange of data between
    interested parties, ensuring trust among the initially distrustful parties of
    information interaction. The rapid success of Bitcoin has attracted a lot of attention
    of researchers to the new technology underlying it, the blockchain. Despite the
    fact that the blockchain originated as an infrastructure for cryptocurrency, it
    has become a technology of distributed systems, which has led to a shift in emphasis
    from centralized systems to decentralized ones. A decentralized and open architecture
    is formed on the basis of the blockchain, since it is implemented on a large number
    of distributed nodes, each of which contains a copy of cryptographically linked
    records. Such records are organized into blocks agreed by some consensus protocols
    among blockchain nodes. A cryptographically linked block chain, together with
    a distributed consensus protocol, ensures the immutability of the blockchain.
    The openness and immutability of the blockchain allow anyone to check the history
    of records in the blockchain, which prevents any attempts to interfere with the
    stored data and protects the information from being changed after being added
    to the blocks. Thus, trust among untrusted parties of information interaction
    can also be created on the basis of a decentralized architecture. The decentralized,
    open, and unmodifiable nature of the blockchain makes it a transparent, publicly
    verifiable system. In addition, since records are replicated to many distributed
    nodes, the blockchain architecture allows you to get rid of the problem of a single
    point of failure. The combination of these properties allows us to consider the
    blockchain technology as the basis for a wide range of applications. Such applications
    can be solutions for the Internet of things (IoT) and cyber-physical systems (CPS)
    in which the possibility of interaction between a huge number of heterogeneous
    devices is required. Traditional centralized solutions may face such difficulties
    as distrust of information exchange nodes to each other, a huge number of interactions,
    the presence of a single point of failure, and a number of others. If we pay attention
    to CPS, it is also important to note that many existing industrial networks have
    only now begun to depart from the standards created in the 1970s of the last century,
    and the search for solutions based on blockchain can potentially effectively solve
    many problems in this area.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链最初作为比特币系统的分布式注册表[[1](#CR1)]出现。这样的注册表允许解决加密货币的双重支付问题。区块链的关键特性之一是分布式注册表的不可变性。这种属性允许感兴趣的各方之间交换数据，确保最初不信任的信息交互各方之间的信任。比特币的迅速成功吸引了研究人员对支撑其背后的新技术——区块链的极大关注。尽管区块链起源于加密货币的基础设施，但它已经成为分布式系统技术，这导致了从集中式系统到分散式系统的重心转移。基于区块链形成了分散化和开放的架构，因为它是在大量分布式节点上实现的，每个节点都包含一个加密链接记录的副本。这样的记录按照一些共识协议被组织成区块，这些协议在区块链节点之间达成共识。加密链接的区块链，连同分布式共识协议，确保了区块链的不可变性。区块链的开放性和不可变性允许任何人检查区块链中的记录历史，从而防止任何试图干扰存储数据并在添加到区块后更改信息的企图。因此，在分散式架构的基础上也可以建立不信任各方之间的信任。区块链的分散化、开放和不可修改的特性使其成为一个透明、公开可验证的系统。此外，由于记录被复制到许多分布式节点，区块链架构允许摆脱单点故障的问题。这些属性的结合使我们可以将区块链技术视为广泛应用的基础。这样的应用可以是物联网（IoT）和物联网系统（CPS）的解决方案，其中需要巨量异构设备之间的交互可能性。传统的集中式解决方案可能面临诸如信息交换节点彼此不信任、大量交互、单点故障存在等困难，以及其他一些问题。如果我们注意到CPS，还应该注意到许多现有的工业网络现在才开始远离上世纪70年代制定的标准，基于区块链的解决方案可能会有效地解决这一领域的许多问题。
- en: The widespread use of various systems that use or claim the use of blockchain
    for the implementation of certain tasks creates a new reality in the modern digital
    world. If the first of the well-known blockchain implementations was associated
    with the creation of a cryptocurrency [[1](#CR1)], then today’s projects have
    long gone beyond this narrow framework. A huge number of projects [[2](#CR2)–[4](#CR4)]
    created on the basis of long-existing platforms or their own implementations create
    significant difficulties in classifying certain systems and evaluating potential
    opportunities. In addition, it makes sense to note that from time to time there
    are projects that only claim to be based on a functioning blockchain or any other
    mechanisms with similar functionality, but do not have the appropriate technologies.
    Such projects try to exploit this problem and attract potential customers to themselves,
    diverting significant resources from real tasks. One of the most famous examples
    of this kind is a pyramid scheme, which was covered by the pseudo-cryptocurrency
    OneCoin [[5](#CR5)].
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 使用各种系统广泛使用或声称使用区块链来实现某些任务在现代数字世界中创造了一个新的现实。如果最早的著名区块链实现之一与创建加密货币有关[[1](#CR1)]，那么今天的项目早已超出了这个狭窄的框架。基于长期存在的平台或其自己的实现创建的大量项目[[2](#CR2)–[4](#CR4)]在分类某些系统和评估潜在机会方面造成了重大困难。此外，值得注意的是，不时会出现一些只声称基于运行中的区块链或具有类似功能的任何其他机制的项目，但并没有适当的技术。这些项目试图利用这个问题，并吸引潜在客户，从而使得真正任务的资源被挪用。这类行为中最著名的一个例子是一个被伪加密货币OneCoin所掩盖的金字塔骗局[[5](#CR5)]。
- en: In addition, it is important to note that even the presence of a successfully
    working blockchain does not guarantee the success of a project implemented on
    its basis. Depending on the application, different parameters may be required
    from the blockchain. Such parameters can be the amount of data that can be written
    to blocks and speed and delay during recording. High speed of reaction to events,
    in particular, is necessary for many solutions in IoT and in CPS, for example,
    in the Internet of vehicles (IoV). It is also necessary to keep in mind that in
    some cases, the transition to the blockchain or an unsuccessful choice of its
    specific implementation can only increase overhead costs and efficiency of interaction
    within the system. However, small improvements to traditional solutions could
    more effectively overcome existing problems.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，重要的是要注意，即使成功运行的区块链存在，也不能保证基于其上实施的项目一定会成功。根据应用程序的不同，区块链可能需要不同的参数。这些参数可以是可以写入块的数据量，以及记录时的速度和延迟。对事件的高速反应速度尤其对许多物联网和CPS解决方案至关重要，例如，对于车联网（IoV）的解决方案。还需要牢记的是，在某些情况下，转向区块链或选择其特定实现失败可能只会增加超额成本和系统内交互的效率。然而，对传统解决方案进行小幅改进可能更有效地克服现有问题。
- en: In this regard, one of the tasks facing researchers is the creation and active
    use of tools that implement and analyze the main mechanisms underlying the construction
    of the blockchain. In the future, this will allow us to build the formation of
    approaches that make it possible to assess the availability and effectiveness
    of certain blockchain construction technologies in software to solve specific
    problems when building IoT/CPS solutions.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这方面，研究人员面临的任务之一是创建和积极使用实现和分析构建区块链的主要机制的工具。将来，这将使我们能够建立形成方法，评估软件中特定问题的解决方案在构建IoT/CPS解决方案时的可用性和效果。
- en: 2 Problematics
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2 问题
- en: Currently, the construction of various systems operating on the basis of the
    blockchain has become a noticeable phenomenon in digital data storage systems.
    In this regard, an important aspect is the analysis of existing and future solutions
    for the correct implementation of the declared functionality and, in addition,
    the very fact of the presence of such functionality.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，基于区块链构建各种系统的现象已经成为数字数据存储系统中的一个显着现象。在这方面，一个重要的方面是分析现有和未来解决方案，以正确实现声明的功能，并且，除此之外，存在这样的功能本身的事实。
- en: A number of studies [[6](#CR6), [7](#CR7)] concentrate on the possibility of
    building various blockchain-based application solutions in the field of IoT and
    CPS. A feature of such developments is the focus on the already-made selection
    in advance of one or two or three specific distributed ledgers for IoT/CPS applications,
    such as Ethereum, Hyperledger Fabric, and IOTA. On the one hand, this approach
    is justified, since it is impossible to build a solution without taking into account
    the peculiarities of specific components, but on the other hand, such an approach
    can potentially limit the functionality of the final solution by excluding certain
    mechanisms of blockchain formation in the solutions being developed.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一些研究[[6](#CR6)，[7](#CR7)]集中于在物联网和CPS领域构建基于各种区块链的应用解决方案的可能性。这些发展的一个特点是事先选择了一两个或三个特定的分布式账本，如以太坊、超级账本
    Fabric 和 IOTA，用于物联网/CPS应用。一方面，这种方法是合理的，因为在开发解决方案时必须考虑到特定组件的特性，但另一方面，这种方法可能会通过排除正在开发的解决方案中的某些区块链形成机制而限制最终解决方案的功能。
- en: However, there are studies in the field of building solutions with a choice
    of blockchain for IoT in smart city, in which the development of their own blockchain
    architecture is carried out [[8](#CR8)]. The development is justified by the redundancy
    of the traditional blockchain and the high computational load on individual nodes
    of the system, which a significant number of smart city elements cannot afford.
    This approach may be quite appropriate in some applications, but it can significantly
    complicate the development of the final solution, introduce additional errors
    into it, and delay implementation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在智能城市中构建选择区块链的解决方案的研究中，存在着自己的区块链架构的开发[[8](#CR8)]。这种开发是有道理的，因为传统的区块链存在冗余性，而系统中的个别节点的高计算负载是许多智能城市元素所无法承受的。这种方法在某些应用中可能相当合适，但它可能会显著复杂化最终解决方案的开发，引入额外的错误，并延迟实施。
- en: In this regard, the question of the possibility of a deliberate selection or
    development of a blockchain with the necessary characteristics in the framework
    of solving a specific problem remains relevant. Also, understanding the essence
    of the functioning of the blockchain is important for all participants in building
    a complete solution from developers at all levels to service personnel and even
    users, and only then can the maximum effect be achieved from the implementation
    of distributed ledgers in various IoT/CPS solutions.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这方面，有关在解决特定问题的框架内有意选择或开发具有必要特性的区块链的可能性的问题仍然是相关的。此外，理解区块链的功能本质对于所有参与者来说都很重要，从各个层次的开发人员到服务人员甚至是用户，只有这样，才能从在各种物联网/CPS解决方案中实施分布式账本中获得最大效益。
- en: One of the approaches that allows us to solve some of these problems is a demonstration
    implementation of the main functionality associated with the formation of a block
    chain. The projects existing in the research area in most cases are ready-made
    solutions that are difficult to analyze. This applies both to cryptocurrencies
    and related blockchains [[1](#CR1), [9](#CR9), [10](#CR10)] and to other decentralized
    systems [[11](#CR11)].
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 允许我们解决其中一些问题的方法之一是演示与区块链形成主要功能相关的示范实现。研究领域中存在的项目在大多数情况下都是难以分析的现成解决方案。这既适用于加密货币和相关的区块链[[1](#CR1)，[9](#CR9)，[10](#CR10)]，也适用于其他分散式系统[[11](#CR11)]。
- en: There are a number of solutions, both educational and demonstration, and researches,
    which allow analyzing the main stages of block formation, node interaction, and
    consensus building [[12](#CR12)–[14](#CR14)]. However, all these solutions either
    simplify the essence of block formation too much or work for the user in the form
    of a black box, which, in fact, without changing the source code, does not allow
    them to be used effectively for research purposes. Table [1](#Tab1) summarizes
    the main characteristics of the designated solutions in the field of research
    modeling of blockchain construction. In this paper, we analyze a software model
    of blockchain formation, designed to partially fill these gaps.Table 1
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多解决方案，既教育性又示范性，也有研究性，允许分析区块形成的主要阶段、节点相互作用和共识建立[[12](#CR12)–[14](#CR14)]。然而，所有这些解决方案要么过于简化了区块形成的本质，要么以黑盒子的形式为用户工作，实际上，如果不更改源代码，则不允许有效地将它们用于研究目的。表[1](#Tab1)总结了在区块链建模研究领域指定的解决方案的主要特性。在本文中，我们分析了一个区块链形成的软件模型，旨在部分填补这些空白。表1
- en: Characteristics of solutions in the field of research modeling of blockchain
    construction
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链建模研究领域解决方案的特性
- en: '| Solutions | Config/install required | Ability to add nodes arbitrarily |
    Implementation of the consensus-building mechanism | Viewing block parameters
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 解决方案 | 需要配置/安装 | 能够任意添加节点 | 实现共识建立机制 | 查看区块参数 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Blockchain demo 2.0 | X | √ | X | ~ |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 区块链演示 2.0 | X | √ | X | ~ |'
- en: '| Visual demo of blockchain technology | X | X | ~ | √ |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 区块链技术的可视演示 | X | X | ~ | √ |'
- en: '| Building a blockchain by Daniel van Flyman | √ | √ | ~ | ~ |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 由丹尼尔·范·弗莱曼构建区块链 | √ | √ | ~ | ~ |'
- en: √ yes, X no, ~ partially implemented or requires code editing for analysis
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: √ 是，X 否，~ 部分实现或需要编辑代码进行分析
- en: 'Developed tools should have the following functionality:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 开发的工具应具有以下功能：
- en: Do not require complex configuration and installation
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不需要复杂的配置和安装
- en: Simulate a decentralized distributed system
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟分散式分布式系统
- en: Be able to add nodes arbitrarily
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够任意添加节点
- en: Conduct transactions
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行交易
- en: Send transactions to all network participants
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向所有网络参与者发送交易
- en: Check transactions received from other network participants
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查从其他网络参与者接收的交易
- en: Support a consensus-building mechanism
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持共识建立机制
- en: Create blocks
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建区块
- en: Send blocks for verification
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送区块进行验证
- en: Check blocks, including displaying their parameters
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查区块，包括显示其参数
- en: Add blocks to the database, if the check is successful
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果检查成功，则将区块添加到数据库中
- en: Have a graphical representation for clarity of work
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有图形表示以清晰显示工作内容
- en: 3 Materials and Methods
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3 材料和方法
- en: Various development/programming environments can be chosen to study the methods
    of building a blockchain, but from the point of view of development efficiency
    and a number of requirements for speed indicators due to the implementation of
    different nodes of a distributed network on one researcher’s computing device,
    the choice of C++ with the cross-platform Qt framework looks more preferable.
    For this study, the task of ensuring cross-platform compatibility is important
    from the point of view of expanding the use of the proposed methods to various
    platforms.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 可以选择各种开发/编程环境来研究区块链的构建方法，但从开发效率和由于在一个研究者的计算设备上实现不同节点的分布式网络所需的速度指标的数量的角度来看，选择C++与跨平台Qt框架看起来更为可取。对于这项研究，从扩展所提出的方法的使用到各种平台的角度来看，确保跨平台兼容性是重要的任务。
- en: Since the study of the main stages of building a blockchain requires the implementation
    of cryptographic functions, a library is needed in which there would be functionality
    for working with cryptography. OpenSSL is a universal cryptographic library. It
    supports almost all low-level hashing, encryption, and electronic signature algorithms
    and also implements most popular cryptographic standards. OpenSSL is written in
    the C programming language, which allows it to be used in C++ projects and guarantees
    high performance and speed of work.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于研究区块链主要阶段的实施需要实现加密功能，因此需要具有处理加密功能的功能的库。 OpenSSL是一个通用的加密库。它支持几乎所有低级哈希、加密和电子签名算法，并且还实现了大多数流行的加密标准。
    OpenSSL是用C编写的，这使得它可以用于C++项目，并保证了高性能和工作速度。
- en: The possibility of researching the constructed block chain assumes that each
    node stores blocks, both created independently and received from other participants
    (in this analysis, each node is assumed to be complete, i.e., it stores the entire
    block chain). In this case, the research is supposed to be carried out within
    the framework of a single computing device, and all nodes are formed on the same
    computer (see Fig. [1](#Fig1)). This condition allows you to approach the choice
    of a data storage system for the block chain on each node using an embedded cross-platform
    database management system (DBMS), such as SQLite. Choosing this solution for
    data storage allows you to potentially increase the performance of the final solution,
    in particular, due to the absence of a client-server architecture, which is not
    required in this case.![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig1_HTML.png)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对构建的区块链进行研究的可能性假设每个节点都存储区块，包括独立创建的和从其他参与者接收的区块（在此分析中，假设每个节点都是完整的，即它存储整个区块链）。在这种情况下，研究应在单个计算设备框架内进行，并且所有节点都形成在同一台计算机上（参见图[1](#Fig1)）。这个条件允许你通过使用内置跨平台数据库管理系统（DBMS），如SQLite，来处理每个节点上的区块链的数据存储系统的选择。选择这种解决方案用于数据存储可以潜在地提高最终解决方案的性能，特别是由于不需要客户端-服务器体系结构，这在这种情况下是不需要的。![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig1_HTML.png)
- en: Fig. 1
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图1
- en: Implementation of all network nodes within the framework of the developed toolkit
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发的工具包框架内实现所有网络节点
- en: 4 Methodology for Analyzing Blockchain Model
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析区块链模型的方法
- en: As part of the study, it is necessary to determine the functions that will be
    analyzed [[15](#CR15), [16](#CR16)]. The corresponding functions are shown in
    Fig. [2](#Fig2).![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig2_HTML.png)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 作为研究的一部分，需要确定将要分析的功能[[15](#CR15), [16](#CR16)]。相应的功能如图[2](#Fig2)所示。![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig2_HTML.png)
- en: Fig. 2
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图2
- en: The main stages of modeling a decentralized distributed system
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 建模去中心化分布式系统的主要阶段
- en: 'The necessary functions within the framework of the developed solution include
    the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发的解决方案框架内需要的功能包括以下内容：
- en: 'Forming nodes:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 形成节点：
- en: Generating a secret key.
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成密钥。
- en: Calculating the public key.
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算公钥。
- en: Formation of the node address.
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 形成节点地址。
- en: 'Generating data for writing to blocks:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成写入区块的数据：
- en: Preparation of the data itself.
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备数据本身。
- en: Checking the correctness/balance.
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查正确性/平衡。
- en: Creating a digital signature.
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数字签名。
- en: Distribution of the prepared data to all nodes.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将准备好的数据分发到所有节点。
- en: Checking the received data from other nodes.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查来自其他节点的接收数据。
- en: 'Forming a block:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 形成一个区块：
- en: Collecting data from other nodes in the preliminary version of the block
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集初步版本区块的其他节点的数据
- en: Building a Merkle tree for block data
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为区块数据构建 Merkle 树
- en: Adding service information to a block, including the hash of the previous block
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将服务信息添加到区块中，包括上一个区块的哈希值
- en: Selecting the nonce value to fulfill the condition for the hash value at the
    current complexity parameter
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择 nonce 值以满足当前复杂性参数下哈希值的条件
- en: Distribution of the received block to other nodes
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将接收到的区块分发给其他节点
- en: Checking the blocks received from other nodes
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查从其他节点接收的区块
- en: Adding correct blocks to the blockchain of the current node
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将正确的区块添加到当前节点的区块链
- en: The nodes will be responsible for the main functionality, i.e., work with the
    formation of data for writing to blocks (transactions), blocks, and the database.
    Each node will have its own database to demonstrate that the network is coming
    to a consensus. In checking, the databases must be the same.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 节点将负责主要功能，即处理写入区块（交易）、区块和数据库的数据形成。每个节点都将有自己的数据库来展示网络正在达成共识。在检查时，数据库必须相同。
- en: The nodes and the program core will model a decentralized distributed system
    [[17](#CR17)]; the nodes will communicate with each other using the core. In this
    case, the kernel can be represented as a data transfer medium between network
    nodes.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 节点和程序核心将模拟去中心化分布式系统[[17](#CR17)]；节点将使用核心相互通信。在这种情况下，内核可以被表示为网络节点之间的数据传输介质。
- en: The control will be carried out using the graphical interface. Control signals
    will be sent to the program core, and the core will either redirect the signal
    to the nodes or perform other necessary actions.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 控制将通过图形界面进行。控制信号将被发送到程序核心，并且核心将要么将信号重定向到节点，要么执行其他必要的操作。
- en: The graphical interface has the form shown in Fig. [3](#Fig3).![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig3_HTML.png)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图形界面的形式如图 [3](#Fig3) 所示。![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig3_HTML.png)
- en: Fig. 3
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3
- en: The main window of the program
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的主窗口
- en: 'The interface has the following elements:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接口具有以下元素：
- en: '1.'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: “Add Node” button – this adds a new node.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “添加节点”按钮 - 这将添加一个新节点。
- en: '2.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: The “Start” button – when pressed, all added nodes begin to continuously calculate
    blocks.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “开始”按钮 - 当按下时，所有添加的节点开始连续计算块。
- en: '3.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: The “Stop” button – this stops the calculation of blocks.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “停止”按钮 - 这将停止块的计算。
- en: '4.'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: The “Accept” button – this applies the hash complexity specified in (5) for
    the block.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “接受”按钮 - 这将应用(5)中指定的哈希复杂度到该块。
- en: '5.'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '5.'
- en: The widget for entering the complexity of the calculated block hash is set by
    a number from 2 to 8\. This number determines the number of zeros at the beginning
    for a 16-bit hash entry.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于输入计算块哈希复杂度的小部件设置为 2 到 8 的数字。该数字确定了 16 位哈希项开头的零的数量。
- en: '6.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '6.'
- en: “Send Tokens” – this opens a window for making a transaction.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “发送令牌” - 这将打开一个窗口，用于进行交易。
- en: '7.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '7.'
- en: “Make block” – when clicked, all nodes start calculating the block hash, but
    only once. This function is used for step-by-step operation.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “制作块” - 当点击时，所有节点开始计算块哈希，但仅一次。该函数用于逐步操作。
- en: '8.'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '8.'
- en: The log field of the selected node – it displays information for tracking the
    current operation of this node.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所选节点的日志字段 - 它显示跟踪该节点当前操作的信息。
- en: '9.'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '9.'
- en: Tabs for switching between network nodes.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于在网络节点之间切换的标签。
- en: '10.'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '10.'
- en: Information about the currently selected node (Fig. [4](#Fig4)).
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当前选定节点的信息（见图 [4](#Fig4)）。
- en: '![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig4_HTML.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig4_HTML.png)'
- en: Fig. 4
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4
- en: Window for preparing data for entering into the block (performing a transaction)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 用于准备输入到块中的数据（执行交易）的窗口
- en: '1.'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: Information about the sender
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 发件人信息
- en: '2.'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: Field for entering the recipient’s address
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于输入接收者地址的字段
- en: '3.'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: Input field for the number of tokens to be transferred
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于转移令牌数量的输入字段
- en: '4.'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: Send button
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 发送按钮
- en: '5.'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '5.'
- en: Cancel button
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 取消按钮
- en: To implement the program, six classes were created in total, of which three
    main classes can be distinguished, mainCore, acting as the application core (see
    Fig. [5](#Fig5)); MainWindow, representing the main window (see Fig. [5](#Fig5));
    and Client, implementing node functions (see Fig. [6](#Fig6)).![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig5_HTML.png)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现该程序，总共创建了六个类，其中可以区分三个主要类，mainCore，作为应用程序核心（见图 [5](#Fig5)）；MainWindow，表示主窗口（见图
    [5](#Fig5)）；和 Client，实现节点功能（见图 [6](#Fig6)）。![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig5_HTML.png)
- en: Fig. 5
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5
- en: Diagram of the mainCore class and the MainWindows class
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: mainCore 类和 MainWindows 类的示意图
- en: '![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig6_HTML.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig6_HTML.png)'
- en: Fig. 6
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6
- en: Diagram of the Client class
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Client 类的示意图
- en: Let us consider some features of the developed tools.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一些开发工具的特点。
- en: In Qt, the signal and slot technique is used for communication between objects.
    A signal is emitted when a certain event occurs. A slot is a function called in
    response to a certain signal. The signal and slot mechanism is a central feature
    of Qt and probably the part that differs the most from the functions provided
    by other frameworks.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Qt 中，信号和插槽技术用于对象之间的通信。当发生某个特定事件时，会发出信号。插槽是响应于某个信号调用的函数。信号和插槽机制是 Qt 的一个核心特性，可能是与其他框架提供的功能最不同的部分。
- en: Signals are emitted by an object when its internal state has changed in any
    way. Signals are public functions and can be emitted from anywhere, but it is
    recommended to emit them only from the class that defines the signal and its subclasses.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当对象的内部状态以任何方式发生变化时，会发出信号。信号是公共函数，可以从任何地方发出，但建议只从定义信号及其子类的类中发出它们。
- en: The slot is called when the associated signal is issued. Slots are ordinary
    C++ functions and can be called in the usual way; their only feature is that signals
    can be connected to them.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 插槽在相关信号发出时被调用。插槽是普通的 C++ 函数，可以按照通常的方式调用；它们的唯一特点是信号可以连接到它们。
- en: 'mainCore and MainWindow interact with each other with the following signals:
    news, generateWallet, wallet, start, changeBalance, sendTokens, stop, makeBlock,
    setHashLevel, and logMessage.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: mainCore 和 MainWindow 之间通过以下信号进行交互：news、generateWallet、wallet、start、changeBalance、sendTokens、stop、makeBlock、setHashLevel
    和 logMessage。
- en: The generateWallet(int num) signal is emitted when the “add node” button is
    pressed. This signal is associated with the addNode slot(int num) and passes the
    “int num” parameter – this parameter means the number of the nodes to be added,
    and it is needed for interaction between the nodes and the graphical interface.
    When the generateWallet signal is emitted, the “addNode” slot is executed. Let
    us look at it in more detail.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当“添加节点”按钮被按下时，将发出generateWallet(int num)信号。此信号与addNode插槽(int num)相关联，并传递“int
    num”参数 - 此参数表示要添加的节点数，并且需要用于节点和图形界面之间的交互。发出generateWallet信号时，将执行“addNode”插槽。让我们更详细地看一下。
- en: “addNode” creates new nodes. Keys are generated for new nodes, and this is where
    the OpenSSL library is used. The EC_KEY_new_by_curve_name () function allocates
    memory and binds the EC_KEY object to the specified curve. In our case, the secp256k1
    curve is selected. EC_KEY_generate_key () generates a new private and public key.
    We get the address by taking the SHA-256 hash from the public key.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: “addNode”创建新节点。为新节点生成密钥，这就是使用OpenSSL库的地方。EC_KEY_new_by_curve_name()函数分配内存并将EC_KEY对象绑定到指定的曲线。在我们的情况下，选择了secp256k1曲线。EC_KEY_generate_key()生成新的私钥和公钥。通过从公钥中取SHA-256哈希来获取地址。
- en: The QSqlDatabase db object is used to create a database for a new node. The
    database is created under the name corresponding to the public key of the node.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用QSqlDatabase db对象创建新节点的数据库。数据库以节点的公钥对应的名称创建。
- en: Next, a new node is created, and its initialization is performed using the generated
    keys. For each new node, a separate thread is created in which it will work.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个新的节点，并使用生成的密钥进行初始化。对于每个新节点，都会创建一个单独的线程来执行它的工作。
- en: The client type object shown in Fig. [7](#Fig7) simulates client actions and
    also uses the startBlock slot and the makeBlock function to generate new blocks.![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig7_HTML.png)
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在图[7](#Fig7)中显示的客户端类型对象模拟客户端操作，还使用startBlock插槽和makeBlock函数生成新的区块。![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig7_HTML.png)
- en: Fig. 7
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图7
- en: Client type object
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端类型对象
- en: First, a signal is emitted with a log message that the calculation of blocks
    begins, and then the makeBlock () function is called, shown in Fig. [8](#Fig8).![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig8_HTML.png)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，发出带有日志消息的信号，表示开始计算区块，然后调用makeBlock()函数，如图[8](#Fig8)所示。![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig8_HTML.png)
- en: Fig. 8
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图8
- en: makeBlock function
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: makeBlock函数
- en: In this function, the block header is formed, and creator is initialized by
    the block header structure, and the startCreateHashBlock () signal is emitted.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，形成区块头，并通过区块头结构初始化creator，并发出startCreateHashBlock()信号。
- en: Creator is an object of the HashBlockCreator type shown in Fig. [9](#Fig9).
    HashBlockCreator is a class created for selecting a hash of a given complexity.
    The init() method initializes a new block header. The hash is selected in the
    start slot, and this slot is called when the start Create Hash Block () signal
    is triggered.![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig9_HTML.png)
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Creator是HashBlockCreator类型的对象，如图[9](#Fig9)所示。HashBlockCreator是为选择给定复杂度的哈希而创建的类。init()方法初始化一个新的区块头。在start插槽中选择哈希，并在触发start
    Create Hash Block()信号时调用此插槽。![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig9_HTML.png)
- en: Fig. 9
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图9
- en: HashBlockCreator source code
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: HashBlockCreator源代码
- en: In this slot, the block header is hashed, the block structure is written to
    the QByteArray header object, and hashing is performed using the QCryptographicHash::hash
    function, according to the Sha-256 algorithm. The resulting hash is converted
    to a 16-bit form and checked. If the received hash does not satisfy the specified
    complexity and there is no signal that it is necessary to stop the hash selection,
    the actions are repeated, but the fields of the block header structure such as
    nonce and timestamp are changed. The nonce field is incremented by 1, and timestamp
    gets a new timestamp. Otherwise, it is checked whether a stop signal has been
    received. If not, a createdCorrectHash signal is emitted that a hash of the desired
    complexity has been selected.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个插槽中，区块头被哈希，区块结构被写入QByteArray头对象，并使用QCryptographicHash::hash函数进行哈希，根据Sha-256算法。得到的哈希转换为16位形式并进行检查。如果收到的哈希不满足指定的复杂度并且没有信号表示需要停止哈希选择，则重复执行动作，但是更改区块头结构的字段，如nonce和timestamp。nonce字段增加1，timestamp获得新的时间戳。否则，检查是否收到停止信号。如果没有，发出createdCorrectHash信号表示选择了所需复杂度的哈希。
- en: The start slot is executed in a separate thread, so that at the time of hash
    selection, the node can process transactions and receive signals from other nodes.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 启动槽在单独的线程中执行，以便在选择哈希时，节点可以处理事务并从其他节点接收信号。
- en: 5 Developed Application of the Analysis Blockchain Technique
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5分析区块链技术的应用程序开发
- en: The tool for analyzing the main stages of building a blockchain at the first
    stage forms the necessary number of nodes involved in further research (Fig. [10](#Fig10)).![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig10_HTML.png)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一阶段构建区块链的主要阶段的分析工具形成了进一步研究所涉及的必要节点数量（图[10](#Fig10)）。![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig10_HTML.png)
- en: Fig. 10
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图10
- en: Adding new nodes. Checking the creation of the corresponding databases
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 添加新节点。 检查相应数据库的创建
- en: The next step is to create new blocks. Blocks can be created both automatically
    and step-by-step. Blocks are created, validated, and added to the node databases.
    The network comes to a consensus. This can be seen from the same data in the databases
    of the nodes.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建新的区块。 区块可以自动创建，也可以分步创建。 区块被创建、验证并添加到节点数据库中。 网络达成共识。 这可以从节点数据库中的相同数据看出。
- en: For the possibility of a detailed study of the performed actions at each step
    of the simulation, all operations are saved in a log file for further analysis.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够详细研究模拟每个步骤执行的操作的可能性，所有操作都保存在日志文件中以供进一步分析。
- en: The introduction of arbitrary records into the blockchain in this simulation
    is implemented in the form of creating transactions. Transactions are formed,
    signed, added to blocks, and written to node databases. The balance of nodes changes,
    and tokens come to the destination address (Figs. [11](#Fig11) and [12](#Fig12)).![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig11_HTML.png)
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模拟中将任意记录引入区块链的方法是通过创建交易来实现的。 交易被形成、签名、添加到区块中，并写入节点数据库中。 节点的余额发生变化，并且令牌到达目标地址（图[11](#Fig11)和[12](#Fig12)）。![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig11_HTML.png)
- en: Fig. 11
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图11
- en: The balance of node number 2 before and after the formation of a new block
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 形成新区块之前和之后节点编号2的余额
- en: '![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig12_HTML.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig12_HTML.png)'
- en: Fig. 12
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图12
- en: Transaction records in the database
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库中的交易记录
- en: An important parameter for each blockchain system is the average block creation
    time and possible deviations from the expected value. These parameters can affect
    the time to reach a network consensus, the necessary time delays for recognition
    by system participants, and the possibility of certain types of attacks. In some
    technologies of blockchain formation, the main parameter that affects the formation
    time of the block creation is the complexity parameter. In the model under study,
    the complexity is set as the upper bound of the calculated hash value, given as
    the number of leading zeros in the hexadecimal representation of the boundary,
    and an additional parameter will be the number of nodes involved. The effect of
    complexity on the time of making entries in the distributed registry for a network
    of four nodes and complexity 6 is shown in Fig. [13](#Fig13), and for complexity
    7 in Fig. [14](#Fig14). The dots indicate the time spent on creating the next
    block in the system.![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig13_HTML.png)
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个区块链系统来说，一个重要参数是平均区块创建时间以及与预期值的可能偏差。 这些参数可能会影响达成网络共识的时间、系统参与者认可所需的时间延迟以及某些类型的攻击可能性。
    在一些区块链形成技术中，影响区块创建时间的主要参数是复杂性参数。 在研究的模型中，复杂性被设置为计算的哈希值的上限，以十六进制表示的边界中的领先零位的数量，并且另一个参数将是参与的节点数量。
    复杂性对于四个节点网络和复杂性为6时在分布式注册表中进行条目的时间的影响如图[13](#Fig13)，以及复杂性为7时的情况如图[14](#Fig14)。
    点表示在系统中创建下一个区块所花费的时间。![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig13_HTML.png)
- en: Fig. 13
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图13
- en: The time spread during the formation of blocks on difficulty 6
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在难度为6时形成区块的时间跨度
- en: '![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig14_HTML.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/513458_1_En_12_Chapter/513458_1_En_12_Fig14_HTML.png)'
- en: Fig. 14
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图14
- en: The time spread during the formation of blocks on difficulty 7
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在难度为7时形成区块的时间跨度
- en: The graphs clearly show the dependence of the average time spent on creating
    the next block on the complexity parameter with characteristic outliers corresponding
    to the Poisson distribution law.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图表清楚地显示了创建下一个区块所花费的平均时间与复杂性参数之间的依赖关系，具有对应于泊松分布定律的特征异常值。
- en: 6 Conclusion
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6 结论
- en: 'The analyzed tool for performing research on blockchain technologies combines
    the ease of use and the ability to track each step of building a blockchain with
    checking current parameters and obtaining aggregating data, which gives certain
    advantages over similar solutions considered earlier. The presented stages allow
    us to evaluate the possibilities of traditional approaches and the potential advantages
    of the latest developments in this area. The paper presents and studies, in particular,
    such components of this technology as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 用于进行区块链技术研究的分析工具结合了易用性和跟踪构建区块链的每一步以及检查当前参数并获取聚合数据的能力，这使其在考虑早期类似解决方案时具有一定优势。所提供的阶段允许我们评估传统方法的可能性以及该领域最新发展的潜在优势。本文特别介绍和研究了以下技术组件：
- en: Creating keys to confirm the authenticity of entries in the distributed registry
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用于确认分布式注册中条目真实性的密钥
- en: Formation of nodes, i.e., participants of a decentralized network
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 形成节点，即分散网络的参与者
- en: Managing the network complexity parameter, to influence the average speed of
    generating records in a distributed registry
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理网络复杂性参数，以影响在分布式注册中生成记录的平均速度
- en: Construction of the Merkle tree, formation of the source block, and selection
    of the nonce parameter to obtain the final block of the system
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 Merkle 树，形成源区块，并选择 nonce 参数以获取系统的最终区块
- en: Checking the created blocks for compliance with the current system rules by
    the block creator
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由区块创建者检查所创建的区块是否符合当前系统规则
- en: Independent view of the status of the block chain at each node of the network
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在网络的每个节点上独立查看区块链状态
- en: Checking the correctness of the created blocks by other participants of the
    distributed network
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过分布式网络的其他参与者创建的区块的正确性检查
- en: An important feature of the analysis is the ability to switch the mode from
    analyzing the general parameters of the system to the step-by-step execution mode
    and monitoring all parameters of operations at each completed step. Thus, the
    results presented in the paper allow, on the one hand, to advance in the field
    of evaluating the functionality of various implementations of blockchain construction
    methods and, on the other hand, to solve the problem of detailed analysis and
    demonstration of the capabilities of the fundamental components of blockchain
    technology. The result of the analysis of distributed registry methods and technologies
    underlying the implementation of the blockchain allows you to choose a solution
    for specific tasks in IoT/CPS or smart city.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 分析的一个重要特点是能够从分析系统的一般参数模式切换到逐步执行模式，并在每个完成的步骤中监视所有操作的所有参数。因此，本文提供的结果一方面允许在评估各种区块链构建方法的功能方面取得进展，另一方面解决了详细分析和展示区块链技术基本组件能力的问题。分析分布式注册方法和支持区块链实现的技术允许您为物联网/
    CPS 或智能城市中的特定任务选择解决方案。
