- en: © The Author(s), under exclusive license to APress Media, LLC, part of Springer
    Nature 2022D. P. BauerGetting Started with Ethereum [https://doi.org/10.1007/978-1-4842-8045-4_10](https://doi.org/10.1007/978-1-4842-8045-4_10)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 作者，Apress Media, LLC 独家许可，Springer Nature 2022D. P. Bauer 使用以太坊入门 [https://doi.org/10.1007/978-1-4842-8045-4_10](https://doi.org/10.1007/978-1-4842-8045-4_10)
- en: 10. Chainlink
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10. Chainlink
- en: Davi Pedro Bauer^([1](#Aff2)  )(1)Campo Bom, Rio Grande do Sul, Brazil
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Davi Pedro Bauer^([1](#Aff2)  )(1)Campo Bom, Rio Grande do Sul, Brazil
- en: Chainlink^([1](#Fn1)) is a decentralized network of nodes that uses oracles
    to transfer data and information from off-blockchain sources to on-blockchain
    smart contracts. In this chapter, you will learn how to use the ETH/USD price
    feed on the Kovan testnet to access the most recent cryptocurrency price inside
    smart contracts.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Chainlink^([1](#Fn1)) 是一个去中心化的节点网络，使用预言机将来自区块链外部来源的数据和信息传输到区块链智能合约中。在本章中，您将学习如何使用
    Kovan 测试网上的 ETH/USD 价格源来访问智能合约内部的最新加密货币价格。
- en: 'At the end of this chapter, you will be able to do the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够执行以下操作：
- en: Create a simple smart contact for price consumption
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为价格消费创建一个简单的智能合约
- en: Set up an Infura project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置一个 Infura 项目
- en: Configure the private key to sign transactions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置用于签署交易的私钥
- en: Deploy the smart contract on the Kovan network
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Kovan 网络上部署智能合约
- en: Get price information from the smart contact on the Kovan network
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Kovan 网络上的智能合约获取价格信息
- en: Get Crypto Prices Inside Smart Contracts Using Chainlink Oracles
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Chainlink 预言机在智能合约内部获取加密货币价格
- en: Let’s start by creating a new project and then installing the Chainlink contracts
    package. You will use an existing contract address that tells you the price of
    the ETH/USD pair, and then you will be able to see that price being returned by
    your smart contact.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个新项目开始，然后安装 Chainlink 合约包。您将使用一个现有的合约地址，该地址告诉您 ETH/USD 交易对的价格，然后您将能够看到该价格由您的智能合约返回。
- en: Creating the Project
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建项目
- en: Go to the Terminal menu, click New Terminal, and initialize a new Truffle project.$
    truffle initNow, initialize the project folder.$ npm initFinally, install the
    Chainlink contracts package.^([2](#Fn2))$ npm install @chainlink/contracts@0.1.9
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 转到终端菜单，点击新终端，并初始化一个新的 Truffle 项目。$ truffle init现在，初始化项目文件夹。$ npm init最后，安装 Chainlink
    合约包。^([2](#Fn2))$ npm install @chainlink/contracts@0.1.9
- en: Creating the Smart Contract
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建智能合约
- en: Create a new smart contract for price consumption.$ touch contracts/PriceConsumer.solOpen
    the file PriceConsumer.sol (Figure [10-1](#Fig1)).![](../images/521550_1_En_10_Chapter/521550_1_En_10_Fig1_HTML.jpg)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为价格消费创建一个新的智能合约。$ touch contracts/PriceConsumer.sol打开文件 PriceConsumer.sol（图
    [10-1](#Fig1)）。![](../images/521550_1_En_10_Chapter/521550_1_En_10_Fig1_HTML.jpg)
- en: 'A screenshot of the V S code contracts folder has the Price Consumer dot s
    o l tab open. The left pane ''Explorer'' has other sections: Contracts under which
    Migrations dot s o l and Price Consumer dot s o l (which is selected) is present,
    migrations, node underscore modules, test and two dot j s o n and one dot j s
    file.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: V S code 合同文件夹的屏幕截图显示了 Price Consumer dot s o l 标签页已打开。左侧窗格“资源管理器”有其他部分：合同下有
    Migrations dot s o l 和 Price Consumer dot s o l（已选择）的存在，迁移，节点模块，测试以及两个 dot j s
    o n 和一个 dot j s 文件。
- en: Figure 10-1
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-1
- en: VS Code contracts folder
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 合同文件夹
- en: 'In the PriceConsumer.sol file, define the Solidity version and then import
    the Chainlink contract interface. After that, define the contract name and the
    contract constructor.// SPDX-License-Identifier: MITpragma solidity ^0.8.0;import
    "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol";contract
    PriceConsumer {    AggregatorV3Interface internal priceFeed;    constructor(){        priceFeed
    = AggregatorV3Interface()    }}Go to [https://docs.chain.link/docs/ethereum-addresses](https://docs.chain.link/docs/ethereum-addresses)
    and scroll down to the Kovan section. Copy the Proxy address on the line “ETH/USD”
    (Figure [10-2](#Fig2)).![](../images/521550_1_En_10_Chapter/521550_1_En_10_Fig2_HTML.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '在 PriceConsumer.sol 文件中，定义 Solidity 版本，然后导入 Chainlink 合同接口。之后，定义合同名称和合同构造函数。//
    SPDX-License-Identifier: MITpragma solidity ^0.8.0;import "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol";contract
    PriceConsumer {    AggregatorV3Interface internal priceFeed;    constructor(){        priceFeed
    = AggregatorV3Interface()    }}转到 [https://docs.chain.link/docs/ethereum-addresses](https://docs.chain.link/docs/ethereum-addresses)
    并滚动到 Kovan 部分。复制“ETH/USD”行上的代理地址（图 [10-2](#Fig2)）。![](../images/521550_1_En_10_Chapter/521550_1_En_10_Fig2_HTML.jpg)'
- en: A screenshot of the chainlink price feeds has 'Using Price Feeds' listed on
    the left. There are multiple options under 'Using Price Feeds', one of them being
    'Contact Addresses' which is selected. Under it, 'Etherium Price Feeds' is selected.
    On the right, there is a table with 3 columns with details of the price feeds.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Chainlink 价格源的屏幕截图左侧列出了“使用价格源”。在“使用价格源”下有多个选项，其中之一是“联系地址”，已选中。在其下，“以太坊价格源”被选中。右侧是一个具有
    3 列详细信息的表格，显示价格源的详细信息。
- en: Figure 10-2
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-2
- en: Chainlink price feeds
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Chainlink 价格源
- en: 'Paste the address into the AggregatorV3Interface constructor. After that, create
    the function to get the price.// SPDX-License-Identifier: MITpragma solidity ^0.8.0;import
    "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol";contract
    PriceConsumer {    AggregatorV3Interface internal priceFeed;    constructor(){        priceFeed
    = AggregatorV3Interface(0x9326BFA02ADD2366b30bacB125260Af641031331);    }    function
    getThePrice() public view returns (int){        (            uint80 roundID,            int
    price,            uint startedAt,            uint timeStamp,            uint80
    answeredInRound        ) = priceFeed.latestRoundData();        return price;    }}'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '将地址粘贴到 AggregatorV3Interface 构造函数中。之后，创建获取价格的函数。// SPDX-License-Identifier:
    MITpragma solidity ^0.8.0;import "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol";contract
    PriceConsumer {    AggregatorV3Interface internal priceFeed;    constructor(){        priceFeed
    = AggregatorV3Interface(0x9326BFA02ADD2366b30bacB125260Af641031331);    }    function
    getThePrice() public view returns (int){        (            uint80 roundID,            int
    price,            uint startedAt,            uint timeStamp,            uint80
    answeredInRound        ) = priceFeed.latestRoundData();        return price;    }}'
- en: Creating the Migration
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建迁移
- en: Create the migration file in the migrations folder.$ touch migrations/2_deploy_contracts.solWrite
    code to deploy the PriceConsumer smart contract (Figure [10-3](#Fig3)).const PriceConsumer
    = artifacts.require("PriceConsumer");module.exports = function(deployer){    deployer.deploy(PriceConsumer);};![](../images/521550_1_En_10_Chapter/521550_1_En_10_Fig3_HTML.jpg)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在迁移文件夹中创建迁移文件。$ touch migrations/2_deploy_contracts.sol编写代码以部署 PriceConsumer
    智能合约（见图[10-3](#Fig3)）。const PriceConsumer = artifacts.require("PriceConsumer");module.exports
    = function(deployer){    deployer.deploy(PriceConsumer);};![](../images/521550_1_En_10_Chapter/521550_1_En_10_Fig3_HTML.jpg)
- en: A screenshot of the V S code migrations folder has the 2 underscore deploy underscore
    contracts dot j s tab open. The number 1 is displayed on the window.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: V S code 迁移文件夹的屏幕截图有 2 个下划线 deploy 下划线 contracts dot j s 标签打开。窗口上显示数字 1。
- en: Figure 10-3
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-3
- en: VS Code migrations folder
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 迁移文件夹
- en: Setting Up Your Infura Project
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置你的 Infura 项目
- en: Go to [https://infura.io](https://infura.io) and access your dashboard. Click
    Ethereum and then click “Create a project”. Finally, define the project name and
    copy the project ID (Figure [10-4](#Fig4)). Notice that you can connect with different
    testnets and also to the mainnet.![](../images/521550_1_En_10_Chapter/521550_1_En_10_Fig4_HTML.jpg)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 转到 [https://infura.io](https://infura.io) 并访问您的仪表板。点击以太坊，然后点击“创建项目”。最后，定义项目名称并复制项目
    ID（见图[10-4](#Fig4)）。注意，您可以连接到不同的测试网络，也可以连接到主网络。![](../images/521550_1_En_10_Chapter/521550_1_En_10_Fig4_HTML.jpg)
- en: A screenshot of the Infura settings has a dashboard on the left. The bar on
    top has the title ethereum. The Settings tab is open. The Project Details have
    to be entered on the main screen. The first section has Name with 'ethereum' entered,
    which is a required field, and the second section has Keys with the Project I
    D displayed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Infura 设置的屏幕截图左侧有一个仪表板。顶部的条形上有标题以太坊。设置标签已打开。在主屏幕上必须输入项目详细信息。第一部分有一个名为 '以太坊'
    的名称，是一个必填字段，第二部分有项目 I D 显示的密钥。
- en: Figure 10-4
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-4
- en: Infura settings
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 安装钱包提供程序 hdwallet 包。这也会安装启用 HD 钱包的 Web 3 提供程序，用于为从 12 或 24 个字助记符派生的地址签名交易。$
    npm install @truffle/hdwallet-provider@1.2.3
- en: Now, click Save Changes.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Ropsten Infura URL 更改为 kovan。
- en: Configuring the Wallet to Sign Transactions
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 truffle-config.js 中，取消注释 ropsten 网络部分，并更改以下值：
- en: Install the file system fs package. This package provides a lot of useful functionality
    to access and interact with the file system.$ npm install fsInstall the wallet
    provider hdwallet package. This also installs the HD wallet-enabled Web 3 provider,
    which is used to sign transactions for addresses derived from a 12- or 24-word
    mnemonic.$ npm install @truffle/hdwallet-provider@1.2.3Open the truffle-config.js
    file and uncomment the HDWalletProvider code section.const HDWalletProvider =
    require('@truffle/hdwallet-provider');const infuraKey = '<your_infura_key>';const
    fs = require('fs');const mnemonic = fs.readFileSync(".secret").toString().trim();
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 安装文件系统 fs 包。该包提供了许多有用的功能，用于访问和与文件系统交互。$ npm install fs
- en: Paste your Infura project ID as a value for the variable infuraKey.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 转到浏览器，并打开连接到 Infura 网络的您的 MetaMask 钱包。点击“您的账户”，然后点击“设置”。最后，点击“安全与隐私”（图 [10-5](#Fig5)）。![](../images/521550_1_En_10_Chapter/521550_1_En_10_Fig5_HTML.jpg)
- en: Configuring the Network
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置钱包以签署交易
- en: 'In truffle-config.js, uncomment the ropsten network section and change the
    following values:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 truffle-config.js 文件，并取消注释 HDWalletProvider 代码部分。const HDWalletProvider =
    require('@truffle/hdwallet-provider');const infuraKey = '<your_infura_key>';const
    fs = require('fs');const mnemonic = fs.readFileSync(".secret").toString().trim();
- en: Change ropsten to kovan.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 secret 文件如下：$ touch .secret
- en: Change the Ropsten Infura URL to kovan.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置网络
- en: Change YOUR-PROJECT-ID to ${infuraKey}.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 ropsten 更改为 kovan。
- en: Change network_id to 42.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Infura 设置
- en: 'kovan: {    provider: () => new HDWalletProvider(mnemonic, `https://kovan.infura.io/v3/${infuraKey}`),    network_id:
    42,    gas: 5500000,    confirmations: 2,    timeoutBlocks: 200,    skipDryRun:
    true},'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 将 YOUR-PROJECT-ID 更改为 ${infuraKey}。
- en: Configuring the Solidity Compiler
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将您的 Infura 项目 ID 粘贴为变量 infuraKey 的值。
- en: 'Still in truffle.config.js, uncomment the compilers section and change the
    version to 0.8.0.compilers: {    solc: {        version: "0.8.0",        docker:
    true,        settings: {            optimizer: {                enabled: false,                runs:
    200            },            evmVersion: "byzantium"        }    }},'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 配置私钥
- en: Configuring the Private Key
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 Solidity 编译器
- en: Create the secret file as follows:$ touch .secretGo to the browser and open
    your MetaMask wallet connected to the Infura network. Click “Your Account” and
    then click “Settings”. Finally, click “Security & Privacy” (Figure [10-5](#Fig5)).![](../images/521550_1_En_10_Chapter/521550_1_En_10_Fig5_HTML.jpg)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击“保存更改”。
- en: A screenshot of the Security and Privacy window for the Reveal Seed Phrase setting.
    There is text that reads 'Reveal Seed Phrase' and a button below with the same
    text, where the cursor is placed.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Reveal Seed Phrase 设置的安全与隐私窗口截图。有一个文本写着 '显示种子短语'，下面有一个相同文本的按钮，光标放在按钮上。
- en: Figure 10-5
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-5
- en: 'MetaMask: revealing the seed phrase'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: MetaMask：显示种子短语
- en: You have the option to view your seed phrase, but be aware that this information
    is sensitive, and if someone has access to it, they will be able to restore your
    wallet and make use of your funds.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您有查看种子短语的选项，但请注意这些信息很敏感，如果有人可以访问它，他们将能够恢复您的钱包并使用您的资金。
- en: Click Reveal Seed Phrase and enter your wallet password to continue. Copy the
    private key. Go back to Visual Studio Code and paste the private secret recovery
    phrase in the file .secret.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“显示种子短语”，然后输入您的钱包密码以继续。复制私钥。返回到 Visual Studio Code，并将私密恢复短语粘贴到文件 .secret 中。
- en: Compiling the Smart Contract
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编译智能合约
- en: Compile the contract using Truffle.$ truffle compile
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Truffle 编译合约。$ truffle compile
- en: Deploying the Smart Contract
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署智能合约
- en: Deploy the contract to the Kovan network using Truffle. The migrate command
    runs migrations to deploy contracts on the Kovan network.$ truffle migrate --network
    kovanWait for the contract to be deployed and the transactions to be confirmed
    on the blockchain. Now, check your contract address that was created (Figure [10-6](#Fig6)).![](../images/521550_1_En_10_Chapter/521550_1_En_10_Fig6_HTML.jpg)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Truffle 将合约部署到 Kovan 网络。迁移命令在 Kovan 网络上运行迁移以部署合约。$ truffle migrate --network
    kovan等待合约部署和区块链上的交易确认。现在，检查您创建的合约地址（图 [10-6](#Fig6)）。![](../images/521550_1_En_10_Chapter/521550_1_En_10_Fig6_HTML.jpg)
- en: A screenshot of the V S code deployed contract output window has Problems, Output,
    Terminal and Debug console tabs. The codes are displayed in the terminal tab,
    with details of transaction, blocks, contract address, block number and timestamp,
    account, balance, gas used, gas price, value sent, and total cost.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: V S code 部署合约输出窗口的截图包括 Problems、Output、Terminal 和 Debug console 选项卡。代码显示在终端选项卡中，显示了交易、区块、合约地址、区块号、时间戳、账户、余额、使用的
    gas、gas 价格、发送的价值和总成本的详细信息。
- en: Figure 10-6
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-6
- en: VS Code deployed contract output
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 部署合约输出
- en: Getting the Price Information from the Smart Contract
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从智能合约获取价格信息
- en: Instantiate the contract using the Truffle console. This console command opens
    a basic interactive console that connects to an Ethereum client on the Kovan network:$
    truffle console --network kovanNow, use the deployed command to return the deployed
    contract instance on the Kovan network, as shown here:truffle(kovan) let instance
    = await PriceConsumer.deployed()Call the method getThePrice. The let command stores
    the method result in the variable price, and the await command will execute the
    method asynchronously.truffle(kovan) let price = await instance.getThePrice()Finally,
    output the result to number. The method toNumber() converts big number objects
    to regular numbers.truffle(kovan) price.toNumber()265499339990
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Truffle 控制台实例化合约。此控制台命令将打开一个基本的交互式控制台，连接到 Kovan 网络上的以太坊客户端：$ truffle console
    --network kovan现在，使用 deployed 命令在 Kovan 网络上返回已部署的合约实例，如下所示：truffle(kovan) let
    instance = await PriceConsumer.deployed()调用 getThePrice 方法。let 命令将方法结果存储在变量 price
    中，而 await 命令将异步执行该方法。truffle(kovan) let price = await instance.getThePrice()最后，将结果输出为数字。toNumber()
    方法将大数对象转换为常规数字。truffle(kovan) price.toNumber()265499339990
- en: That’s it, you just created a smart contract and consumed the Chainlink price
    feed oracle!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，您刚刚创建了一个智能合约，并使用了 Chainlink 价格信息预言机！
- en: Summary
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to create a simple smart contract using Chainlink
    to get price information from a Chainlink oracle.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何使用 Chainlink 创建一个简单的智能合约，以从 Chainlink 预言机获取价格信息。
- en: In the next chapter, you will learn about Nethereum, a .NET library for Ethereum.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解到 Nethereum，一个用于以太坊的 .NET 库。
