- en: Chapter 4\. The Evolution to Ethereum
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。演变到以太坊
- en: In its early days, Bitcoin was considered an all-encompassing technological
    marvel. Over time, however, developers began to realize that blockchain technology
    could support additional features. This led to the introduction of new concepts
    built on top of Bitcoin, and then an entirely new blockchain known as Ethereum.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期，比特币被视为一种全方位的技术奇迹。然而，随着时间的推移，开发人员开始意识到区块链技术可以支持额外的功能。这导致了在比特币之上引入新概念，然后是一个完全新的被称为以太坊的区块链的出现。
- en: Improving Bitcoin’s Limited Functionality
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高比特币的有限功能
- en: Bitcoin was the first decentralized consensus protocol to apply the concept
    of *scripted money*—that is, the idea that cryptocurrency transactions could transmit
    funds depending on the true/false status of running a limited program. Initially,
    many saw bitcoin as “programmable money,” but scripted money is a better analogy
    due to its limited functionality. Similarly, in the early days bitcoin was typically
    viewed as a currency, but along the way it began to be looked at as more of a
    *store of value* and sparked many debates on the difference between the two.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币是第一个应用*脚本货币*概念的去中心化共识协议——也就是说，加密货币交易可以根据运行有限程序的真/假状态传输资金的想法。最初，许多人将比特币视为“可编程货币”，但由于其功能有限，脚本货币更能作为一个更好的类比。同样，在早期，比特币通常被视为一种货币，但在发展过程中，它开始被看作更多的是一种*价值储存*，并引发了关于这两者之间差异的许多争论。
- en: The evolution of Bitcoin led an influential and ardent group of followers in
    the developer community to advocate for a cautious and limited approach to protocol
    changes, for security and safety reasons. Protocol changes like block size increases
    were viewed with skepticism. These advocates wanted to maintain the core goals
    of remaining decentralized and being inclusive, to the extent that anyone could
    run a full node on cheap hardware with a low-throughput internet connection.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币的演变导致了开发者社区中一群有影响力且热情的追随者倡导对协议更为谨慎和有限的变更，出于安全和安全原因。诸如增加区块大小等协议更改被视为持怀疑态度。这些倡导者希望保持保持去中心化和包容性的核心目标，以至于任何人都可以在廉价硬件上以低吞吐量的互联网连接运行一个完整节点。
- en: As we touched on in the previous chapter, however, some Bitcoin developers prompted
    a movement toward scaling solutions. Bitcoin became the foundation for what would
    become programmable money as developers began to devise ways to build on top of
    it, then later build entirely new blockchains.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一章中提到的，一些比特币开发者促使了向扩展解决方案的运动。随着开发人员开始构想在其上构建的方式，比特币成为了将成为可编程货币的基础，随后又构建了完全新的区块链。
- en: Colored Coins and Tokens
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 彩色币和代币
- en: '*Colored coins* enable real-world assets such as equities (e.g., stocks) or
    commodities (e.g., gold) to be represented and managed on the Bitcoin blockchain.
     Bitcoin’s scripting language is intentionally designed as *Turing incomplete*,
    meaning the available built-in commands are limited to reduce complexity in the
    network. Because of this, colored coins are built on top of, rather than directly
    on, the Bitcoin blockchain*.*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*彩色硬币*使得真实世界资产，如股票或商品（如黄金），可以在比特币区块链上进行表示和管理。比特币的脚本语言被有意设计为*图灵不完全*，这意味着可用的内置命令是有限的，以减少网络中的复杂性。因此，彩色硬币是在比特币区块链之上构建的，而不是直接在比特币区块链上构建的。'
- en: Bitcoin is limited in scope. However, its blockchain enables the storage of
    small amounts of data or metadata. The representation of some other asset can
    be attributed to the value of some amount of bitcoin via an address (for example,
    *17VZNX1SN5NtKa8UQFxwQbFeFc3iqRYhem*). The concept of colored coins introduced
    the idea of *tokens,* which are units of value built by programming a unique ledger
    on top of an existing blockchain. Tokens often look and act like other cryptocurrencies,
    with the exception that they are powered by another blockchain network. Tokens
    were foundational to the development of Ethereum’s ecosystem, and the advent of
    colored coins on Bitcoin led to tokens on other blockchains.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币的范围有限。然而，其区块链使得存储少量数据或元数据成为可能。一些其他资产的表示可以通过一个地址（例如，*17VZNX1SN5NtKa8UQFxwQbFeFc3iqRYhem*）来归因于某些比特币的价值。彩色硬币的概念引入了*代币*的想法，这是通过在现有区块链上编程一个唯一分类账来构建价值单位的。代币通常看起来和其他加密货币类似，唯一的例外是它们由另一个区块链网络提供支持。代币对以太坊生态系统的发展起到了基础作用，而比特币上的彩色硬币的出现导致了其他区块链上的代币。
- en: Mastercoin and Smart Contracts
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[Mastercoin 和智能合约](http://www.mastercoinfoundation.org)'
- en: The evolution of Bitcoin’s scaling solutions advanced in 2013 with the development
    of [Mastercoin](http://www.mastercoinfoundation.org). Mastercoin was built on
    top of Bitcoin to add features not originally included in Bitcoin’s core protocol.
    This allowed for more sophisticated programmable money concepts beyond Bitcoin’s
    simple functionality. One of these was the concept of *smart contracts*, which
    are complex programs that run on blockchains.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 2013 年，比特币扩容解决方案的演进在[Mastercoin](http://www.mastercoinfoundation.org)的发展中得到了推进。Mastercoin
    是在比特币之上构建的，以添加比特币核心协议中原本不包括的功能。这使得比特币的简单功能之外可以实现更复杂的可编程货币概念。其中之一就是*智能合约*的概念，即在区块链上运行的复杂程序。
- en: Mastercoin [introduced the notion of additional cryptocurrencies](https://oreil.ly/oEFfK),
    or tokens. Before Mastercoin, it was not easy to create new cryptocurrencies outside
    of software forks. The ability to allow money sent to a wallet to be rerouted
    to another wallet via smart contracts was not a feature of Bitcoin. In essence,
    Mastercoin, though now considered primitive, became a study of the capabilities
    of Bitcoin and exploring new functionality.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Mastercoin[引入了额外加密货币](https://oreil.ly/oEFfK)或代币的概念。在Mastercoin之前，创建新的加密货币并非易事，除了软件分叉。通过智能合约允许将发送到钱包的资金重新路由到另一个钱包并不是比特币的功能。实质上，Mastercoin，尽管现在被认为是原始的，成为了研究比特币功能和探索新功能的学习项目。
- en: Mastercoin (and its inventor, J.R. Willett) is also credited with providing
    the first *initial coin offering* (ICO), a blockchain-based fundraising mechanism
    created to fund the initial protocol development.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Mastercoin（及其发明者J.R. Willett）还被认为是提供了第一个*初始币发行*（ICO）的人，这是一种基于区块链的募资机制，旨在为初始协议开发提供资金。
- en: Understanding Omni Layer
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Omni Layer
- en: '[Omni Layer](https://www.omnilayer.org) is an open source, decentralized asset
    infrastructure built on Bitcoin. It is the successor of the work produced by the
    Mastercoin Foundation with the funding from its ICO in 2013\. Omni Layer is an
    ongoing project, with its reference implementation known as Omni Core.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[Omni Layer](https://www.omnilayer.org)是一个建立在比特币上的开源、分散的资产基础设施。它是由Mastercoin基金会在2013年的ICO资金支持下产生的工作的继任者。Omni
    Layer是一个持续进行的项目，其参考实现称为Omni Core。'
- en: Omni Core essentially enhances elements of Bitcoin with additional features.
    It also provides smart contract capabilities, enabling developers to automate
    currency functions in a decentralized and transparent way. Smart contracts let
    transactions and agreements execute on the blockchain, performing functions beyond
    currency operations. These functions include the ability to use tokens to create
    new cryptocurrencies built on top of other blockchain protocols (among other properties
    explained in [Chapter 5](ch05.xhtml#tokenize_everything-id00031)). [Figure 4-1](#overview_of_omni_layerapostrophes_techn)
    illustrates the basic structure of how Omni works.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Omni Core本质上增强了比特币的元素，并附加了额外的功能。它还提供了智能合约的能力，使开发者能够以分散且透明的方式自动化货币功能。智能合约允许交易和协议在区块链上执行，执行超出货币操作的功能。这些功能包括使用代币在其他区块链协议之上创建新的加密货币（在[第5章](ch05.xhtml#tokenize_everything-id00031)中解释的其他属性中）。[图4-1](#overview_of_omni_layerapostrophes_techn)展示了Omni工作的基本结构。
- en: '![](Images/mabc_0401.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0401.png)'
- en: Figure 4-1\. Overview of Omni Layer’s technical stack
  id: totrans-17
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-1. Omni Layer技术栈概览
- en: Tokens created on Omni include [MaidSafe](https://maidsafe.net), a decentralized
    autonomous data network first proposed by engineer David Irvine in 2006\. MaidSafe
    later implemented Omni Layer by using smart contract technology to enable an ICO,
    creating the MAID token, which is used within the network.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Omni 上创建的代币包括[MaidSafe](https://maidsafe.net)，这是由工程师 David Irvine 在 2006 年首次提出的去中心化自治数据网络。MaidSafe
    后来通过使用智能合约技术实施 Omni Layer，通过 ICO 创建了 MAID 代币，该代币在网络内使用。
- en: Tether
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Tether
- en: 'The most well-known project built on Omni is [Tether](https://oreil.ly/sM9CP).
    It encompasses a use case that is incredibly important in the cryptocurrency world:
    how to represent a stable asset class in an ecosystem of volatile tokens. Tether
    is a digital blockchain cryptocurrency, and its aim is to provide a stable reserve
    currency pegged to the US dollar. According to the Tether whitepaper, one Tether
    token is pegged to one US dollar.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Omni 上最知名的项目是[Tether](https://oreil.ly/sM9CP)。它涵盖了加密货币世界中非常重要的一个用例：如何在波动性代币的生态系统中代表稳定的资产类别。Tether
    是一种数字区块链加密货币，其目标是提供与美元挂钩的稳定储备货币。根据 Tether 的白皮书，一个 Tether 代币挂钩一个美元。
- en: Real-world assets do present a problem when represented on a blockchain. That
    is, how do you actually peg the value of that asset in tokenized form? Tether
    claims to be backed by the US dollar, but unfortunately other than [its website
    listing balances](https://oreil.ly/4Qjjs), there is little evidence that there
    really is one US dollar in a bank account for every tether in circulation. The
    company behind Tether promised to do a full audit of its one-to-one peg to the
    US dollar, but in 2018 it [dissolved its relationship with its accounting firm](https://oreil.ly/i3Nz1)
    without explanation. The total outstanding tether on the market arbitrarily fluctuates,
    and tether has even [lost its one USD to one tether peg in the markets](https://oreil.ly/5mYlZ)
    only to recover without much explanation.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在区块链上代表现实世界资产确实存在问题。也就是说，如何实际上将该资产的价值固定在代币化形式上？Tether 声称其由美元支持，但不幸的是，除了[其网站列出的余额](https://oreil.ly/4Qjjs)之外，几乎没有证据表明每一个流通中的
    Tether 确实有一个美元存放在银行账户中。Tether 背后的公司承诺对其与美元的一对一挂钩进行全面审计，但在 2018 年[解除了与其会计师事务所的关系](https://oreil.ly/i3Nz1)，并没有解释原因。市场上未清算的
    Tether 总量任意波动，甚至 Tether 在市场上[失去了与美元一对一挂钩](https://oreil.ly/5mYlZ)，然后又在没有太多解释的情况下恢复了。
- en: While Tether is an interesting early use case for tokenization and implementation
    of Mastercoin’s successor Omni Layer, it is still very experimental. It shows
    that backing a digital blockchain cryptocurrency such as tether with real-world
    assets such as the US dollar is still highly speculative and a work in progress.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Tether 是一种有趣的早期代币化用例，是 Mastercoin 的继任者 Omni Layer 的实施，但它仍然是非常试验性的。这表明，将数字区块链加密货币（如
    Tether）以美元等实际世界资产作为支撑仍然是高度投机性的，并且仍在不断改进中。
- en: How Omni Layer works
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Omni Layer 的工作原理
- en: 'The Omni Layer team set out to build all the features that J.R. Willett promised
    in his [“Second Bitcoin Whitepaper”](https://oreil.ly/fbRRU). These features included
    the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Omni Layer 团队着手构建 J.R. Willett 在他的[“第二篇比特币白皮书”](https://oreil.ly/fbRRU)中承诺的所有功能。这些功能包括以下内容：
- en: Custom currencies
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义货币
- en: Anyone can create currencies where the ledger is managed by the Omni Layer network.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 任何人都可以创建由 Omni Layer 网络管理账本的货币。
- en: Decentralized exchange
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 分散式交易所
- en: Instead of using a centralized exchange to facilitate the exchange of two currencies
    between parties, the Omni Layer code executes this trade.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 不使用中心化交易所来促进双方之间两种货币的交换，而是 Omni Layer 代码执行此交易。
- en: When launching a proof-of-work–based blockchain, it is important to build a
    strong network of miners to dedicate *hash power* (computer infrastructure) to
    processing transactions. The larger the network, the more decentralized, trustworthy,
    and secure it becomes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动基于工作证明的区块链时，建立一个强大的矿工网络来专门分配*哈希算力*（计算基础设施）来处理交易至关重要。网络越大，去中心化、可信任和安全性就越高。
- en: Omni wanted to focus its efforts on making tokenization and other smart contract
    features work on a decentralized blockchain without the burden of building that
    network effect. By building a second-layer protocol on top of Bitcoin, Omni benefited
    from the large network effect Bitcoin already had.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Omni 希望专注于在去中心化区块链上使代币化和其他智能合约功能正常运作，而无需建立该网络效应的负担。通过在比特币之上构建一个第二层协议，Omni 受益于比特币已经拥有的庞大网络效应。
- en: Adding custom logic
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加自定义逻辑
- en: Bitcoin performs *logical operations*—rules that maintain the blockchain, proving
    that the fundamental concept of achieving consensus works. Omni adds custom logical
    operations to the Bitcoin blockchain.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币执行*逻辑操作*——维护区块链的规则，证明了实现共识的基本概念的可行性。Omni 向比特币区块链添加自定义逻辑操作。
- en: After March 2014, Bitcoin added the `OP_RETURN` field, which enables the attachment
    of additional data to a bitcoin transaction. Once the `OP_RETURN` field was added
    to Bitcoin, every Omni transaction began storing a record within the `OP_RETURN`
    field of a bitcoin transaction.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2014 年 3 月之后，比特币添加了 `OP_RETURN` 字段，该字段使得可以将额外数据附加到比特币交易中。一旦 `OP_RETURN` 字段被添加到比特币中，每个
    Omni 交易都开始在比特币交易的 `OP_RETURN` 字段中存储一个记录。
- en: '[Figure 4-2](#example_of_an_omni_transaction_on_the_b) shows an example Tether
    transaction recorded on the Bitcoin blockchain. This is a small transaction of
    five tether, also known as USDT. The transaction ID on the Bitcoin blockchain
    is:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 4-2](#example_of_an_omni_transaction_on_the_b)显示了在比特币区块链上记录的 Tether 交易示例。这是一笔小额交易，为五个
    Tether，也称为 USDT。在比特币区块链上的交易 ID 是：'
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](Images/mabc_0402.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0402.png)'
- en: Figure 4-2\. Example of an Omni transaction on the Bitcoin blockchain
  id: totrans-37
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-2。比特币区块链上 Omni 交易的示例
- en: This is a [Bitcoin transaction](https://oreil.ly/svm8A) that contains Omni Layer
    metadata. The only difference in an Omni transaction is the `OP_RETURN` field.
    Omni uses `OP_RETURN` because it provides enough space and is simple to use. The
    metadata in the `OP_RETURN` field translates to five USDT being sent. [Figure 4-3](#how_the_tether_transaction_in_looks_in)
    shows the same transaction in [Omniexplorer](https://oreil.ly/8WEPB). Notice that
    the transaction ID is the same.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个包含 Omni Layer 元数据的 [比特币交易](https://oreil.ly/svm8A)。Omni 交易唯一的区别在于 `OP_RETURN`
    字段。Omni 使用 `OP_RETURN` 是因为它提供了足够的空间并且易于使用。`OP_RETURN` 字段中的元数据转换为发送了五个 USDT。[图 4-3](#how_the_tether_transaction_in_looks_in)
    在 [Omniexplorer](https://oreil.ly/8WEPB) 中显示了相同的交易。注意交易 ID 是相同的。
- en: '![](Images/mabc_0403.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0403.png)'
- en: Figure 4-3\. How the Tether transaction in [Figure 4-2](#example_of_an_omni_transaction_on_the_b)
    looks in Omniexplorer
  id: totrans-40
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-3\. [图 4-2](#example_of_an_omni_transaction_on_the_b) 中的 Tether 交易在 Omniexplorer
    中的显示
- en: The value of the `OP_RETURN` field, `6f6d6e69000000000000001f000000001dcd6500`,
    is the Omni Layer metadata that records the UDST transaction. The metadata is
    encoded in hex format, and [Table 4-1](#translating_op_return) converts it into
    ASCII or decimal format.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`OP_RETURN` 字段的值，`6f6d6e69000000000000001f000000001dcd6500`，是记录 UDST 交易的 Omni
    Layer 元数据。该元数据以十六进制格式编码，[表 4-1](#translating_op_return) 将其转换为 ASCII 或十进制格式。'
- en: Table 4-1\. Translating OP_RETURN
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4-1\. 转换 OP_RETURN
- en: '| **Value stored in OP_RETURN (hex)** | **As ASCII or decimal** | **Description**
    |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| **存储在 OP_RETURN 中的值（十六进制）** | **作为 ASCII 或十进制** | **描述** |'
- en: '| --- | --- | --- |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `6f6d6e69` | omni | Omni flag to identify that it’s an Omni transaction.
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `6f6d6e69` | omni | Omni 标志，用于识别 Omni 交易。'
- en: '| `00000000` | Simple send | Transaction type. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `00000000` | 简单发送 | 交易类型。 |'
- en: '| `0000001f` | 31 | Property type is 31, which is USDT. You can view all of
    the Omni Layer properties on the [Omniexplorer site](https://www.omniexplorer.info/properties/production).
    |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `0000001f` | 31 | 属性类型为 31，即 USDT。您可以在 [Omniexplorer 网站](https://www.omniexplorer.info/properties/production)
    上查看所有 Omni Layer 属性。'
- en: '| `000000001dcd6500` | 5.00000000 | Amount to send is 5.00000000. Omni Layer
    transactions all contain eight decimal places. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `000000001dcd6500` | 5.00000000 | 发送的金额为 5.00000000。Omni Layer 交易都包含八位小数。
    |'
- en: 'Ethereum: Taking Mastercoin to the Next Level'
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊：将 Mastercoin 带入下一个层次
- en: Ethereum represents an evolution in the design of and thinking about cryptocurrency
    networks. It’s a more functional and general computation protocol that draws upon
    concepts from Bitcoin and Mastercoin, among other projects.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊代表了加密货币网络设计和思考的演进。它是一个更具功能性和通用计算协议，汲取了比特币和 Mastercoin 等项目的概念。
- en: The Ethereum concept was first proposed by Vitalik Buterin in 2013\. After lobbying
    the Mastercoin Foundation to make changes to [its protocol](https://oreil.ly/_Fq6p)
    and add more functionality, and noting their reluctance to do so, Buterin began
    working with Gavin Wood and subsequently other founders to create the Ethereum
    protocol.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊概念最初由 Vitalik Buterin 在2013年提出。在游说 Mastercoin 基金会对[其协议](https://oreil.ly/_Fq6p)进行更改并添加更多功能后，以及注意到他们不愿这样做时，Buterin
    开始与 Gavin Wood 以及随后其他创始人合作创建以太坊协议。
- en: The aim of Ethereum was to take Mastercoin to the next level—that is, to create
    a decentralized, open computer system secured with consensus. Although Buterin
    envisioned Ethereum having an alternative to Bitcoin’s proof-of-work mechanism,
    which he deemed wasteful, it currently uses a similar proof-of-work algorithm
    to Bitcoin called *Ethash*. Ethereum is expected to move to a proof-of-stake security
    model in the future—an ambitious project that changes the mining paradigm within
    the protocol, which is discussed more in [Chapter 10](ch10.xhtml#the_future_of_blockchain).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊的目标是将 Mastercoin 推向下一个水平——即创建一个通过共识进行安全保障的去中心化、开放式计算机系统。尽管 Buterin 想象中以太坊将拥有与比特币的工作量证明机制不同的替代机制，他认为比特币的机制是浪费的，但目前以太坊使用了类似比特币的工作量证明算法，称为*Ethash*。预计以太坊将来会转向一种名为权益证明的安全模型——这是一个改变协议内挖矿范式的雄心勃勃的项目，更多讨论见[第十章](ch10.xhtml#the_future_of_blockchain)。
- en: Ether and Gas
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以太和 Gas
- en: The unit of account in Ethereum is *ether*. This cryptocurrency behaves in a
    similar fashion to bitcoin, with similar transaction address nomenclature. Ethereum
    addresses start with the sequence 0x. The blockchain has much faster confirmation
    times, save for periodic network congestion, and Ethereum is known to be a much
    faster transfer mechanism than Bitcoin.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊的记账单位是*以太*。这种加密货币的行为方式与比特币类似，具有类似的交易地址命名规范。以太坊地址以序列`0x`开头。区块链的确认时间要快得多，除了周期性的网络拥堵外，以太坊被认为是比特币的转账机制要快得多。
- en: As described in [Chapter 2](ch02.xhtml#cryptocurrency_fundamentals), Bitcoin
    uses an unspent transaction output (UTXO) structure to track the balances in accounts.
    Ethereum tracks the balances in the account state. UTXO is like having physical
    cash—bills and coins. Ethereum’s approach is like having all your funds in a bank
    account. With UTXO, it’s a lot more complex to make payments and calculate an
    account’s balance.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第二章](ch02.xhtml#cryptocurrency_fundamentals)所述，比特币使用未花费的交易输出（UTXO）结构来跟踪账户中的余额。以太坊跟踪账户状态中的余额。UTXO
    就像是拥有实物现金——纸币和硬币。以太坊的方法就像是把所有资金都放在银行账户中。使用 UTXO，支付和计算账户余额要复杂得多。
- en: For example, let’s say you’re at a coffee shop. You have three $1 bills in your
    pocket, and you want to buy a coffee for $1.50\. You can’t give the cashier $1.50;
    you have to give them two of the $1 bills and receive $0.50 back in change. Afterward,
    if you want to know how much money you have to spend, you have to calculate the
    value of all the bills and coins in your pocket.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你在咖啡店。你口袋里有三张 1 美元的钞票，你想花 1.50 美元买一杯咖啡。你不能给收银员 1.50 美元；你必须给他们两张 1 美元的钞票，并拿回
    0.50 美元的零钱。之后，如果你想知道你还有多少钱可以花，你必须计算口袋里所有钞票和硬币的价值。
- en: It’s the same thing with Bitcoin. Suppose your Bitcoin address has received
    three separate 1 BTC transactions, and you want to send 1.5 BTC to a friend. Like
    with physical cash, you can’t send 1.5 BTC; you have to send 2 BTC. This is because
    each of those 1 BTC transactions you received in the past must be spent as a whole
    amount. So, you send two of the previous 1 BTC transactions, and in return you
    get 0.5 BTC change. This process occurs in a single bitcoin transaction.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币也是同样的情况。假设你的比特币地址接收了三笔独立的 1 BTC 交易，并且你想要给朋友发送 1.5 BTC。就像用实体现金一样，你不能发送 1.5
    BTC；你必须发送 2 BTC。这是因为你过去收到的每一笔 1 BTC 交易必须作为整数金额来花费。因此，你发送两笔之前的 1 BTC 交易，然后你会得到
    0.5 BTC 的零钱。这个过程在一次比特币交易中发生。
- en: Ethereum transactions are a lot simpler, similar to sending and receiving funds
    stored in a bank account. If your Ethereum address receives three separate 1 ETH
    transactions, your balance showing on the network will be 3 ETH. There is no need
    to calculate your account balance by adding up the different transactions yourself.
    And if you want to send 1.5 ETH, you can just send 1.5 ETH; there’s no need to
    send more and receive change.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊交易要简单得多，类似于在银行账户中发送和接收存款。如果你的以太坊地址接收了三笔独立的 1 ETH 交易，那么在网络上显示的余额将是 3 ETH。没有必要自己计算账户余额，通过添加不同的交易。如果你想要发送
    1.5 ETH，你可以只发送 1.5 ETH；没有必要发送更多并收到零钱。
- en: Ethereum also offers additional functionality. It takes elements from Bitcoin
    and Mastercoin to create *application-based* blockchain transactions, meaning
    it provides more functions than just account-based sending and receiving. Ethereum
    has another unit of account called *gas*. Gas enables developers to run applications
    on the Ethereum platform—these applications are known as *decentralized applications*,
    or *dapps* (discussed in detail later in this chapter).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊还提供了额外的功能。它借鉴了比特币和 Mastercoin 的元素，创建了基于应用的区块链交易，这意味着它提供的功能不仅仅是帐户间的发送和接收。以太坊还有另一种单位叫做
    *gas*。Gas 使开发人员能够在以太坊平台上运行应用程序——这些应用程序被称为 *去中心化应用程序*，或称为 *dapps*（在本章后面详细讨论）。
- en: Gas also solves one of the dangers of operating a programming language in a
    blockchain. Developers can run dapps on Ethereum without encountering what is
    known as the *halting problem*, or the inability to prevent code that runs indefinitely
    or in *infinite loops*. Ethereum requires gas to be used for computations of executed
    code within a smart contract, so that a dapp is as efficient as is possible. With
    every Ethereum transaction, developers specify a gas limit so if there’s an infinite
    loop, the transaction will eventually run out of gas, and the miner will still
    earn the fees for running the transaction.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Gas 还解决了在区块链上运行编程语言时的一个危险。开发者可以在以太坊上运行 dapp 而不会遇到所谓的 *停机问题*，或者无法阻止无限期运行或 *无限循环*
    的代码。以太坊要求使用 gas 来计算智能合约中执行的代码的计算，以使 dapp 尽可能高效。在每个以太坊交易中，开发者都指定一个 gas 限制，所以如果存在无限循环，交易最终会用完
    gas，并且矿工仍然会因运行交易而获得费用。
- en: 'Use Cases: ICOs'
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用例：ICO
- en: There are a number of applications for a computerized transaction protocol using
    smart contracts. The concept of [Ricardian contracts](https://oreil.ly/OwjiK)
    as proposed by Ian Grigg in 1996 provides insight into the realm of use cases
    for this technology. Innovations include using a cryptographic hash function for
    identification and defining legal elements as machine-readable by a computer.
    By being able to execute a set of instructions (via a smart contract) and associate
    it with an accounting system (via a blockchain), the Ethereum platform can be
    used to run a number of different dapps.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多应用于使用智能合约的计算机化交易协议。Ian Grigg 在 1996 年提出的[里卡尔迪安合约](https://oreil.ly/OwjiK)的概念为这项技术的用例提供了见解。创新包括使用密码哈希函数进行标识，并将法律要素定义为计算机可读的。通过能够执行一组指令（通过智能合约）并将其与会计系统（通过区块链）关联起来，以太坊平台可以用于运行许多不同的
    dapp。
- en: During the early years after Ethereum’s release, it took time for a developer
    ecosystem to grow. But developers realized that one of its most powerful capabilities
    was the possibility of raising cryptocurrency funds in an automated and secure
    fashion, utilizing smart contracts—the already-mentioned ICO. For example, a project
    needing to raise money to launch a concept could set up a smart contract to take
    in ether. In return, it could give the donors a redeemable cryptocurrency built
    on top of Ethereum.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊发布后的早期几年，开发者生态系统需要时间来成长。但开发者们意识到，其中最强大的能力之一是通过智能合约（前文提到的 ICO）以自动化和安全的方式筹集加密货币资金的可能性。例如，一个需要筹集资金来启动概念的项目可以设置一个智能合约来接收以太币。作为回报，它可以给予捐赠者一种建立在以太坊之上的可兑换加密货币。
- en: Note
  id: totrans-64
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The legality of ICOs is questionable, and many projects have been ended prematurely
    because of legal problems they have caused. This issue is discussed in more detail
    in [Chapter 9](ch09.xhtml#other_blockchains).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ICO 的合法性存在争议，许多项目因引发法律问题而被迫提前结束。这个问题在[第九章](ch09.xhtml#other_blockchains)中有更详细的讨论。
- en: The idea of raising cryptocurrency funds to launch a project didn’t begin with
    Ethereum. Entrepreneur Erik Voorhees [raised money](https://oreil.ly/HdGAx) using
    the rudimentary mechanism of accepting bitcoin in return for digital “shares”
    in order to fund the blockchain-based gambling site Satoshi Dice in 2012\. Mastercoin
    also used this concept, albeit in a much more organized fashion.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 筹集加密货币资金来启动项目的想法并非起源于以太坊。企业家埃里克·福尔希斯（Erik Voorhees）在2012年使用接受比特币换取数字“股份”的基本机制来筹集资金，以资助基于区块链的赌博网站Satoshi
    Dice（[链接](https://oreil.ly/HdGAx)）。Mastercoin也采用了这个概念，尽管方式更加有组织。
- en: The ICO for MaidSafe was so oversold that donors eventually had to [redeem incoming
    bitcoin with mastercoin instead of safecoin](https://oreil.ly/dXxuZ). Technical
    glitches such as this highlighted the need for a more reliable platform for crypto
    fundraising. Over time, as Ethereum matured, its smart contract platform coupled
    with the ability to create tokens on top of the Ethereum blockchain made it an
    ideal automated fundraising apparatus for jump-starting various cryptocurrency
    projects.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: MaidSafe的ICO过度售出，以至于捐赠者最终不得不使用mastercoin而不是safecoin来[兑换收到的比特币](https://oreil.ly/dXxuZ)。诸如此类的技术故障突显了对更可靠的加密货币筹款平台的需求。随着时间的推移，随着以太坊的成熟，其智能合约平台与在以太坊区块链上创建代币的能力相结合，使其成为启动各种加密货币项目的理想自动化筹款装置。
- en: Decentralized Autonomous Organizations
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 去中心化自治组织
- en: In an effort to further the ethos of decentralization in the Ethereum ecosystem,
    the concept of a *decentralized autonomous organization* (DAO) was proposed as
    a way to utilize smart contracts to replace the governance of centralized authorities.
    Much like how the ICO concept replaces the centralized functions of an *initial
    public offering* (IPO), DAOs use cryptocurrency fundraising projects to create
    a distributed governance system whereby ICO investors have voting rights commensurate
    with ownership of tokens purchased in an ICO.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步推进以太坊生态系统中去中心化的理念，提出了*去中心化自治组织*（DAO）的概念，这是利用智能合约来取代中央当局的治理的一种方式。就像ICO概念取代了*首次公开发行*（IPO）的中央化功能一样，DAO利用加密货币筹款项目创建了一个分布式治理系统，ICO投资者拥有与在ICO中购买的代币所有权相称的投票权。
- en: This concept was put to the ultimate test in a project known as *The DAO*. Launched
    in April 2016, The DAO was a smart contract–based ICO project built on Ethereum
    that was designed to run autonomously. Decisions made on the investment of raised
    funds into technology projects were to be based on the voting rights of token
    holders. The DAO was able to raise over [$154 million](https://oreil.ly/wtKJ_)
    via Ethereum-based tokens from eleven thousand investors.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念在一个名为*The DAO*的项目中经受了最严峻的考验。The DAO于2016年4月推出，是一个基于以太坊的智能合约ICO项目，旨在实现自主运行。筹集资金投资技术项目的决定将基于代币持有人的投票权。The
    DAO能够通过以太坊代币从一万名投资者那里筹集超过[$154 million](https://oreil.ly/wtKJ_)。
- en: Forking Ethereum and the creation of Ethereum Classic
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ethereum的分叉和以太经典的创建
- en: 'After its launch, a number of vulnerabilities were discovered in The DAO’s
    smart contract code. One of these issues included a [recursive call vulnerability](https://oreil.ly/vPK-u).
    The programmers had identified a flaw in the code: when funds were withdrawn from
    a wallet, the balance was only updated at the end of the function call. If the
    same function could be called again before the initial call completed, it would
    be possible to keep withdrawing the same funds over and over—a problem known as
    *infinite recursion*.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在其推出后，The DAO的智能合约代码中发现了一些漏洞。其中一个问题包括了一种[递归调用漏洞](https://oreil.ly/vPK-u)。程序员们已经在代码中找到了一个缺陷：当资金从钱包中提取时，在函数调用结束后才更新余额。如果在初始调用完成之前可以再次调用相同的函数，那么就有可能一遍又一遍地提取相同的资金——这是一种*无限递归*的问题。
- en: They immediately announced that the bug had been identified and would be fixed,
    but before they were able to roll out their update, on June 17, 2016, this vulnerability
    was exploited by an attacker who was able to steal over $50 million in ether from
    The DAO. There was no recourse for The DAO’s developers to update the deployed
    contract code itself, because it was stored immutably on the blockchain. The only
    way to rectify the situation was to deploy a new contract and move the remaining
    funds over—a cumbersome and painful process.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 他们立即宣布已经确定了这个漏洞，并将对其进行修复，但在他们成功推出更新之前，在2016年6月17日，这个漏洞就被攻击者利用，成功地从The DAO中窃取了超过5000万美元的以太币。The
    DAO的开发人员无法更新部署的合约代码本身，因为它被不可变地存储在区块链上。纠正这种情况的唯一方法是部署一个新的合约并将剩余的资金转移过去——这是一个繁琐而痛苦的过程。
- en: 'This event led to the Ethereum Foundation forking the Ethereum blockchain,
    in order to undo the damage. It created two distinct versions of Ethereum: the
    original blockchain with the stolen funds still credited to the attacker, known
    as Ethereum Classic, and a forked version that retracted said funds, which continued
    to be known as Ethereum. This hard fork moved the stolen funds to a recovery address
    so their rightful owners could reclaim them.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件导致以太坊基金会分叉以太坊区块链，以撤销损害。它创建了两个不同版本的以太坊：原始区块链中仍将被盗资金归功于攻击者的以太经典，和一个取消上述资金的分叉版本，继续被称为以太坊。这次硬分叉将被盗资金移至一个恢复地址，以便它们的合法所有者可以取回。
- en: The fork meant changing the Ethereum blockchain so that The DAO hack had effectively
    never happened, violating the principle of immutability. This was a controversial
    decision that was resisted by some members of the community, who chose to continue
    with the unaltered version of the blockchain. Ethereum Classic is a smart contract
    blockchain that still exists today, but its developer community is small and not
    as robust as Ethereum’s.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 分叉意味着改变以太坊区块链，以便The DAO黑客实际上从未发生过，这违反了不可变性原则。这是一个备受争议的决定，遭到了社区的一些成员的抵制，他们选择继续使用未经改动的区块链版本。以太经典是一个智能合约区块链，今天仍然存在，但其开发社区规模较小，没有以太坊那样健壮。
- en: Other Ethereum forks
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他以太坊分叉
- en: The DAO hack warmed up the cryptocurrency community to the idea of forks. In
    addition to creating Ethereum Classic, the Ethereum blockchain has been forked
    [several other times](https://oreil.ly/kV0Xr) to compensate for vulnerabilities
    and other changes in code. The Ethereum project understands the need to experiment,
    and when upgrades that are deemed important for the entire community become apparent,
    forking is seen as a better alternative than maintaining the concept of immutability.
    The Ethereum ecosystem has no qualms about forking its blockchain and gathering
    enough momentum for such changes to be successful. This attitude stands in stark
    contrast to other chains, like Bitcoin, where immutability is sacrosanct.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: DAO 骇客事件让加密货币社区接受了分叉的概念。 除了创建以太坊经典（Ethereum Classic）之外，以太坊区块链已经 [多次分叉](https://oreil.ly/kV0Xr)
    来弥补漏洞和代码中的其他变化。 以太坊项目理解需要进行实验，当整个社区认为升级对整个社区至关重要时，分叉被视为比维持不变性概念更好的选择。 以太坊生态系统对分叉其区块链并为此类变化聚集足够的动力没有任何顾虑。
    这种态度与其他链形成鲜明对比，例如比特币，那里的不变性是神圣不可侵犯的。
- en: Key Organizations in the Ethereum Ecosystem
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以太坊生态系统中的关键组织
- en: In the Ethereum ecosystem, multiple stakeholders and organizations support the
    vision that Ethereum is building, and each organization supports it from its own
    angle.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊生态系统中，多个利益相关者和组织支持以太坊正在构建的愿景，并且每个组织都从自己的角度支持它。
- en: The Ethereum Foundation
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以太坊基金会
- en: As a leader in developing the roadmap and implementing further changes to the
    Ethereum platform, the [Ethereum Foundation](https://ethereum.org) wields significant
    influence in the community. It also funds scalability projects related to the
    platform, including [Plasma](https://oreil.ly/SrG8m), a solution that aims to
    increase the number of transactions on the platform without sacrificing the security
    of the network.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 作为制定路线图并进一步改变以太坊平台的领导者，[以太坊基金会](https://ethereum.org) 在社区中拥有重要的影响力。 它还资助与平台相关的可扩展性项目，包括
    [Plasma](https://oreil.ly/SrG8m)，这是一个旨在增加平台上交易数量而不影响网络安全性的解决方案。
- en: The Ethereum Foundation’s predecessor was formed as a Swiss nonprofit entity,
    and initiated Ethereum’s ICO. After raising [over $18 million](https://oreil.ly/3TzPj)
    from the community in bitcoin, the Swiss entity transferred those funds to the
    Ethereum Foundation, which has been the key provider of funding for the aforementioned
    development efforts.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊基金会的前身是一家瑞士非营利实体，发起了以太坊的 ICO。 在比特币社区筹集 [超过 1800 万美元](https://oreil.ly/3TzPj)
    后，瑞士实体将这些资金转移给了以太坊基金会，后者一直是上述开发工作的主要资金提供者。
- en: The Enterprise Ethereum Alliance
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 企业以太坊联盟
- en: Announced in early 2017, the [Enterprise Ethereum Alliance (EEA)](https://entethalliance.org)
    aims to band together corporate entities interested in deployment of Ethereum
    blockchain solutions. Members of the EEA include IBM and Microsoft, which supports
    running Ethereum blockchain services on top of Azure.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 早在2017年初宣布的[企业以太坊联盟（EEA）](https://entethalliance.org)旨在联合对以太坊区块链解决方案部署感兴趣的企业实体。EEA的成员包括IBM和微软，支持在Azure上运行以太坊区块链服务。
- en: One of the main goals of the EEA is finding blockchain-specific use cases in
    corporate business environments. Many large organizations are wary of the cryptocurrency
    aspect of blockchains because of compliance and other regulatory concerns. A good
    deal of the Ethereum-related work being done on the corporate side involves forking
    it to create a *private blockchain* that separates the token from public cryptocurrency
    markets. [Chapter 9](ch09.xhtml#other_blockchains) discusses private and permissioned
    blockchains further.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: EEA的主要目标之一是在企业业务环境中找到区块链特定用例。许多大型组织对区块链的加密货币方面持谨慎态度，因为存在合规性和其他监管方面的担忧。在企业端正在进行的与以太坊相关的工作很大一部分涉及分叉以创建*私有区块链*，将代币与公共加密货币市场分开。[第9章](ch09.xhtml#other_blockchains)进一步讨论了私有和许可区块链。
- en: Parity
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Parity
- en: '[Parity](https://www.parity.io), a London-based software solutions company,
    was formed by Gavin Wood, one of the original founders of Ethereum who contributed
    code very early on in the formation of Ethereum’s protocol concepts. Parity has
    deployed several developer tools to make Ethereum easier to deploy, including
    reference frameworks.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[Parity](https://www.parity.io)是一家总部位于伦敦的软件解决方案公司，由以太坊的原始创始人之一加文·伍德创立，他在以太坊协议概念形成的早期就贡献了代码。Parity已部署了几个开发工具，使以太坊更容易部署，包括参考框架。'
- en: The company is known for falling victim to the “Parity hack” in 2017, where
    $30 million worth of ether was stolen by an unknown attacker. This was the second-largest
    Ethereum hack (after The DAO); it exploited a vulnerability in Parity’s multi-signature
    wallets that enabled the attacker to send two transactions, one of which included
    [abstracting logic to change a wallet address in the code](https://oreil.ly/jeGwj).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 该公司因于2017年成为“Parity黑客事件”的受害者而闻名，当时价值3000万美元的以太被一名不知名的攻击者窃取。这是继The DAO之后的第二大以太坊黑客事件；它利用了Parity多重签名钱包中的漏洞，使攻击者能够发送两笔交易，其中一笔包括[在代码中更改钱包地址的抽象逻辑](https://oreil.ly/jeGwj)。
- en: ConsenSys
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ConsenSys
- en: Founded by Ethereum cofounder Joseph Lubin, [ConsenSys](https://consensys.net)
    is an organization that develops enterprise applications, invests in startups,
    builds developer tools, and offers blockchain education for the Ethereum network.
    The organization focuses on the development of dapps. Its offerings include the
    Truffle Suite, a framework that makes Ethereum development easier, and Gitcoin,
    a GitHub-inspired bug bounty tool for the Ethereum blockchain.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 由以太坊联合创始人Joseph Lubin创立的[ConsenSys](https://consensys.net)是一个组织，致力于开发企业应用程序，投资初创公司，构建开发者工具，并为以太坊网络提供区块链教育。该组织专注于dapp的开发。其产品包括Truffle
    Suite，这是一个使以太坊开发更容易的框架，以及Gitcoin，一个为以太坊区块链提供灵感的GitHub式漏洞赏金工具。
- en: ConsenSys also has a mission to create consumer-friendly tools within the Ethereum
    ecosystem. One of the most well-known of these is MetaMask, a browser-based Ethereum
    wallet that makes using decentralized applications easier. ConsenSys also funds
    projects that create dapps and other useful applications.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: ConsenSys也有一个使命，即在以太坊生态系统内创建消费者友好的工具。其中最著名的之一是MetaMask，这是一个基于浏览器的以太坊钱包，可以使使用去中心化应用程序变得更加简单。ConsenSys还资助了创建dapp和其他有用应用程序的项目。
- en: Decentralized Applications (Dapps)
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 去中心化应用程序（Dapps）
- en: We’ve mentioned already that applications that run via a smart contract on a
    blockchain are known as decentralized apps, or *dapps*. Dapps are typically architected
    with a backend using a smart contract running on a blockchain and a thin frontend
    UI that interacts with it. It’s similar to a client/server architecture, where
    the server is the smart contract. These types of applications make the blockchain
    more programmable and more functional.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经提到过，通过智能合约在区块链上运行的应用程序被称为去中心化应用程序，或*dapps*。Dapps通常使用在区块链上运行的智能合约作为后端，并具有一个与之交互的轻量级前端UI。这类应用程序类似于客户端/服务器架构，其中服务器是智能合约。这些类型的应用程序使区块链更具可编程性和功能性。
- en: A dapp is basically any computer program that runs on a smart contract platform,
    and the largest platform for this today is Ethereum. As we discussed in [Chapter 1](ch01.xhtml#origins_of_blockchain_technology),
    in computer science, a *distributed system* is one in which the components are
    located on disparate computing resources, and a system is in place for communications
    to occur between these resources. Examples of distributed systems include many
    telecommunication networks and the web.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一个dapp基本上是在智能合约平台上运行的任何计算机程序，而今天最大的平台就是以太坊。正如我们在[第一章](ch01.xhtml#origins_of_blockchain_technology)中讨论的那样，在计算机科学中，*分布式系统*是指其组件位于不同的计算资源上，并且存在用于这些资源之间进行通信的系统。分布式系统的例子包括许多电信网络和互联网。
- en: There are other platforms that provide the capability for dapps, but Ethereum
    is by far the largest platform for developers to execute distributed code.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他平台提供dapp的能力，但以太坊是迄今为止开发者执行分布式代码的最大平台。
- en: Use Cases
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用案例
- en: A key feature of a dapp is immutability, meaning no centralized authority can
    change the code after it has been published to the blockchain. For this reason,
    use cases for dapps are generally found where there is a bottleneck in centralized
    systems. Many centralized applications, for example, are not censorship-resistant.
    In many centralized apps, a third party decides what users can and cannot see.
    Often these decisions are subjective, seemingly arbitrary, and made without input
    from users. With the use of a backend platform such as Ethereum and the web, developers
    can deploy applications that are permissionless, which greatly differ from their
    centralized counterparts.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Dapp 的一个关键特征是不可变性，这意味着在将代码发布到区块链后，没有集中的权威可以更改它。因此，Dapps 的用例通常出现在集中式系统存在瓶颈的地方。例如，许多集中式应用程序不具有抗审查性。在许多集中式应用程序中，第三方决定用户可以看到什么和不能看到什么。通常这些决定是主观的、看似武断的，并且没有用户参与。通过使用像以太坊和
    web 这样的后端平台，开发人员可以部署无需许可的应用程序，这与它们的集中式对应物大不相同。
- en: Another feature of dapps is that they enable efficient and secure transfer of
    digital assets through the use of blockchains. For example, today many applications
    offer censorship resistance (think [BitTorrent](https://www.bittorrent.com)) and
    privacy (through encryption). However, what dapps enable beyond these two properties
    is that transfer of value can be executed quickly and programmatically.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Dapps 的另一个特征是，它们通过使用区块链实现了数字资产的高效和安全转移。例如，今天许多应用程序提供了防止审查（考虑[BitTorrent](https://www.bittorrent.com)）和隐私（通过加密）的功能。然而，除了这两个特性之外，Dapps
    能够实现价值的快速和程序化转移。
- en: Note
  id: totrans-99
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Dapp platforms are relatively new. There’s still lots to learn about how best
    to create them, and the infrastructure for doing so is still in its growth stages.
    Dapps are not yet widely used. In fact, there’s some question about their traction
    and staying power, and the purposes of some dapps today seem nefarious. Many of
    them are designed to avoid regulatory scrutiny, and there are numerous gambling,
    gaming, and decentralized exchange dapps in use.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Dapp 平台相对较新。关于如何最佳地创建它们以及用于此目的的基础设施仍处于成长阶段，有很多东西需要学习。Dapps 的使用尚不广泛。实际上，对于它们的吸引力和持久力还存在一些疑问，一些当今的
    Dapps 的目的似乎是不端的。许多设计是为了避免监管审查，目前有大量的赌博、游戏和去中心化交易 Dapps 在使用。
- en: Challenges in Developing Dapps
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发 Dapps 面临的挑战
- en: There are several [design challenges](https://oreil.ly/7kI4n) inherent to creating
    dapps today, including concerns about deployment, user experience, speed, and
    scalability. These issues currently exist across all dapp platforms, including
    Ethereum.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当今创建 Dapps 存在一些[设计挑战](https://oreil.ly/7kI4n)，包括部署、用户体验、速度和可扩展性等方面的关注点。这些问题目前存在于所有
    Dapp 平台上，包括以太坊。
- en: When a developer deploys a smart contract for a dapp, they need to be sure that
    its code does not contain critical flaws. It is not easy to update contracts.
    Most smart contract platforms, including Ethereum, do not permit redeploying to
    the same address. In addition, upgrading usually entails difficult data migration
    of the state that the smart contract manages.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发者为 dapp 部署智能合约时，他们需要确保其代码不包含关键缺陷。更新合约并不容易。大多数智能合约平台，包括以太坊，在同一地址上不允许重新部署。此外，升级通常涉及智能合约管理的状态的困难数据迁移。
- en: Developers can test their dapps on one of four Ethereum testnets. Responsible
    dapp developers will spend months getting their contracts audited by professional
    security auditors (Quantstamp, OpenZeppelin), who then publish their reports to
    the public. During this time, they will also invite people in the community to
    audit their smart contracts through GitHub.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者可以在四个以太坊测试网络中测试他们的 dapp。负责任的 dapp 开发者会花费数月时间让专业的安全审计员（Quantstamp、OpenZeppelin）审计他们的合约，然后将审计报告发布给公众。在此期间，他们还会邀请社区成员通过
    GitHub 审计他们的智能合约。
- en: Unlike with centralized apps, where a user’s experience is continuous, deploying
    new smart contract code could cause a break in the user experience. Also, the
    speed of dapps relies on the speed of the blockchain and its confirmation times.
    This issue was brought to the fore on Ethereum in late 2017 with the dapp CryptoKitties,
    whose popularity led to [an enormous number of transactions congesting the Ethereum
    network](https://oreil.ly/h3N1u). This made the dapp virtually unusable until
    enthusiasm died down.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 与集中式应用程序不同，用户的体验是连续的，部署新的智能合约代码可能会导致用户体验中断。此外，dapp 的速度取决于区块链的速度和确认时间。这个问题在 2017
    年底的以太坊上凸显出来，当时 dapp CryptoKitties 的流行导致[大量交易拥堵了以太坊网络](https://oreil.ly/h3N1u)。这使得该
    dapp 在热情消退之前几乎无法使用。
- en: Now that you have some background, let’s dive a bit more deeply into authoring,
    deploying, and working with Ethereum smart contracts.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了一些背景知识，让我们更深入地探讨一下编写、部署和使用以太坊智能合约。
- en: Deploying and Executing Smart Contracts in Ethereum
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在以太坊中部署和执行智能合约
- en: Smart contracts have come a long way since the concept was first proposed in
    the 1990s. Omni Layer proved that running a dapp on top of a blockchain was possible,
    but it had many limitations, the biggest of which was who was given permission
    to author and deploy the dapp. If someone wanted to deploy a dapp, they had to
    convince the platform’s developers to add it to the Omni Core code. In effect,
    Omni Core was the dapp where all code was deployed. The development of code was
    centralized, and only Omni Core developers could update it. Developers who wanted
    to deploy dapps on their own had to explore other options, such as forking Omni
    Core and making their own client that ran on top of Bitcoin—not an easy endeavor.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约自 1990 年代首次提出概念以来已经发展了很长一段路程。Omni Layer 证明了在区块链之上运行 dapp 是可能的，但它有许多限制，其中最大的限制是谁被授权编写和部署
    dapp。如果有人想要部署 dapp，则必须说服平台的开发人员将其添加到 Omni Core 代码中。实际上，Omni Core 是所有代码都部署的 dapp。代码的开发是集中的，只有
    Omni Core 开发人员才能更新它。想要自己部署 dapp 的开发人员必须探索其他选项，例如分叉 Omni Core 并制作自己的客户端，该客户端运行在比特币之上——这并不是一项容易的任务。
- en: 'Other limitations of Omni Core included the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Omni Core 的其他限制包括以下内容：
- en: Blockchain scaling and speed depended on Bitcoin and its core developers
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链扩展和速度依赖于比特币及其核心开发人员
- en: Omni Core still has limited influence over the future of the blockchain it runs
    on.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Omni Core 对其所运行的区块链的未来影响仍然有限。
- en: The Bitcoin blockchain is not designed for program execution
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币区块链并非设计用于程序执行。
- en: It’s optimized for store of value, and its limited scripting language means
    that it will never be suitable for sophisticated smart contracts built directly
    on top of the blockchain. For example, the `OP_RETURN` field has a storage limit
    of 80 bytes, which limits the types of programs you can run in Omni Layer.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 它被优化为价值存储，其有限的脚本语言意味着它永远不适用于直接构建在区块链之上的复杂智能合约。例如，`OP_RETURN` 字段的存储限制为 80 字节，这限制了你可以在
    Omni Layer 中运行的程序类型。
- en: The Ethereum Virtual Machine
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以太坊虚拟机
- en: 'The Ethereum Virtual Machine (EVM) makes it easy for developers to create dapps
    and for the network to execute them. The purpose of the EVM is twofold:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊虚拟机（EVM）使开发人员能够轻松创建 dapps，并让网络执行它们。EVM 的目的有两个：
- en: Allow developers to deploy smart contracts to the blockchain
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许开发人员将智能合约部署到区块链上
- en: Instruct miners on how to execute EVM smart contract code embedded in the software
    that they run
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指导矿工如何执行嵌入到其运行的软件中的 EVM 智能合约代码
- en: Authoring a smart contract
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写智能合约
- en: Developers can use a few different languages to author a smart contract. The
    most common language is [Solidity](https://oreil.ly/oUDzV).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员可以使用几种不同的语言编写智能合约。最常见的语言是[Solidity](https://oreil.ly/oUDzV)。
- en: Tip
  id: totrans-120
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: ConsenSys has released a suite of tools to make it easy for developers to author,
    debug, and deploy smart contracts with Solidity, called the [Truffle Suite](https://truffleframework.com).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: ConsenSys发布了一套工具，以便开发人员使用Solidity编写、调试和部署智能合约，称为[Truffle Suite](https://truffleframework.com)。
- en: To interact with a smart contract, you need an Ethereum wallet. The most popular
    wallet is [MetaMask](https://metamask.io), which is a browser extension. This
    wallet stores a copy of your seed and private keys locally on your machine.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要与智能合约交互，您需要一个以太坊钱包。最流行的钱包是[MetaMask](https://metamask.io)，它是一个浏览器扩展程序。该钱包在您的机器上本地存储了您的助记词和私钥的副本。
- en: Note
  id: totrans-123
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The seed and private key are not stored centrally. It’s important to make a
    physical copy of the mnemonic seed (e.g., on paper) and store it in a safe place
    for redundancy. In addition, using a hardware wallet rather than relying on private
    keys being held locally by the wallet software can help increase security. For
    more on wallet choices, see [Chapter 2](ch02.xhtml#cryptocurrency_fundamentals).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 助记词和私钥不是集中存储的。重要的是要将助记词的物理副本（例如，纸质副本）制作一份并存放在安全的地方，以备不时之需。此外，使用硬件钱包而不是依赖于钱包软件本地保存私钥可以增加安全性。有关钱包选择的更多信息，请参阅[第2章](ch02.xhtml#cryptocurrency_fundamentals)。
- en: 'Before deploying your smart contract to the main Ethereum network, it is wise
    to test it on one of the most common testnets:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在将你的智能合约部署到以太坊主网之前，将其在最常见的测试网络之一上进行测试是明智的选择：
- en: '[Ropsten](https://ropsten.etherscan.io)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Ropsten](https://ropsten.etherscan.io)'
- en: '[Rinkeby](https://www.rinkeby.io)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Rinkeby](https://www.rinkeby.io)'
- en: '[Kovan](https://kovan-testnet.github.io/website)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Kovan](https://kovan-testnet.github.io/website)'
- en: '[Görli](https://goerli.net)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Görli](https://goerli.net)'
- en: Smart contract developers need to spend ether in the form of gas to deploy and
    change the state of a contract. All Ethereum testnets have *faucets* where you
    can get testnet ETH (tETH) for free. These testnets make for an ideal staging
    environment for smart contracts.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约开发人员需要花费以太币作为燃气的形式来部署和更改合约的状态。所有以太坊测试网络都有*水龙头*，您可以免费获取测试网 ETH（tETH）。这些测试网络是智能合约的理想分期环境。
- en: Deploying a smart contract
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署智能合约
- en: After a developer has written a smart contract, they can publish it to the *mainnet*
    or production environment, or any of the testnets. Publishing is done by sending
    a smart contract transaction to the Ethereum network. The easiest way to generate
    this transaction is by using the [Ethereum Remix tool](https://remix.ethereum.org).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员编写了智能合约后，可以将其发布到*主网*或生产环境，也可以发布到任何测试网络。发布是通过将智能合约交易发送到以太坊网络来完成的。生成这笔交易的最简单方法是使用[Ethereum
    Remix 工具](https://remix.ethereum.org)。
- en: Remix is a cloud-based integrated development environment (IDE) for smart contract
    development. It supports the Solidity and Vyper languages, and since it’s a website
    there is no need to install software. It lets developers write, debug, compile,
    and distribute smart contract code to the Ethereum network, including the mainnet
    and testnet environments.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Remix 是一个基于云的集成开发环境（IDE），用于智能合约开发。它支持 Solidity 和 Vyper 语言，由于它是一个网站，因此无需安装软件。它允许开发人员编写、调试、编译和分发智能合约代码到以太坊网络，包括主网和测试网环境。
- en: '[Figure 4-4](#deploying_the_mastering_blockchain_gues) shows what deploying
    the [*Mastering_Blockchain_Guestbook.sol*](https://github.com/Mastering-Blockchain-Book)
    smart contract on Remix looks like. In this case, it’s being deployed to the Ropsten
    network.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 4-4](#deploying_the_mastering_blockchain_gues) 展示了在 Remix 上部署 [*Mastering_Blockchain_Guestbook.sol*](https://github.com/Mastering-Blockchain-Book)
    智能合约的样子。在这种情况下，它被部署到了 Ropsten 网络。'
- en: '![](Images/mabc_0404.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0404.png)'
- en: Figure 4-4\. Deploying the Mastering_Blockchain_Guestbook.sol smart contract
    to the Ethereum network via Remix
  id: totrans-136
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-4\. 通过 Remix 将 Mastering_Blockchain_Guestbook.sol 智能合约部署到以太坊网络的过程
- en: To deploy the smart contract, you must click the Deploy button. Remix then sends
    the transaction data to MetaMask, which asks for your authorization to complete
    the transaction.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署智能合约，您必须点击 Deploy 按钮。然后 Remix 将交易数据发送到 MetaMask，后者会请求您的授权以完成交易。
- en: After the transaction is authorized, MetaMask pushes a smart contract creation
    transaction to the network. [Figure 4-5](#the_transaction_to_create_the_smart_con)
    shows what this looks like.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 授权交易后，MetaMask 将一个智能合约创建交易推送到网络。[图 4-5](#the_transaction_to_create_the_smart_con)
    展示了这个过程的样子。
- en: '![](Images/mabc_0405.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0405.png)'
- en: Figure 4-5\. Details of the [transaction](https://oreil.ly/Y2eSZ) that created
    the smart contract
  id: totrans-140
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-5\. 创建智能合约的[交易](https://oreil.ly/Y2eSZ)的详细信息
- en: 'Note the following in this transaction:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在此交易中请注意以下内容：
- en: The value of the transaction is 0 ether, indicating that no ether were transferred.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易的价值为 0 以太币，表示未转移任何以太币。
- en: 'The transaction is being recorded in block #5357662.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '该交易正在记录在区块 #5357662。'
- en: The miner who discovered this block receives a transaction fee of 0.00137715
    Testnet ETH (tETH).
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现此区块的矿工将获得 0.00137715 测试网以太币（tETH）的交易费。
- en: After the Ethereum network processes a transaction, it stores the smart contract
    on the Ethereum network in bytecode format, which takes up less space, as illustrated
    in [Figure 4-6](#different_layers_that_smart_contract_co).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊网络处理完交易后，将智能合约以字节码格式存储在以太坊网络上，这样可以占用更少的空间，如 [图 4-6](#different_layers_that_smart_contract_co)
    所示。
- en: '![](Images/mabc_0406.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0406.png)'
- en: Figure 4-6\. Different layers that smart contract code goes through when going
    from development to production
  id: totrans-147
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-6\. 智能合约代码从开发到生产经历的不同层次
- en: Since the smart contract code is on the Ethereum testnet, it is [viewable by
    the public](https://oreil.ly/tHshF) (see [Figure 4-7](#viewing_the_smart_contract_code_after_d)).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 由于智能合约代码在以太坊测试网络上，它是[公开可见的](https://oreil.ly/tHshF)（参见[图 4-7](#viewing_the_smart_contract_code_after_d)）。
- en: '![](Images/mabc_0407.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0407.png)'
- en: Figure 4-7\. Viewing the smart contract code after deployment on etherscan.io
  id: totrans-150
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-7。部署在etherscan.io上的智能合约代码查看
- en: When a smart contract is created, it is given an Ethereum address. This Ethereum
    address can hold an ETH balance and send/receive ETH just like a normal Ethereum
    address can.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建智能合约时，它会被分配一个以太坊地址。这个以太坊地址可以持有以太币余额，并像普通以太坊地址一样发送/接收以太币。
- en: Interacting with a smart contract
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与智能合约交互
- en: Now that the Guestbook smart contract has been deployed to the Ethereum testnet,
    it’s possible to begin reading data from it and writing data to it. To read data
    from the contract you just ping the network directly, like making a call to a
    public API. However, to write data to the contract, you must send a transaction
    to the contract address.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，留言板智能合约已部署到以太坊测试网络，可以开始从中读取数据并向其写入数据。要从合约中读取数据，只需直接与网络通信，就像调用公共API一样。但是，要向合约写入数据，必须向合约地址发送交易。
- en: All read/write interactions with a smart contract require a reference to the
    contract’s *application binary interface* (ABI). The ABI is like an API for a
    smart contract. ABIs are machine-readable, meaning they are easy to parse by client
    software to understand how to interact with the contract code. An ABI documents
    all the functions and their attributes.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 与智能合约的所有读/写交互都需要合约的*应用二进制接口*（ABI）的引用。ABI类似于智能合约的API。ABI是机器可读的，意味着客户端软件可以轻松解析它，以了解如何与合约代码交互。ABI记录了所有函数及其属性。
- en: 'Here is the ABI for the Guestbook smart contract:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是留言板智能合约的ABI：
- en: '[PRE1]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Reading a smart contract
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 读取智能合约
- en: Let’s read the data in the [Guestbook smart contract](https://oreil.ly/thsoP).
    You should see something like [Figure 4-8](#viewing_read-only_functions_of_a_deploy).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们读取[留言板智能合约](https://oreil.ly/thsoP)中的数据。你应该会看到类似[图 4-8](#viewing_read-only_functions_of_a_deploy)的东西。
- en: '![](Images/mabc_0408.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0408.png)'
- en: Figure 4-8\. Viewing read-only functions of a deployed smart contract
  id: totrans-160
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-8。查看已部署智能合约的只读函数
- en: This figure shows the three read functions that the Guestbook smart contract
    has. The first function requires an input to return data, and the other two don’t.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 本图显示了留言板智能合约具有的三个读函数。第一个函数需要输入才能返回数据，而另外两个则不需要。
- en: Writing a smart contract
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写智能合约
- en: Let’s now write some data to the [Guestbook smart contract](https://oreil.ly/VxE2M).
    This will look something like [Figure 4-9](#calling_a_write-only_function_of_a_depl).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们向[留言板智能合约](https://oreil.ly/VxE2M)写入一些数据。这会类似于[图 4-9](#calling_a_write-only_function_of_a_depl)。
- en: '![](Images/mabc_0409.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0409.png)'
- en: Figure 4-9\. Calling a write-only function of a deployed smart contract
  id: totrans-165
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-9。调用已部署智能合约的仅写函数
- en: 'The MetaMask browser extension will provide you with the choice to connect
    to the website or not. After connecting to the website, you can start writing
    data to the contract. Notice that two things happen when you click Confirm:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: MetaMask浏览器扩展将为您提供连接到网站的选择。连接到网站后，您可以开始向合约编写数据。请注意，当您点击确认时，会发生两件事情：
- en: Etherscan generates a new transaction, populating it with the correct data,
    and pushes it to your MetaMask wallet.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Etherscan生成一个新交易，并用正确的数据填充它，并将其推送到您的MetaMask钱包。
- en: MetaMask then asks for authorization to send that transaction.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，MetaMask请求授权发送该交易。
- en: After you click Confirm, your transaction gets pushed to the Ethereum network.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在您点击确认后，您的交易将被推送到以太坊网络。
- en: Executing a smart contract
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 执行智能合约
- en: 'As part of block discovery, Ethereum miners add transactions to blocks in much
    the same fashion as Bitcoin miners. There are two main actions a transaction can
    trigger:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 作为区块发现的一部分，以太坊矿工以与比特币矿工类似的方式将交易添加到区块中。交易可以触发两种主要操作：
- en: Payment
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 付款
- en: Send ETH value from address A to address B.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 从地址A向地址B发送以太币价值。
- en: Execution
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 执行
- en: Execute the smart contract.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 执行智能合约。
- en: 'If the following are true, then the miner will execute the smart contract code
    through the EVM:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果以下条件成立，则矿工将通过以太坊虚拟机（EVM）执行智能合约代码：
- en: The receiving address is a smart contract.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收地址是一个智能合约。
- en: The data payload contains data.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据有效负载包含数据。
- en: 'The earlier test message example created a [transaction](https://oreil.ly/SEAH8)
    where the receiving address is the *Mastering_Blockchain_Guestbook* smart contract,
    and the data payload contains the following data:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的测试消息示例创建了一个[交易](https://oreil.ly/SEAH8)，其中接收地址是*Mastering_Blockchain_Guestbook*智能合约，数据有效负载包含以下数据：
- en: '[PRE2]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Gas and Pricing
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gas和定价
- en: As we’ve discussed, gas is a unit of account used in the Ethereum ecosystem
    to calculate how much ether miners are paid to process transactions. When a miner
    executes a smart contract transaction through the EVM, the miner executes *opcodes*—instructions
    at the machine level—that are written in the smart contract. Each opcode that
    it runs has a gas price associated with it.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所讨论的，Gas是以太坊生态系统中用于计算矿工处理交易的酬劳的记账单位。当矿工通过EVM执行智能合约交易时，矿工执行*操作码*——以智能合约编写的机器级指令。它运行的每个操作码都与一个Gas价格相关联。
- en: '[Figure 4-10](#list_of_gas_prices_by_opcode) shows examples of opcodes and
    gas prices.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 4-10](#list_of_gas_prices_by_opcode)展示了操作码和Gas价格的示例。'
- en: '![](Images/mabc_0410.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/mabc_0410.png)'
- en: Figure 4-10\. List of gas prices by opcode
  id: totrans-185
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-10。操作码的Gas价格列表
- en: Gas is necessary because it rewards miners for processing a transaction through
    a smart contract. It also defends the network against spam and denial-of-service
    attacks. Gas is paid in ETH. The miner receives the usual fixed block reward for
    discovering the block, plus the ETH received from gas for processing all the smart
    contract code.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 燃气是必需的，因为它奖励矿工通过智能合约处理交易。它还保护网络免受垃圾邮件和拒绝服务攻击。燃气以以太币支付。矿工在发现区块时接收固定的区块奖励，以及从处理所有智能合约代码中接收的燃气的以太币。
- en: 'When structuring a transaction, there are two gas-related fields you need to
    input:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建交易时，您需要输入两个与燃气相关的字段：
- en: Gas price
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 燃气价格
- en: The amount of ETH paid for each unit of gas. If a user wants their transaction
    to be processed immediately, they can pay a higher gas price to incentivize the
    miner to choose their transaction over other transactions waiting to be processed.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 每单位燃气支付的以太币数量。如果用户希望其交易立即处理，他们可以支付更高的燃气价格，以激励矿工选择他们的交易而不是等待处理的其他交易。
- en: Gas limit
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 燃气限制
- en: The maximum amount of gas you are willing to pay the miner to process your transaction.
    The amount of gas specified here should be sufficient to run all the opcodes the
    contract function is expected to perform.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 您愿意支付给矿工处理您的交易的最大燃气量。此处指定的燃气量应足以运行预期执行的所有合约函数的所有操作码。
- en: Note
  id: totrans-192
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Wei is the smallest unit of ether (ETH), which is 10e-18 ETH. The US dollar
    is divisible by two decimal places. ETH is divisible by 18 decimal places. Just
    as the US dollar has the penny as its smallest unit of value, a wei is the smallest
    unit of value in Ethereum. A satoshi is the smallest unit of value for Bitcoin.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Wei 是以太币 (ETH) 的最小单位，即 10e-18 ETH。美元可分为两位小数。ETH 可分为 18 位小数。正如美元有它的一分钱作为最小的价值单位一样，wei
    是以太坊中最小的价值单位。satoshi 是比特币的最小价值单位。
- en: 'Here are a few more of the denominations:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有几种面额：
- en: 1 wei = 1 wei
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 wei = 1 wei
- en: 1 kwei = 1,000 wei
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 kwei = 1,000 wei
- en: 1 mwei = 1,000,000 wei
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 mwei = 1,000,000 wei
- en: 1 gwei = 1,000,000,000 wei
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 gwei = 1,000,000,000 wei
- en: Tip
  id: totrans-199
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: '[ETH Gas Station](https://ethgasstation.info) is a very useful site for calculating
    what gas price you should pay based on the current network usage.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '[ETH Gas Station](https://ethgasstation.info) 是一个非常有用的网站，可以根据当前网络使用情况计算您应该支付的燃气价格。'
- en: 'In the earlier Guestbook smart contract example, where we wrote a test message,
    the amounts were as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期的留言板智能合约示例中，我们写了一条测试消息，金额如下：
- en: '*Gas limit:* 128,050'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*燃气限制：* 128,050'
- en: '*Gas used by transaction:* 85,367 (66.67%)'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*交易使用的燃气：* 85,367 (66.67%)'
- en: '*Gas price:* 0.000000001 ether (1 gwei)'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*燃气价格：* 0.000000001 以太币 (1 gwei)'
- en: Interacting with Code
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与代码交互
- en: 'Here are a couple of popular methods for programmatically interacting with
    the Ethereum network:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几种与以太坊网络进行编程交互的流行方法：
- en: Web3.js
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Web3.js
- en: The most common way developers make their websites interact with MetaMask and
    smart contracts is through [Web3.js](https://oreil.ly/6PAvl), a Node.js library.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员使其网站与 MetaMask 和智能合约进行交互的最常见方法是通过[Web3.js](https://oreil.ly/6PAvl)，一个 Node.js
    库。
- en: Infura
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Infura
- en: Another popular option is [Infura](https://infura.io), which provides a REST
    API to the Ethereum network. This API is structured in a way that is familiar
    to developers. The advantage of using Infura is that the learning curve to deploying
    is much lower because it handles access to Ethereum. The disadvantage is that
    developers must trust Infura to secure and pass along data properly.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个流行的选择是[Infura](https://infura.io)，它为以太坊网络提供了REST API。这个API的结构对开发者来说是熟悉的。使用Infura的优势在于，部署的学习曲线要低得多，因为它处理了对以太坊的访问。缺点是开发者必须信任Infura来正确地保护和传递数据。
- en: Summary
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The Ethereum ecosystem developed quickly from an idea publicly proposed in 2014
    to the full-fledged network it is today. Thanks to its smart contract properties
    and the vast number of resources and tools being created in the ecosystem, many
    developers now choose to build on Ethereum rather than Bitcoin. Ethereum and Bitcoin
    do share some technology, but their advancement is certainly going in separate
    ways.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 以公开提出的想法为起点，以今天的完整网络为目标，以太坊生态系统从2014年迅速发展起来。由于其智能合约属性以及在生态系统中创建的大量资源和工具，许多开发者现在选择在以太坊上构建而不是比特币上。以太坊和比特币确实共享一些技术，但它们的发展方向肯定是不同的。
