- en: © The Author(s), under exclusive license to APress Media, LLC, part of Springer
    Nature 2022D. P. BauerGetting Started with Ethereum [https://doi.org/10.1007/978-1-4842-8045-4_2](https://doi.org/10.1007/978-1-4842-8045-4_2)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 作者，独家授权给APress Media，LLC，Springer Nature的一部分 2022D. P. Bauer通过以太坊入门 [https://doi.org/10.1007/978-1-4842-8045-4_2](https://doi.org/10.1007/978-1-4842-8045-4_2)
- en: 2. Solidity
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2. Solidity
- en: Davi Pedro Bauer^([1](#Aff2)  )(1)Campo Bom, Rio Grande do Sul, Brazil
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Davi Pedro Bauer^([1](#Aff2)  )(1)Campo Bom, Rio Grande do Sul, Brazil
- en: Solidity is an object-oriented, high-level programming language that is used
    to construct smart contracts that automate blockchain transactions. The language
    was proposed in 2014 by Gavin Wood and developed by participants of the Ethereum
    project. Solidity was influenced by C++, Python, and JavaScript, so you will find
    similar language structures as in those languages. The language is primarily used
    to build smart contracts on the Ethereum blockchain, but it can also be used to
    create smart contracts on other blockchains.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Solidity是一种面向对象的高级编程语言，用于构建自动化区块链交易的智能合约。该语言于2014年由Gavin Wood提出，并由以太坊项目的参与者开发。Solidity受到C
    ++，Python和JavaScript的影响，因此你会发现与这些语言类似的语言结构。该语言主要用于在以太坊区块链上构建智能合约，但也可用于在其他区块链上创建智能合约。
- en: Solidity, being a high-level language, eliminates the need to type code in ones
    and zeros. It makes it much easier for people to create programs in a form that
    they can comprehend, by combining letters and numbers.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Solidity作为一种高级语言，消除了需要使用一和零键入代码的需要。它使人们能够以可理解的形式（通过字母和数字的组合）创建程序，从而使创建程序变得更加容易。
- en: 'Because Solidity is statically typed, each variable must be specified by the
    user. Data types enable the compiler to validate variable usage. Solidity data
    types are often divided into two categories: value types and reference types.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Solidity是静态类型的，因此每个变量都必须由用户指定。数据类型使编译器能够验证变量的使用情况。Solidity数据类型通常分为两类：值类型和引用类型。
- en: The Ethereum ecosystem is distinctive in that it can be used by a wide range
    of cryptocurrencies and decentralized apps. On Ethereum, smart contracts enable
    the creation of solutions for all types of enterprises and organizations.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊生态系统的独特之处在于它可以被各种加密货币和去中心化应用程序使用。在以太坊上，智能合约使得可以为各种企业和组织创建解决方案成为可能。
- en: 'At the end of this chapter, you will be able to do the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章末尾，您将能够执行以下操作：
- en: Create a basic Solidity project using the VS Code extension
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用VS Code扩展创建基本的Solidity项目
- en: Compile the contract
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译合约
- en: Deploy the contract to a local blockchain
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署合约到本地区块链
- en: Getting Started with the Solidity Project on VS Code
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在VS Code上开始Solidity项目
- en: Ethereum is the most often utilized platform for smart contracts. Ethereum is
    the first programmable blockchain in the world. It enables the creation of smart
    contracts to aid in the transfer of digital assets such as ether.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊是最常用于智能合约的平台。以太坊是世界上第一个可编程区块链。它使得创建智能合约以帮助转移数字资产（如以太币）成为可能。
- en: Solidity^([1](#Fn1)) is the language you will use to build contracts; it is
    Turing-complete, which means that it allows you to build complex contracts in
    a well-defined and coded manner.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Solidity^([1](#Fn1)) 是您将用于构建合约的语言；它是图灵完备的，这意味着它允许您以定义明确且编码的方式构建复杂的合约。
- en: Creating a New Project
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个新项目
- en: 'Select “View ➤ Command Palette” and then click “Blockchain: New Solidity Project”
    (Figure [2-1](#Fig1)). Finally, click “Create basic project” (Figure [2-2](#Fig2)).![](../images/521550_1_En_2_Chapter/521550_1_En_2_Fig1_HTML.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 选择“查看 ➤ 命令调色板”，然后点击“区块链：新的 Solidity 项目”（图[2-1](#Fig1)）。最后，点击“创建基本项目”（图[2-2](#Fig2)）。![](../images/521550_1_En_2_Chapter/521550_1_En_2_Fig1_HTML.jpg)
- en: A Solidity command palette window has 2 bars. The first bar has the text right
    angle bracket Blockchain colon New S and the cursor after S. The second bar reads
    Blockchain colon New Solidity Project. On the right corner of the bar, there is
    a settings icon.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Solidity 命令调色板窗口有 2 个条。第一个条有文本右尖括号 Blockchain 冒号 新 S，光标在 S 之后。第二个条读取 Blockchain
    冒号 新 Solidity 项目。在条的右上角有一个设置图标。
- en: Figure 2-1
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-1
- en: New Solidity project
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 Solidity 项目
- en: '![](../images/521550_1_En_2_Chapter/521550_1_En_2_Fig2_HTML.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/521550_1_En_2_Chapter/521550_1_En_2_Fig2_HTML.jpg)'
- en: A Solidity command palette window has 3 bars with text. The first one reads
    Select type of solidity project. The second one reads Create basic project, which
    is selected. The third one reads Create Project from Truffle box.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Solidity 命令调色板窗口有 3 个带文本的条。第一个读取选择 Solidity 项目类型。第二个读取已选择的创建基本项目。第三个读取从 Truffle
    box 创建项目。
- en: Figure 2-2
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-2
- en: Creating a basic project
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个基本项目
- en: Select a folder where the project will be scaffolded and wait for the project
    to be created. Make sure the project structure was created, as shown in Figure
    [2-3](#Fig3).![](../images/521550_1_En_2_Chapter/521550_1_En_2_Fig3_HTML.jpg)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个项目将被脚手架搭建的文件夹，并等待项目被创建。确保项目结构已创建，如图[2-3](#Fig3)所示。![](../images/521550_1_En_2_Chapter/521550_1_En_2_Fig3_HTML.jpg)
- en: A Solidity project creation palette has the menu icons on the left. On the main
    screen, there are sections under Get started, such as contracts, migrations, node
    underscore modules, test, and more. Helloblockchain dot Sol is selected under
    contracts.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Solidity 项目创建调色板在左侧有菜单图标。在主屏幕上，有“开始”下的部分，如合约、迁移、节点模块、测试等。Helloblockchain
    dot Sol 在合约下被选择。
- en: Figure 2-3
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-3
- en: Solidity project structure created
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Solidity 项目结构已创建
- en: Compiling the Project
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编译项目
- en: Right-click the HelloBlockchain.sol file, select “Build contracts,” and wait
    for contracts to be built.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击 HelloBlockchain.sol 文件，选择“构建合约”，等待合约构建完成。
- en: Deploying to a Development Blockchain
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署到开发区块链
- en: Right-click the HelloBlockchain.sol file, select “Deploy contracts,” and then
    select Development 127.0.0.1:8545\. Wait for the contracts to be deployed to the
    blockchain development network. That’s it!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击 HelloBlockchain.sol 文件，选择“部署合约”，然后选择 Development 127.0.0.1:8545\. 等待合约部署到区块链开发网络。就是这样！
- en: Summary
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned what Solidity is, and you created, compiled, and
    deployed your first smart contract.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了 Solidity 是什么，并创建、编译和部署了您的第一个智能合约。
- en: In the next chapter, you will explore the ERC-20 token standard and learn how
    to create and deploy to development, test, and production environments.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将探讨 ERC-20 代币标准，并学习如何在开发、测试和生产环境中创建和部署。
