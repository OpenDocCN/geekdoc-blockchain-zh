- en: ©  Vikram Dhillon, David Metcalf, and Max Hooper 2017Vikram Dhillon, David Metcalf
    and Max HooperBlockchain Enabled Applications[https://doi.org/10.1007/978-1-4842-3081-7_3](A430562_1_En_3_Chapter.xhtml)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 维克拉姆·迪隆、大卫·梅特卡夫和马克斯·胡珀 2017维克拉姆·迪隆、大卫·梅特卡夫和马克斯·胡珀区块链启用的应用程序[https://doi.org/10.1007/978-1-4842-3081-7_3](A430562_1_En_3_Chapter.xhtml)
- en: 3. Foundations of Blockchain
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3. 区块链的基础
- en: Vikram Dhillon^(1 ), David Metcalf¹ and Max Hooper¹(1)Orlando, Florida, USA
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 维克拉姆·迪隆^(1 )、大卫·梅特卡夫¹和马克斯·胡珀¹(1)美国佛罗里达州奥兰多
- en: You never change things by fighting the existing reality.To change something,
    build a new model that makes the existing model obsolete.—R. Buckminster Fuller
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你永远无法通过与现有现实斗争来改变事物。要改变某事，就要建立一个使现有模式过时的新模式。——R. 巴克明斯特·富勒
- en: The blockchain is a decentralized data structure with internal consistency maintained
    through consensus reached by all the users on the current state of the network.
    It’s an enabling technology that resolved the Byzantine generals’ problem (message
    communication between untrusted parties) and opened up a new horizon of possibilities
    for trustless transactions and exchange of information. If the Internet democratized
    the peer-to-peer exchange of information, then the blockchain has democratized
    the peer-to-peer exchange of value. We begin this chapter by exploring how transactions
    work between users on the Bitcoin network. This entails a technical discussion
    of structures of a block and a transaction. We then dive into the role of wallets
    and user addresses. After talking about wallets, we shift our focus to Simple
    Payment Verification (SPV) implemented in the Bitcoin network. SPV allows us to
    understand why blocks have a peculiar structure and more important, how the Bitcoin
    network can retain efficiency despite the network scaling at a high rate. Finally,
    we conclude our discussion by talking about hard and soft forks in the blockchain.
    We present the implications of forks in the context of forward compatibility for
    merchants and users involved in running the Bitcoin-core code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链是一种分散式数据结构，其内部一致性通过网络上所有用户就网络当前状态达成共识来维持。它是一种使拜占庭将军问题（不信任方之间的消息通信）得以解决的技术，为无需信任的交易和信息交换开辟了新的可能性。如果互联网使信息的点对点交换民主化，那么区块链则使价值的点对点交换民主化。我们从探索比特币网络上用户之间的交易工作开始本章。这涉及到对区块和交易结构的技术讨论。然后我们深入探讨了钱包和用户地址的作用。在谈论完钱包之后，我们将焦点转移到了比特币网络中实现的简化支付验证（SPV）。SPV使我们能够理解为什么区块具有奇特的结构，更重要的是，比特币网络如何在网络高速扩展的情况下保持效率。最后，我们通过讨论区块链中的硬分叉和软分叉来结束我们的讨论。我们介绍了分叉对商家和运行比特币核心代码的用户在前向兼容性方面的影响。
- en: Transaction Workflow
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交易工作流程
- en: 'The central purpose of the Bitcoin protocol is to allow transactions to occur
    over the network between users in a decentralized manner. We have been talking
    about small fragments of the protocol to build up background. Now we can integrate
    those concepts into a single framework and explore the blockchain. The ultimate
    result of mining is increasing the number of blocks as the network evolves over
    time. To understand how transactions occur between two users (Alice and Bob),
    we first need to understand the structure of blocks that hold the transactions.
    In the simplest terms, the blockchain is a collection of blocks bound by two main
    principles:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币协议的核心目的是允许用户在网络上以分散方式进行交易。我们一直在讨论协议的小片段来建立背景知识。现在我们可以将这些概念整合到一个框架中并探索区块链。挖掘的最终结果是随着网络随着时间的推移而增加区块的数量。要了解两个用户（爱丽丝和鲍勃）之间如何发生交易，我们首先需要了解持有交易的区块结构。简而言之，区块链是由两个主要原则约束的区块集合：
- en: 'Internal consistency : There are a few design principles inherent to the functioning
    of each block that make the blocks internally consistent. For instance, each block
    links to the previous one in the chain and has a creation timestamp. Such mechanisms
    in the blockchain allow it to be an internally coherent data structure that can
    keep a consistent record of transactions.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部一致性：每个区块的运行中都有一些设计原则，这些原则使区块在内部保持一致。例如，每个区块都链接到链中的上一个区块，并具有创建时间戳。区块链中的这些机制使其成为一个内部一致的数据结构，可以保持一致的交易记录。
- en: 'Consensus on transactions: The concept of mining described in Chapter [2](A430562_1_En_2_Chapter.xhtml)
    is just one implementation for verifying transactions; there are different methods
    where no brute-force hashing is involved. However, in every one of these implementations,
    there is a scheme of reaching consensus on the transactions that have transpired
    during some interval in the network. We can generalize this verification of transactions
    for a decentralized system by either using some sort of PoW or a similar strategy
    that pools transactions that are then checked by users on the network.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易一致性：在第 [2](A430562_1_En_2_Chapter.xhtml) 章中描述的挖掘概念只是验证交易的一种实现方式；存在不涉及蛮力哈希的不同方法。然而，在这些所有实现中，都有一种方案来达成对网络中某个时间间隔内已发生的交易达成共识。我们可以通过使用某种形式的PoW或类似的策略来概括这种去中心化系统中的交易验证，然后由网络上的用户检查这些交易。
- en: 'A transaction is essentially a data structure carried on a block, but how exactly?
    To discover the process, let’s look at the complete structure of a block in Figure
    [3-1](#Fig1). Each block has at least two unique components: the block header,
    which contains a unique hash (called the merkle root) that uniquely identifies
    a block, and the transaction list, which contains new transactions. Note that
    each block contains the same amount of transactions in the list, but the precise
    transactions between users are different. This is because only one block wins
    the mining race every ten minutes on the blockchain, other candidates are rejected,
    and the race starts again. In this simplified model, there are only two other
    components of a block: the block size, which is kept consistent for the entire
    network, and a counter for the number of transactions in each block. Here, we
    focus more on the block header and the transaction list.The block header contains
    a few standard components, such the as difficulty target and the nonce discussed
    previously. It also contains the version number of the Bitcoin core-code that
    the winning miner is running. The timestamp is also a unique feature of every
    block, as it unmistakably identifies one particular block in the network. The
    header also contains a hash from the previous block in the chain, and a special
    hash that identifies this block called the merkle root. We discuss how this special
    hash comes to be later in this chapter.Proof of lifeRecently, there were rumors
    that Julian Assange, the WikiLeaks founder, had died. Assange recently did an
    Ask Me Anything session on Reddit and responded to the rumors by reading the most
    recent block hash from the blockchain to prove that he was indeed alive. The block
    was created only ten minutes earlier, so this could not have been a prerecording,
    thus proving beyond any shadow of a doubt that Assange was alive. This was the
    first time the block hash found a use in a sense of popular culture, and Assange
    called it a proof of life.![A430562_1_En_3_Fig1_HTML.jpg](Images/A430562_1_En_3_Fig1_HTML.jpg)Figure
    3-1.Simplified overview of the structure of a blockThe block header and transaction
    list are the two components that stay unique to every block. The block header
    is made up of several smaller parts, the most peculiar of which is the merkle
    root, a hash that uniquely identifies a block. The header contains the hash of
    the previous block, the nonce used to create that particular block, and the difficulty
    of the network. These are standard mining components that we discussed previously.
    Each block also contains a list of transactions. Aside from the actual transactions,
    the transaction list also contains a few components that are crucial to how a
    block will accept the transaction. For instance, the lock time delay dictates
    when a transaction can be accepted into a block. Finally, the list contains all
    the transactions accepted into this block as a series of signed inputs and outputs
    that ensure the transfer of Bitcoins from the sender to the receiver.There are
    several new terms and concepts introduced here and we will go through all of them
    now. We already talked about the block header and the concepts of timestamp on
    a block, the merkle root, and a hash from the previous block. Now we focus on
    the components of the transaction list. Let’s begin with the delay. The proper
    technical term is lock time delay, which refers to the time after which a transaction
    can be accepted into a block. The precise mechanism involves the use of a parameter
    called blockheight, which increases as more blocks are added to the blockchain.
    A given transaction remains locked and unverified until the blockheight specified
    for that transaction is exceeded.Next is the concept of transaction inputs and
    outputs. The foundational unit of a transaction is called an unspent transaction
    output (UTXO) , which can have a value given in Satoshis. Similar to how a dollar
    can be split into 100 cents, Bitcoin can be divided into an eight-decimal unit
    called Satoshis. A UTXO is a unit of currency controlled by users (the users are
    also known as owners) and recorded on the blockchain. More precisely, UTXO is
    really the currency balance, or the unspent currency present in the Bitcoin economy.
    The entire network accepts UTXO as currency and whenever a user receives Bitcoin,
    the amount is recorded on the blockchain as a UTXO. Essentially, the Bitcoin belonging
    to a user can be spread across several transactions and many blocks as UTXO. As
    a result, there is no defined concept of stored balance for a particular user,
    but only UTXOs spread across the network possessed by the owners. The idea of
    an account balance is actually created for a user by the wallet software, which
    searches the blockchain and collects all the UTXO belonging to a particular address.
    We discuss the concepts of wallets and addresses shortly.To understand UTXO properly,
    we need to talk about the concept of change. The idea is very simple, actually.
    Think about the last time you bought groceries and paid with cash. You probably
    got some change back that was left over from your payment. UTXOs have a similar
    concept, as shown in Figure [3-2](#Fig2). Every transaction is split into a portion
    that is spent and locked (assigned) to another user, and a portion that gets returned
    back to the original user, just like the change that you would get from shopping.
    In a transaction, UTXOs that are consumed by the transaction are called the inputs,
    and the UTXOs created by a transaction are called the outputs. The example in
    Figure [3-2](#Fig2) illustrates a similar scenario, where Bob wants to send one
    BTC to Alice, but in the process, the ten BTC owned by Bob are split into two
    parts: the one BTC sent to Alice, which is now assigned to her, and the nine BTC
    that are returned to Bob in the form of UTXO s. Both of these components are recorded
    on the blockchain because they are a part of a transaction, as shown in Figure
    [3-2](#Fig2).![A430562_1_En_3_Fig2_HTML.jpg](Images/A430562_1_En_3_Fig2_HTML.jpg)Figure
    3-2.Format of a UTXO in the transaction listIn this example, Bob wants to send
    one BTC to Alice, and Figure [3-2](#Fig2) shows how this transaction occurs. The
    BTC owned by Bob is used as the input of the transaction and the output is two
    parts, one sent to Alice for one BTC and the second one returned as change back
    to Bob. It should be noted here that the initial transaction, the newly assigned
    transaction, and the change are recorded on the blockchain as the input and output.Now
    that we have a better grasp of UTXOs , let’s talk about how transactions are assigned
    from one user to another. This involves the use of private–public key pairs that
    lock and unlock the transactions. The process works as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 交易本质上是一个数据结构，存在于一个区块上，但具体是如何的呢？要发现这个过程，让我们看看图 [3-1](#Fig1) 中一个区块的完整结构。每个区块至少有两个独特的组成部分：区块头，其中包含一个唯一的哈希（称为默克尔根），它唯一地标识一个区块，以及事务列表，其中包含新的交易。请注意，每个区块在列表中包含相同数量的交易，但用户之间的具体交易不同。这是因为每十分钟只有一个区块在区块链上赢得挖矿竞赛，其他候选均被拒绝，竞赛重新开始。在这个简化的模型中，一个区块还包含另外两个组成部分：区块大小，对整个网络保持一致，以及每个区块中的交易数量计数器。在这里，我们更加关注区块头和事务列表。区块头包含一些标准组件，比如之前讨论过的难度目标和
    nonce。它还包含了赢得挖矿竞赛的矿工运行的比特币核心代码的版本号。时间戳也是每个区块的一个独特特征，因为它明确地标识了网络中的一个特定区块。头还包含了链中前一个区块的哈希，以及标识此区块的特殊哈希，称为默克尔根。我们稍后在本章中讨论这个特殊哈希是如何产生的。生命的证明最近，有传言称维基解密创始人朱利安·阿桑奇已经去世。阿桑奇最近在
    Reddit 上进行了一个问答活动，并通过从区块链中读取最新的区块哈希来证明自己确实还活着来回应这些传言。这个区块是仅十分钟前创建的，所以这不可能是预先录制的，从而无可辩驳地证明了阿桑奇还活着。这是区块哈希第一次在流行文化的意义上发挥作用，阿桑奇称之为生命的证明。
- en: A user, Alice, initiates a transaction that she wants to send to Bob.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户艾丽斯发起了一笔她想发送给鲍勃的交易。
- en: Alice uses her private key to sign the transaction.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 艾丽斯使用她的私钥对交易进行签名。
- en: The transaction is broadcast on the network and anyone can use Alice's public
    key to verify that the transaction originated from her.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易被广播到网络上，任何人都可以使用艾丽斯的公钥来验证该交易是由她发起的。
- en: Bob receives the transaction after it has been verified on the network and propagated
    to him.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在经过网络验证并传播到他那里之后，鲍勃收到了交易。
- en: Bob unlocks the transaction using his private key. The transaction was signed
    with a script such that only the recipient could unlock the transaction and assign
    it to themselves.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鲍勃使用他的私钥解锁交易。该交易被一个脚本签名，以便只有接收方才能解锁交易并将其分配给自己。
- en: 'We mention that the transaction locking and unlocking mechanisms use a script,
    so what is this script? The Bitcoin protocol uses a minimal, bare-bones, Turing-incomplete
    programming language to manage transactions. Satoshi’s intention was to keep the
    programming logic very simple and largely off the blockchain whenever possible.
    A script is attached to every transaction and it contains instructions on how
    the user receiving Bitcoins can access them. Essentially, the sender needs to
    provide a public key that anyone on the network can use to determine that the
    transaction did indeed originate from the address contained in the script, and
    a signature to show that the transaction was signed by using the sender’s private
    key. Without the private–public key pair authorization, transactions between users
    would not occur. Let’s complete the picture that we started to create with the
    UTXOs, shown in Figure [3-3](#Fig3).![A430562_1_En_3_Fig3_HTML.jpg](Images/A430562_1_En_3_Fig3_HTML.jpg)Figure
    3-3.Transactions on the blockchainConceptually, it might be bizarre to consider
    transactions on the network as UTXOs being spread across hundreds of blocks, but
    this process is exactly how transactions are propagated across the network. In
    this example, Bob first initiated the transaction that was sent to Alice in which
    one BTC was assigned to Alice. He received nine BTC in change as the unspent output.
    Alice further sends 0.5 BTC to another user and in doing so, she receives 0.5
    back in change from her transaction. Notice that the first transaction was signed
    by Bob, who initiated the transaction, and then Alice signed the second transaction.
    In a sense, the output from the first transaction became an input for the second,
    so Bob’s signature was retained as proof of the first transaction and Alice’s
    signature now serves as the unlocking mechanism. This is how transactions can
    be tracked across the Bitcoin network from the origin to the final owner (final
    address). By using network addresses, the network retains a level of pseudonymity.Now
    that we have talked about UTXOs, signatures, scripts, and how transactions are
    recorded, let’s integrate these concepts and review the workflow of a transaction
    between Alice and Bob, shown in Figure [3-4](#Fig4).![A430562_1_En_3_Fig4_HTML.jpg](Images/A430562_1_En_3_Fig4_HTML.jpg)Figure
    3-4.Overview of a transaction on the networkAlice initiates the transaction from
    her wallet, which contains multiple addresses. Each address has a certain amount
    of Bitcoin balance (the sum of all UTXOs associated with that address) that can
    be used to create new transactions. The transaction is then signed using Alice’s
    private key and it enters the mining phase, where it will be packaged into a candidate
    block. As the mining concludes, the winning miner announces the block on the network
    and the block is included into the blockchain. The remaining transactions are
    thrown into the pool of transactions to be added. The transaction propagates to
    Bob, who can now use his private key to unlock the transaction output amount and
    use it. The ideas of UTXOs , signing, and script locking and unlocking provide
    deeper insights into how the blockchain remains internally consistent as a decentralized
    ledger.Figure [3-4](#Fig4) introduces the concept of the wallet, which can be
    used to initiate transactions. Wallets are now a standard part of the Bitcoin
    core-code and they mainly serve three purposes for the users:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提到交易的锁定和解锁机制使用脚本，那么这个脚本是什么呢？比特币协议使用一种最小、最简单、不完全的图灵不完备的编程语言来管理交易。中本聪的意图是尽可能保持编程逻辑非常简单，并且尽可能地不把它们放在区块链上。每个交易都附有一个脚本，其中包含有关接收比特币的用户如何访问它们的说明。基本上，发送方需要提供一个任何网络上的人都可以使用的公钥，以确定该交易确实来自脚本中包含的地址，并且提供一个签名以显示该交易是使用发送方的私钥签名的。如果没有私钥-公钥对的授权，用户之间的交易将不会发生。让我们完成我们在[3-3](#Fig3)中开始创建的图景。![A430562_1_En_3_Fig3_HTML.jpg](Images/A430562_1_En_3_Fig3_HTML.jpg)图3-3.区块链上的交易从概念上来看，将网络上的交易视为UTXOs分布在数百个区块中可能有些奇怪，但这个过程确实是交易在网络中传播的方式。在这个例子中，鲍勃首先发起了发送给艾丽斯的交易，其中有一枚比特币被分配给了艾丽斯。他收到了九个比特币作为未花费的输出。艾丽斯进一步向另一个用户发送了0.5个比特币，这样做的同时，她从她的交易中收到了0.5个比特币的找零。请注意，第一笔交易由发起交易的鲍勃签名，然后艾丽斯签署了第二笔交易。从某种意义上说，第一笔交易的输出成为了第二笔交易的输入，因此鲍勃的签名被保留作为第一笔交易的证明，而艾丽斯的签名现在作为解锁机制。这就是如何在比特币网络中跟踪交易的过程，从起源到最终所有者（最终地址）。通过使用网络地址，网络保留了一定程度的匿名性。现在我们已经谈论了UTXOs、签名、脚本以及交易是如何记录的，让我们整合这些概念并审查艾丽斯和鲍勃之间交易的工作流程，如[3-4](#Fig4)所示。![A430562_1_En_3_Fig4_HTML.jpg](Images/A430562_1_En_3_Fig4_HTML.jpg)图3-4.网络上交易的概述艾丽斯从她的钱包中发起交易，该钱包包含多个地址。每个地址都有一定数量的比特币余额（与该地址关联的所有UTXOs的总和），可以用于创建新的交易。然后使用艾丽斯的私钥对交易进行签名，进入挖矿阶段，其中它将被打包成候选块。随着挖矿的结束，获胜的矿工宣布在网络上发布块，并将块包含到区块链中。其余的交易被抛入待添加的交易池中。交易传播到鲍勃，他现在可以使用他的私钥来解锁交易输出金额并使用它。UTXOs、签名和脚本锁定和解锁的思想提供了对区块链如何作为一个分散的分类账保持内部一致性的更深入的洞察。[3-4](#Fig4)介绍了钱包的概念，它可用于发起交易。钱包现在是比特币核心代码的标准部分，它主要为用户提供了三个目的：
- en: 'Create transactions: A user can create transactions easily with a graphical
    interface using the wallet.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建交易：用户可以使用钱包的图形界面轻松创建交易。
- en: 'Maintain balance: The wallet software tracks all the UTXOs associated with
    an address and gives a user his or her final balance.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护余额：钱包软件跟踪与地址相关联的所有UTXO，并提供用户的最终余额。
- en: 'Maintain multiple addresses: Within the wallet, a user can have multiple addresses
    and each address can be associated with certain transactions.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护多个地址：在钱包内，用户可以拥有多个地址，每个地址都可以与特定交易相关联。
- en: In a sense, addresses are the only means of ownership in the Bitcoin network.
    UTXOs and balances are associated with a particular address and a user can create
    as many addresses as her or she wants. We saw in Figure [3-4](#Fig4) that Alice
    had three addresses in her wallet, and each of the addresses can work with her
    private key. There are actually other types of wallets, aside from a software
    wallet. Figure [3-4](#Fig4) used a software wallet, but the process is similar
    for the other two main types, mobile wallets and a cold storage physical wallet.Mobile
    wallets have largely been designed for the sake of convenience and as a gateway
    into the world of mobile payments using cryptocurrencies such as Bitcoin. These
    wallets often serve as an independent but miniaturized version of a complete wallet,
    and allow for access to balances and transactions on the go. The apps that work
    as wallets are often designed in an open source environment, so they are also
    helping bring developers and power users together in the community. Cold storage
    wallets are a more permanent method of storing Bitcoins over a long period of
    time. There have been instances where wallets got corrupted or the users couldn’t
    remember the key to unlocking those wallets, rendering their balance effectively
    useless. There is no recovery mechanism for a password on a wallet. The idea here
    is to create a new wallet, and send a transaction to a new address on that wallet.
    Now this wallet can be backed up and saved to a physical device such as a flash
    drive and stored away securely. Once that transaction has been verified on the
    blockchain, your Bitcoins are safe to be retrieved from the flash drive at any
    time. This can be done to prevent any accidents from happening and to keep your
    currency separate from the main wallet that you use to conduct transactions or
    mine for Bitcoins. Some developers have taken a step further and created paper
    wallets where the address is encoded in a QR code and a private key for that particular
    wallet is also printed on the paper in another QR code.NoteHow can you actually
    see your transaction taking place on the Bitcoin network without having to write
    a script or code yourself to do it? In Bitcoin (and most cryptocurrencies), there
    is a feature called Blockchain Explorer, usually a web site where all transactions
    are visible from the Bitcoin network. You can obtain all sorts of details about
    transactions, such as the origin of the transaction, the amount, the block hash,
    or how many verifications it received.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 从某种意义上说，地址是比特币网络中唯一的所有权手段。未花费交易输出（UTXO）和余额都与特定地址相关联，用户可以创建任意数量的地址。我们在图[3-4](#Fig4)中看到，爱丽丝的钱包中有三个地址，每个地址都可以使用她的私钥。实际上，除了软件钱包之外，还有其他类型的钱包。图[3-4](#Fig4)使用了软件钱包，但其他两种主要类型，移动钱包和冷存储物理钱包的过程类似。移动钱包主要是为了方便起见，作为使用比特币等加密货币进行移动支付的入口。这些钱包通常充当完整钱包的独立但微型化版本，并允许随时访问余额和交易。作为钱包的应用程序通常是在开放源代码环境中设计的，因此它们也有助于将开发人员和高级用户汇集到社区中。冷存储钱包是一种长期存储比特币的更为永久的方法。有时钱包会损坏，或者用户无法记住解锁钱包的密钥，使得他们的余额实际上无法使用。钱包上的密码没有恢复机制。这里的想法是创建一个新钱包，并将交易发送到该钱包上的新地址。现在，这个钱包可以备份并保存到诸如闪存驱动器之类的物理设备中，并安全地存储起来。一旦该交易在区块链上得到验证，您的比特币就可以随时从闪存驱动器中取回。这可以防止发生任何意外事件，并将您的货币与您用于进行交易或挖掘比特币的主要钱包分开。一些开发人员进一步采取了步骤，并创建了纸质钱包，其中地址被编码在一个QR码中，而该特定钱包的私钥也以另一个QR码的形式打印在纸上。注意您如何在没有自己编写脚本或代码的情况下查看比特币网络上的交易发生情况？在比特币（以及大多数加密货币）中，有一个称为区块链浏览器的功能，通常是一个网站，可以查看来自比特币网络的所有交易。您可以获取关于交易的各种详细信息，例如交易的来源、金额、区块哈希或收到多少次确认。
- en: Simple Payment Verification
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单支付验证
- en: 'So far, we have talked about the structure of blocks, transaction lists, how
    transactions occur between users, and how they are recorded on the blockchain.
    Blocks are fundamentally data structures linked on the blockchain, and transactions
    can be thought of as property of that data structure. More precisely, in the case
    of blockchains, transactions are represented as leaves of a merkle tree. Hashes
    have been used throughout the Bitcoin protocol as a method for maintaining data
    consistency because a hash is very easy to verify and nearly impossible to reverse
    engineer. Building on these properties, we can tackle a very difficult technical
    challenge on the blockchain: How can we check if a particular transaction belongs
    to a block? Checking through an N number of items in a list would be very inefficient,
    so we cannot simply check every transaction in a blockchain containing millions
    of blocks to verify. This is where a merkle tree provides speed and efficiency.To
    visualize a merkle tree, refer to Figure [3-5](#Fig5). It is constructed from
    the transactions of a block to allow fast access for verification purposes. Let’s
    follow the example shown in Figure [3-5](#Fig5). In this case, there are eight
    transactions collected in a block and represented on a merkle tree. The lowest
    level is the transactions themselves, and they are abstracted to a higher level
    by hashing two transactions together and obtaining an output hash. This hash is
    combined with a second one and hashed again to abstract a higher level. This process
    is repeated until only two hashes are left. Notice that each level contains information
    about the level below, and finally the highest level holds a hash with information
    from the entire tree. This hash is called the merkle root. How would a merkle
    root assist in finding a transaction? Let’s run through the example shown in Figure
    [3-6](#Fig6) and try to find transaction 6 from the merkle tree. For starters,
    the merkle root allows us to skip the other half of the tree, and now our search
    is limited to transactions 5 through 8\. The hashes guide the search further,
    allowing us to step into (reach) transaction 6 in just three steps. Compare this
    to searching through the whole tree, stepping into every level, and comparing
    every transaction to see if it is indeed transaction 6\. That process would be
    more involved in terms of the steps taken and the time needed, and this becomes
    too exhausting if the search expands to millions of transactions.![A430562_1_En_3_Fig5_HTML.jpg](Images/A430562_1_En_3_Fig5_HTML.jpg)Figure
    3-5.Constructing a merkle rootThe lowest level is formed from the transactions
    and the general idea is to keep hashing two elements together and retain some
    information about the level below. Ultimately, we are left with only two elements
    that are hashed together to form the merkle root.When would searching for a transaction
    come in handy? Every new user to get started with the standard Bitcoin wallet
    client has to download the entire blockchain. Over time, the blockchain has increased
    in download size, recently reaching a few gigabytes. This can be intimidating
    to new users, who cannot use their wallets until the blockchain download is finished,
    and it might turn them away. To solve the problem of having to download a bloated
    blockchain with historic transactions, Satoshi came up with a solution called
    SPV. The rationale in SPV is to create a wallet client that downloads only the
    block headers instead of the entire blockchain. This new lightweight client can
    use the merkle root in the block headers to verify if a particular transaction
    resides in a given block. The precise mechanism requires the wallet to rely on
    a merkle branch and reach the specific transaction, much like the example shown
    in Figure [3-6](#Fig6). Currently, for Bitcoin, there is an alternative wallet
    client known as Electrum that implements SPV and allows new users to avoid the
    hassle of downloading the entire blockchain.![A430562_1_En_3_Fig6_HTML.jpg](Images/A430562_1_En_3_Fig6_HTML.jpg)Figure
    3-6.Finding a transaction using the merkle rootThe root allows us to skip half
    of the tree during our search and the next level narrows down the search even
    further. Using the merkle root, we can reach the transaction in just three steps,
    which allows a very high operational efficiency that we would need in Bitcoin’s
    current network. The path to reaching transaction 6 is also known as a merkle
    branch, connecting the root to a leaf.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了区块的结构、交易列表、用户之间的交易发生方式以及它们如何记录在区块链上。区块基本上是链接在区块链上的数据结构，交易可以被看作是该数据结构的属性。更确切地说，在区块链的情况下，交易被表示为默克尔树的叶子。哈希一直被用于比特币协议中作为维护数据一致性的方法，因为哈希非常容易验证，几乎不可能被逆向工程。建立在这些属性之上，我们可以解决区块链上的一个非常困难的技术挑战：我们如何检查特定交易是否属于一个区块？在列表中检查
    N 个项目将非常低效，所以我们不能简单地检查包含数百万个区块的区块链中的每笔交易以进行验证。这就是默克尔树提供速度和效率的地方。要可视化默克尔树，请参考图[3-5](#Fig5)。它由一个区块的交易构成，以便快速访问以进行验证。让我们来看一下图[3-5](#Fig5)中显示的例子。在这种情况下，有八笔交易被收集到一个区块中，并在默克尔树上表示出来。最低级别是交易本身，它们通过将两个交易哈希在一起并获得一个输出哈希来抽象到更高的级别。这个哈希与第二个哈希组合并再次哈希以抽象一个更高的级别。这个过程重复进行，直到只剩下两个哈希。请注意，每个级别都包含下面级别的信息，最终最高级别保存有来自整个树的信息的哈希。这个哈希被称为默克尔根。默克尔根如何帮助我们找到一个交易？让我们通过图[3-6](#Fig6)中显示的例子运行一下，尝试从默克尔树中找到交易
    6。首先，默克尔根允许我们跳过树的另一半，现在我们的搜索仅限于交易 5 到 8。哈希进一步引导搜索，使我们只需三步就能到达交易 6。将这与搜索整个树、进入每个级别并比较每个交易是否确实是交易
    6 相比。这个过程在步骤和时间上更为复杂，如果搜索扩展到数百万笔交易，这将变得过于繁琐。![A430562_1_En_3_Fig5_HTML.jpg](Images/A430562_1_En_3_Fig5_HTML.jpg)图
    3-5.构建默克尔根最低级别由交易组成，总体思路是将两个元素哈希在一起，并保留有关下一级别的一些信息。最终，我们只剩下两个元素被哈希在一起形成了默克尔根。何时寻找交易会有用？每个新用户开始使用标准比特币钱包客户端都必须下载整个区块链。随着时间的推移，区块链的下载大小已经增加到了几个千兆字节。对于新用户来说，这可能令人生畏，因为他们在区块链下载完成之前无法使用他们的钱包，这可能会使他们却步。为了解决必须下载历史交易的庞大区块链的问题，中本聪提出了一种称为
    SPV 的解决方案。SPV 中的基本原理是创建一个仅下载区块头而不是整个区块链的钱包客户端。这个新的轻量级客户端可以使用区块头中的默克尔根来验证特定交易是否位于给定的区块中。精确的机制要求钱包依赖于一个默克尔分支，并达到特定的交易，就像图[3-6](#Fig6)中显示的例子一样。目前，对于比特币来说，有一个名为
    Electrum 的备选钱包客户端实现了 SPV，并允许新用户避免下载整个区块链。![A430562_1_En_3_Fig6_HTML.jpg](Images/A430562_1_En_3_Fig6_HTML.jpg)图
    3-6.使用默克尔根找到交易根允许我们在搜索过程中跳过树的一半，而下一级别进一步缩小了搜索范围。使用默克尔根，我们可以在只需三步的情况下达到交易，这在比特币当前网络中是非常高的操作效率所需。到达交易
    6 的路径也被称为默克尔分支，连接根和一个叶子。
- en: Blockchain Forks
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区块链分叉
- en: 'Here’s an interesting scenario to consider: Several miners are competing to
    solve the PoW and create a block. Incidentally, two miners find a valid value
    within a few seconds of each other and broadcast them to the network. What happens
    now? This situation is known as a fork, and it is completely normal on the Bitcoin
    network, especially as the network starts to scale and include thousands of miners.
    To resolve the fork, there are a few rules in place on the network, called the
    consensus rules. The tie creates two versions of the blockchain, and this tie
    is resolved when the next block is discovered. Some of the peers will be working
    on one version of the blockchain, and others will be working on the second version.
    When the next block is discovered, one of the chains will become longer due to
    the inclusion of this new block. This chain now becomes the active chain and the
    nodes will converge to the new chain. This process is visually illustrated in
    Figure [3-7](#Fig7).![A430562_1_En_3_Fig7_HTML.jpg](Images/A430562_1_En_3_Fig7_HTML.jpg)Figure
    3-7.Fork in the chainIn this example, block 4 is discovered at the same time by
    two miners, but the tie is resolved when the next block is discovered on Branch
    B. This branch now becomes the active chain and all the nodes converge to using
    Branch B as the new active chain.Normal forks on the blockchain are not a concerning
    event, because they are usually resolved within a matter of minutes. Soft and
    hard forks are an entirely different matter, however. These can occur in the case
    of upgrades to the Bitcoin core-code where a permanent split happens between nonupgraded
    nodes that cannot validate any newly created blocks and upgraded nodes that have
    begun creating blocks following the new consensus rules. Two entirely different
    types of blocks begin to appear on the network and the network is unable to converge
    on a single active chain until the nodes are upgraded to the new rules.In this
    case, there are two possible outcomes. The first possibility is that the majority
    of the network switches over to the new rules (a soft fork), and the new rules
    allow for the carryover of some portion of the valid old blocks. The second alternative
    is that the old blocks remain invalid for the new nodes, and no old blocks are
    accepted in the network by the new nodes. This is a hard fork, where no forward
    compatibility exists and the old blocks will no longer be accepted by the new
    nodes. All the miners and nodes have to upgrade to the new software so that their
    blocks can be considered valid under the new rules. A hard fork can be chaotic
    and cause a problem for users and merchants that have created payment terminals
    and interfaces relying on the old rules for transactions. They have to upgrade
    their back-end software to be compatible with the new rules and ensure a smooth
    transition of incoming Bitcoins. A hard fork is not upcoming for the Bitcoin network,
    but developers have begun researching just how complex the process might be. We
    end our discussion of the blockchain forks here, but we return to it later. In
    the next chapters, we take a look at circumstances in which a hard fork might
    become necessary in the next generation of Bitcoin protocols.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个有趣的情景需要考虑：几个矿工正在竞争解决PoW并创建一个区块。碰巧，两个矿工在几秒钟内找到一个有效值，并将其广播到网络上。现在会发生什么？这种情况被称为分叉，在比特币网络中是完全正常的，特别是当网络开始扩展并包括数千名矿工时。为了解决分叉，在网络上制定了一些规则，称为共识规则。分叉创建了区块链的两个版本，当下一个区块被发现时，这个分叉将会被解决。一些节点将会在一个区块链版本上进行工作，而其他节点将在第二个版本上进行工作。当下一个区块被发现时，由于包含了这个新区块，其中一个链将变得更长。这个链现在变成了活跃链，节点将会收敛到这个新链上。这个过程在图[3-7](#Fig7)中以可视化方式展示。![A430562_1_En_3_Fig7_HTML.jpg](Images/A430562_1_En_3_Fig7_HTML.jpg)图3-7.链中的分叉在这个例子中，区块4同时被两个矿工发现，但当Branch
    B上发现了下一个区块时，这个分叉被解决。这个分支现在成为了活跃链，所有节点都收敛到使用Branch B作为新活跃链。区块链上的常规分叉并不是一个值得关注的事件，因为它们通常在几分钟内就能解决。然而，软分叉和硬分叉是一个全然不同的问题。这些可能发生在比特币核心代码升级时，导致未升级的节点和已经开始按照新共识规则创建区块的已升级节点之间发生永久分裂。网络上开始出现两种完全不同类型的区块，网络不能收敛到一个单一的活跃链，直到节点升级到新规则。在这种情况下，有两种可能的结果。第一种可能性是大多数网络转向新规则（软分叉），新规则允许部分有效的旧区块继续存在。第二种选择是旧区块对于新节点来说不再有效，并且新节点不接受网络上的旧区块。这是一个硬分叉，没有前向兼容性，旧区块将不再被新节点接受。所有的矿工和节点都必须升级到新软件，以便在新规则下其区块被认为是有效的。硬分叉可能会引起混乱，并对依赖旧规则进行交易的用户和商家造成问题。他们必须升级他们的后端软件，以便与新规则兼容，并确保比特币的收款顺利过渡。对于比特币网络来说，目前并没有硬分叉计划，但开发人员已经开始研究这个过程可能有多复杂。我们在这里结束了对区块链分叉的讨论，但我们会在后面回到这个话题。在接下来的章节中，我们将看一看在未来比特币协议的情况下，硬分叉可能会成为一个必要的情况。
- en: Summary
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we integrated the concepts of mining into the whole blockchain
    network. We described what a blockchain is and how it functions at a technical
    level. Then, we described the workflow of a transaction and tracking unspent transaction
    outputs. We talked about how transactions are put together and propagated on the
    blockchain and also mining software such as a wallet and mining client. Then,
    we put mining in the context of a proper network and showed how a transaction
    goes from being included in a block to being propagated. After that, we talked
    about the concept of SPV and the importance of merkle hashes and roots in Bitcoin.
    We ended the chapter with a discussion of blockchain forks and how they influence
    the network, which we revisit later in the book as well.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将挖矿的概念融入整个区块链网络中。我们描述了区块链在技术层面上是什么以及它是如何运作的。然后，我们描述了交易的工作流程和跟踪未花费的交易输出。我们谈论了交易是如何组合并在区块链上传播的，以及挖矿软件，如钱包和挖矿客户端。然后，我们将挖矿放入适当网络的背景中，并展示了交易是如何从被包含在区块中到被传播的。之后，我们谈论了SPV的概念以及比特币中Merkle哈希和根的重要性。我们在章节最后讨论了区块链分叉以及它们如何影响网络，我们在本书中稍后也会重新讨论这个问题。
- en: References
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: The main references used to prepare this chapter are the Bitcoin Developer Guide
    for discussions on UTXOs and block headers. Georg Becker’s work on Merkel Tree
    signatures was used to prepare the sections on Simple Payment Verification and
    Merkel roots.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 编写本章所使用的主要参考资料是比特币开发者指南，用于讨论UTXOs和区块头。Georg Becker关于Merkel树签名的工作被用于准备简单支付验证和Merkel根部分。
