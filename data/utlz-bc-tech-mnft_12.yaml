- en: Chapter 11
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章
- en: 'Transformation of Traditional Gas Industries to Blockchain-Enabled Gas Industries:'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将传统的燃气行业转变为区块链启用的燃气行业：
- en: A Secured Supply Chain Strategy for Tracking Gas
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 用于跟踪气体的安全供应链策略
- en: Vladimir Nikolaevich Kustov
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弗拉基米尔·尼古拉耶维奇·库斯托夫
- en: Saint Petersburg State University of Railway Transport of Emperor Alexander
    I, Russia
  id: totrans-4
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 亚历山大一世铁路运输圣彼得堡国立大学，俄罗斯
- en: ABSTRACT
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要
- en: 'The author considers the main purpose of this chapter to be the presentation
    of a modern approach to the digital transformation of traditional business processes
    in the gas industry. Using the example of a pilot project successfully implemented
    in the gas industry, the author shows the process of synthesizing a high-tech
    supply chain infrastructure based on blockchain. The presentation begins with
    a description of the main business processes of the supply chain. The functions
    for all participants of the system are described and visualized in detail. The
    main components of the system are considered: digital dispatcher, supply monitor,
    interaction interfaces, and production environment. A comparative analysis of
    the security of modern blockchain platforms is provided. The author carefully
    analyzes the technologies for creating and ensuring the security of smart contracts
    and offers a step-by-step method for implementing secure smart contracts. At the
    end of the chapter, the results of choosing the most secure blockchain platforms
    are presented.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作者认为本章的主要目的是展示数字化转型传统业务流程的现代方法，以适应气体行业。作者通过一个在气体行业成功实施的试点项目的例子，展示了基于区块链的高科技供应链基础设施的合成过程。演示从描述供应链的主要业务流程开始。详细描述和可视化了系统所有参与者的功能。考虑了系统的主要组成部分：数字调度员、供应监控器、交互界面和生产环境。提供了对现代区块链平台安全性的比较分析。作者仔细分析了创建和确保智能合约安全性的技术，并提供了一个逐步实施安全智能合约的方法。在本章末尾，提供了选择最安全的区块链平台的结果。
- en: INTRODUCTION
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 引言
- en: 'Recently, only a lazy person has not written or talked about blockchain technology.
    Blockchain – what is it: the technology of the future or self-deception in the
    light of its little knowledge and applicability today? It is possible to argue,
    answering this question, for a long time and persistently. This chapter discusses
    the technological features of ensuring the security of this new technology, which
    often remain “behind the scenes” or represent some superficial, short, and non-revealing
    description (Kustov & Stankevich, 2019).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 近来，只有懒惰的人才不会写或谈论区块链技术。区块链 - 它是未来的技术还是自欺欺人，在当前对其知识和适用性的了解尚浅的情况下？对于这个问题，可以进行长时间而坚决的争论。本章讨论了确保这种新技术安全性的技术特性，这些特性经常被“藏在幕后”，或者是一些肤浅的、简短的、不具有启发性的描述（Kustov＆Stankevich，2019）。
- en: 'The views on blockchain technology expressed by experts in the field of information
    security and information technologies in print and oral presentations can be defined
    as opposed and considered at two criteria levels (Kustov & Stankevich, 2018):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在信息安全和信息技术领域的专家对区块链技术的观点在印刷品和口头演讲中表达，可以定义为相反的，并在两个标准水平上考虑（Kustov＆Stankevich，2018年）：
- en: 1\. prospects for implementation;
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1. 实施前景；
- en: 2\. the consequences of performance.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2. 表现的后果。
- en: The second criterion directly follows from the first, and both allow us to divide
    experts into skeptics and enthusiasts. At the first level – “Prospects” – opinions
    are divided into those that express a sincere belief in blockchain and its existence
    within a variety of systems and services and those that deny it, referring to
    the possibility of an alternative, simpler, and, consequently, more reliable approaches
    to solving specific tasks. The second criterion – “Consequences” - divides experts
    into those who express unbridled delight in the light of the upcoming “revolution”
    (Swan, 2018), comparable to the creation of the Internet, and those who associate
    blockchain with the death of existing information and payment systems (Chris,
    2017). To the point, the creator of the blockchain, Satoshi Nakomoto, did not
    expect such a sad outcome in any way (Satoshi, 2008).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个标准直接来源于第一个标准，两者都允许我们将专家分为怀疑论者和热心论者。在第一级别“前景”中，意见分为那些真诚地相信区块链及其存在于各种系统和服务中的人，以及那些否定它的人，他们提到解决特定任务的可能替代方法更简单，因此更可靠。第二个标准-“后果”-将专家分为那些在即将到来的“革命”（Swan，2018年）光明前景下表达无限喜悦的人，该革命可与互联网的创立相媲美，以及将区块链与现有信息和支付系统的消亡联系起来的人（Chris，2017年）。确切地说，区块链的创造者中本聪根本没有预料到会有如此悲哀的结局（中本聪，2008年）。
- en: However, in practice, a huge mass of positive examples of the use of new technology
    prevails (Eman et al., 2020), (Nin et al., 2021), (Ahmed et al., 2021). The gas
    industry is no exception, and much attention is paid to the distributed registry
    technology.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在实践中，使用新技术的大量积极例子占据主导地位（Eman等人，2020年），（Nin等人，2021年），（Ahmed等人，2021年）。天然气行业也不例外，对分布式账本技术给予了很多关注。
- en: 'So, the author considers the main purpose of this chapter to be the presentation
    of a modern approach to the digital transformation of traditional business processes
    in the gas industry. In recent years, several blockchain pilot projects have been
    implemented in the gas industry. Using the example of a pilot project successfully
    implemented in the gas industry, the author shows the process of synthesizing
    a high-tech supply chain infrastructure based on blockchain. Three completed pilot
    projects are particularly indicative:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，作者认为本章的主要目的是展示一种现代化的方法，用于对天然气行业传统业务流程进行数字化转型。近年来，天然气行业实施了几个区块链试点项目。作者以成功在天然气行业实施的试点项目为例，展示了基于区块链的高科技供应链基础设施的合成过程。三个已完成的试点项目特别值得关注：
- en: 1\. A pilot project to create a supply efficiency management system using blockchain
    technology.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1\. 利用区块链技术创建供应效率管理系统的试点项目。
- en: 2\. Develop a technological platform prototype for automating concluding, monitoring,
    and executing contracts based on blockchain technology.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2\. 开发基于区块链技术的自动化合约订立、监控和执行的技术平台原型。
- en: 3\. Development of a new digital Smart Fuel platform using blockchain technology.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3\. 使用区块链技术开发新的数字智能燃料平台。
- en: As part of the first project, gas industry specialists tested blockchain technology
    and the Internet of Things concept in material and technical resources logistics.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一个项目的一部分，燃气行业专家在物资和技术资源物流方面测试了区块链技术和物联网概念。
- en: Radiofrequency tags (RFID) and satellite positioning sensors (GPS) were installed
    by technical specialists on the shut-off valves and pipe products purchased for
    the gas production company. At the shipment stage of pipe product shipment from
    the manufacturer, a document with information about the delivery was formed after
    reading the RFID tags. The GPS sensor made it possible to monitor cargo movement
    to the storage base, the speed of its movement, the number, and the duration of
    stops on the way. All data received from the devices was recorded by a smart contract
    and reflected in the blockchain. In the future, information about warehouse and
    transport operations — entering products into a warehouse, moving to a berth for
    loading, delivery to a platform in the Pechora Sea — was transmitted according
    to a similar scheme. The blockchain provided an inextricable link between the
    physical delivery, all concurrent processes, and document flow and allowed all
    participants to access reliable information in encrypted form.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 技术专家在天然气生产公司购买的切断阀和管道产品上安装了射频标签（RFID）和卫星定位传感器（GPS）。在制造商装运管道产品的装运阶段，读取RFID标签后形成了一份包含交付信息的文件。GPS传感器使得能够监控货物的移动到储存基地，其移动速度，途中的停留次数和持续时间。所有从设备接收到的数据都由智能合约记录并反映在区块链上。将来，关于仓储和运输操作的信息——将产品输入仓库，移动到码头装载，交付到北冰洋的平台——将根据类似的方案传输。区块链为物理交付、所有并发流程和文件流程之间提供了不可分割的联系，并允许所有参与者以加密形式访问可靠的信息。
- en: The successful implementation of the pilot project confirmed the possibility
    of using blockchain technology in supply chain management. The gas industry is
    considering the prospects for further using the potential of the blockchain and
    replicating the experience gained.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 成功实施试点项目证实了在供应链管理中使用区块链技术的可能性。燃气行业正在考虑进一步利用区块链的潜力并复制所获得的经验。
- en: “Blockchain in deliveries has allowed us to create an ecosystem for the interaction
    of all participants in the process, such as the manufacturer, inspector, logistics
    operator, warehouse, and consumer. We see potential in the development and further
    application of the technology” (Karaev, 2018).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: “在交付中使用区块链使我们能够创建一个生态系统，用于制造商、检查员、物流运营商、仓储和消费者等所有参与者的互动。我们看到了技术发展和进一步应用的潜力”（Karaev，2018）。
- en: According to the second project, a prototype of a technological platform was
    developed on the basis of blockchain technology, which provides for the automation
    of the process of concluding, monitoring, and executing contracts. This system
    also assumes automatic arbitration and automatic calculation of gas payments.
    The developed system is open to all participants of the contractual process, and
    it is completely protected from unauthorized interference and unauthorized changes.
    The gas industry is currently actively working on implementing automating the
    support of the contractual process for gas supplies. At the initial stage, this
    work is carried out only for large industrial gas consumers. “The digital economy
    is the future that has already come. This project is a vivid example of a combination
    of industry, technological and financial expertise, in which all participants
    benefit” (Vanurina, 2019).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 根据第二个项目，在区块链技术基础上开发了一个技术平台的原型，该平台提供了合同的自动化订立、监控和执行过程。该系统还设想了自动仲裁和天然气支付的自动计算。该系统向合同流程的所有参与者开放，并且完全受到未经授权的干预和未经授权更改的保护。目前，天然气行业正在积极努力实施自动化支持天然气供应的合同流程。在初期阶段，这项工作仅针对大型工业气体消费者进行。“数字经济是已经到来的未来。该项目是产业、技术和金融专业知识相结合的生动例证，其中所有参与者都受益”（Vanurina，2019）。
- en: As part of the third project, a new Smart Fuel platform was developed based
    on the blockchain, designed to accelerate mutual settlements between the fuel
    operator and the airline.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第三个项目的一部分，基于区块链开发了一个新的智能燃料平台，旨在加快燃料运营商和航空公司之间的互相结算。
- en: As a result of its use, the settlement time was reduced from four days to fifteen
    seconds. “The Smart Fuel digital system simplifies the work of our partners as
    much as possible and increases the financial security of mutual settlements. Our
    solution allows us to take into account all the needs of airlines, reduce import
    dependence on foreign services, and has a high potential for scaling for the aviation
    industry” (Egorov, 2021).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用该系统后，结算时间从四天缩短到十五秒。“智能燃料数字系统尽可能简化了我们合作伙伴的工作，并增加了互相结算的财务安全性。我们的解决方案使我们能够考虑到航空公司的所有需求，减少对外国服务的进口依赖，并具有高度的航空工业规模化潜力”（Egorov，2021）。
- en: 'Because of the implementation of the pilot projects mentioned above, the following
    estimates of their economic efficiency were obtained:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于上述试点项目的实施，他们的经济效益估计如下：
- en: 1\. Reducing administrative and commercial costs by 5-10% (thanks to the pilot
    projects) allows large oil and gas companies to save 0.4-0.7 billion dollars.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1\. 通过减少5-10%的行政和商业成本（通过试点项目）使大型石油和天然气公司节省了4-7亿美元。
- en: 2\. One of the largest oil and gas companies estimated that the use of blockchain
    in the oil and gas business increases the company's efficiency by 10-15%.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2\. 其中一家最大的石油和天然气公司估计，在石油和天然气业务中使用区块链将提高公司的效率10-15%。
- en: 3\. This oil and gas company believes that implementing the pilot project will
    allow the company to save up to 10% of tax costs.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3\. 这家石油和天然气公司认为，实施试点项目将使公司节省高达10%的税收成本。
- en: 'Limiting the scope of this chapter, the author further examines in more detail
    the stages of work on only one of these projects. To create and implement modern
    technologies at gas industry enterprises, a pilot project was carried out on the
    topic “Managing the quality of material and technical resources and supply efficiency
    using Blockchain technology,” consisting of the following main stages:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在天然气工业企业创建和实施现代技术，对“使用区块链技术管理物资和技术资源质量和供应效率”的主题进行了试点项目，该项目包括以下主要阶段：
- en: 1\. Research and graphical visualization of the main business processes of the
    supply efficiency management system at gas industry enterprises using Blockchain
    technology.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1\. 使用区块链技术研究和图形化展示供应效率管理系统的主要业务流程，适用于天然气工业企业。
- en: 2\. Comparative analysis of blockchain platforms, testing, and selection of
    a platform for implementation.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2\. 区块链平台的比较分析、测试和选择平台进行实施。
- en: Let's take a closer look at the pilot design process by the steps listed above.
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们更详细地看看上述步骤的试点设计过程。
- en: RESEARCH AND GRAPHICAL VISUALIZATION OF THE MAIN BUSINESS PROCESSES OF THE SUPPLY
    EFFICIENCY MANAGEMENT SYSTEM
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 研究和图形化展示供应效率管理系统的主要业务流程
- en: The urgent need to develop a system for tracking the supply of MTR at gas industry
    enterprises is due to the very complex and time-consuming interaction of supply
    participants who have their separate information systems (IS). Data processing
    in the existing supply system is carried out exclusively centrally using data
    processing Centers (DPC). There was a need to compare data processing processes
    centrally with the help of a data center and decentralized with the help of distributed
    registry technology (blockchain). The results of the comparison are presented
    in Table 1.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 由于供应参与者之间存在着各自的信息系统（IS）的复杂且耗时的交互，因此迫切需要在天然气工业企业开发一套跟踪MTR供应的系统。现有供应系统中的数据处理完全集中在数据处理中心（DPC）中进行。需要比较使用数据中心和分布式注册技术（区块链）分别集中和分散进行数据处理的结果。比较结果见表1。
- en: 'As can be seen from Table 1, the use of Blockchain technology in data processing
    has significant advantages:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如表1所示，区块链技术在数据处理中的应用具有显著优势：
- en: • Increasing the level of trust,
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 提高信任水平，
- en: • Control of the business process by all participants of the process,
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 由过程的所有参与者控制业务流程，
- en: • Control of user access by consensus decision,
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 通过共识决策控制用户访问，
- en: • Ensuring the automatically guaranteed fulfillment of contractual obligations
    through the use of smart contracts,
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 通过智能合约确保自动保证履行合同义务，
- en: • Using the built-in certified cryptographic protection tools (СCPT),
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用内置的认证加密保护工具（СCPT），
- en: • Guaranteed data immutability,
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 保证数据不可变性，
- en: • The absence of expensive and security-sensitive DPC,
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 没有昂贵且安全敏感的DPC，
- en: • Using standard communication channels,
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用标准通信渠道，
- en: • Increased reliability due to profound territorial decentralization,
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 由于深层次的地方分权而提高的可靠性，
- en: • Extensive scaling of the proposed solution based on the use of boxed versions
    of the developed product.
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 基于开发产品的盒装版本使用的解决方案的广泛扩展。
- en: The listed set of very significant advantages is a weighty argument in favor
    of using Blockchain technology.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所列举的一系列非常重要的优点是支持使用区块链技术的有力论据。
- en: 'As for the current situation in the existing supply system, as can be seen
    from Figure 1, the existing supply system was completely outdated, redundant,
    and did not meet modern concepts. The main components of a typical information
    system (IS) of an ancient supply chain, shown in Figure 1, are:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 至于现有供应系统的现状，如图1所示，现有供应系统已完全过时，冗余且不符合现代概念。古老供应链典型信息系统（IS）的主要组成部分如图1所示：
- en: • IS operator;
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • IS运营商；
- en: • Operator IS;
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 运营商IS；
- en: • IS of the Customer (gas company);
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 客户（煤气公司）的IS；
- en: • IS of the Transport company;
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 运输公司的IS；
- en: • Manufacturer IS;
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 制造商IS；
- en: • The Inspector IS.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 检查员IS。
- en: All information systems were heterogeneous. Each gas company created its own
    corporate IS. Communication channels were not standardized. As shown in Figure
    1, during the interaction of the Transport Company's IS ↔ the Customer's IS, and
    the operator IS ↔ the inspector IS, the most archaic methods of communication
    were observed, up to the “pigeon mail”, of course, allegorically.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 所有信息系统都是异构的。每个煤气公司都创建了自己的企业IS。通信渠道未标准化。如图1所示，在运输公司的IS与客户的IS之间的互动以及运营商IS与检查员IS之间的互动中，观察到了最古老的通信方法，甚至包括“信鸽邮件”，当然，这是比喻性地说。
- en: 'Three types of communication were actively used: telephone (IS of the inspector
    ↔ IS of the Operator), regular mail (IS of the Manufacturer ↔ IS of the Customer),
    paper document management: IS of the Manufacturer ↔ IS of the Operator, IS of
    the Transport Company ↔ IS of the Inspector. Sometimes non-traditional types of
    communication were also used (for example, courier delivery) for the Customer''s
    IS ↔ The Transport Company''s IP. The customers were the largest gas and gas transportation
    companies. Large telecommunications companies acted as operators, logistics operators
    acted as transport companies, metallurgical, and pipe enterprises acted as producers,
    since the main supply was pipe products. The supervisory gas company specially
    created for this purpose acts as an Inspector.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 三种类型的通信被积极使用：电话（检查员的信息系统 ↔ 运营商的信息系统）、普通邮件（制造商的信息系统 ↔ 客户的信息系统）、纸质文件管理：制造商的信息系统
    ↔ 运营商的信息系统、运输公司的信息系统 ↔ 检查员的信息系统。有时也会使用非传统类型的通信（例如，快递投递）客户的信息系统 ↔ 运输公司的信息系统。客户是最大的天然气和天然气运输公司。大型电信公司充当运营商，物流运营商充当运输公司，冶金和管道企业充当生产商，因为主要供应是管材产品。专门为此目的创建的监管气体公司充当检查员。
- en: In this situation, it was decided to reorganize the supply chain. The main goal
    of the reorganization was to create a supply process controlled by a program code
    (a special software platform). The general scheme of the pilot project is shown
    in Figure 2.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，决定重新组织供应链。重新组织的主要目标是创建一个由程序代码（特殊软件平台）控制的供应过程。试点项目的总体方案如图2所示。
- en: Table 1\. Comparison of CDP and blockchain applications in the pilot project
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 表1. 集中式数据处理与区块链应用在试点项目中的比较
- en: '| No | Requirements for the implementation of the project | Centralized data
    processing (СDP) | The technology of distributed registries |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 序号 | 项目实施要求 | 集中式数据处理（CDP） | 分布式注册技术 |'
- en: '| 1 | The ability to integrate the participant''s IP directly with the data
    storage and processing point in the participant''s infrastructure. | Centralized
    data processing. Disadvantage: the need for all participants to trust the operator.
    | Storage and processing of data for all participants in the process. Advantage:
    there is no need to trust the operator. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 能够将参与者的信息系统直接集成到参与者基础设施中的数据存储和处理点。 | 集中式数据处理。缺点：所有参与者都需要信任运营商。 | 所有参与者数据的存储和处理过程。优势：无需信任运营商。
    |'
- en: '| 2 | It is necessary to be able to audit the implementation of the business
    process by all participants . | Closed code that provides a business process.
    Disadvantage: the inability to check the logic of the business process by all
    participants. | Open source code that provides a business process. Advantage:
    the ability to check the logic of the business process by all participants). |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 必须能够审计所有参与者对业务流程的实施。 | 提供业务流程的闭源代码。 缺点：所有参与者无法检查业务流程的逻辑。 | 提供业务流程的开源代码。
    优势：所有参与者可以检查业务流程的逻辑。 |'
- en: '| 3 | It is necessary to control the rights of users on the participant''s
    side. | Availability of centralized user access control. Disadvantage: the ability
    to disconnect participants by a centralized solution. | Distributed user access
    control. Advantage: restriction of participants by consensus decision/ |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 需要控制参与者侧用户的权限。 | 有中央化用户访问控制。 缺点：中央化解决方案可以断开参与者的能力。 | 分布式用户访问控制。 优势：通过共识决定限制参与者。
    |'
- en: '| 4 | Ensuring guaranteed performance of obligations. | Lack of guaranteed
    fulfillment of obligations within the system. Disadvantage: the need to trust
    the developer. | Ensuring guaranteed fulfillment of obligations within the system.
    Advantage: provided by the properties of smart contracts. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 确保义务的保证性能。 | 系统内无法保证履行义务。 缺点：需要信任开发人员。 | 确保系统内履行义务的保证。 优势：由智能合约的属性提供。
    |'
- en: '| 5 | Ensuring the immutability of historical data over time, the need to differentiate
    data access managed by data owners. | Hashing and encryption. Disadvantage: the
    use of third-party cryptographic tools. It is necessary to purchase certified
    funds. | Hashing and encryption. Disadvantage: the use of third-party cryptographic
    tools. It is necessary to purchase certified funds. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 确保历史数据随时间的不可变性，需要区分由数据所有者管理的数据访问。 | 哈希和加密。 缺点：使用第三方加密工具。 需要购买认证资金。 |
    哈希和加密。 缺点：使用第三方加密工具。 需要购买认证资金。 |'
- en: '| 6 | Ensuring the immutability of historical data over time. | The operations
    “create”, “read”, “change”, “delete” data are supported. | The “create” and “read”
    data operations are supported. Advantage: immutability of data. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 确保历史数据随时间的不可变性。 | 支持“创建”、“读取”、“更改”、“删除”数据操作。 | 支持“创建”和“读取”数据操作。优势：数据的不可变性。
    |'
- en: '| 7-9 | Reducing the cost of implementing, replicating, and supporting the
    solution. | The need to connect the process participants to the operator''s capacities.
    Disadvantage: loss of control. | Advantage: there is no need to connect participants
    to the operator''s capacities. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 7-9 | 降低解决方案的实施、复制和支持成本。 | 需要将流程参与者连接到操作员的能力。 缺点：失去控制。 | 优势：不需要将参与者连接到操作员的能力。
    |'
- en: '| The need for reliable high-speed communication channels. Disadvantage: high
    costs. | Advantage: standard communication channels. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 需要可靠的高速通信渠道。缺点：高成本。 | 优点：标准通信渠道。 |'
- en: '| The need to provide a fault-tolerant infrastructure. Disadvantage: high costs.
    | Reliability is ensured by territorial decentralization. Advantage: the costs
    are distributed to the participants. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 需要提供容错基础设施。缺点：高成本。 | 可靠性由地域去中心化来确保。优点：成本分摊给参与者。 |'
- en: '| 10 | The need to scale the solution to a large number of participants in
    the process. | Disadvantage: dependence on the operator''s resources. | Advantage:
    scaling depends on the resources of the participants. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 需要将解决方案扩展到大量参与者。 | 缺点：依赖于运营商的资源。 | 优点：扩展取决于参与者的资源。 |'
- en: '| 11 | The need for the legal significance of the transmitted and stored information.
    | Disadvantage non-certified cryptographic means of the EDI operator. | Advantage:
    the presence of certified crypto funds on the platform for two platforms in the
    Russian Federation, three more platforms are being certified. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 11 | 需要传输和存储信息的法律意义。 | 缺点：EDI运营商的非认证加密手段。 | 优点：俄罗斯联邦的两个平台上有认证的加密资金，另外三个平台正在进行认证。
    |'
- en: '| 12 | The need to ensure transparency of the project life cycle as a whole,
    including at subsequent stages. | Replication of data at subsequent stages of
    the project lifecycle. Disadvantage: requires integration with the developed solution.
    | Advantage: The ability to replicate data for use by solutions based on blockchain
    platforms from the boxed version. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 12 | 需要确保项目生命周期的整体透明性，包括后续阶段。 | 在项目生命周期的后续阶段复制数据。缺点：需要与开发的解决方案集成。 | 优点：能够复制数据供基于区块链平台的解决方案使用。
    |'
- en: '| Figure 1\. General view of the supply chain |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 图1. 供应链的概览 |'
- en: '| ![Figure978-1-7998-8697-6.ch011.f01](i/ch011.f01.png) |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-8697-6.ch011.f01](i/ch011.f01.png) |'
- en: 'The main element of the pilot project is the Product environment; the main
    component is the blockchain platform, which stores a log of all events in the
    system in transactions. In addition, other main components can be distinguished
    in this diagram of the pilot project, such as:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 试点项目的主要元素是产品环境；主要组件是区块链平台，它在交易中存储系统中的所有事件的日志。此外，试点项目的这张图中还可以区分出其他主要组件，例如：
- en: • Delivery contract;
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 交付合同;
- en: • Production;
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 生产;
- en: • Payment;
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 付款;
- en: • Input control.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 输入控制。
- en: These processes interact with the Blockchain platform through the interfaces
    of the SAP ERP system.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这些流程通过SAP ERP系统的接口与区块链平台进行交互。
- en: 'In addition, the following processes also became integral elements of the pilot
    project:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，以下流程还成为试点项目的组成部分：
- en: • Inspection control;
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 检验控制;
- en: • Delivery.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 交付。
- en: 'As interfaces for interaction with the Blockchain platform, these processes,
    respectively, use the products developed during the implementation of the pilot
    project:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 作为与区块链平台交互的接口，这些过程分别使用在试点项目实施期间开发的产品：
- en: • Digital Inspector;
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 数字检验员;
- en: • Supply monitor.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 供应监控器。
- en: '| Figure 2\. General scheme of the pilot project |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 图 2\. 试点项目的一般方案 |'
- en: '| ![Figure978-1-7998-8697-6.ch011.f02](i/ch011.f02.png) |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-8697-6.ch011.f02](i/ch011.f02.png) |'
- en: In general, the diagram of providing the implemented platform with an entire
    supply lifecycle is shown in Figure 3.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，提供已实施平台的整个供应生命周期的图表如图 3 所示。
- en: '| Figure 3\. Diagram of providing the implemented platform with an entire supply
    lifecycle |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 图 3\. 提供已实施平台的整个供应生命周期的图表 |'
- en: '| ![Figure978-1-7998-8697-6.ch011.f03](i/ch011.f03.png) |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-8697-6.ch011.f03](i/ch011.f03.png) |'
- en: The following stages act as the life cycle stages by the widely used “BUY-SHIP-PAY”
    technology. At the Production stage, a Digital Inspector is used for inspection
    supervision, and its use ensures a complete rejection of paper document management
    during inspections. Obtaining the initial data for the digital inspector is provided
    by objective control sensors that fully cover the entire production process with
    their observation.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下阶段作为广泛使用的“买-运-付”技术的生命周期阶段。在生产阶段，使用数字检验员进行检验监督，其使用确保在检验过程中完全放弃纸质文件管理。数字检验员获取初始数据的方式是通过完全覆盖整个生产过程的客观控制传感器进行观测。
- en: At the delivery stage, the use of a Delivery Monitor is provided. It provides
    100% train tracking and accurate cargo arrival forecast. GPS trackers on cars
    are also used for monitoring, providing objective information about the delivery.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在交付阶段，提供了交付监视器的使用。它提供了100%的列车跟踪和准确的货物到达预测。车辆上的 GPS 跟踪器也用于监控，提供有关交付的客观信息。
- en: Automatic data processing is provided at all stages marked in green using a
    Delivery Tracking System operating on the Blockchain platform.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 自动数据处理是在使用基于区块链平台运行的交付跟踪系统的所有标记为绿色的阶段提供的。
- en: This system eliminates the majority of paper documents and reduces administrative
    costs.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 该系统消除了大部分纸质文件，并降低了行政成本。
- en: 'Figure 4 shows a diagram of the delivery process before the reorganization
    (“As it was”). The diagram contains the following stages: Placing specifications
    at the factory, Inspection control, shipment and acceptance of products, and Mutual
    settlements.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4 显示了重新组织之前交付过程的图表（“如此前”）。该图表包含以下阶段：在工厂放置规格、检验控制、产品装运和验收以及相互结算。
- en: '| Figure 4\. Diagram of the delivery process before the reorganization (“As
    it was”) |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| 图 4\. 重新组织之前的交付过程的图表（“如此前”） |'
- en: '| ![Figure978-1-7998-8697-6.ch011.f04](i/ch011.f04.png) |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-8697-6.ch011.f04](i/ch011.f04.png) |'
- en: Figure 5 shows a diagram of the delivery process after the reorganization.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5 显示了重新组织后的交付流程图。
- en: '| Figure 5\. Diagram of the delivery process after the reorganization (“As
    it became”) |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 图 5\. 改组后交付过程的图示（“变得如此”） |'
- en: '| ![Figure978-1-7998-8697-6.ch011.f05](i/ch011.f05.png) |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-8697-6.ch011.f05](i/ch011.f05.png) |'
- en: The scheme, in general, is almost identical to the one shown in Figure 4\. However,
    significant changes in the stages framed in red in Figure 5 will be noted below.
    Both schemes provide freight forwarding services at the stage of shipment and
    acceptance of products.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 该方案总体上几乎与图 4\. 中显示的方案相同。但是，下面将注意到图 5 中以红色框标记的阶段中存在重大变化。两个方案均在装运和产品验收阶段提供货运服务。
- en: For each stage of the delivery process, detailed transaction chains have been
    developed, implemented by the implemented platform. An example of such a transaction
    chain for the first stage of the diagram (see Figure 4) is shown in Figure 6
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于交付过程的每个阶段，已开发详细的交易链，由实施的平台实施。图 4 中第一阶段的此类交易链示例如图 6 所示。
- en: '| Figure 6\. Inspection control “As it was” |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 图 6\. 检查控制 “曾经如此” |'
- en: '| ![Figure978-1-7998-8697-6.ch011.f06](i/ch011.f06.png) |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-8697-6.ch011.f06](i/ch011.f06.png) |'
- en: This diagram shows the transaction chains for each performer.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此图显示了每个执行者的交易链。
- en: 'Participation in the following transactions is provided for the Gas Company
    (Customer):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下交易为气公司（客户）提供参与：
- en: 1\. Coordination of production tasks (PT) with the inspection.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1\. 与检查协调生产任务（PT）。
- en: 2\. Coordination of the rules of interaction (RI).
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2\. 协调互动规则（RI）。
- en: 3\. Coordination of the control plan (PCI).
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3\. 控制计划（PCI）的协调。
- en: 4\. Checking and approving the PT execution report.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4\. 检查和批准 PT 执行报告。
- en: 'Participation in the following transactions is provided for the factory''s
    company:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下交易为工厂公司提供参与：
- en: 1\. Coordination RI.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1\. 协调 RI。
- en: 2\. Production schedule preparation with the allocation of a sales order.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2\. 制定生产计划并分配销售订单。
- en: 3\. Coordination of the control plan (PCI) with the inspection.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3\. 与检查协调控制计划（PCI）。
- en: 4\. Sending an inspector request at the plant, gas company, and inspection.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4\. 在工厂、气公司和检查处发送检查员请求。
- en: 5\. Manufacturing, testing, and acceptance.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5\. 制造、测试和验收。
- en: 6\. Discrepancy Resolving.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 6\. 解决不一致。
- en: 'Participation in the following transactions is provided for the inspection:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 提供以下交易的检查：
- en: 1\. Coordination of PT.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1\. 协调 PT。
- en: 2\. RI Development and approval by enterprises and manufacturers.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2\. RI 开发和企业、制造商的批准。
- en: 3\. Coordination of the PCI.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3\. PCI 的协调。
- en: 4\. Quality control and acceptance of works. Warning of the gas company's report.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4\. 质量控制和作品验收。气公司报告警告。
- en: 5\. Sending the certificate to the manufacturer for shipment.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5\. 将证书发送给制造商进行装运。
- en: 6\. Discrepancy registration notification.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 6\. 不一致登记通知。
- en: 7\. The quality certificate is approved.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 7\. 质量证书已批准。
- en: 8\. Formation and direction of TP to a gas company.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 8\. 形成并将 TP 导向气公司。
- en: The document type is indicated in unique icons (PDF file, MS Excel table, paper
    document, postal item). Transactions are interconnected by links that implement
    the logic of the corresponding business process.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 文档类型用独特的图标表示（PDF 文件、MS Excel 表格、纸质文档、邮件）。交易通过实现相应业务流程逻辑的链接相互关联。
- en: '| Figure 7\. Inspection control “As it became.” |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 图 7\. 检查控制“按照实际情况。” |'
- en: '| ![Figure978-1-7998-8697-6.ch011.f07](i/ch011.f07.png) |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-8697-6.ch011.f07](i/ch011.f07.png) |'
- en: 'Figure 7 shows the business process inspection control transaction diagram
    after the reorganization “As it became.” The logic of the business process has
    not changed. However, the processing of transactions marked in red involves the
    participation of new components of the business process: the Blockchain platform
    and the Digital Inspector. The documents processed by these components are marked
    with the corresponding red icons.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7 显示了重新组织后的业务流程检查控制交易图。业务流程逻辑并未改变。然而，以红色标记的交易处理涉及到业务流程的新组件的参与：区块链平台和数字检查员。由这些组件处理的文档用相应的红色图标标记。
- en: '| Figure 8\. Model of digital document flow and data exchange of participants
    in contractual relations |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 图 8\. 参与合同关系的数字文档流和数据交换模型 |'
- en: '| ![Figure978-1-7998-8697-6.ch011.f08](i/ch011.f08.png) |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-8697-6.ch011.f08](i/ch011.f08.png) |'
- en: 'During the implementation of this stage, a Model of digital document management
    and data exchange of participants in contractual relations was also developed,
    shown in Figure 8\. For each element in the document chain, the document''s title
    is given in the block''s header displaying the document. The lower part of the
    block contains the names of the subjects interacting with this document, performing
    the roles: the drafter of the document (indicated in blue), the recipient of the
    document (indicated in green), and the approving person (indicated in orange).
    The initial document in the chain is indicated in blue, and the final document
    is green. In addition, the sent documents are indicated in black, and the documents
    requiring approval are indicated in orange. The digital document management Model
    developed at this stage significantly simplified code writing at the smart contract
    development stage and helped avoid errors.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行这一阶段期间，还开发了参与合同关系的数字文档管理和数据交换模型，如图 8 所示。在显示文档的块头中给出了每个文档链中元素的标题。块的底部包含与此文档交互的主体的名称，执行以下角色：文档的起草者（以蓝色表示）、文档的接收者（以绿色表示）和批准人（以橙色表示）。链中的初始文档以蓝色表示，最终文档以绿色表示。此外，发送的文档以黑色表示，需要批准的文档以橙色表示。在智能合约开发阶段，此阶段开发的数字文档管理模型显著简化了代码编写，并有助于避免错误。
- en: 'Then the chains of documentation transactions were developed for the two main
    stages of the pipe product delivery process:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 随后，管道产品交付过程的两个主要阶段的文档交易链被开发出来：
- en: 1\. Production of products – Inspection control / Payment of inspection control;
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1\. 产品生产 - 检查控制 / 检查控制付款；
- en: 2\. Logistics / Payment for manufacturing.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2\. 物流 / 生产付款。
- en: 'Figure 9 shows an example of a chain of documentation transactions for the
    Production of products – Inspection control / Payment of inspection control stage.
    For each transaction, the name of the forwarded document and the participants
    of the interaction are indicated. In addition, the type of operation is specified
    by the legend: document forwarding (white), control event (red), request (yellow),
    execution (green).'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图9显示了一个关于产品生产 - 检查控制 / 检查控制付款阶段的文档交易链示例。对于每个交易，都标明了转发文档的名称和交互参与者。此外，通过图例指定了操作的类型：文档转发（白色）、控制事件（红色）、请求（黄色）、执行（绿色）。
- en: '| Figure 9\. The chain of documentation transactions at the stage: production
    of products – inspection control / payment of inspection control |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| 图9. 产品生产 - 检查控制 / 检查控制付款阶段的文档交易链 |'
- en: '| ![Figure978-1-7998-8697-6.ch011.f09](i/ch011.f09.png) |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| ![图9. 产品生产 - 检查控制 / 检查控制付款阶段的文档交易链](i/ch011.f09.png) |'
- en: The development of documentation transaction chains completes the first stage
    of the pilot project. At the second stage of the pilot project, a comparative
    analysis of blockchain platforms, their testing and the choice of a platform for
    implementation were performed.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 文档交易链的开发完成了试点项目的第一阶段。在试点项目的第二阶段，进行了区块链平台的比较分析，对其进行了测试，并选择了一个实施平台。
- en: COMPARATIVE ANALYSIS OF BLOCKCHAIN PLATFORMS AND THE CHOICE OF A PLATFORM FOR
    IMPLEMENTATION
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链平台的比较分析和实施平台的选择
- en: Information Security Requirements (When Developing Smart Contracts)
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 开发智能合约时的信息安全要求
- en: According to statistics, more than 70% of smart contracts carry vulnerabilities
    (Report, 2019). There is not yet a proven software package that allows you to
    fully investigate the code of smart contracts by static and dynamic analysis in
    a fully automatic mode and find vulnerabilities (Shapiev, 2019) in them that can
    cause harm in millions of dollars.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 根据统计数据，超过70%的智能合约存在漏洞（报告，2019年）。尚未有一个经过验证的软件包，能够通过静态和动态分析以完全自动化的方式对智能合约的代码进行全面调查，并找出其中可能导致数百万美元损失的漏洞（沙皮耶夫，2019年）。
- en: Blockchain technology has tremendous popularity and is being implemented everywhere.
    In static code analysis, the program is analyzed without its actual execution
    and dynamic analysis in the execution process. In most cases, static analysis
    means analysis carried out using automated source or executable code tools, performed
    without running the program.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链技术具有巨大的流行度，并且正在到处实施。在静态代码分析中，程序在没有实际执行的情况下进行分析，而在动态分析中，则在执行过程中进行分析。在大多数情况下，静态分析意味着使用自动化源代码或可执行代码工具进行的分析，无需运行程序即可执行。
- en: This term is usually applied to analysis performed by automated tools, and human
    analysis is called program concept, program understanding, or code mapping. In
    most cases, the analysis is performed on different versions of the source code.
    Since the Solidity programming language and the term smart contract itself is
    pretty new and used directly in the modern sphere of the crypto economy, many
    potential vulnerabilities can lead to substantial financial losses. Thus, the
    developer of a smart contract, or an entire project, is obliged to pay attention
    to checking his code for vulnerabilities.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 此术语通常适用于由自动化工具执行的分析，人工分析称为程序概念、程序理解或代码映射。在大多数情况下，分析是在不同版本的源代码上进行的。由于 Solidity
    编程语言和智能合约这一术语相当新，并直接应用于加密经济的现代领域，许多潜在的漏洞可能导致重大的财务损失。因此，智能合约的开发者或整个项目都有义务注意检查他的代码是否存在漏洞。
- en: 'At the moment, the dynamic analysis of smart contracts is reduced to checking
    the code in actual conditions, either in the blockchain platform or in its test
    version. In general, dynamic code analysis is a method of analyzing program code
    directly during its execution. The process of dynamic analysis can be divided
    into several stages:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，智能合约的动态分析被简化为在实际条件下检查代码，无论是在区块链平台上还是在其测试版本中。一般来说，动态代码分析是一种在程序执行过程中直接分析程序代码的方法。动态分析的过程可以分为几个阶段：
- en: • Preparation of source codes;
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 准备源代码；
- en: • Conducting a trial run of the code and collecting the necessary information;
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 执行代码的试运行并收集必要信息；
- en: • Analysis of the extracted data.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 提取数据的分析。
- en: 'During the trial run, we can execute the program on both real and virtual simulators.
    In this case, we must obtain the executable file from the source code. It is impossible
    to analyze the code containing problems of compiling or assembling the file in
    this way. With the help of dynamic analysis, the following data can be obtained:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在试运行期间，我们可以在真实和虚拟模拟器上执行程序。在这种情况下，我们必须从源代码获取可执行文件。通过动态分析，可以获得以下数据：
- en: • Resources used - the execution time of the code as a whole or its modules;
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 资源使用情况 - 代码作为整体或其模块的执行时间；
- en: • Number of web requests;
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • Web 请求次数；
- en: • Cyclomatic complexity;
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 圈复杂度；
- en: • Code errors;
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 代码错误；
- en: • Memory leaks;
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 内存泄漏；
- en: • Vulnerabilities in the code.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 代码中的漏洞。
- en: The dynamic analysis allows you to ensure that the project is working well or
    identifies errors, showing that it is necessary to fix them. Dynamic analysis
    is more advantageous from the point of view of improving quality since it does
    not allow you to lose sight of the program's shortcomings, as, for example, with
    static analysis. However, even if no defects were detected during the analysis,
    this does guarantee no “100%”defects since the full coverage of the program with
    tests does not mean that there are no errors in the code since the dynamic analysis
    cannot detect logical errors.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 动态分析可以确保项目运行良好或识别错误，表明有必要修复它们。从提高质量的角度来看，动态分析更具优势，因为它不会让您忽视程序的缺陷，例如静态分析。然而，即使在分析过程中没有检测到缺陷，这也不能保证没有“100%”的缺陷，因为测试对程序的全面覆盖并不意味着代码中没有错误，因为动态分析无法检测到逻辑错误。
- en: Simplified Methodology for Finding Vulnerabilities in Smart Contracts
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约漏洞查找的简化方法
- en: 'To write a secure functioning smart contract, you need to go through several
    stages of security development:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写安全运行的智能合约，您需要经历几个安全开发阶段：
- en: • Design,
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 设计，
- en: • Development,
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 开发，
- en: • Testing.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 测试。
- en: Design (Writing a Specification)
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 设计（编写规范）
- en: This process is also called the development of system requirements. Before writing
    a smart contract, you need to describe its concept, actions, processes, and interaction.
    It is worth discussing these actions with the customer and approving all the requirements.
    Next, define the plan and the dependence of the processes in the smart contract.
    Analyze all current vulnerabilities and think about the security of operations.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程也被称为系统需求的开发。在编写智能合约之前，您需要描述其概念、操作、流程和交互。值得与客户讨论这些操作并批准所有要求。接下来，定义计划和智能合约中流程的依赖关系。分析所有当前的漏洞并考虑操作的安全性。
- en: Development
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 开发
- en: This stage consists of the process of implementing smart contracts. To successfully
    write secure code, you need to analyze the current vulnerabilities in code development
    and the features of the development language. It is essential to do this before
    writing it since it will be difficult to fix errors and vulnerabilities in the
    code in the future. After that, you can start writing secure code.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 本阶段包括实施智能合约的过程。要成功编写安全代码，您需要分析代码开发中的当前漏洞以及开发语言的特性。在编写代码之前进行这项工作至关重要，因为以后修复代码中的错误和漏洞将会很困难。之后，您可以开始编写安全代码。
- en: Testing
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 测试
- en: This stage is testing and investigating the written code of a smart contract
    for the presence of vulnerabilities. For this stage, the developer can write tests
    independently. Still, it will be much easier to use a ready-made set of tests,
    thanks to which you can find vulnerabilities in smart contracts.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 此阶段是测试和调查智能合约编写的代码是否存在漏洞。对于这个阶段，开发者可以自行编写测试，但使用现成的测试集会更容易，通过它们您可以发现智能合约中的漏洞。
- en: We should be borne in mind that a full security check costs a lot of money.
    Therefore, it will also take time. Consequently, it is always easier to write
    and initially secure a contract than to fix vulnerabilities later. It is also
    possible to use external audits at this stage. A visual representation of the
    actions for implementing a secure and functioning smart contract in the IDEF0
    methodology has the form shown in Figure 10.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的是，进行全面的安全检查会花费很多钱。因此，这也需要时间。因此，撰写并最初确保合同总比以后修复漏洞要容易得多。在这个阶段也可以使用外部审计。在
    IDEF0 方法论中实施安全且功能正常的智能合约的操作的视觉表示形式如图 10 所示。
- en: '| Figure 10\. Stages of developing a secure smart contract |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 图 10\. 开发安全智能合约的阶段 |'
- en: '| ![Figure978-1-7998-8697-6.ch011.f10](i/ch011.f10.png) |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| ![Figure978-1-7998-8697-6.ch011.f10](i/ch011.f10.png) |'
- en: The next stage is the development of secure code. For this, you will need a
    method for ensuring the security of a smart contract. In addition, a security
    specialist is engaged in the development, which creates a security task, and at
    the exit from this stage, a secure code should appear.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个阶段是开发安全代码。为此，您将需要一种确保智能合约安全的方法。此外，安全专家参与开发，创建了一个安全任务，在完成此阶段后，应该出现一个安全的代码。
- en: The last stage in the IDEFO methodology (functional modeling methodology and
    graphical notation intended for formalization and description of business processes)
    is testing, where the testing procedure is the control tool, and the developer
    and test programs, analyzers are the mechanism. In the end, after passing all
    the stages, a secure smart contract is obtained.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: IDEFO 方法论中的最后一个阶段（用于形式化和描述业务流程的功能建模方法和图形符号）是测试，其中测试过程是控制工具，开发人员和测试程序、分析器是机制。最终，通过所有阶段后，会得到一个安全的智能合约。
- en: Structure of the Methodology
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 方法论结构
- en: As it was written above, this security technique is needed to develop a secure
    smart contract code. A smart contract (using the example of Ethereum) is developed
    in a specially created Solidity language (Official, 2018), (Dannen, 2018). It
    is a statistically typed JavaScript-like programming language.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 正如上文所述，这种安全技术是为了开发安全的智能合约代码而需要的。智能合约（以以太坊为例）是用一种特别创建的 Solidity 语言（官方，2018年），（Dannen，2018年）开发的。这是一种统计类型的类似
    JavaScript 的编程语言。
- en: For convenience, the methodology was divided into three parts. The user of the
    method will write a properly functioning and secure smart contract code simply.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，该方法被分为三部分。该方法的使用者只需简单地编写一个运行良好且安全的智能合约代码。
- en: 'The methodology includes three stages:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法包括三个阶段：
- en: 1\. Study and understanding of known code writing vulnerabilities that are not
    related to the solidity programming language and the blockchain environment, but
    which are also relevant in these areas;
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1\. 研究和理解与 solidity 编程语言和区块链环境无关但在这些领域同样相关的已知代码编写漏洞；
- en: 2\. Features of the solidity language, without which a smart contract working
    will not work;
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2\. Solidity 语言的特性，没有这些特性智能合约将无法正常工作；
- en: 3\. Recommendations for the correct and safe functioning of smart contracts
    in the EVM Ethereum itself.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3\. 关于 EVM 以太坊本身智能合约正确安全运行的建议。
- en: A visual representation of the methodology plan is shown in Figure 11.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 方法论计划的可视化表示如图 11 所示。
- en: '| Figure 11\. The plan of the methodology for ensuring the security of a smart
    contract |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| 图 11\. 智能合约安全保障方法论计划 |'
- en: '| ![Figure978-1-7998-8697-6.ch011.f11](i/ch011.f11.png) |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| ![图11](i/ch011.f11.png) |'
- en: Vulnerabilities and Problems that Arise When Writing Smart Contracts
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 撰写智能合约时出现的漏洞和问题
- en: The security of smart contracts must be reliably ensured. There are many examples
    of how the vulnerabilities of smart contracts lead to very significant economic
    losses, and here are just two examples.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约的安全性必须得到可靠的保证。许多智能合约漏洞导致了非常重大的经济损失，这里只是两个例子。
- en: Just following intuition instead of best practices may only lead to unwanted
    loopholes. The well-known DAO (Decentralized Autonomous Organisation) hack can
    be considered a prime example of overlooked side effects in smart contracts. The
    Ethereum-based DAO began as the world's largest crowd-funding project yet quickly
    turned into one of the most memorable failures when exploiting a recursive call
    pattern resulted in the sudden removal of DAO funds. The following hard fork of
    the Ethereum blockchain to undo the damage of over $50 million (see https://www.zeit.de/digital/internet/2016-06/the-dao-blockchain-ether-hack)
    only fueled controversy.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅跟随直觉而不是最佳实践可能只会导致意想不到的漏洞。众所周知的 DAO（去中心化自治组织）黑客事件可以被视为智能合约中被忽视的副作用的典型例子。基于以太坊的
    DAO 最初是世界上最大的众筹项目之一，但很快就成为了最值得记忆的失败之一，当利用递归调用模式导致 DAO 资金被突然移除时。随后以太坊区块链的硬分叉（查看
    https://www.zeit.de/digital/internet/2016-06/the-dao-blockchain-ether-hack）仅加剧了争议。
- en: Just as severe, with damage totaling $30 million (see https://www.coindesk.com/30-million-ether-reported-stolen-parity-wallet-breach),
    was the Parity wallet breach related to Ethereum in July 2017\. Careless use of
    a delegate call command in a critical library enabled the attacker to gain ownership
    of a multi-signature wallet and to redirect all of its funds
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同样严重的是，2017 年 7 月与以太坊相关的 Parity 钱包遭受的损失总额为 3000 万美元（查看 https://www.coindesk.com/30-million-ether-reported-stolen-parity-wallet-breach）。在一个关键库中不小心使用代理调用命令使攻击者能够获得多签名钱包的所有权并重定向其所有资金
- en: For a smart contract to be secure and an attacker could not break it or send
    tokens to himself, you need to remember typical and well-known errors when writing
    code for applications. It is especially true for smart contracts since the developer
    will not correct mistakes after sending them to the blockchain in the future.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要使智能合约安全，使攻击者无法破坏它或将代币发送给自己，需要记住编写应用程序代码时的典型和众所周知的错误。这对智能合约尤为重要，因为开发人员在将错误发送到区块链后将不会纠正它们。
- en: 'Below is an up-to-date list of errors that we can use to avoid for the correct
    operation of programs, namely smart contracts, with explanations:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个最新的错误列表，我们可以利用它来避免程序正确运行，即智能合约，附带解释：
- en: • Buffer overflow is one of the most well-known computer systems and application
    hacking methods available in smart contracts. A phenomenon that occurs when an
    application or program writes data outside of the buffer allocated in memory.
    Overflow occurs due to incorrect work with the entered data and the memory allocated
    for them and in the absence of strict protection on the part of the application
    for the entered values. Since smart contracts can read the user's data, you need
    to remember the restriction of the data entered. If you restrict the buffer in
    the array when creating it and do not check what the user entered, then an attacker
    has a chance to rewrite part of the smart contract, respectively, to get data
    or access to it.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 缓冲区溢出是智能合约中可用的最知名的计算机系统和应用程序黑客方法之一。当应用程序或程序在内存中分配的缓冲区之外写入数据时发生的现象。溢出是由于与输入数据和为它们分配的内存的不正确工作以及应用程序对输入值的严格保护不足而发生的。由于智能合约可以读取用户的数据，因此需要记住对输入数据的限制。如果在创建数组时限制了缓冲区而不检查用户输入的内容，那么攻击者就有可能重写部分智能合约，从而获取数据或访问它。
- en: '• Vulnerability of using format strings. These are errors when there is no
    control over the input-output field and the use of a format string, thanks to
    which the input-output of arguments occurs. Therefore, it is possible to compromise
    the processor''s memory: getting password values, addresses. The user can access
    it and write values to the memory cells, thanks to which a buffer overflow is
    possible. And it is also possible to get data from any memory area that the processor
    can process.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用格式字符串的漏洞。这些是在没有对输入输出字段进行控制和使用格式字符串的情况下出现的错误，由此输入输出参数。因此，可能会损害处理器的内存：获取密码值、地址。用户可以访问它并将值写入内存单元，从而可能发生缓冲区溢出。还可以从处理器可以处理的任何内存区域获取数据。
- en: • Checking the arguments. The developer should understand that the user can
    enter anything in the smart contract input field. The user can enter data that
    can be interpreted into the program and change something meaningful that can disrupt
    the operation of the smart contract or can execute arbitrary code. You should
    limit the data entered or provide for the output of errors with explanations.
    The data may not fall within the acceptable interval, especially true with smart
    contracts since the process may affect financial transactions.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 检查参数。开发人员应该明白用户可以在智能合约输入字段中输入任何内容。用户可以输入可解释为程序并更改某些有意义的内容的数据，这可能会破坏智能合约的运行或执行任意代码。您应该限制输入的数据或提供带有解释的错误输出。数据可能不在可接受的范围内，尤其是在智能合约中，因为该过程可能会影响金融交易。
- en: • Vulnerabilities of corrupted input. They also occur in cases when the data
    entered by the user is transmitted to the interpreter without sufficient control.
    The user can set the input data so that the running interpreter will execute a
    completely different command that the authors of the vulnerable program intended.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 损坏输入的漏洞。当用户输入的数据被传递给解释器而没有足够的控制时，也会发生这种情况。用户可以设置输入数据，以便正在运行的解释器执行完全不同于受影响程序作者意图的命令。
- en: Specific Vulnerabilities and Errors Affecting the Security of Smart Contracts
    Written in the Solidity Language
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 影响 Solidity 语言编写的智能合约安全性的特定漏洞和错误
- en: 'Visibility and Delegate Call: In solidity, as in other programming languages,
    the functions public and private are provided. Anyone can call the first ones,
    the second ones can be reached only within the contract. There is a handy Delegatecall
    function. It is the basis for implementing libraries and modular code. It also
    allows you to load code from another address at runtime dynamically. The storage,
    current address, and balance are still related to the calling contract, and only
    the code is taken from the called address. However, it has vulnerabilities since
    an attacker can gain access to the contract ownership with the owner function
    during the delegation process. So when using the Delegate function, you need to
    be careful and check what it interacts with function.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 可见性和委托调用：在 Solidity 中，与其他编程语言一样，提供了公共（public）和私有（private）函数。任何人都可以调用公共函数，而私有函数只能在合约内部访问。有一个方便的
    Delegatecall 函数。这是实现库和模块化代码的基础。它还允许您在运行时动态加载来自另一个地址的代码。存储、当前地址和余额仍然与调用合约相关联，只有代码取自被调用地址。然而，它存在漏洞，因为攻击者在委托过程中可以通过
    owner 函数获取合约所有权。因此，在使用 Delegate 函数时，您需要小心并检查它与函数交互的内容。
- en: 'Front-Running Attack: In the blockchain, all transactions are processed and
    recorded in the block by miners. There is a pool of transactions, and usually,
    the miner arranges them in the order of the commission and then processes them.
    Therefore, an attacker can view all transactions, find the right one and send
    the same one. Still, with a higher commission, his transaction will be in priority,
    and there is a high probability that it will be processed and written to the block
    faster than the first transaction. This vulnerability is especially relevant in
    lotteries and sweepstakes.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 前置交易攻击：在区块链中，所有交易都由矿工进行处理并记录在区块中。有一个交易池，通常矿工会按照手续费的顺序排列它们，然后处理它们。因此，攻击者可以查看所有交易，找到合适的交易并发送相同的交易。但是，他的交易由于有更高的手续费，会被优先处理，有很高的可能性会比第一个交易更快地被处理并写入区块。这种漏洞在彩票和抽奖中特别相关。
- en: 'Sending the Ether to the Contract: Solidity has a self-destruct function: it
    deletes the smart contract and sends all tokens to a specific address. The nuance
    is that the address may be a contract whose backup function may not be performed.
    That means that if a contract function has a conditional operator that depends
    on the fact that the balance of this contract is below a certain amount, this
    operator can potentially be bypassed by the user. If you send a return function,
    the contract cannot receive ether, but the backup function is not called if you
    select the self-destruct contract as the target. So it would be best if you never
    used the contract balance as a means of protection.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 向合约发送以太币：Solidity有一个自毁函数：它会删除智能合约并将所有代币发送到特定地址。细微之处在于，该地址可能是一个合约，其备用功能可能不会被执行。这意味着如果一个合约函数有一个条件运算符，该运算符依赖于该合约的余额是否低于某个金额，那么用户可能会绕过这个运算符。如果你发送一个返回函数，合约就不能接收以太币，但是如果你将自毁合约选择为目标，备用函数就不会被调用。因此，最好永远不要将合约余额用作保护手段。
- en: 'Calling the Unknown: In this case, the attacker''s contract can first claim
    leadership by sending a sufficient amount of ether to an insecure contract. Then
    the transactions of another player who tries to claim the leadership will be rejected
    due to the revert function. Despite a simple attack, this leads to permanent denial
    of service of the contract, which makes it useless.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 调用未知函数：在这种情况下，攻击者的合约可以通过向一个不安全的合约发送足够数量的以太币首先宣称领导权。然后另一个试图声明领导权的玩家的交易将因为 revert
    函数而被拒绝。尽管是一个简单的攻击，但这导致了合约的永久拒绝服务，使其变得无用。
- en: 'Small Address Attack: Since the user can work with the exchange, he can enter
    an incorrect address, which is less in the number of bits. Since a fixed-length
    string is fed to the EVM, the EVM complements it with insignificant zeros if the
    string is smaller than it. Accordingly, the number of tokens may change because
    of this in the encoding. And the entry in the blockchain will not be at all the
    one that the user wanted. It is important to check for the correct number of characters
    in the address in the smart contract, and if this check is not passed, then do
    not carry out transactions.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 小地址攻击：由于用户可以与交易所合作，因此他可以输入一个位数较少的不正确地址。由于固定长度的字符串被馈送到 EVM 中，如果字符串比它小，EVM 就会用无关紧要的零来补充它。因此，由于编码中的这种情况，代币数量可能会发生变化。并且区块链中的条目将不会是用户想要的那个。在智能合约中检查地址的正确字符数是非常重要的，如果此检查未通过，则不执行交易。
- en: 'Here are some examples of the source texts of smart contracts in which the
    vulnerabilities are present:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些存在漏洞的智能合约源文本示例：
- en: 'Race Condition Type: The vulnerability lies in the possibility of calling the
    external code again, during the execution of the contract code. This can lead
    to different function calls interacting in destructive ways. Example of a smart
    contract code with this vulnerability:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 竞争条件类型：漏洞在于在执行合同代码期间再次调用外部代码的可能性。这可能导致不同的函数调用以破坏性的方式相互作用。具有此漏洞的智能合约代码示例：
- en: 1     mapping (address} =˃ uint) private userBalances;
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 1     映射（地址} =˃ uint）私有 userBalances;
- en: '2'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: 3 ▼     function wthdrawBalance() public {
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 3 ▼     function wthdrawBalance() public {
- en: 4          uint amountToWithdraw = userBalances[msg.sender];
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 4          uint amountToWithdraw = userBalances[msg.sender];
- en: 5          require(msg.sender.call.value(amountToWithdraw)(); // 1
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 5          require(msg.sender.call.value(amountToWithdraw)(); // 1
- en: 6 ▼     /* In line 1, the external code is called, which can be called again
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 6 ▼     /* 在第一行调用了外部代码，该代码可以再次被调用
- en: 7      until the end of the first call */
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 7      直到第一次调用结束为止 */
- en: 8          userBalances[msg.sender] = Ø;
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 8          userBalances[msg.sender] = Ø;
- en: 9     }
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 9     }
- en: 'Dependence on the timestamp. When writing a smart contract, you need to keep
    in mind that the node offering the next block can write a timestamp into it based
    on its interests. Thus, it can influence the execution of a contract relying on
    the timestamp value in its code. Example of a smart contract code with this vulnerability:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖于时间戳。编写智能合约时，需要牢记下一个区块的节点可以根据其利益将时间戳写入其中。因此，它可以影响依赖于其代码中时间戳值的合约的执行。具有此漏洞的智能合约代码示例：
- en: 1     uint someVariable = now + 1;
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 1     uint someVariable = now + 1;
- en: 2 ▼     if (now % 2 == Ø) { // now installed by the miner
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 2 ▼     if (now % 2 == Ø) { // 由矿工安装的 now
- en: 3          // important code
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 3          // 重要代码
- en: 4     }
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 4     }
- en: 5 ▼     if ((someVariable - 1ØØ) % 2 == Ø) { // someVariable depends on now
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 5 ▼     if ((someVariable - 1ØØ) % 2 == Ø) { // someVariable 依赖于 now
- en: 6          // important code
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 6          // 重要代码
- en: 7     }
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 7     }
- en: 'Data type overflow. Data type overflow is dangerous because the value change
    may occur according to logic not provided by the developer. This vulnerability
    can occur both with the upper bound of the data type and with the lower one. Example
    of a smart contract code with this vulnerability:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类型溢出。 数据类型溢出是危险的，因为值的变化可能根据开发人员未提供的逻辑而发生。 这种漏洞既可能发生在数据类型的上限上，也可能发生在下限上。 具有此漏洞的智能合约代码示例：
- en: 1     mapping (addres =˃ uint256) public balanceOf
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 1     映射（addres =˃ uint256）public balanceOf
- en: 2     // Unsafe option
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 2     // 不安全选项
- en: 3 ▼     function transfer(addres _to, uint256 _value) {
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 3 ▼     function transfer(addres _to, uint256 _value) {
- en: 4 ▼          /* Checking the availability of the amount to send */
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 4 ▼          /* 检查发送金额的可用性 */
- en: 5          require(balanceOf[msg.sender] =˃ _value);
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 5          require(balanceOf[msg.sender] =˃ _value);
- en: 6 ▼          /* Add and subtract new balances */
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 6 ▼          /* 添加和减少新余额 */
- en: 7          balanceOf[msg.sender] -= _value;
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 7          balanceOf[msg.sender] -= _value;
- en: 8          balanceOf[_to] += _value;
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 8          balanceOf[_to] += _value;
- en: 9     }
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 9     }
- en: 10     // Safe option
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 10     // 安全选项
- en: 11 ▼     function transfer(addres _to, uint256 _value) {
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 11 ▼     function transfer(addres _to, uint256 _value) {
- en: 12 ▼     /* Checking the availability of the amount to send and checking for
    overflow */
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 12 ▼     /* 检查发送金额的可用性并检查溢出 */
- en: 13          require(
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 13          require(
- en: 14          balanceOf[msg.sender] -=value &&
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 14          balanceOf[msg.sender] -=value &&
- en: 15          balanseOf[_to} + _value >= balanceOf[_to]
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 15          balanseOf[_to} + _value >= balanceOf[_to]
- en: 16          );
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 16          );
- en: 17 ▼     /* Change Balances */
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 17 ▼     /* 更改余额 */
- en: 18          balanceOf[msg.sender] -= _value;
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 18          balanceOf[msg.sender] -= _value;
- en: 19          balanceOf[_to] += _value;
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 19          balanceOf[_to] += _value;
- en: 20     }
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 20     }
- en: Justification of the Choice of Tested Platforms
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 选择测试平台的理由
- en: 'Based on all the collected data, it can be concluded that it is advisable to
    test the following number of platforms:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 综合收集的所有数据，可以得出以下测试以下平台数量是可取的：
- en: 1) Hyperledger;
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1) Hyperledger;
- en: 2) Corda;
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2) Corda;
- en: 3) Apla;
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3) Apla;
- en: 4) Exonum;
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4) Exonum;
- en: 5) Universa;
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5) Universa;
- en: 6) Quorum.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 6) Quorum.
- en: Currently, the developers of all platforms listed above may change the concept
    or release. The main criterion is the availability of a distribution kit (a significant
    version according to the platform's numbering of software versions). As it turned
    out, not all platforms have reached the stage of a major public release. Also,
    each of the above platforms has a test network that will allow you to conduct
    load testing with minimal costs to purchase internal cryptocurrency or platform
    tokens. Due to this circumstance, it is essential to make a basic configuration
    of each platform and identify potential aspects for testing.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，上述所有平台的开发人员可能会更改概念或发布。 主要标准是分发套件的可用性（根据软件版本的平台编号的重要版本）。 事实证明，并非所有平台都已达到主要公共发布阶段。
    此外，上述每个平台都有一个测试网络，该测试网络将允许您以最低成本购买内部加密货币或平台代币进行负载测试。 由于这一情况，对每个平台进行基本配置并确定测试的潜在方面至关重要。
- en: As a result, we can conclude that now we have selected platforms that close
    the list of tasks from the point of view of technologies - a centralized database,
    the main functional criteria of which are to prevent downtime, the same results
    of processing identical transactions, the availability of protection mechanisms
    against forgery, transaction rollbacks and violations of legitimacy.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以得出结论，现在我们已经选择了从技术角度来看关闭任务列表的平台 - 一个具有集中式数据库的平台，其主要功能标准是防止停机、处理相同事务的结果相同、防伪保护机制可用、事务回滚和违法性违规的可用性。
- en: Security Requirements (Authentication and Access Control Methods, Logging, Corporate
    Certificates)
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 安全需求（身份验证和访问控制方法、日志记录、企业证书）
- en: The comparative characteristics of the platforms under consideration are presented
    in Table 2.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 表2展示了所考虑平台的比较特性。
- en: Table 2\. The results of the comparison of blockchain platforms.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 表2. 区块链平台比较结果。
- en: '| Requirement | Hyperledger Fabric | Corda | Waves Vostok | Apla | Ethereum
    |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| 需求 | Hyperledger Fabric | Corda | Waves Vostok | Apla | 以太坊 |'
- en: '| Availability of an authentication mechanism with the possibility of integration
    with the LDAP directory service | Carried out by the development Integration module
    | Identically | Identically | Carried out by the development Integration module
    (it is possible to use built-in tools) | No information available |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| 具有与LDAP目录服务集成可能性的身份验证机制的可用性 | 通过开发集成模块进行 | 相同 | 相同 | 通过开发集成模块进行（可以使用内置工具）
    | 没有可用信息 |'
- en: '| Availability of access control mechanisms (DAC RB AC) | There is no need
    to develop an integration module | Identically | Identically | It has an access
    control mechanism | No information available |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| 访问控制机制的可用性（DAC RB AC） | 无需开发集成模块 | 相同 | 相同 | 具有访问控制机制 | 没有可用信息 |'
- en: '| Availability of a system for logging events occurring in the system | The
    blockchain contains a transaction log that various existing systems can analyze
    | Identically | Identically | Identically | No information available |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| 系统中发生事件的日志记录系统的可用性 | 区块链包含了各种现有系统可以分析的交易日志 | 相同 | 相同 | 相同 | 没有可用信息 |'
- en: '| Availability of a notification system (alarm system) about events occurring
    in the system | It is carried out through the development of an integration module
    | Identically | Identically | Identically | No information available |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| 系统中发生事件的通知系统（警报系统）的可用性 | 通过开发集成模块进行 | 相同 | 相同 | 相同 | 没有可用信息 |'
- en: '| The possibility of using SHA-3 as a cryptographic hash function | Open Sours,
    modification required | SHA-256 is used; changing the algorithm is possible only
    in the open version (not Enterprise) | SHA-256 is used, a closed platform, it
    is impossible to change the hash function | SHA-256 is used, the possibility of
    changing the hash function is not defined | No information available |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| 使用SHA-3作为加密哈希函数的可能性 | 开源，需要修改 | 使用SHA-256；仅在开放版本（非企业版）中更改算法可能性 | 使用SHA-256，是封闭平台，不可能更改哈希函数
    | 使用SHA-256，不定义更改哈希函数的可能性 | 没有可用信息 |'
- en: '| The ability to import corporate certificates for signing transactions | There
    is a possibility of implementation | There is no possibility | Identically | Identically
    | No information available |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| 导入企业证书以进行交易签名的能力 | 存在实现可能性 | 不存在可能性 | 相同 | 相同 | 没有可用信息 |'
- en: '| Requirement | Masterchain | Bifury Exonum | SAP Leonardo | Universa | Quorum
    |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| 要求 | Masterchain | Bifury Exonum | SAP Leonardo | Universa | Quorum |'
- en: '| Availability of an authentication mechanism with the possibility of integration
    with the LDAP directory service | No information available | Carried out by the
    development Integration module | No information available | Carried out by the
    development Integration module. The function is under development. | Carried out
    by the development Integration module |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| 具有与LDAP目录服务集成可能性的身份验证机制的可用性 | 没有可用信息 | 通过开发集成模块执行 | 没有可用信息 | 通过开发集成模块执行。该功能正在开发中。
    | 通过开发集成模块执行 |'
- en: '| Availability of access control mechanisms (DAC RB AC) | There is no mechanism
    | There is no need to develop an integration module | No information available
    | There is no mechanism, feature in the development | There is no need to develop
    an integration module |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| 访问控制机制的可用性（DAC RB AC） | 不存在机制 | 无需开发集成模块 | 没有可用信息 | 在开发中不存在机制、功能 | 无需开发集成模块
    |'
- en: '| Availability of a system for logging events occurring in the system | The
    blockchain contains a transaction log that various existing systems can analyze
    | Identically | No information available | Identically | Identically |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| 记录系统中发生事件的系统的可用性 | 区块链包含可以由各种现有系统分析的交易日志 | 相同 | 没有可用信息 | 相同 | 相同 |'
- en: '| Availability of a notification system (alarm system) about events occurring
    in the system | It is carried out through the development of an integration module
    | Identically | No information available | Identically | Identically |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| 有关系统中发生事件的通知系统（报警系统）的可用性 | 通过开发集成模块执行 | 相同 | 没有可用信息 | 相同 | 相同 |'
- en: '| The possibility of using SHA-3 as a cryptographic hash function | No information
    available | Modification is required; SHA-3 is not implemented by default in the
    platform | No information available | The hashing method is not defined in the
    documentation | There is a possibility of using SHA-3 |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| 使用 SHA-3 作为加密哈希函数的可能性 | 没有可用信息 | 需要修改；平台默认未实现 SHA-3 | 没有可用信息 | 文档中未定义哈希方法
    | 存在使用 SHA-3 的可能性 |'
- en: '| The ability to import corporate certificates for signing transactions | No
    information available | There is no possibility | No information available | There
    is no possibility | Identically |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| 导入公司证书进行交易签名的能力 | 没有可用信息 | 没有可能性 | 没有可用信息 | 没有可能性 | 相同 |'
- en: METHODS AND MEANS OF FORMAL VERIFICATION OF THE PROGRAM CODE OF SMART CONTRACTS
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约程序代码的形式验证方法和手段
- en: Verification of the program code is verifying the results of its work for compliance
    with specifications (requirements formulated from the outside).
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 对程序代码的验证是验证其工作结果是否符合规范（从外部制定的要求）。
- en: In the formulation of the problem of this work, the concept of verification
    is not used in a strictly mathematical sense. Verification, in the strict sense,
    really works with ready-made requirements received from the outside. In addition
    to verifying compliance, it implies a preliminary analysis of the subject area
    and identification of requirements that contribute to the most secure functioning
    of contracts.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在本工作问题的表述中，验证的概念并没有严格按照数学意义使用。验证，在严格意义上，确实是与从外部接收到的现成要求一起使用的。除了验证符合性之外，它还意味着对主题领域进行初步分析，并确定有助于合同最安全运行的要求。
- en: In addition to the requirements, each smart contract has a specific business
    logic, the requirements for which can only be collected separately. Verification
    of specific requirements for adequacy, unambiguity, completeness, consistency,
    and other important properties can only be carried out separately for each smart
    contract and verification of the smart contract code for compliance with these
    specific requirements.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 除了要求之外，每个智能合约还有特定的业务逻辑，对其要求只能单独收集。对于每个智能合约，只能分别验证其适当性、明确性、完整性、一致性和其他重要属性的具体要求，并验证智能合约代码是否符合这些具体要求。
- en: The process of collecting and analyzing business requirements is a separate
    task, different from the task of this work. Formal verification of program code
    is a more strict concept, meaning formal proof of compliance or non-compliance
    of the code results with formal specifications.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 收集和分析业务需求的过程是一项单独的任务，与本工作的任务不同。程序代码的形式验证是一个更严格的概念，意味着对代码结果与形式规范的符合或不符合进行形式证明。
- en: Currently, three approaches to formal verification of programs are most widely
    used •
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，形式验证程序的三种方法最广泛使用 •
- en: • Symbolic execution,
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 符号执行，
- en: • Checking models,
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 检查模型，
- en: • Verification using automatic proof of theorems.
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用自动定理证明进行验证。
- en: Each of these approaches should be discussed in detail.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 每种方法都应该详细讨论。
- en: Symbolic Execution
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 符号执行
- en: The main idea of symbolic execution is that if the value of a variable is unknown,
    then when analyzing the code, it is indicated by some symbol, and further operations
    with this variable are performed as operations with this symbol.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 符号执行的主要思想是，如果变量的值是未知的，则在分析代码时，它由某些符号表示，并且对该变量的进一步操作将被视为对该符号的操作。
- en: It turns out that the whole process of reasoning, in this case, can be represented
    as an algorithm, which means that it can be done automatically, which is successfully
    used by many modern verifiers. With automatic verification, the conditions for
    the values of variables are formed somewhat differently. All possible branches
    of the program execution are sorted out one by one. When analyzing each branch,
    a set of conditions is compiled for the values of variables under which the program
    follows this branch. When each new condition appears, the entire set of conditions
    is checked for satisfiability.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，在这种情况下，推理的整个过程可以表示为一个算法，这意味着它可以被自动完成，这在许多现代验证器中被成功使用。通过自动验证，变量值的条件形成的方式略有不同。程序执行的所有可能分支逐一排序。在分析每个分支时，编制了一组条件，用于使程序遵循此分支的变量值。当出现每个新条件时，会检查整个条件集以确定可满足性。
- en: If it turns out that many conditions are impossible at some point, it means
    that the program cannot follow this branch. The conditions are checked for feasibility
    by the SMT (Satisfaction Modulo Theories) solver.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在某个时间点发现许多条件都不可能成立，这意味着程序无法遵循此分支。条件通过 SMT（满足模理论）求解器检查可行性。
- en: 'Symbolic execution gives very decent results, applicable in practice, for real
    industrial programs. For example, the Microsoft SAGE system uses the symbolic
    execution approach, which is used to verify various Microsoft products: both typical
    applications, such as PowerPoint, and the Windows operating system itself. Of
    course, in the verifiers used in practice, the analysis process is complex and
    non-trivial, and real verifiers use various optimizations to simplify this process.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 符号执行提供了非常不错的结果，适用于实践中的真实工业程序。例如，微软的 SAGE 系统采用了符号执行方法，用于验证各种微软产品：包括典型的应用程序，如
    PowerPoint，以及 Windows 操作系统本身。当然，在实践中使用的验证器中，分析过程是复杂且非平凡的，真实的验证器使用各种优化来简化此过程。
- en: 'A PVS-static code analyzer in C, C++, C#, and Java is designed mainly to help
    developers in these languages. One of the ideas used in its work is symbolic execution.
    Symbolic execution serves as the basis for many verifiers designed for analyzing
    a variety of programs. There are tools for analyzing smart contracts of the Ethereum
    network that use symbolic execution: Mythril, Oyente, Manticore (it also allows
    you to analyze ELF files). We should also mention SMT-solvers, without the use
    of which no tool for symbolic execution can do.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于 C、C++、C# 和 Java 的 PVS-静态代码分析器主要设计用于帮助这些语言的开发人员。其工作中使用的一个概念是符号执行。符号执行是许多用于分析各种程序的验证器的基础。有一些工具用于分析以太坊网络的智能合约，这些工具使用符号执行：Mythril、Oyente、Manticore（它还允许分析
    ELF 文件）。我们还应该提到 SMT 求解器，没有使用这些求解器，符号执行工具无法完成。
- en: Software code verification systems refer to such solvers as Z3, Spacer, Cvc3,
    Yices, Alt-Ergo, Gappa, veriT. SMT solvers are used in symbolic execution and
    in other approaches, which will be discussed later.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 软件代码验证系统将这些求解器称为 Z3、Spacer、Cvc3、Yices、Alt-Ergo、Gappa、veriT。SMT 求解器被用于符号执行以及其他方法，这些方法将在后文讨论。
- en: Checking Models
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 模型检查
- en: 'This approach is based on the fact that the system''s behavior is represented
    in a specific model. As a rule, the model describes the system in a simplified
    form. The behavior of the described model must be checked for compliance with
    specific regulations that must be set along with the model itself. When it comes
    to the verification of temporal (ital. - the tempo of models that take into account
    cause-and-effect relationships in time conditions), the rules for compliance with
    which the behavior of the model is checked take into account the time aspect.
    This means that in the formulations of the rules, there are such concepts as “never,”
    “always,” “ever,” “eventually.” Examples of such rules are the following statements:
    “the balance of a certain account will never be zero”, “if a message is sent,
    it will eventually be processed”.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法是基于系统行为在特定模型中的表示这一事实的。通常，模型以简化形式描述系统。描述模型的行为必须符合必须与模型本身一起设置的特定规定。当涉及到时态模型（意大利语
    - 考虑时间条件中因果关系的模型的节奏）的验证时，用于检查模型行为的规则要考虑时间方面。这意味着在规则的表述中，有诸如“从不”、“始终”、“曾经”、“最终”等概念。此类规则的示例是以下陈述：“某个帐户的余额永远不会为零”，“如果发送消息，则最终会处理该消息”。
- en: Verifiers that implement model verification are based on a serious scientific
    theory, described step by step (Velder et al., 2011). Different verifiers based
    on model verification use different working schemes. It would be superfluous to
    dwell in detail on the theory of mathematical logic and consider all the algorithms
    used by different tools for the overview part so that we will give one of the
    verification schemes used, in particular, by the SPIN verifier.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 实现模型验证的验证器基于一种严肃的科学理论，该理论由(Velder等人，2011)逐步描述。基于模型验证的不同验证器使用不同的工作方案。在概述部分详细讨论数学逻辑理论并考虑不同工具使用的所有算法将是多余的，因此我们将介绍一种验证方案，特别是由SPIN验证器使用的一种。
- en: 'The user describes the system''s behavior in the built-in programming language
    (in the case of SPIN, the Promela language). The verifier looks at the system
    being checked as a finite automaton, each state is characterized by a set of values
    of all global variables. The user also sets rules (statements that take into account
    the time aspect). For compliance, you need to check the system''s behavior. By
    negating these statements, another finite automaton is constructed specially.
    Then the intersection of the languages generated by these two automata is constructed.
    If the intersection is empty, the verification was successful since the negations
    of the rules we set cannot come true. If the intersection is not empty, it serves
    as an example of a case when the system''s behavior violates the rules we have
    set. Many verifiers are based on checking temporal models: SPIN (the most famous),
    Eldarica, Uppaal, NuSMV.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 用户用内置的编程语言描述系统的行为（在SPIN的情况下，使用Promela语言）。验证器将被检查的系统视为有限自动机，每个状态都由所有全局变量的一组值来描述。用户还设置规则（考虑时间方面的声明）。为了符合，需要检查系统的行为。通过否定这些陈述，另一个专门构造的有限自动机被构造。然后构造这两个自动机生成的语言的交集。如果交集为空，那么验证是成功的，因为我们设置的规则的否定不能成立。如果交集不为空，则它作为一个案例，说明了系统的行为违反了我们设置的规则。许多验证器都基于检查时间模型：SPIN（最著名的）、Eldarica、Uppaal、NuSMV。
- en: Automatic Proof of Theorems
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 定理的自动证明
- en: In the most general terms, verification using automatic proof of theorems looks
    like this.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 用自动定理证明进行验证，最一般的形式如下。
- en: Both the system specification and its implementation are written as formulas
    in a certain logic. Let's denote the specification formula φ, the implementation
    formula - ψ. We need to check the expression ψ→φ for truth. The system meets the
    specifications if and only if this expression is true. For the proof ψ→φ, programs
    for automatic proof of theorems are used. Such programs are based on a theory
    developed by mathematical logic. Many algorithms used for automatic verification
    of theorems belong to the same theory. Here we will present a very brief introductory
    introduction to mathematical logic. Automated theorem-proving programs usually
    use first-order predicate logic. There is a complete set of variables in this
    logic, a set of functional and predicate symbols of a given arity. Arity refers
    to the number of arguments of a functional or predicate symbol.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 系统规范及其实现都是以某种逻辑形式的公式书写的。让我们用符号 φ 表示规范公式，用符号 ψ 表示实现公式。我们需要检查表达式 ψ→φ 是否为真。当且仅当此表达式为真时，系统才满足规范。对于证明
    ψ→φ，通常使用自动证明定理的程序。这些程序是基于数理逻辑发展的一种理论的。用于自动验证定理的许多算法都属于同一理论。这里我们将简要介绍数理逻辑。自动定理证明程序通常使用一阶谓词逻辑。在这种逻辑中有一个完整的变量集，以及给定
    arity 的一组函数和谓词符号。Arity 指的是函数或谓词符号的参数个数。
- en: A term is a variable or string of the form f(t[1], t[2],..., t[n]), where f
    is the functional symbol of arity n and t[i] are terms. Constants can be considered
    as functions of arity 0\. The predicate has the form P(t[1], t[2],..., t[n]),
    where P is the predicate symbol of arity n, and t[i] are terms.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 项是一个变量或形式为 f(t[1], t[2],..., t[n]) 的字符串，其中 f 是 arity 为 n 的函数符号，而 t[i] 是项。常数可以被视为
    arity 为 0 的函数。谓词的形式是 P(t[1], t[2],..., t[n])，其中 P 是 arity 为 n 的谓词符号，而 t[i] 是项。
- en: Propositions are predicates, logical combinations of propositions or propositions
    equipped with quantification of existence or universality. There are also many
    types of typed logic, and each variable has a type. Each function symbol has many
    argument types and a result type, and each predicate symbol has many argument
    types but no result type. Quantifications in this logic are also typed.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 命题是谓词、命题的逻辑组合或陈述了存在或普遍性的量化。还有许多类型的类型逻辑，每个变量都有一个类型。每个函数符号都有许多参数类型和一个结果类型，而每个谓词符号都有许多参数类型但没有结果类型。在这种逻辑中的量化也是有类型的。
- en: In predicate logic, there are rules for inference and obtaining consequences,
    according to which the validity of one or more sentences follows the validity
    of another sentence. The algorithm for automatic proof of theorems is reduced
    to the application of these inference rules. Automatic proof requires inference
    rules and a strategy for how to search for proof. For example, a strategy may
    suggest using inference rules from the end, starting with the sentence that needs
    to be proved.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在谓词逻辑中，有推理和获取推论的规则，根据这些规则，一个或多个句子的有效性遵循另一个句子的有效性。自动证明定理的算法被简化为应用这些推理规则。自动证明需要推理规则和搜索证明的策略。例如，一种策略可能建议从末尾使用推理规则，从需要证明的句子开始。
- en: The strategies used by the programs for proving theorems are based on algorithms
    for traversing in width and depth. The proof problem has twice the exponential
    complexity concerning the length of the sentence being proved. That is why automatic
    proof programs are usually interactive since, in this case, the user can help
    the program build a proof, which significantly reduces the complexity of the task.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 自动证明定理的程序所使用的策略基于宽度优先和深度优先的算法。证明问题的复杂度是所证明句子长度的两倍指数复杂度。这就是为什么自动证明程序通常是交互式的，因为在这种情况下，用户可以帮助程序构建证明，从而显著降低了任务的复杂度。
- en: Interaction with the automatic proof system requires a highly qualified user.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 与自动证明系统的交互需要高度资质的用户。
- en: We note Coq, Simplify, Isabelle/HOL, HOL 4, HOL Light, Mizar among the tools
    for automatic proof used to verify program code.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到 Coq、Simplify、Isabelle/HOL、HOL 4、HOL Light、Mizar 等自动证明工具，用于验证程序代码。
- en: Protection of Hyperleger and Exonum Services from Errors
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 保护 Hyperledger 和 Exonum 服务免受错误
- en: 'In writing the functions of Hyperleger and Exonum smart contracts, which describe
    some business logic for working with objects stored in the blockchain, the programmer
    may make mistakes. Some of these errors can be found by the compiler itself and
    will be eliminated in time. Others can lead to the following consequences:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写 Hyperledger 和 Exonum 智能合约的函数时，描述存储在区块链中的对象的某些业务逻辑，程序员可能会犯错误。这些错误中的一些可以由编译器本身发现，并将及时消除。其他错误可能会导致以下后果：
- en: 1\. Emergency stop of the blockchain node. A program that implements the node's
    logic and executes the code of the services can terminate and output an error.
    Implementing the code of services on Rust, Exonum or Golang platforms in Hyperleger
    may happen because the situations of calling the panic function were not correctly
    handled, or the functions that explicitly cause panic were not taken into account.
    For services in Java, Node.js, this situation may occur due to non-intercepted
    exceptions.
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1\. 区块链节点的紧急停止。实现节点逻辑并执行服务代码的程序可以终止并输出错误。在 Hyperledger 中将服务代码实现在 Rust、Exonum
    或 Golang 平台上可能是因为未正确处理调用 panic 函数的情况，或者未考虑明确导致 panic 的函数。对于 Java、Node.js 中的服务，这种情况可能是由于未拦截的异常引起的。
- en: 2\. Emergency termination of an external API call that changes the network state
    or does not change it. Similar to the previous case, there may be a situation
    when the REST API request handler will not be able to terminate correctly. This
    will not cause the node to stop, but the program executing the request will not
    receive an error message or a result.
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2\. 外部 API 调用紧急终止，改变网络状态或不改变。与前一情况类似，可能会出现 REST API 请求处理程序无法正确终止的情况。这不会导致节点停止，但执行请求的程序将不会收到错误消息或结果。
- en: 3\. The node hangs. If the transaction processing function has a high computational
    complexity or enters an erroneous state with an eternal cycle, the network nodes
    will not be able to perform the transaction.
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3\. 节点挂起。如果事务处理函数具有很高的计算复杂性，或者进入错误状态并进入永恒循环，网络节点将无法执行事务。
- en: 4\. The external API handler freezes. In case of a programmer error, the external
    REST API handler thread may never be complete, or it will run for an unacceptably
    long time, consuming the resources of network nodes. The Hyperleger and Exonum
    blockchains are private, and only a limited set of nodes can create transactions
    in them. Therefore, they do not have a built-in mechanism for protecting against
    DOS, and all responsibility for the absence of such situations falls on the programmer.
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4\. 外部 API 处理程序冻结。在程序员错误的情况下，外部 REST API 处理程序线程可能永远不会完成，或者它将运行的时间太长，消耗网络节点的资源。Hyperledger
    和 Exonum 区块链是私有的，只有一组有限的节点可以在其中创建交易。因此，它们没有内置的防止 DOS 的机制，所有防止此类情况发生的责任都落在程序员身上。
- en: 5\. Littering of the network. Since the smart contract can make transactions
    in calculating the next block, the network can constantly increase the size of
    the blockchain indefinitely.
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5\. 网络的垃圾。由于智能合约可以在计算下一个块时进行交易，网络可能会不断增加区块链的大小，而大小可以无限制地增加。
- en: 6\. Invalid calls inside transaction calculation functions. Functions that calculate
    transactions should not depend directly or indirectly on external data sources
    since transactions should result on any node.
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 6\. 在事务计算函数中调用无效。计算事务的函数不应直接或间接地依赖于外部数据源，因为事务应在任何节点上产生结果。
- en: 7\. Recursive calls between the functions of smart contracts can violate the
    logic of their operation or an eternal loop in the handler thread.
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 7\. 智能合约函数之间的递归调用可能会违反其操作逻辑或在处理程序线程中进入永久循环。
- en: 8\. Inconsistency of transaction calls. The service can store data both locally
    on each node and globally. In the Exonum blockchain, the hash of the current state
    of the service is returned by the state_hash function; in Hyperleger, the PutState
    function writes the data stored in blocks. At the same time, you need to carefully
    ensure that the data loaded into the blocks does not depend on the local data
    stored on the node. Otherwise, each node of the network will calculate it differently,
    and the transaction will not be consistent when the block is enabled.
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 8\. 交易调用的不一致性。服务可以在每个节点上存储数据，也可以在全局范围内存储数据。在 Exonum 区块链中，state_hash 函数返回服务当前状态的哈希；在
    Hyperleger 中，PutState 函数将数据写入块中存储。同时，你需要仔细确保加载到块中的数据不依赖于节点上存储的本地数据。否则，网络的每个节点将以不同的方式计算它，当块启用时，交易将不一致。
- en: Some of the errors described above are listed in the DASP-10 list compiled for
    the Ethereum blockchain. Due to the richer execution model of smart contracts
    (services) compared to Ethereum, other errors in writing functions become possible
    in the Hyperleger and Exonum blockchains.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 上述错误中的一些在为以太坊区块链编制的 DASP-10 列表中列出。由于 Hyperleger 和 Exonum 区块链中智能合约（服务）的更丰富的执行模型，与以太坊相比，编写函数中可能会出现其他错误。
- en: It is necessary to perform thorough testing of the services to avoid the occurrence
    of these errors. However, insufficiently large projects, it becomes more difficult
    to find an error using tests. The reason is that tests can check only a finite
    set of program execution paths. When adding new functions and branches to the
    code, the number of input data variants that need to be included in the test grows
    non-linearly. A combinatorial explosion of variants occurs.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免发生这些错误，有必要对服务进行彻底的测试。然而，对于规模不够大的项目来说，使用测试来找到错误变得更加困难。原因在于测试只能检查有限的程序执行路径集。当向代码添加新功能和分支时，需要包含在测试中的输入数据变体数量呈非线性增长。会发生组合爆炸。
- en: Recommendations for Developing a Methodology for Formal Verification of Smart
    Contracts
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 开发智能合约形式验证方法的建议
- en: 'As a result of the analysis of the languages of development of services of
    the Hyperleger and Exonum platforms, the following conclusions were made:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对 Hyperleger 和 Exonum 平台服务开发语言的分析，得出以下结论：
- en: 1\. You need to verify the transaction functions and event handler functions
    separately. Transaction functions should be calculated the same way on different
    nodes, and at other times, the values returned to it should not depend on the
    node's local memory or external data. The verification method should check this
    and allow you to deal with such errors. Handler functions can use both local variables
    and freely access external data.
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1\. 你需要单独验证交易函数和事件处理函数。交易函数在不同节点上应该以相同的方式计算，在其他时间，返回给它的值不应该依赖于节点的本地存储或外部数据。验证方法应该检查这一点，并允许你处理这样的错误。处理函数可以使用本地变量，并自由访问外部数据。
- en: 2\. Denial of Service check. It is necessary to take into account all situations
    when the service may be blocked. For each cycle, it is essential to estimate the
    number of iterations for recursion to evaluate its depth. In the Golang and Rust
    languages, avoiding all constructs that explicitly or implicitly cause panic is
    necessary. In the Java language, it is essential to catch all exceptions. The
    verifier must detect all situations that can lead to hanging any called function
    of the contract or their combinations.
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2\. 拒绝服务检查。必须考虑到服务可能被阻塞的所有情况。对于每个循环，估计递归的迭代次数以评估其深度是必要的。在 Golang 和 Rust 语言中，需要避免所有明确或隐含地引发
    panic 的构造。在 Java 语言中，捕获所有异常是必要的。验证器必须检测所有可能导致任何调用的合约函数或其组合挂起的情况。
- en: '3\. Access control. Although blockchains are private, and a limited set of
    nodes can make transactions in them, it is necessary to consider the risk of an
    attack on such nodes. There are no built-in authentication tools for transaction
    requests in blockchains; there is only a way to confirm such a right through the
    public key mechanism:'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3\. 访问控制。尽管区块链是私有的，并且只有一组有限的节点可以在其中进行交易，但必须考虑对这些节点进行攻击的风险。区块链中没有用于交易请求的内置身份验证工具；只有通过公钥机制确认此类权限的方法：
- en: a. There are three types of REST API requests in Exonum. The first type is public
    read requests; any client can make them, they do not change the state of the blockchain,
    but they can change the state of local node variables. The second type is requests
    for transactions, and they must be signed with private keys. The third is administrative
    requests for configuring contracts. The secrecy of storing private keys ensures
    security. At the same time, access to the node itself is not provided by additional
    authentication mechanisms.
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: a. 在 Exonum 中有三种类型的 REST API 请求。第一种类型是公共读取请求；任何客户端都可以发起它们，它们不会改变区块链的状态，但可能会改变本地节点变量的状态。第二种类型是交易请求，它们必须使用私钥签名。第三种是用于配置合约的管理请求。存储私钥的保密性确保了安全性。同时，节点本身的访问不需要额外的身份验证机制。
- en: b. The Hyperledger Fabric blockchain supports authentication in the parallel
    Hyperleger composer (OAuth) and fabric-rest (JWT) projects.
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: b. Hyperledger Fabric 区块链支持在并行的 Hyperleger composer（OAuth）和 fabric-rest（JWT）项目中进行身份验证。
- en: Following the service's business logic, the verification method should detect
    potential opportunities for violating access rights to contract functions.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 根据服务的业务逻辑，验证方法应检测违反合约函数访问权限的潜在机会。
- en: When building smart contracts for the Hyperleger and Exonum platforms, it is
    necessary to perform automated verification. You need to use either ready-made
    verification utilities (Java) or develop specialized verification tools for verification.
    The conditions to be checked must be drawn up following the requirements of business
    logic and to verify the correctness of the operation of the blockchain itself.
    The verification algorithm should look like a set of mandatory requirements applied
    to the functions responsible for supporting the execution of transactions and
    for processing network events.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在为 Hyperleger 和 Exonum 平台构建智能合约时，需要进行自动化验证。您需要使用现成的验证工具（Java）或开发专门的验证工具进行验证。必须根据业务逻辑的要求制定要检查的条件，并验证区块链本身的操作正确性。验证算法应该看起来像是一组强制性要求，应用于负责支持交易执行和处理网络事件的功能。
- en: CONCLUSION
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 结论
- en: 'The presented chapter discusses the materials of a pilot project to create
    a supply efficiency management system using blockchain technology. The description
    of the project begins with the study of the main business processes of the supply
    chain. A detailed description and visualization of functions for all system participants
    is given: the customer, the manufacturer, the inspection, the transport company.
    The system''s main components are considered: a digital dispatcher, a supply monitor,
    interaction interfaces, and a production environment. A detailed comparative analysis
    of the security of most modern blockchain platforms is also presented. A distinctive
    feature is a thorough review of the technology for creating and ensuring the secure
    implementation of decentralized applications and smart contracts. The author offers
    a step-by-step method for implementing secure smart contracts. At the end of the
    chapter, the selection results of the most secure blockchain platforms are presented.
    The successful implementation of the pilot project confirmed the possibility of
    using blockchain technology in supply chain management. It showed prospects for
    further using the potential of blockchain and replicating the experience gained.
    Blockchain in the supply chain has allowed creating an ecosystem for the interaction
    of all participants in the process, such as the manufacturer, inspector, logistics
    operator, warehouse, and consumer. The approach discussed in the chapter certainly
    has the potential to develop and further apply blockchain technology.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了一个试点项目的材料，该项目旨在利用区块链技术创建供应效率管理系统。项目描述从研究供应链的主要业务流程开始。对所有系统参与者的功能进行了详细描述和可视化展示：客户、制造商、检验员、运输公司。考虑了系统的主要组成部分：数字调度员、供应监控器、交互界面和生产环境。还对大多数现代区块链平台的安全性进行了详细的比较分析。一个显著特点是对创建和确保安全实施分布式应用程序和智能合约技术的技术进行了彻底审查。作者提供了一种逐步实施安全智能合约的方法。在章节的最后，呈现了最安全的区块链平台的选择结果。试点项目的成功实施证实了在供应链管理中使用区块链技术的可能性。它展示了进一步利用区块链潜力和复制所获经验的前景。供应链中的区块链已经允许创建一个生态系统，用于所有参与者之间的互动，例如制造商、检验员、物流运营商、仓库和消费者。本章讨论的方法无疑具有发展和进一步应用区块链技术的潜力。
- en: REFERENCES
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Ahmed, A. A., Bassem, A. A., Irfan, M., Khan, M., Salvador, E. V., & Jialiang,
    P. (2021). Quantum-inspired blockchain-based cybersecurity: Securing smart edge
    utilities in IoT-based smart cities. Information Processing & Management , 58(4),
    102549\. doi:10.1016/j.ipm.2021.102549'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 'Ahmed, A. A., Bassem, A. A., Irfan, M., Khan, M., Salvador, E. V., & Jialiang,
    P. (2021). Quantum-inspired blockchain-based cybersecurity: Securing smart edge
    utilities in IoT-based smart cities. 信息处理与管理, 58(4), 102549. doi:10.1016/j.ipm.2021.102549'
- en: 'Chris, J. S. (2017). Who will be killed by blockchain: 4 small business areas
    that will soon disappear. https://incrussia.ru/understand/kogo-ubet-blokchejn-4-sfery-malogo-biznesa-kotorye-skoro-ischeznut/'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 克里斯，J. S. (2017)。谁会被区块链杀死：4个即将消失的小型企业领域。https://incrussia.ru/understand/kogo-ubet-blokchejn-4-sfery-malogo-biznesa-kotorye-skoro-ischeznut/
- en: Dannen, K. (2018). Introduction to Ethereum and Solidity . Samizdat.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: Dannen, K. (2018)。《以太坊和Solidity简介》。Samizdat.
- en: Egorov, V. (2021). Gazprom Neft sells its blockchain platform in the form of
    an NFT token. (https://beincrypto.ru/gazprom-neft-prodaet-reliz-sobstvennoj-blokchejn-platformy-v-vide-nft-tokena/)
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: Egorov, V. (2021)。Gazprom Neft以NFT令牌的形式出售其区块链平台。(https://beincrypto.ru/gazprom-neft-prodaet-reliz-sobstvennoj-blokchejn-platformy-v-vide-nft-tokena/)
- en: 'Eman, M. A., Abdullah, M. I., Passent, M. E., Oh-Young, S., & Ali, K. B. (2020).
    DITrust chain: Towards blockchain-based trust models for sustainable healthcare
    IoT systems. IEEE Access: Practical Innovations, Open Solutions , 8, 111223–111238\.
    doi:10.1109/ACCESS.2020.2999468'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: Eman, M. A., Abdullah, M. I., Passent, M. E., Oh-Young, S., & Ali, K. B. (2020)。DITrust
    chain：面向可持续医疗保健物联网系统的基于区块链的信任模型。IEEE Access：实用创新，开放解决方案，8，111223–111238。doi:10.1109/ACCESS.2020.2999468
- en: Karaev, A. (2018). “Gazprom Neft” has tested blockchain and the Internet of
    Things in logistics. (https://www.gazprom-neft.ru/press-center/news/v-gazprom-nefti-ispytali-blokcheyn-i-internet-veshchey-v-logistike/)
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: Karaev, A. (2018)。“Gazprom Neft”在物流领域测试了区块链和物联网。(https://www.gazprom-neft.ru/press-center/news/v-gazprom-nefti-ispytali-blokcheyn-i-internet-veshchey-v-logistike/)
- en: Kustov, V. N., & Stankevich, T. L. (2018). Once Again about Blockchain Technology.
    Intellectual Technologies on Transport , (3), 38–46.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: Kustov, V. N., & Stankevich, T. L. (2018)。再谈区块链技术。交通智能技术，(3)，38–46。
- en: 'Kustov, V. N., & Stankevich, T. L. (2018). Blockchain Prospects: a Dialogue
    between a Skeptic and an Optimist. Bulletin of Scientific Conferences, 1(37),
    77-84.'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: Kustov, V. N., & Stankevich, T. L. (2018)。区块链前景：怀疑论者和乐观主义者之间的对话。科学会议通报，1(37)，77-84。
- en: 'Kustov, V. N., & Stankevich, T. L. (2019). Blockchain Technology: a Story of
    Ingenious Simplicity or Enlightened Thinking. How to protect yourself from blockchain?
    Information Protection. INSIDE, 2(86), 11-18.'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: Kustov, V. N., & Stankevich, T. L. (2019)。区块链技术：聪明的简单或开明的思考的故事。如何保护自己免受区块链的影响？信息保护。INSIDE，2(86)，11-18。
- en: Nin, H. L., Mohamed, E., Shanka, K., Gupta, B. B., & Ahmed, A. A. (2021). Secure
    blockchain enabled Cyber–physical systems in healthcare using deep belief network
    with ResNet model. Journal of Parallel and Distributed Computing , 153, 150–160\.
    doi:10.1016/j.jpdc.2021.03.011
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: Nin, H. L., Mohamed, E., Shanka, K., Gupta, B. B., & Ahmed, A. A. (2021). 利用深度置信网络和ResNet模型在医疗保健中实现安全的区块链启用的物联网系统。《并行与分布式计算杂志》，153，150–160。doi:10.1016/j.jpdc.2021.03.011
- en: Official documentation on the Solidity language from the Ethereum Foundation.
    (2018). https://solidity.readthedocs.io/en
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊基金会关于Solidity语言的官方文档。(2018)。https://solidity.readthedocs.io/en
- en: Report of the company Positive Technologies. (2019). Initial Coin Offering.
    Threats to information security. https://www.ptsecurity.com/upload/corporate/ru-ru/analytics/ICO-Threats-rus.pdf
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: Positive Technologies 公司报告. (2019). 初始代币发行。信息安全威胁。 https://www.ptsecurity.com/upload/corporate/ru-ru/analytics/ICO-Threats-rus.pdf
- en: Roadmap for the development of the. (2019). End-to-end digital technology “of
    the Distributed Registry System” . Rostec.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 发展路线图. (2019). “分布式记账系统”端到端数字技术的路线图 . 罗斯特克。
- en: Satoshi, N. (n.d.). Bitcoin. A Peer-to-Peer Electronic Cash System. https://bitcoin.org/bitcoin.pdf
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: Satoshi, N. (未知日期). 比特币。一种点对点电子现金系统。 https://bitcoin.org/bitcoin.pdf
- en: Shapiev, M. M. (2019). Vulnerabilities of smart contracts and ways of their
    exploitation. Scientific Electronic Journal “Meridian”, 10(28), 1-5.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: Shapiev, M. M. (2019). 智能合约漏洞及其利用方式。科学电子期刊“经纬”，10(28)，1-5。
- en: 'Swan, M. (2018). Blockchain: The scheme of a new economy. Olymp-Business Publishing
    House.'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: Swan, M. (2018). 区块链：新经济的方案。奥林匹克商业出版社。
- en: Vanurina, V. (2019). Gazprom is switching to blockchain. https://news.rambler.ru/other/41980326-gazprom-perehodit-na-blokcheyn/
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: Vanurina, V. (2019). 俄罗斯天然气工业公司正在转向区块链。https://news.rambler.ru/other/41980326-gazprom-perehodit-na-blokcheyn/
- en: Velder, S. E., Lukin, M. A., Shalyto, A. A., & Yaminov, B. R. (2011). Verification
    of automaton programs [Verifikatsiya avtomatnykh program] . Nauka.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: Velder, S. E., Lukin, M. A., Shalyto, A. A., & Yaminov, B. R. (2011). 自动机程序验证[Verifikatsiya
    avtomatnykh program] . 科学出版社。
