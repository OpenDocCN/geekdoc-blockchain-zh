- en: © The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2021Z.
    Zheng et al. (eds.)Blockchain Intelligence[https://doi.org/10.1007/978-981-16-0127-9_2](https://doi.org/10.1007/978-981-16-0127-9_2)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 作者（们），在Springer Nature新加坡私人有限公司独家授权下 2021郑培林等人（编辑）区块链智能[https://doi.org/10.1007/978-981-16-0127-9_2](https://doi.org/10.1007/978-981-16-0127-9_2)
- en: 2. On-chain and Off-chain Blockchain Data Collection
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.链上和链下区块链数据收集
- en: 'Peilin Zheng^([1](#Aff4) [ ](#ContactOfAuthor1)), Zibin Zheng^([2](#Aff5) [ ](#ContactOfAuthor2)),
    Jiajing Wu^([2](#Aff5), [3](#Aff6) [ ](#ContactOfAuthor3)) and Hong-Ning Dai^([4](#Aff7) [ ](#ContactOfAuthor4))(1)Sun
    Yat-sen University, Guangzhou, China(2)National Engineering Research Center of
    Digital Life, Sun Yat-sen University, Guangzhou, China(3)School of Data and Computer
    Science, Sun Yat-sen University, Guangzhou, China(4)Macau University of Science
    and Technology, Macau SAR, ChinaPeilin ZhengEmail: [zhengpl3@mail2.sysu.edu.cn](mailto:zhengpl3@mail2.sysu.edu.cn)Zibin Zheng (Corresponding
    author)Email: [zhzibin@mail.sysu.edu.cn](mailto:zhzibin@mail.sysu.edu.cn)Jiajing WuEmail:
    [wujiajing@mail.sysu.edu.cn](mailto:wujiajing@mail.sysu.edu.cn)Hong-Ning DaiEmail:
    [hndai@ieee.org](mailto:hndai@ieee.org)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 郑培林^([1](#Aff4) [ ](#ContactOfAuthor1))，郑子宾^([2](#Aff5) [ ](#ContactOfAuthor2))，吴嘉静^([2](#Aff5),
    [3](#Aff6) [ ](#ContactOfAuthor3)) 和戴红宁^([4](#Aff7) [ ](#ContactOfAuthor4))（1）中山大学，广州，中国（2）中山大学数字生活国家工程研究中心，广州，中国（3）中山大学数据科学与计算机学院，广州，中国（4）澳门科技大学，澳门特别行政区，中国郑培林电子邮件：
    [zhengpl3@mail2.sysu.edu.cn](mailto:zhengpl3@mail2.sysu.edu.cn)郑子宾（通讯作者）电子邮件：
    [zhzibin@mail.sysu.edu.cn](mailto:zhzibin@mail.sysu.edu.cn)吴嘉静电子邮件： [wujiajing@mail.sysu.edu.cn](mailto:wujiajing@mail.sysu.edu.cn)戴红宁电子邮件：
    [hndai@ieee.org](mailto:hndai@ieee.org)
- en: Abstract
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: After the introduction of blockchain intelligence in Chap. [1](506524_1_En_1_Chapter.xhtml),
    in this chapter, we present an overview of blockchain data collection. We first
    review the data growth brought about by the rapid development of blockchain in
    recent years, then analyze the data processing and exploration challenges caused
    by this phenomenon, and finally propose our solution XBlock-ETH, well-processed
    up-to-date on-chain datasets.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在第[1](506524_1_En_1_Chapter.xhtml)章引入区块链智能之后，在本章中，我们概述了区块链数据收集。我们首先回顾了近年来区块链快速发展带来的数据增长，然后分析了这种现象引起的数据处理和探索挑战，并最终提出了我们的解决方案XBlock-ETH，这是经过精心处理的最新链上数据集。
- en: 2.1 Overview
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.1 概述
- en: Academia and industry are paying close attention to the blockchain with huge
    value. In different blockchain systems, they made a lot of efforts on the unlicensed
    blockchain (or common blockchain) to solve the problems caused by the decentralized
    layout of the blockchain (or common blockchain) (Zheng et al. [2018b](#CR51)).
    The permissionless blockchain is a pioneering initiative on Bitcoin (Nakamoto
    [2008](#CR35)). Each peer owned by the blockchain system is equivalent to a ledger.
    Considering the characteristics of the ledger, it is often used as a riot public
    tally. Ethereum (Buterin [2013](#CR3)) is an innovation behind Bitcoin and is
    a permissionless blockchain system that can enable Turing-complete smart contracts.
    The unimaginable development of the blockchain has allowed the rapid growth of
    blockchain data. According to the Statista ([https://​www.​statista.​com/​](https://www.statista.com/))
    report, Bitcoin data easily reached 242 GB in the third quarter of 2019\. In this
    chapter, considering that Ethereum has Turing-complete smart contracts, we pay
    more attention to Ethereum. Similarly, more than 16,000,000 smart contracts have
    been deployed on Ethereum. The two token protocols pioneered by the Ethereum community
    facilitate the initial token issuance (so-called ICO) (Buterin and Fabian [2015](#CR4)),
    so there are more than 100,000 ERC20 tokens and 1600 ERC721 tokens that can be
    transferred on Ethereum.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 学术界和工业界正密切关注具有巨大价值的区块链。在不同的区块链系统中，他们在未经许可的区块链（或公有区块链）上做出了许多努力，以解决区块链（或公有区块链）的去中心化布局引起的问题（郑平等人
    [2018b](#CR51)）。无许可的区块链是对比特币的一项创新（中本聪 [2008](#CR35)）。区块链系统中的每个节点相当于一个账本。考虑到账本的特点，它通常被用作一项公开的总计。以太坊（但斌
    [2013](#CR3)）是比特币背后的创新，是一个能够实现图灵完备智能合约的无许可区块链系统。区块链的不可思议的发展使得区块链数据迅速增长。根据Statista（[https://​www.​statista.​com/](https://www.statista.com/)）的报告，2019年第三季度的比特币数据轻松达到了242
    GB。在本章中，考虑到以太坊有图灵完备的智能合约，我们更关注以太坊。同样，有超过1600万份智能合约部署在以太坊上。以太坊社区率先推出的两个代币协议简化了初始代币发行（所谓的ICO）（但斌和法比安
    [2015](#CR4)），因此在以太坊上可以转移超过100,000个ERC20代币和1600个ERC721代币。
- en: 'The massive amount of blockchain data that allows researchers to discover the
    openness, decentralization and high temperature resistance of the blockchain system
    means huge business opportunities and research opportunities (Dai et al. [2019](#CR11)).
    It is difficult for researchers to break through privacy protection and ownership
    protection to obtain real business transaction data. In contrast, the data in
    the blockchain system is all stored on the chain and is completely public. Its
    decentralized nature also means that permissionless blockchains can easily access
    any data anywhere. In addition, the distributed consensus of the blockchain also
    ensures the fatigue resistance of the blockchain data. Blockchain transactions
    are very important, but the smart contracts and cryptocurrencies provided by Ethereum
    (or its alternatives) are also the main research directions. Big data analysis
    of relevant data is conducive to advances in transaction fraud detection, smart
    contract vulnerability detection, and smart contract software development. In
    the rapid development of the blockchain system, the challenge came quietly: **(1)
    Difficulties encountered in the data synchronization of the blockchain peer nodes.**
    The decentralization of the blockchain means that blockchain data requires a long
    period of node synchronization. In the node selection section of the blockchain
    white paper, it is emphasized that a full node completely synchronizes the entire
    Ethereum, which takes more than a week and more than 500 GB of storage space.
    The huge demand for storage space and network bandwidth hinders the analysis of
    blockchain data. **(2) Challenges in blockchain data extraction and processing.**
    The storage method of blockchain data also affects the effect of big data analysis.
    All data is encrypted or binary, which further hinders the advancement of related
    research. It is clear that traditional data analysis methods may not be suitable
    for this type of data, and new analysis methods for blockchains are still under
    study, so processing heterogeneous blockchain data is not easy. **(3) Lack of
    general data extraction tools for blockchain.** There are many related tools to
    extract blockchain data, but the huge amount of complete data means that these
    tools can only obtain part of the data to complete specific research tasks in
    related papers. **(4) Lack of basic data exploration of blockchain.**Existing
    research only focuses on specific data analysis of blockchain data, for example,
    transaction graphs (Chen et al. [2018a](#CR7)) and contract security (Luu et al.
    [2016](#CR28)). Basic data exploration, such as statistical analysis, text analysis,
    and data visualization, is currently the shortcoming of blockchain big data analysis.
    A blockchain data analysis framework proposed by us may solve these challenges,
    namely e underline X plore underline Block chain underline ETH (XBlock-ETH) to
    analyze Ethereum data. In particular, we extracted raw data containing 8,100,000
    blocks from Ethereum. The original data includes three types of Ethereum data:
    *blocks*, *traces*, and *receipts*. Since it is difficult to analyze the original
    Ethereum data, we divide the obtained Ethereum blockchain data into six data sets:
    *(1) Block and Transaction*, *(2) Internal Ether Transaction*, *(3) contract information*,
    *(4) contract call*, *(5) ERC20 token transaction*, *(6) ERC721 token transaction*.
    The new classification of Ethereum data we provide can help other researchers
    to better advance most research tasks from a general perspective. However, it
    is not easy to partition and process the original data, because it takes a lot
    of effort to extract metadata information from the original data and associate
    it with the six data sets. Then, we perform statistical analysis on six refined
    data sets. We will also discuss potential applications of XBlock-ETH, such as
    blockchain system analysis, smart contract analysis, and cryptocurrency analysis.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 大量区块链数据的开放性、去中心化和高温耐受性让研究人员看到了巨大的商业机会和研究机会（Dai 等 [2019](#CR11)）。研究人员很难突破隐私保护和所有权保护来获取真实的商业交易数据。相比之下，区块链系统中的所有数据都存储在链上并完全公开。其去中心化特性也意味着无需许可的区块链可以轻松访问任何数据。此外，区块链的分布式共识也确保了区块链数据的抗疲劳性。区块链交易非常重要，但以太坊（或其替代品）提供的智能合约和加密货币也是主要研究方向。对相关数据的大数据分析有利于交易欺诈检测、智能合约漏洞检测和智能合约软件开发。在区块链系统的快速发展中，挑战悄然而至：**（1）区块链对等节点数据同步遇到的困难。**
    区块链的去中心化意味着区块链数据需要一个长期的节点同步过程。在区块链白皮书节点选择部分，强调了完全同步整个以太坊需要超过一周时间，并且需要超过 500 GB
    的存储空间。对存储空间和网络带宽的巨大需求阻碍了区块链数据分析。**（2）区块链数据提取和处理面临的挑战。** 区块链数据的存储方式也影响着大数据分析的效果。所有数据都是加密或二进制的，这进一步阻碍了相关研究的发展。显然，传统数据分析方法可能不适用于这类数据，针对区块链的新分析方法仍在研究中，因此处理异构区块链数据并不容易。**（3）缺乏针对区块链的通用数据提取工具。**
    有很多工具可以提取区块链数据，但大量完整数据意味着这些工具只能获取部分数据来完成相关论文中的特定研究任务。**（4）区块链基本数据探索的缺乏。** 现有研究只关注区块链数据的特定数据分析，例如，交易图（Chen
    等 [2018a](#CR7)）和合约安全（Luu 等 [2016](#CR28)）。基本数据探索，如统计分析、文本分析和数据可视化，是目前区块链大数据分析的不足之处。我们提出的区块链数据分析框架可能解决这些挑战，即e
    underline X plore underline Block chain underline ETH (XBlock-ETH)来分析以太坊数据。特别是，我们从以太坊中提取了包含
    8,100,000 个区块的原始数据。原始数据包括三种以太坊数据：*区块*、*交易轨迹*和*收据*。由于难以分析原始以太坊数据，我们将获得的以太坊区块链数据分为六个数据集：*（1）区块和交易*、*（2）内部以太交易*、*（3）合约信息*、*（4）合约调用*、*（5）ERC20
    代币交易*、*（6）ERC721 代币交易*。我们提供的以太坊数据新分类可以帮助其他研究人员更好地从总体角度推进大多数研究任务。然而，分割和处理原始数据并不容易，因为从原始数据中提取元数据信息并将其与六个数据集关联需要付出很大努力。然后，我们对六个精炼的数据集进行统计分析。我们还将讨论
    XBlock-ETH 的潜在应用，如区块链系统分析、智能合约分析和加密货币分析。
- en: 'In summary, we highlight the major contributions of this chapter as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我们突出本章的主要贡献如下：
- en: The data on the chain is more comprehensively included by XBlock-ETH (only part
    of Ethereum data is covered). It especially includes blockchain data, smart contract
    data, and encrypted currency data. Therefore, these carefully processed data sets
    allow processing personnel to easily conduct data exploration. Furthermore, XBlock-ETH
    data formally released online^([1](#Fn1)) has been periodically updated.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链上的数据由XBlock-ETH更全面地包含（只覆盖了以太坊数据的一部分）。它特别包括了区块链数据、智能合约数据和加密货币数据。因此，这些精心处理的数据集使得处理人员能够轻松进行数据探索。此外，XBlock-ETH在线正式发布的数据^([1](#Fn1))
    已经定期更新。
- en: The XBlock-ETH framework also offers basic statistics and exploration functions
    to analyze blockchain datasets. This chapter also outlines the research opportunities
    brought by XBlock-ETH. In particular, we discuss the applications of XBlock-ETH
    in aspects of blockchain system analysis, smart contract analysis, and cryptocurrency
    analysis.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XBlock-ETH框架还提供了基本的统计和探索功能来分析区块链数据集。本章也概述了XBlock-ETH带来的研究机遇。特别是，我们讨论了XBlock-ETH在区块链系统分析、智能合约分析和加密货币分析方面的应用。
- en: The rest of this chapter is organized as follows. Sections [2.3](#Sec6) and
    [2.4](#Sec10) then present raw data acquisition from Ethereum and data exploration
    of six datasets. Section [2.5](#Sec17) discusses the applications of XBlock-ETH
    data. Finally, the chapter is concluded in Sect. [2.6](#Sec31).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其余部分如下组织。第[2.3](#Sec6)节和第[2.4](#Sec10)节接着介绍从以太坊获取原始数据和六个数据集的数据探索。第[2.5](#Sec17)节讨论了XBlock-ETH数据的应用。最后，第[2.6](#Sec31)节作结。
- en: 2.2 Ethereum and Smart Contracts
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.2 以太坊与智能合约
- en: 'Figure [2.1](#Fig1) presents an overview of Ethereum blockchain, which consists
    of the following layers from bottom to top: peer, blockchain, smart contract,
    and token. We next review the basic concepts of each layer in Ethereum.![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig1_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig1_HTML.png)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图[2.1](#Fig1)展示了以太坊区块链的概览，从底层到顶层包括以下几个层次：节点、区块链、智能合约和代币。接下来，我们将回顾以太坊每个层次的基本概念。![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig1_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig1_HTML.png)
- en: Fig. 2.1
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Fig. 2.1
- en: Overview of Ethereum Blockchain
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊区块链概览
- en: 2.2.1 Peer and Blockchain
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.2.1 节点与区块链
- en: In short, a chain-like data structure composed of multiple special blocks is
    what we often call a blockchain. All peers in the P2P blockchain network maintain
    the chain together. In a set time, the consensus protocol can only confirm one
    block in the entire blockchain network. The miner plays an important role. It
    can generate the hash value of the block containing the confirmed transaction
    and the previous block, and the verification of the block will be done independently
    by other peers. Waiting for the verification and confirmation of most peers in
    the blockchain network, the transaction in this block will be regarded as emph
    completed. In this way, the concept of ledger is extended, that is, since all
    peers have verified the transaction, each peer can trust the entire blockchain.
    In other words, the trustworthiness of the transaction data of the distributed
    system of the blockchain needs to be maintained by replicating calculations and
    storage on each peer.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，我们通常所说的区块链是由多个特殊区块组成的一种链式数据结构。在P2P区块链网络中的所有节点共同维护这条链。在一定时间，共识协议在整个区块链网络中只能确认一个区块。矿工扮演着重要角色。它可以生成包含已确认交易和前一个区块的区块的哈希值，并且该块的验证将由其他节点独立完成。等待区块链网络中大多数节点的验证和确认，这个区块中的交易将被视为*完成*。这样，账本的概念就被扩展了，即由于所有节点都验证了交易，每个节点都可以信任整个区块链。换句话说，区块链分布式系统中的交易数据的可信度需要通过在每个节点上复制计算和存储来维护。
- en: The blocks of permission-free blockchain peers must be intact, so the entire
    blockchain data can be obtained by researchers through blockchain peers that have
    been connected to the blockchain network. A large amount of business value is
    contained in the blockchain data composed of all operations completed by users
    and miners in the blockchain, considering that transaction records are essentially
    operations completed by different business parties. Various behaviors represented
    by blockchain data can be mapped to user behaviors in the real-world economic
    system (such as remittances). At the same time, with the surge of users and transactions
    in Bitcoin and Ethereum, the scale of blockchain data has grown rapidly. Analysis
    of blockchain data may also help predict economic trends.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 无权限的区块链节点的区块必须是完整的，因此，研究人员可以通过已经连接到区块链网络的区块链节点获取整个区块链数据。用户和矿工在区块链上完成的大量业务操作构成了区块链数据，考虑到交易记录本质上是由不同的业务方完成的操作。区块链数据中代表的各种行为可以映射到现实经济系统中的用户行为（如汇款）。同时，随着比特币和以太坊中用户和交易的激增，区块链数据的大小迅速增长。分析区块链数据也可能有助于预测经济趋势。
- en: 2.2.2 Smart Contract
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.2.2 智能合约
- en: The key to reshaping the modern industry may be smart contracts earlier than
    the blockchain (Szabo [1997](#CR38)). Smart contracts are actually some computer
    programs. They are based on the blockchain and store the execution state on top
    of the blockchain. Unlike Bitcoin, blockchain transactions represent the deployment
    or invocation of smart contracts. Therefore, the existence of the blockchain itself
    means the trustworthiness of smart contracts.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 重塑现代行业的关键可能是智能合约，而不是区块链（Szabo [1997](#CR38)）。智能合约实际上是一些计算机程序。它们基于区块链，并在区块链之上存储执行状态。与比特币不同，区块链交易代表智能合约的部署或调用。因此，区块链本身的存在意味着智能合约的可靠性。
- en: Smart contracts are already a common function of existing blockchain systems.
    For example, Bitcoin enables users to run simple scripts during transactions.
    Although this script is Turing incomplete, it can be regarded as the prototype
    of a blockchain-based smart contract, so it cannot enable complex logical expressions
    in the contract. And Ethereum’s support for Turing-complete smart contracts truly
    represents the value of the blockchain system. In Ethereum, smart contracts are
    executed in an environment called the Ethereum Virtual Machine (EVM). EVM read
    and write state (stored in key-value pairs) as operations defined in the smart
    contract. During the execution of the contract, miners use “*Gas*” as the unit
    to evaluate the consumption of a smart contract. During the execution of the contract,
    the contract user will be charged by “GasUsed” and“ GasPrice”. The more “GasPrice”
    users promise to pay for miners, the faster the contract will be executed. After
    completing the transaction (i.e., operation), the EVM will generate a hash value
    of the state and record it in the blockchain. Therefore, we can understand from
    Fig. [2.1](#Fig1) that the smart contracts on Ethereum are not directly stored
    on the blockchain. They are basically stored in a state operated by the blockchain.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约已经是现有区块链系统的一个常见功能。例如，比特币允许用户在交易过程中运行简单的脚本。尽管这个脚本是图灵不完整的，但它可以被视为基于区块链的智能合约的原型，因此它不能使合同中实现复杂的逻辑表达。而以太坊对图灵完备的智能合约的支持真正体现了区块链系统的价值。在以太坊中，智能合约是在一种名为以太坊虚拟机（EVM）的环境中执行的。EVM读取和写入状态（以键值对的形式存储），这些操作在智能合约中有定义。在合约执行过程中，矿工使用“*Gas*”作为单位来评估智能合约的消耗。在合约执行过程中，合约用户将按“GasUsed”和“GasPrice”付费。“GasPrice”用户承诺支付给矿工越多，合约执行的速度就越快。在完成交易（即操作）后，EVM将生成状态的哈希值并记录在区块链上。因此，从图2.1（[2.1](#Fig1)）我们可以理解到，以太坊上的智能合约并不是直接存储在区块链上的。它们基本上是存储在由区块链操作的状态中。
- en: 2.2.3 Tokens and Clients
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.2.3 代币与客户端
- en: It is worth mentioning that Ethereum has two standard token protocols (a.k.a.
    templates) of smart contracts. These token protocols define the standard variables,
    functions, and interfaces in the smart contract. With the protocols, users can
    issue tokens (or so-called cryptocurrencies) based on smart contracts on top of
    Ethereum. There are four typical tokens USDT,^([2](#Fn2)) Cryptokitties (Kharif
    [2017](#CR21)), Kyber (Luu [2017](#CR29)), and MarkerDAO^([3](#Fn3)) as shown
    in Fig. [2.1](#Fig1) (i.e., the top layer). For example, a user can publish an
    ERC20 contract on Ethereum issuing tokens to others. After that, any other users
    (even contracts) can receive or send the token without a centralized authority
    (e.g., stock exchange). The standard token protocols greatly enrich the ecosystem
    of Ethereum so as to make Ethereum become a flexible financial system. In Sects.
    [2.4.5](#Sec15) and [2.4.6](#Sec16), we will explore the data of tokens in Ethereum.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Ethereum拥有两种智能合约标准代币协议（又名模板）。这些代币协议定义了智能合约中的标准变量、函数和接口。有了这些协议，用户可以在以太坊之上基于智能合约发行代币（或所谓的加密货币）。如图[2.1](#Fig1)（即最上层）所示，有四种典型的代币USDT、^([2](#Fn2))
    Cryptokitties (Kharif [2017](#CR21))，Kyber (Luu [2017](#CR29))和MarkerDAO^([3](#Fn3))。例如，用户可以在以太坊上发布一个ERC20合约，向其他人发行代币。此后，其他任何用户（甚至合约）都可以在没有集中权威（例如，证券交易所）的情况下接收或发送代币。标准代币协议极大地丰富了以太坊生态系统，使以太坊成为了一个灵活的金融系统。在[2.4.5](#Sec15)和[2.4.6](#Sec16)节中，我们将探讨以太坊中的代币数据。
- en: Ethereum allows that any computer programs can join into the network if they
    meet the requirement of the protocol just like P2P protocols (e.g., BitTorrent).
    As a result, there are a number of diverse Ethereum clients that can validate
    the blocks and transactions. Among most of Ethereum clients, Go-Ethereum (Geth)
    and Parity have been the most widely used according to the statistic from Ether
    nodes.^([4](#Fn4)) Both of them provide JSON-RPC interfaces for users to interact
    with Ethereum blockchain. Through the JSON-RPC interfaces, the user can obtain
    the blockchain data from Ethereum. Geth has been generally used in many previous
    studies, while the interfaces designed in Geth are not suitable for data acquisition.
    Even though many researchers attempted to modify source codes of Geth to obtain
    the detailed run-time data, the whole procedure of the code modification is time-consuming
    and complex. In addition, the obtained data is not absolutely accurate in some
    cases. Different from Geth, Parity better designs the interfaces so that it can
    obtain the index of each block corresponding to each piece of the data that we
    need. The details on data acquisition of blockchain data will be described in
    Sect. [2.3](#Sec6).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Ethereum允许任何满足协议要求的计算机程序加入网络，就像P2P协议（例如BitTorrent）一样。因此，有许多不同的Ethereum客户端可以验证区块和交易。在大多数Ethereum客户端中，Go-Ethereum（Geth）和Parity根据Ether
    nodes的统计数据，一直是使用最广泛的。它们都为用户提供JSON-RPC接口以与Ethereum区块链交互。通过JSON-RPC接口，用户可以从以太坊获取区块链数据。Geth在许多先前的研究中通常被使用，而Geth中设计的接口不适合数据采集。即使许多研究者试图修改Geth的源代码以获取详细的运行时数据，整个代码修改过程既耗时又复杂。此外，在某些情况下获取的数据并不完全准确。与Geth不同，Parity更好地设计了接口，使其能够获取与我们需要的每块数据相对应的每个块的索引。关于区块链数据的数据采集的详细信息将在[2.3](#Sec6)节中描述。
- en: 2.3 Raw Data Extraction from Ethereum
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.3 从Ethereum中提取原始数据
- en: 'This section describes the procedure of how the raw data was obtained from
    Ethereum blockchain. Figure [2.2](#Fig2) illustrates the typical Ethereum transaction
    execution flow from Block *N* to EVM through Blockchain peer. During this procedure,
    we collect the three types of blockchain raw data: Block, Receipt, and Trace.
    We next describe the details on the composition and acquisition of each kind of
    raw data.![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig2_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig2_HTML.png)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了从Ethereum区块链获取原始数据的过程。图[2.2](#Fig2)展示了从区块*N*通过区块链对等体到EVM的典型Ethereum交易执行流程。在这个过程中，我们收集了三种类型的区块链原始数据：区块、收据和跟踪。我们接下来描述每种原始数据的组成和获取细节。![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig2_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig2_HTML.png)
- en: Fig. 2.2
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2
- en: Raw data collection during Ethereum transaction flow
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Ethereum交易流程中的原始数据收集
- en: 2.3.1 Block
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.3.1 区块
- en: 'Block data is directly stored in the Ethereum blockchain. Each block consists
    of two components:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 区块数据直接存储在Ethereum区块链中。每个区块由两个组件组成：
- en: '**Block Header:** Block header is the basic information of a block, including
    the miner’s address, timestamp, gas limit, etc.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**区块头**：区块头是区块的基本信息，包括矿工地址、时间戳、燃料限制等。'
- en: '**Block Transactions:** Block transactions construct the body of the block.
    Each transaction consists of the fields: *From*, *To*, *Value*, *Input*, etc.
    If the transaction is used to deploy a contract, the *To* field is “null” in the
    block transaction.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**区块交易**：区块交易构成区块的主体。每笔交易包括如下字段：*From*、*To*、*Value*、*Input*等。如果交易用于部署合约，区块交易中的*To*字段为“null”。'
- en: Almost all the Ethereum clients, including Geth and Parity, offer the interfaces
    to query the blocks. For example, “eth_getBlock” is available in both Geth and
    Parity with similar efficiency. However, the input of a block transaction only
    represents the operation of the EVM during the contract deployment phase, and
    the contract code will only be stored at the end of the transaction execution,
    and is different from the transaction input. This means that the analysis of block
    data can only allow us to obtain very little information about blockchain users.
    In large transactions, the exact contract code cannot be obtained by us. We cannot
    know whether the transaction is successfully executed, and what kind of errors
    will be thrown during the execution of the transaction. It is the contract that
    sends messages to other contracts or the cryptocurrency that causes problems.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有的以太坊客户端，包括Geth和Parity，都提供了查询区块的接口。例如，“eth_getBlock”在Geth和Parity中都可以使用，且效率相似。然而，区块交易的输入只代表了在合约部署阶段EVM的操作，合约代码将在交易执行结束时存储，与交易输入不同。这意味着对区块数据的分析只能让我们获取到关于区块链用户非常有限的信息。在大额交易中，我们无法获取确切的合约代码。我们不知道交易是否成功执行，以及交易执行过程中会抛出什么样的错误。是合约向其他合约发送消息或加密货币引起的问题。
- en: 2.3.2 Trace
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.3.2 跟踪
- en: 'Trace data is essentially the detailed run-time data that was generated in
    EVM (e.g., internal contract calls, transferring money from the contract to a
    person). Trace data cannot be directly obtained or observed from the block data
    but can be recorded during the contract execution. In this chapter, trace data
    is referred to the data that cannot be obtained before or after the transaction
    execution, but only appears during the execution. Trace data includes the following
    types:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪数据本质上是在EVM中生成的一系列详细的运行时数据（例如，智能合约内的内部调用，从合约向个人转账）。跟踪数据不能直接从区块数据中获取或观察，但可以在合约执行期间记录。在本章中，跟踪数据指的是在交易执行前后无法获取，仅在执行过程中出现的数据。跟踪数据包括以下类型：
- en: '**Create** is the trace, including the creator, code, and initial balance when
    a smart contract is deployed. The creator of a contract can be a person or another
    smart contract.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建**是在部署智能合同时记录的跟踪数据，包括创建者、代码和初始余额。合约的创建者可以是个人或另一个智能合约。'
- en: '**Call** occurs when money or messages are transferred through different Ethereum
    addresses. Contract call or Ether transferring is shown as a “Call” trace.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调用**当通过不同的以太坊地址转移资金或消息时发生。合约调用或以太币转账显示为“调用”跟踪数据。'
- en: '**Suicide** is the trace that smart contract “suicide” deletes its code, and
    refunds the value to a specific account.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自杀**是智能合约“自杀”删除其代码，并将价值退回到特定账户的跟踪数据。'
- en: '**Reward** is the trace that miners get the Ether reward when they mine a block.
    The reward value varies depending on the contribution of the miners.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**奖励**是矿工挖出一个区块时获得的以太币奖励。奖励的值取决于矿工的贡献。'
- en: In Geth, the interface of trace is “debug_traceTransaction”. However, this interface
    returns all the operations during the transaction, resulting in large resource
    consumption and low efficiency. Thus, many previous studies attempt to modify
    the source codes of Geth to obtain detailed run-time data, while this procedure
    is extremely time-consuming. In this chapter, we adopt “parity_trace” in Parity
    to obtain the trace data. This interface is provided and maintained by the official
    developers so that the correctness is guaranteed in contrast to Geth. Meanwhile,
    it also provides enough information that we need, such as the basic trace types
    and errors. Moreover, another advantage of Parity is the updating convenience
    as the data is indexed by blocks.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在Geth中，交易跟踪的接口是“debug_traceTransaction”。然而，这个接口返回了交易期间的全部操作，导致资源消耗大且效率低下。因此，许多先前的研究尝试修改Geth的源代码以获取详细的运行时数据，但这一过程极为耗时。在本章中，我们采用Parity中的“parity_trace”来获取跟踪数据。这个接口由官方开发者提供和维护，因此与Geth相比，正确性得到保证。同时，它还提供了我们需要的足够信息，例如基本跟踪类型和错误。此外，Parity的另一个优点是数据的更新方便，因为数据按区块进行索引。
- en: 2.3.3 Receipt
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.3.3 收据
- en: After the transaction is executed, some of the Ethereum states have been changed
    (e.g., the balance of the account in a token contract). Then the clients need
    to know what has been changed. To reduce the query overhead of clients, many contracts
    leave one kind of outputs called “Event” in the execution. For example, a standard
    token contract will output a “Transfer( from,to,value) ” event to let the clients
    know what happens during the execution. This kind of output is a one-way output,
    as it is just written in the receipt of the transaction, and can be read by external
    clients or persons but cannot be read by internal EVMs.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 交易执行后，以太坊状态中的一些已经被改变（例如，代币合约中的账户余额）。然后客户端需要知道发生了什么变化。为了减少客户端的查询开销，许多合约在执行过程中留下了一种称为“事件”的输出。例如，一个标准代币合约将输出一个“Transfer(from,to,value)”事件，让客户端知道执行过程中发生了什么。这种输出是一种单向输出，因为它只是写入交易的收据中，可以被外部客户端或个人读取，但不能被内部EVM读取。
- en: Section [2.4](#Sec10) will then give the statistics of Ethereum data. In particular,
    there are over 100,000 kinds of cryptocurrencies using smart contracts on Ethereum.
    As for these token contracts, the receipt data is an important source to learn
    about the holders, owners, and user behaviors. Thus, it is necessary to obtain
    receipt data. Both Geth and Parity provide the interfaces to get the transaction
    receipts. The main difference between Geth and Parity interfaces lies in the query
    index of the receipts. In particular, the receipt of the interface of Geth is
    “eth_getTransactionReceipt” that is indexed by the transaction hash, while the
    interface of Parity is “parity_getBlockReceipts” that is indexed by block number.
    In this way, Parity is much more efficient than Geth since it can return a batch
    of receipts in one query.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 第[2.4](#Sec10)节将给出以太坊数据的统计信息。特别是，有超过100,000种加密货币在以太坊上使用智能合约。至于这些代币合约，收据数据是了解持有者、所有者和用户行为的重要来源。因此，获取收据数据是必要的。Geth和Parity都提供了获取交易收据的接口。Geth和Parity接口的主要区别在于收据的查询索引。特别是，Geth接口的收据是“eth_getTransactionReceipt”，按交易哈希索引，而Parity的接口是“parity_getBlockReceipts”，按区块号索引。这样，由于Parity可以在一次查询中返回一批收据，因此比Geth效率更高。
- en: 'In summary, there are three kinds of raw datasets that can be obtained in Ethereum:
    block, trace, and receipt. More specifically, it takes almost 2 weeks to synchronize
    the entire Ethereum blockchain and obtain the raw data, with the implement in
    Shell, NodeJS, and Python. After compression, the size of the data is about 313
    GBytes. Because of the massive volume and redundant information of the raw data,
    data procession is necessary to simplify data representation and fasten data analysis
    for further study.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 总结起来，在以太坊中可以获得三种原始数据集：区块数据、交易跟踪数据和收据数据。更具体地说，使用Shell、NodeJS和Python实现几乎需要花费两周时间来同步整个以太坊区块链并获取原始数据。压缩后，数据大小约为313
    GB。由于原始数据的海量体积和冗余信息，数据处理是必要的，以简化数据表示并加快数据分析，以便进一步研究。
- en: 2.4 Data Exploration of Ethereum
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.4 以太坊数据探索
- en: 'In this section, we process the obtained raw data from Ethereum and divide
    it into six datasets: (1) Block and Transaction, (2) Internal Ether Transaction,
    (3) Contract Info, (4) Contract Call, (5) ERC20 Token Transaction, (6) ERC721
    Token Transaction. The relationship from the raw data to the processed datasets
    is shown in Fig. [2.3](#Fig3). The reason for dividing these six datasets is that
    we want to find the minimum necessary subset of data for the researchers in a
    specific research field. For example, if a researcher wants to study the Ether
    transferring network, he can only study the Dataset 2 (Internal Ether Transaction),
    rather than dealing with the raw data or other sub-datasets, saving his workload.![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig3_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig3_HTML.png)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们对从以太坊获取的原始数据进行处理，并将其划分为六个数据集：(1) 区块与交易，(2) 内部以太坊交易，(3) 合约信息，(4) 合约调用，(5)
    ERC20代币交易，(6) ERC721代币交易。原始数据与处理后的数据集之间的关系如图[2.3](#Fig3)所示。划分这六个数据集的原因是我们希望为特定研究领域的研究人员找到数据的最小必要子集。例如，如果研究人员想要研究以太坊转账网络，他只能研究数据集2（内部以太坊交易），而不是处理原始数据或其他子数据集，从而节省了他的工作量。![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig3_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig3_HTML.png)
- en: Fig. 2.3
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3
- en: Mapping from raw data to datasets
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 原始数据到数据集的映射
- en: This section will introduce how the datasets are generated, with statistics
    and observations.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将介绍数据集是如何生成的，以及统计观察结果。
- en: '2.4.1 Dataset 1: Block and Transaction'
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.4.1 数据集1：区块与交易
- en: 'To investigate the basic statistics of Ethereum, we extract the information
    about the blocks and the transactions inside the blocks. In particular, there
    are 8,100,000 blocks and 491,562,222 transactions generated from the block data.
    For each block, we also obtain the statistic values of the “gasPrice”: minimum,
    average, and maximum. Meanwhile, corresponding to the hash of each transaction,
    the fields of “minerReward”, “gasUsed”, and “error” are extracted from the receipt
    and trace. Regarding the miners of the Ethereum blockchain, there are 5122 unique
    addresses of miners, as shown in Table [2.1](#Tab1). It implies that there are
    no more than 5122 peers that serve as miners since one peer may own more than
    one address. Meanwhile, each miner has the right to write extra texts in the block.
    So, we also use the word cloud to analyze the texts of miners. Figure [2.4](#Fig4)a
    shows the visualization of the texts of the word cloud. The results show that
    there are texts left by the mining pool, since most miners are in the mining pool,
    and they have left their names in the blocks to promote their mining capability.![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig4_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig4_HTML.png)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了研究以太坊的基本统计数据，我们从区块和区块内的交易中提取相关信息。特别是，从区块数据中产生了8,100,000个区块和491,562,222个交易。对于每个区块，我们还获得了“gasPrice”的统计值：最小值、平均值和最大值。同时，与每个交易的哈希相对应，从收据和跟踪中提取了“minerReward”、“gasUsed”和“error”字段。关于以太坊区块链的矿工，表[2.1](#Tab1)显示了有5122个独特的矿工地址。这意味着既然一个
    peer 可能拥有多个地址，最多只有5122个 peer 充当矿工。同时，每个矿工都有权在区块中写入额外的文本。因此，我们也使用词云来分析矿工的文本。图[2.4](#Fig4)a显示了词云文本的可视化。结果显示，由于大多数矿工都在矿池中，他们在区块中留下了他们的名字以推广他们的挖矿能力。![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig4_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig4_HTML.png)
- en: Fig. 2.4
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4
- en: Visualization of Dataset 1 (better viewed in color). (**a**) Word cloud of miners’
    text. (**b**) Transaction Count. (**c**) Macro view of GasPrice. (**d**) Micro
    view of GasPrice
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集1可视化（彩色显示更佳）。(**a**) 矿工文本的词云。 (**b**) 交易次数。 (**c**) GasPrice 的宏观视图。 (**d**)
    GasPrice 的微观视图。
- en: Table 2.1
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 表2.1
- en: Statistics of Dataset 1
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集1统计
- en: '| Statistics | Values |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 统计 | 值 |'
- en: '| --- | --- |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| No. of blocks | 8,100,000 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 区块数量 | 8,100,000 |'
- en: '| No. of transactions | 491,562,222 |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 交易数量 | 491,562,222 |'
- en: '| No. of miner addresses | 5122 |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 矿工地址数量 | 5122 |'
- en: '| Mean of transaction counts per block | 60.68 |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 每区块交易次数平均值 | 60.68 |'
- en: '| Mean of block time | 15.33 s |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 区块时间平均值 | 15.33 秒 |'
- en: '| Mean of block size | 11,457 bytes |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 区块大小平均值 | 11,457 字节 |'
- en: As shown in Table [2.1](#Tab1), the mean of transaction counts per block is
    60.68, and the block time is 15.33 s. In other words, the average throughput of
    Ethereum is about 4 transactions per second. Even when most of the network is
    active, as shown at 4,900,000 blocks in Fig. [2.4](#Fig4)b, the throughput is
    about 16.7 transactions per second. This result implies that Ethereum still has
    a long way to go to support real-time Internet applications. In Ethereum, a miner
    has a higher priority to package the transactions with higher “gasPrice” into
    the block. The visualization of “gasPrice” is shown in Fig. [2.4](#Fig4)c and
    d. In a macro view, the “gasPrice” is gradually decreasing with the development
    of the Ethereum community, except for several peaks caused by the extremely frequent
    transaction when the network is congested. In a micro view, we extract the time
    from 8,000,000 to 8,020,000 blocks and find that such fluctuations of “gasPrice”
    can be observed by the tidal law. This observation implies that the fluctuations
    of “gasPrice” can potentially be predicted.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如表[2.1](#Tab1)所示，每个区块的交易次数平均为60.68，区块时间为15.33秒。换句话说，以太坊的平均吞吐量大约为每秒4笔交易。即使当网络大部分活跃时，如图[2.4](#Fig4)b中4,900,000区块所示，吞吐量也大约为每秒16.7笔交易。这一结果暗示以太坊仍有很长的路要走，以支持实时互联网应用。在以太坊中，矿工有更高的优先级将“gasPrice”较高的交易打包进区块。
    “gasPrice”的可视化如图[2.4](#Fig4)c和d所示。从宏观角度看，“gasPrice”随着以太坊社区的不断发展而逐渐下降，除了由于网络拥堵而造成交易异常频繁引起的一些峰值。从微观角度看，我们从8,000,000到8,020,000区块中提取时间，并发现“gasPrice”的此类波动可以遵循潮汐法则观察到。这一观察暗示“gasPrice”的波动
    potentially可以预测。
- en: '2.4.2 Dataset 2: Internal Ether Transaction'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.4.2 数据集2：内部以太坊交易
- en: Ether is the native cryptocurrency of Ethereum. The transactions of Ether not
    only happen in the transactions recorded in the block but also occur during the
    smart contract execution. For example, if someone asks a smart contract to send
    10 Ethers to another one, the Ether transaction from the contract will not be
    observed in the block. In some blockchain explorers such as Etherscan,^([5](#Fn5))
    this kind of transactions is also called “*Internal Transaction*.” To investigate
    all the Ether transactions, we process the block and trace data to conduct the
    internal Ether transaction dataset. As shown in Table [2.2](#Tab2), 330,239,865
    Ether transactions which occur among 54,688,782 addresses are collected. The values
    of Ether have a large variance, as the maximum is 11,901,464.24 Ethers (about
    two billion dollars now), but the mean is only 22.26 Ethers. Figure [2.5](#Fig5)a
    presents statistics on the total transaction amount of every 10,000 blocks. It
    is shown that the most active time for Ether transaction is the time during 4,000,000
    to 4,300,000 blocks, matching with the most active time of Initial Coin Offering
    (ICO). Regarding the Ether distribution as shown in Fig. [2.5](#Fig5)b, we find
    that most of Ether transactions fall in the range from 0.1 Ether to 1 Ether, indicating
    that most of transactions only transfer small amounts of Ethers.![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig5_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig5_HTML.png)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊是以太坊的原生加密货币。以太坊的交易不仅发生在区块记录的交易中，还发生在智能合约执行过程中。例如，如果有人要求智能合约向他人发送10以太坊，合约内的以太坊交易不会在区块中被观察到。在某些区块链浏览器（如Etherscan），^([5](#Fn5))这种交易也称为“*内部交易*”。为了调查所有的以太坊交易，我们处理区块和跟踪数据以进行内部以太坊交易数据集。如表[2.2](#Tab2)所示，收集了在54,688,782个地址之间发生的330,239,865笔以太坊交易。以太坊的价值波动很大，最高值为11,901,464.24以太坊（目前约两亿美元），但平均值仅为22.26以太坊。图[2.5](#Fig5)a展示了每10,000个区块的总交易金额的统计信息。可以看出，以太坊交易最活跃的时间是4,000,000到4,300,000区块之间，这与初始币发行（ICO）最活跃的时间相匹配。关于如图[2.5](#Fig5)b所示的以太坊分布，我们发现大多数以太坊交易落在0.1以太坊到1以太坊的范围内，这表明大多数交易只转移少量的以太坊。![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig5_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig5_HTML.png)
- en: Fig. 2.5
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5
- en: Visualization of Dataset 2\. (**a**) Ether transferred amount. (**b**) Ether
    transaction distribution
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集2的可视化。（**a**）转移的以太坊金额。（**b**）以太坊交易分布
- en: Table 2.2
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 表2.2
- en: Statistics of Dataset 2
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集2的统计信息
- en: '| Statistics | Values |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 统计信息 | 值 |'
- en: '| --- | --- |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| No. of ether transactions | 330,239,865 |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 以太坊交易数量 | 330,239,865 |'
- en: '| No. of addresses | 54,688,782 |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 地址数量 | 54,688,782 |'
- en: '| Mean of amount of ether | 22.26 |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 以太坊平均金额 | 22.26 |'
- en: '| Maximum of amount of ether | 11,901,464.24 |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 以太坊最大金额 | 11,901,464.24 |'
- en: '2.4.3 Dataset 3: Contract Info'
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.4.3 数据集3：合同信息
- en: The more important platform for smart contracts is Ethereum. Creator, creation
    time, initial value, contract code, creation code, these basic information of
    smart contracts after we process tracking data, we are step by step to achieve
    the purpose of investigating all smart contracts on Ethereum. The “SUICIDE” operation
    code can delete the smart contract with this operation code in the function and
    return it to others. To observe the behavior of contract deletion, according to
    the statistical information in the “Table of Data Set 3”, 16,557,477 smart contracts
    were created from 133,039 addresses. This means that there should be a large percentage
    of users who create multiple contracts. When the main anomaly can be found from
    Table [2.3](#Tab3), 5,704,054 contracts were deleted, and the ether balance was
    returned to 19,133,738 addresses. Generally, smart contracts will not refund Ether
    to multiple addresses during the deletion process. This comes from a denial of
    service (DoS) attack. Ethereum has suffered from this attack. The attacker used
    the vulnerability of the “SUICIDE” price to create an account in Ethereum. Before
    fixing the vulnerability, a large number of contracts were deleted to be directed
    to empty addresses, which resulted in the closure of many Ethereum peers, as shown
    in previous work (Chen et al. [2017](#CR6)).Table 2.3
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于智能合约来说，更重要的平台是以太坊。创作者、创建时间、初始值、合约代码、创建代码，这些都是我们在处理跟踪数据后得到的基本智能合约信息，我们一步一步地实现了调查以太坊上所有智能合约的目的。"SUICIDE"操作码可以在函数中删除具有该操作码的智能合约并将其返回给他人。根据数据集3中的统计信息，从133,039个地址创建了16,557,477个智能合约。这意味着应该有很大比例的用户创建了多个合约。当主异常可以在表[2.3](#Tab3)中找到，有5,704,054个合约被删除，并将以太币余额返回给19,133,738个地址。通常，在删除过程中，智能合约不会将以太币退回到多个地址。这来自于服务拒绝(DoS)攻击。以太坊遭受了这种攻击。攻击者利用了"SUICIDE"价格的漏洞在以太坊上创建了一个账户。在修复漏洞之前，大量合约被删除并指向空地址，导致许多以太坊节点关闭，如前所述的工作(Chen等[2017](#CR6))。表2.3
- en: Statistics of Dataset 3
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集3的统计
- en: '| Statistics | Values |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 统计学 | 值 |'
- en: '| --- | --- |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| No. of created contracts | 16,557,477 |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 创建的合约数量 | 16,557,477 |'
- en: '| No. of creator addresses | 133,039 |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 创作者地址数量 | 133,039 |'
- en: '| No. of deleted contracts | 5,704,054 |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 删除的合约数量 | 5,704,054 |'
- en: '| No. of refunded addresses | 19,133,738 |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 退款地址数量 | 19,133,738 |'
- en: '| Mean of contract hex code size | 962.00 |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 合约十六进制代码大小的平均值 | 962.00 |'
- en: Regarding the contract code, we translate the bytecode into hexadecimal code.
    Figure [2.6](#Fig6)a gives the statistics of contract size. Particularly, the
    mean of contract size is 962.00, indicating that the smart contracts take up little
    space of storage. The contract size distribution also implies that the sizes of
    most contracts have focused on some clusters. This indicates that many smart contracts
    may look similar. This similarity will be further investigated in Dataset 4\.
    Figure [2.6](#Fig6)b presents the count of created contracts. It is shown in Fig.
    [2.6](#Fig6)b that the number of new smart contracts is increasing, especially
    at the time after the concept of “ICO” (Howell et al. [2018](#CR16)) comes out.![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig6_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig6_HTML.png)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 关于合约代码，我们将字节码翻译成十六进制代码。图[2.6](#Fig6)a给出了合约大小的统计。特别是，合约大小的平均值为962.00，这表明智能合约占用的存储空间很小。合约大小分布也暗示了大多数合约的大小集中在一些簇上。这表明许多智能合约可能看起来很相似。这种相似性将在数据集4中进一步研究。图[2.6](#Fig6)b展示了创建的合约数量。图[2.6](#Fig6)b显示新智能合约的数量在增加，特别是在"ICO"概念（Howell等[2018](#CR16)）提出后的时间。![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig6_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig6_HTML.png)
- en: Fig. 2.6
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6
- en: Visualization of Dataset 3\. (**a**) Contract size distribution. (**b**) Count
    of created contracts
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集3的视觉化。(**a**)合同大小分布。(**b**)创建的合同数量。
- en: '2.4.4 Dataset 4: Contract Call'
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.4.4 数据集4：合约调用
- en: In EVM, a smart contract can call another one to invoke some codes or functions.
    To investigate the calls among the Ethereum contracts (which are represented as
    addresses), we extract Contract Calls in the execution from the trace dataset.
    The contract call dataset includes the caller, called address, calling function.
    As shown in Table [2.4](#Tab4), it consists of 1,148,572,009 Contract Calls, among
    which 639,336,722 contain input codes and 169,463,261 contain errors. Figure [2.7](#Fig7)
    gives the visualization of Contract Calls. In particular, Fig. [2.7](#Fig7)a and
    c show that, during the time from 2,300,000 to 2,460,000 blocks, contract calls
    and errors occur very frequently. This is caused by the DoS attacks mentioned
    in the above subsection, as the attackers invoked a large number of contracts
    in batches and some of them throw errors. Figure [2.7](#Fig7)b gives the distribution
    of call types. In particular, Fig. [2.7](#Fig7)b shows that most of developers
    prefer to use “call” and “delegatecall” rather than “staticcall” and “callcode”,
    since the logic of “call” and “delegatecall” is clearer and more practical than
    other two calls. Figure [2.7](#Fig7)d shows the error types during calling contract,
    indicating that most of errors are caused by “Out of gas”, which is mainly resulted
    from the wrong settings of message senders. The second most common error is “Reverted”,
    which is a manually thrown exception by the developers. Moreover, other errors
    such as “Bad instruction” and “Bad jump destination” are often caused by the contract
    codes themselves.![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig7_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig7_HTML.png)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在EVM中，一个智能合约可以调用另一个来执行一些代码或函数。为了调查以太坊合约之间的调用（以地址表示），我们从跟踪数据集中提取执行中的合约调用。合约调用数据集包括调用者、被调用地址、调用函数。如表[2.4](#Tab4)所示，它由11,485,720,090个合约调用组成，其中6,393,367,220个包含输入代码和169,463,261个包含错误。图[2.7](#Fig7)给出了合约调用的可视化。特别是图[2.7](#Fig7)a和c显示，在从2,300,000到2,460,000块的时间段内，合约调用和错误非常频繁地发生。这是由于上一个小节提到的DoS攻击造成的，因为攻击者批量调用了大量合约，其中一些抛出了错误。图[2.7](#Fig7)b给出了调用类型的分布。特别是图[2.7](#Fig7)b显示，大多数开发者更倾向于使用“call”和“delegatecall”而不是“staticcall”和“callcode”，因为“call”和“delegatecall”的逻辑更清晰、更实用。图[2.7](#Fig7)d显示了调用合约时的错误类型，表明大多数错误是由“Out
    of gas”引起的，这主要是由于消息发送者的设置不当造成的。第二常见的错误是“Reverted”，这是开发者手动抛出的异常。此外，如“Bad instruction”和“Bad
    jump destination”等其他错误通常是由合约代码本身引起的。![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig7_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig7_HTML.png)
- en: Fig. 2.7
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7
- en: Visualization of Dataset 4\. (**a**) Count of contract call. (**b**) Call type
    distribution. (**c**) Count of contract error. (**d**) Error type distribution.
    (**e**) Calling count of top 10 contract function
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集4的可视化。(**a**) 合约调用的计数。 (**b**) 调用类型分布。 (**c**) 合约错误的计数。 (**d**) 错误类型分布。 (**e**)
    调用次数最多的前10个合约函数。
- en: Table 2.4
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 表2.4
- en: Statistics of Dataset 4
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集4的统计数据
- en: '| Statistics | Values |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 统计学 | 值 |'
- en: '| --- | --- |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| No. of contract calls | 1,148,572,009 |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 合约调用次数 | 11,485,720,090 |'
- en: '| No. of calls with inputs | 639,336,722 |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 带有输入的调用次数 | 6,393,367,220 |'
- en: '| No. of calls with errors | 169,463,261 |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 带有错误的调用次数 | 169,463,261 |'
- en: 'Generally, the compiler of smart contracts will use the hash value of function
    name and parameters as the entry of the function. In other words, in Ethereum
    smart contracts, the identical function in source code will have the identical
    entry in the complied contract code. We then count the calling contract functions
    to see what functions are the most common ones. The distribution of top-10 functions
    is shown in Fig. [2.7](#Fig7)e. The results show that most of the calling functions
    concentrated on some types of them. For example, top-10 functions have occupied
    46.32% of the contract calls. Moreover, after verifying the hash values of functions
    with the open-source contracts, we obtain the functions in source code. We then
    have the top-3 functions: “transfer( address,uint256) ”,“balanceOf( add-ress)
    ”, and “transferFrom( address, address, uint256) ”. This result implies that the
    most common contract calls are about tokens, and there might be a great similarity
    among the contracts due to the similar calls.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，智能合约的编译器会使用函数名和参数的哈希值作为函数的入口。换句话说，在以太坊智能合约中，源代码中相同的函数在编译后的合约代码中将有相同的入口。然后我们统计调用合约函数来看哪些函数是最常用的。最常调用的前10个函数的分布如图[2.7](#Fig7)e所示。结果显示，大多数调用函数集中在一些类型上。例如，前10个函数占据了合约调用的46.32%。此外，在验证了开源合约中函数的哈希值后，我们获得了源代码中的函数。然后我们得到了前3个函数：“transfer(
    address,uint256) ”，“balanceOf( add-ress) ”和“transferFrom( address, address, uint256)
    ”。这一结果暗示最常用的合约调用是关于代币的，由于类似的调用，合约之间可能存在很大的相似性。
- en: '2.4.5 Dataset 5: ERC20 Token Transaction'
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.4.5 数据集5：ERC20代币交易
- en: From the above analysis, we observe that the most active smart contracts on
    Ethereum now are the token contracts. We next further investigate the token contracts.
    In order to collect the information of tokens, we process the receipt dataset
    to extract the standard events, which are defined in the standard ERC20 protocol
    of the Ethereum community.^([6](#Fn6)) Additionally, each ERC20 token contains
    basic information like name, symbol, total supply, etc. We then send calls to
    the local Ethereum peers to collect such basic information of ERC20 tokens. As
    shown in Table [2.5](#Tab5), 106,683 smart contracts are considered as ERC20 contracts,
    since they output the events that are defined as the standard ERC20 token transactions.
    There are 227,698,645 ERC20 transactions among 42,146,575 holder addresses. Generally,
    the number of holder addresses could be much larger than that of exact human holders
    because a user may own several addresses. Meanwhile, some token issuers will send
    the tokens to other users without their permissions (also called *token air-drop*
    (van Valkenburgh [2017](#CR40))). Figure [2.8](#Fig8)a shows the transaction count
    distribution for each ERC20 token. We can easily observe the Matthew effect (Merton
    [1968](#CR34)) from Fig. [2.8](#Fig8)a as most of the token transactions happen
    in a few token contracts. Figure [2.8](#Fig8)b presents the word cloud of names
    of ERC20 tokens. It is shown in Fig. [2.8](#Fig8)b that the most common words
    are “Chain,” “Coin,” and “Share,” on which the most ERC20 tokens focus. In addition,
    another common word is “Test,” implying that many ERC20 contracts deployed on
    Ethereum are just for the testing purpose.![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig8_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig8_HTML.png)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的分析中，我们观察到目前以太坊上最活跃的智能合约是代币合约。接下来我们进一步研究代币合约。为了收集代币的信息，我们处理收据数据集以提取标准事件，这些事件是在以太坊社区的标准ERC20协议中定义的。^([6](#Fn6))另外，每个ERC20代币都包含诸如名称、符号、总供应量等基本信息。然后我们将调用发送到本地以太坊对等节点以收集ERC20代币的此类基本信息。如表[2.5](#Tab5)所示，106,683个智能合约被认为是ERC20合约，因为它们输出了定义为标准ERC20代币交易的事件。有227,698,645个ERC20交易涉及42,146,575个持有者地址。通常，持有者地址的数量可能远大于确切的人类持有者数量，因为一个用户可能拥有多个地址。同时，一些代币发行者会在未经用户许可的情况下向其他用户发送代币（也称为*代币空投*（van
    Valkenburgh [2017](#CR40))）。图[2.8](#Fig8)a展示了每个ERC20代币的交易计数分布。从图[2.8](#Fig8)a中我们可以很容易地观察到马太效应（Merton
    [1968](#CR34)），因为大多数代币交易发生在少数代币合约中。图[2.8](#Fig8)b呈现了ERC20代币名称的词云。如图[2.8](#Fig8)b所示，最常见的词汇是“Chain”、“Coin”和“Share”，大多数ERC20代币都关注这些词汇。此外，另一个常见的词汇是“Test”，暗示许多部署在以太坊上的ERC20合约只是为了测试目的。![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig8_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig8_HTML.png)
- en: Fig. 2.8
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.8
- en: Visualization of Dataset 5 (better viewed in color). (**a**) ERC20 popularity
    distribution. (**b**) Word cloud of ERC20 tokens
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集5的可视化（彩色显示更佳）。（**a**）ERC20流行度分布。（**b**）ERC20代币的词云
- en: Table 2.5
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 表2.5
- en: Statistics of Dataset 5
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集5的统计
- en: '| Statistics | Values |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| 统计 | 值 |'
- en: '| --- | --- |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| No. of ERC20 contracts | 106,683 |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| ERC20合约数量 | 106,683 |'
- en: '| No. of ERC20 transactions | 227,698,645 |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| ERC20交易数量 | 227,698,645 |'
- en: '| No. of holder addresses | 42,146,575 |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 持有者地址数量 | 42,146,575 |'
- en: '2.4.6 Dataset 6: ERC721 Token Transaction'
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.4.6 数据集6：ERC721代币交易
- en: ERC721 token is another contract protocol proposed by Ethereum community.^([7](#Fn7))
    Different from ERC20 token, ERC721 token is indivisible. In the contract function,
    the parameter is not the value of token but the token ID. For example, a virtual
    pet in smart contract could be a ERC721 token, which is not separable but can
    be transferred. Table [2.6](#Tab6) presents the statistics of ERC721 contracts.
    We find that 1954 ERC721 contracts contain 7,524,827 token transactions and 414,829
    holder addresses. It is worth mentioning that some of the collected contracts
    do not follow the standard ERC721 protocol exactly. These contracts are also included
    in the dataset since they output the token transferred events in the receipt.
    Figure [2.9](#Fig9)a shows the popularity distribution of ERC721 tokens. Compared
    with ERC20 tokens, the amount of ERC721 tokens is much lower. The major reason
    is that ERC721 applications require much more workloads on visualization at each
    token, consequently improving the development difficulty. We also investigate
    a popular ERC721 token contract called CryptoKitties. It is one of the most famous
    ERC721 token contracts, selling the virtual cats as tokens. Each cat is represented
    as a token in the ERC721 contract. We count the turnover times distributed by
    birth block of the cats, as shown in Fig. [2.9](#Fig9)b. Figure [2.9](#Fig9)b
    also shows that the cats that were born in 4,500,000 to 5,000,000 blocks have
    the higher turnover times than others. At that time, the type of CryptoKitties
    reaches the peak. The time to obtain the peak in Fig. [2.9](#Fig9)b is almost
    the same as that in Fig. [2.4](#Fig4)b and c, implying that the popularity of
    CryptoKitties leads to the congestion of Ethereum.![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig9_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig9_HTML.png)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: ERC721代币是以太坊社区提出的另一种合约协议。^([7](#Fn7)) 与ERC20代币不同，ERC721代币是不可分割的。在合约函数中，参数不是代币的值而是代币ID。例如，智能合约中的虚拟宠物可以是一个ERC721代币，它是不可分离但可以转让的。表[2.6](#Tab6)展示了ERC721合约的统计数据。我们发现，1954个ERC721合约包含7,524,827个代币交易和414,829个持有者地址。值得注意的是，一些收集的合约并不完全遵循标准的ERC721协议。这些合约也包含在数据集中，因为它们在收据中输出了代币转让事件。图[2.9](#Fig9)a展示了ERC721代币的流行度分布。与ERC20代币相比，ERC721代币的总量要少得多。主要原因是ERC721应用在每个代币上需要做更多的工作量，在视觉上进行展示，从而提高了开发难度。我们还研究了一个流行的ERC721代币合约，名为CryptoKitties。它是最著名的ERC721代币合约之一，出售虚拟猫作为代币。每只猫在ERC721合约中代表为一个代币。我们计算了猫的出生区块分布的转手次数，如图[2.9](#Fig9)b所示。图[2.9](#Fig9)b还显示，在4,500,000到5,000,000区块出生的猫具有比其他猫更高的转手次数。那时，CryptoKitties的种类达到了顶峰。图[2.9](#Fig9)b达到顶峰的时间与图[2.4](#Fig4)b和c几乎相同，暗示CryptoKitties的流行导致了以太坊的拥堵。![../images/506524_1_En_2_Chapter/506524_1_En_2_Fig9_HTML.png](../images/506524_1_En_2_Chapter/506524_1_En_2_Fig9_HTML.png)
- en: Fig. 2.9
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.9
- en: Visualization of Dataset 6\. (**a**) ERC721 popularity distribution. (**b**)
    CryptoKitties turnover times
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集6的可视化。（**a**）ERC721流行度分布。（**b**）CryptoKitties转手次数
- en: Table 2.6
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 表2.6
- en: Statistics of Dataset 6
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集6的统计
- en: '| Statistics | Values |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| 统计 | 值 |'
- en: '| --- | --- |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| No. of ERC721 contracts | 1954 |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| ERC721合约数量 | 1954 |'
- en: '| No. of ERC721 transactions | 7,524,827 |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| ERC721交易数量 | 7,524,827 |'
- en: '| No. of holder addresses | 414,829 |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 持有者地址数量 | 414,829 |'
- en: 2.5 Applications of XBlock-ETH
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.5 XBlock-ETH的应用
- en: This section presents applications of the XBlock-ETH framework. As shown in
    Fig. [2.1](#Fig1), the architecture of Ethereum consists of peers, blockchain,
    smart contracts, and tokens. Thus, we also categorize the applications according
    to the top three layers in this architecture. Meanwhile, we also discuss the research
    opportunities in each layer.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 本节展示了XBlock-ETH框架的应用。如图[2.1](#Fig1)所示，以太坊架构包括节点、区块链、智能合约和代币。因此，我们也根据该架构的前三层对这些应用进行了分类。同时，我们还讨论了每一层的研究机会。
- en: 2.5.1 Blockchain System Analysis
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.5.1 区块链系统分析
- en: Since XBlock-ETH processes data from realistic blockchain systems, it can be
    used to support the following applications.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 由于XBlock-ETH处理来自现实区块链系统的数据，因此它可以用来支持以下应用。
- en: 2.5.1.1 Decentralization Analysis
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.5.1.1 去中心化分析
- en: Decentralization is one of the key features of blockchain systems. However,
    there are few studies on the decentralization evaluation of the blockchain systems.
    In particular, the work of Wang et al. ([2019](#CR43)) presents the measurement
    of the mining pool for Bitcoin. Although Gencer et al. ([2018](#CR14)) present
    a measurement study on the decentralization level of Bitcoin and Ethereum, their
    study only considers several metrics such as network bandwidth, mining power,
    and fairness. In contrast, our XBlock-ETH data offers a more comprehensive measurement
    of Ethereum. Moreover, our work can be used to analyze the decentralization of
    users, contract owners, and miners. In addition, our XBlock-ETH can also be used
    to make comparisons with other blockchain systems, such as Bitcoin, EOS, or other
    blockchain systems.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 去中心化是区块链系统的重要特征之一。然而，关于区块链系统去中心化评估的研究很少。特别是，Wang et al. ([2019](#CR43))提出了比特币挖矿池的测量方法。尽管Gencer
    et al. ([2018](#CR14))对比特币和以太坊的去中心化水平进行了测量研究，但他们的研究只考虑了网络带宽、挖矿能力和公平性等几项指标。相比之下，我们的XBlock-ETH数据为以太坊提供了更全面的测量。此外，我们的工作可以用来分析用户、合约所有者和矿工的去中心化。另外，我们的XBlock-ETH也可以用来与其他区块链系统进行比较，如比特币、EOS或其他区块链系统。
- en: 2.5.1.2 Gasprice Prediction
  id: totrans-130
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.5.1.2 气体价格预测
- en: Since the transaction fees are equal to “gasPrice” times “gasUsed”, the users
    can control the “gasUsed” in a reasonably low range to minimize the transaction
    fees charged by miners. Meanwhile, we can learn from Sect. [2.4.1](#Sec11) that
    there is always a gap between the minimum “gasPrice” and the average “gasPrice”
    in a block, leading to the opportunity to save fees. Recent studies such as Other-tech
    (Jin [2018](#CR19)) and Majuri ([2018](#CR30)) analyze the “gasPrice” of Ethereum,
    while several Ethereum websites (e.g., Etherscan (see footnote 5), Etherchain^([8](#Fn8)))
    provide tools to predict the “gasPrice” in a short time. However, those tools
    are essentially *black boxes*, and the accuracy and correctness of them cannot
    be assured. In summary, the prediction of “gasPrice” has great economic value
    such that the user of Ethereum can save the money or shorten waiting time through
    the “gasPrice” prediction while it is worthwhile to conduct an in-depth study
    in the future.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 由于交易费用等于“gasPrice”乘以“gasUsed”，用户可以在合理低的范围内控制“gasUsed”，以最小化矿工收取的交易费用。与此同时，我们可以从第[2.4.1](#Sec11)节了解到，每个区块中的最低“gasPrice”和平均“gasPrice”之间总是存在差距，这提供了节省费用的机会。近期如Other-tech（Jin
    [2018](#CR19)）和Majuri ([2018](#CR30))等研究分析了以太坊的“gasPrice”，而一些以太坊网站（例如，Etherscan（见脚注5），Etherchain^([8](#Fn8)))提供了预测短期“gasPrice”的工具。然而，这些工具本质上都是*黑箱*，它们的准确性和正确性无法得到保证。总之，对“gasPrice”的预测具有很大的经济价值，使得以太坊用户可以通过“gasPrice”预测来节省资金或缩短等待时间，而未来进行深入研究是值得的。
- en: 2.5.1.3 Performance Benchmark
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.5.1.3 性能基准
- en: Performance is crucial to blockchain systems. There are a number of studies
    on blockchain performance optimizations, such as Omniledger (Kokoris-Kogias et
    al. [2018](#CR22)), Algorand (Gilad et al. [2017](#CR15)), and RapidChain (Zamani
    et al. [2018](#CR49)). Meanwhile, some optimized blockchain systems (e.g., Monoxide
    (Wang and Wang [2019](#CR44))) adopt the realistic blockchain transaction data
    to conduct the performance evaluation for blockchain systems. To compare the performance
    of different optimization methods, a common benchmark of real-world use cases
    for blockchain systems is needed. Zheng et al. ([2018a](#CR50)) and BlockBench
    (Dinh et al. [2017](#CR12)) propose performance evaluation tools for blockchain
    systems. The performance benchmark requires simulating the user behaviors and
    obtaining data similar to real-world blockchain systems. In this context, the
    XBlock-ETH framework can be regarded as a benchmark since the source data is generated
    exactly by real-world users.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 性能对区块链系统至关重要。有很多关于区块链性能优化的研究，如Omniledger (Kokoris-Kogias et al. [2018](#CR22))，Algorand
    (Gilad et al. [2017](#CR15))和RapidChain (Zamani et al. [2018](#CR49))。同时，一些优化的区块链系统（例如，Monoxide
    (Wang and Wang [2019](#CR44)))采用了现实世界的区块链交易数据来对区块链系统进行性能评估。为了比较不同优化方法的表现，需要一个针对区块链系统的现实世界用例的通用基准。Zheng
    et al. ([2018a](#CR50))和BlockBench (Dinh et al. [2017](#CR12))提出了针对区块链系统的性能评估工具。性能基准需要模拟用户行为并获取与现实世界区块链系统类似的数据。在这种情况下，XBlock-ETH框架可以被视为一个基准，因为源数据正是由现实世界用户生成的。
- en: 2.5.2 Smart Contract Analysis
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.5.2 智能合约分析
- en: As one of the most popular smart contract platforms, Ethereum has attracted
    a large number of software developers as well as a huge number of smart contracts.
    Therefore, Ethereum has a more active developer community compared with other
    smart contract platforms such as EOS and Tron, which claim to have higher throughput
    and lower latency than Ethereum. Consequently, our XBlock-ETH framework (on top
    of Ethereum) can be used in the studies of smart contracts. We summarize the potential
    applications of XBlock-ETH as follows.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最受欢迎的智能合约平台之一，以太坊吸引了许多软件开发者以及大量的智能合约。因此，与EOS和Tron等其他声称比以太坊具有更高的吞吐量和更低的延迟的智能合约平台相比，以太坊有一个更加活跃的开发者社区。因此，我们的XBlock-ETH框架（基于以太坊）可以用于智能合约的研究。我们总结了XBlock-ETH的潜在应用如下。
- en: 2.5.2.1 Contract Similarity and Recommendation
  id: totrans-136
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.5.2.1 合约相似性与推荐
- en: As indicated in Sect. [2.4](#Sec10), there is a great similarity between the
    smart contract codes and the call of smart contracts. Code similarity evaluation
    is a traditional research topic in software engineering as a number of studies
    concentrate on code similarity detection (Chilowicz et al. [2009](#CR10); Luo
    et al. [2014](#CR27)). Several recent studies focus on the similarity analysis
    of smart contracts. In particular, Etherscan (see footnote 5) provides the query
    system based on similar contracts. Finding similar contracts is beneficial to
    developers while developing new contracts. For example, developers can estimate
    user behaviors before publishing the contract. Meanwhile, Huang et al. ([2019](#CR17))
    propose the method to recommend differentiated codes to update smart contracts
    based on the existing codes of smart contracts. In addition, in the aspect of
    users, recommending similar smart contracts will help users to find the contracts
    suitable for themselves. The details of contract similarity and recommendation
    would be discussed in Chap. [4](506524_1_En_4_Chapter.xhtml).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 正如[2.4](#Sec10)节所指出的，智能合约代码与智能合约的调用之间存在很大的相似性。代码相似性评估是软件工程中的一个传统研究课题，因为许多研究集中于代码相似性检测（Chilowicz等人[2009](#CR10);
    Luo等人[2014](#CR27)）。一些近期研究关注智能合约的相似性分析。特别是，Etherscan（见脚注5）提供了基于相似合约的查询系统。寻找相似合约对开发者开发新合约是有益的。例如，开发者可以在发布合约之前预测用户行为。同时，黄等人([2019](#CR17))提出了根据智能合约现有代码推荐不同代码以更新智能合约的方法。此外，从用户角度来看，推荐相似的智能合约将帮助用户找到适合自己的合约。合约相似性与推荐的具体内容将在第[4](506524_1_En_4_Chapter.xhtml)章讨论。
- en: 2.5.2.2 Contract Developer Analysis
  id: totrans-138
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.5.2.2 合约开发者分析
- en: Developer analysis which is another traditional research topic in software engineering
    includes developer network analysis (Meneely et al. [2008](#CR32)), behavior analysis
    (Layman et al. [2007](#CR25)), fault prediction (Weyuker et al. [2007](#CR45)),
    and so on. With respect to developer analysis, XBlock-ETH also includes a large
    network of smart contract developers. For example, there some on-chain libraries
    deployed and provided by different developers; these libraries can be invoked
    by others. Each developer can be identified by his/her own Ethereum address. Thus,
    the contract calling network can also be regarded as the collaboration network
    of contract developers. The network and structure of developer collaboration may
    inform us about the reliability of the contract codes. For example, the developer
    who develops a smart contract with vulnerabilities will have a higher risk of
    developing new contracts with vulnerabilities than others. In this sense, our
    XBlock-ETH can be beneficial to the developer analysis after analyzing the smart
    contracts of developers.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者分析是软件工程中的另一个传统研究课题，包括开发者网络分析（Meneely等人[2008](#CR32)）、行为分析（Layman等人[2007](#CR25)）、故障预测（Weyuker等人[2007](#CR45)）等。关于开发者分析，XBlock-ETH也包括了大量的智能合约开发者网络。例如，有一些由不同开发者部署和提供的链上库；其他人可以调用这些库。每个开发者都可以通过他/她自己的以太坊地址来识别。因此，合约调用网络也可以被视为合约开发者的协作网络。开发者协作的网络和结构可能会告诉我们关于合约代码的可靠性。例如，开发具有漏洞的智能合约的开发者比其他人更有可能开发带有漏洞的新合约。从这个意义上说，我们的XBlock-ETH在分析开发者的智能合约之后，可以对开发者分析有益。
- en: 2.5.2.3 Contract Vulnerability Detection
  id: totrans-140
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.5.2.3 合约漏洞检测
- en: Blockchain security and privacy have drawn extensive attention recently (Su
    et al. [2020](#CR37); Xu et al. [2019](#CR46), [2020a](#CR47),[b](#CR48)). The
    security of smart contracts has been a hot research topic in the blockchain research
    community. In particular, the vulnerability of smart contracts has attracted extra
    attention. A number of malicious attacks on Ethereum (e.g., TheDAO attack) have
    already resulted in a huge loss (in terms of millions of dollars) (Mehar et al.
    [2019](#CR31)). To prevent smart contracts from malicious attacks, the vulnerability
    detection on contracts is a critical step. There are some recent attempts in vulnerability
    detection. For example, Oyente (Luu et al. [2016](#CR28)), Zeus (Kalra et al.
    [2018](#CR20)), teEther (Krupp and Rossow [2018](#CR23)), S-gram (Liu et al. [2018](#CR26)),
    and ContractFuzzer (Jiang et al. [2018](#CR18)) propose the tools of vulnerability
    detection on smart contracts. In some cases, the vulnerability detection methods
    of smart contracts can be inspired and motivated by traditional software vulnerability
    detection methods as they are essentially equivalent to the verification of the
    codes. In this aspect, several studies focus on verifying contract codes on blockchains;
    these contract codes are also called “bytecode” or “opcode”. Our XBlock-ETH that
    essentially includes the data of contract codes can be applied to contract vulnerability
    detection.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链安全和隐私近期引起了广泛关注（Su等人[2020](#CR37)；Xu等人[2019](#CR46)，[2020a](#CR47)，[b](#CR48)）。智能合约的安全性一直是区块链研究社区中的热门研究课题。特别是，智能合约的漏洞引起了额外的关注。许多针对以太坊的恶意攻击（例如，TheDAO攻击）已经导致了巨大的损失（高达数百万美元）（Mehar等人[2019](#CR31)）。为了防止智能合约受到恶意攻击，对合约进行漏洞检测是一个关键步骤。在漏洞检测方面有一些最新的尝试。例如，Oyente（Luu等人[2016](#CR28)）、Zeus（Kalra等人[2018](#CR20)）、teEther（Krupp和Rossow[2018](#CR23)）、S-gram（Liu等人[2018](#CR26)）和ContractFuzzer（Jiang等人[2018](#CR18)）提出了智能合约漏洞检测工具。在某些情况下，智能合约的漏洞检测方法可以借鉴和启发传统软件漏洞检测方法，因为它们本质上等同于代码的验证。在这方面，一些研究专注于验证区块链上的合约代码；这些合约代码也被称为“字节码”或“操作码”。我们的XBlock-ETH本质上包括了合约代码的数据，可以应用于合约漏洞检测。
- en: 2.5.2.4 Fraud Detection
  id: totrans-142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.5.2.4 欺诈检测
- en: Due to the huge economic value and the popularity of smart contracts, smart
    contracts can be exploited by malicious users as scams. For example, crowd-funding
    contracts with a promised huge return to attract victims for investment. It is
    reported in Chen et al. ([2018b](#CR8)) that Ponzi scam contracts can defraud
    others’ cryptocurrencies. Several approaches (Bartoletti et al. [2020](#CR2);
    Chen et al. [2018b](#CR8), [2019](#CR9); Torres et al. [2019](#CR39)) have been
    proposed to detect the fraud contracts on Ethereum. Most of the methods are mainly
    based on the codes and transaction records of smart contracts while they are included
    in XBlock-ETH data. Thus, XBlock-ETH data can be further leveraged in fraud detection.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 由于巨大的经济价值和智能合约的普及，智能合约可能会被恶意用户用作骗局。例如，承诺高回报以吸引受害者投资的众筹合约。据Chen等人[2018b](#CR8)报道，庞氏骗局合约可以诈骗他人的加密货币。已经提出了几种方法（Bartoletti等人[2020](#CR2)；Chen等人[2018b](#CR8)，[2019](#CR9)；Torres等人[2019](#CR39)）来检测以太坊上的欺诈合约。大多数方法主要基于智能合约的代码和交易记录，而这些都包含在XBlock-ETH数据中。因此，XBlock-ETH数据可以在欺诈检测中进一步利用。
- en: 2.5.3 Cryptocurrency Analysis
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.5.3 加密货币分析
- en: Blockchain-based cryptocurrency has become a hot topic in recent years due to
    decentralization and the reduced cost. There are a large number of cryptocurrencies
    in Ethereum, including the Ether, ERC20 tokens, and ERC721 tokens. It is shown
    in the CoinMarketCap^([9](#Fn9)) that more than 2000 kinds of tokens can be used
    in third-party exchange. Therefore, cryptocurrency analysis based on blockchain
    data can bring huge financial values. We roughly categorize the cryptocurrency
    analysis into cryptocurrency transferring analysis, cryptocurrency price analysis,
    and fake user detection, which are explained as follows.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 基于区块链的加密货币近年来由于其去中心化和成本降低而成为一个热门话题。在以太坊中有大量的加密货币，包括以太币、ERC20代币和ERC721代币。据CoinMarketCap^([9](#Fn9))显示，超过2000种代币可以在第三方交易所使用。因此，基于区块链数据的加密货币分析可以带来巨大的经济价值。我们将加密货币分析大致分为加密货币转移分析、加密货币价格分析和虚假用户检测，如下所述。
- en: 2.5.3.1 Cryptocurrency Transferring Analysis
  id: totrans-146
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.5.3.1 加密货币转移分析
- en: Analysis of cryptocurrency transactions is a preliminary step to conduct cryptocurrency
    transferring analysis. Regarding Ether transferring, Chen et al. ([2018a](#CR7))
    propose the graph analysis on Ether transactions and derive some insights from
    graph analysis. With regard to ERC20/ERC721 tokens, Victor and Lüders ([2019](#CR42))
    and Somin et al. ([2018](#CR36)) propose the analysis of the token trading network.
    After the analysis of cryptocurrency transactions, further analysis of user behaviors
    can be done. For example, the users of tokens may form different communities.
    The community discovery can be conducted through analyzing cryptocurrency transactions.
    Moreover, the anonymity of blockchain-based cryptocurrency can result in money-laundering
    behaviors, which can be essentially identified and detected via cryptocurrency
    transaction analysis. Our XBlock-ETH data offers potential solutions to these
    issues.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 加密货币交易的分析是进行加密货币转账分析的初步步骤。关于以太币转账，Chen等人([2018a](#CR7))对以太币交易进行了图分析，并从图分析中得出了一些洞见。关于ERC20/ERC721代币，Victor和Lüders([2019](#CR42))以及Somin等人([2018](#CR36))提出了代币交易网络的分析。在加密货币交易分析之后，可以进一步分析用户行为。例如，代币用户可能形成不同的社区。可以通过分析加密货币交易来开展社区发现。此外，基于区块链的加密货币的匿名性可能导致洗钱行为，这可以通过加密货币交易分析本质上进行识别和检测。我们的XBlock-ETH数据为解决这些问题提供了潜在解决方案。
- en: 2.5.3.2 Cryptocurrency Price Analysis
  id: totrans-148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.5.3.2 加密货币价格分析
- en: 'The price of blockchain-based cryptocurrencies has been affected by multiple
    different factors, such as government policies, technology innovations, social
    sentiment, and business activities. Several recent studies focus on the price
    analysis and prediction of cryptocurrencies (Abraham et al. [2018](#CR1); Lamon
    et al. [2017](#CR24); Mensi et al. [2019](#CR33)). The typical cryptocurrency
    price analysis consists of three steps: (1) collect price data from the cryptocurrency
    exchanges, (2) identify the relevance between cryptocurrency prices and other
    factors, (3) forecast the future prices and predict the potential profits. However,
    the price of cryptocurrencies can sometimes be maliciously controlled by some
    parties. Thus, the data cleaning process is necessary to obtain accurate and normal
    cryptocurrency price data. Some of the cryptocurrency price data is stored in
    the decentralized exchange contracts, which can be used for cryptocurrency price
    analysis, while the raw data may require further preprocess to benefit future
    analysis.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链加密货币的价格受到多种不同因素的影响，比如政府政策、技术革新、社会情绪和商业活动。最近的一些研究聚焦于加密货币价格分析和预测（Abraham等人[2018](#CR1)；Lamon等人[2017](#CR24)；Mensi等人[2019](#CR33)）。典型的加密货币价格分析包括三个步骤：（1）从加密货币交易所收集价格数据，（2）确定加密货币价格与其他因素的相关性，（3）预测未来价格和潜在利润。然而，有时加密货币的价格可能被某些方面恶意控制。因此，进行数据清洗以获得准确和正常的加密货币价格数据是必要的。一些加密货币价格数据存储在去中心化交易所合约中，可用于加密货币价格分析，而原始数据可能需要进一步预处理以便于未来的分析。
- en: 2.5.3.3 Fake User Detection
  id: totrans-150
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.5.3.3 虚假用户检测
- en: Fake user detection (Cao et al. [2012](#CR5); Ferrara et al. [2016](#CR13);
    Varol et al. [2017](#CR41)) is a traditional research topic in social networks.
    The cryptocurrency users in blockchain systems also form social-network-like communities,
    in which there are also some fake users controlled by the developers to improve
    the DApps activity rankings. Because the DApp (or cryptocurrency) ranking is based
    on some metrics related to the user activities, such as Daily Active Users (DAU).
    Therefore, many developers exploit the loophole to fabricate some fake users to
    improve activities so as to gain higher rankings. Although some DApp websites,
    such as DAppReview^([10](#Fn10)) mark the cryptocurrencies with fake users, this
    kind of fake user detection is almost done in a black box or manually. In addition,
    there are few studies on fake user detection on cryptocurrency. The permission-less
    blockchain systems which are often free of charge may advocate more frequent fake
    user activities than permissioned blockchain systems. Our XBlock-ETH will be further
    improved to support fake user detection in the future.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 假用户检测（Cao 等人的研究 [2012](#CR5)；Ferrara 等人的研究 [2016](#CR13)；Varol 等人的研究 [2017](#CR41)）是社交网络中的一个传统研究课题。在区块链系统中，加密货币用户也形成了类似社交网络的社区，在这些社区中，开发者控制的一些假用户为了提高
    DApps 的活动排名。由于 DApp（或加密货币）的排名是基于与用户活动相关的某些指标，比如日活跃用户（DAU）。因此，许多开发者利用这个漏洞制造一些假用户来提高活动水平，以获得更高的排名。尽管一些
    DApp 网站，如 DAppReview（参阅文献 [10](#Fn10)）会标记有假用户的加密货币，但这种假用户检测几乎是在黑盒中或手动完成的。此外，关于加密货币的假用户检测的研究很少。通常免费使用的无需授权的区块链系统可能会倡导比需要授权的区块链系统更频繁的假用户活动。我们的
    XBlock-ETH 将来会进一步改进以支持假用户检测。
- en: 2.6 Summary
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.6 总结
- en: 'This chapter introduces a well-processed up-to-date on-chain dataset of Ethereum,
    namely XBlock-ETH, which includes the data of the Ethereum blockchain, smart contracts,
    and cryptocurrencies. Moreover, comprehensive statistics and exploration of the
    datasets are presented. The XBlock-ETH datasets have been released on the XBlock.pro
    website. Furthermore, the research opportunities of the XBlock-ETH datasets are
    also outlined. Our XBlock-ETH is promising to promote the studies on Ethereum.
    The future improvements are listed as following: **(1) More features:** The exploration
    of the basic features of the datasets is given in this chapter. Ethereum is a
    complex ecosystem that includes decentralized finance, stable coin, and so on.
    More features of the Ethereum data will be explored in the future. **(2) Extra
    off-chain data from Ethereum:** The off-chain data is also important since it
    provides information about the off-chain behaviors of both developers and users.
    In the future, the off-chain data will be collected. **(3) Joint data analysis
    with other blockchain systems:** There are some other blockchain systems that
    have also attracted a large number of users and developers. The joint data analysis
    of Ethereum and other permissionless blockchains will be conducted in the future.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了经过精心处理的最新以太坊链上数据集，即 XBlock-ETH，它包括以太坊区块链、智能合约和加密货币的数据。此外，还展示了数据集的全面统计和探索。XBlock-ETH
    数据集已在 XBlock.pro 网站上发布。此外，还概述了 XBlock-ETH 数据集的研究机会。我们的 XBlock-ETH 有望促进以太坊的研究。未来的改进如下：**(1)
    更多特性：** 本章给出了数据集基本特性的探索。以太坊是一个复杂的生态系统，包括去中心化金融、稳定币等。将来会探索更多以太坊数据的特性和**(2) 从以太坊获取额外的链下数据：**
    由于链下数据提供了关于开发者和用户链下行为的宝贵信息，因此它也很重要。将来，将收集链下数据。**(3) 与其他区块链系统联合数据分析：** 还有一些其他吸引了大量用户和开发者的区块链系统。将来会进行以太坊和其他无需授权的区块链系统的联合数据分析。
