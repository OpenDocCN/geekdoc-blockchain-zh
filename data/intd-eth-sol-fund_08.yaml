- en: © Chris Dannen 2017Chris DannenIntroducing Ethereum and Solidity10.1007/978-1-4842-2535-6_8
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © Chris Dannen 2017Chris DannenIntroducing Ethereum and Solidity10.1007/978-1-4842-2535-6_8
- en: 8. Dapp Deployment
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8. Dapp 部署
- en: 'As you’ll see, deploying dapps is an adventure in the frontier of a new computing
    paradigmChris Dannen^(1 )(1)Brooklyn, New York, USAA distributed application,
    or dapp, shares some of the same ideals as the rest of the EVM protocol: the promise
    immutability. Dapps are composed of smart contracts that, as noted many times
    in this book, are executed by all nodes on the Ethereum network at approximately
    the same time.Dapps in practice are like universally available web services running
    on the EVM, but made accessible to users via a normal HTML/CSS/JavaScript front
    end that they can access through their web browser or a smartphone application,
    or an Ethereum browser such as Mist.NoteThis chapter tackles topics aimed at developers
    with preexisting skills. If you’re a new coder, read this chapter thoroughly along
    with Chapter [9](A433414_1_En_9_Chapter.html). Then, pick up a JavaScript beginner
    book to improve your scripting skills. Next, visit [http://solidity.eth.guide](http://solidity.eth.guide)
    for more Solidity language tutorials.Running blockchain-based application clients
    is far easier than managing clients in a cloud-hosted paradigm. Hub-and-spoke
    web applications scale vertically, reflecting the individual servers they run
    on. In contrast, an Ethereum application scales horizontally—the way you’d want
    a cloud application to scale.Although it’s true that today cryptonetworks are
    significantly constrained in terms of transaction processing power, they will
    get faster as other components of the protocol mature.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你将看到的那样，部署 dapps 是一次冒险，探索着新的计算范式的前沿。Chris Dannen^(1 )(1)美国纽约布鲁克林分布式应用程序，或
    dapp，与 EVM 协议的其他部分分享着一些相同的理想：不可变性的承诺。Dapps 由智能合约组成，在本书中已经多次指出，它们由以太坊网络上的所有节点在大约相同的时间执行。实际上，dapps
    就像在 EVM 上运行的普遍可用的 Web 服务，但通过用户可以通过他们的网络浏览器或智能手机应用程序，或者类似 Mist 的以太坊浏览器的普通 HTML/CSS/JavaScript
    前端访问的。注意：本章针对具有预先存在技能的开发人员。如果你是一个新手编码人员，请仔细阅读本章和第[9](A433414_1_En_9_Chapter.html)章。然后，拿起一本
    JavaScript 初学者书籍，提高你的脚本技能。接下来，访问 [http://solidity.eth.guide](http://solidity.eth.guide)
    获取更多 Solidity 语言教程。运行基于区块链的应用程序客户端远比在云托管范式中管理客户端容易得多。枢纽-辐条式 Web 应用程序按垂直方向扩展，反映了它们运行的单个服务器。相比之下，以太坊应用程序水平扩展
    - 就像你希望云应用程序扩展的方式。虽然今天加密网络在交易处理能力方面受到了明显的限制，但随着协议的其他组件成熟，它们将变得更快。
- en: Seven Ways to Think About Smart Contracts
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 七种思考智能合约的方式
- en: 'Behind every dapp is a series of smart contracts. Smart contracts are useful
    in these scenarios, which may make fun problem areas for prototyping:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个 dapp 的背后都有一系列智能合约。智能合约在这些场景中非常有用，这些场景可能是原型设计的有趣问题领域：
- en: Maintain an accounting system for something in the real world, or for other
    contracts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为现实世界中的某物或其他合同维护一个会计系统
- en: Create forwarding contracts, such as a savings account that resends income to
    a separate bucket automatically
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建转发合同，例如将收入自动转发到一个单独的桶的储蓄账户
- en: Manage a relationship between several parties, such as a freelancer agreement
    or payroll
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理几方之间的关系，例如自由职业者协议或工资单
- en: Act as a software library for other contracts
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为其他合同的软件库
- en: Act as controllers for other systems or sets of contracts
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 充当其他系统或一组合同的控制器
- en: Serve as application-specific logic for a communal web service
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为公共网络服务提供应用程序特定的逻辑
- en: Serve as a utility that developers can use on a single-serving basis, such as
    a random number generator
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 充当开发人员可以按需使用的实用程序，例如随机数生成器
- en: Dapp development brings with it all sorts of new concerns for application developers,
    as well as an understanding of the Web3 JavaScript API and the Solidity programming
    language. Hopefully, you feel prepared to work with these tools directly after
    reading most of this book!To get a better idea of the kinds of dapps being built
    today, check out [http://dapps.ethercasts.com](http://dapps.ethercasts.com) ,
    operated by EtherCasts.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Dapp 开发对应用程序开发者带来各种新的关注点，同时需要了解 Web3 JavaScript API 和 Solidity 编程语言。希望在阅读完本书大部分内容后，您感到准备就绪，可以直接使用这些工具进行工作！要更好地了解今天正在构建的各种
    dapps，可以查看由 EtherCasts 经营的 [http://dapps.ethercasts.com](http://dapps.ethercasts.com)
    。
- en: Dapp Contract Data Models
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Dapp 合同数据模型
- en: 'The first thing you’ll need to know to deploy a working contract is what kind
    of data you can store in the EVM, and where you’re storing it.As we discussed
    in prior chapters, every contract address in the Ethereum network has storage
    space for its smart contracts. This storage space has no limit, except what you’re
    willing to pay. As of this writing, storage space costs about $0.018 per kilobyte.The
    Solidity language makes it easy to use contracts as little relational databases.
    To make this easier, the Solidity language has two familiar data types we haven’t
    mentioned yet:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署一个工作合同，您首先需要知道的是可以在 EVM 中存储哪些类型的数据，以及您在哪里存储这些数据。正如我们在之前的章节中讨论过的，以太坊网络中的每个合同地址都有其智能合约的存储空间。这个存储空间没有限制，除非是您愿意支付的限制。截至撰写本文时，存储空间的成本约为每千字节
    0.018 美元。Solidity 语言使得使用合同作为小型关系数据库变得容易。为了更加简便，Solidity 语言有两种熟悉的数据类型我们还没有提到：
- en: Mappings
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射
- en: Structs
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构体
- en: To learn more about using these types in Solidity, consult [http://solidity.eth.guide](http://solidity.eth.guide)
    .At its most basic, a contract’s individual storage space is a key/value store
    with 2256 possible keys and the same number of values. That’s enough space for
    pretty much any kind of database structure you feel like creating.NoteRecall that
    object attributes are sometimes referred to by developers as keys, as in the phrase
    key/value pair or key/value store. In our human example, a key/value pair might
    be footSize = 11. A table containing everyone’s foot size on a dedicated server
    is an example of a key/value store. As a stateful transaction machine, you can
    think of the entire EVM as a giant key/value store that shows account balances.Hopefully
    by now, you are already picturing the kinds of simple data structures you could
    create and use in Solidity contracts. In the next section, we’ll begin breaking
    down distributed app architecture.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于在 Solidity 中使用这些类型的信息，请参阅 [http://solidity.eth.guide](http://solidity.eth.guide)
    。在最基本的情况下，合约的个体存储空间是一个具有 2256 个可能键和相同数量值的键/值存储空间。这足够存储几乎任何类型的数据库结构。请记住，对象属性有时被开发者称为键，如键/值对或键/值存储的短语中所示。在我们的人类示例中，键/值对可能是
    footSize = 11。一个包含每个人脚尺寸的表格位于专用服务器上是键/值存储的示例。作为一个有状态的交易机器，你可以把整个 EVM 想象成一个巨大的键/值存储，显示账户余额。希望到现在为止，你已经想象出了在
    Solidity 合约中可以创建和使用的简单数据结构的种类。在下一节中，我们将开始分解分布式应用程序架构。
- en: How an EVM Back End Talks to a JS Front End
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**EVM 后端如何与 JS 前端通信**'
- en: The gap between the Ethereum network and what might be called the HTTP network,
    otherwise known as the Web, can indeed be traversed. Let’s say a customer enters
    a lunch order on a dapp-powered web site from a conventional web browser. In order
    to successfully pass data about her order (how many milkshakes?) between her browser
    and the EVM, the dapp’s front end must “send” the data to the EVM in a certain
    format.NoteDapps may not require their own set of contracts; instead, they may
    be able to call certain public functions in other contracts to make use of their
    functionality. For every function declared public in a smart contract, Solidity
    automatically creates an accessor function so that other contracts can call it.In
    computing, data-interchange formats work much like the international postal service.
    Although different servers around the world may be running different operating
    systems, written in different languages, by totally different minds, they must
    at some point exchange data with a server that is not like them.To get the “translation”
    correct, programmers engineer their programs to send information to other programs
    in a certain notations. Usually, the notation describes a format for an entire
    object (defined in Chapter [1](A433414_1_En_1_Chapter.html) as a set of attributes
    and values). For example, a human data object might include height, weight, eye
    color, foot size, and so on.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊网络与可以称为 HTTP 网络的网络之间的差距确实可以被跨越。假设一个顾客在一个由 dapp 驱动的网站上用传统的 web 浏览器输入午餐订单。为了成功地在她的浏览器和
    EVM 之间传递关于她订单的数据（多少杯奶昔？），dapp 的前端必须以一定的格式“发送”数据给 EVM。备注：Dapps 可能不需要它们自己的一套合同；相反，它们可能能够调用其他合同中的某些公共函数来利用它们的功能。对于在智能合约中声明为
    public 的每个函数，Solidity 自动创建一个访问函数，以便其他合同可以调用它。在计算中，数据交换格式的工作方式类似于国际邮政服务。尽管世界各地的不同服务器可能运行着不同的操作系统，用不同的语言编写，由完全不同的思想编写，但它们必须在某个时候与不像它们的服务器交换数据。为了正确地“翻译”，程序员们设计他们的程序以用某种符号向其他程序发送信息。通常，符号描述了一个对象的整个格式（在第
    [1](A433414_1_En_1_Chapter.html) 章中定义为一组属性和值）。例如，一个人的数据对象可能包括身高、体重、眼睛颜色、脚大小等等。
- en: JSON-RPC
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JSON-RPC
- en: 'In today’s web applications, JavaScript code can pass information across the
    Web by using a common object notation called JavaScript Object Notation (JSON)
    . JSON objects can contain numbers, strings, and ordered sequences of values for
    certain attributes.There are two important data objects in Web3.js, which are
    roughly equivalent to JSON in the way they are passed between the front and back
    ends of an Ethereum-powered application. They are called JSON-RPC objects and
    they come with the Web3.js library. Installation of Web3.js is covered below.
    These two objects are used in the following ways:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天的 Web 应用程序中，JavaScript 代码可以通过一种称为 JavaScript 对象表示法（JSON）的通用对象表示法在网络上传递信息。JSON
    对象可以包含数字、字符串和某些属性的有序值序列。在 Web3.js 中有两个重要的数据对象，它们在某种程度上相当于 JSON，因为它们在以太坊应用程序的前端和后端之间传递。它们被称为
    JSON-RPC 对象，并随 Web3.js 库一起提供。Web3.js 的安装将在下面介绍。这两个对象的用法如下：
- en: web3.eth is used specifically for blockchain interactions.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: web3.eth 专门用于区块链交互。
- en: web3.shh is used specifically for Whisper interactions.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: web3.shh 专门用于 Whisper 交互。
- en: Whisper is a private messaging protocol that is itself a part of the larger
    Ethereum protocol. You’ll learn more about Whisper and its place on the roadmap
    in Chapter [11](A433414_1_En_11_Chapter.html).In motion, you can think of JSON-RPC
    objects as passing back and forth constantly between the front end (on the HTTP
    Web) and the back end (the Ethereum Web).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Whisper 是一个私密消息传递协议，它本身是较大的以太坊协议的一部分。在运行时，你可以将 JSON-RPC 对象想象为在前端（在 HTTP Web
    上）和后端（以太坊 Web）之间不断传递。
- en: Web 3 Is Here (Almost)
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web 3 就在这里（几乎）
- en: 'The JavaScript library called Web3.js is part of the new Web 3 specification.
    You can find the GitHub page for the Web 3 project at [https://github.com/ethereum/web3.js/](https://github.com/ethereum/web3.js/)
    .Web 3 is a general term for the decentralized web, just as Web 2 was defined
    by web-hosted applications and services. Web 1 refers to the original World Wide
    Web, which hosted static pages. Ever since, the Hypertext Transfer Protocol has
    been evolving to add more methods and to support ever more sophisticated content
    and scripts.Web 3 is very much a vision that centers on the Ethereum protocol
    in particular. It is generally considered to have three components:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 库 Web3.js 是新 Web 3 规范的一部分。你可以在 [https://github.com/ethereum/web3.js/](https://github.com/ethereum/web3.js/)
    找到 Web 3 项目的 GitHub 页面。Web 3 是分散式网络的通用术语，就像 Web 2 是由网络托管的应用程序和服务定义的一样。Web 1 指的是最初的万维网，它托管了静态页面。从那时起，超文本传输协议一直在发展，以添加更多方法并支持越来越复杂的内容和脚本。Web
    3 很大程度上是以以太坊协议为中心的愿景。它通常被认为有三个组成部分：
- en: Peer-to-peer identity and messaging system
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点对点身份验证和消息系统
- en: Shared state (a blockchain)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享状态（区块链）
- en: Decentralized file storage
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分散式文件存储
- en: 'The first two check boxes are complete: the Ethereum network is up and running,
    and transactions work! The third leg on the stool, decentralized file storage,
    is part of the Swarm project, which you’ll learn more about in Chapter [11](A433414_1_En_11_Chapter.html).In
    the Web 3 paradigm, there are no web servers. There are no caches, reverse proxies,
    load balancers, content delivery networks (CDNs), or other vestiges of legacy
    large-scale web application deployment. Even decentralized domain name servers
    (DNS) will be free. When Swarm storage comes online, it will be cheap, just like
    Ethereum’s web-hosting component.For developers and hackers of all types, Web
    3 blows up the “freemium” application deployment model, in which more and more
    users and scale bring you higher and higher hosting bills. In the EVM, you can
    control your costs by writing efficient code, and you can count on anyone on Earth
    being able to access your application from day one.Let’s zoom back into the specifics
    of dapp development and see how the Web we know today talks to the EVM.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个复选框已完成：以太坊网络已经运行，并且交易可行！凳子的第三条腿，去中心化文件存储，是 Swarm 项目的一部分，你将在[第 11 章](A433414_1_En_11_Chapter.html)中了解更多相关内容。在
    Web 3 的范式中，没有 Web 服务器。没有缓存、反向代理、负载均衡器、内容分发网络（CDN）或其他传统大规模 Web 应用部署的残留。甚至去中心化域名服务器（DNS）也将是免费的。当
    Swarm 存储上线时，它将变得廉价，就像以太坊的 Web 托管组件一样。对于所有类型的开发人员和黑客来说，Web 3 打破了“免费增值”应用部署模式，其中越来越多的用户和规模会给你带来越来越高的托管账单。在
    EVM 中，你可以通过编写高效的代码来控制成本，并且你可以确保地球上的任何人都能在第一天就访问你的应用程序。让我们回到 Dapp 开发的具体细节，看看今天的
    Web 如何与 EVM 进行通信。
- en: Experimenting with the JavaScript API
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 JavaScript API 进行实验
- en: In Chapter [6](A433414_1_En_6_Chapter.html), you saw how easy it is to interact
    with the EVM by typing commands into the JavaScript console in Geth. When you’re
    doing this, you’re really just calling individual JavaScript methods that come
    with the Ethereum JavaScript API. These JavaScript methods you type into the Geth
    console are being interpreted by a JIT-like JavaScript interpreter that is unique
    to Geth. This is called interactive use of the JSRE, or using it in interactive
    mode.However, the Ethereum JavaScript API methods can also be exposed to normal
    web applications, allowing them to talk to the EVM.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 6 章](A433414_1_En_6_Chapter.html)中，你看到通过在 Geth 的 JavaScript 控制台中输入命令与 EVM
    交互是多么容易。当你这样做时，实际上是在调用以太坊 JavaScript API 中附带的个别 JavaScript 方法。你在 Geth 控制台中输入的这些
    JavaScript 方法正在被一种专属于 Geth 的 JIT-like JavaScript 解释器解释。这被称为 JSRE 的交互使用，或在交互模式下使用它。然而，以太坊
    JavaScript API 方法也可以暴露给普通的 Web 应用程序，使它们能够与 EVM 进行通信。
- en: Using Geth for Dapp Deployment
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Geth 进行 Dapp 部署
- en: 'Although other Ethereum clients are popular, Geth (which is written in the
    Go language developed at Google) and its easy-breezy interpretations of JavaScript
    make it the quickest way to connect a front-end web application on the traditional
    HTTP Web with a back-end EVM contract.Because these are JavaScript methods being
    interpreted by Geth into EVM code, it’s possible to string them together into
    scripts, which of course is the natural use for JavaScript in the first place.
    This is referred to as using it noninteractively .NoteNoninteractive use of the
    JavaScript API is the whole reason for what we call computer programming. This
    is, generally speaking, the goal of programming, or writing a program: to automate
    what would be otherwise manual commands typed into the terminal, like the ones
    you typed to install Geth. When performing complex computations or building analytical
    models, these strings of instructions can get long and tiresome.By writing strings
    of instructions in a plain-text file, the programmer can make a program condensed,
    quick, efficient, and repeatable.Another goal of programming is to separate the
    tasks a human operator would be entering, and do them concurrently in threads,
    so the whole job takes less time. As you saw with Geth when it first started up,
    you couldn’t do anything with that command-line window while it was synchronizing,
    and indeed that thread would not stop as long as Geth was running.By building
    a console on top of Geth, the Ethcore developers have allowed you, the operator
    of the console, to issue commands while Geth is synchronizing in the background,
    in another thread on your local machine.Next, you’ll learn about ideal web development
    frameworks for connecting to the EVM as a back end.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管其他以太坊客户端很受欢迎，但 Geth（用 Go 语言编写，由 Google 开发）及其对 JavaScript 的轻松解释使其成为将传统的 HTTP
    Web 前端 Web 应用程序与后端 EVM 合约连接起来的最快方法。因为这些是由 Geth 解释为 EVM 代码的 JavaScript 方法，所以可以将它们串联成脚本，这当然是
    JavaScript 的自然用法。这被称为非交互式使用。注意：JavaScript API 的非交互式使用是我们称之为计算机编程的整个原因。一般来说，编程的目标是自动化否则需要手动在终端输入的命令，就像您输入安装
    Geth 的命令一样。在进行复杂计算或构建分析模型时，这些指令字符串可能会变得又长又繁琐。通过在纯文本文件中编写指令字符串，程序员可以使程序简洁、快速、高效且可重复。编程的另一个目标是将人类操作员输入的任务分离，并以线程的方式同时执行，以便整个作业所需时间更少。正如您在
    Geth 刚启动时看到的那样，只要 Geth 在运行，您就无法在命令行窗口中执行任何操作，而且该线程将一直运行下去。通过在 Geth 之上构建一个控制台，Ethcore
    开发人员允许您，控制台的操作员，在后台同步 Geth 的同时发出命令，在本地机器的另一个线程上执行。接下来，您将了解连接到 EVM 作为后端的理想 Web
    开发框架。
- en: Using Meteor with the EVM
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Meteor 与 EVM
- en: 'If you’re a JavaScript developer, you may have heard about Meteor.js, a library
    that lets you write reactive web applications that run symmetrical code on the
    server and client.This full-stack framework is excellent for real-time web applications,
    but is useful for Ethereum front-end development because it is so well suited
    to writing single-page applications, or SPAs .Here’s why so many Ethereum developers
    love Meteor:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是 JavaScript 开发人员，则可能已经听说过 Meteor.js，这是一个允许您编写反应式 Web 应用程序的库，该应用程序在服务器和客户端上运行对称代码。这个全栈框架非常适合实时
    Web 应用程序，但对于以太坊前端开发也非常有用，因为它非常适合编写单页面应用程序或 SPA。下面是许多以太坊开发人员喜欢 Meteor 的原因：
- en: It’s written entirely in JavaScript, as are the tools.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它完全由 JavaScript 编写，工具也是如此。
- en: You get a whole developer environment out of the box.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您将获得整个开发环境的开箱即用。
- en: Deployment is super easy.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署非常容易。
- en: Interfaces are fully reactive (similar to Angular.js).
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口完全是响应式的（类似于 Angular.js）。
- en: Uses a NoSQL data model called MiniMongo, which can be autopersisted to local
    smart-contract storage.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一种名为 MiniMongo 的 NoSQL 数据模型，可以自动持久化到本地智能合约存储中。
- en: To learn more about building Ethereum apps with Meteor.js, check out [https://github.com/ethereum/wiki/wiki/Dapp-using-Meteor](https://github.com/ethereum/wiki/wiki/Dapp-using-Meteor)
    .This URL is also listed on tutorials.eth.guide. Next you’ll learn about installing
    the Web3.js library onto your development machine so you can begin messing around
    with contracts locally.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关使用 Meteor.js 构建以太坊应用程序的更多信息，请查看 [https://github.com/ethereum/wiki/wiki/Dapp-using-Meteor](https://github.com/ethereum/wiki/wiki/Dapp-using-Meteor)
    。此 URL 也列在 tutorials.eth.guide 上。接下来，您将了解如何将 Web3.js 库安装到开发机器上，以便在本地开始尝试与合约交互。
- en: Install Web3.js to Build an Ethereum-Enabled Web ­Application
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Web3.js 以构建支持以太坊的 Web 应用程序
- en: 'The Web3.js library communicates through RPC to a local node. The library works
    with any Ethereum node, as long as it is exposing its RPC layer . You’ll need
    to install this library on your local machine to do development, and on your web
    server to run your front-end application.This is exposed by default on private
    chains, even if you do not start your chain in Geth with this command flagged.In
    effect, you can think of your Ethereum node as the bare-metal layer, exposing
    the EVM through its RPC layer. That RPC layer can send and receive web3.eth and
    web3.shh objects with a web server that is also running Web3.js.To install Web3.js
    in your local development environment, open the Terminal and use the installation
    library that you’re most comfortable with:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Web3.js 库通过 RPC 与本地节点通信。该库与任何以太坊节点配合使用，只要它正在暴露其 RPC 层。您需要在本地机器上安装此库进行开发，并在 Web
    服务器上运行前端应用程序。即使不使用此命令标记在 Geth 中启动您的链，私有链默认会暴露这个。实际上，您可以将您的以太坊节点视为裸金属层，通过其 RPC
    层暴露 EVM。该 RPC 层可以与同时运行 Web3.js 的 Web 服务器发送和接收 web3.eth 和 web3.shh 对象。要在本地开发环境中安装
    Web3.js，请打开终端并使用您最熟悉的安装库：
- en: 'npm: npm install web3'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: npm：npm install web3
- en: 'bower: bower install web3'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: bower：bower install web3
- en: 'meteor: meteor add ethereum:web3'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: meteor：meteor add ethereum:web3
- en: 'vanilla: link the dist./web3.min.js'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: vanilla：链接 dist./web3.min.js
- en: Then you need to create a Web3 instance and set your localhost as a provider.
    To continue learning how to work with Web3.js, go to [http://dapps.eth.guide](http://dapps.eth.guide)
    .Next, you’ll see how to execute JavaScript files in the Geth console.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您需要创建一个 Web3 实例，并将本地主机设置为提供者。要继续学习如何使用 Web3.js，请访问 [http://dapps.eth.guide](http://dapps.eth.guide)
    。接下来，您将了解如何在 Geth 控制台中执行 JavaScript 文件。
- en: Executing Contracts in the Console
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在控制台中执行合约
- en: A full tutorial in dapp deployment would take many pages and could be performed
    dozens of possible ways. This section instead focuses on getting started quickly.You
    can upload your smart contract files directly in Geth, sending them in a transaction
    to the EVM by simply adding the --exec argument and then writing JavaScript code
    pointing to a local script. For example:$ geth --exec 'loadScript("/Desktop/test.js")'In
    fact, you can even execute JavaScript that is sitting on another machine, as long
    as it is running Geth:$ geth --exec 'loadScript("/Desktop/test.js")' attach https://100.100.100.100:8000The
    next section covers the architecture of Ethereum-enabled applications, and how
    they diverge from traditional web architecture.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的 dapp 部署教程可能需要很多页，并且可以以几十种可能的方式执行。本节重点是快速入门。您可以直接在 Geth 中上传您的智能合约文件，通过简单添加
    --exec 参数将它们发送到 EVM 中的交易中，然后编写指向本地脚本的 JavaScript 代码。例如：$ geth --exec 'loadScript("/Desktop/test.js")'实际上，您甚至可以执行位于另一台机器上的
    JavaScript，只要它正在运行 Geth：$ geth --exec 'loadScript("/Desktop/test.js")' attach
    https://100.100.100.100:8000接下来的部分涵盖了以太坊应用程序的架构，以及它们与传统 Web 架构的不同之处。
- en: How Contracts Expose an Interface
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何暴露合约接口
- en: When using the JavaScript dapp API, calling a contract via an abstraction layer
    such as the eth.contract() function will send back an object with all the functions
    that contract can run when called in JavaScript.To standardize this introspective
    functionality, the Ethereum protocol comes with something called the application
    binary interface , otherwise known as the Contract ABI . The ABI behaves like
    an API, creating a standard syntax for contracts to be called by applications.The
    ABI dictates that the contract will send back an array that delineates the proper
    call signature and the available contract functions.It may be surprising to some
    developers, especially those hailing from the Apple developer environment, that
    there are no frameworks that “come with” Ethereum to enable the easy writing of
    common application components.Although the Ethereum protocol may be generally
    featureless, there’s still a need to make contracts interact in predictable ways
    in common use cases. These scenarios include currency units, name registry, and
    trading on exchanges. The ABI is a concession to such scenarios.ABI contains the
    word binary because in the EVM, the level below the application layer is the one
    that runs EVM bytecode.You can find this specification at [https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#functions](https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#functions)
    or at [http://abi.eth.guide](http://abi.eth.guide) .Standards for smart contracts
    usually consist of sets of function signatures for a few common methods, such
    as sending, receiving, registering, deleting, and so on.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 JavaScript dapp API 时，通过诸如 eth.contract() 函数这样的抽象层调用合约将返回一个对象，该对象包含调用 JavaScript
    时该合约可以运行的所有函数。为了标准化这种自省功能，以太坊协议提供了一种称为应用二进制接口（Application Binary Interface）的东西，又称为合约
    ABI。ABI 的行为类似于 API，为合约调用应用程序创建了一个标准语法。ABI 规定，合约将返回一个数组，该数组详细说明了正确的调用签名和可用的合约函数。对于一些开发人员，特别是那些来自苹果开发环境的开发人员，可能会感到惊讶，因为没有“随附”以太坊的框架来方便地编写常见的应用程序组件。尽管以太坊协议可能总体上没有太多特色，但在常见用例中仍然需要使合约以可预测的方式进行交互。这些情景包括货币单位、名称注册表和在交易所交易。ABI
    是对这些情景的妥协。ABI 包含二进制一词，因为在 EVM 中，应用层下面的一层是运行 EVM 字节码的一层。您可以在 [https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#functions](https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#functions)
    或 [http://abi.eth.guide](http://abi.eth.guide) 上找到此规范。智能合约的标准通常由一些常见方法的函数签名集合组成，例如发送、接收、注册、删除等。
- en: Recommendations for Prototyping
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原型设计建议
- en: 'The first thing to know about prototyping Solidity contracts is that you do
    not necessarily need an Ethereum node to test your contracts. You can use the
    Ethereum VM Contract Simulator , [https://github.com/EtherCasts/evm-sim/](https://github.com/EtherCasts/evm-sim/)
    . This simulator allows developers to test their contracts in isolation when they
    don’t have access to the testnet; for example, when working from a netbook.Here
    are other best practices for prototyping, when you get to the stage where you
    are testing with live ether:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 关于原型化 Solidity 合约的第一件事是，你不一定需要以太坊节点来测试你的合约。你可以使用以太坊虚拟机合约模拟器，[https://github.com/EtherCasts/evm-sim/](https://github.com/EtherCasts/evm-sim/)。这个模拟器允许开发人员在没有访问测试网的情况下独立测试他们的合约；例如，当从一台笔记本电脑上工作时。以下是原型化的其他最佳实践，当你进入使用实际以太时进行测试的阶段时：
- en: Don’t use too much ether per contract, and when possible, program upper limits
    on how much contracts will hold. This is a good fail-safe in the event that a
    bug traps your funds. Simply don’t use too much when testing with live ether.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在每个合约中使用太多以太，并在可能的情况下，对合约持有的金额设置上限。这是一个很好的故障保护机制，以防出现 bug 使你的资金被困住。在使用实际以太进行测试时，只需不要使用太多即可。
- en: Keep your contracts modular and easy to understand. Whenever possible, abstract
    out functionality into libraries that can be individually tested. Limit the number
    of variables and length of your functions. Document everything.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持你的合约模块化且易于理解。在可能的情况下，将功能抽象为可以单独测试的库。限制变量的数量和函数的长度。一切都要有文档记录。
- en: Use the Checks-Effects-Interactions pattern. This means you shouldn’t write
    programs that wait for return data from another contract before proceeding; this
    will cause time-outs. Generally speaking, you can avoid this by performing checks
    on the data you get back before changing state.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用检查-效果-交互模式。这意味着你不应该编写等待来自另一个合约的返回数据的程序；这会导致超时。一般来说，你可以通过在更改状态之前对返回的数据执行检查来避免这种情况。
- en: Write your own intermediaries. Because the EVM is such an unforgiving platform,
    it’s incumbent on you to create mechanisms for your own programs that act as fail-safes.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写你自己的中间件。因为 EVM 是一个不太容易迁就的平台，所以你需要为自己的程序创建作为故障保护的机制。
- en: As mentioned in Chapter [5](A433414_1_En_5_Chapter.html), in the token contract
    tutorial, developers are converging around standards for some types of contracts.
    You can register your contracts with a third-party service such as Etherchain
    so that other people can use them. You’ll see publicly listed contracts at [https://etherchain.org/contracts](https://etherchain.org/contracts)
    .
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正如在[第5章](A433414_1_En_5_Chapter.html)中提到的，在代币合约教程中，开发人员正在围绕某些类型的合约制定标准。你可以将你的合约注册到
    Etherchain 等第三方服务中，以便其他人可以使用它们。你会在 [https://etherchain.org/contracts](https://etherchain.org/contracts)
    看到公开列出的合约。
- en: Test, test, test! You’ll find testing resources at [http://test.eth.guide](http://test.eth.guide)
    .
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试，测试，测试！你可以在 [http://test.eth.guide](http://test.eth.guide) 找到测试资源。
- en: You’ve looked at several contracts that were clearly written for demonstration
    purposes. What kind of simple smart contracts might you create in the service
    of real dapps, and what is the best way to deploy them? That’s the subject of
    the last section of this chapter.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经查看了几个明显是为演示目的编写的合约。你在真实的dapps服务中可能创建哪些简单的智能合约，部署它们的最佳方式是什么？这是本章最后一节的主题。
- en: Third-Party Deployment Libraries
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第三方部署库
- en: 'Deploying more-sophisticated smart contracts and connecting them to the Web
    is slightly beyond the scope of this book—in part because it is an area of rapid
    development and constant changes. It’s also fairly difficult, and requires some
    patience, as of this writing. As a result, developer tools are a major area of
    active development in the Ethereum community.Leading groups of developers have
    created tools to make contract and dapp deployment easier to achieve. Here are
    some of the projects you should be aware of:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 部署更复杂的智能合约并将它们连接到网络稍微超出了本书的范围——部分原因是这是一个快速发展和不断变化的领域。截至本书写作时，这也是相当困难的，需要一些耐心。因此，开发工具是以太坊社区活跃发展的一个重要领域。领先的开发者团队已经创建了工具，使合约和dapp部署更加容易实现。以下是一些你应该知道的项目：
- en: Monax tutorials and Solidity contracts
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Monax教程和Solidity合约
- en: OpenZeppelin smart contracts
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenZeppelin智能合约
- en: Truffle deployment, testing, and asset creation environment
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Truffle部署、测试和资产创建环境
- en: Dapple, a developer environment for complex contract systems
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dapple，一个用于复杂合约系统的开发环境
- en: Populus, contract development framework written in Python
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Populus，一个用Python编写的合约开发框架
- en: Embark, dapp development framework written in JavaScript
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Embark，一个用JavaScript编写的dapp开发框架
- en: Ether Pudding, a package builder
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ether Pudding，一个包构建器
- en: Solium, a linter for Solidity
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Solium，Solidity的一个代码检查工具
- en: There are many more dapp guides, tutorials, best practices, and sample projects
    than this book can cover. You will find up-to-date links for all of these tools
    and libraries, plus a lot more, at [http://dapp.eth.guide](http://dapp.eth.guide)
    .In addition, a collection of Gitter channels where you can find help with development
    and deployment can be found at [http://help.eth.guide](http://help.eth.guide)
    .
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本书无法涵盖的dapp指南、教程、最佳实践和示例项目还有很多。你可以在[http://dapp.eth.guide](http://dapp.eth.guide)找到所有这些工具和库的最新链接，以及更多信息。此外，你还可以在[http://help.eth.guide](http://help.eth.guide)找到一系列Gitter频道，在那里你可以获得开发和部署方面的帮助。
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, you learned about the kinds of contracts Ethereum is useful
    for writing and how to go about deploying them. Also covered were the ways that
    smart contracts can communicate with an application’s front end.Ethereum dapp
    development isn’t easy, but it’s becoming more and more approachable every day.
    Join the Gitter channels or join a local developer community. As of this writing,
    81,424 members and 2,257 interested people are in 450 Ethereum Meetups all over
    the world—in 218 cities and 57 countries to be exact. To find one near you, search
    Meetup ( [www.meetup.com](http://www.meetup.com) ).In the next chapter, you’ll
    deploy your own private blockchain to get a better understanding of how chains
    work.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了以太坊可用于编写的合同类型以及部署它们的方法。还介绍了智能合约如何与应用程序的前端进行通信。以太坊 dapp 开发并不容易，但每天都变得越来越易于接近。加入
    Gitter 频道或加入本地开发者社区。截至目前，全球各地有 450 个以太坊 Meetup 活动——确切地说是在 218 个城市和 57 个国家，共有 81,424
    名成员和 2,257 个感兴趣的人。要找到离你最近的一个，请搜索 Meetup（[www.meetup.com](http://www.meetup.com)）。在下一章中，你将部署自己的私有区块链，以更好地理解区块链的工作原理。
