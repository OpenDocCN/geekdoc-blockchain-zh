- en: © The Author(s), under exclusive license to APress Media, LLC, part of Springer
    Nature 2022J. T. GeorgeIntroducing Blockchain Applications[https://doi.org/10.1007/978-1-4842-7480-4_8](https://doi.org/10.1007/978-1-4842-7480-4_8)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 作者（们），独家许可给 APress Media，LLC，Springer Nature 2022J. T. George介绍区块链应用程序[https://doi.org/10.1007/978-1-4842-7480-4_8](https://doi.org/10.1007/978-1-4842-7480-4_8)
- en: 8. The Consensus Algorithms for Blockchains Project
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8. 区块链项目的共识算法
- en: Joseph Thachil George^([1](#Aff2)  )(1)Rome, Italy
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 约瑟夫·塔钦·乔治^([1](#Aff2)  )(1) 意大利罗马
- en: This project is a basic blockchain written in Python. It is a set of blocks
    that are linked together in such a way that the information they store is impossible
    to modify (and more and more difficult as more blocks are joined to the blockchain).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目是用 Python 编写的基本区块链。它是一组区块，这些区块以不可修改的方式链接在一起，随着更多的区块加入到区块链中，存储在其中的信息变得越来越难以修改。
- en: The PoW (Proof of Work) algorithm is used to mine every block in this blockchain.
    Its purpose is to find a hash of all the data saved in the blocks that meets certain
    criteria. For this purpose, each block has a variable data called nonce that must
    be modified until the desired hash is discovered.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: PoW（工作证明）算法用于挖掘这个区块链中的每个区块。它的目的是找到满足特定条件的所有数据保存在区块中的哈希。为此，每个区块都有一个名为 nonce 的可变数据，必须修改直到发现所需的哈希。
- en: The desired hash in bitcoin, for example, requires the first *X* digits to be
    zeros. The amount X determines how difficult mining is (the larger the X, the
    greater the difficulty). In this blockchain, X is a property of the blockchain
    that can be set in its constructor. However, this is dependent on the mining capacity
    of the nodes that support the network in Bitcoin and the majority of other coins.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，比特币中所需的哈希需要前 *X* 位为零。X 的数量决定了挖矿的难度（X 越大，难度越大）。在这个区块链中，X 是区块链的一个属性，可以在其构造函数中设置。然而，这取决于支持比特币和其他大多数货币网络的节点的挖矿能力。
- en: 8.1 Starting the Project
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.1 启动项目
- en: This project has one dependency, called hashlib, which secures the hashes and
    message digests the import hashlib.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目有一个依赖项，称为 hashlib，用于保护哈希和消息摘要 import hashlib。
- en: To run the project, open a terminal and type the following:python3 project1.py
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行该项目，打开终端并键入以下命令：python3 project1.py
- en: The Create Transaction method  is used to generate transactions. Required inputs
    include the sending address, the receiving address, and the number of FDCs (*Federated
    Data Collaborations*  in the Internet of Things). To add the transaction to the
    blockchain, use the Mine Pending Transactions function  after it has been created.
    As an argument, this method requires the address of the block’s miner, i.e., the
    address that will be rewarded in the future. You may also use the Show Address
    Balance method  with the address name you want to verify as an argument to check
    each address balance.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Create Transaction 方法 生成交易。所需输入包括发送地址、接收地址和 FDCs（物联网中的联合数据协作）的数量。创建交易后，使用
    Mine Pending Transactions 函数将其添加到区块链中。作为参数，此方法需要区块的矿工地址，即未来将获得奖励的地址。您还可以使用 Show
    Address Balance 方法，并将要验证的地址名称作为参数，以检查每个地址的余额。
- en: 8.2 The Python Code
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.2 Python 代码
- en: 'Listing [8-1](#PC2) shows the TransactionProject.py Python file. The python
    file TransactionProject.py will help us do following tasks:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 列出[8-1](#PC2)显示了 TransactionProject.py Python 文件。python 文件 TransactionProject.py
    将帮助我们执行以下任务：
- en: '1.'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: Create transaction in blockchain
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在区块链中创建交易
- en: '2.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: Mining of transaction
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 交易的挖掘
- en: '3.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: Validate Transaction
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 验证交易
- en: '4.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: Creating blocks in blockchain
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在区块链中创建区块
- en: '*import datetime**import hashlib**from pprint import pprint**class Transaction(object):*      *"""Transaction
    class*      *"""*      *def __init__(self, fromAddress, toAddress, amount):*            *self.fromAddress
    = fromAddress*            *self.toAddress = toAddress*            *self.amount
    = amount**class Block(object):*      *"""Block class*      *"""*      *def __init__(self,
    timestamp, transactions, previousHash=""):*            *self.timestamp = timestamp*            *self.transactions
    = transactions*            *self.previousHash = previousHash*            *self.nonce
    = 0*            *self.hash = self.calculateHash()*      *def calculateHash(self):*            *info
    = str(self.timestamp) + str(self.transactions) + str(self.previousHash) + str(self.nonce)*            *return
    hashlib.sha256(info.encode(''utf-8'')).hexdigest()*      *# Proof of work algorithm*      *def
    mineBlock(self, difficulty):*            *self.hash = self.calculateHash()*            *while(self.hash[:difficulty]
    != "0"*difficulty):*                  *self.nonce += 1*                  *self.hash
    = self.calculateHash()**class BlockChain(object):*      *"""Blockchain class*      *"""*      *def
    __init__(self):*            *self.chain = [self.createGenesisBlock()]*            *self.difficulty
    = 4*            *self.pendingTransactions = []*            *self.miningReward
    = 100*      *def createGenesisBlock(self):*            *return* *Block**("20/03/2018",
    [], "0")*      *def getLatestBlock(self):*            *return self.chain[-1]*      *def
    minePendingTransactions(self, miningRewardAddress):*            *newBlock =* *Block**(datetime.datetime.now(),
    self.pendingTransactions)*            *newBlock.previousHash = self.getLatestBlock().hash*            *#
    you can check if transactions are valid here*            *print("mining block...")*            *newBlock.mineBlock(self.difficulty)*            *print("block
    mined:", newBlock.hash)*            *print("block succesfully mined.")*            *self.chain.append(newBlock)*            *self.pendingTransactions
    = [Transaction(None, miningRewardAddress, self.miningReward)]*      *def createTransaction(self,
    transaction):*            *self.pendingTransactions.append(transaction)*      *def
    getBalanceOfAddress(self, address):*            *balance = 0*            *for
    block in self.chain:*                  *for transaction in block.transactions:*                        *if
    transaction.fromAddress == address:*                              *balance -=
    transaction.amount*                        *if transaction.toAddress == address:*                              *balance
    += transaction.amount*            *return balance*      *def isBlockChainValid(self):*            *for
    previousBlock, block in zip(self.chain, self.chain[1:]):*                  *if
    block.hash != block.calculateHash():*                        *return False*                  *if
    block.previousHash != previousBlock.hash:*                        *return False*            *return
    True*      *def showBlockChain(self):*            *print("blockchain: fedecoin\n")*            *for
    block in self.chain:*                  *print("block")*                  *print("timestamp:",
    block.timestamp)*                  *pprint("transactions:", block.transactions)*                  *print("previousHash:",
    block.previousHash)*                  *print("hash:", block.hash, "\n")*      *def
    showAddressBalance(self, address):*            *print(address, "balance:", self.getBalanceOfAddress(address))**fedecoin
    = BlockChain()**fedecoin.createTransaction(Transaction("address1", "address2",
    100))**fedecoin.createTransaction(Transaction("address2", "address1", 50))**fedecoin.minePendingTransactions("fede_address")**fedecoin.createTransaction(Transaction("address1",
    "address3", 100))**fedecoin.createTransaction(Transaction("address2", "address1",
    50))**fedecoin.minePendingTransactions("fede_address")**fedecoin.showAddressBalance("fede_address")**print("fedecoin
    is valid?", fedecoin.isBlockChainValid())**fedecoin.chain[1].transactions = Transaction("address1",
    "address2", 1000)**print("fedecoin is valid?", fedecoin.isBlockChainValid())**fedecoin.chain[1].calculateHash()**print("fedecoin
    is valid?", fedecoin.isBlockChainValid())*Listing 8-1'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*import datetime**import hashlib**from pprint import pprint**class Transaction(object):*      *"""Transaction
    类*      *"""*      *def __init__(self, fromAddress, toAddress, amount):*            *self.fromAddress
    = fromAddress*            *self.toAddress = toAddress*            *self.amount
    = amount**class Block(object):*      *"""Block 类*      *"""*      *def __init__(self,
    timestamp, transactions, previousHash=""):*            *self.timestamp = timestamp*            *self.transactions
    = transactions*            *self.previousHash = previousHash*            *self.nonce
    = 0*            *self.hash = self.calculateHash()*      *def calculateHash(self):*            *info
    = str(self.timestamp) + str(self.transactions) + str(self.previousHash) + str(self.nonce)*            *return
    hashlib.sha256(info.encode(''utf-8'')).hexdigest()*      *# 工作量证明算法*      *def
    mineBlock(self, difficulty):*            *self.hash = self.calculateHash()*            *while(self.hash[:difficulty]
    != "0"*difficulty):*                  *self.nonce += 1*                  *self.hash
    = self.calculateHash()**class BlockChain(object):*      *"""Blockchain 类*      *"""*      *def
    __init__(self):*            *self.chain = [self.createGenesisBlock()]*            *self.difficulty
    = 4*            *self.pendingTransactions = []*            *self.miningReward
    = 100*      *def createGenesisBlock(self):*            *return* *Block**("20/03/2018",
    [], "0")*      *def getLatestBlock(self):*            *return self.chain[-1]*      *def
    minePendingTransactions(self, miningRewardAddress):*            *newBlock =* *Block**(datetime.datetime.now(),
    self.pendingTransactions)*            *newBlock.previousHash = self.getLatestBlock().hash*            *#
    在这里可以检查交易是否有效*            *print("挖矿中...")*            *newBlock.mineBlock(self.difficulty)*            *print("挖矿完成，区块哈希值:",
    newBlock.hash)*            *print("区块成功挖矿完成。")*            *self.chain.append(newBlock)*            *self.pendingTransactions
    = [Transaction(None, miningRewardAddress, self.miningReward)]*      *def createTransaction(self,
    transaction):*            *self.pendingTransactions.append(transaction)*      *def
    getBalanceOfAddress(self, address):*            *balance = 0*            *for
    block in self.chain:*                  *for transaction in block.transactions:*                        *if
    transaction.fromAddress == address:*                              *balance -=
    transaction.amount*                        *if transaction.toAddress == address:*                              *balance
    += transaction.amount*            *return balance*      *def isBlockChainValid(self):*            *for
    previousBlock, block in zip(self.chain, self.chain[1:]):*                  *if
    block.hash != block.calculateHash():*                        *return False*                  *if
    block.previousHash != previousBlock.hash:*                        *return False*            *return
    True*      *def showBlockChain(self):*            *print("区块链：fedecoin\n")*            *for
    block in self.chain:*                  *print("区块")*                  *print("时间戳:",
    block.timestamp)*                  *pprint("交易:", block.transactions)*                  *print("上一个区块哈希值:",
    block.previousHash)*                  *print("区块哈希值:", block.hash, "\n")*      *def
    showAddressBalance(self, address):*            *print(address, "的余额:", self.getBalanceOfAddress(address))**fedecoin
    = BlockChain()**fedecoin.createTransaction(Transaction("address1", "address2",
    100))**fedecoin.createTransaction(Transaction("address2", "address1", 50))**fedecoin.minePendingTransactions("fede_address")**fedecoin.createTransaction(Transaction("address1",
    "address3", 100))**fedecoin.createTransaction(Transaction("address2", "address1",
    50))**fedecoin.minePendingTransactions("fede_address")**fedecoin.showAddressBalance("fede_address")**print("fedecoin
    是否有效？", fedecoin.isBlockChainValid())**fedecoin.chain[1].transactions = Transaction("address1",
    "address2", 1000)**print("fedecoin 是否有效？", fedecoin.isBlockChainValid())**fedecoin.chain[1].calculateHash()**print("fedecoin
    是否有效？", fedecoin.isBlockChainValid())*Listing 8-1'
- en: TransactionProject.py
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: TransactionProject.py
- en: '8.3 Example 2: Using Flask in Python'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.3 示例 2：在 Python 中使用 Flask
- en: 'We utilized the Python Flask framework to create this blockchain application.
    The following are the requirements for this application.*Python 3.0+**Flask and
    requests**for Install**pip install Flask == 0.122 requests==2.18.4*Here are the
    steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们利用 Python Flask 框架创建了这个区块链应用程序。以下是此应用程序的要求。*Python 3.0+**Flask 和 requests**用于安装**pip
    install Flask == 0.122 requests==2.18.4*以下是步骤：
- en: '1.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: Put in place a basic proof of work.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实施一个基本的工作证明。
- en: '2.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: Create an API interface for the blockchain.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为区块链创建 API 接口。
- en: '3.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: Construct a blockchain miner.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 构建一个区块链矿工。
- en: '4.'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: Use the blockchain to interact.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用区块链进行交互。
- en: '8.3.1 Step 1: Create a Simple Proof of Work'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.3.1 步骤 1：创建一个简单的工作证明
- en: The goal of PoW (Proof of Work) is to provide a number that solves a problem.
    It must be difficult to track down the number, but anyone else on the network
    should be able to verify it. Because the number is made up of cryptographic signatures,
    it will be denied access if it is supplied incorrectly elsewhere. The PoW approach
    allows you to send money without having to trust anyone or any institution because
    the blockchain only cares about cryptographic signatures. This is the foundation
    of PoW.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: PoW（工作证明）的目标是提供一个解决问题的数字。必须难以追踪到这个数字，但是网络上的任何其他人都应该能够验证它。由于这个数字由加密签名组成，在其他地方提供错误的情况下，将被拒绝访问。
    PoW 方法允许您发送资金而无需信任任何人或任何机构，因为区块链只关心加密签名。这是 PoW 的基础。
- en: 'Bitcoin is based on PoW. Listing [8-2](#PC4) illustrates an example.*from hashlib
    import sha256**x = 10**y = 0  # We don''t know what y should be yet...**while
    sha256(f''{x*y}''.encode()).hexdigest()[-1] != "0":*    *y += 1**printf(''The
    solution is y = {y}'')* *@staticmethod*    *def hash(block: Dict[str, Any]) ->
    str:*        *"""*        *Creates a SHA-256 hash of a Block*        *:param block:
    Block*        *"""*        *# We must make sure that the Dictionary is Ordered,
    or we''ll have inconsistent hashes*        *block_string = json.dumps(block, sort_keys=True).encode()*        *return
    hashlib.sha256(block_string).hexdigest()*            *def proof_of_work(self,
    last_proof: int) -> int:*        *"""*        *Simple Proof of Work Algorithm:*         *-
    Find a number 0'' such that hash(00'') contains leading 4 zeroes, where 0 is the
    previous 0''*         *- 0 is the previous proof, and 0'' is the new proof*        *"""*        *proof
    = 0*        *while self.valid_proof(last_proof, proof) is False:*            *proof
    += 1*        *return proof*    *@staticmethod*    *def valid_proof(last_proof:
    int, proof: int) -> bool:*        *"""*        *Validates the Proof*        *:param
    last_proof: Previous Proof*        *:param proof: Current Proof*        *:return:
    True if correct, False if not.*        *"""*        *guess = f''{last_proof}{proof}''.encode()*        *guess_hash
    = hashlib.sha256(guess).hexdigest()*        *return guess_hash[:4] == "0000"*Listing
    8-2'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '比特币基于 PoW。[8-2](#PC4) 列举了一个示例。*from hashlib import sha256**x = 10**y = 0  #
    我们还不知道 y 应该是多少...**while sha256(f''{x*y}''.encode()).hexdigest()[-1] != "0":*    *y
    += 1**printf(''The solution is y = {y}'')* *@staticmethod*    *def hash(block:
    Dict[str, Any]) -> str:*        *"""*        *创建一个区块的 SHA-256 哈希值*        *:param
    block: 区块*        *"""*        *# 我们必须确保字典是有序的，否则哈希值会不一致*        *block_string
    = json.dumps(block, sort_keys=True).encode()*        *return hashlib.sha256(block_string).hexdigest()*            *def
    proof_of_work(self, last_proof: int) -> int:*        *"""*        *简单的工作量证明算法：*         *-
    找到一个数字 0''，使得 hash(00'') 包含 4 个前导零，其中 0 是前一个 0''*         *- 0 是上一个证明，0'' 是新的证明*        *"""*        *proof
    = 0*        *while self.valid_proof(last_proof, proof) is False:*            *proof
    += 1*        *return proof*    *@staticmethod*    *def valid_proof(last_proof:
    int, proof: int) -> bool:*        *"""*        *验证证明*        *:param last_proof:
    上一个证明*        *:param proof: 当前证明*        *:return: 如果正确返回 True，否则返回 False*        *"""*        *guess
    = f''{last_proof}{proof}''.encode()*        *guess_hash = hashlib.sha256(guess).hexdigest()*        *return
    guess_hash[:4] == "0000"*列表 8-2'
- en: ProofOfWork.py
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: ProofOfWork.py
- en: '8.3.2 Step 2: Create an API Endpoint for Blockchain'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.3.2 第 2 步：为区块链创建 API 端点
- en: 'Place the code shown in Listing [8-3](#PC5) at the end of your Python file.
    Your file will then be an API endpoint thanks to this code. This will enable you
    to use Postman to transmit and receive requests in your blockchain.*class Blockchain(object):**#
    Instantiate our Node**app = Flask(__name__)**# Generate a globally unique address
    for this node**node_identifier = str(uuid4()).replace(''-'', '''')**# Instantiate
    the Blockchain**blockchain = Blockchain()**@app.route(''/mine'', methods=[''**GET**''])**def
    mine():*    *return "We''ll mine a new Block"**@app.route(''/transactions/new'',
    methods=[''POST''])**def new_transaction():*    *return "We''ll add a new transaction"**@app.route(''/chain'',
    methods=[''**GET**''])**def full_chain():*    *response = {*        *''chain'':
    blockchain.chain,*        *''length'': len(blockchain.chain),*    *}*    *return
    jsonify(response), 200**if __name__ == ''__main__'':*    *app.run(host=''0.0.0.0'',
    port=5000)**@app.route(''/transactions/new'', methods=[''POST''])**def new_transaction():*    *values
    = request.get_json()*    *# Check that the required fields are in the* *POST''ed*
    *data*    *required = [''sender'', ''recipient'', ''amount'']*    *if not all(k
    in values for k in required):*        *return ''Missing values'', 400*    *# Create
    a new Transaction*    *index = blockchain.new_transaction(values[''sender''],
    values[''recipient''], values[''amount''])*    *response = {''message'': f''Transaction
    will be added to Block {index}''}*    *return jsonify(response), 201*Listing 8-3'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '将[8-3](#PC5)中所示的代码放在Python文件的末尾。然后你的文件将成为一个API端点，由于这段代码。这将使您能够使用Postman在您的区块链中传输和接收请求。*class
    Blockchain(object):**# 实例化我们的节点**app = Flask(__name__)**# 为本节点生成全局唯一地址**node_identifier
    = str(uuid4()).replace(''-'', '''')**# 实例化区块链**blockchain = Blockchain()**@app.route(''/mine'',
    methods=[''**GET**''])**def mine():*    *return "我们将挖掘一个新的区块"*@app.route(''/transactions/new'',
    methods=[''POST''])**def new_transaction():*    *return "我们将添加一个新的交易"*@app.route(''/chain'',
    methods=[''**GET**''])**def full_chain():*    *response = {*        *''chain'':
    blockchain.chain,*        *''length'': len(blockchain.chain),*    *}*    *return
    jsonify(response), 200**if __name__ == ''__main__'':*    *app.run(host=''0.0.0.0'',
    port=5000)**@app.route(''/transactions/new'', methods=[''POST''])**def new_transaction():*    *values
    = request.get_json()*    *# 检查POST数据中是否有必需字段*    *required = [''sender'', ''recipient'',
    ''amount'']*    *if not all(k in values for k in required):*        *return ''缺少值'',
    400*    *# 创建新的交易*    *index = blockchain.new_transaction(values[''sender''],
    values[''recipient''], values[''amount''])*    *response = {''message'': f''交易将被添加到区块
    {index}''}*    *return jsonify(response), 201*Listing 8-3'
- en: Apiendpoint.py
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Apiendpoint.py
- en: '8.3.3 Step 3: Create a Blockchain Miner'
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.3.3 第3步：创建区块链矿工
- en: 'The code shown in Listing [8-4](#PC6) will establish a miner for your server
    that will mine transactions and add them to the blockchain block. Use this code
    with the help of your IDE (Eclipse or PyCharm).*@app.route(''/mine'', methods=[''**GET**''])**def
    mine():*    *last_block = blockchain.last_block*    *last_proof = last_block[''proof'']*    *proof
    = blockchain.proof_of_work(last_proof)*    *blockchain.new_transaction(*        *sender="0",*        *recipient=node_identifier,*        *amount=1,*    *)*    *block
    = blockchain.new_block(proof=proof, previous_hash=0)*    *response = {*        *''message'':
    "New Block Forged",*        *''index'': block[''index''],*        *''transactions'':
    block[''transactions''],*        *''proof'': block[''proof''],*    *}*    *return
    jsonify(response), 200*Listing 8-4'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '列出的代码将为您的服务器建立一个矿工，该矿工将挖掘交易并将其添加到区块链块中。 使用此代码与您的 IDE（Eclipse 或 PyCharm）帮助。*@app.route(''/mine'',
    methods=[''**GET**''])**def mine():*    *last_block = blockchain.last_block*    *last_proof
    = last_block[''proof'']*    *proof = blockchain.proof_of_work(last_proof)*    *blockchain.new_transaction(*        *sender="0",*        *recipient=node_identifier,*        *amount=1,*    *)*    *block
    = blockchain.new_block(proof=proof, previous_hash=0)*    *response = {*        *''message'':
    "New Block Forged",*        *''index'': block[''index''],*        *''transactions'':
    block[''transactions''],*        *''proof'': block[''proof''],*    *}*    *return
    jsonify(response), 200*Listing 8-4'
- en: Miner.py
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Miner.py
- en: '8.3.4 Step 4: Run Your Blockchain Project'
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.3.4 步骤 4：运行您的区块链项目
- en: Make sure that the server is up by using the following IP and port address:![../images/520777_1_En_8_Chapter/520777_1_En_8_Figa_HTML.jpg](../images/520777_1_En_8_Chapter/520777_1_En_8_Figa_HTML.jpg)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 确保服务器正常运行，使用以下 IP 和端口地址：![../images/520777_1_En_8_Chapter/520777_1_En_8_Figa_HTML.jpg](../images/520777_1_En_8_Chapter/520777_1_En_8_Figa_HTML.jpg)
- en: (To exit, press Ctrl+C.) Now launch Postman and look for the search bar at the
    top of the screen. Make sure the GET button is selected to the left of it.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: （要退出，请按 Ctrl+C。）现在启动 Postman 并查找屏幕顶部的搜索栏。确保 GET 按钮在其左侧被选中。
- en: Then type this address into the address bar:![../images/520777_1_En_8_Chapter/520777_1_En_8_Figb_HTML.jpg](../images/520777_1_En_8_Chapter/520777_1_En_8_Figb_HTML.jpg)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将此地址输入地址栏：![../images/520777_1_En_8_Chapter/520777_1_En_8_Figb_HTML.jpg](../images/520777_1_En_8_Chapter/520777_1_En_8_Figb_HTML.jpg)
- en: 8.4 Review Questions
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.4 复习问题
- en: '1.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: “An orphan block is produced only when a 51% attack succeeds.” Is this statement
    correct or incorrect?
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “只有在 51% 的攻击成功时才会产生孤立块。” 这个说法正确还是不正确？
- en: 2.What does a ledger in blockchain do?
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2.区块链中的账本是用来做什么的？
- en: a.
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: a.
- en: Identifies the owners.
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于标识所有者。
- en: b.
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: b.
- en: Identifies the objects owned.
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于标识所拥有的对象。
- en: c.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: c.
- en: Maps between the owner and the object.
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于标识所有者和对象之间的映射。
- en: d.
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: d.
- en: Identifies the owners’ names.
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于标识所有者的名称。
- en: 3.Which of the following is the most common method of keeping bitcoins?
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3.以下哪种方法是保留比特币的最常见方法？
- en: a.
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: a.
- en: The pocket
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: The pocket
- en: b.
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: b.
- en: The wallet
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: The wallet
- en: c.
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: c.
- en: The box
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: The box
- en: d.
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: d.
- en: The stack
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: The stack
- en: 4.What is the structure of a blockchain block?
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4.区块链块的结构是什么？
- en: a.
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: a.
- en: Transaction data
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 交易数据
- en: b.
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: b.
- en: Hash point
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Hash point
- en: c.
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: c.
- en: Timestamp
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 时间戳
- en: d.
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: d.
- en: All of these
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有这些
- en: '5.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '5.'
- en: “In the case of Bitcoin, after 10 minutes, a new block is created with the most
    recent transactions.” Is this statement correct or incorrect?
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “在比特币的情况下，经过10分钟，最新交易将被创建成一个新的区块。”这个说法正确还是不正确？
- en: 8.5 Review Answers
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.5 复习答案
- en: '1.'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: 'Answer: Incorrect, this is restricted to blockchain.'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 答案：不正确，这仅限于区块链。
- en: '2.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: 'Answer: C, Maps between the owner and the object.'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 答案：C，所有者和对象之间的映射。
- en: '3.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: 'Answer: B, The wallet.'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 答案：B，钱包。
- en: '4.'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: 'Answer: D, All of these.'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 答案：D，所有这些。
- en: '5.'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '5.'
- en: 'Answer: Correct.'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 答案：正确。
- en: 8.6 Summary
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.6 总结
- en: This chapter provided two examples that illustrate consensus algorithms. These
    examples are provided in the Python language. These examples also help illustrate
    the blockchain’s PoW system. With the help of these examples, you can build your
    applications according to your needs.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了两个例子，说明了共识算法。这些例子是用Python语言提供的。这些例子还有助于说明区块链的PoW系统。借助这些例子，您可以根据自己的需求构建应用程序。
- en: When you think about blockchain technology, you need to understand distributed
    system management, because blockchain technology is widely used in distributed
    systems. The main purpose of this book is to implement blockchain in the distributed
    system. The next chapter covers time management in the distributed system.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当您思考区块链技术时，您需要了解分布式系统管理，因为区块链技术广泛应用于分布式系统中。本书的主要目的是在分布式系统中实现区块链。下一章将介绍分布式系统中的时间管理。
