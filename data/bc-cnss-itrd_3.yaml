- en: consortium chains), the lower bound is 2F + 1, where F is the number
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 合作链），下界是2F + 1，其中F是数量
- en: of faults.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 的故障。
- en: • In proof of work–based blockchains, it is the <50% of the hash power.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: • 在基于工作量证明的区块链中，这是哈希算力的<50%。
- en: '**Finality**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**最终性**'
- en: • Finality occurs when a transaction is considered irrevocable
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: • 当交易被认为是不可撤销的时候，最终性发生
- en: and permanent. This event can be a certain number of blocks, a
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 并且是永久的。这一事件可以是一定数量的区块、一个
- en: time interval, or a step (phase) in the execution of a consensus
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 时间间隔，或共识执行中的步骤（阶段）
- en: algorithm. For example, in Bitcoin it is usually six blocks after
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 算法。例如，在比特币中，通常是六个区块之后
- en: which a transaction is considered irrevocable, and in permissioned
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 发生篡改的情形下，可以认为交易是无法撤回的，在许可的情况下
- en: blockchains using BFT protocols, the moment the transaction is
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用BFT协议的区块链，事务发生时
- en: committed, it is considered irrevocably final.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 提交的，它被认为是不可撤销的最终状态。
- en: '176'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '176'
- en: Chapter 4 BloCkChain
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第四章 区块链
- en: '**Immutability**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**不可变性**'
- en: • Blockchains are immutable, which means that once a record has
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: • 区块链是不可变的，这意味着一旦记录
- en: made it to the ledger, it can never be removed.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到账本后，永远不能被移除。
- en: '**Append Only**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**仅追加**'
- en: • New records can only be appended to the blockchain. New records
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: • 新记录只能添加到区块链中。新记录
- en: cannot be inserted in between previously existing records. For
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不能被插入到先前存在的记录中间。对于
- en: example, a new block can only be added after the last final block, not
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，只有在最后一个最终的区块之后才能添加新的区块，而不是
- en: in between other blocks.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他区块之间插入。
- en: • Formally, if a block b’ is inserted after a block b, then a new block b”
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: • 形式上，如果块b’在块b之后插入，那么新的块b”
- en: can only be inserted after b’ and not before b’ or b.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在b’之后插入，并且不能在b’或b之前插入。
- en: '**Tamper Resistant/Proof**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**防篡改/证明**'
- en: • It is practically impossible to remove or rearrange finalized blocks in
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: • 在实践中，几乎不可能移除或重新排列已经最终化的区块
- en: a blockchain.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链。
- en: • It is arguable whether a blockchain is tamper resistant or tamper-
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: • 是否区块链是防篡改或防篡改是值得商榷的
- en: proof, but for all practical purposes, the probability that some
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 证明，但在所有实践目的上，某些发生篡改的概率几乎为零。
- en: adversary can remove or rearrange blocks or transactions becomes
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对手可以移除或重新排列区块或交易变得
- en: almost zero. This guarantee is good enough for all practical purposes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎为零。这种保证对于所有实际目的都足够好。
- en: '**Validity**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**有效性**'
- en: • Only valid transactions and blocks are appended to the blockchain
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: • 只有有效的交易和区块才会被附加到区块链上。
- en: '**Termination Guarantee of Blockchain Operations: get(), append(), verify()**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链操作的**终止保证：get()，append()，verify()**
- en: • Eventually, all the operations will terminate with a result.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: • 最终，所有操作将以结果终止。
- en: '**Order**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**顺序**'
- en: • If a block x happens before block y and block y happens before block z,
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果块x发生在块y之前，并且块y发生在块z之前，
- en: then block x happens before block z and forms a transitive relationship.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后块x发生在块z之前，并形成一个传递关系。
- en: • In practice, this is a chronologically ordered chain of blocks.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: • 实践中，这是一个按时间顺序排序的区块链。
- en: • It is an ordered ledger.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: • 这是一个有序的账本。
- en: '177'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '177'
- en: Chapter 4 BloCkChain
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 第四章 区块链
- en: '**Verifiable**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**可验证**'
- en: • All transactions and blocks in a blockchain are verifiable and adhere
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: • 区块链中的所有交易和区块都是可验证的，并且遵守
- en: to a validity predicate specific to the blockchain. Anyone can verify
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 针对区块链特定的有效性断言。任何人都可以验证
- en: the validity of a transaction.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 事务的有效性。
- en: Consensus-specific properties are discussed in more detail in Chapter [5](https://doi.org/10.1007/978-1-4842-8179-6_5).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 共识特定的属性在第[5](https://doi.org/10.1007/978-1-4842-8179-6_5)章节中有更详细的讨论。
- en: Some other properties include programmability (smart contract support), encrypted
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 其他一些属性包括可编程性（智能合约支持）、加密
- en: ledger and anonymity for confidentiality and user privacy, and unanimity for
    allowing
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 私有性和一致性以允许一致性的机制。
- en: unanimous decisions on appending new blocks.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在附加新区块的问题上做出一致的决定。
- en: A blockchain can also be seen as a state machine replication protocol. A blockchain
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链也可以被视为一种状态机复制协议。区块链
- en: and a state machine appear to be the same; however, there’s a subtle difference.
    In a
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 和状态机看起来是一样的；然而，有一个细微的区别。在一个
- en: state machine, only the latest state is stored in the log, whereas in a blockchain
    state
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 状态机，日志中仅存储最新状态，而在区块链状态中
- en: machine, the entire history is stored and available when queried.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 包括全部历史记录在内都被存储并在查询时可用。
- en: Bitcoin and blockchains have outpaced the growth of the Internet. Thousands
    of
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币和区块链已经超越了互联网的增长。成千上万的
- en: users are using Bitcoin daily. On average, about 200,000 transactions are processed
    on
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 用户每天都在使用比特币。平均每天处理约200,000笔交易
- en: Bitcoin daily. On Ethereum, roughly more than a million transactions are processed
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 每天比特币处理交易。在以太坊上，大约处理了100万笔交易
- en: daily, and the interest is growing. Contrary to a reasonable belief held by
    some, I think it is not correct to say that the Bitcoin experiment has failed.
    It has accomplished what it set out to achieve, peer-to-peer digital cash. That’s
    what it is and is being used as a digital cash platform today. Bitcoin also stimulated
    further innovation, and platforms
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 每日都有用户参与，而且兴趣正在增长。与某些人持有的合理看法相反，我认为不能说比特币实验失败了。它已经实现了它的目标，点对点数字现金。这就是它的功能，并且如今被用作数字现金平台。比特币也激发了进一步的创新，以及平台
- en: like Ethereum and now the latest blockchains like Polkadot and Cardano have
    emerged.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如以太坊和现在最新的区块链，如Polkadot和Cardano已经出现。
- en: With such a level of growth, in the next eight to ten years, I believe almost
    all financial services will run on a blockchain, including some central bank digital
    currencies.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 随着这种增长水平，我相信在未来八到十年内，几乎所有金融服务都将在区块链上运行，包括一些央行数字货币。
- en: '**How Blockchain Works**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**区块链的工作原理**'
- en: At times, there are subtle differences in the way a blockchain works at a micro
    level;
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在微观层面，区块链的工作方式存在细微差异；
- en: 'however, at a high level all blockchains principally work the same. In the
    following, I list seven key steps that show how a blockchain works:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在高层次上，所有区块链原则上工作方式相同。在接下来，我列出了展示区块链工作方式的七个关键步骤：
- en: 1\. A transaction occurs between two or more users.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 两个或多个用户之间发生交易。
- en: 2\. The transaction is broadcast to the network.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 交易广播到网络。
- en: 3\. The transaction is validated and added to the transaction pools.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 交易被验证并添加到交易池中。
- en: '178'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '178'
- en: '![](index-197_1.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](index-197_1.png)'
- en: Chapter 4 BloCkChain
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第四章 区块链
- en: 4\. A proposed block is created by adding transactions to it by miners.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 矿工通过向其中添加交易来创建提议块。
- en: 5\. Miners race to solve the proof of work to win the right to insert their
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 矿工竞赛解决工作证明，赢得将其插入的权限
- en: block into the blockchain, or a consensus mechanism runs to agree
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 将区块添加到区块链，或运行共识机制达成一致
- en: on the transactions. Usually, miners run a proof of work type of
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 关于交易。通常，矿工们运行工作证明类型的
- en: consensus mechanism to win the right to add a block. In consortium
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 共识机制以赢得添加区块的权限。在联合体中
- en: or private chains, usually a variant of traditional Byzantine or
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 或私人链，通常是传统拜占庭或
- en: crash fault–tolerant algorithm runs, which by voting achieves the
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 故障容忍算法运行，通过投票实现
- en: agreement on a block which is then inserted into the blockchain.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 就块达成一致，然后将其插入区块链。
- en: 6\. If a miner wins the right, it inserts the block in its local chain and
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 如果矿工赢得权限，它在其本地链中插入区块
- en: broadcasts that block to the network.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 将该区块广播到网络。
- en: 7\. Other nodes accept it if valid, and the process starts again.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 如果有效，其他节点接受它，然后过程重新开始。
- en: This process can be visualized in Figur[e 4-3\.](#p197)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程可以在[图4-3](#p197)中看到
- en: '***Figure 4-3\.** How a blockchain works*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '***图4-3\.** 区块链的工作原理*'
- en: '**Anatomy of a Blockchain**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**区块链的组成**'
- en: A blockchain is composed of blocks, where each block is linked to its previous
    block
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链由块组成，每个块链接到前一个块
- en: except the first genesis block. The blockchain term was used by Satoshi Nakamoto
    in
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 除了第一个创世区块。区块链这个术语在中本聪的《比特币》代码中被用到
- en: his Bitcoin code for the first time. Even though now it is used as one word,
    in his original Bitcoin code it was written as two separate words, “block chain.”
    It can be visualized as a chain of blocks, as shown in Figure [4-4](#p198).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次使用他的比特币代码。即使现在它被用作一个词，但在他原始的比特币代码中，它是作为两个独立的词写的，“区块链”。它可以被想象为一个块的链条，如图[4-4](#p198)所示。
- en: '179'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '179'
- en: '![](index-198_1.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](index-198_1.png)'
- en: '![](index-198_2.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](index-198_2.png)'
- en: Chapter 4 BloCkChain
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 第四章 区块链
- en: '***Figure 4-4\.** Generic structure of a blockchain*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '***图4-4\.** 区块链的通用结构*'
- en: Other structures such as DAGs, hash graphs, and Merkle trees are now used in
    some
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在一些情况下也使用其他结构，如DAGs、哈希图和默克尔树
- en: distributed ledgers instead of the usual block-based model in modern blockchains.
    For
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式账本而不是现代区块链中通常的基于区块的模型。对于
- en: example, Avalanche uses DAGs for storage instead of a linear block-based structure.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Avalanche使用DAGs进行存储，而不是线性基于块的结构。
- en: We will cover these in detail when we discuss consensus protocols specific to
    these
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们讨论特定于这些合意协议的共识协议时，我们将详细介绍它们
- en: blockchains (distributed ledgers) in Chapter [8](https://doi.org/10.1007/978-1-4842-8179-6_8).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链（分布式账本）在第[8章](https://doi.org/10.1007/978-1-4842-8179-6_8)中。
- en: '**Block**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**块**'
- en: A block consists of a block header and transactions. A block header is composed
    of
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 包括一个块头和交易。一个块头由
- en: several fields. A generic depiction is shown in Figure [4-5](#p198).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 几个字段。通用描绘如图[4-5](#p198)所示。
- en: '***Figure 4-5\.** Generic block structure*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '***图4-5** 通用块结构*'
- en: '180'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '180'
- en: Chapter 4 BloCkChain
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章 区块链
- en: Later in this chapter, in the section on blockchains, where I introduce Bitcoin
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本章后期，在区块链部分，当我介绍比特币时
- en: and other blockchains, I will discuss a more detailed design of blocks specific
    to
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 和其他区块链，我将讨论一个更详细的专门设计的块的设计
- en: that blockchain. However, the structure is fundamentally like a block header
    and
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链。然而，其结构基本上就像一个块头和交易一样，
- en: transactions, pointing to the previous block by including the hash of the last
    header
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 指向上一个块的前一个块的哈希。
- en: block in the current block header, thus creating a verifiable linked list.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当前块头中的块，从而创建一个可验证的链接列表。
- en: '**Platforms**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**平台**'
- en: In this section, we will describe two major blockchain platforms, Bitcoin and
    Ethereum.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将描述两个主要的区块链平台，比特币和以太坊。
- en: '**Bitcoin**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**比特币**'
- en: Bitcoin was invented in 2008 as the first blockchain by Satoshi Nakamoto. However,
    it is
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币是由中本聪于2008年发明的第一个区块链。然而，它是
- en: believed to be a pseudonym as the identity of Satoshi Nakamoto is shrouded in
    mystery.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 被认为是一个化名，因为中本聪的身份笼罩在神秘之中。
- en: After the introduction of Bitcoin, Satoshi remained active for some time but
    left the
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在引入比特币后，中本聪在一段时间内保持活跃，但随后离开
- en: community abruptly. Since then, no contact has been made by him.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 社区突然中止。从那时起，他再也没有联系。
- en: We discussed the prehistory and attempts to create digital cash and document
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了创造数字货币的前史和尝试
- en: timestamping system before in this chapter. In this section, I will jump straight
    into
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中的时间戳系统。在本节中，我将直接进入
- en: technical details.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 技术细节。
- en: Bitcoin is a peer-to-peer electronic cash system that solved the double-spending
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币是一个点对点的电子现金系统，解决了双花
- en: problem without requiring a trusted third party. Furthermore, Bitcoin has this
    fantastic
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 而不需要信任的第三方。此外，比特币拥有这个绝妙的
- en: property called “inclusive accountability,” which means that anyone on the Bitcoin
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 成为“包容性问责制”的性质，这意味着比特币上的任何人
- en: network can verify claims of possession of electronic cash, that is, the Bitcoin.
    This
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 网络可以验证对电子现金所有权的主张，也就是比特币。这
- en: property makes Bitcoin a transparent and verifiable electronic cash system.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 性质使比特币成为一个透明和可验证的电子现金系统。
- en: The Bitcoin network is composed of nodes. There are three types of nodes in
    a
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币网络由节点组成。在
- en: 'Bitcoin network: miner nodes, full nodes, and light nodes. Miner nodes perform
    mining'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币网络：矿工节点、全节点和轻节点。矿工节点进行挖矿
- en: and keep a full copy of the chain. Bitcoin is a loosely coupled network composed
    of
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 并保留整个链的完整副本。比特币是一个松散耦合的网络，由
- en: nodes. All nodes communicate with each other using a peer-to-peer gossip protocol.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 节点。所有节点都使用点对点的八卦协议进行通信。
- en: '**Bitcoin Node and Architecture**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**比特币节点和架构**'
- en: In practical terms, a node in a distributed system runs the distributed algorithm.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际操作中，分布式系统中的节点运行分布式算法。
- en: Similarly, in Bitcoin, a node runs the software client called Bitcoin Core.
    It can run on several types of hardware, including Intel and ARM processors. Also,
    the supported
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在比特币中，一个节点运行名为比特币核心的软件客户端。它可以运行在多种类型的硬件上，包括英特尔和ARM处理器。另外，受支持的
- en: operating systems are Mac OS, Linux, and Windows.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统分别是Mac OS、Linux和Windows。
- en: '181'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '181'
- en: '![](index-200_1.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](index-200_1.png)'
- en: Chapter 4 BloCkChain
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章 区块链
- en: There are primarily three different types of nodes in the Bitcoin network. Full
    nodes
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币网络中主要有三种不同类型的节点。全节点
- en: keep the entire history of the blockchain. Miner nodes keep the whole history
    and
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 保持整个区块链的全面历史。矿工节点保持整个历史和
- en: participate in mining to add new blocks to the blockchain. Finally, light nodes
    do not
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 参与挖矿以添加新的区块到区块链。最后，轻节点不
- en: keep a copy of the entire blockchain. Instead, they only download the block
    headers
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 保留整个区块链的副本。相反，他们只下载块头
- en: and use a method called simple payment verification to validate the authenticity
    of the
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 并使用称为简单支付验证的方法来验证
- en: transactions. The Bitcoin node architecture is shown in Figure [4-6](#p200).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 交易。比特币节点架构如图[4-6](#p200)所示。
- en: '***Figure 4-6\.** Bitcoin node architecture*'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '***图 4-6\.** 比特币节点架构*'
- en: When a node starts up, it discovers other nodes using a process called node
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个节点启动时，它使用一种叫做节点
- en: discovery. In this process, the node first connects to the seed nodes, which
    are trusted
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 发现。在此过程中，节点首先连接到受信任的种子节点
- en: bootstrap nodes maintained by the core developers. After this initial connection,
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 核心开发者维护的引导节点。在这种初始连接之后，
- en: further connections are made. At one point, there are x connections alive with
    other
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步的连接。在某一点上，有 x 个与其他的连接保持活跃
- en: peers. There is also spam protection built in the Bitcoin protocol, where a
    points-based
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 同行。比特币协议中还内置了垃圾邮件保护，其中基于积分的
- en: reputation system scores the nodes based on the connection attempts it is trying
    to
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 基于它尝试连接的声誉系统对节点进行评分
- en: make. If a node sends excessive messages to another node, its reputation score
    goes
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 做。如果一个节点向另一个节点发送过多的消息，其声誉分数会下降
- en: above a threshold of 100 points, and it gets blocked for 24 hours. The node
    discovery
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 超过 100 分的阈值，并因此被封锁 24 小时。节点发现
- en: and handshake between nodes rely on several protocol messages. A list is shown
    in the
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 节点之间的握手依赖于几个协议消息。列表如下所示
- en: following with their explanations. In Figur[e 4-7, y](#p202)ou can visualize
    how node handshake and message exchange occurs.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是它们的解释。在 4-7 看到的
- en: '182'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '182'
- en: Chapter 4 BloCkChain
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 第四章区块链
- en: Some of the most used protocol messages and an explanation of them are listed
    as
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 一些最常用的协议消息及其解释列举如下
- en: 'follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示：
- en: • **Version:** This is the first message that a node sends out to the network,
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: • **Version：**这是一个节点发送到网络的第一个消息
- en: advertising its version and block count. The remote node then replies
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 宣传其版本和区块计数。远程节点随后回复
- en: with the same information, and the connection is then established.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 包含相同的信息，并且连接随后建立。
- en: • **Verack:** This is the response of the version message accepting the
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: • **Verack：**这是对版本消息接受
- en: connection request.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 连接请求。
- en: • **Inv:** This is used by nodes to advertise their knowledge of blocks and
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: • **Inv：**节点用这个来宣传他们对区块和
- en: transactions.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 交易。
- en: • **Getdata:** This is a response to inv, requesting a single block or
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: • **Getdata：**这是对 inv 的响应，请求单个区块或
- en: transaction identified by its hash.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 通过其哈希标识的事务。
- en: • **Getblocks:** This returns an inv packet containing the list of all blocks
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: • **Getblocks：**这返回一个包含所有区块的 inv 数据包
- en: starting after the last known hash or 500 blocks.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 从最后一个已知的哈希或 500 个区块开始。
- en: • **Getheaders:** This is used to request block headers in a
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: • **Getheaders：**这用于在一
- en: specified range.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 指定范围。
- en: • **Tx:** This is used to send a transaction as a response to the getdata
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: • **Tx：**这用于作为对 getdata 的响应发送交易
- en: protocol message.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 协议消息的了解。
- en: • **Block:** This sends a block in response to the getdata protocol
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: • **Block：**这是对 getdata 协议的响应发送一个区块
- en: message.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 消息的形式。
- en: • **Headers:** This packet returns up to 2000 block headers as a reply to
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: • **Headers：**这个包作为对 2000 个区块头的回复返回
- en: the getheaders request.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: getheaders 请求。
- en: • **Getaddr:** This is sent as a request to get information about
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: • **Getaddr：**这作为一个请求发送，以获取关于
- en: known peers.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 已知的同行。
- en: • **Addr:** This provides information about nodes on the network. It
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: • **Addr：**这提供了有关网络上节点的信息。它
- en: contains the number of addresses and address list in the form of an
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 包含地址的数量和地址列表，以一个
- en: IP address and port number.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: IP 地址和端口号。
- en: • **Ping:** This message is used to confirm if the TCP/IP network
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: • **Ping：**这个消息用于确认 TCP/IP 网络
- en: connection is active.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 连接是活跃的。
- en: • **Pong:** This message is the response to a ping message confirming
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: • **Pong：**这个消息是对 ping 消息的响应，证实
- en: that the network connection is live.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 网络连接是活跃的。
- en: We can see these messages in use in Figur[e 4-7\.](#p202)
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在图[ 4-7\.](#p202)中看到这些消息的使用
- en: '183'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '183'
- en: '![](index-202_1.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图](index-202_1.png)'
- en: Chapter 4 BloCkChain
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 第四章区块链
- en: '***Figure 4-7\.** Node discovery and handshake diagram + header and block*'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '***图 4-7\.** 节点发现和握手图表 + 标头和区块*'
- en: '*synchronization*'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '*同步*'
- en: '**Cryptography in Bitcoin**'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**比特币中的密码学**'
- en: Cryptography plays a vital role in the Bitcoin blockchain. The entire security
    of
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 密码学在比特币区块链中发挥着重要作用。整个安全性
- en: the Bitcoin blockchain is indeed based on cryptography. Although we discussed
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 毕竟，比特币区块链确实基于加密。虽然我们讨论过
- en: cryptography in Chapt[er 2, I w](https://doi.org/10.1007/978-1-4842-8179-6_2)ill
    now describe which cryptographic protocols are used in Bitcoin and how.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 密码学中的Chapt[er 2，我现在将](https://doi.org/10.1007/978-1-4842-8179-6_2)描述比特币中使用的加密协议是什么以及如何使用。
- en: '**Public Keys and Private Keys**'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**公钥和私钥**'
- en: Private keys prove the ownership of bitcoins and users use them to authorize
    a payment
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 私钥证明比特币的所有权，用户使用它们授权付款
- en: by signing the transactions with the private key.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 通过用私钥签署交易。
- en: The SHA-256 hash function is used in a proof of work algorithm. There is also
    a
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: SHA-256哈希函数用于工作证明算法。 还有一个
- en: Base58 encoder in the Bitcoin client, which is used to encode the addresses
    in a readable format in Bitcoin.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币客户端中的Base58编码器，用于以可读格式编码比特币地址。
- en: '184'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '184'
- en: '![](index-203_1.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](index-203_1.png)'
- en: Chapter 4 BloCkChain
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章 区块链
- en: Wallets in Bitcoin are used to store cryptographic keys. Wallets sign transactions
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币中的钱包用于存储加密密钥。钱包签署交易
- en: using private keys. Private keys are generated by randomly choosing a 256-bit
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 使用私钥。私钥是通过随机选择256位生成的
- en: number provided by the wallet. A Bitcoin client includes a standard wallet called
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 钱包提供的数字。比特币客户端包括一个名为标准钱包的标准钱包
- en: nondeterministic wallet.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 非确定性钱包。
- en: '**Addresses and Accounts**'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**地址和账户**'
- en: Users are represented by accounts in Bitcoin. The Bitcoin address generation
    process is
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 用户在比特币中以账户形式表示。比特币地址生成过程是
- en: shown in Figure [4-8](#p203).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如图[4-8](#p203)所示。
- en: '***Figure 4-8\.** Bitcoin address generation*'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '***图4-8.** 比特币地址生成*'
- en: 1\. In the first step, we have a randomly generated ECDSA private key.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 在第一步，我们有一个随机生成的ECDSA私钥。
- en: 2\. The public key is derived from the ECDSA private key.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 2. 公钥从ECDSA私钥派生而来。
- en: 3\. The public key is hashed using the SHA-256 cryptographic hash
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 3. 使用SHA-256加密哈希
- en: function.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 功能。
- en: 4\. The hash generated in step 3 is hashed using the RIPEMD-160
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 4. 用RIPEMD-160再次进行哈希生成的哈希
- en: hash function.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希函数。
- en: 5\. The version number is prefixed to the RIPEMD-160 hash
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 5. 版本号前缀加到RIPEMD-160哈希上
- en: generated in step 4\.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在第4步生成。
- en: 6\. The result produced in step 5 is hashed using the SHA-256
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 6. 第5步产生的结果使用SHA-256进行哈希
- en: cryptographic hash function.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 加密哈希函数。
- en: '185'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '185'
- en: '![](index-204_1.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](index-204_1.png)'
- en: Chapter 4 BloCkChain
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章 区块链
- en: 7\. SHA-256 is applied again.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 7. 再次应用SHA-256。
- en: 8\. The first 4 bytes of the result produced from step 7 is the address
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 8. 从第7步产生的结果的前4个字节是地址
- en: checksum.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 校验和。
- en: 9\. This checksum is appended to the RIPEMD-160 hash generated
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 9. 此检验和附加到生成的RIPEMD-160哈希上
- en: in step 4\.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在第4步。
- en: 10\. The resultant byte string is encoded into a Base58-encoded string
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 10. 结果字节字符串编码为Base58编码字符串
- en: by applying the Base58 encoding function.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 通过应用Base58编码函数。
- en: 11\. Finally, the result is a typical Bitcoin address.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 11. 最后，结果是典型的比特币地址。
- en: '**Transactions and UTXO Model**'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**交易和UTXO模型**'
- en: Transactions are the fundamental unit of operation in Bitcoin. Every transaction
    is
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 交易是比特币操作的基本单位。每个交易都是
- en: composed of at least one input and output. An unspent transaction output (UTXO)
    is the
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 至少由一个输入和输出组成。未消费的交易输出（UTXO）是
- en: basic unit of bitcoin transactions. The transaction inputs refer to the previous
    transaction’s UTXOs. The transaction output represents the transfer of ownership
    of unspent values.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币交易的基本单位。交易输入指的是前一个交易的UTXO。交易输出代表未使用数值的所有权转让。
- en: The account balance in bitcoin for an account is the sum of all unspent outputs
    belonging to that account. Therefore, UTXO always must have equal inputs and outputs.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 一个账户中比特币的账户余额是该账户拥有的所有未消费的输出的总和。因此，UTXO始终必须具有相等的输入和输出。
- en: A bitcoin transaction consumes inputs and creates outputs with specified values.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币交易消耗输入，并创建具有指定值的输出。
- en: Every input is an output from a previous transaction. This transaction model
    is shown in
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 每个输入都是先前交易的输出。此交易模型如图所示
- en: Figur[e 4-9\.](#p204)
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图[4-9.](#p204)
- en: '***Figure 4-9\.** Bitcoin transaction UTXO model*'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '***图4-9.**比特币交易UTXO模型*'
- en: 'The Bitcoin transaction life cycle is described as follows:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币交易生命周期描述如下：
- en: • A user creates a transaction.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: • 用户创建一个交易。
- en: • The transaction is signed by the owner(s) using the private key.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: • 交易由所有者使用私钥签名。
- en: '186'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '186'
- en: Chapter 4 BloCkChain
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章 区块链
- en: • The transaction is broadcast to the network using the gossip protocol.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: • 交易使用八卦协议广播到网络中。
- en: • All nodes verify the transaction and place it in their transaction pools.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: • 所有节点验证交易并将其放入其交易池中。
- en: • Miner nodes bundle up these transactions into a candidate block.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: • 矿工节点将这些交易捆绑到候选块中。
- en: • Mining starts and one of the miners that solves the proof of work
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: • 挖矿开始，其中一个解决工作证明的矿工
- en: problem wins the right to announce its block and earn bitcoins as
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 问题获得宣布其区块并赚取比特币的权利
- en: a reward.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 一个奖励。
- en: • Once the block is broadcast to the network, it is propagated across
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: • 区块一旦广播到网络，便在网络中传播
- en: the entire Bitcoin network.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 整个比特币网络。
- en: • After six confirmations (six blocks), the transaction is considered
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: • 在六次确认后（六个区块），交易被认为
- en: irrevocably final; however, it is possible to accept transactions even
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 不可撤销的结束，但是即使如此，也可以接受交易
- en: after the first confirmation.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次确认后。
- en: A transaction is made up of several fields. Table [4-1](#p205) shows all fields
    and their description.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 交易由几个字段组成。表 [4-1](#p205) 显示了所有字段及其描述。
- en: '***Table 4-1\.** Bitcoin transaction*'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '***表4-1\.** 比特币交易*'
- en: '**Field**'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '**字段**'
- en: '**Description**'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**'
- en: '**Size**'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '**大小**'
- en: Version no
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 版本号
- en: Currently 1
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 目前1
- en: 4 bytes
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 4字节
- en: Flag
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 旗帜
- en: Witness data indicator
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 证人数据指示器
- en: optional 2-byte array
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的两字节数组
- en: in-counter
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 并置
- en: number of inputs
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 输入数量
- en: 1–9 bytes
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 1-9字节
- en: list of inputs
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 输入列表
- en: inputs
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 输入
- en: Many inputs
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 许多输入
- en: out-counter
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 输出计数器
- en: number of outputs
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的数量
- en: 1–9 bytes
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 1-9字节
- en: list of outputs
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 输出列表
- en: outputs list
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 输出列表
- en: Many outputs
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 许多输出
- en: Witnesses
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 证人
- en: list of witnesses
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 证人列表
- en: Variable
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 变量
- en: lock_time
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 锁定时间
- en: Block height or timestamp until transaction is pending
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 直到交易挂起的区块高度或时间戳
- en: 4 bytes
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 4字节
- en: Transactions are of two types. On-chain transactions are native to the Bitcoin
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 交易有两种类型。在链上交易是比特币的本地交易
- en: network, and off-chain transactions are performed outside the blockchain network.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 网络，和离链交易是在区块链网络之外执行的。
- en: On-chain transactions occur on the blockchain network and are validated on-chain
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在链上交易在区块链网络上发生并在链上验证
- en: by network participants, whereas off-chain transactions use payment channels
    or
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 由网络参与者，而离链交易使用支付通道或
- en: '187'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '187'
- en: Chapter 4 BloCkChain
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章 区块链
- en: sidechains to perform transactions. On-chain transactions are slower, have privacy
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 侧链执行交易。在链上交易较慢，隐私性较高
- en: issues, and are not scalable. Off-chain mechanisms aim to solve these issues.
    One prime
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 问题，并且不可扩展。离链机制旨在解决这些问题。一个主要的
- en: example is the Bitcoin lightning network, which provides faster payments.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 示例是比特币闪电网络，它提供更快的支付。
- en: '**Bitcoin Script and Miniscript**'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '**比特币脚本和MiniScript**'
- en: A Bitcoin script is a non-Turing complete, stack-based language which is used
    to
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币脚本是一种非图灵完备的基于堆栈的语言，用于
- en: describe how bitcoins should be transferred. The scripts are evaluated from
    left to right in a LIFO stack. Scripts are composed of two components, elements
    and operations, as
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 描述比特币如何转移。脚本按照LIFO栈从左到右进行评估。脚本由两个组成部分组成，元素和操作，如
- en: shown in Figure [4-10\. E](#p207)lements represent data such as digital signatures,
    and operations are the actions that are performed by the script. Operations are
    coded as opcodes.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [图4-10\. E](#p207) 所示，元素表示数据，如数字签名，操作是脚本执行的动作。操作被编码为操作码。
- en: Opcodes include operational categories such as flow control, stack operations,
    bitwise
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 操作码包括操作类别，如流程控制，栈操作，位操作
- en: logical operations, arithmetic, cryptography operations, and lock time.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑操作，算术，加密操作和锁定时间。
- en: 'Some common opcodes are listed as follows:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的操作码列举如下：
- en: • **OP_CHECKSIG:** Takes a signature and a public key and verifies
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: • **OP_CHECKSIG:** 接受签名和公钥并验证
- en: the transaction’s ECDSA signature. If correct, then 1 is returned,
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 交易的ECDSA签名。如果正确，则返回1，
- en: otherwise 0\.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 否则为0。
- en: • **OP_DUP:** Takes the top item on the stack and duplicates it.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: • **OP_DUP:** 取栈顶项目并将其复制。
- en: • **OP_HASH160:** Calculates the SHA-256 and then RIPEMD 160-bit
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: • **OP_HASH160:** 计算SHA-256，然后RIPEMD 160位
- en: hash of the input.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 输入的哈希。
- en: • **OP_EQUAL:** Checks the equality of the top two items on the stack.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: • **OP_EQUAL:** 检查栈顶的两个项目是否相等。
- en: Outputs TRUE if equal, otherwise FALSE, on the stack.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 如果相等，输出TRUE，否则输出FALSE。
- en: • **OP_VERIFY:** Checks if the top item on the stack is false; if it is, the
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: • **OP_VERIFY:** 检查栈顶的项目是否为假；如果是，则
- en: script terminates and outputs failure.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本终止并输出失败。
- en: • **OP_EQUALVERIFY:** First runs OP_EQUAL and then OP_VERIFY.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: • **OP_EQUALVERIFY:** 首先运行OP_EQUAL，然后运行OP_VERIFY。
- en: • **OP_RETURN:** Terminates the script, outputs fail, and marks the
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: • **OP_RETURN:** 终止脚本，输出失败，并标记
- en: transaction invalid.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 交易无效。
- en: • **OP_ADD:** Takes two inputs and performs sum operation.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: • **OP_ADD:** 接受两个输入并执行求和操作。
- en: A script is a combination of a locking script called ScriptPubKey and an unlocking
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本是由称为ScriptPubKey的锁定脚本和一个解锁脚本组成
- en: script called ScriptSig, as shown in Figure [4-10\. O](#p207)utputs are locked
    by ScriptPubKey, which contains the unlocking conditions for the output. In other
    words, locking means
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本名为ScriptSig，如图 [4-10\. O](#p207)utputs 由ScriptPubKey锁定，其中包含输出的解锁条件。换句话说，锁定意味着
- en: giving bitcoins to someone, and unlocking means consuming the received bitcoins.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 给某人比特币，解锁意味着消耗获得的比特币。
- en: '188'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '188'
- en: '![](index-207_1.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![](index-207_1.png)'
- en: '![](index-207_2.png)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![](index-207_2.png)'
- en: Chapter 4 BloCkChain
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章 区块链
- en: '***Figure 4-10\.** Bitcoin script (unlocking + locking) diagram*'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '***图 4-10.** 比特币脚本（解锁+锁定）图解*'
- en: There are several types of scripts in Bitcoin. The most common is Pay-to-Public-Key-
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币有几种类型的脚本。最常见的是付款给公钥
- en: Hash (P2PKH), which is used to send a transaction to a bitcoin address. The
    format of
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: Hash（P2PKH），用于将交易发送到比特币地址。格式
- en: 'this script is shown as follows:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '这个脚本如下所示:'
- en: 'ScriptPubKey: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 'ScriptPubKey: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG'
- en: 'ScriptSig: <sig> <pubKey>'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: ScriptSig：<sig> <pubKey>
- en: Both ScriptPubKey and ScriptSig are combined and executed, as shown in
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: ScriptPubKey和ScriptSig都被合并并执行，如图所示
- en: Figur[e 4-11\.](#p207)
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-11\.](#p207)
- en: '***Figure 4-11\.** Bitcoin P2PKH script execution*'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '***图 4-11.** 比特币P2PKH脚本执行*'
- en: While the bitcoin script is the original method of transferring payments, and
    it works
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然比特币脚本是支付的原始方法，并且它有效
- en: well, it is not much flexible. There is a language developed for bitcoin which
    supports
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，它没有太多的灵活性。比特币开发了一种支持
- en: development of smart contracts. The language is called **Ivy**. A solution to
    make writing scripts easier and in a more structured way is the bitcoin **miniscript**.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约的发展。这种语言叫做**Ivy**。一个解决方案就是让编写脚本更容易，更有结构化的方式就是比特币的**miniscript**。
- en: '189'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '189'
- en: '![](index-208_1.png)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
  zh: '![](index-208_1.png)'
- en: Chapter 4 BloCkChain
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章 区块链
- en: '**Blocks and Blockchain**'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '**块和区块链**'
- en: A blockchain is composed of blocks. Blocks are composed of a block header and
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链由块组成。块由块头和
- en: transactions. A block header consists of several fields. The first block in
    the Bitcoin
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 交易。块头由几个字段组成。比特币中的第一个块
- en: blockchain is called the genesis block, which doesn’t link back to any block,
    being the
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链称为创世块，它不链接到任何块，成为
- en: first block. It is usually hardcoded in the software clients.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个块。通常在软件客户端中硬编码。
- en: We can see a complete visualization of blocks, block headers, transactions,
    and
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到完整的块、块头、交易和
- en: scripts in Figure [4-12](#p208).
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在图 [4-12](#p208)中的脚本。
- en: '***Figure 4-12\.** A visualization of a Bitcoin blockchain, blocks, block headers,*'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '***图 4-12.** 比特币区块链、块、块头可视化*'
- en: '*transactions, and scripts*'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '*交易和脚本*'
- en: The FLM[1 im](#p208)possibility states that Byzantine consensus is not possible
    if an *n*
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: FLM[1不可能性](#p208)指出，如果一个*n*，拜占庭共识不可能实现
- en: adversary can control more than nodes. In the case of the PKI setup, this lower
    bound
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 对手可以控制比节点多。对于PKI设置来说，这个下限
- en: '3'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: does not hold. It turns out that Bitcoin circumvents FLM impossibility. In proof
    of work
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 并不成立。事实证明比特币绕过了FLM的不可能性。在工作证明中
- en: environments, a Byzantine agreement is possible without the PKI [2s](#p208)etup.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 环境，拜占庭协议是可能的，不需要PKI [2s](#p208)etup。
- en: '1 After the authors’ names: Fischer, Lynch, and Merritt – [https://groups.csail.mit.edu/tds/](https://groups.csail.mit.edu/tds/papers/Lynch/FischerLynchMerritt-dc.pdf)'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 1 作者姓名后面：Fischer、Lynch和Merritt – [https://groups.csail.mit.edu/tds/](https://groups.csail.mit.edu/tds/papers/Lynch/FischerLynchMerritt-dc.pdf)
- en: '[papers/Lynch/FischerLynchMerritt-dc.pdf](https://groups.csail.mit.edu/tds/papers/Lynch/FischerLynchMerritt-dc.pdf)'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '[papers/Lynch/FischerLynchMerritt-dc.pdf](https://groups.csail.mit.edu/tds/papers/Lynch/FischerLynchMerritt-dc.pdf)'
- en: 2 Public Key Infrastructure.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 2 公钥基础设施。
- en: '190'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '190'
- en: Chapter 4 BloCkChain
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章 区块链
- en: '**Mining**'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '**挖矿**'
- en: Mining is the process by which new coins are added to the Bitcoin blockchain.
    This
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 挖矿是将新币添加到比特币区块链的过程。这
- en: process secures the network and incentivizes the users who spend resources to
    protect
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 过程保护网络并激励用户投入资源保护
- en: the network. More details on the specifics are in Chapter [5; ho](https://doi.org/10.1007/978-1-4842-8179-6_5)wever,
    now I will touch upon the mining hardware. When Bitcoin was introduced, it was
    easy to mine with
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 网络。关于具体细节，请参阅第[5; ho](https://doi.org/10.1007/978-1-4842-8179-6_5)wever，现在我将谈及挖矿硬件。当Bitcoin推出时，挖矿很容易
- en: CPUs, which quickly increased the difficulty, leading to miners using GPUs.
    Shortly
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: CPU，迅速增加了难度，导致矿工使用GPU。很快
- en: after the successful adoption of GPUs, FPGAs emerged as a mechanism to further
    speed
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 成功采用GPU后，FPGA作为一种进一步加速的机制出现
- en: up SHA-256 hashing. Soon, these were outperformed by ASICs, and now ASICs are
    a
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 上SHA-256哈希。很快，这些被ASIC取代，现在ASIC是一个
- en: prevalent mechanism to mine Bitcoin. However, solo mining where individual users
    use
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 挖掘比特币的普遍机制被认可。然而，个人用户采用的
- en: mining hardware to mine is also not much profitable due to exorbitant mining
    difficulty.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 由于极高的挖矿难度，使用挖矿硬件进行挖矿也不太赚钱。
- en: Instead, mining farms comprising thousands of ASICs are commonly used now. Also,
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，现在常用的是包括成千上万个ASIC的挖矿场。另外，
- en: mining pools are common where multiple users collectively solve the hash puzzle
    to
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 挖矿池很常见，多个用户共同解决哈希难题
- en: earn rewards proportionate to their contribution.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 按照他们的贡献来获得奖励。
- en: '**Bitcoin As a Platform**'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '**比特币作为一个平台**'
- en: Other than electronic cash, Bitcoin as a platform can be used for several use
    cases. For
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 除了电子现金，比特币作为一个平台可以用于几种用例。对
- en: example, it can be used as a timestamping service or a general ledger to store
    some
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可以用作时间戳服务或存储一些通用分类账的常见
- en: information permanently. In addition, we can use the OP_RETURN instruction to
    store
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 信息。此外，我们可以使用OP_RETURN指令存储
- en: data, which can store up to 80 bytes of arbitrary data. Other use cases such
    as smart
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 数据，可以存储高达80字节的任意数据。其他用例，如智能
- en: property, smart assets, and blocks as a source of randomness also transpired.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 资产，智能资产和块作为随机性来源也出现了。
- en: The desire to use Bitcoin for different purposes also resulted in techniques
    to
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 渴望将比特币用于不同的目的也导致了技术的出现
- en: enhance Bitcoin, resulting in colored coins, rootstock, Omni layer, and counterparty
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 增强比特币，导致着色币、根股、Omni层和对手方
- en: projects. While Bitcoin did what it intended to do and a lot more in the form
    of
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 项目。尽管比特币做了它打算做的事情以及更多的
- en: innovations mentioned earlier, the fundamental limitation in Bitcoin protocols
    meant
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到的创新，比特币协议中的基本限制意味着
- en: that all flexible new protocols would have to be built on top of Bitcoin. There
    is no
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 所有灵活的新协议都需要在比特币之上构建。没有
- en: inherent flexibility in Bitcoin to perform all these different tasks. Therefore,
    there was a need felt to do more than just cryptocurrency on Blockchain. This
    ambition motivated
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币内在的灵活性可以执行所有这些不同的任务。因此，有必要做的不仅仅是区块链上的加密货币。这种雄心激励
- en: the invention of Ethereum, the first general-purpose blockchain platform that
    supported
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊的发明，第一个支持
- en: smart contracts.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约。
- en: '191'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '191'
- en: Chapter 4 BloCkChain
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章区块链
- en: '**Ethereum**'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '**以太坊**'
- en: Ethereum was introduced in 2014 in a whitepaper by Vitalik Buterin. Ethereum
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊由Vitalik Buterin在2014年提出的白皮书中提出。以太坊
- en: introduced a platform on which users can run arbitrary code in the form of smart
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 推出了一个平台，用户可以以智能合约的形式运行任意代码
- en: contracts. To thwart the denial-of-service attacks caused by infinite loops
    in code, the
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 合约。为了防止由代码中的无限循环引起的拒绝服务攻击，目前
- en: concept of metered execution was also introduced. Metered executions require
    that
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 其概念还引入了计量执行。计量执行要求
- en: for every operation performed on the blockchain, a fee is charged, which is
    paid in
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 对链上的每次操作都收取手续费，该费用用
- en: Ether, the native currency of the Ethereum blockchain. With smart contracts,
    Ethereum
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊区块链的本地货币。通过智能合约，以太坊
- en: opened a whole new world of generic platforms where the operations are no longer
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 打开了一个全新的通用平台世界，其中运营不再
- en: limited to only bitcoin-style value transfer transactions, but users can execute
    any type of diverse business logic on-chain due to Ethereum’s Turing complete
    design. Ethereum is
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅仅限于比特币风格的价值转移交易，而且由于以太坊的图灵完全设计，用户可以在链上执行任何类型的多样化业务逻辑。以太坊是
- en: currently the most used blockchain platform for smart contracts.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 目前智能合约最常用的区块链平台。
- en: Today’s Internet is centralized, which is dominated by large companies. The
    Internet
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的互联网是中心化的，由大公司主导。互联网
- en: that we use today is called Web 2\. Ethereum is developed with the vision of
    Web3, where
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 我们今天使用的互联网模式称为Web 2\. 以太坊的开发目标是Web3，其中
- en: anyone can participate in the network without any reliance on a third party.
    In the Web
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 任何人都可以在没有任何依赖第三方的情况下参与网络。在Web
- en: 2 model, big service providers currently provide services in return for personal
    data;
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 2模型，大型服务提供商目前提供服务以换取个人数据；
- en: however, in Web3, anyone can participate without giving up their personal information
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在Web3中，任何人都可以参与而不必放弃他们的个人信息
- en: in exchange for services. However, with decentralized applications (DApps),
    anyone can
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 以换取服务。然而，使用分散应用（DApps），任何人都可以
- en: provide any service which any user on the network can use, and no one can block
    your
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 提供任何用户在网络上可以使用的任何服务，没有人可以阻止您
- en: access to the service.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 访问服务。
- en: '**Ethereum Network**'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '**以太坊网络**'
- en: An Ethereum network is composed of loosely coupled nodes which exchange messages
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊网络由松散耦合的节点组成，这些节点交换消息
- en: via a gossip protocol.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一种流言协议。
- en: A high-level visualization of the Ethereum network is shown in Figure [4-13\.](#p211)
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊网络的高级可视化如图[4-13\.](#p211)所示
- en: '192'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '192'
- en: '![](index-211_1.png)'
  id: totrans-404
  prefs: []
  type: TYPE_IMG
  zh: '![](index-211_1.png)'
- en: Chapter 4 BloCkChain
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章 区块链
- en: '***Figure 4-13\.** Ethereum network high-level overview*'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '***图4-13\.** 以太坊网络高级概述*'
- en: Nodes run client software which is an implementation of the Ethereum blockchain
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 节点运行客户端软件，这是以太坊区块链的实现
- en: protocol described in the yellow paper to enable any user to participate on
    the network.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 在黄皮书中描述的协议使任何用户能够参与网络。
- en: A node is composed of different components, as shown in Figur[e 4-14](#p212).
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 节点由不同组件组成，如图[4-14](#p212)所示
- en: '193'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '193'
- en: '![](index-212_1.png)'
  id: totrans-411
  prefs: []
  type: TYPE_IMG
  zh: '![](index-212_1.png)'
- en: Chapter 4 BloCkChain
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章 区块链
- en: '***Figure 4-14\.** Ethereum node architecture*'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '***图4-14\.** 以太坊节点结构*'
- en: 'There are three main types of nodes in the Ethereum network:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊网络主要有三种节点类型：
- en: • Full node
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: • 完整节点
- en: • Light node
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: • 轻节点
- en: • Archive node
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: • 存档节点
- en: Full nodes store the entire chain data and validate blocks, transactions, and
    states.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 完整节点存储整个链数据并验证块，交易和状态。
- en: Light nodes only store the block headers and verify the data against state roots
    present
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 轻节点仅存储块头并根据状态根验证数据
- en: in the block headers. Light nodes are suitable for resource-constrained devices,
    such as
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 在区块头中。轻节点适用于资源受限设备，如
- en: mobile devices. Archive nodes include everything that is in a full node but
    also builds
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备。存档节点包括完整节点中的所有内容，但还构建
- en: an archive of historical states. Miner nodes are a full node but also perform
    mining
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 历史状态的存档。矿工节点是完整节点，还执行挖矿
- en: operation and participate in proof of work consensus.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 运营并参与工作量证明共识。
- en: '194'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '194'
- en: '![](index-213_1.png)'
  id: totrans-425
  prefs: []
  type: TYPE_IMG
  zh: '![](index-213_1.png)'
- en: Chapter 4 BloCkChain
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章 区块链
- en: A new Ethereum node joining the network uses hardcoded bootstrap nodes
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 加入网络的新以太坊节点使用硬编码的引导节点
- en: as an initial entry point into the network from where the further discovery
    of other
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 作为网络的初始进入点，从那里可以进一步发现其他
- en: nodes begins.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 节点开始。
- en: RLPx is a TCP-based transport protocol. It enables secure communication between
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: RLPx是基于TCP的传输协议。它实现了客户端节点之间的安全通信
- en: Ethereum nodes by using the Elliptic Curve Integrated Encryption Scheme (ECIES)
    for
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊节点使用椭圆曲线集成加密方案（ECIES）进行
- en: handshaking and key exchange.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 握手和密钥交换。
- en: DEVP2P or the wire protocol negotiates an application session between two
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: DEVP2P或线协议在两者之间协商一个应用会话
- en: Ethereum nodes that have been discovered and have established a secure channel
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 已经被发现并建立了安全通道的以太坊节点
- en: using RLPx.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 使用RLPx。
- en: After discovering and establishing a secure transport channel and negotiating
    an
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 发现并建立安全传输通道并协商一个后
- en: application session, the nodes exchange messages using “capability protocols,”
    for
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 应用会话，节点使用“能力协议”交换消息，用于
- en: example, eth (versions 62, 63, and 64), Light Ethereum Subprotocol (LES), Whisper,
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，ETH（版本62、63和64）、轻量级以太坊子协议（LES）、Whisper，
- en: and Swarm. These capability protocols or application subprotocols enable different
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 和Swarm。这些能力协议或应用子协议使不同
- en: application-level communications, for example, eth for block synchronization.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 应用级通信，例如，ETH用于块同步
- en: The node discovery protocol and other relevant protocols are shown in Figure
    [4-15](#p213).
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 节点发现协议和其他相关协议如图[4-15](#p213)所示
- en: '***Figure 4-15\.** Node discovery and other protocols*'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '***图4-15\.** 节点发现和其他协议*'
- en: '195'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '195'
- en: Chapter 4 BloCkChain
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章 区块链
- en: '**Cryptography in Ethereum**'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '**以太坊中的加密**'
- en: Like any other blockchain, Ethereum’s security relies on cryptography. Ethereum
    uses
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他任何区块链一样，以太坊的安全性依赖于加密。以太坊使用
- en: 'cryptography throughout the blockchain and node design:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 整个区块链和节点设计中使用的加密技术：
- en: • AES CTR is used in RLP handshake and subsequent P2P messaging.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: • AES CTR用于RLP握手和后续P2P消息。
- en: It is also used in a keystore as AES CTR 128-bit cipher.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 它还在keystore中用作AES CTR 128位密码。
- en: • Digital signatures in Ethereum clients use the SECP256K1 curve.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: • 以太坊客户端中的数字签名使用SECP256K1曲线
- en: It is used in ECDSA signatures for transaction signing, ECDH key
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 用于ECDSA签名进行交易签名，ECDH密钥
- en: exchanges, and for generating a shared key before the RLP P2P
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 交易所，以及在RLP P2P之前生成共享密钥
- en: handshake.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 握手。
- en: • SCRYPT and PBKDF2 are used as key derivation functions in the
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: • SCRYPT和PBKDF2用作密钥派生函数
- en: keystore.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥库。
- en: • The KECCAK-256 hash function is used in the proof of work
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: • KECCAK-256哈希函数用于工作量证明
- en: algorithm for mining and solidity language.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 挖矿算法和solidity语言。
- en: • The Elliptic Curve Integrated Encryption Scheme (ECIES) is used in
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: •椭圆曲线集成加密方案（ECIES）用于
- en: Ethereum.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊。
- en: if the terms mentioned earlier sound unfamiliar, refer to Chapter [2](https://doi.org/10.1007/978-1-4842-8179-6_2)
    where we covered cryptography in detail.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面提到的术语听起来陌生，请参考第[2](https://doi.org/10.1007/978-1-4842-8179-6_2) 章节，我们在这里详细介绍了密码学。
- en: '**Accounts and Addresses**'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '**账户和地址**'
- en: A Bitcoin model is based on transactions, whereas Ethereum is based on accounts.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币模型基于交易，而以太坊基于账户。
- en: Accounts are part of the Ethereum state and keep an intrinsic balance and transaction
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 账户是以太坊状态的一部分，并保持内在平衡和交易
- en: count. 160-bit long addresses identify accounts. An account is how a user interacts
    with
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 计数。 160位长的地址标识账户。用户与账户交互的方式
- en: the blockchain. A transaction signed by an account is verified and broadcast
    to the
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链。由账户签署的交易会经过验证并广播到
- en: network, which results in a state transition on the blockchain once executed.
    There are
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 网络，一旦执行即在区块链上进行状态转换。有
- en: two types of accounts, contract accounts (CAs) and externally owned accounts
    (EOAs).
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 两种类型的账户，合同账户（CAs）和外部所有权账户（EOAs）。
- en: EOAs are associated with a human user, whereas CAs have no intrinsic association
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: EOAs与人类用户关联，而CAs没有内在关联
- en: with a user.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 与用户。
- en: '196'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '196'
- en: Chapter 4 BloCkChain
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章区块链
- en: A world state is a mapping between addresses and account states. An account
    state
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 世界状态是地址和账户状态之间的映射。一个账户状态
- en: consists of the fields shown in Table [4-2](#p215).
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 包括表[4-2](#p215)中显示的字段。
- en: '***Table 4-2\.** Account state*'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '***表4-2\.** 账户状态*'
- en: '**Element**'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '**元素**'
- en: '**Description**'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '**说明**'
- en: nonce
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: nonce
- en: number of transactions originated from an address or, in the case of smart contracts,
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 来自某一地址的交易数量，或者在智能合同的情况下，
- en: the number of contracts created by an account
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 一个账户创建的合同的数量
- en: Balance
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 余额
- en: number of Wei owned by this address
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 由这个地址拥有的Wei数量
- en: Storageroot 256-bit hash of the root node of the Merkle patricia trie, which
    encodes the storage contents of the account
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: Storageroot Patricia Trie的根节点的256位哈希值，编码了账户存储的内容
- en: codehash
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: codehash
- en: hash of the associated eVM code (bytecode)
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 关联EVM代码（字节码）的哈希值
- en: '**Transactions and Executions**'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '**交易和执行**'
- en: Transactions in Ethereum are signed instructions which once executed result
    in a
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊中的交易是已签名的指令，一旦执行就会产生
- en: message call or contract creation (new account with associated code) on the
    blockchain.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链上的消息调用或合同创建（带有关联代码的新账户）。
- en: 'Fundamentally, there are two types of transactions, **message call** and **contract
    creation**, but over time for easier understanding, three types are now usually
    defined:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 从根本上讲，有两种类型的交易，**消息调用**和**合同创建**，但随着时间的推移，为了更容易理解，现在通常定义了三种类型：
- en: • Value transfer transactions
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: •价值转移交易
- en: • Contract creation transactions
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: • 合同创建交易
- en: • Contract execution transactions
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: • 合同执行交易
- en: A transaction consists of several fields. Each transaction is part of the transaction
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 一个交易由几个字段组成。 每个交易都是交易的一部分
- en: trie, the root of which is stored in the block header in the block. When a transaction
    is executed, a receipt is returned which can be used as a verification for the
    transaction
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: Trie，其根存储在区块头中。当执行交易时，会返回一个收据，可以用作交易的验证
- en: execution.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 执行。
- en: A transaction, either a message call or a contract creation, includes the common
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 交易，无论是消息调用还是合同创建，都包括常见的
- en: fields shown in Table [4-3](#p216).
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 表[4-3](#p216)中显示的字段。
- en: '197'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '197'
- en: Chapter 4 BloCkChain
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章区块链
- en: '***Table 4-3\.** Transaction structure*'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '***表4-3\.** 交易结构*'
- en: '**Element**'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '**元素**'
- en: '**Description**'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '**说明**'
- en: nonce
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: nonce
- en: number of transactions sent by the sender
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 发件人发送的交易数量
- en: gasprice
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: gasprice
- en: number of Wei to be paid per unit of gas for the execution of the transaction
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 单位燃气的Wei数量，用于执行交易
- en: gaslimit
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: gaslimit
- en: Maximum amount of gas that is expected to be used for executing a transaction.
    it is
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 预计用于执行交易的最大燃气量。它是
- en: paid up front and cannot be increased later
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 预付且不可后期增加
- en: to
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 对
- en: the 160-bit address of the message call’s (value transfer, contract execution)
    recipient
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 消息调用的（价值转移，合同执行）接收者的160位地址
- en: or for a contract creation transaction
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 或用于合同创建交易
- en: value
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 价值
- en: number of Wei to be transferred to the message call’s recipient. in the case
    of contract
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 要转移到消息调用的接收者的Wei数量。在合同创建交易的情况下
- en: creation, it is the endowment (number of Wei) for the newly created contract
    account
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 创建，这是新创建合同账户的受赠金（Wei数量）
- en: (smart contract)
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: （智能合同）
- en: V, r, S
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: V，r，S
- en: Values corresponding to the signature of the transaction used to determine the
    sender
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 用于确定发送者的交易签名对应的值
- en: of the transaction
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 交易
- en: init
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化
- en: (in the case of contract creation transaction) an unlimited size byte array
    specifying
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: （在合同创建交易的情况下）指定一个无限大小的字节数组
- en: the eVM code for the contract account (smart contract) initialization procedure
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 合同账户（智能合同）初始化过程的eVM代码
- en: data
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 数据
- en: (in the case of message call transaction) an unlimited size byte array specifying
    the
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: （在消息调用交易的情况下）指定一个无限大小的字节数组
- en: input data of the message call
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 消息调用的输入数据
- en: A transaction takes several steps in the Ethereum blockchain. A high-level
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊区块链中交易需要经过几个步骤。一个高级
- en: 'transaction flow is described as follows:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 交易流程描述如下：
- en: 1\. First, a transaction is created. It can either be a contract creation
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 首先，创建一个交易。它可以是合同创建
- en: transaction or a message call.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 交易或消息调用。
- en: 2\. The transaction is signed using ECDSA, verified, and broadcast to
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 交易使用ECDSA进行签名、验证并广播到
- en: the network.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 网络。
- en: 3\. The transaction is propagated via a gossip protocol and picked up
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 交易通过传播协议传播，并被接收到
- en: by miners and other nodes to populate their transaction pools.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 由矿工和其他节点创建以填充其交易池。
- en: 4\. Miners create a candidate block by adding transactions to it and
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 矿工通过添加交易来创建候选区块，并
- en: start the mining process.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 启动挖矿过程。
- en: 5\. A miner who solves the proof of work announces its block to the
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 解决工作证明的矿工向
- en: network.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 网络。
- en: 6\. Other nodes receive the block, validate it, and append it to their
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 其他节点接收该区块，验证它，然后将其附加到它们的
- en: blockchain.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链。
- en: '198'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '198'
- en: Chapter 4 BloCkChain
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章区块链
- en: '**Blocks and Blockchain**'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '**区块和区块链**'
- en: Blocks in Ethereum are composed of a block header and transactions. A blockchain
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊中的区块由区块头和交易组成。一个区块链
- en: consists of blocks, which contain transactions.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 由包含交易的区块组成。
- en: Like any other blockchain, blocks are the main building blocks of Ethereum.
    An
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 像任何其他区块链一样，区块是以太坊的主要构建模块。一个
- en: Ethereum block consists of the block header, the list of transactions, and the
    list of
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊区块由区块头、交易列表和
- en: ommer block headers. A block header also consists of several elements. All these
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 叔块头。一个区块头也由几个元素组成。所有这些
- en: elements in a block are shown in Tables [4-4 and 4-5 w](#p217)ith a description.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 区块中的元素显示在表格[4-4和4-5 w](#p217)ith a description中。
- en: '***Table 4-4\.** Block structure*'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: '***表4-4\.** 区块结构*'
- en: '**Element**'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '**元素**'
- en: '**Description**'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**'
- en: Block header
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 区块头
- en: header of the block
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 区块的头部
- en: list of transactions
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 交易列表
- en: Series of transactions included in the block
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 包含在区块中的一系列交易
- en: list of ommer block
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 叔块列表
- en: list of uncle or ommer headers. an uncle block is a child of a parent but
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 叔块头或叔块头列表。叔块是父块的子块，但是
- en: headers
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 头部
- en: doesn’t have any child blocks. they are valid but stale blocks which do not
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 没有任何子区块。它们是有效的但过时的区块，不
- en: make it to the main chain but do earn a reward for their participation
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它不能进入主链，但却能因参与奖励。
- en: The block header structure is described in Ta[ble 4-5\.](#p217)
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 区块头结构在Ta[ble 4-5\.](#p217)
- en: '***Table 4-5\.** Block header structure*'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '***表4-5\.** 区块头结构*'
- en: '**Element**'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '**元素**'
- en: '**Type**'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**'
- en: '**Description**'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**'
- en: parent hash
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 父哈希
- en: hash
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希
- en: keccak 256-bit hash of the parent block’s header
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 区块的父区块的keccak 256位哈希
- en: ommers hash
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 叔块哈希
- en: hash
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希
- en: keccak 256-bit hash of the list of ommers
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 交易列表的keccak 256位哈希
- en: Beneficiary
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 受益人
- en: address
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 地址
- en: 160-bit recipient address for mining reward
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 160位挖矿奖励接收地址
- en: State root
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 状态根
- en: hash
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希
- en: keccak 256-bit hash of the root node of the transaction trie
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 交易前置节点的keccak 256位哈希
- en: transaction root hash
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 交易根哈希
- en: keccak 256-bit hash of the root node of the transaction trie
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 交易前置节点的keccak 256位哈希
- en: receipts root
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 收据根
- en: hash
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希
- en: keccak 256-bit hash of the root node of the transaction receipts trie,
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 交易收据前置节点的keccak 256位哈希，
- en: which contains receipts of all transactions included in the block
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 包含了区块中所有交易的收据
- en: logs bloom
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 日志布隆
- en: Variable
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 可变
- en: Bloom filter composed logger address and log topics
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 布隆过滤器由记录器地址和日志主题组成
- en: Difficulty
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 难度
- en: integer
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 整数
- en: Difficulty level of the current block
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 当前块的难度级别
- en: number
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 缩写
- en: integer
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 整数
- en: total number of all previous blocks
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 所有先前块的总数
- en: ( *continued*)
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: （*续*)
- en: '199'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '199'
- en: Chapter 4 BloCkChain
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章 区块链
- en: '***Table 4-5\.*** ( *continued*)'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: '***表4-5\.*** （*续*)'
- en: '**Element**'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '**元素**'
- en: '**Type**'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**'
- en: '**Description**'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**'
- en: Gas limit
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 燃气限制
- en: integer
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 整数
- en: limit set on the gas consumption per block
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 对每个块的燃气消耗设置限制
- en: Gas used
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 消耗的燃气
- en: integer
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 整数
- en: total gas consumed by all transactions included in the block
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 所有包含在块中的交易消耗的总燃气
- en: timestamp
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳
- en: integer
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 整数
- en: Unix epoch timestamp
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: Unix纪元时间戳
- en: extra
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 额外的
- en: Variable
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 可变
- en: an optional free field for storing extra data
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 用于存储额外数据的可选自由字段
- en: Mixhash
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: Mixhash
- en: integer
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 整数
- en: Computational effort proof
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 计算工作证明
- en: nonce
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 随机数
- en: integer
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 整数
- en: Combined with Mixhash to prove computational effort
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 与Mixhash结合以证明计算工作
- en: basefeepergas
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 每单位燃气的基本费用
- en: integer
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 整数
- en: (post eip-1559) records the protocol calculated fee required for a
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: （eip-1559后）记录了协议计算出的需要的费用
- en: transaction to be included in the block
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 要包含在块中的交易
- en: Ethereum uses a new data structure called Merkle Patricia trie to store and
    organize
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊使用一种称为Merkle Patricia trie的新数据结构来存储和组织
- en: transactions and relevant data. It is a combination of Patricia and Merkle trees
    with novel properties.
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 交易和相关数据。它是带有新属性的Patricia和Merkle树的组合。
- en: There are four tries used in Ethereum to organize data such as transactions,
    state,
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊中有四个尝试用于组织数据，如交易，状态，
- en: receipts, and contract storage.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 收据和合同存储。
- en: '**Transaction Trie**'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: '**交易尝试**'
- en: Each Ethereum block contains the root of a transaction trie, which is composed
    of
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 每个以太坊块包含一个交易尝试的根，该根由
- en: transactions.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 交易。
- en: '**World State Trie**'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: '**世界状态尝试**'
- en: A state trie is a key-value mapping from user addresses to an account state.
    Also called
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 状态尝试是一个从用户地址到账户状态的键值映射。也称为
- en: the world state trie, this trie has its root referred in the block. A state
    trie is composed of account states.
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 世界状态尝试，这个尝试的根在块中被引用。状态尝试由账户状态组成。
- en: '**Transaction Receipts Trie**'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '**交易收据尝试**'
- en: Transaction receipts store results of transaction execution and include information
    such
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 交易收据存储交易执行的结果，并包括信息
- en: as status, logs, and events. Each block contains a transaction receipts trie.
    A transaction receipts trie consists of transaction receipts.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 作为状态，日志和事件。每个块包含一个交易收据尝试。交易收据尝试由交易收据组成。
- en: '200'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: '200'
- en: '![](index-219_1.png)'
  id: totrans-635
  prefs: []
  type: TYPE_IMG
  zh: '![](index-219_1.png)'
- en: Chapter 4 BloCkChain
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章 区块链
- en: '**Account Storage Trie**'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: '**账户存储尝试**'
- en: This trie has its root as a storage root in the account state. It stores smart
    contract code and relevant data.
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 这个尝试以账户状态中的存储根为根。它存储智能合约代码和相关数据。
- en: Figur[e 4-16 sho](#p219)ws all tries including the block structure.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 图 [4-16 sho](#p219) 包括所有尝试，包括区块结构。
- en: '***Figure 4-16\.** Block and tries*'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '***图4-16\.** 区块和尝试*'
- en: Transactions within the blocks are executed using the Ethereum virtual machine,
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 块内的交易是使用以太虚拟机执行的，
- en: which we describe next.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来描述。
- en: '**Mining in Ethereum**'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: '**以太坊挖矿**'
- en: In contrast with Bitcoin, mining in Ethereum is ASIC (application-specific integrated
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 与比特币相比，以太坊中的挖矿是ASIC（特定应用集成电路
- en: circuit) resistant.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 电路）抵抗。
- en: ASIC-based, special-purpose, efficient, and extremely fast hardware is built
    for
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 基于ASIC、专用、高效和极快硬件是为挖掘比特币而
- en: performing Bitcoin mining. These devices have only one specific job, and that
    is to run
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 进行比特币挖掘。这些设备只有一个具体的工作，即运行
- en: hash function SHA-256 repeatedly and extremely fast.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希函数SHA-256重复并极快地。
- en: Ethereum uses proof of work; however, the consensus is memory-hard, which
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊使用工作证明；然而，共识是内存硬，这
- en: makes building ASICs difficult due to large memory requirements. The protocol
    is called
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 使得由于大内存需求而难以建立ASIC。这个协议被称为
- en: ETHASH, which generates a large direct acyclic graph (DAG) to be used by miners.
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: ETHASH，生成一个大的有向无环图（DAG），供矿工使用。
- en: '201'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: '201'
- en: Chapter 4 BloCkChain
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章 区块链
- en: DAG grows and shrinks according to the network difficulty level; however, over
    time, it
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: DAG根据网络难度级别而增长和缩小；然而，随着时间的推移，
- en: has increased up to roughly about 4 GB in size. As this DAG consumes large memory,
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 已经增加到约4 GB大小。由于这个DAG消耗了大量内存，
- en: building ASICs with such large memory is prohibitively hard, thus making ETHASH
    an
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 建立这样大内存的ASICs非常困难，因此使ETHASH成为
- en: ASIC-resistant algorithm. We will explain ETHASH in more detail in Chapter [8\.](https://doi.org/10.1007/978-1-4842-8179-6_8)
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 专用应用集成电路抗性算法。我们将在第[8\.](https://doi.org/10.1007/978-1-4842-8179-6_8)章中详细解释ETHASH
- en: '**Ethereum Virtual Machine and Smart Contracts**'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: '**以太坊虚拟机和智能合约**'
- en: The Ethereum virtual machine (EVM) is the core working horse of the Ethereum
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊虚拟机（EVM）是以太坊的核心工作马
- en: blockchain. It is a 256-bit register stack with a depth of 1024 items. It is
    designed to run the smart contract code compiled into bytecode. Smart contracts
    are usually written in a
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链。它是一个256位的寄存器堆，深度为1024项。它被设计用来运行编译成字节码的智能合约代码。智能合约通常是用一种
- en: domain-specific language (DSL) called Solidity; however, there are other languages,
    such
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 领域特定语言（DSL）叫做 Solidity；然而，也有其他语言
- en: as Vyper, which developers can also use to write smart contract code.
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 如Vyper，开发人员也可以使用它来编写智能合约代码。
- en: We can define a **smart contract** as a secure and unstoppable computer program
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将**智能合约**定义为一个安全不可阻挡的计算机程序
- en: representing an automatically executable and enforceable agreement. Smart contracts
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 代表自动可执行和可执行协议。智能合同
- en: do not necessarily need a blockchain; however, a blockchain is the most natural
    platform
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 不一定需要区块链；但是，区块链是最自然的平台
- en: for running smart contracts. This is so because a blockchain provides all security
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行智能合约。这是因为区块链提供了所有的安全性
- en: guarantees that make smart contracts secure, unstoppable, automatically executable,
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 保证使智能合同安全，不可阻挡，自动执行，
- en: and enforceable.
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 并可执行。
- en: EVM is designed to be Turing complete; however, it is bound by a gas limit,
    which
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: EVM被设计为图灵完备；但是，它受到燃气限制的限制
- en: means that its execution is metered and paid for in the so-called gas fee denominated
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 意味着其执行是计量的，并且通过所谓的燃气费用支付
- en: in ether. This mechanism allows for any arbitrary code execution but with the
    safety
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 以太。这种机制允许执行任意代码，但具有安全性
- en: 'that the execution will halt when the gas runs out, preventing infinite executions
    due to loops or malicious code. EVM executes bytecode composed of **opcodes**
    that cost gas on a per-operation basis. There are around 150 opcodes categorized
    into several groups:'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 当燃气用尽时，执行会停止，防止由于循环或恶意代码而发生无限执行。EVM执行由成本基础上的opcode组成的字节码。约有150个操作码分为几个组：
- en: arithmetic opcodes, memory manipulating opcodes, and program flow–related opcodes.
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 算术操作码，内存操作码，以及程序流程相关操作码。
- en: A complete list is available in the Ethereum yellow paper.
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 完整列表可在以太黄皮书中找到。
- en: The consensus in Ethereum is proof of work based, which we will cover in detail
    in
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊中的共识是基于工作的证明，我们将在详细讨论中涵盖
- en: Chapt[er 8\.](https://doi.org/10.1007/978-1-4842-8179-6_8)
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 第[8\.](https://doi.org/10.1007/978-1-4842-8179-6_8)章
- en: the ethereum 1.0 blockchain will continue to evolve according to its road map
    and
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊1.0区块链将按照其路线图继续发展和
- en: will eventually become a shard in phase 1 of ethereum 2.0\.
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 最终将成为Ethereum 2.0的阶段1中的一个分片。
- en: '202'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: '202'
- en: Chapter 4 BloCkChain
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 第 4 章 区块链
- en: With this, we complete our brief discussion on the two most prominent and
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们完成了对两种最突出的的简要讨论
- en: pioneering blockchain platforms. More modern blockchain platforms, such as Polkadot,
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 开创性的区块链平台。更现代的区块链平台，如Polkadot，
- en: Cardano, Solana, Avalanche, and Ethereum 2.0, will be introduced when we discuss
    their
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: Cardano，Solana，Avalanche和Ethereum 2.0在讨论他们时将被介绍
- en: respective consensus protocols in Chapter [8\.](https://doi.org/10.1007/978-1-4842-8179-6_8)
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 各自的共识协议在第[8\.](https://doi.org/10.1007/978-1-4842-8179-6_8)章中
- en: '**Summary**'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: '**总结**'
- en: • A blockchain is a peer-to-peer, cryptographically secure, append-
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: • 区块链是点对点的，加密安全的，追加的
- en: only, immutable, and tamper-proof shared distributed ledger
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 只有，不可变，并且防篡改的共享分布式分类帐
- en: composed of temporally ordered and publicly verifiable transactions.
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 由时间顺序和公开可验证的交易组成。
- en: • Origins of the blockchain can be found in previous attempts to create
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: • 区块链的起源可以追溯到先前尝试创建
- en: digital cash and digital timestamping of documents.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 数字货币和文档的数字时间戳。
- en: • A blockchain is a distributed system.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: • 区块链是一个分布式系统。
- en: • Blockchains are primarily of two types, permissioned and public.
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: • 区块链主要分为两种类型，有许可和公共。
- en: • Blockchains have many cross-industry use cases, including but by no
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: • 区块链有许多跨行业的用例，包括但不限于
- en: means limited to government, finance, medical, supply chain, and
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 意味着受到政府，金融，医疗，供应链等限制
- en: technology.
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 技术。
- en: • Blockchains provide several benefits, such as cost saving,
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: • 区块链提供了多种好处，比如节省成本，
- en: transparency, and data sharing.
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 透明性和数据共享。
- en: • Various technologies such as public key cryptography, hash
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: • 各种技术，如公钥加密、哈希
- en: functions, and Merkle trees have provided foundations for building
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 函数和默克尔树为构建提供了基础
- en: security of the blockchain.
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链的安全性。
- en: • From the CAP theorem’s perspective, permissioned blockchains are
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: • 从CAP理论的角度看，许可区块链是
- en: CP systems, whereas public chains are AP systems.
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: CP系统，��公共链是AP系统。
- en: • A blockchain ledger abstraction has several properties along with
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: • 区块链账本抽象具有多个属性，以及
- en: get(), append(), and verify() operations.
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 获取()、追加() 和验证() 操作。
- en: • Bitcoin is the first blockchain invented by Satoshi Nakamoto.
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: • 比特币是由中本聪发明的第一种区块链。
- en: • Ethereum is the first smart contract blockchain platform proposed by
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: • 以太坊是第一个由智能合约区块链提出的平台
- en: Vitalik Buterin.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 维塔利克·布特林。
- en: • Bitcoin and Ethereum are the most prominent platforms.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: • 比特币和以太坊是最突出的平台。
- en: '203'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: '203'
- en: Chapter 4 BloCkChain
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章 区块链
- en: • Ethereum will become a shard of Ethereum 2.0\.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: • 以太坊将成为以太坊2.0的一个分片\。
- en: • Modern blockchain platforms are focusing on the heterogenous
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: • 现代区块链平台正在关注异构
- en: multichain architecture where multiple chains interoperate and
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 多链架构，多个链相互操作和
- en: form an ecosystem of blockchains cooperating and interoperating
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 形成协作和互操作的区块链生态系统
- en: together, which serve multiple use cases.
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 共同提供多种用例。
- en: '**Bibliography**'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: '**参考文献**'
- en: '1\. Bashir, I., 2020\. Mastering blockchain: a deep dive into'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 巴希尔（Bashir, I.），2020\. 区块链掌握：深入探究
- en: distributed ledgers, consensus protocols, smart contracts, DApps,
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 分布分类帐，共识协议，智能合约，DApps，
- en: cryptocurrencies, Ethereum, and more.
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 加密货币、以太坊等。
- en: '2\. Wood, G., 2014\. Ethereum: A secure decentralised generalised'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 伍德（Wood, G.），2014\. 以太坊：一个安全的去中心化通用
- en: transaction ledger. Ethereum project yellow paper, 151(2014),
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 交易分类账。以太坊项目黄皮书，151（2014年），
- en: pp. 1–32\.
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 页1–32\.
- en: 3\. Raynal, M., 2018\. Fault-Tolerant Message-Passing Distributed
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. Raynal, M., 2018\. 容错传递消息分布式
- en: Systems (p. 459). Springer.
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 系统（页459）。施普林格。
- en: '4\. Nakamoto, S., 2008\. Bitcoin: A peer-to-peer electronic'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 中本聪（Nakamoto, S.），2008\. 比特币：一种点对点电子
- en: cash system.
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 现金系统。
- en: 5\. Bitg[old:](https://unenumerated.blogspot.com/2005/12/bit-gold.html)
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. Bitg[old:](https://unenumerated.blogspot.com/2005/12/bit-gold.html)
- en: '[https://unenumerated.blogspot.com/2005/12/bit-](https://unenumerated.blogspot.com/2005/12/bit-gold.html)'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://unenumerated.blogspot.com/2005/12/bit-](https://unenumerated.blogspot.com/2005/12/bit-gold.html)'
- en: '[gold.html](https://unenumerated.blogspot.com/2005/12/bit-gold.html)'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: '[gold.html](https://unenumerated.blogspot.com/2005/12/bit-gold.html)'
- en: 6\. David Chaum’s blind signatures paper is available
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 大卫·乔姆的盲签名文件可用
- en: 'her[e: https://sceweb.sce.uhcl.edu/yang/teaching/](https://sceweb.sce.uhcl.edu/yang/teaching/csci5234WebSecurityFall2011/Chaum-blind-signatures.PDF)'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 'her[e: https://sceweb.sce.uhcl.edu/yang/teaching/](https://sceweb.sce.uhcl.edu/yang/teaching/csci5234WebSecurityFall2011/Chaum-blind-signatures.PDF)'
- en: '[csci5234WebSecurityFall2011/Chaum- blind- signatures.PDF](https://sceweb.sce.uhcl.edu/yang/teaching/csci5234WebSecurityFall2011/Chaum-blind-signatures.PDF)'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: '[csci5234WebSecurityFall2011/Chaum- blind- signatures.PDF](https://sceweb.sce.uhcl.edu/yang/teaching/csci5234WebSecurityFall2011/Chaum-blind-signatures.PDF)'
- en: 7\. Haber, S. and Stornetta, W.S., 1990, August. How to time-stamp a
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 哈伯（Haber, S.）和斯通内特塔（Stornetta, W.S.）, 1990年8月。如何给时间戳
- en: digital document. In *Conference on the Theory and Application of*
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 数字文档。在*理论和应用会议上*
- en: '*Cryptography* (pp. 437–455). Springer, Berlin, Heidelberg.'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: '*密码学*（页437–455）。柏林、海德堡，施普林格。'
- en: '8\. B-money published here: [www.weidai.com/bmoney.txt](http://www.weidai.com/bmoney.txt)'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. B-money 在此发布：[www.weidai.com/bmoney.txt](http://www.weidai.com/bmoney.txt)
- en: 9\. Dwork and Naor email spam combatting was published in Pricing
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 9\. 马克·杜尔克和莱洛娜·纳奥尔的电子邮件垃圾邮件bek
- en: 'via Processing or Combatting Junk M[ail: www.iacr.org/cryptodb/](https://www.iacr.org/cryptodb/data/paper.php?pubkey=1268)'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 通过处理或对抗垃圾邮件：[www.iacr.org/cryptodb/](https://www.iacr.org/cryptodb/data/paper.php?pubkey=1268)
- en: '[data/paper.php?pubkey=1268](https://www.iacr.org/cryptodb/data/paper.php?pubkey=1268)'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: '[data/paper.php?pubkey=1268](https://www.iacr.org/cryptodb/data/paper.php?pubkey=1268)'
- en: '204'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: '204'
- en: Chapter 4 BloCkChain
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章 区块链
- en: 10\. Hashcash for email spam combatting publishe[d in www.hashcash.](http://www.hashcash.org/papers/hashcash.pdf)
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 10\. 用于电子邮件垃圾邮件bek
- en: '[org/papers/hashcash.pdf](http://www.hashcash.org/papers/hashcash.pdf)'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: '[org/papers/hashcash.pdf](http://www.hashcash.org/papers/hashcash.pdf)'
- en: '11\. Reusable proof of work by Hal Finney published her[e: https://](https://cryptome.org/rpow.htm)'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: 11\. Hal Finney 发布的可复用工作证明在此发表：[https://](https://cryptome.org/rpow.htm)
- en: '[cryptome.org/rpow.htm](https://cryptome.org/rpow.htm)'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: '[cryptome.org/rpow.htm](https://cryptome.org/rpow.htm)'
- en: 12\. Gupta, S., Hellings, J., and Sadoghi, M., 2021\. Fault-Tolerant
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 12\. Gupta, S., Hellings, J., 和 Sadoghi, M., 2021\. 容错
- en: Distributed Transactions on Blockchain. *Synthesis Lectures on*
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链上的分布式事务。*综合讲义*
- en: '*Data Management*, *16*(1), pp. 1–268\.'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: '*数据管理*，*16*(1), 第1–268页\.'
- en: '13\. A complete list of Bitcoin opcodes is available her[e: https://](https://en.bitcoin.it/wiki/Script)'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 13\. 完整的比特币操作码列表在这里可用：[https://](https://en.bitcoin.it/wiki/Script)
- en: '[en.bitcoin.it/wiki/Script](https://en.bitcoin.it/wiki/Script)'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: '[en.bitcoin.it/wiki/Script](https://en.bitcoin.it/wiki/Script)'
- en: '14\. Documentation on Ivy is available her[e: https://docs.ivylang.](https://docs.ivylang.org/bitcoin/)'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 14\. Ivy的文档在这里可用：[https://docs.ivylang.](https://docs.ivylang.org/bitcoin/)
- en: '[org/bitcoin/](https://docs.ivylang.org/bitcoin/)'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: '[org/bitcoin/](https://docs.ivylang.org/bitcoin/)'
- en: '15\. More details on the miniscript are available here: [http://](http://bitcoin.sipa.be/miniscript/)'
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 15\. 关于小脚本的更多细节在这里可得到：[http://](http://bitcoin.sipa.be/miniscript/)
- en: '[bitcoin.sipa.be/miniscript/](http://bitcoin.sipa.be/miniscript/)'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: '[bitcoin.sipa.be/miniscript/](http://bitcoin.sipa.be/miniscript/)'
- en: '16\. More on FLM impossibility here: [https://](https://decentralizedthoughts.github.io/2019-08-02-byzantine-agreement-is-impossible-for-$n-slash-leq-3-f$-is-the-adversary-can-easily-simulate/)'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: '16\. 这里更多关于FLM不可能性的信息: [https://](https://decentralizedthoughts.github.io/2019-08-02-byzantine-agreement-is-impossible-for-$n-slash-leq-3-f$-is-the-adversary-can-easily-simulate/)'
- en: '[decentralizedthoughts.github.io/2019- 08- 02- byzantine-](https://decentralizedthoughts.github.io/2019-08-02-byzantine-agreement-is-impossible-for-$n-slash-leq-3-f$-is-the-adversary-can-easily-simulate/)'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: '[decentralizedthoughts.github.io/2019- 08- 02- byzantine-](https://decentralizedthoughts.github.io/2019-08-02-byzantine-agreement-is-impossible-for-$n-slash-leq-3-f$-is-the-adversary-can-easily-simulate/)'
- en: '[agreement- is- impossible- for- $n- slash- leq- 3- f$- is- the-](https://decentralizedthoughts.github.io/2019-08-02-byzantine-agreement-is-impossible-for-$n-slash-leq-3-f$-is-the-adversary-can-easily-simulate/)'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: '[agreement- is- impossible- for- $n- slash- leq- 3- f$- is- the-](https://decentralizedthoughts.github.io/2019-08-02-byzantine-agreement-is-impossible-for-$n-slash-leq-3-f$-is-the-adversary-can-easily-simulate/)'
- en: '[adversary- can- easily- simulate/](https://decentralizedthoughts.github.io/2019-08-02-byzantine-agreement-is-impossible-for-$n-slash-leq-3-f$-is-the-adversary-can-easily-simulate/)'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: '[adversary- can- easily- simulate/](https://decentralizedthoughts.github.io/2019-08-02-byzantine-agreement-is-impossible-for-$n-slash-leq-3-f$-is-the-adversary-can-easily-simulate/)'
- en: 17\. Fischer, M.J., Lynch, N.A., and Merritt, M., 1986\. Easy impossibility
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 17\. Fischer, M.J., Lynch, N.A., 和 Merritt, M., 1986\. 易不可能性
- en: proofs for distributed consensus problems. *Distributed*
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式共识问题的证明。*分布式*
- en: '*Computing*, *1*(1), pp. 26–39\.'
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: '*计算*，*1*(1), 第26–39页\.'
- en: '205'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: '205'
- en: '**CHAPTER 5**'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: '**第5章**'
- en: '**Blockchain Consensus**'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: '**区块链共识**'
- en: Blockchain consensus is the core element of a blockchain, which ensures the
    integrity
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链共识是区块链的核心元素，它确保了完整性
- en: and consistency of the blockchain data. Blockchain being a distributed system,
    in
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 以及区块链数据的一致性。区块链作为一个分布式系统，在
- en: the first instance, it may appear that we can apply traditional distributed
    consensus
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种情况下，看起来我们可以应用传统的分布式共识协议
- en: protocols, such as Paxos or PBFT, to address the agreement and total order requirements
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 协议，如Paxos或PBFT，以满足协议和全部顺序要求
- en: in a blockchain. However, this can only work in consortium chains where participants
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 在区块链中。但这只能在联盟链中工作，参与者
- en: are known and limited in number. In public chains, traditional consensus protocols
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，并且数量有限。在公共链上，传统的共识协议
- en: cannot work due to the permissionless environment. However, in 2008 a new class
    of
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 由于无需许可的环境，无法运行。然而，就在2008年，一个新的类别
- en: consensus algorithms emerged, which relied on proof of work to ensure random
    leader
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 共识算法的出现依赖于工作量证明以确保随机的领导者
- en: election by solving a mathematical puzzle. The elected leader wins the right
    to append
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 通过解决数学难题来进行选举。当选的领导者获得了附加的权利
- en: to the blockchain. This is the so-called Nakamoto consensus protocol. This algorithm
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 到区块链。这就是所谓的中本聪共识协议。这个算法
- en: for the very first time solved the problem of consensus in a permissionless
    public
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 非常时期内在无需许可的公共
- en: environment with many anonymous participants.
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 环境中有许多匿名参与者。
- en: We have already discussed distributed consensus from a traditional perspective
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经从传统的角度讨论了分布式共识
- en: in Chapter [3](https://doi.org/10.1007/978-1-4842-8179-6_3). In this chapter,
    we will cover what blockchain consensus is, how the traditional protocols can
    be applied to a blockchain, how proof of work works, how it was developed, and
    what the blockchain consensus requirements are, and we will analyze
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 3 章](https://doi.org/10.1007/978-1-4842-8179-6_3)中。本章将介绍什么是区块链共识，传统协议如何应用于区块链，工作量证明的工作原理，它是如何发展起来的，以及区块链共识的要求，并且我们将分析
- en: blockchain consensus such as proof of work through the lens of distributed consensus.
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链共识，例如通过分布式共识的工作方式。
- en: Also, we’ll see how the requirements of consensus may change depending upon
    the type
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将看到共识的要求可能会根据类型而改变
- en: of blockchain in use. For example, for public blockchains proof of work might
    be a better idea, whereas for permissioned blockchains BFT-style protocols may
    work better.
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用区块链的两类广泛的算法。例如，对于公共区块链，工作量证明可能是更好的选择，而对于许可区块链，BFT 风格的协议可能效果更好。
- en: '207'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: '207'
- en: © Imran Bashir 2022
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: © Imran Bashir 2022
- en: I. Bashir, *Blockchain Consensus*, [https://doi.org/10.1007/978-1-4842-8179-6_5](https://doi.org/10.1007/978-1-4842-8179-6_5#DOI)
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: I. Bashir，*区块链共识*，[https://doi.org/10.1007/978-1-4842-8179-6_5](https://doi.org/10.1007/978-1-4842-8179-6_5#DOI)
- en: Chapter 5 BloCkChain Consensus
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 第 5 章 区块链共识
- en: '**Background**'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: '**背景**'
- en: Distributed consensus has always been a fundamental problem in distributed systems.
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式共识一直是分布式系统中的一个基本问题。
- en: Similarly, in blockchain it plays a vital role in ensuring the integrity of
    the blockchain.
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，它在区块链中起着确保区块链完整性的重要作用。
- en: 'There are two broad classes of algorithms that have emerged as a result of
    the last almost 45 years of research on distributed consensus:'
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 由于过去将近 45 年对分布式共识的研究，出现了两类广泛的算法：
- en: 1\. Leader-based traditional distributed consensus or permissioned
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 基于领导者的传统分布式共识或许可
- en: consensus
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 共识
- en: 2\. Nakamoto and post-Nakamoto consensus or permissionless consensus
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. Nakamoto 和后 Nakamoto 共识或无许可共识
- en: Leader-based protocols work on the principle of voting where nodes in a distributed
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 基于领导者的协议基于投票原则，分布式系统中的节点
- en: system vote to perform an operation. These protocols are usually deterministic
    and
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 系统投票来执行操作。这些协议通常是确定性的，而
- en: have been researched since the 1970s. Some such protocols include Paxos, PBFT,
    and
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 自上世纪 70 年代以来一直在研究。一些这样的协议包括 Paxos、PBFT 和
- en: RAFT. Another different type of class emerged in 2008 with Bitcoin, which relied
    on the proof of work type of crypto puzzle. This type of protocol is probabilistic
    where a participant wins the right to append a new block to the blockchain by
    solving the proof of work.
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: RAFT。2008 年，另一种不同类型的类出现在比特币中，它依赖于工作量证明类型的密码难题。这种协议是概率性的，参与者通过解决工作量证明来获得追加新区块到区块链的权利。
- en: Usually, in the blockchain world, Byzantine fault–tolerant protocols are used,
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在区块链世界中使用拜占庭容错协议，
- en: especially because these blockchains are expected to either run publicly or
    in a
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 尤其是这些区块链预计会在公开或在一个
- en: consortium environment where malicious attacks are a reality. Perhaps not so
    much
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 财团环境，那里恶意攻击是现实。也许并不是很多
- en: on consortium chains where the participants are known, but still due to the
    nature of
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 在参与者已知的财团链中，但由于其性质
- en: the enterprise applications that run on these platforms, it’s best to consider
    a Byzantine fault–tolerant model. Applications related to finance, health, egovernance,
    and many
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些平台上运行的企业应用程序，最好考虑采用拜占庭容错模型。与金融、健康、电子治理等相关的应用程序，以及许多
- en: other use cases run on consortium chains; therefore, it is necessary to ensure
    protection against any arbitrary faults including even active adversaries.
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 其他用例运行在财团链上；因此，有必要确保保护免受任意错误，甚至是主动对手。
- en: There are pros and cons of both approaches. Traditional BFT protocols or their
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法各有利弊。传统 BFT 协议或其
- en: variants in the blockchain provide stronger consistency as compared to proof
    of work–
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链的变体相对于工作量证明，提供了更强的一致性
- en: type algorithms, which can only offer eventual consistency. However, proof of
    work
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 类型算法，这种算法只能提供最终一致性。然而，工作量证明
- en: consensus is much more scalable as compared to traditional BFT protocols. See
    a
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 相对于传统 BFT 协议，共识更具可伸缩性。参见
- en: comparison in Ta[ble 5-1 b](#p226)etween BFT and PoW consensus.
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 在表[5-1 b](#p226)中比较 BFT 和 PoW 共识。
- en: '208'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: '208'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: 第 5 章 区块链共识
- en: '***Table 5-1\.** Traditional BFT vs. Nakamoto consensus*'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: '***表5-1\.** 传统 BFT 与 Nakamoto 共识*'
- en: '**Property**'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**'
- en: '**Traditional BFT**'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: '**传统 BFT**'
- en: '**Nakamoto**'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: '**中本聪**'
- en: agreement
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 协议
- en: Deterministic
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 确定性的
- en: eventual
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的
- en: termination
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 终止
- en: Deterministic
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 确定性
- en: probabilistic
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 概率的
- en: energy consumption
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 能源消耗
- en: low
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: 低
- en: Very high
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 非常高
- en: sybil resistance
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 欺骗抵抗
- en: 'no'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 没有
- en: 'Yes'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 是
- en: Finality
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 最终性
- en: immediate
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 立即
- en: probabilistic
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 概率的
- en: Consistency
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 一致性
- en: stronger
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 更强
- en: Weaker (eventual)
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 更弱（最终）
- en: Communication pattern
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 通信模式
- en: Broadcast
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 广播
- en: epidemic
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 流行
- en: throughput (tps)
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 吞吐量（tps）
- en: higher
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 更高
- en: low
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 低
- en: scalability
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性
- en: lower (10–100 nodes)
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 低（10-100个节点）
- en: higher (1000s of nodes)
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 更高（数千个节点）
- en: Forking
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 分叉
- en: none
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 无
- en: possible
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 可能
- en: identity
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 身份
- en: known
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 已知的
- en: anonymous (pseudonymous)
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 匿名的（匿名的）
- en: network
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 网络
- en: peer to peer
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 点对点
- en: peer to peer
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 点对点
- en: order
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 顺序
- en: temporal
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 时间的
- en: temporal
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 时间的
- en: Formal rigor (correctness proofs, etc.)
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 形式严谨（正确性证明等）
- en: 'Yes'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 是的
- en: Mostly nonexistent
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数不存在
- en: Fault tolerance
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 容错性
- en: 1/3, <=33%
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: 1/3，<=33%
- en: <=25% computing power*
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: <=25% 计算能力*
- en: '>50% computing power'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: '>50% 计算能力'
- en: number of clients
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端数量
- en: Many
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: 许多
- en: Many
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 许多
- en: Another point to keep in mind is the distinction between a broadcast problem
    and
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: 还需注意广播问题和
- en: a consensus problem. Consensus is a decision problem, whereas broadcast is a
    delivery
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: 一个共识问题。共识是一个决策问题，而广播是一个传递
- en: problem. The properties of both are the same but with slightly different definitions.
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 问题。两者的特性相同，但定义略有不同。
- en: These properties include agreement, validity, integrity, and termination. In
    essence,
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性包括协议，有效性，完整性和终止。实质上，
- en: broadcast and consensus are interrelated and deeply connected problems as it
    is
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: 广播和共识是相关的，密切相关的问题
- en: possible to implement one from the other.
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从其中一个实现另一个。
- en: We will be focusing more on a consensus problem instead of a broadcast problem.
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更多关注共识问题而不是广播问题。
- en: '209'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: '209'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链共识
- en: '**Blockchain Consensus**'
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: '**区块链共识**'
- en: A blockchain consensus protocol is a mechanism that allows participants in a
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链共识协议是一种机制，允许参与者
- en: blockchain system to agree on a sequence of transactions even in the presence
    of faults.
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链系统能够在存在故障的情况下就一系列交易达成一致意见。
- en: In other words, consensus algorithms ensure that all parties agree on a single
    source of
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，共识算法确保所有参与方对来自单一来源的
- en: truth even if some parties are faulty.
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: 即使某些参与方有错也要说出真相。
- en: There are some properties that are associated with blockchain consensus. The
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 与区块链共识相关的一些属性。这
- en: properties are almost the same as standard distributed consensus but with a
    slight
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 特性与标准分布式一致性几乎相同，但略有不同
- en: variation.
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 变体。
- en: As a standard, there are safety and liveness properties. The safety and liveness
    properties change depending on the type of blockchain. First, we define the safety
    and liveness
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: 作为标准，有安全性和活性性。这些安全性和活性性会根据区块链的类型而改变。首先，我们定义安全性和活性性
- en: properties for a permissioned/consortium blockchain and then for a public blockchain.
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 许可/联合体区块链的属性，然后是公共区块链的属性。
- en: '**Traditional BFT**'
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: '**传统的BFT**'
- en: There are several properties that we can define for traditional BFT consensus,
    which are
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为传统的BFT共识定义几个属性，这些属性是
- en: commonly used in a permissioned blockchain. There are various variants, for
    example,
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: 在许可的区块链中常用。有各种变体，例如，
- en: Tendermint, that are used in a blockchain. We covered traditional BFT in detail
    in
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: Tendermint，用于区块链。我们在第5章详细介绍了传统的BFT
- en: Chapt[er 3; ho](https://doi.org/10.1007/978-1-4842-8179-6_3)wever, in this section
    we will redefine that in the context of a blockchain and especially permissioned
    blockchain. Most of the properties remain the same as
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: 第3章;然而，在这一部分，我们将重新定义它，让它处于区块链和特别是许可的区块链。大多数属性保持不变
- en: public permissionless consensus; however, the key difference is between deterministic
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: 公共无权限共识；然而，关键区别在于确定性
- en: and probabilistic termination and agreement.
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: 和概率终止和协议。
- en: '**Agreement**'
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: '**协议**'
- en: No two honest processes decide on a different block. In other words, no two
    honest
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: 没有两个诚实的进程会就不同的区块做出决定。换句话说，没有两个诚实的
- en: processes commit different blocks at the same height.
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: 进程在相同的高度提交不同的区块。
- en: '**Validity**'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: '**有效性**'
- en: If an honest process decides on a block *b*, then b satisfies the application-specific
    validity predicate *valid ()*. Also, the block b agreed must be proposed by some
    honest node.
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个诚实的进程就一个区块*b*做出决定，那么b必须满足特定应用的有效性断言*valid()*。而且这个区块b必须由某个诚实节点提议。
- en: '**Termination**'
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: '**终止**'
- en: Every honest process decides. After GST, every honest process continuously
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: 每个诚实的过程都会做出决定。在GST之后，每个诚实的过程都会不断地做出决定。
- en: commits blocks.
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: 提交区块。
- en: Agreement and validity are safety properties, whereas termination is a liveness
    property.
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: 协议和有效性是安全属性，而终止是活跃性属性。
- en: '210'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: '210'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章 区块链共识
- en: '**Integrity**'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: '**完整性**'
- en: A process must decide at most once in a consensus round.
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: 一个过程在共识轮中最多只能决定一次。
- en: Other properties can include the following.
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 其他属性可能包括以下内容。
- en: '**Chain Progress (Liveness)**'
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: '**链进展（活跃性）**'
- en: A blockchain must keep growing by continuously appending new blocks to it after
    GST.
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链必须在GST之后不断地添加新的区块以保持增长。
- en: '**Instant Irrevocability**'
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: '**即时不可撤销性**'
- en: Once a transaction has made it to the block and the block is finalized, the
    transaction
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦交易进入区块并且区块被确认，交易
- en: cannot be removed.
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 不能被移除。
- en: '**Consensus Finality**'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: '**共识最终性**'
- en: Finality is deterministic and immediate. Transactions are final as soon as they’ve
    made it to the block, and blocks are final as soon as they’ve been appended to
    the blockchain.
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: 最终性是确定性和即时的。交易一旦进入区块就是最终的，区块一旦被添加到区块链就是最终的。
- en: While there are many blockchain consensus algorithms now, Nakamoto consensus
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管现在有许多区块链共识算法，中本聪共识
- en: is the first blockchain protocol introduced with Bitcoin, which has several
    novel
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 是第一个引入比特币的区块链协议，其中包含一些新颖的。
- en: properties. Indeed, it is not a classical Byzantine algorithm with deterministic
    properties; instead, it has probabilistic features.
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: 属性。事实上，这不是具有确定性属性的经典拜占庭算法；相反，它具有概率特性。
- en: '**Nakamoto Consensus**'
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: '**中本聪共识**'
- en: The Nakamoto or PoW consensus can be characterized with several properties.
    It is
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 中本聪或PoW共识可以用几个属性来描述。它是
- en: commonly used in public blockchains, for example, Bitcoin.
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 在公共区块链中通常使用，例如，比特币。
- en: '**Agreement**'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: '**一致性**'
- en: Eventually, no two honest processes decide on a different block.
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，没有两个诚实的过程会对不同的区块进行决定。
- en: '**Validity**'
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: '**有效性**'
- en: If an honest process decides on a block b, then b satisfies the application-specific
    validity predicate valid (). Also, the transactions within the block satisfy the
    application-specific validity predicate valid(). In other words, only valid and
    correct transactions make it
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个诚实的过程对一个区块b做出决定，那么b满足特定于应用的有效性谓词valid()。此外，区块中的交易满足特定于应用的有效性谓词valid()。换句话说，只有有效和正确的交易才会进入
- en: to the block, and only correct and valid blocks make it to the blockchain. Only
    valid
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: 到区块，只有正确和有效的区块才能进入区块链。只有有效
- en: '211'
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: '211'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章 区块链共识
- en: transactions and blocks are accepted by the nodes. Also, mining nodes (miners)
    will only
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: 节点接受交易和区块。此外，挖矿节点（矿工）只会
- en: accept the valid transactions. In addition, the decided value must be proposed
    by some
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 接受有效的交易。此外，决定的价值必须由某些人提出。
- en: honest process.
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: 诚实的过程。
- en: '**Termination**'
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: '**终止**'
- en: Every honest process eventually decides.
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: 每个诚实的过程最终都会做出决定。
- en: Agreement and validity are safety properties, whereas termination is a liveness
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: 协议和有效性是安全属性，而终止是活跃性
- en: property.
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: 属性。
- en: '**Note** in public blockchain networks, an economic incentive is usually associated'
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**，在公共区块链网络中，通常与经济激励相关联。'
- en: with the consensus properties so that participants who are working toward
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: 与共识属性一样，参与者正在致力于工作的人
- en: ensuring the safety and liveness of the network are economically incentivized
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: 确保网络的安全性和活跃性受到经济上的激励。
- en: to do so.
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做。
- en: Remember we discussed randomized algorithms earlier in Chapt[er 3](https://doi.org/10.1007/978-1-4842-8179-6_3),
    where termination is guaranteed probabilistically. Randomized protocols are used
    to
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: 记得我们在第3章[章](https://doi.org/10.1007/978-1-4842-8179-6_3)中讨论过概率算法，其中终止是以概率方式保证的。随机协议用于
- en: circumvent FLP impossibility. Usually, the termination property is made probabilistic
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 规避FLP不可能性。通常，终止属性是以概率方式实现的
- en: to achieve an agreement to circumvent FLP impossibility. However, with the Bitcoin
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 以达成一致来规避FLP不可能性。然而，使用比特币
- en: blockchain, the agreement property is made probabilistic instead of termination.
    Here,
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链，协议的一致性属性变成了概率性的，而不是终止。在这里，
- en: the safety property is somewhat sacrificed because in the Bitcoin blockchain,
    it is
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: 安全属性在比特币区块链中有些牺牲，因为
- en: allowed that temporarily a fork can occur, and when the fork is resolved, some
    previously finalized transactions are rolled back. This is due to the longest
    chain rule.
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时允许出现分叉，并当分叉解决时，某些先前最终的交易将被回滚。这是由于最长链规则。
- en: There are a few other properties which we describe now.
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他我们现在描述的属性。
- en: '**Consensus Finality**'
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: '**共识最终性**'
- en: With two correct processes p1 and p2, if p1 appends a block b to its local blockchain
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个正确的进程p1和p2，如果p1将块b附加到其本地区块链
- en: before another block b’, then no other correct node appends b’ before b.
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个块b’之前，没有其他正确的节点在b之前附加b’。
- en: For a proof of work blockchain point of view, we can further carve out some
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 从工作证明区块链的角度来看，我们可以进一步挖掘一些
- en: properties.
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: 特性。
- en: '212'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: '212'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章 区块链共识
- en: '**Chain Progress (Liveness)**'
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: '**链的进展（活性）**'
- en: A blockchain must keep growing steadily by new blocks continuously being appended
    to
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链必须继续稳定增长，新的区块不断地附加到
- en: it every n interval. N can be a predefined time interval defined by the protocol.
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 每隔n个时间间隔即可。N可以是协议定义的预定义时间间隔。
- en: '**Consistent/Consistency**'
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: '**一致性/一致性**'
- en: The blockchain must eventually heal a forked chain to arrive at a single longest
    chain. In other words, everyone must see the same history.
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链必须最终修复分叉链，以达到单一最长链。换句话说，每个人必须看到相同的历史。
- en: '**Eventual Irrevocability**'
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: '**最终不可撤销性**'
- en: The probability of a transaction being rolled back decreases with more blocks
    appended
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 交易被附加到越多的块上，被回滚的概率就越小
- en: to the blockchain. This is a crucial property from end users’ point of view
    as this
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 到区块链。这是从最终用户的角度来看的一个关键属性
- en: property gives confidence to the users that after their transaction has been
    made part
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: 属性让用户确信他们的交易被加入后
- en: of a block and it’s been finalized and accepted, then new blocks being added
    to the
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦区块被最终接受和接受，新的区块被添加到
- en: blockchain further ensure that the transaction is permanently and irrevocably
    part of the blockchain.
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链进一步确保交易永久且无法撤销地成为区块链的一部分。
- en: Table [5-1](#p226) shows some key differences between traditional BFT and Nakamoto
    consensus.
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: 表[5-1](#p226)显示了传统BFT和Nakamoto共识之间的一些关键区别。
- en: Now we turn our attention to system models, which are necessary to describe
    as
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们把注意力转向系统模型，这是必要描述的
- en: they capture the assumption that we make about the environment in which blockchain
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: 它们捕捉了我们对区块链运行环境的假设
- en: consensus protocols will operate.
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: 共识协议将运作。
- en: '**System Model**'
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: '**系统模型**'
- en: Blockchain consensus protocols assume a system model under which they guarantee
    the
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链共识协议假设一个系统模型，在该模型下它们保证
- en: safety and liveness properties. Here, I describe two system models, which are
    generally
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性和活性属性。在这里，我描述了两个系统模型，它们通常
- en: applicable to public and permissioned blockchain systems, respectively.
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: 分别适用于公共和许可区块链系统。
- en: '**Public Blockchain System Model (Permissionless)**'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: '**公共区块链系统模型（无需许可）**'
- en: A blockchain is a distributed system where nodes communicate via message passing.
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链是一个节点通过消息传递进行通信的分布式系统。
- en: The broadcast protocol is usually probabilistic in the case of a public blockchain
    where
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: 在公共区块链的情况下，广播协议通常是概率性的，在哪里
- en: transactions (messages) are disseminated by utilizing a gossip-style protocol.
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: 交易（消息）是通过利用一种类似八卦的协议传播的。
- en: '213'
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: '213'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章 区块链共识
- en: Usually, the network model is asynchronous as there is no bound on the processor
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，网络模型是异步的，因为处理器上没有边界
- en: delay or communication delay, especially because a public blockchain system
    is most
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟或通信延迟，尤其是因为公共区块链系统最
- en: likely to be heterogenous and geographically dispersed. Nodes do not know each
    other,
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是异构的且地理位置分散。节点彼此不了解，
- en: nor do they know how many total nodes are there in the system. Nodes can arbitrarily
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: 也不知道系统中总共有多少节点。节点可以任意
- en: join and drop off the network. Anyone can join by simply running the protocol
    software
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: 加入和退出网络。任何人都可以通过简单运行协议软件加入
- en: on the network.
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络上。
- en: '**Consortium Blockchain System Model (Permissioned)**'
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: '**联盟区块链系统模型（受许可）**'
- en: In this model, blockchain nodes communicate via message passing. A broadcast
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: 在该模型中，区块链节点通过消息传递进行通信。一个广播
- en: protocol is usually a one-to-all communication within the consensus protocol.
    For
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: 协议通常是共识协议内的一对一通信。为
- en: example, in PBFT the leader broadcasts its proposal in one go to all replicas,
    instead
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在PBFT中，领导者将其提案一次性广播给所有副本，而不是
- en: of sending it to a few, and then those other nodes send it to other nodes, as
    we saw
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: 将其发送给少数人，然后其他节点将其发送给其他节点，正如我们所看到的
- en: in gossip dissemination. Moreover, the network model is partially synchronous.
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: 在八卦传播中。此外，网络模型是部分同步的。
- en: More precisely, blockchain consensus protocols are modelled under an eventually
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: 更准确地说，区块链共识协议是基于最终的模型。
- en: synchronous model where after an unknown GST the system is guaranteed to make
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: 在未知的GST之后的同步模型，系统保证会做出
- en: progress.
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: 进度。
- en: Now let’s turn our attention to the first blockchain consensus protocol and
    explore
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们把注意力转向第一个区块链共识协议并探索
- en: 'how it works: the proof of work protocol or Nakamoto consensus.'
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: 它是如何工作的：工作证明协议或中本聪共识。
- en: '**First Blockchain Consensus**'
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: '**第一个区块链共识**'
- en: The proof of work consensus algorithm or Nakamoto consensus was first introduced
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 工作证明共识算法或中本聪共识首次作为
- en: with the Bitcoin blockchain in 2008\. It is fundamentally a leader election
    algorithm
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: 2008年，比特币区块链中使用了**领导选举算法**。它是一个基本的领导选举算法。
- en: where a mandatory and random waiting time is imposed between leader elections.
    This
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 在领导选举之间强制和随机的等待时间之后。这
- en: also serves as a Sybil attack mechanism. One of the weaknesses in traditional
    distributed consensus protocols is that they need each participant to be known
    and identifiable in
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: 也作为一种假冒者攻击机制。传统分布式共识协议的一个弱点是，它需要每个参与者都被认识和识别在
- en: the protocol. For example, in PBFT all participants must be known and identifiable.
    This
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: 协议。例如，在PBFT中，所有参与者都必须被知道和可识别。这
- en: limitation (albeit useful in consortium chains) makes BFT-style protocols somewhat
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: 限制（尽管在联合链中很有用）使得BFT风格的协议有些
- en: unsuitable for public chains. This is so because an attacker can create multiple
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: 不适合公共链。这是因为攻击者可以创建多个
- en: identities and can use those multiple nodes/identities to vote in their favor.
    This is the so-called Sybil attack. If somehow we can make creating and then using
    that identity
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 身份，并且可以使用这些多个节点/身份来投票支持他们。这就是所谓的假冒者攻击。如果我们可以以某种方式创建并且使用那个身份
- en: on a blockchain an expensive operation, then such a setup can thwart any Sybil
    attack
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 在区块链上是非常昂贵的一个操作，那么这样的设置可以阻止任何假冒者攻击。
- en: attempts and will prevent an attacker from taking over the network by creating
    multiple
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试并且阻止攻击者通过创建多个来接管网络
- en: fake identities.
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: 假身份。
- en: '214'
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: '214'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章 区块链共识
- en: the term sybil attack is coined after a book named *Sybil* published in 1973,
    where the main character in the book named sybil Dorsett has multiple personality
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: 术语假冒者攻击是在1973年出版的一本名为*Sybil*的书中被创造的，在这本书中，主角西比尔·多塞特有多重人格。
- en: disorder.
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: 混乱。
- en: The first proof of work was introduced by Dwork and Naor in 1992 [1]. This work
    was
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个工作证明是由Dwork和Naor在1992年引入的[1]。这项工作是
- en: done to combat junk emails whereby associating a computational cost, that is,
    pricing
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: 通过打击垃圾邮件来完成，通过关联计算成本，也就是说，定价
- en: functions, with sending emails results in creating a type of access control
    mechanism
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: 函数，发送电子邮件会导致创建一种访问控制机制
- en: where access to resources can only be obtained by computing a moderately hard
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: 这里只能通过计算一种适度困难的方式来获得资源
- en: function which prevents excessive use. Proof of work has also been proposed
    in Adam
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: 防止过度使用的功能。工作证明也在亚当提出了。
- en: Back’s Hashcash proposal [10].
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: Back的Hashcash提案[10]。
- en: The key intuition behind proof of work in a blockchain is to universally slow
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链中工作证明的关键直觉是普遍减慢
- en: down the proposals for all participants, which achieves two goals. First, it
    allows all
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: 对所有参与者的提案进行实施，从而实现两个目标。首先，它允许所有
- en: participants to converge on a common consistent view, and, second, it makes
    Sybil
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: 参与者收敛于一个共同的一致观点，其次，它使假冒者攻击成为可能。
- en: attacks very expensive, which helps with the integrity of the blockchain.
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击变得非常昂贵，这有助于区块链的完整性。
- en: It has been observed that it is impossible (impossibility results) to achieve
    an
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: 已经观察到，不可能（无法实现结果）达到一致的共识。
- en: agreement in a network where participants are anonymous even if there is only
    one
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 网络中的协议，其中参与者是匿名的，即使只有一个
- en: Byzantine node [2]. This is due to the Sybil attack, which can create arbitrarily
    many
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: 拜占庭节点[2]。这是由于假冒者攻击，可以制造任意多个
- en: identities to game the system in attackers’ favor by voting many times. If there
    is a way to prevent such attacks, only then there is some guarantee that the system
    will work
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 身份以操纵攻击者的系统来投票多次。如果有办法阻止这种攻击，那么只有这样才能保证系统能够正常工作。
- en: as expected; otherwise, the attacker can create arbitrarily many identities
    to attack the system. This problem was solved practically by proof of work consensus
    or Nakamoto
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期那样；否则，攻击者可以创建任意多的身份来攻击系统。这个问题在实际中被工作证明共识或Nakamoto
- en: consensus [3]. Before Bitcoin, the use of moderately hard puzzles to assign
    identities in an anonymous network was first suggested by Aspnes [4]. However,
    the solution that
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: 共识 [3]。在比特币之前，使用中等难度的难题在匿名网络中分配身份首先是由Aspnes[4]建议的。然而，解决方案
- en: Aspnes introduced requires authenticated channels, whereas in Bitcoin unauthenticated
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: Aspnes提出需要经过认证的通道，而在比特币中不需要认证
- en: communication is used, and puzzles are noninteractive and publicly verifiable.
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: 通信被使用，并且难题是非交互式的并且公开可验证的。
- en: So even in the presence of the abovementioned impossibility results in classical
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: 因此即使在经典的不可能结果存在的情况下
- en: literature, Nakamoto consensus emerged, which for the first time showed that
    consensus
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 文献中，Nakamoto共识出现，首次展示了共识
- en: can be achieved in a permissionless model.
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: 在无许可模式中可以实现。
- en: Remember we discussed random oracles in Chapter [3](https://doi.org/10.1007/978-1-4842-8179-6_3).
    In proof of work, hash functions are used to instantiate random oracles. Since
    the output of hash functions
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: 记得我们在[第3章](https://doi.org/10.1007/978-1-4842-8179-6_3)中讨论了随机神谕。在工作证明中，哈希函数被用来实例化随机神谕。由于哈希函数的输出长度
- en: is sufficiently long and random, an adversary cannot predict future hashes or
    can
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: 足够长且随机，对手无法预测未来的散列，或者能
- en: cause hash collisions. These properties make SHA-256 a good choice to use it
    as a hash
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: 造成散列碰撞。这些属性使得SHA-256成为将其用作散列的良好选择
- en: function in the proof of work mechanism.
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作机制的证明中发挥了关键作用。
- en: '215'
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: '215'
- en: '![](index-233_1.png)'
  id: totrans-1032
  prefs: []
  type: TYPE_IMG
  zh: '![](index-233_1.png)'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章 区块链共识
- en: The key requirement in a blockchain is to totally order the transactions. If
    all
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链的关键要求是要对交易进行全面排序。如果所有
- en: participants are known and the scale is limited to a few nodes, then we can
    use
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: 参与者被知晓并且规模被限制在几个节点，那么我们可以使用
- en: traditional consensus like BFT; however, with thousands of unknown nodes, traditional
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: 传统共识像BFT；然而，有成千上万未知的节点，传统
- en: BFT cannot be used. The proof of work consensus mechanism addresses this issue.
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: 不能使用BFT。工作证明共识机制解决了这个问题。
- en: There is a scalability vs. performance trade-off [6] that comes up when comparing
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: 在比较时会出现可伸缩性与性能的权衡 [6]
- en: traditional BFT with PoW, as shown in Figur[e 5-1\.](#p233)
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的BFT与PoW，如图[5-1\.](#p233)所示。
- en: '***Figure 5-1\.** Performance vs. scalability*'
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: '***图5-1\.** 性能 vs. 可伸缩性*'
- en: The proof of work or Nakamoto consensus protocol is a Byzantine fault–tolerant
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: 工作证明或Nakamoto共识协议是一种拜占庭容错
- en: protocol because it can tolerate arbitrary faults. It can be seen as an **eventual
    Byzantine** **agreement** mechanism.
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: 协议，因为它能够容忍任意故障。它可以被看作是**最终的拜占庭**协议机制。
- en: '**How PoW Works**'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: '**PoW工作方式**'
- en: Let’s first define some of the requirements of PoW. Indeed, proof of work was
    originally
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们定义一些PoW的要求。事实上，工作证明起初
- en: introduced in Bitcoin without any rigorous documentation or proofs of correctness.
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币中引入，却没有经过严谨的文档记录或正确性证明。
- en: 'Here, for clarity and easier understanding, we will list some of the requirements
    (almost retrospectively) and see if PoW fulfills those requirements and how:'
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清晰和更容易理解，我们将列举一些要求（几乎是追溯的）并查看PoW是否满足这些要求以及如何满足：
- en: '• **Consistency**: New blocks are replicated to all nodes.'
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: • **一致性**：新块被复制到所有节点。
- en: '• **Linked with previous block**: A log is maintained in such a way that'
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: • **与上一个块链接**：日志以一种方式维护，使
- en: each new entry is linked with the previous entry forming a chain.
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: 每个新条目与先前条目链接在一起形成链。
- en: '• **Permissionless and open participation**: Nodes can join without any'
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: • **无许可和开放参与**：节点可以无需任何
- en: access control and can leave without notice.
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: 访问控制并且可以无需通知离开。
- en: '216'
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: '216'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章 区块链共识
- en: • Partition tolerance.
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: • 分区容错。
- en: • Geographically dispersed.
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
  zh: • 地理分散。
- en: • Thousands of nodes allowed where anyone anywhere in the world
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: • 允许成千上万的节点，无论在世界的任何地方
- en: can download a client and become part of the network by running
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: 可以下载客户端并通过运行成为网络的一部分
- en: the client.
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端。
- en: • Highly adversarial environment, so Byzantine fault tolerance is of
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: • 高度对抗的环境，因此拜占庭容错性至关重要。
- en: prime importance.
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: 首要重要性。
- en: • Heterogenous where a number of different types of computers and
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: • 不同类型的计算机和其他多样化的设备
- en: hardware devices can join.
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件设备可以加入。
- en: • Asynchronous in the sense that there is no bound on the CPU or
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: • 异步的意思是CPU或
- en: communication delays, just an eventual guarantee that messages are
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: 通信延迟，只是一个最终的保证，消息被
- en: expected to reach all nodes with high probability.
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: 预计以很高的概率到达所有节点。
- en: The question is, how do you design a consensus protocol for such a difficult
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是，如何为这样一个困难设计共识协议
- en: environment? Yet, Bitcoin PoW has stood the test of time, and apart from some
    limited
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: 环境？然而，比特币PoW经受住了时间的考验，除了一些有限的
- en: and carefully orchestrated attacks and some inadvertent bugs, largely the Bitcoin
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: 和精心策划的攻击和一些无意的错误，主要是比特币
- en: network has been running without any issues for the last 13 years. How? I’ll
    explain now.
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: 网络在过去的13年里一直运行良好。为什么？现在我会解释。
- en: '**Pedagogical Explanation of PoW**'
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: '**PoW的教学解释**'
- en: Imagine a scenario where a node has proposed a block and has broadcast it to
    the network.
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个场景，一个节点提出了一个块，并将其广播到网络中。
- en: The nodes that receive it can do either of two things. Either they can accept
    the block
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: 收到它的节点可以执行两种操作之一。他们可以接受该块
- en: and append it to a local blockchain, or they can reject it if the block is not
    valid. Now also imagine the block is indeed valid, then the receiving nodes can
    simply accept it and agree on the proposed block. Imagine there is only a proposer
    node ever in the entire system,
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: 并将其附加到本地区块链，或者如果块无效则可以拒绝。现在还想象一下块确实有效，那么接收节点可以简单地接受并同意所提出的块。想象整个系统中只有一个提议者节点，
- en: and that node is honest and trustworthy. This means that there is no real consensus
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: 那个节点是诚实和值得信赖的。这意味着没有真正的共识
- en: required; the proposer node simply proposes new blocks, and nodes agree to it,
    resulting
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: 需要；提议者节点只需提出新的块，节点们同意，导致
- en: in an eventual total order of blocks containing transactions. But this is a
    centralized system with a trusted third party that, if it stays honest, as a leader,
    can drive the whole system because everyone trusts it. What if it turned malicious,
    then it’s a problem?
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: 在包含交易的块的最终总顺序中。但这是一个有可信第三方的中心化系统，如果它保持诚实，作为领导者，可以驱动整个系统，因为每个人都信任它。如果它变得恶意，那就是一个问题？
- en: Perhaps, we can allow other nodes to propose as well, to take away control from
    that
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: 或许，我们还可以允许其他节点提出，以剥夺控制权
- en: single node, which is not trustworthy. Imagine that we now have two nodes proposing
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: 单个节点，不值得信任。现在想象我们现在有两个提议节点
- en: valid blocks and broadcasting them on the network. Now there is a problem; some
    of
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的块并在网络上广播它们。现在有一个问题；其中一些
- en: the receiving nodes will add one block and then the other. Some wouldn’t know
    which
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: 接收节点会添加一个块，然后添加另一个。有些节点可能不知道哪一个
- en: '217'
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: '217'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章 区块链共识
- en: one to accept or which to reject. Proposals are made at the same time, and now
    nodes
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: 选择接受哪一个拒绝哪一个。提议同时提出，现在节点
- en: don’t know which block to insert; perhaps, they will insert both. Now some nodes
    have
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: 不知道要插入哪个块；也许，他们会插入两者。现在一些节点已经
- en: inserted blocks from proposer 1 and the others from proposer 2 only and some
    from
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: 仅从提议者1插入块，其他节点从提议者2插入块，另一些从
- en: both. As you can imagine, there is no consensus here.
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: 两者。正如你可以想象的，这里没有共识。
- en: Imagine another scenario where two nodes simultaneously announce a block; now
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: 再想象另一个场景，两个节点同时宣布一个块；现在
- en: the receiving nodes will receive two blocks, and instead of one chain, there
    are now two
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: 接收节点将收到两个块，而不是一个链，现在有两个
- en: chains. In other words, there are two logs and histories of events. Two nodes
    proposed a
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: 链。换句话说，有两个日志和事件历史。两个节点提出了一个
- en: block at the same time; all nodes added two blocks. Now it is no longer a single
    chain, it is a tree, with two branches. This is called a fork. In other words,
    if nodes learn about two different blocks pointing to the same parent at the same
    time, then the blockchain forks
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: 同时; 所有节点都添加了两个块。现在不再是单一链，而是一棵树，有两个分支。这被称为分叉。换句话说，如果节点同时了解到指向相同父级的两个不同块，那么区块链就会分叉
- en: into two chains.
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: 分为两条链。
- en: Now in order to resolve this, we can allow nodes to pick the longest chain of
    blocks
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: 现在为了解决这个问题，我们可以允许节点选择最长的块链
- en: at that time that they know of and add the new block to that chain and ignore
    the other
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: 那时他们所知道的时间内将新块添加到该链并忽略其他
- en: branch. If it so happens that there are two or more branches somehow with the
    same
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: 分支。如果碰巧存在两个或多个不同的分支
- en: height (same length), then just pick up randomly one of the chains and add the
    new block
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: 高度（相同长度）时，随机选择其中一条链并添加新区块
- en: to it. This way, we can resolve this fork. Now all nodes, knowing this rule
    that only the longest chain is allowed to have new blocks, will keep building
    the longest chain. In the case of two or more same height chains, then just randomly
    add the block to any of these.
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到其中。通过这种方式，我们可以解决这个分叉情况。现在所有节点，知道了只有最长的链才允许有新的区块，将会继续构建最长的链。在出现两条或更多同样长度的链时，随机向其中的任何一条添加区块。
- en: So far, so good! This scheme appears to work. A node decides to add the new
    block into a
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切都很好！这个方案似乎有效。一个节点决定将新区块添加到一个
- en: randomly chosen chain and propagates that decision to others, and other nodes
    add that
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: 随机选择一条链并向其他节点传播这个决定，其他节点也会添加该
- en: same block to their chains. Over time, the longest chain takes over, and the
    shorter chain is ignored because no new blocks are added to it, because it’s not
    the longest chain.
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的区块添加到它们的链中。随着时间的推移，最长的链占据主导地位，较短的链被忽视，因为没有新的区块添加到其中，因为它不是最长的链。
- en: But now there is another problem. Imagine a situation where a node randomly
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在出现了另一个问题。想象一种情况，一个节点随机地
- en: chooses one chain after a fork, adds a block to it, propagates that decision
    to others,
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: 在分叉后选择一条链，向其添加一个区块，并向其他节点传播这个决定，
- en: other nodes add as well, and, at this point, some nodes due to latency don’t
    hear about
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: 其他节点也会添加，而此时由于延迟，有些节点并没有得知此事
- en: the decision. Some nodes add the block they heard from another node to one of
    its
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个决定。有些节点将从另一个节点那里听到的区块添加到它们的链中
- en: chains, another one does the opposite, and this cycle repeats. Now you can clearly
    see
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: 链，另一个执行相反的操作，然后这个循环重复。现在你可以清楚地看到
- en: that there are two chains, both getting new blocks. There is no consensus. There
    is a
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: 出现两条正在获取新区块的链。没有共识。有一
- en: livelock situation where nodes can keep adding to both chains.
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: 发生一个活锁，节点可以持续向两个链中添加区块。
- en: At this point, let’s think about what the fundamental reason is and why this
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: 此刻，让我们思考一下根本原因是什么，为什么这种
- en: livelock is occurring. The reason is that blocks are generating too fast, and
    other nodes receive many different blocks from different nodes, some quickly,
    some delayed. This
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: 活锁正在发生。原因是区块生成速度太快，其他节点从不同节点接收到许多不同的区块，有的很快，有的延迟。这
- en: asynchrony results in a livelock. The solution? Slow it down! Give nodes time
    to converge to one chain! Let’s see how.
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: 异步性导致活锁。解决方案？慢一点！给节点时间收敛到一条链上！让我们看看如何做到。
- en: '218'
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: '218'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章 区块链共识
- en: We can introduce a random waiting period, which will make miners to arbitrarily
    sleep
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以引入一个随机等待期，这将使矿工们任意休眠
- en: for some time and then mine. The key insight here is that the livelock (continuous
    fork)
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: 一段时间，然后再进行挖矿。关键的洞察力在于，活锁（持续分叉）
- en: problem can be resolved by introducing a variable speed timer at each node.
    When a node
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在每个节点引入可变速计时器来解决这个问题。当一个节点
- en: adds a new block to its chain, it stops its timer and sends it to other nodes.
    Other nodes are waiting for their timers to expire, but during that waiting time,
    if they hear about this new block from another node, they simply stop their timers
    and add this new block and
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 向其链中添加一个新区块后，停止其计时器并将其发送给其他节点。其他节点正在等待它们的计时器到期，但是在等待时间内，如果它们从其他节点那里得知了此新区块，它们会简单地停止计时器并添加这个新区块
- en: reset the timers and start waiting again. This way, there will only be one block
    added to the chain, instead of two. If the timers are long enough, then chances
    of forking and livelocking decrease significantly. Another thing to note here
    is that if there are many nodes in the system, then there is a higher chance that
    some timer will expire soon, and as we keep
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: 重置计时器并重新开始等待。这样，链上只会增加一个区块，而不是两个。如果计时器足够长，那么分叉和活锁的几率会显著降低。在这里需要注意的另一件事是，如果系统中有许多节点，那么某个计时器很快就会过期的几率就会更高，而且随着我们持续
- en: adding more and more nodes, the probability of such occurrences increases because
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了越来越多的节点，这种情况发生的概率增加了，因为
- en: timers are random and there are many nodes now. In order to avoid the same livelock
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: 计时器是随机的，而且现在有很多节点。为了避免相同的活锁
- en: situations, we need to increase the sleeping time of these timers as we add
    more nodes,
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: 情况，我们需要增加这些计时器的睡眠时间，以便添加更多节点之后，
- en: so that the probability of adding a block by nodes quickly is decreased to such
    a level that only one node will eventually succeed to add a new block to their
    chain and will announce that to the network. Also, the waiting period ensures
    with high probability that forks will be resolved during this waiting time. It
    is enough time to ensure complete propagation of a new valid block so that no
    other block for the same height can be proposed.
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: 以便节点快速增加区块的概率降至一定水平，最终只有一个节点成功地向他们的链中添加一个新区块并将其通知给网络。此外，等待期大概率确保在此等待时间内解决分叉。这足够的时间确保新有效区块的完全传播，以便不会有其他同一高度的区块被提出。
- en: Bitcoin chooses this timeout period based on the rate of block generation of
    2016
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币根据2016年
- en: blocks, which is roughly two weeks. As the block generation should be roughly
    a single
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: 区块，大概是两周。由于区块产生应该大致是一个
- en: block every ten minutes, if the protocol observes that the block generation
    has been
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: 每十分钟生成一块，如果协议观察到区块生成较慢
- en: faster in the last two weeks, then it increases the timeout value, resulting
    in slower
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去两周内变得更快，那么它会增加超时值，导致更慢
- en: generation of blocks. If the protocols observe that the block generation has
    been slower, then it decreases the timeout value. Now one problem in this timeout
    mechanism is
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: 区块的生成。如果协议观察到区块生成较慢，那么它就会降低超时值。现在，这种超时机制中的一个问题是
- en: that if a single node turns malicious and always manages to somehow make its
    timer
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单个节点变为恶意节点，总是设法使其计时器
- en: expire earlier than other nodes, this node will end up creating a block every
    time. Now
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: 比其他节点提前到期，这个节点将每次创建一个区块。现在
- en: the requirement becomes to build a timer which is resistant to such cheating.
    One
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: 要建立一个抵抗此类欺骗的计时器。一个
- en: way of doing this is to build a trusted mechanism with some cryptographic security
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的方法是建立一个带有一些密码安全性的可信任机制
- en: guarantees to act as a secure enclave in which the timer code runs. This way,
    due to
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: 保证作为一个安全飞地，其中计时器代码运行。通过
- en: cryptographic guarantees, the malicious node may not be able to trick the time
    into
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: 加密保证措施，恶意节点可能无法欺骗时间
- en: always expiring first.
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: 总是最先到期。
- en: This technique is used in the PoET (proof of elapsed time) algorithm used in
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术是PoET（已消逝时间的证明）算法中使用的
- en: Hyperledger Intel Sawtooth blockchain. We will discuss this in Chapt[er 8\.](https://doi.org/10.1007/978-1-4842-8179-6_8)
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Intel Sawtooth 区块链。我们将在第8章讨论这个问题。
- en: '219'
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: '219'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章 区块链共识
- en: Another way, the original way, Nakamoto designed the algorithm is to make
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方式，原始方式，中本聪设计的算法是为了使
- en: computers do a computationally complex task which takes time to solve – just
    enough
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机执行一个需要时间解决的计算复杂任务——正好
- en: to be able to solve it almost every ten minutes. Also, the task is formulated
    in such a
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: 每十分钟几乎都能解决。此外，任务的设置是这样的
- en: way that nodes cannot cheat, except to try to solve the problem. Any deviation
    from
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: 节点无法欺骗的方式，除了尝试解决问题。任何与
- en: the method of solving the problem will not help, as the only way to solve the
    problem
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
  zh: 解决问题的方法将无济于事，因为解决问题的唯一方法
- en: is to try every possible answer and match it with the expected answer. If the
    answer
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试每个可能的答案并将其与预期答案匹配。如果答案
- en: matches with the expected answer, then the problem is solved; otherwise, the
    computer
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: 与预期答案匹配，则问题已解决；否则，计算机
- en: will have to try the next answer and keep doing that in a brute-force manner
    until the
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: 将不得不尝试下一个答案并保持这样以蛮力方式一直做下去直到
- en: answer is found. This is a brilliant insight by Satoshi Nakamoto which ensures
    with
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: 找到答案。这是中本聪的一项杰出见解，它确保
- en: high probability that computers cannot cheat, and timers only expire almost
    every ten
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机几乎每十分钟不能欺骗，而计时器只能每十分钟结束一次
- en: minutes, giving one of the nodes the right to add its block to the blockchain.
    This is the so-called proof of work, meaning a node has done enough work to demonstrate
    that it
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: 分钟，给其中一个节点添加其区块到区块链的权利。这就是所谓的工作量证明，意味着节点已经付出足够的努力证明它
- en: has spent enough computational power to solve the math problem to earn the right
    to
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: 已经花费足够的计算能力来解决数学问题以赢得权利
- en: insert a new block to the blockchain.
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: 向区块链插入一个新区块。
- en: Proof of work is based on cryptographic hash functions. It requires that for
    a block
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: 工作量证明是基于密码哈希函数的。它要求对于一个区块
- en: to be valid, its hash must be less than a specific value. This means that the
    hash of the block must start with a certain number of zeroes. The only way to
    find such a hash is to
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效，它的哈希必须小于一个特定的值。这意味着区块的哈希必须以一定数量的零开头。找到这样的哈希的唯一方法是
- en: repeatedly try each possible hash and see if it matches the criterion; if not,
    then try again until one node finds such a hash. This means that in order to find
    a valid hash, it takes roughly ten minutes, thus introducing just enough delay
    which results in resolving forks
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: 反复尝试每个可能的哈希值，看它是否符合标准；如果不符合，那就继续尝试，直到有一个节点找到这样的哈希。这意味着为了找到一个有效的哈希，大约需要十分钟的时间，因此引入了足够的延迟，从而导致解决分叉
- en: and convergence on one chain while minimizing the chance of one node winning
    the
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: 并收敛于一个链，同时最小化一个节点赢得机会的可能性
- en: right to create a new block every time.
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧每次创建一个新区块。
- en: Now it is easy to see that proof of work is a mechanism to introduce waiting
    time
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在很容易看出，工作证明是一种引入等待时间的机制
- en: between block creation and ensuring that only one leader eventually emerges,
    which can
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: 区块生成和确保最终只有一个领导者出现之间的差距，这可以
- en: insert the new block to the chain.
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: 将新区块插入到链中。
- en: So, it turns out that PoW is not, precisely speaking, a consensus algorithm;
    it is a
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，可以得出结论，PoW 不是一个精确来说的共识算法；它是一个
- en: consensus facilitation algorithm which, due to slowing down block generations,
    allows
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: 共识促进算法，由于减缓区块生成，允许
- en: nodes to converge to a common blockchain.
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: 节点收敛到一个常见的区块链。
- en: Now as we understand the intuition behind the proof of work mechanism, next
    we
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们理解了工作证明机制背后的直觉，接下来
- en: will describe how exactly the proof of work algorithm works in Bitcoin.
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: 将描述比特币中工作证明算法的具体工作方式。
- en: '220'
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: '220'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: 第 5 章 区块链共识
- en: '**PoW Formula**'
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: '**PoW 公式**'
- en: 'The PoW consensus process can be described with the help of a formula:'
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
  zh: PoW 共识过程可以用一个公式来描述：
- en: '*SHAd* 256( *nonce* || *Block heade*'
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: '*SHAd* 256( *nonce* || *Block heade*'
- en: '*r*) ≤ *target*'
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
  zh: '*r*) ≤ *target*'
- en: where *SHAd* 256 represents a SHA-256 hash twice. In other words, double
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 *SHAd* 256 表示 SHA-256 哈希两次。换句话说，双
- en: SHA-256 means the hash of the hash of the input. A block header consists of
    Version,
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
  zh: SHA-256 表示输入的哈希值的哈希值。一个区块头包括版本、
- en: hashPrevBlock, hashMerkleRoot, Time, Bits (difficulty target), and Nonce. Nonce
    is an
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: hashPrevBlock, hashMerkleRoot, 时间, Bits（难度目标）和 Nonce。Nonce 是
- en: arbitrary number that is repeatedly changed and fed into the proof of work algorithm
    to
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: 反复更改并输入工作证明算法的任意数字
- en: see if it results in a value which is less than or equal to the difficulty target.
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
  zh: 看看它是否产生一个小于或等于难度目标的值。
- en: The target value is calculated from the mining difficulty which changes every
    2016
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: 目标值是根据挖矿难度计算得出的，每 2016
- en: blocks, which is equivalent to roughly two weeks. If miners are mining too fast
    – let’s say every eight minutes, they manage to generate a block instead of ten
    minutes – it means
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: 个区块，大约相当于两周。如果矿工挖矿速度太快 – 比如说每八分钟，他们能够在十分钟内生成一个区块 – 这意味着
- en: there is too much hash power; therefore, as a regulation mechanism, the difficulty
    goes
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果哈希功率过高；因此，作为调控机制，难度会增加
- en: up. If miners are producing blocks over the course of the previous 2016 blocks
    too slowly, say 1 block every 12 minutes, then it is slower than expected; therefore,
    the difficulty is regulated down. Let’s go through some formulas.
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果矿工在之前的 2016 个区块的时间内生成的区块速度过慢，比如每 12 分钟一个区块，那么就慢于预期；因此，难度被调整为更低。让我们来看看一些公式。
- en: First, Bitcoin’s difficulty formula calculates the new difficulty for the next
    2016 blocks based on the rate of block generation of the previous 2016 blocks.
    The formula is
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，比特币的难度公式基于前 2016 个区块的区块生成速率，计算了接下来 2016 个区块的新难度。公式为
- en: ( *previous difficulty*
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: ( *上一个难度*
- en: × 2016×10 *minutes*)
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: × 2016×10 *分钟*)
- en: '*New difficulty* = ( *time t* *ook* *to m* *ine* *most* *recent* 2016 *blocks*)
    This formula basically regulates the blockchain to produce new blocks roughly
    at a'
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: '*新难度* = ( *时间 t* *挖* *最* *新* 2016 *个* *区块的* *时间*) 这个公式基本上调整了区块链的难度，以便每次'
- en: mean rate of ten minutes.
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: 十分钟的平均速度。
- en: Now in order to calculate the target, first calculate the difficulty using the
    following
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在为了计算目标值，首先根据以下公式计算难度
- en: 'formula:'
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: 公式：
- en: ( *possible* *target* )
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: ( *可能的* *目标* )
- en: '*difficulty* = ( *current target*'
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
  zh: '*难度* = ( *当前目标*'
- en: )
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'Finally, the target is calculated using the following formula:'
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用以下公式计算目标值：
- en: ( *possible* *target* )
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
  zh: ( *可能的* *目标* )
- en: '*target* ='
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: '*目标* ='
- en: ( *difficulty*)
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: ( *难度*)
- en: '221'
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: '221'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
  zh: 第 5 章 区块链共识
- en: Now that we have established how the target value is calculated, let’s see what
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经确定了目标值是如何计算的，现在我们来看看
- en: miners do and how they find a hash which satisfies the preceding equation, that
    is, the
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: 矿工的行为以及他们如何找到满足前面方程的哈希，即
- en: value obtained after hashing the block is less than the target value. In other
    words, the block hash must match a specific pattern where the hash starts with
    a certain number
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: 再次哈希成 sha-256，所得到的值
- en: of zeroes. This is also known as the partial hash inversion problem. This problem
    is to
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: 全为零。这也被称为部分哈希反演问题。这个问题就是
- en: find a partial preimage to the double SHA-256 hash function, which can only
    be found (if
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: 找到双 SHA-256 哈希函数的部分原像，只有在满足条件时才能找到（如果有的话）。
- en: ever) by trying different inputs one by one until one of the inputs works.
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的输入，直到其中一个输入起作用。
- en: Fundamentally, Bitcoin mining is the process of finding a nonce that, when
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，比特币挖矿是找到一个随机数，当
- en: concatenated with a block and hashed twice using the sha-256 hash function,
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: 拼接一个区块，然后两次使用 sha-256 哈希函数进行哈希，
- en: produces a number which starts with a specific number of zeroes.
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个值，该值从特定数量的零开始。
- en: So, what do miners do?
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，矿工到底在干什么呢？
- en: '**Task of Miners**'
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: '**矿工的任务**'
- en: In the Bitcoin blockchain network, when new transactions are executed by a user
    they
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: 在比特币区块链网络中，当用户执行新交易时
- en: are broadcast to all nodes on the network via a peer-to-peer gossip protocol.
    These
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点对点的八卦协议广播到网络上的所有节点。这些
- en: 'transactions end up in transaction pools of nodes. Miners perform several tasks:'
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: 交易最终进入节点的交易池。矿工执行几项任务：
- en: • Miners maintain transaction pools. They listen for incoming
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: • 矿工维护交易池。他们监视传入的
- en: transactions and keep those in their pools.
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: 交易并将这些保留在他们的池中。
- en: • They also listen for new blocks and append any new valid blocks
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: • 他们还会听取新的区块并追加任何新的有效区块
- en: to their chain. This is of course not only the task for a miner, other
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: 附加到它们的链。当然，这不仅仅是矿工的任务，其他
- en: nonmining nodes also simply synchronize the blocks.
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: 非挖矿节点也只是同步区块。
- en: • Create a candidate block by picking up transactions from the
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: • 通过从
- en: transaction pool.
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: 交易池。
- en: • Find a nonce by trying every nonce which when concatenated with
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
  zh: • 通过尝试每一个随机数找到一个随机数
- en: the block and the previous hash results in a number which is less
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: 区块和前一个哈希的哈希结果小于一个数字
- en: than the target as per formula 3 earlier.
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: 根据之前的公式 3 和目标。
- en: '222'
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: '222'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: 第 5 章 区块链共识
- en: • Broadcast the newly mined block to the network.
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: • 将新挖掘的区块广播给网络。
- en: • Fetch the reward by receiving Coinbase on the address that the miner
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: • 通过在矿工所在的地址接收 Coinbase 来获取奖励
- en: wants to send the reward to.
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
  zh: 想要发送奖励的地址。
- en: Let’s see what a candidate block contains and how it is created.
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: 看看一个候选区块包含什么以及如何创建。
- en: A potentially valid candidate block and eventually a valid block contain several
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: 一个潜在的有效候选区块，最终是一个有效的区块，包含了一些
- en: elements, which are listed in Table [5-2](#p240).
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
  zh: 元素，这些元素在表[5-2](#p240)中列出。
- en: '***Table 5-2\.** Block elements*'
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: '***表格 5-2\.** 区块元素*'
- en: '**Size**'
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: '**大小**'
- en: '**Description**'
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**'
- en: '**Data Type**'
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据类型**'
- en: '**Explanation**'
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: '**解释**'
- en: '4'
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: '4'
- en: Version
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: 版本
- en: integer
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: 整数
- en: Block version
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: 区块版本
- en: '32'
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: '32'
- en: prev_block
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个区块
- en: Character
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: 字符
- en: the hash value of the previous block header
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个区块头的哈希值
- en: '32'
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: '32'
- en: merkle_root
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: 默克尔根
- en: Character
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: 字符
- en: Merkle root hash of all transaction in block
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
  zh: 区块中所有交易的默克尔根哈希
- en: '4'
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: '4'
- en: timestamp
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳
- en: unsigned integer
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数
- en: time of block creation in unix time format
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: 在 unix 时间格式下的区块创建时间
- en: '4'
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: '4'
- en: bits
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: 比特
- en: unsigned integer
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数
- en: n[etwork difficulty target for the block](https://en.bitcoin.it/wiki/Difficulty)
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: 区块的网络难度目标](https://en.bitcoin.it/wiki/Difficulty)
- en: '4'
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
  zh: '4'
- en: nonce
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
  zh: 随机数
- en: unsigned integer
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数
- en: nonce for this block
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
  zh: 该区块的随机数
- en: 1+
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
  zh: 1+
- en: txn_count
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
  zh: 交易数
- en: Variable integer
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: 变量整数
- en: total number of transactions
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: 总交易数
- en: variable
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
  zh: 变量
- en: txns
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: 交易数
- en: tx[ ]
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: 交易[ ]
- en: transactions
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: 交易
- en: The diagram in Figur[e 5-2 sho](#p241)ws how transactions from a transaction
    pool (bottom left of the figure) are picked up and a Merkle tree is created, the
    root of which is included in the candidate block. Finally, double (SHA-256) is
    computed for the block for a
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
  zh: 图 [5-2 展](#p241)示了如何从交易池中挑选交易（图的左下方），并创建一个默克尔树，最后区块的候选者中包含了其根。 最后，对区块进行双层 (SHA-256)
    计算
- en: comparison against the target.
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
  zh: 与目标值进行比较。
- en: '223'
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: '223'
- en: '![](index-241_1.png)'
  id: totrans-1266
  prefs: []
  type: TYPE_IMG
  zh: '![](index-241_1.png)'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: 第 5 章 区块链共识
- en: '***Figure 5-2\.** Transaction pool transactions to the Merkle tree and candidate
    block* A nonce is a number from 1 to 232 – 1, that is, a 32-bit unsigned integer
    which gets'
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
  zh: '***图5-2\.** 交易池交易到Merkle树和候选区块* 随机数是1到232 – 1之间的数字，即32位无符号整数，它'
- en: included in the block. Using this nonce in each iteration of checking if the
    resultant
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
  zh: 包含在区块内。在每次迭代中使用这个随机数来检查是否得到了结果
- en: number is less than the target is what’s called a mining. If the resultant number
    is less than the target, then it’s a block mined and it’s valid, which is then
    broadcast to the
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: 数字小于目标就叫*挖矿*。如果结果数小于目标，那就叫做挖出的区块，是有效的，然后就会广播到
- en: network.
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: 网络。
- en: The nonce field in a block being an unsigned integer, there are only 232 nonces
    to
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: 区块中的随机数字段是一个无符号整数，只有232个随机数
- en: try. As such, miners can run out of them quite quickly. In other words, it means
    that
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试。换句话说，矿工很快就会用完它们。也就是说
- en: there are roughly four billion nonces to try which miners can quickly perform
    given the
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: 大约有40亿个随机数要尝试，矿工们可以快速执行，鉴于
- en: powerful mining hardware available. It also is very easy even for a normal computer
    to
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
  zh: 强大的采矿硬件。即使对于普通计算机也很容易
- en: quickly check.
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: 快速检查。
- en: This of course can create an issue where no one is able to find the required
    nonce
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
  zh: 这当然可能会出现一个问题，即没有人能够找到所需的随机数
- en: which produces the required hash. Even if miners try again, they will try the
    same thing
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
  zh: 生成所需散列。即使矿工再次尝试，他们仍会尝试相同的事情
- en: again with the same results. At this stage, we can use other attributes of the
    block and use them as a variable and keep modifying the block until the hash of
    the block is less than
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: 以相同的结果再次进行验证。在这个阶段，我们可以使用区块的其他属性，并将它们用作变量，并保持修改区块，直到区块的散列小于
- en: the target, that is, *SHAd* 256( *Block header* ‖ *nonce* ) < *Target*.
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是，即 *SHAd* 256（ *区块头* ‖ *随机数*） < *目标*。
- en: '224'
  id: totrans-1281
  prefs: []
  type: TYPE_NORMAL
  zh: '224'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章区块链共识
- en: Now after going through all these iterations, what if the valid nonce is not
    found?
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在经历了所有这些迭代之后，如果找不到有效的随机数呢？
- en: At this point, miners will have to increase the search space somehow. For this,
    they can
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，矿工们将不得不以某种方式增加搜索空间。为此，他们可以
- en: 'modify the block somewhat to get a different hash. They can do several things:'
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
  zh: 修改区块所以得到不同的散列。他们可以做一些事情：
- en: • Drop the transactions, add new transactions, or pick up a new set of
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: '*删除交易*，添加新交易，或者选择一个新的集合'
- en: transactions. This modification will recalculate the Merkle root, and
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: 交易。此修改将重新计算Merkle根，
- en: hence the header, and as a result, the hash will be different.
  id: totrans-1288
  prefs: []
  type: TYPE_NORMAL
  zh: 因此头部，因此散列将会不同。
- en: • Modify the timestamp slightly (in the range of two hours; otherwise,
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
  zh: '*修改时间戳* 在两小时范围内微调（否则'
- en: it’s an invalid block). It can be done simply by adding just a
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个无效的区块）。 只需简单地添加一点
- en: second, which will result in a different header and consequently a
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
  zh: 秒，这将导致不同的头部，从而导致
- en: different hash.
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的散列。
- en: • Modify Coinbase via unused *ScriptSig*, where you can put any
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
  zh: '*通过未使用的* ScriptSig *修改Coinbase* ，在那里你可以放任何'
- en: arbitrary data. This will change the Merkle root and hence the header
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
  zh: 任意数据。这将改变Merkle根，因此也会改变头部
- en: and consequently the hash.
  id: totrans-1295
  prefs: []
  type: TYPE_NORMAL
  zh: 因此也得到散列。
- en: And miners can keep modifying with different variations until they reach
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
  zh: 而矿工可以继续用不同的变体进行修改，直到他们达到
- en: '*SHAd* 256( *Block header* ‖ *nonce* ) < *target*, which means that they’ve
    found a valid nonce that solves the proof of work.'
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
  zh: '*SHAd* 256（ *区块头* ‖ *随机数*） < *目标*，这意味着他们找到了一个解决工作证明的有效随机数。'
- en: The discovery of the valid hash is based on the concept known as *partial hash*
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
  zh: 找到所需随机数的发现基于所谓的*部分散列*概念
- en: '*inversion*.'
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: '*反转*。'
- en: Proof of work has some key properties. Formally, we list them as follows.
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
  zh: 工作证明有一些关键属性。正式来说，我们列举如下。
- en: '**Properties of PoW**'
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
  zh: '**PoW的特性**'
- en: 'Proof of work has five properties: completeness, computationally complex, dynamic
    cost'
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: 工作证明有五个属性：完备性，计算上复杂，动态成本
- en: adjustment, quick verification, and progress free.
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: 调整、快速验证和免费进展。
- en: '**Completeness**'
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
  zh: '**完备性**'
- en: This property implies that proofs produced by the prover are verifiable and
    acceptable
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
  zh: 这一属性意味着由证明者产生的证据是可验证和可接受的
- en: by the verifier.
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: 由验证者。
- en: '**Computationally Complex – Difficult to Compute – Slow Creation**'
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
  zh: '**计算上复杂—难以计算—缓慢的创建**'
- en: The creation of proof of work is slow but not intractable. Creating proofs requires
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
  zh: 工作证明的创建是缓慢的，但并非无法克服。创建证据需要
- en: spending considerable computational resources and takes a considerable amount
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
  zh: 花费大量的计算资源，并花费大量的时间
- en: of time.
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
  zh: 时间。
- en: '225'
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
  zh: '225'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: 第五章 区块链共识
- en: '**Auto-adjustable Cost – Dynamic Cost**'
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
  zh: '**自动调整成本 – 动态成本**'
- en: This is the elegance of this protocol. First, PoW is difficult to compute. It
    takes
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是这个协议的优雅之处。首先，PoW 是计算上困难的。它花费
- en: considerable effort to generate proof of work. Roughly, it is more than quintillions
    of
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: 关键的想法在于生成工作证明应该是计算上复杂的。
- en: hashes that are checked per second on the Bitcoin network to solve the proof
    of work.
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
  zh: 在比特币网络中每秒检查的哈希数，这是为了解决工作证明而做的
- en: Second, the parameters are adjustable, which means that even if blocks are produced
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，参数是可以调整的，这意味着即使区块生成得
- en: faster or slower, no matter how much hash power is put in place or how much
    is
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
  zh: 更快或更慢，无论放入了多少哈希功率或者
- en: removed from the network, the block generation rate roughly remains ten minutes
    per
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: 从网络中删除了，区块生成速率依然大约是每十分钟一个
- en: block. In the early days when the difficulty was one, blocks were still generated
    one per minute; now in 2022, even if the difficulty is roughly 25 tera hashes
    per second, still the protocol readjusts itself, and the block generation rate
    is still one per ten minutes. This is amazing and a testament to the robust design
    of the protocol. So, in summary if the
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: 为挖出一个区块要付出相当大的努力。大致上，这相当于超过了十的十八次方的区块。在早期，当困难因数是一时，仍然每分钟生成一个区块；而现在在2022年，即使困难因数已经达到了大约每秒25万亿次哈希，协议仍然会调整自身，并且生成的区块仍然是每十分钟一个。这真是令人惊讶，也证明了协议的健壮设计。所以总而言之，如果
- en: block generation in a period of 2016 blocks is taking more than ten minutes
    per block,
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
  zh: 在2016个区块的一段时间内的区块生成时间超过了十分钟，
- en: then in the next 2016 block period the difficulty will be readjusted to low.
    If the block generation is faster and taking less than ten minutes per block,
    for example, in case some bleeding-edge hardware is introduced for hashing in
    the network, then the difficulty
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在接下来的2016个区块周期中，困难因数将被调整到更低。如果区块生成速度更快，每个区块花费的时间少于十分钟，例如，假设网络中引入了一些最前沿的哈希硬件，那么困难因数
- en: will go up for the next 2016 blocks. This is how a state of balance is maintained
    in the
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
  zh: 将会在接下来的2016个区块周期内上升。这样就能在网络中保持一个平衡状态
- en: network. Also note that many blocks are produced very quickly under ten minutes;
    some
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
  zh: 网络。同时请注意，很多区块都在十分钟以内非常快速地生成；一些
- en: take a lot longer than that, but the average is ten minutes. This is due to
    the probabilistic nature of the protocol.
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个区块的时间可能会长得多，但平均值是十分钟。这是因为协议的概率性质。
- en: '**Quick and Efficient Verification – Quick Verification**'
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
  zh: '**快速和高效的验证 – 快速验证**'
- en: This property implies that proofs are very quick and efficient to verify. It
    should not be computationally complex to verify the proof. In the case of Bitcoin,
    it is simply running a SHA-256 hash function twice on the block with the nonce
    produced by the miner, and
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: 这个性质意味着证明是非常快速和高效的验证。验证这个证明不应该是计算上复杂的。就以比特币为例，只是两次在矿工产生的 nonce 所生成的区块上运行 SHA-256
    哈希函数。
- en: if *SHAd* 256( *nonce* ‖ *block header*) ≤ *target*, then the block is valid.
    It only takes as long as it takes to generate SHA-256 hash and then compare, which
    both are very compute-efficient processes. The key idea here is that it should
    be computationally complex to
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *SHAd* 256（*nonce* ‖ *block header*） ≤ *target*，那么该区块就是有效的。这只需要花费生成 SHA-256
    哈希和进行比较的时间，这两个过程都是非常高效的计算。
- en: generate a block with a valid nonce; however, it should be easy for other nodes
    to verify its validity.
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个带有有效 nonce 的区块；然而，其他节点应该很容易地验证其有效性
- en: '**Progress Free**'
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: '**进展自由**'
- en: This property implies that the chance of solving the proof of work is proportional
    to the hash power contributed; however, it is still a chance, not a 100% guarantee
    that a miner
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: 这一特性意味着解决工作证明的机会与投入的哈希功率成比例；然而，这仍然只是一个机会，而不是矿工
- en: with the highest hash power will always win. In other words, miners with more
    hash
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
  zh: 的哈希功率将始终获胜。换句话说，更多哈希计算能力的矿工将永远获胜
- en: '226'
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: '226'
- en: '![](index-244_1.png)'
  id: totrans-1334
  prefs: []
  type: TYPE_IMG
  zh: '![](index-244_1.png)'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
  zh: 第五章 区块链共识
- en: power get only proportional advantage, and miners with less power get proportional
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
  zh: 的哈希功率，而拥有更少哈希功率的矿工则只会得到与其成比例的
- en: compensation too and get lucky sometimes to find blocks before even miners with
    more
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
  zh: 补偿内容并有时会比更多哈希功率的矿工更快地找到区块
- en: hash power.
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: 的哈希功率
- en: In practice, this means that every miner is in fact working on a different candidate
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这意味着每个矿工实际上都在工作于一个不同的候选
- en: block to solve the proof of work. Miners are not working on the same block;
    they are not
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决工作证明的区块。矿工不是在同一个区块上工作；他们也不
- en: trying to find a valid nonce for the same hash. This is because of several differences,
    such as transactions, version number, Coinbase differences, and other metadata
    differences,
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试为同一个哈希找到有效的随机数。这是由于几个差异，如交易、版本号、Coinbase 差异和其他元数据差异，
- en: which when hashed result in a totally different hash (SHA-256 twice). This means
    that
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: 当被散列时会产生完全不同的哈希值（SHA-256两次）。这意味着
- en: every miner is solving a different problem and solving a different part of the
    double
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
  zh: 每个矿工正在解决不同的问题，并解决双重的不同部分
- en: SHA-256 or conveniently written as *SHAd* 256 search space.
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: SHA-256 或方便地写为*SHAd* 256 搜索空间。
- en: The progress free property can be visualized in Figur[e 5-3\. As sho](#p244)wn
    in Figure [5-3,](#p244)
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
  zh: 进度自由性质可以在[图 5-3\. 中可视化](#p244)。如[图 5-3](#p244)所示
- en: miners are all working on their own candidate block, which is different from
    other blocks due to differences mentioned earlier. So, every nonce that the miners
    concatenate with
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: 矿工们都在各自的候选区块上工作，这些区块与之前提到的区别不同。因此，每个矿工与
- en: the block data to get the hash will result in a hash that no other miner is
    aware of. This gives some advantage to a miner with less power, where it can happen
    that the block
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
  zh: 获取哈希值的区块数据将产生一种没有其他矿工知晓的哈希值。这为哈希能力较小的矿工带来了一些优势，这样便有可能让这个区块
- en: which this small miner is trying to find a valid nonce for manages to find the
    nonce that solves PoW before a miner with more hash power finds the valid nonce
    for their block.
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
  zh: 这个小矿工正在尝试为之寻找有效的随机数来解决 PoW 的区块
- en: '***Figure 5-3\.** Progress free property – each miner working on a different
    part of* *double (SHA-256) search space*'
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
  zh: '***图 5-3\.*** 进度自由性质 - 每个矿工在*双（SHA-256）搜索空间*的不同部分工作'
- en: '227'
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: '227'
- en: '![](index-245_1.png)'
  id: totrans-1351
  prefs: []
  type: TYPE_IMG
  zh: '![](index-245_1.png)'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章 区块链共识
- en: This is another elegant property of PoW which ensures that miners with more
    hash
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 PoW 的另一个优雅性质，可以确保拥有更多哈希
- en: power may have some advantage, but it also means that a miner with less hash
    power
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: 力量可能有一些优势，但这也意味着一个哈希能力较小的矿工
- en: can be lucky in finding the nonce that works before the large miners. The key
    point is
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
  zh: 可能在较大的矿工之前幸运地找到有效的随机数。关键点是
- en: miners are not working on the same block! If it were the same block every time,
    the most
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: 矿工们并不是在同一个区块上工作！如果每次都是同一个区块，那么最
- en: powerful miner would’ve won. This is called the progress free property of Bitcoin
    PoW.
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: 强大的矿工可能会赢。这被称为比特币 PoW 的进度自由性质。
- en: It is however possible that many miners collaboratively work on the same block
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，许多矿工合作在同一个区块上也是可能的
- en: (same search space), hence dividing up the work between themselves. Imagine
    the
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
  zh: （相同的搜索空间），从而在彼此之间分配工作。想象一下
- en: search space is 1 to 100 for a block, it may be divided in 10 different parts,
    then all miners can collectively work on a single block. This divides up the work,
    and all miners can
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索空间是 1 到 100 个区块，可以被分成 10 个不同的部分，然后所有矿工可以共同工作在一个区块上。这样分割了工作，所有矿工都可以
- en: contribute and earn their share of the reward. This is called **pool mining**.
    Unlike **solo** **mining** where only one miner tries and the entire effort can
    be lost if it doesn’t find the nonce and tries again for the next block, in pool
    mining individual contribution is
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
  zh: 贡献并分享奖励。这被称为**矿池挖矿**。与**单独**挖矿不同，其中只有一个矿工尝试，如果找不到适当的随机数而且为下一个区块再尝试，那么整个努力都将白费，而在矿池挖矿中，个人贡献是
- en: not wasted.
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: 不会被浪费。
- en: This concept can be visualized in Figur[e 5-4\.](#p245)
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念可以在[图 5-4\.](#p245)中可视化
- en: '***Figure 5-4\.** Mining pool – many miners working on a single block (shad256*'
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
  zh: '***图 5-4\.** 矿池 - 许多矿工在一个区块上工作（shad256*'
- en: '*search space)*'
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: '*搜索空间)*'
- en: In Figur[e 5-4, ther](#p245)e are different miners working on the same hash
    search space produced by the same block. This way, the pool operators split the
    proof of work into
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 5-4,](#p245)有不同的矿工在同一个区块产生的哈希搜索空间上工作。这样，矿池操作员将工作证明分成
- en: different pieces and distribute them to the miners in the pool. All miners work
    and put in 228
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的部分，然后将它们分发给矿工池中的矿工。所有矿工工作并投入 228
- en: Chapter 5 BloCkChain Consensus
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章 区块链共识
- en: the effort, and eventually one miner finds the block which is broadcast normally
    to the
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: 这个努力，最终找到了一个矿工发现的区块，正常情况下会广播到
- en: Bitcoin network. The pool operator receives the block reward which is split
    between the
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币网络。矿池操作员收到区块奖励，这些奖励在
- en: miners in proportion to the effort put in by the miners.
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
  zh: 矿工的努力与矿工们投入的努力成比例。
- en: '**Probabilistic Aspects of Dynamic Parameters**'
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
  zh: '**动态参数的概率方面**'
- en: Now let’s shed some light on the probabilistic aspects related to the property
    (dynamic
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们揭开与属性（动态
- en: and auto-adjustable parameters), where I will explain what the average of ten
    minutes
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
  zh: 和自动可调参数）相关的概率性方面，我将解释十分钟的平均值
- en: means and what parameterization means.
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
  zh: 意思以及参数化的意思。
- en: In probability theory, a Bernoulli trial is an action that has two possible
    outcomes,
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
  zh: 在概率论中，伯努利试验是一种有两种可能结果的行动，
- en: either success or failure. The probability of success or failure is fixed between
    trials.
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: 无论成功还是失败。成功或失败的概率在每次尝试之间保持不变。
- en: For example, in coin flips the probability of heads or tails is 50%. The outcome
    is also
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在抛硬币中，正面或反面的概率是50%。结果也是
- en: independent. It is not the case that having three heads in a row will lead to
    a definite
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
  zh: 独立的。连续出现三次头并不意味着一定会失败
- en: head for the fourth time too. Similarly, in Bitcoin mining, the outcome of success
    or
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
  zh: 第四次也是头。同样，在比特币挖矿中，成功或
- en: failure, as shown in the following, remains independent and almost like coin
    flips
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示，失败的概率保持独立并且几乎像抛硬币一样
- en: roughly 50% probabilistic. We can see this in the following formula.
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
  zh: 大约50%的概率。我们可以从以下公式中看到这一点。
- en: 'Success and failure in mining can be written like the following two formulas:'
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
  zh: 挖掘中的成功和失败可以写成以下两个公式：
- en: '*Success* = *SHAd* 256( *nonce*|| *block heade*'
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: '*成功*= *SHAd* 256(*随机数* || *区块头*'
- en: '*r* ) < *target*'
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
  zh: '*r*）< *目标*'
- en: '*Failure* = *SHAd* 256( *nonce*|| *block* *header* ) ≥ *target* PoW is almost
    like roll dicing, for example, if I have rolled the dice a few times, I'
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
  zh: '*失败*= *SHAd* 256(*随机数* || *区块* *头*) ≥ *目标* PoW几乎就像掷骰子一样，例如，如果我已经掷过几次骰子，我'
- en: cannot know when the next six will occur; it might be that I get six in the
    first attempt, may never get six, or get six after several rolls. Similarly, whether
    a single nonce has been tried to find the valid nonce or trillions and trillions
    of nonces have been tried, the mean time until a miner finds the valid nonce remains
    probabilistic. It doesn’t matter whether 100 million nonces have been tried or
    only one; the probability of finding the valid nonce remains the same. So trying
    millions of nonces doesn’t make it more likely to find the
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
  zh: 无法知道接下来的六次会在何时发生；可能第一次就得到六次，也可能永远得不到六次，或者在几次掷骰子后得到六次。同样，无论是否尝试了单个随机数来找到有效的随机数，还是尝试了数不清的随机数，矿工找到有效随机数的平均时间仍然是概率的。无论尝试了1亿个随机数还是只尝试了一个，找到有效随机数的概率都是相同的。因此，尝试数百万个随机数并不会增加找到
- en: valid nonce; even trying once or only a few times could find the valid nonce.
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的随机数；即使只尝试一次或只尝试几次，也可能找到有效的随机数。
- en: A Bernoulli trial iterated enough to achieve a continuous result instead of
    discrete
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
  zh: 伯努利试验足够迭代以获得连续的结果而不是离散的
- en: is called a Poisson process. Formally, we can say that a Poisson process is
    a sequence of discrete events, where events occur independently at a known constant
    average rate, but
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
  zh: 称为泊松过程。形式上，我们可以说泊松过程是一系列离散事件，其中事件以已知的恒定平均速率独立发生，但
- en: the exact timing of events is random.
  id: totrans-1391
  prefs: []
  type: TYPE_NORMAL
  zh: 事件的确切时间是随机的。
- en: '229'
  id: totrans-1392
  prefs: []
  type: TYPE_NORMAL
  zh: '229'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章 区块链共识
- en: For example, movements in a stock price are a Poisson process. A Poisson process
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，股价的波动是一个泊松过程。泊松过程
- en: 'has some properties:'
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些特性：
- en: • Events are independent of each other, that is, no influence of an
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
  zh: • 事件相互独立，即不受任何一个事件的影响
- en: outcome on some other.
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他一些结果中。
- en: • The rate of events per time period is constant.
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
  zh: • 每个时间段的事件速率是恒定的。
- en: • Two events cannot occur simultaneously.
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
  zh: • 两个事件不可能同时发生。
- en: The average time between events is known, but they are randomly spaced
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
  zh: 两个事件的平均时间是已知的，但它们是随机间隔的
- en: (stochastic). In Bitcoin, of course, we know the time between two block generation
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
  zh: （随机的）。当然，在比特币中，我们知道两个区块生成之间的时间
- en: events is known, that is, roughly ten minutes, but the generations are randomly
    spaced.
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
  zh: 事件是已知的，即大约十分钟，但这些事件是随机间隔的。
- en: The mean time for a new block is ten minutes on average. We can use a simple
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
  zh: 新区块的平均时间是平均十分钟。我们可以使用一个简单的
- en: formula to find out the meantime of finding the next block for a particular
    miner.
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
  zh: 公式来发现特定矿工找到下一个区块的平均时间。
- en: '*Next* *block* *mean t* *ime* ( *specific*'
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
  zh: '*下一* *个* *区块* *的平均时* *间*（*具体*'
- en: '*minutes*'
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
  zh: '*分钟*'
- en: ) =
  id: totrans-1407
  prefs: []
  type: TYPE_NORMAL
  zh: ）=
- en: '10'
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
  zh: '10'
- en: '*fraction* *of* *hash p*'
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
  zh: '*散列p的* *分数*'
- en: '*oower* *controlled by the* *miner*'
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
  zh: '*由矿工控制的* *能量*'
- en: '**Probability of an Attacker Catching Up**'
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
  zh: '**攻击者赶上的概率**'
- en: In this section, we answer the question of what the probability is of an attacker
    to mine enough blocks to take over the chain. Suppose an attacker has some mining
    power, say
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
  zh: In this section, we answer the question of what the probability is of an attacker
    to mine enough blocks to take over the chain. Suppose an attacker has some mining
    power, say
- en: q. A seller waits for z confirmation (z blocks) before accepting the payment,
    and the
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: q. 卖方在接受支付前等待z次确认（z个区块），且如果没有找到一个nonce，那么该算法将尝试下一个区块。
- en: honest chain hash rate is denoted by p.
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
  zh: honest chain hash rate is denoted by p.
- en: 'The probability of an attacker catching up *qz* can be calculated as shown
    follows: *z*'
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
  zh: 'The probability of an attacker catching up *qz* can be calculated as shown
    follows: *z*'
- en: 
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
  zh: 
- en:  
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
  zh:  
- en: 
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
  zh: 
- en: '*q* ='
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
  zh: '*q* ='
- en: 
  id: totrans-1420
  prefs: []
  type: TYPE_NORMAL
  zh: 
- en: 1
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
  zh: 1
- en: ≤ _
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
  zh: ≤ _
- en: '>'
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '*z*'
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
  zh: '*z*'
- en: '*if p q*'
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: '*if p q*'
- en: '*q*'
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
  zh: '*q*'
- en:   *if p q* 
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
  zh:   *if p q* 
- en:  *p* 
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
  zh:  *p* 
- en: 
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
  zh: 
- en: 
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
  zh: 
- en: where
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
  zh: where
- en: '*q* = *attacker’s hash r* *ate*'
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
  zh: '*q* = *attacker’s hash r* *ate*'
- en: '*p* = *honest hash rate*'
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: '*p* = *honest hash rate*'
- en: '*z* = *blocks to catc*'
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
  zh: '*z* = *blocks to catc*'
- en: '*h up*'
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
  zh: '*h up*'
- en: '230'
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
  zh: '230'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章 区块链共识
- en: This means that if the honest hash rate is less than the attacker’s hash rate,
    then the
  id: totrans-1438
  prefs: []
  type: TYPE_NORMAL
  zh: This means that if the honest hash rate is less than the attacker’s hash rate,
    then the
- en: probability of an attacker catching up is one, and if the honest hash rate is
    more than the *q z*
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
  zh: probability of an attacker catching up is one, and if the honest hash rate is
    more than the *q z*
- en:  
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
  zh:  
- en: attacker’s hash rate, then the probability of catching up is   .
  id: totrans-1441
  prefs: []
  type: TYPE_NORMAL
  zh: attacker’s hash rate, then the probability of catching up is   .
- en:  *p* 
  id: totrans-1442
  prefs: []
  type: TYPE_NORMAL
  zh:  *p* 
- en: In the next section, we formally write the proof of work algorithm.
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
  zh: In the next section, we formally write the proof of work algorithm.
- en: '**PoW Algorithm**'
  id: totrans-1444
  prefs: []
  type: TYPE_NORMAL
  zh: '**工作证明算法**'
- en: 'Formally, we can write the entire proof of work algorithm as follows:'
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
  zh: 正式地，我们可以将工作证明算法的整个证明写成如下形式：
- en: '1: nonce := 0'
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
  zh: '1: nonce := 0'
- en: '2: hashTarget := nBits'
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
  zh: '2: hashTarget := nBits'
- en: '3: hash := null'
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
  zh: '3: hash := null'
- en: '4: while (true) {'
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
  zh: '4: while (true) {'
- en: '5: SHA256(SHA256(blockheader || nonce))'
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
  zh: '5: SHA256(SHA256(blockheader || nonce))'
- en: '6: if (hash ≤ hashTarget) {'
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
  zh: '6: if (hash ≤ hashTarget) {'
- en: '7: append to blockchain'
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
  zh: '7: append to blockchain'
- en: '8: else'
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
  zh: '8: else'
- en: '9: nonce := nonce + 1'
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
  zh: '9: nonce := nonce + 1'
- en: '10: }'
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
  zh: '10: }'
- en: '11: }'
  id: totrans-1456
  prefs: []
  type: TYPE_NORMAL
  zh: '11: }'
- en: In the preceding algorithm, the nonce is initialized as zero. The hash target
    which
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
  zh: In the preceding algorithm, the nonce is initialized as zero. The hash target
    which
- en: is the difficulty target of the network is taken from the *nBits* field of the
    candidate block header. The hash is initialized to null. After that, an infinite
    loop runs, which first concatenates the block header and the nonce and runs SHA-256
    twice on it to produce
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
  zh: is the difficulty target of the network is taken from the *nBits* field of the
    candidate block header. The hash is initialized to null. After that, an infinite
    loop runs, which first concatenates the block header and the nonce and runs SHA-256
    twice on it to produce
- en: the hash. Next, if the produced hash is less than the target hash, then it is
    accepted and appended to the blockchain; otherwise, the nonce is incremented and
    the process starts
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
  zh: the hash. Next, if the produced hash is less than the target hash, then it is
    accepted and appended to the blockchain; otherwise, the nonce is incremented and
    the process starts
- en: again. If no nonce is found, then the algorithm tries the next block.
  id: totrans-1460
  prefs: []
  type: TYPE_NORMAL
  zh: again. If no nonce is found, then the algorithm tries the next block.
- en: This process can be visualized in Figur[e 5-5\.](#p249)
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: This process can be visualized in Figur[e 5-5\.](#p249)
- en: '231'
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
  zh: '231'
- en: '![](index-249_1.png)'
  id: totrans-1463
  prefs: []
  type: TYPE_IMG
  zh: '![](index-249_1.png)'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-1464
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章 区块链共识
- en: '***Figure 5-5\.** Proof of work*'
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
  zh: '***图5-5\.* 工作证明*'
- en: In Figur[e 5-5, the pr](#p249)evious block hash, transactions, and nonce are
    fed into a hash function to produce a hash which is checked against the target
    value. If it is less than
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
  zh: In Figur[e 5-5, the pr](#p249)evious block hash, transactions, and nonce are
    fed into a hash function to produce a hash which is checked against the target
    value. If it is less than
- en: the target value, then it’s a valid hash and the process stops; otherwise, the
    nonce is
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
  zh: the target value, then it’s a valid hash and the process stops; otherwise, the
    nonce is
- en: incremented, and the entire process repeats until the resultant hash is less
    than the
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
  zh: incremented, and the entire process repeats until the resultant hash is less
    than the
- en: target, where the process stops.
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
  zh: target, where the process stops.
- en: '**Game Theory and Proof of Work**'
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
  zh: '**博弈论与工作证明**'
- en: Game theory is the study of behaviors in strategic interactive situations where
    an
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
  zh: Game theory is the study of behaviors in strategic interactive situations where
    an
- en: individual’s best course of action depends on the choice of others. Game theory
    models
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
  zh: individual’s best course of action depends on the choice of others. Game theory
    models
- en: represent real-life situations in an abstract manner. Game theory is useful
    in many
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: represent real-life situations in an abstract manner. Game theory is useful
    in many
- en: different fields, such as economics, biology, social science, finance, politics,
    computer science, and many more. For example, in economics, product launch decisions
    made
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
  zh: different fields, such as economics, biology, social science, finance, politics,
    computer science, and many more. For example, in economics, product launch decisions
    made
- en: by businesses are influenced by their competitor’s choice of product and marketing
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
  zh: by businesses are influenced by their competitor’s choice of product and marketing
- en: strategy. In computer networks, networked computers may compete for resources
    such
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
  zh: strategy. In computer networks, networked computers may compete for resources
    such
- en: as bandwidth. A Nash equilibrium is used to study political competition. In
    politics,
  id: totrans-1477
  prefs: []
  type: TYPE_NORMAL
  zh: 作为带宽。纳什均衡被用来研究政治竞争。在政治中，
- en: politicians’ policies are influenced by announcements and promises made by their
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
  zh: 政客的政策受他们所作出的宣布和承诺的影响
- en: opponents.
  id: totrans-1479
  prefs: []
  type: TYPE_NORMAL
  zh: 对手。
- en: A game can be defined as a description of all strategic actions that a player
    may take
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏可以定义为玩家可能采取的所有战略行动的描述
- en: but without describing the likely outcome.
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
  zh: 但并没有描述可能的结果。
- en: 'There are some entities in a game which are listed as follows:'
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏中有一些实体列举如下：
- en: '• **Players**: Strategic rational decision makers in a game'
  id: totrans-1483
  prefs: []
  type: TYPE_NORMAL
  zh: • **玩家**：游戏中的战略理性决策者
- en: '• **Actions**: Set of actions available to a player'
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
  zh: • **动作**：玩家可用的行动集
- en: '• **Payoffs**: A payout to be received by a player for a particular outcome'
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
  zh: • **支付**：对玩家进行的特定结果的支付
- en: '232'
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
  zh: '232'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章 区块链共识
- en: Games represent different strategic situations. There are some classical games
    such
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏代表了不同的战略情况。有一些经典的游戏
- en: as Bach or Stravinsky, prisoner’s dilemma, Hawk-Dove, and matching pennies.
    In games,
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
  zh: 例如巴赫或斯特拉文斯基，囚徒困境，鹰-鸽，和抛硬币。在游戏中，
- en: players are not aware of the actions of other players when making their own
    decisions;
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: 当做出自己的决定时，玩家不知道其他玩家的行动；
- en: such games are called **simultaneous move games**.
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的游戏被称为**同步移动游戏**。
- en: Games can be analyzed by creating a table where all possible actions of players
    and
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏可以通过创建一个表格来进行分析，在表格中列出所有玩家的可能行动，
- en: payoffs are listed. This table is known as the **strategic form** of the game
    or **payoff matrix**.
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
  zh: 报酬被列出。这个表格被称为游戏的**战略形式**或**支付矩阵**。
- en: A **Nash equilibrium** is a fundamental and powerful concept in game theory.
    In a
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
  zh: '**纳什均衡**是博弈论中的一个基本而强大的概念。在一个'
- en: Nash equilibrium, each rational player chooses the best course of action in
    response
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
  zh: 纳什均衡，每个理性的玩家选择对其他玩家行动的最佳应对。
- en: to the choice made by other players. Each player is aware of other players’
    equilibrium
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
  zh: 对其他玩家所做选择的结果。每个玩家都知道其他玩家的均衡
- en: strategies, and no player can make any gains by changing only their own strategy.
    In
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: 策略，没有玩家可以通过只改变自己的策略而获得任何收益。在
- en: short, any deviation from the strategy does not result in any gain for the deviant.
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，战略的偏离不会为偏离者带来任何收益。
- en: '**Prisoner’s Dilemma**'
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
  zh: '**囚徒困境**'
- en: In this simultaneous move game, two suspects of a crime are put into separate
    cells
  id: totrans-1500
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个同步移动游戏中，两名犯罪嫌疑人被分别关押在不同的牢房中。
- en: without any way to communicate. If they both confess, then they both will be
    imprisoned
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
  zh: 没有任何沟通的方式。如果他们都坦白了，那么他们两个都将被监禁
- en: for three years each. If one of them confesses and acts as a witness against
    the other,
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
  zh: 三年。如果其中一人坦白并作为对对方的证人，然后
- en: then charges against him will be dropped; however, the other suspect will get
    four years
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
  zh: 那么对他的指控将会被撤销；然而，另一名嫌疑人将被判四年的
- en: in prison. If none of them confesses, then both will be sentenced to only one
    year in
  id: totrans-1504
  prefs: []
  type: TYPE_NORMAL
  zh: 在监狱里。如果他们两个都不坦白，那么他们两个都将被判一年监禁
- en: prison. Now you can see that if both suspects cooperate and don’t confess, then
    it results in the best outcome for both. However, there is a big incentive of
    going free for both to not cooperate and act as a witness against the other. This
    game results in gains for both if they cooperate and don’t confess and results
    in only one year in prison each. Let’s name
  id: totrans-1505
  prefs: []
  type: TYPE_NORMAL
  zh: 监狱。现在你可以看到，如果两名嫌疑人合作不坦白，那么这对双方都是最好的结果。然而，对于两人都没有合作和作为对对方的证人这一行为，是一个很大的诱因。如果他们合作而不坦白，那么他们将获得收益，只会被判一年的监禁。让我们命名
- en: these characters Alice and Bob for ease and see what possible outcomes there
    are in
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
  zh: 这些角色爱丽丝和鲍勃以方便起见了，看看在
- en: this game.
  id: totrans-1507
  prefs: []
  type: TYPE_NORMAL
  zh: 这个游戏。
- en: 'There are four possible outcomes of this game:'
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
  zh: 这个游戏有四种可能的结果：
- en: 1\. Alice does not confess, and Bob does not confess.
  id: totrans-1509
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 爱丽丝不坦白，鲍勃不坦白。
- en: 2\. Alice confesses, and Bob does not confess.
  id: totrans-1510
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 爱丽丝坦白了，鲍勃没有坦白。
- en: 3\. Alice does not confess, and Bob confesses.
  id: totrans-1511
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 爱丽丝不坦白，鲍勃坦白。
- en: 4\. Alice confesses, and Bob confesses.
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 爱丽丝坦白，鲍勃坦白。
- en: If Alice and Bob can somehow communicate, then they can jointly decide to not
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
  zh: 如果爱丽丝和鲍勃能够以某种方式进行沟通，那么他们可以共同决定不支付报酬。
- en: confess, which will result in only a one-year sentence each. However, the dominant
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
  zh: 坦白，这将导致每个人只会被判一年的监禁。然而这个主导
- en: strategy here is to confess rather than don’t confess.
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的策略是坦白而不是不坦白。
- en: '233'
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
  zh: '233'
- en: '![](index-251_1.png)'
  id: totrans-1517
  prefs: []
  type: TYPE_IMG
  zh: '![](index-251_1.png)'
- en: Chapter 5 BloCkChain Consensus
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章 区块链共识
- en: A **dominant strategy** is a strategy that results in the largest payoff regardless
    of the behaviors of other players in the game.
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
  zh: '**主导策略**是一种策略，无论其他玩家的行为如何，都会产生最大的回报。'
- en: We can represent this in a payoff matrix form as shown in Figur[e 5-6\.](#p251)
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此表示为如图[5-6\.](#p251)所示的收益矩阵形式
- en: '***Figure 5-6\.** Prisoner’s dilemma payoff matrix*'
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
  zh: '***图5-6\.**囚犯困境的收益矩阵*'
- en: Alice and Bob are both aware of this matrix and know that they both have this
    matrix
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
  zh: 爱丽丝和鲍勃都知道这个矩阵，他们知道他们都有这个矩阵
- en: to choose from. Alice and Bob are players, “confess” and “don’t confess” are
    actions, and payoffs are prison sentences.
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
  zh: 可供选择。爱丽丝和鲍勃是玩家，“坦白”和“不坦白”是行动，而回报是监禁。
- en: Regardless of what Alice does or Bob does, the other player still confesses.
    Alice’s
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
  zh: 无论爱丽丝做什么，鲍勃做什么，另一个玩家都会坦白。爱丽丝的
- en: strategy is that if Bob confesses, she should confess too because a one-year
    prison
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
  zh: 策略是，如果鲍勃坦白，她也应该坦白，因为一年监禁
- en: sentence is better than three. If Bob does not confess, she should still confess
    because
  id: totrans-1526
  prefs: []
  type: TYPE_NORMAL
  zh: 的监禁比三年好。即使鲍勃不坦白，她也应该坦白，因为
- en: she will go free. The same strategy is employed by Bob. The dominant strategy
    here is to
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
  zh: 她将获得自由。鲍勃也采用了相同的策略。这里的主导策略是
- en: confess, regardless of what the other player does.
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
  zh: 坦白，无论其他玩家做什么。
- en: Both players confess and go to prison for three years each. This is because
    even if
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: 双方都坦白，各自监禁三年。这是因为即使
- en: Bob had somehow managed to tell Alice about his no confession strategy, Alice
    would
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
  zh: 鲍勃总算设法告诉爱丽丝他的不坦白策略，爱丽丝就会
- en: have still confessed and became a witness to avoid prison altogether. Similar
    is the case from Alice’s perspective. Therefore, the best outcome for both becomes
    “confession” in a
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
  zh: 依然坦白并成为证人以完全避免监禁。对爱丽丝来说情况也是如此。因此，对于双方来说最好的结果是在
- en: Nash equilibrium. This is written as { *confess*, *confess*}.
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
  zh: 纳什均衡。这可表示为{*坦白*，*坦白*}。
- en: in the prisoner’s dilemma, there is a benefit of cooperation for both players,
    but the
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
  zh: 在囚徒困境中，对于两个玩家来说，合作有好处，但是
- en: possible incentive of going free for each player entices contest. When all players
    in
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
  zh: 潜在的激励，每个玩家都被囚禁。当所有玩家
- en: a game are rational, the best choice is to be in a nash equilibrium.
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
  zh: 一个游戏是理性的，最佳选择就是在纳什均衡状态。
- en: Game theory models are highly abstract; therefore, they can be used in many
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
  zh: 博弈论模型非常抽象；因此，它们可以在许多方面使用
- en: different situations, once developed for a particular situation. For example,
    the
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
  zh: 不同情况，一旦针对特定情况开发。例如，
- en: prisoner’s dilemma model can be used in many other areas. In network communications
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
  zh: 囚徒困境模型可以用在许多其他领域。在网络通信中
- en: where wireless network devices compete for bandwidth, energy supply, etc., there
    is a
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
  zh: 在无线网络设备竞争带宽、能源供应等方面，存在
- en: need to regulate node behavior in such a way that all devices on the network
    can work
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
  zh: 需要调节节点行为，使网络上的所有设备都能工作
- en: in harmony. Imagine a network where two cell towers working on the same frequency
  id: totrans-1541
  prefs: []
  type: TYPE_NORMAL
  zh: 和谐。想象一下一个网络，两个运行在相同频率上的基站
- en: in close vicinity can affect each other’s performance. One way to counter this
    problem
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
  zh: 在附近会影响对方的性能。对抗这个问题的一个方法
- en: is to run both towers at low energy so that they don’t interfere with each other,
    but that 234
  id: totrans-1543
  prefs: []
  type: TYPE_NORMAL
  zh: 是以尽可能低的能量运行两个塔，以便它们互不干扰，但是234
- en: Chapter 5 BloCkChain Consensus
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章区块链共识
- en: will decrease the bandwidth of both the towers. If one tower increases its energy
    and
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
  zh: 将降低两个塔的带宽。如果一个塔增加其能量，而
- en: the other don’t, then the one that doesn’t loses and runs on lower bandwidth.
    So, the
  id: totrans-1546
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个不坦白，则不坦白的那个输了，将以较低的带宽运行。因此，
- en: dominant strategy here becomes to run towers at maximum power regardless of
    what
  id: totrans-1547
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，最优策略是以最大功率运行塔，无论其他
- en: the other tower does, so that they achieve maximum possible gain. This result
    is like the prisoner’s dilemma where confession is the best strategy. Here, maximum
    power is the
  id: totrans-1548
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个塔这样做，以便他们获得最大可能的收益。这个结果就像囚徒困境，坦白是最佳策略。在这里，最大功率是
- en: best strategy.
  id: totrans-1549
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳策略。
- en: Now in the light of the preceding explained concepts, we can analyze the Bitcoin
  id: totrans-1550
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在前述的概念的光芒下，我们可以分析比特币
- en: protocol from a game theoretic perspective.
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
  zh: 协议的博弈论视角。
- en: '**PoW and Game Theory**'
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
  zh: '**PoW和博弈论**'
- en: We can think of Bitcoin as a distributed system with selfish players; nodes
    might be
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以把比特币看作是一个有自私玩家的分布式系统；节点可能是
- en: trying to gain incentives without contributing or trying to gain more incentives
    than their fair share.
  id: totrans-1554
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试获得激励而不作贡献或试图获得比公平份额更多的激励。
- en: The Bitcoin protocol is a **Nash equilibrium** because no deviation from the
    protocol’s equilibrium strategy can result in a gain for the deviant. The protocol
    is designed in such a way that any deviation from the protocol is punished, and
    normal (good) behavior is
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币协议是**纳什均衡**，因为没有任何偏离协议均衡策略的行为可以使偏离者获益。该协议被设计成任何偏离协议的行为都会受到惩罚，而正常（良好）行为是经济激励的。
- en: economically incentivized. The dominant strategy in Bitcoin is to mine according
    to the
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
  zh: 在比特币中的主导策略是根据经济激励进行挖矿。
