- en: '[CHAPTER 5](toc.xhtml#c05)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**第 5 章**'
- en: '[The Whitepaper](toc.xhtml#c05)'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**[白皮书](toc.xhtml#c05)**'
- en: '*Satoshi Nakamoto* published the Bitcoin Whitepaper titled “*Bitcoin: A Peer-to-Peer
    Electronic Cash System*”. This paper is available at **[https://bitcoin.org/bitcoin.pdf](https://bitcoin.org/bitcoin.pdf)**.
    Bitcoin and most cryptocurrencies are based on this whitepaper. It is important
    to understand the whitepaper thoroughly to be able to understand the content in
    the upcoming chapters. This chapter focuses on explaining the content in the whitepaper.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 中本聪发表了题为“*比特币：一种点对点电子现金系统*”的比特币白皮书。这份论文可在**[https://bitcoin.org/bitcoin.pdf](https://bitcoin.org/bitcoin.pdf)**找到。比特币以及大多数加密货币都是基于这份白皮书的。彻底理解白皮书对于理解接下来的章节中的内容非常重要。本章重点解释白皮书中的内容。
- en: 'The whitepaper is not under any copyright protection as the creator of the
    paper was anonymous and never claimed any copyright on the paper. So, anyone can
    easily copy or refer to the paper. The Bitcoin Whitepaper is also in the blockchain,
    from where it can always be retrieved. Other than that, there are multiple other
    websites where the whitepaper is available. It is even available on the following
    Estonian government website:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于论文的作者是匿名的，并且从未声称对论文拥有版权，所以白皮书不受任何版权保护。因此，任何人都可以轻松地复制或引用这篇论文。比特币白皮书也存储在区块链上，从这里可以随时检索。除此之外，还有其他多个网站提供了这份白皮书。它甚至在以下爱沙尼亚政府网站上也可获得：
- en: q-
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: q-
- en: '**[https://www.e-resident.gov.ee/bitcoin-whitepaper/](https://www.e-resident.gov.ee/bitcoin-whitepaper/)**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**[https://www.e-resident.gov.ee/bitcoin-whitepaper/](https://www.e-resident.gov.ee/bitcoin-whitepaper/)**'
- en: 'And on the following US government website:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以及在以下美国政府网站上：
- en: '**[https://www.ussc.gov/sites/default/files/pdf/training/annual-national-training-seminar/2018/Emerging_Tech_Bitcoin_Crypto.pdf](https://www.ussc.gov/sites/default/files/pdf/training/annual-national-training-seminar/2018/Emerging_Tech_Bitcoin_Crypto.pdf)**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**[https://www.ussc.gov/sites/default/files/pdf/training/annual-national-training-seminar/2018/Emerging_Tech_Bitcoin_Crypto.pdf](https://www.ussc.gov/sites/default/files/pdf/training/annual-national-training-seminar/2018/Emerging_Tech_Bitcoin_Crypto.pdf)**'
- en: '[Structure](toc.xhtml#s79a)'
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**[结构](toc.xhtml#s79a)**'
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Abstract section of the whitepaper
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 白皮书摘要部分
- en: Introduction section of the whitepaper
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 白皮书中的引言部分
- en: Transaction section of the whitepaper
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 白皮书中的交易部分
- en: Timestamp Server section of the whitepaper
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 白皮书中的时间戳服务器部分
- en: Proofof-Work section of the whitepaper
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 白皮书中的工作量证明部分
- en: Network section of the whitepaper
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 白皮书中的网络部分
- en: Incentive section of the whitepaper
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 白皮书中的激励部分
- en: Reclaiming Disk Space section of the whitepaper
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回收磁盘空间部分的白皮书
- en: Simplified Payment Verification section of the whitepaper
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化支付验证部分的白皮书
- en: Combining and Splitting Value section of the whitepaper
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 白皮书中的合并和分割价值部分
- en: Privacy section of the whitepaper
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 白皮书中的隐私部分
- en: Calculations section of the whitepaper
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 白皮书中的计算部分
- en: Conclusion section of the whitepaper
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 白皮书中的结论部分
- en: '[Objective](toc.xhtml#s80a)'
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**[目标](toc.xhtml#s80a)**'
- en: The primary objective of this chapter is to help readers understand the Bitcoin
    Whitepaper in depth.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要目标是帮助读者深入理解比特币白皮书。
- en: '[Abstract section of the whitepaper](toc.xhtml#s81a)'
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**白皮书摘要部分](toc.xhtml#s81a)**'
- en: '![](images/Figure-5.1.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.1.jpg)'
- en: '**Figure 5.1:** Abstract section of the whitepaper'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5.1：** 白皮书摘要部分'
- en: Bitcoin is electronic cash that is completely peer-to-peer. There were a few
    cryptographic trials in the past that provided an electronic cash system. These
    implementations were centralized, and some of them failed. These implementations
    required a third party to avoid the double-spending problem. Bitcoin does not
    need third parties as it uses an immutable chain of blocks where each block contains
    a list of transactions, a hash confirming the integrity of transactions, and a
    timestamp. The chain of blocks maintains immutability by using hash-based proof
    of work.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币是一种完全点对点的电子现金。过去有一些加密尝试提供了电子现金系统。这些实现是集中的，其中一些失败了。这些实现需要第三方来避免双重支付问题。比特币不需要第三方，因为它使用一个不可变的区块链，每个区块包含一个交易列表、一个确认交易完整性的哈希和一个时间戳。区块链通过使用基于哈希的工作量证明来保持不可变性。
- en: Bitcoin is a cooperating system where nodes either comply with the consensus
    rules or are cooperating to attack the network. The cooperating systems form a
    pool of CPU power, which adds blocks to the existing chain. The longest chain
    stores the greatest CPU power and so, is considered the actual blockchain, and
    the other chain is discarded. This mechanism assumes that the greatest CPU power
    is owned by honest nodes. This assumption fails if the whole network is compromised.
    In the upcoming chapters, we will explain how this is not a problem anymore.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币是一个合作系统，节点要么遵守共识规则，要么合作攻击网络。合作系统形成了一股CPU计算能力，这增加了现有链中的区块。最长的链存储了最大的CPU计算能力，因此，被认为是实际的区块链，而其他链则被舍弃。这种机制假设最大的CPU计算能力是由诚实的节点拥有。如果整个网络被攻陷，这种假设就会失败。在接下来的章节中，我们将解释为什么这不再是一个问题。
- en: The Bitcoin network maintains trail-of-truth (blockchain) and so, allows any
    node to leave or join the network at will. The joining nodes sync up their local
    chain at the time of joining the network. If a node goes offline for some time,
    it will also need to sync up its local chain. If we look at the whitepaper, it
    is quite simple to understand and implement. Consequently, thousands of cryptocurrencies
    have come up, most using the almost original design.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币网络维护着真相轨迹（区块链），因此，允许任何节点随时离开或加入网络。新加入的节点在加入网络时同步他们的本地链。如果一个节点由于某些原因离线了一段时间，它也需要同步其本地链。如果我们查看白皮书，它很容易理解和实施。因此，成千上万的加密货币应运而生，其中大部分几乎使用了原始设计。
- en: '[Introduction section of the whitepaper](toc.xhtml#s82a)'
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[白皮书引言部分](toc.xhtml#s82a)'
- en: '![](images/Figure-5.2.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.2.jpg)'
- en: '**Figure 5.2:** Introduction section of the whitepaper'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.2：** 白皮书引言部分'
- en: The introduction section explains the drawback of a trusted third party that
    exists today. Trusted third parties are mostly large financial institutions that
    facilitate dispute resolution. Many a time, these disputes lead to transaction
    reversal, litigations, and losses. For a high-value transaction or transactions
    where services and payments can be reversed, these additional costs benefit them
    as not being able to reverse a transaction can lead to large losses. On the other
    hand, for small transactions or transactions where services and payments are non-reversible,
    these costs are unnecessary. Both these transactions are normally catered to by
    the same payment processors. The losses these payment processors must bear are
    born by both kinds of transactions, so the cost affects both transactions. In
    short, the cost of having trusted the third party is universal.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 引言部分解释了当今存在的可信第三方的缺点。可信第三方通常是大型的金融机构，它们促进争议解决。很多时候，这些争议会导致交易撤销、诉讼和损失。对于高价值交易或服务支付可以被撤销的交易，这些额外的成本对他们有利，因为无法撤销交易可能会导致巨大损失。另一方面，对于小额交易或服务支付不可撤销的交易，这些成本是不必要的。这两种交易通常都是由相同的支付处理机构处理的。这些支付处理机构必须承担的损失由这两种交易承担，因此，成本影响了这两种交易。简而言之，信任第三方的成本是普遍存在的。
- en: A peer-to-peer cash system intends to remove the need for trusted third parties,
    thereby removing the possibility of transaction reversal. An escrow mechanism
    can still be implemented to protect buyers. This mechanism can separate small
    non-reversal transactions that are akin to cash transactions from large transactions
    that need mediations and can have a separate escrow mechanism provided by a trusted
    third party without impacting the cost to the network itself.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 点对点现金系统旨在消除可信第三方的作用，从而消除了交易撤销的可能性。即便如此，依然可以实施托管机制来保护买方。这种机制可以将类似现金交易的不可撤销的小额交易与需要调解的大额交易分开，并且可以由第三方可信的托管机制提供服务，而不会影响网络本身的成本。
- en: '[Transactions section of the whitepaper](toc.xhtml#s83a)'
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[白皮书交易部分](toc.xhtml#s83a)'
- en: '![](images/Figure-5.3.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.3.jpg)'
- en: '**Figure 5.3:** Transaction section of the whitepaper'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.3：** 白皮书交易部分'
- en: The transaction section explains transactions as a trail of digital signatures
    that leads to the flow of bitcoin between parties. To understand this, we need
    to understand terms like Hashing and Digital Signatures.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 交易部分将交易解释为一系列数字签名，这些签名导致了比特币在各方之间的流动。为了理解这一点，我们需要了解散列（Hashing）和数字签名这些术语。
- en: '**Hashing**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**散列**'
- en: '**Hashing is a non-reversible** **process that generates a fixed byte output
    for a large text. The fixed byte output is called hash-code. Hashing has certain
    properties that make it very useful in applications such as bucketing for randomly
    distributing data in buckets. It is also useful in safely storing and transferring
    passwords. It is also used in network handshaking for sending challenge code.
    The hash-code output is deterministic, which means the same text will always generate
    the same hash-code. These pieces of code are very well randomized, so they cannot
    be determined by brute force or other more sophisticated attacks.**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**散列是一个不可逆** **过程，为大量文本生成固定字节输出。这个固定字节输出被称为散列码。散列具有一些性质，使其在诸如用于随机分配数据的桶化等应用中非常有用。它还安全地存储和传输密码。它还用于网络握手以发送挑战码。散列码输出是确定性的，这意味着相同的文本总会生成相同的散列码。这些代码非常随机化，因此无法通过暴力破解或其他更复杂的攻击确定。**'
- en: '![](images/Figure-5.4.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.4.jpg)'
- en: '**Figure 5.4:** Illustr ation of the irreversibility of hashing algorithm'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.4：** 散列算法不可逆性说明'
- en: '**Digital Signatures**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**数字签名**'
- en: '**Digital Signatures are like physical** **signatures as they ensure the integrity
    of the document, and they also ensure that the document is signed by the signer
    (authenticity). Digital Signature uses “Public and Private key cryptography”.
    A document is signed by the sender’s private key. This creates a signature that
    is a code, and it is kept along with the document for others to verify.**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**数字签名就像物理签名一样** **，因为它们确保了文档的完整性，同时也确保了文档是由签署者签署的（真实性）。数字签名使用“公钥和私钥密码学”。文档由发送者的私钥签署。这创建了一个代码的签名，并与其他文档一起保留以供其他人验证。**'
- en: '**The following is the Digital Signing process:**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**以下是数字签名过程：**'
- en: '![](images/Figure-5.5.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.5.jpg)'
- en: '**Figure 5.5:** Illustration of the Digital signing process'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.5：** 数字签名过程说明'
- en: The signature is verified by using the Sender’s public key. The verification
    algorithm uses Document content, Signature, and Sender’s public key for verification.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用发送者的公钥来验证签名。验证算法使用文档内容、签名和发送者的公钥进行验证。
- en: The following is the signature verification process.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是签名验证过程。
- en: '![](images/Figure-5.6.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.6.jpg)'
- en: '**Figure 5.6:** Illustration of the digital signing verification process'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.6：** 数字签名验证过程说明'
- en: 'A transaction in Bitcoin has two sections: ins and outs. Input transactions
    carry information about the previous transaction, along with the signature of
    sender and its public key for verification. Out contains information of bitcoin
    to be transferred along with public key of the receiver. Only the receiver knows
    private keys and so, can unlock the bitcoin locked in the previous transaction
    and send it to the next receiver. This creates a chain of ownership. To understand
    this, let’s look at how Alice pays Bob.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币交易有两个部分：ins和outs。输入交易携带有关先前交易的信息，以及发送者的签名和其公钥用于验证。Out包含要转让的比特币信息以及接收者的公钥。只有接收者知道私钥，因此，可以解锁前一个交易中锁定的比特币并发送给下一个接收者。这创建了一个所有权链。为了理解这一点，让我们看看爱丽丝是如何支付鲍勃的。
- en: '![](images/Figure-5.7.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.7.jpg)'
- en: '**Figure 5.7:** Illustration of transactions creation and broadcast'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.7：** 交易创建和广播说明'
- en: 'Alice wants to pay Bob. For this, Alice looks for her unspent transactions.
    She creates a transaction input by signing the hash of previous unspent transactions
    with her private key. This releases bitcoins locked in the previous transaction.
    She now creates out-of-transaction by adding a message for Bob along with Bob’s
    public key. For Bob to pay Dave, he needs to do the same: pick up his previous
    unspent transaction, hash it, and sign it with his private key to release locked
    bitcoin. And then he needs to create a message for Dave along with Dave’s public
    key. For these transactions to be considered valid, these and the trail of all
    previous transactions carrying value need to be validated by a majority of nodes
    in the Bitcoin network.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 爱丽丝想要支付鲍勃。为此，爱丽丝寻找她的未花费交易。她通过用她的私钥签名先前未花费交易的哈希创建一个交易输入。这释放了前一个交易中锁定的比特币。她现在通过向鲍勃添加一条消息以及鲍勃的公钥创建非交易输出。为了让鲍勃支付戴夫，他需要做同样的事情：挑选出他之前的未花费交易，对其进行哈希，并用他的私钥签名以释放锁定的比特币。然后，他需要创建一条消息给戴夫以及戴夫的公钥。为了让这些交易被认为是有效的，这些以及携带价值的所有先前交易都需要由比特币网络中的大多数节点验证。
- en: The Bitcoin network consists of nodes that maintain verified copies of all previous
    transactions. When a new transaction is performed, it is broadcasted on the network,
    and all the participating nodes verify its validity based on all the existing
    unspent transactions already received. This mechanism does not leave any chance
    of missing a concerned transaction, avoiding the chance of double-spending by
    mistake or on purpose.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币网络由维护所有先前交易的验证副本节点组成。当执行新的交易时，它会在网络上广播，并且所有参与的节点都会根据已经接收的所有现有未花费交易来验证其有效性。这个机制不会遗漏任何相关的交易，避免了错误地或故意地双重花费的机会。
- en: '[Timestamp Server section of the whitepaper](toc.xhtml#s84a)'
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[白皮书中的时间戳服务器部分](toc.xhtml#s84a)'
- en: '![](images/Figure-5.8.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.8.jpg)'
- en: '**Figure 5.8:** Timestamp Server section of the whitepaper'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.8：**白皮书中的时间戳服务器部分'
- en: Timestamp Server is the node that is creating a block of transactions and putting
    timestamps to the block. After creating the block, the timestamp server widely
    publishes block-hash. Each block also contains a block-hash of the previous block
    header. Since the newly created block contains a block-hash of the previous block
    header that includes the timestamp of the creation of the previous block, the
    new block cannot have a timestamp older than the included block-hash. This method,
    consequently, imposes the necessity of chronological order on the blockchain.
    Thus, there is no need for reliance on an external source to impose the accuracy
    of the timestamp.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳服务器是创建交易区块并给区块加时间的节点。创建区块后，时间戳服务器广泛发布区块哈希。每个区块还包含前一个区块头的区块哈希。由于新创建的区块包含前一个区块头的包含创建前一个区块时间戳的区块哈希，新区块不能有一个比包含的区块哈希更早的时间戳。因此，这种方法在区块链上施加了时间顺序的必要性。因此，不需要依赖外部来源来施加时间戳的精度。
- en: '![](images/Figure-5.9.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.9.jpg)'
- en: '**Figure 5.9:** Block structure with Timestamp'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.9：**带有时间戳的区块结构'
- en: 'In the preceding figure, we can see that the N+1^(th) block contains a hash
    of the N^(th) block. Since N^(th) block-hash has a timestamp, the N+1^(th) block
    timestamp must have been created after the timestamp on the N^(th) block. This
    ensures that:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们可以看到N+1^(th)区块包含N^(th)区块的哈希。由于N^(th)区块哈希有一个时间戳，N+1^(th)区块的时间戳必须在N^(th)区块的时间戳之后创建。这确保了：
- en: '*N+1^(th) block timestamp>N^(th) block timestamp*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*N+1^(th)区块的时间戳>N^(th)区块的时间戳*'
- en: Thus, it imposes chronological order on the blockchain.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，它在区块链上施加了时间顺序。
- en: '[Proof-of-Work section of the whitepaper](toc.xhtml#s85a)'
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[白皮书中的工作量证明部分](toc.xhtml#s85a)'
- en: '![](images/Figure-5.10.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.10.jpg)'
- en: '**Figure 5.10:** Proof-of-Work section of the whitepaper'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.10：**白皮书中的工作量证明部分'
- en: 'Bitcoin uses a proof of work mechanism to ensure the integrity of the blockchain.
    The proof –of work algorithm necessitates CPU usage (work) in order to create
    a block. Any attacker who wants to modify an existing transaction will need to
    redo the work, create the block containing the transactions, and redo work to
    create blocks after it. The idea here is that a non-cooperating node needs to
    compete with cooperating nodes in the amount of work done in terms of CPU power.
    *Satoshi Nakamoto* suggests a simple proof of work mechanism that involves counting
    starting zeroes in a hash of the block. The logic here is as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币使用工作量证明机制来确保区块链的完整性。工作量证明算法需要CPU使用（工作）来创建一个区块。任何想要修改现有交易的攻击者都需要重新进行工作，创建包含交易的区块，并在其之后重新进行工作以创建区块。这里的想法是，一个非合作节点需要在CPU计算能力上与合作节点竞争完成的工作量。*中本聪*建议一个简单的工作量证明机制，涉及计算区块哈希的起始零的个数。这里的逻辑如下：
- en: The probability of getting “0…..” binary hash value is 1/2.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 获得“0…..”二进制哈希值的概率是1/2。
- en: The probability of getting “00….” binary hash value is 1/4.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 获得“00….”二进制哈希值的概率是1/4。
- en: The probability of getting “000…” binary hash value is 1/8.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 获得“000…”二进制哈希值的概率是1/8。
- en: 'The CPU power required to achieve the binary hash value is inverse of probability,
    i.e., as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 实现二进制哈希值所需的CPU计算能力与概率成反比，即如下：
- en: '*work≈1/probability*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*工作量≈1/概率*'
- en: '*Satoshi Nakamoto* also suggests changing the required work based on how quickly
    blocks have been getting created, thus maintaining block creation time.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*中本聪*还建议根据区块生成的速度如何迅速来调整所需的工作量，从而保持区块生成时间。'
- en: 'So, the block now looks like the following illustration:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在的区块看起来像以下的插图：
- en: '![](images/Figure-5.11.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.11.jpg)'
- en: '**Figure 5.11:** Block structure with Nonce, timestamp, and previous block
    hash'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5.11:** 带有 Nonce、时间戳和前一个区块哈希的区块结构'
- en: 'Here, Target proof –of work necessitates the timestamp server to use the required
    amount of CPU work in order to create a block. This is calculated by taking the
    moving average of time to create each block and increasing or decreasing the value
    if blocks are taking lesser or longer time to create. The following equation shows
    how Target work is calculated:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，目标工作量证明（Target proof –of work）要求时间戳服务器使用所需的 CPU 工作量来创建一个区块。这是通过取每个区块创建所需时间的时间移动平均值，并根据区块创建时间更长或更短来增加或减少该值来计算的。下面的方程式展示了
    Target work是如何计算的：
- en: '*D[n]: Target Proof-of-work of Block with Height n*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*D[n]: 高度为 n 的区块的目标工作量证明*'
- en: '*T[n]: Timestamp of n^(th) Block*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*T[n]: 第 n 个区块的时间戳*'
- en: '*ΔT: Expected Time to create Block*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*ΔT: 创建区块的预期时间*'
- en: '![](images/c05eq-1.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](images/c05eq-1.jpg)'
- en: 'The following flowchart shows how a Timestamp server finds the right nonce
    for block creation:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下流程图展示了时间戳服务器如何为区块创建找到正确的 nonce：
- en: '![](images/Figure-5.12.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.12.jpg)'
- en: '**Figure 5.12:** Process of mining a block by finding the required nonce'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5.12:** 找到所需 nonce 的区块挖矿过程'
- en: Timestamp server increments Nonce and calculates block hash. If block-hash achieves
    the required work, the block is published to the Bitcoin network; otherwise, Timestamp
    server increments the Nonce till it achieves the required work or some other node
    publishes the block with the right nonce.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳服务器增加 Nonce 并计算区块哈希。如果区块哈希达到所需的工作量，该区块会被发布到比特币网络；否则，时间戳服务器会增加 Nonce，直到它达到所需的工作量，或者另一个节点用正确的
    nonce 发布了区块。
- en: '[Network section of the whitepaper](toc.xhtml#s86a)'
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[白皮书中的网络部分](toc.xhtml#s86a)'
- en: '![](images/Figure-5.13.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.13.jpg)'
- en: '**Figure 5.13:** Network section of the whitepaper'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5.13:** 白皮书中的网络部分'
- en: The term node used here is the same as the timestamp server used in previous
    sections. Now, we do not use the term node to describe nodes that create a block;
    instead, we call them mining nodes.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中使用的节点一词与前几节中使用的时间戳服务器相同。现在，我们不再用节点一词来描述创建区块的节点；相反，我们称它们为挖矿节点。
- en: Each node is connected to multiple nodes, and those nodes are connected to several
    other nodes. This creates a network of nodes. Each node tries to find nonce for
    the next block to be created in the blockchain. When a new transaction is created,
    like “*Alice pays Bob*”, it is sent to its peers. Each receiving node checks whether
    the transaction is valid and not trying to create an illegal transaction or trying
    to spend an already spent transaction. It is then sent to their peers and so on;
    this gets broadcasted to the whole network. Each receiving node adds a transaction
    to the block and races to find nonce. Whichever node finds the nonce first creates
    the block and sends the block to its peers. All the receiving nodes verify the
    block timestamp, transactions, nonce, and next target proof –of work. The receiving
    nodes then forward it to their peers and so on; this gets broadcasted. After receiving
    the block, each node starts working on the next nonce. This is the way the process
    continues.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 每个节点都连接到多个节点，而这些节点又连接到其他几个节点。这形成了一个节点网络。每个节点都尝试为区块链中下一个要创建的区块找到 nonce。当创建一个新交易时，比如“*爱丽丝支付鲍勃*”，它会被发送到它的同伴节点。每个接收节点都会检查该交易是否有效，是否试图创建一个非法交易或尝试花费一个已经花费的交易。然后它会被发送到他们的同伴节点，依此类推；这样就广播到了整个网络。每个接收节点都将交易添加到区块中，并尝试找到
    nonce。哪个节点先找到 nonce 就会创建区块并将其发送给它的同伴节点。所有接收节点都会验证区块时间戳、交易、nonce 和下一个目标工作量证明。然后接收节点会将它转发给他们的同伴节点，依此类推；这样就广播出去了。在接收到区块后，每个节点开始处理下一个
    nonce。这是继续进行的方式。
- en: 'The following image shows how blocks and transactions propagate:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片展示了区块和交易是如何传播的：
- en: '![](images/Figure-5.14.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.14.jpg)'
- en: '**Figure 5.14:** Transaction propagation on Bitcoin network'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5.14:** 比特币网络上的交易传播'
- en: A ping takes nearly 200ms to reach to cover the longest distance on earth. Block
    broadcast involves verification at each hop; so, to cover 95% of the network,
    propagation delay can be up to a minute. Due to this reason, multiple nodes can
    create a valid block without knowing the existence of an already created block.
    This creates branching on the blockchain. Depending on the location, nodes may
    choose different nodes as valid for the same block height. Since no node can know
    which block is to be considered and which one is to be rejected, they need to
    start working on the first one received but also save the other valid blocks.
    Now, there are multiple sets of nodes calculating nonce for different chains,
    so they may continue to create next blocks in their respective chains. To solve
    this issue of branching, the nodes must continue this process till one of the
    competing chains becomes longer than the rest. The nodes will then accept the
    longest chain as the correct one and discard the other chain. As the time, to
    find the nonce is significantly higher than the block propagation delay; the nodes
    competing for the next block will not be many.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一个ping命令需要近200毫秒才能覆盖地球上最长的距离。区块广播涉及在每个跳点进行验证；因此，为了覆盖网络的95%，传播延迟可能长达一分钟。由于这个原因，多个节点可以在不知道已经创建的区块存在的情况下创建有效的区块。这导致了区块链上的分叉。根据位置的不同，节点可能选择不同的节点作为同一区块高度的有效节点。由于没有一个节点能知道哪个区块应该被考虑，哪个应该被拒绝，他们需要开始处理收到的第一个区块，但也要保存其他有效的区块。现在，有多个节点集合为不同的链计算nonce，所以它们可能会继续在各自的链上创建下一个区块。为了解决这个分叉问题，节点必须继续这个过程，直到竞争链中的一个变得比其他链都长。节点然后会接受最长的链作为正确的链，并丢弃其他链。由于找到nonce的时间明显高于区块传播延迟；争夺下一个区块的节点不会很多。
- en: 'Here’s an illustration of chain branching:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是区块链分叉的说明：
- en: '![](images/Figure-5.15.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.15.jpg)'
- en: '**Figure 5.15:** Illustration of block branching due to almost simultaneous
    mining of blocks'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.15：** 由于几乎同时挖掘区块导致的区块分叉说明'
- en: If, for some reason, blocks are not received by a node and a new block is received,
    the node can request for missed blocks from its peers. Since not receiving a block
    is not a problem, a block does not need to reach all nodes either.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出于某种原因，节点没有接收到区块并且接收到了一个新的区块，节点可以从它的同伴那里请求错过区块。由于没有收到区块并不是一个问题，区块也不需要到达所有节点。
- en: '![](images/Figure-5.16.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.16.jpg)'
- en: '**Figure 5.16:** Node requested missing block peer'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.16：** 节点请求缺失区块的 peer'
- en: '[Incentive section of the whitepaper](toc.xhtml#s87a)'
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[白皮书中的激励部分](toc.xhtml#s87a)'
- en: '![](images/Figure-5.17.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.17.jpg)'
- en: '**Figure 5.17:** Incentive section of the whitepaper'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.17：** 白皮书中的激励部分'
- en: 'This section explains the incentive a node has in creating blocks and supporting
    the Bitcoin network. A node that successfully creates a block is incentivized
    in two ways:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 本节解释了节点创建区块和支持比特币网络的激励。成功创建区块的节点以两种方式获得激励：
- en: Each newly created block awards bitcoin to the node that successfully finds
    Nonce.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个新创建的区块都会向成功找到Nonce的节点颁发比特币。
- en: Additionally, in a transaction, input value minus output value also adds to
    the block reward collected by the node creating the block.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，在交易中，输入值减去输出值也增加了节点创建区块所获得的区块奖励。
- en: A node uses CPU power in trying to find nonce, which leads to power consumption.
    Since many nodes will be competing in finding a nonce, this process will mostly
    lead to failed attempts. The cost of energy used in this process will need to
    be recovered when the node succeeds. The node also needs to make revenue to run
    a profitable business as this is a business for the node owner. A block reward
    makes sure that the node has enough incentives to continue to find nonce.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 节点在尝试寻找nonce时会消耗CPU算力，这导致了能源消耗。由于许多节点将争夺nonce，这个过程大多会导致尝试失败。节点在尝试过程中所消耗能源的成本需要在节点成功时予以回收。节点还需要产生收益以运行一个盈利的业务，因为这对节点所有者来说是一个生意。区块奖励确保了节点有足够的激励继续寻找nonce。
- en: If a group of nodes decides not to cooperate with the network and double-spend
    or change rules of acceptance of block/transaction or attack network in some way,
    then those nodes will form their own network. The network that will provide better
    incentives and where nodes play by the rules will provide better value for publishing
    transactions. Consequently, the reward will have a higher credit value. This will
    encourage nodes to cooperate and support the network instead of attacking it.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一组节点决定不与网络合作，进行双重支付或改变区块/交易的接受规则，或以某种方式攻击网络，那么这些节点将形成自己的网络。将提供更好的激励，并且节点按照规则行事的网络将提供更好的交易发布价值。因此，奖励将具有更高的信用价值。这将鼓励节点合作和支持网络，而不是攻击它。
- en: The node is free to include or exclude a transaction or not cooperate with the
    network. By including the reward, the creator of a transaction encourages the
    node to include the transaction in the block. As more and more transactions are
    included in the block, transaction reward will become the main driver of revenue
    for the mining node, and so, the need for block reward will diminish. The network
    implements a mechanism to reduce block rewards over time.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 节点可以自由地包括或排除一个交易，或不与网络合作。通过包括奖励，交易的创建者鼓励节点将交易包含在区块中。随着越来越多的交易包含在区块中，交易奖励将成为挖矿节点收入的主要驱动力，因此，对区块奖励的需求将减少。网络实现了一种机制，随着时间的推移减少区块奖励。
- en: 'The following figure illustrates transaction rewards:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了交易奖励：
- en: '![](images/Figure-5.18.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.18.jpg)'
- en: '**Figure 5.18:** Illustration of transaction reward payment'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5.18:** 交易奖励支付说明'
- en: Also, Block reward is the only source of minting bitcoin. This leads to predefined
    inflation.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，区块奖励是铸造比特币的唯一来源。这导致了预设的通货膨胀。
- en: 'The following is bitcoin inflation plotted for past and future:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是比特币通货膨胀的图表，包括过去和未来：
- en: '![](images/Figure-5.19.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.19.jpg)'
- en: '**Figure 5.19:** Bitcoin inflation of past and future'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5.19:** 比特币过去和未来的通货膨胀'
- en: '[Reclaiming Disk Space section of the whitepaper](toc.xhtml#s88a)'
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[](toc.xhtml#s88a)'
- en: '![](images/Figure-5.20.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.20.jpg)'
- en: '**Figure 5.20:** Reclaiming Disk Space section of the whitepaper'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5.20:** 白皮书中的“回收磁盘空间”部分'
- en: This section explains how we can compact stored blocks in the blockchain and,
    thus, reclaim disk space. Merkle Tree is a method of deriving code (called Merkle
    root) from a list of transactions. This code confirms the integrity of transactions
    included in the block. Merkle Root, being part of the Block header, also ensures
    that proof –of work protects it against modification.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 本节解释了我们如何压缩区块链中存储的区块，从而回收磁盘空间。Merkle 树是一种从交易列表派生代码（称为 Merkle 根）的方法。此代码确认了包含在区块中的交易的完整性。作为区块头的一部分，Merkle
    根还确保了工作量证明保护它免受修改。
- en: 'The updated Block Header is now as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的区块头现在如下所示：
- en: '![](images/Figure-5.21.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.21.jpg)'
- en: '**Figure 5.21:** Illustration of Bitcoin Block structure'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5.21:** 比特币区块结构说明'
- en: We can see that as transactions were not used in the calculation of Block hash,
    their integrity could not have been protected without Merkle root.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，由于在计算区块哈希时没有使用交易，如果没有 Merkle 根，它们的完整性就无法得到保护。
- en: 'Calculation of Merkle Root can be understood from the following illustration:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从以下说明中理解 Merkle 根的计算：
- en: '![](images/Figure-5.22.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.22.jpg)'
- en: '**Figure 5.22:** Calculation of Merkle Tree Root'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5.22:** Merkle 树根的计算'
- en: In the preceding illustration, the first Hashes of each transaction are calculated.
    Then, recursively, pairs of hashes are concatenated and hashed to get hash for
    the upper level. If a pair is not available, the hash is concatenated with itself.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的说明中，计算每个交易的第一个哈希。然后，递归地，将哈希成对地连接并哈希以获得上级的哈希。如果没有成对，则将哈希与自己连接。
- en: Each node verifies a block as it receives over the network and stores it on
    the disk. When enough blocks are saved on the disk and the node is confident that
    the older blocks will not change because of branching, the node can remove sent
    transactions from the older blocks and only keep headers and unspent transactions.
    This way, nodes can save a significant amount of disk space.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 每个节点在通过网络接收时验证一个区块并将其存储在磁盘上。当在磁盘上保存足够的区块，并且节点确信由于分叉，较旧的区块不会改变，节点可以将发送的交易从较旧的区块中删除，只保留头部和未花费的交易。这样，节点可以节省大量的磁盘空间。
- en: '[Simplified Payment Verification section of the whitepaper](toc.xhtml#s89a)'
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【白皮书中的简化支付验证部分](toc.xhtml#s89a)
- en: '![](images/Figure-5.23.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.23.jpg)'
- en: '**Figure 5.23:** Simplified Payment Verification section of the whitepaper'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.23:** 白皮书中的简化支付验证部分'
- en: This section explains how a node that does not maintain full blocks can still
    verify received blocks. A node implementing Simplified Payment Verification only
    keeps Block headers for the longest chain, which means there are no competing
    chains, and the longest chain is already found. The node takes help from other
    nodes in its network that are maintaining full blockchain to verify blocks.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 本节解释了即使不维护完整区块的节点如何仍然可以验证接收的区块。实现简化支付验证的节点只保留最长链的区块头，这意味着不存在竞争链，并且最长链已经找到。该节点在其网络中寻求维护完整区块链的其他节点来验证区块。
- en: 'It uses a technique called *Merkle proof,* explained as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用了一种名为*Merkle证明*的技术，如下所述：
- en: '![](images/Figure-5.24.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.24.jpg)'
- en: '**Figure 5.24:** Illustration of Merkle proof'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.24:** Merkle证明的说明'
- en: SPV node requests full node for Hashes related to T4\. The full node sends the
    hashes required to verify Merkle root. Since H34 can be derived from H3 and H4,
    H1234 can be derived from H34 and H12\. H12345555 can be derived from H1234 and
    H5555\. By giving H3, H4, H12, and H5555 and Merkle root H12345555, SPV node can
    verify the presence of T4 in the block with Merkle root H12345555.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: SPV节点请求全节点提供与T4相关的哈希。全节点发送验证Merkle根所需的哈希。由于H34可以从H3和H4派生，H1234可以从H34和H12派生，H12345555可以从H1234和H5555派生，通过提供H3，H4，H12和H5555以及Merkle根H12345555，SPV节点可以验证T4是否存在于Merkle根H12345555的区块中。
- en: '![](images/Figure-5.25.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.25.jpg)'
- en: '**Figure 5.25:** Communication between SPV Node and Full Node'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.25:** SPV节点与全节点之间的通信'
- en: However, attackers can form a network, and since SPV node depends on full nodes
    for verification, it may not know if the node it is communicating is fraudulent.
    Consequently, it can continue receiving fabricated transactions. This kind of
    attack can be handled if a node broadcast alerts for presence of invalid block
    when it sees on network.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，攻击者可以形成一个网络，由于SPV节点依赖于全节点进行验证，它可能不知道与之通信的节点是否欺诈。结果，它可能会继续接收伪造的交易。如果节点在网络上看到无效区块的存在时广播警报，这种攻击是可以处理的。
- en: '[Combining and Splitting Value section of the whitepaper](toc.xhtml#s90a)'
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【白皮书中的合并和分割价值部分](toc.xhtml#s90a)
- en: '![](images/Figure-5.26.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.26.jpg)'
- en: '**Figure 5.26:** Combining and Splitting Value section of the whitepaper'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.26:** 白皮书中的合并和分割价值部分'
- en: This section explains the concept of combining and splitting of value in Bitcoin
    transactions instead of having one transaction for each bitcoin or fraction of
    bitcoin. If Alice needs to pay Bob, she needs to use unspent transactions paid
    to her that have combined value greater than or equal to the amount she needs
    to pay to Bob and pay herself back the remaining (change) value.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 本节解释了在比特币交易中合并和分割价值的概念，而不是为每个比特币或比特币的一部分都有一个交易。如果爱丽丝需要支付鲍勃，她需要使用支付给她的未花费交易，这些交易的组合价值大于或等于她需要支付给鲍勃的金额，并支付给自己剩余的（找零）价值。
- en: If the unspent transaction is bigger than the required amount, then the transaction
    will be split into the amount to be paid and the remaining change. If unspent
    transactions are smaller, then the value of multiple transactions needs to be
    combined to make the input value bigger than or equal to the required amount.
    If the input value is the same as the required amount, then output is only one
    transaction, which is the amount to be paid to Bob. However, if the input value
    is bigger, then Alice needs to pay herself the change. If the output is smaller
    than the input, then the remaining value is paid to the mining node, as we learned
    in one of the previous sections. This can be understood from *[Figure 5.18](#fig5_18)*.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未花费的交易金额大于所需金额，则交易将被分成要支付的金额和剩余的找零。如果未花费的交易金额较小，则需要合并多个交易的值以使输入值大于或等于所需金额。如果输入值与所需金额相同，则输出只是一个交易，即支付给鲍勃的金额。然而，如果输入值更大，爱丽丝需要支付给自己找零。如果输出小于输入，则剩余的价值支付给矿工节点，正如我们在之前的某一节中学到的。这可以从*[图5.18](#fig5_18)*中理解。
- en: '[Privacy section of the whitepaper](toc.xhtml#s91a)'
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【白皮书中的隐私部分](toc.xhtml#s91a)
- en: '![](images/Figure-5.27.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.27.jpg)'
- en: '**Figure 5.27:** Privacy section of the whitepaper'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.27:** 白皮书中的隐私部分'
- en: This section explains how privacy can be achieved in the Bitcoin network even
    though all transactions are broadcasted. A user can keep its public keys anonymous
    this way. Although transactions are public, no one will know who the transaction
    belongs to. However, since change needs to be sent back to the owner of the transaction,
    its value and transaction details can be derived. To solve this, the owner of
    the transaction can send change to a different public key. This means a new key
    pair needs to be used every time. However, transaction history can still reveal
    the owner’s chain of transactions if their identity is revealed in one of the
    existing transactions.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 本节解释了如何在所有交易都被广播的情况下在比特币网络中实现隐私。用户可以通过这种方式保持其公钥匿名。尽管交易是公开的，但没有人会知道交易属于谁。然而，由于需要将更改发送回交易的所有者，其价值和交易详情可以被推导出来。为了解决这个问题，交易所有者可以将更改发送到不同的公钥。这意味着每次都需要使用一个新的密钥对。然而，如果他们在现有交易中透露了身份，交易历史仍然可以揭示所有者的交易链。
- en: 'The following is the illustration of the method of improving privacy in a transaction:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对交易中提高隐私方法的解释：
- en: '![](images/Figure-5.28.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.28.jpg)'
- en: '**Figure 5.28:** Method of improving the privacy of the sender in a transaction'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.28:** 交易中提高发送者隐私的方法'
- en: '[Calculations section of the whitepaper](toc.xhtml#s92a)'
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[白皮书计算部分](toc.xhtml#s92a)'
- en: '![](images/Figure-5.29.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.29.jpg)'
- en: '**Figure 5.29:** Calculations section of the whitepaper'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.29:** 白皮书计算部分'
- en: This section explains the condition when an attacker or group of attackers tries
    to mine more blocks than an honest node. If the attackers manage to have more
    CPU processing power and can mine more blocks, the attacker will be part of the
    network, which means it will have to depend on honest nodes to accept the blocks.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 本节解释了攻击者或一组攻击者尝试挖掘比诚实节点更多块的情况。如果攻击者能够拥有更多的CPU处理能力并挖掘更多的块，那么攻击者将成为网络的一部分，这意味着它必须依赖诚实节点接受块。
- en: 'Consequently:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: The attacker cannot change block reward, so they cannot increase bitcoin supply.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者无法改变区块奖励，因此他们无法增加比特币供应。
- en: The attacker cannot change the content of transactions from others’ payments
    as it cannot sign their transactions.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者无法更改他人支付的交易内容，因为它无法签署他们的交易。
- en: The attacker cannot stop honest nodes from broadcasting transactions.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者无法阻止诚实节点广播交易。
- en: The attacker can, however, change its own transaction, censor transactions by
    not including them, or reverse a transaction that was recently included.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，攻击者可以更改自己的交易，通过不包含它们来审查交易，或者撤销最近包含的交易。
- en: Now, consider a situation wherein an attacker who may or may not hold the majority
    CPU power tries to attack a network. This situation is like Gambler’s Ruin Problem,
    and the solution is derived by using Binomial Random Walk.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑一个攻击者可能持有大多数CPU权力也可能不持有的情况，尝试攻击一个网络。这种情况就像赌徒毁灭问题，解决方案是通过使用二项式随机游走得出的。
- en: The attacker wants to change a transaction at z-1 depth, so it will start from
    z depth. If they can mine a block before honest node, gap reduces by z-1, but
    if honest node mines the block, gap increases to z+1\. We are trying to find the
    probability of the attacker being able to create the longest chain.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者想要改变z-1深度的交易，所以它会从z深度开始。如果他们能在诚实节点之前挖掘一个块，差距将减少z-1，但如果诚实节点挖掘了块，差距将增加到z+1。我们正在试图找出攻击者能够创建最长链的概率。
- en: In Gambler’s Ruin Problem, Gambler competes with the opponent and tries to win
    all fortune from the opponent. It is an iterative betting game in which either
    party wins or loses $1 on every bet. In the end, one party loses all its fortune.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在赌徒毁灭问题中，赌徒与对手竞争，试图赢得对方的全部财富。这是一个迭代投注游戏，每一注都会有一方赢得1美元或输掉1美元。最后，一方失去了所有的财富。
- en: At first, looking at Gambler’s ruin problem.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，看看赌徒的毁灭问题。
- en: '*q: Probability of Gambler winning a single bet*'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '-   q: 赌徒赢得单注的概率'
- en: '*p: Probability of Gambler losing a single bet*'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '-   p: 赌徒输掉单注的概率'
- en: '*i: Initial fortune of Gambler*'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '-   i: 赌徒的初始财富'
- en: '*p=1-q*'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '-   p=1-q'
- en: '*0< i< N*'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '-   0< i< N'
- en: '![](images/Figure-5.30.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.30.jpg)'
- en: '**Figure 5.30:** Illustration of Gambler’s ruin problem'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.30:** 赌徒毁灭问题的说明'
- en: 'The probability of Gambler winning the game can be calculated as the sum of
    the following probabilities after the bet:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 赌徒赢得游戏的可能性可以通过以下概率之和计算得出：
- en: If Gambler wins a bet with probability q, then the new game-winning probability
    is .
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果赌徒赢得赌注的概率是q，那么新的获胜概率是。
- en: If Gambler loses a bet with probability p, then the new game-winning probability
    is.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果赌徒输掉赌注的概率是p，那么新的获胜概率是。
- en: Using Law of total probability, i.e., .
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 使用总概率定律，即。
- en: 'The probability of the gambler winning the game is the sum of probability of
    winning the game after winning or losing the current bet. This can be represented
    as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 赌徒赢得游戏的可能性是在赢得或输掉当前赌注后赢得游戏的可能性之和。这可以表示如下：
- en: '![](images/107.jpg)![](images/c05eq-4.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](images/107.jpg)![](images/c05eq-4.jpg)'
- en: In a winning situation, *P[N] = 1 and i = N - 1*
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在获胜的情况下，*P[N] = 1且i = N - 1*
- en: '![](images/c05eq-5.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](images/c05eq-5.jpg)'
- en: Now, consider the case of Bitcoin mining in which attacker can mine blocks forever
    to defeat honest nodes. It is Gambler’s ruin problem with a difference. Attacker
    has infinite dollars and infinite time, and to win, attacker needs to create bigger
    chain by adding blocks more than honest node. At the beginning, attacker wants
    to be able to modify a transaction at z-1depth, so it starts at z depth.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑比特币挖矿的情况，攻击者可以无限挖掘区块以击败诚实节点。这是一个赌徒毁灭问题，有一些不同。攻击者有无限的美元和无限的时间，为了获胜，攻击者需要通过添加区块比诚实节点更大的链。一开始，攻击者希望能够在z-1深度修改一个交易，所以它从z深度开始。
- en: 'The following figure explains this:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表解释了这一点：
- en: '![](images/Figure-5.31.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.31.jpg)'
- en: '**Figure 5.31:** Illustration of an attacker successfully mining longer chain'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.31：** 攻击者成功挖掘更长链的说明'
- en: Considering,
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑，
- en: '*p: Probability of an honest node finding the next block*'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '*p：诚实节点找到下一个区块的概率*'
- en: '*q: Probability of the attacker finding the next block*'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '*q：攻击者找到下一个区块的概率*'
- en: '*z: Blocks attacker has to add more than honest node*'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '*z：攻击者必须比诚实节点添加更多的块*'
- en: '*i: Number of additional blocks attacker can lose to honest node*'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '*i：攻击者可以输给诚实节点的额外区块数*'
- en: '*q[z]: probability of the attacker to ever beat honest node*'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '*q[z]：攻击者击败诚实节点的概率*'
- en: '*So, N= i + z*'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '*所以，N= i + z*'
- en: '*Here, i* → *∞ since Gambler started with infinite resources.*'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '*在这里，i→∞，因为赌徒开始时资源无限.*'
- en: '![](images/c05eq-6.jpg)![](images/c05eq-7.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](images/c05eq-6.jpg)![](images/c05eq-7.jpg)'
- en: This is how we reached the equation given in this section of the whitepaper.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们到达白皮书中这一部分的方程的方式。
- en: Assuming that the attacker has a lower probability of finding the block than
    the honest node, i.e., the attacker’s chance of catching up goes down exponentially.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 假设攻击者发现块的概率低于诚实节点，即攻击者赶超的机会呈指数下降。
- en: 'Now, we are going a step ahead here and trying to determine the probability
    of the attacker being able to double spend if the merchant waits for z confirmations.
    Satoshi Nakamoto considers the probability distribution of the number of winning
    events in each time period as Poisson’s distribution because of the following
    reasons:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在这里迈出了一步，试图确定如果商家等待z个确认，攻击者能够进行双重支付的概率。中本聪认为，每个时间段的获胜事件数量的概率分布是泊松分布，原因如下：
- en: Mining events can occur any number of times during each interval.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挖矿事件可以在每个时间间隔内发生任意次数。
- en: Each event occurs independently and does not affect the probability of other
    events.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个事件都是独立的，不会影响其他事件的概率。
- en: The average rate of the event is constant as we know since block time is constant,
    and the probability of block mining is proportional to the ratio of CPU power,
    so it is also constant.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件的平均速率是恒定的，因为我们知道区块时间是不变的，区块挖掘的概率与CPU功率的比例成正比，所以它也是恒定的。
- en: Two events occurring at the exact same time is not possible as nodes judge based
    on arrival time, and if they do occur, they wait till the longest chain is found.
    So, two events occurring at the same time are rare and even if they occur, they
    can be safely considered different.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个事件在确切相同的时间发生是不可能的，因为节点根据到达时间进行判断，如果它们确实发生，它们会等待找到最长的链。所以，同时发生两个事件是罕见的，即使它们发生，也可以安全地认为它们是不同的。
- en: Considering,
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑，
- en: '*T: Average block time*'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '*T：平均区块时间*'
- en: '*z: Required depth of transaction in blockchain to consider spent*'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '*z：在区块链中考虑花费的交易所需的深度*'
- en: '*P[p]: Probability of mining a block by honest node every T minutes*'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '*P[p]：每T分钟诚实节点挖掘一个区块的概率*'
- en: '*P[q]: Probability of mining a block by attacker node every T minutes*'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '*P[q]：每T分钟攻击者节点挖掘一个区块的概率*'
- en: '*p: Number of blocks mined by honest node every T minutes*'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '*p：每T分钟诚实节点挖掘的区块数*'
- en: '*q: Number of blocks mined by attacker every T minutes*'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '*q: 攻击者每T分钟挖掘的区块数*'
- en: '*T[z]: Average Time interval for mining z blocks*'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '*T[z]: 挖掘z个区块的平均时间间隔*'
- en: '*T[z]= T*z*'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '*T[z]= T*z*'
- en: The quantities p and q are inverse of their respective probabilities of mining
    a block within time interval T.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 量p和q是它们各自在时间间隔T内挖到区块的概率的倒数。
- en: Therefore,
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，
- en: '![](images/c05eq-8.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](images/c05eq-8.jpg)'
- en: 'Attacker can mine q blocks in T minutes, so it can mine:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者在T分钟内可以挖掘q个区块，所以它可以挖掘：
- en: '![](images/c05eq-9.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](images/c05eq-9.jpg)'
- en: The probability of k successes happening in an interval is given by Poisson
    density function
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在一段时间内k个成功事件发生的概率由泊松密度函数给出。
- en: '![](images/111.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](images/111.jpg)'
- en: As a more general case, we want to know the overall probability of attack successes
    for the merchant to accept a modified transaction in a block in the future if
    not in the current interval. So basically, even if the attacker has k successes
    in an interval, it can still achieve z-k blocks in the future and modify the future
    blocks in an interval.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个更一般的情况，我们想知道如果不在当前间隔，商家接受修改交易的总体概率。所以基本上，即使攻击者在一段时间内取得k个成功，它仍然可以在未来实现z-k个区块，并在未来的间隔中修改区块。
- en: This can be solved by using the Law of total probability, i.e., *P(A)= ∑[n]P(A|B[n]
    )P(B[n])*
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题可以通过使用全概率定律来解决，即 *P(A)= ∑[n]P(A|B[n] )P(B[n])*
- en: '*P[s]: Total probability of successes*'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '*P[s]: 成功总概率*'
- en: '![](images/c05eq-10.jpg)![](images/c05eq-11.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](images/c05eq-10.jpg)![](images/c05eq-11.jpg)'
- en: This is the equation Satoshi Nakamoto used to write code and demonstrate that
    the probability drops exponentially.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这是中本聪用来编写代码并证明概率呈指数下降的方程式。
- en: From the equation, we can deduce that the probability of an attacker successfully
    mining z blocks reduces exponentially with the increase in value of z if the attacker
    does not control a majority of hash power. Therefore, it is important to wait
    for few blocks before confirming a transaction.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 从方程式中，我们可以推断出，如果攻击者没有控制多数的哈希功率，那么攻击者成功挖掘z个区块的概率会随着z值的增加而指数下降。因此，在确认交易之前，重要的是要等待几个区块。
- en: It is recommended that a merchant should confirm a payment only after the transaction
    is at the depth of 6 in the blockchain.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 建议商家在区块链深度为6的交易后才确认支付。
- en: '[Conclusion section of the whitepaper](toc.xhtml#s93a)'
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[白皮书结论部分](toc.xhtml#s93a)'
- en: '![](images/Figure-5.32.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-5.32.jpg)'
- en: '**Figure 5.32:** Conclusion section of the whitepaper'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.32:** 白皮书结论部分'
- en: 'This section explains what we achieved in the paper. This can be listed as
    follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这一节解释了我们在论文中取得的成绩。这可以列为以下几点：
- en: A peer-to-peer payment system that protects against double-spending and does
    not require a trusted third party.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个保护双重支付的点对点支付系统，不需要可信赖的第三方。
- en: A digital signature provides ownership of the transaction.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字签名提供交易的所有权。
- en: If honest nodes control the majority of CPU power, then proof of work makes
    it impractical for an attacker to modify enough blocks in blockchain to cause
    double-spending.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果诚实节点控制了CPU功率的多数，那么工作量证明对于攻击者来说在区块链中修改足够的区块以造成双重支付是不切实际的。
- en: Nodes work independently with only little need for coordination. Nodes can leave
    and join the network independently. They do need to communicate, but their state
    does not depend on other nodes, and there is no need for routing, etc.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点独立工作，很少需要协调。节点可以独立离开和加入网络。它们需要进行通信，但它们的状态不依赖于其他节点，也不需要路由等。
- en: Nodes do not need to reveal their identity.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点无需透露其身份。
- en: Nodes votes with their CPU power, and so, compete in CPU power to mine blocks.
    Successful nodes get the incentive to support the network.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点通过其CPU功率进行投票，因此，它们通过CPU功率的竞争来挖矿区块。成功的节点将获得支持网络的激励。
- en: Consensus rules are enforced through majority support and participation.
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共识规则通过多数支持和参与来执行。
- en: '[Conclusion](toc.xhtml#s94a)'
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[结论](toc.xhtml#s94a)'
- en: In this chapter, you learned about the content of the whitepaper in detail.
    You also learned about the calculations used in the whitepaper by deriving them.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您详细了解了白皮书的内容。您还通过推导来了解了白皮书中的计算。
- en: In the next chapter, you will understand the structure of blocks in the blockchain
    by writing actual programs for parsing blocks and indexes stored in the filesystem
    by Bitcoin software. You will also understand mining in detail again through programming.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将通过编写实际程序来解析存储在文件系统中的比特币软件的区块和索引，从而了解区块链中区块的结构。您还将通过编程详细了解挖矿过程。
- en: '[Points to remember](toc.xhtml#s95a)'
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[需记住的要点](toc.xhtml#s95a)'
- en: The Bitcoin network does not require any intermediaries to send bitcoin between
    two parties.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比特币网络不需要任何中介来发送比特币。
- en: Blockchain is a trail of truth that every node maintains.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区块链是每个节点维护的真理之链。
- en: Trusted third parties have a cost included in all the transactions, even if
    a transaction does not require dispute resolution.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可信赖的第三方在所有交易中都有成本，即使交易不需要争议解决。
- en: Bitcoin transactions can optionally have a trusted third party as escrow implementation
    rather than by rule.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比特币交易可以选择性地有一个可信赖的第三方作为托管实现，而不是按照规则。
- en: Transactions are a trail of digital signature linking the amount paid to the
    previous transaction and finally, leading to the mined coins.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易是一系列数字签名，将支付的金额与之前的交易链接起来，最终指向挖出的硬币。
- en: Hashing is irreversible.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈希是不可逆的。
- en: The digital signature ensures the integrity and authenticity of the document.
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字签名确保了文档的完整性和真实性。
- en: Transactions once created are broadcast to the Bitcoin network.
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦创建，交易将广播到比特币网络。
- en: Each block in the blockchain is arranged in chronological order.
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区块链中的每个区块按时间顺序排列。
- en: A nonce is a random value found by the miner so that it is within target proof
    –of work, and hence, acceptable.
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个nonce是矿工找到的随机值，使其符合目标工作量证明，因此是可接受的。
- en: Bitcoin maintains block time by adjusting the target proof –of work.
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比特币通过调整目标工作量证明来维护区块时间。
- en: New blocks are published to the network.
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新区块发布到网络。
- en: In case two blocks are mined almost simultaneously, there will be multiple competing
    chains in a branch in the blockchain.
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果几乎同时挖掘出两个区块，区块链的分支中将存在多个竞争链。
- en: The longer chain in the competing branch is accepted, and the other one is rejected.
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在竞争的分支中，较长的链被接受，另一个被拒绝。
- en: A miner who finds the required nonce is awarded a block reward.
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到所需nonce的矿工将获得区块奖励。
- en: Additionally, miners collect a transaction fee from the included transaction
    in the block.
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，矿工从包含在区块中的交易中收集交易费。
- en: Miners have an incentive to protect the network instead of attacking it.
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矿工有保护网络而不是攻击网络的动机。
- en: Bitcoin inflation is predetermined.
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比特币通货膨胀是预先确定的。
- en: A node can prune older blocks by removing included transactions once enough
    newer blocks are received.
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点可以通过移除包含的交易来删除较旧的区块，一旦收到足够的新区块。
- en: Simplified Payment Verification node keeps only block headers of the longest
    chain with only the required transactions.
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SPV简化支付验证节点只保留最长链的区块头部，仅包含所需的交易。
- en: SPV node takes help from full nodes to verify blocks and transactions using
    Merkle proof.
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SPV节点通过Merkle证明使用完整节点来验证区块和交易。
- en: Payers of bitcoin can combine its unused bitcoin transaction output or split
    its previous unspent output.
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比特币的支付者可以结合其未使用的比特币交易输出，或分割其之前的未花费输出。
- en: One can enhance their privacy by never reusing their addresses.
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人们可以通过从不重复使用他们的地址来增强他们的隐私。
- en: The probability of malicious miners successfully reversing a transaction already
    included in the blockchain reduces exponentially as the depth of the block increases.
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着区块深度的增加，恶意矿工成功反转已经包含在区块链中的交易的概率呈指数级降低。
- en: '[Questions](toc.xhtml#s96a)'
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[问题](toc.xhtml#s96a)'
- en: How does a node know that it has missed a block? How can it get the missed block?
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点如何知道它错过了区块？它如何获得丢失的区块？
- en: Why are there mostly one or two outs of a transaction?
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么一个交易的输出通常只有一个或两个？
- en: What makes blockchain immutable? (Tick the correct answer)
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么使区块链不可变？（勾选正确答案）
- en: Merkle root
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 梅克尔根
- en: Digital Signature
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字签名
- en: Proof –of work
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作量证明
- en: Copy of blockchain
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区块链的副本
- en: True or False
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 真或假
- en: The greater the value of the Block-header hash, the greater is proof-of-work.
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区块头哈希值越大，工作量证明越大。
- en: The success of SPV block verification depends on the honesty of its peers.
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SPV区块验证的成功取决于其对等方的诚实。
- en: Bitcoins are created by _______.
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比特币由______产生。
- en: Why does sending bitcoin change back to the same public key reduce privacy?
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么将比特币发送回相同的公钥会减少隐私？
- en: 'In Gamber’s Ruin Problem: Ria starts with i = $2 and has a probability of winning
    a bet p = 0.7.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在甘伯的毁灭问题中：瑞亚起始资金i=2000美元，赢得赌注的概率p=0.7。
- en: What is the probability of Ria winning a total fortune of N = $6?
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 瑞亚赢得总财富N=6000美元的概率是多少？
- en: What is the probability of Ria becoming infinitely rich?
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 瑞亚成为无限富有的概率是多少？
- en: An attacker has the mining power of 20% of the entire network. An online store
    requires a bitcoin transaction to reach the depth of 6 in blockchain before they
    release the item.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击者拥有整个网络20%的挖矿能力。一个在线商店要求比特币交易在区块链中达到6的深度后才发货。
- en: What is the probability of the attacker mining 3 blocks during this time?
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击者在这段时间挖出3个区块的概率是多少？
- en: What is the probability of the attacker being able to produce the longest chain
    by mining 3 blocks during the confirmation time and additional blocks afterward?
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击者在确认时间内以及之后挖出3个区块，从而能够产生最长链的概率是多少？
