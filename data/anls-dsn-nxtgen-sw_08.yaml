- en: © Springer Nature Switzerland AG 2020A. M. LangerAnalysis and Design of Next-Generation
    Software Architectures[https://doi.org/10.1007/978-3-030-36899-9_8](https://doi.org/10.1007/978-3-030-36899-9_8)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © Springer Nature Switzerland AG 2020A. M. Langer下一代软件架构的分析与设计[https://doi.org/10.1007/978-3-030-36899-9_8](https://doi.org/10.1007/978-3-030-36899-9_8)
- en: 8. Quantum Computing, AI, ML, and the Cloud
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8. 量子计算、人工智能、机器学习和云
- en: 'Arthur M. Langer^([1](#Aff2) [ ](#ContactOfAuthor2))(1)Center for Technology
    Management, Columbia University, New York, NY, USAArthur M. LangerEmail: [al261@columbia.edu](mailto:al261@columbia.edu)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'Arthur M. Langer^([1](#Aff2) [ ](#ContactOfAuthor2))(1)哥伦比亚大学技术管理中心，纽约，美国Arthur M. LangerEmail:
    [al261@columbia.edu](mailto:al261@columbia.edu)'
- en: As discussed in Chap. [1](480347_1_En_1_Chapter.xhtml), quantum computing while
    not yet scalable has the potential to change the processing capabilities of computing
    especially for ML and AI processing. Without getting into the detailed hardware
    technicalities, the essential advantage of quantum is that it can evaluate many
    potential answers simultaneously (superposition) that results in improving calculation
    speeds immensely. Traditional computers behave in a sequential manner, but quantum
    allows multiple calculations to take place simultaneously and yet be related to
    the same problem. It’s like having dimensions of processing but somehow offering
    one solution. Because of this advantage, there are also disadvantages. Specifically,
    quantum provides value for certain types of computational problems. Where such
    computational algorithms are not to the advantage of quantum there is no performance
    improvement from traditional binary-based computers. The true benefit then of
    quantum computing is dealing with uncertainty problems These are also known as
    “quantum algorithms” which can solve difficult equations in many different ways.
    For example, the successful quantum algorithm called factorization created by
    Peter Shore of AT&T Bell Laboratories proved that quantum could factor large numbers
    into their prime factors in seconds compared to a classical computer that could
    almost take forever. These types of benefits tend to favor performance improvements
    in ML and AI which require large data crunching to solve or analyze complex datasets
    . One can see then that quantum is a very attractive alternative to speeding up
    computations that can provide incredible results for predictive analytic issues.
    Picture the value that quantum brings when analyzing causes of disease, or maximizing
    optimizations across sectors and use cases for smart cities, traffic systems,
    lights, meters, utilities, buildings all at the same time. Quantum allows for
    these simultaneous computations to take place and yet maintain a relationship
    with each other (called entanglement). Traditional computers would need to analyze
    each computation sequentially ultimately limiting scalability.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 正如第[1](480347_1_En_1_Chapter.xhtml)章所讨论的，尽管量子计算尚不可扩展，但它有可能改变计算的处理能力，尤其是对于机器学习和人工智能处理。不涉及详细的硬件技术细节，量子的基本优势在于它可以同时评估许多潜在答案（叠加），从而极大地提高计算速度。传统计算机是以顺序方式运行的，但量子允许多个计算同时进行，但与同一问题相关。这就像有了处理的维度，但以某种方式提供了一个解决方案。由于这个优势，也存在一些缺点。具体来说，量子为某些类型的计算问题提供了价值。对于这些计算算法不利于量子的情况，传统的基于二进制的计算机没有性能改进。因此，量子计算的真正好处在于处理不确定性问题，这些也被称为“量子算法”，可以以许多不同的方式解决困难的方程。例如，由AT&T贝尔实验室的Peter
    Shore成功开发的量子算法因式分解证明了量子可以在几秒钟内将大数分解为其质因数，而传统计算机几乎永远无法完成。这些类型的好处倾向于提高机器学习和人工智能的性能，这些需要大量数据进行处理或分析复杂的数据集。可以看出，量子是加速计算的非常有吸引力的替代方案，可以为预测性分析问题提供令人难以置信的结果。想象一下，在分析疾病原因或在智能城市、交通系统、灯光、计量器、公用事业、建筑等多个领域和用例中进行最大化优化时，量子所带来的价值。量子允许这些同时进行计算，并且仍然保持彼此之间的关系（称为纠缠）。传统计算机需要逐个分析每个计算，最终限制了可扩展性。
- en: 8.1 Datasets
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.1 数据集
- en: With enormous processing speed potential, quantum computing allows for quicker
    analysis and better integration of distributed large datasets of information.
    This is accomplished using extensive search and determinations of the patterns
    that exist in data that otherwise could not be accomplished to have an impact
    on business applications. Furthermore, quantum computers expand the potential
    to examine large databases that could be distributed across multiple network and
    machine platforms. Finally, datasets , databases , and other data structures can
    all be investigated to render correlations that provide valuable probabilities.
    As quantum evolves it can dramatically alter hardware architectures, accelerate
    the proliferation of IoT devices that may indeed result in changing the way companies
    use their data for competitive advantage.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 由于巨大的处理速度潜力，量子计算使得更快的分析和更好地集成分布式大型数据集成为可能。这是通过对数据中存在的模式进行广泛搜索和确定来实现的，而这些模式否则无法对商业应用产生影响。此外，量子计算机扩展了检查可能分布在多个网络和机器平台上的大型数据库的潜力。最后，可以调查数据集、数据库和其他数据结构，以提供有价值的概率相关性。随着量子的发展，它可以显著改变硬件架构，加速物联网设备的普及，这可能确实会改变公司利用其数据获取竞争优势的方式。
- en: 8.2 IoT and Quantum
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.2 物联网和量子
- en: Economist’s Business Insider Intelligence (2018) has forecasted that by 2023
    consumers , companies, and governments will install 40 billion IoT devices globally.
    The result of these installations will generate massive data on a daily basis.
    The challenge for any analyst will be to understand how to approach the processing
    of this data to ultimately generate useful information and knowledge. I have already
    established the importance of IoT security. Think further of this importance as
    these IoT devices begin to generate what will likely be very sensitive information.
    Therefore, for IoT to reach its potential the confidentiality of consumer data
    must be protected and even guaranteed. Another interesting advantage of a quantum
    machine is its potential to generate secured systems using cryptography from quantum
    fed algorithms that require very large machines. These machines, as I have previously
    mentioned are typically not available to hackers. In theory, however, quantum
    cryptography should be able to generate keys that are totally random, unique,
    and incapable of being replicated. And with the speed of quantum calculations,
    a unique long key can be generated per transaction.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 经济学家商业内幕情报（2018年）预测，到2023年，全球消费者、企业和政府将安装400亿个物联网设备。这些设备的安装结果将每天产生海量数据。任何分析师面临的挑战将是理解如何处理这些数据，最终生成有用的信息和知识。我已经确定了物联网安全的重要性。进一步考虑到这一重要性，因为这些物联网设备开始生成可能是非常敏感的信息。因此，为了使物联网发挥其潜力，消费者数据的机密性必须得到保护，甚至得到保证。量子计算机的另一个有趣的优势是其利用量子供给算法生成安全系统的潜力，这些系统需要非常大的机器。然而，正如我之前提到的，这些机器通常不会被黑客使用。然而在理论上，量子密码学应该能够生成完全随机、唯一且无法复制的密钥。并且通过量子计算的速度，可以为每次交易生成一个唯一的长密钥。
- en: 8.3 AI, ML and Predictive Analytics
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.3 人工智能、机器学习和预测性分析
- en: Having established that quantum’s role is to help crunch massive amounts of
    data, the next challenge is to determine how to collect the data, store it, and
    what algorithms will be needed to obtain valuable information that can be used
    to make predictions. One must accept the fact that the voluminous data certainly
    is beyond the human capacity to derive meaningful predictive data, not to mention
    how long it might take to even if an individual could process the data!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定量子的作用是帮助处理大量数据后，下一个挑战是确定如何收集数据、存储数据以及需要哪些算法来获取有价值的信息，这些信息可以用来进行预测。人们必须接受一个事实，即庞大的数据肯定超出了人类得出有意义的预测数据的能力，更不用说如果一个人能够处理这些数据会花费多长时间了！
- en: In the past, obtaining data and analyzing it to make predictions required trained
    personnel in areas such as mathematics, statistics, and computer science. However,
    today there are now advanced APIs that can be obtained that can allow non-technical
    people to get results. So, again the analyst needs to start thinking of the data
    especially identifying what that data does and where it should reside!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，获取数据并分析数据以进行预测需要在数学、统计学和计算机科学等领域接受过培训的人员。然而，今天现在有了一些先进的API，可以让非技术人员获得结果。因此，分析师需要再次开始思考数据，特别是确定数据的功能以及它应该存放在哪里！
- en: 'The strategy relating to predictive analytics is quickly becoming more focused
    on the ML component of AI. The reason for this development is simple: most organizations
    likely do not know or understand the data they possess. Yes, they might know the
    business elements they store, but ML provides a whole new opportunity. For example,
    most business environments are broken down into functional units or divisions.
    Individuals that operate within these divisions are often siloed in such a way
    that they know their own data, but little about the data in other divisions that
    contain important related data that can provide value not only for their division,
    but the business overall. Thus, they do not know what to search for, because they
    know little of the opportunity. Furthermore, there is massive information that
    tends not to get stored in a way that allows for easy understanding of value.
    Transaction data updates databases which in turn is used to gather the information
    for reporting and analysis. This is particularly true for different types of transactional
    data that comes from consumers as well as data that results from their behaviors.
    Anyone who has spent time on Amazon or other consumer sites has experienced the
    application offering the consumer other opportunities based on their search behavior
    on the retail website. These behaviors are stored in the form of transactions
    and then fed into datasets that can be analyzed by machine-driven algorithms.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与预测分析相关的策略迅速更加关注于人工智能的机器学习组件。这一发展的原因很简单：大多数组织可能不了解或理解他们所拥有的数据。是的，他们可能知道他们存储的业务元素，但机器学习提供了一个全新的机会。例如，大多数业务环境被分解成功能单元或部门。在这些部门中运作的个人往往以一种使他们了解自己的数据，但很少了解其他部门的数据的方式，而这些数据包含了不仅对他们的部门，而且对整个业务都有价值的相关数据。因此，他们不知道要搜索什么，因为他们对机会知之甚少。此外，有大量的信息通常不以便于理解价值的方式存储。交易数据更新数据库，然后用于收集报告和分析的信息。对于来自消费者以及由其行为产生的各种类型的交易数据来说，这一点尤其正确。在亚马逊或其他消费者网站上花费过时间的任何人都曾经历过根据其在零售网站上的搜索行为提供其他机会的应用程序。这些行为以交易的形式存储，然后被馈送到机器驱动的算法可以分析的数据集中。
- en: 'With any new software opportunities comes dangers, and such is true with ML.
    Below are some of the setbacks that can occur:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 随着任何新软件机会的到来，都伴随着危险，机器学习也不例外。以下是可能发生的一些挫折：
- en: '1.'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: Lack of transactions or examples that can render dependable and generalizable
    results to draw conclusions.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 缺乏能够产生可靠和可概括结果以得出结论的交易或示例。
- en: '2.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: Similar inputs can sometimes render different outputs. To have effective predictions
    there must be a clear relationship between inputs and outputs.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 相似的输入有时可能产生不同的输出。要进行有效的预测，输入和输出之间必须有清晰的关系。
- en: '3.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: Mistakes in categorization of data is a killer. We have all seen the problems
    when a data element is not defined appropriately.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据分类错误是致命的。当数据元素未适当定义时，我们都看到了问题。
- en: '4.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: Incorrect or inappropriate example used. These are cases where certain factors
    are not considered. We see this occur when certain factors affect consumer habits
    that were not considered in the use case .
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用不正确或不合适的示例。这些是某些因素未被考虑的情况。我们看到这种情况发生在某些因素影响了未在用例中考虑的消费者习惯时。
- en: '5.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '5.'
- en: Challenge of tagging data and then classifying all of its relationships.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对数据进行标记然后对其所有关系进行分类的挑战。
- en: '6.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '6.'
- en: Implementing Natural language Processing where inputs are purely textual and
    outputs are often categorical. This challenge is how to take textual input and
    determine an output value such as positive or negative.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实施自然语言处理，其中输入纯粹是文本，输出通常是分类的。这个挑战在于如何获取文本输入并确定诸如正面或负面之类的输出值。
- en: 'There are two types of ML algorithms:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的机器学习算法：
- en: '1.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: 'Training: learning a model from examples. This algorithm is also known as a
    learning algorithm because it examines sets of inputs and outputs and crates a
    new model based on the datasets.'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 训练：从示例中学习模型。这个算法也被称为学习算法，因为它检查了一系列的输入和输出，并基于数据集创建了一个新模型。
- en: '2.Prediction: takes an existing model with a new input and returns an output
    value as shown in Fig. [8.1](#Fig1).![../images/480347_1_En_8_Chapter/480347_1_En_8_Fig1_HTML.png](../images/480347_1_En_8_Chapter/480347_1_En_8_Fig1_HTML.png)'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2.预测：使用新输入的现有模型并返回一个输出值，如图 [8.1](#Fig1)所示。![../images/480347_1_En_8_Chapter/480347_1_En_8_Fig1_HTML.png](../images/480347_1_En_8_Chapter/480347_1_En_8_Fig1_HTML.png)
- en: Fig. 8.1
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.1
- en: Example of training to prediction algorithms
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 训练到预测算法的示例
- en: What occurs in Fig. [8.1](#Fig1) is a simple way of predicting a value that
    might be missing from a dataset. This can often occur from converted data from
    a legacy or earlier version of application data. By examining the new application
    data ML and establish a model that might predict what that missing element would
    have been in the old system as shown in Fig. [8.2](#Fig2).![../images/480347_1_En_8_Chapter/480347_1_En_8_Fig2_HTML.png](../images/480347_1_En_8_Chapter/480347_1_En_8_Fig2_HTML.png)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在图 [8.1](#Fig1) 中发生的是一种简单的方法，用于预测可能在数据集中缺失的值。这通常会发生在从旧版或早期版本的应用数据转换而来的数据中。通过检查新的应用数据ML并建立一个模型，可能可以预测旧系统中缺失元素将是什么，如图 [8.2](#Fig2) 所示。![../images/480347_1_En_8_Chapter/480347_1_En_8_Fig2_HTML.png](../images/480347_1_En_8_Chapter/480347_1_En_8_Fig2_HTML.png)
- en: Fig. 8.2
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2
- en: Updating legacy data element using ML training and prediction algorithms
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ML训练和预测算法更新旧版数据元素
- en: Figure [8.2](#Fig2) shows that the legacy system did not store or capture a
    student’s graduation rate. In the new or replacement system, a data element was
    added to capture the student’s graduation rate. When the legacy records are converted
    ML could use a training algorithm to review the relationship between GPA Score
    and Graduation Rate to see if there is a correlation among the records in the
    new system. Should that correlation have predictability and the dataset in the
    new system is large enough, then the prediction algorithm could derive a graduation
    rate from the student’s GPA Score in the old system and calculate a Graduation
    Rate. We can see from this example that training algorithm can indirectly be used
    to create the prediction module in a sequence. The size of the dataset that would
    likely be deemed appropriate based on forms of statistics theory.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 [8.2](#Fig2) 显示，传统系统没有存储或捕获学生的毕业率。在新的或替代系统中，添加了一个数据元素来捕获学生的毕业率。当传统记录转换时，ML可以使用训练算法来审查GPA分数和毕业率之间的关系，看看新系统中的记录是否存在相关性。如果该相关性具有可预测性，并且新系统中的数据集足够大，则预测算法可以从旧系统中的学生GPA分数推导出毕业率并计算毕业率。我们可以从这个例子中看出，训练算法可以间接地用于按顺序创建预测模块。基于统计理论形式的数据集大小可能会被认为是适当的。
- en: 8.4 ML in a Service Environment
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.4 服务环境中的ML
- en: 'ML can be designed as a service in the cloud . In this design an ML program
    and datasets can be stored on a separate and powerful server (preferably a quantum
    processor!) that could provide the necessary performance needed to deliver results
    quickly. This type of network architecture can be developed using three types
    of ML APIs according to Dorard ([2014](#CR1)) as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: ML可以被设计为云中的服务。在这种设计中，一个ML程序和数据集可以存储在一个单独而强大的服务器上（最好是量子处理器！），该服务器可以提供快速交付结果所需的性能。根据Dorard（[2014](#CR1)）的说法，这种类型的网络架构可以使用三种类型的ML
    API来开发，如下所示：
- en: '1.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: '*Specialized Prediction*: these APIs do very specific tasks like determining
    the speaking language embedded in a text. Specialized prediction APIs may often
    be available from third party libraries. Because these APIs specific but common
    they tend to be easier to implement.'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*专用预测器*：这些API执行非常具体的任务，比如确定嵌入在文本中的说话语言。专用预测器API通常可以从第三方库中获得。由于这些API具体但常见，它们往往更容易实现。'
- en: '2.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: '*Generic* *Predictor* : this API represents the training to predictor algorithm
    example shown in Fig. [8.2](#Fig2). So, there are two algorithms needed in the
    generic predictor , one to create a training model based on previous data and
    one that utilizes the training model to deal with new input. Generic predictor
    APIs are particularly effective for regression problems (algorithms that predict
    a real value).'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*通用预测器*：这个API代表了图 [8.2](#Fig2) 中显示的训练到预测算法示例。因此，在通用预测器中需要两个算法，一个是基于先前数据创建训练模型的算法，另一个是利用训练模型处理新输入的算法。通用预测器API对于回归问题（预测实值的算法）特别有效。'
- en: '3.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: '*Algorithm APIs*: these APIs, while similar to Generic Predictors are much
    more focused on a specific problem, so the parameter must be very specific. Indeed,
    think of algorithm APIs are specialty problem solvers. Should a specialize algorithm
    API not be available, then a generic API can be used by adding training data.'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*算法API*：这些API虽然类似于通用预测器，但更专注于特定的问题，因此参数必须非常具体。确实，将算法API视为专业问题解决者。如果没有专用算法API可用，则可以通过添加训练数据来使用通用API。'
- en: 8.5 Analysis ML Use Cases
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.5 分析ML用例
- en: 'An analyst can participate in ML design by providing types of use cases for
    developers. Dorard ([2014](#CR1)) provides a format to follow:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 分析师可以通过提供开发者的用例类型参与机器学习设计。Dorard ([2014](#CR1))提供了一个可供参考的格式：
- en: 'WHO: who does the example concern?'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WHO：示例涉及谁？
- en: 'DESCRIPTION: what is the context, and what are we trying to do?'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：上下文是什么，我们想做什么？
- en: 'QUESTIONS ASKED: how would you write the questions that the predictive model
    should give answers to in plain English?'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提出的问题：我们应该如何用普通英语写出预测模型应该回答的问题？
- en: 'TYPE OF ML PROBLEM: classification or regression?'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习问题类型：分类还是回归？
- en: 'INPUT: what are we doing predictions on?'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入：我们正在预测什么？
- en: 'FEATURES: which aspects of the inputs are we considering, and what kind of
    information do we have in their representation?'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特征：我们考虑输入的哪些方面，以及它们的表示中包含哪些信息？
- en: 'OUTPUT: what does the predictive model return?'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出：预测模型返回什么？
- en: 'DATA COLLECTION: how are example input-output pairs obtained to train the predictive
    model?'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据收集：如何获取示例输入输出对以训练预测模型？
- en: 'HOW PREDICTIONS ARE USED: when are predictions being made, and what do we do
    once we have them?'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预测如何使用：何时进行预测，并且一旦得到预测结果，我们该怎么做？
- en: As one can see the analysts provides a guideline of questions to be answered
    as opposed to the answers to these questions. Clearly ML design then requires
    subject matter experts to answer these questions, or a consumer /user community
    that can define certainly the output needs.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们可以看到的，分析师提供了一系列问题的指导，以便回答这些问题，而不是这些问题的答案。显然，机器学习设计需要专业领域的专家来回答这些问题，或者一个可以明确定义输出需求的消费者/用户社区。
- en: 'Below and using Dorard’s Pricing Optimization example shows the use case with
    actual answers to the questions:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下面使用Dorard的价格优化示例展示了实际问题的用例及其答案：
- en: 'WHO: Shops, stores, and sellers.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WHO：商店、店铺和卖家。
- en: 'DESCRIPTION: We are introducing a new product within existing category of products
    that are already being sold, and we want to predict how we should price this new
    product; the product could be, for example, a bottle of wine in a wine shop. Or
    a new house for sales.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：我们正在引入一种新产品，该产品属于已经在销售的现有产品类别，我们想预测如何定价这种新产品；例如，产品可以是葡萄酒店里的一瓶葡萄酒。或者是待售的新房子。
- en: 'QUESTIONS ASKED: “What should be the price of this new product in this given
    (and fixed) category?”'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提出的问题：“在这个给定的（固定的）类别中，这种新产品的价格应该是多少？”
- en: 'TYPE OF ML PROBLEM: Regression.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习问题类型：回归。
- en: 'INPUT: Product.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入：产品。
- en: 'FEATURES: Information about the product, specific to its category. In the wine
    bottle example, this could be the region or origin, the type of grapes, or the
    rating from a wine magazine. In the house example, this can be the number of bedrooms,
    bathrooms, the surface, the year it was built, or the type of house. We can also
    include a text description, and, when relevant, the cost to manufacture the product
    and the number of sales (total or per period of time).'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特征：关于产品的信息，特定于其类别。在葡萄酒瓶的例子中，这可以是产地、葡萄类型或葡萄酒杂志的评级。在房屋的例子中，这可以是卧室数量、浴室数量、面积、建造年份或房屋类型。我们还可以包括文本描述，以及适用时的产品制造成本和销售数量（总数或每个时间段）。
- en: 'OUTPUT: Price.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出：价格。
- en: 'DATA COLLECTION: Every time a product of the same category was sold, we log
    the price at which it went. Note that the same product might be sold several times
    (or not) and at the same or different prices, which affect the number of training
    data points.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据收集：每当同一类产品售出时，我们记录其销售价格。请注意，同一产品可能被售出多次（或者没有），且价格可能相同也可能不同，这会影响训练数据点的数量。
- en: 'HOW PREDICTIONS ARE USED: We set the price of the product to the value given
    the predictive model (no need to add a margin, this is already incorporated by
    the nature of the training data). Note that if the number of sales is one of the
    features, we need to do a manual estimation of this for the new product before
    we can make a prediction on it. Besides, since prices are likely to change over
    time, it is important to frequently update the predictive model with new data.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预测如何使用：我们将产品的价格设置为预测模型给出的值（无需添加利润率，这已经由训练数据的性质所包含）。请注意，如果销售数量是特征之一，我们需要对新产品的销售数量进行手动估计，然后才能对其进行预测。此外，由于价格可能随时间变化，因此经常使用新数据更新预测模型非常重要。
- en: 8.6 Data Preparation
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.6 数据准备
- en: 'One can see that the most important aspect of ML is the quality of the data.
    To no one’s surprise it’s also the most challenging problem to solve in business.
    Many traditional companies likely have proliferations of data across multiple
    systems from the start of business computing in the early 1960s. Notwithstanding
    what companies have compiled in central systems, the amount of local data stored
    across local area network systems from the 1980s is significant. There is also
    a plethora of databases stored on PCs from desktop products like Excel, Foxpro,
    and Access to name just a few. In addition, there is rich data that is stored
    in text-based files. While the challenge seems overwhelming, progress has been
    made with the development of sophisticated natural language products that can
    specifically extract useful data from unformatted data. My point; however, is
    that analysts need to shift their focus more on analysis of data than on process
    . With the proliferation of IoT the issue of cleansing data for ML is more important
    than process analysis. Do not misunderstand my point. I am not advocating that
    process analysis is no longer necessary or important, rather that data quality
    need more attention than before. So, from an analyst perspective the data process
    should focus on the following steps:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 人们可以看到，机器学习最重要的方面是数据的质量。毫无疑问，这也是业务中最具挑战性的问题。许多传统公司很可能从20世纪60年代初开始的业务计算中就在多个系统中广泛使用数据。尽管公司在中央系统中编制了什么，但从20世纪80年代起，存储在局域网系统中的本地数据量也是相当可观的。此外，还有大量存储在个人计算机上的数据库，从诸如Excel、Foxpro和Access等桌面产品中提取数据。另外，还有存储在基于文本的文件中的丰富数据。虽然挑战看似令人望而生畏，但随着先进的自然语言产品的发展，已经取得了进展，可以从未格式化的数据中专门提取有用数据。然而，我的观点是，分析师需要更多地将注意力放在数据分析上，而不是流程上。随着物联网的普及，为机器学习清洗数据的问题比流程分析更重要。不要误解我的观点。我并不是在主张流程分析不再必要或重要，而是数据质量比以往更需要关注。因此，从分析师的角度来看，数据处理应该专注于以下几个步骤：
- en: '1.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: Locate where data resides across the enterprise.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定位企业中数据的存放位置。
- en: '2.'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: Understand the differing formats of the datasets and/or type of files systems
    where the data is stored.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 了解数据集的不同格式和/或存储数据的文件系统类型。
- en: '3.'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: Determine the meaning of each data element that comprises a file record.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确定构成文件记录的每个数据元素的含义。
- en: '4.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: Identify text-based files and see if natural language processes can aid in defining
    the data need by ML algorithms.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确定基于文本的文件，并查看自然语言处理是否能够帮助定义机器学习算法的数据需求。
- en: '5.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '5.'
- en: Extract the data elements that are needed for ML from various datasets .
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从各种数据集中提取机器学习所需的数据元素。
- en: '6.'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '6.'
- en: Do a quality review based on the results of test runs on the extracted data.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据对提取数据进行的测试运行结果进行质量审核。
- en: '7.'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '7.'
- en: Automate the extract programs and implement an ML API.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自动化提取程序并实施ML API。
- en: Another aspect of data extract is to decide whether to place the data in a central
    repository cloud system. This objective always sounds doable on paper, but turns
    out to be an overwhelming task and often fails to achieve its objectives for a
    number of reasons. So, for now the all-powerful central database will be left
    for discussion in later chapters. The argument to merge everything has far more
    benefits and disadvantages beyond creating ML solutions.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 数据提取的另一个方面是决定是否将数据放入中央存储库云系统中。这个目标在纸上总是听起来可行，但实际上却是一项令人望而生畏的任务，通常由于多种原因而未能实现其目标。因此，就目前而言，强大的中央数据库将留待以后章节讨论。将一切合并的论点在创建机器学习解决方案之外还有更多的利弊。
- en: 8.7 Cloud
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.7 云
- en: With the advent of 5G , IoT, blockchain , and potentially quantum , the cloud
    is assured to a critical part of the quest to obtain better speed, centralization,
    and security in a digital world. The challenge is how best to design the cloud
    architecture, that is, whether to have a private or public cloud or some combination.
    Further, once the infrastructure is designed there needs to be a determination
    of how applications and datasets are deployed. Obviously, there would be great
    advantage to have the cloud resident on a quantum computer to support ML and AI
    processing and improved cryptology.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 随着5G、物联网、区块链以及可能的量子技术的出现，云计算在数字世界中获得更好的速度、集中性和安全性将成为必不可少的一部分。挑战在于如何最佳地设计云架构，即是选择私有云、公有云还是某种组合。此外，一旦基础架构设计好了，就需要确定应用程序和数据集的部署方式。显然，将云驻留在量子计算机上以支持机器学习和人工智能处理以及改进的密码学将带来巨大的优势。
- en: There is no question that cloud is a sophisticated service-oriented architecture.
    While many analysts and designers understand the concept of cloud , many do not
    know how to maximize the configuration. Specifically, cloud should not be designed
    as a client/server hierarchical and closely coupled system. Cloud must be distributed,
    especially to support the new requirements of IoT. Therefore, cloud architecture
    must parallel IoT needs and provide independent applications in the form of functional
    primitives which will perform services independent of any given system. Figure [8.3](#Fig3)
    depicts the difference between a client/server design and a cloud distributed
    model.![../images/480347_1_En_8_Chapter/480347_1_En_8_Fig3_HTML.png](../images/480347_1_En_8_Chapter/480347_1_En_8_Fig3_HTML.png)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，云是一个复杂的面向服务的体系结构。虽然许多分析师和设计师理解云的概念，但很多人不知道如何最大化配置。具体来说，云不应设计为客户端/服务器的分层和紧密耦合系统。云必须是分布式的，特别是要支持物联网的新需求。因此，云架构必须与物联网的需求并行，并以功能原语的形式提供独立的应用程序，这些应用程序将独立于任何给定系统执行服务。图[8.3](#Fig3)展示了客户端/服务器设计与云分布式模型之间的差异。![../images/480347_1_En_8_Chapter/480347_1_En_8_Fig3_HTML.png](../images/480347_1_En_8_Chapter/480347_1_En_8_Fig3_HTML.png)
- en: Fig. 8.3
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 第8.3图
- en: Comparison of client/server and cloud architectures
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端/服务器与云架构的比较
- en: The process of transforming existing systems to a cloud environment will be
    discussed in Chap. [10](480347_1_En_10_Chapter.xhtml); however, a preview of this
    issue is provided here for better context. The first step in the transformation
    from legacy to cloud migration is to “decouple:” the data from the legacy application
    system. Applications that own their own data will not work well in a private or
    public cloud system. Once this separation is completed, analysts need to determine
    where to place applications and data on the network cloud systems. It is easier
    to replicate applications in multiple places across the network but more complicated
    with data. Have both distributed may have significant performance advantages particularly
    when it is time to determine how much data should reside on devices on the Edge.
    Obviously, distribution of datasets will be very fundamental for a blockchain
    architecture than for a more traditional client/server layout. Another issue will
    data distribution often relates to sensitivity and policy decisions. Many companies
    may be sensitive to having their data reside on a public cloud for instance. In
    most cases performance is the significant decision maker which is still affected
    by the number of read and write functions to and from databases that programs
    will perform during processing. Although many developers can use caching systems
    to improve performance, at some hardware latency will influence design decisions.
    Of course, having a quantum computer may greatly assist the latency issues depending
    on the type of processing being performed on the server. Overall, the mission
    for the analyst is to minimize input/output requests of all application programs.
    Always remember that the slowest operation on a computer remains the communication
    interaction among hardware devices. This design methodology is often known as
    designing for performance. In fact, studies have shown that overloading application
    server input output functions can deplete performance by over 80%! To address
    the latency potential, analyst should configure monitoring tools that can be used
    to alter load balances during peak processing.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 将现有系统转换为云环境的过程将在第10章中讨论；然而，这里提供了这个问题的预览以获得更好的上下文。从传统到云迁移的转变的第一步是“解耦：”将数据与传统应用系统分离。拥有自己数据的应用程序在私有或公共云系统中效果不佳。一旦完成了这种分离，分析人员需要确定在网络云系统中放置应用程序和数据的位置。在网络中的多个位置复制应用程序更容易，但对数据而言更为复杂。在确定多少数据应该驻留在边缘设备上时，同时分布可能会带来显著的性能优势。显然，数据集的分布对于区块链架构而言将是非常基础的，而对于更传统的客户/服务器布局而言则不然。数据分布通常也涉及敏感性和政策决策。许多公司可能对其数据驻留在公共云上非常敏感。在大多数情况下，性能是最重要的决策因素，它仍然受程序在处理过程中执行的读取和写入数据库的数量的影响。尽管许多开发人员可以使用缓存系统来提高性能，但在某些硬件上，延迟将影响设计决策。当然，拥有量子计算机可能会极大地帮助解决延迟问题，具体取决于服务器上正在执行的处理类型。总的来说，分析师的任务是尽量减少所有应用程序的输入/输出请求。永远记住，计算机上最慢的操作仍然是硬件设备之间的通信交互。这种设计方法通常被称为性能设计。事实上，研究表明，过载应用服务器输入输出功能可能会使性能下降超过80％！为了解决延迟的潜在问题，分析人员应配置监视工具，在高峰处理期间可以用于修改负载平衡。
- en: Certainly, another variable in performance decisions is the role of security
    protection and its role in cloud analysis and design . I have already established
    that the world is moving to mobility , and cloud is a key part of a successful
    wireless infrastructure. However, we know with more mobility there is higher cyber
    exposure. Therefore, cloud applications should make use of “identity and access
    management.” Completing design with security in mind is critical to secure systems
    and is often very dependent on industry risk protocols such as healthcare’s “Health
    Insurance Portability and Accounting Act” or HIPAA compliance.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，性能决策中的另一个变量是安全保护的作用以及其在云分析和设计中的作用。我已经确定世界正在向移动性发展，云是成功无线基础设施的关键部分。然而，我们知道随着移动性增加，网络暴露风险也会增加。因此，云应用程序应该利用“身份和访问管理”。在设计过程中充分考虑安全性对于保护系统至关重要，并且往往非常依赖于行业风险协议，如医疗保健行业的“医疗保险可携带性和会计法案”或HIPAA合规性。
- en: 8.8 Cloud Architectures
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.8 云架构
- en: 'Part of a successful mobile infrastructure is designing the right cloud architecture
    which depends on the business needs, the technology service requirements, and
    the available technological capabilities like quantum . As you can imagine depending
    on these variables, there are different cloud models. According to some of the
    excerpts from Architecting Cloud Computing Solutions there are three models to
    consider: baseline, complex, and hybrid.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的移动基础架构的一部分是设计正确的云架构，这取决于业务需求、技术服务要求和可用的技术能力，如量子技术。正如您可以想象的那样，根据这些变量，有不同的云模型。根据《构建云计算解决方案》中的一些摘录，有三种要考虑的模型：基线、复杂和混合。
- en: '*Baseline*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*基线*'
- en: 'Baseline cloud computing is considered a foundational start as a beginner’s
    cloud architecture. Baseline is a tiered and layered architecture with most having
    three basic tiers: web server, application layer, and database layer. Every tier
    has some amount if data storage that can vary based on the design requirements.
    Most cloud designs have some aspects of three tiers a shown in Fig. [8.4](#Fig4).![../images/480347_1_En_8_Chapter/480347_1_En_8_Fig4_HTML.png](../images/480347_1_En_8_Chapter/480347_1_En_8_Fig4_HTML.png)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 基线云计算被视为初学者云架构的基础起点。基线是一个分层架构，大多数都有三个基本层次：Web 服务器、应用程序层和数据库层。每个层次都有一定数量的数据存储，根据设计要求可以变化。大多数云设计都具有三层架构的某些方面，如图 [8.4](#Fig4)
    所示。![../images/480347_1_En_8_Chapter/480347_1_En_8_Fig4_HTML.png](../images/480347_1_En_8_Chapter/480347_1_En_8_Fig4_HTML.png)
- en: Fig. 8.4
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4
- en: Three tier baseline cloud architecture
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 三层基线云架构
- en: 'Within the baseline architecture there are various configurations:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在基线架构中有各种配置：
- en: '*Single Server*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*单服务器*'
- en: This design is hosted by a single server which could be virtual or physical
    and contains the three layers described above. This architecture is not recommended
    due of its security risks because one layer can compromise another. Because this
    design is inadequate for mobile deployments, it is usually limited to work as
    an internal development machine.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此设计由单个服务器托管，可以是虚拟的或物理的，并包含上述三个层次。由于一个层次可能会 compromise 另一个层次，因此不建议使用此架构，因为存在安全风险。由于此设计不适用于移动部署，通常限制为作为内部开发机器使用。
- en: '*Single Site*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*单站点*'
- en: 'This architecture has the same design as a single server except that each layer
    has its own computer instance and thus improves security, although all resources
    are still located on the same computer. There are two types of single-site architectures:
    non-redundant and redundant. Non-redundant architectures are essentially designed
    to save costs and resources but suffer from “single point of failure.” Once again,
    while this option has multiple instances it is not recommended for production.
    Figure [8.5](#Fig5) reflects this design.![../images/480347_1_En_8_Chapter/480347_1_En_8_Fig5_HTML.png](../images/480347_1_En_8_Chapter/480347_1_En_8_Fig5_HTML.png)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此架构与单服务器具有相同的设计，只是每个层都有自己的计算机实例，从而提高了安全性，尽管所有资源仍位于同一台计算机上。单站点架构有两种类型：非冗余和冗余。非冗余架构基本上是为了节省成本和资源，但会遭受“单点故障”的影响。再次强调，虽然此选项有多个实例，但不建议用于生产。图 [8.5](#Fig5)
    反映了此设计。![../images/480347_1_En_8_Chapter/480347_1_En_8_Fig5_HTML.png](../images/480347_1_En_8_Chapter/480347_1_En_8_Fig5_HTML.png)
- en: Fig. 8.5
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5
- en: Non-redundant three-tier architecture
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 非冗余三层架构
- en: Redundant architecture on the other hand provides backup for failover and recovery
    protection. Thus, redundant design offers duplicate components that eliminate
    the single point of failure as shown in Fig. [8.6](#Fig6).![../images/480347_1_En_8_Chapter/480347_1_En_8_Fig6_HTML.png](../images/480347_1_En_8_Chapter/480347_1_En_8_Fig6_HTML.png)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，冗余架构提供了故障切换和恢复保护的备份。因此，冗余设计提供了消除单点故障的重复组件，如图 [8.6](#Fig6) 所示。![../images/480347_1_En_8_Chapter/480347_1_En_8_Fig6_HTML.png](../images/480347_1_En_8_Chapter/480347_1_En_8_Fig6_HTML.png)
- en: Fig. 8.6
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6
- en: Redundant three-tier architecture
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 冗余三层架构
- en: Obviously, redundant architecture are designed more for production systems because
    there are multiple processing decision capabilities that avoid single point of
    failure.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，冗余架构更多地设计用于生产系统，因为有多个处理决策能力，可以避免单点故障。
- en: '*Complex Cloud Architectures*'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*复杂云架构*'
- en: The complex cloud architecture addresses issues of redundancy, resiliency ,
    and disaster recovery. At the core of complex cloud is the ability to monitor
    and adjust flow of traffic among multiple sites and to alternate balances appropriately
    based on usage. There are various types of complex cloud architectural designs.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂的云架构解决了冗余、弹性和灾难恢复等问题。复杂云的核心是监视和调整流量在多个站点之间的流动，并根据使用情况适当地交替平衡。有各种类型的复杂云架构设计。
- en: 8.8.1 Multi-data Center Architecture
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.8.1 多数据中心架构
- en: 'A data center architecture allows analysts to determine the amount of redundant
    infrastructure needed to support single-site and multi-site designs. The major
    questions for the analyst to answer are:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 数据中心架构允许分析人员确定支持单站点和多站点设计所需的冗余基础设施量。分析人员要回答的主要问题是：
- en: How is traffic sent to one location or the other?
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将流量发送到一个位置或另一个位置？
- en: Is one site active and the other backup or are both active?
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个站点是活动的，另一个是备份的，还是两者都是活动的？
- en: How does fail-back to the primary site handled should a failure occur?
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果发生故障，如何处理故障返回主站点？
- en: What changes in resiliency plans are necessary?
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何种弹性计划变更是必要的？
- en: How is data synchronization handled before and after failover?
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障转移前后如何处理数据同步？
- en: 8.8.2 Global Server Load Balancing (GSLB)
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.8.2 全球服务器负载平衡（GSLB）
- en: This architecture allows for the manipulation of DNS (Domain Name Server) information.
    The DNS is the internet’s version of a phonebook or address of the machine. Global
    server load balancing or GSLB enables pre-planned actions to occur in the event
    of a failure. While this design is effective, it is expensive and typically requires
    human interface. It is usually offered as a public cloud option for a fee. Figure [8.7](#Fig7)
    shows the GSLB configuration.![../images/480347_1_En_8_Chapter/480347_1_En_8_Fig7_HTML.png](../images/480347_1_En_8_Chapter/480347_1_En_8_Fig7_HTML.png)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此架构允许操纵 DNS（域名服务器）信息。DNS 是互联网的电话簿或机器地址的版本。全球服务器负载平衡或 GSLB 使预先计划的操作在发生故障时发生。虽然这种设计有效，但昂贵且通常需要人为干预。通常作为收费的公共云选项提供。图 [8.7](#Fig7)
    显示了 GSLB 配置。![../images/480347_1_En_8_Chapter/480347_1_En_8_Fig7_HTML.png](../images/480347_1_En_8_Chapter/480347_1_En_8_Fig7_HTML.png)
- en: Fig. 8.7
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7
- en: GSLB architecture
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: GSLB 架构
- en: 8.8.3 Database Resiliency
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.8.3 数据库弹性
- en: This design offers what is called active-to-active database configuration with
    a bi-directional replication capability. This helps keep data synchronized on
    both database servers. While this design adds more complexity it also provides
    greater levels of redundancy and resiliency . Figure [8.8](#Fig8) shows the design.![../images/480347_1_En_8_Chapter/480347_1_En_8_Fig8_HTML.png](../images/480347_1_En_8_Chapter/480347_1_En_8_Fig8_HTML.png)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此设计提供了所谓的具有双向复制能力的主动到主动数据库配置。这有助于保持两个数据库服务器上的数据同步。虽然这种设计增加了更多的复杂性，但也提供了更高水平的冗余和弹性。图 [8.8](#Fig8)
    显示了该设计。![../images/480347_1_En_8_Chapter/480347_1_En_8_Fig8_HTML.png](../images/480347_1_En_8_Chapter/480347_1_En_8_Fig8_HTML.png)
- en: Fig. 8.8
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8
- en: Database resiliency architecture
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库弹性架构
- en: Another option on databases its to add caching capabilities which holds data
    in high speed memory. The caching option works on algorithms that bet that certain
    data will be requested again. If that bet works it can significantly speed up
    data access. The idea behind caching is that an application may engage in multiple
    input and output operations for a period of time with the same records. Figure [8.9](#Fig9)
    shows the addition of caching memory.![../images/480347_1_En_8_Chapter/480347_1_En_8_Fig9_HTML.png](../images/480347_1_En_8_Chapter/480347_1_En_8_Fig9_HTML.png)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库的另一个选项是添加缓存功能，它在高速内存中保存数据。缓存选项依靠某些数据将被再次请求的算法。如果该赌注成功，它可以显着加速数据访问。缓存背后的想法是，应用程序可能会在一段时间内使用相同的记录进行多次输入和输出操作。图 [8.9](#Fig9)
    显示了缓存内存的添加。![../images/480347_1_En_8_Chapter/480347_1_En_8_Fig9_HTML.png](../images/480347_1_En_8_Chapter/480347_1_En_8_Fig9_HTML.png)
- en: Fig. 8.9
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9
- en: Caching database cloud design
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存数据库云设计
- en: 8.8.4 Hybrid Cloud Architecture
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.8.4 混合云架构
- en: Hybrid cloud is a solution that combines a private cloud with one or more public
    cloud services. Hybrid cloud provides greater flexibility because you can alter
    workloads among multiple cloud infrastructures. It also allows organizations to
    examine cost alternatives.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 混合云是将私有云与一个或多个公共云服务结合起来的解决方案。混合云提供了更大的灵活性，因为您可以在多个云基础架构之间调整工作负载。它还允许组织考虑成本替代方案。
- en: A hybrid cloud can certainly minimize exposure to a site failure because there
    are multiple failover options. It’s clear in many ways that the hybrid option
    certainly is attractive for the IoT/Blockchain mobile operations because of the
    redundancy and multi-location load balances that it can offer. What is always
    true with sophisticated architectures is the higher costs, although using third
    party operators for competitive choices is part of the decision-making process
    . Beyond cost and failover is flexibility. Hybrid clouds allow owners to have
    that protection in a private cloud while offering the ability to extend onto a
    public cloud for more capacity as needed. The model is depicted in Fig. [8.10](#Fig10).![../images/480347_1_En_8_Chapter/480347_1_En_8_Fig10_HTML.png](../images/480347_1_En_8_Chapter/480347_1_En_8_Fig10_HTML.png)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 混合云当然可以最小化对站点故障的暴露，因为存在多个故障转移选项。从许多方面来看，混合选项确实对物联网/区块链移动操作很有吸引力，因为它可以提供冗余和多地点负载平衡。对于复杂架构来说，总是存在更高的成本，尽管使用第三方运营商提供的竞争性选择是决策过程的一部分。除了成本和故障转移之外，还有灵活性。混合云允许所有者在私有云中享有保护，同时提供根据需要扩展到公共云的能力。该模型如图 [8.10](#Fig10)所示。![../images/480347_1_En_8_Chapter/480347_1_En_8_Fig10_HTML.png](../images/480347_1_En_8_Chapter/480347_1_En_8_Fig10_HTML.png)
- en: Fig. 8.10
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10
- en: Hybrid cloud architecture
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 混合云架构
- en: 8.9 Cloud, Edge, and Fog
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.9 云、边缘和雾
- en: As IoT devices become widespread, organizations will need to store more data
    on devices, also known as the Edge. The edge devices and other network machines
    will need to interface with a more centralized cloud operation which have recently
    been coined Fog computing . The objective is to maximize performance and ensuring
    options for scalability especially during peak demands. Many organizations are
    considering collocating their IT infrastructure with other data centers to conserve
    costs. It is important to note that while Edge and the Cloud represent current
    alternatives, the potential rise of quantum computing certainly offers an attractive
    addition to finding ways to store and analyze the incredible explosion of valuable
    consumer data.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 随着物联网设备的普及，组织将需要在设备上存储更多数据，也称为边缘。边缘设备和其他网络设备将需要与更集中的云操作进行接口，最近被称为雾计算。目标是在高峰需求期间最大化性能并确保可伸缩性选项。许多组织正在考虑与其他数据中心共享IT基础设施以节约成本。需要注意的是，尽管边缘和云代表当前的替代方案，但量子计算的潜在崛起无疑为找到存储和分析大量有价值的消费者数据的方法提供了一种有吸引力的补充。
- en: 8.10 Problems and Exercises
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.10 问题和练习
- en: '1.'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: Define and describe quantum computing.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定义并描述量子计算。
- en: '2.'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: What are the advantages of quantum architecture?
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 量子架构的优势是什么？
- en: '3.'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: How does quantum architecture relate to AI and ML? Be specific.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 量子架构与人工智能和机器学习的关系是什么？请具体说明。
- en: '4.'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: What is the relationship between quantum and hash keys?
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 量子和哈希键之间的关系是什么？
- en: '5.'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '5.'
- en: What is a dataset? Describe the different types of sets.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 什么是数据集？描述不同类型的集合。
- en: '6.'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '6.'
- en: Why is predictive analytics so dependent on AI and ML?
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为什么预测性分析如此依赖AI和机器学习？
- en: '7.'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '7.'
- en: How do APIs increase performance of predictive analytics?
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: API如何提高预测性分析的性能？
- en: '8.'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '8.'
- en: What are some of the disadvantages of ML?
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 机器学习的一些缺点是什么？
- en: '9.'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '9.'
- en: What is Natural Language Processing and its relation to datasets?
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 什么是自然语言处理及其与数据集的关系？
- en: '10.'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '10.'
- en: Define two types of ML algorithms.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定义两种类型的机器学习算法。
- en: '11.'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '11.'
- en: What are the challenges when updating data elements from legacy data?
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在更新来自传统数据的数据元素时会遇到哪些挑战？
- en: '12.'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '12.'
- en: What dilemma does ML create for database normalization?
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 机器学习对数据库规范化产生了什么困境？
- en: '13.'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '13.'
- en: What is Cloud? Why is it so essential for mobile-based architectures?
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 什么是云？为什么它对基于移动的架构如此重要？
- en: '14.'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '14.'
- en: Compare client/server and cloud architectures.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 比较客户端/服务器和云架构。
- en: '15.'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '15.'
- en: Why is hybrid cloud architecture so attractive?
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为什么混合云架构如此吸引人？
- en: '16.'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '16.'
- en: What is Fog?
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 什么是雾计算？
