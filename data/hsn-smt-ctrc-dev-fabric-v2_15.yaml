- en: Chapter 10\. Overview of Other Hyperledger Projects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。其他Hyperledger项目概览
- en: In [Chapter 2](ch02.xhtml#overview_of_hyperledger_projects_and_to), we briefly
    reviewed 16 Hyperledger projects and tools and discussed the design philosophy,
    core components, and architecture of the Hyperledger ecosystem. In this chapter,
    we will continue our journey by delving into some of these projects in more detail.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.xhtml#overview_of_hyperledger_projects_and_to)中，我们简要回顾了16个Hyperledger项目和工具，并讨论了Hyperledger生态系统的设计哲学、核心组件和架构。在本章中，我们将通过更详细地探讨其中一些项目来继续我们的旅程。
- en: 'This chapter will help you achieve the following practical goals:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助您实现以下实际目标：
- en: Building a decentralized identity management system with Hyperledger Aries
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Hyperledger Aries构建去中心化身份管理系统
- en: Running off-chain transaction processing with Hyperledger Avalon
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Hyperledger Avalon进行离线交易处理
- en: Using Hyperledger Besu as an open source Ethereum client to bring public blockchain
    to the enterprise
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Hyperledger Besu作为开源以太坊客户端，将公共区块链引入企业
- en: Building and managing supply chain solutions with Hyperledger Grid
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Hyperledger Grid构建和管理供应链解决方案
- en: Hyperledger Avalon addresses blockchain scalability and privacy challenges through
    trusted off-chain processing. By exploring Hyperledger Besu modular architecture,
    you learned how this open source Ethereum client brings public blockchain to the
    enterprise. As a platform to build supply chain solutions, Hyperledger Grid allows
    developers to choose the best reusable components, frameworks with existing distributed
    ledger platform software, and business-specific applications.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Avalon通过可信的离链处理解决了区块链可扩展性和隐私挑战。通过探索Hyperledger Besu的模块化架构，您了解了这个开源以太坊客户端如何将公共区块链引入企业。作为构建供应链解决方案的平台，Hyperledger
    Grid允许开发人员选择最佳的可重用组件、具有现有分布式分类账平台软件和业务特定应用程序的框架。
- en: Hyperledger Aries
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyperledger Aries
- en: As we discussed in [Chapter 2](ch02.xhtml#overview_of_hyperledger_projects_and_to),
    the *Hyperledger Aries* library is an infrastructure of interoperable tools for
    blockchain-rooted, peer-to-peer interactions. It includes a shared cryptographic
    wallet for blockchain clients, a decentralized identifier (DID) communications
    protocol for allowing off-ledger interactions among those clients, and key management
    technologies. A *shared cryptographic wallet* is a multisignature wallet that
    can be accessible by two or more users. Sending a transaction requires at least
    one “cosigner” of the wallet to be authorized by using their private keys.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第2章](ch02.xhtml#overview_of_hyperledger_projects_and_to)中讨论的，*Hyperledger
    Aries*库是一个面向区块链根源的可互操作工具的基础架构，用于对等互动。它包括一个用于区块链客户端的共享加密钱包，一个允许这些客户端之间进行离线交互的去中心化标识（DID）通信协议，以及关键管理技术。*共享加密钱包*是一个多签名钱包，可以由两个或更多用户访问。发送交易需要至少一个钱包的“共同签署者”使用他们的私钥进行授权。
- en: Aries grew out of work on Hyperledger Indy, which is an active DLT within the
    Hyperledger family. Increasing demand for standalone libraries that could manage
    identities and boost the security of Hyperledger DLTs like Fabric and Sawtooth
    led to the incubation of Hyperledger Ursa and Hyperledger Aries. As covered in
    [Chapter 2](ch02.xhtml#overview_of_hyperledger_projects_and_to), while Ursa is
    focused on boosting security in the Hyperledger network, the Aries library is
    used in conjunction with other Hyperledger DLTs like Fabric or Sawtooth to manage
    their member IDs in its decentralized architecture.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Aries源于对Hyperledger Indy的工作，后者是Hyperledger家族中活跃的分布式账本技术（DLT）。对于能够管理身份并增加Hyperledger
    DLT（如Fabric和Sawtooth）安全性的独立库的需求日益增加，这促成了Hyperledger Ursa和Hyperledger Aries的孵化。如[第2章](ch02.xhtml#overview_of_hyperledger_projects_and_to)所述，虽然Ursa专注于增强Hyperledger网络的安全性，但Aries库与其他Hyperledger
    DLT（如Fabric或Sawtooth）结合使用，以在其分散架构中管理其成员ID。
- en: Aries provides both secure secret management and hardware security functionality
    that utilizes the cryptographic support provided by Ursa. Aries is a blockchain
    interface layer (known as a *resolver*) facilitating interoperability with other
    identity projects and used to create, manage, and transmit digital credentials,
    while Indy provides a resolver implementation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Aries提供了安全的秘密管理和利用Ursa提供的加密支持的硬件安全功能。Aries是一个区块链接口层（称为*resolver*），可促进与其他身份项目的互操作性，并用于创建、管理和传输数字凭据，而Indy提供了一个*resolver*实现。
- en: 'Aries supports these features:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Aries支持以下功能：
- en: A blockchain resolver interface layer for supporting multiple blockchains and
    creating and signing blockchain transactions
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于支持多个区块链并创建和签名区块链交易的区块链*resolver*接口层
- en: A digital wallet for secure data store with vetted credentials
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于安全数据存储的数字钱包，包含经过审查的凭据
- en: An encrypted messaging system for off-ledger communication between clients using
    multiple transport protocols
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于在客户端之间进行离账通信的加密消息系统，使用多种传输协议
- en: An implementation of ZKP W3C verifiable credentials using the ZKP primitives
    found in Ursa
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ursa中的ZKP原语，实现ZKP W3C可验证凭证
- en: An implementation of the decentralized key management system (DKMS) specification
    currently being incubated in Indy
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个正在孵化中的可验证分散式密钥管理系统（DKMS）规范的实施，目前在Indy中进行中
- en: A mechanism to build higher-level protocols and API-like use cases based on
    the secure messaging functionality
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种基于安全消息功能构建更高级协议和类似API的用例的机制
- en: '[Figure 10-1](#components_in_the_hyperledger_aries_arc) shows the components
    in the Hyperledger Aries architecture.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[图10-1](#components_in_the_hyperledger_aries_arc)显示了Hyperledger Aries架构中的组件。'
- en: '![Components in the Hyperledger Aries architecture](Images/HLF_1001.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![Hyperledger Aries架构中的组件](Images/HLF_1001.png)'
- en: Figure 10-1\. Components in the Hyperledger Aries architecture
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10-1\. Hyperledger Aries架构中的组件
- en: By providing a blockchain resolver interface layer, Aries is the agent (client)
    part of a decentralized identity (ledger, DIDs, verifiable credentials). In the
    past, the Indy SDK initiated the decentralized identity. Aries can facilitate
    interoperability among other DID networks, such as Ethereum, Bitcoin, Hyperledger
    Fabric, and Sawtooth. With a pluggable resolver interface architecture, Aries
    provides opportunities for the open source community to build a dynamic set of
    capabilities to interact with a wide variety of use cases related to blockchain-based
    identity. Only minimal information is needed to establish trust, including public
    DIDs, schemas, and credential definitions. This is handled by ZKP in the agent.
    Aries provides a way to communicate data over secure channels between agents.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供一个区块链解析器接口层，Aries是分散身份（账本、DID、可验证凭证）的代理（客户端）部分。过去，Indy SDK发起了分散身份。Aries可以促进与其他DID网络的互操作性，例如Ethereum、Bitcoin、Hyperledger
    Fabric和Sawtooth。通过可插拔的解析器接口架构，Aries为开源社区提供了与基于区块链的身份相关的各种用例进行交互的一系列动态功能的机会。建立信任只需要最少的信息，包括公共DID、模式和凭证定义。这由代理中的ZKP处理。Aries提供了一种在代理之间通过安全通道传输数据的方式。
- en: 'In the current job market, an education background check is one of the critical
    processes used to confirm the education, training, or certification claims of
    candidates and identify any potential discrepancies. Aries can create, transmit,
    and store verifiable digital credentials (such as a college degree) to make this
    verification process more efficient. To demonstrate how Aries works, we will create
    the following two agents:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前的就业市场上，教育背景核查是用于确认候选人的教育、培训或认证声明并识别任何潜在差异的关键流程之一。Aries可以创建、传输和存储可验证的数字凭证（如学位），以使这个验证过程更加高效。为了演示Aries的工作原理，我们将创建以下两个代理：
- en: Alice, who graduated from Faber College
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自费伯学院毕业的爱丽丝
- en: Faber College, which granted Alice’s degree
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 费伯学院，授予爱丽丝的学位
- en: 'Creating these agents requires two steps. First, Alice connects with the college
    and issues a credential about her degree. Second, Faber College will send a proof
    request to verify Alice’s degree. To run this Aries demonstration on the local
    machine, we first need the following installed:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 创建这些代理需要两个步骤。首先，爱丽丝与学院连接并发布关于她学位的凭证。其次，费伯学院将发送一个证明请求来验证爱丽丝的学位。要在本地机器上运行这个Aries演示，我们首先需要安装以下内容：
- en: Docker
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker
- en: Docker Compose
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Compose
- en: Git
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git
- en: To run this demo, we also use a *von-network* instance (a Hyperledger Indy public
    ledger sandbox) running in Docker locally. This instance implements an Indy ledger
    with four nodes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行此演示，我们还使用了一个*von-network*实例（一个在本地Docker中运行的Hyperledger Indy公共账本沙盒）。这个实例实现了一个带有四个节点的Indy账本。
- en: Set Up von-network
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Set Up von-network
- en: 'Let’s start by opening a bash terminal and cloning the *von-network* Git repo:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从打开一个bash终端并克隆*von-network* Git存储库开始：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once we clone the repo, we can start to build VON Network Docker images and
    start our VON Network by using the *./manage* bash script in the *von-network*
    folder. The script simplifies the process of building the images and brings up
    the network.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们克隆了仓库，我们可以开始构建 VON 网络 Docker 镜像，并使用 *von-network* 文件夹中的 *./manage* bash
    脚本启动我们的 VON 网络。该脚本简化了构建镜像和启动网络的过程。
- en: Note
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The VON Network is a portable development-level Indy node network, which is
    part of the Verifiable Organizations Network (VON). The mission of VON is to build
    a network providing trustworthy data for organizations—locally and around the
    globe.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: VON 网络是一个便携式的开发级 Indy 节点网络，是可验证组织网络（VON）的一部分。VON 的使命是为组织提供可信的数据网络，无论是在本地还是全球范围内。
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After the VON Network is up and running, you can view the node pool and ledger
    by visiting [*http://your-machine-ip:9000*](http://your-machine-ip:9000) in your
    browser.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: VON 网络运行起来后，您可以通过在浏览器中访问 [*http://your-machine-ip:9000*](http://your-machine-ip:9000)
    来查看节点池和分类帐。
- en: Run Hyperledger Aries Cloud Agent
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行 Hyperledger Aries Cloud Agent
- en: Next, we will use Hyperledger Aries Cloud Agent Python (ACA-Py) to build and
    deploy two instances of the agents—one for Alice, the other for Faber College.
    ACA-Py is a foundation for building decentralized identity applications and services
    running in nonmobile environments.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用 Hyperledger Aries Cloud Agent Python（ACA-Py）来构建和部署代理的两个实例——一个用于 Alice，另一个用于
    Faber College。ACA-Py 是构建分散式身份应用程序和服务的基础，可在非移动环境中运行。
- en: 'Run this command to clone the ACA-Py repo and navigate to the *demo* folder:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令克隆 ACA-Py 仓库并导航到 *demo* 文件夹：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, start the Faber agent by issuing the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过发出以下命令启动 Faber 代理：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You should see agent terminals for Faber show their public DIDs, and the schema
    and credential definition, and QR invitation code details.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到 Faber 代理终端显示其公共 DID，模式和凭证定义，以及 QR 邀请码详细信息。
- en: 'Open another terminal window and navigate to the *demo* folder. Then issue
    the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 打开另一个终端窗口并导航到 *demo* 文件夹。然后发出以下命令：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This brings up the Alice agent. With both agents starting, Alice is waiting
    for an input invitation from Faber.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动 Alice 代理。当两个代理都启动后，Alice 将等待来自 Faber 的输入邀请。
- en: Copy the Faber invitation JSON data from the Faber terminal and paste it at
    the Alice prompt. The agents will connect and then show a menu of options.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Faber 终端复制 Faber 邀请 JSON 数据，然后粘贴到 Alice 提示符。代理将连接，然后显示选项菜单。
- en: 'Once the connection is built between Alice and Faber, the Alice terminal will
    display a response with invitation key and DID information, as shown here:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Alice 和 Faber 之间建立连接，Alice 终端将显示一个包含邀请密钥和 DID 信息的响应，如下所示：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For Faber, we now have five options:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Faber，我们现在有五个选项：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'For Alice, we have three options:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Alice，我们有三个选项：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Issue credentials
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发出证书
- en: You can now test the credential exchange protocols by issuing and proving credentials
    from Faber. We don’t need to do anything from the Alice agent. Her agent will
    automatically receive credentials and respond to proof requests from the ACA-Py
    demo code.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以通过从Faber发出和证明凭证来测试凭证交换协议。我们不需要从Alice代理那里做任何事情。她的代理将自动接收凭证，并回应来自ACA-Py演示代码的证明请求。
- en: 'In the Faber terminal window, enter `**1**` to send a credential:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在Faber终端窗口中，输入`**1**`以发送凭证：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the Alice terminal window, we will see this message:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在Alice终端窗口中，我们会看到这条消息：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: After Faber issues a credential offer, Alice receives the credential. Then Alice
    sends back a credential request. Faber receives Alice’s message and acknowledges
    that Alice has received the credential. Then Alice stores the credentials in her
    wallet.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在Faber发布凭证提议后，Alice收到了凭证。然后，Alice发送回一个凭证请求。Faber接收到了Alice的消息，并确认Alice已经收到了凭证。然后Alice将凭证存储在她的钱包中。
- en: Request a proof
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 请求证明
- en: 'To request a proof, enter `**2**` in the Faber terminal, and we will see this
    message:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要请求证明，在Faber终端中输入`**2**`，然后我们会看到这条消息：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The Alice terminal window will display the following message:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Alice终端窗口将显示以下消息：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We can see that after Faber sends a proof request, Alice receives a request
    and query for credentials in the wallet that satisfies the proof request. Then
    Alice generates the credential proof of degree and sends the proof back to Faber.
    Faber receives the proof provided by Alice and then starts to process and verify
    the proof.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在Faber发送证明请求后，Alice收到了一个请求，并在钱包中查询满足证明请求的凭证。然后Alice生成了学位凭证的证明并将证明发送回Faber。Faber接收到了Alice提供的证明，然后开始处理和验证证明。
- en: Once the proof is verified, Faber will update and mark the proof as `true` to
    indicate it’s verified. As we can see, proof is generated on Alice’s side without
    exposing Alice’s actual personal data.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦证明被验证，Faber将更新并标记证明为`true`以指示已验证。正如我们所看到的，证明是在Alice的一方生成的，而不会暴露Alice的实际个人数据。
- en: Hyperledger Avalon
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超级账本阿瓦隆
- en: Blockchain is a decentralized encrypted database system. Every transaction processed
    by a node needs to broadcast to other nodes in the network. This behavior ensures
    that transactions are transparent and reflects the state of the ledger. In addition,
    the behavior will result in data resiliency, as many copies of this data exist
    across the nodes participating in the network. However, using this architecture
    comes at the cost of scalability with low throughput. Only a limited number of
    transactions in the blockchain can be processed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链是一种去中心化的加密数据库系统。每个节点处理的每一笔交易都需要广播到网络中的其他节点。这种行为确保了交易的透明性，并反映了账本的状态。此外，这种行为将导致数据的弹性，因为这些数据的许多副本存在于参与网络的节点之间。然而，使用这种架构的代价是低吞吐量的可扩展性。只能处理有限数量的区块链交易。
- en: The public blockchain is accessible to everyone, and every transaction can be
    traced back to the first genesis block. A cryptocurrency user uses their private
    key to access the blockchain and initiate blockchain transactions. The transaction
    data in blockchain is pseudo-anonymous; it is not possible to assign the data
    to a person without connecting to additional personal information (e.g., a digital
    identity). In certain applications (global trading, for example), keeping some
    sensitive company data confidential and logic encrypted is required, to prevent
    it from becoming vulnerable to corruption, stolen by competitors, or explored
    by outside entities frontrunning the competition.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 公共区块链对每个人都是可访问的，每个交易都可以追溯到第一个创世区块。加密货币用户使用他们的私钥访问区块链并发起区块链交易。区块链中的交易数据是伪匿名的；不可能在不连接到其他个人信息（例如，数字身份）的情况下将数据分配给某个人。在某些应用程序（例如全球交易）中，需要保持一些敏感公司数据的保密性和逻辑加密，以防止其成为易受损的目标、被竞争对手窃取或被探索的外部实体前瞻性竞争。
- en: The *Hyperledger Avalon* project was created to address scalability and privacy
    challenges. Through trusted off-chain computing, Avalon is used to maintain resiliency
    and integrity guarantees as much as possible while accomplishing additional scalability
    and privacy.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*Hyperledger Avalon*项目是为了解决可伸缩性和隐私挑战而创建的。通过受信任的链下计算，Avalon被用于尽可能地保持弹性和完整性保证，并实现额外的可伸缩性和隐私。'
- en: The core strategy to accomplishing scalability and ensuring that computation
    is done correctly and secretly is a trusted compute service that provides a trusted
    execution environment, zero-knowledge proof, and multiparty computation.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 实现可伸缩性并确保计算正确且保密的核心策略是提供受信任执行环境、零知识证明和多方计算的受信任计算服务。
- en: Trusted Execution Environment
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 受信任执行环境
- en: Applications running in a *trusted execution environment* (*TEE*) can ensure
    strong data confidentiality. The Hyperledger Avalon TEE uses Intel’s Software
    Guard Extensions (SGX). This extension to the x86 architecture has a set of security-related
    instruction codes to run applications in a completely isolated, secure manner.
    It is built into some modern Intel central processing units (CPUs). In SGX, user-level
    code will allocate private regions of memory, called *enclaves*. The application
    process is running at higher privilege levels, not only isolated from other applications
    on the same system, but also from the operating system and possible hypervisor.
    System administrators can’t tamper with the application after it is started.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 运行在*受信任执行环境*（*TEE*）中的应用程序可以确保强大的数据保密性。Hyperledger Avalon TEE使用Intel的软件保护扩展（SGX）。这个扩展到x86架构的一组安全相关指令代码以完全隔离、安全的方式运行应用程序。它内建于一些现代Intel中央处理单元（CPU）中。在SGX中，用户级代码将分配称为*enclaves*的内存私有区域。应用程序进程运行在更高特权级别，不仅与同一系统上的其他应用程序隔离，而且与操作系统和可能的超级监视程序隔离。系统管理员无法在启动后篡改应用程序。
- en: SGX data confidentiality brings significant benefits to the enterprise blockchain
    workloads and enhances a trustworthy link between off-chain and on-chain execution.
    SGX can handle accessing off-chain transaction resources and compute confidential
    data, trusted tokens, attested oracles, and more.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: SGX 数据保密性为企业区块链工作负载带来了显著的好处，并增强了链下和链上执行之间的可信链接。SGX 可处理访问链下交易资源和计算机密数据、受信任的令牌、经证明的预言机等。
- en: Zero-Knowledge Proofs
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 零知识证明
- en: '*Zero-knowledge proofs* (*ZKPs*) are mathematical methods that allow data to
    be verified without sharing or revealing that data. In a transaction using ZKPs,
    the basic roles are the prover and verifier. The *prove*r needs to prove something
    based on a small piece of unlinkable information to the verifier, without telling
    the verifier anything else about that information. The verifier must verify that
    the prover is telling the truth.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**零知识证明**（*ZKPs*）是一种数学方法，允许在不共享或泄露数据的情况下进行数据验证。在使用零知识证明进行交易时，基本角色是证明者和验证者。*证明者*需要基于一小部分不可链接的信息向验证者证明某些事情，而无需告诉验证者关于该信息的其他任何内容。验证者必须验证证明者在说真话。'
- en: 'A true ZKPs needs to prove three criteria:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一个真正的零知识证明需要证明三个标准：
- en: Completeness
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 完备性
- en: The statement from the prover is true and should eventually convince the honest
    verifier.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 证明者的陈述是真实的，并且应最终说服诚实的验证者。
- en: Soundness
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 真实性
- en: If the statement is false, it cannot convince the verifier that the prover’s
    statement is true.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果陈述是错误的，则无法说服验证者证明者的陈述是真实的。
- en: Zero-knowledge-ness
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 零知识性
- en: If the statement is true, only the statement being proven is revealed.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果陈述是真实的，则只会透露正在被证明的陈述。
- en: A simple example that presents the fundamental ideas of ZKPs is *Where’s Waldo*.^([1](ch10.xhtml#ch01fn2))
    It has cryptography’s favorite fictional characters, Alice and Bob. The objective
    of the *Where’s Waldo* book series is to comb through the crowds of people to
    find Waldo.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**零知识证明**（*ZKPs*）的基本概念可以通过一个简单的例子来展示，那就是*瓦尔多在哪里*[^1]。它包含了密码学中最喜爱的虚构人物，艾丽斯和鲍勃。*瓦尔多在哪里*书系的目标是在人群中寻找到瓦尔多。'
- en: Assume that Bob is the prover, and Alice is the verifier. Bob claims he has
    an algorithm that can find Waldo easily, but he wants to be paid to use his algorithm.
    Alice wants to buy it, but she wants to be sure that Bob is not lying and wants
    him to prove himself. As with many transactions, Alice and Bob don’t fully trust
    each other.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 假设鲍勃是证明者，艾丽斯是验证者。鲍勃声称他有一种可以轻松找到瓦尔多的算法，但他想要得到报酬才会使用他的算法。艾丽斯想要购买，但她想要确保鲍勃没有撒谎，希望他证明自己。与许多交易一样，艾丽斯和鲍勃并不完全信任彼此。
- en: Now, Bob needs proof his algorithm works. He points out the location of Waldo
    on the page. To make sure Bob’s algorithm fully works, Alice selects other pages
    that also have Waldo. As Bob has the algorithm, he will always be able to find
    Waldo on the page that Alice gives to him. The more times Bob repeats this exercise,
    the more probable it is that Bob has an effective, fast algorithm.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，鲍勃需要证明他的算法有效。他指出了沃尔多的位置。为了确保鲍勃的算法完全有效，爱丽丝选择了其他页上也有沃尔多的页。由于鲍勃有这个算法，他总能在爱丽丝给他的页面上找到沃尔多。鲍勃重复这个练习的次数越多，他拥有有效且快速的算法的可能性就越大。
- en: 'In this example, the solutions fulfill the three properties of ZKP systems:
    soundness, completeness, and zero-knowledge:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，解决方案满足ZKP系统的三个属性：合理性，完整性和零知识：
- en: Soundness
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 合理性
- en: Alice provides a random page of the scene to let Bob prove his algorithm, Bob’s
    proof systems are truthful and do not let him cheat.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 爱丽丝提供了场景的一个随机页面，让鲍勃证明他的算法，鲍勃的证明系统是诚实的，不会让他作弊。
- en: Completeness
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 完整性
- en: As long as Bob is able to consistently find Waldo by using his algorithm, Bob’s
    proof systems convince Alice that he can find Waldo.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 只要鲍勃能够通过他的算法一直找到沃尔多，鲍勃的证明系统就能够说服爱丽丝他能找到沃尔多。
- en: Zero-knowledge
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 零知识
- en: Bob proves to Alice that he has found Waldo without revealing his algorithm.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 鲍勃向爱丽丝证明他已找到沃尔多，而不透露他的算法。
- en: Multiparty Computation
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多方计算
- en: '*Multiparty computation* (*MPC*) is a cryptographic protocol that allows independent
    parties to jointly compute a shared result without revealing an individual party’s
    data. Let’s take a look at an average salary example to understand how MPC works.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*多方计算* (*MPC*) 是一种密码学协议，允许独立方共同计算出共享结果，而不泄露任何个体方的数据。让我们看一个平均薪水的例子来理解MPC的工作原理。'
- en: 'Suppose Alice’s salary is $50K and Bob’s salary is $80K. Alice splits her salary
    into two randomly generated pieces: $20K and $30K, for example. Alice keeps $20K
    as a secret piece to herself and sends $30K to Bob. Similarly, Bob splits his
    salary into two randomly generated pieces: $10K and $70K. Bob keeps $70K as a
    secret piece to himself and sends $10K to Alice. Now Alice and Bob hold a set
    of values, as listed in [Table 10-1](#divided_salaries_of_alice_and_bob).'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 假设爱丽丝的薪水是$50K，鲍勃的薪水是$80K。爱丽丝将她的薪水随机分成两份：$20K 和 $30K，例如。爱丽丝将$20K 作为秘密留给自己，并发送$30K
    给鲍勃。同样，鲍勃将他的薪水随机分成两份：$10K 和 $70K。鲍勃将$70K 作为秘密留给自己，并发送$10K 给爱丽丝。现在爱丽丝和鲍勃持有一组值，如[表 10-1](#divided_salaries_of_alice_and_bob)中所列。
- en: Table 10-1\. Divided salaries of Alice and Bob
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 表 10-1\. 爱丽丝和鲍勃的分薪水情况
- en: '|  | Alice | Bob |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '|  | 爱丽丝 | 鲍勃 |'
- en: '| --- | --- | --- |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| **Total: $50K** | $20K | $30K |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| **总额：$50K** | $20K | $30K |'
- en: '| **Total: $80K** | $10K | $70K |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| **总额：$80K** | $10K | $70K |'
- en: Alice and Bob know nothing about each other’s salaries. They have no useful
    information from the other party’s secret piece.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 爱丽丝和鲍勃对对方的薪水一无所知。他们从对方的秘密部分中得不到任何有用的信息。
- en: However, Alice and Bob can locally sum up their values. This will provide valuable
    information, as shown in [Table 10-2](#combined_salaries_of_alice_and_bob). Then,
    the recombined sum divided by the number of participants yields an average salary
    of $65K.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Alice 和 Bob 可以在本地汇总他们的值。这将提供有价值的信息，如[表格 10-2](#combined_salaries_of_alice_and_bob)所示。然后，重新组合的总和除以参与者数量得到平均工资为
    $65K。
- en: Table 10-2\. Combined salaries of Alice and Bob
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 10-2\. Alice 和 Bob 的工资合计
- en: '|  | Alice | Bob |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '|  | Alice | Bob |'
- en: '| --- | --- | --- |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| **Total: $130K** | $30K | $100K |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| **总计：$130K** | $30K | $100K |'
- en: Since MPC is complex, not many real-world projects use this technology. One
    well-known example is using the Sharemind MPC platform to perform research based
    on two private, secret, shared governmental databases; one 2015 project studied
    the correlation between working while attending college and failing to graduate
    on time.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 由于多方计算（MPC）较为复杂，现实世界中并没有多少项目使用这项技术。一个众所周知的例子是使用 Sharemind MPC 平台进行基于两个私有、秘密、共享政府数据库的研究；一个2015年的项目研究了在上大学期间兼职工作与未能按时毕业之间的相关性。
- en: Hyperledger Avalon Architecture
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 超级账本阿瓦隆架构
- en: In Avalon, trusted workers (e.g., TEE, MPC, and ZKP workers) are hosted by a
    trusted compute service (TCS). Workers are set up by the TCS. The workers can
    create attestation verification that is signed by TEE SGX as attestation information.
    The attestation information can be published in the worker directory on the blockchain.
    In a TEE SGX worker case, worker attestation information is generated as an asymmetric
    signing/verification key pair. A requester can find the worker in the worker directory
    from the DLT and verifies and stores its attestation info.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在阿瓦隆中，受信任的工作者（例如，TEE、MPC 和 ZKP 工作者）由受信任的计算服务（TCS）托管。工作者由 TCS 设置。工作者可以创建由 TEE
    SGX 签名的证明验证作为证明信息。证明信息可以在区块链上的工作者目录中发布。在 TEE SGX 工作者的情况下，工作者证明信息被生成为非对称签名/验证密钥对。请求者可以从
    DLT 中的工作者目录中找到工作者，并验证并存储其证明信息。
- en: A requester app or smart contract submits a work order request. The TCS receives
    and maintains a work order queue. By checking available workers, the TCS schedules
    the work orders for execution. During the work order execution stage, the trusted
    workers execute these work orders and record the work order response on the blockchain.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 请求者应用程序或智能合约提交工作订单请求。TCS 接收并维护工作订单队列。通过检查可用的工作者，TCS 安排工作订单进行执行。在工作订单执行阶段，受信任的工作者执行这些工作订单，并将工作订单响应记录在区块链上。
- en: '[Figure 10-2](#hyperledger_avalon_high_level_architect) shows the Hyperledger
    Avalon high-level architecture.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 10-2](#hyperledger_avalon_high_level_architect)展示了超级账本阿瓦隆的高级架构。'
- en: '![Hyperledger Avalon high-level architecture](Images/HLF_1002.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![超级账本阿瓦隆高级架构](Images/HLF_1002.png)'
- en: Figure 10-2\. Hyperledger Avalon high-level architecture
  id: totrans-117
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-2\. 超级账本阿瓦隆高级架构
- en: 'The requestor can connect to TCS via two models: the proxy model and direct
    model. In the *proxy model*, a blockchain connector is used to connect requests
    from a smart contract (Ethereum) or chaincode (Fabric) running on the DLT. In
    this model, the blockchain is acting as a proxy. The *direct model* provides a
    JSON RPC API for passing requests submitted by requesters via a frontend UI or
    command-line tools.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请求方可以通过两种模式连接到 TCS：代理模式和直连模式。在*代理模式*中，使用区块链连接器连接来自DLT上运行的智能合约（以太坊）或链码（Fabric）的请求。在该模式中，区块链充当代理。*直连模式*为通过前端
    UI 或命令行工具提交的请求提供 JSON RPC API。
- en: In the middle tier, the work order queue manager will handle work order requests,
    delegate execution of the work orders to execution adaptors, and maintain work
    order queue size. The worker registry stores the list’s trusted compute workers.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在中间层中，工单队列管理器会处理工单请求，将工单执行委托给执行适配器，并维护工单队列大小。工作注册表存储受信任的计算工作者列表。
- en: Between frontend and middleware components is the KV Storage Manager, a thin
    wrapper implemented on top of the Lightning Memory-Mapped Database (LMDB) that
    maintains the worker directory and work order queue.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端和中间件组件之间是 KV 存储管理器，它是在 Lightning 内存映射数据库（LMDB）之上实现的一个薄包装器，用于维护工作目录和工单队列。
- en: In the worker TCF microservice component, the trusted worker executes application-specific
    workloads. Workloads can be either static, precompiled scripts, or scripts that
    are provided at runtime (e.g., Solidity or Python). Workload script logic is typically
    application related.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作 TCF 微服务组件中，受信任的工作者执行特定于应用程序的工作负载。工作负载可以是静态的、预编译脚本，或者在运行时提供的脚本（例如 Solidity
    或 Python）。工作负载脚本逻辑通常与应用程序相关。
- en: Hyperledger Besu
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyperledger Besu
- en: '*Hyperledger Besu*, formerly known as *Pantheon*, is an open source Ethereum
    client designed to connect large enterprises with the public Ethereum blockchain.
    It is written in Java. Besu can be run on the Ethereum public network, private
    networks, and test networks such as Ropsten (proof-of-work testnet), Kovan (proof-of-authority
    testnet), Gorli (proof-of-authority testnet), and Rinkeby (proof-of-authority
    testnet).'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '*Hyperledger Besu*，前身为*Pantheon*，是一个旨在将大型企业与公共以太坊区块链连接的开源以太坊客户端。它使用 Java 编写。Besu
    可在以太坊公共网络、私有网络和测试网络上运行，如 Ropsten（工作量证明测试网络）、Kovan（权威测试网络）、Gorli（权威测试网络）和 Rinkeby（权威测试网络）。'
- en: 'As a basic Ethereum client, it has the following features:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 作为基本的以太坊客户端，它具有以下功能：
- en: Connects to the blockchain network to synchronize blockchain transaction data
    or emit events to the network
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接区块链网络，以同步区块链交易数据或向网络发出事件
- en: Processes transactions through smart contracts in an EVM environment
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 EVM 环境中通过智能合约处理交易
- en: Provides data storage for networks (blocks)
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为网络提供数据存储（区块）
- en: Publishes a client API interface for developers to interact with the blockchain
    network
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布了供开发人员与区块链网络交互的客户端 API 接口
- en: Hyperledger Besu Architecture
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Hyperledger Besu 架构
- en: '[Figure 10-3](#hyperledger_besu_architecture) shows the high-level Hyperledger
    Besu architecture, which consists of three key layers.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[图10-3](#hyperledger_besu_architecture)展示了高级别的Hyperledger Besu架构，由三个关键层组成。'
- en: '![Hyperledger Besu architecture](Images/HLF_1003.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![Hyperledger Besu架构](Images/HLF_1003.png)'
- en: Figure 10-3\. Hyperledger Besu architecture
  id: totrans-132
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10-3\. Hyperledger Besu架构
- en: Ethereum storage layer
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以太坊存储层
- en: The Ethereum Virtual Machine (EVM) is a powerful, Turing complete virtual machine
    embedded within each full Ethereum node. Smart contracts will compile and deploy
    to EVM bytecode. EVM is responsible for executing contract bytecode within an
    Ethereum blockchain.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊虚拟机（EVM）是嵌入在每个完整以太坊节点中的强大、图灵完备的虚拟机。智能合约将编译并部署到EVM字节码。EVM负责在以太坊区块链内执行合约字节码。
- en: Besu implements proof-of-work (PoW) and proof-of-authority (PoA) consensus mechanisms
    via Ethash, Clique, and IBFT 2.0\. As explained in [Chapter 1](ch01.xhtml#fundamental_concepts_of_blockchain),
    PoW is a consensus algorithm that relies on energy by solving a cryptographic
    puzzle. The puzzle is to find an input that produces a hash number with a certain
    number of leading zeros. The work of resolving the math problem is called PoW.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Besu通过Ethash、Clique和IBFT 2.0实现工作量证明（PoW）和权威证明（PoA）共识机制。正如[第一章](ch01.xhtml#fundamental_concepts_of_blockchain)所解释的那样，PoW是一种依赖于能源的共识算法，通过解决密码学难题来完成。这个难题是找到一个产生特定数量前导零的哈希数的输入。解决数学问题的工作被称为PoW。
- en: PoA is an algorithm that selects a limited number of trusted nodes. These nodes
    have proven their authority and are responsible for validating transactions, generating
    new blocks, and keeping the network working. Besu implements several PoA protocols,
    including Clique and IBFT 2.0.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: PoA是一种选择有限数量受信任节点的算法。这些节点已经证明了他们的权威，并负责验证交易、生成新块并保持网络运行。Besu实现了几种PoA协议，包括Clique和IBFT
    2.0。
- en: Clique is a PoA blockchain consensus protocol. The blockchain runs the Clique
    protocol, maintaining the list of authorized signers. These approved signers validate
    transactions, and blocks and take turns to create the next block without mining.
    Therefore, the transaction task is computationally light. When creating a block,
    a miner collects and executes transactions, updates the network state with the
    calculated hash of the block, and signs the block by using their private key.
    By defining a period of time to create a block, Clique can limit the number of
    processed transactions.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Clique是一种PoA区块链共识协议。区块链运行Clique协议，维护授权签名者列表。这些已批准的签名者验证交易和区块，并轮流创建下一个块而不进行挖矿。因此，交易任务计算量轻。在创建块时，矿工收集并执行交易，用块的计算哈希更新网络状态，并使用他们的私钥对块进行签名。通过定义一个创建块的时间段，Clique可以限制处理的交易数量。
- en: IBFT 2.0 (Istanbul BFT 2.0) is a PoA Byzantine-fault-tolerant (BFT) blockchain
    consensus protocol. Transactions and blocks in the network are validated by authorized
    accounts, known as *validators*. Validators collect, validate, and execute transactions
    and create the next block. Existing validators can propose and vote to add or
    remove validators and maintain a dynamic validator set. The consensus can ensure
    immediate finality. As the name suggests, IBFT 2.0 builds upon the IBFT blockchain
    consensus protocol with improved safety and liveness. In IBFT 2.0 blockchain,
    all valid blocks are directly added in the main chain, and there are no forks.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: IBFT 2.0（伊斯坦布尔 BFT 2.0）是一种 PoA 拜占庭容错（BFT）区块链共识协议。网络中的交易和区块由授权账户（称为*验证者*）验证。验证者收集、验证和执行交易，并创建下一个区块。现有的验证者可以提出并投票添加或删除验证者，并维护动态验证者集。该共识可以确保即时最终性。正如其名称所示，IBFT
    2.0 在 IBFT 区块链共识协议的基础上进行了改进，增强了安全性和活力性。在 IBFT 2.0 区块链中，所有有效的区块直接添加到主链中，没有分叉。
- en: Storage layer
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 存储层
- en: 'Besu uses a RocksDB database to store data locally. This data is divided into
    two parts:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Besu 使用 RocksDB 数据库在本地存储数据。这些数据分为两部分：
- en: Blockchain
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链
- en: Blockchain data is composed of block headers and block bodies. Each block header
    contains sets of block metadata (the hash of the previous block, a timestamp,
    nonce, etc.) that is used to cryptographically verify blockchain state. Block
    bodies contain the list of ordered transactions included in each block.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链数据由区块头和区块体组成。每个区块头包含一组区块元数据（上一个区块的哈希、时间戳、随机数等），用于加密验证区块链状态。区块体包含每个区块中包含的有序交易列表。
- en: World state
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 世界状态
- en: The world state is a database that holds the current value of the attributes
    of a business object that have been added, modified, or deleted by the set of
    validated and committed transactions in the blockchain. Every block header references
    a world state via a `stateRoot` hash. The world state is a mapping between addresses
    and account states. As a global state, it is constantly updated by transaction
    executions.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 世界状态是一个数据库，它保存了区块链中由验证和提交的交易集合添加、修改或删除的业务对象属性的当前值。每个区块头通过`stateRoot`哈希引用一个世界状态。世界状态是地址和账户状态之间的映射。作为全局状态，它会通过交易执行不断更新。
- en: Network storage layer
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络存储层
- en: Besu implements point-to-point (P2P) networking with Ethereum’s DEVp2p network
    protocols for interclient communication and an additional subprotocol for IBFT
    2.0\. In the DEVp2p network, after the peer node’s secure TCP connection is established,
    DEVp2p negotiates an application session between two connected peers. Each node
    will send another peer a greeting message with its own node ID, DEVp2p version,
    client name, and other node-related metadata. Then the nodes start transmitting
    application data packets over DEVp2p. DEVp2p nodes will periodically ping connected
    clients to ensure that their connected peers are still active. If a corresponding
    DEVp2p message is not received by a client within the maximum allowed idle time,
    the node connection will be closed.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Besu实现了点对点（P2P）网络与以太坊的DEVp2p网络协议进行客户端间通信，并为IBFT 2.0额外子协议实现。在DEVp2p网络中，当对等节点的安全TCP连接建立后，DEVp2p将在两个连接的对等节点之间协商应用程序会话。每个节点将向另一个对等节点发送一个包含其自身节点ID、DEVp2p版本、客户端名称和其他节点相关元数据的问候消息。然后节点开始通过DEVp2p传输应用程序数据包。DEVp2p节点将定期向连接的客户端发送ping以确保它们的连接对等节点仍处于活动状态。如果客户端在最大允许的空闲时间内未收到相应的DEVp2p消息，则节点连接将关闭。
- en: Besu provides powerful user-facing APIs through mainnet Ethereum, and EEA JSON-RPC
    APIs over HTTP and WebSocket protocols, as well as a GraphQL API.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Besu通过主网以太坊提供强大的面向用户的API，以及通过HTTP和WebSocket协议的EEA JSON-RPC API，以及GraphQL API。
- en: Besu’s monitoring allows you to identify node and network issues. You can configure
    metrics and logging. Node performance is monitored by using the Prometheus Visual
    tool or the `debug_metrics` JSON-RPC API method. Network performance is monitored
    with Alethio tools such as Block Explorer and EthStats Network Monitor. You can
    also collect Besu log files to enable issue diagnosis.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Besu的监控功能允许您识别节点和网络问题。您可以配置指标和日志记录。节点性能通过使用Prometheus Visual工具或`debug_metrics`
    JSON-RPC API方法进行监控。网络性能通过使用Alethio工具（如区块浏览器和EthStats网络监视器）进行监控。您还可以收集Besu日志文件以启用问题诊断。
- en: Besu uses a private transaction manager, Orion, to implement privacy. Private
    transactions that were signed with the node private key are sent or received from
    the Besu node to the associated Orion node. Besu and Orion nodes both have public/private
    key pairs identifying them. Other parties cannot access the transaction content,
    sending party, or list of participating parties.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Besu使用私有事务管理器Orion来实现隐私。使用节点私钥签名的私有交易被发送或接收到与关联Orion节点的Besu节点。Besu和Orion节点都具有用于标识它们的公共/私有密钥对。其他方无法访问交易内容、发送方或参与方列表。
- en: By enabling node permissioning and account permissioning, a permissioned network
    allows only specific nodes and accounts to access the network. Node permissioning
    is used to control connections between individual nodes. Account permissioning
    can limit which accounts a node can allow to perform the transactions, deny the
    broken smart contracts, suspend accounts, and enforce onboarding or identity requirements.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 通过启用节点许可和帐户许可，许可网络只允许特定的节点和帐户访问网络。节点许可用于控制各个节点之间的连接。帐户许可可以限制节点允许执行交易的帐户，拒绝损坏的智能合约，暂停帐户，并执行入职或身份要求。
- en: Set Up Hyperledger Besu
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 Hyperledger Besu
- en: 'To demonstrate how Hyperledger Besu works, we will run a private network example.
    It uses the Hyperledger Besu Docker image to run a private network of Besu nodes.
    To run this example, you must have the following installed:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示 Hyperledger Besu 的工作原理，我们将运行一个私有网络示例。它使用 Hyperledger Besu Docker 镜像来运行
    Besu 节点的私有网络。要运行此示例，您必须安装以下软件：
- en: Docker
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker
- en: Docker Compose
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Compose
- en: Git
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git
- en: cURL
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: cURL
- en: Node.js (version 10+)
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js（版本 10+）
- en: npm
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: npm
- en: MetaMask
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MetaMask
- en: If you haven’t installed Docker and Docker Compose yet, you can find the installation
    guide at the Docker official website. The Node.js site will give you instructions
    to install Node.js and npm.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有安装 Docker 和 Docker Compose，请在 Docker 官方网站找到安装指南。Node.js 网站将为您提供安装 Node.js
    和 npm 的说明。
- en: MetaMask as an Ethereum wallet is a Google Chrome browser plugin. It can connect
    a blockchain network from Ethereum-based DApps. Users can invoke smart contracts
    to transfer coins, play games, and more. You can find the installation guide at
    the MetaMask site (*[*https://metamask.io*](https://metamask.io)*).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊钱包 **MetaMask** 是 Google Chrome 浏览器的插件。它可以连接以太坊 DApps 上的区块链网络。用户可以调用智能合约来转移硬币、玩游戏等。您可以在
    MetaMask 网站 (*[*https://metamask.io*](https://metamask.io)*) 找到安装指南。
- en: 'To start, we’ll open a bash terminal and clone the *besu-sample-network* Git
    repo, and then navigate to the *besu-sample-networks* directory:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将打开一个 bash 终端并克隆 *besu-sample-network* Git 仓库，然后导航到 *besu-sample-networks*
    目录：
- en: '[PRE12]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, start the Besu sample network by running this command:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过运行以下命令来启动 Besu 示例网络：
- en: '[PRE13]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The script builds the images, and creates a local private Besu network using
    Docker. The default consensus mechanism is Ethash; you can select other consensus
    mechanism by using `-c <ibft2|clique|ethash>` on your private network.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本构建图像，并使用 Docker 创建一个本地私有 Besu 网络。默认的共识机制是 Ethash；您可以使用 `-c <ibft2|clique|ethash>`
    在您的私有网络上选择其他共识机制。
- en: 'When the network starts, you should see a list of the running services in the
    terminal:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当网络启动时，您应该在终端中看到正在运行的服务列表：
- en: '[PRE14]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You’ll also see a list of the endpoints:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 您还将看到端点列表：
- en: '[PRE15]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: JSON-RPC HTTP service endpoint
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JSON-RPC HTTP 服务端点
- en: A JSON-RPC HTTP service endpoint is a lightweight remote procedure call (RPC)
    protocol that provides access to Besu node service from a DApp client or cryptocurrency
    wallets such as MetaMask. You can run RPC requests on rpcnode by using a cURL
    command or other HTTP tools (for example, Postman).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: JSON-RPC HTTP 服务端点是一种轻量级的远程过程调用（RPC）协议，它提供了从 DApp 客户端或加密货币钱包（如 MetaMask）访问 Besu
    节点服务的方式。你可以使用 cURL 命令或其他 HTTP 工具（例如 Postman）在 rpcnode 上运行 RPC 请求。
- en: 'Here is the command to submit a request to get the most recently mined block
    number. You will need to replace *<http-rpc-endpoint>* from *http://localhost:8545*
    with your machine IP address if you run from an external command-line terminal:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是提交请求以获取最近挖掘的区块编号的命令。如果你从外部命令行终端运行，则需要将 *<http-rpc-endpoint>* 从 *http://localhost:8545*
    替换为你的机器 IP 地址：
- en: '[PRE16]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The response shows the most recently mined block:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 响应显示了最近挖掘的区块：
- en: '[PRE17]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: JSON-RPC WebSocket
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JSON-RPC WebSocket
- en: A JSON-RPC WebSocket service endpoint provides a web socket endpoint for a DApp
    client connected to node service.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: JSON-RPC WebSocket 服务端点为连接到节点服务的 DApp 客户端提供了一个 Web Socket 端点。
- en: GraphQL HTTP service endpoint
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GraphQL HTTP 服务端点
- en: GraphQL, a query language for the HTTP API, supports a runtime for executing
    queries with the existing data. It is in contrast to REST APIs that expose a suite
    of URLs, and each of these URLs exposes a single resource. You can connect the
    HTTP GraphQL node service from your DApp.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL 是用于 HTTP API 的查询语言，支持使用现有数据执行查询的运行时。这与暴露一套 URL 的 REST API 形成对比，每个 URL
    都暴露了单个资源。你可以从你的 DApp 连接到 HTTP GraphQL 节点服务。
- en: GraphQL is both a query language for your API and a server-side runtime for
    executing queries by using a type system you define for your data
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL 既是用于你的 API 的查询语言，也是用于使用你为数据定义的类型系统执行查询的服务器端运行时。
- en: Web block explorer address
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Web 区块浏览器地址
- en: The web block explorer address is an online block explorer that displays the
    contents of individual blockchain transactions, blocks, the transaction histories,
    and balances of addresses.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Web 区块浏览器地址是一个在线的区块浏览器，显示了单个区块链交易、区块、交易历史和地址余额的内容。
- en: You can access the explorer by entering the web block explorer address in the
    browser ([Figure 10-4](#web_block_explorer_address)). It will display a summary
    of the private network.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在浏览器中输入 Web 区块浏览器地址（[图 10-4](#web_block_explorer_address)）来访问浏览器。它会显示私有网络的摘要。
- en: '![Web block explorer address](Images/HLF_1004.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![Web 区块浏览器地址](Images/HLF_1004.png)'
- en: Figure 10-4\. Web block explorer address
  id: totrans-186
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-4\. Web 区块浏览器地址
- en: 'In this example, the explorer indicates three peers: the one regular node,
    the mining node, and the bootnode. Click the block number (#1107) to display the
    block details ([Figure 10-5](#web_block_explorer_block_details)).'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，浏览器指示了三个节点：一个普通节点、一个挖矿节点和一个引导节点。点击区块编号（#1107）以显示区块详情（[图 10-5](#web_block_explorer_block_details)）。
- en: '![Web block explorer block details](Images/HLF_1005.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![Web 区块浏览器区块详情](Images/HLF_1005.png)'
- en: Figure 10-5\. Web block explorer block details
  id: totrans-189
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-5\. Web 区块浏览器区块详情
- en: Prometheus address
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Prometheus地址
- en: Prometheus provides monitoring and alerting services for Besu node metrics.
    The data stored in Prometheus can be used in Grafana to visualize the collected
    data. The link for the Prometheus address can access the Prometheus dashboard.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus为Besu节点指标提供监控和警报服务。Prometheus中存储的数据可在Grafana中用于可视化收集的数据。可以通过Prometheus地址访问Prometheus仪表板的链接。
- en: Grafana address
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Grafana地址
- en: The Grafana dashboard provides a visualization and analytics tool to monitor
    Besu network connection, sync state, and block import rate along with CPU and
    memory usage statistics. The required data in Grafana comes from the Prometheus
    data store, which is exported directly from Besu.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana仪表板提供了一个可视化和分析工具，用于监视Besu网络连接、同步状态和块导入速率，以及CPU和内存使用统计信息。Grafana中的所需数据来自Prometheus数据存储，该数据直接从Besu导出。
- en: With the Besu example network set up, we will now run a smart contract and DApp
    in the Besu test network. In this DApp example, we will use MetaMask to send transactions.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 有了Besu示例网络设置，我们现在将在Besu测试网络中运行一个智能合约和DApp。在这个DApp示例中，我们将使用MetaMask发送交易。
- en: Set up MetaMask and account
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置MetaMask和帐户
- en: 'Use the following steps to set up MetaMask:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下步骤设置MetaMask：
- en: Sign in to MetaMask.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录MetaMask。
- en: 'In the MetaMask network list, select Custom RPC. Enter the JSON-RPC HTTP service
    endpoint: [*http://your-machine-ip:8545*](http://your-machine-ip:8545).'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在MetaMask网络列表中，选择自定义RPC。输入JSON-RPC HTTP服务端点：[*http://your-machine-ip:8545*](http://your-machine-ip:8545)。
- en: Save and return to the MetaMask main screen. MetaMask is now connected to the
    private network RPC node.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并返回到MetaMask主屏幕。MetaMask现在连接到私有网络RPC节点。
- en: 'Create an account or use one of the following accounts provided by Besu for
    testing purposes. You can import an account into MetaMask by using the private
    key:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个帐户或使用Besu提供的以下一个帐户进行测试。您可以通过使用私钥将帐户导入到MetaMask中：
- en: '[PRE18]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[Figure 10-6](#metamask_import_private_key_screen) shows the MetaMask Import
    private-key screen.'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[图10-6](#metamask_import_private_key_screen)显示了MetaMask导入私钥屏幕。'
- en: '![MetaMask Import private key screen](Images/HLF_1006.png)'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![MetaMask导入私钥屏幕](Images/HLF_1006.png)'
- en: Figure 10-6\. MetaMask Import private key screen
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10-6. MetaMask导入私钥屏幕
- en: Note
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: MetaMask is a browser extension cryptocurrency wallet for accessing Ethereum
    blockchain. You can visit *metamask.io* to get more info.
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MetaMask是一个用于访问以太坊区块链的浏览器扩展加密货币钱包。您可以访问*metamask.io*获取更多信息。
- en: Smart Contract and DApp in Hyperledger Besu Private Network
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Hyperledger Besu私有网络中的智能合约和DApp
- en: We will run the PetShop tutorial on the Truffle website in the Hyperledger Besu
    private network we just set up. PetShop is an adoption tracking system for a pet
    shop. Users can adopt a pet by sending Ether tokens in the network.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们刚刚建立的Hyperledger Besu私有网络上运行Truffle网站上的PetShop教程。PetShop是一个宠物店的领养跟踪系统。用户可以通过在网络中发送以太代币来领养宠物。
- en: The DApp requires you to install Truffle. For this setup, we use Truffle v5.0.15\.
    Truffle is an end-to-end Ethereum DApp development tool that provides a development
    environment for writing, compiling, testing, and deploying smart contracts and
    DApps.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: DApp 需要安装 Truffle。对于这个设置，我们使用 Truffle v5.0.15。Truffle 是一个端到端的以太坊 DApp 开发工具，提供了一个开发环境，用于编写、编译、测试和部署智能合约和
    DApps。
- en: 'Open the command line and run the following:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 打开命令行并运行以下命令：
- en: '[PRE19]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The PetShop source code for the smart contract and DApp are in the *pet-shop*
    folder:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约和 DApp 的 PetShop 源代码位于 *pet-shop* 文件夹中：
- en: '[PRE20]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Run *./run-dapp.sh* in the *besu-sample-networks* directory to start the PetShop
    DApp:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *besu-sample-networks* 目录中运行 *./run-dapp.sh* 来启动 PetShop DApp：
- en: '[PRE21]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The *run-dapp.sh* script runs `npm install` under the *pet-shop* folder, then
    uses the Truffle command to compile, migrate, and test the smart contract in `sampleNetworkWallet`.
    If successful, it builds a container for the PetShop DApp and deploys it in *besu-sample-network*.
    The DApp container binds port 3001 on the system.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '*run-dapp.sh* 脚本在 *pet-shop* 文件夹下运行 `npm install`，然后使用 Truffle 命令来编译、迁移和测试
    `sampleNetworkWallet` 中的智能合约。如果成功，它会为 PetShop DApp 构建一个容器，并在 *besu-sample-network*
    中部署。DApp 容器会在系统上绑定端口 3001。'
- en: Once the DApp is up, you can open the browser by entering **[*http://your-machine-ip:3001*](http://your-machine-ip:3001)**,
    which should have the PetShop running. If you click the Adopt button to adopt
    a pet, a MetaMask window should pop up and ask to confirm or reject the current
    adoption transaction ([Figure 10-7](#in_this_pet_store_dappcomma_note_the_me)).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 DApp 启动，您可以通过输入 **[*http://your-machine-ip:3001*](http://your-machine-ip:3001)**
    打开浏览器，应该会看到 PetShop 运行。如果您点击采用按钮来领养宠物，应该会弹出一个 MetaMask 窗口询问是否确认或拒绝当前的领养交易 ([图 10-7](#in_this_pet_store_dappcomma_note_the_me))。
- en: '![In this pet store DApp, note the MetaMask window in the upper right](Images/HLF_1007.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![在这个宠物商店 DApp 中，注意右上角的 MetaMask 窗口](Images/HLF_1007.png)'
- en: Figure 10-7\. In this pet store DApp, note the MetaMask window in the upper
    right
  id: totrans-219
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-7\. 在这个宠物商店 DApp 中，注意右上角的 MetaMask 窗口
- en: After confirming the transaction, the status of the adopted pet will show Success.
    The MetaMask UI will keep a record of the confirmed transaction ([Figure 10-8](#metamask_transaction_confirmation)).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在确认交易后，被领养宠物的状态将显示为成功。MetaMask UI 将记录已确认的交易 ([图 10-8](#metamask_transaction_confirmation))。
- en: '![MetaMask transaction confirmation](Images/HLF_1008.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![MetaMask 交易确认](Images/HLF_1008.png)'
- en: Figure 10-8\. MetaMask transaction confirmation
  id: totrans-222
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-8\. MetaMask 交易确认
- en: We can also search the same transaction from the Block Explorer UI by entering
    the transaction hash to see the transaction detail ([Figure 10-9](#block_explorer_transaction_detail)).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以从区块浏览器 UI 中搜索相同的交易，通过输入交易哈希来查看交易详情 ([图 10-9](#block_explorer_transaction_detail))。
- en: '![Block Explorer transaction detail](Images/HLF_1009.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![区块浏览器交易详情](Images/HLF_1009.png)'
- en: Figure 10-9\. Block Explorer transaction detail
  id: totrans-225
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-9\. 区块浏览器交易详情
- en: 'When all is completed, you can stop the private network and remove the containers:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 当一切完成后，您可以停止私有网络并移除容器：
- en: '[PRE22]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The command will shut down the private network and delete all containers and
    images created from running the sample network.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将关闭私有网络并删除从运行示例网络创建的所有容器和镜像。
- en: Hyperledger Grid
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超级账本网格
- en: 'Since the blockchain is a transparent, immutable, and secure decentralized
    system, it enables participants to record every transaction within a supply chain;
    the ledger data is shared among all actors. Traditional supply chain industries
    using blockchain technology could improve the following areas:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 由于区块链是一个透明、不可变且安全的去中心化系统，它使参与者能够记录供应链中的每笔交易；分类帐数据在所有参与者之间共享。使用区块链技术的传统供应链行业可以改善以下几个方面：
- en: Tracking the assets from production to delivery, or through use by the end user
    in the entire chain
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪从生产到交付，或通过最终用户在整个链条中的使用的资产
- en: Verifying and authenticating physical assets in the chain
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在链中验证和认证物理资产
- en: Ensuring that ledger data is immutable and shared among supply chain participants
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保分类帐数据是不可变的，并在供应链参与者之间共享
- en: Providing better auditability
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供更好的审计能力
- en: However, developing blockchains for supply chain applications is not an easy
    task, especially when building everything from scratch. The use case can contain
    a vast amount of information on everything from a product order, to delivery,
    to the number of parts contained within one item. A small bug could cause the
    entire supply chain application to be corrupted and worthless. Developing a full
    production-ready blockchain application is also time-consuming. The Hyperledger
    ecosystem doesn’t have many reusable libraries, frameworks, domain models, or
    standard components that enable quickly creating supply chain solutions. This
    is what the *Hyperledger Grid* project is trying to solve.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为供应链应用程序开发区块链并不是一件容易的事情，尤其是在从零开始构建时。用例可能包含大量关于从产品订单到交付再到一个项目中包含的零件数量的信息。一个小错误可能导致整个供应链应用程序损坏且毫无价值。开发一个完整的、可用于生产的区块链应用程序也是耗时的。超级账本生态系统没有很多可重用的库、框架、领域模型或标准组件，能够快速创建供应链解决方案。这正是*超级账本网格*项目试图解决的问题。
- en: Grid is a platform for building supply chain solutions that allows developers
    to choose the best reusable components, frameworks with existing distributed ledger
    platform software, and business-specific applications. [Figure 10-10](#hyperledger_grid_platform_stack)
    shows the Hyperledger Grid platform stack.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: Grid是一个用于构建供应链解决方案的平台，它允许开发人员选择最佳的可重用组件、具有现有分布式分类帐平台软件的框架和业务特定应用程序。[图 10-10](#hyperledger_grid_platform_stack)显示了超级账本网格平台的堆栈。
- en: '![Hyperledger Grid platform stack](Images/HLF_1010.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![超级账本网格平台堆栈](Images/HLF_1010.png)'
- en: Figure 10-10\. Hyperledger Grid platform stack
  id: totrans-238
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10-10. 超级账本网格平台堆栈
- en: Grid’s key components are domain models, a smart contract, a universal client,
    Pike, and sample apps.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 网格的关键组件包括领域模型、智能合约、通用客户端Pike和示例应用程序。
- en: Domain Models
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 领域模型
- en: Grid uses existing open standards such as GS1, Open Data Initiative, and Blockchain
    in Transit Alliance (BiTA) standards to implement domain-specific data models.
    GS1 provides a global standard business language to identify, capture, and share
    supply chain data—ensuring that key information about products, locations, assets,
    and more is accessible, accurate, and easy to understand. The best known of these
    standards is the barcode.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Grid 使用现有的开放标准，如 GS1、Open Data Initiative 和 Blockchain in Transit Alliance（BiTA）标准，来实现领域特定的数据模型。GS1
    提供了一个全球标准的业务语言，用于识别、捕获和共享供应链数据，确保产品、位置、资产等的关键信息易于访问、准确并易于理解。其中最著名的标准是条形码。
- en: Smart Contracts
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 智能合约
- en: The smart contract builds the business logic based on industry best practices,
    including product catalogs, product transformation, and batch behavior. It executes
    various business transactions in a decentralized way in the blockchain. The smart
    contracts are handled by the Sawtooth Sabre smart contract interpreter, which
    implements on-chain smart contracts in a WebAssembly virtual machine.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约基于行业最佳实践构建业务逻辑，包括产品目录、产品转换和批处理行为。它在区块链上以分散的方式执行各种业务交易。智能合约由 Sawtooth Sabre
    智能合约解释器处理，该解释器在 WebAssembly 虚拟机中实现了链上智能合约。
- en: '*WebAssembly* is an open standard inside the W3C WebAssembly Community Group.
    It defines a fast, efficient, and portable WebAssembly binary-code format for
    executable programs. The corresponding low-level textual assembly language is
    readable and debuggable. WebAssembly is designed to be secure, and its code is
    run in a safe, sandboxed execution environment. By taking advantage of common
    hardware capabilities, it provides interfaces for nicely facilitating interactions
    with other web technologies and maintains backward compatibility.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '*WebAssembly* 是 W3C WebAssembly 社区组内部的一个开放标准。它定义了一种快速、高效、可移植的 WebAssembly 二进制代码格式，用于可执行程序。相应的低级文本汇编语言可读性强且易于调试。WebAssembly
    设计用于安全性，并在安全的沙盒执行环境中运行其代码。通过利用通用硬件功能，它提供了与其他 Web 技术良好交互的接口，并保持向后兼容性。'
- en: All Sawtooth Sabre objects are serialized using Protocol Buffers before being
    stored in state. These objects include namespace registries, contract registries,
    and contracts.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 Sawtooth Sabre 对象在存储之前都使用 Protocol Buffers 进行序列化。这些对象包括命名空间注册表、合约注册表和合约。
- en: Pike
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pike
- en: '*Pike* is a smart contract that is designed to track agents and the organization’s
    identity permissions in the supply chain. The Pike agent is a cryptographic public
    key, which contains role information representing an organization’s relationships.
    These roles can be used to determine user access permission with a platform.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '*Pike* 是一种智能合约，旨在跟踪供应链中的代理和组织身份权限。Pike 代理是一个包含角色信息的加密公钥，代表着组织的关系。这些角色可用于确定用户在平台上的访问权限。'
- en: 'An agent has five attributes:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 代理有五个属性：
- en: '`public_key`'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`public_key`'
- en: An agent’s unique cryptographic public key
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 代理的唯一加密公钥
- en: '`org_id`'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`org_id`'
- en: The agent’s organization identifier
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 代理机构的组织标识符
- en: '`active`'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`active`'
- en: The activity flag to indicate whether the agent is currently active at the organization
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 活动标志，指示代理当前是否在组织中活动
- en: '`roles`'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`roles`'
- en: A list of roles the agent has with the organization
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 代理与组织拥有的角色列表
- en: '`metadata`'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`metadata`'
- en: A set of key-value data describing organization-specific information about the
    agent
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 描述代理机构特定信息的一组键值数据
- en: 'Here is an example of a Pike agent:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个 Pike 代理的示例：
- en: '[PRE23]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`PikePayload` as a Pike transaction contains two parts: enumeration of action
    and transaction actions. The following Protocol Buffers code shows how to define
    `PikePayload`:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`PikePayload` 作为 Pike 交易包含两部分：动作的枚举和交易动作。以下 Protocol Buffers 代码显示了如何定义 `PikePayload`：'
- en: '[PRE24]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: SDK
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SDK
- en: 'Currently, Pike uses the Rust SDK to develop smart contracts. This SDK has
    three modules: permission, protocol, and protos. In the previous section, `PikePayload`
    is a protos module.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Pike 使用 Rust SDK 来开发智能合约。这个 SDK 有三个模块：permission、protocol 和 protos。在前面的部分中，`PikePayload`
    是 protos 模块。
- en: Sample Apps
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例应用程序
- en: Grid provides sample apps that can help demonstrate how to combine Grid components
    to build a supply chain application. The Grid Track and Trace example is the first
    showcase. This smart contract allows users to track goods, including a history
    of ownership and custodianship, as well as histories for a variety of properties
    such as temperature and location through a supply chain.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: Grid 提供了示例应用程序，可以帮助演示如何将 Grid 组件组合起来构建供应链应用程序。Grid Track and Trace 示例是第一个展示。这个智能合约允许用户跟踪货物，包括所有权和保管历史，以及温度和位置等各种属性的历史，通过供应链。
- en: Summary
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'This chapter covered four members of the Hyperledger family: Hyperledger Aries,
    Hyperledger Avalon, Hyperledger Besu, and Hyperledger Grid. Specifically, we discussed
    how Aries works: it provides a blockchain interface layer, facilitates interoperability
    with other identity projects, and is used to create, manage, and transmit digital
    credentials. As a trusted compute framework, Avalon addresses blockchain scalability
    and privacy challenges through trusted off-chain processing. By exploring Besu
    modular architecture, you learned how this open source Ethereum client brings
    public blockchain to the enterprise. As a platform for building supply chain solutions,
    Grid allows developers to choose the best reusable components, frameworks with
    existing distributed ledger platform software, and business-specific applications.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了 Hyperledger 家族的四个成员：Hyperledger Aries、Hyperledger Avalon、Hyperledger Besu
    和 Hyperledger Grid。具体而言，我们讨论了 Aries 的工作方式：它提供了一个区块链接口层，促进了与其他身份项目的互操作性，并用于创建、管理和传输数字凭证。作为一个值得信赖的计算框架，Avalon
    通过可信的链外处理来解决区块链的可扩展性和隐私挑战。通过探索 Besu 的模块化架构，您了解到这个开源以太坊客户端是如何将公共区块链引入企业的。作为构建供应链解决方案的平台，Grid
    允许开发人员选择最佳的可重用组件、现有分布式账本平台软件的框架以及特定于业务的应用程序。
- en: Concluding Remarks
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结语
- en: Throughout the course of this text, you have learned about all the aspects and
    facets to consider for developing and deploying an enterprise blockchain application
    by using Hyperledger Fabric. We hope that we have educated you not only on all
    of the facets and features of Fabric application development, but also on the
    importance of looking at your blockchain ecosystem in a much broader sense to
    include things such as intra-industry consortiums, data governance, and change
    management.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文的过程中，你已经了解了使用Hyperledger Fabric开发和部署企业区块链应用所需考虑的所有方面和因素。我们希望我们不仅在Fabric应用程序开发的所有方面和功能上对你进行了教育，还强调了将你的区块链生态系统视为一个更广泛范围的重要性，包括行业内联盟、数据治理和变更管理等内容。
- en: 'You should walk away from this book feeling that you know how to build a private
    enterprise blockchain system using Hyperledger Fabric and that you know how to
    put together various components of Fabric to create and maintain a robust, secure,
    and scalable blockchain application. Because of a lack of space, some topics have
    been left out for you to explore on your own. Specifically, here are areas that
    merit further consideration:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本书，你应该能够了解如何使用Hyperledger Fabric构建私有企业区块链系统，并且知道如何组合各种Fabric组件来创建和维护一个健壮、安全和可扩展的区块链应用。由于篇幅有限，一些主题留给你自己探索。具体来说，以下是值得进一步考虑的领域：
- en: Using design patterns for integrating Fabric into current or legacy systems
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用设计模式将Fabric集成到当前或遗留系统中
- en: Considering post-production factors such as reliability, availability, and serviceability
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑后期因素，如可靠性、可用性和可维护性
- en: Implementing continuous integration and continuous delivery and DevOps best
    practices to achieve agility in the Fabric network
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施持续集成和持续交付以及DevOps最佳实践，实现Fabric网络的敏捷性
- en: Taking microservices and event-driven architectures into consideration while
    designing your enterprise Fabric architecture
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设计企业Fabric架构时考虑微服务和事件驱动架构
- en: Best practices for achieving resilience and fault tolerance in a Fabric network
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Fabric网络中实现弹性和容错性的最佳实践
- en: Best practices for securing Fabric smart contracts and networks
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fabric智能合约和网络安全的最佳实践
- en: Next Steps
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下一步
- en: You probably have lots of questions. That’s good. Gather those questions and
    send them to us (via [email](mailto:info@myhsts.org) or contact form on our [website](https://www.coding-bootcamps.com/)).
    But in general we recommend that you don’t stop here. Try to find practical problems
    and create and launch their solutions with Hyperledger Fabric.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能有很多问题。那很好。收集这些问题并发送给我们（通过[电子邮件](mailto:info@myhsts.org)或我们网站上的联系表单）。但总的来说，我们建议你不要止步于此。尝试找到实际的问题，并使用Hyperledger
    Fabric创建并启动它们的解决方案。
- en: Beyond practical experience, we recommend you keep reading. As always, check
    out the [Hyperledger website](https://www.hyperledger.org/) to follow the latest
    developments and see the latest projects built with Fabric, as well as to get
    the latest updates on Fabric versions and patches. Likewise, [Fabric Wiki](https://wiki.hyperledger.org/)
    pages provide developers with great hands-on resources for expanding their knowledge
    and expertise on all Hyperledger DLTs, tools, and libraries.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 除了实际经验之外，我们建议你继续阅读。如往常一样，浏览[Hyperledger 网站](https://www.hyperledger.org/)以追踪最新的发展，查看使用
    Fabric 构建的最新项目，以及获取有关 Fabric 版本和补丁的最新更新。同样，[Fabric Wiki](https://wiki.hyperledger.org/)页面为开发人员提供了丰富的实践资源，帮助他们扩展他们对所有
    Hyperledger DLTs、工具和库的知识和专业技能。
- en: To help cement everything you have learned, you need to use it. Experience is
    one way we have already mentioned, but mentorship, teaching, and general presenting
    is another great way to learn. If you have to explain something to someone else,
    especially when the format is formal, like a presentation, it forces you to consolidate
    your ideas and commit your models and generalizations to memory. Don’t fall into
    the trap of thinking that you are not experienced enough to talk about it. You
    are; you are an expert in the experiences you have had. It is very likely that
    you can apply, explain, or teach some of your experiences with Hyperledger Fabric
    in a way that nobody else could. Give it a go!
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 为了巩固你学到的所有知识，你需要运用它。经验是我们已经提到的一种方式，但指导、教学和一般的演示是另一种很好的学习方式。如果你不得不向别人解释某件事情，特别是当形式像演示这样正式时，它会迫使你巩固你的思想，并将你的模型和概括记忆下来。不要陷入认为你经验不足以谈论它的陷阱。你是；你是你拥有的经验的专家。你很可能能够以一种其他人无法做到的方式应用、解释或教授你在
    Hyperledger Fabric 中的一些经验。试一试吧！
- en: Now It’s Your Turn
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现在轮到你了
- en: With that, we will hand it over to you.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 就此，我们将把话说给你听。
- en: As you know, you can find more resources on the accompanying [website](https://www.myhsts.org/).
    But we also want to hear from you. We want to hear about the projects you are
    working on, your challenges, your tips and tricks, and your ideas for the future
    of Hyperledger Fabric. We especially want to talk to you if you are thinking about
    applying Fabric in industry or you are struggling with a problem. We can make
    your life easier with solutions, tips, and assessments to reduce effort, reduce
    risks, and improve performance. From designing a basic proof of concept to deploying
    a large-scale consortium solution, we are available to help. So feel free to reach
    us through our [website](https://www.hashflow.us/).
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所知，你可以在配套的[网站](https://www.myhsts.org/)上找到更多资源。但我们也想听听你的声音。我们想听听你正在从事的项目，你的挑战，你的技巧和窍门，以及你对
    Hyperledger Fabric 未来的想法。如果你正在考虑将 Fabric 应用于行业，或者你在解决一个问题，我们特别希望与你交谈。我们可以通过解决方案、技巧和评估来减少工作量、降低风险和提高性能，让你的生活更轻松。从设计基本的概念验证到部署大规模的联盟解决方案，我们都可以帮助。所以请随时通过我们的[网站](https://www.hashflow.us/)联系我们。
- en: Good luck!
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 祝好运！
- en: Further Reading
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Hyperledger DLTs
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hyperledger 分布式账本技术
- en: '*Hyperledger Cookbook* by Brian Wu, Chuanfeng Zhang, and Andrew Zhang (Packt
    Publishing)'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*Hyperledger Cookbook* 由 Brian Wu、Chuanfeng Zhang 和 Andrew Zhang（Packt Publishing）编写。'
- en: '*Blockchain with Hyperledger Fabric*, Second Edition, by Nitin Gaur et al.
    (Packt Publishing)'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Hyperledger Fabric 区块链*, 第二版, 由 Nitin Gaur 等人编写（Packt Publishing）。'
- en: Ethereum and Solidity
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊和 Solidity
- en: '*Learn Ethereum* by Brian Wu, Zhihong Zou, and Dongying Song (Packt Publishing)'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*学习以太坊* 由 Brian Wu、Zhihong Zou 和 Dongying Song（Packt Publishing）编写。'
- en: ^([1](ch10.xhtml#ch01fn2-marker)) *Where’s Wally*, if you’re reading this outside
    of North America.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch10.xhtml#ch01fn2-marker)) *瓦里先生在哪里*, 如果你是在北美以外地区阅读此书。
